<?xml version="1.0" encoding="UTF-8"?>
<codeintel description="Ext JavaScript framework - version 2.2" name="Ext" version="2.0">
  <file lang="JavaScript" path="extjs">
    <scope ilk="blob" lang="JavaScript" name="ext_22" src="extjs">
      <variable citdl="Object" line="9" lineend="9" name="Ext">
        <variable citdl="Object" line="9" name="dd">
          <scope doc="* Ext JS Library 2.2 * Copyright(c) 2006-2008, Ext JS, LLC." ilk="function" line="9" lineend="25" name="DragTracker" signature="DragTracker(config)">
            <variable ilk="argument" name="config" />
            <variable citdl="dd" name="this" />
          </scope>
          <variable citdl="Object" line="15" lineend="128" name="Registry">
            <scope doc="Resgister a drag drop element&#xA;Value      Description&lt;br /&gt;&#xA;---------  ------------------------------------------&lt;br /&gt;&#xA;handles    Array of DOM nodes that trigger dragging&lt;br /&gt;&#xA;for the element being registered&lt;br /&gt;&#xA;isHandle   True if the element passed in triggers&lt;br /&gt;&#xA;dragging itself, else false&#xA;&lt;/pre&gt;" ilk="function" line="49" lineend="65" name="register" signature="register(el, data)">
              <variable citdl="document.getElementById()" ilk="argument" name="el" />
              <variable citdl="Object" doc="(optional) An custom data object that will be passed between the elements that are involved&#xA;in drag drop operations.  You can populate this object with any arbitrary properties that your own code&#xA;knows how to interpret, plus there are some specific properties known to the Registry that should be&#xA;populated in the data object (if applicable):&#xA;&lt;pre&gt;" ilk="argument" name="data" />
              <variable citdl="Registry" name="this" />
              <variable attributes="__local__ private" citdl="data.handles" line="60" name="hs" />
            </scope>
            <scope doc="Unregister a drag drop element" ilk="function" line="71" lineend="83" name="unregister" signature="unregister(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Registry" name="this" />
              <variable attributes="__local__ private" citdl="getId()" line="72" name="id" />
              <variable attributes="__local__ private" citdl="elements[id]" line="73" name="data" />
              <variable attributes="__local__ private" citdl="data.handles" line="77" name="hs" />
            </scope>
            <scope doc="Returns the handle registered for a DOM Node by id" ilk="function" line="90" lineend="95" name="getHandle" returns="Object" signature="getHandle(id)">
              <variable citdl="String/HTMLElement" doc="The DOM node or id to look up" ilk="argument" name="id" />
              <variable citdl="Registry" name="this" />
            </scope>
            <scope doc="Returns the handle that is registered for the DOM node that is the target of the event" ilk="function" line="102" lineend="105" name="getHandleFromEvent" returns="Object" signature="getHandleFromEvent(e)">
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Registry" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="103" name="t" />
            </scope>
            <scope doc="Returns a custom data object that is registered for a DOM node by id" ilk="function" line="112" lineend="117" name="getTarget" returns="Object" signature="getTarget(id)">
              <variable citdl="String/HTMLElement" doc="The DOM node or id to look up" ilk="argument" name="id" />
              <variable citdl="Registry" name="this" />
            </scope>
            <scope doc="Returns a custom data object that is registered for the DOM node that is the target of the event" ilk="function" line="124" lineend="127" name="getTargetFromEvent" returns="Object" signature="getTargetFromEvent(e)">
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Registry" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="125" name="t" />
            </scope>
          </variable>
          <scope ilk="class" line="16" lineend="173" name="StatusProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair.  This is the&#xA;default drag proxy used by all Ext.dd components." ilk="function" line="16" lineend="30" name="StatusProxy" signature="StatusProxy(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <variable citdl="this.id" line="18" name="id" />
            <variable citdl="Ext.Layer" line="27" name="el" />
            <variable citdl="Ext.get()" line="28" name="ghost" />
            <variable citdl="this.dropNotAllowed" line="29" name="dropStatus" />
            <variable citdl="String" doc="The CSS class to apply to the status element when drop is allowed (defaults to &quot;x-dd-drop-ok&quot;)." line="37" name="dropAllowed" />
            <variable citdl="String" doc="The CSS class to apply to the status element when drop is not allowed (defaults to &quot;x-dd-drop-nodrop&quot;)." line="42" name="dropNotAllowed" />
            <scope doc="Updates the proxy&apos;s visual element to indicate the status of whether or not drop is allowed&#xA;over the current target element." ilk="function" line="49" lineend="55" name="setStatus" signature="setStatus(cssClass)">
              <variable citdl="String" doc="The css class for the new drop status indicator image" ilk="argument" name="cssClass" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Resets the status indicator to the default dropNotAllowed value" ilk="function" line="61" lineend="67" name="reset" signature="reset(clearGhost)">
              <variable citdl="Boolean" doc="True to also remove all content from the ghost, false to preserve it" ilk="argument" name="clearGhost" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <variable citdl="String" line="62" name="className" />
            <scope doc="Updates the contents of the ghost element" ilk="function" line="74" lineend="86" name="update" signature="update(html)">
              <variable citdl="String/HTMLElement" doc="The html that will replace the current innerHTML of the ghost element, or a&#xA;DOM node to append as the child of the ghost element (in which case the innerHTML will be cleared first)." ilk="argument" name="html" />
              <variable citdl="StatusProxy" name="this" />
              <variable attributes="__local__ private" citdl="this.ghost.dom.firstChild" line="82" name="el" />
            </scope>
            <scope doc="Returns the underlying proxy {@link Ext.Layer}" ilk="function" line="92" lineend="94" name="getEl" returns="Ext.Layer" signature="getEl()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Returns the ghost element" ilk="function" line="100" lineend="102" name="getGhost" returns="Ext.Element" signature="getGhost()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Hides the proxy" ilk="function" line="108" lineend="113" name="hide" signature="hide(clear)">
              <variable citdl="Boolean" doc="True to reset the status and clear the ghost contents, false to preserve them" ilk="argument" name="clear" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Stops the repair animation if it&apos;s currently running" ilk="function" line="118" lineend="122" name="stop" signature="stop()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Displays this proxy" ilk="function" line="127" lineend="129" name="show" signature="show()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Force the Layer to sync its shadow and shim positions to the element" ilk="function" line="134" lineend="136" name="sync" signature="sync()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Causes the proxy to return to its position of origin via an animation.  Should be called after an&#xA;invalid drop operation by the item being dragged." ilk="function" line="145" lineend="162" name="repair" signature="repair(xy, callback, scope)">
              <variable citdl="Array" doc="The XY position of the element ([x, y])" ilk="argument" name="xy" />
              <variable citdl="Function" doc="The function to call after the repair is complete" ilk="argument" name="callback" />
              <variable citdl="Object" doc="The scope in which to execute the callback" ilk="argument" name="scope" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <variable citdl="callback" line="146" name="callback" />
            <variable citdl="scope" line="147" name="scope" />
            <variable citdl="this.el.shift()" line="158" name="anim" />
            <scope doc="private" ilk="function" line="165" lineend="172" name="afterRepair" signature="afterRepair()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
          </scope>
          <scope doc="// Internal developer documentation -- will not show up in&#xA;API docs * @class Ext.dd.PanelProxy * A custom drag proxy&#xA;implementation specific to {@link Ext.Panel}s." ilk="class" line="17" lineend="111" name="PanelProxy">
            <scope attributes="__ctor__" doc="// Internal developer documentation -- will not show up in&#xA;API docs * @class Ext.dd.PanelProxy * A custom drag proxy&#xA;implementation specific to {@link Ext.Panel}s." ilk="function" line="17" lineend="21" name="PanelProxy" signature="PanelProxy(panel, config)">
              <variable ilk="argument" name="panel" />
              <variable ilk="argument" name="config" />
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <variable citdl="panel" line="18" name="panel" />
            <variable citdl="this.panel.id" line="19" name="id" />
            <variable citdl="Boolean" doc="false to drag with no proxy (defaults to true)." line="28" name="insertProxy" />
            <variable citdl="Ext.emptyFn" doc="private overrides" line="31" name="setStatus" />
            <variable citdl="Ext.emptyFn" line="32" name="reset" />
            <variable citdl="Ext.emptyFn" line="33" name="update" />
            <variable citdl="Ext.emptyFn" line="34" name="stop" />
            <variable citdl="Ext.emptyFn" line="35" name="sync" />
            <scope doc="Gets the proxy&apos;s element" ilk="function" line="41" lineend="43" name="getEl" returns="Element" signature="getEl()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Gets the proxy&apos;s ghost element" ilk="function" line="49" lineend="51" name="getGhost" returns="Element" signature="getGhost()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Gets the proxy&apos;s element" ilk="function" line="57" lineend="59" name="getProxy" returns="Element" signature="getProxy()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Hides the proxy" ilk="function" line="64" lineend="74" name="hide" signature="hide()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <variable citdl="String" line="70" name="display" />
            <scope doc="Shows the proxy" ilk="function" line="79" lineend="89" name="show" signature="show()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <variable citdl="this.panel.createGhost()" line="81" name="ghost" />
            <variable citdl="this.panel.el.insertSibling()" line="84" name="proxy" />
            <scope doc="private" ilk="function" line="92" lineend="97" name="repair" signature="repair(xy, callback, scope)">
              <variable ilk="argument" name="xy" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Moves the proxy to a different position in the DOM.  This is typically called while dragging the Panel&#xA;to keep the proxy sync&apos;d to the Panel&apos;s location." ilk="function" line="106" lineend="110" name="moveProxy" signature="moveProxy(parentNode, before)">
              <variable citdl="HTMLElement" doc="The proxy&apos;s parent DOM node" ilk="argument" name="parentNode" />
              <variable citdl="HTMLElement" doc="(optional) The sibling node before which the proxy should be inserted (defaults&#xA;to the parent&apos;s last child if not specified)" ilk="argument" name="before" />
              <variable citdl="PanelProxy" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="17" lineend="32" name="DragSource">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple class that provides the basic implementation needed to make any element draggable." ilk="function" line="17" lineend="32" name="DragSource" signature="DragSource(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DragSource" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="18" name="el" />
            <variable citdl="Object" line="20" lineend="20" name="dragData" />
            <variable citdl="Ext.dd.StatusProxy" line="26" name="proxy" />
            <variable citdl="Boolean" line="31" name="dragging" />
          </scope>
          <scope ilk="class" line="18" lineend="30" name="DropTarget">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple class that provides the basic implementation needed to make any element a drop target that can have&#xA;draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided." ilk="function" line="18" lineend="30" name="DropTarget" signature="DropTarget(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DropTarget" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="19" name="el" />
          </scope>
          <scope ilk="class" line="18" lineend="23" name="DragZone">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides a container DD instance that proxies for multiple child node sources.&lt;br /&gt;&#xA;By default, this class requires that draggable child nodes are registered with {@link Ext.dd.Registry}." ilk="function" line="18" lineend="23" name="DragZone" signature="DragZone(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DragZone" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="18" lineend="20" name="DropZone">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides a container DD instance that proxies for multiple child node targets.&lt;br /&gt;&#xA;By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}." ilk="function" line="18" lineend="20" name="DropZone" signature="DropZone(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DropZone" name="this" />
            </scope>
          </scope>
          <variable citdl="Ext.lib.Region" line="20" name="dragRegion" />
          <variable citdl="Object" line="29" lineend="202" name="ScrollManager">
            <scope doc="Registers new overflow element(s) to auto scroll" ilk="function" line="128" lineend="137" name="register" signature="register(el)">
              <variable citdl="Mixed/Array" doc="The id of or the element to be scrolled or an array of either" ilk="argument" name="el" />
              <variable citdl="ScrollManager" name="this" />
            </scope>
            <scope doc="Unregisters overflow element(s) so they are no longer scrolled" ilk="function" line="143" lineend="152" name="unregister" signature="unregister(el)">
              <variable citdl="Mixed/Array" doc="The id of or the element to be removed or an array of either" ilk="argument" name="el" />
              <variable citdl="ScrollManager" name="this" />
            </scope>
            <variable citdl="Number" doc="The number of pixels from the top or bottom edge of a container the pointer needs to be to&#xA;trigger scrolling (defaults to 25)" line="159" name="vthresh" />
            <variable citdl="Number" doc="The number of pixels from the right or left edge of a container the pointer needs to be to&#xA;trigger scrolling (defaults to 25)" line="165" name="hthresh" />
            <variable citdl="Number" doc="The number of pixels to scroll in each scroll increment (defaults to 50)" line="171" name="increment" />
            <variable citdl="Number" doc="The frequency of scrolls in milliseconds (defaults to 500)" line="177" name="frequency" />
            <variable citdl="Boolean" doc="True to animate the scroll (defaults to true)" line="183" name="animate" />
            <variable citdl="Number" doc="The animation duration in seconds -&#xA;MUST BE less than Ext.dd.ScrollManager.frequency! (defaults to .4)" line="190" name="animDuration" />
            <scope doc="Manually trigger a cache refresh." ilk="function" line="195" lineend="201" name="refreshCache" signature="refreshCache()">
              <variable citdl="ScrollManager" name="this" />
            </scope>
          </variable>
          <scope ilk="class" line="66" lineend="1166" name="DragDrop">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Defines the interface and base operation of items that that can be&#xA;dragged or can be drop targets.  It was designed to be extended, overriding&#xA;the event handlers for startDrag, onDrag, onDragOver and onDragOut.&#xA;Up to three html elements can be associated with a DragDrop instance:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;linked element: the element that is passed into the constructor.&#xA;This is the element which defines the boundaries for interaction with&#xA;other DragDrop objects.&lt;/li&gt;&#xA;&lt;li&gt;handle element(s): The drag operation only occurs if the element that&#xA;was clicked matches a handle element.  By default this is the linked&#xA;element, but there are times that you will want only a portion of the&#xA;linked element to initiate the drag operation, and the setHandleElId()&#xA;method provides a way to define this.&lt;/li&gt;&#xA;&lt;li&gt;drag element: this represents the element that would be moved along&#xA;with the cursor during a drag operation.  By default, this is the linked&#xA;element itself as in {@link Ext.dd.DD}.  setDragElId() lets you define&#xA;a separate element that would be moved, as in {@link Ext.dd.DDProxy}.&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;This class should not be instantiated until the onload event to ensure that&#xA;the associated elements are available.&#xA;The following would define a DragDrop obj that would interact with any&#xA;other DragDrop obj in the &quot;group1&quot; group:&#xA;&lt;pre&gt;&#xA;dd = new Ext.dd.DragDrop(&quot;div1&quot;, &quot;group1&quot;);&#xA;&lt;/pre&gt;&#xA;Since none of the event handlers have been implemented, nothing would&#xA;actually happen if you were to run the code above.  Normally you would&#xA;override this class or one of the default implementations, but you can&#xA;also override the methods you want on an instance of the class...&#xA;&lt;pre&gt;&#xA;dd.onDragDrop = function(e, id) {&#xA;&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);&#xA;}&#xA;&lt;/pre&gt;" ilk="function" line="66" lineend="70" name="DragDrop" signature="DragDrop(id, sGroup, config)">
              <variable citdl="String" doc="of the element that is linked to this instance" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DragDrop:&#xA;padding, isTarget, maintainOffset, primaryButtonOnly" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="String" doc="The id of the element associated with this object.  This is what we&#xA;refer to as the &quot;linked element&quot; because the size and position of&#xA;this element is used to determine when the drag and drop objects have&#xA;interacted." line="82" name="id" />
            <variable citdl="Object" doc="Configuration attributes passed into the constructor" line="89" name="config" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The id of the element that will be dragged.  By default this is same&#xA;as the linked element , but could be changed to another element. Ex:&#xA;Ext.dd.DDProxy" line="99" name="dragElId" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The ID of the element that initiates the drag operation.  By default&#xA;this is the linked element, but could be changed to be a child of this&#xA;element.  This lets us do things like only starting the drag when the&#xA;header element within the linked html element is clicked." line="110" name="handleElId" />
            <variable citdl="Object" doc="An object who&apos;s property names identify HTML tags to be considered invalid as drag handles.&#xA;A non-null property value identifies the tag as invalid. Defaults to the&#xA;following value which prevents drag operations from being initiated by &amp;lt;a&gt; elements:&lt;pre&gt;&lt;code&gt;&#xA;A: &quot;A&quot;&#xA;}&lt;/code&gt;&lt;/pre&gt;" line="122" lineend="614" name="invalidHandleTypes">
              <variable citdl="String" line="614" name="A" />
            </variable>
            <variable citdl="Object" doc="An object who&apos;s property names identify the IDs of elements to be considered invalid as drag handles.&#xA;A non-null property value identifies the ID as invalid. For example, to prevent&#xA;dragging from being initiated on element ID &quot;foo&quot;, use:&lt;pre&gt;&lt;code&gt;&#xA;foo: true&#xA;}&lt;/code&gt;&lt;/pre&gt;" line="134" lineend="615" name="invalidHandleIds" />
            <variable citdl="Array" doc="An Array of CSS class names for elements to be considered in valid as drag handles." line="141" name="invalidHandleClasses" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="150" name="startPageX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="159" name="startPageY" />
            <variable citdl="true, &apos;group2&apos;:true" doc="The group defines a logical collection of DragDrop objects that are&#xA;related.  Instances only get events when interacting with other&#xA;DragDrop object in the same group.  This lets us define multiple&#xA;groups using a single DragDrop subclass if we want." line="169" lineend="592" name="groups" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Individual drag/drop instances can be locked.  This will prevent&#xA;onmousedown start drag." line="178" name="locked" />
            <scope doc="Lock this instance" ilk="function" line="184" lineend="184" name="lock" signature="lock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unlock this instace" ilk="function" line="190" lineend="190" name="unlock" signature="unlock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Boolean" doc="By default, all insances can be a drop target.  This can be disabled by&#xA;setting isTarget to false." line="198" name="isTarget" />
            <variable citdl="Array" doc="The padding configured for this drag and drop object for calculating&#xA;the drop zone intersection with this object." line="206" name="padding" />
            <variable attributes="private" citdl="Ext.getDom()" doc="PRIVATE: Cached reference to the linked element" line="213" name="_domRef" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Internal typeof flag" line="220" name="__ygDragDrop" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when horizontal contraints are applied" line="228" name="constrainX" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when vertical contraints are applied" line="236" name="constrainY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The left constraint" line="244" name="minX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The right constraint" line="252" name="maxX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The up constraint" line="261" name="minY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The down constraint" line="269" name="maxY" />
            <variable citdl="Boolean" doc="Maintain offsets when we resetconstraints.  Set to true when you want&#xA;the position of the element relative to its parent to stay the same&#xA;when the page changes" line="279" name="maintainOffset" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;horizontal graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="288" name="xTicks" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;vertical graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="297" name="yTicks" />
            <variable citdl="Boolean" doc="By default the drag and drop instance will only respond to the primary&#xA;button click (left button for a right-handed mouse).  Set to true to&#xA;allow drag and drop to start with any mouse click that is propogated&#xA;by the browser" line="307" name="primaryButtonOnly" />
            <variable citdl="Boolean" doc="The availabe property is false until the linked dom element is accessible." line="314" name="available" />
            <variable citdl="Boolean" doc="By default, drags can only be initiated if the mousedown occurs in the&#xA;region the linked element is.  This is done in part to work around a&#xA;bug in some browsers that mis-report the mousedown if the previous&#xA;mouseup happened outside of the window.  This property is set to true&#xA;if outer handles are defined." line="327" name="hasOuterHandles" />
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the startDrag event" ilk="function" line="334" lineend="334" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called after a drag/drop object is clicked&#xA;and the drag or mousedown time thresholds have beeen met." ilk="function" line="343" lineend="343" name="startDrag" signature="startDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDrag event" ilk="function" line="350" lineend="350" name="b4Drag" signature="b4Drag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called during the onMouseMove event while dragging an&#xA;object." ilk="function" line="358" lineend="358" name="onDrag" signature="onDrag(e)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element fist begins hovering over&#xA;another DragDrop obj" ilk="function" line="369" lineend="369" name="onDragEnter" signature="onDragEnter(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of one or more&#xA;dragdrop items being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOver event" ilk="function" line="376" lineend="376" name="b4DragOver" signature="b4DragOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element is hovering over another&#xA;DragDrop obj" ilk="function" line="387" lineend="387" name="onDragOver" signature="onDragOver(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of dd items&#xA;being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOut event" ilk="function" line="394" lineend="394" name="b4DragOut" signature="b4DragOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when we are no longer hovering over an element" ilk="function" line="404" lineend="404" name="onDragOut" signature="onDragOut(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was hovering over.  In INTERSECT mode, an array of dd items&#xA;that the mouse is no longer over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragDrop event" ilk="function" line="411" lineend="411" name="b4DragDrop" signature="b4DragDrop(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on another DragDrop&#xA;obj" ilk="function" line="422" lineend="422" name="onDragDrop" signature="onDragDrop(e, id)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was dropped on.  In INTERSECT mode, an array of dd items this&#xA;was dropped on." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on an area with no&#xA;drop target" ilk="function" line="430" lineend="430" name="onInvalidDrop" signature="onInvalidDrop(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the endDrag event" ilk="function" line="437" lineend="437" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Fired when we are done dragging the object" ilk="function" line="444" lineend="444" name="endDrag" signature="endDrag(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code executed immediately before the onMouseDown event" ilk="function" line="452" lineend="452" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mousedown" ilk="function" line="459" lineend="459" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mouseup" ilk="function" line="466" lineend="466" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Override the onAvailable method to do what is needed after the initial&#xA;position was determined." ilk="function" line="473" lineend="474" name="onAvailable" signature="onAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Object" doc="Provides default constraint padding to &quot;constrainTo&quot; elements (defaults to {left: 0, right:0, top:0, bottom:0})." line="480" lineend="480" name="defaultPadding">
              <variable citdl="Number" line="480" name="top" />
              <variable citdl="Number" line="480" name="right" />
              <variable citdl="Number" line="480" name="bottom" />
              <variable citdl="Number" line="480" name="left" />
            </variable>
            <scope doc="Initializes the drag drop object&apos;s constraints to restrict movement to a certain element.&#xA;&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var dd = new Ext.dd.DDProxy(&quot;dragDiv1&quot;, &quot;proxytest&quot;,&#xA;{ dragElId: &quot;existingProxyDiv&quot; });&#xA;dd.startDrag = function(){&#xA;this.constrainTo(&quot;parent-id&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;Or you can initalize it using the {@link Ext.Element} object:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;Ext.get(&quot;dragDiv1&quot;).initDDProxy(&quot;proxytest&quot;, {dragElId: &quot;existingProxyDiv&quot;}, {&#xA;startDrag : function(){&#xA;this.constrainTo(&quot;parent-id&quot;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="507" lineend="536" name="constrainTo" signature="constrainTo(constrainTo, pad, inContent)">
              <variable citdl="Mixed" doc="The element to constrain to." ilk="argument" name="constrainTo" />
              <variable citdl="Object/Number" doc="(optional) Pad provides a way to specify &quot;padding&quot; of the constraints,&#xA;and can be either a number for symmetrical padding (4 would be equal to {left:4, right:4, top:4, bottom:4}) or&#xA;an object containing the sides to pad. For example: {right:10, bottom:10}" ilk="argument" name="pad" />
              <variable citdl="Boolean" doc="(optional) Constrain the draggable in the content box of the element (inside padding and borders)" ilk="argument" name="inContent" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get().getBox()" line="512" name="b" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="513" name="ce" />
              <variable attributes="__local__ private" citdl="ce.getScroll()" line="514" name="s" />
              <variable attributes="__local__ private" citdl="Object" line="515" lineend="520" name="c">
                <variable citdl="s.top" line="517" name="y" />
                <variable citdl="s.left" line="517" name="x" />
                <variable citdl="Ext.lib.Dom.getViewHeight()" line="517" name="height" />
                <variable citdl="Ext.lib.Dom.getViewWidth()" line="517" name="width" />
              </variable>
              <variable attributes="__local__ private" citdl="ce.dom" line="515" name="cd" />
              <variable attributes="__local__ private" citdl="ce.getXY()" line="519" name="xy" />
              <variable attributes="__local__ private" citdl="b.y" line="524" name="topSpace" />
              <variable attributes="__local__ private" citdl="b.x" line="525" name="leftSpace" />
            </scope>
            <scope doc="Returns a reference to the linked element" ilk="function" line="543" lineend="549" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns a reference to the actual element to drag.  By default this is&#xA;the same as the html element, but it can be assigned to another&#xA;element. An example of this can be found in Ext.dd.DDProxy" ilk="function" line="558" lineend="560" name="getDragEl" returns="HTMLElement" signature="getDragEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Sets up the DragDrop object.  Must be called in the constructor of any&#xA;Ext.dd.DragDrop subclass" ilk="function" line="570" lineend="574" name="init" signature="init(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Initializes Targeting functionality only... the object does not&#xA;get a mousedown handler." ilk="function" line="584" lineend="621" name="initTarget" signature="initTarget(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Ext.dd.DDM" doc="create a local reference to the drag and drop manager" line="590" name="DDM" />
            <scope doc="Applies the configuration parameters that were passed into the constructor.&#xA;This is supposed to happen at each level through the inheritance chain.  So&#xA;a DDProxy implentation will execute apply config on DDProxy, DD, and&#xA;DragDrop in order to get all of the parameters that are available in&#xA;each object." ilk="function" line="631" lineend="640" name="applyConfig" signature="applyConfig()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Executed when the linked element is available" ilk="function" line="647" lineend="651" name="handleOnAvailable" signature="handleOnAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Configures the padding for the target zone in px.  Effectively expands&#xA;(or reduces) the virtual object size for targeting calculations.&#xA;Supports css-style shorthand; if only one parameter is passed, all sides&#xA;will have that padding, and if only two are passed, the top and bottom&#xA;will have the first param, the left and right the second." ilk="function" line="665" lineend="674" name="setPadding" signature="setPadding(iTop, iRight, iBot, iLeft)">
              <variable citdl="Number" doc="Top pad" ilk="argument" name="iTop" />
              <variable citdl="Number" doc="Right pad" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="Bot pad" ilk="argument" name="iBot" />
              <variable citdl="Number" doc="Left pad" ilk="argument" name="iLeft" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Stores the initial placement of the linked element." ilk="function" line="682" lineend="702" name="setInitPosition" signature="setInitPosition(diffX, diffY)">
              <variable citdl="Number" doc="the X offset, default 0" ilk="argument" name="diffX" />
              <variable citdl="Number" doc="the Y offset, default 0" ilk="argument" name="diffY" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="683" name="el" />
              <variable attributes="__local__ private" citdl="diffX" line="689" name="dx" />
              <variable attributes="__local__ private" citdl="diffY" line="690" name="dy" />
              <variable attributes="__local__ private" citdl="Dom.getXY()" line="692" name="p" />
            </scope>
            <variable citdl="p[0]" line="694" name="initPageX" />
            <variable citdl="p[1]" line="695" name="initPageY" />
            <variable citdl="p[0]" line="697" name="lastPageX" />
            <variable citdl="p[1]" line="698" name="lastPageY" />
            <scope attributes="private" doc="PRIVATE: Sets the start position of the element.  This is set when the obj&#xA;is initialized, the reset when a drag is started." ilk="function" line="711" lineend="717" name="setStartPosition" signature="setStartPosition(pos)">
              <variable doc="current position (from previous lookup)" ilk="argument" name="pos" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="pos" line="712" name="p" />
            </scope>
            <variable line="713" name="deltaSetXY" />
            <scope doc="Add this instance to a group of related drag/drop objects.  All&#xA;instances belong to at least one group, and can belong to as many&#xA;groups as needed." ilk="function" line="726" lineend="729" name="addToGroup" signature="addToGroup(sGroup)">
              <variable citdl="String" doc="the name of the group" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove&apos;s this instance from the supplied interaction group" ilk="function" line="736" lineend="742" name="removeFromGroup" signature="removeFromGroup(sGroup)">
              <variable citdl="String" doc="The group to drop" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify that an element other than the linked element&#xA;will be moved with the cursor during a drag" ilk="function" line="750" lineend="752" name="setDragElId" signature="setDragElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify a child of the linked element that should be&#xA;used to initiate the drag operation.  An example of this would be if&#xA;you have a content div with text and links.  Clicking anywhere in the&#xA;content area would normally start the drag operation.  Use this method&#xA;to specify that an element inside of the content div is the element&#xA;that starts the drag operation." ilk="function" line="765" lineend="771" name="setHandleElId" signature="setHandleElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to&#xA;initiate the drag." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to set an element outside of the linked element as a drag&#xA;handle" ilk="function" line="779" lineend="788" name="setOuterHandleElId" signature="setOuterHandleElId(id)">
              <variable doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove all drag and drop hooks for this element" ilk="function" line="794" lineend="799" name="unreg" signature="unreg()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope ilk="function" line="801" lineend="803" name="destroy" signature="destroy()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns true if this instance is locked, or the drag drop mgr is locked&#xA;(meaning that all drag/drop is disabled on the page.)" ilk="function" line="812" lineend="814" name="isLocked" returns="Boolean" signature="isLocked()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fired when this object is clicked" ilk="function" line="823" lineend="854" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable citdl="Ext.dd.DragDrop" doc="the clicked dd object (this dd obj)" ilk="argument" name="oDD" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Point" line="834" name="pt" />
            </scope>
            <scope ilk="function" line="856" lineend="861" name="clickValidator" signature="clickValidator(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="e.getTarget()" line="857" name="target" />
            </scope>
            <scope doc="Allows you to specify a tag name that should not start a drag operation&#xA;when clicked.  This is designed to facilitate embedding links within a&#xA;drag handle that do something other than start the drag." ilk="function" line="870" lineend="873" name="addInvalidHandleType" signature="addInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to exclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="871" name="type" />
            </scope>
            <scope doc="Lets you to specify an element id for a child of a drag handle&#xA;that should not initiate a drag" ilk="function" line="881" lineend="886" name="addInvalidHandleId" signature="addInvalidHandleId(id)">
              <variable citdl="String" doc="the element id of the element you wish to ignore" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Lets you specify a css class of elements that will not initiate a drag" ilk="function" line="893" lineend="895" name="addInvalidHandleClass" signature="addInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the elements you wish to ignore" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an excluded tag name set by addInvalidHandleType" ilk="function" line="902" lineend="906" name="removeInvalidHandleType" signature="removeInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to unexclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="903" name="type" />
            </scope>
            <scope doc="Unsets an invalid handle id" ilk="function" line="913" lineend="918" name="removeInvalidHandleId" signature="removeInvalidHandleId(id)">
              <variable citdl="String" doc="the id of the element to re-enable" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an invalid css class" ilk="function" line="926" lineend="932" name="removeInvalidHandleClass" signature="removeInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the element(s) you wish to&#xA;re-enable" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Checks the tag exclusion list to see if this click should be ignored" ilk="function" line="940" lineend="960" name="isValidHandleChild" returns="Boolean" signature="isValidHandleChild(node)">
              <variable citdl="HTMLElement" doc="the HTMLElement to evaluate" ilk="argument" name="node" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="942" name="valid" />
              <variable attributes="__local__ private" citdl="node.nodeName.toUpperCase()" doc="var n = (node.nodeName == &quot;#text&quot;) ? node.parentNode : node;" line="944" name="nodeName" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Create the array of horizontal tick marks if an interval was specified&#xA;in setXConstraint()." ilk="function" line="968" lineend="989" name="setXTicks" signature="setXTicks(iStartX, iTickSize)">
              <variable ilk="argument" name="iStartX" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="972" lineend="972" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="970" name="xTickSize" />
            <scope attributes="private" doc="PRIVATE: Create the array of vertical tick marks if an interval was specified in&#xA;setYConstraint()." ilk="function" line="997" lineend="1018" name="setYTicks" signature="setYTicks(iStartY, iTickSize)">
              <variable ilk="argument" name="iStartY" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="1001" lineend="1001" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="999" name="yTickSize" />
            <scope doc="By default, the element can be dragged any place on the screen.  Use&#xA;this method to limit the horizontal travel of the element.  Pass in&#xA;0,0 for the parameters if you want to lock the drag to the y axis." ilk="function" line="1032" lineend="1041" name="setXConstraint" signature="setXConstraint(iLeft, iRight, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move to the left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move to the&#xA;right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element&#xA;should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="iLeft" line="1033" name="leftConstraint" />
            <variable citdl="iRight" line="1034" name="rightConstraint" />
            <scope doc="Clears any constraints applied to this instance.  Also clears ticks&#xA;since they can&apos;t exist independent of a constraint at this time." ilk="function" line="1048" lineend="1052" name="clearConstraints" signature="clearConstraints()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Clears any tick interval defined for this instance" ilk="function" line="1058" lineend="1063" name="clearTicks" signature="clearTicks()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="By default, the element can be dragged any place on the screen.  Set&#xA;this to limit the vertical travel of the element.  Pass in 0,0 for the&#xA;parameters if you want to lock the drag to the x axis." ilk="function" line="1075" lineend="1085" name="setYConstraint" signature="setYConstraint(iUp, iDown, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="iUp" line="1076" name="topConstraint" />
            <variable citdl="iDown" line="1077" name="bottomConstraint" />
            <scope doc="resetConstraints must be called if you manually reposition a dd element." ilk="function" line="1092" lineend="1119" name="resetConstraints" signature="resetConstraints()">
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" doc="figure out how much this thing has moved" line="1098" name="dx" />
              <variable attributes="__local__ private" line="1099" name="dy" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Normally the drag element is moved pixel by pixel, but we can specify&#xA;that it move a number of pixels at a time.  This method resolves the&#xA;location when we have it set up like this." ilk="function" line="1131" lineend="1155" name="getTick" returns="Number" signature="getTick(val, tickArray)">
              <variable citdl="Number" doc="where we want to place the object" ilk="argument" name="val" />
              <variable citdl="Array" doc="sorted array of valid points" ilk="argument" name="tickArray" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="i" line="1143" name="next" />
              <variable attributes="__local__ private" citdl="val" line="1145" name="diff1" />
              <variable attributes="__local__ private" citdl="tickArray[next]" line="1146" name="diff2" />
            </scope>
            <scope doc="toString method" ilk="function" line="1162" lineend="1164" name="toString" returns="String" signature="toString()">
              <variable citdl="DragDrop" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" line="1189" lineend="2452" name="DragDropMgr">
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Two dimensional Array of registered DragDrop objects.  The first&#xA;dimension is the DragDrop item group, the second the DragDrop&#xA;object." line="1204" lineend="2195" name="ids" />
            <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Array of element ids defined as drag handles.  Used to determine&#xA;if the element that generated the mousedown event is actually the&#xA;handle and not the html element itself." line="1215" lineend="1215" name="handleIds" />
            <variable attributes="private __static__" citdl="DragDrop" doc="PRIVATE STATIC: the DragDrop object that is currently being dragged&#xA;**/" line="1224" name="dragCurrent" />
            <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: the DragDrop object(s) that are being hovered over" line="1233" lineend="1762" name="dragOvers" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the X distance between the cursor and the object being dragged" line="1242" name="deltaX" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the Y distance between the cursor and the object being dragged" line="1251" name="deltaY" />
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should prevent the default behavior of the&#xA;events we define. By default this is true, but this can be set to&#xA;false if you need the default behavior (not recommended)" line="1261" name="preventDefault" />
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should stop the propagation of the events&#xA;we generate. This is true by default but you may want to set it to&#xA;false if the html element contains other features that require the&#xA;mouse click." line="1272" name="stopPropagation" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Internal flag that is set to true when drag and drop has been&#xA;intialized" line="1281" name="initialized" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: All drag and drop can be disabled." line="1289" name="locked" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: Called the first time an element is registered." ilk="function" line="1297" lineend="1299" name="init" signature="init()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable attributes="__static__" citdl="Number" doc="STATIC: In point mode, drag and drop interaction is defined by the&#xA;location of the cursor during the drag/drop" line="1308" name="POINT" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: In intersect mode, drag and drop interaction is defined by the&#xA;overlap of two or more drag and drop objects." line="1317" name="INTERSECT" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: The current drag and drop mode.  Default: POINT" line="1325" name="mode" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: Runs method on all drag and drop objects" ilk="function" line="1333" lineend="1343" name="_execOnAll" signature="_execOnAll(sMethod, args)">
              <variable ilk="argument" name="sMethod" />
              <variable ilk="argument" name="args" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.ids[i][j]" line="1336" name="oDD" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Drag and drop initialization.  Sets up the global event handlers" ilk="function" line="1351" lineend="1362" name="_onLoad" signature="_onLoad()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Reset constraints on all drag and drop objs" ilk="function" line="1370" lineend="1372" name="_onResize" signature="_onResize(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Lock all drag and drop functionality" ilk="function" line="1379" lineend="1379" name="lock" signature="lock()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Unlock all drag and drop functionality" ilk="function" line="1386" lineend="1386" name="unlock" signature="unlock()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Is drag and drop locked?" ilk="function" line="1394" lineend="1394" name="isLocked" returns="Boolean" signature="isLocked()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Location cache that is set for all drag drop objects when a drag is&#xA;initiated, cleared when the drag is finished." line="1403" lineend="1403" name="locationCache" />
            <variable attributes="__static__" citdl="Boolean" doc="STATIC: Set useCache to false if you want to force object the lookup of each&#xA;drag and drop linked element constantly during a drag." line="1412" name="useCache" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: The number of pixels that the mouse needs to move after the&#xA;mousedown before the drag is initiated.  Default=3;" line="1421" name="clickPixelThresh" />
            <variable attributes="__static__" citdl="Number" doc="STATIC: The number of milliseconds after the mousedown event to initiate the&#xA;drag if we don&apos;t get a mouseup event. Default=1000" line="1430" name="clickTimeThresh" />
            <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Flag that indicates that either the drag pixel threshold or the&#xA;mousdown time threshold has been met" line="1440" name="dragThreshMet" />
            <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Timeout used for the click time threshold" line="1449" name="clickTimeout" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The X position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="1459" name="startX" />
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The Y position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="1469" name="startY" />
            <scope attributes="__static__" doc="STATIC: Each DragDrop instance must be registered with the DragDropMgr.&#xA;This is executed in DragDrop.init()" ilk="function" line="1479" lineend="1486" name="regDragDrop" signature="regDragDrop(oDD, sGroup)">
              <variable citdl="DragDrop" doc="the DragDrop object to register" ilk="argument" name="oDD" />
              <variable citdl="String" doc="the name of the group this element belongs to" ilk="argument" name="sGroup" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Removes the supplied dd instance from the supplied group. Executed&#xA;by DragDrop.removeFromGroup, so don&apos;t call this function directly." ilk="function" line="1495" lineend="1504" name="removeDDFromGroup" signature="removeDDFromGroup(oDD, sGroup)">
              <variable ilk="argument" name="oDD" />
              <variable ilk="argument" name="sGroup" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.ids[sGroup]" line="1500" name="obj" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Unregisters a drag and drop item.  This is executed in&#xA;DragDrop.unreg, use that method instead of calling this directly." ilk="function" line="1513" lineend="1520" name="_remove" signature="_remove(oDD)">
              <variable ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Each DragDrop handle element must be registered.  This is done&#xA;automatically when executing DragDrop.setHandleElId()" ilk="function" line="1531" lineend="1536" name="regHandle" signature="regHandle(sDDId, sHandleId)">
              <variable citdl="String" doc="the DragDrop id this element is a handle for" ilk="argument" name="sDDId" />
              <variable citdl="String" doc="the id of the element that is the drag&#xA;handle" ilk="argument" name="sHandleId" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop item." ilk="function" line="1547" lineend="1549" name="isDragDrop" returns="Boolean" signature="isDragDrop(id)">
              <variable citdl="String" doc="the element id to check" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the drag and drop instances that are in all groups the&#xA;passed in instance belongs to." ilk="function" line="1560" lineend="1575" name="getRelated" returns="Array" signature="getRelated(p_oDD, bTargetsOnly)">
              <variable citdl="DragDrop" doc="the obj to get related data for" ilk="argument" name="p_oDD" />
              <variable citdl="Boolean" doc="if true, only return targetable objs" ilk="argument" name="bTargetsOnly" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="1561" name="oDDs" />
              <variable attributes="__local__ private" citdl="this.ids[i][j]" line="1564" name="dd" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns true if the specified dd target is a legal target for&#xA;the specifice drag obj" ilk="function" line="1587" lineend="1596" name="isLegalTarget" returns="Boolean" signature="isLegalTarget(oDD, oTargetDD)">
              <variable ilk="argument" name="oDD" />
              <variable ilk="argument" name="oTargetDD" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.getRelated()" line="1588" name="targets" />
            </scope>
            <scope attributes="__static__" doc="STATIC: My goal is to be able to transparently determine if an object is&#xA;typeof DragDrop, and the exact subclass of DragDrop.  typeof&#xA;returns &quot;object&quot;, oDD.constructor.toString() always returns&#xA;&quot;DragDrop&quot; and not the name of the subclass.  So for now it just&#xA;evaluates a well-known variable in DragDrop." ilk="function" line="1609" lineend="1611" name="isTypeOfDD" returns="Boolean" signature="isTypeOfDD(oDD)">
              <variable ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop handle for the given Drag Drop object." ilk="function" line="1622" lineend="1625" name="isHandle" returns="Boolean" signature="isHandle(sDDId, sHandleId)">
              <variable ilk="argument" name="sDDId" />
              <variable ilk="argument" name="sHandleId" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the DragDrop instance for a given id" ilk="function" line="1634" lineend="1641" name="getDDById" returns="DragDrop" signature="getDDById(id)">
              <variable citdl="String" doc="the id of the DragDrop object" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Fired after a registered DragDrop object gets the mousedown event.&#xA;Sets up the events required to track the object being dragged" ilk="function" line="1652" lineend="1677" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable doc="the DragDrop object being dragged" ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="oDD.getEl()" line="1660" name="el" />
            </scope>
            <variable citdl="e.getTarget()" line="1656" name="currentTarget" />
            <scope attributes="__static__" doc="STATIC: Fired when either the drag pixel threshol or the mousedown hold&#xA;time threshold has been met." ilk="function" line="1687" lineend="1694" name="startDrag" signature="startDrag(x, y)">
              <variable citdl="Number" doc="the X position of the original mousedown" ilk="argument" name="x" />
              <variable citdl="Number" doc="the Y position of the original mousedown" ilk="argument" name="y" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mouseup event.  Will be invoked&#xA;from the context of the document." ilk="function" line="1704" lineend="1723" name="handleMouseUp" signature="handleMouseUp(e)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Utility to stop event propagation and event default, if these&#xA;features are turned on." ilk="function" line="1732" lineend="1740" name="stopEvent" signature="stopEvent(e)">
              <variable citdl="Event" doc="the event as returned by this.getEvent()" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to clean up event handlers after the drag&#xA;operation is complete" ilk="function" line="1750" lineend="1763" name="stopDrag" signature="stopDrag(e)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mousemove event.  Will be invoked&#xA;from the context of the html element." ilk="function" line="1779" lineend="1812" name="handleMouseMove" returns="Boolean" signature="handleMouseMove(e)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Math.abs()" line="1793" name="diffX" />
              <variable attributes="__local__ private" citdl="Math.abs()" line="1794" name="diffY" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Iterates over all of the DragDrop elements to find ones we are&#xA;hovering over or dropping on" ilk="function" line="1823" lineend="1948" name="fireEvents" signature="fireEvents(e, isDrop)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="Boolean" doc="is this a drop op or a mouseover op?" ilk="argument" name="isDrop" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.dragCurrent" line="1824" name="dc" />
              <variable attributes="__local__ private" citdl="e.getPoint()" line="1832" name="pt" />
              <variable attributes="__local__ private" citdl="Array" doc="cache the previous dragOver array" line="1835" name="oldOvers" />
              <variable attributes="__local__ private" citdl="Array" line="1837" name="outEvts" />
              <variable attributes="__local__ private" citdl="Array" line="1838" name="overEvts" />
              <variable attributes="__local__ private" citdl="Array" line="1839" name="dropEvts" />
              <variable attributes="__local__ private" citdl="Array" line="1840" name="enterEvts" />
              <variable attributes="__local__ private" citdl="this.dragOvers[i]" line="1846" name="ddo" />
              <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="1867" name="oDD" />
              <variable attributes="__local__ private" citdl="Number" doc="fire dragout events" line="1917" name="len" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Helper function for getting the best match from the list of drag&#xA;and drop objects returned by the drag and drop events when we are&#xA;in INTERSECT mode.  It returns either the first object that the&#xA;cursor is over, or the object that has the greatest overlap with&#xA;the dragged element." ilk="function" line="1962" lineend="1995" name="getBestMatch" returns="DragDrop" signature="getBestMatch(dds)">
              <variable citdl="Array" doc="The array of drag and drop objects&#xA;targeted" ilk="argument" name="dds" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="dds[0]" line="1963" name="winner" />
              <variable attributes="__local__ private" citdl="dds.length" doc="} else if (dds.length == 1) {" line="1970" name="len" />
              <variable attributes="__local__ private" citdl="dds[i]" line="1977" name="dd" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Refreshes the cache of the top-left and bottom-right points of the&#xA;drag and drop objects in the specified group(s).  This is in the&#xA;format that is stored in the drag and drop instance, so typical&#xA;usage is:&#xA;&lt;code&gt;&#xA;Ext.dd.DragDropMgr.refreshCache(ddinstance.groups);&#xA;&lt;/code&gt;&#xA;Alternatively:&#xA;&lt;code&gt;&#xA;Ext.dd.DragDropMgr.refreshCache({group1:true, group2:true});&#xA;&lt;/code&gt;" ilk="function" line="2015" lineend="2037" name="refreshCache" signature="refreshCache(groups)">
              <variable citdl="Object" doc="an associative array of groups to refresh" ilk="argument" name="groups" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="2021" name="oDD" />
              <variable attributes="__local__ private" citdl="this.getLocation()" doc="if (this.isTypeOfDD(oDD) &amp;&amp; oDD.isTarget) {" line="2025" name="loc" />
            </scope>
            <scope attributes="__static__" doc="STATIC: This checks to make sure an element exists and is in the DOM.  The&#xA;main purpose is to handle cases where innerHTML is used to remove&#xA;drag and drop objects from the DOM.  IE provides an &apos;unspecified&#xA;error&apos; when trying to access the offsetParent of such an element" ilk="function" line="2049" lineend="2065" name="verifyEl" returns="Boolean" signature="verifyEl(el)">
              <variable citdl="HTMLElement" doc="the element to check" ilk="argument" name="el" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="el.offsetParent" line="2051" name="parent" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns a Region object containing the drag and drop element&apos;s position&#xA;and size, including the padding configured for it" ilk="function" line="2078" lineend="2104" name="getLocation" returns="Ext.lib.Region" signature="getLocation(oDD)">
              <variable citdl="DragDrop" doc="the drag and drop object to get the&#xA;location for" ilk="argument" name="oDD" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="oDD.getEl()" line="2083" name="el" />
              <variable attributes="__local__ private" citdl="y1" line="2083" name="y2" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2083" name="pos" />
              <variable attributes="__local__ private" citdl="x1" line="2083" name="l" />
              <variable attributes="__local__ private" citdl="pos[1]" line="2083" name="y1" />
              <variable attributes="__local__ private" citdl="x2" line="2083" name="r" />
              <variable attributes="__local__ private" citdl="y1" line="2083" name="t" />
              <variable attributes="__local__ private" citdl="x1" line="2083" name="x2" />
              <variable attributes="__local__ private" citdl="pos[0]" line="2083" name="x1" />
              <variable attributes="__local__ private" citdl="y2" line="2083" name="b" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Checks the cursor location to see if it over the target" ilk="function" line="2115" lineend="2163" name="isOverTarget" returns="Boolean" signature="isOverTarget(pt, oTarget, intersect)">
              <variable citdl="Ext.lib.Point" doc="The point to evaluate" ilk="argument" name="pt" />
              <variable citdl="DragDrop" doc="the DragDrop object we are inspecting" ilk="argument" name="oTarget" />
              <variable ilk="argument" name="intersect" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.locationCache[oTarget.id]" doc="use cache if available" line="2117" name="loc" />
              <variable attributes="__local__ private" citdl="this.dragCurrent" doc="dragged element." line="2135" name="dc" />
              <variable attributes="__local__ private" citdl="dc.getTargetCoord()" doc="need to consider constraints and ticks as well." line="2147" name="pos" />
              <variable attributes="__local__ private" citdl="dc.getDragEl()" line="2149" name="el" />
              <variable attributes="__local__ private" citdl="Ext.lib.Region" line="2153" name="curRegion" />
              <variable attributes="__local__ private" citdl="curRegion.intersect()" line="2155" name="overlap" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: unload event handler" ilk="function" line="2171" lineend="2173" name="_onUnload" signature="_onUnload(e, me)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="me" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Cleans up the drag and drop events and objects." ilk="function" line="2181" lineend="2196" name="unregAll" signature="unregAll()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable citdl="Object" line="2194" lineend="2204" name="elementCache" />
            <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Get the wrapper for the DOM element specified" ilk="function" line="2215" lineend="2222" name="getElWrapper" returns="Ext.dd.DDM.ElementWrapper" signature="getElWrapper(id)">
              <variable citdl="String" doc="the id of the element to get" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="this.elementCache[id]" line="2216" name="oWrapper" />
            </scope>
            <variable line="2219" name="elementCache[id]" />
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the actual DOM element" ilk="function" line="2232" lineend="2234" name="getElement" returns="Object" signature="getElement(id)">
              <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the style property for the DOM element (i.e.,&#xA;document.getElById(id).style)" ilk="function" line="2245" lineend="2248" name="getCss" returns="Object" signature="getCss(id)">
              <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Ext.getDom()" line="2246" name="el" />
            </scope>
            <scope ilk="class" line="2257" lineend="2273" name="ElementWrapper">
              <scope attributes="__ctor__ deprecated private" doc="DEPRECATED PRIVATE: Inner class for cached elements" ilk="function" line="2257" lineend="2273" name="ElementWrapper" signature="ElementWrapper(el)">
                <variable ilk="argument" name="el" />
                <variable citdl="ElementWrapper" name="this" />
              </scope>
              <variable citdl="el" doc="The element" line="2262" name="el" />
              <variable citdl="this.el" doc="The element id" line="2267" name="id" />
              <variable citdl="this.el" doc="A reference to the style property" line="2272" name="css" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the X position of an html element" ilk="function" line="2284" lineend="2286" name="getPosX" returns="Number" signature="getPosX(el)">
              <variable doc="the element for which to get the position" ilk="argument" name="el" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the Y position of an html element" ilk="function" line="2296" lineend="2298" name="getPosY" returns="Number" signature="getPosY(el)">
              <variable doc="the element for which to get the position" ilk="argument" name="el" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Swap two nodes.  In IE, we use the native method, for others we&#xA;emulate the IE behavior" ilk="function" line="2308" lineend="2324" name="swapNode" signature="swapNode(n1, n2)">
              <variable doc="the first node to swap" ilk="argument" name="n1" />
              <variable doc="the other node to swap" ilk="argument" name="n2" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="n2.parentNode" line="2312" name="p" />
              <variable attributes="__local__ private" citdl="n2.nextSibling" line="2313" name="s" />
            </scope>
            <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the current scroll position" ilk="function" line="2332" lineend="2344" name="getScroll" signature="getScroll()">
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="document.body" line="2333" name="db" />
              <variable attributes="__local__ private" citdl="dde.scrollTop" line="2333" name="t" />
              <variable attributes="__local__ private" citdl="document.documentElement" line="2333" name="dde" />
              <variable attributes="__local__ private" citdl="dde.scrollLeft" line="2333" name="l" />
            </scope>
            <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the specified element style property" ilk="function" line="2355" lineend="2357" name="getStyle" returns="String" signature="getStyle(el, styleProp)">
              <variable citdl="HTMLElement" doc="the element" ilk="argument" name="el" />
              <variable citdl="String" doc="the style property" ilk="argument" name="styleProp" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Gets the scrollTop" ilk="function" line="2365" lineend="2365" name="getScrollTop" returns="Number" signature="getScrollTop()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Gets the scrollLeft" ilk="function" line="2373" lineend="2373" name="getScrollLeft" returns="Number" signature="getScrollLeft()">
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Sets the x/y position of an element to the location of the&#xA;target element." ilk="function" line="2383" lineend="2386" name="moveToEl" signature="moveToEl(moveEl, targetEl)">
              <variable citdl="HTMLElement" doc="The element to move" ilk="argument" name="moveEl" />
              <variable citdl="HTMLElement" doc="The position reference element" ilk="argument" name="targetEl" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2384" name="aCoord" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Numeric array sort function" ilk="function" line="2393" lineend="2393" name="numericSort" signature="numericSort(a, b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
              <variable citdl="DragDropMgr" name="this" />
            </scope>
            <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal counter" line="2401" name="_timeoutCount" />
            <scope attributes="private __static__" doc="PRIVATE STATIC: Trying to make the load order less important.  Without this we get&#xA;an error if this file is loaded before the Event Utility." ilk="function" line="2410" lineend="2423" name="_addListeners" signature="_addListeners()">
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="Ext.dd.DDM" line="2411" name="DDM" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Recursively searches the immediate parent and all child nodes for&#xA;the handle element in order to determine wheter or not it was&#xA;clicked." ilk="function" line="2433" lineend="2450" name="handleWasClicked" returns="Boolean" signature="handleWasClicked(node, id)">
              <variable doc="the html element to inspect" ilk="argument" name="node" />
              <variable ilk="argument" name="id" />
              <variable citdl="DragDropMgr" name="this" />
              <variable attributes="__local__ private" citdl="node.parentNode" doc="check to see if this is a text node child of the one we want" line="2438" name="p" />
            </scope>
          </variable>
          <variable citdl="Ext.dd.DragDropMgr" doc="shorter alias, save a few bytes" line="2457" name="DDM" />
          <scope ilk="class" line="2474" lineend="2478" name="DD">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation where the linked element follows the&#xA;mouse cursor during a drag." ilk="function" line="2474" lineend="2478" name="DD" signature="DD(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DD:&#xA;scroll" ilk="argument" name="config" />
              <variable citdl="DD" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="2770" lineend="2775" name="DDProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that inserts an empty, bordered div into&#xA;the document that follows the cursor during drag operations.  At the time of&#xA;the click, the frame div is resized to the dimensions of the linked html&#xA;element, and moved to the exact location of the linked element.&#xA;&#xA;References to the &quot;frame&quot; element refer to the single proxy element that&#xA;was created to be dragged in place of all DDProxy elements on the&#xA;page." ilk="function" line="2770" lineend="2775" name="DDProxy" signature="DDProxy(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked html element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDProxy in addition to those in DragDrop:&#xA;resizeFrame, centerFrame, dragElId" ilk="argument" name="config" />
              <variable citdl="DDProxy" name="this" />
            </scope>
            <variable attributes="__static__" citdl="String" doc="STATIC: The default drag frame div id" line="2783" name="dragElId" />
          </scope>
          <scope ilk="class" line="2963" lineend="2967" name="DDTarget">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that does not move, but can be a drop&#xA;target.  You would get the same result by simply omitting implementation&#xA;for the event callbacks, but this way we reduce the processing cost of the&#xA;event listener and the callbacks." ilk="function" line="2963" lineend="2967" name="DDTarget" signature="DDTarget(id, sGroup, config)">
              <variable citdl="String" doc="the id of the element that is a drop target" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDTarget in addition to those in&#xA;DragDrop:&#xA;none" ilk="argument" name="config" />
              <variable citdl="DDTarget" name="this" />
            </scope>
          </scope>
        </variable>
        <variable citdl="Object" doc="* Ext JS Library 2.2 * Copyright(c) 2006-2008, Ext JS, LLC." line="9" lineend="9" name="debug">
          <variable citdl="Ext.extend()" line="203" name="ScriptsPanel" />
          <variable citdl="Ext.extend()" line="224" name="LogPanel" />
          <variable citdl="Ext.extend()" line="368" name="DomTree" />
          <variable citdl="HtmlNode" doc="highly unusual class declaration" line="372" name="HtmlNode" />
          <variable citdl="String" line="378" name="n" />
          <variable citdl="String" line="378" name="v" />
        </variable>
        <variable citdl="String" line="9" name="version" />
        <variable citdl="Object" line="9" name="sql">
          <scope doc="* Ext JS Library 0.20 * Copyright(c) 2006-2008, Ext JS, LLC." ilk="function" line="9" lineend="20" name="Proxy" signature="Proxy(conn, table, keyName, store, readonly)">
            <variable ilk="argument" name="conn" />
            <variable ilk="argument" name="table" />
            <variable ilk="argument" name="keyName" />
            <variable ilk="argument" name="store" />
            <variable ilk="argument" name="readonly" />
            <variable citdl="sql" name="this" />
            <variable citdl="String" line="22" name="DATE_FORMAT" />
          </scope>
          <scope doc="* Ext JS Library 0.20 * Copyright(c) 2006-2008, Ext JS, LLC." ilk="class" line="9" lineend="94" name="Table">
            <scope attributes="__ctor__" doc="* Ext JS Library 0.20 * Copyright(c) 2006-2008, Ext JS, LLC." ilk="function" line="9" lineend="13" name="Table" signature="Table(conn, name, keyName)">
              <variable ilk="argument" name="conn" />
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="keyName" />
              <variable citdl="Table" name="this" />
            </scope>
            <variable citdl="name" line="11" name="name" />
            <variable citdl="conn" line="11" name="conn" />
            <variable citdl="keyName" line="12" name="keyName" />
            <scope ilk="function" line="16" lineend="19" name="update" returns="this.updateBy()" signature="update(o)">
              <variable ilk="argument" name="o" />
              <variable citdl="Table" name="this" />
              <variable attributes="__local__ private" citdl="this.keyName" line="17" name="clause" />
            </scope>
            <scope ilk="function" line="21" lineend="37" name="updateBy" returns="this.conn.execBy()" signature="updateBy(o, clause, args)">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="clause" />
              <variable ilk="argument" name="args" />
              <variable citdl="Table" name="this" />
              <variable attributes="__local__ private" citdl="String" line="22" name="sql" />
              <variable attributes="__local__ private" citdl="Array" line="23" name="a" />
              <variable attributes="__local__ private" citdl="Array" line="23" name="fs" />
            </scope>
            <scope ilk="function" line="39" lineend="51" name="insert" returns="this.conn.execBy()" signature="insert(o)">
              <variable ilk="argument" name="o" />
              <variable citdl="Table" name="this" />
              <variable attributes="__local__ private" citdl="String" line="40" name="sql" />
              <variable attributes="__local__ private" citdl="Array" line="41" name="a" />
              <variable attributes="__local__ private" citdl="Array" line="41" name="fs" />
              <variable attributes="__local__ private" citdl="Array" line="41" name="vs" />
            </scope>
            <scope ilk="function" line="53" lineend="55" name="lookup" returns="this.selectBy()[0]" signature="lookup(id)">
              <variable ilk="argument" name="id" />
              <variable citdl="Table" name="this" />
            </scope>
            <scope ilk="function" line="57" lineend="59" name="exists" signature="exists(id)">
              <variable ilk="argument" name="id" />
              <variable citdl="Table" name="this" />
            </scope>
            <scope ilk="function" line="61" lineend="67" name="save" signature="save(o)">
              <variable ilk="argument" name="o" />
              <variable citdl="Table" name="this" />
            </scope>
            <scope ilk="function" line="69" lineend="71" name="select" returns="this.selectBy()" signature="select(clause)">
              <variable ilk="argument" name="clause" />
              <variable citdl="Table" name="this" />
            </scope>
            <scope ilk="function" line="73" lineend="80" name="selectBy" returns="this.conn.queryBy()" signature="selectBy(clause, args)">
              <variable ilk="argument" name="clause" />
              <variable citdl="args" ilk="argument" name="args" />
              <variable citdl="Table" name="this" />
              <variable attributes="__local__ private" citdl="String" line="74" name="sql" />
            </scope>
            <scope ilk="function" line="82" lineend="84" name="remove" signature="remove(clause)">
              <variable ilk="argument" name="clause" />
              <variable citdl="Table" name="this" />
            </scope>
            <scope ilk="function" line="86" lineend="93" name="removeBy" signature="removeBy(clause, args)">
              <variable ilk="argument" name="clause" />
              <variable citdl="args" ilk="argument" name="args" />
              <variable citdl="Table" name="this" />
              <variable attributes="__local__ private" citdl="String" line="87" name="sql" />
            </scope>
          </scope>
          <scope doc="Asbtract base class for Connection classes" ilk="function" line="10" lineend="18" name="Connection" signature="Connection(config)">
            <variable ilk="argument" name="config" />
            <variable citdl="sql" name="this" />
            <scope ilk="function" line="92" lineend="98" name="getInstance" returns="Ext.sql.GearsConnection" signature="getInstance(db, config)">
              <variable ilk="argument" name="db" />
              <variable ilk="argument" name="config" />
            </scope>
          </scope>
          <variable citdl="this.conn.getTable()" line="12" name="table" />
          <variable citdl="store" line="13" name="store" />
          <variable citdl="Ext.extend()" doc="* Ext JS Library 0.20 * Copyright(c) 2006-2008, Ext JS, LLC." line="86" name="AirConnection" />
        </variable>
        <variable citdl="Boolean" doc="Notifies Element that fx methods are available" line="10" name="enableFx" />
        <variable citdl="Object" line="14" name="tree">
          <scope doc="* Ext JS Library 2.2 * Copyright(c) 2006-2008, Ext JS, LLC." ilk="class" line="9" lineend="157" name="TreeEventModel">
            <scope attributes="__ctor__" doc="* Ext JS Library 2.2 * Copyright(c) 2006-2008, Ext JS, LLC." ilk="function" line="9" lineend="12" name="TreeEventModel" signature="TreeEventModel(tree)">
              <variable ilk="argument" name="tree" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="15" lineend="24" name="initEvents" signature="initEvents()">
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" citdl="this.tree.getTreeEl()" line="16" name="el" />
            </scope>
            <scope ilk="function" line="26" lineend="35" name="getNode" signature="getNode(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" line="27" name="t" />
              <variable attributes="__local__ private" citdl="Ext.fly().getAttributeNS()" line="29" name="id" />
            </scope>
            <scope ilk="function" line="37" lineend="43" name="getNodeTarget" returns="t" signature="getNodeTarget(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" citdl="e.getTarget()" line="38" name="t" />
            </scope>
            <variable citdl="Ext.tree.TreePanel" doc="The TreePanel for this drop zone" line="41" name="tree" />
            <scope ilk="function" line="45" lineend="59" name="delegateOut" signature="delegateOut(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" citdl="this.getNode()" line="50" name="n" />
            </scope>
            <scope ilk="function" line="61" lineend="76" name="delegateOver" signature="delegateOver(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <variable citdl="this.getNode()" line="70" name="lastEcOver" />
            <scope ilk="function" line="78" lineend="92" name="delegateClick" signature="delegateClick(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="94" lineend="98" name="delegateDblClick" signature="delegateDblClick(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="100" lineend="104" name="delegateContextMenu" signature="delegateContextMenu(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="106" lineend="108" name="onNodeClick" signature="onNodeClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="110" lineend="112" name="onNodeOver" signature="onNodeOver(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="114" lineend="116" name="onNodeOut" signature="onNodeOut(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="118" lineend="120" name="onIconOver" signature="onIconOver(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="122" lineend="124" name="onIconOut" signature="onIconOut(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="126" lineend="128" name="onIconClick" signature="onIconClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="130" lineend="132" name="onCheckboxClick" signature="onCheckboxClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="134" lineend="136" name="onNodeDblClick" signature="onNodeDblClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="138" lineend="140" name="onNodeContextMenu" signature="onNodeContextMenu(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="142" lineend="148" name="beforeEvent" returns="Boolean" signature="beforeEvent(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="150" lineend="152" name="disable" signature="disable()">
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <variable citdl="Boolean" line="151" name="disabled" />
            <scope ilk="function" line="154" lineend="156" name="enable" signature="enable()">
              <variable citdl="TreeEventModel" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="14" lineend="38" name="DefaultSelectionModel">
            <scope attributes="__ctor__" doc="The default single selection for a TreePanel." ilk="function" line="14" lineend="38" name="DefaultSelectionModel" signature="DefaultSelectionModel(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="DefaultSelectionModel" name="this" />
            </scope>
            <variable line="15" name="selNode" />
          </scope>
          <scope ilk="class" line="15" lineend="116" name="TreeFilter">
            <scope attributes="__ctor__" doc="Note this class is experimental and doesn&apos;t update the indent (lines) or expand collapse icons of the nodes" ilk="function" line="15" lineend="19" name="TreeFilter" signature="TreeFilter(tree, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="config" />
              <variable citdl="TreeFilter" name="this" />
            </scope>
            <variable citdl="tree" line="16" name="tree" />
            <variable citdl="Object" line="17" lineend="114" name="filtered" />
            <variable citdl="Boolean" line="22" name="clearBlank" />
            <variable citdl="Boolean" line="23" name="reverse" />
            <variable citdl="Boolean" line="24" name="autoClear" />
            <variable citdl="Boolean" line="25" name="remove" />
            <scope doc="Filter the data by a specific attribute." ilk="function" line="34" lineend="56" name="filter" signature="filter(value, attr, startNode)">
              <variable citdl="String/RegExp" doc="Either string that the attribute value&#xA;should start with or a RegExp to test against the attribute" ilk="argument" name="value" />
              <variable citdl="String" doc="(optional) The attribute passed in your node&apos;s attributes collection. Defaults to &quot;text&quot;." ilk="argument" name="attr" />
              <variable citdl="TreeNode" doc="(optional) The node to start the filter at." ilk="argument" name="startNode" />
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" line="36" name="f" />
              <variable attributes="__local__ private" citdl="value.length" line="38" name="vlen" />
              <scope attributes="__local__ private" doc="regex?" ilk="function" line="49" lineend="51" name="f" returns="value.test()" signature="f(n)">
                <variable ilk="argument" name="n" />
              </scope>
            </scope>
            <scope doc="Filter by a function. The passed function will be called with each&#xA;node in the tree (or from the startNode). If the function returns true, the node is kept&#xA;otherwise it is filtered. If a node is filtered, its children are also filtered." ilk="function" line="65" lineend="97" name="filterBy" signature="filterBy(fn, scope, startNode)">
              <variable citdl="Function" doc="The filter function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to the current node)" ilk="argument" name="scope" />
              <variable citdl="startNode" ilk="argument" name="startNode" />
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" citdl="this.reverse" line="70" name="rv" />
              <variable attributes="__local__ private" citdl="this.filtered" line="70" name="af" />
              <scope attributes="__local__ private" ilk="function" line="71" lineend="85" name="f" returns="Boolean" signature="f(n)">
                <variable ilk="argument" name="n" />
                <variable attributes="__local__ private" citdl="fn.call()" line="78" name="m" />
              </scope>
              <variable attributes="__local__ private" citdl="af[id]" line="90" name="n" />
            </scope>
            <scope doc="Clears the current filter. Note: with the &quot;remove&quot; option&#xA;set a filter cannot be cleared." ilk="function" line="103" lineend="115" name="clear" signature="clear()">
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" citdl="this.tree" line="104" name="t" />
              <variable attributes="__local__ private" citdl="this.filtered" line="105" name="af" />
              <variable attributes="__local__ private" citdl="af[id]" line="108" name="n" />
            </scope>
          </scope>
          <scope ilk="class" line="16" lineend="36" name="AsyncTreeNode">
            <scope attributes="__ctor__" doc="{Object/String} attributes The attributes/config for the&#xA;node or just a string with the text for the node */" ilk="function" line="16" lineend="36" name="AsyncTreeNode" signature="AsyncTreeNode(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="AsyncTreeNode" name="this" />
            </scope>
            <variable citdl="config" line="17" name="loaded" />
            <variable citdl="Boolean" line="18" name="loading" />
          </scope>
          <scope ilk="function" line="17" lineend="25" name="TreeDragZone" signature="TreeDragZone(tree, config)">
            <variable ilk="argument" name="tree" />
            <variable ilk="argument" name="config" />
            <variable citdl="tree" name="this" />
          </scope>
          <scope ilk="function" line="18" lineend="51" name="TreeDropZone" signature="TreeDropZone(tree, config)">
            <variable ilk="argument" name="tree" />
            <variable ilk="argument" name="config" />
            <variable citdl="tree" name="this" />
          </scope>
          <scope ilk="class" line="20" lineend="32" name="TreeEditor">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides editor functionality for inline tree node editing.  Any valid {@link Ext.form.Field} subclass can be used&#xA;as the editor field." ilk="function" line="20" lineend="32" name="TreeEditor" signature="TreeEditor(tree, fc, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="fc" ilk="argument" name="fc" />
              <variable citdl="Object" doc="(optional) A TreeEditor config object" ilk="argument" name="config" />
              <variable citdl="TreeEditor" name="this" />
              <variable attributes="__local__ private" citdl="fc.events" line="22" name="field" />
            </scope>
            <variable citdl="tree" line="25" name="tree" />
          </scope>
          <scope ilk="class" line="22" lineend="597" name="TreeNodeUI">
            <scope attributes="__ctor__" doc="This class provides the default UI implementation for Ext TreeNodes.&#xA;The TreeNode UI implementation is separate from the&#xA;tree implementation, and allows customizing of the appearance of&#xA;tree nodes.&lt;br&gt;&#xA;&lt;p&gt;&#xA;If you are customizing the Tree&apos;s user interface, you&#xA;may need to extend this class, but you should never need to instantiate this class.&lt;br&gt;&#xA;&lt;p&gt;&#xA;This class provides access to the user interface components of an Ext TreeNode, through&#xA;{@link Ext.tree.TreeNode#getUI}" ilk="function" line="22" lineend="29" name="TreeNodeUI" signature="TreeNodeUI(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="Node" line="23" name="node" />
            <variable citdl="Boolean" line="24" name="rendered" />
            <variable citdl="Boolean" line="25" name="animating" />
            <variable citdl="Boolean" line="26" name="wasLeaf" />
            <variable citdl="String" line="27" name="ecc" />
            <variable citdl="Ext.BLANK_IMAGE_URL" line="28" name="emptyIcon" />
            <scope doc="private" ilk="function" line="33" lineend="37" name="removeChild" signature="removeChild(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="40" lineend="42" name="beforeLoad" signature="beforeLoad()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="45" lineend="47" name="afterLoad" signature="afterLoad()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="50" lineend="54" name="onTextChange" signature="onTextChange(node, text, oldText)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="text" />
              <variable ilk="argument" name="oldText" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="String" line="52" name="innerHTML" />
            <scope doc="private" ilk="function" line="57" lineend="67" name="onDisableChange" signature="onDisableChange(node, state)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="state" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="state" line="58" name="disabled" />
            <scope doc="private" ilk="function" line="70" lineend="78" name="onSelectedChange" signature="onSelectedChange(state)">
              <variable ilk="argument" name="state" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="81" lineend="98" name="onMove" signature="onMove(tree, node, oldParent, newParent, index, refNode)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="oldParent" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="refNode" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="newParent.ui.getContainer()" line="84" name="targetNode" />
              <variable attributes="__local__ private" citdl="refNode" line="90" name="insertBefore" />
            </scope>
            <variable citdl="buf.join()" line="82" name="childIndent" />
            <variable citdl="document.createElement()" doc="target not rendered" line="86" name="holder" />
            <scope doc="Adds one or more CSS classes to the node&apos;s UI element.&#xA;Duplicate classes are automatically filtered out." ilk="function" line="105" lineend="109" name="addClass" signature="addClass(cls)">
              <variable ilk="argument" name="cls" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Removes one or more CSS classes from the node&apos;s UI element." ilk="function" line="115" lineend="119" name="removeClass" signature="removeClass(cls)">
              <variable ilk="argument" name="cls" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="122" lineend="127" name="remove" signature="remove()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="130" lineend="132" name="fireEvent" returns="this.node.fireEvent.apply()" signature="fireEvent()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="135" lineend="156" name="initEvents" signature="initEvents()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree()" line="147" name="ot" />
              <variable attributes="__local__ private" citdl="ot.enableDD" line="148" name="dd" />
            </scope>
            <scope doc="private" ilk="function" line="159" lineend="161" name="getDDHandles" returns="Array" signature="getDDHandles()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable citdl="Object" line="160" name="this">
                <variable line="160" name="textNode" />
              </variable>
            </scope>
            <scope doc="Hides this node." ilk="function" line="166" lineend="171" name="hide" signature="hide()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="Boolean" line="167" name="hidden" />
            <variable citdl="String" line="169" name="display" />
            <scope doc="Shows this node." ilk="function" line="176" lineend="181" name="show" signature="show()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="184" lineend="190" name="onContextMenu" signature="onContextMenu(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="193" lineend="219" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="e.getTarget()" line="199" name="a" />
            </scope>
            <scope doc="private" ilk="function" line="222" lineend="234" name="onDblClick" signature="onDblClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="236" lineend="238" name="onOver" signature="onOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="240" lineend="242" name="onOut" signature="onOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="245" lineend="251" name="onCheckChange" signature="onCheckChange()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.checkbox.checked" line="246" name="checked" />
            </scope>
            <variable citdl="checked" doc="fix for IE6" line="248" name="defaultChecked" />
            <variable citdl="checked" line="249" name="checked" />
            <scope doc="private" ilk="function" line="254" lineend="258" name="ecClick" signature="ecClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="261" lineend="263" name="startDrop" signature="startDrop()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="Boolean" line="262" name="dropping" />
            <scope doc="delayed drop so the click event doesn&apos;t get fired on a drop" ilk="function" line="266" lineend="270" name="endDrop" signature="endDrop()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="273" lineend="276" name="expand" signature="expand()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="279" lineend="291" name="focus" signature="focus()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree().getTreeEl().dom" line="285" name="noscroll" />
              <variable attributes="__local__ private" citdl="noscroll.scrollLeft" line="286" name="l" />
            </scope>
            <scope doc="Sets the checked status of the tree node to the passed value, or, if no value was passed,&#xA;toggles the checked status. If the node was rendered with no checkbox, this has no effect." ilk="function" line="298" lineend="304" name="toggleCheck" signature="toggleCheck(value)">
              <variable ilk="argument" name="value" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.checkbox" line="299" name="cb" />
            </scope>
            <scope doc="private" ilk="function" line="307" lineend="311" name="blur" signature="blur()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="314" lineend="334" name="animExpand" signature="animExpand(callback)">
              <variable ilk="argument" name="callback" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="315" name="ct" />
            </scope>
            <scope doc="private" ilk="function" line="337" lineend="343" name="highlight" signature="highlight()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree()" line="338" name="tree" />
            </scope>
            <scope doc="private" ilk="function" line="346" lineend="349" name="collapse" signature="collapse()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="352" lineend="368" name="animCollapse" signature="animCollapse(callback)">
              <variable ilk="argument" name="callback" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="353" name="ct" />
            </scope>
            <scope doc="private" ilk="function" line="371" lineend="373" name="getContainer" returns="this.ctNode" signature="getContainer()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="376" lineend="378" name="getEl" returns="this.wrap" signature="getEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="381" lineend="383" name="appendDDGhost" signature="appendDDGhost(ghostNode)">
              <variable ilk="argument" name="ghostNode" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="386" lineend="388" name="getDDRepairXY" returns="Ext.lib.Dom.getXY()" signature="getDDRepairXY()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="391" lineend="393" name="onRender" signature="onRender()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="396" lineend="431" name="render" signature="render(bulkRender)">
              <variable ilk="argument" name="bulkRender" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="n.attributes" line="397" name="a" />
              <variable attributes="__local__ private" citdl="this.node" line="397" name="n" />
              <variable attributes="__local__ private" citdl="n.parentNode" line="398" name="targetNode" />
            </scope>
            <scope doc="private" ilk="function" line="434" lineend="473" name="renderElements" signature="renderElements(n, a, targetNode, bulkRender)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="targetNode" />
              <variable ilk="argument" name="bulkRender" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" line="438" name="cb" />
              <variable attributes="__local__ private" citdl="a.href" line="440" name="href" />
              <variable attributes="__local__ private" citdl="Array" line="449" name="buf" />
              <variable attributes="__local__ private" line="451" name="nel" />
              <variable attributes="__local__ private" citdl="this.elNode.childNodes" line="460" name="cs" />
              <variable attributes="__local__ private" citdl="Number" line="464" name="index" />
            </scope>
            <variable citdl="n.parentNode" doc="add some indent caching, this helps performance when&#xA;rendering a large tree" line="436" name="indentMarkup" />
            <variable citdl="Ext.DomHelper.insertHtml()" line="453" name="wrap" />
            <variable citdl="this.wrap.childNodes[0]" line="458" name="elNode" />
            <variable citdl="this.wrap.childNodes[1]" line="459" name="ctNode" />
            <variable citdl="cs[0]" line="461" name="indentNode" />
            <variable citdl="cs[1]" line="462" name="ecNode" />
            <variable citdl="cs[2]" line="463" name="iconNode" />
            <variable citdl="cs[3]" line="466" name="checkbox" />
            <variable citdl="cs[index]" line="471" name="anchor" />
            <variable citdl="cs[index].firstChild" line="472" name="textNode" />
            <scope doc="Returns the &amp;lt;a&gt; element that provides focus for the node&apos;s UI." ilk="function" line="479" lineend="481" name="getAnchor" returns="HTMLElement" signature="getAnchor()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Returns the text node." ilk="function" line="487" lineend="489" name="getTextEl" returns="HtmlNode" signature="getTextEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Returns the icon &amp;lt;img&gt; element." ilk="function" line="495" lineend="497" name="getIconEl" returns="HTMLElement" signature="getIconEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Returns the checked status of the node. If the node was rendered with no&#xA;checkbox, it returns false." ilk="function" line="504" lineend="506" name="isChecked" returns="Boolean" signature="isChecked()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="509" lineend="545" name="updateExpandIcon" signature="updateExpandIcon()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="String" line="511" name="c2" />
              <variable attributes="__local__ private" citdl="String" line="511" name="c1" />
              <variable attributes="__local__ private" citdl="this.node" line="511" name="n" />
              <variable attributes="__local__ private" citdl="n.isLast()" line="512" name="cls" />
              <variable attributes="__local__ private" citdl="String" line="539" name="ecc" />
            </scope>
            <variable citdl="c1" line="529" name="c1" />
            <variable citdl="c2" line="529" name="c2" />
            <variable citdl="ecc" line="541" name="className" />
            <scope doc="private" ilk="function" line="548" lineend="565" name="getChildIndent" returns="this.childIndent" signature="getChildIndent()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="550" name="buf" />
              <variable attributes="__local__ private" citdl="this.node" line="551" name="p" />
            </scope>
            <scope doc="private" ilk="function" line="568" lineend="581" name="renderIndent" signature="renderIndent()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="String" line="570" name="indent" />
              <variable attributes="__local__ private" citdl="this.node.parentNode" line="571" name="p" />
            </scope>
            <scope ilk="function" line="583" lineend="596" name="destroy" signature="destroy()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
          </scope>
          <variable citdl="Boolean" doc="Allow inserting a dragged node between an expanded parent node and its first child that will become a&#xA;sibling of the parent when dropped (defaults to false)" line="24" name="allowParentInsert" />
          <scope ilk="class" line="28" lineend="108" name="TreeSorter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides sorting of nodes in a {@link Ext.tree.TreePanel}.  The TreeSorter automatically monitors events on the&#xA;associated TreePanel that might affect the tree&apos;s sort order (beforechildrenrendered, append, insert and textchange).&#xA;Example usage:&lt;br /&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;new Ext.tree.TreeSorter(myTree, {&#xA;folderSort: true,&#xA;dir: &quot;desc&quot;,&#xA;sortType: function(node) {&#xA;// sort by a custom, typed attribute:&#xA;return parseInt(node.id, 10);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="28" lineend="85" name="TreeSorter" signature="TreeSorter(tree, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="this.dir" line="59" name="dsc" />
              <variable attributes="__local__ private" citdl="this.property" line="60" name="p" />
              <variable attributes="__local__ private" citdl="this.sortType" line="61" name="sortType" />
              <variable attributes="__local__ private" citdl="this.folderSort" line="62" name="fs" />
              <variable attributes="__local__ private" citdl="this.caseSensitive" line="63" name="cs" />
              <variable attributes="__local__ private" citdl="this.leafAttr" line="64" name="leafAttr" />
            </scope>
            <variable attributes="__local__ private" line="63" name="caseSensitive" />
            <scope ilk="function" line="66" lineend="84" name="sortFn" returns="Number" signature="sortFn(n1, n2)">
              <variable ilk="argument" name="n1" />
              <variable ilk="argument" name="n2" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="sortType" line="75" name="v1" />
              <variable attributes="__local__ private" citdl="sortType" line="76" name="v2" />
            </scope>
            <scope ilk="function" line="88" lineend="90" name="doSort" signature="doSort(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="92" lineend="94" name="compareNodes" signature="compareNodes(n1, n2)">
              <variable ilk="argument" name="n1" />
              <variable ilk="argument" name="n2" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="96" lineend="100" name="updateSort" signature="updateSort(tree, node)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="102" lineend="107" name="updateSortParent" signature="updateSortParent(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="node.parentNode" line="103" name="p" />
            </scope>
          </scope>
          <variable citdl="Boolean" doc="True if drops on the tree container (outside of a specific tree node) are allowed (defaults to false)" line="29" name="allowContainerDrop" />
          <variable citdl="Boolean" doc="True if the tree should only allow append drops (use for trees which are sorted, defaults to false)" line="34" name="appendOnly" />
          <scope ilk="class" line="36" lineend="154" name="TreeNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: is to use the cls or iconCls attributes and add the icon via a CSS background image." ilk="function" line="36" lineend="154" name="TreeNode" signature="TreeNode(attributes)">
              <variable citdl="Object/String" doc="The attributes/config for the node or just a string with the text for the node" ilk="argument" name="attributes" />
              <variable citdl="TreeNode" name="this" />
              <variable attributes="__local__ private" citdl="this.attributes.uiProvider" line="147" name="uiClass" />
            </scope>
            <variable citdl="Boolean" line="41" name="childrenRendered" />
            <variable citdl="Boolean" line="42" name="rendered" />
            <variable citdl="attributes.expanded" line="44" name="expanded" />
            <variable citdl="attributes.isTarget" line="45" name="isTarget" />
            <variable citdl="attributes.draggable" line="46" name="draggable" />
            <variable citdl="attributes.allowChildren" line="47" name="allowChildren" />
            <variable citdl="String" doc="Read-only. The text for this node. To change it use setText()." line="53" name="text" />
            <variable citdl="Boolean" doc="True if this node is disabled." line="58" name="disabled" />
            <variable citdl="TreeNodeUI" doc="Read-only. The UI for this node" line="153" name="ui" />
          </scope>
          <scope ilk="class" line="48" lineend="80" name="TreeLoader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A TreeLoader provides for lazy loading of an {@link Ext.tree.TreeNode}&apos;s child&#xA;nodes from a specified URL. The response must be a JavaScript Array definition&#xA;whose elements are node definition objects. eg:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;id: 1,&#xA;text: &apos;A leaf Node&apos;,&#xA;leaf: true&#xA;},{&#xA;id: 2,&#xA;text: &apos;A folder Node&apos;,&#xA;children: [{&#xA;id: 3,&#xA;text: &apos;A child Node&apos;,&#xA;leaf: true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;A server request is sent, and child nodes are loaded only when a node is expanded.&#xA;The loading node&apos;s id is passed to the server under the parameter name &quot;node&quot; to&#xA;enable the server to produce the correct child nodes.&#xA;&lt;br&gt;&lt;br&gt;&#xA;To pass extra parameters, an event handler may be attached to the &quot;beforeload&quot;&#xA;event, and the parameters specified in the TreeLoader&apos;s baseParams property:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;myTreeLoader.on(&quot;beforeload&quot;, function(treeLoader, node) {&#xA;this.baseParams.category = node.attributes.category;&#xA;}, this);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;This would pass an HTTP parameter called &quot;category&quot; to the server containing&#xA;the value of the Node&apos;s &quot;category&quot; attribute." ilk="function" line="48" lineend="80" name="TreeLoader" signature="TreeLoader(config)">
              <variable citdl="Object" doc="A config object containing config properties." ilk="argument" name="config" />
              <variable citdl="TreeLoader" name="this" />
            </scope>
            <variable citdl="Object" line="49" lineend="49" name="baseParams" />
          </scope>
          <variable citdl="Ext.tree.TreePanel" doc="Arbitrary data that can be associated with this tree and will be included in the event object that gets&#xA;passed to any nodedragover event handler (defaults to {})" line="48" lineend="48" name="dragOverData" />
          <variable citdl="String" doc="private" line="50" name="lastInsertClass" />
          <scope ilk="class" line="205" lineend="219" name="MultiSelectionModel">
            <scope attributes="__ctor__" doc="Multi selection for a TreePanel." ilk="function" line="205" lineend="219" name="MultiSelectionModel" signature="MultiSelectionModel(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="MultiSelectionModel" name="this" />
            </scope>
            <variable citdl="Array" line="206" name="selNodes" />
            <variable citdl="Object" line="207" lineend="207" name="selMap" />
          </scope>
          <variable citdl="Object" line="525" name="TreePanel">
            <variable citdl="Object" line="525" lineend="824" name="nodeTypes">
              <variable citdl="Ext.tree.AsyncTreeNode" line="115" name="async" />
              <variable citdl="Ext.tree.TreeNode" line="525" name="node" />
            </variable>
          </variable>
          <variable citdl="Ext.extend()" doc="This class provides the default UI implementation for &lt;b&gt;root&lt;/b&gt; Ext TreeNodes.&#xA;The RootTreeNode UI implementation allows customizing the appearance of the root tree node.&lt;br&gt;&#xA;&lt;p&gt;&#xA;If you are customizing the Tree&apos;s user interface, you&#xA;may need to extend this class, but you should never need to instantiate this class.&lt;br&gt;" line="619" name="RootTreeNodeUI" />
        </variable>
        <scope ilk="class" line="15" lineend="35" name="WindowGroup">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: An object that represents a group of {@link Ext.Window} instances and provides z-order management&#xA;and window activation behavior." ilk="function" line="15" lineend="179" name="WindowGroup" signature="WindowGroup()">
            <variable citdl="WindowGroup" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="16" lineend="16" name="list" />
            <variable attributes="__local__ private" citdl="Array" line="17" name="accessList" />
            <variable attributes="__local__ private" citdl="win" line="18" name="front" />
            <scope attributes="__local__ private" doc="private" ilk="function" line="21" lineend="23" name="sortWindows" signature="sortWindows(d1, d2)">
              <variable ilk="argument" name="d1" />
              <variable ilk="argument" name="d2" />
            </scope>
            <scope attributes="__local__ private" doc="private" ilk="function" line="26" lineend="39" name="orderWindows" signature="orderWindows()">
              <variable attributes="__local__ private" citdl="accessList" line="27" name="a" />
              <variable attributes="__local__ private" citdl="a.length" line="27" name="len" />
              <variable attributes="__local__ private" citdl="a[0].manager.zseed" line="30" name="seed" />
              <variable attributes="__local__ private" citdl="a[i]" line="32" name="win" />
            </scope>
            <scope attributes="__local__ private" doc="private" ilk="function" line="42" lineend="52" name="setActiveWin" signature="setActiveWin(win)">
              <variable ilk="argument" name="win" />
            </scope>
            <scope attributes="__local__ private" doc="private" ilk="function" line="55" lineend="64" name="activateLast" signature="activateLast()" />
          </scope>
        </scope>
        <variable citdl="Object" line="15" name="state">
          <scope ilk="class" line="15" lineend="26" name="Provider">
            <scope attributes="__ctor__" doc="Abstract base class for state provider implementations. This class provides methods&#xA;for encoding and decoding &lt;b&gt;typed&lt;/b&gt; variables including dates and defines the&#xA;Provider interface." ilk="function" line="15" lineend="26" name="Provider" signature="Provider()">
              <variable citdl="Provider" name="this" />
            </scope>
            <variable citdl="Object" line="24" lineend="24" name="state" />
          </scope>
          <variable citdl="Object" line="24" lineend="70" name="Manager">
            <scope doc="Configures the default state provider for your application" ilk="function" line="32" lineend="34" name="setProvider" signature="setProvider(stateProvider)">
              <variable citdl="Provider" doc="The state provider to set" ilk="argument" name="stateProvider" />
              <variable citdl="Manager" name="this" />
            </scope>
            <scope doc="Returns the current value for a key" ilk="function" line="42" lineend="44" name="get" returns="Mixed" signature="get(key, defaultValue)">
              <variable ilk="argument" name="key" />
              <variable citdl="Mixed" doc="The default value to return if the key lookup does not match" ilk="argument" name="defaultValue" />
              <variable citdl="Manager" name="this" />
            </scope>
            <scope doc="Sets the value for a key" ilk="function" line="51" lineend="53" name="set" signature="set(key, value)">
              <variable ilk="argument" name="key" />
              <variable citdl="Mixed" doc="The state data" ilk="argument" name="value" />
              <variable citdl="Manager" name="this" />
            </scope>
            <scope doc="Clears a value from the state" ilk="function" line="59" lineend="61" name="clear" signature="clear(key)">
              <variable ilk="argument" name="key" />
              <variable citdl="Manager" name="this" />
            </scope>
            <scope doc="Gets the currently configured state provider" ilk="function" line="67" lineend="69" name="getProvider" returns="Provider" signature="getProvider()">
              <variable citdl="Manager" name="this" />
            </scope>
          </variable>
          <scope ilk="class" line="34" lineend="42" name="CookieProvider">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The default Provider implementation which saves state via cookies.&#xA;&lt;br /&gt;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var cp = new Ext.state.CookieProvider({&#xA;path: &quot;/cgi-bin/&quot;,&#xA;expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days&#xA;domain: &quot;extjs.com&quot;&#xA;});&#xA;Ext.state.Manager.setProvider(cp);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="34" lineend="42" name="CookieProvider" signature="CookieProvider(config)">
              <variable citdl="Object" doc="The configuration object" ilk="argument" name="config" />
              <variable citdl="CookieProvider" name="this" />
            </scope>
            <variable citdl="String" line="36" name="path" />
            <variable citdl="Date" line="37" name="expires" />
            <variable doc="7 days" line="38" name="domain" />
            <variable citdl="Boolean" line="39" name="secure" />
            <variable citdl="this.readCookies()" line="41" name="state" />
          </scope>
        </variable>
        <variable citdl="Object" line="16" name="layout">
          <scope ilk="class" line="16" lineend="151" name="ContainerLayout">
            <scope attributes="__ctor__" doc="Every layout is composed of one or more {@link Ext.Container} elements internally, and ContainerLayout provides&#xA;the basic foundation for all other layout classes in Ext.  It is a non-visual class that simply provides the&#xA;base logic required for a Container to function as a layout.  This class is intended to be extended and should&#xA;generally not need to be created directly via the new keyword." ilk="function" line="16" lineend="18" name="ContainerLayout" signature="ContainerLayout(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <variable citdl="Ext.Component" doc="An optional extra CSS class that will be added to the container (defaults to &apos;&apos;).  This can be useful for&#xA;adding customized styles to the container or any of its children using standard CSS rules.&#xA;*/// private" line="41" name="monitorResize" />
            <variable doc="private" line="43" name="activeItem" />
            <scope doc="private" ilk="function" line="46" lineend="50" name="layout" signature="layout()">
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="this.container.getLayoutTarget()" line="47" name="target" />
            </scope>
            <scope doc="private" ilk="function" line="53" lineend="55" name="onLayout" signature="onLayout(ct, target)">
              <variable ilk="argument" name="ct" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="58" lineend="61" name="isValidParent" returns="el.dom.parentNode" signature="isValidParent(c, target)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="c.getPositionEl" line="59" name="el" />
            </scope>
            <scope doc="private" ilk="function" line="64" lineend="72" name="renderAll" signature="renderAll(ct, target)">
              <variable ilk="argument" name="ct" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="ct.items.items" line="65" name="items" />
              <variable attributes="__local__ private" citdl="items[i]" line="67" name="c" />
            </scope>
            <scope doc="private" ilk="function" line="75" lineend="97" name="renderItem" signature="renderItem(c, position, target)">
              <variable ilk="argument" name="c" />
              <variable citdl="target.dom.childNodes[position]" ilk="argument" name="position" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="c.getPositionEl" line="79" name="t" />
            </scope>
            <scope doc="private" ilk="function" line="100" lineend="114" name="onResize" signature="onResize()">
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="this.container.bufferResize" line="104" name="b" />
            </scope>
            <variable citdl="Ext.util.DelayedTask" line="107" name="resizeTask" />
            <variable line="108" name="resizeBuffer" />
            <scope doc="private" ilk="function" line="117" lineend="127" name="setContainer" signature="setContainer(ct)">
              <variable ilk="argument" name="ct" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <variable citdl="ct" line="126" name="container" />
            <scope doc="private" ilk="function" line="130" lineend="148" name="parseMargins" signature="parseMargins(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="v.split()" line="131" name="ms" />
              <variable attributes="__local__ private" citdl="ms.length" line="132" name="len" />
            </scope>
            <variable citdl="Ext.emptyFn" line="150" name="destroy" />
          </scope>
          <variable citdl="Ext.extend()" doc="&lt;p&gt;This is a base class for layouts that contain a single item that automatically expands to fill the layout&apos;s&#xA;container.  This class is intended to be extended or created via the layout:&apos;fit&apos; {@link Ext.Container#layout}&#xA;config, and should generally not need to be created directly via the new keyword.&lt;/p&gt;&#xA;&lt;p&gt;FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container&#xA;using FitLayout, simply set layout:&apos;fit&apos; on the container and add a single panel to it.  If the container has&#xA;multiple panels, only the first one will be displayed.  Example usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var p = new Ext.Panel({&#xA;title: &apos;Fit Layout&apos;,&#xA;layout:&apos;fit&apos;,&#xA;items: {&#xA;title: &apos;Inner Panel&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;This is the inner panel content&amp;lt;/p&amp;gt;&apos;,&#xA;border: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="48" name="FitLayout" />
          <variable citdl="Ext.extend()" doc="&lt;p&gt;Inherits the anchoring of {@link Ext.layout.AnchorLayout} and adds the ability for x/y positioning using the&#xA;standard x and y component config options.&lt;/p&gt;" line="54" name="AbsoluteLayout" />
          <variable citdl="Ext.extend()" doc="&lt;p&gt;This layout contains multiple panels, each fit to the container, where only a single panel can be&#xA;visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.&#xA;This class is intended to be extended or created via the layout:&apos;card&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&lt;/p&gt;&#xA;&lt;p&gt;The CardLayout&apos;s focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,&#xA;the only way to move from one panel to the next is by calling setActiveItem, passing the id or index of&#xA;the next panel to display.  The layout itself does not provide a mechanism for handling this navigation,&#xA;so that functionality must be provided by the developer.&lt;/p&gt;&#xA;&lt;p&gt;In the following example, a simplistic wizard setup is demonstrated.  A button bar is added&#xA;to the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a&#xA;common navigation routine -- for this example, the implementation of that routine has been ommitted since&#xA;it can be any type of custom logic.  Note that other uses of a CardLayout (like a tab control) would require a&#xA;completely different implementation.  For serious implementations, a better approach would be to extend&#xA;CardLayout to provide the custom functionality needed.  Example usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var navHandler = function(direction){&#xA;// This routine could contain business logic required to manage the navigation steps.&#xA;// It would call setActiveItem as needed, manage navigation button state, handle any&#xA;// branching logic that might be required, handle alternate actions like cancellation&#xA;// or finalization, etc.  A complete wizard implementation could get pretty&#xA;// sophisticated depending on the complexity required, and should probably be&#xA;// done as a subclass of CardLayout in a real-world implementation.&#xA;var card = new Ext.Panel({&#xA;title: &apos;Example Wizard&apos;,&#xA;layout:&apos;card&apos;,&#xA;activeItem: 0, // make sure the active item is set on the container config!&#xA;bodyStyle: &apos;padding:15px&apos;,&#xA;defaults: {&#xA;// applied to each contained panel&#xA;border:false&#xA;// just an example of one possible navigation scheme, using buttons&#xA;bbar: [&#xA;id: &apos;move-prev&apos;,&#xA;text: &apos;Back&apos;,&#xA;handler: navHandler.createDelegate(this, [-1]),&#xA;disabled: true&#xA;&apos;-&gt;&apos;, // greedy spacer so that the buttons are aligned to each side&#xA;id: &apos;move-next&apos;,&#xA;text: &apos;Next&apos;,&#xA;handler: navHandler.createDelegate(this, [1])&#xA;// the panels (or &quot;cards&quot;) within the layout&#xA;items: [{&#xA;id: &apos;card-0&apos;,&#xA;html: &apos;&amp;lt;h1&amp;gt;Welcome to the Wizard!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 1 of 3&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;id: &apos;card-1&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Step 2 of 3&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;id: &apos;card-2&apos;,&#xA;html: &apos;&amp;lt;h1&amp;gt;Congratulations!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 3 of 3 - Complete&amp;lt;/p&amp;gt;&apos;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="111" name="CardLayout" />
          <variable citdl="Ext.extend()" doc="&lt;p&gt;This is the layout style of choice for creating structural layouts in a multi-column format where the width of&#xA;each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.&#xA;This class is intended to be extended or created via the layout:&apos;column&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&lt;/p&gt;&#xA;&lt;p&gt;ColumnLayout does not have any direct config options (other than inherited ones), but it does support a&#xA;specific config property of &lt;b&gt;&lt;tt&gt;columnWidth&lt;/tt&gt;&lt;/b&gt; that can be included in the config of any panel added to it.  The&#xA;layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.&#xA;If width or columnWidth is not specified for a given panel, its width will default to the panel&apos;s width (or auto).&lt;/p&gt;&#xA;&lt;p&gt;The width property is always evaluated as pixels, and must be a number greater than or equal to 1.&#xA;The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and&#xA;less than 1 (e.g., .25).&lt;/p&gt;&#xA;&lt;p&gt;The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the&#xA;set of contained panels.  During the first layout pass, all panels that either have a fixed width or none&#xA;specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second&#xA;pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on&#xA;the total &lt;b&gt;remaining&lt;/b&gt; container width.  In other words, percentage width panels are designed to fill the space&#xA;left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns&#xA;with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your&#xA;layout may not render as expected.  Example usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// All columns are percentages -- they must add up to 1&#xA;var p = new Ext.Panel({&#xA;title: &apos;Column Layout - Percentage Only&apos;,&#xA;layout:&apos;column&apos;,&#xA;items: [{&#xA;title: &apos;Column 1&apos;,&#xA;columnWidth: .25&#xA;},{&#xA;title: &apos;Column 2&apos;,&#xA;columnWidth: .6&#xA;},{&#xA;title: &apos;Column 3&apos;,&#xA;columnWidth: .15&#xA;});&#xA;// Mix of width and columnWidth -- all columnWidth values must add up&#xA;// to 1. The first column will take up exactly 120px, and the last two&#xA;// columns will fill the remaining container width.&#xA;var p = new Ext.Panel({&#xA;title: &apos;Column Layout - Mixed&apos;,&#xA;layout:&apos;column&apos;,&#xA;items: [{&#xA;title: &apos;Column 1&apos;,&#xA;width: 120&#xA;},{&#xA;title: &apos;Column 2&apos;,&#xA;columnWidth: .8&#xA;},{&#xA;title: &apos;Column 3&apos;,&#xA;columnWidth: .2&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="130" name="ColumnLayout" />
          <variable citdl="Ext.extend()" doc="&lt;p&gt;This is a layout that enables anchoring of contained elements relative to the container&apos;s dimensions.  If&#xA;the container is resized, all anchored items are automatically rerendered according to their anchor rules.&#xA;This class is intended to be extended or created via the layout:&apos;anchor&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&lt;/p&gt;&#xA;&lt;p&gt;AnchorLayout does not have any direct config options (other than inherited ones).  However, the container&#xA;using the AnchorLayout can supply an anchoring-specific config property of &lt;b&gt;anchorSize&lt;/b&gt;.  By default,&#xA;AnchorLayout will calculate anchor measurements based on the size of the container itself.  However, if&#xA;anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating anchor&#xA;measurements based on it instead, allowing the container to be sized independently of the anchoring logic if necessary.&lt;/p&gt;&#xA;&lt;p&gt;The items added to an AnchorLayout can also supply an anchoring-specific config property of &lt;b&gt;anchor&lt;/b&gt; which&#xA;is a string containing two values: the horizontal anchor value and the vertical anchor value (for example, &apos;100% 50%&apos;).&#xA;This value is what tells the layout how the item should be anchored to the container.  The following types of&#xA;anchor values are supported:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;Percentage&lt;/b&gt;: Any value between 1 and 100, expressed as a percentage.  The first anchor is the percentage&#xA;width that the item should take up within the container, and the second is the percentage height.  Example: &apos;100% 50%&apos;&#xA;would render an item the complete width of the container and 1/2 its height.  If only one anchor value is supplied&#xA;it is assumed to be the width value and the height will default to auto.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;Offsets&lt;/b&gt;: Any positive or negative integer value.  The first anchor is the offset from the right edge of&#xA;the container, and the second is the offset from the bottom edge.  Example: &apos;-50 -100&apos; would render an item the&#xA;complete width of the container minus 50 pixels and the complete height minus 100 pixels.  If only one anchor value&#xA;is supplied it is assumed to be the right offset value and the bottom offset will default to 0.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;Sides&lt;/b&gt;: Valid values are &apos;right&apos; (or &apos;r&apos;) and &apos;bottom&apos; (or &apos;b&apos;).  Either the container must have a fixed&#xA;size or an anchorSize config value defined at render time in order for these to have any effect.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Anchor values can also be mixed as needed.  For example, &apos;-50 75%&apos; would render the width offset from the&#xA;container right edge by 50 pixels and 75% of the container&apos;s height.&lt;/p&gt;" line="147" name="AnchorLayout" />
          <variable citdl="Ext.extend()" doc="&lt;p&gt;This is a layout that contains multiple panels in an expandable accordion style such that only one&#xA;panel can be open at any given time.  Each panel has built-in support for expanding and collapsing.&#xA;This class is intended to be extended or created via the layout:&apos;accordion&apos; {@link Ext.Container#layout}&#xA;config, and should generally not need to be created directly via the new keyword.&lt;/p&gt;&#xA;&lt;p&gt;Note that when creating a layout via config, the layout-specific config properties must be passed in via&#xA;the {@link Ext.Container#layoutConfig} object which will then be applied internally to the layout.&#xA;Example usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var accordion = new Ext.Panel({&#xA;title: &apos;Accordion Layout&apos;,&#xA;layout:&apos;accordion&apos;,&#xA;defaults: {&#xA;// applied to each contained panel&#xA;bodyStyle: &apos;padding:15px&apos;&#xA;layoutConfig: {&#xA;// layout-specific configs go here&#xA;titleCollapse: false,&#xA;animate: true,&#xA;activeOnTop: true&#xA;items: [{&#xA;title: &apos;Panel 1&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;title: &apos;Panel 2&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;title: &apos;Panel 3&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;&apos;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="161" name="Accordion" />
          <variable citdl="Ext.extend()" doc="&lt;p&gt;This layout allows you to easily render content into an HTML table.  The total number of columns can be&#xA;specified, and rowspan and colspan can be used to create complex layouts within the table.&#xA;This class is intended to be extended or created via the layout:&apos;table&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&lt;/p&gt;&#xA;&lt;p&gt;Note that when creating a layout via config, the layout-specific config properties must be passed in via&#xA;the {@link Ext.Container#layoutConfig} object which will then be applied internally to the layout.  In the&#xA;case of TableLayout, the only valid layout config property is {@link #columns}.  However, the items added to a&#xA;TableLayout can supply the following table-specific config properties:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;rowspan&lt;/b&gt; Applied to the table cell containing the item.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;colspan&lt;/b&gt; Applied to the table cell containing the item.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;cellId&lt;/b&gt; An id applied to the table cell containing the item.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;cellCls&lt;/b&gt; A CSS class name added to the table cell containing the item.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The basic concept of building up a TableLayout is conceptually very similar to building up a standard&#xA;HTML table.  You simply add each panel (or &quot;cell&quot;) that you want to include along with any span attributes&#xA;specified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts.&#xA;Rather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the&#xA;total column count in the layoutConfig and start adding panels in their natural order from left to right,&#xA;top to bottom.  The layout will automatically figure out, based on the column count, rowspans and colspans,&#xA;how to position each panel within the table.  Just like with HTML tables, your rowspans and colspans must add&#xA;up correctly in your overall layout or you&apos;ll end up with missing and/or extra cells!  Example usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// This code will generate a layout table that is 3 columns by 2 rows&#xA;// with some spanning included.  The basic layout will be:&#xA;// +--------+-----------------+&#xA;// |   A    |   B             |&#xA;// |        |--------+--------|&#xA;// |        |   C    |   D    |&#xA;// +--------+--------+--------+&#xA;var table = new Ext.Panel({&#xA;title: &apos;Table Layout&apos;,&#xA;layout:&apos;table&apos;,&#xA;defaults: {&#xA;// applied to each contained panel&#xA;bodyStyle:&apos;padding:20px&apos;&#xA;layoutConfig: {&#xA;// The total column count must be specified here&#xA;columns: 3&#xA;items: [{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell A content&amp;lt;/p&amp;gt;&apos;,&#xA;rowspan: 2&#xA;},{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell B content&amp;lt;/p&amp;gt;&apos;,&#xA;colspan: 2&#xA;},{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell C content&amp;lt;/p&amp;gt;&apos;,&#xA;cellCls: &apos;highlight&apos;&#xA;},{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell D content&amp;lt;/p&amp;gt;&apos;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="172" name="TableLayout" />
          <variable citdl="Ext.extend()" doc="&lt;p&gt;This is a multi-pane, application-oriented UI layout style that supports multiple nested panels, automatic&#xA;split bars between regions and built-in expanding and collapsing of regions.&#xA;This class is intended to be extended or created via the layout:&apos;border&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&lt;/p&gt;&#xA;&lt;p&gt;BorderLayout does not have any direct config options (other than inherited ones).  All configs available&#xA;for customizing the BorderLayout are at the {@link Ext.layout.BorderLayout.Region} and&#xA;{@link Ext.layout.BorderLayout.SplitRegion} levels.&lt;/p&gt;&#xA;&lt;p&gt;&lt;b&gt;The regions of a BorderLayout are fixed at render time and thereafter, no regions may be removed or&#xA;added.&lt;/b&gt;&lt;/p&gt;&#xA;&lt;p&gt;Example usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var border = new Ext.Panel({&#xA;title: &apos;Border Layout&apos;,&#xA;layout:&apos;border&apos;,&#xA;items: [{&#xA;title: &apos;South Panel&apos;,&#xA;region: &apos;south&apos;,&#xA;height: 100,&#xA;minSize: 75,&#xA;maxSize: 250,&#xA;margins: &apos;0 5 5 5&apos;&#xA;},{&#xA;title: &apos;West Panel&apos;,&#xA;region:&apos;west&apos;,&#xA;margins: &apos;5 0 0 5&apos;,&#xA;cmargins: &apos;5 5 0 5&apos;,&#xA;width: 200,&#xA;minSize: 100,&#xA;maxSize: 300&#xA;},{&#xA;title: &apos;Main Content&apos;,&#xA;region:&apos;center&apos;,&#xA;margins: &apos;5 5 0 0&apos;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="178" name="BorderLayout" />
          <variable citdl="Ext.extend()" doc="&lt;p&gt;This is a layout specifically designed for creating forms.&#xA;This class can be extended or created via the layout:&apos;form&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.  However, when used in an application,&#xA;it will usually be preferrable to use a {@link Ext.form.FormPanel} (which automatically uses FormLayout as its layout&#xA;class) since it also provides built-in functionality for loading, validating and submitting the form.&lt;/p&gt;&#xA;&lt;p&gt;Note that when creating a layout via config, the layout-specific config properties must be passed in via&#xA;the {@link Ext.Container#layoutConfig} object which will then be applied internally to the layout.  The container&#xA;using the FormLayout can also supply the following form-specific config properties which will be applied by the layout:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;hideLabels&lt;/b&gt;: (Boolean) True to hide field labels by default (defaults to false)&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;itemCls&lt;/b&gt;: (String) A CSS class to add to the div wrapper that contains each field label&#xA;and field element (the default class is &apos;x-form-item&apos; and itemCls will be added to that)&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;labelAlign&lt;/b&gt;: (String) The default label alignment.  The default value is empty string &apos;&apos;&#xA;for left alignment, but specifying &apos;top&apos; will align the labels above the fields.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;labelPad&lt;/b&gt;: (Number) The default padding in pixels for field labels (defaults to 5).  labelPad only&#xA;applies if labelWidth is also specified, otherwise it will be ignored.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;labelWidth&lt;/b&gt;: (Number) The default width in pixels of field labels (defaults to 100)&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/p&gt;&#xA;&lt;p&gt;Any type of components can be added to a FormLayout, but items that inherit from {@link Ext.form.Field}&#xA;can also supply the following field-specific config properties:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;clearCls&lt;/b&gt;: (String) The CSS class to apply to the special clearing div rendered directly after each&#xA;form field wrapper (defaults to &apos;x-form-clear-left&apos;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;fieldLabel&lt;/b&gt;: (String) The text to display as the label for this field (defaults to &apos;&apos;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;hideLabel&lt;/b&gt;: (Boolean) True to hide the label and separator for this field (defaults to false).&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;itemCls&lt;/b&gt;: (String) A CSS class to add to the div wrapper that contains this field label&#xA;and field element (the default class is &apos;x-form-item&apos; and itemCls will be added to that).  If supplied,&#xA;itemCls at the field level will override the default itemCls supplied at the container level.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;labelSeparator&lt;/b&gt;: (String) The separator to display after the text of the label for this field&#xA;(defaults to a colon &apos;:&apos; or the layout&apos;s value for {@link #labelSeparator}).  To hide the separator use empty string &apos;&apos;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;labelStyle&lt;/b&gt;: (String) A CSS style specification string to add to the field label for this field&#xA;(defaults to &apos;&apos; or the layout&apos;s value for {@link #labelStyle}).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;Example usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// Required if showing validation messages&#xA;Ext.QuickTips.init();&#xA;// While you can create a basic Panel with layout:&apos;form&apos;, practically&#xA;// you should usually use a FormPanel to also get its form functionality&#xA;// since it already creates a FormLayout internally.&#xA;var form = new Ext.form.FormPanel({&#xA;labelWidth: 75,&#xA;title: &apos;Form Layout&apos;,&#xA;bodyStyle:&apos;padding:15px&apos;,&#xA;width: 350,&#xA;labelPad: 10,&#xA;defaultType: &apos;textfield&apos;,&#xA;defaults: {&#xA;// applied to each contained item&#xA;width: 230,&#xA;msgTarget: &apos;side&apos;&#xA;layoutConfig: {&#xA;// layout-specific configs go here&#xA;labelSeparator: &apos;&apos;&#xA;items: [{&#xA;fieldLabel: &apos;First Name&apos;,&#xA;name: &apos;first&apos;,&#xA;allowBlank: false&#xA;},{&#xA;fieldLabel: &apos;Last Name&apos;,&#xA;name: &apos;last&apos;&#xA;},{&#xA;fieldLabel: &apos;Company&apos;,&#xA;name: &apos;company&apos;&#xA;},{&#xA;fieldLabel: &apos;Email&apos;,&#xA;name: &apos;email&apos;,&#xA;vtype:&apos;email&apos;&#xA;buttons: [{&#xA;text: &apos;Save&apos;&#xA;},{&#xA;text: &apos;Cancel&apos;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="197" name="FormLayout" />
        </variable>
        <variable citdl="Object" line="16" lineend="404" name="EventManager">
          <scope doc="Appends an event handler to an element.  The shorthand version {@link #on} is equivalent.  Typically you will&#xA;use {@link Ext.Element#addListener} directly on an Element in favor of calling this version." ilk="function" line="269" lineend="287" name="addListener" returns="listen()" signature="addListener(element, eventName, fn, scope, options)">
            <variable ilk="argument" name="element" />
            <variable citdl="String" doc="The type of event to listen for" ilk="argument" name="eventName" />
            <variable ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope in which to execute the handler&#xA;function (the handler function&apos;s &quot;this&quot; context)" ilk="argument" name="scope" />
            <variable citdl="Object" doc="(optional) An object containing handler configuration properties.&#xA;This may contain any of the following properties:&lt;ul&gt;&#xA;&lt;li&gt;scope {Object} : The scope in which to execute the handler function. The handler function&apos;s &quot;this&quot; context.&lt;/li&gt;&#xA;&lt;li&gt;delegate {String} : A simple selector to filter the target or look for a descendant of the target&lt;/li&gt;&#xA;&lt;li&gt;stopEvent {Boolean} : True to stop the event. That is stop propagation, and prevent the default action.&lt;/li&gt;&#xA;&lt;li&gt;preventDefault {Boolean} : True to prevent the default action&lt;/li&gt;&#xA;&lt;li&gt;stopPropagation {Boolean} : True to prevent event propagation&lt;/li&gt;&#xA;&lt;li&gt;normalized {Boolean} : False to pass a browser event to the handler function instead of an Ext.EventObject&lt;/li&gt;&#xA;&lt;li&gt;delay {Number} : The number of milliseconds to delay the invocation of the handler after te event fires.&lt;/li&gt;&#xA;&lt;li&gt;single {Boolean} : True to add a handler to handle just the next firing of the event, and then remove itself.&lt;/li&gt;&#xA;&lt;li&gt;buffer {Number} : Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed&#xA;by the specified number of milliseconds. If the event fires again within that time, the original&#xA;handler is &lt;em&gt;not&lt;/em&gt; invoked, but the new handler is scheduled in its place.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;br&gt;&#xA;&lt;p&gt;See {@link Ext.Element#addListener} for examples of how to use these options.&lt;/p&gt;" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
            <variable attributes="__local__ private" citdl="eventName" line="271" name="o" />
          </scope>
          <scope doc="Removes an event handler from an element.  The shorthand version {@link #un} is equivalent.  Typically&#xA;you will use {@link Ext.Element#removeListener} directly on an Element in favor of calling this version." ilk="function" line="296" lineend="298" name="removeListener" returns="removeListener()" signature="removeListener(element, eventName, fn, scope)">
            <variable ilk="argument" name="element" />
            <variable citdl="String" doc="The type of event" ilk="argument" name="eventName" />
            <variable citdl="Function" doc="The handler function to remove" ilk="argument" name="fn" />
            <variable ilk="argument" name="scope" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="Removes all event handers from an element.  Typically you will use {@link Ext.Element#removeAllListeners}&#xA;directly on an Element in favor of calling this version." ilk="function" line="305" lineend="307" name="removeAll" returns="removeAll()" signature="removeAll(element)">
            <variable ilk="argument" name="element" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="Fires when the document is ready (before onload and before images are loaded). Can be&#xA;accessed shorthanded as Ext.onReady()." ilk="function" line="316" lineend="326" name="onDocumentReady" signature="onDocumentReady(fn, scope, options)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) An object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" doc="(optional) An object containing standard {@link #addListener} options" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers." ilk="function" line="334" lineend="343" name="onWindowResize" signature="onWindowResize(fn, scope, options)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="An object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="exposed only to allow manual firing" ilk="function" line="346" lineend="354" name="fireWindowResize" signature="fireWindowResize()">
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size." ilk="function" line="362" lineend="377" name="onTextResize" signature="onTextResize(fn, scope, options)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="An object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element" line="365" name="textEl" />
          </scope>
          <scope doc="Removes the passed window resize listener." ilk="function" line="384" lineend="388" name="removeResizeListener" signature="removeResizeListener(fn, scope)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope of handler" ilk="argument" name="scope" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="391" lineend="395" name="fireResize" signature="fireResize()">
            <variable citdl="EventManager" name="this" />
          </scope>
          <variable citdl="Boolean" doc="Url used for onDocumentReady with using SSL (defaults to Ext.SSL_SECURE_URL)" line="399" name="ieDeferSrc" />
          <variable citdl="Number" doc="The frequency, in milliseconds, to check for text resize events (defaults to 50)" line="403" name="textResizeInterval" />
          <variable citdl="pub.addListener" doc="Appends an event handler to an element.  Shorthand for {@link #addListener}." line="416" name="on" />
          <variable citdl="pub.removeListener" doc="Removes an event handler from an element.  Shorthand for {@link #removeListener}." line="426" name="un" />
          <variable citdl="Ext.util.Event" line="428" name="stoppedMouseDownEvent" />
        </variable>
        <scope ilk="class" line="18" lineend="21" name="Editor">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic." ilk="function" line="18" lineend="21" name="Editor" signature="Editor(field, config)">
            <variable citdl="Ext.form.Field" doc="The Field object (or descendant)" ilk="argument" name="field" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="Editor" name="this" />
          </scope>
          <variable citdl="field" line="19" name="field" />
        </scope>
        <scope ilk="class" line="18" lineend="171" name="Shadow">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,&#xA;and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced&#xA;functionality that can also provide the same shadow effect, see the {@link Ext.Layer} class." ilk="function" line="18" lineend="68" name="Shadow" signature="Shadow(config)">
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="Shadow" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="23" lineend="23" name="a">
              <variable citdl="Number" line="23" name="h" />
              <variable citdl="Number" line="27" name="w" />
              <variable citdl="a.t" line="28" name="l" />
              <variable citdl="o" line="28" name="t" />
            </variable>
            <variable attributes="__local__ private" citdl="this.offset" line="23" name="o" />
            <variable attributes="__local__ private" citdl="Math.floor()" line="24" name="rad" />
          </scope>
          <variable citdl="this.defaultMode" line="21" name="mode" />
          <variable citdl="a" line="67" name="adjusts" />
          <variable citdl="Number" doc="The shadow display mode.  Supports the following options:&lt;br /&gt;&#xA;sides: Shadow displays on both sides and bottom only&lt;br /&gt;&#xA;frame: Shadow displays equally on all four sides&lt;br /&gt;&#xA;drop: Traditional bottom-right drop shadow (default)" line="82" name="offset" />
          <variable citdl="String" doc="private" line="85" name="defaultMode" />
          <scope doc="Displays the shadow under the target element" ilk="function" line="91" lineend="110" name="show" signature="show(target)">
            <variable citdl="Ext.get()" ilk="argument" name="target" />
            <variable citdl="Shadow" name="this" />
          </scope>
          <variable citdl="Ext.Shadow.Pool.pull()" line="94" name="el" />
          <variable citdl="String" line="101" name="filter" />
          <variable citdl="String" line="109" name="display" />
          <scope doc="Returns true if the shadow is visible, else false" ilk="function" line="115" lineend="117" name="isVisible" returns="this.el" signature="isVisible()">
            <variable citdl="Shadow" name="this" />
          </scope>
          <scope doc="Direct alignment when values are already available. Show must be called at least once before&#xA;calling this method to ensure it is initialized." ilk="function" line="127" lineend="148" name="realign" signature="realign(l, t, w, h)">
            <variable ilk="argument" name="l" />
            <variable ilk="argument" name="t" />
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable citdl="Shadow" name="this" />
            <variable attributes="__local__ private" citdl="this.adjusts" line="131" name="a" />
            <variable attributes="__local__ private" citdl="this.el.dom" line="131" name="d" />
            <variable attributes="__local__ private" citdl="d.style" line="131" name="s" />
            <variable attributes="__local__ private" citdl="Number" line="132" name="iea" />
            <variable attributes="__local__ private" citdl="sh" line="135" name="shs" />
            <variable attributes="__local__ private" line="135" name="sw" />
            <variable attributes="__local__ private" line="135" name="sh" />
            <variable attributes="__local__ private" citdl="sw" line="135" name="sws" />
            <variable attributes="__local__ private" citdl="d.childNodes" line="140" name="cn" />
            <variable attributes="__local__ private" citdl="Math.max()" line="141" name="sww" />
          </scope>
          <scope doc="Hides this shadow" ilk="function" line="153" lineend="159" name="hide" signature="hide()">
            <variable citdl="Shadow" name="this" />
          </scope>
          <scope doc="Adjust the z-index of this shadow" ilk="function" line="165" lineend="170" name="setZIndex" signature="setZIndex(z)">
            <variable ilk="argument" name="z" />
            <variable citdl="Shadow" name="this" />
          </scope>
          <variable citdl="z" line="166" name="zIndex" />
          <variable citdl="Object" line="174" lineend="192" name="Pool">
            <scope ilk="function" line="180" lineend="187" name="pull" returns="sh" signature="pull()">
              <variable citdl="Pool" name="this" />
              <variable attributes="__local__ private" citdl="p.shift()" line="181" name="sh" />
            </scope>
            <scope ilk="function" line="189" lineend="191" name="push" signature="push(sh)">
              <variable ilk="argument" name="sh" />
              <variable citdl="Pool" name="this" />
            </scope>
          </variable>
        </scope>
        <scope ilk="class" line="18" lineend="23" name="Toolbar">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Basic Toolbar class. Toolbar elements can be created explicitly via their constructors, or implicitly&#xA;via their xtypes.  Some items also have shortcut strings for creation." ilk="function" line="18" lineend="23" name="Toolbar" signature="Toolbar(config)">
            <variable citdl="Object/Array" doc="A config object or an array of buttons to add" ilk="argument" name="config" />
            <variable citdl="Toolbar" name="this" />
          </scope>
        </scope>
        <variable citdl="Object" line="19" name="menu">
          <variable citdl="Object" line="14" lineend="212" name="MenuMgr">
            <scope doc="Hides all menus that are currently visible" ilk="function" line="109" lineend="111" name="hideAll" signature="hideAll()">
              <variable citdl="MenuMgr" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="114" lineend="131" name="register" signature="register(menu)">
              <variable ilk="argument" name="menu" />
              <variable citdl="MenuMgr" name="this" />
              <variable attributes="__local__ private" citdl="menu.group" line="123" name="g" />
            </scope>
            <scope doc="Returns a {@link Ext.menu.Menu} object" ilk="function" line="139" lineend="152" name="get" returns="Ext.menu.Menu" signature="get(menu)">
              <variable citdl="String/Object" doc="The string menu id, an existing menu object reference, or a Menu config that will&#xA;be used to generate and return a new Menu instance." ilk="argument" name="menu" />
              <variable citdl="MenuMgr" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="155" lineend="166" name="unregister" signature="unregister(menu)">
              <variable ilk="argument" name="menu" />
              <variable citdl="MenuMgr" name="this" />
              <variable attributes="__local__ private" citdl="menu.group" line="161" name="g" />
            </scope>
            <scope doc="private" ilk="function" line="169" lineend="178" name="registerCheckable" signature="registerCheckable(menuItem)">
              <variable ilk="argument" name="menuItem" />
              <variable citdl="MenuMgr" name="this" />
              <variable attributes="__local__ private" citdl="menuItem.group" line="170" name="g" />
            </scope>
            <scope doc="private" ilk="function" line="181" lineend="187" name="unregisterCheckable" signature="unregisterCheckable(menuItem)">
              <variable ilk="argument" name="menuItem" />
              <variable citdl="MenuMgr" name="this" />
              <variable attributes="__local__ private" citdl="menuItem.group" line="182" name="g" />
            </scope>
            <scope ilk="function" line="189" lineend="199" name="getCheckedItem" signature="getCheckedItem(groupId)">
              <variable ilk="argument" name="groupId" />
              <variable citdl="MenuMgr" name="this" />
              <variable attributes="__local__ private" citdl="groups[groupId]" line="190" name="g" />
            </scope>
            <scope ilk="function" line="201" lineend="211" name="setCheckedItem" signature="setCheckedItem(groupId, itemId)">
              <variable ilk="argument" name="groupId" />
              <variable ilk="argument" name="itemId" />
              <variable citdl="MenuMgr" name="this" />
              <variable attributes="__local__ private" citdl="groups[groupId]" line="202" name="g" />
            </scope>
          </variable>
          <scope ilk="class" line="17" lineend="33" name="ColorMenu">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu containing a {@link Ext.menu.ColorItem} component (which provides a basic color picker)." ilk="function" line="17" lineend="33" name="ColorMenu" signature="ColorMenu(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="ColorMenu" name="this" />
              <variable attributes="__local__ private" citdl="Ext.menu.ColorItem" line="20" name="ci" />
            </scope>
            <variable citdl="Boolean" line="19" name="plain" />
            <variable citdl="ColorPalette" doc="The {@link Ext.ColorPalette} instance for this ColorMenu" line="26" name="palette" />
          </scope>
          <scope ilk="class" line="17" lineend="46" name="CheckItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a menu item that contains a checkbox by default, but can also be part of a radio group." ilk="function" line="17" lineend="46" name="CheckItem" signature="CheckItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="CheckItem" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="17" lineend="37" name="DateMenu">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu containing a {@link Ext.menu.DateItem} component (which provides a date picker)." ilk="function" line="17" lineend="39" name="DateMenu" signature="DateMenu(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="DateMenu" name="this" />
              <variable attributes="__local__ private" citdl="Ext.menu.DateItem" line="20" name="di" />
            </scope>
            <variable citdl="Boolean" line="19" name="plain" />
            <variable citdl="DatePicker" doc="The {@link Ext.DatePicker} instance for this DateMenu" line="26" name="picker" />
          </scope>
          <scope ilk="class" line="17" lineend="19" name="Separator">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will&#xA;add one of these by using &quot;-&quot; in you call to add() or in your items config rather than creating one directly." ilk="function" line="17" lineend="19" name="Separator" signature="Separator(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Separator" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="17" lineend="25" name="ColorItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu item that wraps the {@link Ext.ColorPalette} component." ilk="function" line="17" lineend="25" name="ColorItem" signature="ColorItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="ColorItem" name="this" />
            </scope>
            <variable citdl="this.component" doc="Ext.ColorPalette */" line="20" name="palette" />
          </scope>
          <scope ilk="class" line="17" lineend="29" name="DateItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu item that wraps the {@link Ext.DatePicker} component." ilk="function" line="17" lineend="29" name="DateItem" signature="DateItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="DateItem" name="this" />
            </scope>
            <variable citdl="this.component" doc="Ext.DatePicker */" line="20" name="picker" />
          </scope>
          <scope ilk="class" line="18" lineend="94" name="Menu">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A menu object.  This is the container to which you add all other menu items.  Menu can also serve as a base class&#xA;when you want a specialized menu based off of another component (like {@link Ext.menu.DateMenu} for example)." ilk="function" line="18" lineend="94" name="Menu" signature="Menu(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Menu" name="this" />
              <variable attributes="__local__ private" citdl="this.items" line="83" name="mis" />
            </scope>
            <variable citdl="this.id" line="23" name="id" />
            <variable citdl="Ext.util.MixedCollection" doc="A MixedCollection of this Menu&apos;s items" line="90" name="items" />
          </scope>
          <scope ilk="class" line="18" lineend="23" name="TextItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a static text string to a menu, usually used as either a heading or group separator." ilk="function" line="18" lineend="23" name="TextItem" signature="TextItem(cfg)">
              <variable ilk="argument" name="cfg" />
              <variable citdl="TextItem" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="18" lineend="46" name="BaseItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The base class for all items that render into menus.  BaseItem provides default rendering, activated state&#xA;management and base configuration options shared by all menu components." ilk="function" line="18" lineend="46" name="BaseItem" signature="BaseItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="BaseItem" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="19" lineend="24" name="Item">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A base class for all menu items that require menu-related functionality (like sub-menus) and are not static&#xA;display items.  Item extends the base functionality of {@link Ext.menu.BaseItem} by adding menu-specific&#xA;activation and click handling." ilk="function" line="19" lineend="24" name="Item" signature="Item(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Item" name="this" />
            </scope>
            <variable citdl="Ext.menu.MenuMgr.get()" line="22" name="menu" />
          </scope>
          <scope ilk="class" line="19" lineend="22" name="Adapter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A base utility class that adapts a non-menu component so that it can be wrapped by a menu item and added to a menu.&#xA;It provides basic rendering, activation management and enable/disable logic required to work in menus." ilk="function" line="19" lineend="22" name="Adapter" signature="Adapter(component, config)">
              <variable citdl="Ext.Component" doc="The component being adapted to render into a menu" ilk="argument" name="component" />
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Adapter" name="this" />
            </scope>
            <variable citdl="component" line="21" name="component" />
          </scope>
          <scope doc="MenuNav is a private utility class used internally by the&#xA;Menu" ilk="function" line="548" lineend="551" name="MenuNav" signature="MenuNav(menu)">
            <variable ilk="argument" name="menu" />
            <variable citdl="menu" name="this" />
          </scope>
          <variable citdl="this.menu" line="550" name="scope" />
          <variable citdl="menu" line="550" name="menu" />
        </variable>
        <variable citdl="Object" line="19" name="air">
          <variable citdl="Object" line="9" lineend="91" name="SystemTray">
            <scope ilk="function" line="26" lineend="41" name="setIcon" signature="setIcon(icon, tooltip, initWithIcon)">
              <variable ilk="argument" name="icon" />
              <variable ilk="argument" name="tooltip" />
              <variable ilk="argument" name="initWithIcon" />
              <variable citdl="SystemTray" name="this" />
              <variable attributes="__local__ private" citdl="air.Loader" line="30" name="loader" />
            </scope>
            <scope ilk="function" line="43" lineend="45" name="bounce" signature="bounce(priority)">
              <variable ilk="argument" name="priority" />
              <variable citdl="SystemTray" name="this" />
            </scope>
            <scope ilk="function" line="47" lineend="51" name="on" signature="on(eventName, fn, scope)">
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="SystemTray" name="this" />
            </scope>
            <scope ilk="function" line="53" lineend="58" name="hideIcon" signature="hideIcon()">
              <variable citdl="SystemTray" name="this" />
            </scope>
            <scope ilk="function" line="60" lineend="65" name="showIcon" signature="showIcon()">
              <variable citdl="SystemTray" name="this" />
            </scope>
            <scope ilk="function" line="67" lineend="90" name="setMenu" returns="menu" signature="setMenu(actions, _parentMenu)">
              <variable ilk="argument" name="actions" />
              <variable ilk="argument" name="_parentMenu" />
              <variable citdl="SystemTray" name="this" />
              <variable attributes="__local__ private" citdl="air.NativeMenu" line="71" name="menu" />
              <variable attributes="__local__ private" citdl="actions[i]" line="74" name="a" />
              <variable attributes="__local__ private" citdl="menu.addItem()" line="78" name="item" />
            </scope>
          </variable>
          <variable citdl="Object" doc="*/" line="14" lineend="26" name="Sound">
            <scope doc="Play a sound." ilk="function" line="20" lineend="25" name="play" signature="play(file, startAt)">
              <variable citdl="String" doc="The file to be played. The path is resolved against applicationDirectory" ilk="argument" name="file" />
              <variable citdl="Number" doc="(optional) A time in the sound file to skip to before playing" ilk="argument" name="startAt" />
              <variable citdl="Sound" name="this" />
              <variable attributes="__local__ private" citdl="air.File.applicationDirectory.resolvePath()" line="21" name="soundFile" />
              <variable attributes="__local__ private" citdl="air.Sound" line="22" name="sound" />
            </scope>
          </variable>
          <variable citdl="Object" doc="*/" line="17" lineend="38" name="DragType">
            <variable citdl="String" doc="Constant for text data" line="21" name="TEXT" />
            <variable citdl="String" doc="Constant for html data" line="25" name="HTML" />
            <variable citdl="String" doc="Constant for url data" line="29" name="URL" />
            <variable citdl="String" doc="Constant for bitmap data" line="33" name="BITMAP" />
            <variable citdl="String" doc="Constant for file list data" line="37" name="FILES" />
          </variable>
          <scope ilk="class" line="19" lineend="28" name="FileProvider">
            <scope attributes="__ctor__" doc="{Object} config */" ilk="function" line="19" lineend="38" name="FileProvider" signature="FileProvider(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="FileProvider" name="this" />
              <variable attributes="__local__ private" citdl="this" line="34" name="provider" />
            </scope>
            <variable citdl="Object" line="22" lineend="29" name="defaultState">
              <variable citdl="Object" line="23" lineend="28" name="mainWindow">
                <variable citdl="Number" line="24" name="width" />
                <variable citdl="Number" line="25" name="height" />
                <variable citdl="Number" line="26" name="x" />
                <variable citdl="Number" line="27" name="y" />
              </variable>
            </variable>
            <variable citdl="this.readState()" line="32" name="state" />
          </scope>
          <variable citdl="Object" line="19" lineend="71" name="SystemMenu">
            <scope doc="Add items to one of the application menus" ilk="function" line="50" lineend="63" name="add" returns="item.submenu" signature="add(text, actions, mindex)">
              <variable citdl="String" doc="The application menu to add the actions to (e.g. &apos;File&apos; or &apos;Edit&apos;)." ilk="argument" name="text" />
              <variable citdl="Array" doc="An array of Ext.Action objects or menu item configs" ilk="argument" name="actions" />
              <variable citdl="Number" doc="The index of the character in &quot;text&quot; which should be used for&#xA;keyboard access" ilk="argument" name="mindex" />
              <variable citdl="SystemMenu" name="this" />
              <variable attributes="__local__ private" citdl="find()" line="52" name="item" />
            </scope>
            <scope doc="Returns the application menu" ilk="function" line="68" lineend="70" name="get" returns="menu" signature="get()">
              <variable citdl="SystemMenu" name="this" />
            </scope>
          </variable>
          <scope ilk="class" line="23" lineend="119" name="NativeWindow">
            <scope attributes="__ctor__" doc="{Object} config */" ilk="function" line="23" lineend="140" name="NativeWindow" signature="NativeWindow(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="NativeWindow" name="this" />
              <variable attributes="__local__ private" citdl="air.NativeWindowInitOptions" line="77" name="options" />
              <variable attributes="__local__ private" citdl="Ext.state.Manager" line="93" name="provider" />
              <variable attributes="__local__ private" citdl="air.Screen.mainScreen.visibleBounds" line="94" name="b" />
              <variable attributes="__local__ private" citdl="provider.get()" line="96" name="state" />
              <variable attributes="__local__ private" citdl="this.instance" line="99" name="win" />
              <variable attributes="__local__ private" citdl="Math.max()" line="101" name="width" />
              <variable attributes="__local__ private" citdl="Math.max()" line="102" name="height" />
              <variable attributes="__local__ private" citdl="b.x" line="104" name="centerX" />
              <variable attributes="__local__ private" citdl="b.y" line="105" name="centerY" />
              <variable attributes="__local__ private" line="107" name="x" />
              <variable attributes="__local__ private" line="108" name="y" />
            </scope>
            <variable citdl="String" doc="String */" line="29" name="id" />
            <variable citdl="window.runtime.flash.html.HTMLLoader.createRootWindow()" line="85" name="loader" />
            <variable citdl="this.loader.window.nativeWindow" line="88" name="instance" />
            <scope attributes="__static__" doc="STATIC: Returns the first opened window in your application" ilk="function" line="317" lineend="319" name="getRootWindow" returns="air.NativeApplication.nativeApplication.openedWindows[0]" signature="getRootWindow()">
              <variable citdl="NativeWindow" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Returns the javascript &quot;window&quot; object of the first opened window in your application" ilk="function" line="326" lineend="328" name="getRootHtmlWindow" returns="Ext.air.NativeWindow.getRootWindow().stage.getChildAt().window" signature="getRootHtmlWindow()">
              <variable citdl="NativeWindow" name="this" />
            </scope>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="*/" line="33" lineend="30" name="NativeObservable" />
          <scope doc="ability to bind native menu items to an Ext.Action" ilk="function" line="75" lineend="118" name="MenuItem" returns="nativeItem" signature="MenuItem(action)">
            <variable citdl="Ext.Action" ilk="argument" name="action" />
            <variable citdl="air" name="this" />
            <variable attributes="__local__ private" citdl="action.initialConfig" line="79" name="cfg" />
            <variable attributes="__local__ private" citdl="air.NativeMenuItem" line="80" name="nativeItem" />
            <variable attributes="__local__ private" citdl="cfg.handler" line="88" name="handler" />
            <variable attributes="__local__ private" citdl="cfg.scope" line="89" name="scope" />
          </scope>
          <scope ilk="class" line="335" lineend="344" name="NativeWindowGroup">
            <scope attributes="__ctor__" doc="Ext.air.NativeWindowGroup * * A collection of NativeWindows." ilk="function" line="335" lineend="387" name="NativeWindowGroup" signature="NativeWindowGroup()">
              <variable citdl="NativeWindowGroup" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="336" lineend="336" name="list" />
            </scope>
          </scope>
          <variable citdl="Ext.air.NativeWindowGroup" doc="*/" line="397" name="NativeWindowManager" />
        </variable>
        <variable citdl="Object" line="22" name="lib">
          <variable citdl="Object" line="22" lineend="181" name="Dom">
            <scope ilk="function" line="14" lineend="16" name="getViewWidth" returns="full" signature="getViewWidth(full)">
              <variable ilk="argument" name="full" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="18" lineend="20" name="getViewHeight" returns="full" signature="getViewHeight(full)">
              <variable ilk="argument" name="full" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="22" lineend="25" name="getDocumentHeight" returns="Math.max()" signature="getDocumentHeight()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" doc="missing from prototype?" line="23" name="scrollHeight" />
            </scope>
            <scope ilk="function" line="27" lineend="30" name="getDocumentWidth" returns="Math.max()" signature="getDocumentWidth()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" doc="missing from prototype?" line="28" name="scrollWidth" />
            </scope>
            <scope ilk="function" line="32" lineend="43" name="getViewportHeight" returns="height" signature="getViewportHeight()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="self.innerHeight" doc="missing from prototype?" line="33" name="height" />
              <variable attributes="__local__ private" citdl="document.compatMode" line="34" name="mode" />
            </scope>
            <scope ilk="function" line="45" lineend="55" name="getViewportWidth" returns="width" signature="getViewportWidth()">
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="self.innerWidth" doc="missing from prototype?" line="46" name="width" />
              <variable attributes="__local__ private" citdl="document.compatMode" doc="Safari" line="47" name="mode" />
            </scope>
            <scope ilk="function" line="57" lineend="79" name="isAncestor" returns="Boolean" signature="isAncestor(p, c)">
              <variable citdl="Ext.getDom()" ilk="argument" name="p" />
              <variable citdl="Ext.getDom()" ilk="argument" name="c" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="c.parentNode" line="67" name="parent" />
            </scope>
            <scope ilk="function" line="81" lineend="83" name="getRegion" returns="Ext.lib.Region.getRegion()" signature="getRegion(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="85" lineend="87" name="getY" returns="this.getXY()[1]" signature="getY(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="89" lineend="91" name="getX" returns="this.getXY()[0]" signature="getX(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="93" lineend="160" name="getXY" returns="Array" signature="getXY(el)">
              <variable citdl="Ext.getDom()" ilk="argument" name="el" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" doc="this initially used Position.cumulativeOffset but it is not&#xA;accurate enough" line="94" name="bd" />
              <variable attributes="__local__ private" citdl="el.getBoundingClientRect()" doc="this initially used Position.cumulativeOffset but it is not&#xA;accurate enough" line="94" name="b" />
              <variable attributes="__local__ private" citdl="el" doc="this initially used Position.cumulativeOffset but it is not&#xA;accurate enough" line="94" name="p" />
              <variable attributes="__local__ private" citdl="fly()" doc="this initially used Position.cumulativeOffset but it is not&#xA;accurate enough" line="94" name="pe" />
              <variable attributes="__local__ private" citdl="fly().getScroll()" doc="this initially used Position.cumulativeOffset but it is not&#xA;accurate enough" line="94" name="scroll" />
              <variable attributes="__local__ private" citdl="Number" line="106" name="y" />
              <variable attributes="__local__ private" citdl="Number" line="106" name="x" />
              <variable attributes="__local__ private" citdl="fly().getStyle()" line="110" name="hasAbsolute" />
              <variable citdl="Object" line="110" name="fly()">
                <variable attributes="__local__ private" line="110" name="getStyle()" />
              </variable>
              <variable attributes="__local__ private" citdl="parseInt()" line="124" name="bt" />
              <variable attributes="__local__ private" citdl="parseInt()" line="125" name="bl" />
              <variable attributes="__local__ private" citdl="fly()" line="146" name="dbd" />
            </scope>
            <scope ilk="function" line="162" lineend="172" name="setXY" signature="setXY(el, xy)">
              <variable citdl="Ext.fly()" ilk="argument" name="el" />
              <variable ilk="argument" name="xy" />
              <variable citdl="Dom" name="this" />
              <variable attributes="__local__ private" citdl="el.translatePoints()" line="165" name="pts" />
            </scope>
            <scope ilk="function" line="174" lineend="176" name="setX" signature="setX(el, x)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="x" />
              <variable citdl="Dom" name="this" />
            </scope>
            <scope ilk="function" line="178" lineend="180" name="setY" signature="setY(el, y)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="y" />
              <variable citdl="Dom" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" line="184" lineend="271" name="Event">
            <scope ilk="function" line="184" lineend="186" name="getPageX" returns="Event.pointerX()" signature="getPageX(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="188" lineend="190" name="getPageY" returns="Event.pointerY()" signature="getPageY(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="192" lineend="195" name="getXY" returns="Array" signature="getXY(e)">
              <variable citdl="e.browserEvent" ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <variable citdl="Number" line="194" name="POLL_RETRYS" />
            <variable citdl="Number" line="195" name="POLL_INTERVAL" />
            <variable citdl="Number" line="196" name="EL" />
            <scope ilk="function" line="197" lineend="199" name="getTarget" returns="Event.element()" signature="getTarget(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <variable citdl="Number" line="197" name="TYPE" />
            <variable citdl="Number" line="198" name="FN" />
            <variable citdl="Number" line="199" name="WFN" />
            <variable citdl="Number" line="200" name="OBJ" />
            <scope ilk="function" line="201" lineend="207" name="resolveTextNode" returns="Node" signature="resolveTextNode(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="Event" name="this" />
            </scope>
            <variable citdl="Number" line="201" name="ADJ_SCOPE" />
            <variable citdl="setInterval()" line="202" name="_interval" />
            <scope ilk="function" line="204" lineend="213" name="startInterval" signature="startInterval()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="this" line="206" name="self" />
              <scope attributes="__local__ private" ilk="function" line="207" lineend="209" name="callback" signature="callback()" />
            </scope>
            <scope ilk="function" line="209" lineend="221" name="getRelatedTarget" returns="this.resolveTextNode()" signature="getRelatedTarget(ev)">
              <variable citdl="ev.browserEvent" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="ev.relatedTarget" line="211" name="t" />
            </scope>
            <scope ilk="function" line="223" lineend="225" name="on" signature="on(el, eventName, fn)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="227" lineend="252" name="addListener" returns="Boolean" signature="addListener(el, eventName, fn)">
              <variable citdl="Ext.getDom()" ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
              <scope attributes="__local__ private" doc="prevent unload errors with simple check" ilk="function" line="240" lineend="242" name="wrappedFn" signature="wrappedFn(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <variable attributes="__local__ private" citdl="Array" line="244" name="li" />
              <variable attributes="__local__ private" citdl="listeners.length" line="246" name="index" />
            </scope>
            <scope ilk="function" line="227" lineend="229" name="un" signature="un(el, eventName, fn)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="231" lineend="233" name="purgeElement" signature="purgeElement(el)">
              <variable ilk="argument" name="el" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="235" lineend="242" name="preventDefault" signature="preventDefault(e)">
              <variable citdl="e.browserEvent" ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="244" lineend="251" name="stopPropagation" signature="stopPropagation(e)">
              <variable citdl="e.browserEvent" ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="253" lineend="255" name="stopEvent" signature="stopEvent(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="255" lineend="306" name="removeListener" returns="Boolean" signature="removeListener(el, eventName, fn)">
              <variable citdl="Ext.getDom()" ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="256" name="i" />
              <variable attributes="__local__ private" line="256" name="len" />
              <variable attributes="__local__ private" citdl="unloadListeners[i]" line="268" name="li" />
              <variable attributes="__local__ private" citdl="listeners[index]" line="281" name="cacheItem" />
              <variable attributes="__local__ private" citdl="arguments[3]" line="284" name="index" />
            </scope>
            <scope ilk="function" line="257" lineend="270" name="onAvailable" signature="onAvailable(id, fn, scope)">
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Date" doc="no equiv" line="258" name="start" />
              <variable attributes="__local__ private" citdl="setInterval()" doc="no equiv" line="258" name="iid" />
              <scope attributes="__local__ private" ilk="function" line="259" lineend="268" name="f" signature="f()">
                <variable attributes="__local__ private" citdl="document.getElementById()" line="263" name="el" />
              </scope>
            </scope>
            <scope ilk="function" line="377" lineend="390" name="getTime" returns="ev.time" signature="getTime(ev)">
              <variable citdl="ev.browserEvent" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Date" line="380" name="t" />
            </scope>
            <variable citdl="ex" line="384" name="lastError" />
            <scope ilk="function" line="419" lineend="432" name="getEvent" returns="ev" signature="getEvent(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="e" line="420" name="ev" />
              <variable attributes="__local__ private" citdl="this.getEvent.caller" line="422" name="c" />
            </scope>
            <scope ilk="function" line="435" lineend="438" name="getCharCode" returns="ev.charCode" signature="getCharCode(ev)">
              <variable citdl="ev.browserEvent" ilk="argument" name="ev" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="441" lineend="453" name="_getCacheIndex" returns="Number" signature="_getCacheIndex(el, eventName, fn)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="listeners[i]" line="443" name="li" />
            </scope>
            <variable citdl="Object" line="456" lineend="456" name="elCache" />
            <scope ilk="function" line="459" lineend="461" name="getEl" returns="document.getElementById()" signature="getEl(id)">
              <variable ilk="argument" name="id" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="464" lineend="465" name="clearCache" signature="clearCache()">
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="468" lineend="476" name="_load" signature="_load(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event" line="470" name="EU" />
            </scope>
            <scope ilk="function" line="479" lineend="537" name="_tryPreloadAttach" returns="Boolean" signature="_tryPreloadAttach()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="488" name="tryAgain" />
              <variable attributes="__local__ private" citdl="Array" line="494" name="notAvail" />
              <variable attributes="__local__ private" citdl="onAvailStack[i]" line="496" name="item" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="498" name="el" />
              <variable attributes="__local__ private" citdl="el" line="506" name="scope" />
            </scope>
            <variable citdl="Boolean" line="485" name="locked" />
            <scope ilk="function" line="557" lineend="587" name="getListeners" signature="getListeners(el, eventName)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="eventName" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="558" name="searchLists" />
              <variable attributes="__local__ private" citdl="Array" line="558" name="results" />
              <variable attributes="__local__ private" citdl="searchLists[j]" line="568" name="searchList" />
              <variable attributes="__local__ private" citdl="searchList[i]" line="571" name="l" />
            </scope>
            <scope ilk="function" line="590" lineend="632" name="_unload" signature="_unload(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="j" line="592" name="index" />
              <variable attributes="__local__ private" line="592" name="i" />
              <variable attributes="__local__ private" citdl="listeners.length" line="592" name="j" />
              <variable attributes="__local__ private" citdl="unloadListeners[i]" line="592" name="l" />
              <variable attributes="__local__ private" line="592" name="len" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event" line="592" name="EU" />
              <variable attributes="__local__ private" citdl="window" line="597" name="scope" />
            </scope>
            <scope ilk="function" line="635" lineend="644" name="getScroll" returns="Array" signature="getScroll()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="document.documentElement" line="636" name="dd" />
              <variable attributes="__local__ private" citdl="document.body" line="636" name="db" />
            </scope>
            <variable line="647" name="doAdd" />
            <variable line="663" name="doRemove" />
          </variable>
          <variable citdl="YAHOO.util.Region" line="238" name="Region" />
          <variable citdl="YAHOO.util.Point" line="239" name="Point" />
          <variable citdl="Object" line="273" lineend="347" name="Ajax">
            <scope ilk="function" line="293" lineend="324" name="request" signature="request(method, uri, cb, data, options)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="options" />
              <variable citdl="Ajax" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="294" lineend="300" name="o">
                <variable citdl="method" line="295" name="method" />
                <variable citdl="data" line="296" name="parameters" />
                <variable citdl="cb.timeout" line="297" name="timeout" />
                <variable citdl="createSuccess()" line="298" name="onSuccess" />
                <variable citdl="createFailure()" line="299" name="onFailure" />
                <variable citdl="hs" line="304" name="requestHeaders" />
                <variable citdl="String" line="309" name="contentType" />
                <variable citdl="options.xmlData" line="311" name="postBody" />
              </variable>
              <variable attributes="__local__ private" citdl="options.headers" line="302" name="hs" />
            </scope>
            <scope ilk="function" line="326" lineend="334" name="formRequest" signature="formRequest(form, uri, cb, data, isUpload, sslUri)">
              <variable ilk="argument" name="form" />
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="isUpload" />
              <variable ilk="argument" name="sslUri" />
              <variable citdl="Ajax" name="this" />
            </scope>
            <scope ilk="function" line="336" lineend="338" name="isCallInProgress" returns="Boolean" signature="isCallInProgress(trans)">
              <variable ilk="argument" name="trans" />
              <variable citdl="Ajax" name="this" />
            </scope>
            <scope ilk="function" line="340" lineend="342" name="abort" returns="Boolean" signature="abort(trans)">
              <variable ilk="argument" name="trans" />
              <variable citdl="Ajax" name="this" />
            </scope>
            <scope ilk="function" line="344" lineend="346" name="serializeForm" returns="Form.serialize()" signature="serializeForm(form)">
              <variable ilk="argument" name="form" />
              <variable citdl="Ajax" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" line="351" lineend="438" name="Anim">
            <scope ilk="function" line="377" lineend="389" name="scroll" returns="anim" signature="scroll(el, args, duration, easing, cb, scope)">
              <variable citdl="Ext.getDom()" ilk="argument" name="el" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" citdl="createAnim()" doc="not supported so scroll immediately?" line="379" name="anim" />
            </scope>
            <scope ilk="function" line="391" lineend="393" name="motion" returns="this.run()" signature="motion(el, args, duration, easing, cb, scope)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope ilk="function" line="395" lineend="397" name="color" returns="this.run()" signature="color(el, args, duration, easing, cb, scope)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Anim" name="this" />
            </scope>
            <scope ilk="function" line="399" lineend="437" name="run" returns="anim" signature="run(el, args, duration, easing, cb, scope, type)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="type" />
              <variable citdl="Anim" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="400" lineend="400" name="o">
                <variable citdl="pts.left" line="412" name="left" />
                <variable citdl="pts.top" line="413" name="top" />
                <variable citdl="args.width.to" line="416" name="width" />
                <variable citdl="args.height.to" line="419" name="height" />
                <variable citdl="String()" line="422" name="opacity" />
              </variable>
              <variable attributes="__local__ private" citdl="Ext.fly()" line="404" name="e" />
              <variable attributes="__local__ private" citdl="e.translatePoints()" line="404" name="pts" />
              <variable attributes="__local__ private" line="404" name="by" />
              <variable attributes="__local__ private" citdl="e.getXY()" line="407" name="xy" />
              <variable attributes="__local__ private" citdl="createAnim()" line="429" name="anim" />
            </scope>
          </variable>
          <variable citdl="t" line="446" name="top" />
          <variable citdl="r" line="448" name="right" />
          <variable citdl="b" line="449" name="bottom" />
          <variable citdl="l" line="450" name="left" />
          <scope ilk="function" line="451" lineend="458" name="Region" signature="Region(t, r, b, l)">
            <variable ilk="argument" name="t" />
            <variable ilk="argument" name="r" />
            <variable ilk="argument" name="b" />
            <variable ilk="argument" name="l" />
            <variable citdl="lib" name="this" />
          </scope>
          <variable citdl="this.right" line="521" name="x" />
          <scope ilk="function" line="522" lineend="529" name="Point" signature="Point(x, y)">
            <variable citdl="x[0]" ilk="argument" name="x" />
            <variable citdl="x[1]" ilk="argument" name="y" />
            <variable citdl="lib" name="this" />
          </scope>
          <variable citdl="this.top" line="522" name="y" />
          <scope ilk="class" line="1170" lineend="509" name="Region">
            <scope ilk="function" line="461" lineend="467" name="contains" signature="contains(region)">
              <variable ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
            </scope>
            <scope ilk="function" line="469" lineend="471" name="getArea" signature="getArea()">
              <variable citdl="Region" name="this" />
            </scope>
            <scope ilk="function" line="473" lineend="484" name="intersect" signature="intersect(region)">
              <variable ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Math.max()" line="474" name="t" />
              <variable attributes="__local__ private" citdl="Math.min()" line="475" name="r" />
              <variable attributes="__local__ private" citdl="Math.min()" line="476" name="b" />
              <variable attributes="__local__ private" citdl="Math.max()" line="477" name="l" />
            </scope>
            <scope ilk="function" line="485" lineend="492" name="union" returns="Ext.lib.Region" signature="union(region)">
              <variable ilk="argument" name="region" />
              <variable citdl="Region" name="this" />
              <variable attributes="__local__ private" citdl="Math.min()" line="486" name="t" />
              <variable attributes="__local__ private" citdl="Math.max()" line="487" name="r" />
              <variable attributes="__local__ private" citdl="Math.max()" line="488" name="b" />
              <variable attributes="__local__ private" citdl="Math.min()" line="489" name="l" />
            </scope>
            <scope ilk="function" line="494" lineend="500" name="constrainTo" returns="this" signature="constrainTo(r)">
              <variable ilk="argument" name="r" />
              <variable citdl="Region" name="this" />
            </scope>
            <scope ilk="function" line="502" lineend="508" name="adjust" returns="this" signature="adjust(t, l, b, r)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="l" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="r" />
              <variable citdl="Region" name="this" />
            </scope>
            <scope attributes="__ctor__" ilk="function" line="1170" lineend="1177" name="Region" signature="Region(t, r, b, l)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="r" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="l" />
              <variable citdl="Region" name="this" />
            </scope>
            <variable citdl="t" line="1171" name="top" />
            <variable citdl="r" line="1173" name="right" />
            <variable citdl="b" line="1174" name="bottom" />
            <variable citdl="l" line="1175" name="left" />
          </scope>
          <scope classrefs="Ext.lib.Region" ilk="class" line="1241" lineend="1256" name="Point">
            <scope attributes="__ctor__" ilk="function" line="1241" lineend="1248" name="Point" signature="Point(x, y)">
              <variable citdl="x[0]" ilk="argument" name="x" />
              <variable citdl="x[1]" ilk="argument" name="y" />
              <variable citdl="Point" name="this" />
            </scope>
            <variable citdl="this.left" line="1246" name="right" />
            <variable citdl="this.right" line="1246" name="x" />
            <variable citdl="this[0]" line="1246" name="left" />
            <variable citdl="this[1]" line="1247" name="bottom" />
            <variable citdl="this.bottom" line="1247" name="top" />
            <variable citdl="this.top" line="1247" name="y" />
          </scope>
          <scope ilk="class" line="1303" lineend="1562" name="AnimBase">
            <scope attributes="__ctor__" ilk="function" line="1303" lineend="1307" name="AnimBase" signature="AnimBase(el, attributes, duration, method)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="attributes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="method" />
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1311" lineend="1315" name="toString" signature="toString()">
              <variable citdl="AnimBase" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="1312" name="el" />
              <variable attributes="__local__ private" citdl="el.id" line="1313" name="id" />
            </scope>
            <variable citdl="Object" line="1317" lineend="1322" name="patterns">
              <variable line="1318" name="noNegatives" />
              <variable line="1319" name="offsetAttribute" />
              <variable line="1320" name="defaultUnit" />
            </variable>
            <scope ilk="function" line="1325" lineend="1327" name="doMethod" returns="this.method()" signature="doMethod(attr, start, end)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="end" />
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1330" lineend="1336" name="setAttribute" signature="setAttribute(attr, val, unit)">
              <variable ilk="argument" name="attr" />
              <variable ilk="argument" name="val" />
              <variable ilk="argument" name="unit" />
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1339" lineend="1359" name="getAttribute" returns="val" signature="getAttribute(attr)">
              <variable ilk="argument" name="attr" />
              <variable citdl="AnimBase" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="1340" name="el" />
              <variable attributes="__local__ private" citdl="fly().getStyle()" line="1341" name="val" />
              <variable attributes="__local__ private" citdl="this.patterns.offsetAttribute.exec()" line="1347" name="a" />
              <variable attributes="__local__ private" line="1348" name="pos" />
              <variable attributes="__local__ private" line="1349" name="box" />
            </scope>
            <scope ilk="function" line="1362" lineend="1368" name="getDefaultUnit" returns="String" signature="getDefaultUnit(attr)">
              <variable ilk="argument" name="attr" />
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1370" lineend="1379" name="animateX" signature="animateX(callback, scope)">
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable citdl="AnimBase" name="this" />
              <scope attributes="__local__ private" ilk="function" line="1371" lineend="1376" name="f" signature="f()" />
            </scope>
            <scope ilk="function" line="1382" lineend="1418" name="setRuntimeAttribute" returns="Boolean" signature="setRuntimeAttribute(attr)">
              <variable ilk="argument" name="attr" />
              <variable citdl="AnimBase" name="this" />
              <variable attributes="__local__ private" line="1383" name="start" />
              <variable attributes="__local__ private" citdl="attributes[attr][&apos;to&apos;]" line="1384" name="end" />
              <variable attributes="__local__ private" citdl="this.attributes" line="1385" name="attributes" />
              <scope attributes="__local__ private" ilk="function" line="1389" lineend="1391" name="isset" signature="isset(prop)">
                <variable ilk="argument" name="prop" />
              </scope>
            </scope>
            <scope ilk="function" line="1421" lineend="1561" name="init" signature="init(el, attributes, duration, method)">
              <variable citdl="Ext.getDom()" ilk="argument" name="el" />
              <variable ilk="argument" name="attributes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="method" />
              <variable citdl="AnimBase" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="1423" name="isAnimated" />
              <variable attributes="__local__ private" citdl="Date" line="1426" name="startTime" />
              <variable attributes="__local__ private" citdl="Number" line="1429" name="actualFrames" />
              <scope attributes="__local__ private" ilk="class" line="1491" lineend="1502" name="onStart">
                <scope attributes="__local__ private __ctor__" ilk="function" line="1491" lineend="1502" name="onStart" signature="onStart()">
                  <variable citdl="onStart" name="this" />
                </scope>
                <variable citdl="Object" line="1494" lineend="1494" name="runtimeAttributes" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="1505" lineend="1527" name="onTween" signature="onTween()">
                <variable attributes="__local__ private" citdl="Object" line="1506" lineend="1509" name="data">
                  <variable citdl="Date" line="1507" name="duration" />
                  <variable citdl="this.currentFrame" line="1508" name="currentFrame" />
                  <scope ilk="function" line="1511" lineend="1516" name="toString" signature="toString()">
                    <variable citdl="data" name="this" />
                  </scope>
                </variable>
                <variable attributes="__local__ private" citdl="this.runtimeAttributes" line="1520" name="runtimeAttributes" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="1529" lineend="1549" name="onComplete" signature="onComplete()">
                <variable attributes="__local__ private" line="1530" name="actual_duration" />
                <variable attributes="__local__ private" citdl="Object" line="1532" lineend="1536" name="data">
                  <variable citdl="actual_duration" line="1533" name="duration" />
                  <variable citdl="actualFrames" line="1534" name="frames" />
                  <variable citdl="actualFrames" line="1535" name="fps" />
                  <scope ilk="function" line="1538" lineend="1544" name="toString" signature="toString()">
                    <variable citdl="data" name="this" />
                  </scope>
                </variable>
              </scope>
            </scope>
            <variable citdl="attributes" line="1435" name="attributes" />
            <variable citdl="duration" line="1438" name="duration" />
            <variable citdl="method" line="1441" name="method" />
            <variable citdl="Boolean" line="1444" name="useSeconds" />
            <variable citdl="Number" line="1447" name="currentFrame" />
            <variable citdl="Ext.lib.AnimMgr.fps" line="1450" name="totalFrames" />
            <scope ilk="function" line="1453" lineend="1455" name="getEl" returns="el" signature="getEl()">
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1458" lineend="1460" name="isAnimated" returns="isAnimated" signature="isAnimated()">
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1463" lineend="1465" name="getStartTime" returns="startTime" signature="getStartTime()">
              <variable citdl="AnimBase" name="this" />
            </scope>
            <variable citdl="Object" line="1467" lineend="1467" name="runtimeAttributes" />
            <scope ilk="function" line="1470" lineend="1480" name="animate" returns="Boolean" signature="animate()">
              <variable citdl="AnimBase" name="this" />
            </scope>
            <scope ilk="function" line="1483" lineend="1489" name="stop" signature="stop(finish)">
              <variable ilk="argument" name="finish" />
              <variable citdl="AnimBase" name="this" />
            </scope>
            <variable citdl="Ext.util.Event" line="1552" name="_onStart" />
            <variable citdl="Ext.util.Event" line="1553" name="onStart" />
            <variable citdl="Ext.util.Event" line="1554" name="onTween" />
            <variable citdl="Ext.util.Event" line="1555" name="_onTween" />
            <variable citdl="Ext.util.Event" line="1556" name="onComplete" />
            <variable citdl="Ext.util.Event" line="1557" name="_onComplete" />
          </scope>
          <scope ilk="function" line="1708" lineend="1710" name="ColorAnim" signature="ColorAnim(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="attributes" />
            <variable ilk="argument" name="duration" />
            <variable ilk="argument" name="method" />
            <variable citdl="lib" name="this" />
          </scope>
          <variable citdl="Object" line="1820" lineend="1995" name="Easing">
            <scope ilk="function" line="1823" lineend="1825" name="easeNone" returns="c" signature="easeNone(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1828" lineend="1830" name="easeIn" returns="c" signature="easeIn(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1833" lineend="1835" name="easeOut" returns="c" signature="easeOut(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1838" lineend="1844" name="easeBoth" returns="c" signature="easeBoth(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1847" lineend="1849" name="easeInStrong" returns="c" signature="easeInStrong(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1852" lineend="1854" name="easeOutStrong" returns="c" signature="easeOutStrong(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1857" lineend="1863" name="easeBothStrong" returns="c" signature="easeBothStrong(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1867" lineend="1887" name="elasticIn" signature="elasticIn(t, b, c, d, a, p)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="c" ilk="argument" name="a" />
              <variable citdl="d" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="1880" name="s" />
            </scope>
            <scope ilk="function" line="1890" lineend="1910" name="elasticOut" returns="a" signature="elasticOut(t, b, c, d, a, p)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="c" ilk="argument" name="a" />
              <variable citdl="d" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="1903" name="s" />
            </scope>
            <scope ilk="function" line="1913" lineend="1940" name="elasticBoth" returns="a" signature="elasticBoth(t, b, c, d, a, p)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="c" ilk="argument" name="a" />
              <variable citdl="d" ilk="argument" name="p" />
              <variable citdl="Easing" name="this" />
              <variable attributes="__local__ private" citdl="p" line="1928" name="s" />
            </scope>
            <scope ilk="function" line="1944" lineend="1949" name="backIn" returns="c" signature="backIn(t, b, c, d, s)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Number" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1952" lineend="1957" name="backOut" returns="c" signature="backOut(t, b, c, d, s)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Number" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1960" lineend="1969" name="backBoth" returns="c" signature="backBoth(t, b, c, d, s)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Number" ilk="argument" name="s" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1972" lineend="1974" name="bounceIn" returns="c" signature="bounceIn(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1977" lineend="1986" name="bounceOut" returns="c" signature="bounceOut(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
            <scope ilk="function" line="1989" lineend="1994" name="bounceBoth" returns="Ext.lib.Easing.bounceOut()" signature="bounceBoth(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
              <variable citdl="Easing" name="this" />
            </scope>
          </variable>
          <scope ilk="function" line="1998" lineend="2002" name="Motion" signature="Motion(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="attributes" />
            <variable ilk="argument" name="duration" />
            <variable ilk="argument" name="method" />
            <variable citdl="lib" name="this" />
          </scope>
          <scope ilk="function" line="2129" lineend="2133" name="Scroll" signature="Scroll(el, attributes, duration, method)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="attributes" />
            <variable ilk="argument" name="duration" />
            <variable ilk="argument" name="method" />
            <variable citdl="lib" name="this" />
          </scope>
        </variable>
        <variable citdl="Object" line="25" lineend="102" name="ComponentMgr">
          <scope doc="Registers a component." ilk="function" line="34" lineend="36" name="register" signature="register(c)">
            <variable citdl="Ext.Component" doc="The component" ilk="argument" name="c" />
            <variable citdl="ComponentMgr" name="this" />
          </scope>
          <scope doc="Unregisters a component." ilk="function" line="42" lineend="44" name="unregister" signature="unregister(c)">
            <variable citdl="Ext.Component" doc="The component" ilk="argument" name="c" />
            <variable citdl="ComponentMgr" name="this" />
          </scope>
          <scope doc="Returns a component by id" ilk="function" line="51" lineend="53" name="get" returns="all.get()" signature="get(id)">
            <variable citdl="String" doc="The component id" ilk="argument" name="id" />
            <variable citdl="ComponentMgr" name="this" />
          </scope>
          <scope doc="Registers a function that will be called when a specified component is added to ComponentMgr" ilk="function" line="61" lineend="68" name="onAvailable" signature="onAvailable(id, fn, scope)">
            <variable citdl="String" doc="The component id" ilk="argument" name="id" />
            <variable citdl="Function" doc="The callback function" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope of the callback" ilk="argument" name="scope" />
            <variable citdl="ComponentMgr" name="this" />
          </scope>
          <variable citdl="MixedCollection" doc="The MixedCollection used internally for the component cache. An example usage may be subscribing to&#xA;events on the MixedCollection to monitor addition or removal.  Read-only." line="75" name="all" />
          <scope doc="&lt;p&gt;Registers a new Component constructor, keyed by a new&#xA;{@link Ext.Component#xtype}.&lt;/p&gt;&#xA;&lt;p&gt;Use this method to register new subclasses of {@link Ext.Component} so&#xA;that lazy instantiation may be used when specifying child Components.&#xA;see {@link Ext.Container#items}&lt;/p&gt;" ilk="function" line="87" lineend="90" name="registerType" signature="registerType(xtype, cls)">
            <variable citdl="String" doc="The mnemonic string by which the Component class&#xA;may be looked up." ilk="argument" name="xtype" />
            <variable citdl="Constructor" doc="The new Component class." ilk="argument" name="cls" />
            <variable citdl="ComponentMgr" name="this" />
          </scope>
          <scope doc="Creates a new Component from the specified config object using the&#xA;config object&apos;s {@link Ext.component#xtype xtype} to determine the class to instantiate." ilk="function" line="99" lineend="101" name="create" returns="types" signature="create(config, defaultType)">
            <variable citdl="Object" doc="A configuration object for the Component you wish to create." ilk="argument" name="config" />
            <variable citdl="Constructor" doc="The constructor to provide the default Component type if&#xA;the config object does not contain an xtype. (Optional if the config contains an xtype)." ilk="argument" name="defaultType" />
            <variable citdl="ComponentMgr" name="this" />
          </scope>
        </variable>
        <scope ilk="class" line="26" lineend="41" name="ColorPalette">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Simple color palette class for choosing colors.  The palette can be rendered to any container.&lt;br /&gt;&#xA;Here&apos;s an example of typical usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var cp = new Ext.ColorPalette({value:&apos;993300&apos;});  // initial selected color&#xA;cp.render(&apos;my-div&apos;);&#xA;cp.on(&apos;select&apos;, function(palette, selColor){&#xA;// do something with selColor&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="26" lineend="41" name="ColorPalette" signature="ColorPalette(config)">
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="ColorPalette" name="this" />
          </scope>
        </scope>
        <scope ilk="class" line="26" lineend="219" name="Template">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Represents an HTML fragment template. Templates can be precompiled for greater performance.&#xA;For a list of available format functions, see {@link Ext.util.Format}.&lt;br /&gt;&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var t = new Ext.Template(&#xA;&apos;&amp;lt;div name=&quot;{id}&quot;&amp;gt;&apos;,&#xA;&apos;&amp;lt;span class=&quot;{cls}&quot;&amp;gt;{name:trim} {value:ellipsis(10)}&amp;lt;/span&amp;gt;&apos;,&#xA;&apos;&amp;lt;/div&amp;gt;&apos;&#xA;t.append(&apos;some-element&apos;, {id: &apos;myid&apos;, cls: &apos;myclass&apos;, name: &apos;foo&apos;, value: &apos;bar&apos;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;For more information see this blog post with examples: &lt;a href=&quot;http://www.jackslocum.com/blog/2006/10/06/domhelper-create-elements-using-dom-html-fragments-or-templates/&quot;&gt;DomHelper - Create Elements using DOM, HTML fragments and Templates&lt;/a&gt;." ilk="function" line="26" lineend="46" name="Template" signature="Template(html)">
            <variable citdl="String/Array" doc="The HTML fragment or an array of fragments to join(&quot;&quot;) or multiple arguments to join(&quot;&quot;)" ilk="argument" name="html" />
            <variable citdl="Template" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="27" name="a" />
            <variable attributes="__local__ private" citdl="Array" line="31" name="buf" />
          </scope>
          <variable citdl="html" doc="@private*/" line="42" name="html" />
          <scope doc="Returns an HTML fragment of this template with the specified values applied." ilk="function" line="53" lineend="84" name="applyTemplate" returns="String" signature="applyTemplate(values)">
            <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Template" name="this" />
            <variable attributes="__local__ private" citdl="this.disableFormats" line="57" name="useF" />
            <variable attributes="__local__ private" citdl="this" line="58" name="tpl" />
            <variable attributes="__local__ private" citdl="Ext.util.Format" line="58" name="fm" />
            <scope attributes="__local__ private" ilk="function" line="59" lineend="82" name="fn" returns="values[name]" signature="fn(m, name, format, args)">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="format" />
              <variable citdl="Array" ilk="argument" name="args" />
              <variable attributes="__local__ private" doc="quoted reversed for jsmin" line="68" name="re" />
            </scope>
          </scope>
          <scope doc="Sets the HTML used as the template and optionally compiles it." ilk="function" line="92" lineend="99" name="set" returns="Ext.Template" signature="set(html, compile)">
            <variable citdl="String" ilk="argument" name="html" />
            <variable citdl="Boolean" doc="(optional) True to compile the template (defaults to undefined)" ilk="argument" name="compile" />
            <variable citdl="Template" name="this" />
          </scope>
          <variable line="94" name="compiled" />
          <variable citdl="Boolean" doc="True to disable format functions (defaults to false)" line="105" name="disableFormats" />
          <variable citdl="RegExp" doc="The regular expression used to match template variables" line="112" name="re" />
          <scope doc="Compiles the template into an internal function, eliminating the RegEx overhead." ilk="function" line="118" lineend="150" name="compile" returns="Ext.Template" signature="compile()">
            <variable citdl="Template" name="this" />
            <variable attributes="__local__ private" citdl="Ext.util.Format" line="119" name="fm" />
            <variable attributes="__local__ private" citdl="this.disableFormats" line="120" name="useF" />
            <variable attributes="__local__ private" citdl="Ext.isGecko" line="121" name="sep" />
            <scope attributes="__local__ private" ilk="function" line="122" lineend="135" name="fn" returns="String" signature="fn(m, name, format, args)">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="name" />
              <variable citdl="String" ilk="argument" name="format" />
              <variable citdl="String" ilk="argument" name="args" />
            </scope>
            <variable attributes="__local__ private" citdl="String" line="136" name="body" />
          </scope>
          <scope doc="private function used to call members" ilk="function" line="153" lineend="155" name="call" returns="this[fnName]()" signature="call(fnName, value, allValues)">
            <variable ilk="argument" name="fnName" />
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="allValues" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope doc="Applies the supplied values to the template and inserts the new node(s) as the first child of el." ilk="function" line="164" lineend="166" name="insertFirst" returns="HTMLElement/Ext.Element" signature="insertFirst(el, values, returnElement)">
            <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope doc="Applies the supplied values to the template and inserts the new node(s) before el." ilk="function" line="175" lineend="177" name="insertBefore" returns="HTMLElement/Ext.Element" signature="insertBefore(el, values, returnElement)">
            <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope doc="Applies the supplied values to the template and inserts the new node(s) after el." ilk="function" line="186" lineend="188" name="insertAfter" returns="HTMLElement/Ext.Element" signature="insertAfter(el, values, returnElement)">
            <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope doc="Applies the supplied values to the template and appends the new node(s) to el." ilk="function" line="197" lineend="199" name="append" returns="HTMLElement/Ext.Element" signature="append(el, values, returnElement)">
            <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope ilk="function" line="201" lineend="205" name="doInsert" returns="returnEl" signature="doInsert(where, el, values, returnEl)">
            <variable ilk="argument" name="where" />
            <variable citdl="Ext.getDom()" ilk="argument" name="el" />
            <variable ilk="argument" name="values" />
            <variable ilk="argument" name="returnEl" />
            <variable citdl="Template" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.insertHtml()" line="203" name="newNode" />
          </scope>
          <scope doc="Applies the supplied values to the template and overwrites the content of el with the new node(s)." ilk="function" line="214" lineend="218" name="overwrite" returns="HTMLElement/Ext.Element" signature="overwrite(el, values, returnElement)">
            <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
            <variable citdl="Template" name="this" />
          </scope>
          <scope attributes="__static__" doc="STATIC: Creates a template from the passed element&apos;s value (&lt;i&gt;display:none&lt;/i&gt; textarea, preferred) or innerHTML." ilk="function" line="240" lineend="243" name="from" returns="Ext.Template" signature="from(el, config)">
            <variable citdl="String/HTMLElement" doc="A DOM element or its id" ilk="argument" name="el" />
            <variable citdl="Object" doc="A configuration object" ilk="argument" name="config" />
            <variable citdl="Template" name="this" />
          </scope>
        </scope>
        <scope ilk="class" line="26" lineend="125" name="LoadMask">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple utility class for generically masking elements while loading data.  If the {@link #store}&#xA;config option is specified, the masking will be automatically synchronized with the store&apos;s loading&#xA;process and the mask element will be cached for reuse.  For all other elements, this mask will replace the&#xA;element&apos;s Updater load indicator and will be destroyed after the initial load.&#xA;&lt;p&gt;Example usage:&lt;/p&gt;&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// Basic mask:&#xA;var myMask = new Ext.LoadMask(Ext.getBody(), {msg:&quot;Please wait...&quot;});&#xA;myMask.show();&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="26" lineend="42" name="LoadMask" signature="LoadMask(el, config)">
            <variable citdl="Mixed" doc="The element or DOM node, or its id" ilk="argument" name="el" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="LoadMask" name="this" />
            <variable attributes="__local__ private" citdl="this.el.getUpdater()" line="35" name="um" />
          </scope>
          <variable citdl="Ext.get()" line="27" name="el" />
          <variable citdl="Ext.value()" line="33" name="removeMask" />
          <variable citdl="String" doc="Optional Store to which the mask is bound. The mask is displayed when a load request is issued, and&#xA;hidden on either load sucess, or load fail." line="59" name="msg" />
          <variable citdl="String" doc="The CSS class to apply to the loading message element (defaults to &quot;x-mask-loading&quot;)" line="64" name="msgCls" />
          <variable citdl="Boolean" doc="Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)" line="70" name="disabled" />
          <scope doc="Disables the mask to prevent it from being displayed" ilk="function" line="75" lineend="77" name="disable" signature="disable()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="Enables the mask so that it can be displayed" ilk="function" line="82" lineend="84" name="enable" signature="enable()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="87" lineend="89" name="onLoad" signature="onLoad()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="92" lineend="96" name="onBeforeLoad" signature="onBeforeLoad()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="Show this LoadMask over the configured Element." ilk="function" line="101" lineend="103" name="show" signature="show()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="Hide this LoadMask." ilk="function" line="108" lineend="110" name="hide" signature="hide()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="113" lineend="124" name="destroy" signature="destroy()">
            <variable citdl="LoadMask" name="this" />
            <variable attributes="__local__ private" citdl="this.el.getUpdater()" line="119" name="um" />
          </scope>
        </scope>
        <variable citdl="Object" line="26" name="data">
          <scope doc="private Field objects are not intended to be created&#xA;directly, but are created behind the scenes when defined for&#xA;Record objects." ilk="class" line="12" lineend="107" name="Field">
            <scope attributes="__ctor__" doc="private Field objects are not intended to be created&#xA;directly, but are created behind the scenes when defined for&#xA;Record objects." ilk="function" line="12" lineend="99" name="Field" signature="Field(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="Field" name="this" />
              <variable attributes="__local__ private" citdl="Ext.data.SortTypes" line="22" name="st" />
              <variable attributes="__local__ private" doc="define once" line="43" name="stripRe" />
              <variable attributes="__local__ private" citdl="this.dateFormat" line="48" name="dateFormat" />
              <variable attributes="__local__ private" line="48" name="cv" />
              <scope attributes="__local__ private" ilk="function" line="75" lineend="93" name="cv" returns="parsed" signature="cv(v)">
                <variable ilk="argument" name="v" />
                <variable attributes="__local__ private" citdl="Date.parse()" line="91" name="parsed" />
              </scope>
            </scope>
            <variable citdl="String" line="19" name="type" />
            <variable citdl="st[this.sortType]" line="25" name="sortType" />
            <variable citdl="cv" line="97" name="convert" />
            <variable line="102" name="dateFormat" />
            <variable citdl="String" line="103" name="defaultValue" />
            <variable line="104" name="mapping" />
            <variable citdl="String" line="106" name="sortDir" />
          </scope>
          <variable citdl="Object" doc="Defines the default sorting (casting?) comparison functions used when sorting data." line="15" lineend="95" name="SortTypes">
            <scope doc="Default sort that does nothing" ilk="function" line="21" lineend="23" name="none" returns="Mixed" signature="none(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <variable citdl="RegExp" doc="The regular expression used to strip tags" line="30" name="stripTagsRE" />
            <scope doc="Strips all HTML tags to sort on text only" ilk="function" line="37" lineend="39" name="asText" returns="String" signature="asText(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Strips all HTML tags to sort on text only - Case insensitive" ilk="function" line="46" lineend="48" name="asUCText" returns="String" signature="asUCText(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Case insensitive string" ilk="function" line="55" lineend="57" name="asUCString" returns="String" signature="asUCString(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Date sorting" ilk="function" line="64" lineend="72" name="asDate" returns="Number" signature="asDate(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Float sorting" ilk="function" line="79" lineend="83" name="asFloat" returns="Number" signature="asFloat(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
              <variable attributes="__local__ private" citdl="parseFloat()" line="80" name="val" />
            </scope>
            <scope doc="Integer sorting" ilk="function" line="90" lineend="94" name="asInt" returns="Number" signature="asInt(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
              <variable attributes="__local__ private" citdl="parseInt()" line="91" name="val" />
            </scope>
          </variable>
          <scope ilk="class" line="17" lineend="102" name="Tree">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Represents a tree data structure and bubbles all the events for its nodes. The nodes&#xA;in the tree have most standard DOM functionality." ilk="function" line="17" lineend="102" name="Tree" signature="Tree(root)">
              <variable citdl="Node" doc="(optional) The root node" ilk="argument" name="root" />
              <variable citdl="Tree" name="this" />
            </scope>
            <variable citdl="Object" line="18" lineend="18" name="nodeHash" />
            <variable citdl="Node" doc="The root node for this tree" line="23" name="root" />
          </scope>
          <scope ilk="class" line="17" lineend="20" name="MemoryProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor&#xA;to the Reader when its load method is called." ilk="function" line="17" lineend="20" name="MemoryProxy" signature="MemoryProxy(data)">
              <variable citdl="Object" doc="The data object which the Reader uses to construct a block of Ext.data.Records." ilk="argument" name="data" />
              <variable citdl="MemoryProxy" name="this" />
            </scope>
            <variable citdl="data" line="19" name="data" />
          </scope>
          <scope ilk="class" line="19" lineend="23" name="SimpleStore">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Small helper class to make creating Stores from Array data easier." ilk="function" line="19" lineend="27" name="SimpleStore" signature="SimpleStore(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="SimpleStore" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="22" lineend="41" name="DataProxy">
            <scope attributes="__ctor__" doc="This class is an abstract base class for implementations which provide retrieval of&#xA;unformatted data objects.&lt;br&gt;&#xA;&lt;p&gt;&#xA;DataProxy implementations are usually used in conjunction with an implementation of Ext.data.DataReader&#xA;(of the appropriate type which knows how to parse the data object) to provide a block of&#xA;{@link Ext.data.Records} to an {@link Ext.data.Store}.&lt;br&gt;&#xA;&lt;p&gt;&#xA;Custom implementations must implement the load method as described in&#xA;{@link Ext.data.HttpProxy#load}." ilk="function" line="22" lineend="41" name="DataProxy" signature="DataProxy()">
              <variable citdl="DataProxy" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="22" lineend="35" name="DataReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Abstract base class for reading structured data from a data source and converting&#xA;it into an object containing {@link Ext.data.Record} objects and metadata for use&#xA;by an {@link Ext.data.Store}.  This class is intended to be extended and should not&#xA;be created directly. For existing implementations, see {@link Ext.data.ArrayReader},&#xA;{@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}." ilk="function" line="22" lineend="31" name="DataReader" signature="DataReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options (implementation-specific)" ilk="argument" name="meta" />
              <variable citdl="Object" doc="Either an Array of field definition objects as specified&#xA;in {@link Ext.data.Record#create}, or an {@link Ext.data.Record} object created&#xA;using {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="DataReader" name="this" />
            </scope>
            <variable citdl="Mixed" doc="This DataReader&apos;s configured metadata as passed to the constructor." line="28" name="meta" />
            <variable citdl="Ext.isArray()" line="29" name="recordType" />
          </scope>
          <scope ilk="class" line="26" lineend="53" name="HttpProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of {@link Ext.data.DataProxy} that reads a data object from a {@link Ext.data.Connection Connection} object&#xA;configured to reference a certain URL.&lt;br&gt;&#xA;&lt;p&gt;&#xA;&lt;b&gt;Note that this class cannot be used to retrieve data from a domain other than the domain&#xA;from which the running page was served.&lt;br&gt;&#xA;&lt;p&gt;&#xA;For cross-domain access to remote data, use a {@link Ext.data.ScriptTagProxy ScriptTagProxy}.&lt;/b&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;Be aware that to enable the browser to parse an XML document, the server must set&#xA;the Content-Type header in the HTTP response to &quot;text/xml&quot;." ilk="function" line="26" lineend="53" name="HttpProxy" signature="HttpProxy(conn)">
              <variable citdl="Object" doc="an {@link Ext.data.Connection} object, or options parameter to {@link Ext.Ajax#request}.&#xA;If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make the request." ilk="argument" name="conn" />
              <variable citdl="HttpProxy" name="this" />
            </scope>
            <variable citdl="conn" doc="The Connection object (Or options parameter to {@link Ext.Ajax#request}) which this HttpProxy uses to make requests to the server.&#xA;Properties of this object may be changed dynamically to change the way data is requested." line="33" name="conn" />
            <variable line="34" name="useAjax" />
          </scope>
          <scope ilk="class" line="26" lineend="166" name="Store">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Store class encapsulates a client side cache of {@link Ext.data.Record Record}&#xA;objects which provide input data for Components such as the {@link Ext.grid.GridPanel GridPanel},&#xA;the {@link Ext.form.ComboBox ComboBox}, or the {@link Ext.DataView DataView}&lt;/p&gt;&#xA;&lt;p&gt;A Store object uses its {@link #proxy configured} implementation of {@link Ext.data.DataProxy DataProxy}&#xA;to access a data object unless you call {@link #loadData} directly and pass in your data.&lt;/p&gt;&#xA;&lt;p&gt;A Store object has no knowledge of the format of the data returned by the Proxy.&lt;/p&gt;&#xA;&lt;p&gt;A Store object uses its {@link #reader configured} implementation of {@link Ext.data.DataReader DataReader}&#xA;to create {@link Ext.data.Record Record} instances from the data object. These Records&#xA;are cached and made available through accessor functions.&lt;/p&gt;" ilk="function" line="26" lineend="166" name="Store" signature="Store(config)">
              <variable citdl="Object" doc="A config object containing the objects needed for the Store to access data,&#xA;and read the data into Records." ilk="argument" name="config" />
              <variable citdl="Store" name="this" />
            </scope>
            <variable citdl="Ext.util.MixedCollection" line="27" name="data" />
            <variable citdl="Object" doc="An object containing properties which are used as parameters on any HTTP request.&#xA;This property can be changed after creating the Store to send different parameters." line="36" lineend="36" name="baseParams" />
            <variable citdl="Object" doc="private" line="38" lineend="43" name="paramNames">
              <variable citdl="String" line="39" name="start" />
              <variable citdl="String" line="40" name="limit" />
              <variable citdl="String" line="41" name="sort" />
              <variable citdl="String" line="42" name="dir" />
            </variable>
            <variable citdl="config.data" line="46" name="inlineData" />
            <variable citdl="Ext.data.HttpProxy" line="53" name="proxy" />
            <variable citdl="this.reader.recordType" line="58" name="recordType" />
            <variable citdl="this.onMetaChange.createDelegate()" line="61" name="onMetaChange" />
            <variable citdl="this.recordType.prototype.fields" line="66" name="fields" />
            <variable citdl="Array" line="68" name="modified" />
            <variable citdl="Object" line="148" lineend="148" name="sortToggle" />
          </scope>
          <scope ilk="class" line="28" lineend="282" name="Record">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Instances of this class encapsulate both Record &lt;em&gt;definition&lt;/em&gt; information, and Record&#xA;&lt;em&gt;value&lt;/em&gt; information for use in {@link Ext.data.Store} objects, or any code which needs&#xA;to access Records cached in an {@link Ext.data.Store} object.&lt;br&gt;&#xA;&lt;p&gt;&#xA;Constructors for this class are generated by passing an Array of field definition objects to {@link #create}.&#xA;Instances are usually only created by {@link Ext.data.Reader} implementations when processing unformatted data&#xA;objects.&lt;br&gt;&#xA;&lt;p&gt;&#xA;Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below." ilk="function" line="28" lineend="31" name="Record" signature="Record(data, id)">
              <variable citdl="Array" doc="An object, the properties of which provide values for the new Record&apos;s fields." ilk="argument" name="data" />
              <variable citdl="Object" doc="(Optional) The id of the Record. This id should be unique, and is used by the&#xA;{@link Ext.data.Store} object which owns the Record to index its collection of Records. If&#xA;not specified an integer id is generated." ilk="argument" name="id" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable line="29" name="id" />
            <variable citdl="data" line="30" name="data" />
            <scope attributes="__static__" doc="STATIC: Generate a constructor for a specific Record layout.&#xA;var TopicRecord = Ext.data.Record.create([&#xA;{name: &apos;title&apos;, mapping: &apos;topic_title&apos;},&#xA;{name: &apos;author&apos;, mapping: &apos;username&apos;},&#xA;{name: &apos;totalPosts&apos;, mapping: &apos;topic_replies&apos;, type: &apos;int&apos;},&#xA;{name: &apos;lastPost&apos;, mapping: &apos;post_time&apos;, type: &apos;date&apos;},&#xA;{name: &apos;lastPoster&apos;, mapping: &apos;user2&apos;},&#xA;{name: &apos;excerpt&apos;, mapping: &apos;post_text&apos;}&#xA;]);&#xA;var myNewRecord = new TopicRecord({&#xA;topic_title: &apos;Do my job please&apos;,&#xA;username: &apos;noobie&apos;,&#xA;topic_replies: 1,&#xA;post_time: new Date(),&#xA;user2: &apos;Animal&apos;,&#xA;post_text: &apos;No way dude!&apos;&#xA;});&#xA;myStore.add(myNewRecord);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="93" lineend="106" name="create" returns="Function" signature="create(o)">
              <variable citdl="Array" doc="An Array of field definition objects which specify field names, and optionally,&#xA;data types, and a mapping for an {@link Ext.data.Reader} to extract the field&apos;s value from a data object.&#xA;Each field definition object may contain the following properties: &lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;name&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;The name by which the field is referenced within the Record. This is referenced by,&#xA;for example, the &lt;em&gt;dataIndex&lt;/em&gt; property in column definition objects passed to {@link Ext.grid.ColumnModel}&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;mapping&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;(Optional) A path specification for use by the {@link Ext.data.Reader} implementation&#xA;that is creating the Record to access the data value from the data object. If an {@link Ext.data.JsonReader}&#xA;is being used, then this is a string containing the javascript expression to reference the data relative to&#xA;the Record item&apos;s root. If an {@link Ext.data.XmlReader} is being used, this is an {@link Ext.DomQuery} path&#xA;to the data item relative to the Record element. If the mapping expression is the same as the field name,&#xA;this may be omitted.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;type&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;(Optional) The data type for conversion to displayable value. Possible values are&#xA;&lt;ul&gt;&lt;li&gt;auto (Default, implies no conversion)&lt;/li&gt;&#xA;&lt;li&gt;string&lt;/li&gt;&#xA;&lt;li&gt;int&lt;/li&gt;&#xA;&lt;li&gt;float&lt;/li&gt;&#xA;&lt;li&gt;boolean&lt;/li&gt;&#xA;&lt;li&gt;date&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;sortType&lt;/b&gt; : Mixed&lt;div class=&quot;sub-desc&quot;&gt;(Optional) A member of {@link Ext.data.SortTypes}.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;sortDir&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;(Optional) Initial direction to sort. &quot;ASC&quot; or &quot;DESC&quot;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;convert&lt;/b&gt; : Function&lt;div class=&quot;sub-desc&quot;&gt;(Optional) A function which converts the value provided&#xA;by the Reader into an object that will be stored in the Record. It is passed the&#xA;following parameters:&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;v&lt;/b&gt; : Mixed&lt;div class=&quot;sub-desc&quot;&gt;The data value as read by the Reader.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;rec&lt;/b&gt; : Mixed&lt;div class=&quot;sub-desc&quot;&gt;The data object containing the row as read by the Reader.&#xA;Depending on Reader type, this could be an Array, an object, or an XML element.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;dateFormat&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;(Optional) A format String for the Date.parseDate function.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;defaultValue&lt;/b&gt; : Mixed&lt;div class=&quot;sub-desc&quot;&gt;(Optional) The default value passed to the Reader when the field does&#xA;not exist in the data object (i.e. undefined). (defaults to &quot;&quot;)&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;br&gt;usage:&lt;br&gt;&lt;pre&gt;&lt;code&gt;&#xA;&lt;p&gt;In the simplest case, if no properties other than &lt;tt&gt;name&lt;/tt&gt; are required, a field definition&#xA;may consist of just a field name string.&lt;/p&gt;" ilk="argument" name="o" />
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" citdl="Ext.extend()" line="94" name="f" />
              <variable attributes="__local__ private" citdl="f.prototype" line="95" name="p" />
            </scope>
            <variable citdl="Number" line="108" name="AUTO_ID" />
            <variable citdl="String" line="109" name="EDIT" />
            <variable citdl="String" line="110" name="REJECT" />
            <variable citdl="String" line="111" name="COMMIT" />
            <variable citdl="Boolean" doc="An object hash representing the data for this Record." line="128" name="dirty" />
            <variable citdl="Boolean" line="129" name="editing" />
            <variable line="130" name="error" />
            <variable citdl="Object" doc="This object contains a key and value storing the original values of all modified fields or is null if no fields have been modified." line="136" lineend="179" name="modified" />
            <scope doc="private" ilk="function" line="139" lineend="141" name="join" signature="join(store)">
              <variable ilk="argument" name="store" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable citdl="store" line="140" name="store" />
            <scope doc="Set the named field to the specified value." ilk="function" line="148" lineend="163" name="set" signature="set(name, value)">
              <variable citdl="String" doc="The name of the field to set." ilk="argument" name="name" />
              <variable citdl="Object" doc="The value to set the field to." ilk="argument" name="value" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Get the value of the named field." ilk="function" line="170" lineend="172" name="get" returns="Object" signature="get(name)">
              <variable citdl="String" doc="The name of the field to get the value of." ilk="argument" name="name" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Begin an edit. While in edit mode, no events are relayed to the containing store." ilk="function" line="177" lineend="180" name="beginEdit" signature="beginEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Cancels all changes made in the current edit operation." ilk="function" line="185" lineend="188" name="cancelEdit" signature="cancelEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="End an edit. If any data was modified, the containing store is notified." ilk="function" line="193" lineend="198" name="endEdit" signature="endEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Usually called by the {@link Ext.data.Store} which owns the Record.&#xA;Rejects all changes made to the Record since either creation, or the last commit operation.&#xA;Modified fields are reverted to their original values.&#xA;&lt;p&gt;&#xA;Developers should subscribe to the {@link Ext.data.Store#update} event to have their code notified&#xA;of reject operations." ilk="function" line="209" lineend="222" name="reject" signature="reject(silent)">
              <variable citdl="Boolean" doc="(optional) True to skip notification of the owning store of the change (defaults to false)" ilk="argument" name="silent" />
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" citdl="this.modified" line="210" name="m" />
            </scope>
            <scope doc="Usually called by the {@link Ext.data.Store} which owns the Record.&#xA;Commits all changes made to the Record since either creation, or the last commit operation.&#xA;&lt;p&gt;&#xA;Developers should subscribe to the {@link Ext.data.Store#update} event to have their code notified&#xA;of commit operations." ilk="function" line="232" lineend="239" name="commit" signature="commit(silent)">
              <variable citdl="Boolean" doc="(optional) True to skip notification of the owning store of the change (defaults to false)" ilk="argument" name="silent" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Gets a hash of only the fields that have been modified since this Record was created or commited." ilk="function" line="245" lineend="253" name="getChanges" returns="cs" signature="getChanges()">
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="246" lineend="246" name="cs" />
              <variable attributes="__local__ private" citdl="this.modified" line="246" name="m" />
            </scope>
            <scope doc="private" ilk="function" line="256" lineend="258" name="hasError" returns="this.error" signature="hasError()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="261" lineend="263" name="clearError" signature="clearError()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Creates a copy of this Record." ilk="function" line="270" lineend="272" name="copy" returns="Record" signature="copy(newId)">
              <variable ilk="argument" name="newId" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Returns true if the field passed has been modified since the load or last commit." ilk="function" line="279" lineend="281" name="isModified" returns="Boolean" signature="isModified(fieldName)">
              <variable citdl="String" ilk="argument" name="fieldName" />
              <variable citdl="Record" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="37" lineend="71" name="Connection">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;The class encapsulates a connection to the page&apos;s originating domain, allowing requests to be made&#xA;either to a configured URL, or to a URL specified at request time.&lt;/p&gt;&#xA;&lt;p&gt;Requests made by this class are asynchronous, and will return immediately. No data from&#xA;the server will be available to the statement immediately following the {@link #request} call.&#xA;To process returned data, use a {@link #request-option-success callback} in the request options object,&#xA;or an {@link #requestcomplete event listener}.&lt;/p&gt;&#xA;&lt;p&gt;{@link #request-option-isUpload File uploads} are not performed using normal &quot;Ajax&quot; techniques, that&#xA;is they are &lt;b&gt;not&lt;/b&gt; performed using XMLHttpRequests. Instead the form is submitted in the standard&#xA;manner with the DOM &lt;tt&gt;&amp;lt;form&gt;&lt;/tt&gt; element temporarily modified to have its&#xA;&lt;a href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-target&quot;&gt;target&lt;/a&gt; set to refer&#xA;to a dynamically generated, hidden &lt;tt&gt;&amp;lt;iframe&gt;&lt;/tt&gt; which is inserted into the document&#xA;but removed after the return data has been gathered.&lt;/p&gt;&#xA;&lt;p&gt;The server response is parsed by the browser to create the document for the IFRAME. If the&#xA;server is using JSON to send the return object, then the&#xA;&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17&quot;&gt;Content-Type&lt;/a&gt; header&#xA;must be set to &quot;text/html&quot; in order to tell the browser to insert the text unchanged into the document body.&lt;/p&gt;&#xA;&lt;p&gt;The response text is retrieved from the document, and a fake XMLHttpRequest object&#xA;is created containing a &lt;tt&gt;responseText&lt;/tt&gt; property in order to conform to the&#xA;requirements of event handlers and callbacks.&lt;/p&gt;&#xA;&lt;p&gt;Be aware that file upload packets are sent with the content type &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2388.html&quot;&gt;multipart/form&lt;/a&gt;&#xA;and some server technologies (notably JEE) may require some custom processing in order to&#xA;retrieve parameter names and parameter values from the packet content.&lt;/p&gt;" ilk="function" line="37" lineend="71" name="Connection" signature="Connection(config)">
              <variable citdl="Object" doc="a configuration object." ilk="argument" name="config" />
              <variable citdl="Connection" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="43" lineend="51" name="JsonStore">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Small helper class to make creating Stores for remotely-loaded JSON data easier. JsonStore is pre-configured&#xA;with a built-in {@link Ext.data.HttpProxy} and {@link Ext.data.JsonReader}.  If you require some other proxy/reader&#xA;combination then you&apos;ll have to create a basic {@link Ext.data.Store} configured as needed.&lt;br/&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var store = new Ext.data.JsonStore({&#xA;url: &apos;get-images.php&apos;,&#xA;root: &apos;images&apos;,&#xA;fields: [&apos;name&apos;, &apos;url&apos;, {name:&apos;size&apos;, type: &apos;float&apos;}, {name:&apos;lastmod&apos;, type:&apos;date&apos;}]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;This would consume a returned object of the form:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;images: [&#xA;{name: &apos;Image one&apos;, url:&apos;/GetImage.php?id=1&apos;, size:46.5, lastmod: new Date(2007, 10, 29)},&#xA;{name: &apos;Image Two&apos;, url:&apos;/GetImage.php?id=2&apos;, size:43.2, lastmod: new Date(2007, 10, 30)}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;An object literal of this form could also be used as the {@link #data} config option.&#xA;&lt;b&gt;Note: Although they are not listed, this class inherits all of the config options of Store,&#xA;JsonReader.&lt;/b&gt;" ilk="function" line="43" lineend="54" name="JsonStore" signature="JsonStore(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="JsonStore" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="48" lineend="71" name="ScriptTagProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain&#xA;other than the originating domain of the running page.&lt;br&gt;&#xA;&lt;p&gt;&#xA;&lt;b&gt;Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain&#xA;of the running page, you must use this class, rather than HttpProxy.&lt;/b&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;The content passed back from a server resource requested by a ScriptTagProxy &lt;b&gt;must&lt;/b&gt; be executable JavaScript&#xA;source code because it is used as the source inside a &amp;lt;script&gt; tag.&lt;br&gt;&#xA;&lt;p&gt;&#xA;In order for the browser to process the returned data, the server must wrap the data object&#xA;with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.&#xA;Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy&#xA;depending on whether the callback name was passed:&#xA;&lt;p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;boolean scriptTag = false;&#xA;String cb = request.getParameter(&quot;callback&quot;);&#xA;if (cb != null) {&#xA;scriptTag = true;&#xA;response.setContentType(&quot;text/javascript&quot;);&#xA;} else {&#xA;response.setContentType(&quot;application/x-json&quot;);&#xA;Writer out = response.getWriter();&#xA;if (scriptTag) {&#xA;out.write(cb + &quot;(&quot;);&#xA;out.print(dataBlock.toJsonString());&#xA;if (scriptTag) {&#xA;out.write(&quot;);&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="48" lineend="71" name="ScriptTagProxy" signature="ScriptTagProxy(config)">
              <variable citdl="Object" doc="A configuration object." ilk="argument" name="config" />
              <variable citdl="ScriptTagProxy" name="this" />
            </scope>
            <variable citdl="document.getElementsByTagName()[0]" line="51" name="head" />
            <variable citdl="Number" line="73" name="TRANS_ID" />
          </scope>
          <scope ilk="class" line="61" lineend="64" name="XmlReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Data reader class to create an Array of {@link Ext.data.Record} objects from an XML document&#xA;based on mappings in a provided {@link Ext.data.Record} constructor.&lt;br&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;&lt;em&gt;Note that in order for the browser to parse a returned XML document, the Content-Type&#xA;header in the HTTP response must be set to &quot;text/xml&quot; or &quot;application/xml&quot;.&lt;/em&gt;&#xA;&lt;p&gt;&#xA;Example code:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var Employee = Ext.data.Record.create([&#xA;{name: &apos;name&apos;, mapping: &apos;name&apos;},     // &quot;mapping&quot; property not needed if it&apos;s the same as &quot;name&quot;&#xA;{name: &apos;occupation&apos;}                 // This field will use &quot;occupation&quot; as the mapping.&#xA;]);&#xA;var myReader = new Ext.data.XmlReader({&#xA;totalRecords: &quot;results&quot;, // The element which contains the total dataset size (optional)&#xA;record: &quot;row&quot;,           // The repeated element which contains row information&#xA;id: &quot;id&quot;                 // The element within the row that provides an ID for the record (optional)&#xA;}, Employee);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&#xA;This would consume an XML file like this:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xA;&amp;lt;dataset&gt;&#xA;&amp;lt;results&gt;2&amp;lt;/results&gt;&#xA;&amp;lt;row&gt;&#xA;&amp;lt;id&gt;1&amp;lt;/id&gt;&#xA;&amp;lt;name&gt;Bill&amp;lt;/name&gt;&#xA;&amp;lt;occupation&gt;Gardener&amp;lt;/occupation&gt;&#xA;&amp;lt;/row&gt;&#xA;&amp;lt;row&gt;&#xA;&amp;lt;id&gt;2&amp;lt;/id&gt;&#xA;&amp;lt;name&gt;Ben&amp;lt;/name&gt;&#xA;&amp;lt;occupation&gt;Horticulturalist&amp;lt;/occupation&gt;&#xA;&amp;lt;/row&gt;&#xA;&amp;lt;/dataset&gt;&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="61" lineend="64" name="XmlReader" signature="XmlReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options" ilk="argument" name="meta" />
              <variable citdl="Object" doc="Either an Array of field definition objects as passed to&#xA;{@link Ext.data.Record#create}, or a Record constructor object created using {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="XmlReader" name="this" />
            </scope>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Data reader class to create an Array of {@link Ext.data.Record} objects from an Array.&#xA;Each element of that Array represents a row of data fields. The&#xA;fields are pulled into a Record object using as a subscript, the &lt;em&gt;mapping&lt;/em&gt; property&#xA;of the field definition if it exists, or the field&apos;s ordinal position in the definition.&lt;br&gt;&#xA;&lt;p&gt;&#xA;Example code:.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var Employee = Ext.data.Record.create([&#xA;{name: &apos;name&apos;, mapping: 1},         // &quot;mapping&quot; only needed if an &quot;id&quot; field is present which&#xA;{name: &apos;occupation&apos;, mapping: 2}    // precludes using the ordinal position as the index.&#xA;]);&#xA;var myReader = new Ext.data.ArrayReader({&#xA;id: 0                     // The subscript within row Array that provides an ID for the Record (optional)&#xA;}, Employee);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&#xA;This would consume an Array like this:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;[ [1, &apos;Bill&apos;, &apos;Gardener&apos;], [2, &apos;Ben&apos;, &apos;Horticulturalist&apos;] ]&#xA;&lt;/code&gt;&lt;/pre&gt;" line="73" name="ArrayReader" />
          <scope ilk="class" line="84" lineend="87" name="JsonReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Data reader class to create an Array of {@link Ext.data.Record} objects from a JSON response&#xA;based on mappings in a provided {@link Ext.data.Record} constructor.&lt;br&gt;&#xA;&lt;p&gt;&#xA;Example code:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var Employee = Ext.data.Record.create([&#xA;{name: &apos;firstname&apos;},                  // Map the Record&apos;s &quot;firstname&quot; field to the row object&apos;s key of the same name&#xA;{name: &apos;job&apos;, mapping: &apos;occupation&apos;}  // Map the &quot;job&quot; field to the row object&apos;s &quot;occupation&quot; key&#xA;]);&#xA;var myReader = new Ext.data.JsonReader({&#xA;totalProperty: &quot;results&quot;,             // The property which contains the total dataset size (optional)&#xA;root: &quot;rows&quot;,                         // The property which contains an Array of row objects&#xA;id: &quot;id&quot;                              // The property within each row object that provides an ID for the record (optional)&#xA;}, Employee);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&#xA;This would consume a JSON object of the form:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;&apos;results&apos;: 2,&#xA;&apos;rows&apos;: [&#xA;{ &apos;id&apos;: 1, &apos;firstname&apos;: &apos;Bill&apos;, occupation: &apos;Gardener&apos; },         // a row object&#xA;{ &apos;id&apos;: 2, &apos;firstname&apos;: &apos;Ben&apos; , occupation: &apos;Horticulturalist&apos; }  // another row object&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;It is possible to change a JsonReader&apos;s metadata at any time by including a&#xA;&lt;b&gt;&lt;tt&gt;metaData&lt;/tt&gt;&lt;/b&gt; property in the data object. If this is detected in the&#xA;object, a {@link Ext.data.Store Store} object using this Reader will fire its&#xA;{@link Ext.data.Store#metachange metachange} event.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;b&gt;&lt;tt&gt;metaData&lt;/tt&gt;&lt;/b&gt; property may contain any of the configuration&#xA;options for this class. Additionally, it may contain a &lt;b&gt;&lt;tt&gt;fields&lt;/tt&gt;&lt;/b&gt;&#xA;property which the JsonReader will use as an argument to {@link Ext.data.Record#create}&#xA;to configure the layout of the Records which it will produce.&lt;p&gt;&#xA;Using the &lt;b&gt;&lt;tt&gt;metaData&lt;/tt&gt;&lt;/b&gt; property, and the Store&apos;s {@link Ext.data.Store#metachange metachange} event,&#xA;it is possible to have a Store-driven control initialize itself. The metachange&#xA;event handler may interrogate the &lt;b&gt;&lt;tt&gt;metaData&lt;/tt&gt;&lt;/b&gt; property (which&#xA;may contain any user-defined properties needed) and the &lt;b&gt;&lt;tt&gt;metaData.fields&lt;/tt&gt;&lt;/b&gt;&#xA;property to perform any configuration required.&lt;/p&gt;&#xA;&lt;p&gt;To use this facility to send the same data as the above example without&#xA;having to code the creation of the Record constructor, you would create the&#xA;JsonReader like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#xA;var myReader = new Ext.data.JsonReader();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The first data packet from the server would configure the reader by&#xA;containing a metaData property as well as the data:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#xA;&apos;metaData&apos;: {&#xA;totalProperty: &apos;results&apos;,&#xA;root: &apos;rows&apos;,&#xA;id: &apos;id&apos;,&#xA;fields: [&#xA;{name: &apos;name&apos;},&#xA;{name: &apos;occupation&apos;} ]&#xA;&apos;results&apos;: 2, &apos;rows&apos;: [&#xA;{ &apos;id&apos;: 1, &apos;name&apos;: &apos;Bill&apos;, occupation: &apos;Gardener&apos; },&#xA;{ &apos;id&apos;: 2, &apos;name&apos;: &apos;Ben&apos;, occupation: &apos;Horticulturalist&apos; } ]&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="84" lineend="87" name="JsonReader" signature="JsonReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options." ilk="argument" name="meta" />
              <variable citdl="Object" doc="Either an Array of field definition objects as passed to&#xA;{@link Ext.data.Record#create}, or a {@link Ext.data.Record Record} constructor created using {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="JsonReader" name="this" />
            </scope>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized store implementation that provides for grouping records by one of the available fields." line="116" name="GroupingStore" />
          <scope ilk="class" line="169" lineend="192" name="Node">
            <scope attributes="__ctor__" doc="{Object} attributes The attributes/config for the node */" ilk="function" line="169" lineend="292" name="Node" signature="Node(attributes)">
              <variable citdl="Object" doc="The attributes/config for the node" ilk="argument" name="attributes" />
              <variable citdl="Node" name="this" />
            </scope>
            <variable citdl="Object" doc="The attributes supplied for the node. You can use this property to access any custom attributes you supplied." line="174" name="attributes" />
            <variable citdl="this.attributes.leaf" line="175" name="leaf" />
            <variable citdl="this.attributes.id" doc="The node id. @type String" line="179" name="id" />
            <variable citdl="Array" doc="All child nodes of this node. @type Array" line="187" name="childNodes" />
            <variable doc="The parent node for this node. @type Node" line="199" name="parentNode" />
            <variable doc="The first direct child node of this node, or null if this node has no child nodes. @type Node" line="203" name="firstChild" />
            <variable doc="The last direct child node of this node, or null if this node has no child nodes. @type Node" line="207" name="lastChild" />
            <variable doc="The node immediately preceding this node in the tree, or null if there is no sibling node. @type Node" line="211" name="previousSibling" />
            <variable doc="The node immediately following this node in the tree, or null if there is no sibling node. @type Node" line="215" name="nextSibling" />
            <variable citdl="this.attributes.listeners" line="290" name="listeners" />
          </scope>
        </variable>
        <scope ilk="function" line="27" lineend="62" name="Layer" signature="Layer(config, existingEl)">
          <variable citdl="config" ilk="argument" name="config" />
          <variable ilk="argument" name="existingEl" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Ext.DomHelper" line="29" name="dh" />
          <variable attributes="__local__ private" citdl="cp" line="30" name="pel" />
          <variable attributes="__local__ private" citdl="config.parentEl" line="30" name="cp" />
          <variable attributes="__local__ private" citdl="config.dh" line="35" name="o" />
        </scope>
        <scope ilk="class" line="28" lineend="39" name="apply">
          <scope attributes="__ctor__" doc="Ext core utilities and functions." ilk="function" line="28" lineend="39" name="apply" returns="Object" signature="apply(o, c, defaults)">
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="c" />
            <variable citdl="Object" doc="A different object that will also be applied for default values" ilk="argument" name="defaults" />
            <variable citdl="apply" name="this" />
          </scope>
        </scope>
        <scope ilk="class" line="29" lineend="220" name="CompositeElement">
          <scope attributes="__ctor__" doc="Standard composite class. Creates a Ext.Element for every element in the collection.&#xA;&lt;br&gt;&lt;br&gt;&#xA;&lt;b&gt;NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element&#xA;actions will be performed on all the elements in this collection.&lt;/b&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;All methods return &lt;i&gt;this&lt;/i&gt; and can be chained.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var els = Ext.select(&quot;#some-el div.some-class&quot;, true);&#xA;// or select directly from an existing element&#xA;var el = Ext.get(&apos;some-el&apos;);&#xA;el.select(&apos;div.some-class&apos;, true);&#xA;els.setWidth(100); // all elements become 100 width&#xA;els.hide(true); // all elements fade out and hide&#xA;// or&#xA;els.setWidth(100).hide(true);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="29" lineend="32" name="CompositeElement" signature="CompositeElement(els)">
            <variable ilk="argument" name="els" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <variable citdl="Array" line="30" name="elements" />
          <variable citdl="Boolean" line="34" name="isComposite" />
          <scope ilk="function" line="35" lineend="46" name="addElements" returns="this" signature="addElements(els)">
            <variable citdl="Ext.Element.selectorFunction()" ilk="argument" name="els" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" citdl="this.elements" line="40" name="yels" />
            <variable attributes="__local__ private" citdl="yels.length" line="41" name="index" />
          </scope>
          <scope doc="Clears this composite and adds the elements returned by the passed selector." ilk="function" line="53" lineend="57" name="fill" returns="CompositeElement" signature="fill(els)">
            <variable citdl="String/Array" doc="A string CSS selector, an array of elements or an element" ilk="argument" name="els" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Filters this composite to only elements that match the passed selector." ilk="function" line="64" lineend="73" name="filter" returns="CompositeElement" signature="filter(selector)">
            <variable citdl="String" doc="A string CSS selector" ilk="argument" name="selector" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="65" name="els" />
          </scope>
          <scope ilk="function" line="75" lineend="81" name="invoke" returns="this" signature="invoke(fn, args)">
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="args" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" citdl="this.elements" line="76" name="els" />
          </scope>
          <scope doc="Adds elements to this composite." ilk="function" line="87" lineend="96" name="add" returns="CompositeElement" signature="add(els)">
            <variable citdl="String/Array" doc="A string CSS selector, an array of elements or an element" ilk="argument" name="els" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Calls the passed function passing (el, this, index) for each element in this composite." ilk="function" line="103" lineend="111" name="each" returns="CompositeElement" signature="each(fn, scope)">
            <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The &lt;i&gt;this&lt;/i&gt; object (defaults to the element)" ilk="argument" name="scope" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" citdl="this.elements" line="104" name="els" />
          </scope>
          <scope doc="Returns the Element object at the specified index" ilk="function" line="118" lineend="120" name="item" returns="Ext.Element" signature="item(index)">
            <variable citdl="Number" ilk="argument" name="index" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Returns the first Element" ilk="function" line="126" lineend="128" name="first" returns="Ext.Element" signature="first()">
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Returns the last Element" ilk="function" line="134" lineend="136" name="last" returns="Ext.Element" signature="last()">
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Returns the number of elements in this composite" ilk="function" line="142" lineend="144" name="getCount" returns="this.elements.length" signature="getCount()">
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Returns true if this composite contains the passed element" ilk="function" line="151" lineend="153" name="contains" returns="this.indexOf()" signature="contains(el)">
            <variable citdl="Mixed" doc="The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection." ilk="argument" name="el" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Find the index of the passed element within the composite collection." ilk="function" line="160" lineend="162" name="indexOf" returns="this.elements.indexOf()" signature="indexOf(el)">
            <variable citdl="Mixed" doc="The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection." ilk="argument" name="el" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope doc="Removes the specified element(s)." ilk="function" line="172" lineend="192" name="removeElement" returns="CompositeElement" signature="removeElement(el, removeDom)">
            <variable citdl="Mixed" doc="The id of an element, the Element itself, the index of the element in this composite&#xA;or an array of any of those." ilk="argument" name="el" />
            <variable citdl="Boolean" doc="(optional) True to also remove the element from the document" ilk="argument" name="removeDom" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" line="179" name="index" />
            <variable attributes="__local__ private" citdl="this.elements[index]" line="182" name="d" />
          </scope>
          <scope doc="Replaces the specified element with the passed element." ilk="function" line="202" lineend="212" name="replaceElement" returns="CompositeElement" signature="replaceElement(el, replacement, domReplace)">
            <variable citdl="Mixed" doc="The id of an element, the Element itself, the index of the element in this composite&#xA;to replace." ilk="argument" name="el" />
            <variable citdl="Mixed" doc="The id of an element or the Element itself." ilk="argument" name="replacement" />
            <variable citdl="Boolean" doc="(Optional) True to remove and replace the element in the document too." ilk="argument" name="domReplace" />
            <variable citdl="CompositeElement" name="this" />
            <variable attributes="__local__ private" line="203" name="index" />
          </scope>
          <scope doc="Removes all elements." ilk="function" line="217" lineend="219" name="clear" signature="clear()">
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <scope ilk="function" line="222" lineend="228" name="createCall" returns="this.invoke()" signature="createCall(proto, fnName)">
            <variable ilk="argument" name="proto" />
            <variable ilk="argument" name="fnName" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
        </scope>
        <variable citdl="Object" line="29" name="util">
          <variable citdl="Object" line="14" lineend="226" name="Format">
            <scope doc="Truncate a string and add an ellipsis (&apos;...&apos;) to the end if it exceeds the specified length" ilk="function" line="23" lineend="28" name="ellipsis" returns="String" signature="ellipsis(value, len)">
              <variable citdl="String" doc="The string to truncate" ilk="argument" name="value" />
              <variable ilk="argument" name="len" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Checks a reference and converts it to empty string if it is undefined" ilk="function" line="35" lineend="37" name="undef" returns="Mixed" signature="undef(value)">
              <variable citdl="Mixed" doc="Reference to check" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Checks a reference and converts it to the default value if it&apos;s empty" ilk="function" line="45" lineend="47" name="defaultValue" returns="String" signature="defaultValue(value, defaultValue)">
              <variable citdl="Mixed" doc="Reference to check" ilk="argument" name="value" />
              <variable citdl="String" doc="The value to insert of it&apos;s undefined (defaults to &quot;&quot;)" ilk="argument" name="defaultValue" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Convert certain characters (&amp;, &lt;, &gt;, and &apos;) to their HTML character equivalents for literal display in web pages." ilk="function" line="54" lineend="56" name="htmlEncode" returns="String" signature="htmlEncode(value)">
              <variable citdl="String" doc="The string to encode" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Convert certain characters (&amp;, &lt;, &gt;, and &apos;) from their HTML character equivalents." ilk="function" line="63" lineend="65" name="htmlDecode" returns="String" signature="htmlDecode(value)">
              <variable citdl="String" doc="The string to decode" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Trims any whitespace from either side of a string" ilk="function" line="72" lineend="74" name="trim" returns="String" signature="trim(value)">
              <variable citdl="String" doc="The text to trim" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Returns a substring from within an original string" ilk="function" line="83" lineend="85" name="substr" returns="String" signature="substr(value, start, length)">
              <variable citdl="String" doc="The original text" ilk="argument" name="value" />
              <variable citdl="Number" doc="The start index of the substring" ilk="argument" name="start" />
              <variable citdl="Number" doc="The length of the substring" ilk="argument" name="length" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Converts a string to all lower case letters" ilk="function" line="92" lineend="94" name="lowercase" returns="String" signature="lowercase(value)">
              <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Converts a string to all upper case letters" ilk="function" line="101" lineend="103" name="uppercase" returns="String" signature="uppercase(value)">
              <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Converts the first character only of a string to upper case" ilk="function" line="110" lineend="112" name="capitalize" returns="String" signature="capitalize(value)">
              <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="115" lineend="123" name="call" returns="eval().call()" signature="call(value, fn)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Format" name="this" />
              <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="117" name="args" />
            </scope>
            <scope doc="Format a number as US currency" ilk="function" line="130" lineend="146" name="usMoney" returns="String" signature="usMoney(v)">
              <variable citdl="whole" ilk="argument" name="v" />
              <variable citdl="Format" name="this" />
              <variable attributes="__local__ private" citdl="v.split()" line="134" name="ps" />
              <variable attributes="__local__ private" citdl="ps[0]" line="135" name="whole" />
              <variable attributes="__local__ private" citdl="ps[1]" line="136" name="sub" />
              <variable attributes="__local__ private" line="137" name="r" />
            </scope>
            <scope doc="Parse a value into a formatted date using the specified format pattern." ilk="function" line="154" lineend="162" name="date" returns="String" signature="date(v, format)">
              <variable citdl="Date" ilk="argument" name="v" />
              <variable citdl="String" doc="(optional) Any valid date format string (defaults to &apos;m/d/Y&apos;)" ilk="argument" name="format" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Returns a date rendering function that can be reused to apply a date format multiple times efficiently" ilk="function" line="169" lineend="173" name="dateRenderer" returns="Function" signature="dateRenderer(format)">
              <variable citdl="String" doc="Any valid date format string" ilk="argument" name="format" />
              <variable citdl="Format" name="this" />
            </scope>
            <variable doc="private" line="176" name="stripTagsRE" />
            <scope doc="Strips all HTML tags" ilk="function" line="183" lineend="185" name="stripTags" returns="String" signature="stripTags(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="Format" name="this" />
            </scope>
            <variable line="187" name="stripScriptsRe" />
            <scope doc="Strips all script tags" ilk="function" line="194" lineend="196" name="stripScripts" returns="String" signature="stripScripts(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope doc="Simple format for a file size (xxx bytes, xxx KB, xxx MB)" ilk="function" line="203" lineend="211" name="fileSize" returns="String" signature="fileSize(size)">
              <variable citdl="Number/String" doc="The numeric value to format" ilk="argument" name="size" />
              <variable citdl="Format" name="this" />
            </scope>
            <variable citdl="fns[a]()" line="213" name="math" />
            <scope ilk="function" line="223" lineend="225" name="nl2br" returns="v" signature="nl2br(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="Format" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" line="14" lineend="162" name="CSS">
            <scope doc="Creates a stylesheet from a text blob of rules.&#xA;These rules will be wrapped in a STYLE tag and appended to the HEAD of the document." ilk="function" line="29" lineend="52" name="createStyleSheet" returns="StyleSheet" signature="createStyleSheet(cssText, id)">
              <variable citdl="String" doc="The text containing the css rules" ilk="argument" name="cssText" />
              <variable citdl="String" doc="An id to add to the stylesheet for later removal" ilk="argument" name="id" />
              <variable citdl="CSS" name="this" />
              <variable attributes="__local__ private" citdl="rules.styleSheet" line="30" name="ss" />
              <variable attributes="__local__ private" citdl="doc.getElementsByTagName()[0]" line="31" name="head" />
              <variable attributes="__local__ private" citdl="doc.createElement()" line="32" name="rules" />
            </scope>
            <scope doc="Removes a style or link tag by id" ilk="function" line="58" lineend="63" name="removeStyleSheet" signature="removeStyleSheet(id)">
              <variable citdl="String" doc="The id of the tag" ilk="argument" name="id" />
              <variable citdl="CSS" name="this" />
              <variable attributes="__local__ private" citdl="doc.getElementById()" line="59" name="existing" />
            </scope>
            <scope doc="Dynamically swaps an existing stylesheet reference for a new one" ilk="function" line="70" lineend="78" name="swapStyleSheet" signature="swapStyleSheet(id, url)">
              <variable citdl="String" doc="The id of an existing link tag to remove" ilk="argument" name="id" />
              <variable citdl="String" doc="The href of the new stylesheet to include" ilk="argument" name="url" />
              <variable citdl="CSS" name="this" />
              <variable attributes="__local__ private" citdl="doc.createElement()" line="72" name="ss" />
            </scope>
            <scope doc="Refresh the rule cache if you have dynamically added stylesheets" ilk="function" line="84" lineend="86" name="refreshCache" returns="Object" signature="refreshCache()">
              <variable citdl="CSS" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="89" lineend="99" name="cacheStyleSheet" signature="cacheStyleSheet(ss)">
              <variable ilk="argument" name="ss" />
              <variable citdl="CSS" name="this" />
              <variable citdl="Object" line="91" lineend="91" name="rules" />
              <variable attributes="__local__ private" citdl="ss.cssRules" doc="try catch for cross domain access issue" line="94" name="ssRules" />
            </scope>
            <scope doc="Gets all css rules for the document" ilk="function" line="106" lineend="117" name="getRules" returns="Object" signature="getRules(refreshCache)">
              <variable citdl="Boolean" doc="true to refresh the internal cache" ilk="argument" name="refreshCache" />
              <variable citdl="CSS" name="this" />
              <variable citdl="Object" line="108" lineend="108" name="rules" />
              <variable attributes="__local__ private" citdl="doc.styleSheets" line="109" name="ds" />
            </scope>
            <scope doc="Gets an an individual CSS rule by selector(s)" ilk="function" line="125" lineend="136" name="getRule" returns="CSSRule" signature="getRule(selector, refreshCache)">
              <variable citdl="String/Array" doc="The CSS selector or an array of selectors to try. The first selector that is found is returned." ilk="argument" name="selector" />
              <variable citdl="Boolean" doc="true to refresh the internal cache if you have recently updated any rules or added styles dynamically" ilk="argument" name="refreshCache" />
              <variable citdl="CSS" name="this" />
              <variable attributes="__local__ private" citdl="this.getRules()" line="126" name="rs" />
            </scope>
            <scope doc="Updates a rule property" ilk="function" line="146" lineend="161" name="updateRule" returns="Boolean" signature="updateRule(selector, property, value)">
              <variable citdl="String/Array" doc="If it&apos;s an array it tries each selector until it finds one. Stops immediately once one is found." ilk="argument" name="selector" />
              <variable citdl="String" doc="The css property" ilk="argument" name="property" />
              <variable citdl="String" doc="The new value for the property" ilk="argument" name="value" />
              <variable citdl="CSS" name="this" />
              <variable attributes="__local__ private" citdl="this.getRule()" line="148" name="rule" />
            </scope>
          </variable>
          <variable citdl="Object" line="15" lineend="47" name="TextMetrics">
            <scope doc="Measures the size of the specified text" ilk="function" line="27" lineend="34" name="measure" returns="Object" signature="measure(el, text, fixedWidth)">
              <variable citdl="String/HTMLElement" doc="The element, dom node or id from which to copy existing CSS styles&#xA;that can affect the size of the rendered text" ilk="argument" name="el" />
              <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
              <variable citdl="Number" doc="(optional) If the text will be multiline, you have to set a fixed width&#xA;in order to accurately measure the text height" ilk="argument" name="fixedWidth" />
              <variable citdl="TextMetrics" name="this" />
            </scope>
            <scope doc="Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces&#xA;the overhead of multiple calls to initialize the style properties on each measurement." ilk="function" line="44" lineend="46" name="createInstance" returns="Ext.util.TextMetrics.Instance" signature="createInstance(el, fixedWidth)">
              <variable citdl="String/HTMLElement" doc="The element, dom node or id that the instance will be bound to" ilk="argument" name="el" />
              <variable citdl="Number" doc="(optional) If the text will be multiline, you have to set a fixed width&#xA;in order to accurately measure the text height" ilk="argument" name="fixedWidth" />
              <variable citdl="TextMetrics" name="this" />
            </scope>
            <scope ilk="function" line="50" lineend="118" name="Instance" returns="instance" signature="Instance(bindTo, fixedWidth)">
              <variable ilk="argument" name="bindTo" />
              <variable ilk="argument" name="fixedWidth" />
              <variable citdl="TextMetrics" name="this" />
              <variable attributes="__local__ private" citdl="Ext.Element" line="51" name="ml" />
              <variable attributes="__local__ private" citdl="Object" line="61" lineend="113" name="instance">
                <scope doc="Returns the size of the specified text based on the internal element&apos;s style and width properties" ilk="function" line="67" lineend="72" name="getSize" returns="Object" signature="getSize(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                  <variable attributes="__local__ private" citdl="ml.getSize()" line="69" name="s" />
                </scope>
                <scope doc="Binds this TextMetrics instance to an element from which to copy existing CSS styles&#xA;that can affect the size of the rendered text" ilk="function" line="79" lineend="83" name="bind" signature="bind(el)">
                  <variable citdl="String/HTMLElement" doc="The element, dom node or id" ilk="argument" name="el" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Sets a fixed width on the internal measurement element.  If the text will be multiline, you have&#xA;to set a fixed width in order to accurately measure the text height." ilk="function" line="90" lineend="92" name="setFixedWidth" signature="setFixedWidth(width)">
                  <variable citdl="Number" doc="The width to set on the element" ilk="argument" name="width" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Returns the measured width of the specified text" ilk="function" line="99" lineend="102" name="getWidth" returns="Number" signature="getWidth(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Returns the measured height of the specified text.  For multiline text, be sure to call&#xA;{@link #setFixedWidth} if necessary." ilk="function" line="110" lineend="112" name="getHeight" returns="Number" signature="getHeight(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                </scope>
              </variable>
            </scope>
          </variable>
          <scope ilk="class" line="21" lineend="62" name="MixedCollection">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A Collection class that maintains both numeric indexes and keys and exposes events." ilk="function" line="21" lineend="62" name="MixedCollection" signature="MixedCollection(allowFunctions, keyFn)">
              <variable citdl="Boolean" doc="True if the addAll function should add function references to the&#xA;collection (defaults to false)" ilk="argument" name="allowFunctions" />
              <variable citdl="Function" doc="A function that can accept an item of the type(s) stored in this MixedCollection&#xA;and return the key value for that item.  This is used when available to look up the key on items that&#xA;were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is&#xA;equivalent to providing an implementation for the {@link #getKey} method." ilk="argument" name="keyFn" />
              <variable citdl="MixedCollection" name="this" />
            </scope>
            <variable citdl="Array" line="22" name="items" />
            <variable citdl="Object" line="23" lineend="23" name="map" />
            <variable citdl="Array" line="24" name="keys" />
            <variable citdl="Number" line="25" name="length" />
            <variable citdl="allowFunctions" line="57" name="allowFunctions" />
            <variable citdl="keyFn" line="59" name="getKey" />
          </scope>
          <scope ilk="class" line="21" lineend="30" name="DelayedTask">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides a convenient method of performing setTimeout where a new&#xA;timeout cancels the old timeout. An example would be performing validation on a keypress.&#xA;You can use this class to buffer&#xA;the keypress events for a certain number of milliseconds, and perform only if they stop&#xA;for that amount of time." ilk="function" line="21" lineend="62" name="DelayedTask" signature="DelayedTask(fn, scope, args)">
              <variable citdl="Function" doc="(optional) The default function to timeout" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The default scope of that timeout" ilk="argument" name="scope" />
              <variable citdl="Array" doc="(optional) The default Array of arguments" ilk="argument" name="args" />
              <variable citdl="DelayedTask" name="this" />
              <variable attributes="__local__ private" line="22" name="t" />
              <variable attributes="__local__ private" line="22" name="id" />
              <variable attributes="__local__ private" line="22" name="d" />
              <scope attributes="__local__ private" ilk="function" line="24" lineend="31" name="call" signature="call()">
                <variable attributes="__local__ private" citdl="Date" line="25" name="now" />
              </scope>
            </scope>
            <scope doc="Cancels any pending timeout and queues a new one" ilk="function" line="39" lineend="51" name="delay" signature="delay(delay, newFn, newScope, newArgs)">
              <variable citdl="Number" doc="The milliseconds to delay" ilk="argument" name="delay" />
              <variable citdl="Function" doc="(optional) Overrides function passed to constructor" ilk="argument" name="newFn" />
              <variable citdl="Object" doc="(optional) Overrides scope passed to constructor" ilk="argument" name="newScope" />
              <variable citdl="Array" doc="(optional) Overrides args passed to constructor" ilk="argument" name="newArgs" />
              <variable citdl="DelayedTask" name="this" />
            </scope>
            <scope doc="Cancel the last queued timeout" ilk="function" line="56" lineend="61" name="cancel" signature="cancel()">
              <variable citdl="DelayedTask" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="25" lineend="318" name="Observable">
            <scope attributes="__ctor__" doc="Abstract base class that provides a common interface for publishing events. Subclasses are expected to&#xA;to have a property &quot;events&quot; with all the events defined.&lt;br&gt;&#xA;For example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;Employee = function(name){&#xA;this.name = name;&#xA;this.addEvents({&#xA;&quot;fired&quot; : true,&#xA;&quot;quit&quot; : true&#xA;});&#xA;Ext.extend(Employee, Ext.util.Observable);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="25" lineend="35" name="Observable" signature="Observable()">
              <variable citdl="Observable" name="this" />
            </scope>
            <scope doc="Fires the specified event with the passed parameters (minus the event name)." ilk="function" line="43" lineend="51" name="fireEvent" returns="Boolean" signature="fireEvent()">
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.events[arguments[0].toLowerCase()]" line="45" name="ce" />
            </scope>
            <variable doc="private" line="54" name="filterOptRe" />
            <scope doc="Appends an event handler to this component&#xA;el.on(&apos;click&apos;, this.onClick, this, {&#xA;single: true,&#xA;delay: 100,&#xA;forumId: 4&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;foo.on({&#xA;&apos;click&apos; : {&#xA;fn: this.onClick,&#xA;scope: this,&#xA;delay: 100&#xA;&apos;mouseover&apos; : {&#xA;fn: this.onMouseOver,&#xA;scope: this&#xA;&apos;mouseout&apos; : {&#xA;fn: this.onMouseOut,&#xA;scope: this&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;foo.on({&#xA;&apos;click&apos; : this.onClick,&#xA;&apos;mouseover&apos; : this.onMouseOver,&#xA;&apos;mouseout&apos; : this.onMouseOut,&#xA;scope: this&#xA;});&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="113" lineend="138" name="addListener" signature="addListener(eventName, fn, scope, o)">
              <variable citdl="String" doc="The type of event to listen for" ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the handler&#xA;function. The handler function&apos;s &quot;this&quot; context." ilk="argument" name="scope" />
              <variable citdl="eventName" ilk="argument" name="o" />
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.events[eventName]" line="132" name="ce" />
            </scope>
            <scope doc="Removes a listener" ilk="function" line="146" lineend="151" name="removeListener" signature="removeListener(eventName, fn, scope)">
              <variable citdl="String" doc="The type of event to listen for" ilk="argument" name="eventName" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope (this object) for the handler" ilk="argument" name="scope" />
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.events[eventName.toLowerCase()]" line="147" name="ce" />
            </scope>
            <scope doc="Removes all listeners for this object" ilk="function" line="156" lineend="162" name="purgeListeners" signature="purgeListeners()">
              <variable citdl="Observable" name="this" />
            </scope>
            <scope doc="Relays selected events from the specified Observable as if the events were fired by &lt;tt&gt;&lt;b&gt;this&lt;/b&gt;&lt;/tt&gt;." ilk="function" line="169" lineend="180" name="relayEvents" signature="relayEvents(o, events)">
              <variable citdl="Object" doc="The Observable whose events this object is to relay." ilk="argument" name="o" />
              <variable citdl="Array" doc="Array of event names to relay." ilk="argument" name="events" />
              <variable citdl="Observable" name="this" />
              <scope attributes="__local__ private" ilk="function" line="170" lineend="174" name="createHandler" returns="this.fireEvent.apply()" signature="createHandler(ename)">
                <variable ilk="argument" name="ename" />
              </scope>
              <variable attributes="__local__ private" citdl="events[i]" line="176" name="ename" />
            </scope>
            <scope doc="Used to define events on this Observable" ilk="function" line="186" lineend="199" name="addEvents" signature="addEvents(o)">
              <variable ilk="argument" name="o" />
              <variable citdl="Observable" name="this" />
            </scope>
            <variable citdl="Object" line="188" lineend="188" name="events" />
            <scope doc="Checks to see if this object has any listeners for a specified event" ilk="function" line="206" lineend="209" name="hasListener" returns="Boolean" signature="hasListener(eventName)">
              <variable citdl="String" doc="The name of the event to check for" ilk="argument" name="eventName" />
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.events[eventName]" line="207" name="e" />
            </scope>
            <scope doc="Suspend the firing of all events. (see {@link #resumeEvents})" ilk="function" line="214" lineend="216" name="suspendEvents" signature="suspendEvents()">
              <variable citdl="Observable" name="this" />
            </scope>
            <variable citdl="Boolean" line="215" name="eventsSuspended" />
            <scope doc="Resume firing events. (see {@link #suspendEvents})" ilk="function" line="221" lineend="223" name="resumeEvents" signature="resumeEvents()">
              <variable citdl="Observable" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="228" lineend="289" name="getMethodEvent" returns="e" signature="getMethodEvent(method)">
              <variable ilk="argument" name="method" />
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.methodEvents[method]" line="232" lineend="234" name="e" />
              <variable attributes="__local__ private" citdl="v.returnValue" line="243" name="returnValue" />
              <variable attributes="__local__ private" line="243" name="v" />
              <variable attributes="__local__ private" citdl="Boolean" line="243" name="cancel" />
              <variable attributes="__local__ private" citdl="this" line="244" name="obj" />
              <scope attributes="__local__ private" ilk="function" line="246" lineend="263" name="makeCall" signature="makeCall(fn, scope, args)">
                <variable ilk="argument" name="fn" />
                <variable ilk="argument" name="scope" />
                <variable ilk="argument" name="args" />
              </scope>
              <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="267" name="args" />
            </scope>
            <variable citdl="Object" line="230" lineend="230" name="methodEvents" />
            <scope doc="adds an &quot;interceptor&quot; called before the original method" ilk="function" line="292" lineend="295" name="beforeMethod" signature="beforeMethod(method, fn, scope)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.getMethodEvent()" line="293" name="e" />
            </scope>
            <scope doc="adds a &quot;sequence&quot; called after the original method" ilk="function" line="298" lineend="301" name="afterMethod" signature="afterMethod(method, fn, scope)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.getMethodEvent()" line="299" name="e" />
            </scope>
            <scope ilk="function" line="303" lineend="317" name="removeMethodListener" signature="removeMethodListener(method, fn, scope)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Observable" name="this" />
              <variable attributes="__local__ private" citdl="this.getMethodEvent()" line="304" name="e" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Starts capture on the specified Observable. All events will be passed&#xA;to the supplied function with the event name + standard signature of the event&#xA;&lt;b&gt;before&lt;/b&gt; the event is fired. If the supplied function returns false,&#xA;the event will not fire." ilk="function" line="348" lineend="350" name="capture" signature="capture(o, fn, scope)">
              <variable citdl="Observable" doc="The Observable to capture" ilk="argument" name="o" />
              <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope (this object) for the fn" ilk="argument" name="scope" />
              <variable citdl="Observable" name="this" />
            </scope>
            <scope attributes="__static__" doc="STATIC: Removes &lt;b&gt;all&lt;/b&gt; added captures from the Observable." ilk="function" line="357" lineend="359" name="releaseCapture" signature="releaseCapture(o)">
              <variable citdl="Observable" doc="The Observable to release" ilk="argument" name="o" />
              <variable citdl="Observable" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="29" lineend="47" name="TaskRunner">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides the ability to execute one or more arbitrary tasks in a multithreaded manner.  Generally, you can use&#xA;the singleton {@link Ext.TaskMgr} instead, but if needed, you can create separate instances of TaskRunner.  Any&#xA;number of separate tasks can be started at any time and will run independently of each other.  Example usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// Start a simple clock task that updates a div once per second&#xA;var task = {&#xA;run: function(){&#xA;Ext.fly(&apos;clock&apos;).update(new Date().format(&apos;g:i:s A&apos;));&#xA;interval: 1000 //1 second&#xA;var runner = new Ext.util.TaskRunner();&#xA;runner.start(task);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="29" lineend="139" name="TaskRunner" signature="TaskRunner(interval)">
              <variable citdl="Number" doc="(optional) The minimum precision in milliseconds supported by this TaskRunner instance&#xA;(defaults to 10)" ilk="argument" name="interval" />
              <variable citdl="TaskRunner" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="31" name="tasks" />
              <variable attributes="__local__ private" citdl="Array" line="31" name="removeQueue" />
              <variable attributes="__local__ private" citdl="Number" line="32" name="id" />
              <variable attributes="__local__ private" citdl="Boolean" line="33" name="running" />
              <scope attributes="__local__ private" doc="private" ilk="function" line="36" lineend="40" name="stopThread" signature="stopThread()" />
              <scope attributes="__local__ private" doc="private" ilk="function" line="43" lineend="48" name="startThread" signature="startThread()" />
              <scope attributes="__local__ private" doc="private" ilk="function" line="51" lineend="56" name="removeTask" signature="removeTask(t)">
                <variable ilk="argument" name="t" />
              </scope>
              <scope attributes="__local__ private" doc="private" ilk="function" line="59" lineend="86" name="runTasks" signature="runTasks()">
                <variable attributes="__local__ private" citdl="Date" line="70" name="now" />
                <variable attributes="__local__ private" citdl="tasks[i]" line="72" name="t" />
                <variable attributes="__local__ private" citdl="now" line="73" name="itime" />
                <variable attributes="__local__ private" citdl="t.run.apply()" line="75" name="rt" />
              </scope>
            </scope>
            <scope doc="Starts a new task." ilk="function" line="107" lineend="114" name="start" returns="Object" signature="start(task)">
              <variable citdl="Object" doc="A config object that supports the following properties:&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;run&lt;/code&gt; : Function&lt;div class=&quot;sub-desc&quot;&gt;The function to execute each time the task is run. The&#xA;function will be called at each interval and passed the &lt;code&gt;args&lt;/code&gt; argument if specified.  If a&#xA;particular scope is required, be sure to specify it using the &lt;code&gt;scope&lt;/scope&gt; argument.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;interval&lt;/code&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;The frequency in milliseconds with which the task&#xA;should be executed.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;args&lt;/code&gt; : Array&lt;div class=&quot;sub-desc&quot;&gt;(optional) An array of arguments to be passed to the function&#xA;specified by &lt;code&gt;run&lt;/code&gt;.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;scope&lt;/code&gt; : Object&lt;div class=&quot;sub-desc&quot;&gt;(optional) The scope in which to execute the&#xA;&lt;code&gt;run&lt;/code&gt; function.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;duration&lt;/code&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;(optional) The length of time in milliseconds to execute&#xA;the task before stopping automatically (defaults to indefinite).&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;repeat&lt;/code&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;(optional) The number of times to execute the task before&#xA;stopping automatically (defaults to indefinite).&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="argument" name="task" />
              <variable citdl="TaskRunner" name="this" />
            </scope>
            <scope doc="Stops an existing running task." ilk="function" line="121" lineend="124" name="stop" returns="Object" signature="stop(task)">
              <variable citdl="Object" doc="The task to stop" ilk="argument" name="task" />
              <variable citdl="TaskRunner" name="this" />
            </scope>
            <scope doc="Stops all tasks that are currently running." ilk="function" line="129" lineend="138" name="stopAll" signature="stopAll()">
              <variable citdl="TaskRunner" name="this" />
            </scope>
          </scope>
          <scope doc="@class Ext.util.ClickRepeater&#xA;@extends Ext.util.Observable&#xA;A wrapper class which can be applied to any element. Fires a &quot;click&quot; event while the&#xA;mouse is pressed. The interval between firings may be specified in the config but&#xA;defaults to 20 milliseconds.&#xA;Optionally, a CSS class may be applied to the element during the time it is pressed.&#xA;@cfg {Mixed} el The element to act as a button.&#xA;@cfg {Number} delay The initial delay before the repeating event begins firing.&#xA;Similar to an autorepeat key delay.&#xA;@cfg {Number} interval The interval between firings of the &quot;click&quot; event. Default 20 ms.&#xA;@cfg {String} pressClass A CSS class name to be applied to the element while pressed.&#xA;@cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.&#xA;&quot;interval&quot; and &quot;delay&quot; are ignored.&#xA;@cfg {Boolean} preventDefault True to prevent the default click event&#xA;@cfg {Boolean} stopDefault True to stop the default click event&#xA;@history&#xA;2007-02-02 jvs Original code contributed by Nige &quot;Animal&quot; White&#xA;2007-02-02 jvs Renamed to ClickRepeater&#xA;2007-02-03 jvs Modifications for FF Mac and Safari&#xA;@constructor&#xA;@param {Mixed} el The element to listen on&#xA;@param {Object} config" ilk="function" line="39" lineend="84" name="ClickRepeater" signature="ClickRepeater(el, config)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="config" />
            <variable citdl="util" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="40" name="el" />
          <scope ilk="class" line="386" lineend="474" name="Event">
            <scope attributes="__ctor__" ilk="function" line="386" lineend="390" name="Event" signature="Event(obj, name)">
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="name" />
              <variable citdl="Event" name="this" />
            </scope>
            <variable citdl="name" line="387" name="name" />
            <variable citdl="Object" line="388" name="obj" />
            <variable citdl="Array" line="389" name="listeners" />
            <scope ilk="function" line="393" lineend="404" name="addListener" signature="addListener(fn, scope, options)">
              <variable ilk="argument" name="fn" />
              <variable citdl="scope" ilk="argument" name="scope" />
              <variable ilk="argument" name="options" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="this.createListener()" line="396" name="l" />
            </scope>
            <scope ilk="function" line="406" lineend="422" name="createListener" returns="l" signature="createListener(fn, scope, o)">
              <variable ilk="argument" name="fn" />
              <variable citdl="scope" ilk="argument" name="scope" />
              <variable citdl="o" ilk="argument" name="o" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="409" lineend="409" name="l">
                <variable citdl="scope" line="409" name="scope" />
                <variable citdl="o" line="409" name="options" />
                <variable citdl="fn" line="409" name="fn" />
                <variable citdl="h" line="420" name="fireFn" />
              </variable>
              <variable attributes="__local__ private" citdl="fn" line="410" name="h" />
            </scope>
            <scope ilk="function" line="424" lineend="434" name="findListener" returns="Number" signature="findListener(fn, scope)">
              <variable ilk="argument" name="fn" />
              <variable citdl="scope" ilk="argument" name="scope" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" citdl="this.listeners" line="426" name="ls" />
              <variable attributes="__local__ private" citdl="ls[i]" line="428" name="l" />
            </scope>
            <scope ilk="function" line="436" lineend="438" name="isListening" returns="this.findListener()" signature="isListening(fn, scope)">
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="440" lineend="452" name="removeListener" returns="Boolean" signature="removeListener(fn, scope)">
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="441" name="index" />
            </scope>
            <scope ilk="function" line="454" lineend="456" name="clearListeners" signature="clearListeners()">
              <variable citdl="Event" name="this" />
            </scope>
            <scope ilk="function" line="458" lineend="473" name="fire" returns="Boolean" signature="fire()">
              <variable citdl="Event" name="this" />
              <variable attributes="__local__ private" line="459" name="scope" />
              <variable attributes="__local__ private" citdl="this.listeners" line="459" name="ls" />
              <variable attributes="__local__ private" citdl="ls.length" line="459" name="len" />
              <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="462" name="args" />
              <variable attributes="__local__ private" citdl="ls[i]" line="464" name="l" />
            </scope>
            <variable citdl="Boolean" line="461" name="firing" />
          </scope>
        </variable>
        <scope ilk="class" line="33" lineend="136" name="SplitBar">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).&#xA;&lt;br&gt;&lt;br&gt;&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var split = new Ext.SplitBar(&quot;elementToDrag&quot;, &quot;elementToSize&quot;,&#xA;Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);&#xA;split.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter(&quot;container&quot;));&#xA;split.minSize = 100;&#xA;split.maxSize = 600;&#xA;split.animate = true;&#xA;split.on(&apos;moved&apos;, splitterMoved);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;Ext.SplitBar.TOP or Ext.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial&#xA;position of the SplitBar)." ilk="function" line="33" lineend="136" name="SplitBar" signature="SplitBar(dragElement, resizingElement, orientation, placement, existingProxy)">
            <variable citdl="Mixed" doc="The element to be dragged and act as the SplitBar." ilk="argument" name="dragElement" />
            <variable citdl="Mixed" doc="The element to be resized based on where the SplitBar element is dragged" ilk="argument" name="resizingElement" />
            <variable citdl="Number" doc="(optional) Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)" ilk="argument" name="orientation" />
            <variable citdl="Number" doc="(optional) Either Ext.SplitBar.LEFT or Ext.SplitBar.RIGHT for horizontal or" ilk="argument" name="placement" />
            <variable ilk="argument" name="existingProxy" />
            <variable citdl="SplitBar" name="this" />
          </scope>
          <variable citdl="Ext.get()" doc="*/" line="36" name="el" />
          <variable citdl="String" line="37" name="unselectable" />
          <variable citdl="Ext.get()" doc="*/" line="39" name="resizingEl" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: The orientation of the split. Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)&#xA;Note: If this is changed after creating the SplitBar, the placement property must be manually updated" line="47" name="orientation" />
          <variable citdl="Number" doc="The minimum size of the resizing element. (Defaults to 0)" line="53" name="minSize" />
          <variable citdl="Number" doc="The maximum size of the resizing element. (Defaults to 2000)" line="59" name="maxSize" />
          <variable citdl="Boolean" doc="Whether to animate the transition to the new size" line="65" name="animate" />
          <variable citdl="Boolean" doc="Whether to create a transparent shim that overlays the page when dragging, enables dragging across iframes." line="71" name="useShim" />
          <variable doc="*/" line="74" name="shim" />
          <variable citdl="Ext.SplitBar.createProxy()" doc="*/" line="78" name="proxy" />
          <variable citdl="Ext.dd.DDProxy" doc="*/" line="83" name="dd" />
          <variable citdl="this.onStartProxyDrag.createDelegate()" doc="*/" line="86" name="b4StartDrag" />
          <variable citdl="this.onEndProxyDrag.createDelegate()" doc="*/" line="89" name="endDrag" />
          <variable citdl="Object" doc="*/" line="92" lineend="92" name="dragSpecs" />
          <variable attributes="private" citdl="Ext.SplitBar.BasicLayoutAdapter" doc="The adapter to use to positon and resize elements */" line="97" name="adapter" />
          <variable citdl="placement" doc="*/" line="102" name="placement" />
          <scope attributes="private" doc="static Create our own proxy element element. So it will be&#xA;the same same size on all browsers, we won&apos;t use borders." ilk="function" line="284" lineend="291" name="createProxy" returns="proxy.dom" signature="createProxy(dir)">
            <variable ilk="argument" name="dir" />
            <variable citdl="SplitBar" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element" line="285" name="proxy" />
            <variable attributes="__local__ private" citdl="String" line="287" name="cls" />
          </scope>
          <scope ilk="class" line="298" lineend="346" name="BasicLayoutAdapter">
            <scope attributes="__ctor__" doc="Default Adapter. It assumes the splitter and resizing element are not positioned&#xA;elements and only gets/sets the width of the element. Generally used for table based layouts." ilk="function" line="298" lineend="299" name="BasicLayoutAdapter" signature="BasicLayoutAdapter()">
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope doc="do nothing for now" ilk="function" line="303" lineend="305" name="init" signature="init(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope doc="Called before drag operations to get the current size of the resizing element." ilk="function" line="310" lineend="316" name="getElementSize" returns="s.resizingEl.getHeight()" signature="getElementSize(s)">
              <variable citdl="Ext.SplitBar" doc="The SplitBar using this adapter" ilk="argument" name="s" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope doc="Called after drag operations to set the size of the resizing element." ilk="function" line="324" lineend="345" name="setElementSize" signature="setElementSize(s, newSize, onComplete)">
              <variable citdl="Ext.SplitBar" doc="The SplitBar using this adapter" ilk="argument" name="s" />
              <variable citdl="Number" doc="The new size to set" ilk="argument" name="newSize" />
              <variable citdl="Function" doc="A function to be invoked when resizing is complete" ilk="argument" name="onComplete" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
          </scope>
          <scope doc="*@class Ext.SplitBar.AbsoluteLayoutAdapter" ilk="class" line="356" lineend="391" name="AbsoluteLayoutAdapter">
            <scope attributes="__ctor__" doc="*@class Ext.SplitBar.AbsoluteLayoutAdapter" ilk="function" line="356" lineend="359" name="AbsoluteLayoutAdapter" signature="AbsoluteLayoutAdapter(container)">
              <variable citdl="Mixed" doc="The container that wraps around the absolute positioned content. If it&apos;s&#xA;document.body, make sure you assign an id to the body element." ilk="argument" name="container" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="362" lineend="364" name="init" signature="init(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="366" lineend="368" name="getElementSize" returns="this.basic.getElementSize()" signature="getElementSize(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="370" lineend="372" name="setElementSize" signature="setElementSize(s, newSize, onComplete)">
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="newSize" />
              <variable ilk="argument" name="onComplete" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="374" lineend="390" name="moveSplitter" signature="moveSplitter(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
              <variable attributes="__local__ private" citdl="Ext.SplitBar" line="375" name="yes" />
            </scope>
          </scope>
          <variable citdl="Ext.SplitBar.BasicLayoutAdapter" line="357" name="basic" />
          <variable citdl="Ext.get()" line="358" name="container" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Orientation constant - Create a vertical SplitBar" line="398" name="VERTICAL" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Orientation constant - Create a horizontal SplitBar" line="405" name="HORIZONTAL" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is to the left of the splitter element" line="412" name="LEFT" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is to the right of the splitter element" line="419" name="RIGHT" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is positioned above the splitter element" line="426" name="TOP" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is positioned under splitter element" line="433" name="BOTTOM" />
        </scope>
        <scope ilk="class" line="34" lineend="151" name="KeyNav">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind&#xA;navigation keys to function calls that will get called when the keys are pressed, providing an easy&#xA;way to implement custom navigation schemes for any UI component.&lt;/p&gt;&#xA;&lt;p&gt;The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,&#xA;pageUp, pageDown, del, home, end.  Usage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var nav = new Ext.KeyNav(&quot;my-element&quot;, {&#xA;&quot;left&quot; : function(e){&#xA;this.moveLeft(e.ctrlKey);&#xA;&quot;right&quot; : function(e){&#xA;this.moveRight(e.ctrlKey);&#xA;&quot;enter&quot; : function(e){&#xA;this.save();&#xA;scope : this&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="34" lineend="41" name="KeyNav" signature="KeyNav(el, config)">
            <variable citdl="Mixed" doc="The element to bind to" ilk="argument" name="el" />
            <variable citdl="Object" doc="The config" ilk="argument" name="config" />
            <variable citdl="KeyNav" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="35" name="el" />
          <variable citdl="Boolean" line="38" name="disabled" />
          <variable citdl="String" doc="The method to call on the {@link Ext.EventObject} after this KeyNav intercepts a key.  Valid values are&#xA;{@link Ext.EventObject#stopEvent}, {@link Ext.EventObject#preventDefault} and&#xA;{@link Ext.EventObject#stopPropagation} (defaults to &apos;stopEvent&apos;)" line="55" name="defaultEventAction" />
          <variable citdl="Boolean" doc="Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since&#xA;IE does not propagate special keys on keypress, but setting this to true will force other browsers to also&#xA;handle keydown instead of keypress." line="62" name="forceKeyDown" />
          <scope doc="private" ilk="function" line="65" lineend="74" name="prepareEvent" signature="prepareEvent(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="KeyNav" name="this" />
            <variable attributes="__local__ private" citdl="e.getKey()" line="66" name="k" />
            <variable attributes="__local__ private" citdl="this.keyToHandler[k]" line="67" name="h" />
          </scope>
          <scope doc="private" ilk="function" line="77" lineend="85" name="relay" signature="relay(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="KeyNav" name="this" />
            <variable attributes="__local__ private" citdl="e.getKey()" line="78" name="k" />
            <variable attributes="__local__ private" citdl="this.keyToHandler[k]" line="79" name="h" />
          </scope>
          <scope doc="private" ilk="function" line="88" lineend="90" name="doRelay" returns="h.call()" signature="doRelay(e, h, hname)">
            <variable ilk="argument" name="e" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="hname" />
            <variable citdl="KeyNav" name="this" />
          </scope>
          <variable citdl="Boolean" doc="possible handlers" line="93" name="enter" />
          <variable citdl="Boolean" line="94" name="left" />
          <variable citdl="Boolean" line="95" name="right" />
          <variable citdl="Boolean" line="96" name="up" />
          <variable citdl="Boolean" line="97" name="down" />
          <variable citdl="Boolean" line="98" name="tab" />
          <variable citdl="Boolean" line="99" name="esc" />
          <variable citdl="Boolean" line="100" name="pageUp" />
          <variable citdl="Boolean" line="101" name="pageDown" />
          <variable citdl="Boolean" line="102" name="del" />
          <variable citdl="Boolean" line="103" name="home" />
          <variable citdl="Boolean" line="104" name="end" />
          <variable citdl="Object" doc="quick lookup hash" line="107" lineend="120" name="keyToHandler" />
          <scope doc="Enable this KeyNav" ilk="function" line="125" lineend="135" name="enable" signature="enable()">
            <variable citdl="KeyNav" name="this" />
          </scope>
          <scope doc="Disable this KeyNav" ilk="function" line="140" lineend="150" name="disable" signature="disable()">
            <variable citdl="KeyNav" name="this" />
          </scope>
        </scope>
        <variable citdl="String" line="35" name="cls" />
        <variable citdl="String" line="35" name="tag" />
        <variable citdl="Object" line="37" lineend="418" name="DomHelper">
          <variable citdl="Boolean" doc="Boolean */" line="224" name="useDom" />
          <scope doc="Returns the markup for the passed Element(s) config." ilk="function" line="231" lineend="233" name="markup" returns="String" signature="markup(o)">
            <variable citdl="Object" doc="The DOM object spec (and children)" ilk="argument" name="o" />
            <variable citdl="DomHelper" name="this" />
          </scope>
          <scope doc="Applies a style specification to an element." ilk="function" line="241" lineend="258" name="applyStyles" signature="applyStyles(el, styles)">
            <variable citdl="String/HTMLElement" doc="The element to apply styles to" ilk="argument" name="el" />
            <variable citdl="String/Object/Function" doc="A style specification string eg &quot;width:100px&quot;, or object in the form {width:&quot;100px&quot;}, or&#xA;a function which returns such a specification." ilk="argument" name="styles" />
            <variable citdl="DomHelper" name="this" />
            <variable attributes="__local__ private" line="245" name="re" />
            <variable attributes="__local__ private" line="246" name="matches" />
          </scope>
          <scope doc="Inserts an HTML fragment into the DOM." ilk="function" line="267" lineend="327" name="insertHtml" returns="HTMLElement" signature="insertHtml(where, el, html)">
            <variable citdl="String" doc="Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd." ilk="argument" name="where" />
            <variable citdl="HTMLElement" doc="The context element" ilk="argument" name="el" />
            <variable citdl="String" doc="The HTML fragmenet" ilk="argument" name="html" />
            <variable citdl="DomHelper" name="this" />
            <variable attributes="__local__ private" line="271" name="rs" />
            <variable attributes="__local__ private" citdl="el.ownerDocument.createRange()" line="292" name="range" />
            <variable attributes="__local__ private" citdl="range.createContextualFragment()" line="293" name="frag" />
          </scope>
          <scope doc="Creates new DOM element(s) and inserts them before el." ilk="function" line="336" lineend="338" name="insertBefore" returns="HTMLElement/Ext.Element" signature="insertBefore(el, o, returnElement)">
            <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/String" doc="The DOM object spec (and children) or raw HTML blob" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element" ilk="argument" name="returnElement" />
            <variable citdl="DomHelper" name="this" />
          </scope>
          <scope doc="Creates new DOM element(s) and inserts them after el." ilk="function" line="347" lineend="349" name="insertAfter" returns="HTMLElement/Ext.Element" signature="insertAfter(el, o, returnElement)">
            <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object" doc="The DOM object spec (and children)" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element" ilk="argument" name="returnElement" />
            <variable citdl="DomHelper" name="this" />
          </scope>
          <scope doc="Creates new DOM element(s) and inserts them as the first child of el." ilk="function" line="358" lineend="360" name="insertFirst" returns="HTMLElement/Ext.Element" signature="insertFirst(el, o, returnElement)">
            <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/String" doc="The DOM object spec (and children) or raw HTML blob" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element" ilk="argument" name="returnElement" />
            <variable citdl="DomHelper" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="363" lineend="374" name="doInsert" returns="returnElement" signature="doInsert(el, o, returnElement, pos, sibling)">
            <variable citdl="Ext.getDom()" ilk="argument" name="el" />
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="returnElement" />
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="sibling" />
            <variable citdl="DomHelper" name="this" />
            <variable attributes="__local__ private" citdl="createDom()" line="365" name="newNode" />
            <variable attributes="__local__ private" citdl="createHtml()" line="370" name="html" />
          </scope>
          <scope doc="Creates new DOM element(s) and appends them to el." ilk="function" line="383" lineend="394" name="append" returns="HTMLElement/Ext.Element" signature="append(el, o, returnElement)">
            <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/String" doc="The DOM object spec (and children) or raw HTML blob" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element" ilk="argument" name="returnElement" />
            <variable citdl="DomHelper" name="this" />
            <variable attributes="__local__ private" citdl="createDom()" line="385" name="newNode" />
            <variable attributes="__local__ private" citdl="createHtml()" line="390" name="html" />
          </scope>
          <scope doc="Creates new DOM element(s) and overwrites the contents of el with them." ilk="function" line="403" lineend="407" name="overwrite" returns="HTMLElement/Ext.Element" signature="overwrite(el, o, returnElement)">
            <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
            <variable citdl="Object/String" doc="The DOM object spec (and children) or raw HTML blob" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) true to return a Ext.Element" ilk="argument" name="returnElement" />
            <variable citdl="DomHelper" name="this" />
          </scope>
          <scope doc="Creates a new Ext.Template from the DOM object spec." ilk="function" line="414" lineend="417" name="createTemplate" returns="Ext.Template" signature="createTemplate(o)">
            <variable citdl="Object" doc="The DOM object spec (and children)" ilk="argument" name="o" />
            <variable citdl="DomHelper" name="this" />
            <variable attributes="__local__ private" citdl="createHtml()" line="415" name="html" />
          </scope>
        </variable>
        <variable citdl="Object" line="40" lineend="609" name="MessageBox">
          <scope doc="Returns a reference to the underlying {@link Ext.Window} element" ilk="function" line="101" lineend="165" name="getDialog" returns="Ext.Window" signature="getDialog(titleText)">
            <variable ilk="argument" name="titleText" />
            <variable citdl="MessageBox" name="this" />
            <variable citdl="Object" line="129" lineend="129" name="buttons" />
            <variable attributes="__local__ private" citdl="this.buttonText" line="130" name="bt" />
            <variable attributes="__local__ private" citdl="bodyEl.dom.childNodes[1]" line="144" name="contentEl" />
          </scope>
          <scope doc="Updates the message box body text" ilk="function" line="173" lineend="199" name="updateText" returns="Ext.MessageBox" signature="updateText(text)">
            <variable citdl="String" doc="(optional) Replaces the message box element&apos;s innerHTML with the specified string (defaults to&#xA;the XHTML-compliant non-breaking space character &apos;&amp;amp;#160;&apos;)" ilk="argument" name="text" />
            <variable citdl="MessageBox" name="this" />
            <variable attributes="__local__ private" citdl="iconCls" line="179" name="iw" />
            <variable attributes="__local__ private" citdl="msgEl.getWidth()" line="180" name="mw" />
            <variable attributes="__local__ private" citdl="dlg.getFrameWidth()" line="181" name="fw" />
            <variable attributes="__local__ private" citdl="dlg.body.getFrameWidth()" line="182" name="bw" />
            <variable attributes="__local__ private" citdl="Math.max()" line="189" name="w" />
          </scope>
          <scope doc="Updates a progress-style message box&apos;s text and progress bar.  Only relevant on message boxes&#xA;initiated via {@link Ext.MessageBox#progress} or by calling {@link Ext.MessageBox#show} with progress: true." ilk="function" line="210" lineend="216" name="updateProgress" returns="Ext.MessageBox" signature="updateProgress(value, progressText, msg)">
            <variable citdl="Number" doc="Any number between 0 and 1 (e.g., .5, defaults to 0)" ilk="argument" name="value" />
            <variable citdl="String" doc="The progress text to display inside the progress bar (defaults to &apos;&apos;)" ilk="argument" name="progressText" />
            <variable citdl="String" doc="The message box&apos;s body text is replaced with the specified string (defaults to undefined&#xA;so that any existing body text will not get overwritten by default unless a new value is passed in)" ilk="argument" name="msg" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Returns true if the message box is currently displayed" ilk="function" line="222" lineend="224" name="isVisible" returns="Boolean" signature="isVisible()">
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Hides the message box if it is displayed" ilk="function" line="230" lineend="236" name="hide" returns="Ext.MessageBox" signature="hide()">
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a new message box, or reinitializes an existing message box, based on the config options&#xA;passed in. All display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally,&#xA;although those calls are basic shortcuts and do not support all of the config options allowed here.&#xA;Ext.Msg.show({&#xA;title: &apos;Address&apos;,&#xA;msg: &apos;Please enter your address:&apos;,&#xA;width: 300,&#xA;buttons: Ext.MessageBox.OKCANCEL,&#xA;multiline: true,&#xA;fn: saveAddress,&#xA;animEl: &apos;addAddressBtn&apos;,&#xA;icon: Ext.MessageBox.INFO&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="306" lineend="382" name="show" returns="Ext.MessageBox" signature="show(options)">
            <variable ilk="argument" name="options" />
            <variable citdl="MessageBox" name="this" />
            <variable attributes="__local__ private" citdl="this.getDialog()" line="311" name="d" />
            <variable attributes="__local__ private" line="314" name="allowClose" />
            <variable attributes="__local__ private" citdl="opt.buttons" line="337" name="bs" />
            <variable attributes="__local__ private" citdl="buttons[&quot;ok&quot;]" line="338" name="db" />
          </scope>
          <scope doc="Adds the specified icon to the dialog.  By default, the class &apos;ext-mb-icon&apos; is applied for default&#xA;styling, and the class passed in is expected to supply the background image url. Pass in empty string (&apos;&apos;)&#xA;to clear any existing icon.  The following built-in icon classes are supported, but you can also pass&#xA;in a custom class name:&#xA;&lt;pre&gt;&#xA;Ext.MessageBox.INFO&#xA;Ext.MessageBox.WARNING&#xA;Ext.MessageBox.QUESTION&#xA;Ext.MessageBox.ERROR&#xA;*&lt;/pre&gt;" ilk="function" line="398" lineend="408" name="setIcon" returns="Ext.MessageBox" signature="setIcon(icon)">
            <variable citdl="String" doc="A CSS classname specifying the icon&apos;s background image url, or empty string to clear the icon" ilk="argument" name="icon" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a message box with a progress bar.  This message box has no buttons and is not closeable by&#xA;the user.  You are responsible for updating the progress bar as needed via {@link Ext.MessageBox#updateProgress}&#xA;and closing the message box when the process is complete." ilk="function" line="419" lineend="430" name="progress" returns="Ext.MessageBox" signature="progress(title, msg, progressText)">
            <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
            <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
            <variable citdl="String" doc="(optional) The text to display inside the progress bar (defaults to &apos;&apos;)" ilk="argument" name="progressText" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user&#xA;interaction while waiting for a long-running process to complete that does not have defined intervals.&#xA;You are responsible for closing the message box when the process is complete." ilk="function" line="441" lineend="453" name="wait" returns="Ext.MessageBox" signature="wait(msg, title, config)">
            <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
            <variable citdl="String" doc="(optional) The title bar text" ilk="argument" name="title" />
            <variable citdl="Object" doc="(optional) A {@link Ext.ProgressBar#waitConfig} object" ilk="argument" name="config" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).&#xA;If a callback function is passed it will be called after the user clicks the button, and the&#xA;id of the button that was clicked will be passed as the only parameter to the callback&#xA;(could also be the top-right close button)." ilk="function" line="466" lineend="475" name="alert" returns="Ext.MessageBox" signature="alert(title, msg, fn, scope)">
            <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
            <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
            <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a confirmation message box with Yes and No buttons (comparable to JavaScript&apos;s confirm).&#xA;If a callback function is passed it will be called after the user clicks either button,&#xA;and the id of the button that was clicked will be passed as the only parameter to the callback&#xA;(could also be the top-right close button)." ilk="function" line="488" lineend="498" name="confirm" returns="Ext.MessageBox" signature="confirm(title, msg, fn, scope)">
            <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
            <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
            <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <scope doc="Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript&apos;s prompt).&#xA;The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user&#xA;clicks either button, and the id of the button that was clicked (could also be the top-right&#xA;close button) and the text that was entered will be passed as the two parameters to the callback." ilk="function" line="514" lineend="527" name="prompt" returns="Ext.MessageBox" signature="prompt(title, msg, fn, scope, multiline, value)">
            <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
            <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
            <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
            <variable citdl="Boolean/Number" doc="(optional) True to create a multiline textbox using the defaultTextHeight&#xA;property, or the height in pixels to create the textbox (defaults to false / single-line)" ilk="argument" name="multiline" />
            <variable citdl="String" doc="(optional) Default value of the text input element (defaults to &apos;&apos;)" ilk="argument" name="value" />
            <variable citdl="MessageBox" name="this" />
          </scope>
          <variable citdl="Object" doc="Button config that displays a single OK button" line="533" lineend="533" name="OK">
            <variable citdl="Boolean" line="533" name="ok" />
          </variable>
          <variable citdl="Object" doc="Button config that displays a single Cancel button" line="538" lineend="538" name="CANCEL">
            <variable citdl="Boolean" line="538" name="cancel" />
          </variable>
          <variable citdl="Object" doc="Button config that displays OK and Cancel buttons" line="543" lineend="543" name="OKCANCEL">
            <variable citdl="Boolean" line="543" name="cancel" />
            <variable citdl="Boolean" line="543" name="ok" />
          </variable>
          <variable citdl="Object" doc="Button config that displays Yes and No buttons" line="548" lineend="548" name="YESNO">
            <variable citdl="Boolean" line="548" name="yes" />
            <variable citdl="Boolean" line="548" name="no" />
          </variable>
          <variable citdl="Object" doc="Button config that displays Yes, No and Cancel buttons" line="553" lineend="553" name="YESNOCANCEL">
            <variable citdl="Boolean" line="553" name="cancel" />
            <variable citdl="Boolean" line="553" name="yes" />
            <variable citdl="Boolean" line="553" name="no" />
          </variable>
          <variable citdl="String" doc="The CSS class that provides the INFO icon image" line="558" name="INFO" />
          <variable citdl="String" doc="The CSS class that provides the WARNING icon image" line="563" name="WARNING" />
          <variable citdl="String" doc="The CSS class that provides the QUESTION icon image" line="568" name="QUESTION" />
          <variable citdl="String" doc="The CSS class that provides the ERROR icon image" line="573" name="ERROR" />
          <variable citdl="Number" doc="The default height in pixels of the message box&apos;s multiline textarea if displayed (defaults to 75)" line="579" name="defaultTextHeight" />
          <variable citdl="Number" doc="The maximum width in pixels of the message box (defaults to 600)" line="584" name="maxWidth" />
          <variable citdl="Number" doc="The minimum width in pixels of the message box (defaults to 100)" line="589" name="minWidth" />
          <variable citdl="Number" doc="The minimum width in pixels of the message box if it is a progress-style dialog.  This is useful&#xA;for setting a different minimum width than text-only dialogs may need (defaults to 250)" line="595" name="minProgressWidth" />
          <variable citdl="Object" doc="An object containing the default button text strings that can be overriden for localized language support.&#xA;Supported properties are: ok, cancel, yes and no.  Generally you should include a locale-specific&#xA;resource file for handling language support across the framework.&#xA;Customize the default text like so: Ext.MessageBox.buttonText.yes = &quot;oui&quot;; //french" line="603" lineend="608" name="buttonText">
            <variable citdl="String" line="604" name="ok" />
            <variable citdl="String" line="605" name="cancel" />
            <variable citdl="String" line="606" name="yes" />
            <variable citdl="String" line="607" name="no" />
          </variable>
        </variable>
        <variable citdl="config.constrain" line="41" name="constrain" />
        <variable citdl="Ext.Element.VISIBILITY" line="42" name="visibilityMode" />
        <variable citdl="config.zindex" line="48" name="zindex" />
        <variable citdl="config.shadowOffset" line="51" name="shadowOffset" />
        <scope ilk="class" line="55" lineend="226" name="KeyMap">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Handles mapping keys to actions for an element. One key map can be used for multiple actions.&#xA;The constructor accepts the same config object as defined by {@link #addBinding}.&#xA;If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key&#xA;combination it will call the function with this signature (if the match is a multi-key&#xA;combination the callback will still be called only once): (String key, Ext.EventObject e)&#xA;A KeyMap can also handle a string representation of keys.&lt;br /&gt;&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// map one key by key code&#xA;var map = new Ext.KeyMap(&quot;my-element&quot;, {&#xA;key: 13, // or Ext.EventObject.ENTER&#xA;fn: myHandler,&#xA;scope: myObject&#xA;});&#xA;// map multiple keys to one action by string&#xA;var map = new Ext.KeyMap(&quot;my-element&quot;, {&#xA;key: &quot;a\r\n\t&quot;,&#xA;fn: myHandler,&#xA;scope: myObject&#xA;});&#xA;// map multiple keys to multiple actions by strings and array of codes&#xA;var map = new Ext.KeyMap(&quot;my-element&quot;, [&#xA;key: [10,13],&#xA;fn: function(){ alert(&quot;Return was pressed&quot;); }&#xA;}, {&#xA;key: &quot;abc&quot;,&#xA;fn: function(){ alert(&apos;a, b or c was pressed&apos;); }&#xA;}, {&#xA;key: &quot;\t&quot;,&#xA;ctrl:true,&#xA;shift:true,&#xA;fn: function(){ alert(&apos;Control + shift + tab was pressed.&apos;); }&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;b&gt;Note: A KeyMap starts enabled&lt;/b&gt;" ilk="function" line="55" lineend="63" name="KeyMap" signature="KeyMap(el, config, eventName)">
            <variable citdl="Mixed" doc="The element to bind to" ilk="argument" name="el" />
            <variable citdl="Object" doc="The config (see {@link #addBinding})" ilk="argument" name="config" />
            <variable citdl="String" doc="(optional) The event to bind to (defaults to &quot;keydown&quot;)" ilk="argument" name="eventName" />
            <variable citdl="KeyMap" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="56" name="el" />
          <variable citdl="eventName" line="57" name="eventName" />
          <variable citdl="Array" line="58" name="bindings" />
          <variable citdl="Boolean" doc="True to stop the event from bubbling and prevent the default browser action if the&#xA;key was handled by the KeyMap (defaults to false)" line="71" name="stopEvent" />
          <scope doc="Add a new binding to this KeyMap. The following config object properties are supported:&#xA;&lt;pre&gt;&#xA;Property    Type             Description&#xA;----------  ---------------  ----------------------------------------------------------------------&#xA;key         String/Array     A single keycode or an array of keycodes to handle&#xA;shift       Boolean          True to handle key only when shift is pressed (defaults to false)&#xA;ctrl        Boolean          True to handle key only when ctrl is pressed (defaults to false)&#xA;alt         Boolean          True to handle key only when alt is pressed (defaults to false)&#xA;handler     Function         The function to call when KeyMap finds the expected key combination&#xA;fn          Function         Alias of handler (for backwards-compatibility)&#xA;scope       Object           The scope of the callback function&#xA;stopEvent   Boolean          True to stop the event&#xA;&lt;/pre&gt;&#xA;&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// Create a KeyMap&#xA;var map = new Ext.KeyMap(document, {&#xA;key: Ext.EventObject.ENTER,&#xA;fn: handleKey,&#xA;scope: this&#xA;});&#xA;//Add a new binding to the existing KeyMap later&#xA;map.addBinding({&#xA;key: &apos;abc&apos;,&#xA;shift: true,&#xA;fn: handleKey,&#xA;scope: this&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="107" lineend="159" name="addBinding" signature="addBinding(config)">
            <variable citdl="Object/Array" doc="A single KeyMap config or an array of configs" ilk="argument" name="config" />
            <variable citdl="KeyMap" name="this" />
            <variable attributes="__local__ private" citdl="config.ctrl" line="119" name="ctrl" />
            <variable attributes="__local__ private" citdl="config.shift" line="119" name="shift" />
            <variable attributes="__local__ private" citdl="config.scope" line="119" name="scope" />
            <variable attributes="__local__ private" citdl="config.alt" line="119" name="alt" />
            <variable attributes="__local__ private" citdl="config.key" line="119" name="keyCode" />
            <variable attributes="__local__ private" citdl="config.fn" line="119" name="fn" />
            <variable attributes="__local__ private" citdl="Array" line="126" name="ks" />
            <variable attributes="__local__ private" citdl="keyCode.toUpperCase()" line="127" name="keyString" />
            <variable attributes="__local__ private" citdl="Ext.isArray()" line="133" name="keyArray" />
            <scope attributes="__local__ private" ilk="function" line="135" lineend="157" name="handler" signature="handler(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="137" name="k" />
            </scope>
          </scope>
          <scope doc="Shorthand for adding a single key listener" ilk="function" line="169" lineend="187" name="on" signature="on(key, fn, scope)">
            <variable citdl="Number/Array/Object" doc="Either the numeric key code, array of key codes or an object with the&#xA;following options:&#xA;{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}" ilk="argument" name="key" />
            <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the function" ilk="argument" name="scope" />
            <variable citdl="KeyMap" name="this" />
            <variable attributes="__local__ private" citdl="key.shift" line="170" name="shift" />
            <variable attributes="__local__ private" citdl="key.alt" line="170" name="alt" />
            <variable attributes="__local__ private" citdl="key.key" line="170" name="keyCode" />
            <variable attributes="__local__ private" citdl="key.ctrl" line="170" name="ctrl" />
          </scope>
          <scope doc="private" ilk="function" line="190" lineend="197" name="handleKeyDown" signature="handleKeyDown(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="KeyMap" name="this" />
            <variable attributes="__local__ private" citdl="this.bindings" doc="just in case" line="192" name="b" />
          </scope>
          <scope doc="Returns true if this KeyMap is enabled" ilk="function" line="203" lineend="205" name="isEnabled" returns="Boolean" signature="isEnabled()">
            <variable citdl="KeyMap" name="this" />
          </scope>
          <scope doc="Enables this KeyMap" ilk="function" line="210" lineend="215" name="enable" signature="enable()">
            <variable citdl="KeyMap" name="this" />
          </scope>
          <variable citdl="Boolean" line="213" name="enabled" />
          <scope doc="Disable this KeyMap" ilk="function" line="220" lineend="225" name="disable" signature="disable()">
            <variable citdl="KeyMap" name="this" />
          </scope>
        </scope>
        <scope ilk="class" line="55" lineend="233" name="Action">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it&#xA;can be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI&#xA;updates across any components that support the Action interface (primarily {@link Ext.Toolbar}, {@link Ext.Button}&#xA;and {@link Ext.menu.Menu} components).&lt;/p&gt;&#xA;&lt;p&gt;Aside from supporting the config object interface, any component that needs to use Actions must also support&#xA;the following method list, as these will be called as needed by the Action class: setText(string), setIconCls(string),&#xA;setDisabled(boolean), setVisible(boolean) and setHandler(function).&lt;/p&gt;&#xA;Example usage:&lt;br&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// Define the shared action.  Each component below will have the same&#xA;// display text and icon, and will display the same message on click.&#xA;var action = new Ext.Action({&#xA;text: &apos;Do something&apos;,&#xA;handler: function(){&#xA;Ext.Msg.alert(&apos;Click&apos;, &apos;You did something.&apos;);&#xA;iconCls: &apos;do-something&apos;&#xA;});&#xA;var panel = new Ext.Panel({&#xA;title: &apos;Actions&apos;,&#xA;width:500,&#xA;height:300,&#xA;tbar: [&#xA;// Add the action directly to a toolbar as a menu button&#xA;action, {&#xA;text: &apos;Action Menu&apos;,&#xA;// Add the action to a menu as a text item&#xA;menu: [action]&#xA;items: [&#xA;// Add the action to the panel body as a standard button&#xA;new Ext.Button(action)&#xA;renderTo: Ext.getBody()&#xA;});&#xA;// Change the text for all components using the action&#xA;action.setText(&apos;Something else&apos;);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="55" lineend="58" name="Action" signature="Action(config)">
            <variable citdl="Object" doc="The configuration options" ilk="argument" name="config" />
            <variable citdl="Action" name="this" />
          </scope>
          <variable citdl="config" line="56" name="initialConfig" />
          <variable citdl="Array" line="57" name="items" />
          <variable citdl="Boolean" doc="The class should supply a background image that will be used as the icon image.&#xA;*/// private" line="83" name="isAction" />
          <scope doc="Sets the text to be displayed by all components using this action." ilk="function" line="89" lineend="92" name="setText" signature="setText(text)">
            <variable citdl="String" doc="The text to display" ilk="argument" name="text" />
            <variable citdl="Action" name="this" />
          </scope>
          <variable citdl="String" line="90" name="text" />
          <scope doc="Gets the text currently displayed by all components using this action." ilk="function" line="97" lineend="99" name="getText" returns="this.initialConfig.text" signature="getText()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the icon CSS class for all components using this action.  The class should supply&#xA;a background image that will be used as the icon image." ilk="function" line="106" lineend="109" name="setIconClass" signature="setIconClass(cls)">
            <variable citdl="String" doc="The CSS class supplying the icon image" ilk="argument" name="cls" />
            <variable citdl="Action" name="this" />
          </scope>
          <variable citdl="cls" line="107" name="iconCls" />
          <scope doc="Gets the icon CSS class currently used by all components using this action." ilk="function" line="114" lineend="116" name="getIconClass" returns="this.initialConfig.iconCls" signature="getIconClass()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the disabled state of all components using this action.  Shortcut method&#xA;for {@link #enable} and {@link #disable}." ilk="function" line="123" lineend="126" name="setDisabled" signature="setDisabled(v)">
            <variable ilk="argument" name="v" />
            <variable citdl="Action" name="this" />
          </scope>
          <variable citdl="v" line="124" name="disabled" />
          <scope doc="Enables all components using this action." ilk="function" line="131" lineend="133" name="enable" signature="enable()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Disables all components using this action." ilk="function" line="138" lineend="140" name="disable" signature="disable()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Returns true if the components using this action are currently disabled, else returns false.  Read-only." ilk="function" line="146" lineend="148" name="isDisabled" returns="this.initialConfig.disabled" signature="isDisabled()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the hidden state of all components using this action.  Shortcut method&#xA;for {@link #hide} and {@link #show}." ilk="function" line="155" lineend="158" name="setHidden" signature="setHidden(v)">
            <variable ilk="argument" name="v" />
            <variable citdl="Action" name="this" />
          </scope>
          <variable citdl="v" line="156" name="hidden" />
          <scope doc="Shows all components using this action." ilk="function" line="163" lineend="165" name="show" signature="show()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Hides all components using this action." ilk="function" line="170" lineend="172" name="hide" signature="hide()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Returns true if the components using this action are currently hidden, else returns false.  Read-only." ilk="function" line="178" lineend="180" name="isHidden" returns="this.initialConfig.hidden" signature="isHidden()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the function that will be called by each component using this action when its primary event is triggered." ilk="function" line="188" lineend="192" name="setHandler" signature="setHandler(fn, scope)">
            <variable citdl="Function" doc="The function that will be invoked by the action&apos;s components.  The function&#xA;will be called with no arguments." ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope in which the function will execute" ilk="argument" name="scope" />
            <variable citdl="Action" name="this" />
          </scope>
          <variable citdl="fn" line="189" name="handler" />
          <variable citdl="scope" line="190" name="scope" />
          <scope doc="Executes the specified function once for each component currently tied to this action.  The function passed&#xA;in should accept a single argument that will be an object that supports the basic Action config/method interface." ilk="function" line="200" lineend="202" name="each" signature="each(fn, scope)">
            <variable citdl="Function" doc="The function to execute for each component" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope in which the function will execute" ilk="argument" name="scope" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="205" lineend="210" name="callEach" signature="callEach(fnName, args)">
            <variable ilk="argument" name="fnName" />
            <variable ilk="argument" name="args" />
            <variable citdl="Action" name="this" />
            <variable attributes="__local__ private" citdl="this.items" line="206" name="cs" />
          </scope>
          <scope doc="private" ilk="function" line="213" lineend="216" name="addComponent" signature="addComponent(comp)">
            <variable ilk="argument" name="comp" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="219" lineend="221" name="removeComponent" signature="removeComponent(comp)">
            <variable ilk="argument" name="comp" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Executes this action manually using the default handler specified in the original config object.  Any arguments&#xA;passed to this function will be passed on to the handler function." ilk="function" line="230" lineend="232" name="execute" signature="execute()">
            <variable citdl="Action" name="this" />
          </scope>
        </scope>
        <variable citdl="Ext.Shadow" line="55" name="shadow" />
        <variable citdl="Ext.apply()" doc="The default global group of stores." line="58" name="StoreMgr" />
        <variable citdl="config.shim" line="59" name="useShim" />
        <variable citdl="Object" doc="&lt;p&gt;A class to provide basic animation and visual effects support.  &lt;b&gt;Note:&lt;/b&gt; This class is automatically applied&#xA;to the {@link Ext.Element} interface when included, so all effects calls should be performed via Element.&#xA;Conversely, since the effects are not actually defined in Element, Ext.Fx &lt;b&gt;must&lt;/b&gt; be included in order for the&#xA;Element effects to work.&lt;/p&gt;&lt;br/&gt;&#xA;&#xA;&lt;p&gt;It is important to note that although the Fx methods and many non-Fx Element methods support &quot;method chaining&quot; in that&#xA;they return the Element object itself as the method return value, it is not always possible to mix the two in a single&#xA;method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.&#xA;Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,&#xA;while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the&#xA;expected results and should be done with care.&lt;/p&gt;&lt;br/&gt;&#xA;&#xA;&lt;p&gt;Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element&#xA;that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:&lt;/p&gt;&#xA;&lt;pre&gt;&#xA;Value  Description&#xA;-----  -----------------------------&#xA;tl     The top left corner&#xA;t      The center of the top edge&#xA;tr     The top right corner&#xA;l      The center of the left edge&#xA;r      The center of the right edge&#xA;bl     The bottom left corner&#xA;b      The center of the bottom edge&#xA;br     The bottom right corner&#xA;&lt;/pre&gt;&#xA;&lt;b&gt;Although some Fx methods accept specific custom config parameters, the ones shown in the Config Options section&#xA;below are common options that can be passed to any Fx method.&lt;/b&gt;" line="60" lineend="1009" name="Fx">
          <scope doc="Slides the element into view.  An anchor point can be optionally passed to set the point of&#xA;origin for the slide effect.  This function automatically handles wrapping the element with&#xA;a fixed-size container if needed.  See the Fx class overview for valid anchor point options.&#xA;Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// default: slide the element in from the top&#xA;el.slideIn();&#xA;// custom: slide the element in from the right with a 2-second duration&#xA;el.slideIn(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.slideIn(&apos;t&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="83" lineend="174" name="slideIn" returns="Ext.Element" signature="slideIn(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to top: &apos;t&apos;)" ilk="argument" name="anchor" />
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="84" name="el" />
          </scope>
          <scope doc="Slides the element out of view.  An anchor point can be optionally passed to set the end point&#xA;for the slide effect.  When the effect is completed, the element will be hidden (visibility =&#xA;&apos;hidden&apos;) but block elements will still take up space in the document.  The element must be removed&#xA;from the DOM using the &apos;remove&apos; config option if desired.  This function automatically handles&#xA;wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.&#xA;Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// default: slide the element out to the top&#xA;el.slideOut();&#xA;// custom: slide the element out to the right with a 2-second duration&#xA;el.slideOut(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.slideOut(&apos;t&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="202" lineend="284" name="slideOut" returns="Ext.Element" signature="slideOut(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to top: &apos;t&apos;)" ilk="argument" name="anchor" />
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="203" name="el" />
          </scope>
          <scope doc="Fades the element out while slowly expanding it in all directions.  When the effect is completed, the&#xA;element will be hidden (visibility = &apos;hidden&apos;) but block elements will still take up space in the document.&#xA;The element must be removed from the DOM using the &apos;remove&apos; config option if desired.&#xA;Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// default&#xA;el.puff();&#xA;// common config options shown with default values&#xA;el.puff({&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="306" lineend="350" name="puff" returns="Ext.Element" signature="puff(o)">
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="307" name="el" />
          </scope>
          <scope doc="Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).&#xA;When the effect is completed, the element will be hidden (visibility = &apos;hidden&apos;) but block elements will still&#xA;take up space in the document. The element must be removed from the DOM using the &apos;remove&apos; config option if desired.&#xA;Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// default&#xA;el.switchOff();&#xA;// all config options shown with default values&#xA;el.switchOff({&#xA;easing: &apos;easeIn&apos;,&#xA;duration: .3,&#xA;remove: false,&#xA;useDisplay: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="372" lineend="410" name="switchOff" returns="Ext.Element" signature="switchOff(o)">
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="373" name="el" />
          </scope>
          <scope doc="Highlights the Element by setting a color (applies to the background-color by default, but can be&#xA;changed using the &quot;attr&quot; config option) and then fading back to the original color. If no original&#xA;color is available, you should provide the &quot;endColor&quot; config option which will be cleared after the animation.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// default: highlight background to yellow&#xA;el.highlight();&#xA;// custom: highlight foreground text to blue for 2 seconds&#xA;el.highlight(&quot;0000ff&quot;, { attr: &apos;color&apos;, duration: 2 });&#xA;// common config options shown with default values&#xA;el.highlight(&quot;ffff9c&quot;, {&#xA;attr: &quot;background-color&quot;, //can be any valid CSS property (attribute) that supports a color value&#xA;endColor: (current color) or &quot;ffffff&quot;,&#xA;easing: &apos;easeIn&apos;,&#xA;duration: 1&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="436" lineend="465" name="highlight" returns="Ext.Element" signature="highlight(color, o)">
            <variable citdl="String" doc="(optional) The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: &apos;ffff9c&apos;)" ilk="argument" name="color" />
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="437" name="el" />
          </scope>
          <scope doc="Shows a ripple of exploding, attenuating borders to draw attention to an Element.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// default: a single light blue ripple&#xA;el.frame();&#xA;// custom: 3 red ripples lasting 3 seconds total&#xA;el.frame(&quot;ff0000&quot;, 3, { duration: 3 });&#xA;// common config options shown with default values&#xA;el.frame(&quot;C3DAF9&quot;, 1, {&#xA;duration: 1 //duration of entire animation (not each individual ripple)&#xA;// Note: Easing is not configurable and will be ignored if included&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="488" lineend="531" name="frame" returns="Ext.Element" signature="frame(color, count, o)">
            <variable citdl="String" doc="(optional) The color of the border.  Should be a 6 char hex color without the leading # (defaults to light blue: &apos;C3DAF9&apos;)." ilk="argument" name="color" />
            <variable citdl="Number" doc="(optional) The number of ripples to display (defaults to 1)" ilk="argument" name="count" />
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="489" name="el" />
          </scope>
          <scope doc="Creates a pause before any subsequent queued effects begin.  If there are&#xA;no effects queued after the pause it will have no effect.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;el.pause(1);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="543" lineend="553" name="pause" returns="Ext.Element" signature="pause(seconds)">
            <variable citdl="Number" doc="The length of time to pause (in seconds)" ilk="argument" name="seconds" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="544" name="el" />
            <variable attributes="__local__ private" citdl="Object" line="545" lineend="545" name="o" />
          </scope>
          <scope doc="Fade an element in (from transparent to opaque).  The ending opacity can be specified&#xA;using the &quot;endOpacity&quot; config option.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// default: fade in from opacity 0 to 100%&#xA;el.fadeIn();&#xA;// custom: fade in from opacity 0 to 75% over 2 seconds&#xA;el.fadeIn({ endOpacity: .75, duration: 2});&#xA;// common config options shown with default values&#xA;el.fadeIn({&#xA;endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="576" lineend="593" name="fadeIn" returns="Ext.Element" signature="fadeIn(o)">
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="577" name="el" />
          </scope>
          <scope doc="Fade an element out (from opaque to transparent).  The ending opacity can be specified&#xA;using the &quot;endOpacity&quot; config option.  Note that IE may require useDisplay:true in order&#xA;to redisplay correctly.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// default: fade out from the element&apos;s current opacity to 0&#xA;el.fadeOut();&#xA;// custom: fade out from the element&apos;s current opacity to 25% over 2 seconds&#xA;el.fadeOut({ endOpacity: .25, duration: 2});&#xA;// common config options shown with default values&#xA;el.fadeOut({&#xA;endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="619" lineend="635" name="fadeOut" returns="Ext.Element" signature="fadeOut(o)">
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="620" name="el" />
          </scope>
          <scope doc="Animates the transition of an element&apos;s dimensions from a starting height/width&#xA;to an ending height/width.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// change height and width to 100x100 pixels&#xA;el.scale(100, 100);&#xA;// common config options shown with default values.  The height and width will default to&#xA;// the element&apos;s existing values if passed as null.&#xA;el.scale(&#xA;[element&apos;s width],&#xA;[element&apos;s height], {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .35&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="660" lineend="666" name="scale" returns="Ext.Element" signature="scale(w, h, o)">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Animates the transition of any combination of an element&apos;s dimensions, xy position and/or opacity.&#xA;Any of these properties not specified in the config object will not be changed.  This effect&#xA;requires that at least one new dimension, position or opacity setting must be passed in on&#xA;the config object in order for the function to have any effect.&#xA;Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// slide the element horizontally to x position 200 while changing the height and opacity&#xA;el.shift({ x: 200, height: 50, opacity: .8 });&#xA;// common config options shown with default values.&#xA;el.shift({&#xA;width: [element&apos;s width],&#xA;height: [element&apos;s height],&#xA;x: [element&apos;s x position],&#xA;y: [element&apos;s y position],&#xA;opacity: [element&apos;s opacity],&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .35&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="692" lineend="733" name="shift" returns="Ext.Element" signature="shift(o)">
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="693" name="el" />
          </scope>
          <scope doc="Slides the element while fading it out of view.  An anchor point can be optionally passed to set the&#xA;ending point of the effect.&#xA;Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;// default: slide the element downward while fading out&#xA;el.ghost();&#xA;// custom: slide the element out to the right with a 2-second duration&#xA;el.ghost(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.ghost(&apos;b&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="758" lineend="822" name="ghost" returns="Ext.Element" signature="ghost(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to bottom: &apos;b&apos;)" ilk="argument" name="anchor" />
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.getFxEl()" line="759" name="el" />
          </scope>
          <scope doc="Ensures that all effects queued after syncFx is called on the element are&#xA;run concurrently.  This is the opposite of {@link #sequenceFx}." ilk="function" line="829" lineend="836" name="syncFx" returns="Ext.Element" signature="syncFx()">
            <variable citdl="Fx" name="this" />
          </scope>
          <variable citdl="Ext.apply()" line="834" name="fxDefaults" />
          <scope doc="Ensures that all effects queued after sequenceFx is called on the element are&#xA;run in sequence.  This is the opposite of {@link #syncFx}." ilk="function" line="843" lineend="850" name="sequenceFx" returns="Ext.Element" signature="sequenceFx()">
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="@private */" ilk="function" line="853" lineend="858" name="nextFx" signature="nextFx()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.fxQueue[0]" line="854" name="ef" />
          </scope>
          <scope doc="Returns true if the element has any effects actively running or queued, else returns false." ilk="function" line="864" lineend="866" name="hasActiveFx" returns="Boolean" signature="hasActiveFx()">
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Stops any running effects and clears the element&apos;s internal effects queue if it contains&#xA;any additional effects that haven&apos;t started yet." ilk="function" line="873" lineend="882" name="stopFx" returns="Ext.Element" signature="stopFx()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.fxQueue[0]" line="875" name="cur" />
          </scope>
          <variable citdl="Array" line="877" name="fxQueue" />
          <scope doc="@private */" ilk="function" line="885" lineend="894" name="beforeFx" returns="Boolean" signature="beforeFx(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Returns true if the element is currently blocking so that no other effect can be queued&#xA;until this effect is finished, else returns false if blocking is not set.  This is commonly&#xA;used to ensure that an effect initiated by a user action runs to completion prior to the&#xA;same effect being restarted (e.g., firing only one effect even if the user clicks several times)." ilk="function" line="903" lineend="906" name="hasFxBlock" returns="Boolean" signature="hasFxBlock()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.fxQueue" line="904" name="q" />
          </scope>
          <scope doc="@private */" ilk="function" line="909" lineend="927" name="queueFx" returns="this" signature="queueFx(o, fn)">
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="fn" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.beforeFx()" line="916" name="run" />
          </scope>
          <scope doc="@private */" ilk="function" line="930" lineend="952" name="fxWrap" returns="wrap" signature="fxWrap(pos, o, vis)">
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="vis" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="Ext.get()" line="931" name="wrap" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="933" name="wrapXY" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="937" name="div" />
          </scope>
          <scope doc="@private */" ilk="function" line="955" lineend="962" name="fxUnwrap" signature="fxUnwrap(wrap, pos, o)">
            <variable ilk="argument" name="wrap" />
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="@private */" ilk="function" line="965" lineend="968" name="getFxRestore" signature="getFxRestore()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.style" line="966" name="st" />
          </scope>
          <scope doc="@private */" ilk="function" line="971" lineend="986" name="afterFx" signature="afterFx(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="@private */" ilk="function" line="989" lineend="991" name="getFxEl" returns="Ext.get()" signature="getFxEl()">
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="@private */" ilk="function" line="994" lineend="1008" name="fxanim" returns="anim" signature="fxanim(args, opt, animType, defaultDur, defaultEase, cb)">
            <variable ilk="argument" name="args" />
            <variable citdl="opt" ilk="argument" name="opt" />
            <variable citdl="animType" ilk="argument" name="animType" />
            <variable ilk="argument" name="defaultDur" />
            <variable ilk="argument" name="defaultEase" />
            <variable ilk="argument" name="cb" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="Ext.lib.Anim[animType]()" line="1005" name="anim" />
          </scope>
          <variable citdl="Ext.Fx.scale" doc="backwords compat" line="1012" name="resize" />
        </variable>
        <variable citdl="config.useDisplay" line="60" name="useDisplay" />
        <variable citdl="Boolean" doc="True if the browser is in strict (standards-compliant) mode, as opposed to quirks mode" line="72" name="isStrict" />
        <variable citdl="Object" line="74" lineend="803" name="DomQuery">
          <scope ilk="function" line="377" lineend="379" name="getStyle" returns="Ext.fly().getStyle()" signature="getStyle(el, name)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="name" />
            <variable citdl="DomQuery" name="this" />
          </scope>
          <scope doc="Compiles a selector/xpath query into a reusable function. The returned function&#xA;takes one parameter &quot;root&quot; (optional), which is the context node from where the query should start." ilk="function" line="387" lineend="458" name="compile" returns="Function" signature="compile(path, type)">
            <variable citdl="path.substr()" ilk="argument" name="path" />
            <variable citdl="String" doc="(optional) Either &quot;select&quot; (the default) or &quot;simple&quot; for a simple selector match" ilk="argument" name="type" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="390" name="fn" />
            <variable attributes="__local__ private" citdl="path" line="391" name="q" />
            <variable attributes="__local__ private" citdl="q" line="391" name="lq" />
            <variable attributes="__local__ private" line="391" name="mode" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery.matchers" line="392" name="tk" />
            <variable attributes="__local__ private" citdl="tk.length" line="393" name="tklen" />
            <variable attributes="__local__ private" line="394" name="mm" />
            <variable attributes="__local__ private" citdl="q.match()" doc="accept leading mode switch" line="397" name="lmode" />
            <variable attributes="__local__ private" citdl="q.match()" line="409" name="tm" />
            <variable attributes="__local__ private" citdl="Boolean" line="432" name="matched" />
            <variable attributes="__local__ private" citdl="tk[j]" line="434" name="t" />
            <variable attributes="__local__ private" citdl="q.match()" line="435" name="m" />
          </scope>
          <scope doc="Selects a group of elements." ilk="function" line="466" lineend="492" name="select" returns="Array" signature="select(path, root, type)">
            <variable ilk="argument" name="path" />
            <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
            <variable ilk="argument" name="type" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="path.split()" line="473" name="paths" />
            <variable attributes="__local__ private" citdl="Array" line="474" name="results" />
            <variable attributes="__local__ private" citdl="paths[i].replace()" line="476" name="p" />
            <variable attributes="__local__ private" citdl="cache[p]()" line="483" name="result" />
          </scope>
          <scope doc="Selects a single element." ilk="function" line="500" lineend="502" name="selectNode" returns="Element" signature="selectNode(path, root)">
            <variable ilk="argument" name="path" />
            <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
            <variable citdl="DomQuery" name="this" />
          </scope>
          <scope doc="Selects the value of a node, optionally replacing null with the defaultValue." ilk="function" line="511" lineend="520" name="selectValue" returns="String" signature="selectValue(path, root, defaultValue)">
            <variable citdl="path.replace()" ilk="argument" name="path" />
            <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
            <variable citdl="String" ilk="argument" name="defaultValue" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="valueCache[path]()" line="516" name="n" />
            <variable attributes="__local__ private" line="518" name="v" />
          </scope>
          <scope doc="Selects the value of a node, parsing integers and floats. Returns the defaultValue, or 0 if none is specified." ilk="function" line="529" lineend="532" name="selectNumber" returns="Number" signature="selectNumber(path, root, defaultValue)">
            <variable ilk="argument" name="path" />
            <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
            <variable citdl="Number" ilk="argument" name="defaultValue" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery.selectValue()" line="530" name="v" />
          </scope>
          <scope doc="Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)" ilk="function" line="540" lineend="547" name="is" returns="Boolean" signature="is(el, ss)">
            <variable citdl="String/HTMLElement/Array" doc="An element id, element or array of elements" ilk="argument" name="el" />
            <variable ilk="argument" name="ss" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="Ext.isArray()" line="544" name="isArray" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery.filter()" line="545" name="result" />
          </scope>
          <scope doc="Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)" ilk="function" line="557" lineend="564" name="filter" returns="Array" signature="filter(els, ss, nonMatches)">
            <variable ilk="argument" name="els" />
            <variable citdl="ss.replace()" ilk="argument" name="ss" />
            <variable citdl="Boolean" doc="If true, it returns the elements that DON&apos;T match&#xA;the selector instead of the ones that match" ilk="argument" name="nonMatches" />
            <variable citdl="DomQuery" name="this" />
            <variable attributes="__local__ private" citdl="simpleCache[ss]()" line="562" name="result" />
          </scope>
          <variable citdl="Array" doc="Collection of matching regular expressions and code snippets." line="569" name="matchers" />
          <variable line="570" name="re" />
          <variable citdl="String" line="571" name="select" />
          <variable citdl="Object" doc="Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *=, %=, |= and ~=.&#xA;New operators can be added as long as the match the format &lt;i&gt;c&lt;/i&gt;= where &lt;i&gt;c&lt;/i&gt; is any character other than space, &amp;gt; &amp;lt;." line="591" lineend="616" name="operators">
            <scope ilk="function" line="592" lineend="594" name="=" returns="a" signature="=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="595" lineend="597" name="!=" returns="a" signature="!=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="598" lineend="600" name="^=" returns="a" signature="^=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="601" lineend="603" name="$=" returns="a" signature="$=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="604" lineend="606" name="*=" returns="a" signature="*=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="607" lineend="609" name="%=" signature="%=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="610" lineend="612" name="|=" returns="a" signature="|=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
            <scope ilk="function" line="613" lineend="615" name="~=" returns="a" signature="~=(a, v)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="v" />
              <variable citdl="operators" name="this" />
            </scope>
          </variable>
          <variable citdl="Object" doc="Collection of &quot;pseudo class&quot; processors. Each processor is passed the current nodeset (array)&#xA;and the argument (if any) supplied in the selector." line="622" lineend="802" name="pseudos">
            <scope ilk="function" line="623" lineend="632" name="first-child" returns="r" signature="first-child(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="624" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="624" name="ri" />
              <variable attributes="__local__ private" line="624" name="n" />
            </scope>
            <scope ilk="function" line="634" lineend="643" name="last-child" returns="r" signature="last-child(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="635" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="635" name="ri" />
              <variable attributes="__local__ private" line="635" name="n" />
            </scope>
            <scope ilk="function" line="645" lineend="670" name="nth-child" returns="r" signature="nth-child(c, a)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="a" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="646" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="646" name="ri" />
              <variable attributes="__local__ private" citdl="nthRe.exec()" line="647" name="m" />
              <variable attributes="__local__ private" line="648" name="f" />
              <variable attributes="__local__ private" citdl="m[2]" line="648" name="l" />
              <variable attributes="__local__ private" citdl="n.parentNode" line="650" name="pn" />
              <variable attributes="__local__ private" citdl="Number" line="652" name="j" />
            </scope>
            <scope ilk="function" line="672" lineend="680" name="only-child" returns="r" signature="only-child(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="673" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="673" name="ri" />
            </scope>
            <scope ilk="function" line="682" lineend="698" name="empty" returns="r" signature="empty(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="683" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="683" name="ri" />
              <variable attributes="__local__ private" line="685" name="cn" />
              <variable attributes="__local__ private" citdl="Number" line="685" name="j" />
              <variable attributes="__local__ private" citdl="Boolean" line="685" name="empty" />
              <variable attributes="__local__ private" citdl="ci.childNodes" line="685" name="cns" />
            </scope>
            <scope ilk="function" line="700" lineend="708" name="contains" returns="r" signature="contains(c, v)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="v" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="701" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="701" name="ri" />
            </scope>
            <scope ilk="function" line="710" lineend="718" name="nodeValue" returns="r" signature="nodeValue(c, v)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="v" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="711" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="711" name="ri" />
            </scope>
            <scope ilk="function" line="720" lineend="728" name="checked" returns="r" signature="checked(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="721" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="721" name="ri" />
            </scope>
            <scope ilk="function" line="730" lineend="732" name="not" returns="Ext.DomQuery.filter()" signature="not(c, ss)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="ss" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="734" lineend="746" name="any" returns="r" signature="any(c, selectors)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="selectors" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="selectors.split()" line="735" name="ss" />
              <variable attributes="__local__ private" line="736" name="s" />
              <variable attributes="__local__ private" citdl="Array" line="736" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="736" name="ri" />
            </scope>
            <scope ilk="function" line="748" lineend="750" name="odd" returns="this[&quot;nth-child&quot;]()" signature="odd(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="752" lineend="754" name="even" returns="this[&quot;nth-child&quot;]()" signature="even(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="756" lineend="758" name="nth" returns="c[a-1]" signature="nth(c, a)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="a" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="760" lineend="762" name="first" returns="c[0]" signature="first(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="764" lineend="766" name="last" returns="c[c.length-1]" signature="last(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="pseudos" name="this" />
            </scope>
            <scope ilk="function" line="768" lineend="777" name="has" returns="r" signature="has(c, ss)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="ss" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.select" line="769" name="s" />
              <variable attributes="__local__ private" citdl="Array" line="770" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="770" name="ri" />
            </scope>
            <scope ilk="function" line="779" lineend="789" name="next" returns="r" signature="next(c, ss)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="ss" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.is" line="780" name="is" />
              <variable attributes="__local__ private" citdl="Array" line="781" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="781" name="ri" />
              <variable attributes="__local__ private" citdl="next()" line="783" name="n" />
            </scope>
            <scope ilk="function" line="791" lineend="801" name="prev" returns="r" signature="prev(c, ss)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="ss" />
              <variable citdl="pseudos" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.is" line="792" name="is" />
              <variable attributes="__local__ private" citdl="Array" line="793" name="r" />
              <variable attributes="__local__ private" citdl="Number" line="793" name="ri" />
              <variable attributes="__local__ private" citdl="prev()" line="795" name="n" />
            </scope>
          </variable>
        </variable>
        <scope ilk="class" line="77" lineend="187" name="Resizable">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;Applies drag handles to an element to make it resizable. The drag handles are inserted into the element&#xA;and positioned absolute. Some elements, such as a textarea or image, don&apos;t support this. To overcome that, you can wrap&#xA;the textarea in a div and set &quot;resizeChild&quot; to true (or to the id of the element), &lt;b&gt;or&lt;/b&gt; set wrap:true in your config and&#xA;the element will be wrapped for you automatically.&lt;/p&gt;&#xA;&lt;p&gt;Here is the list of valid resize handles:&lt;/p&gt;&#xA;&lt;pre&gt;&#xA;Value   Description&#xA;------  -------------------&#xA;&apos;n&apos;     north&#xA;&apos;s&apos;     south&#xA;&apos;e&apos;     east&#xA;&apos;w&apos;     west&#xA;&apos;nw&apos;    northwest&#xA;&apos;sw&apos;    southwest&#xA;&apos;se&apos;    southeast&#xA;&apos;ne&apos;    northeast&#xA;&apos;all&apos;   all&#xA;&lt;/pre&gt;&#xA;&lt;p&gt;Here&apos;s an example showing the creation of a typical Resizable:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var resizer = new Ext.Resizable(&quot;element-id&quot;, {&#xA;handles: &apos;all&apos;,&#xA;minWidth: 200,&#xA;minHeight: 100,&#xA;maxWidth: 500,&#xA;maxHeight: 400,&#xA;pinned: true&#xA;});&#xA;resizer.on(&quot;resize&quot;, myHandler);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To hide a particular handle, set its display to none in CSS, or through script:&lt;br&gt;&#xA;resizer.east.setDisplayed(false);&lt;/p&gt;" ilk="function" line="77" lineend="187" name="Resizable" signature="Resizable(el, config)">
            <variable citdl="Mixed" doc="The id or element to resize" ilk="argument" name="el" />
            <variable citdl="Object" doc="configuration options" ilk="argument" name="config" />
            <variable citdl="Resizable" name="this" />
            <variable attributes="__local__ private" citdl="config.resizeChild.getSize()" line="88" name="csize" />
            <variable attributes="__local__ private" citdl="this.el.getStyle()" doc="if the element isn&apos;t positioned, make it relative" line="114" name="position" />
            <variable attributes="__local__ private" citdl="this.handles.split()" line="127" name="hs" />
            <variable attributes="__local__ private" citdl="Ext.Resizable.positions" line="128" name="ps" />
            <variable attributes="__local__ private" citdl="ps[hs[i]]" line="131" name="pos" />
            <variable attributes="__local__ private" citdl="this.resizeChild" line="153" name="rc" />
            <variable attributes="__local__ private" citdl="this.west" line="154" name="hw" />
            <variable attributes="__local__ private" citdl="this.north" line="154" name="hn" />
            <variable attributes="__local__ private" citdl="this.east" line="154" name="he" />
          </scope>
          <variable citdl="Ext.get()" line="78" name="el" />
          <variable citdl="this.el.dom.id" line="83" name="id" />
          <variable citdl="Ext.Element." doc="The proxy Element that is resized in place of the real Element during the resize operation.&#xA;This may be queried using {@link Ext.Element#getBox} to provide the new area to resize to.&#xA;Read only." line="103" name="proxy" />
          <variable citdl="Boolean" line="110" name="disableTrackOver" />
          <variable citdl="String" doc="no handles passed, must be legacy style" line="119" name="handles" />
          <variable citdl="this.southeast" doc="legacy" line="136" name="corner" />
          <variable citdl="Boolean" line="139" name="updateBox" />
          <variable line="142" name="activeHandle" />
          <variable citdl="Ext.get()" line="146" name="resizeChild" />
          <variable citdl="Array" line="161" name="adjustments" />
          <variable citdl="this.dynamic" line="167" name="dd" />
          <variable citdl="Number" line="184" name="zoom" />
          <variable citdl="Object" doc="private hash to map config positions to true positions" line="641" lineend="643" name="positions">
            <variable citdl="String" line="642" name="e" />
            <variable citdl="String" line="642" name="sw" />
            <variable citdl="String" line="642" name="ne" />
            <variable citdl="String" line="642" name="n" />
            <variable citdl="String" line="642" name="s" />
            <variable citdl="String" line="642" name="w" />
            <variable citdl="String" line="642" name="se" />
            <variable citdl="String" line="642" name="nw" />
          </variable>
          <scope doc="private" ilk="class" line="646" lineend="686" name="Handle">
            <scope attributes="__ctor__" doc="private" ilk="function" line="646" lineend="667" name="Handle" signature="Handle(rz, pos, disableTrackOver, transparent)">
              <variable ilk="argument" name="rz" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="disableTrackOver" />
              <variable ilk="argument" name="transparent" />
              <variable citdl="Handle" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomHelper.createTemplate()" doc="only initialize the template if resizable is used" line="651" name="tpl" />
            </scope>
            <variable citdl="pos" line="655" name="position" />
            <variable citdl="rz" line="656" name="rz" />
            <variable citdl="this.tpl.append()" line="657" name="el" />
            <scope ilk="function" line="671" lineend="673" name="afterResize" signature="afterResize(rz)">
              <variable ilk="argument" name="rz" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="675" lineend="677" name="onMouseDown" signature="onMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="679" lineend="681" name="onMouseOver" signature="onMouseOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="683" lineend="685" name="onMouseOut" signature="onMouseOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
          </scope>
        </scope>
        <variable citdl="Object" line="77" lineend="160" name="QuickTips">
          <scope doc="Initialize the global QuickTips instance and prepare any quick tips." ilk="function" line="84" lineend="97" name="init" signature="init(autoRender)">
            <variable citdl="Boolean" doc="True to render the QuickTips container immediately to preload images. (Defaults to true)" ilk="argument" name="autoRender" />
            <variable citdl="QuickTips" name="this" />
          </scope>
          <scope doc="Enable quick tips globally." ilk="function" line="102" lineend="109" name="enable" signature="enable()">
            <variable citdl="QuickTips" name="this" />
          </scope>
          <scope doc="Disable quick tips globally." ilk="function" line="114" lineend="119" name="disable" signature="disable()">
            <variable citdl="QuickTips" name="this" />
          </scope>
          <scope doc="Returns true if quick tips are enabled, else false." ilk="function" line="125" lineend="127" name="isEnabled" returns="Boolean" signature="isEnabled()">
            <variable citdl="QuickTips" name="this" />
          </scope>
          <scope doc="Gets the global QuickTips instance." ilk="function" line="132" lineend="134" name="getQuickTip" returns="tip" signature="getQuickTip()">
            <variable citdl="QuickTips" name="this" />
          </scope>
          <scope doc="Configures a new quick tip instance and assigns it to a target element.  See&#xA;{@link Ext.QuickTip#register} for details." ilk="function" line="141" lineend="143" name="register" signature="register()">
            <variable citdl="QuickTips" name="this" />
          </scope>
          <scope doc="Removes any registered quick tip from the target element and destroys it." ilk="function" line="149" lineend="151" name="unregister" signature="unregister()">
            <variable citdl="QuickTips" name="this" />
          </scope>
          <scope doc="Alias of {@link #register}." ilk="function" line="157" lineend="159" name="tips" signature="tips()">
            <variable citdl="QuickTips" name="this" />
          </scope>
        </variable>
        <variable citdl="Boolean" doc="True if the page is running over SSL" line="77" name="isSecure" />
        <scope ilk="class" line="79" lineend="2803" name="Element">
          <variable citdl="Ext.getDom()" line="32" name="dom" />
          <variable citdl="this.dom.id" line="44" name="id" />
          <scope attributes="__ctor__" ilk="function" line="79" lineend="101" name="Element" returns="Ext.Element.cache[id]" signature="Element(element, forceNew)">
            <variable ilk="argument" name="element" />
            <variable ilk="argument" name="forceNew" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" line="80" name="dom" />
            <variable attributes="__local__ private" citdl="dom.id" line="85" name="id" />
          </scope>
          <variable citdl="String" doc="The element&apos;s default display mode  (defaults to &quot;&quot;)" line="110" name="originalDisplay" />
          <variable citdl="Number" line="112" name="visibilityMode" />
          <variable citdl="String" doc="The default unit to append to CSS values where a unit isn&apos;t provided (defaults to px)." line="117" name="defaultUnit" />
          <scope doc="Sets the element&apos;s visibility mode. When setVisible() is called it&#xA;will use this to determine whether to set the visibility or the display property." ilk="function" line="124" lineend="127" name="setVisibilityMode" returns="Ext.Element" signature="setVisibilityMode(visMode)">
            <variable doc="Element.VISIBILITY or Element.DISPLAY" ilk="argument" name="visMode" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Convenience method for setVisibilityMode(Element.DISPLAY)" ilk="function" line="133" lineend="137" name="enableDisplayMode" returns="Ext.Element" signature="enableDisplayMode(display)">
            <variable citdl="String" doc="(optional) What to set display to when visible" ilk="argument" name="display" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)&#xA;search as a number or element (defaults to 10 || document.body)" ilk="function" line="147" lineend="162" name="findParent" returns="HTMLElement" signature="findParent(simpleSelector, maxDepth, returnEl)">
            <variable ilk="argument" name="simpleSelector" />
            <variable citdl="Number/Mixed" doc="(optional) The max depth to" ilk="argument" name="maxDepth" />
            <variable citdl="Boolean" doc="(optional) True to return a Ext.Element object instead of DOM node" ilk="argument" name="returnEl" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="148" name="p" />
            <variable attributes="__local__ private" citdl="Number" line="148" name="depth" />
            <variable attributes="__local__ private" citdl="document.body" line="148" name="b" />
            <variable attributes="__local__ private" citdl="Ext.getDom()" line="148" name="stopEl" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery" line="148" name="dq" />
          </scope>
          <scope doc="Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)&#xA;search as a number or element (defaults to 10 || document.body)" ilk="function" line="173" lineend="176" name="findParentNode" returns="HTMLElement" signature="findParentNode(simpleSelector, maxDepth, returnEl)">
            <variable ilk="argument" name="simpleSelector" />
            <variable citdl="Number/Mixed" doc="(optional) The max depth to" ilk="argument" name="maxDepth" />
            <variable citdl="Boolean" doc="(optional) True to return a Ext.Element object instead of DOM node" ilk="argument" name="returnEl" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.fly()" line="174" name="p" />
          </scope>
          <scope doc="Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).&#xA;This is a shortcut for findParentNode() that always returns an Ext.Element.&#xA;search as a number or element (defaults to 10 || document.body)" ilk="function" line="186" lineend="188" name="up" returns="Ext.Element" signature="up(simpleSelector, maxDepth)">
            <variable ilk="argument" name="simpleSelector" />
            <variable citdl="Number/Mixed" doc="(optional) The max depth to" ilk="argument" name="maxDepth" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)" ilk="function" line="197" lineend="199" name="is" returns="Boolean" signature="is(simpleSelector)">
            <variable ilk="argument" name="simpleSelector" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Perform animation on this element." ilk="function" line="210" lineend="213" name="animate" returns="Ext.Element" signature="animate(args, duration, onComplete, easing, animType)">
            <variable citdl="Object" doc="The animation control args" ilk="argument" name="args" />
            <variable citdl="Number" doc="(optional) How long the animation lasts in seconds (defaults to .35)" ilk="argument" name="duration" />
            <variable citdl="Function" doc="(optional) Function to call when animation completes" ilk="argument" name="onComplete" />
            <variable citdl="String" doc="(optional) Easing method to use (defaults to &apos;easeOut&apos;)" ilk="argument" name="easing" />
            <variable citdl="String" doc="(optional) &apos;run&apos; is the default. Can also be &apos;color&apos;, &apos;motion&apos;, or &apos;scroll&apos;" ilk="argument" name="animType" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="* @private Internal animation call */" ilk="function" line="218" lineend="233" name="anim" returns="anim" signature="anim(args, opt, animType, defaultDur, defaultEase, cb)">
            <variable ilk="argument" name="args" />
            <variable citdl="opt" ilk="argument" name="opt" />
            <variable citdl="animType" ilk="argument" name="animType" />
            <variable ilk="argument" name="defaultDur" />
            <variable ilk="argument" name="defaultEase" />
            <variable ilk="argument" name="cb" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.lib.Anim[animType]()" line="230" name="anim" />
          </scope>
          <scope doc="private legacy anim prep" ilk="function" line="236" lineend="238" name="preanim" signature="preanim(a, i)">
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="i" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Removes worthless text nodes" ilk="function" line="247" lineend="264" name="clean" returns="this" signature="clean(forceReclean)">
            <variable citdl="Boolean" doc="(optional) By default the element&#xA;keeps track if it has been cleaned already so&#xA;you can call this over and over. However, if you update the element and&#xA;need to force a reclean, you can pass true." ilk="argument" name="forceReclean" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" line="251" name="ns" />
            <variable attributes="__local__ private" citdl="Number" line="252" name="ni" />
            <variable attributes="__local__ private" citdl="this.dom" line="252" name="d" />
            <variable attributes="__local__ private" citdl="d.firstChild" line="252" name="n" />
            <variable attributes="__local__ private" citdl="n.nextSibling" line="254" name="nx" />
          </scope>
          <variable citdl="Boolean" line="262" name="isCleaned" />
          <scope doc="Scrolls this element into view within the passed container." ilk="function" line="273" lineend="305" name="scrollIntoView" returns="Ext.Element" signature="scrollIntoView(container, hscroll)">
            <variable citdl="Mixed" doc="(optional) The container element to scroll (defaults to document.body).  Should be a&#xA;string (id), dom node, or Ext.Element." ilk="argument" name="container" />
            <variable citdl="Boolean" doc="(optional) False to disable horizontal scroll (defaults to true)" ilk="argument" name="hscroll" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.getDom()" line="274" name="c" />
            <variable attributes="__local__ private" citdl="this.dom" line="275" name="el" />
            <variable attributes="__local__ private" citdl="t" line="281" name="b" />
            <variable attributes="__local__ private" citdl="o[0]" line="281" name="l" />
            <variable attributes="__local__ private" citdl="this.getOffsetsTo()" line="281" name="o" />
            <variable attributes="__local__ private" citdl="l" line="281" name="r" />
            <variable attributes="__local__ private" citdl="o[1]" line="281" name="t" />
            <variable attributes="__local__ private" citdl="c.clientHeight" line="283" name="ch" />
            <variable attributes="__local__ private" citdl="parseInt()" line="284" name="ct" />
            <variable attributes="__local__ private" citdl="parseInt()" line="285" name="cl" />
            <variable attributes="__local__ private" citdl="ct" line="286" name="cb" />
            <variable attributes="__local__ private" citdl="cl" line="287" name="cr" />
          </scope>
          <scope doc="private" ilk="function" line="308" lineend="310" name="scrollChildIntoView" signature="scrollChildIntoView(child, hscroll)">
            <variable ilk="argument" name="child" />
            <variable ilk="argument" name="hscroll" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Measures the element&apos;s content height and updates height to match. Note: this function uses setTimeout so&#xA;the new height may not be available immediately." ilk="function" line="321" lineend="342" name="autoHeight" returns="Ext.Element" signature="autoHeight(animate, duration, onComplete, easing)">
            <variable citdl="Boolean" doc="(optional) Animate the transition (defaults to false)" ilk="argument" name="animate" />
            <variable citdl="Number" doc="(optional) Length of the animation in seconds (defaults to .35)" ilk="argument" name="duration" />
            <variable citdl="Function" doc="(optional) Function to call when animation completes" ilk="argument" name="onComplete" />
            <variable citdl="String" doc="(optional) Easing method to use (defaults to easeOut)" ilk="argument" name="easing" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getHeight()" line="322" name="oldHeight" />
          </scope>
          <scope doc="Returns true if this element is an ancestor of the passed element" ilk="function" line="349" lineend="352" name="contains" returns="Boolean" signature="contains(el)">
            <variable citdl="HTMLElement/String" doc="The element to check" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Checks whether the element is currently visible using both visibility and display properties." ilk="function" line="359" lineend="372" name="isVisible" returns="Boolean" signature="isVisible(deep)">
            <variable citdl="Boolean" doc="(optional) True to walk the dom and see if parent elements are hidden (defaults to false)" ilk="argument" name="deep" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" line="360" name="vis" />
            <variable attributes="__local__ private" citdl="this.dom.parentNode" line="364" name="p" />
          </scope>
          <scope doc="Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id)." ilk="function" line="380" lineend="382" name="select" returns="CompositeElement/CompositeElementLite" signature="select(selector, unique)">
            <variable citdl="String" doc="The CSS selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to create a unique Ext.Element for each child (defaults to false, which creates a single shared flyweight object)" ilk="argument" name="unique" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Selects child nodes based on the passed CSS selector (the selector should not contain an id)." ilk="function" line="389" lineend="391" name="query" returns="Array" signature="query(selector)">
            <variable citdl="String" doc="The CSS selector" ilk="argument" name="selector" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id)." ilk="function" line="399" lineend="402" name="child" returns="HTMLElement/Ext.Element" signature="child(selector, returnDom)">
            <variable citdl="String" doc="The CSS selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to return the DOM node instead of Ext.Element (defaults to false)" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery.selectNode()" line="400" name="n" />
          </scope>
          <scope doc="Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id)." ilk="function" line="410" lineend="413" name="down" returns="HTMLElement/Ext.Element" signature="down(selector, returnDom)">
            <variable citdl="String" doc="The CSS selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to return the DOM node instead of Ext.Element (defaults to false)" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomQuery.selectNode()" line="411" name="n" />
          </scope>
          <scope doc="Initializes a {@link Ext.dd.DD} drag drop object for this element." ilk="function" line="422" lineend="425" name="initDD" returns="Ext.dd.DD" signature="initDD(group, config, overrides)">
            <variable citdl="String" doc="The group the DD object is member of" ilk="argument" name="group" />
            <variable citdl="Object" doc="The DD config object" ilk="argument" name="config" />
            <variable citdl="Object" doc="An object containing methods to override/implement on the DD object" ilk="argument" name="overrides" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.dd.DD" line="423" name="dd" />
          </scope>
          <scope doc="Initializes a {@link Ext.dd.DDProxy} object for this element." ilk="function" line="434" lineend="437" name="initDDProxy" returns="Ext.dd.DDProxy" signature="initDDProxy(group, config, overrides)">
            <variable citdl="String" doc="The group the DDProxy object is member of" ilk="argument" name="group" />
            <variable citdl="Object" doc="The DDProxy config object" ilk="argument" name="config" />
            <variable citdl="Object" doc="An object containing methods to override/implement on the DDProxy object" ilk="argument" name="overrides" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.dd.DDProxy" line="435" name="dd" />
          </scope>
          <scope doc="Initializes a {@link Ext.dd.DDTarget} object for this element." ilk="function" line="446" lineend="449" name="initDDTarget" returns="Ext.dd.DDTarget" signature="initDDTarget(group, config, overrides)">
            <variable citdl="String" doc="The group the DDTarget object is member of" ilk="argument" name="group" />
            <variable citdl="Object" doc="The DDTarget config object" ilk="argument" name="config" />
            <variable citdl="Object" doc="An object containing methods to override/implement on the DDTarget object" ilk="argument" name="overrides" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.dd.DDTarget" line="447" name="dd" />
          </scope>
          <scope doc="Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use&#xA;the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property." ilk="function" line="458" lineend="488" name="setVisible" returns="Ext.Element" signature="setVisible(visible, animate)">
            <variable citdl="Boolean" doc="Whether the element is visible" ilk="argument" name="visible" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" doc="closure for composites" line="468" name="dom" />
            <variable attributes="__local__ private" citdl="this.visibilityMode" line="469" name="visMode" />
          </scope>
          <variable citdl="visible" line="464" name="visibility" />
          <scope doc="Returns true if display is not &quot;none&quot;" ilk="function" line="494" lineend="496" name="isDisplayed" returns="Boolean" signature="isDisplayed()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Toggles the element&apos;s visibility or display, depending on visibility mode." ilk="function" line="503" lineend="506" name="toggle" returns="Ext.Element" signature="toggle(animate)">
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true." ilk="function" line="513" lineend="519" name="setDisplayed" returns="Ext.Element" signature="setDisplayed(value)">
            <variable citdl="Mixed" doc="Boolean value to display the element using its default display, or a string to set the display directly." ilk="argument" name="value" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Tries to focus the element. Any exceptions are caught and ignored." ilk="function" line="525" lineend="530" name="focus" returns="Ext.Element" signature="focus()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Tries to blur the element. Any exceptions are caught and ignored." ilk="function" line="536" lineend="541" name="blur" returns="Ext.Element" signature="blur()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out." ilk="function" line="548" lineend="559" name="addClass" returns="Ext.Element" signature="addClass(className)">
            <variable citdl="String/Array" doc="The CSS class to add, or an array of classes" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="this.dom.className" line="555" name="className" />
          <scope doc="Adds one or more CSS classes to this element and removes the same class(es) from all siblings." ilk="function" line="566" lineend="576" name="radioClass" returns="Ext.Element" signature="radioClass(className)">
            <variable citdl="String/Array" doc="The CSS class to add, or an array of classes" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.parentNode.childNodes" line="567" name="siblings" />
            <variable attributes="__local__ private" citdl="siblings[i]" line="569" name="s" />
          </scope>
          <scope doc="Removes one or more CSS classes from the element." ilk="function" line="583" lineend="603" name="removeClass" returns="Ext.Element" signature="removeClass(className)">
            <variable citdl="String/Array" doc="The CSS class to remove, or an array of classes" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.classReCache[className]" line="593" name="re" />
          </scope>
          <variable citdl="Object" doc="private" line="606" lineend="606" name="classReCache" />
          <scope doc="Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it)." ilk="function" line="613" lineend="620" name="toggleClass" returns="Ext.Element" signature="toggleClass(className)">
            <variable citdl="String" doc="The CSS class to toggle" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Checks if the specified CSS class exists on this element&apos;s DOM node." ilk="function" line="627" lineend="629" name="hasClass" returns="Boolean" signature="hasClass(className)">
            <variable citdl="String" doc="The CSS class to check for" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added." ilk="function" line="637" lineend="641" name="replaceClass" returns="Ext.Element" signature="replaceClass(oldClassName, newClassName)">
            <variable citdl="String" doc="The CSS class to replace" ilk="argument" name="oldClassName" />
            <variable citdl="String" doc="The replacement CSS class" ilk="argument" name="newClassName" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns an object with properties matching the styles requested.&#xA;For example, el.getStyles(&apos;color&apos;, &apos;font-size&apos;, &apos;width&apos;) might return&#xA;{&apos;color&apos;: &apos;#FFFFFF&apos;, &apos;font-size&apos;: &apos;13px&apos;, &apos;width&apos;: &apos;100px&apos;}." ilk="function" line="652" lineend="658" name="getStyles" returns="Object" signature="getStyles()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="653" name="a" />
            <variable attributes="__local__ private" citdl="Object" line="653" lineend="653" name="r" />
            <variable attributes="__local__ private" citdl="a.length" line="653" name="len" />
          </scope>
          <variable citdl="String" doc="Normalizes currentStyle and computedStyle." line="665" name="getStyle" />
          <scope doc="Wrapper for setting style properties, also takes single object parameter of multiple styles." ilk="function" line="718" lineend="737" name="setStyle" returns="Ext.Element" signature="setStyle(prop, value)">
            <variable ilk="argument" name="prop" />
            <variable citdl="String" doc="(optional) The value to apply to the given property, or null if an object was passed." ilk="argument" name="value" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="propCache[prop]" line="720" name="camel" />
          </scope>
          <scope doc="More flexible version of {@link #setStyle} for setting style properties." ilk="function" line="745" lineend="748" name="applyStyles" returns="Ext.Element" signature="applyStyles(style)">
            <variable ilk="argument" name="style" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="754" lineend="756" name="getX" returns="Number" signature="getX()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="762" lineend="764" name="getY" returns="Number" signature="getY()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="770" lineend="772" name="getXY" returns="Array" signature="getXY()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates." ilk="function" line="779" lineend="783" name="getOffsetsTo" returns="Array" signature="getOffsetsTo(el)">
            <variable ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="780" name="o" />
            <variable attributes="__local__ private" citdl="Ext.fly().getXY()" line="781" name="e" />
          </scope>
          <scope doc="Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="791" lineend="798" name="setX" returns="Ext.Element" signature="setX(x, animate)">
            <variable ilk="argument" name="x" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="806" lineend="813" name="setY" returns="Ext.Element" signature="setY(y, animate)">
            <variable ilk="argument" name="y" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s left position directly using CSS style (instead of {@link #setX})." ilk="function" line="820" lineend="823" name="setLeft" returns="Ext.Element" signature="setLeft(left)">
            <variable citdl="String" doc="The left CSS property value" ilk="argument" name="left" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s top position directly using CSS style (instead of {@link #setY})." ilk="function" line="830" lineend="833" name="setTop" returns="Ext.Element" signature="setTop(top)">
            <variable citdl="String" doc="The top CSS property value" ilk="argument" name="top" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s CSS right style." ilk="function" line="840" lineend="843" name="setRight" returns="Ext.Element" signature="setRight(right)">
            <variable citdl="String" doc="The right CSS property value" ilk="argument" name="right" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s CSS bottom style." ilk="function" line="850" lineend="853" name="setBottom" returns="Ext.Element" signature="setBottom(bottom)">
            <variable citdl="String" doc="The bottom CSS property value" ilk="argument" name="bottom" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the position of the element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="862" lineend="869" name="setXY" returns="Ext.Element" signature="setXY(pos, animate)">
            <variable citdl="Array" doc="Contains X &amp; Y [x, y] values for new position (coordinates are page-based)" ilk="argument" name="pos" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the position of the element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="879" lineend="882" name="setLocation" returns="Ext.Element" signature="setLocation(x, y, animate)">
            <variable citdl="Number" doc="X value for new position (coordinates are page-based)" ilk="argument" name="x" />
            <variable citdl="Number" doc="Y value for new position (coordinates are page-based)" ilk="argument" name="y" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the position of the element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" line="892" lineend="895" name="moveTo" returns="Ext.Element" signature="moveTo(x, y, animate)">
            <variable citdl="Number" doc="X value for new position (coordinates are page-based)" ilk="argument" name="x" />
            <variable citdl="Number" doc="Y value for new position (coordinates are page-based)" ilk="argument" name="y" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation, or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns the region of the given element.&#xA;The element must be part of the DOM tree to have a region (display:none or elements not appended return false)." ilk="function" line="902" lineend="904" name="getRegion" returns="Region" signature="getRegion()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns the offset height of the element" ilk="function" line="911" lineend="915" name="getHeight" returns="Number" signature="getHeight(contentHeight)">
            <variable citdl="Boolean" doc="(optional) true to get the height minus borders and padding" ilk="argument" name="contentHeight" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.offsetHeight" line="912" name="h" />
          </scope>
          <scope doc="Returns the offset width of the element" ilk="function" line="922" lineend="926" name="getWidth" returns="Number" signature="getWidth(contentWidth)">
            <variable citdl="Boolean" doc="(optional) true to get the width minus borders and padding" ilk="argument" name="contentWidth" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.offsetWidth" line="923" name="w" />
          </scope>
          <scope doc="Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders&#xA;when needed to simulate offsetHeight when offsets aren&apos;t available. This may not work on display:none elements&#xA;if a height has not been set using CSS." ilk="function" line="934" lineend="943" name="getComputedHeight" returns="Number" signature="getComputedHeight()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Math.max()" line="935" name="h" />
          </scope>
          <scope doc="Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders&#xA;when needed to simulate offsetWidth when offsets aren&apos;t available. This may not work on display:none elements&#xA;if a width has not been set using CSS." ilk="function" line="951" lineend="960" name="getComputedWidth" returns="Number" signature="getComputedWidth()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Math.max()" line="952" name="w" />
          </scope>
          <scope doc="Returns the size of the element." ilk="function" line="967" lineend="969" name="getSize" returns="Object" signature="getSize(contentSize)">
            <variable citdl="Boolean" doc="(optional) true to get the width/size minus borders and padding" ilk="argument" name="contentSize" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope ilk="function" line="971" lineend="987" name="getStyleSize" signature="getStyleSize()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="parseInt()" line="972" name="h" />
            <variable attributes="__local__ private" citdl="d.style" line="972" name="s" />
            <variable attributes="__local__ private" citdl="this.dom" line="972" name="d" />
            <variable attributes="__local__ private" citdl="parseInt()" line="972" name="w" />
          </scope>
          <scope doc="Returns the width and height of the viewport." ilk="function" line="993" lineend="1003" name="getViewSize" returns="Object" signature="getViewSize()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="document" line="994" name="doc" />
            <variable attributes="__local__ private" citdl="this.dom" line="994" name="d" />
            <variable attributes="__local__ private" citdl="Number" line="994" name="aw" />
            <variable attributes="__local__ private" citdl="Number" line="994" name="ah" />
          </scope>
          <scope doc="Returns the value of the &quot;value&quot; attribute" ilk="function" line="1010" lineend="1012" name="getValue" returns="String/Number" signature="getValue(asNumber)">
            <variable citdl="Boolean" doc="true to parse the value as a number" ilk="argument" name="asNumber" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="1015" lineend="1025" name="adjustWidth" returns="width" signature="adjustWidth(width)">
            <variable citdl="Number" ilk="argument" name="width" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="1028" lineend="1038" name="adjustHeight" returns="height" signature="adjustHeight(height)">
            <variable citdl="Number" ilk="argument" name="height" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Set the width of the element" ilk="function" line="1046" lineend="1054" name="setWidth" returns="Ext.Element" signature="setWidth(width, animate)">
            <variable citdl="Number" doc="The new width" ilk="argument" name="width" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="this.addUnits()" line="1049" name="width" />
          <scope doc="Set the height of the element" ilk="function" line="1062" lineend="1070" name="setHeight" returns="Ext.Element" signature="setHeight(height, animate)">
            <variable citdl="Number" doc="The new height" ilk="argument" name="height" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="this.addUnits()" line="1065" name="height" />
          <scope doc="Set the size of the element. If animation is true, both width an height will be animated concurrently." ilk="function" line="1079" lineend="1091" name="setSize" returns="Ext.Element" signature="setSize(width, height, animate)">
            <variable citdl="Number" doc="The new width" ilk="argument" name="width" />
            <variable citdl="Number" doc="The new height" ilk="argument" name="height" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s position and size in one shot. If animation is true then width, height, x and y will be animated concurrently." ilk="function" line="1102" lineend="1112" name="setBounds" returns="Ext.Element" signature="setBounds(x, y, width, height, animate)">
            <variable citdl="Number" doc="X value for new position (coordinates are page-based)" ilk="argument" name="x" />
            <variable citdl="Number" doc="Y value for new position (coordinates are page-based)" ilk="argument" name="y" />
            <variable citdl="Number" doc="The new width" ilk="argument" name="width" />
            <variable citdl="Number" doc="The new height" ilk="argument" name="height" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s position and size the specified region. If animation is true then width, height, x and y will be animated concurrently." ilk="function" line="1120" lineend="1123" name="setRegion" returns="Ext.Element" signature="setRegion(region, animate)">
            <variable citdl="Ext.lib.Region" doc="The region to fill" ilk="argument" name="region" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Appends an event handler to this element.  The shorthand version {@link #on} is equivalent.&#xA;el.on(&apos;click&apos;, this.onClick, this, {&#xA;single: true,&#xA;delay: 100,&#xA;stopEvent : true,&#xA;forumId: 4&#xA;});&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&#xA;el.on({&#xA;&apos;click&apos; : {&#xA;fn: this.onClick,&#xA;scope: this,&#xA;delay: 100&#xA;&apos;mouseover&apos; : {&#xA;fn: this.onMouseOver,&#xA;scope: this&#xA;&apos;mouseout&apos; : {&#xA;fn: this.onMouseOut,&#xA;scope: this&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;el.on({&#xA;&apos;click&apos; : this.onClick,&#xA;&apos;mouseover&apos; : this.onMouseOver,&#xA;&apos;mouseout&apos; : this.onMouseOut,&#xA;scope: this&#xA;});&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="1197" lineend="1199" name="addListener" signature="addListener(eventName, fn, scope, options)">
            <variable citdl="String" doc="The type of event to handle" ilk="argument" name="eventName" />
            <variable citdl="Function" doc="The handler function the event invokes. This function is passed&#xA;the following parameters:&lt;ul&gt;&#xA;&lt;li&gt;evt : EventObject&lt;div class=&quot;sub-desc&quot;&gt;The {@link Ext.EventObject EventObject} describing the event.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;t : Element&lt;div class=&quot;sub-desc&quot;&gt;The {@link Ext.Element Element} which was the target of the event.&#xA;Note that this may be filtered by using the &lt;tt&gt;delegate&lt;/tt&gt; option.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;o : Object&lt;div class=&quot;sub-desc&quot;&gt;The options object from the addListener call.&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope (The &lt;tt&gt;this&lt;/tt&gt; reference) of the handler function. Defaults&#xA;to this Element." ilk="argument" name="scope" />
            <variable citdl="Object" doc="(optional) An object containing handler configuration properties.&#xA;This may contain any of the following properties:&lt;ul&gt;&#xA;&lt;li&gt;scope {Object} : The scope in which to execute the handler function. The handler function&apos;s &quot;this&quot; context.&lt;/li&gt;&#xA;&lt;li&gt;delegate {String} : A simple selector to filter the target or look for a descendant of the target&lt;/li&gt;&#xA;&lt;li&gt;stopEvent {Boolean} : True to stop the event. That is stop propagation, and prevent the default action.&lt;/li&gt;&#xA;&lt;li&gt;preventDefault {Boolean} : True to prevent the default action&lt;/li&gt;&#xA;&lt;li&gt;stopPropagation {Boolean} : True to prevent event propagation&lt;/li&gt;&#xA;&lt;li&gt;normalized {Boolean} : False to pass a browser event to the handler function instead of an Ext.EventObject&lt;/li&gt;&#xA;&lt;li&gt;delay {Number} : The number of milliseconds to delay the invocation of the handler after te event fires.&lt;/li&gt;&#xA;&lt;li&gt;single {Boolean} : True to add a handler to handle just the next firing of the event, and then remove itself.&lt;/li&gt;&#xA;&lt;li&gt;buffer {Number} : Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed&#xA;by the specified number of milliseconds. If the event fires again within that time, the original&#xA;handler is &lt;em&gt;not&lt;/em&gt; invoked, but the new handler is scheduled in its place.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;br&gt;&#xA;&lt;p&gt;&#xA;&lt;b&gt;Combining Options&lt;/b&gt;&lt;br&gt;&#xA;In the following examples, the shorthand form {@link #on} is used rather than the more verbose&#xA;addListener.  The two are equivalent.  Using the options argument, it is possible to combine different&#xA;types of listeners:&lt;br&gt;&#xA;&lt;br&gt;&#xA;A normalized, delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the&#xA;options object. The options object is available as the third parameter in the handler function.&lt;div style=&quot;margin: 5px 20px 20px;&quot;&gt;&#xA;Code:&lt;pre&gt;&lt;code&gt;&#xA;&lt;p&gt;&#xA;&lt;b&gt;Attaching multiple handlers in 1 call&lt;/b&gt;&lt;br&gt;&#xA;The method also allows for a single argument to be passed which is a config object containing properties&#xA;which specify multiple handlers.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Code:&lt;pre&gt;&lt;code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Or a shorthand syntax:&lt;br&gt;&#xA;Code:&lt;pre&gt;&lt;code&gt;&lt;/p&gt;" ilk="argument" name="options" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Removes an event handler from this element.  The shorthand version {@link #un} is equivalent.  Example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;el.removeListener(&apos;click&apos;, this.handlerFn);&#xA;// or&#xA;el.un(&apos;click&apos;, this.handlerFn);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="1214" lineend="1217" name="removeListener" returns="Ext.Element" signature="removeListener(eventName, fn, scope)">
            <variable citdl="String" doc="the type of event to remove" ilk="argument" name="eventName" />
            <variable citdl="Function" doc="the method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope (The &lt;tt&gt;this&lt;/tt&gt; reference) of the handler function. Defaults&#xA;to this Element." ilk="argument" name="scope" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Removes all previous added listeners from this element" ilk="function" line="1223" lineend="1226" name="removeAllListeners" returns="Ext.Element" signature="removeAllListeners()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Create an event handler on this element such that when the event fires and is handled by this element,&#xA;it will be relayed to another object (i.e., fired again as if it originated from that object instead)." ilk="function" line="1235" lineend="1239" name="relayEvent" signature="relayEvent(eventName, observable)">
            <variable citdl="String" doc="The type of event to relay" ilk="argument" name="eventName" />
            <variable ilk="argument" name="observable" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Set the opacity of the element" ilk="function" line="1247" lineend="1261" name="setOpacity" returns="Ext.Element" signature="setOpacity(opacity, animate)">
            <variable citdl="Number" doc="The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc" ilk="argument" name="opacity" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.style" line="1249" name="s" />
          </scope>
          <scope doc="Gets the left X coordinate" ilk="function" line="1268" lineend="1274" name="getLeft" returns="Number" signature="getLeft(local)">
            <variable citdl="Boolean" doc="True to get the local css position instead of page coordinate" ilk="argument" name="local" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the right X coordinate of the element (element X position + element width)" ilk="function" line="1281" lineend="1287" name="getRight" returns="Number" signature="getRight(local)">
            <variable citdl="Boolean" doc="True to get the local css position instead of page coordinate" ilk="argument" name="local" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the top Y coordinate" ilk="function" line="1294" lineend="1300" name="getTop" returns="Number" signature="getTop(local)">
            <variable citdl="Boolean" doc="True to get the local css position instead of page coordinate" ilk="argument" name="local" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the bottom Y coordinate of the element (element Y position + element height)" ilk="function" line="1307" lineend="1313" name="getBottom" returns="Number" signature="getBottom(local)">
            <variable citdl="Boolean" doc="True to get the local css position instead of page coordinate" ilk="argument" name="local" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Initializes positioning on this element. If a desired position is not passed, it will make the&#xA;the element positioned relative IF it is not already positioned." ilk="function" line="1323" lineend="1341" name="position" signature="position(pos, zIndex, x, y)">
            <variable citdl="String" doc="(optional) Positioning to use &quot;relative&quot;, &quot;absolute&quot; or &quot;fixed&quot;" ilk="argument" name="pos" />
            <variable citdl="Number" doc="(optional) The zIndex to apply" ilk="argument" name="zIndex" />
            <variable citdl="Number" doc="(optional) Set the page X position" ilk="argument" name="x" />
            <variable citdl="Number" doc="(optional) Set the page Y position" ilk="argument" name="y" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Clear positioning back to the default when the document was loaded" ilk="function" line="1348" lineend="1359" name="clearPositioning" returns="Ext.Element" signature="clearPositioning(value)">
            <variable citdl="String" doc="(optional) The value to use for the left,right,top,bottom, defaults to &apos;&apos; (empty string). You could use &apos;auto&apos;." ilk="argument" name="value" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets an object with all CSS positioning properties. Useful along with setPostioning to get&#xA;snapshot before performing an update and then restoring the element." ilk="function" line="1366" lineend="1377" name="getPositioning" returns="Object" signature="getPositioning()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getStyle()" line="1367" name="l" />
            <variable attributes="__local__ private" citdl="this.getStyle()" line="1368" name="t" />
          </scope>
          <scope doc="Gets the width of the border(s) for the specified side(s)" ilk="function" line="1385" lineend="1387" name="getBorderWidth" returns="Number" signature="getBorderWidth(side)">
            <variable citdl="String" doc="Can be t, l, r, b or any combination of those to add multiple values. For example,&#xA;passing lr would get the border (l)eft width + the border (r)ight width." ilk="argument" name="side" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the width of the padding(s) for the specified side(s)" ilk="function" line="1395" lineend="1397" name="getPadding" returns="Number" signature="getPadding(side)">
            <variable citdl="String" doc="Can be t, l, r, b or any combination of those to add multiple values. For example,&#xA;passing lr would get the padding (l)eft + the padding (r)ight." ilk="argument" name="side" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Set positioning with an object returned by getPositioning()." ilk="function" line="1404" lineend="1413" name="setPositioning" returns="Ext.Element" signature="setPositioning(pc)">
            <variable ilk="argument" name="pc" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="String" line="1407" name="right" />
          <variable citdl="String" line="1410" name="bottom" />
          <scope doc="private" ilk="function" line="1416" lineend="1424" name="fixDisplay" signature="fixDisplay()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="1427" lineend="1434" name="setOverflow" signature="setOverflow(v)">
            <variable ilk="argument" name="v" />
            <variable citdl="Element" name="this" />
            <scope attributes="__local__ private" ilk="function" line="1430" lineend="1430" name="(anonymous)" signature="(anonymous)()">
              <variable citdl="String" line="1430" name="overflow" />
            </scope>
          </scope>
          <variable citdl="String" doc="work around stupid FF 2.0/Mac scroll bar bug" line="1429" name="overflow" />
          <scope doc="Quick set left and top adding default units" ilk="function" line="1442" lineend="1446" name="setLeftTop" returns="Ext.Element" signature="setLeftTop(left, top)">
            <variable citdl="String" doc="The left CSS property value" ilk="argument" name="left" />
            <variable citdl="String" doc="The top CSS property value" ilk="argument" name="top" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="this.addUnits()" line="1443" name="left" />
          <variable citdl="this.addUnits()" line="1444" name="top" />
          <scope doc="Move this element relative to its current position." ilk="function" line="1455" lineend="1479" name="move" returns="Ext.Element" signature="move(direction, distance, animate)">
            <variable citdl="String" doc="Possible values are: &quot;l&quot; (or &quot;left&quot;), &quot;r&quot; (or &quot;right&quot;), &quot;t&quot; (or &quot;top&quot;, or &quot;up&quot;), &quot;b&quot; (or &quot;bottom&quot;, or &quot;down&quot;)." ilk="argument" name="direction" />
            <variable citdl="Number" doc="How far to move the element in pixels" ilk="argument" name="distance" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="1456" name="xy" />
          </scope>
          <scope doc="Store the current overflow setting and clip overflow on the element - use {@link #unclip} to remove" ilk="function" line="1485" lineend="1498" name="clip" returns="Ext.Element" signature="clip()">
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="Boolean" line="1487" name="isClipped" />
          <variable citdl="Object" line="1488" lineend="1492" name="originalClip">
            <variable citdl="this.getStyle()" line="1489" name="o" />
            <variable citdl="this.getStyle()" line="1490" name="x" />
            <variable citdl="this.getStyle()" line="1491" name="y" />
          </variable>
          <scope doc="Return clipping (overflow) to original clipping before clip() was called" ilk="function" line="1504" lineend="1513" name="unclip" returns="Ext.Element" signature="unclip()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.originalClip" line="1507" name="o" />
          </scope>
          <scope doc="Gets the x,y coordinates specified by the anchor position on the element." ilk="function" line="1526" lineend="1591" name="getAnchorXY" returns="Array" signature="getAnchorXY(anchor, local, s)">
            <variable citdl="String" doc="(optional) The specified anchor position (defaults to &quot;c&quot;).  See {@link #alignTo}&#xA;for details on supported anchor positions." ilk="argument" name="anchor" />
            <variable citdl="Boolean" doc="(optional) True to get the local (element top/left-relative) anchor position instead&#xA;of page coordinates" ilk="argument" name="local" />
            <variable ilk="argument" name="s" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="D.getViewHeight()" doc="especially for anchored animations that change the el size." line="1530" name="h" />
            <variable attributes="__local__ private" citdl="Boolean" doc="especially for anchored animations that change the el size." line="1530" name="vp" />
            <variable attributes="__local__ private" citdl="D.getViewWidth()" doc="especially for anchored animations that change the el size." line="1530" name="w" />
            <variable attributes="__local__ private" citdl="this.dom" line="1532" name="d" />
            <variable attributes="__local__ private" citdl="Math.round" line="1542" name="r" />
            <variable attributes="__local__ private" citdl="Number" line="1542" name="y" />
            <variable attributes="__local__ private" citdl="Number" line="1542" name="x" />
            <variable attributes="__local__ private" citdl="this.getScroll()" line="1585" name="sc" />
            <variable attributes="__local__ private" citdl="this.getXY()" doc="Add the element&apos;s offset xy" line="1589" name="o" />
          </scope>
          <scope doc="Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the&#xA;supported position values." ilk="function" line="1601" lineend="1665" name="getAlignToXY" returns="Array" signature="getAlignToXY(el, p, o)">
            <variable citdl="Ext.get()" ilk="argument" name="el" />
            <variable citdl="p.toLowerCase()" ilk="argument" name="p" />
            <variable citdl="o" ilk="argument" name="o" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="1606" name="d" />
            <variable attributes="__local__ private" citdl="Boolean" line="1607" name="c" />
            <variable attributes="__local__ private" citdl="String" doc="constrain to viewport" line="1608" name="p2" />
            <variable attributes="__local__ private" citdl="String" doc="constrain to viewport" line="1608" name="p1" />
            <variable attributes="__local__ private" citdl="p.match()" line="1619" name="m" />
            <variable attributes="__local__ private" citdl="this.getAnchorXY()" doc="plus custom offset to get the aligned el&apos;s new offset xy" line="1627" name="a1" />
            <variable attributes="__local__ private" citdl="el.getAnchorXY()" line="1628" name="a2" />
            <variable attributes="__local__ private" citdl="a2[0]" line="1630" name="x" />
            <variable attributes="__local__ private" citdl="a2[1]" line="1631" name="y" />
            <variable attributes="__local__ private" citdl="this.getHeight()" doc="constrain the aligned el to viewport if necessary" line="1635" name="h" />
            <variable attributes="__local__ private" citdl="el.getRegion()" doc="constrain the aligned el to viewport if necessary" line="1635" name="r" />
            <variable attributes="__local__ private" citdl="this.getWidth()" doc="constrain the aligned el to viewport if necessary" line="1635" name="w" />
            <variable attributes="__local__ private" citdl="D.getViewHeight()" doc="5px of margin for ie" line="1637" name="dh" />
            <variable attributes="__local__ private" citdl="D.getViewWidth()" doc="5px of margin for ie" line="1637" name="dw" />
            <variable attributes="__local__ private" citdl="p1.charAt()" doc="otherwise swap the aligned el to the opposite border of the&#xA;target." line="1642" name="p1x" />
            <variable attributes="__local__ private" citdl="p1.charAt()" doc="otherwise swap the aligned el to the opposite border of the&#xA;target." line="1642" name="p1y" />
            <variable attributes="__local__ private" citdl="p2.charAt()" line="1643" name="p2y" />
            <variable attributes="__local__ private" citdl="p2.charAt()" line="1643" name="p2x" />
            <variable attributes="__local__ private" line="1644" name="swapY" />
            <variable attributes="__local__ private" line="1645" name="swapX" />
            <variable attributes="__local__ private" citdl="document" line="1647" name="doc" />
            <variable attributes="__local__ private" line="1648" name="scrollX" />
            <variable attributes="__local__ private" line="1649" name="scrollY" />
          </scope>
          <variable citdl="moved" doc="private" line="1668" name="getConstrainToXY" />
          <scope doc="private" ilk="function" line="1730" lineend="1732" name="adjustForConstraints" returns="this.getConstrainToXY()" signature="adjustForConstraints(xy, parent, offsets)">
            <variable ilk="argument" name="xy" />
            <variable ilk="argument" name="parent" />
            <variable ilk="argument" name="offsets" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Aligns this element with another element relative to the specified anchor points. If the other element is the&#xA;document it aligns it to the viewport.&#xA;The position parameter is optional, and can be specified in any one of the following formats:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;Blank&lt;/b&gt;: Defaults to aligning the element&apos;s top-left corner to the target&apos;s bottom-left corner (&quot;tl-bl&quot;).&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;One anchor (deprecated)&lt;/b&gt;: The passed anchor position is used as the target element&apos;s anchor point.&#xA;The element being aligned will position its top-left corner (tl) to that point.  &lt;i&gt;This method has been&#xA;deprecated in favor of the newer two anchor syntax below&lt;/i&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;Two anchors&lt;/b&gt;: If two values from the table below are passed separated by a dash, the first value is used as the&#xA;element&apos;s anchor point, and the second value is used as the target&apos;s anchor point.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;In addition to the anchor points, the position parameter also supports the &quot;?&quot; character.  If &quot;?&quot; is passed at the end of&#xA;the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to&#xA;the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than&#xA;that specified in order to enforce the viewport constraints.&#xA;Following are all of the supported anchor positions:&#xA;&lt;pre&gt;&#xA;Value  Description&#xA;-----  -----------------------------&#xA;tl     The top left corner (default)&#xA;t      The center of the top edge&#xA;tr     The top right corner&#xA;l      The center of the left edge&#xA;c      In the center of the element&#xA;r      The center of the right edge&#xA;bl     The bottom left corner&#xA;b      The center of the bottom edge&#xA;br     The bottom right corner&#xA;&lt;/pre&gt;&#xA;Example Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// align el to other-el using the default positioning (&quot;tl-bl&quot;, non-constrained)&#xA;el.alignTo(&quot;other-el&quot;);&#xA;// align the top left corner of el with the top right corner of other-el (constrained to viewport)&#xA;el.alignTo(&quot;other-el&quot;, &quot;tr?&quot;);&#xA;// align the bottom right corner of el with the center left edge of other-el&#xA;el.alignTo(&quot;other-el&quot;, &quot;br-l?&quot;);&#xA;// align the center of el with the bottom left corner of other-el and&#xA;// adjust the x position by -6 pixels (and the y position by 0)&#xA;el.alignTo(&quot;other-el&quot;, &quot;c-bl&quot;, [-6, 0]);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="1785" lineend="1789" name="alignTo" returns="Ext.Element" signature="alignTo(element, position, offsets, animate)">
            <variable citdl="Mixed" doc="The element to align to." ilk="argument" name="element" />
            <variable citdl="String" doc="The position to align to." ilk="argument" name="position" />
            <variable citdl="Array" doc="(optional) Offset the positioning by [x, y]" ilk="argument" name="offsets" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getAlignToXY()" line="1786" name="xy" />
          </scope>
          <scope doc="Anchors an element to another element and realigns it when the window is resized." ilk="function" line="1802" lineend="1815" name="anchorTo" returns="Ext.Element" signature="anchorTo(el, alignment, offsets, animate, monitorScroll, callback)">
            <variable ilk="argument" name="el" />
            <variable ilk="argument" name="alignment" />
            <variable citdl="Array" doc="(optional) Offset the positioning by [x, y]" ilk="argument" name="offsets" />
            <variable citdl="Boolean/Object" doc="(optional) True for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Boolean/Number" doc="(optional) True to monitor body scroll and reposition. If this parameter&#xA;is a number, it is used as the buffer delay (defaults to 50ms)." ilk="argument" name="monitorScroll" />
            <variable citdl="Function" doc="The function to call after the animation finishes" ilk="argument" name="callback" />
            <variable citdl="Element" name="this" />
            <scope attributes="__local__ private" ilk="function" line="1803" lineend="1806" name="action" signature="action()" />
            <variable attributes="__local__ private" line="1808" name="tm" />
          </scope>
          <scope doc="Clears any opacity settings from this element. Required in some cases for IE." ilk="function" line="1820" lineend="1831" name="clearOpacity" returns="Ext.Element" signature="clearOpacity()">
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="String" line="1823" name="filter" />
          <variable citdl="String" line="1826" name="opacity" />
          <scope doc="Hide this element - Uses display mode to determine whether to use &quot;display&quot; or &quot;visibility&quot;. See {@link #setVisible}." ilk="function" line="1838" lineend="1841" name="hide" returns="Ext.Element" signature="hide(animate)">
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Show this element - Uses display mode to determine whether to use &quot;display&quot; or &quot;visibility&quot;. See {@link #setVisible}." ilk="function" line="1848" lineend="1851" name="show" returns="Ext.Element" signature="show(animate)">
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope attributes="private" doc="Test if size has a unit, otherwise appends the default */" ilk="function" line="1856" lineend="1858" name="addUnits" returns="Ext.Element.addUnits()" signature="addUnits(size)">
            <variable ilk="argument" name="size" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Update the innerHTML of this element, optionally searching for and processing scripts" ilk="function" line="1867" lineend="1917" name="update" returns="Ext.Element" signature="update(html, loadScripts, callback)">
            <variable citdl="String" doc="The new HTML" ilk="argument" name="html" />
            <variable citdl="Boolean" doc="(optional) True to look for and process scripts (defaults to false)" ilk="argument" name="loadScripts" />
            <variable citdl="Function" doc="(optional) For async script loading you can be notified when the update completes" ilk="argument" name="callback" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.id()" line="1878" name="id" />
            <variable attributes="__local__ private" citdl="this.dom" line="1879" name="dom" />
          </scope>
          <variable citdl="html" line="1872" name="innerHTML" />
          <scope doc="Direct access to the Updater {@link Ext.Updater#update} method. The method takes the same object&#xA;parameter as {@link Ext.Updater#update}" ilk="function" line="1924" lineend="1928" name="load" returns="Ext.Element" signature="load()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getUpdater()" line="1925" name="um" />
          </scope>
          <scope doc="Gets this element&apos;s Updater" ilk="function" line="1934" lineend="1939" name="getUpdater" returns="Ext.Updater" signature="getUpdater()">
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="Ext.Updater" line="1936" name="updateManager" />
          <scope doc="Disables text selection for this element (normalized across browsers)" ilk="function" line="1945" lineend="1951" name="unselectable" returns="Ext.Element" signature="unselectable()">
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="String" line="1946" name="unselectable" />
          <scope doc="Calculates the x, y to center this element on the screen" ilk="function" line="1957" lineend="1959" name="getCenterXY" returns="Array" signature="getCenterXY()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Centers the Element in either the viewport, or another Element." ilk="function" line="1965" lineend="1968" name="center" returns="this" signature="center(centerIn)">
            <variable citdl="Mixed" doc="(optional) The element in which to center the element." ilk="argument" name="centerIn" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Tests various css rules/browsers to determine if this element uses a border box" ilk="function" line="1974" lineend="1976" name="isBorderBox" returns="Boolean" signature="isBorderBox()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Return a box {x, y, width, height} that can be used to set another elements&#xA;size/location to match this element." ilk="function" line="1985" lineend="2007" name="getBox" returns="Object" signature="getBox(contentBox, local)">
            <variable citdl="Boolean" doc="(optional) If true a box for the content of the element is returned." ilk="argument" name="contentBox" />
            <variable citdl="Boolean" doc="(optional) If true the element&apos;s left and top are returned instead of page x/y." ilk="argument" name="local" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="1986" name="xy" />
            <variable attributes="__local__ private" citdl="parseInt()" line="1990" name="left" />
            <variable attributes="__local__ private" citdl="parseInt()" line="1991" name="top" />
            <variable attributes="__local__ private" citdl="this.dom" line="1994" name="el" />
            <variable attributes="__local__ private" citdl="el.offsetHeight" line="1994" name="h" />
            <variable attributes="__local__ private" citdl="el.offsetWidth" line="1994" name="w" />
            <variable attributes="__local__ private" citdl="Object" line="1994" lineend="2002" name="bx">
              <variable citdl="h" line="1996" name="height" />
              <variable citdl="w" line="1996" name="width" />
              <variable citdl="xy[1]" line="1996" name="y" />
              <variable citdl="xy[0]" line="1996" name="x" />
              <variable citdl="bx.x" line="2004" name="right" />
              <variable citdl="bx.y" line="2005" name="bottom" />
            </variable>
            <variable attributes="__local__ private" citdl="this.getBorderWidth()" line="1998" name="l" />
            <variable attributes="__local__ private" citdl="this.getBorderWidth()" line="1999" name="r" />
            <variable attributes="__local__ private" citdl="this.getBorderWidth()" line="2000" name="t" />
            <variable attributes="__local__ private" citdl="this.getBorderWidth()" line="2001" name="b" />
          </scope>
          <scope doc="Returns the sum width of the padding and borders for the passed &quot;sides&quot;. See getBorderWidth()&#xA;for more information about the sides." ilk="function" line="2015" lineend="2017" name="getFrameWidth" returns="Number" signature="getFrameWidth(sides, onlyContentBox)">
            <variable citdl="String" ilk="argument" name="sides" />
            <variable ilk="argument" name="onlyContentBox" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets the element&apos;s box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently." ilk="function" line="2026" lineend="2034" name="setBox" returns="Ext.Element" signature="setBox(box, adjust, animate)">
            <variable citdl="Object" doc="The box to fill {x, y, width, height}" ilk="argument" name="box" />
            <variable citdl="Boolean" doc="(optional) Whether to adjust for box-model issues automatically" ilk="argument" name="adjust" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="box.height" line="2027" name="h" />
            <variable attributes="__local__ private" citdl="box.width" line="2027" name="w" />
          </scope>
          <scope doc="Forces the browser to repaint this element" ilk="function" line="2040" lineend="2047" name="repaint" returns="Ext.Element" signature="repaint()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="2041" name="dom" />
          </scope>
          <scope doc="Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,&#xA;then it returns the calculated width of the sides (see getPadding)" ilk="function" line="2055" lineend="2066" name="getMargins" returns="Object/Number" signature="getMargins(side)">
            <variable ilk="argument" name="side" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="private" ilk="function" line="2069" lineend="2079" name="addStyles" returns="val" signature="addStyles(sides, styles)">
            <variable ilk="argument" name="sides" />
            <variable ilk="argument" name="styles" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="parseInt()" line="2070" name="w" />
            <variable attributes="__local__ private" citdl="Number" line="2070" name="val" />
            <variable attributes="__local__ private" citdl="this.getStyle()" line="2070" name="v" />
          </scope>
          <scope doc="Creates a proxy element of this element" ilk="function" line="2088" lineend="2102" name="createProxy" returns="Ext.Element" signature="createProxy(config, renderTo, matchBox)">
            <variable citdl="String/Object" doc="The class name of the proxy element or a DomHelper config object" ilk="argument" name="config" />
            <variable citdl="String/HTMLElement" doc="(optional) The element or element id to render the proxy to (defaults to document.body)" ilk="argument" name="renderTo" />
            <variable citdl="Boolean" doc="(optional) True to align and size the proxy to this element now (defaults to false)" ilk="argument" name="matchBox" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.append()" line="2092" name="proxy" />
          </scope>
          <variable citdl="Object" line="2090" lineend="2090" name="config">
            <variable citdl="String" line="2090" name="tag" />
            <variable citdl="config" line="2090" name="cls" />
          </variable>
          <scope doc="Puts a mask over this element to disable user interaction. Requires core.css.&#xA;This method can only be applied to elements which accept child nodes." ilk="function" line="2111" lineend="2138" name="mask" returns="Element" signature="mask(msg, msgCls)">
            <variable citdl="String" doc="(optional) A message to display in the mask" ilk="argument" name="msg" />
            <variable citdl="String" doc="(optional) A css class to apply to the msg element" ilk="argument" name="msgCls" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this._maskMsg" line="2128" name="mm" />
          </scope>
          <variable citdl="Ext.DomHelper.append()" line="2122" name="_mask" />
          <variable citdl="Ext.DomHelper.append()" line="2127" name="_maskMsg" />
          <scope doc="Removes a previously applied mask." ilk="function" line="2143" lineend="2153" name="unmask" signature="unmask()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns true if this element is masked" ilk="function" line="2159" lineend="2161" name="isMasked" returns="Boolean" signature="isMasked()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Creates an iframe shim for this element to keep selects and other windowed objects from&#xA;showing through." ilk="function" line="2168" lineend="2178" name="createShim" returns="Ext.Element" signature="createShim()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="2169" name="el" />
            <variable attributes="__local__ private" citdl="Ext.get()" line="2175" name="shim" />
          </scope>
          <scope doc="Removes this element from the DOM and deletes it from the cache" ilk="function" line="2183" lineend="2186" name="remove" signature="remove()">
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets up event handlers to call the passed functions when the mouse is over this element. Automatically&#xA;filters child element mouse events." ilk="function" line="2196" lineend="2210" name="hover" returns="Ext.Element" signature="hover(overFn, outFn, scope)">
            <variable citdl="Function" ilk="argument" name="overFn" />
            <variable citdl="Function" ilk="argument" name="outFn" />
            <variable citdl="Object" doc="(optional)" ilk="argument" name="scope" />
            <variable citdl="Element" name="this" />
            <scope attributes="__local__ private" ilk="function" line="2197" lineend="2201" name="preOverFn" signature="preOverFn(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="2202" lineend="2206" name="preOutFn" signature="preOutFn(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope doc="Sets up event handlers to add and remove a css class when the mouse is over this element" ilk="function" line="2217" lineend="2227" name="addClassOnOver" returns="Ext.Element" signature="addClassOnOver(className)">
            <variable citdl="String" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets up event handlers to add and remove a css class when this element has the focus" ilk="function" line="2234" lineend="2242" name="addClassOnFocus" returns="Ext.Element" signature="addClassOnFocus(className)">
            <variable citdl="String" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)" ilk="function" line="2248" lineend="2260" name="addClassOnClick" returns="Ext.Element" signature="addClassOnClick(className)">
            <variable citdl="String" ilk="argument" name="className" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="2249" name="dom" />
          </scope>
          <scope doc="Stops the specified event from bubbling and optionally prevents the default action" ilk="function" line="2268" lineend="2283" name="swallowEvent" returns="Ext.Element" signature="swallowEvent(eventName, preventDefault)">
            <variable citdl="String" ilk="argument" name="eventName" />
            <variable citdl="Boolean" doc="(optional) true to prevent the default action too" ilk="argument" name="preventDefault" />
            <variable citdl="Element" name="this" />
            <scope attributes="__local__ private" ilk="function" line="2269" lineend="2274" name="fn" signature="fn(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope doc="Gets the parent node for this element, optionally chaining up trying to match a selector" ilk="function" line="2291" lineend="2293" name="parent" returns="Ext.Element/HTMLElement" signature="parent(selector, returnDom)">
            <variable citdl="String" doc="(optional) Find a parent node that matches the passed simple selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to return a raw dom node instead of an Ext.Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the next sibling, skipping text nodes" ilk="function" line="2301" lineend="2303" name="next" returns="Ext.Element/HTMLElement" signature="next(selector, returnDom)">
            <variable citdl="String" doc="(optional) Find the next sibling that matches the passed simple selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to return a raw dom node instead of an Ext.Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the previous sibling, skipping text nodes" ilk="function" line="2311" lineend="2313" name="prev" returns="Ext.Element/HTMLElement" signature="prev(selector, returnDom)">
            <variable citdl="String" doc="(optional) Find the previous sibling that matches the passed simple selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to return a raw dom node instead of an Ext.Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the first child, skipping text nodes" ilk="function" line="2322" lineend="2324" name="first" returns="Ext.Element/HTMLElement" signature="first(selector, returnDom)">
            <variable citdl="String" doc="(optional) Find the next sibling that matches the passed simple selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to return a raw dom node instead of an Ext.Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Gets the last child, skipping text nodes" ilk="function" line="2332" lineend="2334" name="last" returns="Ext.Element/HTMLElement" signature="last(selector, returnDom)">
            <variable citdl="String" doc="(optional) Find the previous sibling that matches the passed simple selector" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) True to return a raw dom node instead of an Ext.Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope ilk="function" line="2336" lineend="2345" name="matchNode" signature="matchNode(dir, start, selector, returnDom)">
            <variable ilk="argument" name="dir" />
            <variable ilk="argument" name="start" />
            <variable ilk="argument" name="selector" />
            <variable ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom[start]" line="2337" name="n" />
          </scope>
          <scope doc="Appends the passed element(s) to this element" ilk="function" line="2352" lineend="2356" name="appendChild" returns="Ext.Element" signature="appendChild(el)">
            <variable citdl="String/HTMLElement/Array/Element/CompositeElement" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element." ilk="function" line="2366" lineend="2372" name="createChild" returns="Ext.Element" signature="createChild(config, insertBefore, returnDom)">
            <variable citdl="Object" doc="DomHelper element config object.  If no tag is specified (e.g., {tag:&apos;input&apos;}) then a div will be&#xA;automatically generated with the specified attributes." ilk="argument" name="config" />
            <variable citdl="HTMLElement" doc="(optional) a child element of this element" ilk="argument" name="insertBefore" />
            <variable citdl="Boolean" doc="(optional) true to return the dom node instead of creating an Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
          </scope>
          <variable citdl="String" line="2367" name="tag" />
          <scope doc="Appends this element to the passed element" ilk="function" line="2379" lineend="2383" name="appendTo" returns="Ext.Element" signature="appendTo(el)">
            <variable citdl="Mixed" doc="The new parent element" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Inserts this element before the passed element in the DOM" ilk="function" line="2390" lineend="2394" name="insertBefore" returns="Ext.Element" signature="insertBefore(el)">
            <variable citdl="Mixed" doc="The element before which this element will be inserted" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Inserts this element after the passed element in the DOM" ilk="function" line="2401" lineend="2405" name="insertAfter" returns="Ext.Element" signature="insertAfter(el)">
            <variable citdl="Mixed" doc="The element to insert after" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Inserts (or creates) an element (or DomHelper config) as the first child of this element" ilk="function" line="2412" lineend="2421" name="insertFirst" returns="Ext.Element" signature="insertFirst(el, returnDom)">
            <variable citdl="Mixed/Object" doc="The id or element to insert or a DomHelper config to create and insert" ilk="argument" name="el" />
            <variable ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element" ilk="function" line="2430" lineend="2456" name="insertSibling" returns="Ext.Element" signature="insertSibling(el, where, returnDom)">
            <variable citdl="Mixed/Object/Array" doc="The id, element to insert or a DomHelper config to create and insert *or* an array of any of those." ilk="argument" name="el" />
            <variable citdl="String" doc="(optional) &apos;before&apos; or &apos;after&apos; defaults to before" ilk="argument" name="where" />
            <variable citdl="Boolean" doc="(optional) True to return the raw DOM element instead of Ext.Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.insertSibling()" line="2431" name="rt" />
            <variable attributes="__local__ private" citdl="where" line="2440" name="refNode" />
          </scope>
          <scope doc="Creates and wraps this element with another element" ilk="function" line="2464" lineend="2471" name="wrap" returns="HTMLElement/Element" signature="wrap(config, returnDom)">
            <variable citdl="Object" doc="(optional) DomHelper element config object for the wrapper element or null for an empty div" ilk="argument" name="config" />
            <variable citdl="Boolean" doc="(optional) True to return the raw DOM element instead of Ext.Element" ilk="argument" name="returnDom" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.insertBefore()" line="2468" name="newEl" />
          </scope>
          <scope doc="Replaces the passed element with this element" ilk="function" line="2478" lineend="2483" name="replace" returns="Ext.Element" signature="replace(el)">
            <variable citdl="Mixed" doc="The element to replace" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Replaces this element with the passed element" ilk="function" line="2490" lineend="2503" name="replaceWith" returns="Ext.Element" signature="replaceWith(el)">
            <variable citdl="Mixed/Object" doc="The new element or a DomHelper config of an element to create" ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Inserts an html fragment into this element" ilk="function" line="2512" lineend="2515" name="insertHtml" returns="HTMLElement/Ext.Element" signature="insertHtml(where, html, returnEl)">
            <variable citdl="String" doc="Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd." ilk="argument" name="where" />
            <variable citdl="String" doc="The HTML fragment" ilk="argument" name="html" />
            <variable citdl="Boolean" doc="(optional) True to return an Ext.Element (defaults to false)" ilk="argument" name="returnEl" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper.insertHtml()" line="2513" name="el" />
          </scope>
          <scope doc="Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)" ilk="function" line="2523" lineend="2539" name="set" returns="Ext.Element" signature="set(o, useSet)">
            <variable citdl="Object" doc="The object with the attributes" ilk="argument" name="o" />
            <variable citdl="Boolean" doc="(optional) false to override the default setAttribute to use expandos." ilk="argument" name="useSet" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="2524" name="el" />
          </scope>
          <scope doc="Convenience method for constructing a KeyMap" ilk="function" line="2549" lineend="2568" name="addKeyListener" returns="Ext.KeyMap" signature="addKeyListener(key, fn, scope)">
            <variable citdl="Number/Array/Object/String" doc="Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:&#xA;{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}" ilk="argument" name="key" />
            <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the function" ilk="argument" name="scope" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="2550" lineend="2565" name="config">
              <variable citdl="key" line="2553" name="key" />
              <variable citdl="fn" line="2554" name="fn" />
              <variable citdl="scope" line="2555" name="scope" />
              <variable citdl="key.shift" line="2560" name="shift" />
              <variable citdl="key.ctrl" line="2561" name="ctrl" />
              <variable citdl="key.alt" line="2562" name="alt" />
            </variable>
          </scope>
          <scope doc="Creates a KeyMap for this element" ilk="function" line="2575" lineend="2577" name="addKeyMap" returns="Ext.KeyMap" signature="addKeyMap(config)">
            <variable citdl="Object" doc="The KeyMap config. See {@link Ext.KeyMap} for more details" ilk="argument" name="config" />
            <variable citdl="Element" name="this" />
          </scope>
          <scope doc="Returns true if this element is scrollable." ilk="function" line="2583" lineend="2586" name="isScrollable" returns="Boolean" signature="isScrollable()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="2584" name="dom" />
          </scope>
          <scope doc="Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll()." ilk="function" line="2595" lineend="2604" name="scrollTo" returns="Element" signature="scrollTo(side, value, animate)">
            <variable citdl="String" doc="Either &quot;left&quot; for scrollLeft values or &quot;top&quot; for scrollTop values." ilk="argument" name="side" />
            <variable citdl="Number" doc="The new scroll value" ilk="argument" name="value" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="side.toLowerCase()" line="2596" name="prop" />
            <variable attributes="__local__ private" citdl="prop" line="2600" name="to" />
          </scope>
          <scope doc="Scrolls this element the specified direction. Does bounds checking to make sure the scroll is&#xA;within this element&apos;s scrollable range." ilk="function" line="2615" lineend="2663" name="scroll" returns="Boolean" signature="scroll(direction, distance, animate)">
            <variable citdl="String" doc="Possible values are: &quot;l&quot; (or &quot;left&quot;), &quot;r&quot; (or &quot;right&quot;), &quot;t&quot; (or &quot;top&quot;, or &quot;up&quot;), &quot;b&quot; (or &quot;bottom&quot;, or &quot;down&quot;)." ilk="argument" name="direction" />
            <variable citdl="Number" doc="How far to scroll the element in pixels" ilk="argument" name="distance" />
            <variable citdl="Boolean/Object" doc="(optional) true for the default animation or a standard Element animation config object" ilk="argument" name="animate" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="2619" name="el" />
            <variable attributes="__local__ private" citdl="el.scrollLeft" line="2620" name="l" />
            <variable attributes="__local__ private" citdl="el.scrollTop" line="2620" name="t" />
            <variable attributes="__local__ private" citdl="el.scrollHeight" line="2621" name="h" />
            <variable attributes="__local__ private" citdl="el.scrollWidth" line="2621" name="w" />
            <variable attributes="__local__ private" citdl="el.clientHeight" line="2622" name="ch" />
            <variable attributes="__local__ private" citdl="el.clientWidth" line="2622" name="cw" />
            <variable attributes="__local__ private" citdl="Boolean" line="2624" name="scrolled" />
            <variable attributes="__local__ private" citdl="this.preanim()" line="2625" name="a" />
            <variable attributes="__local__ private" citdl="Math.min()" line="2630" name="v" />
          </scope>
          <scope doc="Translates the passed page coordinates into left/top css values for this element" ilk="function" line="2671" lineend="2689" name="translatePoints" returns="Object" signature="translatePoints(x, y)">
            <variable citdl="Number/Array" doc="The page x or an array containing [x, y]" ilk="argument" name="x" />
            <variable citdl="Number" doc="(optional) The page y, required if x is not an array" ilk="argument" name="y" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getStyle()" line="2675" name="p" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="2676" name="o" />
            <variable attributes="__local__ private" citdl="parseInt()" line="2678" name="l" />
            <variable attributes="__local__ private" citdl="parseInt()" line="2679" name="t" />
          </scope>
          <scope doc="Returns the current scroll position of the element." ilk="function" line="2695" lineend="2710" name="getScroll" returns="Object" signature="getScroll()">
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="document" line="2696" name="doc" />
            <variable attributes="__local__ private" citdl="this.dom" line="2696" name="d" />
            <variable attributes="__local__ private" citdl="doc.documentElement.scrollTop" line="2698" name="t" />
            <variable attributes="__local__ private" citdl="doc.documentElement.scrollLeft" line="2698" name="l" />
          </scope>
          <scope doc="Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values&#xA;are convert to standard 6 digit hex color." ilk="function" line="2720" lineend="2749" name="getColor" signature="getColor(attr, defaultValue, prefix)">
            <variable citdl="String" doc="The css attribute" ilk="argument" name="attr" />
            <variable citdl="String" doc="The default value to use when a valid color isn&apos;t found" ilk="argument" name="defaultValue" />
            <variable citdl="String" doc="(optional) defaults to #. Use an empty string when working with&#xA;color anims." ilk="argument" name="prefix" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="this.getStyle()" line="2721" name="v" />
            <variable attributes="__local__ private" line="2725" name="color" />
            <variable attributes="__local__ private" citdl="v.slice().split()" line="2727" name="rvs" />
            <variable attributes="__local__ private" citdl="parseInt()" line="2729" name="h" />
            <variable attributes="__local__ private" citdl="h.toString()" line="2730" name="s" />
            <variable attributes="__local__ private" citdl="v.charAt()" line="2740" name="c" />
          </scope>
          <scope doc="Wraps the specified element with a special markup/CSS block that renders by default as a gray container with a&#xA;gradient background, rounded corners and a 4-way shadow.  Example usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// Basic box wrap&#xA;Ext.get(&quot;foo&quot;).boxWrap();&#xA;// You can also add a custom class and use CSS inheritance rules to customize the box look.&#xA;// &apos;x-box-blue&apos; is a built-in alternative -- look at the related CSS definitions as an example&#xA;// for how to create a custom box wrap style.&#xA;Ext.get(&quot;foo&quot;).boxWrap().addClass(&quot;x-box-blue&quot;);&#xA;&lt;/pre&gt;&lt;/code&gt;" ilk="function" line="2768" lineend="2773" name="boxWrap" returns="Ext.Element" signature="boxWrap(cls)">
            <variable citdl="cls" ilk="argument" name="cls" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.get()" line="2770" name="el" />
          </scope>
          <variable citdl="Ext.isIE" doc="Returns the value of a namespaced attribute from the element&apos;s underlying DOM node." line="2781" name="getAttributeNS" />
          <variable attributes="__local__ private" citdl="this.dom" line="2782" name="d" />
          <variable attributes="__local__ private" line="2783" name="type" />
          <scope doc="Returns the width in pixels of the passed text, or the width of the text in this Element." ilk="function" line="2800" lineend="2802" name="getTextWidth" returns="Number" signature="getTextWidth(text, min, max)">
            <variable citdl="String" doc="The text to measure. Defaults to the innerHTML of the element." ilk="argument" name="text" />
            <variable citdl="Number" doc="(Optional) The minumum value to return." ilk="argument" name="min" />
            <variable citdl="Number" doc="(Optional) The maximum value to return." ilk="argument" name="max" />
            <variable citdl="Element" name="this" />
          </scope>
        </scope>
        <scope ilk="class" line="80" lineend="220" name="Component">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;Base class for all Ext components.  All subclasses of Component can automatically participate in the standard&#xA;Ext component lifecycle of creation, rendering and destruction.  They also have automatic support for basic hide/show&#xA;and enable/disable behavior.  Component allows any subclass to be lazy-rendered into any {@link Ext.Container} and&#xA;to be automatically registered with the {@link Ext.ComponentMgr} so that it can be referenced at any time via&#xA;{@link Ext#getCmp}.  All visual widgets that require rendering into a layout should subclass Component (or&#xA;{@link Ext.BoxComponent} if managed box model handling is required).&lt;/p&gt;&#xA;&lt;p&gt;Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the&#xA;xtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:&lt;/p&gt;&#xA;&lt;pre&gt;&#xA;xtype            Class&#xA;-------------    ------------------&#xA;box              Ext.BoxComponent&#xA;button           Ext.Button&#xA;colorpalette     Ext.ColorPalette&#xA;component        Ext.Component&#xA;container        Ext.Container&#xA;cycle            Ext.CycleButton&#xA;dataview         Ext.DataView&#xA;datepicker       Ext.DatePicker&#xA;editor           Ext.Editor&#xA;editorgrid       Ext.grid.EditorGridPanel&#xA;grid             Ext.grid.GridPanel&#xA;paging           Ext.PagingToolbar&#xA;panel            Ext.Panel&#xA;progress         Ext.ProgressBar&#xA;propertygrid     Ext.grid.PropertyGrid&#xA;slider           Ext.Slider&#xA;splitbutton      Ext.SplitButton&#xA;statusbar        Ext.StatusBar&#xA;tabpanel         Ext.TabPanel&#xA;treepanel        Ext.tree.TreePanel&#xA;viewport         Ext.Viewport&#xA;window           Ext.Window&#xA;Toolbar components&#xA;---------------------------------------&#xA;toolbar          Ext.Toolbar&#xA;tbbutton         Ext.Toolbar.Button&#xA;tbfill           Ext.Toolbar.Fill&#xA;tbitem           Ext.Toolbar.Item&#xA;tbseparator      Ext.Toolbar.Separator&#xA;tbspacer         Ext.Toolbar.Spacer&#xA;tbsplit          Ext.Toolbar.SplitButton&#xA;tbtext           Ext.Toolbar.TextItem&#xA;Form components&#xA;---------------------------------------&#xA;form             Ext.FormPanel&#xA;checkbox         Ext.form.Checkbox&#xA;combo            Ext.form.ComboBox&#xA;datefield        Ext.form.DateField&#xA;field            Ext.form.Field&#xA;fieldset         Ext.form.FieldSet&#xA;hidden           Ext.form.Hidden&#xA;htmleditor       Ext.form.HtmlEditor&#xA;label            Ext.form.Label&#xA;numberfield      Ext.form.NumberField&#xA;radio            Ext.form.Radio&#xA;textarea         Ext.form.TextArea&#xA;textfield        Ext.form.TextField&#xA;timefield        Ext.form.TimeField&#xA;trigger          Ext.form.TriggerField&#xA;&lt;/pre&gt;" ilk="function" line="80" lineend="220" name="Component" signature="Component(config)">
            <variable citdl="Ext.Element/String/Object" doc="The configuration options.  If an element is passed, it is set as the internal&#xA;element and its id used as the component id.  If a string is passed, it is assumed to be the id of an existing element&#xA;and is used as the component id.  Otherwise, it is assumed to be a standard config object and is applied to the component." ilk="argument" name="config" />
            <variable citdl="Component" name="this" />
          </scope>
          <variable citdl="config" doc="actions" line="84" name="baseAction" />
          <variable citdl="Object" doc="This Component&apos;s initial configuration specification. Read-only." line="96" name="initialConfig" />
          <variable citdl="this.initPlugin()" line="205" name="plugins" />
          <variable citdl="Number" doc="private" line="223" name="AUTO_ID" />
        </scope>
        <variable citdl="Boolean" doc="True when the document is fully initialized and ready for action" line="82" name="isReady" />
        <scope ilk="function" line="83" lineend="88" name="log" signature="log()">
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Boolean" doc="True to automatically uncache orphaned Ext.Elements periodically (defaults to true)" line="88" name="enableGarbageCollector" />
        <scope ilk="function" line="90" lineend="92" name="logf" signature="logf(format, arg1, arg2, etc)">
          <variable ilk="argument" name="format" />
          <variable ilk="argument" name="arg1" />
          <variable ilk="argument" name="arg2" />
          <variable ilk="argument" name="etc" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope ilk="function" line="94" lineend="117" name="dump" signature="dump(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="104" name="b" />
          <variable attributes="__local__ private" line="106" name="to" />
          <variable attributes="__local__ private" citdl="b.join()" line="111" name="s" />
        </scope>
        <variable citdl="Boolean" doc="True to automatically purge event listeners after uncaching an element (defaults to false).&#xA;Note: this only happens if enableGarbageCollector is true." line="95" name="enableListenerCollection" />
        <variable citdl="String" doc="URL to a blank file used by Ext when in secure mode for iframe src and onReady src to prevent&#xA;the IE insecure content warning (defaults to javascript:false)." line="103" name="SSL_SECURE_URL" />
        <variable citdl="String" doc="URL to a 1x1 transparent gif image used by Ext to create inline icons with CSS background images. (Defaults to&#xA;&quot;http://extjs.com/s.gif&quot; and you should change this to a URL on your server)." line="110" name="BLANK_IMAGE_URL" />
        <variable citdl="Ext.ComponentMgr.registerType" doc="Shorthand for {@link Ext.ComponentMgr#registerType}" line="113" name="reg" />
        <variable citdl="Object" line="114" name="Panel">
          <scope doc="private - DD implementation for Panels" ilk="function" line="114" lineend="125" name="DD" signature="DD(panel, cfg)">
            <variable ilk="argument" name="panel" />
            <variable ilk="argument" name="cfg" />
            <variable citdl="Panel" name="this" />
            <variable attributes="__local__ private" citdl="panel.header" line="119" name="h" />
          </scope>
          <variable citdl="panel" line="115" name="panel" />
          <variable citdl="Object" line="116" lineend="116" name="dragData">
            <variable citdl="panel" line="116" name="panel" />
          </variable>
          <variable citdl="Ext.dd.PanelProxy" line="117" name="proxy" />
          <variable citdl="Boolean" line="124" name="scroll" />
        </variable>
        <variable citdl="Object" line="116" name="form">
          <variable citdl="Object" doc="All these messages and functions are configurable" line="14" lineend="94" name="VTypes">
            <scope doc="The function used to validate email addresses.  Note that this is a very basic validation -- complete&#xA;validation per the email RFC specifications is very complex and beyond the scope of this class, although&#xA;this function can be overridden if a more comprehensive validation scheme is desired.  See the validation&#xA;section of the &lt;a href=&quot;http://en.wikipedia.org/wiki/E-mail_address&quot;&gt;Wikipedia article on email addresses&lt;/a&gt;&#xA;for additional information." ilk="function" line="31" lineend="33" name="email" returns="email.test()" signature="email(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="VTypes" name="this" />
            </scope>
            <variable citdl="String" doc="The error text to display when the email validation function returns false" line="38" name="emailText" />
            <variable citdl="RegExp" doc="The keystroke filter mask to be applied on email input.  See the {@link #email} method for&#xA;information about more complex email validation." line="44" name="emailMask" />
            <scope doc="The function used to validate URLs" ilk="function" line="50" lineend="52" name="url" returns="url.test()" signature="url(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="VTypes" name="this" />
            </scope>
            <variable citdl="String" doc="The error text to display when the url validation function returns false" line="57" name="urlText" />
            <scope doc="The function used to validate alpha values" ilk="function" line="63" lineend="65" name="alpha" returns="alpha.test()" signature="alpha(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="VTypes" name="this" />
            </scope>
            <variable citdl="String" doc="The error text to display when the alpha validation function returns false" line="70" name="alphaText" />
            <variable citdl="RegExp" doc="The keystroke filter mask to be applied on alpha input" line="75" name="alphaMask" />
            <scope doc="The function used to validate alphanumeric values" ilk="function" line="81" lineend="83" name="alphanum" returns="alphanum.test()" signature="alphanum(v)">
              <variable ilk="argument" name="v" />
              <variable citdl="VTypes" name="this" />
            </scope>
            <variable citdl="String" doc="The error text to display when the alphanumeric validation function returns false" line="88" name="alphanumText" />
          </variable>
          <scope ilk="class" line="20" lineend="57" name="BasicForm">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Supplies the functionality to do &quot;actions&quot; on forms and initialize Ext.form.Field types on existing markup.&#xA;&lt;br&gt;&lt;br&gt;&#xA;By default, Ext Forms are submitted through Ajax, using {@link Ext.form.Action}.&#xA;To enable normal browser submission of an Ext Form, use the {@link #standardSubmit} config option." ilk="function" line="20" lineend="57" name="BasicForm" signature="BasicForm(el, config)">
              <variable citdl="Mixed" doc="The form element or its id" ilk="argument" name="el" />
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="BasicForm" name="this" />
            </scope>
            <variable citdl="Ext.util.MixedCollection" doc="* The Ext.form.Field items in this form." line="28" name="items" />
          </scope>
          <scope ilk="class" line="22" lineend="209" name="Action">
            <scope attributes="__ctor__" doc="&lt;p&gt;The subclasses of this class provide actions to perform upon {@link Ext.form.BasicForm Form}s.&lt;/p&gt;&#xA;&lt;p&gt;Instances of this class are only created by a {@link Ext.form.BasicForm Form} when&#xA;the Form needs to perform an action such as submit or load. The Configuration options&#xA;listed for this class are set through the Form&apos;s action methods: {@link Ext.form.BasicForm#submit submit},&#xA;{@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}&lt;/p&gt;&#xA;&lt;p&gt;The instance of Action which performed the action is passed to the success&#xA;and failure callbacks of the Form&apos;s action methods ({@link Ext.form.BasicForm#submit submit},&#xA;{@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}),&#xA;and to the {@link Ext.form.BasicForm#actioncomplete actioncomplete} and&#xA;{@link Ext.form.BasicForm#actionfailed actionfailed} event handlers.&lt;/p&gt;" ilk="function" line="22" lineend="25" name="Action" signature="Action(form, options)">
              <variable ilk="argument" name="form" />
              <variable ilk="argument" name="options" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="form" line="23" name="form" />
            <variable citdl="options" line="24" name="options" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when client side validation of the Form fails&#xA;thus aborting a submit action." line="33" name="CLIENT_INVALID" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when server side validation of the Form fails&#xA;indicating that field-specific error messages have been returned in the&#xA;response&apos;s &lt;tt style=&quot;font-weight:bold&quot;&gt;errors&lt;/tt&gt; property." line="41" name="SERVER_INVALID" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when a communication error happens when attempting&#xA;to send a request to the remote server." line="48" name="CONNECT_FAILURE" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when no field values are returned in the response&apos;s&#xA;&lt;tt style=&quot;font-weight:bold&quot;&gt;data&lt;/tt&gt; property." line="55" name="LOAD_FAILURE" />
            <variable citdl="String" doc="{@link Ext.form.BasicForm.reset reset} on Action success. If specified, this happens&#xA;&lt;b&gt;before&lt;/b&gt; the {@link #success} callback is called and before the Form&apos;s&#xA;{@link Ext.form.BasicForm.actioncomplete actioncomplete} event fires." line="116" name="type" />
            <scope citdl="Object" doc="The type of failure detected. See {@link #Ext.form.Action.CLIENT_INVALID CLIENT_INVALID}, {@link #Ext.form.Action.SERVER_INVALID SERVER_INVALID},&#xA;{@link #Ext.form.Action.CONNECT_FAILURE CONNECT_FAILURE}, {@link #Ext.form.Action.LOAD_FAILURE LOAD_FAILURE}&#xA;*/// interface method" ilk="function" line="134" lineend="136" name="run" signature="run(options)">
              <variable ilk="argument" name="options" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope doc="interface method" ilk="function" line="139" lineend="141" name="success" signature="success(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope doc="interface method" ilk="function" line="144" lineend="146" name="handleResponse" signature="handleResponse(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope doc="default connection failure" ilk="function" line="149" lineend="153" name="failure" signature="failure(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="response" line="150" name="response" />
            <variable citdl="Ext.form.Action.CONNECT_FAILURE" line="151" name="failureType" />
            <scope doc="private" ilk="function" line="156" lineend="163" name="processResponse" returns="this.result" signature="processResponse(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="this.handleResponse()" line="161" name="result" />
            <scope doc="utility functions used internally" ilk="function" line="166" lineend="175" name="getUrl" returns="url" signature="getUrl(appendParams)">
              <variable ilk="argument" name="appendParams" />
              <variable citdl="Action" name="this" />
              <variable attributes="__local__ private" citdl="this.options.url" line="167" name="url" />
              <variable attributes="__local__ private" citdl="this.getParams()" line="169" name="p" />
            </scope>
            <scope doc="private" ilk="function" line="178" lineend="180" name="getMethod" signature="getMethod()">
              <variable citdl="Action" name="this" />
            </scope>
            <scope doc="private" ilk="function" line="183" lineend="196" name="getParams" returns="p" signature="getParams()">
              <variable citdl="Action" name="this" />
              <variable attributes="__local__ private" citdl="this.form.baseParams" line="184" name="bp" />
              <variable attributes="__local__ private" citdl="this.options.params" line="185" name="p" />
            </scope>
            <scope doc="private" ilk="function" line="199" lineend="208" name="createCallback" signature="createCallback(opts)">
              <variable citdl="opts" ilk="argument" name="opts" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="class" line="259" lineend="261" name="Submit">
              <scope attributes="__ctor__" doc="&lt;p&gt;A class which handles submission of data from {@link Ext.form.BasicForm Form}s&#xA;and processes the returned response.&lt;/p&gt;&#xA;&lt;p&gt;Instances of this class are only created by a {@link Ext.form.BasicForm Form} when&#xA;{@link Ext.form.BasicForm#submit submit}ting.&lt;/p&gt;&#xA;&lt;p&gt;A response packet must contain a boolean &lt;tt style=&quot;font-weight:bold&quot;&gt;success&lt;/tt&gt; property, and, optionally&#xA;an &lt;tt style=&quot;font-weight:bold&quot;&gt;errors&lt;/tt&gt; property. The &lt;tt style=&quot;font-weight:bold&quot;&gt;errors&lt;/tt&gt; property contains error&#xA;messages for invalid fields.&lt;/p&gt;&#xA;&lt;p&gt;By default, response packets are assumed to be JSON, so a typical response&#xA;packet may look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#xA;success: false,&#xA;errors: {&#xA;clientCode: &quot;Client not found&quot;,&#xA;portOfLoading: &quot;This field must not be null&quot;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Other data may be placed into the response for processing by the {@link Ext.form.BasicForm}&apos;s callback&#xA;or event handler methods. The object decoded from this JSON is available in the {@link #result} property.&lt;/p&gt;&#xA;&lt;p&gt;Alternatively, if an {@link #errorReader} is specified as an {@link Ext.data.XmlReader XmlReader}:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#xA;errorReader: new Ext.data.XmlReader({&#xA;record : &apos;field&apos;,&#xA;success: &apos;@success&apos;&#xA;}, [&#xA;&apos;id&apos;, &apos;msg&apos;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;then the results may be sent back in XML format:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#xA;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&#xA;&amp;lt;message success=&quot;false&quot;&amp;gt;&#xA;&amp;lt;errors&amp;gt;&#xA;&amp;lt;field&amp;gt;&#xA;&amp;lt;id&amp;gt;clientCode&amp;lt;/id&amp;gt;&#xA;&amp;lt;msg&amp;gt;&amp;lt;![CDATA[Code not found. &amp;lt;br /&amp;gt;&amp;lt;i&amp;gt;This is a test validation message from the server &amp;lt;/i&amp;gt;]]&amp;gt;&amp;lt;/msg&amp;gt;&#xA;&amp;lt;/field&amp;gt;&#xA;&amp;lt;field&amp;gt;&#xA;&amp;lt;id&amp;gt;portOfLoading&amp;lt;/id&amp;gt;&#xA;&amp;lt;msg&amp;gt;&amp;lt;![CDATA[Port not found. &amp;lt;br /&amp;gt;&amp;lt;i&amp;gt;This is a test validation message from the server &amp;lt;/i&amp;gt;]]&amp;gt;&amp;lt;/msg&amp;gt;&#xA;&amp;lt;/field&amp;gt;&#xA;&amp;lt;/errors&amp;gt;&#xA;&amp;lt;/message&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Other elements may be placed into the response XML for processing by the {@link Ext.form.BasicForm}&apos;s callback&#xA;or event handler methods. The XML document is available in the {@link #errorReader}&apos;s {@link Ext.data.XmlReader#xmlData xmlData} property.&lt;/p&gt;" ilk="function" line="259" lineend="261" name="Submit" signature="Submit(form, options)">
                <variable ilk="argument" name="form" />
                <variable ilk="argument" name="options" />
                <variable citdl="Submit" name="this" />
              </scope>
            </scope>
            <scope ilk="class" line="358" lineend="361" name="Load">
              <scope attributes="__ctor__" doc="&lt;p&gt;A class which handles loading of data from a server into the Fields of an {@link Ext.form.BasicForm}.&lt;/p&gt;&#xA;&lt;p&gt;Instances of this class are only created by a {@link Ext.form.BasicForm Form} when&#xA;{@link Ext.form.BasicForm#load load}ing.&lt;/p&gt;&#xA;&lt;p&gt;A response packet &lt;b&gt;must&lt;/b&gt; contain a boolean &lt;tt style=&quot;font-weight:bold&quot;&gt;success&lt;/tt&gt; property, and&#xA;a &lt;tt style=&quot;font-weight:bold&quot;&gt;data&lt;/tt&gt; property. The &lt;tt style=&quot;font-weight:bold&quot;&gt;data&lt;/tt&gt; property&#xA;contains the values of Fields to load. The individual value object for each Field&#xA;is passed to the Field&apos;s {@link Ext.form.Field#setValue setValue} method.&lt;/p&gt;&#xA;&lt;p&gt;By default, response packets are assumed to be JSON, so a typical response&#xA;packet may look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#xA;success: true,&#xA;data: {&#xA;clientName: &quot;Fred. Olsen Lines&quot;,&#xA;portOfLoading: &quot;FXT&quot;,&#xA;portOfDischarge: &quot;OSL&quot;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Other data may be placed into the response for processing the {@link Ext.form.BasicForm Form}&apos;s callback&#xA;or event handler methods. The object decoded from this JSON is available in the {@link #result} property.&lt;/p&gt;" ilk="function" line="358" lineend="361" name="Load" signature="Load(form, options)">
                <variable ilk="argument" name="form" />
                <variable ilk="argument" name="options" />
                <variable citdl="Load" name="this" />
              </scope>
              <variable citdl="this.form.reader" line="360" name="reader" />
            </scope>
            <variable citdl="Object" line="405" lineend="408" name="ACTION_TYPES">
              <variable citdl="Ext.form.Action.Load" line="406" name="load" />
              <variable citdl="Ext.form.Action.Submit" line="407" name="submit" />
            </variable>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A grouping container for {@link Ext.form.Radio} controls." line="34" name="RadioGroup" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A basic hidden field for storing hidden values in forms that need to be passed in the form submit." line="39" name="Hidden" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Basic Label field." line="61" name="Label" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.&#xA;Radio grouping is handled automatically by the browser if you give each radio in a group the same name." line="79" name="Radio" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds&#xA;support for auto-sizing." line="116" name="TextArea" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Numeric text field that provides automatic keystroke filtering and numeric validation." line="144" name="NumberField" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Provides a time input field with a time dropdown and automatic time validation.  Example usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;new Ext.form.TimeField({&#xA;minValue: &apos;9:00 AM&apos;,&#xA;maxValue: &apos;6:00 PM&apos;,&#xA;increment: 30&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="156" name="TimeField" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).&#xA;The trigger has no default action, so you must assign a function to implement the trigger click handler by&#xA;overriding {@link #onTriggerClick}. You can create a TriggerField directly, as it renders exactly like a combobox&#xA;for which you can provide a custom implementation.  For example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var trigger = new Ext.form.TriggerField();&#xA;trigger.onTriggerClick = myTriggerFn;&#xA;trigger.applyToMarkup(&apos;my-field&apos;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;However, in general you will most likely want to use TriggerField as the base class for a reusable component.&#xA;{@link Ext.form.DateField} and {@link Ext.form.ComboBox} are perfect examples of this." line="228" name="TriggerField" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Standard container used for grouping form fields." line="237" name="FieldSet" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A grouping container for {@link Ext.form.Checkbox} controls." line="243" name="CheckboxGroup" />
          <variable citdl="Ext.FormPanel" line="264" name="FormPanel" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields." line="269" name="Checkbox" />
          <variable citdl="Ext.extend()" doc="TwinTriggerField is not a public class to be used directly." line="277" name="TwinTriggerField" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Provides a date input field with a {@link Ext.DatePicker} dropdown and automatic date validation." line="364" name="DateField" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Basic text field.  Can be used as a direct replacement for traditional text inputs, or as the base&#xA;class for more sophisticated input controls (like {@link Ext.form.TextArea} and {@link Ext.form.ComboBox})." line="375" name="TextField" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Base class for form fields that provides default event handling, sizing, value handling and other functionality." line="563" name="Field" />
          <variable citdl="Object" line="565" lineend="642" name="MessageTargets">
            <variable citdl="Object" line="566" lineend="577" name="qtip">
              <scope ilk="function" line="567" lineend="573" name="mark" signature="mark(f)">
                <variable ilk="argument" name="f" />
                <variable citdl="qtip" name="this" />
              </scope>
              <variable citdl="msg" line="568" name="qtip" />
              <variable citdl="String" line="569" name="qclass" />
              <scope ilk="function" line="574" lineend="576" name="clear" signature="clear(f)">
                <variable ilk="argument" name="f" />
                <variable citdl="qtip" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" line="578" lineend="585" name="title">
              <scope ilk="function" line="579" lineend="581" name="mark" signature="mark(f)">
                <variable ilk="argument" name="f" />
                <variable citdl="title" name="this" />
              </scope>
              <variable citdl="msg" line="580" name="title" />
              <scope ilk="function" line="582" lineend="584" name="clear" signature="clear(f)">
                <variable ilk="argument" name="f" />
                <variable citdl="title" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" line="586" lineend="607" name="under">
              <scope ilk="function" line="587" lineend="599" name="mark" signature="mark(f)">
                <variable ilk="argument" name="f" />
                <variable citdl="under" name="this" />
                <variable attributes="__local__ private" citdl="this.getErrorCt()" line="589" name="elp" />
              </scope>
              <variable citdl="msg" doc="field has no container el" line="591" name="title" />
              <variable citdl="elp.createChild()" line="594" name="errorEl" />
              <scope ilk="function" line="600" lineend="606" name="clear" signature="clear(f)">
                <variable ilk="argument" name="f" />
                <variable citdl="under" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" line="608" lineend="633" name="side">
              <scope ilk="function" line="609" lineend="623" name="mark" signature="mark(f)">
                <variable ilk="argument" name="f" />
                <variable citdl="side" name="this" />
                <variable attributes="__local__ private" citdl="this.getErrorCt()" line="611" name="elp" />
              </scope>
              <variable citdl="msg" doc="field has no container el" line="613" name="title" />
              <variable citdl="elp.createChild()" line="616" name="errorIcon" />
              <variable citdl="msg" line="619" name="qtip" />
              <variable citdl="String" line="620" name="qclass" />
              <scope ilk="function" line="624" lineend="632" name="clear" signature="clear(f)">
                <variable ilk="argument" name="f" />
                <variable citdl="side" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" line="634" lineend="641" name="around">
              <scope ilk="function" line="635" lineend="637" name="mark" signature="mark(f)">
                <variable ilk="argument" name="f" />
                <variable citdl="around" name="this" />
              </scope>
              <scope ilk="function" line="638" lineend="640" name="clear" signature="clear(f)">
                <variable ilk="argument" name="f" />
                <variable citdl="around" name="this" />
              </scope>
            </variable>
          </variable>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A combobox control with support for autocomplete, remote-loading, paging and many other features." line="990" name="ComboBox" />
          <variable citdl="Ext.extend()" line="1139" name="HtmlEditor" />
        </variable>
        <scope citdl="Function" doc="A reusable empty function" ilk="function" line="117" lineend="117" name="emptyFn" signature="emptyFn()">
          <variable citdl="Ext" name="this" />
        </scope>
        <variable line="117" name="type()" />
        <variable citdl="Object" line="119" lineend="119" name="_timers" />
        <scope ilk="function" line="121" lineend="124" name="time" signature="time(name)">
          <variable citdl="name" ilk="argument" name="name" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Object" line="121" name="Element">
          <variable citdl="Ext.util.TextMetrics.measure" doc="backwards compat" line="121" name="measureText" />
          <variable citdl="Ext.DomQuery.select" line="344" name="selectorFunction" />
          <scope ilk="function" line="347" lineend="361" name="select" returns="Ext.CompositeElementLite" signature="select(selector, unique, root)">
            <variable ilk="argument" name="selector" />
            <variable ilk="argument" name="unique" />
            <variable ilk="argument" name="root" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element.selectorFunction()" line="348" name="els" />
          </scope>
        </variable>
        <scope doc="Copies all the properties of config to obj if they don&apos;t already exist." ilk="function" line="125" lineend="132" name="applyIf" returns="Object" signature="applyIf(o, c)">
          <variable ilk="argument" name="o" />
          <variable ilk="argument" name="c" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope ilk="function" line="126" lineend="135" name="timeEnd" returns="v" signature="timeEnd(name, printResults)">
          <variable citdl="name" ilk="argument" name="name" />
          <variable ilk="argument" name="printResults" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Date" line="127" name="t" />
          <variable attributes="__local__ private" citdl="String.format()" line="129" name="v" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized container representing the viewable application area (the browser viewport).&#xA;&lt;p&gt; The Viewport renders itself to the document body, and automatically sizes itself to the size of&#xA;the browser viewport and manages window resizing. There may only be one Viewport created&#xA;in a page. Inner layouts are available by virtue of the fact that all {@link Ext.Panel Panel}s&#xA;added to the Viewport, either through its {@link #items}, or through the items, or the {@link #add}&#xA;method of any of its child Panels may themselves have a layout.&lt;/p&gt;&#xA;&lt;p&gt;The Viewport does not provide scrolling, so child Panels within the Viewport should provide&#xA;for scrolling if needed using the {@link #autoScroll} config.&lt;/p&gt;&#xA;Example showing a classic application border layout :&lt;pre&gt;&lt;code&gt;&#xA;new Ext.Viewport({&#xA;layout: &apos;border&apos;,&#xA;items: [{&#xA;region: &apos;north&apos;,&#xA;html: &apos;&amp;lt;h1 class=&quot;x-panel-header&quot;&gt;Page Title&amp;lt;/h1&gt;&apos;,&#xA;autoHeight: true,&#xA;border: false,&#xA;margins: &apos;0 0 5 0&apos;&#xA;}, {&#xA;region: &apos;west&apos;,&#xA;collapsible: true,&#xA;title: &apos;Navigation&apos;,&#xA;xtype: &apos;treepanel&apos;,&#xA;width: 200,&#xA;autoScroll: true,&#xA;split: true,&#xA;loader: new Ext.tree.TreeLoader(),&#xA;root: new Ext.tree.AsyncTreeNode({&#xA;expanded: true,&#xA;children: [{&#xA;text: &apos;Menu Option 1&apos;,&#xA;leaf: true&#xA;}, {&#xA;text: &apos;Menu Option 2&apos;,&#xA;leaf: true&#xA;}, {&#xA;text: &apos;Menu Option 3&apos;,&#xA;leaf: true&#xA;}),&#xA;rootVisible: false,&#xA;listeners: {&#xA;click: function(n) {&#xA;Ext.Msg.alert(&apos;Navigation Tree Click&apos;, &apos;You clicked: &quot;&apos; + n.attributes.text + &apos;&quot;&apos;);&#xA;}, {&#xA;region: &apos;center&apos;,&#xA;xtype: &apos;tabpanel&apos;,&#xA;items: {&#xA;title: &apos;Default Tab&apos;,&#xA;html: &apos;The first tab\&apos;s content. Others may be added dynamically&apos;&#xA;}, {&#xA;region: &apos;south&apos;,&#xA;title: &apos;Information&apos;,&#xA;collapsible: true,&#xA;html: &apos;Information goes here&apos;,&#xA;split: true,&#xA;height: 100,&#xA;minHeight: 100&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="136" name="Viewport" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: This is the base class for {@link Ext.QuickTip} and {@link Ext.Tooltip} that provides the basic layout and&#xA;positioning that all tip-based classes require. This class can be used directly for simple, statically-positioned&#xA;tips that are displayed programmatically, or it can be extended to provide custom tip implementations." line="136" name="Tip" />
        <variable citdl="Ext.util.JSON.encode" doc="Shorthand for {@link Ext.util.JSON#encode}" line="141" name="encode" />
        <variable citdl="Ext.util.JSON.decode" doc="Shorthand for {@link Ext.util.JSON#decode}" line="149" name="decode" />
        <scope doc="Applies event listeners to elements by selectors when the document is ready.&#xA;The event name is specified with an @ suffix.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;Ext.addBehaviors({&#xA;// add a listener for click on all anchors in element with id foo&#xA;&apos;#foo a@click&apos; : function(e, t){&#xA;// do something&#xA;// add the same listener to multiple selectors (separated by comma BEFORE the @)&#xA;&apos;#foo a, #bar span.some-class@mouseover&apos; : function(){&#xA;// do something&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="152" lineend="171" name="addBehaviors" signature="addBehaviors(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Object" line="159" lineend="159" name="cache" />
          <variable attributes="__local__ private" citdl="b.split()" line="161" name="parts" />
          <variable attributes="__local__ private" citdl="parts[0]" doc="for Object prototype breakers" line="163" name="s" />
        </scope>
        <variable citdl="Ext.util.TaskRunner" doc="A static {@link Ext.util.TaskRunner} instance that can be used to start and stop arbitrary tasks.  See&#xA;{@link Ext.util.TaskRunner} for supported methods and task config properties.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// Start a simple clock task that updates a div once per second&#xA;var task = {&#xA;run: function(){&#xA;Ext.fly(&apos;clock&apos;).update(new Date().format(&apos;g:i:s A&apos;));&#xA;interval: 1000 //1 second&#xA;Ext.TaskMgr.start(task);&#xA;&lt;/code&gt;&lt;/pre&gt;" line="157" name="TaskMgr" />
        <scope ilk="class" line="171" lineend="225" name="XTemplate">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;A template class that supports advanced functionality like autofilling arrays, conditional processing with&#xA;basic comparison operators, sub-templates, basic math function support, special built-in template variables,&#xA;inline code execution and more.  XTemplate also provides the templating mechanism built into {@link Ext.DataView}.&lt;/p&gt;&#xA;&lt;p&gt;XTemplate supports many special tags and built-in operators that aren&apos;t defined as part of the API, but are&#xA;supported in the templates that can be created.  The following examples demonstrate all of the supported features.&#xA;This is the data object used for reference in each code example:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var data = {&#xA;name: &apos;Jack Slocum&apos;,&#xA;title: &apos;Lead Developer&apos;,&#xA;company: &apos;Ext JS, LLC&apos;,&#xA;email: &apos;jack@extjs.com&apos;,&#xA;address: &apos;4 Red Bulls Drive&apos;,&#xA;city: &apos;Cleveland&apos;,&#xA;state: &apos;Ohio&apos;,&#xA;zip: &apos;44102&apos;,&#xA;drinks: [&apos;Red Bull&apos;, &apos;Coffee&apos;, &apos;Water&apos;],&#xA;kids: [{&#xA;name: &apos;Sara Grace&apos;,&#xA;age:3&#xA;},{&#xA;name: &apos;Zachary&apos;,&#xA;age:2&#xA;},{&#xA;name: &apos;John James&apos;,&#xA;age:0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;b&gt;Auto filling of arrays and scope switching&lt;/b&gt;&lt;br/&gt;Using the &lt;tt&gt;tpl&lt;/tt&gt; tag and the &lt;tt&gt;for&lt;/tt&gt; operator,&#xA;you can switch to the scope of the object specified by &lt;tt&gt;for&lt;/tt&gt; and access its members to populate the template.&#xA;If the variable in &lt;tt&gt;for&lt;/tt&gt; is an array, it will auto-fill, repeating the template block inside the &lt;tt&gt;tpl&lt;/tt&gt;&#xA;tag for each item in the array:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Title: {title}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Company: {company}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;{name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;b&gt;Access to parent object from within sub-template scope&lt;/b&gt;&lt;br/&gt;When processing a sub-template, for example while&#xA;looping through a child array, you can access the parent object&apos;s members via the &lt;tt&gt;parent&lt;/tt&gt; object:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&apos;,  // &lt;-- Note that the &amp;gt; is encoded&#xA;&apos;&amp;lt;p&gt;{name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Dad: {parent.name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;b&gt;Array item index and basic math support&lt;/b&gt; &lt;br/&gt;While processing an array, the special variable &lt;tt&gt;{#}&lt;/tt&gt;&#xA;will provide the current array index + 1 (starts at 1, not 0). Templates also support the basic math operators&#xA;+ - * and / that can be applied directly on numeric data values:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&apos;,  // &lt;-- Note that the &amp;gt; is encoded&#xA;&apos;&amp;lt;p&gt;{#}: {name}&amp;lt;/p&gt;&apos;,  // &lt;-- Auto-number each item&#xA;&apos;&amp;lt;p&gt;In 5 Years: {age+5}&amp;lt;/p&gt;&apos;,  // &lt;-- Basic math&#xA;&apos;&amp;lt;p&gt;Dad: {parent.name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;b&gt;Auto-rendering of flat arrays&lt;/b&gt; &lt;br/&gt;Flat arrays that contain values (and not objects) can be auto-rendered&#xA;using the special &lt;tt&gt;{.}&lt;/tt&gt; variable inside a loop.  This variable will represent the value of&#xA;the array at the current index:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;{name}\&apos;s favorite beverages:&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;tpl for=&quot;drinks&quot;&gt;&apos;,&#xA;&apos;&amp;lt;div&gt; - {.}&amp;lt;/div&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;b&gt;Basic conditional logic&lt;/b&gt; &lt;br/&gt;Using the &lt;tt&gt;tpl&lt;/tt&gt; tag and the &lt;tt&gt;if&lt;/tt&gt;&#xA;operator you can provide conditional checks for deciding whether or not to render specific parts of the template.&#xA;Note that there is no &lt;tt&gt;else&lt;/tt&gt; operator &amp;mdash; if needed, you should use two opposite &lt;tt&gt;if&lt;/tt&gt; statements.&#xA;Properly-encoded attributes are required as seen in the following example:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&apos;,  // &lt;-- Note that the &amp;gt; is encoded&#xA;&apos;&amp;lt;p&gt;{name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;b&gt;Ability to execute arbitrary inline code&lt;/b&gt; &lt;br/&gt;In an XTemplate, anything between {[ ... ]}  is considered&#xA;code to be executed in the scope of the template. There are some special variables available in that code:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;&lt;tt&gt;values&lt;/tt&gt;&lt;/b&gt;: The values in the current scope. If you are using scope changing sub-templates, you&#xA;can change what &lt;tt&gt;values&lt;/tt&gt; is.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;&lt;tt&gt;parent&lt;/tt&gt;&lt;/b&gt;: The scope (values) of the ancestor template.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;&lt;tt&gt;xindex&lt;/tt&gt;&lt;/b&gt;: If you are in a looping template, the index of the loop you are in (1-based).&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;&lt;tt&gt;xcount&lt;/tt&gt;&lt;/b&gt;: If you are in a looping template, the total length of the array you are looping.&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;&lt;tt&gt;fm&lt;/tt&gt;&lt;/b&gt;: An alias for &lt;tt&gt;Ext.util.Format&lt;/tt&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;This example demonstrates basic row striping using an inline code block and the &lt;tt&gt;xindex&lt;/tt&gt; variable:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Company: {[values.company.toUpperCase() + &quot;, &quot; + values.title]}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;div class=&quot;{[xindex % 2 === 0 ? &quot;even&quot; : &quot;odd&quot;]}&quot;&gt;&apos;,&#xA;&apos;{name}&apos;,&#xA;&apos;&amp;lt;/div&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;b&gt;Template member functions&lt;/b&gt; &lt;br/&gt;One or more member functions can be defined directly on the config&#xA;object passed into the XTemplate constructor for more complex processing:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;this.isGirl(name)&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Girl: {name} - {age}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;this.isGirl(name) == false&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Boy: {name} - {age}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;this.isBaby(age)&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;{name} is a baby!&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;, {&#xA;isGirl: function(name){&#xA;return name == &apos;Sara Grace&apos;;&#xA;isBaby: function(age){&#xA;return age &lt; 1;&#xA;});&#xA;tpl.overwrite(panel.body, data);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="171" lineend="225" name="XTemplate" signature="XTemplate()">
            <variable citdl="XTemplate" name="this" />
            <variable attributes="__local__ private" citdl="this.html" line="173" name="s" />
            <variable attributes="__local__ private" line="177" name="re" />
            <variable attributes="__local__ private" line="179" name="nameRe" />
            <variable attributes="__local__ private" line="180" name="ifRe" />
            <variable attributes="__local__ private" line="181" name="execRe" />
            <variable attributes="__local__ private" line="182" name="m" />
            <variable attributes="__local__ private" citdl="Number" line="182" name="id" />
            <variable attributes="__local__ private" citdl="Array" line="183" name="tpls" />
            <variable attributes="__local__ private" citdl="m[0].match()" line="186" name="m2" />
            <variable attributes="__local__ private" citdl="m[0].match()" line="187" name="m3" />
            <variable attributes="__local__ private" citdl="m[0].match()" line="188" name="m4" />
            <variable attributes="__local__ private" citdl="m3" line="189" name="exp" />
            <variable attributes="__local__ private" citdl="Function" line="189" name="exec" />
            <variable attributes="__local__ private" citdl="Function" line="189" name="fn" />
            <variable attributes="__local__ private" citdl="m2" line="190" name="name" />
          </scope>
          <variable citdl="tpls[tpls.length-1]" line="223" name="master" />
          <variable citdl="tpls" line="224" name="tpls" />
          <scope attributes="__static__" doc="STATIC: Creates a template from the passed element&apos;s value (&lt;i&gt;display:none&lt;/i&gt; textarea, preferred) or innerHTML." ilk="function" line="353" lineend="356" name="from" returns="Ext.Template" signature="from(el)">
            <variable citdl="String/HTMLElement" doc="A DOM element or its id" ilk="argument" name="el" />
            <variable citdl="XTemplate" name="this" />
          </scope>
        </scope>
        <scope doc="Generates unique ids. If the element already has an id, it is unchanged" ilk="function" line="179" lineend="184" name="id" returns="String" signature="id(el, prefix)">
          <variable citdl="Mixed" doc="(optional) The element to generate an id for" ilk="argument" name="el" />
          <variable citdl="String" doc="(optional) Id prefix (defaults &quot;ext-gen&quot;)" ilk="argument" name="prefix" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="prefix" line="182" name="id" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global&#xA;{@link Ext.QuickTips} instance.  See the QuickTips class header for additional usage details and examples." line="180" name="QuickTip" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized SplitButton that contains a menu of {@link Ext.menu.CheckItem} elements.  The button automatically&#xA;cycles through each menu item on click, raising the button&apos;s {@link #change} event (or calling the button&apos;s&#xA;{@link #changeHandler} function, if supplied) for the active menu item. Clicking on the arrow section of the&#xA;button displays the dropdown menu just like a normal SplitButton.  Example usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var btn = new Ext.CycleButton({&#xA;showText: true,&#xA;prependText: &apos;View as &apos;,&#xA;items: [{&#xA;text:&apos;text only&apos;,&#xA;iconCls:&apos;view-text&apos;,&#xA;checked:true&#xA;},{&#xA;text:&apos;HTML&apos;,&#xA;iconCls:&apos;view-html&apos;&#xA;}],&#xA;changeHandler:function(btn, item){&#xA;Ext.Msg.alert(&apos;Change View&apos;, item.text);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="183" name="CycleButton" />
        <variable citdl="Ext.WindowGroup" doc="The default global window group that is available automatically.  To have more than one group of windows&#xA;with separate z-order stacks, create additional instances of {@link Ext.WindowGroup} as needed." line="189" name="WindowMgr" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A split button that provides a built-in dropdown arrow that can fire an event separately from the default&#xA;click event of the button.  Typically this would be used to display a dropdown menu that provides additional&#xA;options to the primary button action, but any custom handler can provide the arrowclick implementation.  Example usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// display a dropdown menu:&#xA;new Ext.SplitButton({&#xA;renderTo: &apos;button-ct&apos;, // the container id&#xA;text: &apos;Options&apos;,&#xA;handler: optionsHandler, // handle a click on the button itself&#xA;menu: new Ext.menu.Menu({&#xA;items: [&#xA;// these items will render as dropdown menu items when the arrow is clicked:&#xA;{text: &apos;Item 1&apos;, handler: item1Handler},&#xA;{text: &apos;Item 2&apos;, handler: item2Handler}&#xA;});&#xA;// Instead of showing a menu, you provide any type of custom&#xA;// functionality you want when the dropdown arrow is clicked:&#xA;new Ext.SplitButton({&#xA;renderTo: &apos;button-ct&apos;,&#xA;text: &apos;Options&apos;,&#xA;handler: optionsHandler,&#xA;arrowHandler: myCustomHandler&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="192" name="SplitButton" />
        <variable citdl="Ext.SplitButton" doc="backwards compat" line="195" name="MenuButton" />
        <variable doc="History management component that allows you to register arbitrary tokens that signify application&#xA;history state on navigation actions.  You can then handle the history {@link #change} event in order&#xA;to reset your application UI to the appropriate state when the user navigates forward or backward through&#xA;the browser history stack." line="204" name="History" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A standard tooltip implementation for providing additional information when hovering over a target element." line="207" name="ToolTip" />
        <variable citdl="Function" doc="Extends one class with another class and optionally overrides members with the passed literal. This class&#xA;also adds the function &quot;override()&quot; to the class that can be used to override&#xA;members on an instance.&#xA;* &lt;p&gt;&#xA;This function also supports a 2-argument call in which the subclass&apos;s constructor is&#xA;not passed as an argument. In this form, the parameters are as follows:&lt;/p&gt;&lt;p&gt;&#xA;&lt;div class=&quot;mdetail-params&quot;&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;superclass&lt;/code&gt;&#xA;&lt;div class=&quot;sub-desc&quot;&gt;The class being extended&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;overrides&lt;/code&gt;&#xA;&lt;div class=&quot;sub-desc&quot;&gt;A literal with members which are copied into the subclass&apos;s&#xA;prototype, and are therefore shared among all instances of the new class.&lt;p&gt;&#xA;This may contain a special member named &lt;tt&gt;&lt;b&gt;constructor&lt;/b&gt;&lt;/tt&gt;. This is used&#xA;to define the constructor of the new class, and is returned. If this property is&#xA;&lt;i&gt;not&lt;/i&gt; specified, a constructor is generated and returned which just calls the&#xA;superclass&apos;s constructor passing on its parameters.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&#xA;For example, to create a subclass of the Ext GridPanel:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;MyGridPanel = Ext.extend(Ext.grid.GridPanel, {&#xA;constructor: function(config) {&#xA;// Your preprocessing here&#xA;MyGridPanel.superclass.constructor.apply(this, arguments);&#xA;// Your postprocessing here&#xA;yourMethod: function() {&#xA;// etc.&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/p&gt;" line="226" name="extend" />
        <scope ilk="class" line="254" lineend="345" name="CompositeElementLite">
          <scope attributes="__ctor__" doc="Flyweight composite class. Reuses the same Ext.Element for element operations.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var els = Ext.select(&quot;#some-el div.some-class&quot;);&#xA;// or select directly from an existing element&#xA;var el = Ext.get(&apos;some-el&apos;);&#xA;el.select(&apos;div.some-class&apos;);&#xA;els.setWidth(100); // all elements become 100 width&#xA;els.hide(true); // all elements fade out and hide&#xA;// or&#xA;els.setWidth(100).hide(true);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&#xA;&lt;b&gt;NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element&#xA;actions will be performed on all the elements in this collection.&lt;/b&gt;" ilk="function" line="254" lineend="257" name="CompositeElementLite" signature="CompositeElementLite(els)">
            <variable ilk="argument" name="els" />
            <variable citdl="CompositeElementLite" name="this" />
          </scope>
          <variable citdl="Ext.Element.Flyweight" line="256" name="el" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Standard form container.&#xA;&lt;p&gt;&lt;b&gt;Although they are not listed, this class also accepts all the config options required to configure its internal {@link Ext.form.BasicForm}&lt;/b&gt;&lt;/p&gt;&#xA;&lt;p&gt;The BasicForm is configured using the {@link #initialConfig} of the FormPanel - that is the configuration object passed to the constructor.&#xA;This means that if you subclass FormPanel, and you wish to configure the BasicForm, you will need to insert any configuration options&#xA;for the BasicForm into the &lt;tt&gt;&lt;b&gt;initialConfig&lt;/b&gt;&lt;/tt&gt; property. Applying BasicForm configuration settings to &lt;b&gt;&lt;tt&gt;this&lt;/tt&gt;&lt;/b&gt; will&#xA;not affect the BasicForm&apos;s configuration.&lt;/p&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;FormPanel uses a {@link Ext.layout.FormLayout} internally, and that is required for fields and labels to work correctly&#xA;within the FormPanel&apos;s layout.  To nest additional layout styles within a FormPanel, you should nest additional Panels&#xA;or other containers that can provide additional layout functionality. &lt;b&gt;You should not override FormPanel&apos;s layout.&lt;/b&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;By default, Ext Forms are submitted through Ajax, using {@link Ext.form.Action}.&#xA;To enable normal browser submission of the Ext Form contained in this FormPanel,&#xA;override the Form&apos;s onSubmit, and submit methods:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;&#xA;var myForm = new Ext.form.FormPanel({&#xA;onSubmit: Ext.emptyFn,&#xA;submit: function() {&#xA;this.getForm().getEl().dom.submit();&#xA;});&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;" line="261" name="FormPanel" />
        <scope doc="Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.&#xA;Usage:&lt;pre&gt;&lt;code&gt;&#xA;Ext.override(MyClass, {&#xA;newMethod1: function(){&#xA;// etc.&#xA;newMethod2: function(foo){&#xA;// etc.&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="276" lineend="283" name="override" signature="override(origclass, overrides)">
          <variable citdl="Object" doc="The class to override" ilk="argument" name="origclass" />
          <variable citdl="Object" doc="The list of functions to add to origClass.  This should be specified as an object literal&#xA;containing one or more methods." ilk="argument" name="overrides" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="origclass.prototype" line="278" name="p" />
        </scope>
        <variable citdl="Ext.extend()" doc="&lt;p&gt;An updateable progress bar component.  The progress bar supports two different modes: manual and automatic.&lt;/p&gt;&#xA;&lt;p&gt;In manual mode, you are responsible for showing, updating (via {@link #updateProgress}) and clearing the&#xA;progress bar as needed from your own code.  This method is most appropriate when you want to show progress&#xA;throughout an operation that has predictable points of interest at which you can update the control.&lt;/p&gt;&#xA;&lt;p&gt;In automatic mode, you simply call {@link #wait} and let the progress bar run indefinitely, only clearing it&#xA;once the operation is complete.  You can optionally have the progress bar wait for a specific amount of time&#xA;and then clear itself.  Automatic mode is most appropriate for timed operations or asymchronous operations in&#xA;which you have no need for indicating intermediate progress.&lt;/p&gt;" line="283" name="ProgressBar" />
        <scope doc="Creates namespaces to be used for scoping variables and classes so that they are not global.  Usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;Ext.namespace(&apos;Company&apos;, &apos;Company.data&apos;);&#xA;Company.Widget = function() { ... }&#xA;Company.data.CustomStore = function(config) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="297" lineend="308" name="namespace" signature="namespace()">
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="arguments" line="298" name="a" />
          <variable attributes="__local__ private" citdl="d[0]" line="298" name="rt" />
          <variable attributes="__local__ private" citdl="a[i].split()" line="298" name="d" />
          <variable attributes="__local__ private" line="298" name="i" />
          <variable attributes="__local__ private" line="298" name="j" />
          <variable attributes="__local__ private" citdl="o[d[j]]" line="298" name="o" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized toolbar that is bound to a {@link Ext.data.Store} and provides automatic paging controls." line="310" name="PagingToolbar" />
        <scope doc="Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return &quot;foo=1&amp;bar=2&quot;.  Optionally, property values can be arrays, instead of keys and the resulting string that&apos;s returned will contain a name/value pair for each array value." ilk="function" line="315" lineend="339" name="urlEncode" returns="String" signature="urlEncode(o)">
          <variable citdl="Object" ilk="argument" name="o" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="319" name="buf" />
          <variable attributes="__local__ private" citdl="o[key]" line="321" name="ov" />
          <variable attributes="__local__ private" citdl="encodeURIComponent()" line="321" name="k" />
          <variable attributes="__local__ private" line="322" name="type" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Base class for any visual {@link Ext.Component} that uses a box container.  BoxComponent provides automatic box&#xA;model adjustments for sizing and positioning and will work correctly withnin the Component rendering model.  All&#xA;container classes should subclass BoxComponent so that they will work consistently when nested within other Ext&#xA;layout containers." line="338" name="BoxComponent" />
        <scope doc="Takes an encoded URL and and converts it to an object. e.g. Ext.urlDecode(&quot;foo=1&amp;bar=2&quot;); would return {foo: 1, bar: 2} or Ext.urlDecode(&quot;foo=1&amp;bar=2&amp;bar=3&amp;bar=4&quot;, true); would return {foo: 1, bar: [2, 3, 4]}." ilk="function" line="347" lineend="372" name="urlDecode" returns="Object" signature="urlDecode(string, overwrite)">
          <variable citdl="String" ilk="argument" name="string" />
          <variable citdl="Boolean" doc="(optional) Items of the same name will overwrite previous values instead of creating an an array (Defaults to false)." ilk="argument" name="overwrite" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Object" line="351" lineend="351" name="obj" />
          <variable attributes="__local__ private" citdl="string.split()" line="352" name="pairs" />
          <variable attributes="__local__ private" citdl="pairs[i].split()" line="353" name="pair" />
          <variable attributes="__local__ private" citdl="decodeURIComponent()" line="353" name="name" />
          <variable attributes="__local__ private" citdl="decodeURIComponent()" line="353" name="value" />
        </scope>
        <variable citdl="Ext.extend()" doc="Slider which supports vertical or horizontal orientation, keyboard adjustments,&#xA;configurable snapping, axis clicking and animation. Can be added as an item to&#xA;any container. Example usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;new Ext.Slider({&#xA;renderTo: Ext.getBody(),&#xA;width: 200,&#xA;value: 50,&#xA;increment: 10,&#xA;minValue: 0,&#xA;maxValue: 100&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="353" name="Slider" />
        <variable citdl="Ext.Element.select" doc="Selects elements based on the passed CSS selector to enable working on them as 1." line="371" name="select" />
        <scope doc="Iterates an array calling the passed function with each item, stopping if your function returns false. If the&#xA;passed array is not really an array, your function is called once with it.&#xA;The supplied function is called with (Object item, Number index, Array allItems)." ilk="function" line="382" lineend="389" name="each" returns="i" signature="each(array, fn, scope)">
          <variable citdl="Array/NodeList/Mixed" ilk="argument" name="array" />
          <variable citdl="Function" ilk="argument" name="fn" />
          <variable citdl="Object" ilk="argument" name="scope" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="deprecated" ilk="function" line="392" lineend="405" name="combine" returns="r" signature="combine()">
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="arguments" line="393" name="as" />
          <variable attributes="__local__ private" citdl="Array" line="393" name="r" />
          <variable attributes="__local__ private" citdl="as.length" line="393" name="l" />
          <variable attributes="__local__ private" citdl="as[i]" line="395" name="a" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: &lt;p&gt;Basic status bar component that can be used as the bottom toolbar of any {@link Ext.Panel}.  In addition to&#xA;supporting the standard {@link Ext.Toolbar} interface for adding buttons, menus and other items, the StatusBar&#xA;provides a greedy status element that can be aligned to either side and has convenient methods for setting the&#xA;status text and icon.  You can also indicate that something is processing using the {@link #showBusy} method.&lt;/p&gt;&#xA;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Although StatusBar supports xtype:&apos;statusbar&apos;, at this time Ext.Toolbar (the base class) does&#xA;not support xtype.  For this reason, if you are adding Toolbar items into the StatusBar you must declare it&#xA;using the &quot;new StatusBar()&quot; syntax for the items to render correctly.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;new Ext.Panel({&#xA;title: &apos;StatusBar&apos;,&#xA;// etc.&#xA;bbar: new Ext.StatusBar({&#xA;id: &apos;my-status&apos;,&#xA;// defaults to use when the status is cleared:&#xA;defaultText: &apos;Default status text&apos;,&#xA;defaultIconCls: &apos;default-icon&apos;,&#xA;// values to set initially:&#xA;text: &apos;Ready&apos;,&#xA;iconCls: &apos;ready-icon&apos;,&#xA;// any standard Toolbar items:&#xA;items: [{&#xA;text: &apos;A Button&apos;&#xA;}, &apos;-&apos;, &apos;Plain Text&apos;]&#xA;});&#xA;// Update the status bar later in code:&#xA;var sb = Ext.getCmp(&apos;my-status&apos;);&#xA;sb.setStatus({&#xA;text: &apos;OK&apos;,&#xA;iconCls: &apos;ok-icon&apos;,&#xA;clear: true // auto-clear after a set interval&#xA;});&#xA;// Set the status bar to show that something is processing:&#xA;sb.showBusy();&#xA;// processing....&#xA;sb.clearStatus(); // once completeed&#xA;&lt;/code&gt;&lt;/pre&gt;" line="405" name="StatusBar" />
        <scope doc="Escapes the passed string for use in a regular expression" ilk="function" line="412" lineend="414" name="escapeRe" returns="String" signature="escapeRe(s)">
          <variable ilk="argument" name="s" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="internal" ilk="function" line="417" lineend="425" name="callback" signature="callback(cb, scope, args, delay)">
          <variable ilk="argument" name="cb" />
          <variable ilk="argument" name="scope" />
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="delay" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Return the dom node for the passed string (id), dom node, or Ext.Element" ilk="function" line="432" lineend="437" name="getDom" returns="el.dom" signature="getDom(el)">
          <variable citdl="Mixed" ilk="argument" name="el" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Ext.EventManager.onDocumentReady" doc="Fires when the document is ready (before onload and before images are loaded).  Shorthand of {@link Ext.EventManager#onDocumentReady}." line="440" name="onReady" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Provides AJAX-style update capabilities for Element objects.  Updater can be used to {@link #update} an Element once,&#xA;or you can use {@link #startAutoRefresh} to set up an auto-updating Element on a specific interval.&lt;br&gt;&lt;br&gt;&#xA;Usage:&lt;br&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// Get it from a Ext.Element object&#xA;var el = Ext.get(&quot;foo&quot;);&#xA;var mgr = el.getUpdater();&#xA;mgr.update({&#xA;url: &quot;http://myserver.com/index.php&quot;,&#xA;params: {&#xA;param1: &quot;foo&quot;,&#xA;param2: &quot;bar&quot;&#xA;});&#xA;...&#xA;mgr.formUpdate(&quot;myFormId&quot;, &quot;http://myserver.com/index.php&quot;);&#xA;&lt;br&gt;&#xA;// or directly (returns the same Updater instance)&#xA;var mgr = new Ext.Updater(&quot;myElementId&quot;);&#xA;mgr.startAutoRefresh(60, &quot;http://myserver.com/index.php&quot;);&#xA;mgr.on(&quot;update&quot;, myFcnNeedsToKnow);&#xA;&lt;br&gt;&#xA;// short handed call directly from the element object&#xA;Ext.get(&quot;foo&quot;).load({&#xA;url: &quot;bar.php&quot;,&#xA;scripts: true,&#xA;params: &quot;param1=foo&amp;amp;param2=bar&quot;,&#xA;text: &quot;Loading Foo...&quot;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" line="442" name="Updater" />
        <scope doc="Returns the current HTML document object as an {@link Ext.Element}." ilk="function" line="443" lineend="445" name="getDoc" returns="Ext.get()" signature="getDoc()">
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Returns the current document body as an {@link Ext.Element}." ilk="function" line="451" lineend="453" name="getBody" returns="Ext.get()" signature="getBody()">
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Shorthand for {@link Ext.ComponentMgr#get}" ilk="function" line="460" lineend="462" name="getCmp" returns="Ext.ComponentMgr.get()" signature="getCmp(id)">
          <variable citdl="String" ilk="argument" name="id" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Utility method for validating that a value is numeric, returning the specified default value if it is not." ilk="function" line="470" lineend="475" name="num" returns="Number" signature="num(v, defaultValue)">
          <variable ilk="argument" name="v" />
          <variable citdl="Number" doc="The value to return if the original value is non-numeric" ilk="argument" name="defaultValue" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Attempts to destroy any objects passed to it by removing all event listeners, removing them from the&#xA;DOM (if applicable) and calling their destroy functions (if available).  This method is primarily&#xA;intended for arguments of type {@link Ext.Element} and {@link Ext.Component}, but any subclass of&#xA;{@link Ext.util.Observable} can be passed in.  Any number of elements and/or components can be&#xA;passed into this function in a single call as separate arguments." ilk="function" line="487" lineend="500" name="destroy" signature="destroy()">
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="a[i]" line="489" name="as" />
        </scope>
        <variable citdl="Ext.EventObjectImpl" doc="EventObject exposes the Yahoo! UI Event functionality directly on the object&#xA;passed to your event handler. It exists mostly for convenience. It also fixes the annoying null checks automatically to cleanup your code&#xA;Example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;function handleClick(e){ // e is not a standard event object, it is a Ext.EventObject&#xA;e.preventDefault();&#xA;var target = e.getTarget();&#xA;...&#xA;var myDiv = Ext.get(&quot;myDiv&quot;);&#xA;myDiv.on(&quot;click&quot;, handleClick);&#xA;//or&#xA;Ext.EventManager.on(&quot;myDiv&quot;, &apos;click&apos;, handleClick);&#xA;Ext.EventManager.addListener(&quot;myDiv&quot;, &apos;click&apos;, handleClick);&#xA;&lt;/code&gt;&lt;/pre&gt;" line="498" name="EventObject" />
        <variable citdl="Ext.data.Connection" doc="Global Ajax request class.  Provides a simple way to make Ajax requests with maximum flexibility.  Example usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// Basic request&#xA;Ext.Ajax.request({&#xA;url: &apos;foo.php&apos;,&#xA;success: someFn,&#xA;failure: otherFn,&#xA;headers: {&#xA;&apos;my-header&apos;: &apos;foo&apos;&#xA;params: { foo: &apos;bar&apos; }&#xA;});&#xA;// Simple ajax form submission&#xA;Ext.Ajax.request({&#xA;form: &apos;some-form&apos;,&#xA;params: &apos;foo=bar&apos;&#xA;});&#xA;// Default headers to pass in every request&#xA;Ext.Ajax.defaultHeaders = {&#xA;&apos;Powered-By&apos;: &apos;Ext&apos;&#xA;// Global Ajax events can be handled on every request!&#xA;Ext.Ajax.on(&apos;beforerequest&apos;, this.showSpinner, this);&#xA;&lt;/code&gt;&lt;/pre&gt;" line="505" name="Ajax" />
        <variable citdl="isIE" doc="Removes a DOM node from the document.  The body node will be ignored if passed in." line="506" name="removeNode" />
        <variable attributes="__local__ private" citdl="d" line="507" name="d" />
        <scope ilk="class" line="520" lineend="930" name="EventObjectImpl">
          <scope attributes="__ctor__" ilk="function" line="520" lineend="524" name="EventObjectImpl" signature="EventObjectImpl(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <variable citdl="e" doc="* The normal browser event */" line="528" name="browserEvent" />
          <variable citdl="Number" doc="* The button pressed in a mouse event */" line="530" name="button" />
          <variable citdl="Boolean" doc="* True if the shift key was down during the event */" line="532" name="shiftKey" />
          <variable citdl="Boolean" doc="* True if the control key was down during the event */" line="534" name="ctrlKey" />
          <variable citdl="Boolean" doc="* True if the alt key was down during the event */" line="536" name="altKey" />
          <variable citdl="Number" doc="Number */" line="539" name="BACKSPACE" />
          <variable citdl="Number" doc="Number */" line="541" name="TAB" />
          <variable citdl="Number" doc="Number */" line="543" name="NUM_CENTER" />
          <variable citdl="Number" doc="Number */" line="545" name="ENTER" />
          <variable citdl="Number" doc="Number */" line="547" name="RETURN" />
          <variable citdl="Number" doc="Number */" line="549" name="SHIFT" />
          <variable citdl="Number" doc="Number */" line="551" name="CTRL" />
          <variable citdl="Number" line="552" name="CONTROL" />
          <variable citdl="Number" doc="Number */" line="554" name="ALT" />
          <variable citdl="Number" doc="Number */" line="556" name="PAUSE" />
          <variable citdl="Number" doc="Number */" line="558" name="CAPS_LOCK" />
          <variable citdl="Number" doc="Number */" line="560" name="ESC" />
          <variable citdl="Number" doc="Number */" line="562" name="SPACE" />
          <variable citdl="Number" doc="Number */" line="564" name="PAGE_UP" />
          <variable citdl="Number" line="565" name="PAGEUP" />
          <variable citdl="Number" doc="Number */" line="567" name="PAGE_DOWN" />
          <variable citdl="Number" line="568" name="PAGEDOWN" />
          <variable citdl="Number" doc="Number */" line="570" name="END" />
          <variable citdl="Number" doc="Number */" line="572" name="HOME" />
          <variable citdl="Number" doc="Number */" line="574" name="LEFT" />
          <variable citdl="Number" doc="Number */" line="576" name="UP" />
          <variable citdl="Number" doc="Number */" line="578" name="RIGHT" />
          <variable citdl="Number" doc="Number */" line="580" name="DOWN" />
          <variable citdl="Number" doc="Number */" line="582" name="PRINT_SCREEN" />
          <variable citdl="Number" doc="Number */" line="584" name="INSERT" />
          <variable citdl="Number" doc="Number */" line="586" name="DELETE" />
          <variable citdl="Number" doc="Number */" line="588" name="ZERO" />
          <variable citdl="Number" doc="Number */" line="590" name="ONE" />
          <variable citdl="Number" doc="Number */" line="592" name="TWO" />
          <variable citdl="Number" doc="Number */" line="594" name="THREE" />
          <variable citdl="Number" doc="Number */" line="596" name="FOUR" />
          <variable citdl="Number" doc="Number */" line="598" name="FIVE" />
          <variable citdl="Number" doc="Number */" line="600" name="SIX" />
          <variable citdl="Number" doc="Number */" line="602" name="SEVEN" />
          <variable citdl="Number" doc="Number */" line="604" name="EIGHT" />
          <variable citdl="Number" doc="Number */" line="606" name="NINE" />
          <variable citdl="Number" doc="Number */" line="608" name="A" />
          <variable citdl="Number" doc="Number */" line="610" name="B" />
          <variable citdl="Number" doc="Number */" line="612" name="C" />
          <variable citdl="Number" doc="Number */" line="614" name="D" />
          <variable citdl="Number" doc="Number */" line="616" name="E" />
          <variable citdl="Number" doc="Number */" line="618" name="F" />
          <variable citdl="Number" doc="Number */" line="620" name="G" />
          <variable citdl="Number" doc="Number */" line="622" name="H" />
          <variable citdl="Number" doc="Number */" line="624" name="I" />
          <variable citdl="Number" doc="Number */" line="626" name="J" />
          <variable citdl="Number" doc="Number */" line="628" name="K" />
          <variable citdl="Number" doc="Number */" line="630" name="L" />
          <variable citdl="Number" doc="Number */" line="632" name="M" />
          <variable citdl="Number" doc="Number */" line="634" name="N" />
          <variable citdl="Number" doc="Number */" line="636" name="O" />
          <variable citdl="Number" doc="Number */" line="638" name="P" />
          <variable citdl="Number" doc="Number */" line="640" name="Q" />
          <variable citdl="Number" doc="Number */" line="642" name="R" />
          <variable citdl="Number" doc="Number */" line="644" name="S" />
          <variable citdl="Number" doc="Number */" line="646" name="T" />
          <variable citdl="Number" doc="Number */" line="648" name="U" />
          <variable citdl="Number" doc="Number */" line="650" name="V" />
          <variable citdl="Number" doc="Number */" line="652" name="W" />
          <variable citdl="Number" doc="Number */" line="654" name="X" />
          <variable citdl="Number" doc="Number */" line="656" name="Y" />
          <variable citdl="Number" doc="Number */" line="658" name="Z" />
          <variable citdl="Number" doc="Number */" line="660" name="CONTEXT_MENU" />
          <variable citdl="Number" doc="Number */" line="662" name="NUM_ZERO" />
          <variable citdl="Number" doc="Number */" line="664" name="NUM_ONE" />
          <variable citdl="Number" doc="Number */" line="666" name="NUM_TWO" />
          <variable citdl="Number" doc="Number */" line="668" name="NUM_THREE" />
          <variable citdl="Number" doc="Number */" line="670" name="NUM_FOUR" />
          <variable citdl="Number" doc="Number */" line="672" name="NUM_FIVE" />
          <variable citdl="Number" doc="Number */" line="674" name="NUM_SIX" />
          <variable citdl="Number" doc="Number */" line="676" name="NUM_SEVEN" />
          <variable citdl="Number" doc="Number */" line="678" name="NUM_EIGHT" />
          <variable citdl="Number" doc="Number */" line="680" name="NUM_NINE" />
          <variable citdl="Number" doc="Number */" line="682" name="NUM_MULTIPLY" />
          <variable citdl="Number" doc="Number */" line="684" name="NUM_PLUS" />
          <variable citdl="Number" doc="Number */" line="686" name="NUM_MINUS" />
          <variable citdl="Number" doc="Number */" line="688" name="NUM_PERIOD" />
          <variable citdl="Number" doc="Number */" line="690" name="NUM_DIVISION" />
          <variable citdl="Number" doc="Number */" line="692" name="F1" />
          <variable citdl="Number" doc="Number */" line="694" name="F2" />
          <variable citdl="Number" doc="Number */" line="696" name="F3" />
          <variable citdl="Number" doc="Number */" line="698" name="F4" />
          <variable citdl="Number" doc="Number */" line="700" name="F5" />
          <variable citdl="Number" doc="Number */" line="702" name="F6" />
          <variable citdl="Number" doc="Number */" line="704" name="F7" />
          <variable citdl="Number" doc="Number */" line="706" name="F8" />
          <variable citdl="Number" doc="Number */" line="708" name="F9" />
          <variable citdl="Number" doc="Number */" line="710" name="F10" />
          <variable citdl="Number" doc="Number */" line="712" name="F11" />
          <variable citdl="Number" doc="Number */" line="714" name="F12" />
          <scope doc="*/" ilk="function" line="717" lineend="751" name="setEvent" returns="this" signature="setEvent(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <variable citdl="e.type" line="728" name="type" />
          <variable citdl="e.keyCode" doc="in getKey these will be normalized for the mac" line="734" name="keyCode" />
          <variable citdl="e.charCode" line="735" name="charCode" />
          <variable citdl="E.getTarget()" doc="cache the target for the delayed and or buffered events" line="737" name="target" />
          <variable citdl="E.getXY()" doc="same for XY" line="739" name="xy" />
          <scope doc="Stop the event (preventDefault and stopPropagation)" ilk="function" line="756" lineend="763" name="stopEvent" signature="stopEvent()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Prevents the browsers default handling of the event." ilk="function" line="768" lineend="772" name="preventDefault" signature="preventDefault()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="*/" ilk="function" line="775" lineend="779" name="isNavKeyPress" signature="isNavKeyPress()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this.keyCode" line="776" name="k" />
          </scope>
          <scope ilk="function" line="781" lineend="789" name="isSpecialKey" signature="isSpecialKey()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this.keyCode" line="782" name="k" />
          </scope>
          <scope doc="Cancels bubbling of the event." ilk="function" line="794" lineend="801" name="stopPropagation" signature="stopPropagation()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the character code for the event." ilk="function" line="807" lineend="809" name="getCharCode" returns="Number" signature="getCharCode()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Returns a normalized keyCode for the event." ilk="function" line="815" lineend="818" name="getKey" returns="Number" signature="getKey()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this.keyCode" line="816" name="k" />
          </scope>
          <scope doc="Gets the x coordinate of the event." ilk="function" line="824" lineend="826" name="getPageX" returns="Number" signature="getPageX()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the y coordinate of the event." ilk="function" line="832" lineend="834" name="getPageY" returns="Number" signature="getPageY()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the time of the event." ilk="function" line="840" lineend="845" name="getTime" returns="Number" signature="getTime()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the page coordinates of the event." ilk="function" line="851" lineend="853" name="getXY" returns="Array" signature="getXY()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the target for the event.&#xA;search as a number or element (defaults to 10 || document.body)" ilk="function" line="863" lineend="865" name="getTarget" returns="HTMLElement" signature="getTarget(selector, maxDepth, returnEl)">
            <variable citdl="String" doc="(optional) A simple selector to filter the target or look for an ancestor of the target" ilk="argument" name="selector" />
            <variable citdl="Number/Mixed" doc="(optional) The max depth to" ilk="argument" name="maxDepth" />
            <variable citdl="Boolean" doc="(optional) True to return a Ext.Element object instead of DOM node" ilk="argument" name="returnEl" />
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the related target." ilk="function" line="871" lineend="876" name="getRelatedTarget" returns="HTMLElement" signature="getRelatedTarget()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Normalizes mouse wheel delta across browsers" ilk="function" line="882" lineend="891" name="getWheelDelta" returns="Number" signature="getWheelDelta()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this.browserEvent" line="883" name="e" />
            <variable attributes="__local__ private" citdl="Number" line="884" name="delta" />
          </scope>
          <scope doc="Returns true if the control, meta, shift or alt key was pressed during this event." ilk="function" line="897" lineend="899" name="hasModifier" returns="Boolean" signature="hasModifier()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Returns true if the target of this event is a child of el.  If the target is el, it returns false.&#xA;Example usage:&lt;pre&gt;&lt;code&gt;&#xA;// Handle click on any child of an element&#xA;Ext.getBody().on(&apos;click&apos;, function(e){&#xA;if(e.within(&apos;some-el&apos;)){&#xA;alert(&apos;Clicked on a child of some-el!&apos;);&#xA;});&#xA;// Handle click directly on an element, ignoring clicks on child nodes&#xA;Ext.getBody().on(&apos;click&apos;, function(e,t){&#xA;if((t.id == &apos;some-el&apos;) &amp;&amp; !e.within(t, true)){&#xA;alert(&apos;Clicked directly on some-el!&apos;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="922" lineend="925" name="within" returns="Boolean" signature="within(el, related)">
            <variable citdl="Mixed" doc="The id, DOM element or Ext.Element to check" ilk="argument" name="el" />
            <variable citdl="Boolean" doc="(optional) true to test if the related target is within el instead of the target" ilk="argument" name="related" />
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this[related?&quot;getRelatedTarget&quot;:&quot;getTarget&quot;]()" line="923" name="t" />
          </scope>
          <scope ilk="function" line="927" lineend="929" name="getPoint" returns="Ext.lib.Point" signature="getPoint()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
        </scope>
        <variable citdl="Ext.Updater" line="520" name="UpdateManager" />
        <variable citdl="Ext.form.BasicForm" doc="back compat" line="524" name="BasicForm" />
        <scope doc="Returns the type of object that is passed in. If the object passed in is null or undefined it&#xA;return false otherwise it returns one of the following values:&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;string&lt;/b&gt;: If the object passed is a string&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;number&lt;/b&gt;: If the object passed is a number&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;boolean&lt;/b&gt;: If the object passed is a boolean value&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;function&lt;/b&gt;: If the object passed is a function reference&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;object&lt;/b&gt;: If the object passed is an object&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;array&lt;/b&gt;: If the object passed is an array&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;regexp&lt;/b&gt;: If the object passed is a regular expression&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;element&lt;/b&gt;: If the object passed is a DOM Element&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;nodelist&lt;/b&gt;: If the object passed is a DOM NodeList&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;textnode&lt;/b&gt;: If the object passed is a DOM text node and contains something other than whitespace&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;whitespace&lt;/b&gt;: If the object passed is a DOM text node and contains only whitespace&lt;/li&gt;" ilk="function" line="539" lineend="563" name="type" returns="String" signature="type(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" line="546" name="t" />
        </scope>
        <variable citdl="Ext.extend()" doc="&lt;p&gt;Base class for any {@link Ext.BoxComponent} that can contain other components. This class is intended&#xA;to be extended and should generally not need to be created directly via the new keyword. {@link Ext.Panel},&#xA;{@link Ext.Window} and {@link Ext.TabPanel} are the most commonly used Container classes.&lt;/p&gt;&#xA;Containers handle the basic behavior of containing items, namely adding, inserting and removing them.&#xA;The specific layout logic required to visually render contained items is delegated to any one of the different&#xA;{@link #layout} classes available.&lt;/p&gt;&#xA;&lt;p&gt;When either specifying child {@link #items} of a Container, or dynamically adding components to a Container,&#xA;remember to consider how you wish the Container to arrange those child elements, and whether those child elements&#xA;need to be sized using one of Ext&apos;s built-in layout schemes.&lt;/p&gt;&#xA;&lt;p&gt;By default, Containers use the {@link Ext.layout.ContainerLayout ContainerLayout} scheme. This simply renders&#xA;child components, appending them one after the other inside the Container, and does not apply any sizing at all.&#xA;This is a common source of confusion when widgets like GridPanels or TreePanels are added to Containers for&#xA;which no layout has been specified. If a Container is left to use the ContainerLayout scheme, none of its child&#xA;components will be resized, or changed in any way when the Container is resized.&lt;/p&gt;&#xA;&lt;p&gt;A very common example of this is where a developer will attempt to add a GridPanel to a TabPanel by wrapping&#xA;the GridPanel &lt;i&gt;inside&lt;/i&gt; a wrapping Panel and add that wrapping Panel to the TabPanel. This misses the point that&#xA;Ext&apos;s inheritance means that a GridPanel &lt;b&gt;is&lt;/b&gt; a Component which can be added unadorned into a Container. If&#xA;that wrapping Panel has no layout configuration, then the GridPanel will not be sized as expected.&lt;p&gt;&#xA;&lt;p&gt;Below is an example of adding a newly created GridPanel to a TabPanel. A TabPanel uses {@link Ext.layout.CardLayout}&#xA;as its layout manager which means all its child items are sized to fit exactly into its client area. The following&#xA;code requires prior knowledge of how to create GridPanels. See {@link Ext.grid.GridPanel}, {@link Ext.data.Store}&#xA;and {@link Ext.data.JsonReader} as well as the grid examples in the Ext installation&apos;s &lt;tt&gt;examples/grid&lt;/tt&gt;&#xA;directory.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#xA;//  Create the GridPanel.&#xA;myGrid = new Ext.grid.GridPanel({&#xA;store: myStore,&#xA;columns: myColumnModel,&#xA;title: &apos;Results&apos;,&#xA;});&#xA;myTabPanel.add(myGrid);&#xA;myTabPanel.setActiveItem(myGrid);&#xA;&lt;/code&gt;&lt;/pre&gt;" line="570" name="Container" />
        <scope doc="Returns true if the passed value is null, undefined or an empty string (optional)." ilk="function" line="571" lineend="573" name="isEmpty" returns="Boolean" signature="isEmpty(v, allowBlank)">
          <variable ilk="argument" name="v" />
          <variable citdl="Boolean" doc="(optional) Pass true if an empty string is not considered empty" ilk="argument" name="allowBlank" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope ilk="function" line="575" lineend="577" name="value" returns="Ext.isEmpty()" signature="value(v, defaultValue, allowBlank)">
          <variable ilk="argument" name="v" />
          <variable ilk="argument" name="defaultValue" />
          <variable ilk="argument" name="allowBlank" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Simple Button class&#xA;an {@link Ext.util.ClickRepeater} config object (defaults to false)." line="583" name="Button" />
        <scope doc="Returns true if the passed object is a JavaScript array, otherwise false." ilk="function" line="584" lineend="586" name="isArray" returns="Boolean" signature="isArray(v)">
          <variable ilk="argument" name="v" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Object" line="587" lineend="624" name="ButtonToggleMgr">
          <scope ilk="function" line="602" lineend="612" name="register" signature="register(btn)">
            <variable ilk="argument" name="btn" />
            <variable citdl="ButtonToggleMgr" name="this" />
            <variable attributes="__local__ private" citdl="groups[btn.toggleGroup]" line="606" name="g" />
          </scope>
          <scope ilk="function" line="614" lineend="623" name="unregister" signature="unregister(btn)">
            <variable ilk="argument" name="btn" />
            <variable citdl="ButtonToggleMgr" name="this" />
            <variable attributes="__local__ private" citdl="groups[btn.toggleGroup]" line="618" name="g" />
          </scope>
        </variable>
        <scope doc="Returns true if the passed object is a JavaScript date object, otherwise false." ilk="function" line="593" lineend="595" name="isDate" returns="Boolean" signature="isDate(v)">
          <variable ilk="argument" name="v" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Boolean" doc="True if the detected browser is Opera." line="601" name="isOpera" />
        <variable citdl="Boolean" doc="True if the detected browser is Safari." line="606" name="isSafari" />
        <variable citdl="Boolean" doc="True if the detected browser is Safari 3.x." line="611" name="isSafari3" />
        <variable citdl="Ext.MessageBox" doc="Shorthand for {@link Ext.MessageBox}" line="615" name="Msg" />
        <variable citdl="Boolean" doc="True if the detected browser is Safari 2.x." line="616" name="isSafari2" />
        <variable citdl="Boolean" doc="True if the detected browser is Internet Explorer." line="621" name="isIE" />
        <variable citdl="Boolean" doc="True if the detected browser is Internet Explorer 6.x." line="626" name="isIE6" />
        <variable citdl="Boolean" doc="True if the detected browser is Internet Explorer 7.x." line="631" name="isIE7" />
        <variable citdl="Boolean" doc="True if the detected browser uses the Gecko layout engine (e.g. Mozilla, Firefox)." line="636" name="isGecko" />
        <variable citdl="Boolean" doc="True if the detected browser uses a pre-Gecko 1.9 layout engine (e.g. Firefox 2.x)." line="641" name="isGecko2" />
        <variable citdl="Boolean" doc="True if the detected browser uses a Gecko 1.9+ layout engine (e.g. Firefox 3.x)." line="646" name="isGecko3" />
        <variable citdl="Boolean" doc="True if the detected browser is Internet Explorer running in non-strict mode." line="651" name="isBorderBox" />
        <variable citdl="Boolean" doc="True if the detected platform is Linux." line="656" name="isLinux" />
        <variable citdl="Boolean" doc="True if the detected platform is Windows." line="661" name="isWindows" />
        <variable citdl="Boolean" doc="True if the detected platform is Mac OS." line="666" name="isMac" />
        <variable citdl="Boolean" doc="True if the detected platform is Adobe Air." line="671" name="isAir" />
        <variable citdl="Boolean" doc="By default, Ext intelligently decides whether floating elements should be shimmed. If you are using flash,&#xA;you may want to set this to true." line="678" name="useShims" />
        <variable citdl="Ext.namespace" doc="in intellij using keyword &quot;namespace&quot; causes parsing errors" line="682" name="ns" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A mechanism for displaying data using custom layout templates and formatting. DataView uses an {@link Ext.XTemplate}&#xA;as its internal templating mechanism, and is bound to an {@link Ext.data.Store}&#xA;so that as the data in the store changes the view is automatically updated to reflect the changes.  The view also&#xA;provides built-in behavior for many common events that can occur for its contained items including click, doubleclick,&#xA;mouseover, mouseout, etc. as well as a built-in selection model. &lt;b&gt;In order to use these features, an {@link #itemSelector}&#xA;config must be provided for the DataView to determine what nodes it will be working with.&lt;/b&gt;&#xA;&#xA;&lt;p&gt;The example below binds a DataView to a {@link Ext.data.Store} and renders it into an {@link Ext.Panel}.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var store = new Ext.data.JsonStore({&#xA;url: &apos;get-images.php&apos;,&#xA;root: &apos;images&apos;,&#xA;fields: [&#xA;&apos;name&apos;, &apos;url&apos;,&#xA;{name:&apos;size&apos;, type: &apos;float&apos;},&#xA;{name:&apos;lastmod&apos;, type:&apos;date&apos;, dateFormat:&apos;timestamp&apos;}&#xA;});&#xA;store.load();&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;tpl for=&quot;.&quot;&amp;gt;&apos;,&#xA;&apos;&amp;lt;div class=&quot;thumb-wrap&quot; id=&quot;{name}&quot;&amp;gt;&apos;,&#xA;&apos;&amp;lt;div class=&quot;thumb&quot;&amp;gt;&amp;lt;img src=&quot;{url}&quot; title=&quot;{name}&quot;&amp;gt;&amp;lt;/div&amp;gt;&apos;,&#xA;&apos;&amp;lt;span class=&quot;x-editable&quot;&amp;gt;{shortName}&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&apos;,&#xA;&apos;&amp;lt;/tpl&amp;gt;&apos;,&#xA;&apos;&amp;lt;div class=&quot;x-clear&quot;&amp;gt;&amp;lt;/div&amp;gt;&apos;&#xA;var panel = new Ext.Panel({&#xA;id:&apos;images-view&apos;,&#xA;frame:true,&#xA;width:535,&#xA;autoHeight:true,&#xA;collapsible:true,&#xA;layout:&apos;fit&apos;,&#xA;title:&apos;Simple DataView&apos;,&#xA;items: new Ext.DataView({&#xA;store: store,&#xA;tpl: tpl,&#xA;autoHeight:true,&#xA;multiSelect: true,&#xA;overClass:&apos;x-view-over&apos;,&#xA;itemSelector:&apos;div.thumb-wrap&apos;,&#xA;emptyText: &apos;No images to display&apos;&#xA;});&#xA;panel.render(document.body);&#xA;&lt;/code&gt;&lt;/pre&gt;" line="714" name="DataView" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Simple date picker class." line="717" name="DatePicker" />
        <variable citdl="Ext.DomQuery.select" line="777" name="query" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized panel intended for use as an application window.  Windows are floated and draggable by default, and&#xA;also provide specific behavior like the ability to maximize and restore (with an event for minimizing, since the&#xA;minimize behavior is application-specific).  Windows can also be linked to a {@link Ext.WindowGroup} or managed&#xA;by the {@link Ext.WindowManager} to provide grouping, activation, to front/back and other application-specific behavior." line="845" name="Window" />
        <variable citdl="Object" line="854" name="grid">
          <scope doc="private This is a support class used internally by the Grid&#xA;components" ilk="function" line="11" lineend="22" name="SplitDragZone" signature="SplitDragZone(grid, hd, hd2)">
            <variable ilk="argument" name="grid" />
            <variable ilk="argument" name="hd" />
            <variable ilk="argument" name="hd2" />
            <variable citdl="grid" name="this" />
          </scope>
          <scope doc="private This is a support class used internally by the Grid&#xA;components" ilk="function" line="11" lineend="14" name="GridEditor" signature="GridEditor(field, config)">
            <variable ilk="argument" name="field" />
            <variable ilk="argument" name="config" />
            <variable citdl="grid" name="this" />
          </scope>
          <scope doc="private This is a support class used internally by the Grid&#xA;components" ilk="function" line="11" lineend="21" name="HeaderDragZone" signature="HeaderDragZone(grid, hd, hd2)">
            <variable ilk="argument" name="grid" />
            <variable ilk="argument" name="hd" />
            <variable ilk="argument" name="hd2" />
            <variable citdl="grid" name="this" />
          </scope>
          <variable citdl="grid" line="12" name="grid" />
          <variable citdl="grid.getView()" line="13" name="view" />
          <variable citdl="String" line="14" name="ddGroup" />
          <variable citdl="this.view.resizeProxy" line="14" name="proxy" />
          <scope ilk="class" line="16" lineend="19" name="AbstractSelectionModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Abstract base class for grid SelectionModels.  It provides the interface that should be&#xA;implemented by descendant classes.  This class should not be directly instantiated." ilk="function" line="16" lineend="19" name="AbstractSelectionModel" signature="AbstractSelectionModel()">
              <variable citdl="AbstractSelectionModel" name="this" />
            </scope>
            <variable citdl="Boolean" line="17" name="locked" />
          </scope>
          <scope attributes="__ctor__" doc="CONSTRUCTOR: @class Ext.grid.RowSelectionModel" ilk="function" line="19" lineend="63" name="RowSelectionModel" signature="RowSelectionModel(config)">
            <variable citdl="Object" ilk="argument" name="config" />
            <variable citdl="grid" name="this" />
          </scope>
          <scope ilk="class" line="19" lineend="30" name="GridDragZone">
            <scope attributes="__ctor__" doc="&lt;p&gt;A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations of two of the&#xA;template methods of DragZone to enable dragging of the selected rows of a GridPanel.&lt;/p&gt;&#xA;&lt;p&gt;A cooperating {@link Ext.dd.DropZone DropZone} must be created who&apos;s template method implementations of&#xA;{@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},&#xA;{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop}&lt;/p&gt; are able&#xA;to process the {@link #getDragData data} which is provided." ilk="function" line="19" lineend="30" name="GridDragZone" signature="GridDragZone(grid, config)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="config" />
              <variable citdl="GridDragZone" name="this" />
            </scope>
            <variable citdl="grid.getView()" line="20" name="view" />
            <variable citdl="Boolean" line="26" name="scroll" />
            <variable citdl="grid" line="27" name="grid" />
            <variable citdl="document.createElement()" line="28" name="ddel" />
            <variable citdl="String" line="29" name="className" />
          </scope>
          <scope ilk="class" line="20" lineend="78" name="GridView">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: &lt;p&gt;This class encapsulates the user interface of an {@link Ext.grid.GridPanel}.&#xA;Methods of this class may be used to access user interface elements to enable&#xA;special display effects. Do not change the DOM structure of the user interface.&lt;/p&gt;&#xA;&lt;p&gt;This class does not provide ways to manipulate the underlying data. The data&#xA;model of a Grid is held in an {@link Ext.data.Store}.&lt;/p&gt;" ilk="function" line="20" lineend="78" name="GridView" signature="GridView(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="GridView" name="this" />
            </scope>
            <scope ilk="function" line="206" lineend="209" name="ColumnDragZone" signature="ColumnDragZone(grid, hd)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable citdl="GridView" name="this" />
            </scope>
            <scope doc="private This is a support class used internally by the Grid&#xA;components" ilk="function" line="1511" lineend="1522" name="SplitDragZone" signature="SplitDragZone(grid, hd)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable citdl="GridView" name="this" />
            </scope>
            <variable citdl="grid" line="1512" name="grid" />
            <variable citdl="grid.getView()" line="1513" name="view" />
            <variable citdl="this.view.resizeMarker" line="1514" name="marker" />
            <variable citdl="this.view.resizeProxy" line="1515" name="proxy" />
            <variable citdl="Boolean" line="1520" name="scroll" />
            <variable citdl="this.view.splitHandleWidth" line="1521" name="hw" />
          </scope>
          <variable citdl="Boolean" line="20" name="scroll" />
          <variable citdl="Ext.util.MixedCollection" line="23" name="selections" />
          <variable citdl="Boolean" line="25" name="last" />
          <scope ilk="class" line="26" lineend="62" name="RowNumberer">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This is a utility class that can be passed into a {@link Ext.grid.ColumnModel} as a column config that provides&#xA;an automatic row numbering column.&#xA;&lt;br&gt;Usage:&lt;br&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// This is a typical column config with the first column providing row numbers&#xA;var colModel = new Ext.grid.ColumnModel([&#xA;new Ext.grid.RowNumberer(),&#xA;{header: &quot;Name&quot;, width: 80, sortable: true},&#xA;{header: &quot;Code&quot;, width: 50, sortable: true},&#xA;{header: &quot;Description&quot;, width: 200, sortable: true}&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="26" lineend="31" name="RowNumberer" signature="RowNumberer(config)">
              <variable citdl="Object" doc="The configuration options" ilk="argument" name="config" />
              <variable citdl="RowNumberer" name="this" />
            </scope>
            <variable citdl="this.renderer.createDelegate()" line="29" name="renderer" />
            <variable citdl="String" doc="number column (defaults to &apos;&apos;)." line="38" name="header" />
            <variable citdl="Number" doc="{Number} width The default width in pixels of the row number&#xA;column (defaults to 23)." line="42" name="width" />
            <variable citdl="Boolean" doc="{Boolean} sortable True if the row number column is sortable&#xA;(defaults to false)." line="46" name="sortable" />
            <variable citdl="Boolean" doc="private" line="49" name="fixed" />
            <variable citdl="Boolean" line="50" name="menuDisabled" />
            <variable citdl="String" line="51" name="dataIndex" />
            <variable citdl="String" line="52" name="id" />
            <variable line="53" name="rowspan" />
            <scope doc="private" ilk="function" line="56" lineend="61" name="renderer" returns="rowIndex" signature="renderer(v, p, record, rowIndex)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="p" />
              <variable ilk="argument" name="record" />
              <variable ilk="argument" name="rowIndex" />
              <variable citdl="RowNumberer" name="this" />
            </scope>
          </scope>
          <variable citdl="Boolean" line="26" name="lastActive" />
          <variable attributes="__ctor__" citdl="Ext.data.Record.create()" doc="CONSTRUCTOR: A specific {@link Ext.data.Record} type that represents a name/value pair and is made to work with the&#xA;{@link Ext.grid.PropertyGrid}.  Typically, PropertyRecords do not need to be created directly as they can be&#xA;created implicitly by simply using the appropriate data configs either via the {@link Ext.grid.PropertyGrid#source}&#xA;config property or by calling {@link Ext.grid.PropertyGrid#setSource}.  However, if the need arises, these records&#xA;can also be created explicitly as shwon below.  Example usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var rec = new Ext.grid.PropertyRecord({&#xA;name: &apos;Birthday&apos;,&#xA;value: new Date(Date.parse(&apos;05/26/1972&apos;))&#xA;});&#xA;// Add record to an already populated grid&#xA;grid.store.addSorted(rec);&#xA;&lt;/code&gt;&lt;/pre&gt;" line="30" name="PropertyRecord" />
          <scope ilk="class" line="33" lineend="69" name="CellSelectionModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides the basic implementation for single cell selection in a grid. The object stored&#xA;as the selection and returned by {@link getSelectedCell} contains the following properties:&#xA;&lt;div class=&quot;mdetail-params&quot;&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;record&lt;/b&gt; : Ext.data.record&lt;p class=&quot;sub-desc&quot;&gt;The {@link Ext.data.Record Record}&#xA;which provides the data for the row containing the selection&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;cell&lt;/b&gt; : Ext.data.record&lt;p class=&quot;sub-desc&quot;&gt;An object containing the&#xA;following properties:&#xA;&lt;div class=&quot;mdetail-params&quot;&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;rowIndex&lt;/b&gt; : Number&lt;p class=&quot;sub-desc&quot;&gt;The index of the selected row&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;cellIndex&lt;/b&gt; : Number&lt;p class=&quot;sub-desc&quot;&gt;The index of the selected cell&lt;br&gt;&#xA;&lt;b&gt;Note that due to possible column reordering, the cellIndex should not be used as an index into&#xA;the Record&apos;s data. Instead, the &lt;i&gt;name&lt;/i&gt; of the selected field should be determined&#xA;in order to retrieve the data value from the record by name:&lt;/b&gt;&lt;pre&gt;&lt;code&gt;&#xA;var fieldName = grid.getColumnModel().getDataIndex(cellIndex);&#xA;var data = record.get(fieldName);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/div&gt;" ilk="function" line="33" lineend="69" name="CellSelectionModel" signature="CellSelectionModel(config)">
              <variable citdl="Object" doc="The object containing the configuration of this model." ilk="argument" name="config" />
              <variable citdl="CellSelectionModel" name="this" />
            </scope>
            <variable line="36" name="selection" />
          </scope>
          <scope ilk="class" line="36" lineend="102" name="ColumnModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This is the default implementation of a ColumnModel used by the Grid. This class is initialized&#xA;with an Array of column config objects.&#xA;&lt;br&gt;&lt;br&gt;&#xA;An individual column&apos;s config object defines the header string, the {@link Ext.data.Record}&#xA;field the column draws its data from, an optional rendering function to provide customized&#xA;data formatting, and the ability to apply a CSS class to all cells in a column through its&#xA;{@link #id} config option.&lt;br&gt;&#xA;&lt;br&gt;Usage:&lt;br&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var colModel = new Ext.grid.ColumnModel([&#xA;{header: &quot;Ticker&quot;, width: 60, sortable: true},&#xA;{header: &quot;Company Name&quot;, width: 150, sortable: true},&#xA;{header: &quot;Market Cap.&quot;, width: 100, sortable: true},&#xA;{header: &quot;$ Sales&quot;, width: 100, sortable: true, renderer: money},&#xA;{header: &quot;Employees&quot;, width: 100, sortable: true, resizable: false}&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&#xA;The config options &lt;b&gt;defined by&lt;/b&lt; this class are options which may appear in each&#xA;individual column definition." ilk="function" line="36" lineend="102" name="ColumnModel" signature="ColumnModel(config)">
              <variable citdl="Object" doc="An Array of column config objects. See this class&apos;s&#xA;config objects for details." ilk="argument" name="config" />
              <variable citdl="ColumnModel" name="this" />
            </scope>
            <variable citdl="Number" doc="The width of columns which have no width specified (defaults to 100)" line="41" name="defaultWidth" />
            <variable citdl="Boolean" doc="Default sortable of columns which have no sortable specified (defaults to false)" line="47" name="defaultSortable" />
            <scope doc="private" ilk="function" line="560" lineend="565" name="defaultRenderer" returns="value" signature="defaultRenderer(value)">
              <variable ilk="argument" name="value" />
              <variable citdl="ColumnModel" name="this" />
            </scope>
          </scope>
          <scope ilk="class" line="43" lineend="53" name="PropertyStore">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A custom wrapper for the {@link Ext.grid.PropertyGrid}&apos;s {@link Ext.data.Store}. This class handles the mapping&#xA;between the custom data source objects supported by the grid and the {@link Ext.grid.PropertyRecord} format&#xA;required for compatibility with the underlying store. Generally this class should not need to be used directly --&#xA;the grid&apos;s data should be accessed from the underlying store via the {@link #store} property." ilk="function" line="43" lineend="53" name="PropertyStore" signature="PropertyStore(grid, source)">
              <variable citdl="Ext.grid.Grid" doc="The grid this store will be bound to" ilk="argument" name="grid" />
              <variable citdl="Object" doc="The source data config object" ilk="argument" name="source" />
              <variable citdl="PropertyStore" name="this" />
            </scope>
            <variable citdl="grid" line="44" name="grid" />
            <variable citdl="Ext.data.Store" line="47" name="store" />
          </scope>
          <scope doc="private This is a support class used internally by the Grid&#xA;components" ilk="class" line="59" lineend="77" name="HeaderDropZone">
            <variable citdl="grid" line="12" name="grid" />
            <variable citdl="grid.getView()" line="13" name="view" />
            <scope attributes="__ctor__" doc="private This is a support class used internally by the Grid&#xA;components" ilk="function" line="59" lineend="77" name="HeaderDropZone" signature="HeaderDropZone(grid, hd, hd2)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable ilk="argument" name="hd2" />
              <variable citdl="HeaderDropZone" name="this" />
            </scope>
            <variable citdl="Ext.DomHelper.append()" doc="split the proxies so they don&apos;t interfere with mouse events" line="65" name="proxyTop" />
            <variable citdl="Ext.DomHelper.append()" line="68" name="proxyBottom" />
            <variable citdl="this.proxyBottom.hide" line="69" name="hide" />
            <variable citdl="String" line="73" name="ddGroup" />
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows." line="87" name="CheckboxSelectionModel" />
          <scope ilk="class" line="118" lineend="128" name="PropertyColumnModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A custom column model for the {@link Ext.grid.PropertyGrid}.  Generally it should not need to be used directly." ilk="function" line="118" lineend="150" name="PropertyColumnModel" signature="PropertyColumnModel(grid, store)">
              <variable citdl="Ext.grid.Grid" doc="The grid this store will be bound to" ilk="argument" name="grid" />
              <variable ilk="argument" name="store" />
              <variable citdl="PropertyColumnModel" name="this" />
              <variable attributes="__local__ private" citdl="Ext.grid" line="120" name="g" />
              <variable attributes="__local__ private" citdl="Ext.form" line="132" name="f" />
              <variable attributes="__local__ private" citdl="f.Field" line="141" name="bfield" />
            </scope>
            <variable citdl="grid" line="119" name="grid" />
            <variable citdl="store" line="125" name="store" />
            <variable citdl="Ext.DomHelper.append()" line="131" name="bselect" />
            <variable citdl="Object" line="142" lineend="147" name="editors">
              <variable citdl="g.GridEditor" line="143" name="date" />
              <variable citdl="g.GridEditor" line="144" name="string" />
              <variable citdl="g.GridEditor" line="145" name="number" />
              <variable citdl="g.GridEditor" line="146" name="boolean" />
            </variable>
            <variable citdl="this.renderCell.createDelegate()" line="148" name="renderCellDelegate" />
            <variable citdl="this.renderProp.createDelegate()" line="149" name="renderPropDelegate" />
          </scope>
          <variable citdl="Ext.extend()" line="251" name="EditorGridPanel" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized grid implementation intended to mimic the traditional property grid as typically seen in&#xA;development IDEs.  Each row in the grid represents a property of some object, and the data is stored&#xA;as a set of name/value pairs in {@link Ext.grid.PropertyRecord}s.  Example usage:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var grid = new Ext.grid.PropertyGrid({&#xA;title: &apos;Properties Grid&apos;,&#xA;autoHeight: true,&#xA;width: 300,&#xA;renderTo: &apos;grid-ct&apos;,&#xA;source: {&#xA;&quot;(name)&quot;: &quot;My Object&quot;,&#xA;&quot;Created&quot;: new Date(Date.parse(&apos;10/15/2006&apos;)),&#xA;&quot;Available&quot;: false,&#xA;&quot;Version&quot;: .01,&#xA;&quot;Description&quot;: &quot;A test object&quot;&#xA;});&#xA;&lt;/pre&gt;&lt;/code&gt;" line="364" name="PropertyGrid" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Adds the ability for single level grouping to the grid.&#xA;*&lt;pre&gt;&lt;code&gt;var grid = new Ext.grid.GridPanel({&#xA;// A groupingStore is required for a GroupingView&#xA;store: new Ext.data.GroupingStore({&#xA;reader: reader,&#xA;data: xg.dummyData,&#xA;sortInfo:{field: &apos;company&apos;, direction: &quot;ASC&quot;},&#xA;groupField:&apos;industry&apos;&#xA;}),&#xA;columns: [&#xA;{id:&apos;company&apos;,header: &quot;Company&quot;, width: 60, sortable: true, dataIndex: &apos;company&apos;},&#xA;{header: &quot;Price&quot;, width: 20, sortable: true, renderer: Ext.util.Format.usMoney, dataIndex: &apos;price&apos;},&#xA;{header: &quot;Change&quot;, width: 20, sortable: true, dataIndex: &apos;change&apos;, renderer: Ext.util.Format.usMoney},&#xA;{header: &quot;Industry&quot;, width: 20, sortable: true, dataIndex: &apos;industry&apos;},&#xA;{header: &quot;Last Updated&quot;, width: 20, sortable: true, renderer: Ext.util.Format.dateRenderer(&apos;m/d/Y&apos;), dataIndex: &apos;lastChange&apos;}&#xA;view: new Ext.grid.GroupingView({&#xA;forceFit:true,&#xA;// custom grouping text template to display the number of items per group&#xA;groupTextTpl: &apos;{text} ({[values.rs.length]} {[values.rs.length &gt; 1 ? &quot;Items&quot; : &quot;Item&quot;]})&apos;&#xA;}),&#xA;frame:true,&#xA;width: 700,&#xA;height: 450,&#xA;collapsible: true,&#xA;animCollapse: false,&#xA;title: &apos;Grouping Example&apos;,&#xA;iconCls: &apos;icon-grid&apos;,&#xA;renderTo: document.body&#xA;});&lt;/code&gt;&lt;/pre&gt;" line="487" name="GroupingView" />
          <variable citdl="Ext.grid.ColumnModel" doc="Alias for backwards compatibility" line="568" name="DefaultColumnModel" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: This class represents the primary interface of a component based grid control.&#xA;&lt;br&gt;&lt;br&gt;Usage:&#xA;&lt;pre&gt;&lt;code&gt;var grid = new Ext.grid.GridPanel({&#xA;store: new Ext.data.Store({&#xA;reader: reader,&#xA;data: xg.dummyData&#xA;}),&#xA;columns: [&#xA;{id:&apos;company&apos;, header: &quot;Company&quot;, width: 200, sortable: true, dataIndex: &apos;company&apos;},&#xA;{header: &quot;Price&quot;, width: 120, sortable: true, renderer: Ext.util.Format.usMoney, dataIndex: &apos;price&apos;},&#xA;{header: &quot;Change&quot;, width: 120, sortable: true, dataIndex: &apos;change&apos;},&#xA;{header: &quot;% Change&quot;, width: 120, sortable: true, dataIndex: &apos;pctChange&apos;},&#xA;{header: &quot;Last Updated&quot;, width: 135, sortable: true, renderer: Ext.util.Format.dateRenderer(&apos;m/d/Y&apos;), dataIndex: &apos;lastChange&apos;}&#xA;viewConfig: {&#xA;forceFit: true&#xA;sm: new Ext.grid.RowSelectionModel({singleSelect:true}),&#xA;width:600,&#xA;height:300,&#xA;frame:true,&#xA;title:&apos;Framed with Checkbox Selection and Horizontal Scrolling&apos;,&#xA;iconCls:&apos;icon-grid&apos;&#xA;});&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&#xA;&lt;li&gt;Although this class inherits many configuration options from base classes, some of them&#xA;(such as autoScroll, layout, items, etc) are not used by this class, and will have no effect.&lt;/li&gt;&#xA;&lt;li&gt;A grid &lt;b&gt;requires&lt;/b&gt; a width in which to scroll its columns, and a height in which to scroll its rows. The dimensions can either&#xA;be set through the {@link #height} and {@link #width} configuration options or automatically set by using the grid in a {@link Ext.Container Container}&#xA;who&apos;s {@link Ext.Container#layout layout} provides sizing of its child items.&lt;/li&gt;&#xA;&lt;li&gt;To access the data in a Grid, it is necessary to use the data model encapsulated&#xA;by the {@link #store Store}. See the {@link #cellclick} event.&lt;/li&gt;&#xA;&lt;/ul&gt;" line="854" name="GridPanel" />
        </variable>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: &lt;p&gt;A basic tab container. TabPanels can be used exactly like a standard {@link Ext.Panel} for layout&#xA;purposes, but also have special support for containing child Components that are managed using a CardLayout&#xA;layout manager, and displayed as seperate tabs.&lt;/p&gt;&#xA;&lt;p&gt;There is no actual tab class &amp;mdash; each tab is simply an {@link Ext.BoxComponent Component} such&#xA;as a {@link Ext.Panel Panel}. However, when rendered in a TabPanel, each child Component can fire&#xA;additional events that only exist for tabs and are not available from other Component. These are:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;b&gt;activate&lt;/b&gt;: Fires when this Component becomes the active tab.&#xA;&lt;div class=&quot;mdetail-params&quot;&gt;&#xA;&lt;strong style=&quot;font-weight: normal;&quot;&gt;Listeners will be called with the following arguments:&lt;/strong&gt;&#xA;&lt;ul&gt;&lt;li&gt;&lt;code&gt;tab&lt;/code&gt; : Panel&lt;div class=&quot;sub-desc&quot;&gt;The tab that was activated&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;b&gt;deactivate&lt;/b&gt;: Fires when the Component that was the active tab becomes deactivated.&#xA;&lt;div class=&quot;mdetail-params&quot;&gt;&#xA;&lt;strong style=&quot;font-weight: normal;&quot;&gt;Listeners will be called with the following arguments:&lt;/strong&gt;&#xA;&lt;ul&gt;&lt;li&gt;&lt;code&gt;tab&lt;/code&gt; : Panel&lt;div class=&quot;sub-desc&quot;&gt;The tab that was deactivated&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;To add Components to a TabPanel which are generated dynamically on the server, it is necessary to&#xA;create a server script to generate the Javascript to create the Component required.&lt;/p&gt;&#xA;For example, to add a GridPanel to a TabPanel where the GridPanel is generated by the server&#xA;based on certain parameters, you would need to execute an Ajax request to invoke your the script,&#xA;and process the response object to add it to the TabPanel:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#xA;Ext.Ajax.request({&#xA;url: &apos;gen-invoice-grid.php&apos;,&#xA;params: {&#xA;startDate = Ext.getCmp(&apos;start-date&apos;).getValue(),&#xA;endDate = Ext.getCmp(&apos;end-date&apos;).getValue()&#xA;success: function(xhr) {&#xA;var newComponent = eval(xhr.responseText);&#xA;myTabPanel.add(newComponent);&#xA;myTabPanel.setActiveTab(newComponent);&#xA;failure: function() {&#xA;Ext.Msg.alert(&quot;Grid create failed&quot;, &quot;Server communication failure&quot;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The server script would need to return an executable Javascript statement which, when processed&#xA;using &lt;tt&gt;eval()&lt;/tt&gt; will return either a config object with an {@link Ext.Component#xtype xtype},&#xA;or an instantiated Component. For example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#xA;{function() {&#xA;function formatDate(value){&#xA;return value ? value.dateFormat(&apos;M d, Y&apos;) : &apos;&apos;;&#xA;var store = new Ext.data.Store({&#xA;url: &apos;get-invoice-data.php&apos;,&#xA;baseParams: {&#xA;startDate: &apos;01/01/2008&apos;,&#xA;endDate: &apos;01/31/2008&apos;&#xA;reader: new Ext.data.JsonReader({&#xA;record: &apos;transaction&apos;,&#xA;id: &apos;id&apos;,&#xA;totalRecords: &apos;total&apos;&#xA;}, [&#xA;&apos;customer&apos;,&#xA;&apos;invNo&apos;,&#xA;{name: &apos;date&apos;, type: &apos;date&apos;, dateFormat: &apos;m/d/Y&apos;},&#xA;{name: &apos;value&apos;, type: &apos;float&apos;}&#xA;});&#xA;var grid = new Ext.grid.GridPanel({&#xA;title: &apos;Invoice Report&apos;,&#xA;bbar: new Ext.PagingToolbar(store),&#xA;store: store,&#xA;columns: [&#xA;{header: &quot;Customer&quot;, width: 250, dataIndex: &apos;customer&apos;, sortable: true},&#xA;{header: &quot;Invoice Number&quot;, width: 120, dataIndex: &apos;invNo&apos;, sortable: true},&#xA;{header: &quot;Invoice Date&quot;, width: 100, dataIndex: &apos;date&apos;, renderer: formatDate, sortable: true},&#xA;{header: &quot;Value&quot;, width: 120, dataIndex: &apos;value&apos;, renderer: &apos;usMoney&apos;, sortable: true}&#xA;});&#xA;store.load();&#xA;return grid;&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Since that code is &lt;i&gt;generated&lt;/i&gt; by a server script, the &lt;tt&gt;baseParams&lt;/tt&gt; for the Store&#xA;can be configured into the Store. The metadata to allow generation of the Record layout, and the&#xA;ColumnModel is also known on the server, so these can be generated into the code.&lt;/p&gt;&#xA;&lt;p&gt;When that code fragment is passed through the &lt;tt&gt;eval&lt;/tt&gt; function in the success handler&#xA;of the Ajax request, the code is executed by the Javascript processor, and the anonymous function&#xA;runs, and returns the grid.&lt;/p&gt;&#xA;&lt;p&gt;There are several other methods available for creating TabPanels. The output of the following&#xA;examples should produce exactly the same appearance. The tabs can be created and rendered completely&#xA;in code, as in this example:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var tabs = new Ext.TabPanel({&#xA;renderTo: Ext.getBody(),&#xA;activeTab: 0,&#xA;items: [{&#xA;title: &apos;Tab 1&apos;,&#xA;html: &apos;A simple tab&apos;&#xA;},{&#xA;title: &apos;Tab 2&apos;,&#xA;html: &apos;Another one&apos;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;TabPanels can also be rendered from pre-existing markup in a couple of ways.  See the {@link #autoTabs} example for&#xA;rendering entirely from markup that is already structured correctly as a TabPanel (a container div with&#xA;one or more nested tab divs with class &apos;x-tab&apos;). You can also render from markup that is not strictly&#xA;structured by simply specifying by id which elements should be the container and the tabs. Using this method,&#xA;tab content can be pulled from different elements within the page by id regardless of page structure.  Note&#xA;that the tab divs in this example contain the class &apos;x-hide-display&apos; so that they can be rendered deferred&#xA;without displaying outside the tabs. You could alternately set {@link #deferredRender} to false to render all&#xA;content tabs on page load. For example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var tabs = new Ext.TabPanel({&#xA;renderTo: &apos;my-tabs&apos;,&#xA;activeTab: 0,&#xA;items:[&#xA;{contentEl:&apos;tab1&apos;, title:&apos;Tab 1&apos;},&#xA;{contentEl:&apos;tab2&apos;, title:&apos;Tab 2&apos;}&#xA;});&#xA;// Note that the tabs do not have to be nested within the container (although they can be)&#xA;&amp;lt;div id=&quot;my-tabs&quot;&gt;&amp;lt;/div&gt;&#xA;&amp;lt;div id=&quot;tab1&quot; class=&quot;x-hide-display&quot;&gt;A simple tab&amp;lt;/div&gt;&#xA;&amp;lt;div id=&quot;tab2&quot; class=&quot;x-hide-display&quot;&gt;Another one&amp;lt;/div&gt;&#xA;&lt;/code&gt;&lt;/pre&gt;" line="957" lineend="976" name="TabPanel" />
        <variable citdl="El.get" doc="Static method to retrieve Element objects. Uses simple caching to consistently return the same object.&#xA;Automatically fixes if an object was recreated with the same id via AJAX or DOM.&#xA;Shorthand of {@link Ext.Element#get}" line="3030" name="get" />
        <variable attributes="__static__" citdl="El.fly" doc="STATIC: Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -&#xA;the dom node can be overwritten by other code.&#xA;Shorthand of {@link Ext.Element#fly}" line="3043" name="fly" />
      </variable>
      <scope attributes="__local__ private" doc="* Ext JS Library 2.2 * Copyright(c) 2006-2008, Ext JS, LLC." ilk="function" line="9" lineend="2189" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="private" citdl="Ext.Element.Flyweight" line="10" name="libFlyweight" />
        <variable attributes="private" citdl="Ext.lib.Event" line="681" name="E" />
        <scope attributes="private" ilk="function" line="1280" lineend="1286" name="fly" returns="libFlyweight" signature="fly(el)">
          <variable ilk="argument" name="el" />
        </scope>
        <scope attributes="private" ilk="function" line="1290" lineend="1299" name="fnCleanUp" signature="fnCleanUp()">
          <variable attributes="__local__ private" citdl="Function.prototype" line="1291" name="p" />
        </scope>
        <scope attributes="private" ilk="class" line="1565" lineend="1683" name="Ext.lib.AnimMgr">
          <variable attributes="__local__ private" citdl="setInterval()" line="1567" name="thread" />
          <variable attributes="__local__ private" citdl="Array" line="1570" name="queue" />
          <variable attributes="__local__ private" citdl="Number" line="1573" name="tweenCount" />
          <variable citdl="Number" line="1576" name="fps" />
          <variable citdl="Number" line="1579" name="delay" />
          <scope ilk="function" line="1582" lineend="1587" name="registerElement" signature="registerElement(tween)">
            <variable ilk="argument" name="tween" />
            <variable citdl="Ext.lib.AnimMgr" name="this" />
          </scope>
          <scope ilk="function" line="1590" lineend="1601" name="unRegister" signature="unRegister(tween, index)">
            <variable ilk="argument" name="tween" />
            <variable citdl="index" ilk="argument" name="index" />
            <variable citdl="Ext.lib.AnimMgr" name="this" />
          </scope>
          <scope ilk="function" line="1604" lineend="1608" name="start" signature="start()">
            <variable citdl="Ext.lib.AnimMgr" name="this" />
          </scope>
          <scope ilk="function" line="1611" lineend="1628" name="stop" signature="stop(tween)">
            <variable ilk="argument" name="tween" />
            <variable citdl="Ext.lib.AnimMgr" name="this" />
          </scope>
          <scope ilk="function" line="1631" lineend="1651" name="run" signature="run()">
            <variable citdl="Ext.lib.AnimMgr" name="this" />
            <variable attributes="__local__ private" citdl="queue[i]" line="1633" name="tween" />
          </scope>
          <scope attributes="__local__ private" ilk="function" line="1653" lineend="1660" name="getIndex" returns="Number" signature="getIndex(anim)">
            <variable ilk="argument" name="anim" />
            <variable citdl="Ext.lib.AnimMgr" name="this" />
          </scope>
          <scope attributes="__local__ private" ilk="function" line="1663" lineend="1682" name="correctFrame" signature="correctFrame(tween)">
            <variable ilk="argument" name="tween" />
            <variable citdl="Ext.lib.AnimMgr" name="this" />
            <variable attributes="__local__ private" citdl="tween.totalFrames" line="1664" name="frames" />
            <variable attributes="__local__ private" citdl="tween.currentFrame" line="1665" name="frame" />
            <variable attributes="__local__ private" line="1666" name="expected" />
            <variable attributes="__local__ private" line="1667" name="elapsed" />
            <variable attributes="__local__ private" citdl="Number" line="1668" name="tweak" />
          </scope>
        </scope>
        <scope attributes="private" ilk="class" line="1685" lineend="1705" name="Ext.lib.Bezier">
          <scope ilk="function" line="1687" lineend="1704" name="getPosition" returns="Array" signature="getPosition(points, t)">
            <variable ilk="argument" name="points" />
            <variable ilk="argument" name="t" />
            <variable citdl="Ext.lib.Bezier" name="this" />
            <variable attributes="__local__ private" citdl="points.length" line="1688" name="n" />
            <variable attributes="__local__ private" citdl="Array" line="1689" name="tmp" />
          </scope>
        </scope>
        <scope attributes="__local__ private" ilk="function" line="1706" lineend="1817" name="(anonymous)" signature="(anonymous)()">
          <variable attributes="private" citdl="Ext.lib" line="1715" name="Y" />
          <variable attributes="private" citdl="Y.ColorAnim.superclass" line="1716" name="superclass" />
          <variable citdl="Y.ColorAnim.prototype" line="1717" name="proto" />
        </scope>
        <variable attributes="private" citdl="Ext.lib" line="1715" name="Y" />
        <variable attributes="private" citdl="Y.ColorAnim.superclass" line="1716" name="superclass" />
        <variable citdl="Y.ColorAnim.prototype" line="1717" name="proto" />
        <scope attributes="__local__ private" ilk="function" line="1997" lineend="2125" name="(anonymous)" signature="(anonymous)()">
          <variable attributes="__local__ private" citdl="Ext.lib" line="2007" name="Y" />
          <variable attributes="__local__ private" citdl="Y.Motion.superclass" line="2008" name="superclass" />
          <variable attributes="__local__ private" citdl="Y.Motion.prototype" line="2009" name="proto" />
          <scope attributes="private" ilk="function" line="2115" lineend="2120" name="translateValues" returns="val" signature="translateValues(val, start)">
            <variable citdl="Array" ilk="argument" name="val" />
            <variable ilk="argument" name="start" />
            <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2116" name="pageXY" />
          </scope>
          <scope attributes="private" ilk="function" line="2122" lineend="2124" name="isset" signature="isset(prop)">
            <variable ilk="argument" name="prop" />
          </scope>
        </scope>
        <scope attributes="private" ilk="function" line="2115" lineend="2120" name="translateValues" returns="val" signature="translateValues(val, start)">
          <variable citdl="Array" ilk="argument" name="val" />
          <variable ilk="argument" name="start" />
          <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2116" name="pageXY" />
        </scope>
        <scope attributes="private" ilk="function" line="2122" lineend="2124" name="isset" signature="isset(prop)">
          <variable ilk="argument" name="prop" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="2128" lineend="2186" name="(anonymous)" signature="(anonymous)()">
          <variable attributes="__local__ private" citdl="Ext.lib" line="2138" name="Y" />
          <variable attributes="__local__ private" citdl="Y.Scroll.superclass" line="2139" name="superclass" />
          <variable attributes="__local__ private" citdl="Y.Scroll.prototype" line="2140" name="proto" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="* Ext JS Library 2.2 * Copyright(c) 2006-2008, Ext JS, LLC." ilk="function" line="9" lineend="548" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="private" citdl="Ext.Element.Flyweight" line="11" name="libFlyweight" />
        <scope attributes="private" doc="all lib flyweight calls use their own flyweight to prevent&#xA;collisions with developer flyweights" ilk="function" line="443" lineend="449" name="fly" returns="libFlyweight" signature="fly(el)">
          <variable ilk="argument" name="el" />
        </scope>
        <scope attributes="private" ilk="function" line="536" lineend="545" name="fnCleanUp" signature="fnCleanUp()">
          <variable attributes="__local__ private" citdl="Function.prototype" line="537" name="p" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="11" lineend="138" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="private" citdl="Ext.Panel" line="13" name="cp" />
        <scope attributes="private" ilk="function" line="15" lineend="79" name="createConsole" signature="createConsole()">
          <variable attributes="__local__ private" citdl="Ext.debug.ScriptsPanel" line="17" name="scriptPanel" />
          <variable attributes="__local__ private" citdl="Ext.debug.LogPanel" line="18" name="logView" />
          <variable attributes="__local__ private" citdl="Ext.debug.DomTree" line="19" name="tree" />
          <variable attributes="__local__ private" citdl="Ext.TabPanel" line="34" name="tabs" />
          <scope attributes="__local__ private" ilk="function" line="73" lineend="75" name="handleResize" signature="handleResize()" />
        </scope>
      </scope>
      <variable attributes="private" citdl="Ext.Panel" line="13" name="cp" />
      <scope attributes="__local__ private" ilk="function" line="13" lineend="342" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="private" citdl="YAHOO.util.Event" line="14" name="E" />
        <variable attributes="private" citdl="YAHOO.util.Dom" line="15" name="D" />
        <variable attributes="private" citdl="YAHOO.util.Connect" line="16" name="CN" />
        <variable attributes="private" citdl="YAHOO.util.Easing" line="18" name="ES" />
        <variable attributes="private" citdl="YAHOO.util.Anim" line="19" name="A" />
        <variable attributes="private" citdl="Ext.Element.Flyweight" line="20" name="libFlyweight" />
        <scope attributes="private" doc="all lib flyweight calls use their own flyweight to prevent&#xA;collisions with developer flyweights" ilk="function" line="269" lineend="275" name="fly" returns="libFlyweight" signature="fly(el)">
          <variable ilk="argument" name="el" />
        </scope>
        <scope attributes="private" ilk="function" line="279" lineend="288" name="fnCleanUp" signature="fnCleanUp()">
          <variable attributes="__local__ private" citdl="Function.prototype" line="280" name="p" />
        </scope>
        <scope attributes="private" ilk="class" line="295" lineend="300" name="YAHOO.util.Anim">
          <scope ilk="function" line="295" lineend="304" name="animateX" signature="animateX(callback, scope)">
            <variable ilk="argument" name="callback" />
            <variable ilk="argument" name="scope" />
            <variable citdl="YAHOO.util.Anim" name="this" />
            <scope attributes="__local__ private" ilk="function" line="296" lineend="301" name="f" signature="f()" />
          </scope>
        </scope>
        <variable citdl="Object" line="308" name="YAHOO">
          <variable citdl="Object" line="308" name="util">
            <variable citdl="Object" line="308" name="DragDrop">
              <variable citdl="Ext.dd.DragDrop.defaultPadding" line="308" name="defaultPadding" />
              <variable citdl="Ext.dd.DragDrop.constrainTo" line="309" name="constrainTo" />
            </variable>
            <variable citdl="Object" line="322" name="AnimMgr">
              <variable citdl="Number" line="322" name="fps" />
            </variable>
          </variable>
        </variable>
        <scope attributes="private" ilk="class" line="333" lineend="339" name="YAHOO.util.Region">
          <scope ilk="function" line="333" lineend="339" name="constrainTo" returns="this" signature="constrainTo(r)">
            <variable ilk="argument" name="r" />
            <variable citdl="YAHOO.util.Region" name="this" />
          </scope>
          <variable citdl="this.top.constrain()" line="334" name="top" />
          <variable citdl="this.bottom.constrain()" line="335" name="bottom" />
          <variable citdl="this.left.constrain()" line="336" name="left" />
          <variable citdl="this.right.constrain()" line="337" name="right" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="13" lineend="541" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="private" citdl="Ext.Element.Flyweight" line="14" name="libFlyweight" />
        <scope attributes="private" doc="all lib flyweight calls use their own flyweight to prevent&#xA;collisions with developer flyweights" ilk="function" line="159" lineend="165" name="fly" returns="libFlyweight" signature="fly(el)">
          <variable ilk="argument" name="el" />
        </scope>
        <scope attributes="private" ilk="function" line="529" lineend="538" name="fnCleanUp" signature="fnCleanUp()">
          <variable attributes="__local__ private" citdl="Function.prototype" line="530" name="p" />
        </scope>
      </scope>
      <variable attributes="private" citdl="YAHOO.util.Event" line="14" name="E" />
      <scope attributes="private" ilk="function" line="15" lineend="79" name="createConsole" signature="createConsole()">
        <variable attributes="__local__ private" citdl="Ext.debug.ScriptsPanel" line="17" name="scriptPanel" />
        <variable attributes="__local__ private" citdl="Ext.debug.LogPanel" line="18" name="logView" />
        <variable attributes="__local__ private" citdl="Ext.debug.DomTree" line="19" name="tree" />
        <variable attributes="__local__ private" citdl="Ext.TabPanel" line="34" name="tabs" />
        <scope attributes="__local__ private" ilk="function" line="73" lineend="75" name="handleResize" signature="handleResize()" />
      </scope>
      <variable attributes="private" citdl="YAHOO.util.Dom" line="15" name="D" />
      <variable attributes="private" citdl="YAHOO.util.Connect" line="16" name="CN" />
      <scope attributes="__local__ private" ilk="class" line="16" lineend="133" name="(anonymous)">
        <scope ilk="function" line="73" lineend="80" name="encodeDate" returns="String" signature="encodeDate(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="(anonymous)" name="this" />
        </scope>
        <scope doc="Encodes an Object, Array or other value" ilk="function" line="87" lineend="123" name="encode" returns="String" signature="encode(o)">
          <variable citdl="Mixed" doc="The variable to encode" ilk="argument" name="o" />
          <variable citdl="(anonymous)" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="101" name="a" />
          <variable attributes="__local__ private" line="101" name="i" />
          <variable attributes="__local__ private" citdl="Boolean" line="101" name="b" />
          <variable attributes="__local__ private" citdl="o[i]" line="101" name="v" />
        </scope>
        <scope doc="Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError." ilk="function" line="130" lineend="132" name="decode" returns="Object" signature="decode(json)">
          <variable citdl="String" doc="The JSON string" ilk="argument" name="json" />
          <variable citdl="(anonymous)" name="this" />
        </scope>
      </scope>
      <scope attributes="__local__ private" doc="* These classes are derivatives of the similarly named&#xA;classes in the YUI Library." ilk="function" line="17" lineend="1168" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="private" citdl="Ext.EventManager" line="19" name="Event" />
        <variable attributes="private" citdl="Ext.lib.Dom" line="20" name="Dom" />
      </scope>
      <variable attributes="private" citdl="YAHOO.util.Easing" line="18" name="ES" />
      <variable attributes="private" citdl="YAHOO.util.Anim" line="19" name="A" />
      <variable attributes="private" citdl="Ext.EventManager" line="19" name="Event" />
      <variable attributes="private" citdl="Ext.Element.Flyweight" line="20" name="libFlyweight" />
      <variable attributes="private" citdl="Ext.lib.Dom" line="20" name="Dom" />
      <scope attributes="__local__ private" ilk="function" line="25" lineend="602" name="(anonymous)" signature="(anonymous)()">
        <variable citdl="Ext.Toolbar" line="27" name="T" />
      </scope>
      <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: An extended {@link Ext.Element} object that supports a shadow and shim, constrain to viewport and&#xA;automatic maintaining of shadow/shim positions." ilk="function" line="26" lineend="452" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="private" citdl="Ext.Element.prototype" line="64" name="supr" />
        <variable attributes="private" citdl="Array" doc="shims are shared among layer to keep from having 100 iframes" line="67" name="shims" />
      </scope>
      <variable citdl="Ext.Toolbar" line="27" name="T" />
      <scope attributes="__local__ private" ilk="function" line="41" lineend="683" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="private" citdl="Number" line="42" name="idSeed" />
        <variable attributes="private" citdl="navigator.userAgent.toLowerCase()" line="43" name="ua" />
        <variable attributes="private" line="58" name="isSafari" />
        <variable attributes="private" citdl="isSafari" line="58" name="isSafari3" />
        <variable attributes="private" citdl="window.location.href.toLowerCase().indexOf()" line="58" name="isSecure" />
        <variable attributes="private" citdl="document.compatMode" line="58" name="isStrict" />
        <variable attributes="private" line="58" name="isGecko3" />
        <variable attributes="private" line="58" name="isMac" />
        <variable attributes="private" citdl="isIE" line="58" name="isBorderBox" />
        <variable attributes="private" line="58" name="isIE" />
        <variable attributes="private" line="58" name="isLinux" />
        <variable attributes="private" line="58" name="isIE7" />
        <variable attributes="private" line="58" name="isAir" />
        <variable attributes="private" citdl="ua.indexOf()" line="58" name="isOpera" />
        <variable citdl="Object" line="58" name="window">
          <variable citdl="Object" line="58" name="location">
            <variable citdl="Object" line="58" name="href">
              <variable citdl="Object" line="58" name="toLowerCase()">
                <variable attributes="__local__ private" line="58" name="indexOf()" />
              </variable>
            </variable>
          </variable>
        </variable>
        <variable attributes="private" line="58" name="isGecko" />
        <variable citdl="Object" line="58" name="document">
          <variable citdl="Object" line="34" name="body">
            <variable line="34" name="clientHeight" />
            <variable line="43" name="clientWidth" />
          </variable>
          <variable attributes="__local__ private" line="58" name="compatMode" />
          <scope ilk="function" line="141" lineend="146" name="onreadystatechange" signature="onreadystatechange()">
            <variable citdl="document" name="this" />
          </scope>
          <variable line="143" name="onreadystatechange" />
        </variable>
        <variable attributes="private" line="58" name="isWindows" />
      </scope>
      <variable citdl="Ext.EventObject.setEvent()" line="42" name="ev" />
      <variable attributes="private" citdl="Number" line="42" name="idSeed" />
      <variable citdl="delay" line="43" name="d" />
      <variable attributes="private" citdl="navigator.userAgent.toLowerCase()" line="43" name="ua" />
      <variable citdl="Date" line="44" name="t" />
      <variable citdl="newFn" line="45" name="fn" />
      <variable citdl="newScope" line="46" name="scope" />
      <variable citdl="newArgs" line="47" name="args" />
      <variable citdl="setInterval()" line="49" name="id" />
      <variable attributes="private" line="58" name="isSafari" />
      <variable attributes="private" line="58" name="isAir" />
      <variable attributes="private" citdl="isSafari" line="58" name="isSafari3" />
      <variable attributes="private" citdl="document.compatMode" line="58" name="isStrict" />
      <variable attributes="private" line="58" name="isIE" />
      <variable citdl="Object" line="58" name="window">
        <variable citdl="Object" line="58" name="location">
          <variable citdl="Object" line="58" name="href">
            <variable citdl="Object" line="58" name="toLowerCase()">
              <variable attributes="__local__ private" line="58" name="indexOf()" />
            </variable>
          </variable>
        </variable>
      </variable>
      <variable attributes="private" line="58" name="isGecko" />
      <variable citdl="Object" line="58" name="document">
        <variable citdl="Object" line="34" name="body">
          <variable line="34" name="clientHeight" />
          <variable line="43" name="clientWidth" />
        </variable>
        <variable attributes="__local__ private" line="58" name="compatMode" />
        <scope ilk="function" line="141" lineend="146" name="onreadystatechange" signature="onreadystatechange()">
          <variable citdl="document" name="this" />
        </scope>
        <variable line="143" name="onreadystatechange" />
      </variable>
      <variable attributes="private" line="58" name="isIE7" />
      <variable attributes="private" line="58" name="isWindows" />
      <variable attributes="private" citdl="window.location.href.toLowerCase().indexOf()" line="58" name="isSecure" />
      <variable attributes="private" line="58" name="isGecko3" />
      <variable attributes="private" line="58" name="isLinux" />
      <variable attributes="private" citdl="ua.indexOf()" line="58" name="isOpera" />
      <variable attributes="private" line="58" name="isMac" />
      <variable attributes="private" citdl="isIE" line="58" name="isBorderBox" />
      <variable attributes="private" citdl="Ext.Element.prototype" line="64" name="supr" />
      <variable attributes="private" citdl="Array" doc="shims are shared among layer to keep from having 100 iframes" line="67" name="shims" />
      <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: Represents an Element in the DOM.&lt;br&gt;&lt;br&gt;&#xA;Usage:&lt;br&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// by id&#xA;var el = Ext.get(&quot;my-div&quot;);&#xA;// by DOM element reference&#xA;var el = Ext.get(myDivElement);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;b&gt;Animations&lt;/b&gt;&lt;br /&gt;&#xA;Many of the functions for manipulating an element have an optional &quot;animate&quot; parameter. The animate parameter&#xA;should either be a boolean (true) or an object literal with animation options. Note that the supported Element animation&#xA;options are a subset of the {@link Ext.Fx} animation options specific to Fx effects.  The Element animation options are:&#xA;&lt;pre&gt;&#xA;Option    Default   Description&#xA;--------- --------  ---------------------------------------------&#xA;duration  .35       The duration of the animation in seconds&#xA;easing    easeOut   The easing method&#xA;callback  none      A function to execute when the anim completes&#xA;scope     this      The scope (this) of the callback function&#xA;&lt;/pre&gt;&#xA;Also, the Anim object being used for the animation will be set on your options object as &quot;anim&quot;, which allows you to stop or&#xA;manipulate the animation. Here&apos;s an example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var el = Ext.get(&quot;my-div&quot;);&#xA;// no animation&#xA;el.setWidth(100);&#xA;// default animation&#xA;el.setWidth(100, true);&#xA;// animation with some options set&#xA;el.setWidth(100, {&#xA;duration: 1,&#xA;callback: this.foo,&#xA;scope: this&#xA;});&#xA;// using the &quot;anim&quot; property to get the Anim object&#xA;var opt = {&#xA;duration: 1,&#xA;callback: this.foo,&#xA;scope: this&#xA;el.setWidth(100, opt);&#xA;...&#xA;if(opt.anim.isAnimated()){&#xA;opt.anim.stop();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;b&gt; Composite (Collections of) Elements&lt;/b&gt;&lt;br /&gt;&#xA;For working with collections of Elements, see {@link Ext.CompositeElement}" ilk="function" line="68" lineend="3060" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="private" citdl="Ext.lib.Dom" line="69" name="D" />
        <variable attributes="private" citdl="Ext.lib.Event" line="70" name="E" />
        <variable attributes="private" citdl="Ext.lib.Anim" line="71" name="A" />
        <variable attributes="private" citdl="Object" doc="local style camelizing for speed" line="74" lineend="74" name="propCache" />
        <variable attributes="private" line="75" name="camelRe" />
        <scope attributes="private" ilk="function" line="76" lineend="76" name="camelFn" returns="a.charAt().toUpperCase()" signature="camelFn(m, a)">
          <variable ilk="argument" name="m" />
          <variable ilk="argument" name="a" />
        </scope>
        <variable attributes="private" citdl="document.defaultView" line="77" name="view" />
        <variable citdl="Ext.Element" line="103" name="El" />
        <variable attributes="private" citdl="El.prototype" line="2805" name="ep" />
        <variable attributes="private" citdl="f" line="2880" name="docEl" />
        <scope attributes="private" classrefs="El.prototype" ilk="class" line="2986" lineend="2993" name="flyFn">
          <scope attributes="__local__ private __ctor__" ilk="function" line="2986" lineend="2986" name="flyFn" signature="flyFn()">
            <variable citdl="flyFn" name="this" />
          </scope>
        </scope>
        <variable attributes="private" citdl="flyFn" line="2988" name="_cls" />
        <variable attributes="private" citdl="Ext.isStrict" doc="speedy lookup for elements never to box adjust" line="3046" name="noBoxAdjust" />
        <variable attributes="private" citdl="Number" line="3047" name="select" />
        <variable attributes="private" citdl="Number" line="3049" name="input" />
        <variable attributes="private" citdl="Number" line="3049" name="textarea" />
      </scope>
      <variable attributes="private" citdl="Object" doc="local style camelizing for speed" line="74" lineend="74" name="propCache" />
      <variable attributes="private" line="75" name="camelRe" />
      <scope ilk="class" line="75" lineend="77" name="Ext.Template">
        <scope ilk="function" line="75" lineend="77" name="call" returns="this[fnName]()" signature="call(fnName, value, allValues)">
          <variable ilk="argument" name="fnName" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="allValues" />
          <variable citdl="Ext.Template" name="this" />
        </scope>
      </scope>
      <scope attributes="private" ilk="function" line="76" lineend="76" name="camelFn" returns="a.charAt().toUpperCase()" signature="camelFn(m, a)">
        <variable ilk="argument" name="m" />
        <variable ilk="argument" name="a" />
      </scope>
      <variable attributes="private" citdl="document.defaultView" line="77" name="view" />
      <variable citdl="Ext.Element" line="103" name="El" />
      <scope attributes="__local__ private" doc="&#xA;&#xA;*&lt;pre&gt;&#xA;Format  Description                                                               Example returned values&#xA;------  -----------------------------------------------------------------------   -----------------------&#xA;d     Day of the month, 2 digits with leading zeros                             01 to 31&#xA;D     A short textual representation of the day of the week                     Mon to Sun&#xA;j     Day of the month without leading zeros                                    1 to 31&#xA;l     A full textual representation of the day of the week                      Sunday to Saturday&#xA;N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)&#xA;S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j&#xA;w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)&#xA;z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)&#xA;W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53&#xA;F     A full textual representation of a month, such as January or March        January to December&#xA;m     Numeric representation of a month, with leading zeros                     01 to 12&#xA;M     A short textual representation of a month                                 Jan to Dec&#xA;n     Numeric representation of a month, without leading zeros                  1 to 12&#xA;t     Number of days in the given month                                         28 to 31&#xA;L     Whether it&apos;s a leap year                                                  1 if it is a leap year, 0 otherwise.&#xA;o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004&#xA;belongs to the previous or next year, that year is used instead)&#xA;Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003&#xA;y     A two digit representation of a year                                      Examples: 99 or 03&#xA;a     Lowercase Ante meridiem and Post meridiem                                 am or pm&#xA;A     Uppercase Ante meridiem and Post meridiem                                 AM or PM&#xA;g     12-hour format of an hour without leading zeros                           1 to 12&#xA;G     24-hour format of an hour without leading zeros                           0 to 23&#xA;h     12-hour format of an hour with leading zeros                              01 to 12&#xA;H     24-hour format of an hour with leading zeros                              00 to 23&#xA;i     Minutes, with leading zeros                                               00 to 59&#xA;s     Seconds, with leading zeros                                               00 to 59&#xA;u     Milliseconds, with leading zeroes (arbitrary number of digits allowed)    Examples:&#xA;001 (i.e. 1ms) or&#xA;100 (i.e. 100ms) or&#xA;999 (i.e. 999ms) or&#xA;999876543210 (i.e. 999.876543210ms)&#xA;O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030&#xA;P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00&#xA;T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...&#xA;Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400&#xA;c     ISO 8601 date (note: milliseconds, if present, must be specified with     Examples:&#xA;at least 1 digit. There is no limit to how many digits the millisecond    2007-04-17T15:19:21+08:00 or&#xA;value may contain. see http://www.w3.org/TR/NOTE-datetime for more info)  2008-03-16T16:18:22Z or&#xA;2009-02-15T17:17:23.9+01:00 or&#xA;2010-01-14T18:16:24,999876543-07:00&#xA;U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463&#xA;&lt;/pre&gt;&#xA;&#xA;// Sample date:&#xA;// &apos;Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)&apos;&#xA;var dt = new Date(&apos;1/10/2007 03:05:01 PM GMT-0600&apos;);&#xA;document.write(dt.format(&apos;Y-m-d&apos;));                           // 2007-01-10&#xA;document.write(dt.format(&apos;F j, Y, g:i a&apos;));                   // January 10, 2007, 3:05 pm&#xA;document.write(dt.format(&apos;l, \\t\\he jS \\of F Y h:i:s A&apos;));  // Wednesday, the 10th of January 2007 03:05:01 PM&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;Date.patterns = {&#xA;ISO8601Long:&quot;Y-m-d H:i:s&quot;,&#xA;ISO8601Short:&quot;Y-m-d&quot;,&#xA;ShortDate: &quot;n/j/Y&quot;,&#xA;LongDate: &quot;l, F d, Y&quot;,&#xA;FullDateTime: &quot;l, F d, Y g:i:s A&quot;,&#xA;MonthDay: &quot;F d&quot;,&#xA;ShortTime: &quot;g:i A&quot;,&#xA;LongTime: &quot;g:i:s A&quot;,&#xA;SortableDateTime: &quot;Y-m-d\\TH:i:s&quot;,&#xA;UniversalSortableDateTime: &quot;Y-m-d H:i:sO&quot;,&#xA;YearMonth: &quot;F, Y&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;var dt = new Date();&#xA;document.write(dt.format(Date.patterns.ShortDate));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;*//*" ilk="function" line="110" lineend="725" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="private" citdl="Date.formatCodeToRegex" doc="private shorthand for Date.formatCodeToRegex since we&apos;ll be&#xA;using it fairly often" line="131" name="$f" />
      </scope>
      <variable attributes="private" citdl="Date.formatCodeToRegex" doc="private shorthand for Date.formatCodeToRegex since we&apos;ll be&#xA;using it fairly often" line="131" name="$f" />
      <scope doc="Modified version of Douglas Crockford&quot;s json.js that doesn&quot;t&#xA;mess with the Object prototype&#xA;http://www.json.org/js.html" ilk="class" line="133" lineend="89" name="Ext.util.JSON" />
      <variable citdl="Array" line="136" name="tasks" />
      <variable citdl="Array" line="137" name="removeQueue" />
      <variable citdl="Ext.EventObjectImpl" doc="create new event object impl so new events don&apos;t wipe out&#xA;properties" line="162" name="e" />
      <variable citdl="ni.children" line="176" name="cn" />
      <scope attributes="__local__ private" ilk="function" line="221" lineend="234" name="(anonymous)" signature="(anonymous)()" />
      <variable citdl="sp" line="237" name="overrides" />
      <variable citdl="sb" line="238" name="sp" />
      <variable citdl="overrides.constructor" line="239" name="sb" />
      <scope attributes="private" doc="all lib flyweight calls use their own flyweight to prevent&#xA;collisions with developer flyweights" ilk="function" line="269" lineend="275" name="fly" returns="libFlyweight" signature="fly(el)">
        <variable ilk="argument" name="el" />
      </scope>
      <scope attributes="private" ilk="function" line="279" lineend="288" name="fnCleanUp" signature="fnCleanUp()">
        <variable attributes="__local__ private" citdl="Function.prototype" line="280" name="p" />
      </scope>
      <scope attributes="private" ilk="class" line="295" lineend="300" name="YAHOO.util.Anim">
        <scope ilk="function" line="295" lineend="304" name="animateX" signature="animateX(callback, scope)">
          <variable ilk="argument" name="callback" />
          <variable ilk="argument" name="scope" />
          <variable citdl="YAHOO.util.Anim" name="this" />
          <scope attributes="__local__ private" ilk="function" line="296" lineend="301" name="f" signature="f()" />
        </scope>
      </scope>
      <variable citdl="Object" line="308" name="YAHOO">
        <variable citdl="Object" line="308" name="util">
          <variable citdl="Object" line="308" name="DragDrop">
            <variable citdl="Ext.dd.DragDrop.defaultPadding" line="308" name="defaultPadding" />
            <variable citdl="Ext.dd.DragDrop.constrainTo" line="309" name="constrainTo" />
          </variable>
          <variable citdl="Object" line="322" name="AnimMgr">
            <variable citdl="Number" line="322" name="fps" />
          </variable>
        </variable>
      </variable>
      <scope attributes="private" ilk="class" line="333" lineend="339" name="YAHOO.util.Region">
        <scope ilk="function" line="333" lineend="339" name="constrainTo" returns="this" signature="constrainTo(r)">
          <variable ilk="argument" name="r" />
          <variable citdl="YAHOO.util.Region" name="this" />
        </scope>
        <variable citdl="this.top.constrain()" line="334" name="top" />
        <variable citdl="this.bottom.constrain()" line="335" name="bottom" />
        <variable citdl="this.left.constrain()" line="336" name="left" />
        <variable citdl="this.right.constrain()" line="337" name="right" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="361" lineend="475" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="private" ilk="function" line="363" lineend="368" name="createBuffered" signature="createBuffered(h, o, scope)">
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="o" />
          <variable ilk="argument" name="scope" />
          <variable attributes="__local__ private" citdl="Ext.util.DelayedTask" line="364" name="task" />
        </scope>
        <scope attributes="private" ilk="function" line="370" lineend="375" name="createSingle" returns="h.apply()" signature="createSingle(h, e, fn, scope)">
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="e" />
          <variable ilk="argument" name="fn" />
          <variable ilk="argument" name="scope" />
        </scope>
        <scope attributes="private" ilk="function" line="377" lineend="384" name="createDelayed" signature="createDelayed(h, o, scope)">
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="o" />
          <variable ilk="argument" name="scope" />
          <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="379" name="args" />
        </scope>
      </scope>
      <scope attributes="private" ilk="function" line="363" lineend="368" name="createBuffered" signature="createBuffered(h, o, scope)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="o" />
        <variable ilk="argument" name="scope" />
        <variable attributes="__local__ private" citdl="Ext.util.DelayedTask" line="364" name="task" />
      </scope>
      <scope attributes="private" ilk="function" line="370" lineend="375" name="createSingle" returns="h.apply()" signature="createSingle(h, e, fn, scope)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="e" />
        <variable ilk="argument" name="fn" />
        <variable ilk="argument" name="scope" />
      </scope>
      <scope attributes="private" ilk="function" line="377" lineend="384" name="createDelayed" signature="createDelayed(h, o, scope)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="o" />
        <variable ilk="argument" name="scope" />
        <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="379" name="args" />
      </scope>
      <scope attributes="__local__ private" doc="Initialize doc classes" ilk="function" line="444" lineend="477" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="private" ilk="function" line="445" lineend="472" name="initExtCss" returns="Boolean" signature="initExtCss()">
          <variable attributes="__local__ private" citdl="document.body" doc="find the body element" line="447" name="bd" />
          <variable attributes="__local__ private" citdl="Array" line="450" name="cls" />
          <variable attributes="__local__ private" citdl="bd.parentNode" doc="add to the parent to allow for selectors like &quot;.ext-strict&#xA;.ext-ie&quot;" line="465" name="p" />
        </scope>
      </scope>
      <scope attributes="private" ilk="function" line="445" lineend="472" name="initExtCss" returns="Boolean" signature="initExtCss()">
        <variable attributes="__local__ private" citdl="document.body" doc="find the body element" line="447" name="bd" />
        <variable attributes="__local__ private" citdl="Array" line="450" name="cls" />
        <variable attributes="__local__ private" citdl="bd.parentNode" doc="add to the parent to allow for selectors like &quot;.ext-strict&#xA;.ext-ie&quot;" line="465" name="p" />
      </scope>
      <variable line="539" name="i" />
      <variable citdl="Array" line="608" name="groups[btn.toggleGroup]" />
      <variable citdl="i" line="674" name="intDay" />
      <variable citdl="prop.replace()" line="677" name="propCache[prop]" />
      <variable citdl="Object" line="779" lineend="1030" name="Date">
        <scope doc="private" ilk="function" line="112" lineend="128" name="formatCodeToRegex" returns="p" signature="formatCodeToRegex(character, currentGroup)">
          <variable ilk="argument" name="character" />
          <variable ilk="argument" name="currentGroup" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Date.parseCodes[character]" doc="Note: currentGroup - position in regex result array (see&#xA;notes for Date.parseCodes below)" line="114" name="p" />
        </scope>
        <variable citdl="Number" line="124" name="g" />
        <variable line="125" name="c" />
        <variable citdl="Ext.escapeRe()" doc="treat unrecognised characters as literals" line="126" name="s" />
        <variable citdl="Object" doc="private" line="135" lineend="135" name="parseFunctions">
          <variable citdl="Number" line="135" name="count" />
        </variable>
        <variable citdl="Array" line="136" name="parseRegexes" />
        <variable citdl="Object" line="137" lineend="137" name="formatFunctions">
          <variable citdl="Number" line="137" name="count" />
        </variable>
        <variable citdl="Array" line="138" name="daysInMonth" />
        <variable citdl="Number" line="139" name="y2kYear" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="146" name="MILLI" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="153" name="SECOND" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="160" name="MINUTE" />
        <variable citdl="String" doc="String */" line="166" name="HOUR" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="173" name="DAY" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="180" name="MONTH" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="187" name="YEAR" />
        <variable attributes="__static__" citdl="Array" doc="STATIC: An array of textual day names.&#xA;Override these values for international dates.&#xA;Example:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;Date.dayNames = [&#xA;&apos;SundayInYourLang&apos;,&#xA;&apos;MondayInYourLang&apos;,&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;" line="204" name="dayNames" />
        <variable attributes="__static__" citdl="Array" doc="STATIC: An array of textual month names.&#xA;Override these values for international dates.&#xA;Example:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;Date.monthNames = [&#xA;&apos;JanInYourLang&apos;,&#xA;&apos;FebInYourLang&apos;,&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;" line="228" name="monthNames" />
        <variable attributes="__static__" citdl="Object" doc="STATIC: An object hash of zero-based javascript month numbers (with short month names as keys. note: keys are case-sensitive).&#xA;Override these values for international dates.&#xA;Example:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;Date.monthNumbers = {&#xA;&apos;ShortJanNameInYourLang&apos;:0,&#xA;&apos;ShortFebNameInYourLang&apos;:1,&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;" line="256" lineend="269" name="monthNumbers">
          <variable citdl="Number" line="257" name="Jan" />
          <variable citdl="Number" line="258" name="Feb" />
          <variable citdl="Number" line="259" name="Mar" />
          <variable citdl="Number" line="260" name="Apr" />
          <variable citdl="Number" line="261" name="May" />
          <variable citdl="Number" line="262" name="Jun" />
          <variable citdl="Number" line="263" name="Jul" />
          <variable citdl="Number" line="264" name="Aug" />
          <variable citdl="Number" line="265" name="Sep" />
          <variable citdl="Number" line="266" name="Oct" />
          <variable citdl="Number" line="267" name="Nov" />
          <variable citdl="Number" line="268" name="Dec" />
        </variable>
        <scope attributes="__static__" doc="STATIC: Get the short month name for the given month number.&#xA;Override this function for international dates." ilk="function" line="278" lineend="280" name="getShortMonthName" returns="String" signature="getShortMonthName(month)">
          <variable citdl="Number" doc="A zero-based javascript month number." ilk="argument" name="month" />
          <variable citdl="Date" name="this" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Get the short day name for the given day number.&#xA;Override this function for international dates." ilk="function" line="289" lineend="291" name="getShortDayName" returns="String" signature="getShortDayName(day)">
          <variable citdl="Number" doc="A zero-based javascript day number." ilk="argument" name="day" />
          <variable citdl="Date" name="this" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Get the zero-based javascript month number for the given short/full month name.&#xA;Override this function for international dates." ilk="function" line="300" lineend="303" name="getMonthNumber" returns="Number" signature="getMonthNumber(name)">
          <variable citdl="String" doc="The short/full month name." ilk="argument" name="name" />
          <variable citdl="Date" name="this" />
        </scope>
        <variable attributes="__static__" citdl="Object" doc="STATIC: The base format-code to formatting-function hashmap used by the {@link #format} method.&#xA;Formatting functions are strings (or functions which return strings) which&#xA;will return the appropriate value when evaluated in the context of the Date object&#xA;from which the {@link #format} method is called.&#xA;Add to / override these mappings for custom date formatting.&#xA;Note: Date.format() treats characters as literals if an appropriate mapping cannot be found.&#xA;Example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;Date.formatCodes.x = &quot;String.leftPad(this.getDate(), 2, &apos;0&apos;)&quot;;&#xA;(new Date()).format(&quot;X&quot;); // returns the current day of the month&#xA;&lt;/code&gt;&lt;/pre&gt;" line="320" lineend="374" name="formatCodes">
          <variable citdl="String" line="321" name="d" />
          <variable citdl="String" line="322" name="D" />
          <variable citdl="String" doc="get localised short day name" line="323" name="j" />
          <variable citdl="String" line="324" name="l" />
          <variable citdl="String" line="325" name="N" />
          <variable citdl="String" line="326" name="S" />
          <variable citdl="String" line="327" name="w" />
          <variable citdl="String" line="328" name="z" />
          <variable citdl="String" line="329" name="W" />
          <variable citdl="String" line="330" name="F" />
          <variable citdl="String" line="331" name="m" />
          <variable citdl="String" line="332" name="M" />
          <variable citdl="String" doc="get localised short month name" line="333" name="n" />
          <variable citdl="String" line="334" name="t" />
          <variable citdl="String" line="335" name="L" />
          <variable citdl="String" line="336" name="o" />
          <variable citdl="String" line="337" name="Y" />
          <variable citdl="String" line="338" name="y" />
          <variable citdl="String" line="339" name="a" />
          <variable citdl="String" line="340" name="A" />
          <variable citdl="String" line="341" name="g" />
          <variable citdl="String" line="342" name="G" />
          <variable citdl="String" line="343" name="h" />
          <variable citdl="String" line="344" name="H" />
          <variable citdl="String" line="345" name="i" />
          <variable citdl="String" line="346" name="s" />
          <variable citdl="String" line="347" name="u" />
          <variable citdl="String" line="348" name="O" />
          <variable citdl="String" line="349" name="P" />
          <variable citdl="String" line="350" name="T" />
          <variable citdl="String" line="351" name="Z" />
          <scope ilk="function" line="352" lineend="358" name="c" returns="code.join()" signature="c()">
            <variable citdl="formatCodes" name="this" />
            <variable attributes="__local__ private" citdl="c.charAt()" line="354" name="e" />
          </scope>
          <variable citdl="String" doc="c: function() { // ISO-8601 -- UTC format return [&#xA;&quot;this.getUTCFullYear()&quot;, &quot;&apos;-&apos;&quot;,&#xA;&quot;String.leftPad(this.getUTCMonth() + 1, 2, &apos;0&apos;)&quot;, &quot;&apos;-&apos;&quot;,&#xA;&quot;String.leftPad(this.getUTCDate(), 2, &apos;0&apos;)&quot;," line="373" name="U" />
        </variable>
        <scope attributes="__static__" doc="STATIC: Parses the passed string using the specified format. Note that this function expects dates in normal calendar&#xA;format, meaning that months are 1-based (1 = January) and not zero-based like in JavaScript dates.  Any part of&#xA;the date format that is not specified will default to the current date value for that part.  Time parts can also&#xA;be specified, but default to 0.  Keep in mind that the input date string must precisely match the specified format&#xA;string or the parse operation will fail.&#xA;Example Usage:&#xA;*&lt;pre&gt;&lt;code&gt;&#xA;//dt = Fri May 25 2007 (current date)&#xA;var dt = new Date();&#xA;//dt = Thu May 25 2006 (today&apos;s month/day in 2006)&#xA;dt = Date.parseDate(&quot;2006&quot;, &quot;Y&quot;);&#xA;//dt = Sun Jan 15 2006 (all date parts specified)&#xA;dt = Date.parseDate(&quot;2006-01-15&quot;, &quot;Y-m-d&quot;);&#xA;//dt = Sun Jan 15 2006 15:20:01 GMT-0600 (CST)&#xA;dt = Date.parseDate(&quot;2006-01-15 3:20:01 PM&quot;, &quot;Y-m-d h:i:s A&quot; );&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="401" lineend="408" name="parseDate" returns="Date" signature="parseDate(input, format)">
          <variable citdl="String" doc="The unparsed date as a string." ilk="argument" name="input" />
          <variable citdl="String" doc="The format the date is in." ilk="argument" name="format" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Date.parseFunctions" line="402" name="p" />
          <variable attributes="__local__ private" citdl="p[format]" line="406" name="func" />
        </scope>
        <scope doc="private" ilk="function" line="411" lineend="421" name="getFormatCode" returns="f" signature="getFormatCode(character)">
          <variable ilk="argument" name="character" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Date.formatCodes[character]" line="412" name="f" />
          <variable citdl="Object" line="415" name="Ext">
            <variable line="415" name="type()" />
          </variable>
        </scope>
        <scope doc="private" ilk="function" line="424" lineend="444" name="createNewFormat" signature="createNewFormat(format)">
          <variable ilk="argument" name="format" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="String" line="425" name="funcName" />
          <variable attributes="__local__ private" citdl="String" line="427" name="code" />
          <variable attributes="__local__ private" citdl="Boolean" line="428" name="special" />
          <variable attributes="__local__ private" citdl="String" line="429" name="ch" />
        </scope>
        <scope doc="private" ilk="function" line="447" lineend="508" name="createParser" signature="createParser(format)">
          <variable ilk="argument" name="format" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="String" line="448" name="funcName" />
          <variable attributes="__local__ private" citdl="Date.parseRegexes.length" line="449" name="regexNum" />
          <variable attributes="__local__ private" citdl="Number" line="450" name="currentGroup" />
          <variable attributes="__local__ private" citdl="String" line="453" name="code" />
          <variable attributes="__local__ private" citdl="String" line="462" name="regex" />
          <variable attributes="__local__ private" citdl="Boolean" line="464" name="special" />
          <variable attributes="__local__ private" citdl="String" line="465" name="ch" />
          <variable attributes="__local__ private" citdl="Date.formatCodeToRegex()" line="476" name="obj" />
        </scope>
        <variable citdl="Object" doc="private" line="511" lineend="722" name="parseCodes">
          <variable citdl="Object" doc="* Notes: * g = {Number} calculation group (0 or 1." line="518" lineend="522" name="d">
            <variable citdl="Number" line="519" name="g" />
            <variable citdl="String" line="520" name="c" />
            <variable citdl="String" doc="day of month with leading zeroes (01 - 31)" line="521" name="s" />
          </variable>
          <variable citdl="Object" line="523" lineend="527" name="j">
            <variable citdl="Number" line="524" name="g" />
            <variable citdl="String" line="525" name="c" />
            <variable citdl="String" doc="day of month without leading zeroes (1 - 31)" line="526" name="s" />
          </variable>
          <scope ilk="function" line="528" lineend="535" name="D" signature="D()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <scope ilk="function" line="536" lineend="542" name="l" signature="l()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <variable citdl="Object" line="543" lineend="547" name="N">
            <variable citdl="Number" line="544" name="g" />
            <variable line="545" name="c" />
            <variable citdl="String" doc="ISO-8601 day number (1 (monday) - 7 (sunday))" line="546" name="s" />
          </variable>
          <variable citdl="Object" line="548" lineend="552" name="S">
            <variable citdl="Number" line="549" name="g" />
            <variable line="550" name="c" />
            <variable citdl="String" line="551" name="s" />
          </variable>
          <variable citdl="Object" line="553" lineend="557" name="w">
            <variable citdl="Number" line="554" name="g" />
            <variable line="555" name="c" />
            <variable citdl="String" doc="javascript day number (0 (sunday) - 6 (saturday))" line="556" name="s" />
          </variable>
          <variable citdl="Object" line="558" lineend="562" name="z">
            <variable citdl="Number" line="559" name="g" />
            <variable line="560" name="c" />
            <variable citdl="String" doc="day of the year (0 - 364 (365 in leap years))" line="561" name="s" />
          </variable>
          <variable citdl="Object" line="563" lineend="567" name="W">
            <variable citdl="Number" line="564" name="g" />
            <variable line="565" name="c" />
            <variable citdl="String" doc="ISO-8601 week number (with leading zero)" line="566" name="s" />
          </variable>
          <scope ilk="function" line="568" lineend="574" name="F" signature="F()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <scope ilk="function" line="575" lineend="580" name="M" returns="Ext.applyIf()" signature="M()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <variable citdl="Object" line="581" lineend="585" name="m">
            <variable citdl="Number" line="582" name="g" />
            <variable citdl="String" line="583" name="c" />
            <variable citdl="String" doc="month number with leading zeros (01 - 12)" line="584" name="s" />
          </variable>
          <variable citdl="Object" line="586" lineend="590" name="n">
            <variable citdl="Number" line="587" name="g" />
            <variable citdl="String" line="588" name="c" />
            <variable citdl="String" doc="month number without leading zeros (1 - 12)" line="589" name="s" />
          </variable>
          <variable citdl="Object" line="591" lineend="595" name="t">
            <variable citdl="Number" line="592" name="g" />
            <variable line="593" name="c" />
            <variable citdl="String" doc="no." line="594" name="s" />
          </variable>
          <variable citdl="Object" line="596" lineend="600" name="L">
            <variable citdl="Number" line="597" name="g" />
            <variable line="598" name="c" />
            <variable citdl="String" line="599" name="s" />
          </variable>
          <scope ilk="function" line="601" lineend="603" name="o" returns="$f()" signature="o()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <variable citdl="Object" line="604" lineend="608" name="Y">
            <variable citdl="Number" line="605" name="g" />
            <variable citdl="String" line="606" name="c" />
            <variable citdl="String" doc="4-digit year" line="607" name="s" />
          </variable>
          <variable citdl="Object" line="609" lineend="614" name="y">
            <variable citdl="Number" line="610" name="g" />
            <variable citdl="String" line="611" name="c" />
            <variable citdl="String" doc="2-digit year" line="613" name="s" />
          </variable>
          <variable citdl="Object" line="615" lineend="621" name="a">
            <variable citdl="Number" line="616" name="g" />
            <variable citdl="String" line="617" name="c" />
            <variable citdl="String" line="620" name="s" />
          </variable>
          <variable citdl="Object" line="622" lineend="628" name="A">
            <variable citdl="Number" line="623" name="g" />
            <variable citdl="String" line="624" name="c" />
            <variable citdl="String" line="627" name="s" />
          </variable>
          <scope ilk="function" line="629" lineend="631" name="g" returns="$f()" signature="g()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <variable citdl="Object" line="632" lineend="636" name="G">
            <variable citdl="Number" line="633" name="g" />
            <variable citdl="String" line="634" name="c" />
            <variable citdl="String" doc="24-hr format of an hour without leading zeroes (0 - 23)" line="635" name="s" />
          </variable>
          <scope ilk="function" line="637" lineend="639" name="h" returns="$f()" signature="h()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <variable citdl="Object" line="640" lineend="644" name="H">
            <variable citdl="Number" line="641" name="g" />
            <variable citdl="String" line="642" name="c" />
            <variable citdl="String" doc="24-hr format of an hour with leading zeroes (00 - 23)" line="643" name="s" />
          </variable>
          <variable citdl="Object" line="645" lineend="649" name="i">
            <variable citdl="Number" line="646" name="g" />
            <variable citdl="String" line="647" name="c" />
            <variable citdl="String" doc="minutes with leading zeros (00 - 59)" line="648" name="s" />
          </variable>
          <variable citdl="Object" line="650" lineend="654" name="s">
            <variable citdl="Number" line="651" name="g" />
            <variable citdl="String" line="652" name="c" />
            <variable citdl="String" doc="seconds with leading zeros (00 - 59)" line="653" name="s" />
          </variable>
          <variable citdl="Object" line="655" lineend="659" name="u">
            <variable citdl="Number" line="656" name="g" />
            <variable citdl="String" line="657" name="c" />
            <variable citdl="String" doc="milliseconds with leading zeroes (arbitrary number of digits&#xA;allowed) e.g." line="658" name="s" />
          </variable>
          <variable citdl="Object" line="660" lineend="670" name="O">
            <variable citdl="Number" line="661" name="g" />
            <variable citdl="Array" line="663" name="c" />
            <variable citdl="String" doc="GMT offset in hrs and mins" line="669" name="s" />
          </variable>
          <variable citdl="Object" line="671" lineend="681" name="P">
            <variable citdl="Number" line="672" name="g" />
            <variable citdl="Array" line="674" name="c" />
            <variable citdl="String" doc="GMT offset in hrs and mins (with colon separator)" line="680" name="s" />
          </variable>
          <variable citdl="Object" line="682" lineend="686" name="T">
            <variable citdl="Number" line="683" name="g" />
            <variable line="684" name="c" />
            <variable citdl="String" doc="timezone abbrev." line="685" name="s" />
          </variable>
          <variable citdl="Object" line="687" lineend="692" name="Z">
            <variable citdl="Number" line="688" name="g" />
            <variable citdl="String" doc="-43200 &lt;= UTC offset &lt;= 50400" line="689" name="c" />
            <variable citdl="String" doc="leading &apos;+&apos; sign is optional for UTC offset" line="691" name="s" />
          </variable>
          <scope ilk="function" line="693" lineend="716" name="c" signature="c()">
            <variable citdl="parseCodes" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="694" name="calc" />
            <variable attributes="__local__ private" citdl="Array" doc="second" line="702" name="arr" />
          </scope>
          <variable citdl="String" line="702" name="c" />
          <variable citdl="Object" line="717" lineend="721" name="U">
            <variable citdl="Number" line="718" name="g" />
            <variable citdl="String" line="719" name="c" />
            <variable citdl="String" doc="leading minus sign indicates seconds before UNIX epoch" line="720" name="s" />
          </variable>
        </variable>
        <scope ilk="function" line="779" lineend="785" name="precompileFormats" signature="precompileFormats(s)">
          <variable ilk="argument" name="s" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="s.split()" line="780" name="formats" />
        </scope>
        <variable citdl="Date.prototype.setMonth" line="1018" name="brokenSetMonth" />
        <scope ilk="function" line="1019" lineend="1029" name="setMonth" returns="Date.brokenSetMonth.apply()" signature="setMonth(num)">
          <variable ilk="argument" name="num" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Math.ceil()" line="1021" name="n" />
          <variable attributes="__local__ private" citdl="Math.ceil()" line="1022" name="back_year" />
          <variable attributes="__local__ private" line="1023" name="month" />
        </scope>
        <scope doc="Returns the number of milliseconds between this date and date&#xA;@param {Date} date (optional) Defaults to now&#xA;@return {Number} The diff in milliseconds&#xA;@member Date getElapsed" ilk="function" line="1028" lineend="1030" name="getElapsed" returns="Math.abs()" signature="getElapsed(date)">
          <variable ilk="argument" name="date" />
          <variable citdl="Date" name="this" />
        </scope>
      </variable>
      <variable line="788" name="tm" />
      <scope doc="precompile instead of lazy init" ilk="class" line="792" name="Ext.ColorPalette" />
      <scope doc="Utility function that allows you to easily switch a string between two alternating values.  The passed value&#xA;is compared to the current string, and if they are equal, the other value that was passed in is returned.  If&#xA;they are already different, the first value passed in is returned.  Note that this method returns the new value&#xA;but does not change the current string.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// alternate sort directions&#xA;sort = sort.toggle(&apos;ASC&apos;, &apos;DESC&apos;);&#xA;// instead of conditional logic:&#xA;sort = (sort == &apos;ASC&apos; ? &apos;DESC&apos; : &apos;ASC&apos;);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="class" line="959" lineend="961" name="String">
        <scope doc="Utility function that allows you to easily switch a string between two alternating values.  The passed value&#xA;is compared to the current string, and if they are equal, the other value that was passed in is returned.  If&#xA;they are already different, the first value passed in is returned.  Note that this method returns the new value&#xA;but does not change the current string.&#xA;&lt;pre&gt;&lt;code&gt;&#xA;// alternate sort directions&#xA;sort = sort.toggle(&apos;ASC&apos;, &apos;DESC&apos;);&#xA;// instead of conditional logic:&#xA;sort = (sort == &apos;ASC&apos; ? &apos;DESC&apos; : &apos;ASC&apos;);&#xA;&lt;/code&gt;&lt;/pre&gt;" ilk="function" line="959" lineend="961" name="toggle" returns="String" signature="toggle(value, other)">
          <variable citdl="String" doc="The value to compare to the current string" ilk="argument" name="value" />
          <variable citdl="String" doc="The new value to use if the string already equals the first value passed in" ilk="argument" name="other" />
          <variable citdl="String" name="this" />
        </scope>
        <variable citdl="String" doc="Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var s = &apos;  foo bar  &apos;;&#xA;alert(&apos;-&apos; + s + &apos;-&apos;);         //alerts &quot;- foo bar -&quot;&#xA;alert(&apos;-&apos; + s.trim() + &apos;-&apos;);  //alerts &quot;-foo bar-&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;" line="972" name="trim" />
      </scope>
      <variable citdl="x" line="1246" name="this[0]" />
      <variable citdl="y" line="1247" name="this[1]" />
      <scope attributes="private" ilk="class" line="1565" lineend="1683" name="Ext.lib.AnimMgr">
        <variable attributes="__local__ private" citdl="setInterval()" line="1567" name="thread" />
        <variable attributes="__local__ private" citdl="Array" line="1570" name="queue" />
        <variable attributes="__local__ private" citdl="Number" line="1573" name="tweenCount" />
        <variable citdl="Number" line="1576" name="fps" />
        <variable citdl="Number" line="1579" name="delay" />
        <scope ilk="function" line="1582" lineend="1587" name="registerElement" signature="registerElement(tween)">
          <variable ilk="argument" name="tween" />
          <variable citdl="Ext.lib.AnimMgr" name="this" />
        </scope>
        <scope ilk="function" line="1590" lineend="1601" name="unRegister" signature="unRegister(tween, index)">
          <variable ilk="argument" name="tween" />
          <variable citdl="index" ilk="argument" name="index" />
          <variable citdl="Ext.lib.AnimMgr" name="this" />
        </scope>
        <scope ilk="function" line="1604" lineend="1608" name="start" signature="start()">
          <variable citdl="Ext.lib.AnimMgr" name="this" />
        </scope>
        <scope ilk="function" line="1611" lineend="1628" name="stop" signature="stop(tween)">
          <variable ilk="argument" name="tween" />
          <variable citdl="Ext.lib.AnimMgr" name="this" />
        </scope>
        <scope ilk="function" line="1631" lineend="1651" name="run" signature="run()">
          <variable citdl="Ext.lib.AnimMgr" name="this" />
          <variable attributes="__local__ private" citdl="queue[i]" line="1633" name="tween" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="1653" lineend="1660" name="getIndex" returns="Number" signature="getIndex(anim)">
          <variable ilk="argument" name="anim" />
          <variable citdl="Ext.lib.AnimMgr" name="this" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="1663" lineend="1682" name="correctFrame" signature="correctFrame(tween)">
          <variable ilk="argument" name="tween" />
          <variable citdl="Ext.lib.AnimMgr" name="this" />
          <variable attributes="__local__ private" citdl="tween.totalFrames" line="1664" name="frames" />
          <variable attributes="__local__ private" citdl="tween.currentFrame" line="1665" name="frame" />
          <variable attributes="__local__ private" line="1666" name="expected" />
          <variable attributes="__local__ private" line="1667" name="elapsed" />
          <variable attributes="__local__ private" citdl="Number" line="1668" name="tweak" />
        </scope>
      </scope>
      <variable citdl="Ext.get()" line="1672" name="el" />
      <variable citdl="offsets" line="1673" name="offsets" />
      <scope attributes="private" ilk="class" line="1685" lineend="1705" name="Ext.lib.Bezier">
        <scope ilk="function" line="1687" lineend="1704" name="getPosition" returns="Array" signature="getPosition(points, t)">
          <variable ilk="argument" name="points" />
          <variable ilk="argument" name="t" />
          <variable citdl="Ext.lib.Bezier" name="this" />
          <variable attributes="__local__ private" citdl="points.length" line="1688" name="n" />
          <variable attributes="__local__ private" citdl="Array" line="1689" name="tmp" />
        </scope>
      </scope>
      <variable attributes="private" citdl="Ext.lib" line="1715" name="Y" />
      <variable attributes="private" citdl="Y.ColorAnim.superclass" line="1716" name="superclass" />
      <variable citdl="Y.ColorAnim.prototype" line="1717" name="proto" />
      <scope attributes="private" ilk="function" line="2115" lineend="2120" name="translateValues" returns="val" signature="translateValues(val, start)">
        <variable citdl="Array" ilk="argument" name="val" />
        <variable ilk="argument" name="start" />
        <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2116" name="pageXY" />
      </scope>
      <scope attributes="private" ilk="function" line="2122" lineend="2124" name="isset" signature="isset(prop)">
        <variable ilk="argument" name="prop" />
      </scope>
      <variable attributes="private" citdl="El.prototype" line="2805" name="ep" />
      <variable attributes="private" citdl="f" line="2880" name="docEl" />
      <scope attributes="private" classrefs="El.prototype" ilk="class" line="2986" lineend="2993" name="flyFn">
        <scope attributes="__local__ private __ctor__" ilk="function" line="2986" lineend="2986" name="flyFn" signature="flyFn()">
          <variable citdl="flyFn" name="this" />
        </scope>
      </scope>
      <variable attributes="private" citdl="flyFn" line="2988" name="_cls" />
      <variable attributes="private" citdl="Ext.isStrict" doc="speedy lookup for elements never to box adjust" line="3046" name="noBoxAdjust" />
    </scope>
  </file>
</codeintel>
