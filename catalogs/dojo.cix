<?xml version="1.0" encoding="UTF-8"?>
<codeintel description="Dojo Toolkit API - version 1.2.0" version="2.0">
  <file lang="JavaScript" path="">
    <scope ilk="blob" lang="JavaScript" name="dojo_v120">
      <scope ilk="class" name="dijit">
        <scope name="ColorPalette" ilk="function" doc="A keyboard accessible color-picking widget">
          <scope name="defaultTimeout" citdl="Number" doc="number of milliseconds before a held key or button becomes typematic" />
          <scope name="timeoutChangeRate" citdl="Number" doc="fraction of time used to change the typematic timer between events 1.0 means that each typematic event fires at defaultTimeout intervals &amp;amp;lt; 1.0 means that each typematic event fires at an increasing faster rate" />
          <scope name="palette" citdl="String" doc="Size of grid, either &amp;amp;quot;7x10&amp;amp;quot; or &amp;amp;quot;3x4&amp;amp;quot;." />
          <variable name="value" doc="" />
          <variable name="_currentFocus" citdl="Integer" doc="Index of the currently focused color." attributes="private" />
          <variable name="_xDim" citdl="Integer" doc="This is the number of colors horizontally across." attributes="private" />
          <variable name="_yDim" citdl="Integer" doc="/		This is the number of colors vertically down." attributes="private" />
          <scope name="_palettes" citdl="Map" doc="This represents the value of the colors. The first level is a hashmap of the different arrays available The next two dimensions represent the columns and rows of colors." attributes="private">
            <scope name="7x10" doc="" />
            <scope name="3x4" doc="" />
          </scope>
          <scope name="_imagePaths" citdl="Map" doc="This is stores the path to the palette images" attributes="private">
            <scope name="7x10" doc="" />
            <scope name="3x4" doc="" />
          </scope>
          <scope name="_paletteCoords" citdl="Map" doc="This is a map that is used to calculate the coordinates of the images that make up the palette." attributes="private">
            <scope name="leftOffset" doc="" />
            <scope name="topOffset" doc="" />
            <scope name="cWidth" doc="" />
          </scope>
          <scope name="templatePath" citdl="String" doc="Path to the template of this widget." />
          <variable name="_paletteDims" citdl="Object" doc="Size of the supported palettes for alignment purposes." attributes="private">
            <variable name="7x10" citdl="Object" doc="">
              <scope name="width" doc="" />
              <scope name="height" doc="" />
            </variable>
            <variable name="3x4" citdl="Object" doc="">
              <scope name="width" doc="" />
              <scope name="height" doc="" />
            </variable>
          </variable>
          <scope name="tabIndex" citdl="String" doc="Widget tabindex." />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="focus" ilk="function" doc="Focus this ColorPalette. Puts focus on the first swatch." />
          <scope name="onChange" ilk="function" signature="onChange(color)" doc="Callback when a color is selected.">
            <variable ilk="argument" name="color" citdl="String" doc="Hex value corresponding to color. console.debug(&amp;amp;quot;Color selected is: &amp;amp;quot;+color);" />
          </scope>
          <scope name="_focusFirst" ilk="function" attributes="private" doc="" />
          <scope name="_onDivNodeFocus" ilk="function" signature="_onDivNodeFocus(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope name="_onFocus" ilk="function" attributes="private" doc="" />
          <scope name="_onBlur" ilk="function" attributes="private" doc="" />
          <scope name="_onCellDijitclick" ilk="function" signature="_onCellDijitclick(evt)" doc="Handler for click, enter key &amp;amp;amp; space key. Selects the color." attributes="private">
            <variable ilk="argument" name="evt" citdl="Event" doc="The event." />
          </scope>
          <scope name="_onCellMouseEnter" ilk="function" signature="_onCellMouseEnter(evt)" doc="Handler for onMouseOver. Put focus on the color under the mouse." attributes="private">
            <variable ilk="argument" name="evt" citdl="Event" doc="The mouse event." />
          </scope>
          <scope name="_onCellFocus" ilk="function" signature="_onCellFocus(evt)" doc="Handler for onFocus. Removes highlight of the color that just lost focus, and highlights the new color." attributes="private">
            <variable ilk="argument" name="evt" citdl="Event" doc="The focus event." />
          </scope>
          <scope name="_setCurrent" ilk="function" signature="_setCurrent(node)" doc="Called when color is hovered or focused." attributes="private">
            <variable ilk="argument" name="node" citdl="Node" />
          </scope>
          <scope name="_onCellBlur" ilk="function" signature="_onCellBlur(evt)" doc="needed for Firefox 2 on Mac OS X" attributes="private">
            <variable ilk="argument" name="evt" citdl="Event" />
          </scope>
          <scope name="_removeCellHighlight" ilk="function" signature="_removeCellHighlight(index)" attributes="private" doc="">
            <variable ilk="argument" name="index" />
          </scope>
          <scope name="_selectColor" ilk="function" signature="_selectColor(selectNode)" doc="This selects a color. It triggers the onChange event area: The area node that covers the color being selected." attributes="private">
            <variable ilk="argument" name="selectNode" />
          </scope>
          <scope name="_navigateByKey" ilk="function" signature="_navigateByKey(increment,typeCount)" doc="This is the callback for typematic. It changes the focus and the highlighed color." attributes="private">
            <variable ilk="argument" name="increment" citdl="How" doc="much the key is navigated." />
            <variable ilk="argument" name="typeCount" citdl="How" doc="many times typematic has fired." />
          </scope>
          <scope name="domNode" />
          <variable name="_cellNodes" attributes="private" doc="" />
          <variable name="colorNames" doc="" />
        </scope>
        <scope name="Declaration" ilk="function" doc="The Declaration widget allows a user to declare new widget classes directly from a snippet of markup.">
          <scope name="_noScript" attributes="private" doc="" />
          <scope name="widgetClass" doc="" />
          <scope name="replaceVars" doc="" />
          <scope name="defaults" doc="" />
          <scope name="buildRendering" ilk="function" doc="" />
        </scope>
        <scope name="DialogUnderlay" ilk="function" doc="The component that grays out the screen behind the dialog  Template has two divs; outer div is used for fade-in/fade-out, and also to hold background iframe. Inner div has opacity specified in CSS file.">
          <scope name="templateString" doc="" />
          <variable name="attributeMap" citdl="Object" doc="" />
          <scope name="postCreate" ilk="function" doc="Append the underlay to the body" />
          <scope name="layout" ilk="function" doc="Sets the background to the size of the viewport" />
          <scope name="show" ilk="function" doc="Show the dialog underlay" />
          <scope name="hide" ilk="function" doc="hides the dialog underlay" />
          <scope name="uninitialize" ilk="function" doc="" />
          <variable name="bgIframe" doc="">
            <scope name="iframe" />
          </variable>
          <scope name="domNode" />
        </scope>
        <scope name="_DialogMixin" ilk="function" attributes="private" doc="">
          <scope name="attributeMap" doc="" />
          <scope name="execute" ilk="function" signature="execute(formContents)" doc="User defined function to do stuff when the user hits the submit button">
            <variable ilk="argument" name="formContents" citdl="Object" />
          </scope>
          <scope name="onCancel" ilk="function" doc="Callback when user has canceled dialog, to notify container (user shouldn't override)" />
          <scope name="onExecute" ilk="function" doc="Callback when user is about to execute dialog, to notify container (user shouldn't override)" />
          <scope name="_onSubmit" ilk="function" doc="callback when user hits submit button" attributes="private" />
          <scope name="_getFocusItems" ilk="function" signature="_getFocusItems(dialogNode)" attributes="private" doc="">
            <variable ilk="argument" name="dialogNode" citdl="Node" />
          </scope>
          <variable name="_firstFocusItem" attributes="private" doc="" />
          <variable name="_lastFocusItem" attributes="private" doc="" />
        </scope>
        <scope name="Dialog" ilk="function" doc="A modal dialog Widget">
          <scope name="templateString" doc="" />
          <scope name="templatePath" doc="" />
          <scope name="attributeMap" doc="" />
          <variable name="open" citdl="Boolean" doc="is True or False depending on state of dialog" />
          <scope name="duration" citdl="Integer" doc="The time in milliseconds it takes the dialog to fade in and out" />
          <scope name="refocus" citdl="Boolean" doc="A Toggle to modify the default focus behavior of a Dialog, which is to re-focus the element which had focus before being opened. False will disable refocusing. Default: true" />
          <scope name="autofocus" citdl="Boolean" doc="A Toggle to modify the default focus behavior of a Dialog, which is to focus on the first dialog element after opening the dialog. False will disable autofocusing. Default: true" />
          <variable name="_firstFocusItem" citdl="DomNode" doc="The pointer to the first focusable node in the dialog" attributes="private" />
          <scope name="_lastFocusItem" citdl="DomNode" doc="The pointer to which node has focus prior to our dialog" attributes="private" />
          <scope name="doLayout" citdl="Boolean" doc="Don't change this parameter from the default value. This ContentPane parameter doesn't make sense for Dialog, since Dialog is never a child of a layout container, nor can you specify the size of Dialog in order to control the size of an inner widget." />
          <scope name="draggable" citdl="Boolean" doc="Toggles the moveable aspect of the Dialog. If true, Dialog can be moved by it's title. If false it will remain centered in the viewport." />
          <scope name="postMixInProperties" ilk="function" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="onLoad" ilk="function" doc="when href is specified we need to reposition the dialog after the data is loaded" />
          <scope name="_endDrag" ilk="function" signature="_endDrag(e)" doc="Called after dragging the Dialog. Calculates the relative offset of the Dialog in relation to the viewport." attributes="private">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="_setup" ilk="function" doc="stuff we need to do before showing the Dialog for the first time (but we defer it until right beforehand, for performance reasons)" attributes="private" />
          <scope name="uninitialize" ilk="function" doc="" />
          <scope name="_size" ilk="function" doc="Make sure the dialog is small enough to fit in viewport." attributes="private" />
          <scope name="_position" ilk="function" doc="Position modal dialog in the viewport. If no relative offset in the viewport has been determined (by dragging, for instance), center the node. Otherwise, use the Dialog's stored relative offset, and position the node to top: left: values based on the viewport." attributes="private" />
          <scope name="_onKey" ilk="function" signature="_onKey(evt)" doc="handles the keyboard events for accessibility reasons" returns="just let it go" attributes="private">
            <variable ilk="argument" name="evt" citdl="Event" />
          </scope>
          <scope name="show" ilk="function" doc="display the dialog" />
          <scope name="hide" ilk="function" doc="Hide the dialog" />
          <scope name="layout" ilk="function" doc="Position the Dialog and the underlay" />
          <scope name="destroy" ilk="function" doc="" />
          <variable name="_modalconnects" attributes="private" doc="" />
          <variable name="_relativePosition" attributes="private" doc="" />
          <variable name="_moveable" attributes="private" doc="" />
          <variable name="_underlay" attributes="private" doc="" />
          <variable name="_fadeIn" attributes="private" doc="" />
          <variable name="_fadeOut" attributes="private" doc="" />
          <variable name="_alreadyInitialized" attributes="private" doc="" />
          <variable name="_savedFocus" attributes="private" doc="" />
          <variable name="_scrollConnected" attributes="private" doc="" />
        </scope>
        <scope name="TooltipDialog" ilk="function" doc="Pops up a dialog that appears like a Tooltip">
          <scope name="title" citdl="String" doc="Description of tooltip dialog (required for a11Y)" />
          <scope name="doLayout" citdl="Boolean" doc="Don't change this parameter from the default value. This ContentPane parameter doesn't make sense for TooltipDialog, since TooltipDialog is never a child of a layout container, nor can you specify the size of TooltipDialog in order to control the size of an inner widget." />
          <scope name="autofocus" citdl="Boolean" doc="A Toggle to modify the default focus behavior of a Dialog, which is to focus on the first dialog element after opening the dialog. False will disable autofocusing. Default: true" />
          <scope name="class" doc="" />
          <variable name="_firstFocusItem" citdl="DomNode" doc="The pointer to the first focusable node in the dialog" attributes="private" />
          <scope name="_lastFocusItem" citdl="DomNode" doc="The domNode that had focus before we took it." attributes="private" />
          <scope name="templateString" doc="" />
          <scope name="templatePath" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="orient" ilk="function" signature="orient(node,aroundCorner,corner)" doc="configure widget to be displayed in given position relative to the button">
            <variable ilk="argument" name="node" citdl="DomNode" />
            <variable ilk="argument" name="aroundCorner" citdl="String" />
            <variable ilk="argument" name="corner" citdl="String" />
          </scope>
          <scope name="onOpen" ilk="function" signature="onOpen(pos)" doc="called when dialog is displayed">
            <variable ilk="argument" name="pos" citdl="Object" />
          </scope>
          <scope name="_onKey" ilk="function" signature="_onKey(evt)" doc="keep keyboard focus in dialog; close dialog on escape key" attributes="private">
            <variable ilk="argument" name="evt" citdl="Event" />
          </scope>
          <scope name="containerNode">
            <variable name="title" doc="" />
          </scope>
          <scope name="domNode">
            <variable name="className" doc="" />
          </scope>
        </scope>
        <scope name="Editor" ilk="function" doc="A rich text Editing widget">
          <variable name="plugins" doc="" />
          <scope name="extraPlugins" citdl="Array" doc="a list of extra plugin names which will be appended to plugins array" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="destroy" ilk="function" doc="" />
          <scope name="addPlugin" ilk="function" signature="addPlugin(plugin,index)" doc="takes a plugin name as a string or a plugin instance and adds it to the toolbar and associates it with this editor instance. The resulting plugin is added to the Editor's plugins array. If index is passed, it's placed in the plugins array at that index. No big magic, but a nice helper for passing in plugin names via markup.">
            <variable ilk="argument" name="plugin" citdl="String||Object" doc="String args object or plugin instance  args: This object will be passed to the plugin constructor" />
            <variable ilk="argument" name="index" citdl="Integer" doc="Used when creating an instance from something already in this.plugins. Ensures that the new instance is assigned to this.plugins at that index." />
          </scope>
          <scope name="startup" ilk="function" doc="" />
          <scope name="resize" ilk="function" doc="" />
          <scope name="layout" ilk="function" doc="" />
          <scope name="onBeforeDeactivate" ilk="function" signature="onBeforeDeactivate(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="customUndo" doc="" />
          <scope name="editActionInterval" citdl="Integer" doc="When using customUndo, not every keystroke will be saved as a step. Instead typing (including delete) will be grouped together: after a user stop typing for editActionInterval seconds, a step will be saved; if a user resume typing within editActionInterval seconds, the timeout will be restarted. By default, editActionInterval is 3 seconds." />
          <scope name="beginEditing" ilk="function" signature="beginEditing(cmd)" doc="">
            <variable ilk="argument" name="cmd" />
          </scope>
          <variable name="_steps" attributes="private" doc="" />
          <variable name="_undoedSteps" attributes="private" doc="" />
          <variable name="commands" doc="" />
          <variable name="toolbar" doc="" />
          <variable name="_plugins" attributes="private" doc="" />
          <scope name="editingArea" />
          <scope name="iframe" />
          <variable name="_layoutMode" attributes="private" doc="" />
          <variable name="_inEditing" attributes="private" doc="" />
          <variable name="_editTimer" attributes="private" doc="" />
          <variable name="_editInterval" attributes="private" doc="" />
        </scope>
        <scope name="InlineEditBox" ilk="function" doc="An element with in-line edit capabilitites">
          <variable name="editing" doc="" />
          <scope name="autoSave" citdl="Boolean" doc="Changing the value automatically saves it; don't have to push save button (and save button isn't even displayed)" />
          <scope name="buttonSave" citdl="String" doc="Save button label" />
          <scope name="buttonCancel" citdl="String" doc="Cancel button label" />
          <scope name="renderAsHtml" citdl="Boolean" doc="Set this to true if the specified Editor's value should be interpreted as HTML rather than plain text (ie, dijit.Editor)" />
          <scope name="editor" citdl="String" doc="Class name for Editor widget" />
          <variable name="editorParams" citdl="Object" doc="Set of parameters for editor, like {required: true}" />
          <scope name="onChange" ilk="function" signature="onChange(value)" doc="User should set this handler to be notified of changes to value">
            <variable ilk="argument" name="value" />
          </scope>
          <scope name="onCancel" ilk="function" doc="User should set this handler to be notified when no change occured" />
          <scope name="width" citdl="String" doc="Width of editor. By default it's width=100% (ie, block mode)" />
          <variable name="value" citdl="String" doc="The display value of the widget in read-only mode" />
          <scope name="noValueIndicator" citdl="String" doc="The text that gets displayed when there is no value (so that the user has a place to click to edit)" />
          <scope name="postMixInProperties" ilk="function" doc="" />
          <scope name="setDisabled" ilk="function" signature="setDisabled(disabled)" doc="">
            <variable ilk="argument" name="disabled" citdl="Boolean" />
          </scope>
          <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(disabled)" doc="Hook to make attr(&amp;amp;quot;disabled&amp;amp;quot;, ...) work. Set disabled state of widget." attributes="private">
            <variable ilk="argument" name="disabled" citdl="Boolean" />
          </scope>
          <scope name="_onMouseOver" ilk="function" attributes="private" doc="" />
          <scope name="_onMouseOut" ilk="function" attributes="private" doc="" />
          <scope name="_onClick" ilk="function" signature="_onClick(e)" attributes="private" doc="">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="edit" ilk="function" doc="Display the editor widget in place of the original (read only) markup." />
          <scope name="_showText" ilk="function" signature="_showText(focus)" doc="revert to display mode, and optionally focus on display node" attributes="private">
            <variable ilk="argument" name="focus" citdl="Boolean" />
          </scope>
          <scope name="save" ilk="function" signature="save(focus)" doc="Save the contents of the editor and revert to display mode.">
            <variable ilk="argument" name="focus" citdl="Boolean" doc="Focus on the display mode text" />
          </scope>
          <scope name="setValue" ilk="function" signature="setValue(val)" doc="">
            <variable ilk="argument" name="val" citdl="String" />
          </scope>
          <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(val)" doc="Hook to make attr(&amp;amp;quot;value&amp;amp;quot;, ...) work. Inserts specified HTML value into this node, or an &amp;amp;quot;input needed&amp;amp;quot; character if node is blank." attributes="private">
            <variable ilk="argument" name="val" citdl="String" />
          </scope>
          <scope name="getValue" ilk="function" doc="" />
          <scope name="cancel" ilk="function" signature="cancel(focus)" doc="Revert to display mode, discarding any changes made in the editor">
            <variable ilk="argument" name="focus" citdl="Boolean" />
          </scope>
          <variable name="displayNode" doc="">
            <variable name="innerHTML" doc="" />
          </variable>
          <variable name="disabled" doc="" />
          <variable name="editWidget" doc="" />
          <variable name="domNode" doc="" />
        </scope>
        <scope name="_InlineEditor" ilk="function" doc="internal widget used by InlineEditBox, displayed when in editing mode to display the editor and maybe save/cancel buttons. Calling code should connect to save/cancel methods to detect when editing is finished  Has mainly the same parameters as InlineEditBox, plus these values:  style: Object Set of CSS attributes of display node, to replicate in editor  value: String Value as an HTML string or plain text string, depending on renderAsHTML flag" attributes="private">
          <scope name="templatePath" doc="" />
          <scope name="widgetsInTemplate" doc="" />
          <scope name="postMixInProperties" ilk="function" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="destroy" ilk="function" doc="" />
          <scope name="getValue" ilk="function" doc="" />
          <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" doc="Callback when keypress in the edit box (see template)." attributes="private">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="_onBlur" ilk="function" doc="Called when focus moves outside the editor" attributes="private" />
          <scope name="_onChange" ilk="function" doc="Called when the underlying widget fires an onChange event, which means that the user has finished entering the value" attributes="private" />
          <scope name="enableSave" ilk="function" doc="User replacable function returning a Boolean to indicate if the Save button should be enabled or not - usually due to invalid conditions" />
          <scope name="focus" ilk="function" doc="" />
          <variable name="messages" doc="" />
          <variable name="width" doc="" />
          <scope name="domNode" />
          <scope name="editorParams" />
          <variable name="editWidget" doc="" />
          <scope name="buttonContainer" />
          <variable name="_exitInProgress" attributes="private" doc="" />
        </scope>
        <scope name="Menu" ilk="function" doc="">
          <scope name="templateString" doc="" />
          <scope name="targetNodeIds" citdl="String[]" doc="Array of dom node ids of nodes to attach to. Fill this with nodeIds upon widget creation and it becomes context menu for those nodes." />
          <scope name="contextMenuForWindow" citdl="Boolean" doc="if true, right clicking anywhere on the window will cause this context menu to open; if false, must specify targetNodeIds" />
          <scope name="leftClickToOpen" citdl="Boolean" doc="If true, menu will open on left click instead of right click, similiar to a file menu." />
          <variable name="parentMenu" citdl="Widget" doc="pointer to menu that displayed me" />
          <scope name="popupDelay" citdl="Integer" doc="number of milliseconds before hovering (without clicking) causes the popup to automatically open" />
          <variable name="_contextMenuWithMouse" citdl="Boolean" doc="used to record mouse and keyboard events to determine if a context menu is being opened with the keyboard or the mouse" attributes="private" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="startup" ilk="function" doc="" />
          <scope name="onExecute" ilk="function" doc="attach point for notification about when a menu item has been executed" />
          <scope name="onCancel" ilk="function" signature="onCancel(closeAll)" doc="attach point for notification about when the user cancels the current menu">
            <variable ilk="argument" name="closeAll" citdl="Boolean" />
          </scope>
          <scope name="_moveToPopup" ilk="function" signature="_moveToPopup(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" citdl="Event" />
          </scope>
          <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(evt)" doc="Handle keyboard based menu navigation." attributes="private">
            <variable ilk="argument" name="evt" citdl="Event" />
          </scope>
          <scope name="onItemHover" ilk="function" signature="onItemHover(item)" doc="Called when cursor is over a MenuItem">
            <variable ilk="argument" name="item" citdl="MenuItem" />
          </scope>
          <scope name="_onChildBlur" ilk="function" signature="_onChildBlur(item)" doc="Close all popups that are open and descendants of this menu" attributes="private">
            <variable ilk="argument" name="item" />
          </scope>
          <scope name="onItemUnhover" ilk="function" signature="onItemUnhover(item)" doc="Callback fires when mouse exits a MenuItem">
            <variable ilk="argument" name="item" citdl="MenuItem" />
          </scope>
          <scope name="_stopPopupTimer" ilk="function" attributes="private" doc="" />
          <scope name="_getTopMenu" ilk="function" attributes="private" doc="" />
          <scope name="onItemClick" ilk="function" signature="onItemClick(item,evt)" doc="user defined function to handle clicks on an item">
            <variable ilk="argument" name="item" citdl="Widget" />
            <variable ilk="argument" name="evt" citdl="Event" />
          </scope>
          <scope name="_iframeContentWindow" ilk="function" signature="_iframeContentWindow(iframe_el)" doc="Returns the window reference of the passed iframe" returns="Window" attributes="private">
            <variable ilk="argument" name="iframe_el" citdl="HTMLIFrameElement" />
          </scope>
          <scope name="_iframeContentDocument" ilk="function" signature="_iframeContentDocument(iframe_el)" doc="Returns a reference to the document object inside iframe_el" returns="HTMLDocument" attributes="private">
            <variable ilk="argument" name="iframe_el" citdl="HTMLIFrameElement" />
          </scope>
          <scope name="bindDomNode" ilk="function" signature="bindDomNode(node)" doc="attach menu to given node">
            <variable ilk="argument" name="node" citdl="String|DomNode" />
          </scope>
          <scope name="unBindDomNode" ilk="function" signature="unBindDomNode(nodeName)" doc="detach menu from given node">
            <variable ilk="argument" name="nodeName" citdl="String|DomNode" />
          </scope>
          <scope name="_contextKey" ilk="function" signature="_contextKey(e)" attributes="private" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="_contextMouse" ilk="function" signature="_contextMouse(e)" attributes="private" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="_openMyself" ilk="function" signature="_openMyself(e)" doc="Internal function for opening myself when the user does a right-click or something similar" attributes="private">
            <variable ilk="argument" name="e" citdl="Event" />
            <variable name="_onBlur" ilk="function" attributes="private" doc="" />
          </scope>
          <scope name="onOpen" ilk="function" signature="onOpen(e)" doc="Open menu relative to the mouse">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="onClose" ilk="function" doc="callback when this menu is closed" />
          <scope name="_openPopup" ilk="function" doc="open the popup to the side of the current menu item" attributes="private" />
          <scope name="uninitialize" ilk="function" doc="" />
          <variable name="hover_timer" doc="" />
          <variable name="_onBlur" attributes="private" doc="" />
          <variable name="isShowingNow" doc="" />
          <variable name="currentPopup" doc="" />
          <variable name="focusedChild" doc="" />
          <variable name="_bindings" attributes="private" doc="" />
        </scope>
        <scope name="MenuItem" ilk="function" doc="A line item in a Menu Widget">
          <scope name="templateString" doc="" />
          <scope name="attributeMap" doc="" />
          <scope name="label" citdl="String" doc="menu text" />
          <scope name="iconClass" citdl="String" doc="Class to apply to div in button to make it display an icon" />
          <variable name="disabled" citdl="Boolean" doc="if true, the menu item is disabled if false, the menu item is enabled" />
          <scope name="_fillContent" ilk="function" signature="_fillContent(source)" attributes="private" doc="">
            <variable ilk="argument" name="source" citdl="DomNode" />
          </scope>
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="_onHover" ilk="function" doc="callback when mouse is moved onto menu item" attributes="private" />
          <scope name="_onUnhover" ilk="function" doc="callback when mouse is moved off of menu item" attributes="private" />
          <scope name="_onClick" ilk="function" signature="_onClick(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope name="onClick" ilk="function" signature="onClick(evt)" doc="User defined function to handle clicks">
            <variable ilk="argument" name="evt" citdl="Event" />
          </scope>
          <scope name="focus" ilk="function" doc="" />
          <scope name="_blur" ilk="function" attributes="private" doc="" />
          <scope name="setLabel" ilk="function" signature="setLabel(content)" doc="">
            <variable ilk="argument" name="content" citdl="String" />
          </scope>
          <scope name="setDisabled" ilk="function" signature="setDisabled(disabled)" doc="">
            <variable ilk="argument" name="disabled" citdl="Boolean" />
          </scope>
          <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(value)" doc="Hook for attr('disabled', ...) to work. Enable or disable this menu item." attributes="private">
            <variable ilk="argument" name="value" citdl="Boolean" />
          </scope>
        </scope>
        <scope name="PopupMenuItem" ilk="function" doc="">
          <scope name="_fillContent" ilk="function" doc="The innerHTML contains both the menu item text and a popup widget" attributes="private" />
          <scope name="startup" ilk="function" doc="" />
          <scope name="destroyDescendants" ilk="function" doc="" />
          <variable name="dropDownContainer" doc="" />
          <variable name="popup" doc="">
            <scope name="domNode" />
          </variable>
        </scope>
        <scope name="MenuSeparator" ilk="function" doc="A line between two menu items">
          <scope name="templateString" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="isFocusable" ilk="function" doc="over ride to always return false" returns="Boolean" attributes="private" />
        </scope>
        <scope name="CheckedMenuItem" ilk="function" doc="a checkbox-like menu item for toggling on and off">
          <scope name="templateString" doc="" />
          <variable name="checked" citdl="Boolean" doc="Our checked state" />
          <scope name="_setCheckedAttr" ilk="function" signature="_setCheckedAttr(checked)" doc="Hook so attr('checked', bool) works. Sets the class and state for the check box." attributes="private">
            <variable ilk="argument" name="checked" citdl="Boolean" />
          </scope>
          <scope name="onChange" ilk="function" signature="onChange(checked)" doc="User defined function to handle change events">
            <variable ilk="argument" name="checked" citdl="Boolean" />
          </scope>
          <scope name="_onClick" ilk="function" signature="_onClick(e)" doc="Clicking this item just toggles its state" attributes="private">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
        </scope>
        <scope name="ProgressBar" ilk="function" doc="A progress indication widget">
          <variable name="progress" citdl="String" doc="(Percentage or Number) initial progress value. with &amp;amp;quot;%&amp;amp;quot;: percentage value, 0% &amp;amp;lt;= progress &amp;amp;lt;= 100% or without &amp;amp;quot;%&amp;amp;quot;: absolute value, 0 &amp;amp;lt;= progress &amp;amp;lt;= maximum" />
          <scope name="maximum" citdl="Float" doc="max sample number" />
          <scope name="places" citdl="Number" doc="number of places to show in values; 0 by default" />
          <scope name="indeterminate" citdl="Boolean" doc="If false: show progress. If true: show that a process is underway but that the progress is unknown" />
          <scope name="templatePath" doc="" />
          <scope name="_indeterminateHighContrastImagePath" attributes="private" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="update" ilk="function" signature="update(attributes)" doc="update progress information">
            <variable ilk="argument" name="attributes" citdl="Object" doc="may provide progress and/or maximum properties on this parameter, see attribute specs for details." />
          </scope>
          <scope name="report" ilk="function" signature="report(percent)" doc="Generates message to show; may be overridden by user">
            <variable ilk="argument" name="percent" citdl="float" />
          </scope>
          <scope name="onChange" ilk="function" doc="User definable function fired when progress updates." />
          <scope name="label">
            <scope name="firstChild">
              <variable name="nodeValue" doc="" />
            </scope>
          </scope>
        </scope>
        <scope name="TitlePane" ilk="function" doc="A pane with a title on top, that can be opened or collapsed.">
          <scope name="title" doc="" />
          <variable name="open" citdl="Boolean" doc="Whether pane is opened or closed." />
          <scope name="duration" citdl="Integer" doc="Time in milliseconds to fade in/fade out" />
          <scope name="baseClass" citdl="String" doc="The root className to use for the various states of this widget" />
          <scope name="templatePath" doc="" />
          <scope name="attributeMap" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="_setOpenAttr" ilk="function" signature="_setOpenAttr(open)" doc="Hook to make attr(&amp;amp;quot;open&amp;amp;quot;, boolean) control the open/closed state of the pane." attributes="private">
            <variable ilk="argument" name="open" citdl="Boolean" doc="True if you want to open the pane, false if you want to close it." />
          </scope>
          <scope name="_setContentAttr" ilk="function" signature="_setContentAttr(content)" doc="Hook to make attr(&amp;amp;quot;content&amp;amp;quot;, ...) work. Typically called when an href is loaded. Our job is to make the animation smooth" attributes="private">
            <variable ilk="argument" name="content" />
          </scope>
          <scope name="toggle" ilk="function" doc="switches between opened and closed state" />
          <scope name="_setCss" ilk="function" doc="set the open/close css state for the TitlePane" attributes="private" />
          <scope name="_onTitleKey" ilk="function" signature="_onTitleKey(e)" doc="callback when user hits a key" attributes="private">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="_handleFocus" ilk="function" signature="_handleFocus(e)" doc="handle blur and focus for this widget  add/removeClass is safe to call without hasClass in this case" attributes="private">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="setTitle" ilk="function" signature="setTitle(title)" doc="sets the text of the title">
            <variable ilk="argument" name="title" citdl="String" />
          </scope>
          <scope name="hideNode" />
          <variable name="_wipeIn" attributes="private" doc="" />
          <variable name="_wipeOut" attributes="private" doc="" />
          <scope name="_hideNode" />
          <scope name="arrowNodeInner">
            <variable name="innerHTML" doc="" />
          </scope>
          <scope name="titleNode">
            <variable name="innerHTML" doc="" />
          </scope>
        </scope>
        <scope name="Toolbar" ilk="function" doc="A Toolbar widget, used to hold things like dijit.Editor buttons">
          <scope name="templateString" doc="" />
          <scope name="tabIndex" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="startup" ilk="function" doc="" />
        </scope>
        <scope name="ToolbarSeparator" ilk="function" doc="A spacer between two Toolbar items">
          <scope name="templateString" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="isFocusable" ilk="function" doc="This widget isn't focusable, so pass along that fact." />
        </scope>
        <scope name="_MasterTooltip" ilk="function" attributes="private" doc="">
          <scope name="duration" doc="" />
          <scope name="templatePath" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="show" ilk="function" signature="show(innerHTML,aroundNode,position)" doc="Display tooltip w/specified contents to right specified node (To left if there's no space on the right, or if LTR==right)">
            <variable ilk="argument" name="innerHTML" citdl="String" />
            <variable ilk="argument" name="aroundNode" citdl="DomNode" />
            <variable ilk="argument" name="position" citdl="String[]" />
          </scope>
          <scope name="orient" ilk="function" signature="orient(node,aroundCorner,tooltipCorner)" doc="private function to set CSS for tooltip node based on which position it's in">
            <variable ilk="argument" name="node" citdl="DomNode" />
            <variable ilk="argument" name="aroundCorner" citdl="String" />
            <variable ilk="argument" name="tooltipCorner" citdl="String" />
          </scope>
          <scope name="_onShow" ilk="function" attributes="private" doc="" />
          <scope name="hide" ilk="function" signature="hide(aroundNode)" doc="hide the tooltip">
            <variable ilk="argument" name="aroundNode" />
          </scope>
          <scope name="_onHide" ilk="function" attributes="private" doc="" />
          <variable name="bgIframe" doc="" />
          <variable name="fadeIn" doc="" />
          <variable name="fadeOut" doc="" />
          <variable name="aroundNode" doc="" />
          <variable name="_onDeck" attributes="private" doc="" />
          <scope name="containerNode">
            <variable name="innerHTML" doc="" />
          </scope>
          <scope name="domNode" />
          <variable name="isShowingNow" doc="" />
        </scope>
        <scope name="Tooltip" ilk="function" doc="">
          <scope name="label" doc="" />
          <scope name="showDelay" citdl="Integer" doc="Number of milliseconds to wait after hovering over/focusing on the object, before the tooltip is displayed." />
          <scope name="connectId" citdl="String[]" doc="Id(s) of domNodes to attach the tooltip to. When user hovers over any of the specified dom nodes, the tooltip will appear." />
          <scope name="position" citdl="String[]" doc="See description of dijit.Tooltip.defaultPosition for details on position parameter." />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="_onMouseEnter" ilk="function" signature="_onMouseEnter(e)" attributes="private" doc="">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="_onMouseLeave" ilk="function" signature="_onMouseLeave(e)" attributes="private" doc="">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="_onFocus" ilk="function" signature="_onFocus(e)" attributes="private" doc="">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="_onBlur" ilk="function" signature="_onBlur(e)" attributes="private" doc="">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="_onHover" ilk="function" signature="_onHover(e)" attributes="private" doc="">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="_onUnHover" ilk="function" signature="_onUnHover(e)" attributes="private" doc="">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="open" ilk="function" signature="open(target)" doc="display the tooltip; usually not called directly.">
            <variable ilk="argument" name="target" citdl="DomNode" />
          </scope>
          <scope name="close" ilk="function" doc="hide the tooltip or cancel timer for show of tooltip" />
          <scope name="uninitialize" ilk="function" doc="" />
          <variable name="_connectNodes" attributes="private" doc="" />
          <variable name="_focus" attributes="private" doc="" />
          <variable name="_showTimer" attributes="private" doc="" />
          <variable name="_connectNode" attributes="private" doc="" />
          <scope name="defaultPosition" doc="" />
        </scope>
        <scope ilk="function" name="showTooltip" signature="showTooltip(innerHTML,aroundNode,position)" doc="Display tooltip w/specified contents in specified position. See description of dijit.Tooltip.defaultPosition for details on position parameter. If position is not specified then dijit.Tooltip.defaultPosition is used.">
          <variable citdl="String" name="innerHTML" ilk="argument" />
          <variable citdl="DomNode" name="aroundNode" ilk="argument" />
          <variable citdl="String[]" name="position" ilk="argument" />
        </scope>
        <scope ilk="function" name="hideTooltip" signature="hideTooltip(aroundNode)" doc="hide the tooltip">
          <variable name="aroundNode" ilk="argument" />
        </scope>
        <scope name="_TreeNode" ilk="function" doc="Single node within a tree" attributes="private">
          <scope name="item" doc="" />
          <scope name="isTreeNode" doc="" />
          <scope name="label" citdl="String" doc="Text of this tree node" />
          <variable name="isExpandable" doc="" />
          <variable name="isExpanded" doc="" />
          <variable name="state" citdl="String" doc="dynamic loading-related stuff. When an empty folder node appears, it is &amp;amp;quot;UNCHECKED&amp;amp;quot; first, then after dojo.data query it becomes &amp;amp;quot;LOADING&amp;amp;quot; and, finally &amp;amp;quot;LOADED&amp;amp;quot;" />
          <scope name="templatePath" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="markProcessing" ilk="function" doc="visually denote that tree is loading data, etc." />
          <scope name="unmarkProcessing" ilk="function" doc="clear markup from markProcessing() call" />
          <scope name="_updateItemClasses" ilk="function" signature="_updateItemClasses(item)" doc="set appropriate CSS classes for icon and label dom node (used to allow for item updates to change respective CSS)" attributes="private">
            <variable ilk="argument" name="item" />
          </scope>
          <scope name="_updateLayout" ilk="function" doc="set appropriate CSS classes for this.domNode" attributes="private" />
          <scope name="_setExpando" ilk="function" signature="_setExpando(processing)" doc="set the right image for the expando node" attributes="private">
            <variable ilk="argument" name="processing" citdl="Boolean" />
          </scope>
          <scope name="expand" ilk="function" doc="show my children" />
          <scope name="collapse" ilk="function" doc="" />
          <scope name="setLabelNode" ilk="function" signature="setLabelNode(label)" doc="">
            <variable ilk="argument" name="label" />
          </scope>
          <scope name="setChildItems" ilk="function" signature="setChildItems(items)" doc="Sets the child items of this node, removing/adding nodes from current children to match specified items[] array.">
            <variable ilk="argument" name="items" citdl="Object[]" />
          </scope>
          <scope name="removeChild" ilk="function" signature="removeChild(node)" doc="">
            <variable ilk="argument" name="node" citdl="treeNode" />
          </scope>
          <scope name="makeExpandable" ilk="function" doc="if this node wasn't already showing the expando node, turn it into one and call _setExpando()" />
          <scope name="_onNodeFocus" ilk="function" signature="_onNodeFocus(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope name="_onMouseEnter" ilk="function" signature="_onMouseEnter(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope name="_onMouseLeave" ilk="function" signature="_onMouseLeave(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope name="iconNode">
            <variable name="className" doc="" />
          </scope>
          <scope name="labelNode">
            <variable name="className" doc="" />
            <variable name="innerHTML" doc="" />
          </scope>
          <scope name="expandoNodeText">
            <variable name="innerHTML" doc="" />
          </scope>
          <scope name="contentNode">
            <variable name="className" doc="" />
          </scope>
          <variable name="_wipeIn" attributes="private" doc="" />
          <variable name="_wipeOut" attributes="private" doc="" />
        </scope>
        <scope name="Tree" ilk="function" doc="This widget displays hierarchical data from a store. A query is specified to get the &amp;amp;quot;top level children&amp;amp;quot; from a data store, and then those items are queried for their children and so on (but lazily, as the user clicks the expand node).  Thus in the default mode of operation this widget is technically a forest, not a tree, in that there can be multiple &amp;amp;quot;top level children&amp;amp;quot;. However, if you specify label, then a special top level node (not corresponding to any item in the datastore) is created, to father all the top level children.">
          <scope name="store" doc="" />
          <variable name="model" citdl="dijit.Tree.model" doc="Alternate interface from store to access data (and changes to data) in the tree" />
          <scope name="query" citdl="anything" doc="Specifies datastore query to return the root item for the tree.  Deprecated functionality: if the query returns multiple items, the tree is given a fake root node (not corresponding to any item in the data store), whose children are the items that match this query.  The root node is shown or hidden based on whether a label is specified.  Having a query return multiple items is deprecated. If your store doesn't have a root item, wrap the store with dijit.tree.ForestStoreModel, and specify model=myModel" />
          <scope name="label" citdl="String" doc="Deprecated. Use dijit.tree.ForestStoreModel directly instead. Used in conjunction with query parameter. If a query is specified (rather than a root node id), and a label is also specified, then a fake root node is created and displayed, with this label." />
          <variable name="showRoot" citdl="Boolean" doc="Should the root node be displayed, or hidden?" />
          <scope name="childrenAttr" citdl="String[]" doc="one ore more attributes that holds children of a tree node" />
          <scope name="openOnClick" citdl="Boolean" doc="If true, clicking a folder node's label will open it, rather than calling onClick()" />
          <scope name="templatePath" doc="" />
          <scope name="isExpandable" doc="" />
          <scope name="isTree" doc="" />
          <scope name="persist" citdl="Boolean" doc="enables/disables use of cookies for state saving." />
          <variable name="dndController" citdl="String" doc="class name to use as as the dnd controller" />
          <scope name="dndParams" doc="" />
          <scope name="onDndDrop" doc="" />
          <scope name="itemCreator" doc="" />
          <scope name="onDndCancel" doc="" />
          <scope name="checkAcceptance" doc="" />
          <scope name="checkItemAcceptance" doc="" />
          <scope name="dragThreshold" doc="" />
          <scope name="_publish" ilk="function" signature="_publish(topicName,message)" doc="Publish a message for this widget/topic" attributes="private">
            <variable ilk="argument" name="topicName" citdl="String" />
            <variable ilk="argument" name="message" citdl="Object" />
          </scope>
          <scope name="postMixInProperties" ilk="function" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="_store2model" ilk="function" doc="user specified a store&amp;amp;amp;query rather than model, so create model from store/query" attributes="private" />
          <scope name="_load" ilk="function" doc="initial load of the tree load root node (possibly hidden) and it's children" attributes="private" />
          <scope name="mayHaveChildren" ilk="function" signature="mayHaveChildren(item)" doc="User overridable function to tell if an item has or may have children. Controls whether or not +/- expando icon is shown. (For efficiency reasons we may not want to check if an element actually has children until user clicks the expando node)">
            <variable ilk="argument" name="item" citdl="dojo.data.Item" />
          </scope>
          <scope name="getItemChildren" ilk="function" signature="getItemChildren(parentItem,onComplete)" doc="User overridable function that return array of child items of given parent item, or if parentItem==null then return top items in tree">
            <variable ilk="argument" name="parentItem" citdl="dojo.data.Item" />
            <variable ilk="argument" name="onComplete" citdl="function(items)" />
          </scope>
          <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="user overridable function to get the label for a tree node (given the item)" returns="String" attributes="private">
            <variable ilk="argument" name="item" citdl="dojo.data.Item" />
          </scope>
          <scope name="getIconClass" ilk="function" signature="getIconClass(item,opened)" doc="user overridable function to return CSS class name to display icon">
            <variable ilk="argument" name="item" citdl="dojo.data.Item" />
            <variable ilk="argument" name="opened" citdl="Boolean" />
          </scope>
          <scope name="getLabelClass" ilk="function" signature="getLabelClass(item,opened)" doc="user overridable function to return CSS class name to display label">
            <variable ilk="argument" name="item" citdl="dojo.data.Item" />
            <variable ilk="argument" name="opened" citdl="Boolean" />
          </scope>
          <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" doc="translates keypress events into commands for the controller" attributes="private">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="_onEnterKey" ilk="function" signature="_onEnterKey(message)" attributes="private" doc="">
            <variable ilk="argument" name="message" citdl="Object" />
          </scope>
          <scope name="_onDownArrow" ilk="function" signature="_onDownArrow(message)" doc="down arrow pressed; get next visible node, set focus there" attributes="private">
            <variable ilk="argument" name="message" citdl="Object" />
          </scope>
          <scope name="_onUpArrow" ilk="function" signature="_onUpArrow(message)" doc="up arrow pressed; move to previous visible node" attributes="private">
            <variable ilk="argument" name="message" citdl="Object" />
          </scope>
          <scope name="_onRightArrow" ilk="function" signature="_onRightArrow(message)" doc="right arrow pressed; go to child node" attributes="private">
            <variable ilk="argument" name="message" citdl="Object" />
          </scope>
          <scope name="_onLeftArrow" ilk="function" signature="_onLeftArrow(message)" doc="Left arrow pressed. If not collapsed, collapse, else move to parent." attributes="private">
            <variable ilk="argument" name="message" citdl="Object" />
          </scope>
          <scope name="_onHomeKey" ilk="function" doc="home pressed; get first visible node, set focus there" attributes="private" />
          <scope name="_onEndKey" ilk="function" signature="_onEndKey(message)" doc="end pressed; go to last visible node" attributes="private">
            <variable ilk="argument" name="message" citdl="Object" />
          </scope>
          <scope name="_onLetterKeyNav" ilk="function" signature="_onLetterKeyNav(message)" doc="letter key pressed; search for node starting with first char = key" attributes="private">
            <variable ilk="argument" name="message" />
          </scope>
          <scope name="_onClick" ilk="function" signature="_onClick(e)" doc="translates click events into commands for the controller to process" attributes="private">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="_onExpandoClick" ilk="function" signature="_onExpandoClick(message)" doc="user clicked the +/- icon; expand or collapse my children." attributes="private">
            <variable ilk="argument" name="message" citdl="Object" />
          </scope>
          <scope name="onClick" ilk="function" signature="onClick(item,node)" doc="user overridable function for executing a tree item">
            <variable ilk="argument" name="item" citdl="dojo.data" />
            <variable ilk="argument" name="node" citdl="TreeNode" />
          </scope>
          <scope name="onOpen" ilk="function" signature="onOpen(item,node)" doc="callback when a node is opened">
            <variable ilk="argument" name="item" citdl="dojo.data" />
            <variable ilk="argument" name="node" citdl="TreeNode" />
          </scope>
          <scope name="onClose" ilk="function" signature="onClose(item,node)" doc="callback when a node is closed">
            <variable ilk="argument" name="item" citdl="dojo.data" />
            <variable ilk="argument" name="node" citdl="TreeNode" />
          </scope>
          <scope name="_getNextNode" ilk="function" signature="_getNextNode(node)" doc="get next visible node" returns="_TreeNode" attributes="private">
            <variable ilk="argument" name="node" />
          </scope>
          <scope name="_getRootOrFirstNode" ilk="function" doc="get first visible node" attributes="private" />
          <scope name="_collapseNode" ilk="function" signature="_collapseNode(node)" doc="called when the user has requested to collapse the node" attributes="private">
            <variable ilk="argument" name="node" citdl="_TreeNode" />
          </scope>
          <scope name="_expandNode" ilk="function" signature="_expandNode(node)" doc="called when the user has requested to expand the node" attributes="private">
            <variable ilk="argument" name="node" citdl="_TreeNode" />
          </scope>
          <scope name="blurNode" ilk="function" doc="Removes focus from the currently focused node (which must be visible). Usually not called directly (just call focusNode() on another node instead)" />
          <scope name="focusNode" ilk="function" signature="focusNode(node)" doc="Focus on the specified node (which must be visible)">
            <variable ilk="argument" name="node" citdl="_tree.Node" />
          </scope>
          <scope name="_onBlur" ilk="function" doc="We've moved away from the whole tree. The currently &amp;amp;quot;focused&amp;amp;quot; node (see focusNode above) should remain as the lastFocused node so we can tab back into the tree. Just change CSS to get rid of the dotted border until that time" attributes="private" />
          <scope name="_onTreeFocus" ilk="function" signature="_onTreeFocus(node)" doc="called from onFocus handler of treeitem labelNode to set styles, wai state and tabindex for currently focused treeitem." attributes="private">
            <variable ilk="argument" name="node" citdl="Widget" />
          </scope>
          <scope name="_onItemDelete" ilk="function" signature="_onItemDelete(item)" doc="processes notification of a deletion of an item" attributes="private">
            <variable ilk="argument" name="item" citdl="Item" />
          </scope>
          <scope name="_onItemChange" ilk="function" signature="_onItemChange(item)" doc="processes notification of a change to an item's scalar values like label" attributes="private">
            <variable ilk="argument" name="item" citdl="Item" />
          </scope>
          <scope name="_onItemChildrenChange" ilk="function" signature="_onItemChildrenChange(parent,newChildrenList)" doc="processes notification of a change to an item's children" attributes="private">
            <variable ilk="argument" name="parent" citdl="dojo.data.Item" />
            <variable ilk="argument" name="newChildrenList" citdl="dojo.data.Item[]" />
          </scope>
          <scope name="_saveState" ilk="function" doc="create and save a cookie with the currently expanded nodes identifiers" attributes="private" />
          <scope name="destroy" ilk="function" doc="" />
          <scope name="destroyRecursive" ilk="function" doc="" />
          <scope name="_createTreeNode" ilk="function" signature="_createTreeNode(args)" doc="creates a TreeNode" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <variable name="tree" doc="" />
          <variable name="_itemNodeMap" attributes="private" doc="" />
          <variable name="cookieName" doc="" />
          <variable name="_openedItemIds" attributes="private" doc="" />
          <variable name="_v10Compat" attributes="private" doc="" />
          <variable name="rootNode" doc="" />
          <variable name="_keyHandlerMap" attributes="private" doc="" />
          <variable name="lastFocused" doc="" />
        </scope>
        <scope name="_Calendar" ilk="function" doc="A simple GUI for choosing a date in the context of a monthly calendar." attributes="private">
          <scope name="templatePath" doc="" />
          <variable name="value" citdl="Date" doc="the currently selected Date" />
          <scope name="dayWidth" citdl="String" doc="How to represent the days of the week in the calendar header. See dojo.date.locale" />
          <scope name="setValue" ilk="function" signature="setValue(value)" doc="">
            <variable ilk="argument" name="value" citdl="Date" />
          </scope>
          <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value)" doc="Hook to make attr(&amp;amp;quot;value&amp;amp;quot;, ...) work." attributes="private">
            <variable ilk="argument" name="value" citdl="Date" />
          </scope>
          <scope name="_setText" ilk="function" signature="_setText(node,text)" attributes="private" doc="">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="text" />
          </scope>
          <scope name="_populateGrid" ilk="function" attributes="private" doc="" />
          <scope name="goToToday" ilk="function" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="_adjustDisplay" ilk="function" signature="_adjustDisplay(part,amount)" attributes="private" doc="">
            <variable ilk="argument" name="part" citdl="String" />
            <variable ilk="argument" name="amount" citdl="int" />
          </scope>
          <scope name="_onDayClick" ilk="function" signature="_onDayClick(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" citdl="Event" />
          </scope>
          <scope name="_onDayMouseOver" ilk="function" signature="_onDayMouseOver(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" citdl="Event" />
          </scope>
          <scope name="_onDayMouseOut" ilk="function" signature="_onDayMouseOut(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" citdl="Event" />
          </scope>
          <scope name="onValueSelected" ilk="function" signature="onValueSelected(date)" doc="a date cell was selected. It may be the same as the previous value.">
            <variable ilk="argument" name="date" citdl="Date" />
          </scope>
          <scope name="onChange" ilk="function" signature="onChange(date)" doc="called only when the selected date has changed">
            <variable ilk="argument" name="date" citdl="Date" />
          </scope>
          <scope name="isDisabledDate" ilk="function" signature="isDisabledDate(dateObject,locale)" doc="May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`" returns="Boolean" attributes="private">
            <variable ilk="argument" name="dateObject" citdl="Date" />
            <variable ilk="argument" name="locale" citdl="String" />
          </scope>
          <scope name="getClassForDate" ilk="function" signature="getClassForDate(dateObject,locale)" doc="May be overridden to return CSS classes to associate with the date entry for the given dateObject, for example to indicate a holiday in specified locale." returns="String" attributes="private">
            <variable ilk="argument" name="dateObject" citdl="Date" />
            <variable ilk="argument" name="locale" citdl="String" />
          </scope>
          <variable name="displayMonth" doc="" />
          <variable name="_currentNode" attributes="private" doc="" />
        </scope>
        <scope name="_Contained" ilk="function" attributes="private" doc="">
          <scope name="getParent" ilk="function" doc="Returns the parent widget of this widget, assuming the parent implements dijit._Container" />
          <scope name="_getSibling" ilk="function" signature="_getSibling(which)" returns="null" attributes="private" doc="">
            <variable ilk="argument" name="which" />
          </scope>
          <scope name="getPreviousSibling" ilk="function" doc="Returns null if this is the first child of the parent, otherwise returns the next element sibling to the &amp;amp;quot;left&amp;amp;quot;." returns="Mixed" attributes="private" />
          <scope name="getNextSibling" ilk="function" doc="Returns null if this is the last child of the parent, otherwise returns the next element sibling to the &amp;amp;quot;right&amp;amp;quot;." returns="Mixed" attributes="private" />
          <scope name="getIndexInParent" ilk="function" doc="Returns the index of this widget within its container parent. It returns -1 if the parent does not exist, or if the parent is not a dijit._Container" returns="int" attributes="private" />
        </scope>
        <scope name="_Container" ilk="function" doc="Mixin for widgets that contain a set of widget children." attributes="private">
          <scope name="isContainer" doc="" />
          <scope name="buildRendering" ilk="function" doc="" />
          <scope name="addChild" ilk="function" signature="addChild(widget,insertIndex)" doc="Makes the given widget a child of this widget.">
            <variable ilk="argument" name="widget" citdl="Widget" />
            <variable ilk="argument" name="insertIndex" citdl="int" />
          </scope>
          <scope name="removeChild" ilk="function" signature="removeChild(widget)" doc="Removes the passed widget instance from this widget but does not destroy it. You can also pass in an integer indicating the index within the container to remove">
            <variable ilk="argument" name="widget" citdl="Widget or int" />
          </scope>
          <scope name="_nextElement" ilk="function" signature="_nextElement(node)" attributes="private" doc="">
            <variable ilk="argument" name="node" />
          </scope>
          <scope name="_firstElement" ilk="function" signature="_firstElement(node)" attributes="private" doc="">
            <variable ilk="argument" name="node" />
          </scope>
          <scope name="getChildren" ilk="function" doc="Returns array of children widgets." returns="Widget[]" attributes="private" />
          <scope name="hasChildren" ilk="function" doc="Returns true if widget has children, i.e. if this.containerNode contains something." returns="Boolean" attributes="private" />
          <scope name="destroyDescendants" ilk="function" signature="destroyDescendants(preserveDom)" doc="">
            <variable ilk="argument" name="preserveDom" citdl="Boolean" />
          </scope>
          <scope name="_getSiblingOfChild" ilk="function" signature="_getSiblingOfChild(child,dir)" doc="Get the next or previous widget sibling of child" attributes="private">
            <variable ilk="argument" name="child" citdl="Widget" />
            <variable ilk="argument" name="dir" citdl="int" doc="if 1, get the next sibling if -1, get the previous sibling" />
          </scope>
          <scope name="getIndexOfChild" ilk="function" signature="getIndexOfChild(child)" doc="Gets the index of the child in this container or -1 if not found" returns="int" attributes="private">
            <variable ilk="argument" name="child" citdl="Widget" />
          </scope>
          <variable name="containerNode" doc="" />
        </scope>
        <scope name="_KeyNavContainer" ilk="function" attributes="private" doc="">
          <variable name="focusedChild" doc="" />
          <variable name="_keyNavCodes" citdl="Object" attributes="private" doc="" />
          <scope name="connectKeyNavHandlers" ilk="function" signature="connectKeyNavHandlers(prevKeyCodes,nextKeyCodes)" doc="Call in postCreate() to attach the keyboard handlers to the container. preKeyCodes: Array Key codes for navigating to the previous child.">
            <variable ilk="argument" name="prevKeyCodes" citdl="Array" />
            <variable ilk="argument" name="nextKeyCodes" citdl="Array" doc="Key codes for navigating to the next child." />
          </scope>
          <scope name="startupKeyNavChildren" ilk="function" doc="Call in startup() to set child tabindexes to -1" />
          <scope name="addChild" ilk="function" signature="addChild(widget,insertIndex)" doc="Add a child to our _Container">
            <variable ilk="argument" name="widget" citdl="Widget" />
            <variable ilk="argument" name="insertIndex" citdl="int" />
          </scope>
          <scope name="focus" ilk="function" doc="Default focus() implementation: focus the first child." />
          <scope name="focusFirstChild" ilk="function" doc="Focus the first focusable child in the container." />
          <scope name="focusNext" ilk="function" doc="Focus the next widget or focal node (for widgets with multiple focal nodes) within this container." />
          <scope name="focusPrev" ilk="function" doc="Focus the previous widget or focal node (for widgets with multiple focal nodes) within this container." />
          <scope name="focusChild" ilk="function" signature="focusChild(widget,node)" doc="Focus widget. Optionally focus 'node' within widget.">
            <variable ilk="argument" name="widget" citdl="Widget" />
            <variable ilk="argument" name="node" citdl="Node" />
          </scope>
          <scope name="_startupChild" ilk="function" signature="_startupChild(widget)" doc="Set tabindex=&amp;amp;quot;-1&amp;amp;quot; on focusable widgets so that we can focus them programmatically and by clicking. Connect focus and blur handlers." attributes="private">
            <variable ilk="argument" name="widget" citdl="Widget" />
          </scope>
          <scope name="_connectNode" ilk="function" signature="_connectNode(node)" attributes="private" doc="">
            <variable ilk="argument" name="node" citdl="Element" />
          </scope>
          <scope name="_onContainerFocus" ilk="function" signature="_onContainerFocus(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope name="_onContainerKeypress" ilk="function" signature="_onContainerKeypress(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope name="_onNodeFocus" ilk="function" signature="_onNodeFocus(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope name="_onNodeBlur" ilk="function" signature="_onNodeBlur(evt)" attributes="private" doc="">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope name="_onChildBlur" ilk="function" signature="_onChildBlur(widget)" doc="Called when focus leaves a child widget to go to a sibling widget." attributes="private">
            <variable ilk="argument" name="widget" citdl="Widget" />
          </scope>
          <scope name="_getFirstFocusableChild" ilk="function" attributes="private" doc="" />
          <scope name="_getNextFocusableChild" ilk="function" signature="_getNextFocusableChild(child,dir)" attributes="private" doc="">
            <variable ilk="argument" name="child" />
            <variable ilk="argument" name="dir" />
          </scope>
        </scope>
        <scope name="_Templated" ilk="function" doc="Mixin for widgets that are instantiated from a template" attributes="private">
          <scope name="templateNode" citdl="DomNode" doc="a node that represents the widget template. Pre-empts both templateString and templatePath." />
          <scope name="templateString" citdl="String" doc="a string that represents the widget template. Pre-empts the templatePath. In builds that have their strings &amp;amp;quot;interned&amp;amp;quot;, the templatePath is converted to an inline templateString, thereby preventing a synchronous network call." />
          <scope name="templatePath" citdl="String" doc="Path to template (HTML file) for this widget relative to dojo.baseUrl" />
          <scope name="widgetsInTemplate" citdl="Boolean" doc="should we parse the template to find widgets that might be declared in markup inside it? false by default." />
          <scope name="_skipNodeCache" attributes="private" doc="" />
          <scope name="_stringRepl" ilk="function" signature="_stringRepl(tmpl)" attributes="private" doc="">
            <variable ilk="argument" name="tmpl" />
          </scope>
          <scope name="buildRendering" ilk="function" doc="Construct the UI for this widget from a template, setting this.domNode." />
          <scope name="_fillContent" ilk="function" signature="_fillContent(source)" doc="relocate source contents to templated container node this.containerNode must be able to receive children, or exceptions will be thrown" attributes="private">
            <variable ilk="argument" name="source" citdl="DomNode" />
          </scope>
          <scope name="_attachTemplateNodes" ilk="function" signature="_attachTemplateNodes(rootNode,getAttrFunc)" doc="Iterate through the template and attach functions and nodes accordingly." attributes="private">
            <variable ilk="argument" name="rootNode" citdl="DomNode|Array[Widgets" doc="the node to search for properties. All children will be searched." />
            <variable ilk="argument" name="getAttrFunc" citdl="function" doc="a function which will be used to obtain property for a given DomNode/Widget" />
          </scope>
          <variable name="domNode" doc="" />
          <variable name="_supportingWidgets" attributes="private" doc="" />
          <variable name="_templateCache" citdl="Object" attributes="private" doc="" />
          <scope name="getCachedTemplate" ilk="function" signature="getCachedTemplate(templatePath,templateString,alwaysUseString)" doc="Static method to get a template based on the templatePath or templateString key" returns="String|Node" attributes="private">
            <variable ilk="argument" name="templatePath" citdl="String" doc="The URL to get the template from. dojo.uri.Uri is often passed as well." />
            <variable ilk="argument" name="templateString" citdl="String" doc="a string to use in lieu of fetching the template from a URL. Takes precedence over templatePath Returns: Mixed Either string (if there are ${} variables that need to be replaced) or just a DOM tree (if the node can be cloned directly)" />
            <variable ilk="argument" name="alwaysUseString" />
          </scope>
          <scope name="_sanitizeTemplateString" ilk="function" signature="_sanitizeTemplateString(tString)" doc="Strips &amp;amp;lt;?xml ...?&amp;amp;gt; declarations so that external SVG and XML documents can be added to a document without worry. Also, if the string is an HTML document, only the part inside the body tag is returned." returns="String" attributes="private">
            <variable ilk="argument" name="tString" citdl="String" />
          </scope>
          <scope name="_createNodesFromText" ilk="function" signature="_createNodesFromText(text)" doc="Attempts to create a set of nodes based on the structure of the passed text." returns="Array" attributes="private">
            <variable ilk="argument" name="text" citdl="String" />
          </scope>
        </scope>
        <scope name="_Widget" ilk="function" doc="The foundation of dijit widgets." attributes="private">
          <variable name="id" citdl="String" doc="a unique, opaque ID string that can be assigned by users or by the system. If the developer passes an ID which is known not to be unique, the specified ID is ignored and the system-generated ID is used instead." />
          <scope name="lang" citdl="String" doc="Rarely used. Overrides the default Dojo locale used to render this widget, as defined by the [HTML LANG](http://www.w3.org/TR/html401/struct/dirlang.html#adef-lang) attribute. Value must be among the list of locales specified during by the Dojo bootstrap, formatted according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt) (like en-us)." />
          <scope name="dir" citdl="String" doc="Unsupported by Dijit, but here for completeness. Dijit only supports setting text direction on the entire document. Bi-directional support, as defined by the [HTML DIR](http://www.w3.org/TR/html401/struct/dirlang.html#adef-dir) attribute. Either left-to-right &amp;amp;quot;ltr&amp;amp;quot; or right-to-left &amp;amp;quot;rtl&amp;amp;quot;." />
          <scope name="class" citdl="String" doc="HTML class attribute" />
          <scope name="title" doc="" />
          <variable name="srcNodeRef" citdl="DomNode" doc="pointer to original dom node">
            <variable name="id" doc="" />
          </variable>
          <variable name="domNode" citdl="DomNode" doc="This is our visible representation of the widget! Other DOM Nodes may by assigned to other properties, usually through the template system's dojoAttachPoint syntax, but the domNode property is the canonical &amp;amp;quot;top level&amp;amp;quot; node in widget UI." />
          <scope name="containerNode" citdl="DomNode"
          doc="Designates where children of the source dom node will be placed. &amp;amp;quot;Children&amp;amp;quot; in this case refers to both dom nodes and widgets. For example, for myWidget:  	&amp;amp;lt;div dojoType=myWidget&amp;amp;gt; 		&amp;amp;lt;b&amp;amp;gt; here's a plain dom node 		&amp;amp;lt;span dojoType=subWidget&amp;amp;gt;and a widget&amp;amp;lt;/span&amp;amp;gt; 		&amp;amp;lt;i&amp;amp;gt; and another plain dom node &amp;amp;lt;/i&amp;amp;gt; 	&amp;amp;lt;/div&amp;amp;gt;  containerNode would point to:  		&amp;amp;lt;b&amp;amp;gt; here's a plain dom node 		&amp;amp;lt;span dojoType=subWidget&amp;amp;gt;and a widget&amp;amp;lt;/span&amp;amp;gt; 		&amp;amp;lt;i&amp;amp;gt; and another plain dom node &amp;amp;lt;/i&amp;amp;gt;  In templated widgets, &amp;amp;quot;containerNode&amp;amp;quot; is set via a dojoAttachPoint assignment.  containerNode must be defined for any widget that accepts innerHTML (like ContentPane or BorderContainer or even Button), and conversely is null for widgets that don't, like TextBox." />
          <variable name="attributeMap" citdl="Object"
          doc="attributeMap sets up a &amp;amp;quot;binding&amp;amp;quot; between attributes (aka properties) of the widget and the widget's DOM. Changes to widget attributes listed in attributeMap will be reflected into the DOM.  For example, calling attr('title', 'hello') on a TitlePane will automatically cause the TitlePane's DOM to update with the new title.  attributeMap is a hash where the key is an attribute of the widget, and the value reflects a binding to a:  - DOM node attribute 		focus: {node: &amp;amp;quot;focusNode&amp;amp;quot;, type: &amp;amp;quot;attribute&amp;amp;quot;} Maps this.focus to this.focusNode.focus  - DOM node innerHTML 		title: { node: &amp;amp;quot;titleNode&amp;amp;quot;, type: &amp;amp;quot;innerHTML&amp;amp;quot; } Maps this.title to this.titleNode.innerHTML  - DOM node CSS class 		myClass: { node: &amp;amp;quot;domNode&amp;amp;quot;, type: &amp;amp;quot;class&amp;amp;quot; } Maps this.myClass to this.domNode.className  If the value is an array, then each element in the array matches one of the formats of the above list.  There are also some shorthands for backwards compatibility: - string --&amp;amp;gt; { node: string, type: &amp;amp;quot;attribute&amp;amp;quot; }, for example: 	&amp;amp;quot;focusNode&amp;amp;quot; ---&amp;amp;gt; { node: &amp;amp;quot;focusNode&amp;amp;quot;, type: &amp;amp;quot;attribute&amp;amp;quot; } - &amp;amp;quot;&amp;amp;quot; --&amp;amp;gt; { node: &amp;amp;quot;domNode&amp;amp;quot;, type: &amp;amp;quot;attribute&amp;amp;quot; }">

            <scope name="id" doc="" />
            <scope name="dir" doc="" />
            <scope name="lang" doc="" />
            <scope name="class" doc="" />
            <scope name="title" doc="" />
          </variable>
          <variable name="_deferredConnects" citdl="Object" doc="attributeMap addendum for event handlers that should be connected only on first use" attributes="private">
            <scope name="onClick" doc="" />
            <scope name="onDblClick" doc="" />
            <scope name="onKeyDown" doc="" />
            <scope name="onKeyPress" doc="" />
            <scope name="onKeyUp" doc="" />
            <scope name="onMouseMove" doc="" />
            <scope name="onMouseDown" doc="" />
            <scope name="onMouseOut" doc="" />
            <scope name="onMouseOver" doc="" />
            <scope name="onMouseLeave" doc="" />
            <scope name="onMouseEnter" doc="" />
            <scope name="onMouseUp" doc="" />
          </variable>
          <scope name="onClick" ilk="function" signature="onClick(event)" doc="Connect to this function to receive notifications of mouse click events.">
            <variable ilk="argument" name="event" citdl="mouse" doc="Event" />
          </scope>
          <scope name="onDblClick" ilk="function" signature="onDblClick(event)" doc="Connect to this function to receive notifications of mouse double click events.">
            <variable ilk="argument" name="event" citdl="mouse" doc="Event" />
          </scope>
          <scope name="onKeyDown" ilk="function" signature="onKeyDown(event)" doc="Connect to this function to receive notifications of keys being pressed down.">
            <variable ilk="argument" name="event" citdl="key" doc="Event" />
          </scope>
          <scope name="onKeyPress" ilk="function" signature="onKeyPress(event)" doc="Connect to this function to receive notifications of printable keys being typed.">
            <variable ilk="argument" name="event" citdl="key" doc="Event" />
          </scope>
          <scope name="onKeyUp" ilk="function" signature="onKeyUp(event)" doc="Connect to this function to receive notifications of keys being released.">
            <variable ilk="argument" name="event" citdl="key" doc="Event" />
          </scope>
          <scope name="onMouseDown" ilk="function" signature="onMouseDown(event)" doc="Connect to this function to receive notifications of when the mouse button is pressed down.">
            <variable ilk="argument" name="event" citdl="mouse" doc="Event" />
          </scope>
          <scope name="onMouseMove" ilk="function" signature="onMouseMove(event)" doc="Connect to this function to receive notifications of when the mouse moves over nodes contained within this widget.">
            <variable ilk="argument" name="event" citdl="mouse" doc="Event" />
          </scope>
          <scope name="onMouseOut" ilk="function" signature="onMouseOut(event)" doc="Connect to this function to receive notifications of when the mouse moves off of nodes contained within this widget.">
            <variable ilk="argument" name="event" citdl="mouse" doc="Event" />
          </scope>
          <scope name="onMouseOver" ilk="function" signature="onMouseOver(event)" doc="Connect to this function to receive notifications of when the mouse moves onto nodes contained within this widget.">
            <variable ilk="argument" name="event" citdl="mouse" doc="Event" />
          </scope>
          <scope name="onMouseLeave" ilk="function" signature="onMouseLeave(event)" doc="Connect to this function to receive notifications of when the mouse moves off of this widget.">
            <variable ilk="argument" name="event" citdl="mouse" doc="Event" />
          </scope>
          <scope name="onMouseEnter" ilk="function" signature="onMouseEnter(event)" doc="Connect to this function to receive notifications of when the mouse moves onto this widget.">
            <variable ilk="argument" name="event" citdl="mouse" doc="Event" />
          </scope>
          <scope name="onMouseUp" ilk="function" signature="onMouseUp(event)" doc="Connect to this function to receive notifications of when the mouse button is released.">
            <variable ilk="argument" name="event" citdl="mouse" doc="Event" />
          </scope>
          <scope name="_blankGif" attributes="private" doc="" />
          <scope name="postscript" ilk="function" signature="postscript(params,srcNodeRef)" doc="kicks off widget instantiation, see create() for details.">
            <variable ilk="argument" name="params" citdl="Object" />
            <variable ilk="argument" name="srcNodeRef" citdl="DomNode|String" />
          </scope>
          <scope name="create" ilk="function" signature="create(params,srcNodeRef)" doc="Kick off the life-cycle of a widget">
            <variable ilk="argument" name="params" citdl="Object" doc="Hash of initialization parameters for widget, including scalar values (like title, duration etc.) and functions, typically callbacks like onClick." />
            <variable ilk="argument" name="srcNodeRef" citdl="DomNode|String" doc="If a srcNodeRef (dom node) is specified: - use srcNodeRef.innerHTML as my contents - if this is a behavioral widget then apply behavior to that srcNodeRef - otherwise, replace srcNodeRef with my generated DOM tree" />
            <scope name="params" citdl="Hash" doc="of initialization parameters for widget, including scalar values (like title, duration etc.) and functions, typically callbacks like onClick." />
            <scope name="srcNodeRef" citdl="If" doc="a srcNodeRef (dom node) is specified: - use srcNodeRef.innerHTML as my contents - if this is a behavioral widget then apply behavior to that srcNodeRef - otherwise, replace srcNodeRef with my generated DOM tree" />
          </scope>
          <scope name="_applyAttributes" ilk="function" doc="Step during widget creation to copy all widget attributes to the DOM as per attributeMap and _setXXXAttr functions." attributes="private" />
          <scope name="postMixInProperties" ilk="function" doc="Called after the parameters to the widget have been read-in, but before the widget template is instantiated. Especially useful to set properties that are referenced in the widget template." />
          <scope name="buildRendering" ilk="function" doc="Construct the UI for this widget, setting this.domNode. Most widgets will mixin dijit._Templated, which implements this method." />
          <scope name="postCreate" ilk="function" doc="Called after a widget's dom has been setup" />
          <scope name="startup" ilk="function" doc="Called after a widget's children, and other widgets on the page, have been created. Provides an opportunity to manipulate any children before they are displayed. This is useful for composite widgets that need to control or layout sub-widgets. Many layout widgets can use this as a wiring phase." />
          <scope name="destroyRecursive" ilk="function" signature="destroyRecursive(preserveDom)" doc="Destroy this widget and it's descendants. This is the generic &amp;amp;quot;destructor&amp;amp;quot; function that all widget users should call to cleanly discard with a widget. Once a widget is destroyed, it's removed from the manager object.">
            <variable ilk="argument" name="preserveDom" citdl="Boolean" doc="If true, this method will leave the original Dom structure alone of descendant Widgets. Note: This will NOT work with dijit._Templated widgets." />
          </scope>
          <scope name="destroy" ilk="function" signature="destroy(preserveDom)" doc="Destroy this widget, but not its descendants. Will, however, destroy internal widgets such as those used within a template.">
            <variable ilk="argument" name="preserveDom" citdl="Boolean" doc="If true, this method will leave the original Dom structure alone. Note: This will not yet work with _Templated widgets" />
          </scope>
          <scope name="destroyRendering" ilk="function" signature="destroyRendering(preserveDom)" doc="Destroys the DOM nodes associated with this widget">
            <variable ilk="argument" name="preserveDom" citdl="Boolean" doc="If true, this method will leave the original Dom structure alone during tear-down. Note: this will not work with _Templated widgets yet." />
          </scope>
          <scope name="destroyDescendants" ilk="function" signature="destroyDescendants(preserveDom)" doc="Recursively destroy the children of this widget and their descendants.">
            <variable ilk="argument" name="preserveDom" citdl="Boolean" doc="If true, the preserveDom attribute is passed to all descendant widget's .destroy() method. Not for use with _Templated widgets.  TODO: should I destroy in the reverse order, to go bottom up?" />
          </scope>
          <scope name="uninitialize" ilk="function" doc="stub function. Override to implement custom widget tear-down behavior." />
          <scope name="onFocus" ilk="function" doc="stub function. Override or connect to this method to receive notifications for when the widget moves into focus." />
          <scope name="onBlur" ilk="function" doc="stub function. Override or connect to this method to receive notifications for when the widget moves out of focus." />
          <scope name="_onFocus" ilk="function" signature="_onFocus(e)" attributes="private" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="_onBlur" ilk="function" attributes="private" doc="" />
          <scope name="_onConnect" ilk="function" signature="_onConnect(event)" doc="Called when someone connects to one of my handlers. &amp;amp;quot;Turn on&amp;amp;quot; that handler if it isn't active yet." attributes="private">
            <variable ilk="argument" name="event" citdl="String" />
          </scope>
          <scope name="_setClassAttr" ilk="function" signature="_setClassAttr(value)" attributes="private" doc="">
            <variable ilk="argument" name="value" citdl="String" />
          </scope>
          <scope name="_setStyleAttr" ilk="function" signature="_setStyleAttr(value)" attributes="private" doc="">
            <variable ilk="argument" name="value" citdl="String" />
          </scope>
          <scope name="setAttribute" ilk="function" signature="setAttribute(attr,value)" doc="">
            <variable ilk="argument" name="attr" citdl="String" />
            <variable ilk="argument" name="value" citdl="anything" />
          </scope>
          <scope name="_attrToDom" ilk="function" signature="_attrToDom(attr,value)" doc="Reflect a widget attribute (title, tabIndex, duration etc.) to the widget DOM, as specified in attributeMap." attributes="private">
            <variable ilk="argument" name="attr" citdl="String" />
            <variable ilk="argument" name="value" citdl="String" />
          </scope>
          <scope name="attr" ilk="function" signature="attr(name,value)" doc="Set or get properties on a widget instance.">
            <variable ilk="argument" name="name" citdl="String|Object" doc="The property to get or set. If an object is passed here and not a string, its keys are used as names of attributes to be set and the value of the object as values to set in the widget." />
            <variable ilk="argument" name="value" citdl="Object" doc="Optional. If provided, attr() operates as a setter. If omitted, the current value of the named property is returned." />
          </scope>
          <variable name="_attrPairNames" citdl="Object" attributes="private" doc="" />
          <scope name="_getAttrNames" ilk="function" signature="_getAttrNames(name)" doc="helper function for Widget.attr() cache attribute name values so we don't do the string ops every time" attributes="private">
            <variable ilk="argument" name="name" />
          </scope>
          <scope name="toString" ilk="function" doc="returns a string that represents the widget. When a widget is cast to a string, this method will be used to generate the output. Currently, it does not implement any sort of reversable serialization." returns="String" attributes="private" />
          <scope name="getDescendants" ilk="function" doc="Returns all the widgets that contained by this, i.e., all widgets underneath this.containerNode." returns="Array" attributes="private" />
          <scope name="nodesWithKeyClick" doc="" />
          <scope name="connect" ilk="function" signature="connect(obj,event,method)" doc="Connects specified obj/event to specified method of this object and registers for disconnect() on widget destroy.">
            <variable ilk="argument" name="obj" citdl="Object|null" />
            <variable ilk="argument" name="event" citdl="String|Function" />
            <variable ilk="argument" name="method" citdl="String|Function" />
          </scope>
          <scope name="disconnect" ilk="function" signature="disconnect(handles)" doc="Disconnects handle created by this.connect. Also removes handle from this widget's list of connects">
            <variable ilk="argument" name="handles" citdl="Object" />
          </scope>
          <scope name="isLeftToRight" ilk="function" doc="Checks the page for text direction" returns="Boolean" attributes="private" />
          <scope name="isFocusable" ilk="function" doc="Return true if this widget can currently be focused and false if not" />
          <scope name="placeAt" ilk="function" signature="placeAt(reference,position)" doc="Place this widget's domNode reference somewhere in the DOM based on standard dojo.place conventions, or passing a Widget reference that contains and addChild member.">
            <variable ilk="argument" name="reference" citdl="String|DomNode|_Widget" doc="The String id of a domNode, a domNode reference, or a reference to a Widget posessing an addChild method." />
            <variable ilk="argument" name="position" citdl="String?|Int" doc="If passed a string or domNode reference, the position argument accepts a string just as dojo.place does, one of: &amp;amp;quot;first&amp;amp;quot;, &amp;amp;quot;last&amp;amp;quot;, &amp;amp;quot;before&amp;amp;quot;, or &amp;amp;quot;after&amp;amp;quot;.  If passed a _Widget reference, and that widget reference has an &amp;amp;quot;.addChild&amp;amp;quot; method, it will be called passing this widget instance into that method, supplying the optional position index passed." />
          </scope>
          <variable name="_connects" attributes="private" doc="" />
          <variable name="params" doc="" />
          <variable name="_created" attributes="private" doc="" />
          <variable name="_started" attributes="private" doc="" />
          <scope name="region" doc="" />
          <scope name="splitter" doc="" />
          <scope name="minSize" doc="" />
          <scope name="maxSize" doc="" />
          <scope name="layoutAlign" doc="" />
          <scope name="sizeMin" doc="" />
          <scope name="sizeShare" doc="" />
          <scope name="selected" doc="" />
          <scope name="closable" doc="" />
          <scope name="onClose" ilk="function" doc="Callback if someone tries to close the child, child will be closed if func returns true" />
        </scope>
        <scope name="_TimePicker" ilk="function" doc="A graphical time picker. This widget is used internally by other widgets and is not accessible as a standalone widget." attributes="private">
          <scope name="templatePath" doc="" />
          <scope name="baseClass" doc="" />
          <scope name="clickableIncrement" citdl="String" doc="ISO-8601 string representing the amount by which every clickable element in the time picker increases. Set in local time, without a time zone. Example: `T00:15:00` creates 15 minute increments Must divide dijit._TimePicker.visibleIncrement evenly" />
          <scope name="visibleIncrement" citdl="String" doc="ISO-8601 string representing the amount by which every element with a visible time in the time picker increases. Set in local time, without a time zone. Example: `T01:00:00` creates text in every 1 hour increment" />
          <scope name="visibleRange" citdl="String" doc="ISO-8601 string representing the range of this TimePicker. The TimePicker will only display times in this range. Example: `T05:00:00` displays 5 hours of options" />
          <scope name="value" citdl="String" doc="Date to display. Defaults to current time and date. Can be a Date object or an ISO-8601 string. If you specify the GMT time zone (`-01:00`), the time will be converted to the local time in the local time zone. Otherwise, the time is considered to be in the local time zone. If you specify the date and isDate is true, the date is used. Example: if your local time zone is `GMT -05:00`, `T10:00:00` becomes `T10:00:00-05:00` (considered to be local time), `T10:00:00-01:00` becomes `T06:00:00-05:00` (4 hour difference), `T10:00:00Z` becomes `T05:00:00-05:00` (5 hour difference between Zulu and local time) `yyyy-mm-ddThh:mm:ss` is the format to set the date and time Example: `2007-06-01T09:00:00`" />
          <scope name="_visibleIncrement" attributes="private" doc="" />
          <scope name="_clickableIncrement" attributes="private" doc="" />
          <scope name="_totalIncrements" attributes="private" doc="" />
          <scope name="constraints" citdl="dijit._TimePicker.__Constraints" doc="" />
        </scope>
        <scope ilk="function" name="_connectOnUseEventHandler" signature="_connectOnUseEventHandler(event)">
          <variable citdl="Event" name="event" ilk="argument" />
        </scope>
        <scope ilk="function" name="isCollapsed" returns="Boolean" doc="tests whether the current selection is empty" />
        <scope ilk="function" name="getBookmark" returns="Array" doc="Retrieves a bookmark that can be used with moveToBookmark to return to the same range" />
        <scope ilk="function" name="moveToBookmark" signature="moveToBookmark(bookmark)" doc="Moves current selection to a bookmark">
          <variable citdl="Object" name="bookmark" ilk="argument" doc="This should be a returned object from dojo.html.selection.getBookmark()" />
        </scope>
        <scope ilk="function" name="getFocus" signature="getFocus(menu,openedForWindow)" doc="Returns the current focus and selection. Called when a popup appears (either a top level menu or a dialog), or when a toolbar/menubar receives focus">
          <variable citdl="Widget" name="menu" ilk="argument" doc="The menu that's being opened" />
          <variable citdl="Window" name="openedForWindow" ilk="argument" doc="iframe in which menu was opened" />
        </scope>
        <scope ilk="function" name="focus" signature="focus(handle)" doc="Sets the focused node and the selection according to argument. To set focus to an iframe's content, pass in the iframe itself.">
          <variable citdl="Object || DomNode" name="handle" ilk="argument" doc="object returned by get(), or a DomNode" />
        </scope>
        <scope ilk="function" name="registerWin" signature="registerWin(targetWindow)" doc="Registers listeners on the specified window (either the main window or an iframe) to detect when the user has clicked somewhere. Anyone that creates an iframe should call this function.">
          <variable citdl="Window" name="targetWindow" ilk="argument" />
        </scope>
        <scope ilk="function" name="_onBlurNode" signature="_onBlurNode(node)" doc="Called when focus leaves a node. Usually ignored, _unless_ it *isn't* follwed by touching another node, which indicates that we tabbed off the last field on the page, in which case every widget is marked inactive">
          <variable citdl="DomNode" name="node" ilk="argument" />
        </scope>
        <scope ilk="function" name="_onTouchNode" signature="_onTouchNode(node)" doc="Callback when node is focused or mouse-downed">
          <variable citdl="DomNode" name="node" ilk="argument" />
        </scope>
        <scope ilk="function" name="_onFocusNode" signature="_onFocusNode(node)">
          <variable citdl="DomNode" name="node" ilk="argument" />
        </scope>
        <scope ilk="function" name="_setStack" signature="_setStack(newStack)">
          <variable name="newStack" ilk="argument" />
        </scope>
        <scope name="WidgetSet" ilk="function" doc="A set of widgets indexed by id">
          <scope name="add" ilk="function" signature="add(widget)" doc="">
            <variable ilk="argument" name="widget" citdl="Widget" />
          </scope>
          <scope name="remove" ilk="function" signature="remove(id)" doc="">
            <variable ilk="argument" name="id" citdl="String" />
          </scope>
          <scope name="forEach" ilk="function" signature="forEach(func)" doc="">
            <variable ilk="function" name="func" />
          </scope>
          <scope name="filter" ilk="function" signature="filter(filter)" returns="dijit.WidgetSet" attributes="private" doc="">
            <variable ilk="function" name="filter" />
          </scope>
          <scope name="byId" ilk="function" signature="byId(id)" doc="">
            <variable ilk="argument" name="id" citdl="String" />
          </scope>
          <scope name="byClass" ilk="function" signature="byClass(cls)" returns="dijit.WidgetSet" attributes="private" doc="">
            <variable ilk="argument" name="cls" citdl="String" />
          </scope>
          <variable name="_hash" attributes="private" doc="" />
        </scope>
        <variable name="registry" citdl="Object" doc="A list of widgets on a page." />
        <variable name="_widgetTypeCtr" citdl="Object" attributes="private" doc="" />
        <variable name="_tabElements" citdl="Object" attributes="private" doc="">
          <scope name="area" doc="" />
          <scope name="button" doc="" />
          <scope name="input" doc="" />
          <scope name="object" doc="" />
          <scope name="select" doc="" />
          <scope name="textarea" doc="" />
        </variable>
        <scope ilk="function" name="getUniqueId" signature="getUniqueId(widgetType)" returns="String">
          <variable citdl="String" name="widgetType" ilk="argument" />
        </scope>
        <scope ilk="function" name="byId" signature="byId(id)" returns="Widget" doc="Returns a widget by its id, or if passed a widget, no-op (like dojo.byId())">
          <variable citdl="String|Widget" name="id" ilk="argument" />
        </scope>
        <scope ilk="function" name="byNode" signature="byNode(node)" returns="Widget" doc="Returns the widget as referenced by node">
          <variable citdl="DOMNode" name="node" ilk="argument" />
        </scope>
        <scope ilk="function" name="getEnclosingWidget" signature="getEnclosingWidget(node)" doc="Returns the widget whose dom tree contains node or null if the node is not contained within the dom tree of any widget">
          <variable citdl="DOMNode" name="node" ilk="argument" />
        </scope>
        <scope ilk="function" name="_isElementShown" signature="_isElementShown(elem)">
          <variable citdl="Element" name="elem" ilk="argument" />
        </scope>
        <scope ilk="function" name="isTabNavigable" signature="isTabNavigable(elem)" returns="boolean" doc="Tests if an element is tab-navigable">
          <variable citdl="Element" name="elem" ilk="argument" />
        </scope>
        <scope ilk="function" name="_getTabNavigable" signature="_getTabNavigable(root)" doc="Finds the following descendants of the specified root node: * the first tab-navigable element in document order without a tabindex or with tabindex=&amp;amp;quot;0&amp;amp;quot; * the last tab-navigable element in document order without a tabindex or with tabindex=&amp;amp;quot;0&amp;amp;quot; * the first element in document order with the lowest positive tabindex value * the last element in document order with the highest positive tabindex value">
          <variable citdl="DOMNode" name="root" ilk="argument" />
        </scope>
        <scope ilk="function" name="getFirstInTabbingOrder" signature="getFirstInTabbingOrder(root)" returns="Element" doc="Finds the descendant of the specified root node that is first in the tabbing order">
          <variable citdl="String|DOMNode" name="root" ilk="argument" />
        </scope>
        <scope ilk="function" name="getLastInTabbingOrder" signature="getLastInTabbingOrder(root)" returns="Element" doc="Finds the descendant of the specified root node that is last in the tabbing order">
          <variable citdl="String|DOMNode" name="root" ilk="argument" />
        </scope>
        <scope ilk="function" name="getViewport" returns="object" />
        <scope name="__Position" ilk="function" attributes="private" doc="">
          <variable name="y" citdl="x" doc="Integer horizontal coordinate in pixels, relative to document body Integer vertical coordinate in pixels, relative to document body" />
        </scope>
        <scope ilk="function" name="placeOnScreen" signature="placeOnScreen(node,pos,corners,tryOnly)" doc="Positions one of the node's corners at specified position such that node is fully visible in viewport.">
          <variable citdl="DomNode" name="node" ilk="argument" />
          <variable citdl="dijit.__Position" name="pos" ilk="argument" doc="Object like {x: 10, y: 20}" />
          <variable citdl="String[]" name="corners" ilk="argument" doc="Array of Strings representing order to try corners in, like [&amp;amp;quot;TR&amp;amp;quot;, &amp;amp;quot;BL&amp;amp;quot;]. Possible values are: * &amp;amp;quot;BL&amp;amp;quot; - bottom left * &amp;amp;quot;BR&amp;amp;quot; - bottom right * &amp;amp;quot;TL&amp;amp;quot; - top left * &amp;amp;quot;TR&amp;amp;quot; - top right" />
          <variable citdl="boolean" name="tryOnly" ilk="argument" />
        </scope>
        <scope ilk="function" name="_place" signature="_place(node,choices,layoutNode)" doc="Given a list of spots to put node, put it at the first spot where it fits, of if it doesn't fit anywhere then the place with the least overflow">
          <variable citdl="DomNode" name="node" ilk="argument" />
          <variable citdl="Array" name="choices" ilk="argument" doc="of elements like: {corner: 'TL', pos: {x: 10, y: 20} } Above example says to put the top-left corner of the node at (10,20)" />
          <variable citdl="Function" name="layoutNode" ilk="argument" doc="(node aroundNodeCorner, nodeCorner) for things like tooltip, they are displayed differently (and have different dimensions) based on their orientation relative to the parent. This adjusts the popup based on orientation." />
        </scope>
        <scope ilk="function" name="placeOnScreenAroundNode" signature="placeOnScreenAroundNode(node,aroundNode,aroundCorners,layoutNode)">
          <variable citdl="DomNode" name="node" ilk="argument" />
          <variable citdl="DomNode" name="aroundNode" ilk="argument" />
          <variable citdl="Object" name="aroundCorners" ilk="argument" />
          <variable citdl="Function" name="layoutNode" ilk="argument" />
        </scope>
        <scope name="__Rectangle" ilk="function" attributes="private" doc="">
          <variable name="y" citdl="x" doc="Integer horizontal offset in pixels, relative to document body Integer vertical offset in pixels, relative to document body width: Integer width in pixels" />
          <variable name="height" citdl="Integer" doc="height in pixels" />
        </scope>
        <scope ilk="function" name="placeOnScreenAroundRectangle" signature="placeOnScreenAroundRectangle(node,aroundRect,aroundCorners,layoutNode)">
          <variable citdl="DomNode" name="node" ilk="argument" />
          <variable citdl="dijit.__Rectangle" name="aroundRect" ilk="argument" />
          <variable citdl="Object" name="aroundCorners" ilk="argument" />
          <variable citdl="Function" name="layoutNode" ilk="argument" />
        </scope>
        <scope ilk="function" name="_placeOnScreenAroundRect" signature="_placeOnScreenAroundRect(node,x,y,width,height,aroundCorners,layoutNode)">
          <variable citdl="DomNode" name="node" ilk="argument" />
          <variable citdl="Number" name="x" ilk="argument" />
          <variable citdl="Number" name="y" ilk="argument" />
          <variable citdl="Number" name="width" ilk="argument" />
          <variable citdl="Number" name="height" ilk="argument" />
          <variable citdl="Object" name="aroundCorners" ilk="argument" />
          <variable citdl="Function" name="layoutNode" ilk="argument" />
        </scope>
        <scope ilk="function" name="placeOnScreenAroundElement" signature="placeOnScreenAroundElement(node,aroundElement,aroundCorners,layoutNode)">
          <variable citdl="DomNode" name="node" ilk="argument" />
          <variable citdl="Object" name="aroundElement" ilk="argument" />
          <variable citdl="Object" name="aroundCorners" ilk="argument" />
          <variable citdl="Function" name="layoutNode" ilk="argument" />
        </scope>
        <scope ilk="function" name="popup" doc="This class is used to show/hide widgets as popups." />
        <scope ilk="function" name="_frames" doc="cache of iframes" />
        <scope name="BackgroundIframe" ilk="function" signature="BackgroundIframe(node)" doc="For IE z-index schenanigans. id attribute is required.">
          <variable ilk="argument" name="node" citdl="DomNode" />
          <variable name="iframe" doc="" />
          <scope name="destroy" ilk="function" doc="destroy the iframe" />
        </scope>
        <scope ilk="function" name="scrollIntoView" signature="scrollIntoView(node)">
          <variable citdl="DomNode" name="node" ilk="argument" />
        </scope>
        <variable name="typematic" citdl="Object" doc="These functions are used to repetitively call a user specified callback method when a specific key or mouse click over a specific DOM node is held down for a specific amount of time. Only 1 such event is allowed to occur on the browser page at 1 time.">
          <scope name="_fireEventAndReload" ilk="function" attributes="private" doc="">
            <variable name="_timer" attributes="private" doc="" />
            <variable name="_currentTimeout" attributes="private" doc="" />
          </scope>
          <scope name="trigger" ilk="function" signature="trigger(evt,_this,node,callback,obj,subsequentDelay,initialDelay)" doc="Start a timed, repeating callback sequence. If already started, the function call is ignored. This method is not normally called by the user but can be when the normal listener code is insufficient. Parameters:">
            <variable ilk="argument" name="evt" citdl="Event" doc="key or mouse event object" />
            <variable ilk="argument" name="_this" citdl="Object" doc="pointer to the user's widget space." />
            <variable ilk="argument" name="node" citdl="DOMNode" doc="the DOM node object passed in" />
            <variable ilk="function" name="callback" doc="function to call until the sequence is stopped called with 3 parameters: count: integer representing number of repeated calls (0..n) with -1 indicating the iteration has stopped" />
            <variable ilk="argument" name="obj" citdl="Object" doc="user space object used to uniquely identify each typematic sequence" />
            <variable ilk="argument" name="subsequentDelay" citdl="Number" doc="if &amp;amp;gt; 1, the number of milliseconds until the 3-&amp;amp;gt;n events occur or else the fractional time multiplier for the next event's delay, default=0.9" />
            <variable ilk="argument" name="initialDelay" citdl="Number" doc="the number of milliseconds until the 2nd event occurs, default=500ms" />
            <variable name="_initialDelay" attributes="private" doc="" />
            <variable name="_subsequentDelay" attributes="private" doc="" />
            <variable name="_obj" attributes="private" doc="" />
            <variable name="_evt" attributes="private" doc="" />
            <variable name="_node" attributes="private" doc="" />
            <variable name="_currentTimeout" attributes="private" doc="" />
            <variable name="_count" attributes="private" doc="" />
            <variable name="_callback" attributes="private" doc="" />
          </scope>
          <scope name="stop" ilk="function" doc="Stop an ongoing timed, repeating callback sequence.">
            <variable name="_timer" attributes="private" doc="" />
            <variable name="_obj" attributes="private" doc="" />
          </scope>
          <scope name="addKeyListener" ilk="function" signature="addKeyListener(node,keyObject,_this,callback,subsequentDelay,initialDelay)" doc="Start listening for a specific typematic key.">
            <variable ilk="argument" name="node" citdl="DOMNode" />
            <variable ilk="argument" name="keyObject" citdl="Object" doc="an object defining the key to listen for. charOrCode: the printable character (string) or keyCode (number) to listen for. keyCode: (deprecated - use charOrCode) the keyCode (number) to listen for (implies charCode = 0). charCode: (deprecated - use charOrCode) the charCode (number) to listen for. ctrlKey: desired ctrl key state to initiate the calback sequence: pressed (true) released (false) either (unspecified) altKey: same as ctrlKey but for the alt key shiftKey: same as ctrlKey but for the shift key See the trigger method for other parameters. Returns an array of dojo.connect handles" />
            <variable ilk="argument" name="_this" citdl="Object" />
            <variable ilk="function" name="callback" />
            <variable ilk="argument" name="subsequentDelay" citdl="Number" />
            <variable ilk="argument" name="initialDelay" citdl="Number" />
          </scope>
          <scope name="addMouseListener" ilk="function" signature="addMouseListener(node,_this,callback,subsequentDelay,initialDelay)" doc="Start listening for a typematic mouse click. See the trigger method for other parameters. Returns an array of dojo.connect handles">
            <variable ilk="argument" name="node" citdl="DOMNode" />
            <variable ilk="argument" name="_this" citdl="Object" />
            <variable ilk="function" name="callback" />
            <variable ilk="argument" name="subsequentDelay" citdl="Number" />
            <variable ilk="argument" name="initialDelay" citdl="Number" />
          </scope>
          <scope name="addListener" ilk="function" signature="addListener(mouseNode,keyNode,keyObject,_this,callback,subsequentDelay,initialDelay)" doc="Start listening for a specific typematic key and mouseclick. This is a thin wrapper to addKeyListener and addMouseListener.">
            <variable ilk="argument" name="mouseNode" citdl="Node" doc="the DOM node object to listen on for mouse events." />
            <variable ilk="argument" name="keyNode" citdl="Node" doc="the DOM node object to listen on for key events. See the addMouseListener and addKeyListener methods for other parameters. Returns an array of dojo.connect handles" />
            <variable ilk="argument" name="keyObject" citdl="Object" />
            <variable ilk="argument" name="_this" citdl="Object" />
            <variable ilk="function" name="callback" />
            <variable ilk="argument" name="subsequentDelay" citdl="Number" />
            <variable ilk="argument" name="initialDelay" citdl="Number" />
          </scope>
        </variable>
        <variable name="wai" citdl="Object" doc="">
          <scope name="onload" ilk="function" doc="Detects if we are in high-contrast mode or not" />
        </variable>
        <scope ilk="function" name="hasWaiRole" signature="hasWaiRole(elem,role)" doc="Determines if an element has a particular non-XHTML role.">
          <variable citdl="Element" name="elem" ilk="argument" />
          <variable citdl="String" name="role" ilk="argument" />
        </scope>
        <scope ilk="function" name="getWaiRole" signature="getWaiRole(elem)" doc="Gets the non-XHTML role for an element (which should be a wai role).">
          <variable citdl="Element" name="elem" ilk="argument" />
        </scope>
        <scope ilk="function" name="setWaiRole" signature="setWaiRole(elem,role)" doc="Sets the role on an element.">
          <variable citdl="Element" name="elem" ilk="argument" />
          <variable citdl="String" name="role" ilk="argument" />
        </scope>
        <scope ilk="function" name="removeWaiRole" signature="removeWaiRole(elem,role)" doc="Removes the specified non-XHTML role from an element. removes role attribute if no specific role provided (for backwards compat.)">
          <variable citdl="Element" name="elem" ilk="argument" />
          <variable citdl="String" name="role" ilk="argument" />
        </scope>
        <scope ilk="function" name="hasWaiState" signature="hasWaiState(elem,state)" returns="www.w3.org/2005/07/aaa&amp;quot;, state);" doc="Determines if an element has a given state.">
          <variable citdl="Element" name="elem" ilk="argument" />
          <variable citdl="String" name="state" ilk="argument" />
        </scope>
        <scope ilk="function" name="getWaiState" signature="getWaiState(elem,state)" returns="www.w3.org/2005/07/aaa&amp;quot;, state);" doc="Gets the value of a state on an element.">
          <variable citdl="Element" name="elem" ilk="argument" />
          <variable citdl="String" name="state" ilk="argument" />
        </scope>
        <scope ilk="function" name="setWaiState" signature="setWaiState(elem,state,value)" doc="Sets a state on an element.">
          <variable citdl="Element" name="elem" ilk="argument" />
          <variable citdl="String" name="state" ilk="argument" />
          <variable citdl="String" name="value" ilk="argument" />
        </scope>
        <scope ilk="function" name="removeWaiState" signature="removeWaiState(elem,state)" doc="Removes a state from an element.">
          <variable citdl="Element" name="elem" ilk="argument" />
          <variable citdl="String" name="state" ilk="argument" />
        </scope>
        <scope ilk="function" name="getDocumentWindow" signature="getDocumentWindow(doc)" returns="Window" doc="Get window object associated with document doc">
          <variable name="doc" ilk="argument" />
        </scope>
        <variable name="_base" citdl="Object" attributes="private" doc="" />
        <variable name="_editor" citdl="Object" attributes="private" doc="">
          <scope name="_Plugin" ilk="function" signature="_Plugin(args,node)" attributes="private" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
            <variable ilk="argument" name="node" citdl="DomNode" />
            <variable name="editor" doc="" />
            <scope name="iconClassPrefix" doc="" />
            <variable name="button" doc="">
              <variable name="checked" doc="" />
              <scope name="domNode" />
            </variable>
            <scope name="queryCommand" doc="" />
            <scope name="command" doc="" />
            <scope name="commandArg" doc="" />
            <scope name="useDefaultCommand" doc="" />
            <scope name="buttonClass" doc="" />
            <scope name="getLabel" ilk="function" signature="getLabel(key)" doc="">
              <variable ilk="argument" name="key" />
            </scope>
            <scope name="_initButton" ilk="function" signature="_initButton(props)" attributes="private" doc="">
              <variable ilk="argument" name="props" />
            </scope>
            <scope name="destroy" ilk="function" signature="destroy(f)" doc="">
              <variable ilk="argument" name="f" />
            </scope>
            <scope name="connect" ilk="function" signature="connect(o,f,tf)" doc="">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="f" />
              <variable ilk="argument" name="tf" />
            </scope>
            <scope name="updateState" ilk="function" doc="" />
            <scope name="setEditor" ilk="function" signature="setEditor(editor)" doc="">
              <variable ilk="argument" name="editor" citdl="Widget" />
            </scope>
            <scope name="setToolbar" ilk="function" signature="setToolbar(toolbar)" doc="">
              <variable ilk="argument" name="toolbar" citdl="Widget" />
            </scope>
            <variable name="enabled" doc="" />
            <variable name="checked" doc="" />
            <variable name="_connects" attributes="private" doc="" />
          </scope>
          <scope name="escapeXml" ilk="function" signature="escapeXml(str,noSingleQuotes)" doc="Adds escape sequences for special characters in XML: &amp;amp;amp;&amp;amp;lt;&amp;amp;gt;&amp;amp;quot;' Optionally skips escapes for single quotes" returns="string" attributes="private">
            <variable ilk="argument" name="str" citdl="String" />
            <variable ilk="argument" name="noSingleQuotes" citdl="Boolean" />
          </scope>
          <scope name="getNodeHtml" ilk="function" signature="getNodeHtml(node)" doc="">
            <variable ilk="argument" name="node" citdl="DomNode" />
          </scope>
          <scope name="getChildrenHtml" ilk="function" signature="getChildrenHtml(dom)" doc="Returns the html content of a DomNode and children" returns="String" attributes="private">
            <variable ilk="argument" name="dom" citdl="DomNode" />
          </scope>
          <variable name="html" citdl="Object" doc="" />
          <variable name="plugins" citdl="Object" doc="">
            <scope name="AlwaysShowToolbar" ilk="function" doc="For auto-expanding editors, this plugin will keep the editor's toolbar visible even when the top of the editor has scrolled off the top of the viewport (usually when editing a long document).">
              <variable name="_handleScroll" attributes="private" doc="" />
              <scope name="setEditor" ilk="function" signature="setEditor(e)" doc="">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="enable" ilk="function" signature="enable(d)" doc="">
                <variable ilk="argument" name="d" />
              </scope>
              <scope name="_updateHeight" ilk="function" doc="Updates the height of the editor area to fit the contents." returns="prevent setting height to 0" attributes="private" />
              <variable name="_lastHeight" attributes="private" doc="" />
              <scope name="globalOnScrollHandler" ilk="function" doc="" />
              <scope name="destroy" ilk="function" doc="" />
              <variable name="editor" doc="" />
              <variable name="_scrollSetUp" attributes="private" doc="" />
              <variable name="_scrollThreshold" attributes="private" doc="" />
              <variable name="_IEOriginalPos" attributes="private" doc="" />
              <variable name="_fixEnabled" attributes="private" doc="" />
            </scope>
            <scope name="EnterKeyHandling" ilk="function" doc="This plugin tries to make all browsers have identical behavior when the user presses the ENTER key. Specifically, it fixes the double-spaced line problem on IE." signature="EnterKeyHandling(args)">
              <variable ilk="argument" name="args" />
              <variable name="blockNodeForEnter" doc="" />
              <scope name="setEditor" ilk="function" signature="setEditor(editor)" doc="">
                <variable ilk="argument" name="editor" />
              </scope>
              <scope name="connect" ilk="function" signature="connect(o,f,tf)" doc="">
                <variable ilk="argument" name="o" />
                <variable ilk="argument" name="f" />
                <variable ilk="argument" name="tf" />
              </scope>
              <scope name="destroy" ilk="function" doc="" />
              <scope name="onKeyPressed" ilk="function" signature="onKeyPressed(e)" doc="">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="bogusHtmlContent" doc="" />
              <scope name="blockNodes" doc="" />
              <scope name="handleEnterKey" ilk="function" signature="handleEnterKey(e)" doc="Manually handle enter key event to make the behavior consistant across all supported browsers. See property blockNodeForEnter for available options  let browser handle this TODO: delete. this code will never fire because onKeyPress --&amp;amp;gt; handleEnterKey is only called when blockNodeForEnter != null" returns="let brower handle" attributes="private">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="removeTrailingBr" ilk="function" signature="removeTrailingBr(container)" doc="">
                <variable ilk="argument" name="container" />
              </scope>
              <scope name="_fixNewLineBehaviorForIE" ilk="function" signature="_fixNewLineBehaviorForIE(d)" doc="Insert CSS so &amp;amp;lt;p&amp;amp;gt; nodes don't have spacing around them, thus hiding the fact that ENTER key on IE is creating new paragraphs" returns="HTMLStyleElement" attributes="private">
                <variable ilk="argument" name="d" />
              </scope>
              <scope name="regularPsToSingleLinePs" ilk="function" signature="regularPsToSingleLinePs(element,noWhiteSpaceInEmptyP)" doc="Converts a &amp;amp;lt;p&amp;amp;gt; node containing &amp;amp;lt;br&amp;amp;gt;'s into multiple &amp;amp;lt;p&amp;amp;gt; nodes.">
                <variable ilk="argument" name="element" />
                <variable ilk="argument" name="noWhiteSpaceInEmptyP" />
              </scope>
              <scope name="singleLinePsToRegularPs" ilk="function" signature="singleLinePsToRegularPs(element)" doc="Called as post-filter. Apparently collapses adjacent &amp;amp;lt;p&amp;amp;gt; nodes into a single &amp;amp;lt;p&amp;amp;gt; nodes with &amp;amp;lt;br&amp;amp;gt; separating each line.">
                <variable ilk="argument" name="element" />
              </scope>
              <variable name="editor" doc="">
                <scope name="document">
                  <variable name="__INSERTED_EDITIOR_NEWLINE_CSS" attributes="private" doc="" />
                </scope>
              </variable>
              <variable name="_connects" attributes="private" doc="" />
              <variable name="_checkListLater" attributes="private" doc="" />
              <variable name="_pressedEnterInBlock" attributes="private" doc="" />
            </scope>
            <scope name="FontChoice" ilk="function" doc="This plugin provides three dropdowns for setting font information in the editor">
              <scope name="_uniqueId" attributes="private" doc="" />
              <scope name="buttonClass" doc="" />
              <scope name="useDefaultCommand" doc="" />
              <scope name="_initButton" ilk="function" attributes="private" doc="" />
              <scope name="updateState" ilk="function" doc="" />
              <scope name="setToolbar" ilk="function" doc="" />
              <variable name="_availableValues" attributes="private" doc="" />
              <variable name="command" doc="" />
              <variable name="updating" doc="" />
              <variable name="_focusHandle" attributes="private" doc="" />
            </scope>
            <scope name="LinkDialog" ilk="function" doc="This plugin provides dialogs for inserting links and images into the editor">
              <scope name="buttonClass" doc="" />
              <scope name="useDefaultCommand" doc="" />
              <scope name="urlRegExp" doc="" />
              <scope name="linkDialogTemplate" doc="" />
              <scope name="_initButton" ilk="function" attributes="private" doc="" />
              <scope name="_setContent" ilk="function" signature="_setContent(staticPanel)" attributes="private" doc="">
                <variable ilk="argument" name="staticPanel" />
              </scope>
              <scope name="setValue" ilk="function" signature="setValue(args)" doc="callback from the dialog when user hits &amp;amp;quot;set&amp;amp;quot; button TODO: prevent closing popup if the text is empty">
                <variable ilk="argument" name="args" />
              </scope>
              <scope name="_onCloseDialog" ilk="function" attributes="private" doc="" />
              <scope name="_onOpenDialog" ilk="function" attributes="private" doc="" />
              <variable name="tag" doc="" />
              <variable name="dropDown" doc="" />
            </scope>
            <scope name="TabIndent" ilk="function" doc="This plugin is used to allow the use of the tab and shift-tab keys to indent/outdent list items. This overrides the default behavior of moving focus from/to the toolbar">
              <scope name="useDefaultCommand" doc="" />
              <scope name="buttonClass" doc="" />
              <scope name="command" doc="" />
              <scope name="_initButton" ilk="function" attributes="private" doc="" />
              <scope name="updateState" ilk="function" doc="" />
              <scope name="_tabIndent" ilk="function" attributes="private" doc="" />
              <scope name="button">
                <variable name="checked" doc="" />
              </scope>
              <scope name="editor">
                <variable name="isTabIndent" doc="" />
              </scope>
            </scope>
            <scope name="TextColor" ilk="function" doc="This plugin provides dropdown color pickers for setting text color and background color">
              <scope name="buttonClass" doc="" />
              <variable name="dropDown" doc="" />
            </scope>
            <scope name="ToggleDir" ilk="function" doc="This plugin is used to toggle direction of the edited document only, no matter what direction the whole page is.">
              <scope name="useDefaultCommand" doc="" />
              <scope name="command" doc="" />
              <scope name="_initButton" ilk="function" attributes="private" doc="" />
              <scope name="updateState" ilk="function" doc="" />
              <scope name="_toggleDir" ilk="function" attributes="private" doc="" />
            </scope>
          </variable>
          <variable name="range" citdl="Object" doc="" />
          <variable name="selection" citdl="Object" doc="">
            <scope name="getType" ilk="function" doc="Get the selection type (like dojo.doc.select.type in IE)." />
            <scope name="getSelectedText" ilk="function" doc="Return the text (no html tags) included in the current selection or null if no text is selected" />
            <scope name="getSelectedHtml" ilk="function" doc="Return the html of the current selection or null if unavailable" />
            <scope name="getSelectedElement" ilk="function" doc="Retrieves the selected element (if any), just in the case that a single element (object like and image or a table) is selected." />
            <scope name="getParentElement" ilk="function" doc="Get the parent element of the current selection" />
            <scope name="hasAncestorElement" ilk="function" signature="hasAncestorElement(tagName)" doc="Check whether current selection has a parent element which is of type tagName (or one of the other specified tagName)">
              <variable ilk="argument" name="tagName" citdl="String">
                <scope name="repeating" />
              </variable>
            </scope>
            <scope name="getAncestorElement" ilk="function" signature="getAncestorElement(tagName)" doc="Return the parent element of the current selection which is of type tagName (or one of the other specified tagName)">
              <variable ilk="argument" name="tagName" citdl="String">
                <scope name="repeating" />
              </variable>
            </scope>
            <scope name="isTag" ilk="function" signature="isTag(node,tags)" doc="">
              <variable ilk="argument" name="node" citdl="DomNode" />
              <variable ilk="argument" name="tags" citdl="Array" />
            </scope>
            <scope name="getParentOfType" ilk="function" signature="getParentOfType(node,tags)" doc="">
              <variable ilk="argument" name="node" citdl="DomNode" />
              <variable ilk="argument" name="tags" citdl="Array" />
            </scope>
            <scope name="collapse" ilk="function" signature="collapse(beginning)" doc="clear current selection">
              <variable ilk="argument" name="beginning" citdl="Boolean" />
            </scope>
            <scope name="remove" ilk="function" doc="delete current selection" />
            <scope name="selectElementChildren" ilk="function" signature="selectElementChildren(element,nochangefocus)" doc="clear previous selection and select the content of the node (excluding the node itself)">
              <variable ilk="argument" name="element" citdl="DomNode" />
              <variable ilk="argument" name="nochangefocus" citdl="Boolean" />
            </scope>
            <scope name="selectElement" ilk="function" signature="selectElement(element,nochangefocus)" doc="clear previous selection and select element (including all its children)">
              <variable ilk="argument" name="element" citdl="DomNode" />
              <variable ilk="argument" name="nochangefocus" citdl="Boolean" />
            </scope>
          </variable>
        </variable>
        <variable name="range" citdl="Object" doc="">
          <variable name="ie" citdl="Object" doc="">
            <variable name="cachedSelection" citdl="Object" doc="" />
            <scope name="selection" ilk="function" signature="selection(win)" doc="">
              <variable ilk="argument" name="win" />
              <variable name="_ranges" attributes="private" doc="" />
              <variable name="addRange" ilk="function" signature="addRange(r,internal)" doc="">
                <variable ilk="argument" name="r" />
                <variable ilk="argument" name="internal" citdl="boolean" />
              </variable>
              <variable name="rangeCount" doc="" />
              <variable name="removeAllRanges" ilk="function" doc="" />
              <variable name="getRangeAt" ilk="function" signature="getRangeAt(i)" doc="">
                <variable ilk="argument" name="i" />
              </variable>
              <variable name="_getCurrentSelection" ilk="function" attributes="private" doc="" />
            </scope>
            <scope name="decomposeControlRange" ilk="function" signature="decomposeControlRange(range)" doc="">
              <variable ilk="argument" name="range" />
            </scope>
            <scope name="getEndPoint" ilk="function" signature="getEndPoint(range,end)" doc="">
              <variable ilk="argument" name="range" />
              <variable ilk="argument" name="end" />
            </scope>
            <scope name="setEndPoint" ilk="function" signature="setEndPoint(range,container,offset)" doc="">
              <variable ilk="argument" name="range" />
              <variable ilk="argument" name="container" />
              <variable ilk="argument" name="offset" />
            </scope>
            <scope name="decomposeTextRange" ilk="function" signature="decomposeTextRange(range)" doc="">
              <variable ilk="argument" name="range" />
            </scope>
            <scope name="setRange" ilk="function" signature="setRange(range,startContainter,startOffset,endContainter,endOffset,collapsed)" doc="">
              <variable ilk="argument" name="range" />
              <variable ilk="argument" name="startContainter" />
              <variable ilk="argument" name="startOffset" />
              <variable ilk="argument" name="endContainter" />
              <variable ilk="argument" name="endOffset" />
              <variable ilk="argument" name="collapsed" />
            </scope>
          </variable>
          <scope name="getIndex" ilk="function" signature="getIndex(node,parent)" doc="">
            <variable ilk="argument" name="node" citdl="DomNode" />
            <variable ilk="argument" name="parent" citdl="DomNode" />
          </scope>
          <scope name="getNode" ilk="function" signature="getNode(index,parent)" returns="terminate dojo.every|carry on the every loop" attributes="private" doc="">
            <variable ilk="argument" name="index" citdl="Array" />
            <variable ilk="argument" name="parent" citdl="DomNode" />
          </scope>
          <scope name="getCommonAncestor" ilk="function" signature="getCommonAncestor(n1,n2)" doc="">
            <variable ilk="argument" name="n1" />
            <variable ilk="argument" name="n2" />
          </scope>
          <scope name="getAncestor" ilk="function" signature="getAncestor(node,regex,root)" doc="">
            <variable ilk="argument" name="node" citdl="DomNode" />
            <variable ilk="argument" name="regex" citdl="RegEx" />
            <variable ilk="argument" name="root" citdl="DomNode" />
          </scope>
          <scope name="getBlockAncestor" ilk="function" signature="getBlockAncestor(node,regex,root)" doc="">
            <variable ilk="argument" name="node" citdl="DomNode" />
            <variable ilk="argument" name="regex" citdl="RegEx" />
            <variable ilk="argument" name="root" citdl="DomNode" />
          </scope>
          <scope name="atBeginningOfContainer" ilk="function" signature="atBeginningOfContainer(container,node,offset)" doc="">
            <variable ilk="argument" name="container" citdl="DomNode" />
            <variable ilk="argument" name="node" citdl="DomNode" />
            <variable ilk="argument" name="offset" citdl="Int" />
          </scope>
          <scope name="atEndOfContainer" ilk="function" signature="atEndOfContainer(container,node,offset)" doc="">
            <variable ilk="argument" name="container" citdl="DomNode" />
            <variable ilk="argument" name="node" citdl="DomNode" />
            <variable ilk="argument" name="offset" citdl="Int" />
          </scope>
          <scope name="adjacentNoneTextNode" ilk="function" signature="adjacentNoneTextNode(startnode,next)" doc="">
            <variable ilk="argument" name="startnode" />
            <variable ilk="argument" name="next" />
          </scope>
          <scope name="create" ilk="function" doc="" />
          <scope name="getSelection" ilk="function" signature="getSelection(win,ignoreUpdate)" doc="">
            <variable ilk="argument" name="win" />
            <variable ilk="argument" name="ignoreUpdate" citdl="Boolean" />
          </scope>
          <scope name="BlockTagNames" doc="" />
          <scope name="_w3c" attributes="private" doc="" />
        </variable>
        <variable name="_tree" citdl="Object" attributes="private" doc="">
          <scope name="dndSelector" ilk="function" signature="dndSelector(tree,params)" doc="">
            <variable ilk="argument" name="tree" />
            <variable ilk="argument" name="params" />
            <scope name="singular" doc="" />
            <scope name="getSelectedItems" ilk="function" doc="" />
            <scope name="getSelectedNodes" ilk="function" doc="" />
            <scope name="selectNone" ilk="function" doc="unselects all items" returns="self" attributes="private" />
            <scope name="insertItems" ilk="function" signature="insertItems(item,parent)" doc="inserts new data items (see Container's insertNodes method for details)  we actually need to add things to the store here instead of adding nodes directly to the tree">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="parent" />
            </scope>
            <scope name="destroy" ilk="function" doc="prepares the object to be garbage-collected" />
            <scope name="onMouseDown" ilk="function" signature="onMouseDown(e)" doc="event processor for onmousedown">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseMove" ilk="function" doc="" />
            <scope name="onOverEvent" ilk="function" doc="" />
            <scope name="onMouseUp" ilk="function" signature="onMouseUp(e)" doc="event processor for onmouseup">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="_removeSelection" ilk="function" doc="unselects all items" returns="self" attributes="private" />
            <scope name="_removeAnchor" ilk="function" returns="self" attributes="private" doc="" />
            <variable name="selection" doc="" />
            <scope name="current">
              <variable name="id" doc="" />
            </scope>
            <variable name="simpleSelection" doc="" />
            <variable name="anchor" doc="" />
            <variable name="onmousemoveEvent" doc="" />
          </scope>
          <scope name="dndSource" ilk="function" doc="a constructor of the Source" signature="dndSource(tree,params)">
            <variable ilk="argument" name="tree" citdl="dijit.Tree" doc="the tree widget to build the source on" />
            <variable ilk="argument" name="params" citdl="Object" doc="a dict of parameters, recognized parameters are:" />
            <variable name="isSource" citdl="Boolean" doc="can be used as a DnD source, if true; assumed to be &amp;amp;quot;true&amp;amp;quot; if omitted" />
            <scope name="copyOnly" doc="" />
            <scope name="skipForm" doc="" />
            <scope name="dragThreshold" doc="" />
            <variable name="accept" citdl="Array" doc="list of accepted types (text strings) for a target; assumed to be [&amp;amp;quot;text&amp;amp;quot;] if omitted horizontal: Boolean: a horizontal container, if true, vertical otherwise or when omitted copyOnly: Boolean: always copy items, if true, use a state of Ctrl key otherwise skipForm: Boolean: don't start the drag operation, if clicked on form elements the rest of parameters are passed to the selector" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="checkAcceptance" ilk="function" signature="checkAcceptance(source,nodes)" doc="checks, if the target can accept nodes from this source" returns="Boolean" attributes="private">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which provides items" />
              <variable ilk="argument" name="nodes" citdl="Array" doc="the list of transferred items" />
            </scope>
            <scope name="copyState" ilk="function" signature="copyState(keyPressed)" doc="Returns true, if we need to copy items, false to move. It is separated to be overwritten dynamically, if needed." returns="Boolean" attributes="private">
              <variable ilk="argument" name="keyPressed" citdl="Boolean" doc="the &amp;amp;quot;copy&amp;amp;quot; was pressed" />
            </scope>
            <scope name="destroy" ilk="function" doc="prepares the object to be garbage-collected" />
            <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="onMouseMove" ilk="function" signature="onMouseMove(e)" doc="event processor for onmousemove">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseDown" ilk="function" signature="onMouseDown(e)" doc="event processor for onmousedown">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseUp" ilk="function" signature="onMouseUp(e)" doc="event processor for onmouseup">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseOver" ilk="function" signature="onMouseOver(e)" doc="event processor for onmouseover">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="checkItemAcceptance" ilk="function" signature="checkItemAcceptance(node,source)" doc="stub funciton to be overridden if one wants to check for the ability to drop at the node/item level">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="source" />
            </scope>
            <scope name="onDndSourceOver" ilk="function" signature="onDndSourceOver(source)" doc="topic event processor for /dnd/source/over, called when detected a current source">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which has the mouse over it" />
            </scope>
            <scope name="onDndStart" ilk="function" signature="onDndStart(source,nodes,copy)" doc="topic event processor for /dnd/start, called to initiate the DnD operation">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which provides items" />
              <variable ilk="argument" name="nodes" citdl="Array" doc="the list of transferred items" />
              <variable ilk="argument" name="copy" citdl="Boolean" doc="copy items, if true, move items otherwise" />
            </scope>
            <scope name="itemCreator" ilk="function" signature="itemCreator(nodes)" doc="">
              <variable ilk="argument" name="nodes" />
            </scope>
            <scope name="onDndDrop" ilk="function" signature="onDndDrop(source,nodes,copy)" doc="Topic event processor for /dnd/drop, called to finish the DnD operation.. Updates data store items according to where node was dragged from and dropped to. The tree will then respond to those data store updates and redraw itself.">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which provides items" />
              <variable ilk="argument" name="nodes" citdl="Array" doc="the list of transferred items" />
              <variable ilk="argument" name="copy" citdl="Boolean" doc="copy items, if true, move items otherwise" />
            </scope>
            <scope name="onDndCancel" ilk="function" doc="topic event processor for /dnd/cancel, called to cancel the DnD operation" />
            <scope name="onOverEvent" ilk="function" doc="this function is called once, when mouse is over our container" />
            <scope name="onOutEvent" ilk="function" doc="this function is called once, when mouse is out of our container" />
            <scope name="_markTargetAnchor" ilk="function" signature="_markTargetAnchor(before)" doc="assigns a class to the current target anchor based on &amp;amp;quot;before&amp;amp;quot; status" attributes="private">
              <variable ilk="argument" name="before" citdl="Boolean" doc="insert before, if true, after otherwise" />
              <scope name="before" citdl="Boolean" doc="insert before, if true, after otherwise" />
            </scope>
            <scope name="_unmarkTargetAnchor" ilk="function" doc="removes a class of the current target anchor based on &amp;amp;quot;before&amp;amp;quot; status" attributes="private" />
            <scope name="_markDndStatus" ilk="function" signature="_markDndStatus(copy)" doc="changes source's state based on &amp;amp;quot;copy&amp;amp;quot; status" attributes="private">
              <variable ilk="argument" name="copy" />
            </scope>
            <variable name="targetAnchor" doc="" />
            <variable name="targetState" doc="" />
            <variable name="targetBox" doc="" />
            <variable name="mouseDown" doc="" />
            <variable name="mouseButton" doc="" />
            <variable name="_lastX" attributes="private" doc="" />
            <variable name="_lastY" attributes="private" doc="" />
            <variable name="current" doc="" />
            <variable name="isDragging" doc="" />
            <variable name="containerState" doc="" />
            <variable name="before" doc="" />
            <variable name="sourceState" doc="" />
            <variable name="topics" doc="" />
          </scope>
          <scope name="dndTarget" ilk="function" doc="a constructor of the Target --- see the Source constructor for details" signature="dndTarget(node,params)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="params" />
            <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <variable name="isSource" doc="" />
          </scope>
          <variable name="model" citdl="Object" doc="" />
        </variable>
        <variable name="dijit-all" citdl="Object" doc="" />
        <variable name="dijit" citdl="Object" doc="A roll-up for common dijit methods" />
        <variable name="form" citdl="Object" doc="Form and input related widgets">
          <scope name="CheckBox" doc="Same as an HTML checkbox, but with fancy styling.">
            <scope name="templatePath" doc="" />
            <scope name="baseClass" doc="" />
            <variable name="value" citdl="String" doc="As an initialization parameter, equivalent to value field on normal checkbox (if checked, the value is passed as the value when form is submitted).  However, attr('value') will return either the string or false depending on whether or not the checkbox is checked.  attr('value', string) will check the checkbox and change the value to the specified string  attr('value', boolean) will change the checked state." />
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(newValue)" doc="Handler for value= attribute to constructor, and also calls to attr('value', val)." attributes="private">
              <variable ilk="argument" name="newValue" citdl="String or Boolean" />
            </scope>
            <scope name="_getValueAttr" ilk="function" doc="Hook so attr('value') works." attributes="private" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="_fillContent" ilk="function" signature="_fillContent(source)" attributes="private" doc="">
              <variable ilk="argument" name="source" citdl="DomNode" />
            </scope>
            <scope name="reset" ilk="function" doc="" />
            <scope name="_onFocus" ilk="function" attributes="private" doc="" />
            <scope name="_onBlur" ilk="function" attributes="private" doc="" />
            <variable name="_hasBeenBlurred" attributes="private" doc="" />
          </scope>
          <scope name="RadioButton" doc="Same as an HTML radio, but with fancy styling.">
            <scope name="baseClass" doc="" />
            <scope name="_setCheckedAttr" ilk="function" signature="_setCheckedAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Boolean" />
            </scope>
            <scope name="_clicked" ilk="function" signature="_clicked(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
          </scope>
          <scope name="ComboBoxMixin" ilk="function" doc="Implements the base functionality for ComboBox/FilteringSelect">
            <scope name="item" doc="" />
            <scope name="pageSize" citdl="Integer" doc="Argument to data provider. Specifies number of search results per page (before hitting &amp;amp;quot;next&amp;amp;quot; button)" />
            <variable name="store" citdl="Object" doc="Reference to data provider object used by this ComboBox" />
            <variable name="fetchProperties" citdl="Object" doc="Mixin to the dojo.data store's fetch. For example, to set the sort order of the ComboBox menu, pass: {sort:{attribute:&amp;amp;quot;name&amp;amp;quot;,descending:true}}" />
          </scope>
          <scope name="_ComboBoxMenu" ilk="function" doc="Focus-less div based menu for internal use in ComboBox" attributes="private">
            <scope name="templateString" doc="" />
            <variable name="_messages" attributes="private" doc="" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Object" />
            </scope>
            <scope name="onChange" ilk="function" signature="onChange(value)" doc="">
              <variable ilk="argument" name="value" citdl="Object" />
            </scope>
            <scope name="onPage" ilk="function" signature="onPage(direction)" doc="">
              <variable ilk="argument" name="direction" citdl="Number" />
            </scope>
            <scope name="postCreate" doc="" />
            <scope name="onClose" doc="" />
            <scope name="_createOption" attributes="private" doc="" />
            <scope name="createOptions" ilk="function" signature="createOptions(results,dataObject,labelFunc)" doc="">
              <variable ilk="argument" name="results" />
              <variable ilk="argument" name="dataObject" />
              <variable ilk="argument" name="labelFunc" />
            </scope>
            <scope name="clearResultList" ilk="function" doc="" />
            <scope name="getItems" ilk="function" doc="" />
            <scope name="getListLength" ilk="function" doc="" />
            <scope name="_onMouseDown" ilk="function" signature="_onMouseDown(evt)" attributes="private" doc="">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <scope name="_onMouseUp" ilk="function" signature="_onMouseUp(evt)" attributes="private" doc="">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <scope name="_onMouseOver" ilk="function" signature="_onMouseOver(evt)" attributes="private" doc="">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <scope name="_onMouseOut" attributes="private" doc="" />
            <scope name="_focusOptionNode" attributes="private" doc="" />
            <scope name="_blurOptionNode" attributes="private" doc="" />
            <scope name="_highlightNextOption" attributes="private" doc="" />
            <scope name="highlightFirstOption" doc="" />
            <scope name="highlightLastOption" doc="" />
            <scope name="_highlightPrevOption" attributes="private" doc="" />
            <scope name="_page" attributes="private" doc="" />
            <scope name="pageUp" ilk="function" doc="" />
            <scope name="pageDown" ilk="function" doc="" />
            <scope name="getHighlightedOption" ilk="function" doc="Returns the highlighted option." />
            <scope name="handleKey" ilk="function" signature="handleKey(key)" doc="">
              <variable ilk="argument" name="key" />
            </scope>
            <variable name="value" doc="" />
            <scope name="previousButton" />
            <scope name="nextButton" />
          </scope>
          <scope name="ComboBox" ilk="function" doc="Auto-completing text box, and base class for dijit.form.FilteringSelect.">
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Boolean" />
            </scope>
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value,priorityChange)" doc="Hook so attr('value', value) works." attributes="private">
              <variable ilk="argument" name="value" citdl="String" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" />
            </scope>
          </scope>
          <scope name="_ComboBoxDataStore" ilk="function" doc="Inefficient but small data store specialized for inlined ComboBox data" signature="_ComboBoxDataStore(root)" attributes="private">
            <variable ilk="argument" name="root" citdl="DomNode" />
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="defaultValue" citdl="value" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="" />
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(args,findCallback,errorCallback)" doc="See dojo.data.util.simpleFetch.fetch()" attributes="private">
              <variable ilk="argument" name="args" citdl="Object" />
              <variable ilk="function" name="findCallback" />
              <variable ilk="function" name="errorCallback" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="">
              <variable ilk="argument" name="request" citdl="dojo.data.api.Request || args || null" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(args)" doc="Given the identity of an item, this method returns the item that has that identity through the onItem callback. Refer to dojo.data.api.Identity.fetchItemByIdentity() for more details.">
              <variable ilk="argument" name="args" citdl="Object" />
            </scope>
            <scope name="fetchSelectedItem" ilk="function" doc="Get the option marked as selected, like `&amp;amp;lt;option selected&amp;amp;gt;`. Not part of dojo.data API." />
            <variable name="root" doc="" />
          </scope>
          <scope name="CurrencyTextBox" ilk="function" doc="A validating currency textbox">
            <scope name="__Constraints" ilk="function" attributes="private" doc="" />
            <scope name="currency" citdl="String" doc="the [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like &amp;amp;quot;USD&amp;amp;quot;" />
            <variable name="constraints" citdl="dijit.form.CurrencyTextBox.__Constraints" doc="">
              <variable name="currency" doc="" />
            </variable>
            <scope name="regExpGen" doc="" />
            <scope name="_formatter" attributes="private" doc="" />
            <scope name="parse" ilk="function" signature="parse(value,constraints)" doc="parses the value as a Currency, according to constraints">
              <variable ilk="argument" name="value" citdl="String" doc="" />
              <variable ilk="argument" name="constraints" citdl="dojo.currency.__ParseOptions" doc="" />
            </scope>
            <scope name="postMixInProperties" ilk="function" doc="" />
          </scope>
          <scope name="DateTextBox" ilk="function" doc="A validating, serializable, range-bound date text box with a popup calendar">
            <scope name="baseClass" doc="" />
            <scope name="popupClass" doc="" />
            <scope name="_selector" attributes="private" doc="" />
          </scope>
          <scope name="FilteringSelect" ilk="function" doc="">
            <variable name="_isvalid" attributes="private" doc="" />
            <scope name="required" doc="" />
            <variable name="_lastDisplayedValue" attributes="private" doc="" />
            <scope name="isValid" doc="" />
            <scope name="_callbackSetLabel" ilk="function" signature="_callbackSetLabel(result,dataObject,priorityChange)" doc="Callback function that dynamically sets the label of the ComboBox" attributes="private">
              <variable ilk="argument" name="result" citdl="Array" />
              <variable ilk="argument" name="dataObject" citdl="Object" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" />
            </scope>
            <scope name="_openResultList" ilk="function" signature="_openResultList(results,dataObject)" attributes="private" doc="">
              <variable ilk="argument" name="results" citdl="Object" />
              <variable ilk="argument" name="dataObject" citdl="Object" />
            </scope>
            <scope name="_getValueAttr" ilk="function" doc="Hook for attr('value') to work." attributes="private" />
            <scope name="_getValueField" attributes="private" doc="" />
            <scope name="_setValue" ilk="function" signature="_setValue(value,displayedValue,priorityChange)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="String" />
              <variable ilk="argument" name="displayedValue" citdl="String" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" />
            </scope>
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value,priorityChange)" doc="Hook so attr('value', value) works." attributes="private">
              <variable ilk="argument" name="value" citdl="String" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" />
            </scope>
            <scope name="_setValueFromItem" ilk="function" signature="_setValueFromItem(item,priorityChange)" doc="Set the displayed valued in the input box, based on a selected item." attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" />
            </scope>
            <scope name="labelFunc" ilk="function" signature="labelFunc(item,store)" doc="Event handler called when the label changes return: the label that the ComboBox should display">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="store" citdl="dojo.data.store" />
            </scope>
            <scope name="_doSelect" ilk="function" signature="_doSelect(tgt)" doc="ComboBox's menu callback function" attributes="private">
              <variable ilk="argument" name="tgt" citdl="Event" />
            </scope>
            <scope name="_setDisplayedValueAttr" ilk="function" signature="_setDisplayedValueAttr(label,priorityChange)" doc="Hook so attr('displayedValue', label) works." attributes="private">
              <variable ilk="argument" name="label" citdl="String" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" />
            </scope>
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(attr,value)" attributes="private" doc="">
              <variable ilk="argument" name="attr" citdl="String" />
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="undo" ilk="function" doc="" />
            <scope name="_valueChanged" ilk="function" attributes="private" doc="" />
            <scope name="valueNode">
              <variable name="value" doc="" />
            </scope>
            <variable name="item" doc="" />
            <variable name="_lastQuery" attributes="private" doc="" />
            <scope name="textbox">
              <variable name="value" doc="" />
            </scope>
          </scope>
          <scope name="_FormMixin" ilk="function" doc="Widget corresponding to HTML form tag, for validation and serialization" attributes="private">
            <scope name="reset" ilk="function" doc="" />
            <scope name="validate" ilk="function" doc="returns if the form is valid - same as isValid - but provides a few additional (ui-specific) features. 1 - it will highlight any sub-widgets that are not valid 2 - it will call focus() on the first invalid sub-widget" />
            <scope name="setValues" ilk="function" signature="setValues(val)" doc="">
              <variable ilk="argument" name="val" />
            </scope>
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(obj)" doc="Fill in form values from according to an Object (in the format returned by attr('value'))" returns="like &amp;quot;continue&amp;quot;" attributes="private">
              <variable ilk="argument" name="obj" citdl="object" />
            </scope>
            <scope name="getValues" ilk="function" doc="" />
            <scope name="_getValueAttr" ilk="function" doc="Returns Object representing form values." returns="like &amp;quot;continue&amp;quot;" attributes="private" />
            <scope name="isValid" ilk="function" doc="make sure that every widget that has a validator function returns true" />
            <scope name="onValidStateChange" ilk="function" signature="onValidStateChange(isValid)" doc="stub function to connect to if you want to do something (like disable/enable a submit button) when the valid state changes on the form as a whole.">
              <variable ilk="argument" name="isValid" />
            </scope>
            <scope name="_widgetChange" ilk="function" doc="connected to a widgets onChange function - update our valid state, if needed." attributes="private" />
            <scope name="connectChildren" ilk="function" doc="connects to the onChange function of all children to track valid state changes. You can call this function directly, ie. in the event that you programmatically add a widget to the form *after* the form has been initialized" />
            <scope name="startup" ilk="function" doc="" />
            <variable name="_lastValidState" attributes="private" doc="" />
            <variable name="_changeConnections" attributes="private" doc="" />
          </scope>
          <scope name="Form" ilk="function" doc="Adds conveniences to regular HTML form">
            <scope name="name" doc="" />
            <scope name="action" doc="" />
            <scope name="method" doc="" />
            <variable name="encType" doc="" />
            <scope name="accept-charset" doc="" />
            <scope name="accept" doc="" />
            <scope name="target" doc="" />
            <scope name="templateString" doc="" />
            <scope name="attributeMap" doc="" />
            <scope name="execute" ilk="function" signature="execute(formContents)" doc="Deprecated: use submit()">
              <variable ilk="argument" name="formContents" citdl="Object" />
            </scope>
            <scope name="onExecute" ilk="function" doc="Deprecated: use onSubmit()" />
            <scope name="_setEncTypeAttr" ilk="function" signature="_setEncTypeAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="String" />
            </scope>
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="onReset" ilk="function" signature="onReset(e)" doc="Callback when user resets the form. This method is intended to be over-ridden. When the `reset` method is called programmatically, the return value from `onReset` is used to compute whether or not resetting should proceed" returns="Boolean" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onReset" ilk="function" signature="_onReset(e)" returns="the IE way" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_onSubmit" ilk="function" signature="_onSubmit(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onSubmit" ilk="function" signature="onSubmit(e)" doc="Callback when user submits the form. This method is intended to be over-ridden, but by default it checks and returns the validity of form elements. When the `submit` method is called programmatically, the return value from `onSubmit` is used to compute whether or not submission should proceed" returns="Boolean" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="submit" ilk="function" doc="programmatically submit form if and only if the `onSubmit` returns true" />
            <scope name="domNode">
              <variable name="encoding" doc="" />
            </scope>
            <variable name="returnValue" doc="" />
          </scope>
          <scope name="MultiSelect" ilk="function" doc="Wrapper for a native select multiple=&amp;amp;quot;true&amp;amp;quot; element to interact with dijit.form.Form">
            <scope name="size" doc="" />
            <scope name="templateString" doc="" />
            <scope name="attributeMap" doc="" />
            <scope name="reset" ilk="function" doc="" />
            <scope name="addSelected" ilk="function" signature="addSelected(select)" doc="Move the selected nodes af an passed Select widget instance to this Select widget.">
              <variable ilk="argument" name="select" citdl="dijit.form.MultiSelect" />
            </scope>
            <scope name="getSelected" ilk="function" doc="Access the NodeList of the selected options directly" returns="Boolean" attributes="private" />
            <scope name="_getValueAttr" ilk="function" doc="Hook so attr('value') works." attributes="private" />
            <scope name="_multiValue" attributes="private" doc="" />
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(values)" doc="Hook so attr('value', values) works." attributes="private">
              <variable ilk="argument" name="values" citdl="Array" />
            </scope>
            <scope name="invertSelection" ilk="function" signature="invertSelection(onChange)" doc="Invert the selection">
              <variable ilk="argument" name="onChange" citdl="Boolean" doc="If null, onChange is not fired." />
            </scope>
            <scope name="_onChange" ilk="function" signature="_onChange(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="resize" ilk="function" signature="resize(size)" doc="">
              <variable ilk="argument" name="size" citdl="Object" />
            </scope>
            <scope name="postCreate" ilk="function" doc="" />
            <variable name="_hasBeenBlurred" attributes="private" doc="" />
            <scope name="domNode">
              <variable name="scrollTop" doc="" />
            </scope>
          </scope>
          <scope name="NumberSpinner" ilk="function" doc="extends NumberTextBox to add up/down arrows and pageup/pagedown for incremental change to the value">
            <scope name="required" doc="" />
            <scope name="adjust" ilk="function" signature="adjust(val,delta)" doc="change Number val by the given amount">
              <variable ilk="argument" name="val" citdl="Object" />
              <variable ilk="argument" name="delta" citdl="Number" />
            </scope>
            <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="constraints">
              <variable name="max" doc="" />
              <variable name="min" doc="" />
            </scope>
          </scope>
          <scope name="NumberTextBox" ilk="function" doc="A validating, serializable, range-bound text box.">
            <scope name="__Constraints" ilk="function" attributes="private" doc="" />
          </scope>
          <scope name="NumberTextBoxMixin" ilk="function" doc="A mixin for all number textboxes">
            <scope name="regExpGen" doc="" />
            <scope name="constraints" citdl="dijit.form.NumberTextBox.__Constraints" doc="" />
            <variable name="editOptions" citdl="Object" doc="properties to mix into constraints when the value is being edited">
              <scope name="pattern" doc="" />
            </variable>
            <scope name="_onFocus" ilk="function" attributes="private" doc="" />
            <scope name="_formatter" attributes="private" doc="" />
            <scope name="format" ilk="function" signature="format(value,constraints)" doc="formats the value as a Number, according to constraints">
              <variable ilk="argument" name="value" citdl="Number" />
              <variable ilk="argument" name="constraints" citdl="dojo.number.__FormatOptions" />
            </scope>
            <scope name="parse" ilk="function" signature="parse(value,constraints)" doc="parses the value as a Number, according to constraints">
              <variable ilk="argument" name="value" citdl="String" doc="" />
              <variable ilk="argument" name="constraints" citdl="dojo.number.__ParseOptions" doc="" />
            </scope>
            <scope name="filter" ilk="function" signature="filter(value)" returns="attr('value', null) should fire onChange(NaN)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Number" />
            </scope>
            <scope name="_getValueAttr" ilk="function" doc="Hook so attr('value') works." attributes="private" />
            <scope name="value" doc="" />
          </scope>
          <scope name="SimpleTextarea" ilk="function" doc="A simple textarea that degrades, and responds to minimal LayoutContainer usage, and works with dijit.form.Form. Doesn't automatically size according to input, like Textarea.">
            <scope name="baseClass" doc="" />
            <scope name="attributeMap" doc="" />
            <scope name="rows" citdl="Number" doc="The number of characters per line." />
            <scope name="cols" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="templateString" doc="" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="filter" ilk="function" signature="filter(value)" doc="">
              <variable ilk="argument" name="value" citdl="String" />
            </scope>
            <variable name="value" doc="" />
          </scope>
          <scope name="HorizontalSlider" ilk="function" doc="">
            <scope name="templatePath" doc="" />
            <scope name="value" doc="" />
            <scope name="showButtons" citdl="boolean" doc="Show increment/decrement buttons at the ends of the slider?" />
            <scope name="minimum" citdl="integer" doc="The minimum value allowed." />
            <scope name="maximum" citdl="integer" doc="The maximum allowed value." />
            <scope name="discreteValues" citdl="integer" doc="The maximum allowed values dispersed evenly between minimum and maximum (inclusive)." />
            <scope name="pageIncrement" citdl="integer" doc="The amount of change via pageup/down" />
            <scope name="clickSelect" citdl="boolean" doc="If clicking the progress bar changes the value or not" />
            <scope name="slideDuration" citdl="Number" doc="The time in ms to take to animate the slider handle from 0% to 100%" />
            <scope name="widgetsInTemplate" doc="" />
            <scope name="attributeMap" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="_mousePixelCoord" attributes="private" doc="" />
            <scope name="_pixelCount" attributes="private" doc="" />
            <scope name="_startingPixelCoord" attributes="private" doc="" />
            <scope name="_startingPixelCount" attributes="private" doc="" />
            <scope name="_handleOffsetCoord" attributes="private" doc="" />
            <scope name="_progressPixelSize" attributes="private" doc="" />
            <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onHandleClick" ilk="function" signature="_onHandleClick(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_isReversed" ilk="function" attributes="private" doc="" />
            <scope name="_onBarClick" ilk="function" signature="_onBarClick(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_setPixelValue" ilk="function" signature="_setPixelValue(pixelValue,maxPixels,priorityChange)" attributes="private" doc="">
              <variable ilk="argument" name="pixelValue" citdl="Number" />
              <variable ilk="argument" name="maxPixels" citdl="Number" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean, optional" />
            </scope>
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value,priorityChange)" doc="Hook so attr('value', value) works." attributes="private">
              <variable ilk="argument" name="value" citdl="Number" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean, optional" />
            </scope>
            <scope name="_bumpValue" ilk="function" signature="_bumpValue(signedChange)" attributes="private" doc="">
              <variable ilk="argument" name="signedChange" />
            </scope>
            <scope name="_onClkIncBumper" ilk="function" attributes="private" doc="" />
            <scope name="_onClkDecBumper" ilk="function" attributes="private" doc="" />
            <scope name="decrement" ilk="function" signature="decrement(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="increment" ilk="function" signature="increment(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_mouseWheeled" ilk="function" signature="_mouseWheeled(evt)" doc="Event handler for mousewheel where supported" attributes="private">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <scope name="startup" ilk="function" doc="" />
            <scope name="_typematicCallback" ilk="function" signature="_typematicCallback(count,button,e)" attributes="private" doc="">
              <variable ilk="argument" name="count" citdl="Number" />
              <variable ilk="argument" name="button" citdl="Object" />
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <variable name="_descending" attributes="private" doc="" />
            <scope name="valueNode">
              <variable name="value" doc="" />
            </scope>
            <variable name="_inProgressAnim" attributes="private" doc="" />
            <scope name="incrementButton" />
            <scope name="decrementButton" />
            <variable name="widget" doc="" />
            <variable name="_movable" attributes="private" doc="" />
          </scope>
          <scope name="VerticalSlider" ilk="function" doc="">
            <scope name="templatePath" doc="" />
            <scope name="_mousePixelCoord" attributes="private" doc="" />
            <scope name="_pixelCount" attributes="private" doc="" />
            <scope name="_startingPixelCoord" attributes="private" doc="" />
            <scope name="_startingPixelCount" attributes="private" doc="" />
            <scope name="_handleOffsetCoord" attributes="private" doc="" />
            <scope name="_progressPixelSize" attributes="private" doc="" />
            <scope name="_descending" citdl="boolean" doc="Specifies if the slider values go from high-on-top (true), or low-on-top (false) TODO: expose this in 1.2 - the css progress/remaining bar classes need to be reversed" attributes="private" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_isReversed" ilk="function" attributes="private" doc="" />
            <scope name="_rtlRectify" ilk="function" signature="_rtlRectify(decorationNode)" doc="Rectify children nodes for left/right decoration in rtl case. Simply switch the rule and label child for each decoration node." attributes="private">
              <variable ilk="argument" name="decorationNode" citdl="NodeList" />
            </scope>
          </scope>
          <scope name="_SliderMover" ilk="function" attributes="private" doc="">
            <scope name="onMouseMove" ilk="function" signature="onMouseMove(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="destroy" ilk="function" signature="destroy(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope name="HorizontalRule" ilk="function" doc="">
            <scope name="templateString" doc="" />
            <variable name="count" citdl="Integer" doc="Number of hash marks to generate" />
            <scope name="container" citdl="Node" doc="If this is a child widget, connect it to this parent node" />
            <scope name="ruleStyle" citdl="String" doc="CSS style to apply to individual hash marks" />
            <scope name="_positionPrefix" attributes="private" doc="" />
            <scope name="_positionSuffix" attributes="private" doc="" />
            <scope name="_suffix" attributes="private" doc="" />
            <scope name="_genHTML" ilk="function" signature="_genHTML(pos,ndx)" attributes="private" doc="">
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="ndx" />
            </scope>
            <scope name="_isHorizontal" attributes="private" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="domNode">
              <variable name="innerHTML" doc="" />
            </scope>
          </scope>
          <scope name="VerticalRule" ilk="function" doc="">
            <scope name="templateString" doc="" />
            <scope name="_positionPrefix" attributes="private" doc="" />
            <scope name="_isHorizontal" attributes="private" doc="" />
          </scope>
          <scope name="HorizontalRuleLabels" ilk="function" doc="">
            <scope name="templateString" doc="" />
            <scope name="labelStyle" citdl="String" doc="CSS style to apply to individual text labels" />
            <variable name="labels" citdl="Array" doc="Array of text labels to render - evenly spaced from left-to-right or bottom-to-top" />
            <scope name="numericMargin" citdl="Integer" doc="Number of generated numeric labels that should be rendered as '' on the ends when labels[] are not specified" />
            <scope name="minimum" doc="" />
            <scope name="maximum" doc="" />
            <scope name="constraints" citdl="object" doc="pattern, places, lang, et al (see dojo.number) for generated numeric labels when labels[] are not specified">
              <scope name="pattern" doc="" />
            </scope>
            <scope name="_positionPrefix" attributes="private" doc="" />
            <scope name="_labelPrefix" attributes="private" doc="" />
            <scope name="_suffix" attributes="private" doc="" />
            <scope name="_calcPosition" ilk="function" signature="_calcPosition(pos)" attributes="private" doc="">
              <variable ilk="argument" name="pos" />
            </scope>
            <scope name="_genHTML" ilk="function" signature="_genHTML(pos,ndx)" attributes="private" doc="">
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="ndx" />
            </scope>
            <scope name="getLabels" ilk="function" doc="user replaceable function to return the labels array" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="srcNodeRef">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="count" doc="" />
          </scope>
          <scope name="VerticalRuleLabels" ilk="function" doc="">
            <scope name="templateString" doc="" />
            <scope name="_positionPrefix" attributes="private" doc="" />
            <scope name="_labelPrefix" attributes="private" doc="" />
            <scope name="_calcPosition" ilk="function" signature="_calcPosition(pos)" attributes="private" doc="">
              <variable ilk="argument" name="pos" />
            </scope>
            <scope name="_isHorizontal" attributes="private" doc="" />
          </scope>
          <variable name="Slider" citdl="Object" doc="" />
          <scope name="TextBox" ilk="function" doc="A base class for textbox form inputs">
            <scope name="trim" doc="" />
            <scope name="uppercase" citdl="Boolean" doc="Converts all characters to uppercase if true. Default is false." />
            <scope name="lowercase" citdl="Boolean" doc="Converts all characters to lowercase if true. Default is false." />
            <scope name="propercase" citdl="Boolean" doc="Converts the first character of each word to uppercase if true." />
            <scope name="maxLength" citdl="String" doc="HTML INPUT tag maxLength declaration." />
            <scope name="templatePath" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="attributeMap" doc="" />
            <scope name="_getValueAttr" ilk="function" doc="Hook so attr('value') works as we like." attributes="private" />
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value,priorityChange,formattedValue)" doc="Hook so attr('value', ...) works." attributes="private">
              <variable ilk="argument" name="value" citdl="The" doc="visual element value is also set to a corresponding, but not necessarily the same, value." />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" doc="If true, an onChange event is fired immediately instead of waiting for the next blur event." />
              <variable ilk="argument" name="formattedValue" citdl="String" doc="If specified, used to set the visual element value, otherwise a computed visual value is used." />
            </scope>
            <scope name="displayedValue" citdl="String" doc="For subclasses like ComboBox where the displayed value (ex: Kentucky) and the serialized value (ex: KY) are different, this represents the displayed value.  Setting 'displayedValue' through attr('displayedValue', ...) updates 'value', and vice-versa. Othewise 'value' is updated from 'displayedValue' periodically, like onBlur etc.  TODO: move declaration to MappedTextBox? Problem is that ComboBox references displayedValue, for benefit of FilteringSelect." />
            <scope name="getDisplayedValue" ilk="function" doc="" />
            <scope name="_getDisplayedValueAttr" ilk="function" doc="Hook so attr('displayedValue') works." attributes="private" />
            <scope name="setDisplayedValue" ilk="function" signature="setDisplayedValue(value)" doc="">
              <variable ilk="argument" name="value" citdl="String" />
            </scope>
            <scope name="_setDisplayedValueAttr" ilk="function" signature="_setDisplayedValueAttr(value)" doc="Hook so attr('displayedValue', ...) works." attributes="private">
              <variable ilk="argument" name="value" citdl="String" />
            </scope>
            <scope name="format" ilk="function" signature="format(value,constraints)" doc="Replacable function to convert a value to a properly formatted string">
              <variable ilk="argument" name="value" citdl="String" />
              <variable ilk="argument" name="constraints" citdl="Object" />
            </scope>
            <scope name="parse" ilk="function" signature="parse(value,constraints)" doc="Replacable function to convert a formatted string to a value">
              <variable ilk="argument" name="value" citdl="String" />
              <variable ilk="argument" name="constraints" citdl="Object" />
            </scope>
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="filter" ilk="function" signature="filter(val)" doc="Auto-corrections (such as trimming) that are applied to textbox value on blur or form submit">
              <variable ilk="argument" name="val" />
            </scope>
            <scope name="_setBlurValue" ilk="function" attributes="private" doc="" />
            <scope name="_onBlur" ilk="function" attributes="private" doc="" />
            <scope name="textbox">
              <variable name="value" doc="" />
            </scope>
          </scope>
          <scope name="Textarea" ilk="function" doc="A resizing textarea widget">
            <scope name="attributeMap" doc="" />
            <scope name="templateString" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Boolean" />
            </scope>
            <scope name="_setReadOnlyAttr" ilk="function" signature="_setReadOnlyAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Boolean" />
            </scope>
            <scope name="_adjustWritable" ilk="function" doc="set whether user can write into textbox, based on this.disabled and this.readOnly" attributes="private" />
            <scope name="focus" ilk="function" doc="Received focus, needed for the InlineEditBox widget" />
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value,priorityChange)" doc="Hook so attr('value', ...) works." attributes="private">
              <variable ilk="argument" name="value" citdl="String" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean, optional" />
            </scope>
            <scope name="_getValueAttr" ilk="function" doc="Hook so attr('value') works." attributes="private" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_focusedEventNode" ilk="function" signature="_focusedEventNode(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_blurredEventNode" ilk="function" signature="_blurredEventNode(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_onIframeBlur" ilk="function" attributes="private" doc="" />
            <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_changing" ilk="function" signature="_changing(e)" doc="event handler for when a change is imminent" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_changed" ilk="function" signature="_changed(e,priorityChange)" doc="event handler for when a change has already happened" attributes="private">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="priorityChange" />
            </scope>
            <scope name="formValueNode">
              <variable name="disabled" doc="" />
            </scope>
            <variable name="readOnly" doc="" />
            <scope name="editNode">
              <variable name="contentEditable" doc="" />
            </scope>
            <scope name="iframe">
              <scope name="contentDocument">
                <variable name="designMode" doc="" />
                <variable name="title" doc="" />
              </scope>
              <variable name="postCreate" doc="" />
            </scope>
            <variable name="value" doc="" />
            <variable name="lastHeight" doc="" />
            <scope name="srcNodeRef">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="_iframeEditTitle" attributes="private" doc="" />
            <variable name="_iframeFocusTitle" attributes="private" doc="" />
            <variable name="focusNode" doc="" />
            <scope name="domNode" />
            <variable name="eventNode" doc="" />
            <variable name="_focused" attributes="private" doc="" />
          </scope>
          <scope name="TimeTextBox" ilk="function" doc="A validating, serializable, range-bound time text box with a popup time picker">
            <scope name="__Constraints" ilk="function" attributes="private" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="popupClass" doc="" />
            <scope name="_selector" attributes="private" doc="" />
            <scope name="constraints" citdl="dijit.form.TimeTextBox.__Constraints" doc="" />
          </scope>
          <scope name="ValidationTextBox" ilk="function" doc="A TextBox subclass with the ability to validate content of various types and provide user feedback.">
            <scope name="templatePath" doc="" />
            <scope name="baseClass" doc="" />
            <variable name="required" citdl="default" doc="values for new subclass properties Boolean Can be true or false, default is false." />
            <scope name="promptMessage" citdl="String" doc="Hint string" />
            <variable name="invalidMessage" citdl="String" doc="The message to display if value is invalid." />
            <variable name="constraints" citdl="dijit.form.ValidationTextBox.__Constraints" doc="user-defined object needed to pass parameters to the validator functions">
              <variable name="locale" doc="" />
            </variable>
            <variable name="regExp" citdl="String" doc="regular expression string used to validate the input Do not specify both regExp and regExpGen" />
            <scope name="regExpGen" ilk="function" signature="regExpGen(constraints)" doc="user replaceable function used to generate regExp when dependent on constraints Do not specify both regExp and regExpGen">
              <variable ilk="argument" name="constraints" citdl="dijit.form.ValidationTextBox.__Constraints" />
            </scope>
            <variable name="state" citdl="String" doc="Shows current state (ie, validation result) of input (Normal, Warning, or Error)" />
            <scope name="tooltipPosition" citdl="String[]" doc="See description of dijit.Tooltip.defaultPosition for details on this parameter." />
            <scope name="_setValueAttr" ilk="function" doc="Hook so attr('value', ...) works." attributes="private" />
            <scope name="validator" ilk="function" signature="validator(value,constraints)" doc="user replaceable function used to validate the text input against the regular expression.">
              <variable ilk="argument" name="value" citdl="anything" />
              <variable ilk="argument" name="constraints" citdl="dijit.form.ValidationTextBox.__Constraints" />
            </scope>
            <scope name="_isValidSubset" ilk="function" doc="Returns true if the value is either already valid or could be made valid by appending characters." attributes="private" />
            <scope name="isValid" ilk="function" signature="isValid(isFocused)" doc="Need to over-ride with your own validation code in subclasses">
              <variable ilk="argument" name="isFocused" citdl="Boolean" />
            </scope>
            <scope name="_isEmpty" ilk="function" signature="_isEmpty(value)" doc="Checks for whitespace" returns="Boolean" attributes="private">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="getErrorMessage" ilk="function" signature="getErrorMessage(isFocused)" doc="return an error message to show if appropriate" returns="String" attributes="private">
              <variable ilk="argument" name="isFocused" citdl="Boolean" />
            </scope>
            <scope name="getPromptMessage" ilk="function" signature="getPromptMessage(isFocused)" doc="return a hint to show if appropriate" returns="String" attributes="private">
              <variable ilk="argument" name="isFocused" citdl="Boolean" />
            </scope>
            <variable name="_maskValidSubsetError" attributes="private" doc="" />
            <scope name="validate" ilk="function" signature="validate(isFocused)" doc="Called by oninit, onblur, and onkeypress.">
              <variable ilk="argument" name="isFocused" citdl="Boolean" />
            </scope>
            <variable name="_message" attributes="private" doc="" />
            <scope name="displayMessage" ilk="function" signature="displayMessage(message)" doc="User overridable method to display validation errors/hints. By default uses a tooltip.">
              <variable ilk="argument" name="message" citdl="String" />
            </scope>
            <scope name="_refreshState" ilk="function" attributes="private" doc="" />
            <scope name="_update" ilk="function" signature="_update(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Boolean" />
            </scope>
            <scope name="_setRequiredAttr" ilk="function" signature="_setRequiredAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Boolean" />
            </scope>
            <scope name="postCreate" ilk="function" doc="" />
            <variable name="messages" doc="" />
            <variable name="_partialre" attributes="private" doc="" />
            <scope name="valueNode">
              <variable name="disabled" doc="" />
            </scope>
            <scope name="focusNode" />
            <scope name="__Constraints" ilk="function" attributes="private" doc="">
              <variable name="locale" citdl="String" doc="locale used for validation, picks up value from this widget's lang attribute" />
              <variable name="_flags_" citdl="anything" doc="various flags passed to regExpGen function" attributes="private" />
            </scope>
          </scope>
          <scope name="MappedTextBox" ilk="function" doc="A dijit.form.ValidationTextBox subclass which provides a visible formatted display and a serializable value in a hidden input field which is actually sent to the server. The visible display may be locale-dependent and interactive. The value sent to the server is stored in a hidden input field which uses the `name` attribute declared by the original widget. That value sent to the serveris defined by the dijit.form.MappedTextBox.serialize method and is typically locale-neutral.">
            <scope name="serialize" ilk="function" signature="serialize(val,options)" doc="user replaceable function used to convert the attr('value') result to a String" returns="String" attributes="private">
              <variable ilk="argument" name="val" citdl="anything" />
              <variable ilk="argument" name="options" citdl="Object" />
            </scope>
            <scope name="toString" ilk="function" doc="display the widget as a printable string using the widget's value  TODO: seems like the filter() call here is unnecessary as attr('value') should do that" returns="String" attributes="private" />
            <scope name="validate" ilk="function" doc="" />
            <scope name="buildRendering" ilk="function" doc="" />
            <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Boolean" />
            </scope>
            <variable name="valueNode" doc="">
              <variable name="value" doc="" />
              <variable name="name" doc="" />
            </variable>
            <scope name="textbox">
              <variable name="name" doc="" />
            </scope>
          </scope>
          <scope name="RangeBoundTextBox" ilk="function" doc="A dijit.form.MappedTextBox subclass which defines a range of valid values">
            <scope name="constraints" citdl="dijit.form.RangeBoundTextBox.__Constraints" doc="" />
            <variable name="rangeMessage" citdl="String" doc="The message to display if value is out-of-range" />
            <scope name="rangeCheck" ilk="function" signature="rangeCheck(primitive,constraints)" doc="user replaceable function used to validate the range of the numeric input value" returns="Boolean" attributes="private">
              <variable ilk="argument" name="primitive" citdl="Number" />
              <variable ilk="argument" name="constraints" citdl="dijit.form.RangeBoundTextBox.__Constraints" />
            </scope>
            <scope name="isInRange" ilk="function" signature="isInRange(isFocused)" doc="Need to over-ride with your own validation code in subclasses">
              <variable ilk="argument" name="isFocused" citdl="Boolean" />
            </scope>
            <scope name="_isDefinitelyOutOfRange" ilk="function" doc="Returns true if the value is out of range and will remain out of range even if the user types more characters" attributes="private" />
            <scope name="_isValidSubset" ilk="function" attributes="private" doc="" />
            <scope name="isValid" ilk="function" signature="isValid(isFocused)" doc="">
              <variable ilk="argument" name="isFocused" citdl="Boolean" />
            </scope>
            <scope name="getErrorMessage" ilk="function" signature="getErrorMessage(isFocused)" returns="String" attributes="private" doc="">
              <variable ilk="argument" name="isFocused" citdl="Boolean" />
            </scope>
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value,priorityChange)" doc="Hook so attr('value', ...) works." attributes="private">
              <variable ilk="argument" name="value" citdl="Number" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" />
            </scope>
            <variable name="messages" doc="" />
            <scope name="__Constraints" ilk="function" attributes="private" doc="">
              <variable name="min" citdl="Number" doc="Minimum signed value. Default is -Infinity" />
              <variable name="max" citdl="Number" doc="Maximum signed value. Default is +Infinity" />
            </scope>
          </scope>
          <scope name="_DateTimeTextBox" ilk="function" doc="A validating, serializable, range-bound date or time text box." attributes="private">
            <scope name="__Constraints" ilk="function" attributes="private" doc="" />
            <scope name="constraints" citdl="dijit.form._DateTimeTextBox.__Constraints" doc="" />
            <scope name="regExpGen" doc="" />
            <scope name="compare" doc="" />
            <scope name="format" ilk="function" signature="format(value,constraints)" doc="formats the value as a Date, according to constraints">
              <variable ilk="argument" name="value" citdl="Date" />
              <variable ilk="argument" name="constraints" citdl="dojo.date.locale.__FormatOptions" />
            </scope>
            <scope name="parse" ilk="function" signature="parse(value,constraints)" doc="parses the value as a Date, according to constraints">
              <variable ilk="argument" name="value" citdl="String" />
              <variable ilk="argument" name="constraints" citdl="dojo.date.locale.__FormatOptions" />
            </scope>
            <scope name="serialize" doc="" />
            <variable name="value" citdl="Date" doc="The value of this widget as a JavaScript Date object. Use attr(&amp;amp;quot;value&amp;amp;quot;) / attr(&amp;amp;quot;value&amp;amp;quot;, val) to manipulate. When passed to the parser in markup, must be specified according to `dojo.date.stamp.fromISOString`" />
            <scope name="popupClass" citdl="String" doc="Name of the popup widget class used to select a date/time" />
            <scope name="_selector" attributes="private" doc="" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="_onFocus" ilk="function" signature="_onFocus(evt)" doc="open the TimePicker popup" attributes="private">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value,priorityChange,formattedValue)" doc="Sets the date on this textbox. Note that `value` must be a Javascript Date object." attributes="private">
              <variable ilk="argument" name="value" citdl="Date" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" />
              <variable ilk="argument" name="formattedValue" citdl="String" />
            </scope>
            <scope name="_open" ilk="function" doc="opens the TimePicker, and sets the onValueSelected value" attributes="private" />
            <scope name="_close" ilk="function" attributes="private" doc="" />
            <scope name="_onBlur" ilk="function" doc="called magically when focus has shifted away from this widget and it's dropdown" attributes="private" />
            <scope name="_getDisplayedValueAttr" ilk="function" attributes="private" doc="" />
            <scope name="_setDisplayedValueAttr" ilk="function" signature="_setDisplayedValueAttr(value,priorityChange)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="String" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" />
            </scope>
            <scope name="destroy" ilk="function" doc="" />
            <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <variable name="_picker" attributes="private" doc="" />
            <variable name="_opened" attributes="private" doc="" />
            <variable name="_tabbingAway" attributes="private" doc="" />
          </scope>
          <scope name="_FormWidget" doc="_FormWidget's correspond to native HTML elements such as &amp;amp;lt;checkbox&amp;amp;gt; or &amp;amp;lt;button&amp;amp;gt;." attributes="private">
            <scope name="baseClass" citdl="String" doc="Root CSS class of the widget (ex: dijitTextBox), used to add CSS classes of widget (ex: &amp;amp;quot;dijitTextBox dijitTextBoxInvalid dijitTextBoxFocused dijitTextBoxInvalidFocused&amp;amp;quot;) See _setStateClass()." />
            <scope name="name" citdl="String" doc="Name used when submitting form; same as &amp;amp;quot;name&amp;amp;quot; attribute or plain HTML elements" />
            <scope name="alt" citdl="String" doc="Corresponds to the native HTML &amp;amp;lt;input&amp;amp;gt; element's attribute." />
            <scope name="value" citdl="String" doc="Corresponds to the native HTML &amp;amp;lt;input&amp;amp;gt; element's attribute." />
            <scope name="tabIndex" citdl="Integer" doc="Order fields are traversed when user hits the tab key" />
            <variable name="disabled" citdl="Boolean" doc="Should this widget respond to user input? In markup, this is specified as &amp;amp;quot;disabled='disabled'&amp;amp;quot;, or just &amp;amp;quot;disabled&amp;amp;quot;." />
            <scope name="readOnly" citdl="Boolean" doc="Should this widget respond to user input? In markup, this is specified as &amp;amp;quot;readOnly&amp;amp;quot;. Similar to disabled except readOnly form values are submitted" />
            <scope name="intermediateChanges" citdl="Boolean" doc="Fires onChange for each value change or only on demand" />
            <scope name="attributeMap" doc="" />
            <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Boolean" />
            </scope>
            <scope name="setDisabled" ilk="function" signature="setDisabled(disabled)" doc="Set disabled state of widget (Deprecated).">
              <variable ilk="argument" name="disabled" citdl="Boolean" />
            </scope>
            <scope name="_onFocus" ilk="function" signature="_onFocus(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_onMouse" ilk="function" signature="_onMouse(event)" doc="Sets _hovering, _active, and stateModifier properties depending on mouse state, then calls setStateClass() to set appropriate CSS classes for this.domNode.  To get a different CSS class for hover, send onmouseover and onmouseout events to this method. To get a different CSS class while mouse button is depressed, send onmousedown to this method." attributes="private">
              <variable ilk="argument" name="event" citdl="Event" />
            </scope>
            <scope name="isFocusable" ilk="function" doc="" />
            <scope name="focus" ilk="function" doc="" />
            <scope name="_setStateClass" ilk="function" attributes="private" doc="" />
            <scope name="compare" ilk="function" signature="compare(val1,val2)" doc="compare 2 values">
              <variable ilk="argument" name="val1" citdl="anything" />
              <variable ilk="argument" name="val2" citdl="anything" />
            </scope>
            <scope name="onChange" ilk="function" signature="onChange(newValue)" doc="callback when value is changed">
              <variable ilk="argument" name="newValue" />
            </scope>
            <variable name="_onChangeActive" attributes="private" doc="" />
            <scope name="_handleOnChange" ilk="function" signature="_handleOnChange(newValue,priorityChange)" doc="set the value of the widget." attributes="private">
              <variable ilk="argument" name="newValue" citdl="anything" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean, optional" />
            </scope>
            <scope name="create" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <scope name="setValue" ilk="function" signature="setValue(value)" doc="">
              <variable ilk="argument" name="value" citdl="String" />
            </scope>
            <scope name="getValue" ilk="function" doc="" />
            <scope name="_layoutHack" ilk="function" doc="work around table sizing bugs on FF2 by forcing redraw" attributes="private" />
            <variable name="_hovering" attributes="private" doc="" />
            <variable name="_active" attributes="private" doc="" />
            <variable name="stateModifier" doc="" />
            <variable name="_mouseDown" attributes="private" doc="" />
            <variable name="_stateClasses" attributes="private" doc="" />
            <variable name="_lastValue" attributes="private" doc="" />
            <variable name="_lastValueReported" attributes="private" doc="" />
            <variable name="_resetValue" attributes="private" doc="" />
            <variable name="_layoutHackHandle" attributes="private" doc="" />
          </scope>
          <scope name="_FormValueWidget" ilk="function" attributes="private" doc="">
            <scope name="attributeMap" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(newValue,priorityChange)" doc="Hook so attr('value', value) works." attributes="private">
              <variable ilk="argument" name="newValue" citdl="anything" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean, optional" />
            </scope>
            <scope name="_getValueAttr" ilk="function" signature="_getValueAttr(value)" doc="Hook so attr('value') works." attributes="private">
              <variable ilk="argument" name="value" citdl="String" />
            </scope>
            <scope name="undo" ilk="function" doc="restore the value to the last value passed to onChange" />
            <scope name="reset" ilk="function" doc="" />
            <scope name="_valueChanged" ilk="function" attributes="private" doc="" />
            <scope name="_onKeyDown" ilk="function" signature="_onKeyDown(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="_resetValue" attributes="private" doc="" />
            <variable name="value" doc="" />
            <variable name="_hasBeenBlurred" attributes="private" doc="" />
          </scope>
          <scope name="_Spinner" ilk="function" attributes="private" doc="">
            <scope name="defaultTimeout" doc="" />
            <scope name="timeoutChangeRate" citdl="Number" doc="fraction of time used to change the typematic timer between events 1.0 means that each typematic event fires at defaultTimeout intervals &amp;amp;lt; 1.0 means that each typematic event fires at an increasing faster rate" />
            <scope name="smallDelta" citdl="Number" doc="adjust the value by this much when spinning using the arrow keys/buttons" />
            <scope name="largeDelta" citdl="Number" doc="adjust the value by this much when spinning using the PgUp/Dn keys" />
            <scope name="templatePath" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="adjust" ilk="function" signature="adjust(val,delta)" doc="user replaceable function used to adjust a primitive value(Number/Date/...) by the delta amount specified the val is adjusted in a way that makes sense to the object type">
              <variable ilk="argument" name="val" citdl="Object" />
              <variable ilk="argument" name="delta" citdl="Number" />
            </scope>
            <scope name="_arrowState" ilk="function" signature="_arrowState(node,pressed)" attributes="private" doc="">
              <variable ilk="argument" name="node" citdl="Node" />
              <variable ilk="argument" name="pressed" citdl="Boolean" />
            </scope>
            <scope name="_arrowPressed" ilk="function" signature="_arrowPressed(nodePressed,direction,increment)" attributes="private" doc="">
              <variable ilk="argument" name="nodePressed" citdl="Node" />
              <variable ilk="argument" name="direction" citdl="Number" />
              <variable ilk="argument" name="increment" citdl="Number" />
            </scope>
            <scope name="_arrowReleased" ilk="function" signature="_arrowReleased(node)" attributes="private" doc="">
              <variable ilk="argument" name="node" citdl="Node" />
            </scope>
            <scope name="_typematicCallback" ilk="function" signature="_typematicCallback(count,node,evt)" attributes="private" doc="">
              <variable ilk="argument" name="count" citdl="Number" />
              <variable ilk="argument" name="node" citdl="DOMNode" />
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <variable name="_wheelTimer" attributes="private" doc="" />
            <scope name="_mouseWheeled" ilk="function" signature="_mouseWheeled(evt)" doc="Mouse wheel listener where supported" attributes="private">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <scope name="postCreate" ilk="function" doc="" />
            <variable name="_active" attributes="private" doc="" />
            <variable name="stateModifier" doc="" />
            <scope name="upArrowNode" />
            <scope name="downArrowNode" />
            <scope name="focusNode">
              <scope name="parentNode" />
            </scope>
          </scope>
        </variable>
        <scope ilk="function" name="selectInputText" signature="selectInputText(element,start,stop)" doc="Select text in the input element argument, from start (default 0), to stop (default end).">
          <variable citdl="DomNode" name="element" ilk="argument" />
          <variable citdl="Number" name="start" ilk="argument" />
          <variable citdl="Number" name="stop" ilk="argument" />
        </scope>
        <variable name="layout" citdl="Object" doc="Layout related widgets">
          <scope name="BorderContainer" ilk="function" doc="Provides layout in 5 regions, a center and borders along its 4 sides.">
            <variable name="design" doc="" />
            <scope name="gutters" citdl="Boolean" doc="Give each pane a border and margin. Margin determined by domNode.paddingLeft. When false, only resizable panes have a gutter (i.e. draggable splitter) for resizing." />
            <scope name="liveSplitters" citdl="Boolean" doc="specifies whether splitters resize as you drag (true) or only upon mouseup (false)" />
            <scope name="persist" citdl="Boolean" doc="Save splitter positions in a cookie." />
            <scope name="baseClass" doc="" />
            <scope name="_splitterClass" citdl="String" doc="Optional hook to override the default Splitter widget used by BorderContainer" attributes="private" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_setupChild" ilk="function" signature="_setupChild(child)" attributes="private" doc="">
              <variable ilk="argument" name="child" citdl="Widget" />
            </scope>
            <scope name="_computeSplitterThickness" ilk="function" signature="_computeSplitterThickness(region)" attributes="private" doc="">
              <variable ilk="argument" name="region" />
            </scope>
            <scope name="layout" ilk="function" doc="" />
            <scope name="addChild" ilk="function" signature="addChild(child,insertIndex)" doc="">
              <variable ilk="argument" name="child" citdl="Widget" />
              <variable ilk="argument" name="insertIndex" citdl="Integer" />
            </scope>
            <scope name="removeChild" ilk="function" signature="removeChild(child)" doc="">
              <variable ilk="argument" name="child" citdl="Widget" />
            </scope>
            <scope name="getChildren" ilk="function" doc="" />
            <scope name="getSplitter" ilk="function" signature="getSplitter(region)" doc="returns the widget responsible for rendering the splitter associated with region">
              <variable ilk="argument" name="region" citdl="String" />
            </scope>
            <scope name="resize" ilk="function" signature="resize(newSize,currentSize)" doc="">
              <variable ilk="argument" name="newSize" />
              <variable ilk="argument" name="currentSize" />
            </scope>
            <scope name="_layoutChildren" ilk="function" signature="_layoutChildren(changedRegion)" attributes="private" doc="">
              <variable ilk="argument" name="changedRegion" citdl="String" />
            </scope>
            <scope name="destroy" ilk="function" doc="" />
            <variable name="_splitters" attributes="private" doc="" />
            <variable name="_splitterThickness" attributes="private" doc="" />
            <variable name="cs" doc="" />
            <variable name="pe" doc="">
              <variable name="r" doc="" />
              <variable name="b" doc="" />
            </variable>
          </scope>
          <scope name="_Splitter" ilk="function" doc="A draggable spacer between two items in a BorderContainer" attributes="private">
            <scope name="container" doc="" />
            <scope name="child" doc="">
              <scope name="domNode">
                <variable name="_recalc" attributes="private" doc="" />
              </scope>
            </scope>
            <scope name="region" doc="" />
            <scope name="live" citdl="Boolean" doc="If true, the child's size changes and the child widget is redrawn as you drag the splitter; otherwise, the size doesn't change until you drop the splitter (by mouse-up)" />
            <scope name="templateString" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_computeMaxSize" ilk="function" attributes="private" doc="" />
            <scope name="_startDrag" ilk="function" signature="_startDrag(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
              <variable name="_drag" ilk="function" signature="_drag(e,forceResize)" attributes="private" doc="">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="forceResize" />
              </variable>
            </scope>
            <scope name="_stopDrag" ilk="function" signature="_stopDrag(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_cleanupHandlers" ilk="function" attributes="private" doc="" />
            <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="destroy" ilk="function" doc="" />
            <variable name="horizontal" doc="" />
            <variable name="_factor" attributes="private" doc="" />
            <variable name="_minSize" attributes="private" doc="" />
            <variable name="_cookieName" attributes="private" doc="" />
            <variable name="_maxSize" attributes="private" doc="" />
            <variable name="cover" doc="" />
            <variable name="_resize" attributes="private" doc="" />
            <variable name="fake" doc="" />
            <variable name="_handlers" attributes="private" doc="" />
            <variable name="_drag" attributes="private" doc="" />
            <scope name="oppNode">
              <variable name="_recalc" attributes="private" doc="" />
            </scope>
          </scope>
          <scope name="_Gutter" ilk="function" doc="Just a spacer div to separate side pane from center pane. Basically a trick to lookup the gutter/splitter width from the theme." attributes="private">
            <scope name="templateString" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <variable name="horizontal" doc="" />
          </scope>
          <scope name="ContentPane" ilk="function" doc="A widget that acts as a Container for other widgets, and includes a ajax interface">
            <variable name="href" doc="" />
            <scope name="content" citdl="String" doc="The innerHTML of the ContentPane. Note that the initialization parameter / argument to attr(&amp;amp;quot;content&amp;amp;quot;, ...) can be a String, DomNode, Nodelist, or widget." />
            <scope name="extractContent" citdl="Boolean" doc="Extract visible content from inside of &amp;amp;lt;body&amp;amp;gt; .... &amp;amp;lt;/body&amp;amp;gt;" />
            <scope name="parseOnLoad" citdl="Boolean" doc="parse content and create the widgets, if any" />
            <scope name="preventCache" citdl="Boolean" doc="Cache content retreived externally" />
            <scope name="preload" citdl="Boolean" doc="Force load of data even if pane is hidden." />
            <scope name="refreshOnShow" citdl="Boolean" doc="Refresh (re-download) content when pane goes from hidden to shown" />
            <variable name="loadingMessage" citdl="String" doc="Message that shows while downloading" />
            <variable name="errorMessage" citdl="String" doc="Message that shows if an error occurs" />
            <variable name="isLoaded" citdl="Boolean" doc="Tells loading status see onLoad|onUnload for event hooks" />
            <scope name="baseClass" doc="" />
            <scope name="doLayout" citdl="Boolean" doc="- false - don't adjust size of children - true - if there is a single visible child widget, set it's size to however big the ContentPane is" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="buildRendering" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_checkIfSingleChild" ilk="function" doc="Test if we have exactly one visible widget as a child, and if so assume that we are a container for that widget, and should propogate startup() and resize() calls to it. Skips over things like data stores since they aren't visible." attributes="private" />
            <scope name="refresh" ilk="function" doc="Force a refresh (re-download) of content, be sure to turn off cache" />
            <scope name="setHref" ilk="function" signature="setHref(href)" doc="">
              <variable ilk="argument" name="href" citdl="String|Uri" />
            </scope>
            <scope name="_setHrefAttr" ilk="function" signature="_setHrefAttr(href)" doc="Hook so attr(&amp;amp;quot;href&amp;amp;quot;, ...) works." attributes="private">
              <variable ilk="argument" name="href" citdl="String|Uri" doc="url to the page you want to get, must be within the same domain as your mainpage" />
              <scope name="href" citdl="url" doc="to the page you want to get, must be within the same domain as your mainpage" />
            </scope>
            <scope name="setContent" ilk="function" signature="setContent(data)" doc="">
              <variable ilk="argument" name="data" citdl="String|DomNode|Nodelist" />
            </scope>
            <scope name="_setContentAttr" ilk="function" signature="_setContentAttr(data)" doc="Hook to make attr(&amp;amp;quot;content&amp;amp;quot;, ...) work. Replaces old content with data content, include style classes from old content" attributes="private">
              <variable ilk="argument" name="data" citdl="String|DomNode|Nodelist" doc="the new Content may be String, DomNode or NodeList  if data is a NodeList (or an array of nodes) nodes are copied so you can import nodes from another document implicitly" />
            </scope>
            <scope name="_getContentAttr" ilk="function" doc="hook to make attr(&amp;amp;quot;content&amp;amp;quot;) work" attributes="private" />
            <scope name="cancel" ilk="function" doc="Cancels a inflight download of content" />
            <scope name="destroyRecursive" ilk="function" signature="destroyRecursive(preserveDom)" doc="Destroy the ContentPane and it's contents">
              <variable ilk="argument" name="preserveDom" citdl="Boolean" />
            </scope>
            <scope name="resize" ilk="function" signature="resize(size)" doc="">
              <variable ilk="argument" name="size" />
            </scope>
            <scope name="_prepareLoad" ilk="function" signature="_prepareLoad(forceLoad)" attributes="private" doc="">
              <variable ilk="argument" name="forceLoad" />
            </scope>
            <scope name="_isShown" ilk="function" doc="returns true if the content is currently shown" returns="for TitlePane, etc." attributes="private" />
            <scope name="_loadCheck" ilk="function" signature="_loadCheck(forceLoad)" attributes="private" doc="">
              <variable ilk="argument" name="forceLoad" citdl="Boolean" />
            </scope>
            <scope name="_downloadExternalContent" ilk="function" attributes="private" doc="" />
            <scope name="_onLoadHandler" ilk="function" doc="This is called whenever new content is being loaded" attributes="private" />
            <scope name="_onUnloadHandler" ilk="function" doc="This is called whenever the content is being unloaded" attributes="private" />
            <scope name="destroyDescendants" ilk="function" doc="Destroy all the widgets inside the ContentPane and empty containerNode" />
            <scope name="_setContent" ilk="function" signature="_setContent(cont)" doc="Insert the content into the container node" attributes="private">
              <variable ilk="argument" name="cont" />
            </scope>
            <scope name="_onError" ilk="function" signature="_onError(type,err,consoleText)" attributes="private" doc="">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="err" />
              <variable ilk="argument" name="consoleText" />
            </scope>
            <scope name="_createSubWidgets" ilk="function" doc="scan my contents and create subwidgets" attributes="private" />
            <scope name="onLoad" ilk="function" signature="onLoad(e)" doc="Event hook, is called after everything is loaded and widgetified">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onUnload" ilk="function" signature="onUnload(e)" doc="Event hook, is called before old content is cleared">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onDownloadStart" ilk="function" doc="called before download starts the string returned by this function will be the html that tells the user we are loading something override with your own function if you want to change text" />
            <scope name="onContentError" ilk="function" signature="onContentError(error)" doc="called on DOM faults, require fault etc in content default is to display errormessage inside pane">
              <variable ilk="argument" name="error" citdl="Error" />
            </scope>
            <scope name="onDownloadError" ilk="function" signature="onDownloadError(error)" doc="Called when download error occurs, default is to display errormessage inside pane. Overide function to change that. The string returned by this function will be the html that tells the user a error happend">
              <variable ilk="argument" name="error" citdl="Error" />
            </scope>
            <scope name="onDownloadEnd" ilk="function" doc="called when download is finished" />
            <variable name="containerNode" doc="">
              <variable name="innerHTML" doc="" />
            </variable>
            <scope name="domNode">
              <variable name="title" doc="" />
            </scope>
            <variable name="isContainer" doc="" />
            <variable name="_singleChild" attributes="private" doc="" />
            <variable name="_isDownloaded" attributes="private" doc="" />
            <variable name="_xhrDfd" attributes="private" doc="">
              <variable name="fired" doc="" />
            </variable>
            <variable name="_beingDestroyed" attributes="private" doc="" />
            <variable name="_contentBox" attributes="private" doc="" />
            <variable name="_contentSetter" attributes="private" doc="" />
          </scope>
          <scope name="LayoutContainer" ilk="function" doc="Provides Delphi-style panel layout semantics.">
            <scope name="baseClass" doc="" />
            <scope name="layout" ilk="function" doc="" />
            <scope name="addChild" ilk="function" signature="addChild(child,insertIndex)" doc="">
              <variable ilk="argument" name="child" citdl="Widget" />
              <variable ilk="argument" name="insertIndex" citdl="Integer" />
            </scope>
            <scope name="removeChild" ilk="function" signature="removeChild(widget)" doc="">
              <variable ilk="argument" name="widget" citdl="Widget" />
            </scope>
          </scope>
          <scope name="LinkPane" ilk="function" doc="A ContentPane that loads data remotely">
            <scope name="templateString" doc="" />
            <scope name="buildRendering" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <variable name="containerNode" doc="" />
          </scope>
          <scope name="SplitContainer" ilk="function" doc="A Container widget with sizing handles in-between each child">
            <scope name="activeSizing" citdl="Boolean" doc="If true, the children's size changes as you drag the bar; otherwise, the sizes don't change until you drop the bar (by mouse-up)" />
            <variable name="sizerWidth" citdl="Integer" doc="Size in pixels of the bar between each child" />
            <scope name="orientation" citdl="String" doc="either 'horizontal' or vertical; indicates whether the children are arranged side-by-side or up/down." />
            <scope name="persist" citdl="Boolean" doc="Save splitter positions in a cookie" />
            <scope name="baseClass" doc="" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_setupChild" ilk="function" signature="_setupChild(child)" attributes="private" doc="">
              <variable ilk="argument" name="child" citdl="Widget" />
            </scope>
            <scope name="_addSizer" ilk="function" attributes="private" doc="" />
            <scope name="removeChild" ilk="function" signature="removeChild(widget)" doc="Remove sizer, but only if widget is really our child and we have at least one sizer to throw away">
              <variable ilk="argument" name="widget" />
            </scope>
            <scope name="addChild" ilk="function" signature="addChild(child,insertIndex)" doc="Add a child widget to the container">
              <variable ilk="argument" name="child" citdl="Widget" doc="a widget to add" />
              <variable ilk="argument" name="insertIndex" citdl="Integer" doc="postion in the &amp;amp;quot;stack&amp;amp;quot; to add the child widget" />
            </scope>
            <scope name="layout" ilk="function" doc="Do layout of panels" />
            <scope name="_movePanel" ilk="function" signature="_movePanel(panel,pos,size)" attributes="private" doc="">
              <variable ilk="argument" name="panel" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="size" />
            </scope>
            <scope name="_moveSlider" ilk="function" signature="_moveSlider(slider,pos,size)" attributes="private" doc="">
              <variable ilk="argument" name="slider" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="size" />
            </scope>
            <scope name="_growPane" ilk="function" signature="_growPane(growth,pane)" attributes="private" doc="">
              <variable ilk="argument" name="growth" />
              <variable ilk="argument" name="pane" />
            </scope>
            <scope name="_checkSizes" ilk="function" attributes="private" doc="" />
            <scope name="beginSizing" ilk="function" signature="beginSizing(e,i)" doc="">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="i" />
            </scope>
            <scope name="changeSizing" ilk="function" signature="changeSizing(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="endSizing" ilk="function" signature="endSizing(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="movePoint" ilk="function" doc="" />
            <scope name="legaliseSplitPoint" ilk="function" signature="legaliseSplitPoint(a)" doc="">
              <variable ilk="argument" name="a" />
            </scope>
            <scope name="_updateSize" ilk="function" attributes="private" doc="" />
            <scope name="_showSizingLine" ilk="function" attributes="private" doc="" />
            <scope name="_hideSizingLine" ilk="function" attributes="private" doc="" />
            <scope name="_moveSizingLine" ilk="function" attributes="private" doc="" />
            <scope name="_getCookieName" ilk="function" signature="_getCookieName(i)" attributes="private" doc="">
              <variable ilk="argument" name="i" />
            </scope>
            <scope name="_restoreState" ilk="function" attributes="private" doc="" />
            <scope name="_saveState" ilk="function" attributes="private" doc="" />
            <variable name="isHorizontal" doc="" />
            <variable name="sizers" doc="" />
            <scope name="domNode" />
            <variable name="virtualSizer" doc="" />
            <variable name="paneWidth" doc="" />
            <variable name="paneHeight" doc="" />
            <variable name="paneBefore" doc="">
              <variable name="sizeActual" doc="" />
            </variable>
            <variable name="paneAfter" doc="">
              <variable name="position" doc="" />
              <variable name="sizeActual" doc="" />
            </variable>
            <variable name="isSizing" doc="" />
            <variable name="sizingSplitter" doc="" />
            <variable name="cover" doc="" />
            <variable name="originPos" doc="" />
            <variable name="startPoint" doc="" />
            <variable name="screenToClientOffset" doc="" />
            <variable name="dragOffset" doc="" />
            <variable name="_ownconnects" attributes="private" doc="" />
            <variable name="lastPoint" doc="" />
            <variable name="isDraggingLeft" doc="" />
          </scope>
          <scope name="StackContainer" ilk="function" doc="A container that has multiple children, but shows only one child at a time">
            <scope name="doLayout" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="_started" attributes="private" doc="" />
            <variable name="selectedChildWidget" citdl="Widget" doc="References the currently selected child widget, if any" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_setupChild" ilk="function" signature="_setupChild(child)" returns="dijit._Widget" attributes="private" doc="">
              <variable ilk="argument" name="child" citdl="Widget" />
            </scope>
            <scope name="addChild" ilk="function" signature="addChild(child,insertIndex)" doc="Adds a widget to the stack">
              <variable ilk="argument" name="child" citdl="Widget" />
              <variable ilk="argument" name="insertIndex" citdl="Integer" />
            </scope>
            <scope name="removeChild" ilk="function" signature="removeChild(page)" doc="Removes the pane from the stack">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <scope name="selectChild" ilk="function" signature="selectChild(page)" doc="Show the given widget (which must be one of my children)">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <scope name="_transition" ilk="function" signature="_transition(newWidget,oldWidget)" attributes="private" doc="">
              <variable ilk="argument" name="newWidget" citdl="Widget" />
              <variable ilk="argument" name="oldWidget" citdl="Widget" />
            </scope>
            <scope name="_adjacent" ilk="function" signature="_adjacent(forward)" doc="Gets the next/previous child widget in this container from the current selection" returns="dijit._Widget" attributes="private">
              <variable ilk="argument" name="forward" citdl="Boolean" />
            </scope>
            <scope name="forward" ilk="function" doc="" />
            <scope name="back" ilk="function" doc="" />
            <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="layout" ilk="function" doc="" />
            <scope name="_showChild" ilk="function" signature="_showChild(page)" attributes="private" doc="">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <scope name="_hideChild" ilk="function" signature="_hideChild(page)" attributes="private" doc="">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <scope name="closeChild" ilk="function" signature="closeChild(page)" doc="callback when user clicks the [X] to remove a page if onClose() returns true then remove and destroy the child">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <scope name="destroy" ilk="function" doc="" />
            <variable name="_beingDestroyed" attributes="private" doc="" />
          </scope>
          <scope name="StackController" ilk="function" doc="Set of buttons to select a page in a page list. Monitors the specified StackContainer, and whenever a page is added, deleted, or selected, updates itself accordingly.">
            <scope name="templateString" doc="" />
            <scope name="containerId" citdl="String" doc="the id of the page container that I point to" />
            <scope name="buttonWidget" citdl="String" doc="the name of the button widget to create to correspond to each page" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="onStartup" ilk="function" signature="onStartup(info)" doc="called after StackContainer has finished initializing">
              <variable ilk="argument" name="info" citdl="Object" />
            </scope>
            <scope name="destroy" ilk="function" doc="" />
            <scope name="onAddChild" ilk="function" signature="onAddChild(page,insertIndex)" doc="Called whenever a page is added to the container. Create button corresponding to the page.">
              <variable ilk="argument" name="page" citdl="Widget" />
              <variable ilk="argument" name="insertIndex" citdl="Integer" />
            </scope>
            <scope name="onRemoveChild" ilk="function" signature="onRemoveChild(page)" doc="Called whenever a page is removed from the container. Remove the button corresponding to the page.">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <scope name="onSelectChild" ilk="function" signature="onSelectChild(page)" doc="Called when a page has been selected in the StackContainer, either by me or by another StackController">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <scope name="onButtonClick" ilk="function" signature="onButtonClick(page)" doc="Called whenever one of my child buttons is pressed in an attempt to select a page">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <scope name="onCloseButtonClick" ilk="function" signature="onCloseButtonClick(page)" doc="Called whenever one of my child buttons [X] is pressed in an attempt to close a page">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <scope name="adjacent" ilk="function" signature="adjacent(forward)" returns="dijit._Widget" attributes="private" doc="">
              <variable ilk="argument" name="forward" citdl="Boolean" />
            </scope>
            <scope name="onkeypress" ilk="function" signature="onkeypress(e)" doc="Handle keystrokes on the page list, for advancing to next/previous button and closing the current page if the page is closable.">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="onContainerKeyPress" ilk="function" signature="onContainerKeyPress(info)" doc="">
              <variable ilk="argument" name="info" citdl="Object" />
            </scope>
            <variable name="pane2button" doc="" />
            <variable name="pane2handles" doc="" />
            <variable name="pane2menu" doc="" />
            <variable name="_subscriptions" attributes="private" doc="" />
            <variable name="_currentChild" attributes="private" doc="" />
          </scope>
          <scope name="_StackButton" ilk="function" attributes="private" doc="">
            <scope name="tabIndex" doc="" />
            <scope name="postCreate" ilk="function" signature="postCreate(evt)" doc="">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <scope name="onClick" ilk="function" signature="onClick(evt)" doc="This is for TabContainer where the tabs are &amp;amp;lt;span&amp;amp;gt; rather than button, so need to set focus explicitly (on some browsers)">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <scope name="onClickCloseButton" ilk="function" signature="onClickCloseButton(evt)" doc="">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
          </scope>
          <scope name="TabContainer" ilk="function" doc="A Container with Title Tabs, each one pointing at a pane in the container.">
            <scope name="tabPosition" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="tabStrip" citdl="bool" doc="Defines whether the tablist gets an extra class for layouting" />
            <scope name="templateString" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="_controllerWidget" citdl="String" doc="An optional parameter to overrider the default TabContainer controller used." attributes="private" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_setupChild" ilk="function" signature="_setupChild(tab)" returns="Widget" attributes="private" doc="">
              <variable ilk="argument" name="tab" citdl="Widget" />
            </scope>
            <scope name="startup" ilk="function" doc="" />
            <scope name="layout" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <variable name="tablist" doc="" />
            <variable name="_containerContentBox" attributes="private" doc="" />
          </scope>
          <scope name="TabController" ilk="function" doc="Set of tabs (the things with titles and a close button, that you click to show a tab panel).">
            <scope name="templateString" doc="" />
            <scope name="tabPosition" citdl="String" doc="Defines where tabs go relative to the content. &amp;amp;quot;top&amp;amp;quot;, &amp;amp;quot;bottom&amp;amp;quot;, &amp;amp;quot;left-h&amp;amp;quot;, &amp;amp;quot;right-h&amp;amp;quot;" />
            <scope name="doLayout" citdl="Boolean" doc="" />
            <scope name="buttonWidget" citdl="String" doc="The name of the tab widget to create to correspond to each page" />
            <scope name="_rectifyRtlTabList" ilk="function" doc="Rectify the width of all tabs in rtl, otherwise the tab widths are different in IE" attributes="private" />
          </scope>
          <scope name="_TabButton" ilk="function" doc="A tab (the thing you click to select a pane)." attributes="private">
            <scope name="baseClass" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="closeNode" />
          </scope>
          <scope name="_LayoutWidget" ilk="function" attributes="private" doc="">
            <scope name="baseClass" doc="" />
            <scope name="isLayoutContainer" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="Called after all the widgets have been instantiated and their dom nodes have been inserted somewhere under dojo.doc.body.  Widgets should override this method to do any initialization dependent on other widgets existing, and then call this superclass method to finish things off.  startup() in subclasses shouldn't do anything size related because the size of the widget hasn't been set yet." />
            <scope name="resize" ilk="function" signature="resize(changeSize,resultSize)" doc="Call this to resize a widget, or after it's size has changed.">
              <variable ilk="argument" name="changeSize" citdl="Object" doc="Sets the widget to this margin-box size and position. May include any/all of the following properties:  	{w: int, h: int, l: int, t: int}" />
              <variable ilk="argument" name="resultSize" citdl="Object" doc="The margin-box size of this widget after applying changeSize (if changeSize is specified). If caller knows this size and passes it in, we don't need to query the browser to get the size.  	{w: int, h: int}" />
            </scope>
            <scope name="layout" ilk="function" doc="" />
            <scope name="_setupChild" ilk="function" signature="_setupChild(child)" doc="common setup for initial children or children which are added after startup" attributes="private">
              <variable ilk="argument" name="child" citdl="Widget" />
            </scope>
            <scope name="addChild" ilk="function" signature="addChild(child,insertIndex)" doc="">
              <variable ilk="argument" name="child" citdl="Widget" />
              <variable ilk="argument" name="insertIndex" citdl="Integer" />
            </scope>
            <scope name="removeChild" ilk="function" signature="removeChild(child)" doc="">
              <variable ilk="argument" name="child" citdl="Widget" />
            </scope>
            <variable name="_borderBox" attributes="private" doc="" />
            <variable name="_contentBox" attributes="private" doc="" />
          </scope>
          <scope name="marginBox2contentBox" ilk="function" signature="marginBox2contentBox(node,mb)" doc="Given the margin-box size of a node, return it's content box size. Functions like dojo.contentBox() but is more reliable since it doesn't have to wait for the browser to compute sizes.">
            <variable ilk="argument" name="node" citdl="DomNode" />
            <variable ilk="argument" name="mb" citdl="Object" />
          </scope>
          <scope name="layoutChildren" ilk="function" signature="layoutChildren(container,dim,children)" doc="">
            <variable ilk="argument" name="container" citdl="DomNode" />
            <variable ilk="argument" name="dim" citdl="Object" />
            <variable ilk="argument" name="children" citdl="Object[]" />
          </scope>
        </variable>
        <variable name="demos" citdl="Object" doc="Home of the official dijit demo code" />
        <variable name="resources" citdl="Object" doc="" />
        <variable name="robot" citdl="Object" doc="" />
        <variable name="robotx" citdl="Object" doc="" />
      </scope>
      <scope ilk="class" name="dojox">
        <variable name="analytics" citdl="Object" doc="">
          <variable name="_data" attributes="private" doc="" />
          <variable name="_id" attributes="private" doc="" />
          <variable name="sendInterval" doc="" />
          <variable name="inTransitRetry" doc="" />
          <variable name="dataUrl" doc="" />
          <variable name="sendMethod" doc="" />
          <variable name="maxRequestSize" doc="" />
          <scope name="schedulePusher" ilk="function" signature="schedulePusher(interval)" doc="schedule the data pushing routines to happen in interval ms">
            <variable ilk="argument" name="interval" />
          </scope>
          <scope name="addData" ilk="function" signature="addData(dataType,data)" doc="add data to the queue. Will be pusshed to the server on the next data push">
            <variable ilk="argument" name="dataType" />
            <variable ilk="argument" name="data" />
          </scope>
          <scope name="checkData" ilk="function" doc="" />
          <scope name="pushData" ilk="function" doc="" />
          <variable name="_inTransit" attributes="private" doc="" />
          <scope name="getQueryPacket" ilk="function" doc="" />
          <variable name="_split" attributes="private" doc="" />
          <scope name="onPushComplete" ilk="function" signature="onPushComplete(results)" doc="">
            <variable ilk="argument" name="results" />
          </scope>
          <variable name="_base" citdl="Object" attributes="private" doc="" />
          <variable name="plugins" citdl="Object" doc="">
            <scope name="consoleMessages" ilk="function" doc="plugin to have analyitcs return the base info dojo collects">
              <scope name="initialized" />
              <variable name="addData" doc="" />
            </scope>
            <scope name="dojo" ilk="function" doc="plugin to have analyitcs return the base info dojo collects">
              <scope name="initialized" />
              <variable name="addData" doc="" />
            </scope>
            <scope name="idle" ilk="function" doc="">
              <scope name="initialized" />
              <variable name="addData" doc="" />
              <variable name="idleTime" doc="" />
              <variable name="idle" doc="" />
              <variable name="setIdle" ilk="function" doc="" />
              <variable name="idleTimer" doc="" />
            </scope>
            <scope name="mouseClick" ilk="function" doc="">
              <scope name="initialized" />
              <variable name="addData" doc="" />
              <variable name="onClick" ilk="function" signature="onClick(e)" doc="">
                <variable ilk="argument" name="e" />
              </variable>
              <variable name="trimEvent" ilk="function" signature="trimEvent(e)" doc="">
                <variable ilk="argument" name="e" />
              </variable>
            </scope>
            <scope name="mouseOver" ilk="function" doc="">
              <scope name="initialized" />
              <variable name="watchMouse" doc="" />
              <variable name="mouseSampleDelay" doc="" />
              <variable name="addData" doc="" />
              <variable name="targetProps" doc="" />
              <variable name="_rateLimited" attributes="private" doc="" />
              <variable name="_lastMouseEvent" attributes="private" doc="" />
              <variable name="toggleWatchMouse" ilk="function" doc="" />
              <variable name="sampleMouse" ilk="function" signature="sampleMouse(e)" doc="">
                <variable ilk="argument" name="e" />
              </variable>
              <variable name="trimMouseEvent" ilk="function" signature="trimMouseEvent(e)" doc="">
                <variable ilk="argument" name="e" />
              </variable>
            </scope>
            <scope name="window" ilk="function" doc="">
              <scope name="initialized" />
              <variable name="addData" doc="" />
              <variable name="windowConnects" doc="" />
            </scope>
          </variable>
          <variable name="profiles" citdl="Object" doc="">
            <variable name="analytics" citdl="Object" doc="">
              <variable name="profile" citdl="Object" doc="" />
            </variable>
            <variable name="analyticsInBase" citdl="Object" doc="">
              <variable name="profile" citdl="Object" doc="" />
            </variable>
          </variable>
        </variable>
        <variable name="av" citdl="Object" doc="">
          <scope name="_Media" ilk="function" doc="Used as a mixin for dojox and AIR media" attributes="private">
            <scope name="mediaUrl" doc="" />
            <scope name="initialVolume" citdl="Float?" doc="The initial volume setting of the player. Acccepts between 0 and 1." />
            <scope name="autoPlay" citdl="Boolean?" doc="Whether the video automatically plays on load or not." />
            <scope name="bufferTime" citdl="Number?" doc="Time in milliseconds that the video should be loaded before it will play. May pause and resume to build up buffer. Prevents stuttering. Note: Older FLVs, without a duration, cannot be buffered." />
            <scope name="minBufferTime" citdl="Number" doc="Time in milliseconds bwteen the playhead time and loaded time that will trigger the buffer. When buffer is triggered, video will pause until the bufferTime amount is buffered. Note: Should be a small number, greater than zero." />
            <scope name="updateTime" citdl="Number" doc="How often, in milliseconds to get an update of the video position." />
            <scope name="id" citdl="String?" doc="The id of this widget and the id of the SWF movie." />
            <scope name="isDebug" citdl="Boolean?" doc="Setting to true tells the SWF to output log messages to Firebug." />
            <scope name="percentDownloaded" citdl="read-only-Number" doc="The percentage the media has downloaded; from 0-100" />
            <scope name="_flashObject" citdl="read-only-Object" doc="The dojox.embed object" attributes="private" />
            <scope name="flashMedia" citdl="read-only-SWF" doc="The SWF object. Methods are passed to this." />
            <scope name="_initStatus" ilk="function" doc="Connect mediaStatus to the media." attributes="private" />
            <scope name="getTime" ilk="function" doc="Returns the current time of the video Note: Consider the onPosition event, which returns the time at a set interval. Too many trips to the SWF could impact performance." returns="Float" attributes="private" />
            <scope name="onLoad" ilk="function" signature="onLoad(mov)" doc="Fired when the SWF player has loaded NOT when the video has loaded">
              <variable ilk="argument" name="mov" citdl="SWF" />
            </scope>
            <scope name="onDownloaded" ilk="function" signature="onDownloaded(percent)" doc="Fires the amount of that the media has been downloaded. Number, 0-100">
              <variable ilk="argument" name="percent" citdl="Number" />
            </scope>
            <scope name="onClick" ilk="function" signature="onClick(evt)" doc="TODO: Return x/y of click Fires when the player is clicked Could be used to toggle play/pause, or do an external activity, like opening a new window.">
              <variable ilk="argument" name="evt" citdl="Object" />
            </scope>
            <scope name="onSwfSized" ilk="function" signature="onSwfSized(data)" doc="Fired on SWF resize, or when its toggled between fullscreen.">
              <variable ilk="argument" name="data" citdl="Object" />
            </scope>
            <scope name="onMetaData" ilk="function" signature="onMetaData(data,evt)" doc="The video properties. Width, height, duration, etc. NOTE: 	if data is empty, this is an older FLV with no meta data. Duration cannot be determined. In original FLVs, duration could only be obtained with Flash Media Server. NOTE: 	Older FLVs can still return width and height and will do so on a second event call">
              <variable ilk="argument" name="data" citdl="Object" />
              <variable ilk="argument" name="evt" citdl="Object" />
            </scope>
            <scope name="onPosition" ilk="function" signature="onPosition(time)" doc="The position of the playhead in seconds">
              <variable ilk="argument" name="time" citdl="Float" />
            </scope>
            <scope name="onStart" ilk="function" signature="onStart(data)" doc="Fires when video starts Good for setting the play button to pause during an autoPlay for example">
              <variable ilk="argument" name="data" citdl="Object" />
            </scope>
            <scope name="onPlay" ilk="function" signature="onPlay(data)" doc="Fires when video starts and resumes">
              <variable ilk="argument" name="data" citdl="Object" />
            </scope>
            <scope name="onPause" ilk="function" signature="onPause(data)" doc="Fires when teh pause button is clicked">
              <variable ilk="argument" name="data" citdl="Object" />
            </scope>
            <scope name="onEnd" ilk="function" signature="onEnd(data)" doc="Fires when video ends Could be used to change pause button to play or show a post video graphic, like YouTube">
              <variable ilk="argument" name="data" citdl="Object" />
            </scope>
            <scope name="onStop" ilk="function" doc="Fire when the Stop button is clicked TODO: 	This is not hooked up yet and shouldn't fire." />
            <scope name="onBuffer" ilk="function" signature="onBuffer(isBuffering)" doc="Fires a boolean to tell if media is paused for buffering or if buffering has finished">
              <variable ilk="argument" name="isBuffering" citdl="Boolean" />
            </scope>
            <scope name="onError" ilk="function" signature="onError(data,url)" doc="Fired when the player encounters an error">
              <variable ilk="argument" name="data" citdl="Object" />
              <variable ilk="argument" name="url" citdl="String" />
            </scope>
            <scope name="onStatus" ilk="function" signature="onStatus(data)" doc="Simple status">
              <variable ilk="argument" name="data" citdl="Object" />
            </scope>
            <scope name="onPlayerStatus" ilk="function" signature="onPlayerStatus(data)" doc="The status of the video from the SWF playing, stopped, bufering, etc.">
              <variable ilk="argument" name="data" citdl="Object" />
            </scope>
            <scope name="_figureStatus" ilk="function" doc="Calculate media status, based on playhead movement, and onStop and onStart events TODO: Figure in real status from the media for more accurate results." attributes="private" />
            <scope name="_eventFactory" ilk="function" doc="Creates a generic event object." returns="Object" attributes="private" />
            <variable name="status" doc="" />
            <variable name="duration" doc="" />
            <variable name="isBuffering" doc="" />
            <variable name="_prevPos" attributes="private" doc="" />
            <variable name="_prevStatus" attributes="private" doc="" />
          </scope>
          <variable name="widget" citdl="Object" doc="">
            <scope name="PlayButton" ilk="function" doc="A Play/Pause button widget to use with dojox.av.widget.Player">
              <scope name="templatePath" doc="" />
              <scope name="postCreate" ilk="function" doc="Intialize button." />
              <scope name="setMedia" ilk="function" signature="setMedia(med)" doc="A common method to set the media in all Player widgets. May do connections and initializations.">
                <variable ilk="argument" name="med" citdl="Object" />
              </scope>
              <scope name="onClick" ilk="function" doc="Fired on play or pause click." />
              <scope name="onPlay" ilk="function" doc="Fired on play click." />
              <scope name="onPause" ilk="function" doc="Fired on pause click." />
              <scope name="showPlay" ilk="function" doc="Toggles the pause button invisible and the play button visible.." />
              <scope name="showPause" ilk="function" doc="Toggles the play button invisible and the pause button visible." />
              <variable name="media" doc="" />
              <variable name="_mode" attributes="private" doc="" />
            </scope>
            <scope name="Player" ilk="function" doc="A Media Player UI widget for all types of dojox.av and AIR media.">
              <scope name="playerWidth" citdl="Number" doc="or String */ Sets the width of the player (not the video size) Number will be converted to pixels String will be used literally. EX: &amp;amp;quot;320px&amp;amp;quot; or &amp;amp;quot;100%&amp;amp;quot;" />
              <scope name="widgetsInTemplate" doc="" />
              <scope name="templatePath" doc="" />
              <scope name="_fillContent" ilk="function" attributes="private" doc="" />
              <scope name="postCreate" ilk="function" doc="Do player styling, and place child widgets in the proper location." />
              <scope name="startup" ilk="function" doc="Fired when all children are ready. Set the media in all children with setMedia()" />
              <scope name="onResize" ilk="function" signature="onResize(evt)" doc="If a player size is a percentage, this will fire an onResize event for all children, passing the size of the player.">
                <variable ilk="argument" name="evt" />
              </scope>
              <variable name="items" doc="" />
              <variable name="children" doc="" />
              <variable name="mediaNode" doc="" />
              <variable name="media" doc="" />
            </scope>
            <scope name="ProgressSlider" ilk="function" doc="A custom slider widget to use with dojox.av.widget.Player.">
              <scope name="templatePath" doc="" />
              <scope name="postCreate" ilk="function" doc="Initialize slider." />
              <scope name="setMedia" ilk="function" signature="setMedia(med,playerWidget)" doc="A common method to set the media in all Player widgets. May do connections and initializations.">
                <variable ilk="argument" name="med" citdl="Object" />
                <variable ilk="argument" name="playerWidget" />
              </scope>
              <scope name="onDrag" ilk="function" signature="onDrag(evt)" doc="Fired when the mouse is moved. Sets the slider.">
                <variable ilk="argument" name="evt" citdl="HTMLEvent" />
              </scope>
              <scope name="startDrag" ilk="function" doc="Fired onmousedown of the slider handle." />
              <scope name="endDrag" ilk="function" doc="Fired on document.onmouseup." />
              <scope name="setHandle" ilk="function" signature="setHandle(time)" doc="Sets the slider handle (when it is not being dragged)">
                <variable ilk="argument" name="time" />
              </scope>
              <scope name="setLoadedPosition" ilk="function" signature="setLoadedPosition(decimal)" doc="Sets the download progress bar to the percentage of how much the media has been downloaded.">
                <variable ilk="argument" name="decimal" />
              </scope>
              <scope name="handleOver" ilk="function" doc="Highlights the slider handle on mouseover, and stays highlighted during drag." />
              <scope name="handleOut" ilk="function" doc="Unhighlights handle onmouseover, or on endDrag." />
              <scope name="onResize" ilk="function" signature="onResize(playerDimensions)" doc="Handles player resize. Need to recalculate the width of position an download bars.">
                <variable ilk="argument" name="playerDimensions" />
              </scope>
              <variable name="seeking" doc="" />
              <variable name="handleWidth" doc="" />
              <variable name="finalWidth" doc="" />
              <variable name="width" doc="" />
              <variable name="x" doc="" />
              <variable name="playerWidget" doc="" />
              <variable name="media" doc="" />
              <variable name="duration" doc="" />
              <variable name="posCon" doc="" />
              <variable name="cmove" doc="" />
              <variable name="cup" doc="" />
            </scope>
            <scope name="Status" ilk="function" doc="A Status widget to use with dojox.av.widget.Player">
              <scope name="templatePath" doc="" />
              <scope name="postCreate" ilk="function" doc="" />
              <scope name="setMedia" ilk="function" signature="setMedia(med)" doc="A common method to set the media in all Player widgets. May do connections and initializations.">
                <variable ilk="argument" name="med" citdl="Object" />
              </scope>
              <scope name="onMetaData" ilk="function" signature="onMetaData(data)" doc="">
                <variable ilk="argument" name="data" />
              </scope>
              <scope name="onBuffer" ilk="function" signature="onBuffer(isBuffering)" doc="">
                <variable ilk="argument" name="isBuffering" />
              </scope>
              <scope name="onPosition" doc="" />
              <scope name="onStart" ilk="function" doc="" />
              <scope name="onPlay" ilk="function" doc="" />
              <scope name="onPause" ilk="function" doc="" />
              <scope name="onStop" ilk="function" doc="" />
              <scope name="onEnd" ilk="function" doc="" />
              <scope name="onError" ilk="function" signature="onError(evt)" doc="">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope name="onLoad" ilk="function" doc="" />
              <scope name="setStatus" ilk="function" signature="setStatus(str,isError)" doc="">
                <variable ilk="argument" name="str" />
                <variable ilk="argument" name="isError" />
              </scope>
              <scope name="toSeconds" ilk="function" signature="toSeconds(time)" doc="">
                <variable ilk="argument" name="time" />
              </scope>
              <variable name="media" doc="" />
              <variable name="duration" doc="" />
              <scope name="durNode">
                <variable name="innerHTML" doc="" />
              </scope>
              <scope name="timeNode">
                <variable name="innerHTML" doc="" />
              </scope>
              <variable name="title" doc="" />
              <variable name="isBuffering" doc="" />
              <scope name="titleNode">
                <variable name="innerHTML" doc="" />
              </scope>
            </scope>
            <scope name="VolumeButton" ilk="function" doc="A volume widget to use with dojox.av.widget.Player">
              <scope name="templatePath" doc="" />
              <scope name="postCreate" ilk="function" doc="Initialize the widget." />
              <scope name="setMedia" ilk="function" signature="setMedia(med)" doc="A common method to set the media in all Player widgets. May do connections and initializations.">
                <variable ilk="argument" name="med" citdl="Object" />
              </scope>
              <scope name="updateIcon" ilk="function" signature="updateIcon(vol)" doc="Changes the icon on the button according to volume level.">
                <variable ilk="argument" name="vol" citdl="Float" />
              </scope>
              <scope name="onShowVolume" ilk="function" signature="onShowVolume(evt)" doc="Shows the volume slider.">
                <variable ilk="argument" name="evt" citdl="DOMEvent" />
              </scope>
              <scope name="onDocClick" ilk="function" signature="onDocClick(evt)" doc="Fired on document.onmousedown. Checks if clicked inside of this widget or not.">
                <variable ilk="argument" name="evt" citdl="DOMEvent" />
              </scope>
              <scope name="onHideVolume" ilk="function" doc="Hides volume slider." />
              <scope name="onDrag" ilk="function" signature="onDrag(evt)" doc="Fired on mousemove. Updates volume and position of slider handle.">
                <variable ilk="argument" name="evt" citdl="DOMEvent" />
              </scope>
              <scope name="startDrag" ilk="function" doc="Fired on mousedown of the slider handle." />
              <scope name="endDrag" ilk="function" doc="Fired on mouseup of the slider handle." />
              <scope name="handleOver" ilk="function" doc="Highlights the slider handle on mouseover, and stays highlighted during drag." />
              <scope name="handleOut" ilk="function" doc="Unhighlights handle onmouseover, or on endDrag." />
              <scope name="_getVolumeDim" ilk="function" doc="Gets dimensions of slider background node. Only uses dojo.coords once, unless the page or player is resized." attributes="private" />
              <scope name="_getHandleDim" ilk="function" doc="Gets dimensions of slider handle. Only uses dojo.marginBox once." attributes="private" />
              <scope name="onResize" ilk="function" signature="onResize(playerDimensions)" doc="Fired on player resize. Zeros dimensions so that it can be calculated again.">
                <variable ilk="argument" name="playerDimensions" citdl="Object" />
              </scope>
              <variable name="handleWidth" doc="" />
              <variable name="width" doc="" />
              <variable name="slotWidth" doc="" />
              <variable name="volumeSlider" doc="" />
              <variable name="media" doc="" />
              <variable name="showing" doc="" />
              <variable name="x" doc="" />
              <variable name="clickOff" doc="" />
              <variable name="isDragging" doc="" />
              <variable name="cmove" doc="" />
              <variable name="cup" doc="" />
              <variable name="_domCoords" attributes="private" doc="" />
              <variable name="_handleCoords" attributes="private" doc="" />
            </scope>
          </variable>
        </variable>
        <variable name="charting" citdl="Object" doc="Vector graphic, data-driven graphs and charts">
          <scope name="Chart3D" ilk="function" signature="Chart3D(node,lights,camera,theme)" doc="">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="lights" />
            <variable ilk="argument" name="camera" />
            <variable ilk="argument" name="theme" />
            <scope name="generate" ilk="function" doc="" />
            <scope name="invalidate" ilk="function" doc="" />
            <scope name="render" ilk="function" doc="" />
            <scope name="addPlot" ilk="function" signature="addPlot(plot)" doc="">
              <variable ilk="argument" name="plot" />
            </scope>
            <scope name="removePlot" ilk="function" signature="removePlot(plot)" doc="">
              <variable ilk="argument" name="plot" />
            </scope>
            <scope name="addWall" ilk="function" signature="addWall(wall)" doc="">
              <variable ilk="argument" name="wall" />
            </scope>
            <scope name="removeWall" ilk="function" signature="removeWall(wall)" doc="">
              <variable ilk="argument" name="wall" />
            </scope>
            <scope name="_add" ilk="function" signature="_add(array,item)" attributes="private" doc="">
              <variable ilk="argument" name="array" />
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_remove" ilk="function" signature="_remove(array,item)" attributes="private" doc="">
              <variable ilk="argument" name="array" />
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_generateWalls" ilk="function" attributes="private" doc="" />
            <scope name="_generatePlots" ilk="function" attributes="private" doc="" />
            <variable name="node" doc="" />
            <variable name="surface" doc="" />
            <variable name="view" doc="" />
            <variable name="theme" doc="" />
            <variable name="walls" doc="" />
            <variable name="plots" doc="" />
          </scope>
          <scope name="Element" ilk="function" signature="Element(chart)" doc="">
            <variable ilk="argument" name="chart" />
            <scope name="createGroup" ilk="function" signature="createGroup(creator)" doc="">
              <variable ilk="argument" name="creator" />
            </scope>
            <scope name="purgeGroup" ilk="function" doc="" />
            <scope name="cleanGroup" ilk="function" signature="cleanGroup(creator)" doc="">
              <variable ilk="argument" name="creator" />
            </scope>
            <scope name="destroyHtmlElements" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <variable name="group" doc="" />
            <variable name="dirty" doc="" />
            <variable name="htmlElements" doc="" />
            <variable name="chart" doc="" />
          </scope>
          <scope name="Series" ilk="function" signature="Series(chart,data,kwArgs)" doc="">
            <variable ilk="argument" name="chart" />
            <variable ilk="argument" name="data" />
            <variable ilk="argument" name="kwArgs" />
            <scope name="clear" ilk="function" doc="" />
            <variable name="dyn" doc="" />
            <variable name="plot" doc="" />
            <variable name="data" doc="" />
            <variable name="dirty" doc="" />
          </scope>
          <scope name="Theme" ilk="function" signature="Theme(kwArgs)" doc="">
            <variable ilk="argument" name="kwArgs" citdl="Object" />
            <variable name="Markers" citdl="Object" doc="">
              <scope name="CIRCLE" doc="" />
              <scope name="SQUARE" doc="" />
              <scope name="DIAMOND" doc="" />
              <scope name="CROSS" doc="" />
              <scope name="X" doc="" />
              <scope name="TRIANGLE" doc="" />
              <scope name="TRIANGLE_INVERTED" doc="" />
            </variable>
            <variable name="_def" citdl="Object" attributes="private" doc="">
              <scope name="chart" doc="" />
              <scope name="fill" doc="" />
            </variable>
            <variable name="markers" doc="" />
            <variable name="colors" doc="" />
            <variable name="antiAlias" doc="" />
            <variable name="assignColors" doc="" />
            <variable name="assignMarkers" doc="" />
            <variable name="_current" attributes="private" doc="">
              <variable name="marker" doc="" />
            </variable>
            <variable name="_markers" attributes="private" doc="" />
            <scope name="defineColors" ilk="function" signature="defineColors(obj)" doc="Generate a set of colors for the theme based on keyword arguments">
              <variable ilk="argument" name="obj" />
            </scope>
            <scope name="_buildMarkerArray" ilk="function" attributes="private" doc="" />
            <scope name="_clone" ilk="function" doc="Return a clone of this theme, with the position vars reset to 0." attributes="private" />
            <scope name="addMarker" doc="" />
            <scope name="setMarkers" doc="" />
            <scope name="next" ilk="function" signature="next(type)" doc="get either the next color or the next marker, depending on what was passed. If type is not passed, it assumes color.">
              <variable ilk="argument" name="type" citdl="String" doc="Optional. One of either &amp;amp;quot;color&amp;amp;quot; or &amp;amp;quot;marker&amp;amp;quot;. Defaults to &amp;amp;quot;color&amp;amp;quot;." />
            </scope>
            <scope name="clear" ilk="function" doc="resets both marker and color counters back to the start. Subsequent calls to `next` will retrievie the first value of each depending on the passed type." />
          </scope>
          <variable name="action2d" citdl="Object" doc="">
            <scope name="Base" ilk="function" signature="Base(chart,plot,kwargs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwargs" />
              <variable name="overOutEvents" citdl="Object" doc="">
                <scope name="onmouseover" doc="" />
                <scope name="onmouseout" doc="" />
              </variable>
              <scope name="connect" ilk="function" doc="" />
              <scope name="disconnect" ilk="function" doc="" />
              <scope name="reset" ilk="function" doc="" />
              <scope name="destroy" ilk="function" doc="" />
              <variable name="handle" doc="" />
              <variable name="anim" doc="" />
              <variable name="chart" doc="" />
              <variable name="plot" doc="" />
              <variable name="duration" doc="" />
              <variable name="easing" doc="" />
            </scope>
            <scope name="Highlight" ilk="function" signature="Highlight(chart,plot,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="duration" doc="" />
                <scope name="easing" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="">
                <scope name="highlight" doc="" />
              </variable>
              <scope name="process" ilk="function" signature="process(o)" doc="">
                <variable ilk="argument" name="o" />
              </scope>
              <variable name="colorFun" doc="" />
            </scope>
            <scope name="Magnify" ilk="function" signature="Magnify(chart,plot,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="duration" doc="" />
                <scope name="easing" doc="" />
                <scope name="scale" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="" />
              <scope name="process" ilk="function" signature="process(o)" doc="">
                <variable ilk="argument" name="o" />
              </scope>
              <variable name="scale" doc="" />
            </scope>
            <scope name="MoveSlice" ilk="function" signature="MoveSlice(chart,plot,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="duration" doc="" />
                <scope name="easing" doc="" />
                <scope name="scale" doc="" />
                <scope name="shift" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="" />
              <scope name="process" ilk="function" signature="process(o)" doc="">
                <variable ilk="argument" name="o" />
              </scope>
              <scope name="reset" ilk="function" doc="" />
              <variable name="angles" doc="" />
              <variable name="scale" doc="" />
              <variable name="shift" doc="" />
            </scope>
            <scope name="Shake" ilk="function" signature="Shake(chart,plot,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="duration" doc="" />
                <scope name="easing" doc="" />
                <scope name="shiftX" doc="" />
                <scope name="shiftY" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="" />
              <scope name="process" ilk="function" signature="process(o)" doc="">
                <variable ilk="argument" name="o" />
              </scope>
              <variable name="shiftX" doc="" />
              <variable name="shiftY" doc="" />
            </scope>
            <scope name="Tooltip" ilk="function" signature="Tooltip(chart,plot,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="text" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="" />
              <scope name="process" ilk="function" signature="process(o)" doc="">
                <variable ilk="argument" name="o" />
              </scope>
              <variable name="aroundRect" doc="" />
              <variable name="angles" doc="" />
              <variable name="text" doc="" />
            </scope>
          </variable>
          <variable name="axis2d" citdl="Object" doc="">
            <scope name="Base" ilk="function" signature="Base(chart,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <scope name="clear" ilk="function" doc="" />
              <scope name="initialized" ilk="function" doc="" />
              <scope name="calculate" ilk="function" signature="calculate(min,max,span)" doc="">
                <variable ilk="argument" name="min" />
                <variable ilk="argument" name="max" />
                <variable ilk="argument" name="span" />
              </scope>
              <scope name="getScaler" ilk="function" doc="" />
              <scope name="getTicks" ilk="function" doc="" />
              <scope name="getOffsets" ilk="function" doc="" />
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="vertical" doc="" />
            </scope>
            <scope name="Default" ilk="function" signature="Default(chart,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="vertical" doc="" />
                <scope name="fixUpper" doc="" />
                <scope name="fixLower" doc="" />
                <scope name="natural" doc="" />
                <scope name="leftBottom" doc="" />
                <scope name="includeZero" doc="" />
                <scope name="fixed" doc="" />
                <scope name="majorLabels" doc="" />
                <scope name="minorTicks" doc="" />
                <scope name="minorLabels" doc="" />
                <scope name="microTicks" doc="" />
                <scope name="htmlLabels" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="">
                <scope name="min" doc="" />
                <scope name="max" doc="" />
                <scope name="from" doc="" />
                <scope name="to" doc="" />
                <scope name="majorTickStep" doc="" />
                <scope name="minorTickStep" doc="" />
                <scope name="microTickStep" doc="" />
                <scope name="labels" doc="" />
                <variable name="stroke" citdl="Object" doc="" />
                <variable name="majorTick" citdl="Object" doc="" />
                <variable name="minorTick" citdl="Object" doc="" />
                <scope name="font" doc="" />
                <scope name="fontColor" doc="" />
              </variable>
              <scope name="dependOnData" ilk="function" doc="" />
              <scope name="clear" ilk="function" doc="" />
              <scope name="initialized" ilk="function" doc="" />
              <scope name="setWindow" ilk="function" signature="setWindow(scale,offset)" doc="">
                <variable ilk="argument" name="scale" />
                <variable ilk="argument" name="offset" />
              </scope>
              <scope name="getWindowScale" ilk="function" doc="" />
              <scope name="getWindowOffset" ilk="function" doc="" />
              <scope name="calculate" ilk="function" signature="calculate(min,max,span,labels)" doc="">
                <variable ilk="argument" name="min" />
                <variable ilk="argument" name="max" />
                <variable ilk="argument" name="span" />
                <variable ilk="argument" name="labels" />
              </scope>
              <scope name="getScaler" ilk="function" doc="" />
              <scope name="getTicks" ilk="function" doc="" />
              <scope name="getOffsets" ilk="function" doc="" />
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="dirty" doc="" />
              <variable name="scale" doc="" />
              <variable name="offset" doc="" />
              <variable name="labels" doc="" />
              <variable name="scaler" doc="">
                <variable name="minMinorStep" doc="" />
              </variable>
              <variable name="opt" doc="">
                <variable name="from" doc="" />
                <variable name="to" doc="" />
              </variable>
              <variable name="ticks" doc="" />
            </scope>
            <variable name="common" citdl="Object" doc="">
              <variable name="createText" citdl="Object" doc="">
                <scope name="gfx" ilk="function" signature="gfx(chart,creator,x,y,align,text,font,fontColor)" doc="">
                  <variable ilk="argument" name="chart" />
                  <variable ilk="argument" name="creator" />
                  <variable ilk="argument" name="x" />
                  <variable ilk="argument" name="y" />
                  <variable ilk="argument" name="align" />
                  <variable ilk="argument" name="text" />
                  <variable ilk="argument" name="font" />
                  <variable ilk="argument" name="fontColor" />
                </scope>
                <scope name="html" ilk="function" signature="html(chart,creator,x,y,align,text,font,fontColor)" doc="">
                  <variable ilk="argument" name="chart" />
                  <variable ilk="argument" name="creator" />
                  <variable ilk="argument" name="x" />
                  <variable ilk="argument" name="y" />
                  <variable ilk="argument" name="align" />
                  <variable ilk="argument" name="text" />
                  <variable ilk="argument" name="font" />
                  <variable ilk="argument" name="fontColor" />
                </scope>
              </variable>
            </variable>
          </variable>
          <variable name="plot2d" citdl="Object" doc="">
            <scope name="Areas" ilk="function" doc="">
              <scope name="opt">
                <variable name="lines" doc="" />
                <variable name="areas" doc="" />
              </scope>
            </scope>
            <scope name="Bars" ilk="function" signature="Bars(chart,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="hAxis" doc="" />
                <scope name="vAxis" doc="" />
                <scope name="gap" doc="" />
                <scope name="shadows" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="" />
              <scope name="calculateAxes" ilk="function" signature="calculateAxes(dim)" doc="">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="dirty" doc="" />
              <variable name="opt" doc="" />
              <variable name="series" doc="" />
              <variable name="hAxis" doc="" />
              <variable name="vAxis" doc="" />
            </scope>
            <scope name="Base" ilk="function" doc="">
              <scope name="clear" ilk="function" doc="" />
              <scope name="setAxis" ilk="function" signature="setAxis(axis)" doc="">
                <variable ilk="argument" name="axis" />
              </scope>
              <scope name="addSeries" ilk="function" signature="addSeries(run)" doc="">
                <variable ilk="argument" name="run" />
              </scope>
              <scope name="calculateAxes" ilk="function" signature="calculateAxes(dim)" doc="">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope name="isDirty" ilk="function" doc="" />
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <scope name="getRequiredColors" ilk="function" doc="" />
              <scope name="plotEvent" ilk="function" signature="plotEvent(o)" doc="">
                <variable ilk="argument" name="o" />
              </scope>
              <scope name="connect" ilk="function" signature="connect(object,method)" doc="">
                <variable ilk="argument" name="object" />
                <variable ilk="argument" name="method" />
              </scope>
              <scope name="events" ilk="function" doc="" />
              <scope name="_calc" ilk="function" signature="_calc(dim,stats)" attributes="private" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="stats" />
              </scope>
              <scope name="_connectEvents" ilk="function" signature="_connectEvents(shape,o)" attributes="private" doc="">
                <variable ilk="argument" name="shape" />
                <variable ilk="argument" name="o" />
              </scope>
              <variable name="series" doc="" />
              <variable name="_hAxis" attributes="private" doc="" />
              <variable name="_vAxis" attributes="private" doc="" />
              <variable name="dirty" doc="" />
              <variable name="_hScaler" attributes="private" doc="" />
              <variable name="_vScaler" attributes="private" doc="" />
            </scope>
            <scope name="Bubble" ilk="function" signature="Bubble(chart,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="hAxis" doc="" />
                <scope name="vAxis" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="" />
              <scope name="calculateAxes" ilk="function" signature="calculateAxes(dim)" doc="">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="dirty" doc="" />
              <variable name="opt" doc="" />
              <variable name="series" doc="" />
              <variable name="hAxis" doc="" />
              <variable name="vAxis" doc="" />
            </scope>
            <scope name="ClusteredBars" ilk="function" doc="">
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="dirty" doc="" />
            </scope>
            <scope name="ClusteredColumns" ilk="function" doc="">
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="dirty" doc="" />
            </scope>
            <scope name="Columns" ilk="function" signature="Columns(chart,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="hAxis" doc="" />
                <scope name="vAxis" doc="" />
                <scope name="gap" doc="" />
                <scope name="shadows" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="" />
              <scope name="calculateAxes" ilk="function" signature="calculateAxes(dim)" doc="">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="dirty" doc="" />
              <variable name="opt" doc="" />
              <variable name="series" doc="" />
              <variable name="hAxis" doc="" />
              <variable name="vAxis" doc="" />
            </scope>
            <scope name="Default" ilk="function" signature="Default(chart,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="hAxis" doc="" />
                <scope name="vAxis" doc="" />
                <scope name="lines" doc="" />
                <scope name="areas" doc="" />
                <scope name="markers" doc="" />
                <scope name="shadows" doc="" />
                <scope name="tension" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="" />
              <scope name="calculateAxes" ilk="function" signature="calculateAxes(dim)" doc="">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="dirty" doc="" />
              <variable name="opt" doc="" />
              <variable name="series" doc="" />
              <variable name="hAxis" doc="" />
              <variable name="vAxis" doc="" />
            </scope>
            <scope name="Grid" ilk="function" signature="Grid(chart,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="hAxis" doc="" />
                <scope name="vAxis" doc="" />
                <scope name="hMajorLines" doc="" />
                <scope name="hMinorLines" doc="" />
                <scope name="vMajorLines" doc="" />
                <scope name="vMinorLines" doc="" />
                <scope name="hStripes" doc="" />
                <scope name="vStripes" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="" />
              <scope name="clear" ilk="function" doc="" />
              <scope name="setAxis" ilk="function" signature="setAxis(axis)" doc="">
                <variable ilk="argument" name="axis" />
              </scope>
              <scope name="addSeries" ilk="function" signature="addSeries(run)" doc="">
                <variable ilk="argument" name="run" />
              </scope>
              <scope name="calculateAxes" ilk="function" signature="calculateAxes(dim)" doc="">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope name="isDirty" ilk="function" doc="" />
              <scope name="getRequiredColors" ilk="function" doc="" />
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="_hAxis" attributes="private" doc="" />
              <variable name="_vAxis" attributes="private" doc="" />
              <variable name="dirty" doc="" />
              <variable name="opt" doc="" />
              <variable name="hAxis" doc="" />
              <variable name="vAxis" doc="" />
            </scope>
            <scope name="Lines" ilk="function" doc="">
              <scope name="opt">
                <variable name="lines" doc="" />
              </scope>
            </scope>
            <scope name="Markers" ilk="function" doc="">
              <scope name="opt">
                <variable name="markers" doc="" />
              </scope>
            </scope>
            <scope name="MarkersOnly" ilk="function" doc="">
              <scope name="opt">
                <variable name="lines" doc="" />
                <variable name="markers" doc="" />
              </scope>
            </scope>
            <scope name="Pie" ilk="function" signature="Pie(chart,kwArgs)" doc="">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable name="defaultParams" citdl="Object" doc="">
                <scope name="labels" doc="" />
                <scope name="ticks" doc="" />
                <scope name="fixed" doc="" />
                <scope name="precision" doc="" />
                <scope name="labelOffset" doc="" />
                <scope name="labelStyle" doc="" />
                <scope name="htmlLabels" doc="" />
              </variable>
              <variable name="optionalParams" citdl="Object" doc="">
                <scope name="font" doc="" />
                <scope name="fontColor" doc="" />
                <scope name="radius" doc="" />
              </variable>
              <scope name="clear" ilk="function" doc="" />
              <scope name="setAxis" ilk="function" signature="setAxis(axis)" doc="">
                <variable ilk="argument" name="axis" />
              </scope>
              <scope name="addSeries" ilk="function" signature="addSeries(run)" doc="">
                <variable ilk="argument" name="run" />
              </scope>
              <scope name="calculateAxes" ilk="function" signature="calculateAxes(dim)" doc="">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope name="getRequiredColors" ilk="function" doc="" />
              <scope name="plotEvent" ilk="function" signature="plotEvent(o)" doc="">
                <variable ilk="argument" name="o" />
              </scope>
              <scope name="connect" ilk="function" signature="connect(object,method)" doc="">
                <variable ilk="argument" name="object" />
                <variable ilk="argument" name="method" />
              </scope>
              <scope name="events" ilk="function" doc="" />
              <scope name="_connectEvents" ilk="function" signature="_connectEvents(shape,o)" attributes="private" doc="">
                <variable ilk="argument" name="shape" />
                <variable ilk="argument" name="o" />
              </scope>
              <scope name="render" ilk="function" signature="render(dim,offsets)" returns="continue|stop iteration" attributes="private" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="dirty" doc="" />
              <variable name="dyn" doc="" />
              <variable name="run" doc="" />
              <variable name="opt" doc="" />
            </scope>
            <scope name="Scatter" ilk="function" doc="">
              <scope name="opt">
                <variable name="lines" doc="" />
                <variable name="markers" doc="" />
              </scope>
            </scope>
            <scope name="Stacked" ilk="function" doc="">
              <scope name="calculateAxes" ilk="function" signature="calculateAxes(dim)" doc="">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="_maxRunLength" attributes="private" doc="" />
              <variable name="dirty" doc="" />
            </scope>
            <scope name="StackedAreas" ilk="function" doc="">
              <scope name="opt">
                <variable name="lines" doc="" />
                <variable name="areas" doc="" />
              </scope>
            </scope>
            <scope name="StackedBars" ilk="function" doc="">
              <scope name="calculateAxes" ilk="function" signature="calculateAxes(dim)" doc="">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="_maxRunLength" attributes="private" doc="" />
              <variable name="dirty" doc="" />
            </scope>
            <scope name="StackedColumns" ilk="function" doc="">
              <scope name="calculateAxes" ilk="function" signature="calculateAxes(dim)" doc="">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope name="render" ilk="function" signature="render(dim,offsets)" doc="">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable name="_maxRunLength" attributes="private" doc="" />
              <variable name="dirty" doc="" />
            </scope>
            <scope name="StackedLines" ilk="function" doc="">
              <scope name="opt">
                <variable name="lines" doc="" />
              </scope>
            </scope>
            <variable name="common" citdl="Object" doc="">
              <scope name="makeStroke" ilk="function" signature="makeStroke(stroke)" doc="">
                <variable ilk="argument" name="stroke" />
              </scope>
              <scope name="augmentColor" ilk="function" signature="augmentColor(target,color)" doc="">
                <variable ilk="argument" name="target" />
                <variable ilk="argument" name="color" />
              </scope>
              <scope name="augmentStroke" ilk="function" signature="augmentStroke(stroke,color)" doc="">
                <variable ilk="argument" name="stroke" />
                <variable ilk="argument" name="color" />
              </scope>
              <scope name="augmentFill" ilk="function" signature="augmentFill(fill,color)" doc="">
                <variable ilk="argument" name="fill" />
                <variable ilk="argument" name="color" />
              </scope>
              <variable name="defaultStats" citdl="Object" doc="">
                <scope name="hmin" doc="" />
                <scope name="hmax" doc="" />
                <scope name="vmin" doc="" />
                <scope name="collectSimpleStats" ilk="function" signature="collectSimpleStats(series)" doc="">
                  <variable ilk="argument" name="series" />
                </scope>
                <scope name="collectStackedStats" ilk="function" signature="collectStackedStats(series)" doc="">
                  <variable ilk="argument" name="series" />
                </scope>
                <scope name="curve" ilk="function" signature="curve(a,tension)" doc="">
                  <variable ilk="argument" name="a" citdl="Number[]" />
                  <variable ilk="argument" name="tension" citdl="Number|String" />
                </scope>
              </variable>
              <scope name="collectSimpleStats" ilk="function" signature="collectSimpleStats(series)" doc="">
                <variable ilk="argument" name="series" />
              </scope>
              <scope name="collectStackedStats" ilk="function" signature="collectStackedStats(series)" doc="">
                <variable ilk="argument" name="series" />
              </scope>
              <scope name="curve" ilk="function" signature="curve(a,tension)" doc="">
                <variable ilk="argument" name="a" citdl="Number[]" />
                <variable ilk="argument" name="tension" citdl="Number|String" />
              </scope>
            </variable>
          </variable>
          <variable name="plot3d" citdl="Object" doc="">
            <scope name="Bars" ilk="function" signature="Bars(width,height,kwArgs)" doc="">
              <variable ilk="argument" name="width" />
              <variable ilk="argument" name="height" />
              <variable ilk="argument" name="kwArgs" />
              <scope name="getDepth" ilk="function" doc="" />
              <scope name="generate" ilk="function" signature="generate(chart,creator)" doc="">
                <variable ilk="argument" name="chart" />
                <variable ilk="argument" name="creator" />
              </scope>
              <variable name="depth" doc="" />
              <variable name="gap" doc="" />
              <variable name="data" doc="" />
              <variable name="material" doc="">
                <variable name="color" doc="" />
              </variable>
            </scope>
            <scope name="Base" ilk="function" signature="Base(width,height,kwArgs)" doc="">
              <variable ilk="argument" name="width" />
              <variable ilk="argument" name="height" />
              <variable ilk="argument" name="kwArgs" />
              <scope name="setData" ilk="function" signature="setData(data)" doc="">
                <variable ilk="argument" name="data" />
              </scope>
              <scope name="getDepth" ilk="function" doc="" />
              <scope name="generate" ilk="function" signature="generate(chart,creator)" doc="">
                <variable ilk="argument" name="chart" />
                <variable ilk="argument" name="creator" />
              </scope>
              <variable name="data" doc="" />
              <variable name="width" doc="" />
              <variable name="height" doc="" />
            </scope>
            <scope name="Cylinders" ilk="function" signature="Cylinders(width,height,kwArgs)" doc="">
              <variable ilk="argument" name="width" />
              <variable ilk="argument" name="height" />
              <variable ilk="argument" name="kwArgs" />
              <scope name="getDepth" ilk="function" doc="" />
              <scope name="generate" ilk="function" signature="generate(chart,creator)" doc="">
                <variable ilk="argument" name="chart" />
                <variable ilk="argument" name="creator" />
              </scope>
              <variable name="depth" doc="" />
              <variable name="gap" doc="" />
              <variable name="data" doc="" />
              <variable name="material" doc="">
                <variable name="color" doc="" />
              </variable>
              <variable name="outline" doc="" />
            </scope>
          </variable>
          <variable name="scaler" citdl="Object" doc="">
            <variable name="common" citdl="Object" doc="">
              <scope name="findString" ilk="function" signature="findString(val,text)" doc="">
                <variable ilk="argument" name="val" citdl="String" />
                <variable ilk="argument" name="text" citdl="Array" />
              </scope>
              <scope name="getNumericLabel" ilk="function" signature="getNumericLabel(number,precision,kwArgs)" doc="">
                <variable ilk="argument" name="number" citdl="Number" />
                <variable ilk="argument" name="precision" citdl="Number" />
                <variable ilk="argument" name="kwArgs" citdl="Object" />
              </scope>
            </variable>
            <variable name="linear" citdl="Object" doc="">
              <scope name="buildScaler" ilk="function" signature="buildScaler(min,max,span,kwArgs)" returns="Object" attributes="private" doc="">
                <variable ilk="argument" name="min" citdl="Number" />
                <variable ilk="argument" name="max" citdl="Number" />
                <variable ilk="argument" name="span" citdl="Number" />
                <variable ilk="argument" name="kwArgs" citdl="Object" />
              </scope>
              <scope name="buildTicks" ilk="function" signature="buildTicks(scaler,kwArgs)" returns="Object" attributes="private" doc="">
                <variable ilk="argument" name="scaler" citdl="Object" />
                <variable ilk="argument" name="kwArgs" citdl="Object" />
              </scope>
              <scope name="getTransformerFromModel" ilk="function" signature="getTransformerFromModel(scaler)" returns="Function" attributes="private" doc="">
                <variable ilk="argument" name="scaler" citdl="Object" />
              </scope>
              <scope name="getTransformerFromPlot" ilk="function" signature="getTransformerFromPlot(scaler)" returns="Function" attributes="private" doc="">
                <variable ilk="argument" name="scaler" citdl="Object" />
              </scope>
            </variable>
            <variable name="primitive" citdl="Object" doc="">
              <scope name="buildScaler" ilk="function" signature="buildScaler(min,max,span,kwArgs)" doc="">
                <variable ilk="argument" name="min" citdl="Number" />
                <variable ilk="argument" name="max" citdl="Number" />
                <variable ilk="argument" name="span" citdl="Number" />
                <variable ilk="argument" name="kwArgs" citdl="Object" />
              </scope>
              <scope name="buildTicks" ilk="function" signature="buildTicks(scaler,kwArgs)" returns="Object" attributes="private" doc="">
                <variable ilk="argument" name="scaler" citdl="Object" />
                <variable ilk="argument" name="kwArgs" citdl="Object" />
              </scope>
              <scope name="getTransformerFromModel" ilk="function" signature="getTransformerFromModel(scaler)" returns="Function" attributes="private" doc="">
                <variable ilk="argument" name="scaler" citdl="Object" />
              </scope>
              <scope name="getTransformerFromPlot" ilk="function" signature="getTransformerFromPlot(scaler)" returns="Function" attributes="private" doc="">
                <variable ilk="argument" name="scaler" citdl="Object" />
              </scope>
            </variable>
          </variable>
          <variable name="themes" citdl="Object" doc="">
            <scope name="Adobebricks" doc="" />
            <scope name="Algae" doc="" />
            <scope name="Bahamation" doc="" />
            <scope name="BlueDusk" doc="" />
            <scope name="CubanShirts" doc="" />
            <scope name="Desert" doc="" />
            <scope name="Dollar" doc="" />
            <variable name="ET" citdl="Object" doc="">
              <scope name="greys" doc="" />
            </variable>
            <scope name="Grasshopper" doc="" />
            <scope name="Grasslands" doc="" />
            <scope name="GreySkies" doc="" />
            <scope name="IndigoNation" doc="" />
            <scope name="Ireland" doc="" />
            <scope name="MiamiNice" doc="" />
            <scope name="Midwest" doc="" />
            <scope name="Minty" doc="" />
            <variable name="PlotKit" citdl="Object" doc="">
              <scope name="blue" doc="" />
              <scope name="cyan" doc="" />
              <scope name="green" doc="" />
              <scope name="orange" doc="" />
              <scope name="purple" doc="" />
              <scope name="red" doc="" />
            </variable>
            <scope name="PurpleRain" doc="" />
            <scope name="RoyalPurples" doc="" />
            <scope name="SageToLime" doc="" />
            <scope name="Shrooms" doc="" />
            <scope name="Tufte" doc="" />
            <scope name="WatersEdge" doc="" />
            <scope name="Wetland" doc="" />
          </variable>
          <variable name="widget" citdl="Object" doc="">
            <scope name="Chart2D" ilk="function" doc="">
              <scope name="theme" doc="" />
              <scope name="margins" doc="" />
              <scope name="stroke" doc="" />
              <scope name="fill" doc="" />
              <scope name="buildRendering" ilk="function" doc="" />
              <scope name="resize" ilk="function" signature="resize(box)" doc="">
                <variable ilk="argument" name="box" />
              </scope>
              <variable name="domNode" doc="" />
              <variable name="chart" doc="" />
              <variable name="actions" doc="" />
            </scope>
            <scope name="Legend" ilk="function" doc="A legend for a chart. A legend contains summary labels for each series of data contained in the chart.  Set the boolean horizontal attribute to false to layout legend labels vertically.  (Line or Scatter charts (colored lines with shape symbols) ) -o- Series1		-X- Series2		-v- Series3  (Area/Bar/Pie charts (letters represent colors)) [a] Series1		[b] Series2		[c] Series3">
              <scope name="chartRef" doc="" />
              <scope name="horizontal" doc="" />
              <scope name="templateString" doc="" />
              <scope name="legendNode" doc="" />
              <scope name="legendBody" doc="" />
              <scope name="postCreate" ilk="function" doc="" />
              <scope name="_addLabel" ilk="function" signature="_addLabel(dyn,label)" attributes="private" doc="">
                <variable ilk="argument" name="dyn" />
                <variable ilk="argument" name="label" />
              </scope>
              <scope name="_makeIcon" ilk="function" signature="_makeIcon(div,dyn)" attributes="private" doc="">
                <variable ilk="argument" name="div" />
                <variable ilk="argument" name="dyn" />
              </scope>
              <variable name="chart" doc="" />
              <variable name="_tr" attributes="private" doc="" />
            </scope>
            <scope name="Sparkline" doc="">
              <scope name="theme" doc="" />
              <variable name="margins" citdl="Object" doc="">
                <scope name="l" doc="" />
                <scope name="r" doc="" />
                <scope name="t" doc="" />
                <scope name="b" doc="" />
              </variable>
              <scope name="valueFn" doc="" />
              <scope name="store" doc="" />
              <scope name="field" doc="" />
              <scope name="query" doc="" />
              <scope name="queryOptions" doc="" />
              <scope name="start" doc="" />
              <scope name="count" doc="" />
              <scope name="sort" doc="" />
              <scope name="data" doc="" />
              <scope name="name" doc="" />
              <scope name="buildRendering" ilk="function" doc="" />
            </scope>
          </variable>
        </variable>
        <variable name="collections" citdl="Object" doc="A set of lists and hashes for easy use within your applications.">
          <scope name="BinaryTree" ilk="function" signature="BinaryTree(data)" doc="">
            <variable ilk="argument" name="data" />
            <variable name="TraversalMethods" citdl="Object" doc="">
              <scope name="Preorder" doc="" />
            </variable>
            <variable name="value" doc="" />
            <variable name="right" doc="" />
            <variable name="left" doc="" />
            <variable name="count" doc="" />
            <variable name="root" doc="" />
            <variable name="clone" ilk="function" doc="" />
            <variable name="compare" ilk="function" signature="compare(n)" doc="">
              <variable ilk="argument" name="n" />
            </variable>
            <variable name="compareData" ilk="function" signature="compareData(d)" doc="">
              <variable ilk="argument" name="d" />
            </variable>
            <variable name="add" ilk="function" signature="add(data)" doc="">
              <variable ilk="argument" name="data" />
            </variable>
            <variable name="clear" ilk="function" doc="" />
            <variable name="contains" ilk="function" signature="contains(data)" doc="">
              <variable ilk="argument" name="data" />
            </variable>
            <variable name="deleteData" ilk="function" signature="deleteData(data)" doc="">
              <variable ilk="argument" name="data" />
            </variable>
            <variable name="getIterator" ilk="function" doc="" />
            <variable name="search" ilk="function" signature="search(data)" doc="">
              <variable ilk="argument" name="data" />
            </variable>
            <variable name="toString" ilk="function" signature="toString(order,sep)" doc="">
              <variable ilk="argument" name="order" />
              <variable ilk="argument" name="sep" />
            </variable>
          </scope>
          <scope name="Dictionary" ilk="function" signature="Dictionary(dictionary)" returns="dojox.collections.Dictionary|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator" attributes="private" doc="">
            <variable ilk="argument" name="dictionary" citdl="dojox.collections.Dictionary" />
            <variable name="count" doc="" />
            <variable name="contains" doc="" />
            <variable name="add" ilk="function" signature="add(k,v)" doc="">
              <variable ilk="argument" name="k" citdl="string" />
              <variable ilk="argument" name="v" citdl="object" />
            </variable>
            <variable name="clear" ilk="function" doc="" />
            <variable name="clone" ilk="function" returns="dojox.collections.Dictionary" attributes="private" doc="" />
            <variable name="containsKey" ilk="function" signature="containsKey(k)" returns="bool" attributes="private" doc="">
              <variable ilk="argument" name="k" citdl="string" />
            </variable>
            <variable name="containsValue" ilk="function" signature="containsValue(v)" returns="bool" attributes="private" doc="">
              <variable ilk="argument" name="v" citdl="object" />
            </variable>
            <variable name="entry" ilk="function" signature="entry(k)" returns="dojox.collections.DictionaryEntry" attributes="private" doc="">
              <variable ilk="argument" name="k" citdl="string" />
            </variable>
            <variable name="forEach" ilk="function" signature="forEach(fn,scope)" doc="">
              <variable ilk="argument" name="fn" citdl="function" />
              <variable ilk="argument" name="scope" citdl="object" />
            </variable>
            <variable name="getKeyList" ilk="function" doc="" />
            <variable name="getValueList" ilk="function" doc="" />
            <variable name="item" ilk="function" signature="item(k)" returns="object" attributes="private" doc="">
              <variable ilk="argument" name="k" citdl="string" />
            </variable>
            <variable name="getIterator" ilk="function" returns="dojox.collections.DictionaryIterator" attributes="private" doc="" />
            <variable name="remove" ilk="function" signature="remove(k)" returns="bool" attributes="private" doc="">
              <variable ilk="argument" name="k" citdl="string" />
            </variable>
          </scope>
          <scope name="Queue" ilk="function" signature="Queue(arr)" returns="dojox.collections.Queue|bool|object|dojox.collections.Iterator" attributes="private" doc="">
            <variable ilk="argument" name="arr" citdl="array" />
            <variable name="count" doc="" />
            <variable name="clear" ilk="function" doc="" />
            <variable name="clone" ilk="function" returns="dojox.collections.Queue" attributes="private" doc="" />
            <variable name="contains" ilk="function" signature="contains(o)" returns="bool" attributes="private" doc="">
              <variable ilk="argument" name="o" citdl="object" />
            </variable>
            <variable name="copyTo" ilk="function" signature="copyTo(arr,i)" doc="">
              <variable ilk="argument" name="arr" citdl="array" />
              <variable ilk="argument" name="i" citdl="int" />
            </variable>
            <variable name="dequeue" ilk="function" returns="object" attributes="private" doc="" />
            <variable name="enqueue" ilk="function" signature="enqueue(o)" doc="">
              <variable ilk="argument" name="o" citdl="object" />
            </variable>
            <variable name="forEach" ilk="function" signature="forEach(fn,scope)" doc="">
              <variable ilk="argument" name="fn" citdl="function" />
              <variable ilk="argument" name="scope" citdl="object" />
            </variable>
            <variable name="getIterator" ilk="function" returns="dojox.collections.Iterator" attributes="private" doc="" />
            <variable name="peek" ilk="function" doc="" />
            <variable name="toArray" ilk="function" doc="" />
          </scope>
          <scope name="Set" doc="" />
          <scope name="SortedList" ilk="function" signature="SortedList(dictionary)" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array|int" attributes="private" doc="">
            <variable ilk="argument" name="dictionary" citdl="object" />
            <variable name="count" doc="" />
            <variable name="contains" doc="" />
            <variable name="add" ilk="function" signature="add(k,v)" doc="">
              <variable ilk="argument" name="k" citdl="string" />
              <variable ilk="argument" name="v" citdl="object" />
            </variable>
            <variable name="clear" ilk="function" doc="" />
            <variable name="clone" ilk="function" returns="dojox.collections.SortedList" attributes="private" doc="" />
            <variable name="containsKey" ilk="function" signature="containsKey(k)" returns="bool" attributes="private" doc="">
              <variable ilk="argument" name="k" citdl="string" />
            </variable>
            <variable name="containsValue" ilk="function" signature="containsValue(o)" returns="bool" attributes="private" doc="">
              <variable ilk="argument" name="o" citdl="object" />
            </variable>
            <variable name="copyTo" ilk="function" signature="copyTo(arr,i)" doc="">
              <variable ilk="argument" name="arr" citdl="array" />
              <variable ilk="argument" name="i" citdl="int" />
            </variable>
            <variable name="entry" ilk="function" signature="entry(k)" returns="dojox.collections.DictionaryEntry" attributes="private" doc="">
              <variable ilk="argument" name="k" citdl="string" />
            </variable>
            <variable name="forEach" ilk="function" signature="forEach(fn,scope)" doc="">
              <variable ilk="argument" name="fn" citdl="function" />
              <variable ilk="argument" name="scope" citdl="object" />
            </variable>
            <variable name="getByIndex" ilk="function" signature="getByIndex(i)" returns="object" attributes="private" doc="">
              <variable ilk="argument" name="i" citdl="int" />
            </variable>
            <variable name="getIterator" ilk="function" returns="dojox.collections.DictionaryIterator" attributes="private" doc="" />
            <variable name="getKey" ilk="function" signature="getKey(i)" doc="">
              <variable ilk="argument" name="i" citdl="int" />
            </variable>
            <variable name="getKeyList" ilk="function" returns="array" attributes="private" doc="" />
            <variable name="getValueList" ilk="function" returns="array" attributes="private" doc="" />
            <variable name="indexOfKey" ilk="function" signature="indexOfKey(k)" returns="int" attributes="private" doc="">
              <variable ilk="argument" name="k" citdl="string" />
            </variable>
            <variable name="indexOfValue" ilk="function" signature="indexOfValue(o)" returns="int" attributes="private" doc="">
              <variable ilk="argument" name="o" citdl="object" />
            </variable>
            <variable name="item" ilk="function" signature="item(k)" returns="object" attributes="private" doc="">
              <variable ilk="argument" name="k" citdl="string" />
            </variable>
            <variable name="remove" ilk="function" signature="remove(k)" doc="">
              <variable ilk="argument" name="k" citdl="string" />
            </variable>
            <variable name="removeAt" ilk="function" signature="removeAt(i)" doc="">
              <variable ilk="argument" name="i" citdl="int" />
            </variable>
            <variable name="replace" ilk="function" signature="replace(k,v)" returns="bool" attributes="private" doc="">
              <variable ilk="argument" name="k" citdl="string" />
              <variable ilk="argument" name="v" citdl="object" />
            </variable>
            <variable name="setByIndex" ilk="function" signature="setByIndex(i,o)" doc="">
              <variable ilk="argument" name="i" citdl="int" />
              <variable ilk="argument" name="o" citdl="object" />
            </variable>
          </scope>
          <scope name="Stack" ilk="function" signature="Stack(arr)" returns="bool|dojox.collections.Iterator|object|array" attributes="private" doc="">
            <variable ilk="argument" name="arr" citdl="array" />
            <variable name="count" doc="" />
            <variable name="clear" ilk="function" doc="" />
            <variable name="clone" ilk="function" doc="" />
            <variable name="contains" ilk="function" signature="contains(o)" returns="bool" attributes="private" doc="">
              <variable ilk="argument" name="o" citdl="object" />
            </variable>
            <variable name="copyTo" ilk="function" signature="copyTo(arr,i)" doc="">
              <variable ilk="argument" name="arr" citdl="array" />
              <variable ilk="argument" name="i" citdl="int" />
            </variable>
            <variable name="forEach" ilk="function" signature="forEach(fn,scope)" doc="">
              <variable ilk="argument" name="fn" citdl="function" />
              <variable ilk="argument" name="scope" citdl="object" />
            </variable>
            <variable name="getIterator" ilk="function" returns="dojox.collections.Iterator" attributes="private" doc="" />
            <variable name="peek" ilk="function" returns="object" attributes="private" doc="" />
            <variable name="pop" ilk="function" returns="object" attributes="private" doc="" />
            <variable name="push" ilk="function" signature="push(o)" doc="">
              <variable ilk="argument" name="o" citdl="object" />
            </variable>
            <variable name="toArray" ilk="function" returns="array" attributes="private" doc="" />
          </scope>
          <scope name="DictionaryEntry" ilk="function" signature="DictionaryEntry(k,v)" returns="object|string" attributes="private" doc="">
            <variable ilk="argument" name="k" citdl="string" />
            <variable ilk="argument" name="v" citdl="object" />
            <variable name="key" doc="" />
            <variable name="value" doc="" />
            <variable name="valueOf" ilk="function" returns="object" attributes="private" doc="" />
            <variable name="toString" ilk="function" returns="string" attributes="private" doc="" />
          </scope>
          <scope name="Iterator" ilk="function" signature="Iterator(arr)" returns="bool|object" attributes="private" doc="">
            <variable ilk="argument" name="arr" citdl="array" />
            <variable name="element" doc="" />
            <variable name="atEnd" ilk="function" returns="bool" attributes="private" doc="" />
            <variable name="get" ilk="function" returns="object" attributes="private" doc="" />
            <variable name="map" ilk="function" signature="map(fn,scope)" doc="">
              <variable ilk="argument" name="fn" citdl="function" />
              <variable ilk="argument" name="scope" citdl="object" />
            </variable>
            <variable name="reset" ilk="function" doc="" />
          </scope>
          <scope name="DictionaryIterator" ilk="function" signature="DictionaryIterator(obj)" returns="bool|object" attributes="private" doc="">
            <variable ilk="argument" name="obj" citdl="object" />
            <variable name="element" doc="" />
            <variable name="atEnd" ilk="function" returns="bool" attributes="private" doc="" />
            <variable name="get" ilk="function" returns="object" attributes="private" doc="" />
            <variable name="map" ilk="function" signature="map(fn,scope)" doc="">
              <variable ilk="argument" name="fn" citdl="function" />
              <variable ilk="argument" name="scope" citdl="object" />
            </variable>
            <variable name="reset" ilk="function" doc="" />
          </scope>
          <variable name="_base" citdl="Object" attributes="private" doc="" />
        </variable>
        <variable name="color" citdl="Object" doc="Advanced color methods, including HSV, HSL, and CMYK conversion, a color generator and advanced colorspace calculations.">
          <scope name="Generator" ilk="function" returns="Array" attributes="private" doc="">
            <scope name="initialized" />
            <variable name="base" doc="" />
            <variable name="series" doc="" />
            <variable name="num" doc="" />
            <variable name="angleHigh" doc="" />
            <variable name="angleLow" doc="" />
            <variable name="high" doc="" />
            <variable name="low" doc="" />
            <variable name="analogous" ilk="function" signature="analogous(kwArgs)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="kwArgs" citdl="dojox.color.__AnalogousArgs" />
            </variable>
            <variable name="monochromatic" ilk="function" signature="monochromatic(kwArgs)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="kwArgs" citdl="dojox.color.__GeneratorArgs" />
            </variable>
            <variable name="triadic" ilk="function" signature="triadic(kwArgs)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="kwArgs" citdl="dojox.color.__GeneratorArgs" />
            </variable>
            <variable name="complementary" ilk="function" signature="complementary(kwArgs)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="kwArgs" citdl="dojox.color.__GeneratorArgs" />
            </variable>
            <variable name="angle" doc="" />
            <variable name="splitComplementary" ilk="function" signature="splitComplementary(kwArgs)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="kwArgs" citdl="dojox.color.__GeneratorAngleArgs" />
            </variable>
            <variable name="compound" ilk="function" signature="compound(kwArgs)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="kwArgs" citdl="dojox.color.__GeneratorAngleArgs" />
            </variable>
            <variable name="shades" ilk="function" signature="shades(kwArgs)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="kwArgs" citdl="dojox.color.__GeneratorArgs" />
            </variable>
          </scope>
          <scope name="__AnalogousArgs" ilk="function" attributes="private" doc="">
            <variable name="base" citdl="String" doc="| dojox.Color The base color from which to derive all other colors." />
            <variable name="series" citdl="Number" doc="The number of lines to generate" />
            <variable name="num" citdl="Number" doc="The number of colors to generate" />
            <variable name="angleHigh" citdl="Number" doc="The high hue angle of difference from the base color, subtracted" />
            <variable name="angleLow" citdl="Number" doc="The low hue angle of difference from the base color, added" />
            <variable name="high" citdl="Float" doc="The high part of the range to generate tints and shades" />
            <variable name="low" citdl="Float" doc="The low part of the range to generate tints and shades" />
          </scope>
          <scope name="__GeneratorArgs" ilk="function" attributes="private" doc="">
            <variable name="base" citdl="String" doc="| dojox.Color The base color from which to derive all other colors." />
            <variable name="num" citdl="Number" doc="The number of colors to generate" />
            <variable name="high" citdl="Float" doc="The high part of the range to generate tints and shades" />
            <variable name="low" citdl="Float" doc="The low part of the range to generate tints and shades" />
          </scope>
          <scope name="__GeneratorAngleArgs" ilk="function" attributes="private" doc="">
            <variable name="base" citdl="String" doc="| dojox.Color The base color from which to derive all other colors." />
            <variable name="num" citdl="Number" doc="The number of colors to generate" />
            <variable name="angle" citdl="Number" doc="The angle of hue difference from the base color to use" />
            <variable name="high" citdl="Float" doc="The high part of the range to generate tints and shades" />
            <variable name="low" citdl="Float" doc="The low part of the range to generate tints and shades" />
          </scope>
          <scope name="Palette" ilk="function" signature="Palette(base)" doc="">
            <variable ilk="argument" name="base" citdl="String|Array|dojox.color.Color|dojox.color.Palette" />
            <variable name="colors" citdl="summary" doc="An object that represents a palette of colors. description A Palette is a representation of a set of colors. While the standard number of colors contained in a palette is 5, it can really handle any number of colors.  A palette is useful for the ability to transform all the colors in it using a simple object-based approach. In addition, you can generate palettes using dojox.color.Palette.generate; these generated palettes are based on the palette generators at http://kuler.adobe.com.  dojox.color.Color[] The actual color references in this palette." />
            <scope name="transform" ilk="function" signature="transform(kwArgs)" returns="dojox.color.Palette" attributes="private" doc="">
              <variable ilk="argument" name="kwArgs" citdl="Object" />
            </scope>
            <scope name="clone" ilk="function" returns="dojox.color.Palette" attributes="private" doc="" />
            <variable name="generators" citdl="Object" doc="">
              <scope name="analogous" doc="" />
              <scope name="monochromatic" ilk="function" signature="monochromatic(args)" doc="">
                <variable ilk="argument" name="args" citdl="Object" />
              </scope>
              <scope name="triadic" ilk="function" signature="triadic(args)" doc="">
                <variable ilk="argument" name="args" citdl="Object" />
              </scope>
              <scope name="complementary" ilk="function" signature="complementary(args)" doc="">
                <variable ilk="argument" name="args" citdl="Object" />
              </scope>
              <scope name="splitComplementary" ilk="function" signature="splitComplementary(args)" doc="">
                <variable ilk="argument" name="args" citdl="Object" />
              </scope>
              <scope name="compound" ilk="function" signature="compound(args)" doc="">
                <variable ilk="argument" name="args" citdl="Object" />
              </scope>
              <scope name="shades" ilk="function" signature="shades(args)" doc="">
                <variable ilk="argument" name="args" citdl="Object" />
              </scope>
            </variable>
            <scope name="generate" ilk="function" signature="generate(base,type)" returns="dojox.color.Palette" attributes="private" doc="">
              <variable ilk="argument" name="base" citdl="String|dojox.color.Color" />
              <variable ilk="argument" name="type" citdl="Function|String" />
            </scope>
          </scope>
          <scope name="Color" doc="">
            <scope name="toCmy" ilk="function" returns="Object" attributes="private" doc="" />
            <scope name="toCmyk" ilk="function" returns="Object" attributes="private" doc="" />
            <scope name="toHsl" ilk="function" returns="Object" attributes="private" doc="" />
            <scope name="toHsv" ilk="function" returns="Object" attributes="private" doc="" />
          </scope>
          <scope name="fromCmy" ilk="function" signature="fromCmy(cyan,magenta,yellow)" returns="dojox.color.Color" attributes="private" doc="">
            <variable ilk="argument" name="cyan" citdl="Object|Array|int" />
            <variable ilk="argument" name="magenta" citdl="int" />
            <variable ilk="argument" name="yellow" citdl="int" />
          </scope>
          <scope name="fromCmyk" ilk="function" signature="fromCmyk(cyan,magenta,yellow,black)" returns="dojox.color.Color" attributes="private" doc="">
            <variable ilk="argument" name="cyan" citdl="Object|Array|int" />
            <variable ilk="argument" name="magenta" citdl="int" />
            <variable ilk="argument" name="yellow" citdl="int" />
            <variable ilk="argument" name="black" citdl="int" />
          </scope>
          <scope name="fromHsl" ilk="function" signature="fromHsl(hue,saturation,luminosity)" returns="dojox.color.Color" attributes="private" doc="">
            <variable ilk="argument" name="hue" citdl="Object|Array|int" />
            <variable ilk="argument" name="saturation" citdl="int" />
            <variable ilk="argument" name="luminosity" citdl="int" />
          </scope>
          <scope name="fromHsv" ilk="function" signature="fromHsv(hue,saturation,value)" returns="dojox.color.Color" attributes="private" doc="">
            <variable ilk="argument" name="hue" citdl="Object|Array|int" />
            <variable ilk="argument" name="saturation" citdl="int" />
            <variable ilk="argument" name="value" citdl="int" />
          </scope>
          <scope name="blend" doc="" />
          <scope name="fromRgb" doc="" />
          <scope name="fromHex" doc="" />
          <scope name="fromArray" doc="" />
          <scope name="fromString" doc="" />
          <scope name="greyscale" doc="" />
          <variable name="_base" citdl="Object" attributes="private" doc="" />
        </variable>
        <variable name="cometd" citdl="Object" doc="A cometd client written in Dojo">
          <scope name="RestChannels" ilk="function" signature="RestChannels(options)" doc="Initiates the REST Channels protocol">
            <variable ilk="argument" name="options" citdl="Keyword" doc="arguments: The *autoSubscribeRoot* parameter: When this is set, all REST service requests that have this prefix will be auto-subscribed. The default is '/' (all REST requests). The *url* parameter: This is the url to connect to for server-sent messages. The default is &amp;amp;quot;/channels&amp;amp;quot;. The *autoReconnectTime* parameter: This is amount time to wait to reconnect with a connection is broken" />
            <scope name="absoluteUrl" ilk="function" signature="absoluteUrl(baseUrl,relativeUrl)" doc="">
              <variable ilk="argument" name="baseUrl" />
              <variable ilk="argument" name="relativeUrl" />
            </scope>
            <scope name="acceptType" doc="" />
            <variable name="subscriptions" citdl="Object" doc="" />
            <variable name="subCallbacks" citdl="Object" doc="" />
            <scope name="autoReconnectTime" doc="" />
            <scope name="sendAsJson" doc="" />
            <scope name="url" doc="" />
            <scope name="autoSubscribeRoot" doc="" />
            <scope name="open" ilk="function" doc="Startup the transport (connect to the &amp;amp;quot;channels&amp;amp;quot; resource to receive updates from the server)." returns="this can be called after dojo is unloaded, just do nothing in that case" attributes="private" />
            <scope name="_send" ilk="function" signature="_send(method,args,data)" attributes="private" doc="">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="subscribe" ilk="function" signature="subscribe(channel,args)" doc="Subscribes to a channel/uri, and returns a dojo.Deferred object for the response from the subscription request" returns="don't process the response, the response will be received in the main channels response" attributes="private">
              <variable ilk="argument" name="channel" citdl="String" doc="the uri for the resource you want to monitor" />
              <variable ilk="argument" name="args" citdl="dojo.__XhrArgs" doc="See dojo.xhr  headers: These are the headers to be applied to the channel subscription request  callback: This will be called when a event occurs for the channel The callback will be called with a single argument: 	callback(message) where message is an object that follows the XHR API: status : Http status statusText : Http status text getAllResponseHeaders() : The response headers getResponseHeaders(headerName) : Retrieve a header by name responseText : The response body as text with the following additional Bayeux properties data : The response body as JSON channel : The channel/url of the response" />
            </scope>
            <scope name="publish" ilk="function" signature="publish(channel,data)" doc="Publish an event.">
              <variable ilk="argument" name="channel" citdl="Channel/resource" doc="path to publish to" />
              <variable ilk="argument" name="data" citdl="data" doc="to publish" />
            </scope>
            <scope name="_processMessage" ilk="function" signature="_processMessage(message)" returns="indicate an error" attributes="private" doc="">
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="onprogress" ilk="function" signature="onprogress(xhr,data,contentType)" doc="">
              <variable ilk="argument" name="xhr" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="contentType" />
            </scope>
            <scope name="get" ilk="function" signature="get(channel,args)" doc="GET the initial value of the resource and subscribe to it See subscribe for parameter values">
              <variable ilk="argument" name="channel" citdl="String" />
              <variable ilk="argument" name="args" citdl="dojo.__XhrArgs" />
            </scope>
            <variable name="receive" ilk="function" signature="receive(message)" doc="Called when a message is received from the server">
              <variable ilk="argument" name="message" citdl="A" doc="cometd/XHR message" />
            </variable>
            <scope name="disconnected" ilk="function" doc="called when our channel gets disconnected" />
            <scope name="unsubscribe" ilk="function" signature="unsubscribe(channel,args)" doc="unsubscribes from the resource See subscribe for parameter values">
              <variable ilk="argument" name="channel" citdl="String" />
              <variable ilk="argument" name="args" citdl="dojo.__XhrArgs" />
            </scope>
            <scope name="disconnect" ilk="function" doc="disconnect from the server" />
            <variable name="connectionId" doc="" />
            <variable name="lastIndex" doc="" />
            <variable name="connected" doc="" />
          </scope>
          <scope name="Connection" ilk="function" signature="Connection(prefix)" returns="return: dojo.Deferred|dojo.Deferred" attributes="private" doc="">
            <variable ilk="argument" name="prefix" />
            <variable name="state" ilk="function" doc="" />
            <variable name="init" ilk="function" signature="init(root,props,bargs)" doc="return: dojo.Deferred  Initialize the cometd implementation of the Bayeux protocol">
              <variable ilk="argument" name="root" citdl="String" doc="The URL of the cometd server. If the root is absolute, the host is examined to determine if xd transport is needed. Otherwise the same domain is assumed." />
              <variable ilk="argument" name="props" citdl="Object" doc="An optional object that is used as the basis of the handshake message" />
              <variable ilk="argument" name="bargs" citdl="Object" doc="An optional object of bind args mixed in with the send of the handshake" />
            </variable>
            <variable name="url" doc="" />
            <variable name="_isXD" attributes="private" doc="" />
            <variable name="_props" attributes="private" doc="" />
            <variable name="_messageQ" attributes="private" doc="" />
            <variable name="_subscriptions" attributes="private" doc="" />
            <variable name="_initialized" attributes="private" doc="" />
            <variable name="batch" doc="" />
            <variable name="publish" ilk="function" signature="publish(channel,data,props)" doc="publishes the passed message to the cometd server for delivery on the specified topic">
              <variable ilk="argument" name="channel" citdl="String" doc="the destination channel for the message" />
              <variable ilk="argument" name="data" citdl="Object" doc="a JSON object containing the message &amp;amp;quot;payload&amp;amp;quot; properties: Optional. Other meta-data to be mixed into the top-level of the message" />
              <variable ilk="argument" name="props" citdl="Object" />
            </variable>
            <variable name="subscribe" ilk="function" signature="subscribe(channel,objOrFunc,funcName,props)" doc="return: dojo.Deferred  inform the server of this client's interest in channel" returns="dojo.Deferred" attributes="private">
              <variable ilk="argument" name="channel" citdl="String" doc="name of the cometd channel to subscribe to" />
              <variable ilk="argument" name="objOrFunc" citdl="Object" doc="an object scope for funcName or the name or reference to a function to be called when messages are delivered to the channel" />
              <variable ilk="argument" name="funcName" citdl="String" doc="the second half of the objOrFunc/funcName pair for identifying a callback function to notifiy upon channel message delivery" />
              <variable ilk="argument" name="props" citdl="Object" />
            </variable>
            <variable name="unsubscribe" ilk="function" signature="unsubscribe(channel,objOrFunc,funcName,props)" doc="inform the server of this client's disinterest in channel" returns="dojo.Deferred" attributes="private">
              <variable ilk="argument" name="channel" citdl="String" doc="name of the cometd channel to unsubscribe from" />
              <variable ilk="argument" name="objOrFunc" citdl="Object" doc="an object scope for funcName or the name or reference to a function to be called when messages are delivered to the channel. If null then all subscribers to the channel are unsubscribed." />
              <variable ilk="argument" name="funcName" citdl="String" doc="the second half of the objOrFunc/funcName pair for identifying a callback function to notifiy upon channel message delivery" />
              <variable ilk="argument" name="props" citdl="Object" />
            </variable>
            <variable name="disconnect" ilk="function" doc="Disconnect from the server." />
            <variable name="_connected" attributes="private" doc="" />
            <variable name="_handshook" attributes="private" doc="" />
            <variable name="subscribed" ilk="function" signature="subscribed(channel,message)" doc="">
              <variable ilk="argument" name="channel" citdl="String" />
              <variable ilk="argument" name="message" citdl="Object" />
            </variable>
            <variable name="unsubscribed" ilk="function" signature="unsubscribed(channel,message)" doc="">
              <variable ilk="argument" name="channel" citdl="String" />
              <variable ilk="argument" name="message" citdl="Object" />
            </variable>
            <variable name="tunnelInit" ilk="function" signature="tunnelInit(childLocation,childDomain)" doc="">
              <variable ilk="argument" name="childLocation" />
              <variable ilk="argument" name="childDomain" />
            </variable>
            <variable name="tunnelCollapse" ilk="function" doc="" />
            <variable name="_backoff" ilk="function" attributes="private" doc="" />
            <variable name="_advice" attributes="private" doc="">
              <variable name="interval" doc="" />
              <variable name="reconnect" doc="" />
            </variable>
            <variable name="_backon" ilk="function" attributes="private" doc="" />
            <variable name="_backoffInterval" attributes="private" doc="" />
            <variable name="_interval" ilk="function" attributes="private" doc="" />
            <variable name="_publishMeta" ilk="function" signature="_publishMeta(action,successful,props)" attributes="private" doc="">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="successful" />
              <variable ilk="argument" name="props" />
            </variable>
            <variable name="_finishInit" ilk="function" signature="_finishInit(data)" doc="Handle the handshake return from the server and initialize connection if all is OK" attributes="private">
              <variable ilk="argument" name="data" />
            </variable>
            <variable name="handshakeReturn" doc="" />
            <variable name="currentTransport" doc="" />
            <variable name="clientId" doc="" />
            <variable name="_extendIn" ilk="function" signature="_extendIn(message)" doc="Handle extensions for inbound messages" attributes="private">
              <variable ilk="argument" name="message" />
            </variable>
            <variable name="_extendOut" ilk="function" signature="_extendOut(message)" doc="Handle extensions for inbound messages" attributes="private">
              <variable ilk="argument" name="message" />
            </variable>
            <variable name="deliver" ilk="function" signature="deliver(messages)" doc="">
              <variable ilk="argument" name="messages" />
            </variable>
            <variable name="_deliver" ilk="function" signature="_deliver(message)" attributes="private" doc="">
              <variable ilk="argument" name="message" />
            </variable>
            <variable name="lastMessage" doc="" />
            <variable name="_sendMessage" ilk="function" signature="_sendMessage(message)" attributes="private" doc="">
              <variable ilk="argument" name="message" citdl="object" />
            </variable>
            <variable name="startBatch" ilk="function" doc="" />
            <variable name="endBatch" ilk="function" doc="" />
            <variable name="_onUnload" ilk="function" attributes="private" doc="" />
            <variable name="_connectTimeout" ilk="function" doc="Return the connect timeout in ms, calculated as the minimum of the advised timeout and the configured timeout. Else 0 to indicate no client side timeout" attributes="private" />
          </scope>
          <scope name="connectionTypes" doc="" />
          <variable name="_base" citdl="Object" attributes="private" doc="" />
          <scope name="callbackPollTransport" ilk="function" doc="">
            <scope name="initialized" />
            <variable name="_connectionType" attributes="private" doc="" />
            <variable name="_cometd" attributes="private" doc="">
              <variable name="_polling" attributes="private" doc="" />
            </variable>
            <variable name="check" ilk="function" signature="check(types,version,xdomain)" doc="">
              <variable ilk="argument" name="types" />
              <variable ilk="argument" name="version" />
              <variable ilk="argument" name="xdomain" />
            </variable>
            <variable name="tunnelInit" ilk="function" doc="" />
            <variable name="tunnelCollapse" doc="" />
            <variable name="_connect" attributes="private" doc="" />
            <variable name="deliver" doc="" />
            <variable name="openTunnelWith" ilk="function" signature="openTunnelWith(content,url)" doc="">
              <variable ilk="argument" name="content" />
              <variable ilk="argument" name="url" />
            </variable>
            <variable name="sendMessages" ilk="function" signature="sendMessages(messages)" doc="">
              <variable ilk="argument" name="messages" citdl="array" />
            </variable>
            <variable name="startup" ilk="function" signature="startup(handshakeData)" doc="">
              <variable ilk="argument" name="handshakeData" />
            </variable>
            <variable name="disconnect" ilk="function" doc="" />
            <variable name="cancelConnect" ilk="function" doc="" />
          </scope>
          <scope name="longPollTransport" doc="" />
          <scope name="longPollTransportFormEncoded" ilk="function" doc="">
            <scope name="initialized" />
            <variable name="_connectionType" attributes="private" doc="" />
            <variable name="_cometd" attributes="private" doc="">
              <variable name="_connected" attributes="private" doc="" />
              <variable name="_polling" attributes="private" doc="" />
            </variable>
            <variable name="check" ilk="function" signature="check(types,version,xdomain)" doc="">
              <variable ilk="argument" name="types" />
              <variable ilk="argument" name="version" />
              <variable ilk="argument" name="xdomain" />
            </variable>
            <variable name="tunnelInit" ilk="function" doc="" />
            <variable name="tunnelCollapse" ilk="function" doc="" />
            <variable name="_connect" ilk="function" attributes="private" doc="" />
            <variable name="_initialized" attributes="private" doc="" />
            <variable name="deliver" ilk="function" signature="deliver(message)" doc="">
              <variable ilk="argument" name="message" />
            </variable>
            <variable name="openTunnelWith" ilk="function" signature="openTunnelWith(content,url)" doc="">
              <variable ilk="argument" name="content" />
              <variable ilk="argument" name="url" />
            </variable>
            <variable name="_poll" attributes="private" doc="" />
            <variable name="sendMessages" ilk="function" signature="sendMessages(messages)" doc="">
              <variable ilk="argument" name="messages" />
            </variable>
            <variable name="startup" ilk="function" signature="startup(handshakeData)" doc="">
              <variable ilk="argument" name="handshakeData" />
            </variable>
            <variable name="disconnect" ilk="function" doc="" />
            <variable name="cancelConnect" ilk="function" doc="" />
          </scope>
          <scope name="longPollTransportJsonEncoded" ilk="function" doc="">
            <scope name="initialized" />
            <variable name="_connectionType" attributes="private" doc="" />
            <variable name="_cometd" attributes="private" doc="">
              <variable name="_connected" attributes="private" doc="" />
              <variable name="_polling" attributes="private" doc="" />
            </variable>
            <variable name="check" ilk="function" signature="check(types,version,xdomain)" doc="">
              <variable ilk="argument" name="types" />
              <variable ilk="argument" name="version" />
              <variable ilk="argument" name="xdomain" />
            </variable>
            <variable name="tunnelInit" ilk="function" doc="" />
            <variable name="tunnelCollapse" ilk="function" doc="" />
            <variable name="_connect" ilk="function" attributes="private" doc="" />
            <variable name="_initialized" attributes="private" doc="" />
            <variable name="deliver" ilk="function" signature="deliver(message)" doc="">
              <variable ilk="argument" name="message" />
            </variable>
            <variable name="openTunnelWith" ilk="function" signature="openTunnelWith(messages,url)" doc="">
              <variable ilk="argument" name="messages" />
              <variable ilk="argument" name="url" />
            </variable>
            <variable name="_poll" attributes="private" doc="" />
            <variable name="sendMessages" ilk="function" signature="sendMessages(messages)" doc="">
              <variable ilk="argument" name="messages" />
            </variable>
            <variable name="startup" ilk="function" signature="startup(handshakeData)" doc="">
              <variable ilk="argument" name="handshakeData" />
            </variable>
            <variable name="disconnect" ilk="function" doc="" />
            <variable name="cancelConnect" ilk="function" doc="" />
          </scope>
          <variable name="timestamp" citdl="Object" doc="" />
          <scope name="timesync" ilk="function" returns="return: long|return: Date" attributes="private" doc="">
            <scope name="initialized" />
            <variable name="_window" attributes="private" doc="" />
            <variable name="_minWindow" attributes="private" doc="" />
            <variable name="_offsets" attributes="private" doc="" />
            <variable name="offset" doc="" />
            <variable name="samples" doc="" />
            <variable name="getServerTime" ilk="function" doc="" />
            <variable name="getServerDate" ilk="function" doc="" />
            <variable name="setTimeout" ilk="function" signature="setTimeout(call,atTimeOrDate)" doc="">
              <variable ilk="argument" name="call" citdl="function" doc="Summary Set a timeout function relative to server time  the function to call when the timeout occurs atTimeOrTime: a long timestamp or a Date representing the server time at which the timeout should occur." />
              <variable ilk="argument" name="atTimeOrDate" citdl="long|Date" />
            </variable>
            <variable name="_in" ilk="function" signature="_in(msg)" attributes="private" doc="">
              <variable ilk="argument" name="msg" citdl="Object" doc="The incoming bayeux message" />
            </variable>
            <variable name="_out" ilk="function" signature="_out(msg)" attributes="private" doc="">
              <variable ilk="argument" name="msg" citdl="The" doc="outgoing bayeux message" />
            </variable>
          </scope>
        </variable>
        <variable name="data" citdl="Object" doc="Additional dojo.data data stores and demos">
          <scope name="AndOrWriteStore" ilk="function" signature="AndOrWriteStore(keywordParameters)" doc="">
            <variable ilk="argument" name="keywordParameters" citdl="object" doc="typeMap object) The structure of the typeMap object is as follows: { type0: function || object, type1: function || object, ... typeN: function || object } Where if it is a function, it is assumed to be an object constructor that takes the value of _value as the initialization parameters. It is serialized assuming object.toString() serialization. If it is an object, then it is assumed to be an object of general form: { type: function, //constructor. deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately. serialize:	function(object) //The function that converts the object back into the proper file format form. }" />
            <variable name="referenceIntegrity" doc="" />
            <scope name="_assert" ilk="function" signature="_assert(condition)" attributes="private" doc="">
              <variable ilk="argument" name="condition" citdl="boolean" />
            </scope>
            <scope name="_getIdentifierAttribute" ilk="function" attributes="private" doc="" />
            <scope name="newItem" ilk="function" signature="newItem(keywordArgs,parentInfo)" doc="See dojo.data.api.Write.newItem()" returns="item" attributes="private">
              <variable ilk="argument" name="keywordArgs" citdl="Object" />
              <variable ilk="argument" name="parentInfo" citdl="Object" />
            </scope>
            <scope name="_removeArrayElement" ilk="function" signature="_removeArrayElement(array,element)" attributes="private" doc="">
              <variable ilk="argument" name="array" citdl="Array" />
              <variable ilk="argument" name="element" citdl="anything" />
            </scope>
            <scope name="deleteItem" ilk="function" signature="deleteItem(item)" doc="See dojo.data.api.Write.deleteItem()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="setValue" ilk="function" signature="setValue(item,attribute,value)" doc="See dojo.data.api.Write.set()" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="value" citdl="almost anything" />
            </scope>
            <scope name="setValues" ilk="function" signature="setValues(item,attribute,values)" doc="See dojo.data.api.Write.setValues()" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="values" citdl="array" />
            </scope>
            <scope name="unsetAttribute" ilk="function" signature="unsetAttribute(item,attribute)" doc="See dojo.data.api.Write.unsetAttribute()">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="_setValueOrValues" ilk="function" signature="_setValueOrValues(item,attribute,newValueOrValues,callOnSet)" returns="boolean" attributes="private" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="newValueOrValues" citdl="anything" />
              <variable ilk="argument" name="callOnSet" citdl="boolean" />
            </scope>
            <scope name="_addReferenceToMap" ilk="function" signature="_addReferenceToMap(refItem,parentItem,attribute)" doc="Method to add an reference map entry for an item and attribute." attributes="private">
              <variable ilk="argument" name="refItem" citdl="item" doc="The item that is referenced." />
              <variable ilk="argument" name="parentItem" citdl="item" doc="The item that holds the new reference to refItem." />
              <variable ilk="argument" name="attribute" citdl="string" doc="The attribute on parentItem that contains the new reference." />
            </scope>
            <scope name="_removeReferenceFromMap" ilk="function" signature="_removeReferenceFromMap(refItem,parentItem,attribute)" doc="Method to remove an reference map entry for an item and attribute." attributes="private">
              <variable ilk="argument" name="refItem" citdl="item" doc="The item that is referenced." />
              <variable ilk="argument" name="parentItem" citdl="item" doc="The item holding a reference to refItem." />
              <variable ilk="argument" name="attribute" citdl="strin" doc="The attribute on parentItem that contains the reference." />
            </scope>
            <scope name="_dumpReferenceMap" ilk="function" doc="Function to dump the reverse reference map of all items in the store for debug purposes." attributes="private" />
            <scope name="_getValueOrValues" ilk="function" signature="_getValueOrValues(item,attribute)" attributes="private" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="_flatten" ilk="function" signature="_flatten(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="_getNewFileContentString" ilk="function" doc="Generate a string that can be saved to a file. The result should look similar to: http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json" attributes="private" />
            <scope name="_isEmpty" ilk="function" signature="_isEmpty(something)" doc="Function to determine if an array or object has no properties or values." returns="boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="The" doc="array or object to examine." />
            </scope>
            <scope name="save" ilk="function" signature="save(keywordArgs)" doc="See dojo.data.api.Write.save()">
              <variable ilk="argument" name="keywordArgs" citdl="object" />
            </scope>
            <scope name="revert" ilk="function" doc="See dojo.data.api.Write.revert()" returns="boolean" attributes="private" />
            <scope name="isDirty" ilk="function" signature="isDirty(item)" doc="See dojo.data.api.Write.isDirty()" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="onSet" ilk="function" signature="onSet(item,attribute,oldValue,newValue)" doc="See dojo.data.api.Notification.onSet()  No need to do anything. This method is here just so that the client code can connect observers to it.">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="oldValue" citdl="object | array" />
              <variable ilk="argument" name="newValue" citdl="object | array" />
            </scope>
            <scope name="onNew" ilk="function" signature="onNew(newItem,parentInfo)" doc="See dojo.data.api.Notification.onNew()  No need to do anything. This method is here just so that the client code can connect observers to it.">
              <variable ilk="argument" name="newItem" citdl="item" />
              <variable ilk="argument" name="parentInfo" citdl="object" />
            </scope>
            <scope name="onDelete" ilk="function" signature="onDelete(deletedItem)" doc="See dojo.data.api.Notification.onDelete()  No need to do anything. This method is here just so that the client code can connect observers to it.">
              <variable ilk="argument" name="deletedItem" citdl="item" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="Over-ride of base close function of ItemFileReadStore to add in check for store state.">
              <variable ilk="argument" name="request" citdl="object" />
            </scope>
            <variable name="_saveInProgress" attributes="private" doc="" />
            <variable name="_pending" attributes="private" doc="" />
          </scope>
          <scope name="AtomReadStore" ilk="function" doc="Constructor for the AtomRead store." signature="AtomReadStore(args)">
            <variable ilk="argument" name="args" citdl="object" doc="An anonymous object to initialize properties. It expects the following values:" />
            <variable name="url" citdl="The" doc="url to a service or an XML document that represents the store" />
            <variable name="label" doc="" />
            <variable name="sendQuery" citdl="A" doc="boolean indicate to add a query string to the service URL" />
            <variable name="unescapeHTML" citdl="A" doc="boolean to specify whether or not to unescape HTML text" />
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="Return an attribute value">
              <variable ilk="argument" name="item" citdl="item" doc="An item returned by a call to the 'fetch' method." />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="A attribute of the Atom Entry" />
              <variable ilk="argument" name="defaultValue" citdl="value" doc="A default value" />
              <variable name="return_summary" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="Return an attribute value">
              <variable ilk="argument" name="item" citdl="item" doc="An item returned by a call to the 'fetch' method." />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="A attribute of the Atom Entry" />
              <variable name="return_summary" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="Return an array of attribute names" returns="array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="An XML element" />
              <variable name="return_summary" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="Check whether an element has the attribute" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="must be created by the AtomReadStore instance." />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="An attribute of an Atom Entry item." />
              <variable name="return_summary" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="Check whether the attribute values contain the value" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="must be an instance of a dojox.data.XmlItem from the store instance." />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="A tag name of a child element, An XML attribute name or one of special names" />
              <variable ilk="argument" name="value" citdl="anything" />
              <variable name="return_summary" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(something)" doc="Check whether the object is an item (XML element) item: An object to check" returns="boolean|boolran" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
              <variable name="return_summary" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="Check whether the object is an item (XML element) and loaded item: An object to check" returns="boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
              <variable name="return_summary" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="Load an item (XML element)">
              <variable ilk="argument" name="keywordArgs" citdl="object" doc="containing the args for loadItem. See dojo.data.api.Read.loadItem()" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="Return supported data APIs" returns="array" attributes="private">
              <variable name="return_summary" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()" returns="undefined" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()" returns="array|null" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getFeedValue" ilk="function" signature="getFeedValue(attribute,defaultValue)" doc="Non-API method for retrieving values regarding the Atom feed, rather than the Atom entries.">
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope name="getFeedValues" ilk="function" signature="getFeedValues(attribute,defaultValue)" doc="Non-API method for retrieving values regarding the Atom feed, rather than the Atom entries.">
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope name="_initItem" ilk="function" signature="_initItem(item)" doc="Initializes an item before it can be parsed." attributes="private">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(request,fetchHandler,errorHandler)" doc="Retrieves the items from the Atom XML document." attributes="private">
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="fetchHandler" />
              <variable ilk="argument" name="errorHandler" />
            </scope>
            <scope name="_getFetchUrl" ilk="function" signature="_getFetchUrl(request)" attributes="private" doc="">
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="_getItems" ilk="function" signature="_getItems(document,request)" doc="Parses the document in a first pass" attributes="private">
              <variable ilk="argument" name="document" />
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close()">
              <variable ilk="argument" name="request" citdl="dojo.data.api.Request || keywordArgs || null" />
            </scope>
            <scope name="_getItem" ilk="function" signature="_getItem(element)" attributes="private" doc="">
              <variable ilk="argument" name="element" />
            </scope>
            <scope name="_parseItem" ilk="function" signature="_parseItem(item)" attributes="private" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_unescapeHTML" ilk="function" signature="_unescapeHTML(text)" attributes="private" doc="">
              <variable ilk="argument" name="text" />
            </scope>
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to test for being contained by the store." />
            </scope>
            <variable name="_feedMetaData" attributes="private" doc="" />
            <variable name="_items" attributes="private" doc="" />
            <variable name="rewriteUrl" doc="" />
          </scope>
          <scope name="ClientFilter" ilk="function" doc="This is an abstract class that data stores can extend to add updateable result set functionality as well as client side querying capabilities. This enables widgets to be aware of how active results change in response to the modifications/notifications.">
            <scope name="updateResultSet" ilk="function" signature="updateResultSet(resultSet,request)" doc="Attempts to update the given result set based on previous notifications">
              <variable ilk="argument" name="resultSet" citdl="Array" doc="The result set array that should be updated" />
              <variable ilk="argument" name="request" citdl="Object" doc="This object follows the same meaning as the keywordArgs passed to a dojo.data.api.Read.fetch." />
            </scope>
            <scope name="querySuperSet" ilk="function" signature="querySuperSet(argsSuper,argsSub)" doc="Determines whether the provided arguments are super/sub sets of each other">
              <variable ilk="argument" name="argsSuper" citdl="Dojo" doc="Data Fetch arguments" />
              <variable ilk="argument" name="argsSub" citdl="Dojo" doc="Data Fetch arguments" />
            </scope>
            <scope name="serverVersion" doc="" />
            <scope name="cachingFetch" ilk="function" signature="cachingFetch(args)" doc="">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="isUpdateable" ilk="function" signature="isUpdateable(request)" doc="Returns whether the provide fetch arguments can be used to update an existing list">
              <variable ilk="argument" name="request" citdl="Object" doc="See dojo.data.api.Read.fetch request" />
            </scope>
            <scope name="clientSideFetch" ilk="function" signature="clientSideFetch(request,baseResults)" doc="Performs a query on the client side and returns the results as an array">
              <variable ilk="argument" name="request" citdl="Object" doc="See dojo.data.api.Read.fetch request" />
              <variable ilk="argument" name="baseResults" citdl="Array" doc="This provides the result set to start with for client side querying" />
            </scope>
            <scope name="matchesQuery" ilk="function" signature="matchesQuery(item,request)" doc="">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="makeComparator" ilk="function" signature="makeComparator(sort)" doc="returns a comparator function for the given sort order array" returns="keep the order unchanged" attributes="private">
              <variable ilk="argument" name="sort" citdl="See" doc="dojox.data.api.Read.fetch" />
            </scope>
            <variable name="onSet" doc="" />
            <variable name="onNew" doc="" />
            <variable name="onDelete" doc="" />
            <variable name="_updates" attributes="private" doc="" />
            <variable name="_fetchCache" attributes="private" doc="" />
          </scope>
          <scope name="CouchDBRestStore" ilk="function" doc="">
            <scope name="save" ilk="function" signature="save(kwArgs)" doc="">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope name="fetch" ilk="function" signature="fetch(args)" doc="This only differs from JsonRestStore in that it, will put the query string the query part of the URL and it handles start and count">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="_processResults" ilk="function" signature="_processResults(results)" attributes="private" doc="">
              <variable ilk="argument" name="results" />
            </scope>
            <scope name="getStores" ilk="function" signature="getStores(couchServerUrl)" doc="">
              <variable ilk="argument" name="couchServerUrl" />
            </scope>
          </scope>
          <scope name="CssClassStore" ilk="function" doc="Basic store to display CSS information.">
            <scope name="_labelAttribute" attributes="private" doc="" />
            <scope name="_idAttribute" attributes="private" doc="" />
            <scope name="_cName" attributes="private" doc="" />
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValues()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="_handleRule" ilk="function" signature="_handleRule(rule,styleSheet,href)" doc="Handles the creation of an item based on the passed rule. In this store, this implies parsing out all available class names." attributes="private">
              <variable ilk="argument" name="rule" />
              <variable ilk="argument" name="styleSheet" />
              <variable ilk="argument" name="href" />
            </scope>
            <scope name="_handleReturn" ilk="function" doc="Handles the return from a fetching action. Delegates requests to act on the resulting item set to eitehr the _handleFetchReturn or _handleFetchByIdentityReturn depending on where the request originated." attributes="private" />
            <scope name="_handleFetchByIdentityReturn" ilk="function" signature="_handleFetchByIdentityReturn(request)" doc="Handles a fetchByIdentity request by finding the correct item." attributes="private">
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="See dojo.data.api.Identity.getIdentity()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="See dojo.data.api.Identity.getIdentityAttributes()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(request)" doc="See dojo.data.api.Identity.fetchItemByIdentity()">
              <variable ilk="argument" name="request" citdl="request" />
            </scope>
            <variable name="_pending" attributes="private" doc="" />
          </scope>
          <scope name="CssRuleStore" ilk="function" doc="Basic store to display CSS information." signature="CssRuleStore(keywordParameters)">
            <variable ilk="argument" name="keywordParameters" citdl="Object" />
            <scope name="_storeRef" attributes="private" doc="" />
            <scope name="_labelAttribute" attributes="private" doc="" />
            <variable name="_cache" attributes="private" doc="" />
            <scope name="_browserMap" attributes="private" doc="" />
            <scope name="_cName" attributes="private" doc="" />
            <scope name="setContext" ilk="function" signature="setContext(context)" doc="">
              <variable ilk="argument" name="context" citdl="Array" doc="Sets the context in which queries are executed Array - Array of CSS string paths to execute queries within" />
              <scope name="context" citdl="Sets" doc="the context in which queries are executed Array - Array of CSS string paths to execute queries within" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
            <scope name="isItem" ilk="function" signature="isItem(item)" doc="See dojo.data.api.Read.isItem()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttribute()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValues()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()" returns="boolean." attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="See dojo.data.api.Read.isItemLoaded()" returns="boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="keywordArgs" citdl="object" />
            </scope>
            <scope name="fetch" ilk="function" signature="fetch(request)" doc="See dojo.data.api.Read.fetch()">
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="_fetch" ilk="function" signature="_fetch(request)" doc="Populates the _allItems object with unique class names" attributes="private">
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="_handleRule" ilk="function" signature="_handleRule(rule,styleSheet,href)" doc="Handles the creation of an item based on the passed rule. In this store, this implies parsing out all available class names." attributes="private">
              <variable ilk="argument" name="rule" />
              <variable ilk="argument" name="styleSheet" />
              <variable ilk="argument" name="href" />
            </scope>
            <scope name="_handleReturn" ilk="function" doc="Handles the return from a fetching action. Delegates requests to act on the resulting item set to eitehr the _handleFetchReturn or _handleFetchByIdentityReturn depending on where the request originated." attributes="private" />
            <scope name="_handleFetchReturn" ilk="function" signature="_handleFetchReturn(request)" doc="Handles a fetchByIdentity request by finding the correct items." attributes="private">
              <variable ilk="argument" name="request" citdl="Request" />
            </scope>
            <scope name="close" ilk="function" doc="See dojo.data.api.Read.close() Clears out the cache and allItems objects, meaning all future fetches will requery the stylesheets." />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to test for being contained by the store." />
            </scope>
            <scope name="_containsValue" ilk="function" signature="_containsValue(item,attribute,value,regexp)" doc="Internal function for looking at the values contained by the item." returns="Boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The data item to examine for attribute values." />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to inspect." />
              <variable ilk="argument" name="value" citdl="anything" doc="The value to match." />
              <variable ilk="argument" name="regexp" citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'" />
            </scope>
            <variable name="context" doc="" />
            <variable name="_pending" attributes="private" doc="" />
            <variable name="_allItems" attributes="private" doc="" />
            <variable name="_waiting" attributes="private" doc="" />
            <variable name="gatherHandle" doc="" />
          </scope>
          <scope name="CsvStore" ilk="function" doc="initializer" signature="CsvStore(keywordParameters)">
            <variable ilk="argument" name="keywordParameters" citdl="Object" doc="label String} The column label for the column to use for the label returned by getLabel." />
            <variable name="url" doc="" />
            <variable name="label" doc="" />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="attribute" citdl="item || String" doc="The attribute to test for being contained by the store." />
            </scope>
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue() Note that for the CsvStore, an empty string value is the same as no value, so the defaultValue would be returned instead of an empty string." returns="String" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" />
              <variable ilk="argument" name="defaultValue" citdl="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValues() CSV syntax does not support multi-valued attributes, so this is just a wrapper function for getValue()." returns="Array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()" returns="Array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttribute() The hasAttribute test is true if attribute has an index number within the item's array length AND if the item has a value for that attribute. Note that for the CsvStore, an empty string value is the same as no value." returns="Boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()" returns="boolean." attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" />
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="_containsValue" ilk="function" signature="_containsValue(item,attribute,value,regexp)" doc="Internal function for looking at the values contained by the item." returns="Boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The data item to examine for attribute values." />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="The attribute to inspect." />
              <variable ilk="argument" name="value" citdl="anything" doc="The value to match." />
              <variable ilk="argument" name="regexp" citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(something)" doc="See dojo.data.api.Read.isItem()" returns="Boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="See dojo.data.api.Read.isItemLoaded() The CsvStore always loads all items, so if it's an item, then it's loaded." returns="Boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(item)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" returns="Object" attributes="private" />
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()" returns="String|undefined" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()" returns="array|null" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(keywordArgs,findCallback,errorCallback)" doc="See dojo.data.util.simpleFetch.fetch()" attributes="private">
              <variable ilk="argument" name="keywordArgs" citdl="Object" />
              <variable ilk="function" name="findCallback" />
              <variable ilk="function" name="errorCallback" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close()">
              <variable ilk="argument" name="request" citdl="dojo.data.api.Request || keywordArgs || null" />
            </scope>
            <scope name="_getArrayOfArraysFromCsvFileContents" ilk="function" signature="_getArrayOfArraysFromCsvFileContents(csvFileContents)" doc="" returns="null" attributes="private">
              <variable ilk="argument" name="csvFileContents" citdl="string" />
            </scope>
            <scope name="_splitLines" ilk="function" signature="_splitLines(csvContent)" doc="Function to split the CSV file contents into separate lines. Since line breaks can occur inside quotes, a Regexp didn't work as well. A quick passover parse should be just as efficient." attributes="private">
              <variable ilk="argument" name="csvContent" />
            </scope>
            <scope name="_processData" ilk="function" signature="_processData(data)" attributes="private" doc="">
              <variable ilk="argument" name="data" citdl="String" />
            </scope>
            <scope name="_createItemFromIdentity" ilk="function" signature="_createItemFromIdentity(identity)" returns="Object" attributes="private" doc="">
              <variable ilk="argument" name="identity" citdl="String" />
            </scope>
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="See dojo.data.api.Identity.getIdentity()" returns="String|null" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(keywordArgs)" doc="See dojo.data.api.Identity.fetchItemByIdentity()">
              <variable ilk="argument" name="keywordArgs" citdl="Object" />
            </scope>
            <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="See dojo.data.api.Identity.getIdentifierAttributes()  Identity isn't a public attribute in the item, it's the row position index. So, return null.">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="_handleQueuedFetches" ilk="function" doc="Internal function to execute delayed request in the store. Execute any deferred fetches now." attributes="private" />
            <variable name="_loadInProgress" attributes="private" doc="" />
            <variable name="_csvData" attributes="private" doc="" />
            <variable name="_attributes" attributes="private" doc="" />
            <variable name="_dataArray" attributes="private" doc="" />
            <variable name="_arrayOfAllItems" attributes="private" doc="" />
            <variable name="_loadFinished" attributes="private" doc="" />
            <variable name="_queuedFetches" attributes="private" doc="" />
            <variable name="_attributeIndexes" attributes="private" doc="" />
            <variable name="_storeProp" attributes="private" doc="" />
            <variable name="_idProp" attributes="private" doc="" />
            <variable name="_features" attributes="private" doc="" />
          </scope>
          <scope name="FileStore" ilk="function" signature="FileStore(args)" doc="A simple store that provides a datastore interface to a filesystem.">
            <variable ilk="argument" name="args" citdl="Object" />
            <variable name="url" citdl="The" doc="URL of the service which provides the file store serverside implementation." />
            <scope name="_storeRef" attributes="private" doc="" />
            <variable name="label" citdl="The"
            doc="attribute of the file to use as the huma-readable text. Default is 'name'. The purpose of this store is to represent a file as a datastore item. The datastore item by default has the following attributes that can be examined on it. directory:	Boolean indicating if the file item represents a directory. name:	The filename with no path informatiom. path:	The file complete file path including name, relative to the location the file service scans from size:	The size of the file, in bytes. parentDir:	The parent directory path. children:	Any child files contained by a directory file item.  Note that the store's server call pattern is RESTlike.  The store also supports the passing of configurable options to the back end service, such as expanding all child files (no lazy load), displaying hidden files, displaying only directories, and so on. These are defined through a comma-separated list in declarative, or through setting the options array in programmatic." />
            <scope name="_identifier" attributes="private" doc="" />
            <scope name="_attributes" attributes="private" doc="" />
            <variable name="pathSeparator" doc="" />
            <variable name="options" doc="" />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to test for being contained by the store." />
            </scope>
            <variable name="pathAsQueryParam" doc="" />
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttributes()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="See dojo.data.api.Identity.getIdentity()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(item)" doc="See dojo.data.api.Read.isItemLoaded()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(item)" doc="See dojo.data.api.Read.isItem()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close()">
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="fetch" ilk="function" signature="fetch(request)" doc="Fetch items that match to a query">
              <variable ilk="argument" name="request" citdl="A" doc="request object fetchHandler: A function to call for fetched items errorHandler: A function to call on error" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(keywordArgs)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope name="_processResult" ilk="function" signature="_processResult(data,request)" attributes="private" doc="">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="_processItemArray" ilk="function" signature="_processItemArray(itemArray)" doc="Internal function for processing an array of items for return." attributes="private">
              <variable ilk="argument" name="itemArray" />
            </scope>
            <scope name="_processItem" ilk="function" signature="_processItem(item)" doc="Internal function for processing an item returned from the store. It sets up the store ref as well as sets up the attributes necessary to invoke a lazy load on a child, if there are any." attributes="private">
              <variable ilk="argument" name="item" />
            </scope>
          </scope>
          <scope name="FlickrRestStore" ilk="function" signature="FlickrRestStore(args)" doc="Initializer for the FlickrRestStore store.">
            <variable ilk="argument" name="args" citdl="Object" />
            <variable name="_id" citdl="Integer" doc="A unique identifier for this store." attributes="private" />
            <scope name="_requestCount" citdl="Integer" doc="A counter for the number of requests made. This is used to define the callback function that Flickr will use." attributes="private" />
            <scope name="_flickrRestUrl" citdl="String" doc="The URL to the Flickr REST services." attributes="private" />
            <variable name="_apikey" citdl="String" doc="The users API key to be used when accessing Flickr REST services." attributes="private" />
            <scope name="_storeRef" citdl="String" doc="A key used to mark an data store item as belonging to this store." attributes="private" />
            <variable name="_cache" citdl="Array" doc="An Array of all previously downloaded picture info." attributes="private" />
            <variable name="_prevRequests" citdl="Object" doc="A HashMap used to record the signature of a request to prevent duplicate request being made." attributes="private" />
            <variable name="_handlers" citdl="Object" doc="A HashMap used to record the handlers registered for a single remote request. Multiple requests may be made for the same information before the first request has finished. Each element of this Object is an array of handlers to call back when the request finishes. This prevents multiple requests being made for the same information." attributes="private" />
            <variable name="_sortAttributes" citdl="Object" doc="A quick lookup of valid attribute names in a sort query." attributes="private">
              <scope name="date-posted" doc="" />
              <scope name="date-taken" doc="" />
              <scope name="interestingness" doc="" />
            </variable>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(request,fetchHandler,errorHandler)" doc="Fetch flickr items that match to a query" attributes="private">
              <variable ilk="argument" name="request" citdl="Object" doc="A request object" />
              <variable ilk="function" name="fetchHandler" doc="A function to call for fetched items" />
              <variable ilk="function" name="errorHandler" doc="A function to call on error" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValue()" returns="String|www.flickr.com/photos/&amp;quot; + item.owner + &amp;quot;/&amp;quot; + item.id ]; // String" attributes="private">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="_processFlickrData" ilk="function" signature="_processFlickrData(data,request,cacheKey)" doc="Processes the raw data from Flickr and updates the internal cache." returns="Array" attributes="private">
              <variable ilk="argument" name="data" citdl="Object" doc="Data returned from Flickr" />
              <variable ilk="argument" name="request" citdl="Object" doc="The original dojo.data.Request object passed in by the user.  If the data contains an 'item' object, it has not come from the REST services, so process it using the FlickrStore." />
              <variable ilk="argument" name="cacheKey" citdl="String" />
            </scope>
            <scope name="_checkPrevRanges" ilk="function" signature="_checkPrevRanges(primaryKey,start,count)" attributes="private" doc="">
              <variable ilk="argument" name="primaryKey" />
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="count" />
            </scope>
            <variable name="label" doc="" />
            <variable name="_prevRequestRanges" attributes="private" doc="" />
            <variable name="_maxPhotosPerUser" attributes="private" doc="" />
          </scope>
          <scope name="FlickrStore" ilk="function" signature="FlickrStore(args)" doc="Initializer for the FlickrStore store.">
            <variable ilk="argument" name="args" citdl="Object" />
            <scope name="_storeRef" attributes="private" doc="" />
            <variable name="label" doc="" />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to test for being contained by the store." />
            </scope>
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttributes()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(item)" doc="See dojo.data.api.Read.isItemLoaded()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(item)" doc="See dojo.data.api.Read.isItem()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close()">
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(request,fetchHandler,errorHandler)" doc="Fetch flickr items that match to a query" attributes="private">
              <variable ilk="argument" name="request" citdl="A" doc="request object" />
              <variable ilk="argument" name="fetchHandler" citdl="A" doc="function to call for fetched items" />
              <variable ilk="argument" name="errorHandler" citdl="A" doc="function to call on error" />
            </scope>
            <scope name="_processFlickrData" ilk="function" signature="_processFlickrData(data)" attributes="private" doc="">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="_unescapeHtml" ilk="function" signature="_unescapeHtml(str)" doc="Utility function to un-escape XML special characters in an HTML string." attributes="private">
              <variable ilk="argument" name="str" citdl="String" doc=". The string to un-escape" />
              <variable name="return_summary" />
            </scope>
          </scope>
          <scope name="GoogleFeedStore" ilk="function"
          doc="A data store for retrieving RSS and Atom feeds from Google. The feeds can come from any source, which is specified in the &amp;amp;quot;url&amp;amp;quot; parameter of the query passed to the &amp;amp;quot;fetch&amp;amp;quot; function. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The feed entry title.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;link - The URL for the HTML version of the feed entry.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - The full content of the blog post, in HTML format&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;summary - A snippet of information about the feed entry, in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;published - The string date on which the entry was published. You can parse the date with new Date(store.getValue(item, &amp;amp;quot;published&amp;amp;quot;)&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;categories - An array of string tags for the entry&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: url - The URL of the feed to retrieve">

            <scope name="_type" attributes="private" doc="" />
            <scope name="_googleUrl" attributes="private" doc="" />
            <scope name="_attributes" attributes="private" doc="" />
            <scope name="_queryAttr" attributes="private" doc="" />
            <scope name="_processItem" ilk="function" signature="_processItem(item,request)" attributes="private" doc="">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="_getItems" ilk="function" signature="_getItems(data)" attributes="private" doc="">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="_createContent" ilk="function" signature="_createContent(query,callback,request)" attributes="private" doc="">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="request" />
            </scope>
          </scope>
          <scope name="GoogleSearchStore" ilk="function" doc="Initializer for the GoogleSearchStore store." signature="GoogleSearchStore(args)">
            <variable ilk="argument" name="args" citdl="Object" />
            <variable name="_id" citdl="Integer" doc="A unique identifier for this store." attributes="private" />
            <scope name="_requestCount" citdl="Integer" doc="A counter for the number of requests made. This is used to define the callback function that GoogleSearchStore will use." attributes="private" />
            <scope name="_googleUrl" citdl="String" doc="The URL to Googles search web service." attributes="private" />
            <scope name="_storeRef" citdl="String" doc="The internal reference added to each item pointing at the store which owns it." attributes="private" />
            <scope name="_attributes" citdl="Array" doc="The list of attributes that this store supports" attributes="private" />
            <variable name="label" citdl="String" doc="The default attribute which acts as a label for each item." />
            <scope name="_type" attributes="private" doc="" />
            <scope name="_queryAttr" attributes="private" doc="" />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to test for being contained by the store." />
            </scope>
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttributes()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(item)" doc="See dojo.data.api.Read.isItemLoaded()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(item)" doc="See dojo.data.api.Read.isItem()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close()">
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="_format" ilk="function" signature="_format(item,name)" returns="base implementation does not format any items" attributes="private" doc="">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="name" />
            </scope>
            <scope name="fetch" ilk="function" signature="fetch(request)" doc="Fetch Google search items that match to a query" returns="an error occurred, do not return anything else." attributes="private">
              <variable ilk="argument" name="request" citdl="A" doc="request object fetchHandler: A function to call for fetched items errorHandler: A function to call on error" />
            </scope>
            <scope name="_processItem" ilk="function" signature="_processItem(item,data)" attributes="private" doc="">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="_getItems" ilk="function" signature="_getItems(data)" attributes="private" doc="">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="_createContent" ilk="function" signature="_createContent(query,callback,request)" attributes="private" doc="">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="request" />
            </scope>
            <variable name="_key" attributes="private" doc="" />
            <variable name="_lang" attributes="private" doc="" />
          </scope>
          <scope name="GoogleWebSearchStore" ilk="function"
          doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The page title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The page title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the page&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the item&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;visibleUrl - The URL with no protocol specified.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;cacheUrl - The URL to the copy of the document cached by Google&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for" />
          <scope name="GoogleBlogSearchStore" ilk="function"
          doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The blog post title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The blog post title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the blog post&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;blogUrl - The URL for the blog&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;postUrl - The URL for the a single blog post&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;visibleUrl - The URL with no protocol specified. &amp;amp;lt;li&amp;amp;gt;cacheUrl - The URL to the copy of the document cached by Google &amp;amp;lt;li&amp;amp;gt;author - The author of the blog post&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;publishedDate - The published date, in RFC-822 format&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for">

            <scope name="_type" attributes="private" doc="" />
            <scope name="_attributes" attributes="private" doc="" />
          </scope>
          <scope name="GoogleLocalSearchStore" ilk="function"
          doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The blog post title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The blog post title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the blog post&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the item&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;lat - The latitude.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;lng - The longtitude.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;streetAddress - The street address&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;city - The city&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;region - The region&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;country - The country&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;phoneNumbers - Phone numbers associated with this address. Can be one or more.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;ddUrl - A URL that can be used to provide driving directions from the center of the search results to this search results&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;ddUrlToHere - A URL that can be used to provide driving directions from this search result to a user specified location&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;staticMapUrl - The published date, in RFC-822 format&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for">

            <scope name="_type" attributes="private" doc="" />
            <scope name="_attributes" attributes="private" doc="" />
          </scope>
          <scope name="GoogleVideoSearchStore" ilk="function"
          doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The blog post title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The blog post title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the blog post&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the item&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;published - The published date, in RFC-822 format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;publisher - The name of the publisher.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;duration - The approximate duration, in seconds, of the video.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbWidth - The width in pixels of the video.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbHeight - The height in pixels of the video&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbUrl - The URL to a thumbnail representation of the video.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;playUrl - If present, supplies the url of the flash version of the video that can be played inline on your page. To play this video simply create and &amp;amp;lt;embed&amp;amp;gt; element on your page using this value as the src attribute and using application/x-shockwave-flash as the type attribute. If you want the video to play right away, make sure to append &amp;amp;amp;autoPlay=true to the url..&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for">

            <scope name="_type" attributes="private" doc="" />
            <scope name="_attributes" attributes="private" doc="" />
          </scope>
          <scope name="GoogleNewsSearchStore" ilk="function"
          doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The news story title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The news story title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the news story&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the item&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;publisher - The name of the publisher&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;clusterUrl - A URL pointing to a page listing related storied.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;location - The location of the news story.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;publishedDate - The date of publication, in RFC-822 format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;relatedStories - An optional array of objects specifying related stories. Each object has the following subset of properties: &amp;amp;quot;title&amp;amp;quot;, &amp;amp;quot;titleNoFormatting&amp;amp;quot;, &amp;amp;quot;url&amp;amp;quot;, &amp;amp;quot;unescapedUrl&amp;amp;quot;, &amp;amp;quot;publisher&amp;amp;quot;, &amp;amp;quot;location&amp;amp;quot;, &amp;amp;quot;publishedDate&amp;amp;quot;. &amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for">

            <scope name="_type" attributes="private" doc="" />
            <scope name="_attributes" attributes="private" doc="" />
          </scope>
          <scope name="GoogleBookSearchStore" ilk="function"
          doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The book title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The book title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;authors - An array of authors&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the item&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;bookId - An identifier for the book, usually an ISBN.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;pageCount - The number of pages in the book.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;publishedYear - The year of publication.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for">

            <scope name="_type" attributes="private" doc="" />
            <scope name="_attributes" attributes="private" doc="" />
          </scope>
          <scope name="GoogleImageSearchStore" ilk="function"
          doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The image title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The image title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the image&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;unescapedUrl - The URL for the image, with URL escaping. This is often more readable&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbUrl - The URL for the image thumbnail&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;visibleUrl - A shortened version of the URL associated with the result, stripped of a protocol and path&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;originalContextUrl - The URL of the page containing the image.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;width - The width of the image in pixels.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;height - The height of the image in pixels.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbWidth - The width of the image thumbnail in pixels.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbHeight - The height of the image thumbnail in pixels.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the image, in HTML format&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;contentNoFormatting - A snippet of information about the image, in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for">

            <scope name="_type" attributes="private" doc="" />
            <scope name="_attributes" attributes="private" doc="" />
          </scope>
          <scope name="HtmlStore" ilk="function" signature="HtmlStore(args)" doc="Initializer for the HTML table store.">
            <variable ilk="argument" name="args" citdl="Object" doc="An anonymous object to initialize properties. It expects the following values:" />
            <variable name="url" citdl="The" doc="url of the remote page to load" />
            <variable name="dataId" citdl="The" doc="id of the table element in the remote page" />
            <scope name="_indexItems" ilk="function" attributes="private" doc="" />
            <scope name="_getHeadings" ilk="function" doc="Function to load the attribute names from the table header so that the attributes (cells in a row), can have a reasonable name. For list items, returns single implicit heading, [&amp;amp;quot;name&amp;amp;quot;]" attributes="private" />
            <scope name="_getAllItems" ilk="function" doc="Function to return all rows in the table as an array of items." returns="array" attributes="private" />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." returns="int" attributes="private">
              <variable ilk="argument" name="attribute" citdl="String" doc="The attribute to test for being contained by the store." />
              <variable name="return_summary" />
            </scope>
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()" returns="Object || int || Boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="defaultValue" citdl="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValues()" returns="return Value for lists|Array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()" returns="Array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttribute()">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()" returns="boolean." attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="_containsValue" ilk="function" signature="_containsValue(item,attribute,value,regexp)" doc="Internal function for looking at the values contained by the item." returns="Boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The data item to examine for attribute values." />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to inspect." />
              <variable ilk="argument" name="value" citdl="anything" doc="The value to match." />
              <variable ilk="argument" name="regexp" citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(something)" doc="See dojo.data.api.Read.isItem()" returns="boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="See dojo.data.api.Read.isItemLoaded()">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="keywordArgs" citdl="Object" />
            </scope>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(request,fetchHandler,errorHandler)" doc="Fetch items (XML elements) that match to a query" returns="object|null" attributes="private">
              <variable ilk="argument" name="request" citdl="A" doc="request object" />
              <variable ilk="argument" name="fetchHandler" citdl="A" doc="function to call for fetched items" />
              <variable ilk="argument" name="errorHandler" citdl="A" doc="function to call on error" />
            </scope>
            <scope name="_finishFetchItems" ilk="function" signature="_finishFetchItems(request,fetchHandler,errorHandler)" doc="Internal function for processing the passed in request and locating the requested items." attributes="private">
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="fetchHandler" />
              <variable ilk="argument" name="errorHandler" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close() nothing to do here!">
              <variable ilk="argument" name="request" citdl="dojo.data.api.Request || keywordArgs || null" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="See dojo.data.api.Identity.getIdentity()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="See dojo.data.api.Identity.getIdentityAttributes() Identity isn't taken from a public attribute.">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(keywordArgs)" doc="See dojo.data.api.Identity.fetchItemByIdentity()" returns="object|null" attributes="private">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <variable name="_rootNode" attributes="private" doc="" />
            <variable name="_headings" attributes="private" doc="" />
          </scope>
          <scope name="HtmlTableStore" ilk="function" signature="HtmlTableStore(args)" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
            <variable name="url" doc="" />
            <variable name="tableId" doc="" />
            <scope name="_getHeadings" ilk="function" doc="Function to load the attribute names from the table header so that the attributes (cells in a row), can have a reasonable name." attributes="private" />
            <scope name="_getAllItems" ilk="function" doc="Function to return all rows in the table as an array of items." returns="array" attributes="private" />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." returns="int" attributes="private">
              <variable ilk="argument" name="attribute" citdl="String" doc="The attribute to test for being contained by the store." />
              <variable name="return_summary" />
            </scope>
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()" returns="Object || int || Boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="defaultValue" citdl="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValues()" returns="Array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()" returns="Array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttribute()">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()" returns="boolean." attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="_containsValue" ilk="function" signature="_containsValue(item,attribute,value,regexp)" doc="Internal function for looking at the values contained by the item." returns="Boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The data item to examine for attribute values." />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to inspect." />
              <variable ilk="argument" name="value" citdl="anything" doc="The value to match." />
              <variable ilk="argument" name="regexp" citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(something)" doc="See dojo.data.api.Read.isItem()" returns="boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="See dojo.data.api.Read.isItemLoaded()">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="keywordArgs" citdl="Object" />
            </scope>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(request,fetchHandler,errorHandler)" doc="Fetch items (XML elements) that match to a query" returns="object|null" attributes="private">
              <variable ilk="argument" name="request" citdl="A" doc="request object" />
              <variable ilk="argument" name="fetchHandler" citdl="A" doc="function to call for fetched items" />
              <variable ilk="argument" name="errorHandler" citdl="A" doc="function to call on error" />
            </scope>
            <scope name="_finishFetchItems" ilk="function" signature="_finishFetchItems(request,fetchHandler,errorHandler)" doc="Internal function for processing the passed in request and locating the requested items." attributes="private">
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="fetchHandler" />
              <variable ilk="argument" name="errorHandler" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close() nothing to do here!">
              <variable ilk="argument" name="request" citdl="dojo.data.api.Request || keywordArgs || null" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="See dojo.data.api.Identity.getIdentity()" returns="int" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="See dojo.data.api.Identity.getIdentityAttributes() Identity isn't taken from a public attribute.">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(keywordArgs)" doc="See dojo.data.api.Identity.fetchItemByIdentity()" returns="object|null" attributes="private">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <variable name="_headings" attributes="private" doc="" />
            <variable name="_rootNode" attributes="private" doc="" />
          </scope>
          <scope name="JsonRestStore" ilk="function" signature="JsonRestStore(options)" doc="JsonRestStore is a Dojo Data store interface to JSON HTTP/REST web storage services that support read and write through GET, PUT, POST, and DELETE.">
            <variable ilk="argument" name="options" citdl="Keyword"
            doc="arguments  The *schema* parameter This is a schema object for this store. This should be JSON Schema format.  The *service* parameter This is the service object that is used to retrieve lazy data and save results The function should be directly callable with a single parameter of an object id to be loaded The function should also have the following methods: put(id,value) - puts the value at the given id post(id,value) - posts (appends) the value at the given id delete(id) - deletes the value corresponding to the given id Note that it is critical that the service parses responses as JSON. If you are using dojox.rpc.Service, the easiest way to make sure this happens is to make the responses have a content type of application/json.  The *target* parameter This is the target URL for this Service store. This may be used in place of a service parameter to connect directly to RESTful URL without using a dojox.rpc.Service object.  The *idAttribute* parameter Defaults to 'id'. The name of the attribute that holds an objects id. This can be a preexisting id provided by the server. If an ID isn't already provided when an object is fetched or added to the store, the autoIdentity system will generate an id for it and add it to the index.  The *syncMode* parameter Setting this to true will set the store to using synchronous calls by default. Sync calls return their data immediately from the calling function, so callbacks are unnecessary" />
            <scope name="target" doc="" />
            <scope name="newItem" ilk="function" signature="newItem(data,parentInfo)" doc="adds a new item to the store at the specified point. Takes two parameters, data, and options.">
              <variable ilk="argument" name="data" citdl="object" doc="*/ The data to be added in as an item." />
              <variable ilk="argument" name="parentInfo" />
            </scope>
            <scope name="deleteItem" ilk="function" signature="deleteItem(item)" doc="deletes item any references to that item from the store.">
              <variable ilk="argument" name="item" citdl="item" doc="to delete" />
            </scope>
            <scope name="changing" ilk="function" signature="changing(item,_deleting)" doc="adds an item to the list of dirty items. This item contains a reference to the item itself as well as a cloned and trimmed version of old item for use with revert.">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="_deleting" />
            </scope>
            <scope name="setValue" ilk="function" signature="setValue(item,attribute,value)" doc="sets 'attribute' on 'item' to 'value'">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="setValues" ilk="function" signature="setValues(item,attribute,values)" doc="sets 'attribute' on 'item' to 'value' value must be an array.">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="values" />
            </scope>
            <scope name="unsetAttribute" ilk="function" signature="unsetAttribute(item,attribute)" doc="unsets 'attribute' on 'item'">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="save" ilk="function" signature="save(kwArgs)" doc="Saves the dirty data using REST Ajax methods. See dojo.data.api.Write for API.  kwArgs.global: This will cause the save to commit the dirty data for all JsonRestStores as a single transaction.">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope name="revert" ilk="function" doc="" />
            <scope name="isDirty" ilk="function" signature="isDirty(item)" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(item)" doc="Checks to see if a passed 'item' is really belongs to this JsonRestStore.">
              <variable ilk="argument" name="item" citdl="object" doc="*/ attribute: /* string */" />
            </scope>
            <scope name="_doQuery" ilk="function" signature="_doQuery(args)" attributes="private" doc="">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="_processResults" ilk="function" signature="_processResults(results,deferred)" attributes="private" doc="">
              <variable ilk="argument" name="results" />
              <variable ilk="argument" name="deferred" />
            </scope>
            <scope name="getConstructor" ilk="function" doc="Gets the constructor for objects from this store" />
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" returns="String" attributes="private" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(args)" doc="">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="onSet" ilk="function" doc="" />
            <scope name="onNew" ilk="function" doc="" />
            <scope name="onDelete" ilk="function" doc="" />
            <scope name="getFeatures" ilk="function" doc="return the store feature set" />
            <variable name="serverVersion" doc="" />
            <variable name="service" doc="">
              <variable name="_store" attributes="private" doc="" />
            </variable>
            <variable name="idAttribute" doc="" />
            <variable name="schema" doc="">
              <variable name="_idAttr" attributes="private" doc="" />
            </variable>
            <variable name="_constructor" attributes="private" doc="" />
            <variable name="_index" attributes="private" doc="" />
          </scope>
          <scope name="_getStoreForItem" ilk="function" signature="_getStoreForItem(item)" returns=")[0]]._store;" attributes="private" doc="">
            <variable ilk="argument" name="item" />
          </scope>
          <scope name="KeyValueStore" ilk="function" doc="constructor" signature="KeyValueStore(keywordParameters)">
            <variable ilk="argument" name="keywordParameters" citdl="Object" doc="dataVar jsonObject}" />
            <variable name="url" doc="" />
            <scope name="data" doc="" />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(item,attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="String" doc="The attribute to test for being contained by the store." />
            </scope>
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="defaultValue" citdl="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValues() Key/Value syntax does not support multi-valued attributes, so this is just a wrapper function for getValue()." returns="Array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttribute()">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()" returns="boolean." attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="_containsValue" ilk="function" signature="_containsValue(item,attribute,value,regexp)" doc="Internal function for looking at the values contained by the item." returns="Boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The data item to examine for attribute values." />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="The attribute to inspect." />
              <variable ilk="argument" name="value" citdl="anything" doc="The value to match." />
              <variable ilk="argument" name="regexp" citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(something)" doc="See dojo.data.api.Read.isItem()" returns="Boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="See dojo.data.api.Read.isItemLoaded() The KeyValueStore always loads all items, so if it's an item, then it's loaded." returns="Boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="keywordArgs" citdl="object" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" returns="Object" attributes="private" />
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close()">
              <variable ilk="argument" name="request" citdl="dojo.data.api.Request || keywordArgs || null" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(keywordArgs,findCallback,errorCallback)" doc="See dojo.data.util.simpleFetch.fetch()" attributes="private">
              <variable ilk="argument" name="keywordArgs" citdl="Object" />
              <variable ilk="function" name="findCallback" />
              <variable ilk="function" name="errorCallback" />
            </scope>
            <scope name="_handleQueuedFetches" ilk="function" doc="Internal function to execute delayed request in the store. Execute any deferred fetches now." attributes="private" />
            <scope name="_processData" ilk="function" signature="_processData(data)" attributes="private" doc="">
              <variable ilk="argument" name="data" citdl="Array" />
            </scope>
            <scope name="_createItem" ilk="function" signature="_createItem(something)" returns="Object" attributes="private" doc="">
              <variable ilk="argument" name="something" citdl="Object" />
            </scope>
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="See dojo.data.api.Identity.getIdentity()" returns="String|null" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="See dojo.data.api.Identity.getIdentifierAttributes()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(keywordArgs)" doc="See dojo.data.api.Identity.fetchItemByIdentity()">
              <variable ilk="argument" name="keywordArgs" citdl="object" />
            </scope>
            <scope name="_finishFetchItemByIdentity" ilk="function" signature="_finishFetchItemByIdentity(items,request)" attributes="private" doc="">
              <variable ilk="argument" name="items" citdl="Array" />
              <variable ilk="argument" name="request" citdl="object" />
            </scope>
            <variable name="_loadInProgress" attributes="private" doc="" />
            <variable name="_keyValueString" attributes="private" doc="" />
            <variable name="_keyValueVar" attributes="private" doc="" />
            <variable name="_queuedFetches" attributes="private" doc="" />
            <variable name="_arrayOfAllItems" attributes="private" doc="" />
            <variable name="_loadFinished" attributes="private" doc="" />
            <variable name="_keyAttribute" attributes="private" doc="" />
            <variable name="_valueAttribute" attributes="private" doc="" />
            <variable name="_storeProp" attributes="private" doc="" />
            <variable name="_features" attributes="private" doc="" />
          </scope>
          <scope name="OpmlStore" ilk="function" doc="constructor" signature="OpmlStore(keywordParameters)">
            <variable ilk="argument" name="keywordParameters" citdl="Object" doc="url String, label: String} Where label is optional and configures what should be used as the return from getLabel()" />
            <variable name="label" doc="" />
            <variable name="url" doc="" />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" attributes="private" doc="">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="attribute" citdl="item || String" doc="The attribute to test for being contained by the store." />
            </scope>
            <scope name="_removeChildNodesThatAreNotElementNodes" ilk="function" signature="_removeChildNodesThatAreNotElementNodes(node,recursive)" attributes="private" doc="">
              <variable ilk="argument" name="node" citdl="node" />
              <variable ilk="argument" name="recursive" citdl="boolean" />
            </scope>
            <scope name="_processRawXmlTree" ilk="function" signature="_processRawXmlTree(rawXmlTree)" attributes="private" doc="">
              <variable ilk="argument" name="rawXmlTree" citdl="xmlDoc" />
            </scope>
            <scope name="_checkChildNodes" ilk="function" signature="_checkChildNodes(node)" doc="Internal function to recurse over all child nodes from the store and add them As non-toplevel items" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" doc="The child node to walk." />
            </scope>
            <scope name="_getItemsArray" ilk="function" signature="_getItemsArray(queryOptions)" doc="Internal function to determine which list of items to search over." attributes="private">
              <variable ilk="argument" name="queryOptions" citdl="object" doc="The query options parameter, if any." />
            </scope>
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()" returns="Object" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" />
              <variable ilk="argument" name="defaultValue" citdl="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValues()" returns="Array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()" returns="Array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttribute()" returns="Boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()" returns="boolean." attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" />
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="_containsValue" ilk="function" signature="_containsValue(item,attribute,value,regexp)" doc="Internal function for looking at the values contained by the item." returns="Boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The data item to examine for attribute values." />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="The attribute to inspect." />
              <variable ilk="argument" name="value" citdl="anything" doc="The value to match." />
              <variable ilk="argument" name="regexp" citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(something)" doc="See dojo.data.api.Read.isItem()">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="See dojo.data.api.Read.isItemLoaded() OpmlStore loads every item, so if it's an item, then it's loaded." returns="Boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(item)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()" returns="String|undefined" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()" returns="array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(keywordArgs,findCallback,errorCallback)" doc="See dojo.data.util.simpleFetch.fetch()" attributes="private">
              <variable ilk="argument" name="keywordArgs" citdl="Object" />
              <variable ilk="function" name="findCallback" />
              <variable ilk="function" name="errorCallback" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" returns="Object" attributes="private" />
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="See dojo.data.api.Identity.getIdentity()" returns="null" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(keywordArgs)" doc="See dojo.data.api.Identity.fetchItemByIdentity()">
              <variable ilk="argument" name="keywordArgs" citdl="Object" />
            </scope>
            <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="See dojo.data.api.Identity.getIdentifierAttributes()  Identity isn't a public attribute in the item, it's the node count. So, return null.">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="_handleQueuedFetches" ilk="function" doc="Internal function to execute delayed request in the store. Execute any deferred fetches now." attributes="private" />
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close()">
              <variable ilk="argument" name="request" citdl="dojo.data.api.Request || keywordArgs || null" />
            </scope>
            <variable name="_loadFinished" attributes="private" doc="" />
            <variable name="_xmlData" attributes="private" doc="" />
            <variable name="_metadataNodes" attributes="private" doc="" />
            <variable name="_loadInProgress" attributes="private" doc="" />
            <variable name="_opmlData" attributes="private" doc="" />
            <variable name="_queuedFetches" attributes="private" doc="" />
            <variable name="_arrayOfTopLevelItems" attributes="private" doc="" />
            <variable name="_arrayOfAllItems" attributes="private" doc="" />
            <variable name="_identityMap" attributes="private" doc="" />
            <variable name="_identCount" attributes="private" doc="" />
            <variable name="_idProp" attributes="private" doc="" />
          </scope>
          <scope name="PersevereStore" ilk="function" doc="">
            <scope name="_toJsonQuery" ilk="function" signature="_toJsonQuery(args)" attributes="private" doc="">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="fetch" ilk="function" signature="fetch(args)" doc="">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="isUpdateable" ilk="function" doc="" />
            <scope name="matchesQuery" ilk="function" signature="matchesQuery(item,request)" doc="">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="clientSideFetch" ilk="function" signature="clientSideFetch(request,baseResults)" doc="">
              <variable ilk="argument" name="request" citdl="Object" />
              <variable ilk="argument" name="baseResults" citdl="Array" />
            </scope>
            <scope name="querySuperSet" ilk="function" signature="querySuperSet(argsSuper,argsSub)" doc="">
              <variable ilk="argument" name="argsSuper" />
              <variable ilk="argument" name="argsSub" />
            </scope>
            <scope name="getStores" ilk="function" signature="getStores(path,sync)" doc="Creates Dojo data stores for all the table/classes on a Persevere server">
              <variable ilk="argument" name="path" citdl="String" doc="URL of the Persevere server's root, this normally just &amp;amp;quot;/&amp;amp;quot; which is the default value if the target is not provided callback: Allows the operation to happen asynchronously return: A map/object of datastores. The name of each property is a the name of a store, and the value is the actual data store object." />
              <variable ilk="argument" name="sync" citdl="Boolean" />
            </scope>
            <scope name="addProxy" ilk="function" doc="Invokes the XHR proxy plugin. Call this if you will be using x-site data." />
          </scope>
          <scope name="PicasaStore" ilk="function" signature="PicasaStore(args)" doc="Initializer for the PicasaStore store.">
            <variable ilk="argument" name="args" citdl="Object" />
            <scope name="_picasaUrl" attributes="private" doc="" />
            <scope name="_storeRef" attributes="private" doc="" />
            <variable name="label" doc="" />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to test for being contained by the store." />
            </scope>
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttributes()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(item)" doc="See dojo.data.api.Read.isItemLoaded()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(item)" doc="See dojo.data.api.Read.isItem()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close()">
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(request,fetchHandler,errorHandler)" doc="Fetch picasa items that match to a query" attributes="private">
              <variable ilk="argument" name="request" citdl="A" doc="request object" />
              <variable ilk="argument" name="fetchHandler" citdl="A" doc="function to call for fetched items" />
              <variable ilk="argument" name="errorHandler" citdl="A" doc="function to call on error" />
            </scope>
            <scope name="_processPicasaData" ilk="function" signature="_processPicasaData(data)" attributes="private" doc="">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="_unescapeHtml" ilk="function" signature="_unescapeHtml(str)" doc="Utility function to un-escape XML special characters in an HTML string." attributes="private">
              <variable ilk="argument" name="str" citdl="String." doc="The string to un-escape" />
              <variable name="return_summary" />
            </scope>
          </scope>
          <scope name="QueryReadStore" ilk="function" doc="This class provides a store that is mainly intended to be used for loading data dynamically from the server, used i.e. for retreiving chunks of data from huge data stores on the server (by server-side filtering!). Upon calling the fetch() method of this store the data are requested from the server if they are not yet loaded for paging (or cached).  For example used for a combobox which works on lots of data. It can be used to retreive the data partially upon entering the letters &amp;amp;quot;ac&amp;amp;quot; it returns only items like &amp;amp;quot;action&amp;amp;quot;, &amp;amp;quot;acting&amp;amp;quot;, etc.  note: The field name &amp;amp;quot;id&amp;amp;quot; in a query is reserved for looking up data by id. This is necessary as before the first fetch, the store has no way of knowing which field the server will declare as identifier." signature="QueryReadStore(params)">
            <variable ilk="argument" name="params" citdl="Object" />
            <scope name="url" doc="" />
            <scope name="requestMethod" doc="" />
            <scope name="_className" attributes="private" doc="" />
            <variable name="_items" attributes="private" doc="" />
            <variable name="_labelAttr" attributes="private" doc="" />
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="defaultValue" citdl="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttribute()">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(something)" doc="">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="">
              <variable ilk="argument" name="something" citdl="anything" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(args)" doc="">
              <variable ilk="argument" name="args" citdl="object" />
            </scope>
            <scope name="fetch" doc="" />
            <scope name="getFeatures" ilk="function" doc="" />
            <scope name="close" ilk="function" signature="close(request)" doc="">
              <variable ilk="argument" name="request" citdl="dojo.data.api.Request || keywordArgs || null" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()" returns="String|undefined" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()" returns="array|null" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="_xhrFetchHandler" ilk="function" signature="_xhrFetchHandler(data,request,fetchHandler,errorHandler)" attributes="private" doc="">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="fetchHandler" />
              <variable ilk="argument" name="errorHandler" />
            </scope>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(request,fetchHandler,errorHandler)"
            doc="The request contains the data as defined in the Read-API. Additionally there is following keyword &amp;amp;quot;serverQuery&amp;amp;quot;.  The *serverQuery* parameter, optional. This parameter contains the data that will be sent to the server. If this parameter is not given the parameter &amp;amp;quot;query&amp;amp;quot;'s data are sent to the server. This is done for some reasons: - to specify explicitly which data are sent to the server, they might also be a mix of what is contained in &amp;amp;quot;query&amp;amp;quot;, &amp;amp;quot;queryOptions&amp;amp;quot; and the paging parameters &amp;amp;quot;start&amp;amp;quot; and &amp;amp;quot;count&amp;amp;quot; or may be even completely different things. - don't modify the request.query data, so the interface using this store can rely on unmodified data, as the combobox dijit currently does it, it compares if the query has changed - request.query is required by the Read-API  I.e. the following examples might be sent via GET: fetch({query:{name:&amp;amp;quot;abc&amp;amp;quot;}, queryOptions:{ignoreCase:true}}) the URL will become: /url.php?name=abc  fetch({serverQuery:{q:&amp;amp;quot;abc&amp;amp;quot;, c:true}, query:{name:&amp;amp;quot;abc&amp;amp;quot;}, queryOptions:{ignoreCase:true}}) the URL will become: /url.php?q=abc&amp;amp;amp;c=true // The serverQuery-parameter has overruled the query-parameter // but the query parameter stays untouched, but is not sent to the server! // The serverQuery contains more data than the query, so they might differ!"
            attributes="private">
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="fetchHandler" />
              <variable ilk="argument" name="errorHandler" />
            </scope>
            <scope name="_filterResponse" ilk="function" signature="_filterResponse(data)" doc="If the data from servers needs to be processed before it can be processed by this store, then this function should be re-implemented in subclass. This default implementation just return the data unchanged." attributes="private">
              <variable ilk="argument" name="data" citdl="The" doc="data received from server" />
            </scope>
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="It throws an error if item is not valid, so you can call it in every method that needs to throw an error when item is invalid." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to test for being contained by the store." />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(keywordArgs)" doc="See dojo.data.api.Identity.fetchItemByIdentity()  See if we have already loaded the item with that id In case there hasn't been a fetch yet, _itemsByIdentity is null and thus a fetch will be triggered below.">
              <variable ilk="argument" name="keywordArgs" citdl="Object" />
            </scope>
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="See dojo.data.api.Identity.getIdentity()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="See dojo.data.api.Identity.getIdentityAttributes()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <variable name="_itemsByIdentity" attributes="private" doc="" />
            <variable name="_identifier" attributes="private" doc="" />
            <variable name="_numRows" attributes="private" doc="" />
            <variable name="lastRequestHash" doc="" />
            <variable name="_lastServerQuery" attributes="private" doc="" />
          </scope>
          <scope name="S3Store" ilk="function" doc="">
            <scope name="_processResults" ilk="function" signature="_processResults(results)" attributes="private" doc="">
              <variable ilk="argument" name="results" />
            </scope>
          </scope>
          <scope name="ServiceStore" ilk="function" signature="ServiceStore(options)" doc="ServiceStore constructor, instantiate a new ServiceStore A ServiceStore can be configured from a JSON Schema. Queries are just passed through to the underlying services">
            <variable ilk="argument" name="options" citdl="Keyword" doc="arguments The *schema* parameter This is a schema object for this store. This should be JSON Schema format.  The *service* parameter This is the service object that is used to retrieve lazy data and save results The function should be directly callable with a single parameter of an object id to be loaded  The *idAttribute* parameter Defaults to 'id'. The name of the attribute that holds an objects id. This can be a preexisting id provided by the server. If an ID isn't already provided when an object is fetched or added to the store, the autoIdentity system will generate an id for it and add it to the index.  The *syncMode* parameter Setting this to true will set the store to using synchronous calls by default. Sync calls return their data immediately from the calling function, so callbacks are unnecessary" />
            <scope name="schema" doc="" />
            <variable name="idAttribute" doc="" />
            <scope name="syncMode" doc="" />
            <scope name="getSchema" ilk="function" doc="" />
            <scope name="loadLazyValues" doc="" />
            <scope name="getValue" ilk="function" signature="getValue(item,property,defaultValue)" doc="Gets the value of an item's 'property'" returns="return the plain value since it was found;|we do, so we can return it|not in item -&amp;gt; return default value" attributes="private">
              <variable ilk="argument" name="item" citdl="Object" doc="The item to get the value from" />
              <variable ilk="argument" name="property" citdl="String" doc="property to look up value for" />
              <variable ilk="argument" name="defaultValue" citdl="value" doc="the default value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,property)" doc="Gets the value of an item's 'property' and returns it. If this value is an array it is just returned, if not, the value is added to an array and that is returned.">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
              <variable ilk="argument" name="property" citdl="string" doc="*/ property to look up value for" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="Gets the available attributes of an item's 'property' and returns it as an array.">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="Checks to see if item has attribute">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
              <variable ilk="argument" name="attribute" citdl="string" doc="*/" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="Checks to see if 'item' has 'value' at 'attribute'">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
              <variable ilk="argument" name="attribute" citdl="string" doc="*/" />
              <variable ilk="argument" name="value" citdl="anything" doc="*/" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(item)" doc="Checks to see if the argument is an item">
              <variable ilk="argument" name="item" citdl="object" doc="*/ attribute: /* string */  we have no way of determining if it belongs, we just have object returned from service queries" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(item)" doc="Checks to see if the item is loaded.">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(args)" doc="Loads an item that has not been loaded yet. If you access a value directly through property access, you can use this to load a lazy (Deferred) value." returns="in synchronous mode this can allow loadItem to return the value" attributes="private">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="_currentId" attributes="private" doc="" />
            <scope name="_processResults" ilk="function" signature="_processResults(results,deferred)" attributes="private" doc="">
              <variable ilk="argument" name="results" />
              <variable ilk="argument" name="deferred" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="">
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="fetch" ilk="function" signature="fetch(args)" doc="See dojo.data.api.Read.fetch  The *queryOptions.cache* parameter If true, indicates that the query result should be cached for future use. This is only available if dojox.data.ClientFilter has been loaded before the ServiceStore  The *syncMode* parameter Indicates that the call should be fetch synchronously if possible (this is not always possible)  The *clientFetch* parameter This is a fetch keyword argument for explicitly doing client side filtering, querying, and paging">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="_doQuery" ilk="function" signature="_doQuery(args)" attributes="private" doc="">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="return the store feature set" />
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="returns an array of attributes that are used to create the label of an item">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="returns the attributes which are used to make up the identity of an item. Basically returns this.idAttribute">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(args)" doc="fetch an item by its identity, by looking in our index of what we have loaded">
              <variable ilk="argument" name="args" />
            </scope>
            <variable name="byId" doc="" />
            <variable name="_index" attributes="private" doc="" />
            <variable name="labelAttribute" doc="" />
          </scope>
          <scope name="SnapLogicStore" ilk="function" signature="SnapLogicStore(args)" doc="Initialize a SnapLogicStore object.">
            <variable ilk="argument" name="args" citdl="Object" doc="An object that contains properties for initializing the new data store object. The following properties are understood:" />
            <variable name="Parts" citdl="Object" doc="">
              <scope name="DATA" doc="" />
              <scope name="COUNT" doc="" />
            </variable>
            <variable name="url" citdl="A" doc="URL to the SnapLogic pipeline's output routed through PipeToHttp. Typically, this will look like &amp;amp;quot;http://&amp;amp;lt;server-host&amp;amp;gt;:&amp;amp;lt;port&amp;amp;gt;/pipe/&amp;amp;lt;pipeline-url&amp;amp;gt;/&amp;amp;lt;pipeline-output-view&amp;amp;gt;&amp;amp;quot;. parameters: An object whose properties define parameters to the pipeline. The values of these properties will be sent to the pipeline as parameters when it run." />
            <scope name="_assertIsItem" ilk="function" signature="_assertIsItem(item)" doc="This function tests whether the item passed in is indeed an item in the store." attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="The item to test for being contained by the store." />
            </scope>
            <scope name="_assertIsAttribute" ilk="function" signature="_assertIsAttribute(attribute)" doc="This function tests whether the item passed in is indeed a valid 'attribute' like type for the store." attributes="private">
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to test for being contained by the store." />
            </scope>
            <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="See dojo.data.api.Read.getValue()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="See dojo.data.api.Read.getAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="See dojo.data.api.Read.hasAttributes()">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(item)" doc="See dojo.data.api.Read.isItemLoaded()" returns="Boolean" attributes="private">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="See dojo.data.api.Read.loadItem()">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="See dojo.data.api.Read.containsValue()" returns="Boolean" attributes="private">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="See dojo.data.api.Read.getValue()" returns="Array" attributes="private">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(item)" doc="See dojo.data.api.Read.isItem()">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close()">
              <variable ilk="argument" name="request" />
            </scope>
            <scope name="_fetchHandler" ilk="function" signature="_fetchHandler(request)" doc="Process data retrieved via fetch and send it back to requester. response: The data returend from the I/O transport. In the normal case, it will be an array of result rows from the pipeline. In the special case for record count optimization, response will be an array with a single element containing the total pipeline result row count. See fetch() for details on this optimization." attributes="private">
              <variable ilk="argument" name="request" citdl="Object" />
            </scope>
            <scope name="_partHandler" ilk="function" signature="_partHandler(request,part,response)" doc="Handle the individual replies for both data and length requests." attributes="private">
              <variable ilk="argument" name="request" citdl="Object" doc="The request/handle object used with the original fetch() call." />
              <variable ilk="argument" name="part" citdl="String" doc="A value indicating which request this handler call is for (this.Parts)." />
              <variable ilk="argument" name="response" citdl="Object" doc="Response received from the underlying IO transport." />
            </scope>
            <scope name="fetch" ilk="function" signature="fetch(request)" doc="See dojo.data.api.Read.close()" returns="Object" attributes="private">
              <variable ilk="argument" name="request" citdl="Object" doc="See dojo.data.api.Read.close() for generic interface.  In addition to the standard Read API fetch support, this store supports an optimization for for retrieving the total count of records in the Pipeline without retrieving the data. To use this optimization, simply provide an onBegin handler without an onItem or onComplete handler." />
            </scope>
            <variable name="_parameters" attributes="private" doc="" />
          </scope>
          <scope name="WikipediaStore" ilk="function" doc="Initializer for the Wikipedia data store interface." signature="WikipediaStore(options)">
            <variable ilk="argument" name="options" />
            <scope name="fetch" ilk="function" signature="fetch(request)" doc="Fetch a page or some partially-loaded search results from Wikipedia. Note that there isn't a way to sort data coming in from the API, so we just ignore the *sort* parameter.">
              <variable ilk="argument" name="request" citdl="object" />
            </scope>
            <scope name="_processResults" ilk="function" signature="_processResults(results,def)" attributes="private" doc="">
              <variable ilk="argument" name="results" />
              <variable ilk="argument" name="def" />
            </scope>
            <variable name="service" doc="" />
            <variable name="idAttribute" doc="" />
          </scope>
          <scope name="XmlStore" ilk="function" doc="Constructor for the XML store." signature="XmlStore(args)">
            <variable ilk="argument" name="args" citdl="object" doc="An anonymous object to initialize properties. It expects the following values:" />
            <variable name="url" citdl="The" doc="url to a service or an XML document that represents the store" />
            <variable name="rootItem" citdl="A" doc="tag name for root items" />
            <variable name="keyAttribute" citdl="An" doc="attribute name for a key or an indentify attributeMap: An anonymous object contains properties for attribute mapping, {&amp;amp;quot;tag_name.item_attribute_name&amp;amp;quot;: &amp;amp;quot;@xml_attribute_name&amp;amp;quot;, ...}" />
            <variable name="label" doc="" />
            <variable name="sendQuery" citdl="A" doc="boolean indicate to add a query string to the service URL" />
            <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="Return an attribute value" returns="object|string" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="An XML element that holds the attribute" />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="A tag name of a child element, An XML attribute name or one of special names" />
              <variable ilk="argument" name="defaultValue" citdl="value" doc="A default value" />
              <variable name="return_summary" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="Return an array of attribute values" returns="array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="An XML element that holds the attribute" />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="A tag name of child elements, An XML attribute name or one of special names" />
              <variable name="return_summary" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="Return an array of attribute names" returns="array" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="An XML element" />
              <variable name="return_summary" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="Check whether an element has the attribute" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="must be an instance of a dojox.data.XmlItem from the store instance." />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="A tag name of a child element, An XML attribute name or one of special names" />
              <variable name="return_summary" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="Check whether the attribute values contain the value" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="must be an instance of a dojox.data.XmlItem from the store instance." />
              <variable ilk="argument" name="attribute" citdl="attribute || attribute-name-string" doc="A tag name of a child element, An XML attribute name or one of special names" />
              <variable ilk="argument" name="value" citdl="anything" />
              <variable name="return_summary" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(something)" doc="Check whether the object is an item (XML element) item: An object to check" returns="boolean|boolran" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
              <variable name="return_summary" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="Check whether the object is an item (XML element) and loaded item: An object to check" returns="boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="anything" />
              <variable name="return_summary" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="Load an item (XML element)">
              <variable ilk="argument" name="keywordArgs" citdl="object" doc="containing the args for loadItem. See dojo.data.api.Read.loadItem()" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="Return supported data APIs" returns="array" attributes="private">
              <variable name="return_summary" />
            </scope>
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="See dojo.data.api.Read.getLabel()" returns="undefined" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="See dojo.data.api.Read.getLabelAttributes()" returns="array|null" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="_fetchItems" ilk="function" signature="_fetchItems(request,fetchHandler,errorHandler)" doc="Fetch items (XML elements) that match to a query" attributes="private">
              <variable ilk="argument" name="request" citdl="A" doc="request object" />
              <variable ilk="argument" name="fetchHandler" citdl="A" doc="function to call for fetched items" />
              <variable ilk="argument" name="errorHandler" citdl="A" doc="function to call on error" />
            </scope>
            <scope name="_getFetchUrl" ilk="function" signature="_getFetchUrl(request)" doc="Generate a URL for fetch" attributes="private">
              <variable ilk="argument" name="request" citdl="A" doc="request object" />
              <variable name="return_summary" />
            </scope>
            <scope name="_getItems" ilk="function" signature="_getItems(document,request)" doc="Fetch items (XML elements) in an XML document based on a request" attributes="private">
              <variable ilk="argument" name="document" citdl="An" doc="XML document" />
              <variable ilk="argument" name="request" citdl="A" doc="request object" />
              <variable name="return_summary" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="See dojo.data.api.Read.close()">
              <variable ilk="argument" name="request" citdl="dojo.data.api.Request || keywordArgs || null" />
            </scope>
            <scope name="newItem" ilk="function" signature="newItem(keywordArgs)" doc="Return a new dojox.data.XmlItem" returns="object" attributes="private">
              <variable ilk="argument" name="keywordArgs" citdl="object" doc="An object containing initial attributes" />
              <variable name="return_summary" />
            </scope>
            <scope name="deleteItem" ilk="function" signature="deleteItem(item)" doc="Delete an dojox.data.XmlItem (wrapper to a XML element)." returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="An XML element to delete" />
              <variable name="return_summary" />
            </scope>
            <scope name="setValue" ilk="function" signature="setValue(item,attribute,value)" doc="Set an attribute value" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="An XML element that holds the attribute" />
              <variable ilk="argument" name="attribute" citdl="attribute || string" doc="A tag name of a child element, An XML attribute name or one of special names" />
              <variable ilk="argument" name="value" citdl="almost anything" doc="A attribute value to set" />
              <variable name="return_summary" />
            </scope>
            <scope name="setValues" ilk="function" signature="setValues(item,attribute,values)" doc="Set attribute values" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="An XML element that holds the attribute" />
              <variable ilk="argument" name="attribute" citdl="attribute || string" doc="A tag name of child elements, an XML attribute name or one of special names value: A attribute value to set" />
              <variable ilk="argument" name="values" citdl="array" />
              <variable name="return_summary" />
            </scope>
            <scope name="unsetAttribute" ilk="function" signature="unsetAttribute(item,attribute)" doc="Remove an attribute" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" doc="An XML element that holds the attribute" />
              <variable ilk="argument" name="attribute" citdl="attribute || string" doc="A tag name of child elements, an XML attribute name or one of special names" />
              <variable name="return_summary" />
            </scope>
            <scope name="save" ilk="function" signature="save(keywordArgs)" doc="Save new and/or modified items (XML elements)">
              <variable ilk="argument" name="keywordArgs" citdl="object" doc="An object for callbacks" />
            </scope>
            <scope name="revert" ilk="function" doc="Invalidate changes (new and/or modified elements)" returns="boolean" attributes="private">
              <variable name="return_summary" />
            </scope>
            <scope name="isDirty" ilk="function" signature="isDirty(item)" doc="Check whether an item is new, modified or deleted">
              <variable ilk="argument" name="item" citdl="item" doc="An item (XML element) to check" />
              <variable name="return_summary" />
            </scope>
            <scope name="_saveItem" ilk="function" signature="_saveItem(item,keywordArgs,method)" attributes="private" doc="">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="keywordArgs" />
              <variable ilk="argument" name="method" />
            </scope>
            <scope name="_getPostUrl" ilk="function" signature="_getPostUrl(item)" doc="Generate a URL for post" returns="string" attributes="private">
              <variable ilk="argument" name="item" citdl="An" doc="item to save" />
              <variable name="return_summary" />
            </scope>
            <scope name="_getPutUrl" ilk="function" signature="_getPutUrl(item)" doc="Generate a URL for put" returns="string" attributes="private">
              <variable ilk="argument" name="item" citdl="An" doc="item to save" />
              <variable name="return_summary" />
            </scope>
            <scope name="_getDeleteUrl" ilk="function" signature="_getDeleteUrl(item)" doc="Generate a URL for delete" returns="string" attributes="private">
              <variable ilk="argument" name="item" citdl="An" doc="item to delete" />
              <variable name="return_summary" />
            </scope>
            <scope name="_getPostContent" ilk="function" signature="_getPostContent(item)" doc="Generate a content to post" returns="XML string" attributes="private">
              <variable ilk="argument" name="item" citdl="An" doc="item to save" />
              <variable name="return_summary" />
            </scope>
            <scope name="_getPutContent" ilk="function" signature="_getPutContent(item)" doc="Generate a content to put" returns="XML string" attributes="private">
              <variable ilk="argument" name="item" citdl="An" doc="item to save" />
              <variable name="return_summary" />
            </scope>
            <scope name="_getAttribute" ilk="function" signature="_getAttribute(tagName,attribute)" returns="object" attributes="private" doc="">
              <variable ilk="argument" name="tagName" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="_getItem" ilk="function" signature="_getItem(element)" returns="object" attributes="private" doc="">
              <variable ilk="argument" name="element" />
            </scope>
            <scope name="_getItemIndex" ilk="function" signature="_getItemIndex(items,element)" returns="int" attributes="private" doc="">
              <variable ilk="argument" name="items" />
              <variable ilk="argument" name="element" />
            </scope>
            <scope name="_backupItem" ilk="function" signature="_backupItem(item)" returns="new or already modified" attributes="private" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_restoreItems" ilk="function" signature="_restoreItems(items)" attributes="private" doc="">
              <variable ilk="argument" name="items" />
            </scope>
            <scope name="_forgetItem" ilk="function" signature="_forgetItem(item)" attributes="private" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_getDocument" ilk="function" signature="_getDocument(element)" returns="DOMDocument" attributes="private" doc="">
              <variable ilk="argument" name="element" />
            </scope>
            <scope name="_getRootElement" ilk="function" signature="_getRootElement(element)" returns="DOMElement" attributes="private" doc="">
              <variable ilk="argument" name="element" />
            </scope>
            <variable name="_newItems" attributes="private" doc="" />
            <variable name="_deletedItems" attributes="private" doc="" />
            <variable name="_modifiedItems" attributes="private" doc="" />
            <variable name="_attributeMap" attributes="private" doc="" />
          </scope>
          <scope name="XmlItem" ilk="function" doc="Initialize with an XML element" signature="XmlItem(element,store)">
            <variable ilk="argument" name="element" citdl="An" doc="XML element" />
            <variable ilk="argument" name="store" citdl="The" doc="containing store, if any." />
            <scope name="toString" ilk="function" doc="Return a value of the first text child of the element" returns="String" attributes="private">
              <variable name="return_summary" />
            </scope>
            <variable name="element" citdl="An" doc="XML element" />
            <variable name="store" citdl="The" doc="containing store, if any." />
          </scope>
          <variable name="css" citdl="Object" doc="">
            <scope name="rules">
              <scope name="forEach" ilk="function" signature="forEach(fn,ctx,context)" doc="">
                <variable ilk="argument" name="fn" />
                <variable ilk="argument" name="ctx" />
                <variable ilk="argument" name="context" />
              </scope>
            </scope>
            <scope name="findStyleSheets" ilk="function" signature="findStyleSheets(sheets)" doc="">
              <variable ilk="argument" name="sheets" />
            </scope>
            <scope name="findStyleSheet" ilk="function" signature="findStyleSheet(sheet)" returns="IE stylesheet has imports[] containing @import'ed rules" attributes="private" doc="">
              <variable ilk="argument" name="sheet" />
            </scope>
            <scope name="determineContext" ilk="function" signature="determineContext(initialStylesheets)" doc="">
              <variable ilk="argument" name="initialStylesheets" />
            </scope>
          </variable>
          <variable name="dom" citdl="Object" doc="">
            <scope name="createDocument" ilk="function" signature="createDocument(str,mimetype)" doc="cross-browser implementation of creating an XML document object." returns="DOMDocument" attributes="private">
              <variable ilk="argument" name="str" citdl="string" doc="Optional text to create the document from. If not provided, an empty XML document will be created. If str is empty string &amp;amp;quot;&amp;amp;quot;, then a new empty document will be created." />
              <variable ilk="argument" name="mimetype" citdl="string" doc="Optional mimetype of the text. Typically, this is text/xml. Will be defaulted to text/xml if not provided." />
            </scope>
            <scope name="textContent" ilk="function" signature="textContent(node,text)" doc="Implementation of the DOM Level 3 attribute; scan node for text" returns="string|empty string." attributes="private">
              <variable ilk="argument" name="node" citdl="Node" doc="The node to get the text off of or set the text on." />
              <variable ilk="argument" name="text" citdl="string" doc="Optional argument of the text to apply to the node." />
            </scope>
            <scope name="replaceChildren" ilk="function" signature="replaceChildren(node,newChildren)" doc="Removes all children of node and appends newChild. All the existing children will be destroyed.">
              <variable ilk="argument" name="node" citdl="Element" doc="The node to modify the children on" />
              <variable ilk="argument" name="newChildren" citdl="Node || array" doc="The children to add to the node. It can either be a single Node or an array of Nodes." />
            </scope>
            <scope name="removeChildren" ilk="function" signature="removeChildren(node)" doc="removes all children from node and returns the count of children removed. The children nodes are not destroyed. Be sure to call dojo._destroyElement on them after they are not used anymore." returns="int" attributes="private">
              <variable ilk="argument" name="node" citdl="Element" doc="The node to remove all the children from." />
            </scope>
            <scope name="innerXML" ilk="function" signature="innerXML(node)" doc="Implementation of MS's innerXML function." returns="string" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" doc="The node from which to generate the XML text representation." />
            </scope>
          </variable>
          <scope name="jsonPathStore" ilk="function" signature="jsonPathStore(options)"
          doc="jsonPathStore constructor, instantiate a new jsonPathStore  Takes a single optional parameter in the form of a Javascript object containing one or more of the following properties.  data: /*JSON String*/ || /* Javascript Object */, JSON String or Javascript object this store will control JSON is converted into an object, and an object passed to the store will be used directly. If no data and no url is provide, an empty object, {}, will be used as the initial store.  url: /* string url */ Load data from this url in JSON format and use the Object created from the data as the data source.  indexOnLoad: /* boolean */ Defaults to true, but this may change in the near future. Parse the data object and set individual objects up as appropriate. This will add meta data and assign id's to objects that dont' have them as defined by the idAttribute option. Disabling this option will keep this parsing from happening until a query is performed at which time only the top level of an item has meta info stored. This might work in some situations, but you will almost always want to indexOnLoad or use another option which will create an index. In the future we will support a generated index that maps by jsonPath allowing the server to take some of this load for larger data sets.  idAttribute: /* string */ Defaults to '_id'. The name of the attribute that holds an objects id. This can be a preexisting id provided by the server. If an ID isn't already provided when an object is fetched or added to the store, the autoIdentity system will generate an id for it and add it to the index. There are utility routines for exporting data from the store that can clean any generated IDs before exporting and leave preexisting id's in tact.  metaLabel: /* string */ Defaults to '_meta' overrides the attribute name that is used by the store for attaching meta information to an object while in the store's control. Defaults to '_meta'.  hideMetaAttributes: /* boolean */ Defaults to False. When enabled, calls to getAttributes() will not include the meta attribute.  autoIdPrefix: /*string*/ Defaults to &amp;amp;quot;_auto_&amp;amp;quot;. This string is used as the prefix to any objects which have a generated id. A numeric index is appended to this string to complete the ID  mode: dojox.data.ASYNC_MODE || dojox.data.SYNC_MODE Defaults to ASYNC_MODE. This option sets the default mode for this store. Sync calls return their data immediately from the calling function instead of calling the callback functions. Functions such as fetchItemByIdentity() and fetch() both accept a string parameter in addtion to the normal keywordArgs parameter. When passed this option, SYNC_MODE will automatically be used even when the default mode of the system is ASYNC_MODE. A normal request to fetch or fetchItemByIdentity (with kwArgs object) can also include a mode property to override this setting for that one request.">

            <variable ilk="argument" name="options" />
            <scope name="mode" doc="" />
            <scope name="metaLabel" doc="" />
            <scope name="hideMetaAttributes" doc="" />
            <scope name="autoIdPrefix" doc="" />
            <scope name="autoIdentity" doc="" />
            <scope name="idAttribute" doc="" />
            <scope name="indexOnLoad" doc="" />
            <scope name="labelAttribute" doc="" />
            <scope name="url" doc="" />
            <scope name="_replaceRegex" attributes="private" doc="" />
            <scope name="_loadData" ilk="function" signature="_loadData(data)" doc="load data into the store. Index it if appropriate." attributes="private">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="onLoadData" ilk="function" signature="onLoadData(data)" doc="">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="setData" ilk="function" signature="setData(data)" doc="set the stores' data to the supplied object and then load and/or setup that data with the required meta info">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="buildIndex" ilk="function" signature="buildIndex(path,item)" doc="parse the object structure, and turn any objects into jsonPathStore items. Basically this just does a recursive series of fetches which itself already examines any items as they are retrieved and setups up the required meta information.">
              <variable ilk="argument" name="path" citdl="string" doc="*/ jsonPath Query for the starting point of this index construction." />
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_correctReference" ilk="function" signature="_correctReference(item)" doc="make sure we have an reference to the item in the store and not a clone. Takes an item, matches it to the corresponding item in the store and if it is the same, returns itself, otherwise it returns the item from the store." attributes="private">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getValue" ilk="function" signature="getValue(item,property)" doc="Gets the value of an item's 'property'">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
              <variable ilk="argument" name="property" citdl="string" doc="*/ property to look up value for" />
            </scope>
            <scope name="getValues" ilk="function" signature="getValues(item,property)" doc="Gets the value of an item's 'property' and returns it. If this value is an array it is just returned, if not, the value is added to an array and that is returned.">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
              <variable ilk="argument" name="property" citdl="string" doc="*/ property to look up value for" />
            </scope>
            <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="Gets the available attributes of an item's 'property' and returns it as an array. If the store has 'hideMetaAttributes' set to true the attributed identified by 'metaLabel' will not be included.">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
            </scope>
            <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="Checks to see if item has attribute">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
              <variable ilk="argument" name="attribute" citdl="string" doc="*/" />
            </scope>
            <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="Checks to see if 'item' has 'value' at 'attribute'">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
              <variable ilk="argument" name="attribute" citdl="string" doc="*/" />
              <variable ilk="argument" name="value" citdl="anything" doc="*/" />
            </scope>
            <scope name="_shallowCompare" ilk="function" signature="_shallowCompare(a,b)" attributes="private" doc="">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope name="isItem" ilk="function" signature="isItem(item)" doc="Checks to see if a passed 'item' is really a jsonPathStore item. Currently it only verifies structure. It does not verify that it belongs to this store at this time.">
              <variable ilk="argument" name="item" citdl="object" doc="*/ attribute: /* string */" />
            </scope>
            <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(item)" doc="returns isItem() :)">
              <variable ilk="argument" name="item" citdl="object" doc="*/" />
            </scope>
            <scope name="loadItem" ilk="function" signature="loadItem(item)" doc="returns true. Future implementatins might alter this">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_updateMeta" ilk="function" signature="_updateMeta(item,props)" doc="verifies that 'item' has a meta object attached and if not it creates it by setting it to 'props' if the meta attribute already exists, mix 'props' into it." attributes="private">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="props" />
            </scope>
            <scope name="cleanMeta" ilk="function" signature="cleanMeta(data,options)" doc="">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="options" />
            </scope>
            <scope name="fetch" ilk="function" signature="fetch(args)" doc="">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="dump" ilk="function" signature="dump(options)"
            doc="exports the store data set. Takes an options object with a number of parameters  data: /* object */ Defaults to the root of the store. The data to be exported.  clone: /* boolean */ clone the data set before returning it or modifying it for export  cleanMeta: /* boolean */ clean the meta data off of the data. Note that this will happen to the actual store data if !clone. If you want to continue using the store after this operation, it is probably better to export it as a clone if you want it cleaned.  suppressExportMeta: /* boolean */ By default, when data is exported from the store some information, such as as a timestamp, is added to the root of exported data. This prevents that from happening. It is mainly used for making tests easier.  type: &amp;amp;quot;raw&amp;amp;quot; || &amp;amp;quot;json&amp;amp;quot; Defaults to 'json'. 'json' will convert the data into json before returning it. 'raw' will just return a reference to the object">
              <variable ilk="argument" name="options" />
            </scope>
            <scope name="getFeatures" ilk="function" doc="return the store feature set" />
            <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="returns an array of attributes that are used to create the label of an item">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="sort" ilk="function" signature="sort(a,b)" doc="">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="returns the attributes which are used to make up the identity of an item. Basically returns this.idAttribute">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(args)" doc="fetch an item by its identity. This store also provides a much more finger friendly alias, 'byId' which does the same thing as this function. If provided a string this call will be treated as a SYNC request and will return the identified item immediatly. Alternatively it takes a object as a set of keywordArgs:  identity: /* string */ the id of the item you want to retrieve  mode: dojox.data.SYNC_MODE || dojox.data.ASYNC_MODE overrides the default store fetch mode  onItem: /* function */ Result call back. Passed the fetched item.  onError: /* function */ error callback.">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="newItem" ilk="function" signature="newItem(data,options)" doc="adds a new item to the store at the specified point. Takes two parameters, data, and options.">
              <variable ilk="argument" name="data" citdl="object" doc="*/ The data to be added in as an item. This could be a new javascript object, or it could be an item that already exists in the store. If it already exists in the store, then this will be added as a reference." />
              <variable ilk="argument" name="options" citdl="object" doc="*/  item: /* item */ reference to an existing store item  attribute: /* string */ attribute to add the item at. If this is not provided, the item's id will be used as the attribute name. If specified attribute is an array, the new item will be push()d on to the end of it. oldValue: /* old value of item[attribute] newValue: new value item[attribute]" />
            </scope>
            <scope name="_addReference" ilk="function" signature="_addReference(item,pInfo)" attributes="private" doc="">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="pInfo" />
            </scope>
            <scope name="deleteItem" ilk="function" signature="deleteItem(item)" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_setDirty" ilk="function" signature="_setDirty(item)" doc="adds an item to the list of dirty items. This item contains a reference to the item itself as well as a cloned and trimmed version of old item for use with revert." attributes="private">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="setValue" ilk="function" signature="setValue(item,attribute,value)" doc="sets 'attribute' on 'item' to 'value'">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="setValues" ilk="function" signature="setValues(item,attribute,values)" doc="sets 'attribute' on 'item' to 'value' value must be an array.">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="values" />
            </scope>
            <scope name="unsetAttribute" ilk="function" signature="unsetAttribute(item,attribute)" doc="unsets 'attribute' on 'item'">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope name="save" ilk="function" signature="save(kwArgs)" doc="Takes an optional set of keyword Args with some save options. Currently only format with options being &amp;amp;quot;raw&amp;amp;quot; or &amp;amp;quot;json&amp;amp;quot;. This function goes through the dirty item lists, clones and trims the item down so that the items children are not part of the data (the children are replaced with reference objects). This data is compiled into a single array, the dirty objects are all marked as clean, and the new data is then passed on to the onSave handler.">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope name="_markClean" ilk="function" signature="_markClean(item)" attributes="private" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="revert" ilk="function" doc="" />
            <scope name="_mixin" ilk="function" signature="_mixin(target,data)" doc="specialized mixin that hooks up objects in the store where references are identified." attributes="private">
              <variable ilk="argument" name="target" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="isDirty" ilk="function" signature="isDirty(item)" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_createReference" ilk="function" signature="_createReference(item)" attributes="private" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="_trimItem" ilk="function" signature="_trimItem(item)" doc="copy an item recursively stoppying at other items that have id's and replace them with a refrence object;" attributes="private">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="onSet" ilk="function" doc="" />
            <scope name="onNew" ilk="function" doc="" />
            <scope name="onDelete" ilk="function" doc="" />
            <scope name="onSave" ilk="function" signature="onSave(items)" doc="notification of the save event..not part of the notification api, but probably should be. console.log(&amp;amp;quot;onSave() &amp;amp;quot;, items);">
              <variable ilk="argument" name="items" />
            </scope>
            <scope name="onRevert" ilk="function" doc="notification of the revert event..not part of the notification api, but probably should be." />
            <variable name="_data" attributes="private" doc="" />
            <variable name="byId" doc="" />
            <variable name="_dirtyItems" attributes="private" doc="" />
            <variable name="_autoId" attributes="private" doc="" />
            <variable name="_referenceId" attributes="private" doc="" />
            <variable name="_references" attributes="private" doc="" />
            <variable name="_fetchQueue" attributes="private" doc="" />
            <variable name="index" doc="" />
            <variable name="metaRegex" doc="" />
          </scope>
          <scope name="ASYNC_MODE" doc="" />
          <scope name="SYNC_MODE" doc="" />
          <scope name="restListener" ilk="function" signature="restListener(message)" doc="this function can be used to receive REST notifications, from Comet or from another frame">
            <variable ilk="argument" name="message" />
          </scope>
        </variable>
        <variable name="json" citdl="Object" doc="">
          <variable name="ref" citdl="Object" doc="">
            <scope name="resolveJson" ilk="function" signature="resolveJson(root,args)" doc="Indexes and resolves references in the JSON object.">
              <variable ilk="argument" name="root" citdl="Object" doc="The root object of the object graph to be processed" />
              <variable ilk="argument" name="args" citdl="Object"
              doc="with additional arguments:  The *index* parameter. This is the index object (map) to use to store an index of all the objects. If you are using inter-message referencing, you must provide the same object for each call. The *defaultId* parameter. This is the default id to use for the root object (if it doesn't define it's own id) The *idPrefix* parameter. This the prefix to use for the ids as they enter the index. This allows multiple tables to use ids (that might otherwise collide) that enter the same global index. idPrefix should be in the form &amp;amp;quot;/Service/&amp;amp;quot;. For example, if the idPrefix is &amp;amp;quot;/Table/&amp;amp;quot;, and object is encountered {id:&amp;amp;quot;4&amp;amp;quot;,...}, this would go in the index as &amp;amp;quot;/Table/4&amp;amp;quot;. The *idAttribute* parameter. This indicates what property is the identity property. This defaults to &amp;amp;quot;id&amp;amp;quot; The *assignAbsoluteIds* parameter. This indicates that the resolveJson should assign absolute ids (__id) as the objects are being parsed.  The *schemas* parameter This provides a map of schemas, from which prototypes can be retrieved The *loader* parameter This is a function that is called added to the reference objects that can't be resolved (lazy objects) return: An object, the result of the processing" />
            </scope>
            <scope name="fromJson" ilk="function" signature="fromJson(str,args)" doc="evaluates the passed string-form of a JSON object.">
              <variable ilk="argument" name="str" citdl="String" doc="a string literal of a JSON item, for instance: '{ &amp;amp;quot;foo&amp;amp;quot;: [ &amp;amp;quot;bar&amp;amp;quot;, 1, { &amp;amp;quot;baz&amp;amp;quot;: &amp;amp;quot;thud&amp;amp;quot; } ] }'" />
              <variable ilk="argument" name="args" citdl="Object" doc="See resolveJson  return: An object, the result of the evaluation" />
            </scope>
            <scope name="toJson" ilk="function" signature="toJson(it,prettyPrint,idPrefix,indexSubObjects)" doc="Create a JSON serialization of an object. This has support for referencing, including circular references, duplicate references, and out-of-message references id and path-based referencing is supported as well and is based on http://www.json.com/2007/10/19/json-referencing-proposal-and-library/." returns="use the default serializer for primitives" attributes="private">
              <variable ilk="argument" name="it" citdl="Object" doc="an object to be serialized." />
              <variable ilk="argument" name="prettyPrint" citdl="Boolean" doc="if true, we indent objects and arrays to make the output prettier. The variable dojo.toJsonIndentStr is used as the indent string -- to use something other than the default (tab), change that variable before calling dojo.toJson()." />
              <variable ilk="argument" name="idPrefix" citdl="Object" doc="The prefix that has been used for the absolute ids  return: a String representing the serialized version of the passed object." />
              <variable ilk="argument" name="indexSubObjects" citdl="Object" />
            </scope>
            <scope name="_addProp" ilk="function" signature="_addProp(id,prop)" attributes="private" doc="">
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="prop" />
            </scope>
          </variable>
          <variable name="schema" citdl="Object" doc="">
            <scope name="validate" ilk="function" signature="validate(instance,schema)" doc="To use the validator call this with an instance object and an optional schema object. If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating), that schema will be used to validate and the schema parameter is not necessary (if both exist, both validations will occur).">
              <variable ilk="argument" name="instance" citdl="Any" doc="The instance value/object to validate" />
              <variable ilk="argument" name="schema" citdl="Object" doc="The schema to use to validate" />
            </scope>
            <scope name="checkPropertyChange" ilk="function" signature="checkPropertyChange(value,schema)" doc="The checkPropertyChange method will check to see if an value can legally be in property with the given schema This is slightly different than the validate method in that it will fail if the schema is readonly and it will not check for self-validation, it is assumed that the passed in value is already internally valid. The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for information.">
              <variable ilk="argument" name="value" citdl="Any" doc="The new instance value/object to check" />
              <variable ilk="argument" name="schema" citdl="Object" doc="The schema to use to validate return: see dojox.validate.jsonSchema.validate" />
            </scope>
            <scope name="_validate" ilk="function" signature="_validate(instance,schema,_changing)" attributes="private" doc="">
              <variable ilk="argument" name="instance" citdl="Any" />
              <variable ilk="argument" name="schema" citdl="Object" />
              <variable ilk="argument" name="_changing" citdl="Boolean" />
            </scope>
          </variable>
        </variable>
        <variable name="date" citdl="Object" doc="Additional date manipulation functions">
          <scope name="IslamicDate" ilk="function" doc="This is the constructor">
            <variable name="_date" attributes="private" doc="" />
            <variable name="_month" attributes="private" doc="" />
            <variable name="_year" attributes="private" doc="" />
            <variable name="_hours" attributes="private" doc="" />
            <variable name="_minutes" attributes="private" doc="" />
            <variable name="_seconds" attributes="private" doc="" />
            <variable name="_milliseconds" attributes="private" doc="" />
            <variable name="_day" attributes="private" doc="" />
            <scope name="_GREGORIAN_EPOCH" attributes="private" doc="" />
            <scope name="_ISLAMIC_EPOCH" attributes="private" doc="" />
            <scope name="getDate" doc="" />
            <scope name="getMonth" doc="" />
            <scope name="getFullYear" doc="" />
            <scope name="getDay" doc="" />
            <scope name="getHours" doc="" />
            <scope name="getMinutes" doc="" />
            <scope name="getSeconds" doc="" />
            <scope name="getMilliseconds" doc="" />
            <scope name="setDate" ilk="function" signature="setDate(date)" doc="This function sets the Date">
              <variable ilk="argument" name="date" citdl="number" />
            </scope>
            <scope name="setYear" doc="" />
            <scope name="setMonth" doc="" />
            <scope name="setHours" doc="" />
            <scope name="setMinutes" doc="" />
            <scope name="setSeconds" doc="" />
            <scope name="setMilliseconds" doc="" />
            <scope name="toString" doc="" />
            <scope name="toGregorian" doc="" />
            <scope name="fromGregorian" doc="" />
            <scope name="parse" doc="" />
            <scope name="valueOf" doc="" />
            <scope name="_yearStart" attributes="private" doc="" />
            <scope name="_monthStart" attributes="private" doc="" />
            <scope name="_civilLeapYear" attributes="private" doc="" />
            <scope name="getDaysInIslamicMonth" ilk="function" signature="getDaysInIslamicMonth(month)" returns="dojox.date.IslamicDate" attributes="private" doc="">
              <variable ilk="argument" name="month" citdl="dojox.date.IslamicDate" />
            </scope>
            <scope name="_mod" attributes="private" doc="" />
            <scope name="_getNames" ilk="function" signature="_getNames(item,type,use,locale)" doc="Used to get localized strings from dojo.cldr for day or month names." returns="Array" attributes="private">
              <variable ilk="argument" name="item" citdl="String" doc="months || 'days'" />
              <variable ilk="argument" name="type" citdl="String" doc="wide || 'narrow' || 'abbr' (e.g. &amp;amp;quot;Monday&amp;amp;quot;, &amp;amp;quot;Mon&amp;amp;quot;, or &amp;amp;quot;M&amp;amp;quot; respectively, in English)" />
              <variable ilk="argument" name="use" citdl="String" doc="standAlone || 'format' (default)" />
              <variable ilk="argument" name="locale" citdl="String" doc="override locale used to find the names" />
            </scope>
            <scope name="weekDays" doc="" />
            <scope name="months" doc="" />
          </scope>
          <variable name="php" citdl="Object" doc="">
            <scope name="format" ilk="function" signature="format(date,format)" doc="Get a formatted string for a given date object">
              <variable ilk="argument" name="date" citdl="Date" />
              <variable ilk="argument" name="format" citdl="String" />
            </scope>
            <scope name="DateFormat" ilk="function" signature="DateFormat(format)" doc="Format the internal date object">
              <variable ilk="argument" name="format" citdl="String" />
              <scope name="constructor" />
              <variable name="tokens" doc="" />
              <variable name="replacements" doc="" />
              <scope name="weekdays" doc="" />
              <scope name="weekdays_3" doc="" />
              <scope name="months" doc="" />
              <scope name="months_3" doc="" />
              <scope name="monthdays" doc="" />
              <scope name="format" ilk="function" signature="format(date)" doc="">
                <variable ilk="argument" name="date" citdl="Date" />
              </scope>
              <variable name="date" doc="" />
              <scope name="d" ilk="function" doc="Day of the month, 2 digits with leading zeros" />
              <scope name="D" ilk="function" doc="A textual representation of a day, three letters" />
              <scope name="j" ilk="function" doc="Day of the month without leading zeros" />
              <scope name="l" ilk="function" doc="A full textual representation of the day of the week" />
              <scope name="N" ilk="function" doc="ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)" />
              <scope name="S" ilk="function" doc="English ordinal suffix for the day of the month, 2 characters" />
              <scope name="w" ilk="function" doc="Numeric representation of the day of the week" />
              <scope name="z" ilk="function" doc="The day of the year (starting from 0)" />
              <scope name="W" ilk="function" doc="ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)" />
              <scope name="F" ilk="function" doc="A full textual representation of a month, such as January or March" />
              <scope name="m" ilk="function" doc="Numeric representation of a month, with leading zeros" />
              <scope name="M" ilk="function" doc="A short textual representation of a month, three letters" />
              <scope name="n" ilk="function" doc="Numeric representation of a month, without leading zeros" />
              <scope name="t" ilk="function" doc="Number of days in the given month" />
              <scope name="L" ilk="function" doc="Whether it's a leap year" />
              <scope name="o" ilk="function" doc="ISO-8601 year number. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0) TODO: Figure out what this means" />
              <scope name="Y" ilk="function" doc="A full numeric representation of a year, 4 digits" />
              <scope name="y" ilk="function" doc="A two digit representation of a year" />
              <scope name="a" ilk="function" doc="Lowercase Ante meridiem and Post meridiem" />
              <scope name="b" ilk="function" doc="Uppercase Ante meridiem and Post meridiem" />
              <scope name="B" ilk="function" doc="Swatch Internet time A day is 1,000 beats. All time is measured from GMT + 1" />
              <scope name="g" ilk="function" doc="12-hour format of an hour without leading zeros" />
              <scope name="G" ilk="function" doc="24-hour format of an hour without leading zeros" />
              <scope name="h" ilk="function" doc="12-hour format of an hour with leading zeros" />
              <scope name="H" ilk="function" doc="24-hour format of an hour with leading zeros" />
              <scope name="i" ilk="function" doc="Minutes with leading zeros" />
              <scope name="s" ilk="function" doc="Seconds, with leading zeros" />
              <scope name="e" ilk="function" doc="Timezone identifier (added in PHP 5.1.0)" />
              <scope name="I" ilk="function" doc="Whether or not the date is in daylight saving time TODO: Can dojo.date do this?" />
              <scope name="O" ilk="function" doc="Difference to Greenwich time (GMT) in hours" />
              <scope name="P" ilk="function" doc="Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)" />
              <scope name="T" ilk="function" doc="Timezone abbreviation" />
              <scope name="Z" ilk="function" doc="Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive." />
              <scope name="c" ilk="function" doc="ISO 8601 date (added in PHP 5)" />
              <scope name="r" ilk="function" doc="RFC 2822 formatted date" />
              <scope name="U" ilk="function" doc="Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)" />
            </scope>
          </variable>
          <variable name="posix" citdl="Object" doc="">
            <scope name="strftime" ilk="function" signature="strftime(dateObject,format,locale)" doc="Formats the date object using the specifications of the POSIX strftime function" returns="String" attributes="private">
              <variable ilk="argument" name="dateObject" citdl="Date" />
              <variable ilk="argument" name="format" citdl="String" />
              <variable ilk="argument" name="locale" citdl="String" />
            </scope>
            <scope name="getStartOfWeek" ilk="function" signature="getStartOfWeek(dateObject,firstDay)" doc="Return a date object representing the first day of the given date's week." returns="Date" attributes="private">
              <variable ilk="argument" name="dateObject" citdl="Date" />
              <variable ilk="argument" name="firstDay" citdl="Number" />
            </scope>
            <scope name="setIsoWeekOfYear" ilk="function" signature="setIsoWeekOfYear(dateObject,week)" doc="Set the ISO8601 week number of the given date. The week containing January 4th is the first week of the year." returns="Date" attributes="private">
              <variable ilk="argument" name="dateObject" citdl="Date" />
              <variable ilk="argument" name="week" citdl="Number" doc="can be positive or negative: -1 is the year's last week." />
            </scope>
            <scope name="getIsoWeekOfYear" ilk="function" signature="getIsoWeekOfYear(dateObject)" doc="Get the ISO8601 week number of the given date. The week containing January 4th is the first week of the year. See http://en.wikipedia.org/wiki/ISO_week_date" returns="Integer" attributes="private">
              <variable ilk="argument" name="dateObject" citdl="Date" />
            </scope>
            <scope name="getIsoWeeksInYear" ilk="function" signature="getIsoWeeksInYear(dateObject)" doc="Determine the number of ISO8601 weeks in the year of the given date. Most years have 52 but some have 53. See http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm" returns="Integer" attributes="private">
              <variable ilk="argument" name="dateObject" citdl="Date" />
            </scope>
          </variable>
        </variable>
        <variable name="dtl" citdl="Object" doc="Django Templating Language implementation">
          <variable name="_HtmlTemplated" citdl="Object" attributes="private" doc="" />
          <scope name="_Templated" ilk="function" attributes="private" doc="">
            <scope name="_dijitTemplateCompat" attributes="private" doc="" />
            <scope name="buildRendering" ilk="function" doc="" />
            <variable name="_templateCache" citdl="Object" attributes="private" doc="" />
            <scope name="getCachedTemplate" ilk="function" signature="getCachedTemplate(templatePath,templateString,alwaysUseString)" doc="Layer for dijit._Templated.getCachedTemplate">
              <variable ilk="argument" name="templatePath" />
              <variable ilk="argument" name="templateString" />
              <variable ilk="argument" name="alwaysUseString" />
            </scope>
            <scope name="render" ilk="function" doc="" />
            <variable name="_template" attributes="private" doc="" />
            <variable name="domNode" doc="" />
          </scope>
          <scope name="TOKEN_BLOCK" doc="" />
          <scope name="TOKEN_VAR" doc="" />
          <scope name="TOKEN_COMMENT" doc="" />
          <scope name="TOKEN_TEXT" doc="" />
          <scope name="_Context" ilk="function" signature="_Context(dict)" doc="Pass one of these when rendering a template to tell the template what values to use." attributes="private">
            <variable ilk="argument" name="dict" />
            <variable name="_dicts" attributes="private" doc="" />
            <scope name="push" ilk="function" doc="" />
            <scope name="pop" ilk="function" doc="" />
            <scope name="get" ilk="function" signature="get(key,otherwise)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="otherwise" />
            </scope>
            <scope name="_normalize" ilk="function" signature="_normalize(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="update" ilk="function" signature="update(dict)" doc="">
              <variable ilk="argument" name="dict" />
            </scope>
          </scope>
          <scope name="Template" ilk="function" signature="Template(template,isString)" doc="">
            <variable ilk="argument" name="template" citdl="String|dojo._Url" doc="The string or location of the string to use as a template" />
            <variable ilk="argument" name="isString" citdl="Boolean" />
            <variable name="nodelist" doc="" />
            <scope name="update" ilk="function" signature="update(node,context)" doc="">
              <variable ilk="argument" name="node" citdl="DOMNode|String|dojo.NodeList" doc="A node reference or set of nodes" />
              <variable ilk="argument" name="context" citdl="dojo._Url|String|Object" doc="The context object or location" />
            </scope>
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" citdl="concatenatable" />
            </scope>
            <scope name="getBuffer" ilk="function" doc="" />
          </scope>
          <scope name="_QuickNodeList" ilk="function" signature="_QuickNodeList(contents)" attributes="private" doc="">
            <variable ilk="argument" name="contents" />
            <variable name="contents" doc="" />
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="dummyRender" ilk="function" signature="dummyRender(context)" doc="">
              <variable ilk="argument" name="context" />
            </scope>
            <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
              <variable ilk="argument" name="buffer" />
            </scope>
          </scope>
          <scope name="_Filter" ilk="function" signature="_Filter(token)" doc="Uses a string to find (and manipulate) a variable" attributes="private">
            <variable ilk="argument" name="token" />
            <variable name="contents" doc="" />
            <variable name="key" doc="" />
            <variable name="filters" doc="" />
            <variable name="_cache" citdl="Object" attributes="private" doc="" />
            <scope name="_re" attributes="private" doc="" />
            <variable name="_values" citdl="Object" attributes="private" doc="" />
            <variable name="_args" citdl="Object" attributes="private" doc="">
              <scope name="4" doc="" />
              <scope name="5" doc="" />
              <scope name="6" doc="" />
              <scope name="7" doc="" />
            </variable>
            <scope name="_tokenize" ilk="function" attributes="private" doc="" />
            <scope name="getExpression" ilk="function" doc="" />
            <scope name="resolve" ilk="function" signature="resolve(context)" doc="">
              <variable ilk="argument" name="context" />
            </scope>
            <scope name="resolvePath" ilk="function" signature="resolvePath(path,context)" doc="">
              <variable ilk="argument" name="path" />
              <variable ilk="argument" name="context" />
            </scope>
          </scope>
          <scope name="_TextNode" attributes="private" doc="" />
          <scope name="_NodeList" ilk="function" signature="_NodeList(nodes)" doc="Allows us to render a group of nodes" attributes="private">
            <variable ilk="argument" name="nodes" citdl="Node[]" />
            <variable name="contents" doc="" />
            <variable name="last" doc="" />
            <scope name="push" ilk="function" signature="push(node)" doc="Add a new node to the list">
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="concat" ilk="function" signature="concat(nodes)" doc="">
              <variable ilk="argument" name="nodes" />
            </scope>
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="Adds all content onto the buffer">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="dummyRender" ilk="function" signature="dummyRender(context)" doc="">
              <variable ilk="argument" name="context" />
            </scope>
            <scope name="unrender" ilk="function" doc="" />
            <scope name="clone" ilk="function" doc="" />
            <scope name="rtrim" ilk="function" doc="" />
          </scope>
          <scope name="_VarNode" ilk="function" signature="_VarNode(str)" doc="A node to be processed as a variable" attributes="private">
            <variable ilk="argument" name="str" />
            <variable name="contents" doc="" />
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
          </scope>
          <scope name="_noOpNode" attributes="private" doc="" />
          <scope name="_Parser" ilk="function" signature="_Parser(tokens)" doc="Parser used during initialization and for tag groups." attributes="private">
            <variable ilk="argument" name="tokens" />
            <variable name="contents" doc="">
              <variable name="length" doc="" />
            </variable>
            <scope name="i" doc="" />
            <scope name="parse" ilk="function" signature="parse(stop_at)" doc="Turns tokens into nodes">
              <variable ilk="argument" name="stop_at" citdl="Array" />
            </scope>
            <scope name="next_token" ilk="function" doc="Returns the next token in the list." />
            <scope name="delete_first_token" ilk="function" doc="" />
            <scope name="skip_past" ilk="function" signature="skip_past(endtag)" doc="">
              <variable ilk="argument" name="endtag" />
            </scope>
            <scope name="create_variable_node" ilk="function" signature="create_variable_node(expr)" doc="">
              <variable ilk="argument" name="expr" />
            </scope>
            <scope name="create_text_node" ilk="function" signature="create_text_node(expr)" doc="">
              <variable ilk="argument" name="expr" />
            </scope>
            <scope name="getTemplate" ilk="function" signature="getTemplate(file)" doc="">
              <variable ilk="argument" name="file" />
            </scope>
          </scope>
          <variable name="register" citdl="Object" doc="">
            <variable name="_registry" citdl="Object" attributes="private" doc="">
              <scope name="attributes" doc="" />
              <scope name="tags" doc="" />
              <scope name="filters" doc="" />
            </variable>
            <scope name="get" ilk="function" signature="get(module,name)" doc="">
              <variable ilk="argument" name="module" citdl="String" />
              <variable ilk="argument" name="name" citdl="String" />
            </scope>
            <scope name="getAttributeTags" ilk="function" doc="" />
            <scope name="_any" ilk="function" signature="_any(type,base,locations)" attributes="private" doc="">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="base" />
              <variable ilk="argument" name="locations" />
            </scope>
            <scope name="tags" ilk="function" signature="tags(base,locations)" doc="">
              <variable ilk="argument" name="base" citdl="String" />
              <variable ilk="argument" name="locations" citdl="Object" />
            </scope>
            <scope name="filters" ilk="function" signature="filters(base,locations)" doc="">
              <variable ilk="argument" name="base" citdl="String" />
              <variable ilk="argument" name="locations" citdl="Object" />
            </scope>
          </variable>
          <scope name="mark_safe" doc="" />
          <scope name="Token" ilk="function" signature="Token(token_type,contents)" doc="">
            <variable ilk="argument" name="token_type" />
            <variable ilk="argument" name="contents" />
            <variable name="token_type" doc="" />
            <variable name="contents" doc="">
              <variable name="split" doc="" />
            </variable>
            <variable name="split" ilk="function" doc="" />
            <scope name="split_contents" ilk="function" signature="split_contents(limit)" doc="">
              <variable ilk="argument" name="limit" citdl="Integer" />
            </scope>
          </scope>
          <scope name="quickFilter" ilk="function" signature="quickFilter(str)" doc="">
            <variable ilk="argument" name="str" />
          </scope>
          <variable name="_base" citdl="Object" attributes="private" doc="">
            <scope name="escape" ilk="function" signature="escape(value)" doc="Escapes a string's HTML">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="safe" ilk="function" signature="safe(value)" doc="">
              <variable ilk="argument" name="value" />
            </scope>
          </variable>
          <variable name="text" citdl="Object" doc="">
            <scope name="_get" ilk="function" signature="_get(module,name,errorless)" doc="Used to find both tags and filters" attributes="private">
              <variable ilk="argument" name="module" />
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="errorless" />
            </scope>
            <scope name="getTag" ilk="function" signature="getTag(name,errorless)" doc="">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="errorless" />
            </scope>
            <scope name="getFilter" ilk="function" signature="getFilter(name,errorless)" doc="">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="errorless" />
            </scope>
            <scope name="getTemplate" ilk="function" signature="getTemplate(file)" doc="">
              <variable ilk="argument" name="file" />
            </scope>
            <scope name="getTemplateString" ilk="function" signature="getTemplateString(file)" doc="">
              <variable ilk="argument" name="file" />
            </scope>
            <scope name="_resolveLazy" ilk="function" signature="_resolveLazy(location,sync,json)" attributes="private" doc="">
              <variable ilk="argument" name="location" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="json" />
            </scope>
            <scope name="_resolveTemplateArg" ilk="function" signature="_resolveTemplateArg(arg,sync)" attributes="private" doc="">
              <variable ilk="argument" name="arg" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope name="_isTemplate" ilk="function" signature="_isTemplate(arg)" attributes="private" doc="">
              <variable ilk="argument" name="arg" />
            </scope>
            <scope name="_resolveContextArg" ilk="function" signature="_resolveContextArg(arg,sync)" attributes="private" doc="">
              <variable ilk="argument" name="arg" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope name="_re" attributes="private" doc="" />
            <scope name="tokenize" ilk="function" signature="tokenize(str)" doc="">
              <variable ilk="argument" name="str" />
            </scope>
            <scope name="_parseDelims" ilk="function" signature="_parseDelims(varr,load,tag)" attributes="private" doc="">
              <variable ilk="argument" name="varr" />
              <variable ilk="argument" name="load" />
              <variable ilk="argument" name="tag" />
            </scope>
          </variable>
          <scope name="_Node" ilk="function" signature="_Node(obj)" doc="Basic catch-all node" attributes="private">
            <variable ilk="argument" name="obj" citdl="Object" />
            <variable name="contents" doc="" />
            <scope name="set" ilk="function" signature="set(data)" doc="">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="Adds content onto the buffer">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="isEmpty" ilk="function" doc="" />
            <scope name="clone" ilk="function" doc="" />
          </scope>
          <variable name="contrib" citdl="Object" doc="">
            <variable name="data" citdl="Object" doc="">
              <scope name="_BoundItem" ilk="function" signature="_BoundItem(item,store)" attributes="private" doc="">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="store" />
                <variable name="item" doc="" />
                <variable name="store" doc="" />
                <scope name="get" ilk="function" signature="get(key)" doc="">
                  <variable ilk="argument" name="key" />
                </scope>
              </scope>
              <scope name="BindDataNode" ilk="function" signature="BindDataNode(items,store,alias)" doc="">
                <variable ilk="argument" name="items" />
                <variable ilk="argument" name="store" />
                <variable ilk="argument" name="alias" />
                <variable name="items" doc="" />
                <variable name="store" doc="" />
                <variable name="alias" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" doc="" />
              </scope>
            </variable>
            <variable name="dijit" citdl="Object" doc="">
              <scope name="AttachNode" ilk="function" signature="AttachNode(keys,object)" doc="">
                <variable ilk="argument" name="keys" />
                <variable ilk="argument" name="object" />
                <variable name="_keys" attributes="private" doc="" />
                <variable name="_object" attributes="private" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable name="_rendered" attributes="private" doc="" />
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="EventNode" ilk="function" signature="EventNode(command,obj)" doc="">
                <variable ilk="argument" name="command" />
                <variable ilk="argument" name="obj" />
                <variable name="_command" attributes="private" doc="" />
                <variable name="_types" attributes="private" doc="" />
                <variable name="_fns" attributes="private" doc="" />
                <variable name="_object" attributes="private" doc="" />
                <variable name="_rendered" attributes="private" doc="" />
                <variable name="_clear" attributes="private" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" doc="" />
              </scope>
              <scope name="DojoTypeNode" ilk="function" signature="DojoTypeNode(node,parsed)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="parsed" />
                <variable name="_node" attributes="private" doc="" />
                <variable name="_parsed" attributes="private" doc="" />
                <variable name="_events" attributes="private" doc="">
                  <variable name="_object" attributes="private" doc="" />
                </variable>
                <variable name="_attach" attributes="private" doc="">
                  <variable name="_object" attributes="private" doc="" />
                </variable>
                <variable name="_dijit" attributes="private" doc="" />
                <variable name="_template" attributes="private" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable name="_rendered" attributes="private" doc="" />
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" doc="" />
              </scope>
            </variable>
            <variable name="html" citdl="Object" doc="">
              <scope name="StyleNode" ilk="function" signature="StyleNode(styles)" doc="">
                <variable ilk="argument" name="styles" />
                <variable name="contents" doc="" />
                <variable name="_styles" attributes="private" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="BufferNode" ilk="function" signature="BufferNode(nodelist,options)" doc="">
                <variable ilk="argument" name="nodelist" />
                <variable ilk="argument" name="options" />
                <variable name="nodelist" doc="" />
                <variable name="options" doc="" />
                <scope name="_swap" ilk="function" signature="_swap(type,node)" attributes="private" doc="">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="node" />
                </scope>
                <variable name="swapped" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable name="parent" doc="" />
                <variable name="onAddNode" doc="" />
                <variable name="onRemoveNode" doc="" />
                <variable name="onChangeData" doc="" />
                <variable name="onChangeAttribute" doc="" />
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
            <variable name="objects" citdl="Object" doc="">
              <scope name="key" ilk="function" signature="key(value,arg)" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
            </variable>
          </variable>
          <variable name="ext-dojo" citdl="Object" doc="">
            <variable name="NodeList" citdl="Object" doc="" />
          </variable>
          <variable name="filter" citdl="Object" doc="">
            <variable name="dates" citdl="Object" doc="" />
            <variable name="htmlstrings" citdl="Object" doc="">
              <scope name="_linebreaksrn" attributes="private" doc="" />
              <scope name="_linebreaksn" attributes="private" doc="" />
              <scope name="_linebreakss" attributes="private" doc="" />
              <scope name="_linebreaksbr" attributes="private" doc="" />
              <scope name="_removetagsfind" attributes="private" doc="" />
              <scope name="_striptags" attributes="private" doc="" />
              <scope name="linebreaks" ilk="function" signature="linebreaks(value)" doc="Converts newlines into &amp;amp;lt;p&amp;amp;gt; and &amp;amp;lt;br /&amp;amp;gt;s">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="linebreaksbr" ilk="function" signature="linebreaksbr(value)" doc="Converts newlines into &amp;amp;lt;br /&amp;amp;gt;s">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="removetags" ilk="function" signature="removetags(value,arg)" doc="Removes a space separated list of [X]HTML tags from the output&amp;amp;quot;">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="striptags" ilk="function" signature="striptags(value)" doc="Strips all [X]HTML tags">
                <variable ilk="argument" name="value" />
              </scope>
            </variable>
            <variable name="integers" citdl="Object" doc="">
              <scope name="add" ilk="function" signature="add(value,arg)" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="get_digit" ilk="function" signature="get_digit(value,arg)" doc="Given a whole number, returns the 1-based requested digit of it desciprtion: 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer.">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
            </variable>
            <variable name="lists" citdl="Object" doc="">
              <scope name="_dictsort" ilk="function" signature="_dictsort(a,b)" attributes="private" doc="">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="b" />
              </scope>
              <scope name="dictsort" ilk="function" signature="dictsort(value,arg)" doc="Takes a list of dicts, returns that list sorted by the property given in the argument.">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="dictsortreversed" ilk="function" signature="dictsortreversed(value,arg)" doc="Takes a list of dicts, returns that list sorted in reverse order by the property given in the argument.">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="first" ilk="function" signature="first(value)" doc="Returns the first item in a list">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="join" ilk="function" signature="join(value,arg)" doc="Joins a list with a string, like Python's ``str.join(list)``">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="length" ilk="function" signature="length(value)" doc="Returns the length of the value - useful for lists">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="length_is" ilk="function" signature="length_is(value,arg)" doc="Returns a boolean of whether the value's length is the argument">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="random" ilk="function" signature="random(value)" doc="Returns a random item from the list">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="slice" ilk="function" signature="slice(value,arg)" doc="Returns a slice of the list.">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="_unordered_list" ilk="function" signature="_unordered_list(value,tabs)" attributes="private" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="tabs" />
              </scope>
              <scope name="unordered_list" ilk="function" signature="unordered_list(value)" doc="Recursively takes a self-nested list and returns an HTML unordered list -- WITHOUT opening and closing &amp;amp;lt;ul&amp;amp;gt; tags.">
                <variable ilk="argument" name="value" />
              </scope>
            </variable>
            <variable name="logic" citdl="Object" doc="">
              <scope name="default_" ilk="function" signature="default_(value,arg)" doc="If value is unavailable, use given default">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="default_if_none" ilk="function" signature="default_if_none(value,arg)" doc="If value is null, use given default">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="divisibleby" ilk="function" signature="divisibleby(value,arg)" doc="Returns true if the value is devisible by the argument&amp;amp;quot;">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="_yesno" attributes="private" doc="" />
              <scope name="yesno" ilk="function" signature="yesno(value,arg)" doc="arg being a comma-delimited string, value of true/false/none chooses the appropriate item from the string">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
            </variable>
            <variable name="misc" citdl="Object" doc="">
              <scope name="filesizeformat" ilk="function" signature="filesizeformat(value)" doc="Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB, 102bytes, etc).">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="pluralize" ilk="function" signature="pluralize(value,arg)" doc="Returns a plural suffix if the value is not 1, for '1 vote' vs. '2 votes'">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <variable name="_phone2numeric" citdl="Object" attributes="private" doc="">
                <scope name="a" doc="" />
                <scope name="b" doc="" />
                <scope name="c" doc="" />
                <scope name="d" doc="" />
                <scope name="e" doc="" />
                <scope name="f" doc="" />
                <scope name="g" doc="" />
                <scope name="h" doc="" />
                <scope name="i" doc="" />
                <scope name="j" doc="" />
                <scope name="k" doc="" />
                <scope name="l" doc="" />
                <scope name="m" doc="" />
                <scope name="n" doc="" />
                <scope name="o" doc="" />
                <scope name="p" doc="" />
                <scope name="r" doc="" />
                <scope name="s" doc="" />
                <scope name="t" doc="" />
                <scope name="u" doc="" />
                <scope name="v" doc="" />
                <scope name="w" doc="" />
                <scope name="x" doc="" />
                <scope name="y" doc="" />
              </variable>
              <scope name="phone2numeric" ilk="function" signature="phone2numeric(value)" doc="Takes a phone number and converts it in to its numerical equivalent">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="pprint" ilk="function" signature="pprint(value)" doc="A wrapper around toJson unless something better comes along">
                <variable ilk="argument" name="value" />
              </scope>
            </variable>
            <variable name="strings" citdl="Object" doc="">
              <scope name="_urlquote" ilk="function" signature="_urlquote(url,safe)" attributes="private" doc="">
                <variable ilk="argument" name="url" citdl="String" />
                <variable ilk="argument" name="safe" citdl="String" />
              </scope>
              <scope name="addslashes" ilk="function" signature="addslashes(value)" doc="Adds slashes - useful for passing strings to JavaScript, for example.">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="capfirst" ilk="function" signature="capfirst(value)" doc="Capitalizes the first character of the value">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="center" ilk="function" signature="center(value,arg)" doc="Centers the value in a field of a given width">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="cut" ilk="function" signature="cut(value,arg)" doc="Removes all values of arg from the given string">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="_fix_ampersands" attributes="private" doc="" />
              <scope name="fix_ampersands" ilk="function" signature="fix_ampersands(value)" doc="Replaces ampersands with ``&amp;amp;amp;amp;`` entities">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="floatformat" ilk="function" signature="floatformat(value,arg)" doc="Format a number according to arg">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="iriencode" ilk="function" signature="iriencode(value)" doc="">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="linenumbers" ilk="function" signature="linenumbers(value)" doc="Displays text with line numbers">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="ljust" ilk="function" signature="ljust(value,arg)" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="lower" ilk="function" signature="lower(value)" doc="Converts a string into all lowercase">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="make_list" ilk="function" signature="make_list(value)" doc="Returns the value turned into a list. For an integer, it's a list of digits. For a string, it's a list of characters.">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="rjust" ilk="function" signature="rjust(value,arg)" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="slugify" ilk="function" signature="slugify(value)" doc="Converts to lowercase, removes non-alpha chars and converts spaces to hyphens">
                <variable ilk="argument" name="value" />
              </scope>
              <variable name="_strings" citdl="Object" attributes="private" doc="" />
              <scope name="stringformat" ilk="function" signature="stringformat(value,arg)" doc="Formats the variable according to the argument, a string formatting specifier. This specifier uses Python string formating syntax, with the exception that the leading &amp;amp;quot;%&amp;amp;quot; is dropped.">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="title" ilk="function" signature="title(value)" doc="Converts a string into titlecase">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="_truncatewords" attributes="private" doc="" />
              <scope name="truncatewords" ilk="function" signature="truncatewords(value,arg)" doc="Truncates a string after a certain number of words">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" citdl="Integer" doc="Number of words to truncate after" />
              </scope>
              <scope name="_truncate_words" attributes="private" doc="" />
              <scope name="_truncate_tag" attributes="private" doc="" />
              <variable name="_truncate_singlets" citdl="Object" attributes="private" doc="">
                <scope name="br" doc="" />
                <scope name="col" doc="" />
                <scope name="link" doc="" />
                <scope name="base" doc="" />
                <scope name="img" doc="" />
                <scope name="param" doc="" />
                <scope name="area" doc="" />
                <scope name="hr" doc="" />
                <scope name="input" doc="" />
              </variable>
              <scope name="truncatewords_html" ilk="function" signature="truncatewords_html(value,arg)" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="upper" ilk="function" signature="upper(value)" doc="">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="urlencode" ilk="function" signature="urlencode(value)" doc="">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="_urlize" attributes="private" doc="" />
              <scope name="_urlize2" attributes="private" doc="" />
              <scope name="urlize" ilk="function" signature="urlize(value)" doc="">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="urlizetrunc" ilk="function" signature="urlizetrunc(value,arg)" returns="' + middle + '&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;' + trimmed + '&amp;lt;/a&amp;gt;';" attributes="private" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope name="wordcount" ilk="function" signature="wordcount(value)" doc="">
                <variable ilk="argument" name="value" />
              </scope>
              <scope name="wordwrap" ilk="function" signature="wordwrap(value,arg)" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
            </variable>
          </variable>
          <scope name="TOKEN_CHANGE" doc="" />
          <scope name="TOKEN_ATTR" doc="" />
          <scope name="TOKEN_CUSTOM" doc="" />
          <scope name="TOKEN_NODE" doc="" />
          <scope name="HtmlTemplate" ilk="function" signature="HtmlTemplate(obj)" doc="Use this object for HTML templating">
            <variable ilk="argument" name="obj" citdl="String|DOMNode|dojo._Url" />
            <variable name="tokens" doc="" />
            <variable name="nodelist" doc="" />
            <scope name="_count" attributes="private" doc="" />
            <scope name="_re" attributes="private" doc="" />
            <scope name="setClass" ilk="function" signature="setClass(str)" doc="">
              <variable ilk="argument" name="str" />
            </scope>
            <scope name="getRootNode" ilk="function" doc="" />
            <scope name="getBuffer" ilk="function" doc="" />
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <variable name="buffer" doc="" />
            <variable name="rootNode" doc="" />
            <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
          </scope>
          <scope name="HtmlBuffer" ilk="function" signature="HtmlBuffer(parent)" doc="Allows the manipulation of DOM">
            <variable ilk="argument" name="parent" citdl="Node" />
            <variable name="_parent" attributes="private" doc="" />
            <variable name="_cache" attributes="private" doc="" />
            <scope name="concat" ilk="function" signature="concat(node)" doc="">
              <variable ilk="argument" name="node" citdl="DOMNode" />
            </scope>
            <variable name="rootNode" doc="" />
            <scope name="remove" ilk="function" signature="remove(obj)" doc="">
              <variable ilk="argument" name="obj" />
            </scope>
            <variable name="_removed" attributes="private" doc="" />
            <scope name="setAttribute" ilk="function" signature="setAttribute(key,value)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="addEvent" ilk="function" signature="addEvent(context,type,fn,args)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="args" citdl="Array|Function" />
            </scope>
            <scope name="setParent" ilk="function" signature="setParent(node,up,root)" doc="">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="up" citdl="Boolean" />
              <variable ilk="argument" name="root" citdl="Boolean" />
            </scope>
            <variable name="_closed" attributes="private" doc="" />
            <scope name="getParent" ilk="function" doc="" />
            <scope name="getRootNode" ilk="function" doc="" />
            <scope name="onSetParent" ilk="function" signature="onSetParent(node,up)" doc="Stub called when setParent is used.">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="up" />
            </scope>
            <scope name="onAddNode" ilk="function" signature="onAddNode(node)" doc="Stub called before new nodes are added">
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="onAddNodeComplete" ilk="function" signature="onAddNodeComplete(node)" doc="Stub called after new nodes are added">
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="onRemoveNode" ilk="function" signature="onRemoveNode(node)" doc="Stub called when nodes are removed">
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="onChangeAttribute" ilk="function" signature="onChangeAttribute(node,attribute,old,updated)" doc="Stub called when an attribute is changed">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="old" />
              <variable ilk="argument" name="updated" />
            </scope>
            <scope name="onChangeData" ilk="function" signature="onChangeData(node,old,updated)" doc="Stub called when a data in a node is changed">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="old" />
              <variable ilk="argument" name="updated" />
            </scope>
            <scope name="onClone" ilk="function" signature="onClone(from,to)" doc="Stub called when a node is duplicated">
              <variable ilk="argument" name="from" citdl="DOMNode" doc="" />
              <variable ilk="argument" name="to" citdl="DOMNode" doc="" />
            </scope>
            <scope name="onAddEvent" ilk="function" signature="onAddEvent(node,type,description)" doc="Stub to call when you're adding an event">
              <variable ilk="argument" name="node" citdl="DOMNode" doc="" />
              <variable ilk="argument" name="type" citdl="String" doc="" />
              <variable ilk="argument" name="description" citdl="String" doc="" />
            </scope>
          </scope>
          <scope name="_HtmlNode" ilk="function" signature="_HtmlNode(node)" doc="Places a node into DOM" attributes="private">
            <variable ilk="argument" name="node" />
            <variable name="contents" doc="" />
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <variable name="_rendered" attributes="private" doc="" />
            <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
              <variable ilk="argument" name="buffer" />
            </scope>
          </scope>
          <scope name="_HtmlNodeList" ilk="function" signature="_HtmlNodeList(nodes)" doc="A list of any HTML-specific node object" attributes="private">
            <variable ilk="argument" name="nodes" citdl="Node[]" />
            <variable name="contents" doc="" />
            <scope name="push" ilk="function" signature="push(node)" doc="">
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="unshift" ilk="function" signature="unshift(node)" doc="">
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="render" ilk="function" signature="render(context,buffer,instance)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="instance" citdl="Node" />
            </scope>
            <scope name="dummyRender" ilk="function" signature="dummyRender(context,buffer,asNode)" doc="A really expensive way of checking to see how a rendering will look. Used in the ifchanged tag">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="asNode" />
            </scope>
            <scope name="unrender" ilk="function" signature="unrender(context,buffer,instance)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="instance" />
            </scope>
            <scope name="clone" ilk="function" signature="clone(buffer)" doc="Used to create an identical copy of a NodeList, useful for things like the for tag.">
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="rtrim" ilk="function" doc="" />
          </scope>
          <scope name="_HtmlVarNode" ilk="function" signature="_HtmlVarNode(str)" doc="A node to be processed as a variable" attributes="private">
            <variable ilk="argument" name="str" />
            <variable name="contents" doc="" />
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <variable name="_type" attributes="private" doc="" />
            <variable name="_rendered" attributes="private" doc="" />
            <variable name="_txt" attributes="private" doc="">
              <variable name="data" doc="" />
            </variable>
            <variable name="_root" attributes="private" doc="" />
            <variable name="_injected" attributes="private" doc="" />
            <variable name="_node" attributes="private" doc="" />
            <variable name="_src" attributes="private" doc="" />
            <variable name="_html" attributes="private" doc="" />
            <variable name="_div" attributes="private" doc="" />
            <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="clone" ilk="function" doc="" />
          </scope>
          <scope name="ChangeNode" ilk="function" signature="ChangeNode(node,up,root)" doc="Changes the parent during render/unrender">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="up" citdl="Boolean" />
            <variable ilk="argument" name="root" citdl="Bookean" />
            <variable name="contents" doc="" />
            <variable name="up" doc="" />
            <variable name="root" doc="" />
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="clone" ilk="function" doc="" />
          </scope>
          <scope name="AttributeNode" ilk="function" signature="AttributeNode(key,value)" doc="Works on attributes">
            <variable ilk="argument" name="key" />
            <variable ilk="argument" name="value" />
            <variable name="key" doc="" />
            <variable name="value" doc="" />
            <variable name="nodelist" doc="" />
            <variable name="contents" doc="" />
            <variable name="_pool" citdl="Object" attributes="private" doc="" />
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <variable name="_rendered" attributes="private" doc="" />
            <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
              <variable ilk="argument" name="buffer" />
            </scope>
          </scope>
          <scope name="_HtmlTextNode" ilk="function" signature="_HtmlTextNode(str)" doc="Adds a straight text node without any processing" attributes="private">
            <variable ilk="argument" name="str" />
            <variable name="contents" doc="">
              <variable name="data" doc="" />
            </variable>
            <variable name="upcoming" doc="" />
            <scope name="set" ilk="function" signature="set(data)" doc="">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope name="isEmpty" ilk="function" doc="" />
            <scope name="clone" ilk="function" doc="" />
          </scope>
          <scope name="_HtmlParser" ilk="function" signature="_HtmlParser(tokens)" doc="Turn a simple array into a set of objects" attributes="private">
            <variable ilk="argument" name="tokens" />
            <variable name="contents" doc="" />
            <scope name="i" doc="" />
            <scope name="parse" ilk="function" signature="parse(stop_at)" doc="">
              <variable ilk="argument" name="stop_at" citdl="Array" />
            </scope>
            <scope name="next_token" ilk="function" doc="Returns the next token in the list." />
            <scope name="delete_first_token" ilk="function" doc="" />
            <scope name="skip_past" ilk="function" signature="skip_past(endtag)" doc="">
              <variable ilk="argument" name="endtag" />
            </scope>
            <scope name="create_variable_node" ilk="function" signature="create_variable_node(expr)" doc="">
              <variable ilk="argument" name="expr" />
            </scope>
            <scope name="create_text_node" ilk="function" signature="create_text_node(expr)" doc="">
              <variable ilk="argument" name="expr" />
            </scope>
            <scope name="getTemplate" ilk="function" signature="getTemplate(loc)" doc="">
              <variable ilk="argument" name="loc" citdl="String" />
            </scope>
          </scope>
          <variable name="html" citdl="Object" doc="">
            <variable name="_attributes" citdl="Object" attributes="private" doc="" />
            <scope name="_re4" attributes="private" doc="" />
            <scope name="getTemplate" ilk="function" signature="getTemplate(text)" doc="">
              <variable ilk="argument" name="text" />
              <variable name="_commentable" attributes="private" doc="" />
            </scope>
            <scope name="tokenize" ilk="function" signature="tokenize(nodes)" doc="">
              <variable ilk="argument" name="nodes" citdl="Node" />
            </scope>
            <scope name="_swallowed" attributes="private" doc="" />
            <scope name="_tokenize" ilk="function" signature="_tokenize(node,tokens)" attributes="private" doc="">
              <variable ilk="argument" name="node" citdl="Node" />
              <variable ilk="argument" name="tokens" citdl="Array" />
            </scope>
            <scope name="__tokenize" ilk="function" signature="__tokenize(child,tokens)" attributes="private" doc="">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="tokens" />
            </scope>
          </variable>
          <variable name="render" citdl="Object" doc="">
            <variable name="html" citdl="Object" doc="">
              <scope name="Render" ilk="function" signature="Render(attachPoint,tpl)" doc="">
                <variable ilk="argument" name="attachPoint" citdl="DOMNode" />
                <variable ilk="argument" name="tpl" citdl="dojox.dtl.HtmlTemplate" />
                <variable name="_tpl" attributes="private" doc="" />
                <variable name="domNode" doc="" />
                <scope name="setAttachPoint" ilk="function" signature="setAttachPoint(node)" doc="">
                  <variable ilk="argument" name="node" citdl="Node" />
                </scope>
                <scope name="render" ilk="function" signature="render(context,tpl,buffer)" doc="">
                  <variable ilk="argument" name="context" citdl="Object" />
                  <variable ilk="argument" name="tpl" citdl="dojox.dtl.HtmlTemplate" />
                  <variable ilk="argument" name="buffer" citdl="dojox.dtl.HtmlBuffer" />
                </scope>
              </scope>
            </variable>
          </variable>
          <variable name="tag" citdl="Object" doc="">
            <variable name="date" citdl="Object" doc="">
              <scope name="NowNode" ilk="function" signature="NowNode(format,node)" doc="">
                <variable ilk="argument" name="format" />
                <variable ilk="argument" name="node" />
                <variable name="_format" attributes="private" doc="" />
                <variable name="format" doc="" />
                <variable name="contents" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="now" ilk="function" signature="now(parser,token)" doc="">
                <variable ilk="argument" name="parser" />
                <variable ilk="argument" name="token" />
              </scope>
            </variable>
            <variable name="loader" citdl="Object" doc="">
              <scope name="BlockNode" ilk="function" signature="BlockNode(name,nodelist)" doc="">
                <variable ilk="argument" name="name" />
                <variable ilk="argument" name="nodelist" />
                <variable name="name" doc="" />
                <variable name="nodelist" doc="" />
                <scope name="super" ilk="function" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable name="rendered" doc="" />
                <variable name="context" doc="" />
                <variable name="parent" doc="" />
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="toString" ilk="function" doc="" />
              </scope>
              <scope name="ExtendsNode" ilk="function" signature="ExtendsNode(getTemplate,nodelist,shared,parent,key)" doc="">
                <variable ilk="argument" name="getTemplate" />
                <variable ilk="argument" name="nodelist" />
                <variable ilk="argument" name="shared" />
                <variable ilk="argument" name="parent" />
                <variable ilk="argument" name="key" />
                <variable name="getTemplate" doc="" />
                <variable name="nodelist" doc="" />
                <variable name="shared" doc="" />
                <variable name="parent" doc="" />
                <variable name="key" doc="" />
                <variable name="parents" citdl="Object" doc="" />
                <scope name="getParent" ilk="function" signature="getParent(context)" doc="">
                  <variable ilk="argument" name="context" />
                </scope>
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable name="rendered" doc="" />
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="toString" ilk="function" doc="" />
              </scope>
              <scope name="IncludeNode" ilk="function" signature="IncludeNode(path,constant,getTemplate,text,parsed)" doc="">
                <variable ilk="argument" name="path" />
                <variable ilk="argument" name="constant" />
                <variable ilk="argument" name="getTemplate" />
                <variable ilk="argument" name="text" />
                <variable ilk="argument" name="parsed" />
                <variable name="_path" attributes="private" doc="" />
                <variable name="constant" doc="" />
                <variable name="path" doc="" />
                <variable name="getTemplate" doc="" />
                <variable name="text" doc="" />
                <variable name="parsed" doc="" />
                <scope name="_cache" attributes="private" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable name="last" doc="" />
                <variable name="rendered" doc="" />
                <variable name="nodelist" doc="" />
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
            <variable name="logic" citdl="Object" doc="">
              <scope name="IfNode" signature="IfNode(bools,trues,falses,type)" doc="">
                <variable ilk="argument" name="bools" />
                <variable ilk="argument" name="trues" />
                <variable ilk="argument" name="falses" />
                <variable ilk="argument" name="type" />
                <variable name="bools" doc="" />
                <variable name="trues" doc="" />
                <variable name="falses" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="IfEqualNode" ilk="function" signature="IfEqualNode(var1,var2,trues,falses,negate)" doc="">
                <variable ilk="argument" name="var1" />
                <variable ilk="argument" name="var2" />
                <variable ilk="argument" name="trues" />
                <variable ilk="argument" name="falses" />
                <variable ilk="argument" name="negate" />
                <variable name="var1" doc="" />
                <variable name="var2" doc="" />
                <variable name="trues" doc="" />
                <variable name="falses" doc="" />
                <variable name="negate" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="ForNode" ilk="function" signature="ForNode(assign,loop,reversed,nodelist)" doc="">
                <variable ilk="argument" name="assign" />
                <variable ilk="argument" name="loop" />
                <variable ilk="argument" name="reversed" />
                <variable ilk="argument" name="nodelist" />
                <variable name="assign" doc="" />
                <variable name="loop" doc="" />
                <variable name="reversed" doc="" />
                <variable name="nodelist" doc="" />
                <variable name="pool" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
            <variable name="loop" citdl="Object" doc="">
              <scope name="CycleNode" ilk="function" signature="CycleNode(cyclevars,name,text,shared)" doc="">
                <variable ilk="argument" name="cyclevars" />
                <variable ilk="argument" name="name" />
                <variable ilk="argument" name="text" />
                <variable ilk="argument" name="shared" />
                <variable name="cyclevars" doc="" />
                <variable name="name" doc="" />
                <variable name="contents" doc="" />
                <variable name="shared" doc="">
                  <variable name="counter" doc="" />
                </variable>
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="IfChangedNode" ilk="function" signature="IfChangedNode(nodes,vars,shared)" doc="">
                <variable ilk="argument" name="nodes" />
                <variable ilk="argument" name="vars" />
                <variable ilk="argument" name="shared" />
                <variable name="nodes" doc="" />
                <variable name="_vars" attributes="private" doc="" />
                <variable name="shared" doc="">
                  <variable name="last" doc="" />
                  <variable name="counter" doc="" />
                </variable>
                <variable name="vars" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="RegroupNode" ilk="function" signature="RegroupNode(expression,key,alias)" doc="">
                <variable ilk="argument" name="expression" />
                <variable ilk="argument" name="key" />
                <variable ilk="argument" name="alias" />
                <variable name="_expression" attributes="private" doc="" />
                <variable name="expression" doc="" />
                <variable name="key" doc="" />
                <variable name="alias" doc="" />
                <scope name="_push" ilk="function" signature="_push(container,grouper,stack)" attributes="private" doc="">
                  <variable ilk="argument" name="container" />
                  <variable ilk="argument" name="grouper" />
                  <variable ilk="argument" name="stack" />
                </scope>
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
            <variable name="misc" citdl="Object" doc="">
              <scope name="DebugNode" ilk="function" signature="DebugNode(text)" doc="">
                <variable ilk="argument" name="text" />
                <variable name="text" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="toString" ilk="function" doc="" />
              </scope>
              <scope name="FilterNode" ilk="function" signature="FilterNode(varnode,nodelist)" doc="">
                <variable ilk="argument" name="varnode" />
                <variable ilk="argument" name="nodelist" />
                <variable name="_varnode" attributes="private" doc="" />
                <variable name="_nodelist" attributes="private" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="FirstOfNode" ilk="function" signature="FirstOfNode(vars,text)" doc="">
                <variable ilk="argument" name="vars" />
                <variable ilk="argument" name="text" />
                <variable name="_vars" attributes="private" doc="" />
                <variable name="vars" doc="" />
                <variable name="contents" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="SpacelessNode" ilk="function" signature="SpacelessNode(nodelist,text)" doc="">
                <variable ilk="argument" name="nodelist" />
                <variable ilk="argument" name="text" />
                <variable name="nodelist" doc="" />
                <variable name="contents" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="_isEmpty" ilk="function" signature="_isEmpty(node)" attributes="private" doc="">
                  <variable ilk="argument" name="node" />
                </scope>
                <scope name="_watch" ilk="function" signature="_watch(node)" attributes="private" doc="">
                  <variable ilk="argument" name="node" />
                </scope>
                <scope name="_watchParent" ilk="function" signature="_watchParent(node)" attributes="private" doc="">
                  <variable ilk="argument" name="node" />
                </scope>
              </scope>
              <scope name="TemplateTagNode" ilk="function" signature="TemplateTagNode(tag,text)" doc="">
                <variable ilk="argument" name="tag" />
                <variable ilk="argument" name="text" />
                <variable name="tag" doc="" />
                <variable name="contents" doc="" />
                <variable name="mapping" citdl="Object" doc="">
                  <scope name="openblock" doc="" />
                  <scope name="closeblock" doc="" />
                  <scope name="openvariable" doc="" />
                  <scope name="closevariable" doc="" />
                  <scope name="openbrace" doc="" />
                  <scope name="closebrace" doc="" />
                  <scope name="opencomment" doc="" />
                  <scope name="closecomment" doc="" />
                </variable>
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="WidthRatioNode" ilk="function" signature="WidthRatioNode(current,max,width,text)" doc="">
                <variable ilk="argument" name="current" />
                <variable ilk="argument" name="max" />
                <variable ilk="argument" name="width" />
                <variable ilk="argument" name="text" />
                <variable name="current" doc="" />
                <variable name="max" doc="" />
                <variable name="width" doc="" />
                <variable name="contents" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope name="WithNode" ilk="function" signature="WithNode(target,alias,nodelist)" doc="">
                <variable ilk="argument" name="target" />
                <variable ilk="argument" name="alias" />
                <variable ilk="argument" name="nodelist" />
                <variable name="target" doc="" />
                <variable name="alias" doc="" />
                <variable name="nodelist" doc="" />
                <scope name="render" ilk="function" signature="render(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="unrender" ilk="function" signature="unrender(context,buffer)" doc="">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope name="clone" ilk="function" signature="clone(buffer)" doc="">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
          </variable>
          <variable name="utils" citdl="Object" doc="">
            <variable name="date" citdl="Object" doc="">
              <scope name="DateFormat" ilk="function" signature="DateFormat(format)" doc="">
                <variable ilk="argument" name="format" citdl="String" />
                <scope name="f" ilk="function" doc="Time, in 12-hour hours and minutes, with minutes left off if they're zero." />
                <scope name="N" ilk="function" doc="Month abbreviation in Associated Press style. Proprietary extension." />
                <scope name="P" ilk="function" doc="Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off if they're zero and the strings 'midnight' and 'noon' if appropriate." />
              </scope>
              <scope name="format" ilk="function" signature="format(date,format)" doc="">
                <variable ilk="argument" name="date" citdl="Date" />
                <variable ilk="argument" name="format" citdl="String" />
              </scope>
              <scope name="timesince" ilk="function" signature="timesince(d,now)" doc="Takes two datetime objects and returns the time between then and now as a nicely formatted string, e.g &amp;amp;quot;10 minutes&amp;amp;quot;">
                <variable ilk="argument" name="d" />
                <variable ilk="argument" name="now" />
              </scope>
              <scope name="_chunks" attributes="private" doc="" />
              <scope name="_months_ap" attributes="private" doc="" />
            </variable>
          </variable>
        </variable>
        <variable name="editor" citdl="Object" doc="">
          <scope name="plugins">
            <scope name="UploadImage" ilk="function" doc="Adds an icon to the Editor toolbar that when clicked, opens a system dialog Although the toolbar icon is a tiny &amp;amp;quot;image&amp;amp;quot; the uploader could be used for any file type">
              <scope name="tempImageUrl" doc="" />
              <scope name="iconClassPrefix" doc="" />
              <scope name="useDefaultCommand" doc="" />
              <scope name="uploadUrl" doc="" />
              <variable name="fileInput" doc="" />
              <scope name="label" doc="" />
              <scope name="_initButton" ilk="function" attributes="private" doc="" />
              <scope name="createFileInput" ilk="function" doc="" />
              <scope name="onComplete" ilk="function" signature="onComplete(data,ioArgs,widgetRef)" doc="">
                <variable ilk="argument" name="data" />
                <variable ilk="argument" name="ioArgs" />
                <variable ilk="argument" name="widgetRef" />
              </scope>
              <scope name="insertTempImage" ilk="function" doc="" />
              <variable name="command" doc="" />
              <variable name="currentImageId" doc="" />
            </scope>
          </scope>
        </variable>
        <variable name="embed" citdl="Object" doc="">
          <scope name="Flash">
            <scope name="place" ilk="function" signature="place(kwArgs,node)" doc="">
              <variable ilk="argument" name="kwArgs" />
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <variable name="IE" citdl="Object" doc="">
            <variable name="flash" citdl="Object" doc="" />
          </variable>
          <scope name="Object" ilk="function" doc="A widget you can use to embed either a Flash or Quicktime movie.">
            <variable name="width" citdl="Number?" doc="The width of the movie. If not provided, the width of this.domNode is used." />
            <scope name="height" citdl="Number?" doc="The height of the movie. If not provided, the height of this.domNode is used." />
            <scope name="src" citdl="String" doc="The URL of the movie to embed." />
            <variable name="movie" citdl="HTMLEmbed" doc="The eventual reference to the movie embedded. If you are looking to script control over the movie, you'd access it this way." />
            <variable name="params" citdl="Object" doc="A property bag that is created postCreate. Any additional attributes you define on your domNode will be collected and placed into this, which will then be passed to the movie constructor." />
            <scope name="reFlash" citdl="RegExp" doc="Expression used on the src property to determine if this is Flash or Quicktime." />
            <scope name="reQtMovie" citdl="RegExp" doc="Expression used on the src property to determine if this is Flash or Quicktime." />
            <scope name="reQtAudio" citdl="RegExp" doc="Expression used on the src property to determine if this is Flash or Quicktime." />
            <scope name="postCreate" ilk="function" doc="" />
          </scope>
          <scope name="Quicktime" ilk="function" signature="Quicktime(kwArgs,node)" doc="Returns a reference to the HTMLObject/HTMLEmbed that is created to place the movie in the document. You can use this either with or without the new operator. Note that with any other DOM manipulation, you must wait until the document is finished loading before trying to use this." returns="HTMLObject" attributes="private">
            <variable ilk="argument" name="kwArgs" citdl="dojox.embed.__QTArgs" />
            <variable ilk="argument" name="node" citdl="DOMNode" />
            <scope name="supported" doc="" />
            <variable name="version" citdl="Object" doc="">
              <scope name="major" doc="" />
              <scope name="minor" doc="" />
              <scope name="rev" doc="" />
            </variable>
            <scope name="minSupported" doc="" />
            <scope name="available" doc="" />
            <scope name="initialized" doc="" />
            <scope name="onInitialize" ilk="function" doc="" />
            <scope name="place" ilk="function" signature="place(kwArgs,node)" returns="QuickTimeObject" attributes="private" doc="">
              <variable ilk="argument" name="kwArgs" />
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <scope name="__QTArgs" ilk="function" signature="__QTArgs(path,id,width,height,params,redirect)" attributes="private" doc="">
            <variable ilk="argument" name="path" citdl="String" doc="The URL of the movie to embed." />
            <variable ilk="argument" name="id" citdl="String" doc="A unique key that will be used as the id of the created markup. If you don't provide this, a unique key will be generated." />
            <variable ilk="argument" name="width" citdl="Number" doc="The width of the embedded movie; the default value is 320px." />
            <variable ilk="argument" name="height" citdl="Number" doc="The height of the embedded movie; the default value is 240px" />
            <variable ilk="argument" name="params" citdl="Object" doc="A set of key/value pairs that you want to define in the resultant markup." />
            <variable ilk="argument" name="redirect" citdl="String" doc="A url to redirect the browser to if the current QuickTime version is not supported." />
            <variable name="id" citdl="String?" doc="A unique key that will be used as the id of the created markup. If you don't provide this, a unique key will be generated." />
            <variable name="path" citdl="String" doc="The URL of the movie to embed." />
            <variable name="width" citdl="Number?" doc="The width of the embedded movie; the default value is 320px." />
            <variable name="height" citdl="Number?" doc="The height of the embedded movie; the default value is 240px" />
            <variable name="params" citdl="Object?" doc="A set of key/value pairs that you want to define in the resultant markup." />
            <variable name="redirect" citdl="String?" doc="A url to redirect the browser to if the current QuickTime version is not supported." />
          </scope>
        </variable>
        <variable name="encoding" citdl="Object" doc="Various encoding algorithms, including crypto and digests.">
          <variable name="ascii85" citdl="Object" doc="">
            <scope name="encode" ilk="function" signature="encode(input)" doc="encodes input data in ascii85 string" returns="String" attributes="private">
              <variable ilk="argument" name="input" citdl="Array" doc="an array of numbers (0-255) to encode" />
            </scope>
            <scope name="decode" ilk="function" signature="decode(input)" doc="decodes the input string back to array of numbers">
              <variable ilk="argument" name="input" citdl="String" doc="the input string to decode" />
            </scope>
          </variable>
          <variable name="base64" citdl="Object" doc="">
            <scope name="encode" ilk="function" signature="encode(ba)" returns="string" attributes="private" doc="">
              <variable ilk="argument" name="ba" citdl="byte[]" />
            </scope>
            <scope name="decode" ilk="function" signature="decode(str)" returns="byte[]" attributes="private" doc="">
              <variable ilk="argument" name="str" citdl="string" />
            </scope>
          </variable>
          <variable name="bits" citdl="Object" doc="">
            <scope name="OutputStream" ilk="function" doc="">
              <scope name="reset" ilk="function" doc="" />
              <variable name="buffer" doc="" />
              <variable name="accumulator" doc="" />
              <variable name="available" doc="" />
              <scope name="putBits" ilk="function" signature="putBits(value,width)" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="width" />
              </scope>
              <scope name="getWidth" ilk="function" doc="" />
              <scope name="getBuffer" ilk="function" doc="" />
            </scope>
            <scope name="InputStream" ilk="function" signature="InputStream(buffer,width)" doc="">
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="width" />
              <variable name="buffer" doc="" />
              <variable name="width" doc="" />
              <variable name="bbyte" doc="" />
              <scope name="getBits" ilk="function" signature="getBits(width)" doc="">
                <variable ilk="argument" name="width" />
              </scope>
              <variable name="bit" doc="" />
              <scope name="getWidth" ilk="function" doc="" />
            </scope>
          </variable>
          <variable name="compression" citdl="Object" doc="">
            <variable name="lzw" citdl="Object" doc="">
              <scope name="Encoder" ilk="function" signature="Encoder(n)" doc="">
                <variable ilk="argument" name="n" />
                <variable name="size" doc="" />
                <scope name="init" ilk="function" doc="" />
                <variable name="dict" doc="" />
                <variable name="width" doc="" />
                <variable name="p" doc="">
                  <variable name="length" doc="" />
                </variable>
                <scope name="encode" ilk="function" signature="encode(value,stream)" doc="">
                  <variable ilk="argument" name="value" />
                  <variable ilk="argument" name="stream" />
                </scope>
                <scope name="flush" ilk="function" signature="flush(stream)" doc="">
                  <variable ilk="argument" name="stream" />
                </scope>
              </scope>
              <scope name="Decoder" ilk="function" signature="Decoder(n)" doc="">
                <variable ilk="argument" name="n" />
                <variable name="size" doc="" />
                <scope name="init" ilk="function" doc="" />
                <variable name="codes" doc="" />
                <variable name="width" doc="" />
                <variable name="p" doc="" />
                <scope name="decode" ilk="function" signature="decode(stream)" doc="">
                  <variable ilk="argument" name="stream" />
                </scope>
              </scope>
            </variable>
            <scope name="Splay" ilk="function" signature="Splay(n)" doc="">
              <variable ilk="argument" name="n" />
              <variable name="up" doc="" />
              <variable name="left" doc="" />
              <variable name="right" doc="" />
              <scope name="reset" ilk="function" doc="" />
              <scope name="splay" ilk="function" signature="splay(i)" doc="">
                <variable ilk="argument" name="i" />
              </scope>
              <scope name="encode" ilk="function" signature="encode(value,stream)" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="stream" />
              </scope>
              <scope name="decode" ilk="function" signature="decode(stream)" doc="">
                <variable ilk="argument" name="stream" />
              </scope>
            </scope>
            <variable name="splay" citdl="Object" doc="" />
          </variable>
          <variable name="crypto" citdl="Object" doc="">
            <scope name="Blowfish" ilk="function" returns="string|array" attributes="private" doc="">
              <scope name="initialized" />
              <variable name="encrypt" ilk="function" signature="encrypt(plaintext,key,ao)" returns="string|array" attributes="private" doc="">
                <variable ilk="argument" name="plaintext" citdl="string" />
                <variable ilk="argument" name="key" citdl="string" />
                <variable ilk="argument" name="ao" citdl="object" />
              </variable>
              <variable name="decrypt" ilk="function" signature="decrypt(ciphertext,key,ao)" doc="">
                <variable ilk="argument" name="ciphertext" citdl="string" />
                <variable ilk="argument" name="key" citdl="string" />
                <variable ilk="argument" name="ao" citdl="object" />
              </variable>
              <variable name="getIV" ilk="function" signature="getIV(outputType)" returns="string|array" attributes="private" doc="">
                <variable ilk="argument" name="outputType" citdl="dojox.encoding.crypto.outputTypes" />
              </variable>
              <variable name="setIV" ilk="function" signature="setIV(data,inputType)" doc="">
                <variable ilk="argument" name="data" citdl="string" />
                <variable ilk="argument" name="inputType" citdl="dojox.encoding.crypto.outputTypes" />
              </variable>
            </scope>
            <variable name="cipherModes" citdl="Object" doc="">
              <scope name="ECB" doc="" />
            </variable>
            <variable name="outputTypes" citdl="Object" doc="">
              <scope name="Base64" doc="" />
            </variable>
            <variable name="_base" citdl="Object" attributes="private" doc="" />
          </variable>
          <variable name="digests" citdl="Object" doc="">
            <scope name="MD5" ilk="function" signature="MD5(data,outputType)" returns="word[]|string" attributes="private" doc="">
              <variable ilk="argument" name="data" citdl="string" />
              <variable ilk="argument" name="outputType" citdl="dojox.encoding.digests.outputTypes" />
              <scope name="_hmac" ilk="function" signature="_hmac(data,key,outputType)" returns="word[]|string" attributes="private" doc="">
                <variable ilk="argument" name="data" citdl="string" />
                <variable ilk="argument" name="key" citdl="string" />
                <variable ilk="argument" name="outputType" citdl="dojox.encoding.digests.outputTypes" />
              </scope>
            </scope>
            <variable name="outputTypes" citdl="Object" doc="">
              <scope name="Base64" doc="" />
            </variable>
            <scope name="addWords" ilk="function" signature="addWords(a,b)" returns="word" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="word" />
              <variable ilk="argument" name="b" citdl="word" />
            </scope>
            <scope name="stringToWord" ilk="function" signature="stringToWord(s)" returns="word[]" attributes="private" doc="">
              <variable ilk="argument" name="s" citdl="string" />
            </scope>
            <scope name="wordToString" ilk="function" signature="wordToString(wa)" returns="string" attributes="private" doc="">
              <variable ilk="argument" name="wa" citdl="word[]" />
            </scope>
            <scope name="wordToHex" ilk="function" signature="wordToHex(wa)" returns="string" attributes="private" doc="">
              <variable ilk="argument" name="wa" citdl="word[]" />
            </scope>
            <scope name="wordToBase64" ilk="function" signature="wordToBase64(wa)" returns="string" attributes="private" doc="">
              <variable ilk="argument" name="wa" citdl="word[]" />
            </scope>
            <variable name="_base" citdl="Object" attributes="private" doc="" />
          </variable>
          <variable name="easy64" citdl="Object" doc="">
            <scope name="encode" ilk="function" signature="encode(input)" doc="encodes input data in easy64 string" returns="String" attributes="private">
              <variable ilk="argument" name="input" citdl="Array" doc="an array of numbers (0-255) to encode" />
            </scope>
            <scope name="decode" ilk="function" signature="decode(input)" doc="decodes the input string back to array of numbers">
              <variable ilk="argument" name="input" citdl="String" doc="the input string to decode" />
            </scope>
          </variable>
        </variable>
        <variable name="flash" citdl="Object" doc="Utilities to embed and communicate with Flash-based objects">
          <scope name="ready" doc="" />
          <scope name="url" doc="" />
          <scope name="_visible" attributes="private" doc="" />
          <scope name="_loadedListeners" attributes="private" doc="" />
          <scope name="_installingListeners" attributes="private" doc="" />
          <scope name="setSwf" ilk="function" signature="setSwf(url,visible)" doc="Sets the SWF files and versions we are using.">
            <variable ilk="argument" name="url" citdl="String" doc="The URL to this Flash file." />
            <variable ilk="argument" name="visible" citdl="boolean" doc="Whether the Flash file is visible or not. If it is not visible we hide it off the screen. This defaults to true (i.e. the Flash file is visible)." />
            <variable name="url" citdl="String" doc="The URL to this Flash file." />
            <variable name="_visible" attributes="private" doc="" />
          </scope>
          <scope name="addLoadedListener" ilk="function" signature="addLoadedListener(listener)" doc="Adds a listener to know when Flash is finished loading. Useful if you don't want a dependency on dojo.event.">
            <variable ilk="function" name="listener" doc="A function that will be called when Flash is done loading." />
          </scope>
          <scope name="addInstallingListener" ilk="function" signature="addInstallingListener(listener)" doc="Adds a listener to know if Flash is being installed. Useful if you don't want a dependency on dojo.event.">
            <variable ilk="function" name="listener" doc="A function that will be called if Flash is being installed" />
          </scope>
          <scope name="loaded" ilk="function" doc="Called back when the Flash subsystem is finished loading." />
          <scope name="installing" ilk="function" doc="Called if Flash is being installed." />
          <scope name="_initialize" ilk="function" attributes="private" doc="" />
          <scope name="Info" ilk="function" doc="A class that helps us determine whether Flash is available." />
          <scope name="Embed" ilk="function" signature="Embed(visible)" doc="A class that is used to write out the Flash object into the page.">
            <variable ilk="argument" name="visible" />
            <variable name="_visible" attributes="private" doc="" />
          </scope>
          <scope name="Communicator" ilk="function" doc="A class that is used to communicate between Flash and JavaScript." />
          <scope name="Install" ilk="function" doc="Helps install Flash plugin if needed." />
          <scope name="info" doc="" />
          <variable name="_base" citdl="Object" attributes="private" doc="" />
        </variable>
        <variable name="form" citdl="Object" doc="">
          <scope name="_CheckedMultiSelectItem" ilk="function" doc="The individual items for a CheckedMultiSelect" attributes="private">
            <scope name="widgetsInTemplate" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="option" citdl="dojox.form.__SelectOption" doc="The option that is associated with this item">
              <variable name="selected" doc="" />
            </scope>
            <scope name="parent" doc="" />
            <variable name="disabled" citdl="boolean" doc="Whether or not this widget is disabled" />
            <scope name="postMixInProperties" ilk="function" doc="Set the appropriate _subClass value - based on if we are multi- or single-select" />
            <scope name="postCreate" ilk="function" doc="Set innerHTML here - since the template gets messed up sometimes with rich text" />
            <scope name="_changeBox" ilk="function" doc="Called to force the select to match the state of the check box (only on click of the checkbox) Radio-based calls _setValueAttr instead." attributes="private" />
            <scope name="_onMouse" ilk="function" signature="_onMouse(e)" doc="Sets the hover state depending on mouse state (passes through to the check box)" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_onClick" ilk="function" signature="_onClick(e)" doc="Sets the click state (passes through to the check box)" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_updateBox" ilk="function" doc="Called to force the box to match the state of the select" attributes="private" />
            <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(value)" doc="Disables (or enables) all the children as well" attributes="private">
              <variable ilk="argument" name="value" />
            </scope>
            <variable name="_type" attributes="private" doc="" />
            <scope name="labelNode">
              <variable name="innerHTML" doc="" />
            </scope>
          </scope>
          <scope name="CheckedMultiSelect" ilk="function" doc="Extends the core dijit MultiSelect to provide a &amp;amp;quot;checkbox&amp;amp;quot; selector">
            <scope name="templateString" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="_mouseDown" ilk="function" signature="_mouseDown(e)" doc="Cancels the mousedown event to prevent others from stealing focus" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_addOptionItem" ilk="function" signature="_addOptionItem(option)" attributes="private" doc="">
              <variable ilk="argument" name="option" citdl="dojox.form.__SelectOption" />
            </scope>
            <scope name="_updateSelection" ilk="function" attributes="private" doc="" />
            <scope name="_getChildren" ilk="function" attributes="private" doc="" />
            <scope name="invertSelection" ilk="function" signature="invertSelection(onChange)" doc="Invert the selection">
              <variable ilk="argument" name="onChange" citdl="Boolean" doc="If null, onChange is not fired." />
            </scope>
            <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(value)" doc="Disable (or enable) all the children as well" attributes="private">
              <variable ilk="argument" name="value" />
            </scope>
          </scope>
          <scope name="DateTextBox" ilk="function" doc="A validating, serializable, range-bound date text box with a popup calendar">
            <scope name="popupClass" doc="" />
            <scope name="_selector" attributes="private" doc="" />
            <scope name="_open" ilk="function" attributes="private" doc="" />
          </scope>
          <scope name="DayTextBox" ilk="function" doc="A validating, serializable, range-bound date text box with a popup calendar that contains just months.">
            <scope name="popupClass" citdl="String" doc="The popup widget to use. In this case, a calendar with just a Month view." />
            <scope name="format" ilk="function" signature="format(value)" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="validator" ilk="function" signature="validator(value)" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_open" ilk="function" attributes="private" doc="" />
            <scope name="_picker">
              <variable name="onValueSelected" doc="" />
            </scope>
          </scope>
          <scope name="MonthTextBox" ilk="function" doc="A validating, serializable, range-bound date text box with a popup calendar that contains just months.">
            <scope name="popupClass" citdl="String" doc="The popup widget to use. In this case, a calendar with just a Month view." />
            <scope name="validator" ilk="function" signature="validator(value)" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_open" ilk="function" attributes="private" doc="" />
            <scope name="_picker">
              <variable name="onValueSelected" doc="" />
            </scope>
          </scope>
          <scope name="YearTextBox" ilk="function" doc="A validating, serializable, range-bound date text box with a popup calendar that contains only years">
            <scope name="popupClass" citdl="String" doc="The popup widget to use. In this case, a calendar with just a Year view." />
            <scope name="validator" ilk="function" signature="validator(value)" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_open" ilk="function" attributes="private" doc="" />
            <scope name="_picker">
              <variable name="onValueSelected" doc="" />
            </scope>
          </scope>
          <scope name="DropDownSelect" ilk="function" doc="This is a &amp;amp;quot;Styleable&amp;amp;quot; select box - it is basically a DropDownButton which can take as its input a &amp;amp;lt;select&amp;amp;gt;.">
            <scope name="baseClass" doc="" />
            <scope name="templatePath" doc="" />
            <variable name="attributeMap" citdl="Object" doc="Add in our style to be applied to the focus node" />
            <scope name="required" citdl="Boolean" doc="Can be true or false, default is false." />
            <variable name="state" citdl="String" doc="Shows current state (ie, validation result) of input (Normal, Warning, or Error)" />
            <scope name="tooltipPosition" citdl="String[]" doc="See description of dijit.Tooltip.defaultPosition for details on this parameter." />
            <scope name="emptyLabel" citdl="string" doc="What to display in an &amp;amp;quot;empty&amp;amp;quot; dropdown" />
            <variable name="_isLoaded" citdl="boolean" doc="Whether or not we have been loaded" attributes="private" />
            <variable name="_childrenLoaded" citdl="boolean" doc="Whether or not our children have been loaded" attributes="private" />
            <scope name="_fillContent" ilk="function" doc="Set the value to be the first, or the selected index" attributes="private" />
            <scope name="_getMenuItemForOption" ilk="function" signature="_getMenuItemForOption(option)" doc="For the given option, return the menu item that should be used to display it. This can be overridden as needed" attributes="private">
              <variable ilk="argument" name="option" citdl="dojox.form.__SelectOption" />
            </scope>
            <scope name="_addOptionItem" ilk="function" signature="_addOptionItem(option)" doc="For the given option, add a option to our dropdown If the option doesn't have a value, then a separator is added in that place." attributes="private">
              <variable ilk="argument" name="option" citdl="dojox.form.__SelectOption" />
            </scope>
            <scope name="_getChildren" ilk="function" attributes="private" doc="" />
            <scope name="_loadChildren" ilk="function" doc="Resets the menu and the length attribute of the button - and ensures that the label is appropriately set." attributes="private" />
            <scope name="_setDisplay" ilk="function" signature="_setDisplay(newDisplay)" doc="sets the display for the given value (or values)" attributes="private">
              <variable ilk="argument" name="newDisplay" citdl="String" />
            </scope>
            <scope name="validate" ilk="function" signature="validate(isFocused)" doc="Called by oninit, onblur, and onkeypress.">
              <variable ilk="argument" name="isFocused" citdl="Boolean" />
            </scope>
            <scope name="isValid" ilk="function" signature="isValid(isFocused)" doc="Whether or not this is a valid value">
              <variable ilk="argument" name="isFocused" citdl="Boolean" />
            </scope>
            <scope name="reset" ilk="function" doc="Overridden so that the state will be cleared." />
            <scope name="postMixInProperties" ilk="function" doc="set the missing message" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_onMenuMouseup" ilk="function" signature="_onMenuMouseup(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="isLoaded" ilk="function" doc="" />
            <scope name="loadDropDown" ilk="function" signature="loadDropDown(loadCallback)" doc="populates the menu">
              <variable ilk="function" name="loadCallback" />
            </scope>
            <scope name="_setReadOnlyAttr" ilk="function" signature="_setReadOnlyAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <variable name="value" doc="" />
            <variable name="dropDown" doc="" />
            <scope name="containerNode">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="_message" attributes="private" doc="" />
            <variable name="_missingMsg" attributes="private" doc="" />
            <variable name="_iReadOnly" attributes="private" doc="" />
            <scope name="options">
              <variable name="length" doc="" />
            </scope>
            <variable name="readOnly" doc="" />
            <variable name="_iDisabled" attributes="private" doc="" />
          </scope>
          <scope name="DropDownStack" ilk="function" doc="A dropdown-based select stack." />
          <scope name="FileInput" ilk="function" doc="A styled input type=&amp;amp;quot;file&amp;amp;quot;">
            <scope name="label" doc="" />
            <scope name="cancelText" citdl="String" doc="the title of the &amp;amp;quot;Cancel&amp;amp;quot; button" />
            <scope name="name" citdl="String" doc="ugh, this should be pulled from this.domNode" />
            <scope name="templatePath" doc="" />
            <scope name="startup" ilk="function" doc="listen for changes on our real file input" />
            <scope name="_matchValue" ilk="function" doc="set the content of the upper input based on the semi-hidden file input" attributes="private" />
            <scope name="setLabel" ilk="function" signature="setLabel(label,cssClass)" doc="method to allow use to change button label">
              <variable ilk="argument" name="label" citdl="String" />
              <variable ilk="argument" name="cssClass" citdl="String" />
            </scope>
            <scope name="reset" ilk="function" signature="reset(e)" doc="on click of cancel button, since we can't clear the input because of security reasons, we destroy it, and add a new one in it's place.">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <variable name="_listener" attributes="private" doc="" />
            <variable name="_keyListener" attributes="private" doc="" />
            <scope name="inputNode">
              <variable name="value" doc="" />
            </scope>
            <scope name="cancelNode" />
            <scope name="titleNode">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="fileInput" doc="" />
          </scope>
          <scope name="FileInputAuto" ilk="function" doc="An extension on dojox.form.FileInput providing background upload progress">
            <scope name="url" doc="" />
            <scope name="blurDelay" citdl="Integer" doc="time in ms before an un-focused widget will wait before uploading the file to the url=&amp;amp;quot;&amp;amp;quot; specified default: 2 seconds" />
            <scope name="duration" citdl="Integer" doc="The time in ms to use as the generic timing mechanism for the animations set to 1 or 0 for &amp;amp;quot;immediate respose&amp;amp;quot;" />
            <scope name="uploadMessage" citdl="String" doc="FIXME: i18n somehow?" />
            <scope name="triggerEvent" citdl="String" doc="Event which triggers the upload. Defaults to onblur, sending the file selected 'blurDelay' milliseconds after losing focus. Set to &amp;amp;quot;onchange&amp;amp;quot; with a low blurDelay to send files immediately after uploading." />
            <variable name="_sent" attributes="private" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="startup" ilk="function" doc="add our extra blur listeners" />
            <scope name="_onFocus" ilk="function" doc="clear the upload timer" attributes="private" />
            <scope name="_onBlur" ilk="function" doc="start the upload timer" attributes="private" />
            <scope name="setMessage" ilk="function" signature="setMessage(title)" doc="set the text of the progressbar  innerHTML throws errors in IE! so use DOM manipulation instead this.overlay.innerHTML = title;">
              <variable ilk="argument" name="title" citdl="String" />
            </scope>
            <scope name="_sendFile" ilk="function" signature="_sendFile(e)" doc="triggers the chain of events needed to upload a file in the background." attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_handleSend" ilk="function" signature="_handleSend(data,ioArgs)" doc="The callback to toggle the progressbar, and fire the user-defined callback" attributes="private">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="ioArgs" />
            </scope>
            <scope name="reset" ilk="function" signature="reset(e)" doc="accomodate our extra focusListeners">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onComplete" ilk="function" signature="onComplete(data,ioArgs,widgetRef)" doc="stub function fired when an upload has finished.">
              <variable ilk="argument" name="data" citdl="the" doc="raw data found in the first [TEXTAREA] tag of the post url" />
              <variable ilk="argument" name="ioArgs" citdl="the" doc="dojo.Deferred data being passed from the handle: callback" />
              <variable ilk="argument" name="widgetRef" citdl="this" doc="widget pointer, so you can set this.overlay to a completed/error message easily" />
            </scope>
            <variable name="_blurListener" attributes="private" doc="" />
            <variable name="_focusListener" attributes="private" doc="" />
            <variable name="_blurTimer" attributes="private" doc="" />
            <variable name="_sending" attributes="private" doc="" />
            <scope name="overlay" />
            <variable name="fileInput" doc="" />
            <scope name="fakeNodeHolder" />
          </scope>
          <scope name="FileInputBlind" ilk="function" doc="An extended version of dojox.form.FileInputAuto that does not display an input node, but rather only a button and otherwise behaves just like FileInputAuto">
            <scope name="startup" ilk="function" doc="hide our fileInput input field" />
            <scope name="_fixPosition" ilk="function" doc="in this case, set the button under where the visible button is" attributes="private" />
            <scope name="reset" ilk="function" signature="reset(e)" doc="onclick, we need to reposition our newly created input type=&amp;amp;quot;file&amp;amp;quot;">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="_off" attributes="private" doc="" />
            <scope name="inputNode" />
          </scope>
          <scope name="FilePickerTextBox" ilk="function" doc="A validating text box tied to a file picker popup">
            <scope name="baseClass" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="searchDelay" citdl="Integer" doc="Delay in milliseconds between when user types something and we start searching based on that value" />
            <scope name="_stopClickEvents" attributes="private" doc="" />
            <variable name="valueItem" citdl="item" doc="The item, in our store, of the directory relating to our value" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value)" doc="sets the value of this widget" attributes="private">
              <variable ilk="argument" name="value" citdl="string" />
            </scope>
            <scope name="_onWidgetChange" ilk="function" signature="_onWidgetChange(item)" doc="called when the path gets changed in the dropdown" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="startup" ilk="function" doc="" />
            <scope name="openDropDown" ilk="function" doc="" />
            <scope name="toggleDropDown" ilk="function" doc="" />
            <scope name="_focusBlur" ilk="function" signature="_focusBlur(e)" doc="called when the focus node gets blurred" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_focusFocus" ilk="function" signature="_focusFocus(e)" doc="called when the focus node gets focus" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onBlur" ilk="function" doc="called when focus is shifted away from this widget" attributes="private" />
            <scope name="_setBlurValue" ilk="function" doc="sets the value of the widget once focus has left" attributes="private" />
            <scope name="parse" ilk="function" signature="parse(value,constraints)" doc="Function to convert a formatted string to a value - we use it to verify that it *really* is a valid value">
              <variable ilk="argument" name="value" citdl="String" />
              <variable ilk="argument" name="constraints" citdl="Object" />
            </scope>
            <scope name="_startSearchFromInput" ilk="function" doc="kicks off a search based off the current text value of the widget" attributes="private" />
            <scope name="_onKey" ilk="function" signature="_onKey(e)" doc="callback when the user presses a key on menu popup node" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <variable name="dropDown" doc="">
              <scope name="domNode" />
            </variable>
            <variable name="_skip" attributes="private" doc="" />
            <variable name="_hasValidPath" attributes="private" doc="" />
            <variable name="_menuFocus" attributes="private" doc="" />
            <variable name="_allowBlur" attributes="private" doc="" />
            <variable name="_hasSelection" attributes="private" doc="" />
            <variable name="_searchInProgress" attributes="private" doc="" />
            <variable name="_searchTimer" attributes="private" doc="" />
          </scope>
          <scope name="FileInputFlash" ilk="function" doc="" signature="FileInputFlash(options)">
            <variable ilk="argument" name="options" />
            <variable name="uploadUrl" citdl="String" doc="*/ The Url the file will be uploaded" />
            <variable name="button" citdl="dijit.form.Button" doc="or a domNode */ REQUIRED: The button that when clicked, launches the Flash Upload dialog" />
            <variable name="uploadOnChange" citdl="Boolean" doc="*/ if true, begins upload immediately leave false if you wish to display the text of the selection and present an &amp;amp;quot;upload&amp;amp;quot; button" />
            <variable name="selectMultipleFiles" citdl="fieldName:" doc="/* String */ The form field attribute. This will be needed by the server to get the value. If using the ReceiveFile.php test, leave this as-is. TODO:fieldName:&amp;amp;quot;uploadedfile&amp;amp;quot;, Boolean */ Option to restrict to single-file upload, or allow multi-file uploader" />
            <variable name="fileMask" citdl="Array["
            doc="Array[Description, FileTypes], Array[...]...] */ (an array, or an array of arrays) Restrict file selection to certain file types Empty array defaults to &amp;amp;quot;All Files&amp;amp;quot;  Usage: fileMask = [&amp;amp;quot;Images&amp;amp;quot;, &amp;amp;quot;*.jpg;*.jpeg;*.gif;*.png&amp;amp;quot;] or fileMask = [ [&amp;amp;quot;Jpeg File&amp;amp;quot;, 	&amp;amp;quot;*.jpg;*.jpeg&amp;amp;quot;], [&amp;amp;quot;GIF File&amp;amp;quot;, 	&amp;amp;quot;*.gif&amp;amp;quot;], [&amp;amp;quot;PNG File&amp;amp;quot;, 	&amp;amp;quot;*.png&amp;amp;quot;], [&amp;amp;quot;All Images&amp;amp;quot;, 	&amp;amp;quot;*.jpg;*.jpeg;*.gif;*.png&amp;amp;quot;], ] NOTE: MacType is not supported, as it does not work very well. fileMask will work on a Mac, but differently than Windows. The second example above in Windows will mask All but the selected file type, shown in a drop-down at the bottom of the system dialog. In Mac, all types in all arrays will be shown and non-types masked." />
            <variable name="flashObject" doc="">
              <variable name="onLoad" doc="" />
            </variable>
            <variable name="flashMovie" doc="" />
            <variable name="flashDiv" doc="" />
            <scope name="onChange" ilk="function" signature="onChange(dataArray)" doc="">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope name="onProgress" ilk="function" signature="onProgress(dataArray)" doc="">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope name="onComplete" ilk="function" signature="onComplete(dataArray)" doc="">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope name="onError" ilk="function" signature="onError(evtObject)" doc="">
              <variable ilk="argument" name="evtObject" />
            </scope>
            <scope name="upload" ilk="function" doc="" />
            <scope name="_error" ilk="function" signature="_error(evt)" attributes="private" doc="">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="_openDialog" ilk="function" signature="_openDialog(evt)" attributes="private" doc="">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="_change" ilk="function" signature="_change(dataArray)" attributes="private" doc="">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope name="_complete" ilk="function" signature="_complete(dataArray)" attributes="private" doc="">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope name="_progress" ilk="function" signature="_progress(dataObject)" attributes="private" doc="">
              <variable ilk="argument" name="dataObject" />
            </scope>
            <scope name="destroyAll" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <variable name="fileList" doc="" />
            <variable name="_subs" attributes="private" doc="" />
            <variable name="_cons" attributes="private" doc="" />
            <variable name="id" doc="" />
          </scope>
          <scope name="FileInputOverlay" ilk="function"
          doc="Handles the basic tasks of a fileInput... Does NOT create a button, it transparently overlays a button passed to it. This can be used for toolbar buttons for example. Handles the file upload. Use an example PHP script included in resources.  NOTE: This looks like it is duplicating efforts of the other FileInput files, but its actually seperating the lower-level functionality, and allowing for custom buttons.  LIMITATIONS: Because of the nature of this &amp;amp;quot;hack&amp;amp;quot; - floating a zero-opacity fileInput over a &amp;amp;quot;fake&amp;amp;quot; button - this won't work in all circumstances. For instance you couldn't put a fileInput in a scrolling div. Some complicated CSS can mess up the placement - or for that matter, some simple, but not expected CSS can mess up the placement. Being near the botton of a complex document can throw off the positioning.  OPERA USERS: Not much love from Opera on FileInput hacks.  ALSO: Only works programmatically. Does not work in markup. Use the other other FileInput files for markup solutions.  USAGE: this.fileInput = new dojox.form.FileInputOverlay({button:this.button, uploadUrl:this.uploadUrl, uploadOnChange:true}); dojo.connect(this.fileInput, &amp;amp;quot;onChange&amp;amp;quot;, this, &amp;amp;quot;handleChange&amp;amp;quot;); dojo.connect(this.fileInput, &amp;amp;quot;onComplete&amp;amp;quot;, this, &amp;amp;quot;onComplete&amp;amp;quot;);"
          signature="FileInputOverlay(options)">
            <variable ilk="argument" name="options" />
            <variable name="_fileInput" citdl="node" doc="*/ the form node (do not set)" attributes="private" />
            <variable name="_formNode" attributes="private" doc="">
              <variable name="encoding" doc="" />
              <variable name="id" doc="" />
            </variable>
            <variable name="uploadUrl" citdl="String" doc="*/ The Url the file will be uploaded" />
            <variable name="button" citdl="dijit.form.Button" doc="or a domNode */ REQUIRED: The button that will get the FileInput overlay">
              <variable name="id" doc="" />
            </variable>
            <variable name="uploadOnChange" citdl="Boolean" doc="*/ if true, begins upload immediately leave false if you wish to display the text of the selection and present an &amp;amp;quot;upload&amp;amp;quot; button" />
            <scope name="fieldName" citdl="String" doc="*/ The form field attribute. This will be needed by the server to get the value. If using the ReceiveFile.php test, leave this as-is." />
            <variable name="id" citdl="String" doc="*/ The attribute of the form field. Also accesses this object." />
            <variable name="selectMultipleFiles" doc="" />
            <scope name="onChange" ilk="function" signature="onChange(dataArray)" doc="">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope name="onProgress" ilk="function" signature="onProgress(dataArray)" doc="">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope name="onComplete" ilk="function" signature="onComplete(dataArray)" doc="">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope name="upload" ilk="function" doc="" />
            <scope name="createFileInput" ilk="function" doc="" />
            <scope name="setPosition" ilk="function" doc="" />
            <scope name="_getFakeButtonSize" ilk="function" attributes="private" doc="" />
            <scope name="_buildFileInput" ilk="function" signature="_buildFileInput(domNode)" attributes="private" doc="">
              <variable ilk="argument" name="domNode" />
            </scope>
            <scope name="_removeFileInput" ilk="function" attributes="private" doc="" />
            <scope name="_buildForm" ilk="function" signature="_buildForm(domNode)" attributes="private" doc="">
              <variable ilk="argument" name="domNode" />
            </scope>
            <scope name="_connectInput" ilk="function" attributes="private" doc="" />
            <scope name="_disconnectInput" ilk="function" attributes="private" doc="" />
            <scope name="_setFormStyle" ilk="function" attributes="private" doc="" />
            <scope name="onMouseOver" ilk="function" signature="onMouseOver(evt)" doc="">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="onMouseOut" ilk="function" signature="onMouseOut(evt)" doc="">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="destroyAll" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <variable name="fileInputs" doc="" />
            <variable name="fileCount" doc="" />
            <variable name="_cons" attributes="private" doc="" />
          </scope>
          <scope name="FileUploader" ilk="function" signature="FileUploader(options)" doc="Handles File Uploading to a server (PHP script included for testing) Does *NOT* create a button, it transforms a button into an uploader. This can be used for toolbar buttons for example.  FileUploader is a wrapper class. If the correct version of Flash Player is available, FileInputFlash is used. If degradable is true, and Flash Player is not installed or is outdated, FileInputOverlay is used.  arguments:">
            <variable ilk="argument" name="options" />
            <variable name="degradable" citdl="Boolean" doc="*/ If true, will check if user has the correct version of the Flash Player installed, and if not, will cancel FileInputFlash and install FileInputOverlay instead. If false and user does not have the correct version of Flash, (or if user has Opera) FileInputFlash will install regardless, hopefully triggering the browser update mechanism." />
            <variable name="uploadUrl" doc="" />
            <variable name="button" doc="" />
          </scope>
          <scope name="MultiComboBox" ilk="function" doc="A ComboBox that accpets multiple inputs on a single line?">
            <scope name="delimiter" citdl="String" doc="The character to use to separate items in the ComboBox input" />
            <variable name="_previousMatches" attributes="private" doc="" />
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_addPreviousMatches" ilk="function" signature="_addPreviousMatches(text)" returns="String" attributes="private" doc="">
              <variable ilk="argument" name="text" citdl="String" />
            </scope>
            <scope name="_cleanupDelimiters" ilk="function" signature="_cleanupDelimiters(text)" attributes="private" doc="">
              <variable ilk="argument" name="text" citdl="String" />
            </scope>
            <scope name="_autoCompleteText" ilk="function" signature="_autoCompleteText(text)" attributes="private" doc="">
              <variable ilk="argument" name="text" citdl="String" />
            </scope>
            <scope name="_startSearch" ilk="function" signature="_startSearch(text)" attributes="private" doc="">
              <variable ilk="argument" name="text" citdl="String" />
            </scope>
          </scope>
          <scope name="_ChildTextBox" doc="A class that is shared between all our children - extends ValidationTextBox and provides some shared functionality" attributes="private">
            <scope name="containerWidget" citdl="widget" doc="Our parent (the PasswordValidator)" />
            <scope name="reset" ilk="function" doc="Force-set to empty string (we don't save passwords EVER)...and since _OldPWBox overrides _setValueAttr to check for empty string, call our parent class directly (not this.inherited())" />
            <variable name="_hasBeenBlurred" attributes="private" doc="" />
          </scope>
          <scope name="_OldPWBox" ilk="function" doc="A class representing our &amp;amp;quot;old password&amp;amp;quot; box." attributes="private">
            <variable name="_isPWValid" citdl="boolean" doc="Whether or not the password is valid" attributes="private" />
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(newVal,priority)" doc="Updates _isPWValid if this isn't our initial update by calling our PasswordValidator's pwCheck function" attributes="private">
              <variable ilk="argument" name="newVal" citdl="anything" />
              <variable ilk="argument" name="priority" citdl="boolean" />
            </scope>
            <scope name="isValid" ilk="function" signature="isValid(isFocused)" doc="">
              <variable ilk="argument" name="isFocused" citdl="boolean" />
            </scope>
            <scope name="_update" ilk="function" signature="_update(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="event" />
            </scope>
            <scope name="_getValueAttr" ilk="function" attributes="private" doc="" />
          </scope>
          <scope name="_NewPWBox" ilk="function" doc="A class representing our new password textbox" attributes="private">
            <scope name="required" doc="" />
            <scope name="onChange" ilk="function" doc="Validates our verify box - to make sure that a change to me is reflected there" />
          </scope>
          <scope name="_VerifyPWBox" ilk="function" doc="A class representing our verify textbox" attributes="private">
            <scope name="isValid" ilk="function" signature="isValid(isFocused)" doc="Validates that we match the &amp;amp;quot;real&amp;amp;quot; password">
              <variable ilk="argument" name="isFocused" />
            </scope>
          </scope>
          <scope name="PasswordValidator" ilk="function" doc="A password validation widget that simplifies the &amp;amp;quot;old/new/verify&amp;amp;quot; style of requesting passwords. You will probably want to override this class and implement your own pwCheck function.">
            <variable name="required" citdl="boolean" doc="Whether or not it is required for form submission" />
            <variable name="_inputWidgets" attributes="private" doc="" />
            <scope name="oldName" citdl="string?" doc="The name to send our old password as (when form is posted)" />
            <scope name="templatePath" doc="" />
            <variable name="_hasBeenBlurred" attributes="private" doc="" />
            <scope name="isValid" ilk="function" signature="isValid(isFocused)" doc="we are valid if ALL our children are valid">
              <variable ilk="argument" name="isFocused" citdl="boolean" />
            </scope>
            <scope name="validate" ilk="function" signature="validate(isFocused)" doc="Validating this widget validates all our children">
              <variable ilk="argument" name="isFocused" citdl="boolean" />
            </scope>
            <scope name="reset" ilk="function" doc="Resetting this widget resets all our children" />
            <scope name="_createSubWidgets" ilk="function" doc="Turns the inputs inside this widget into &amp;amp;quot;real&amp;amp;quot; validation widgets - and sets up the needed connections." attributes="private" />
            <scope name="pwCheck" ilk="function" signature="pwCheck(password)" doc="Overridable function for validation of the old password box.  This function is called and passed the old password. Return true if it's OK to continue, and false if it is not.  IMPORTANT SECURITY NOTE: Do NOT EVER EVER EVER check this in HTML or JavaScript!!!  You will probably want to override this function to callback to a server to verify the password (the callback will need to be syncronous) - and it's probably a good idea to validate it again on form submission before actually doing anything destructive - that's why the &amp;amp;quot;oldName&amp;amp;quot; value is available.  And don't just fetch the password from the server either :) Send the test password (probably hashed, for security) and return from the server a status instead.  Again - DON'T BE INSECURE!!! Security is left as an exercise for the reader :)">
              <variable ilk="argument" name="password" citdl="string" />
            </scope>
            <scope name="postCreate" ilk="function" doc="Sets up the correct widgets. You *MUST* specify one child text box (a simple HTML &amp;amp;lt;input&amp;amp;gt; element) with pwType=&amp;amp;quot;new&amp;amp;quot; *and* one child text box with pwType=&amp;amp;quot;verify&amp;amp;quot;. You *MAY* specify a third child text box with pwType=&amp;amp;quot;old&amp;amp;quot; in order to prompt the user to enter in their old password before the widget returns that it is valid." />
            <scope name="_setDisabledAttr" ilk="function" signature="_setDisabledAttr(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_setRequiredAttribute" ilk="function" signature="_setRequiredAttribute(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_getValueAttr" ilk="function" attributes="private" doc="" />
            <scope name="focus" ilk="function" doc="places focus on the first invalid input widget - if all input widgets are valid, the first widget is focused." />
          </scope>
          <scope name="RadioStack" ilk="function" doc="A radio-based select stack." />
          <scope name="_RangeSliderMixin" ilk="function" attributes="private" doc="">
            <scope name="value" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onHandleClickMax" ilk="function" signature="_onHandleClickMax(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_onClkIncBumper" ilk="function" attributes="private" doc="" />
            <scope name="_bumpValue" ilk="function" signature="_bumpValue(signedChange,useMaxValue)" attributes="private" doc="">
              <variable ilk="argument" name="signedChange" />
              <variable ilk="argument" name="useMaxValue" />
            </scope>
            <scope name="_getBumpValue" ilk="function" signature="_getBumpValue(signedChange,useMaxValue)" attributes="private" doc="">
              <variable ilk="argument" name="signedChange" />
              <variable ilk="argument" name="useMaxValue" />
            </scope>
            <scope name="_onBarClick" ilk="function" signature="_onBarClick(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_onRemainingBarClick" ilk="function" signature="_onRemainingBarClick(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_setPixelValue" ilk="function" signature="_setPixelValue(pixelValue,maxPixels,priorityChange,isMaxVal)" attributes="private" doc="">
              <variable ilk="argument" name="pixelValue" citdl="Number" />
              <variable ilk="argument" name="maxPixels" citdl="Number" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean" />
              <variable ilk="argument" name="isMaxVal" citdl="Boolean" />
            </scope>
            <scope name="_getValueByPixelValue" ilk="function" signature="_getValueByPixelValue(pixelValue,maxPixels)" attributes="private" doc="">
              <variable ilk="argument" name="pixelValue" citdl="Number" />
              <variable ilk="argument" name="maxPixels" citdl="Number" />
            </scope>
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value,priorityChange,isMaxVal)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="Array or Number" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean, optional" />
              <variable ilk="argument" name="isMaxVal" citdl="Boolean, optional" />
            </scope>
            <scope name="_printSliderBar" ilk="function" signature="_printSliderBar(priorityChange,isMaxVal)" attributes="private" doc="">
              <variable ilk="argument" name="priorityChange" />
              <variable ilk="argument" name="isMaxVal" />
            </scope>
            <variable name="widget" doc="" />
            <variable name="_movableMax" attributes="private" doc="" />
            <variable name="_movableBar" attributes="private" doc="" />
            <variable name="_descending" attributes="private" doc="" />
            <variable name="_lastValueReported" attributes="private" doc="" />
            <scope name="valueNode">
              <variable name="value" doc="" />
            </scope>
          </scope>
          <scope name="HorizontalRangeSlider" ilk="function" doc="">
            <scope name="templatePath" doc="" />
          </scope>
          <scope name="VerticalRangeSlider" ilk="function" doc="">
            <scope name="templatePath" doc="" />
          </scope>
          <variable name="RangeSlider" citdl="Object" doc="" />
          <scope name="Rating" ilk="function" doc="A widget for rating using stars.  required: Boolean TODO: Can be true or false, default is false. required: false,">
            <scope name="templateString" doc="" />
            <scope name="numStars" citdl="Integer/Float" doc="The number of stars to show, default is 3." />
            <scope name="value" citdl="Integer/Float" doc="The current value of the Rating" />
            <scope name="constructor" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_onMouse" ilk="function" signature="_onMouse(evt)" attributes="private" doc="">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="_renderStars" ilk="function" signature="_renderStars(value,hover)" doc="Render the stars depending on the value." attributes="private">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="hover" />
            </scope>
            <scope name="onStarClick" doc="" />
            <scope name="onMouseOver" ilk="function" doc="Connect here, the value is passed to this function as the second parameter!" />
            <scope name="setAttribute" ilk="function" signature="setAttribute(key,value)" doc="When calling setAttribute(&amp;amp;quot;value&amp;amp;quot;, 4), set the value and render the stars accordingly.">
              <variable ilk="argument" name="key" citdl="String" />
              <variable ilk="argument" name="value" />
            </scope>
          </scope>
          <scope name="TimeSpinner" ilk="function" doc="Time Spinner">
            <scope name="required" doc="" />
            <scope name="adjust" ilk="function" signature="adjust(val,delta)" doc="">
              <variable ilk="argument" name="val" citdl="Object" />
              <variable ilk="argument" name="delta" citdl="Number" />
            </scope>
            <scope name="isValid" ilk="function" doc="" />
            <scope name="smallDelta" doc="" />
            <scope name="largeDelta" doc="" />
            <scope name="timeoutChangeRate" doc="" />
            <scope name="parse" ilk="function" signature="parse(time,locale)" doc="">
              <variable ilk="argument" name="time" />
              <variable ilk="argument" name="locale" />
            </scope>
            <scope name="format" ilk="function" signature="format(time,locale)" doc="">
              <variable ilk="argument" name="time" />
              <variable ilk="argument" name="locale" />
            </scope>
            <scope name="serialize" doc="" />
            <scope name="value" doc="" />
          </scope>
          <scope name="_FormSelectWidget" ilk="function" attributes="private" doc="">
            <scope name="multiple" citdl="Boolean" doc="Matches the select's &amp;amp;quot;multiple=&amp;amp;quot; value" />
            <variable name="_multiValue" citdl="Boolean" doc="Whether or not we are multi-valued (for form)" attributes="private" />
            <scope name="getOptions" ilk="function" signature="getOptions(valueOrIdx)" doc="Returns a given option (or options)." returns="dojox.form.__SelectOption[]|dojox.form.__SelectOption|null" attributes="private">
              <variable ilk="argument" name="valueOrIdx" citdl="anything" doc="If passed in as a string, that string is used to look up the option in the array of options - based on the value property. (See dojox.form.__SelectOption).  If passed in a number, then the option with the given index (0-based) within this select will be returned.  If passed in a dojox.form.__SelectOption, the same option will be returned if and only if it exists within this select.  If passed an array, then an array will be returned with each element in the array being looked up.  If not passed a value, then all options will be returned" />
              <variable name="return_summary" />
            </scope>
            <scope name="addOption" ilk="function" signature="addOption(option)" doc="Adds an option or options to the end of the select. If value of the option is empty or missing, a separator is created instead. Passing in an array of options will yeild slightly better performance since the children are only loaded once.">
              <variable ilk="argument" name="option" citdl="dojox.form.__SelectOption, dojox.form.__SelectOption[]" />
            </scope>
            <scope name="removeOption" ilk="function" signature="removeOption(valueOrIdx)" doc="Removes the given option or options. You can remove by string (in which case the value is removed), number (in which case the index in the options array is removed), or select option (in which case, the select option with a matching value is removed). You can also pass in an array of those values for a slightly better performance since the children are only loaded once.">
              <variable ilk="argument" name="valueOrIdx" citdl="string, dojox.form.__SelectOption, number, or array" />
            </scope>
            <scope name="updateOption" ilk="function" signature="updateOption(newOption)" doc="Updates the values of the given option. The option to update is matched based on the value of the entered option. Passing in an array of new options will yeild better performance since the children will only be loaded once.">
              <variable ilk="argument" name="newOption" citdl="dojox.form.__SelectOption, dojox.form.__SelectOption[]" />
            </scope>
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(newValue,priorityChange)" doc="set the value of the widget. If a string is passed, then we set our value from looking it up." attributes="private">
              <variable ilk="argument" name="newValue" citdl="anything" />
              <variable ilk="argument" name="priorityChange" citdl="Boolean, optional" />
            </scope>
            <scope name="_getValueDeprecated" attributes="private" doc="" />
            <scope name="getValue" ilk="function" doc="get the value of the widget." />
            <scope name="undo" ilk="function" doc="restore the value to the last value passed to onChange" />
            <scope name="_loadChildren" ilk="function" doc="Loads the children represented by this widget's optiosn. reset the menu to make it &amp;amp;quot;populatable on the next click" attributes="private" />
            <scope name="_updateSelection" ilk="function" doc="Sets the &amp;amp;quot;selected&amp;amp;quot; class on the item for styling purposes" attributes="private" />
            <scope name="_getValueFromOpts" ilk="function" doc="Returns the value of the widget by reading the options for the selected flag" attributes="private" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="_fillContent" ilk="function" doc="Loads our options and sets up our dropdown correctly. We don't want any content, so we don't call any inherit chain function." attributes="private" />
            <scope name="postCreate" ilk="function" doc="sets up our event handling that we need for functioning as a select" />
            <scope name="_addOptionItem" ilk="function" signature="_addOptionItem(option)" doc="User-overridable function which, for the given option, adds an item to the select. If the option doesn't have a value, then a separator is added in that place. Make sure to store the option in the created option widget." attributes="private">
              <variable ilk="argument" name="option" citdl="dojox.form.__SelectOption" />
            </scope>
            <scope name="_removeOptionItem" ilk="function" signature="_removeOptionItem(option)" doc="User-overridable function which, for the given option, removes its item from the select." attributes="private">
              <variable ilk="argument" name="option" citdl="dojox.form.__SelectOption" />
            </scope>
            <scope name="_setDisplay" ilk="function" signature="_setDisplay(newDisplay)" doc="Overridable function which will set the display for the widget. newDisplay is either a string (in the case of single selects) or array of strings (in the case of multi- selects)" attributes="private">
              <variable ilk="argument" name="newDisplay" citdl="String or String[]" />
            </scope>
            <scope name="_getChildren" ilk="function" doc="Overridable function to return the children that this widget contains." attributes="private" />
            <scope name="_getSelectedOptionsAttr" ilk="function" doc="hooks into this.attr to provide a mechanism for getting the option items for the current value of the widget." attributes="private" />
            <variable name="options" doc="" />
            <variable name="value" doc="" />
          </scope>
          <scope name="_HasDropDown" ilk="function" doc="Mixin for widgets that need drop down ability." attributes="private">
            <variable name="dropDownNode" citdl="DomNode" doc="responds to click events. &amp;amp;quot;dropDownNode&amp;amp;quot; can be set via a dojoAttachPoint assignment. If missing, then either focusNode or domNode (if focusNode is also missing) will be used." />
            <variable name="popupStateNode" citdl="DomNode" doc="the node to set the popupActive class on. If missing, then focusNode or dropDownNode (if focusNode is missing) will be used." />
            <variable name="aroundNode" citdl="DomNode" doc="the node to display the popup around. If missing, then domNode will be used." />
            <scope name="dropDown" citdl="Widget" doc="the widget to display in the popup. This widget *must* be defined before the startup function is called." />
            <scope name="autoWidth" citdl="Boolean" doc="Set to true to make the drop down at least as wide as this widget. Set to false if the drop down should just be its default width" />
            <scope name="_stopClickEvents" citdl="Boolean" doc="When set to false, the click events will not be stopped, in case you want to use them in your subwidget" attributes="private" />
            <scope name="_onMenuMouseup" ilk="function" signature="_onMenuMouseup(e)" doc="called with the mouseup event if the mouseup occurred over the menu. You can try and use this event in order to automatically execute your dropdown (as if it were clicked). You mightwant to close your menu as a part of this function." attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onDropDownMouse" ilk="function" signature="_onDropDownMouse(e)" doc="callback when the user mouse clicks on menu popup node  We handle mouse events using onmousedown in order to allow for selecting via a drag. So, our click is already handled, unless we are executed via keypress - in which case, this._seenKeydown will be set to true." attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onDropDownMouseup" ilk="function" signature="_onDropDownMouseup(e)" doc="callback when the user lifts their mouse - if we are over the menu, we execute it, otherwise, we focus our dropDown node. If the event is missing, then we are not a mouseup event." attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_setupDropdown" ilk="function" doc="set up nodes and connect our mouse and keypress events" attributes="private" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="destroyDescendants" ilk="function" doc="" />
            <scope name="_onDropDownKeydown" ilk="function" signature="_onDropDownKeydown(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onDropDownBlur" ilk="function" signature="_onDropDownBlur(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onKey" ilk="function" signature="_onKey(e)" doc="callback when the user presses a key on menu popup node" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onBlur" ilk="function" doc="called magically when focus has shifted away from this widget and it's dropdown" attributes="private" />
            <scope name="isLoaded" ilk="function" doc="returns whether or not the dropdown is loaded. This can be overridden in order to force a call to loadDropDown()." />
            <scope name="loadDropDown" ilk="function" signature="loadDropDown(loadCallback)" doc="loads the data for the dropdown, and at some point, calls the given callback">
              <variable ilk="function" name="loadCallback" />
            </scope>
            <scope name="toggleDropDown" ilk="function" doc="toggle the drop-down widget; if it is up, close it, if not, open it" />
            <scope name="openDropDown" ilk="function" doc="opens the dropdown for this widget - it returns the return value of dijit.popup.open" />
            <scope name="closeDropDown" ilk="function" signature="closeDropDown(focus)" doc="Closes the drop down on this widget">
              <variable ilk="argument" name="focus" citdl="Boolean" />
            </scope>
            <variable name="_seenKeydown" attributes="private" doc="" />
            <variable name="_docHandler" attributes="private" doc="" />
            <variable name="_opened" attributes="private" doc="" />
            <variable name="state" doc="" />
          </scope>
          <scope name="_SelectStackMixin" ilk="function" doc="Mix this class in to a dojox.form._FormSelectWidget in order to provide support for &amp;amp;quot;selectable&amp;amp;quot; multiforms. The widget is pointed to a dijit.layout.StackContainer and will handle displaying and submitting the values of only the appropriate pane.  The options for this widget will be automatically set - based on the panes that are in the stack container. The &amp;amp;quot;title&amp;amp;quot; attribute of the pane will be used for the display of the option. The &amp;amp;quot;id&amp;amp;quot; attribute of the pane will be used as the value of the option. In order to avoid running into unique ID constraint issues, a stackPrefix mechanism is provided." attributes="private">
            <scope name="stackId" doc="" />
            <scope name="stackPrefix" citdl="string" doc="A prefix to remove from our stack pane ids when setting our options. This exists so that we won't run into unique ID constraints. For example, if stackPrefix is set to &amp;amp;quot;foo_&amp;amp;quot;, and there are three panes in our stack with ids of &amp;amp;quot;foo_a&amp;amp;quot;, &amp;amp;quot;foo_b&amp;amp;quot;, and &amp;amp;quot;foo_c&amp;amp;quot;, then the values of the options created for the stack controller widget will be &amp;amp;quot;a&amp;amp;quot;, &amp;amp;quot;b&amp;amp;quot;, and &amp;amp;quot;c&amp;amp;quot;. This allows you to have multiple select stack widgets with the same values - without having to have the panes require the same ids." />
            <scope name="_paneIdFromOption" ilk="function" signature="_paneIdFromOption(oVal)" doc="Gets the pane ID given an option value" returns="String" attributes="private">
              <variable ilk="argument" name="oVal" citdl="String" />
            </scope>
            <scope name="_optionValFromPane" ilk="function" signature="_optionValFromPane(id)" doc="Gets the option value given a pane ID" returns="String" attributes="private">
              <variable ilk="argument" name="id" citdl="String" />
            </scope>
            <scope name="_togglePane" ilk="function" signature="_togglePane(pane,shown)" doc="called when a pane is either shown or hidden (so that we can toggle the widgets on it)" attributes="private">
              <variable ilk="argument" name="pane" citdl="Widget" />
              <variable ilk="argument" name="shown" citdl="Boolean" />
            </scope>
            <scope name="onAddChild" ilk="function" signature="onAddChild(pane,insertIndex)" doc="Called when the stack container adds a new pane">
              <variable ilk="argument" name="pane" citdl="Widget" />
              <variable ilk="argument" name="insertIndex" citdl="Integer" />
            </scope>
            <scope name="onRemoveChild" ilk="function" signature="onRemoveChild(pane)" doc="Called when the stack container removes a pane">
              <variable ilk="argument" name="pane" citdl="Widget" />
            </scope>
            <scope name="onSelectChild" ilk="function" signature="onSelectChild(pane)" doc="Called when the stack container selects a new pane">
              <variable ilk="argument" name="pane" citdl="Widget" />
            </scope>
            <scope name="onStartup" ilk="function" signature="onStartup(info)" doc="Called when the stack container is started up">
              <variable ilk="argument" name="info" citdl="Object" />
            </scope>
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <scope name="onChange" ilk="function" signature="onChange(val)" doc="Called when form select widget's value has changed">
              <variable ilk="argument" name="val" citdl="String" />
            </scope>
            <variable name="_savedValue" attributes="private" doc="" />
            <variable name="_panes" attributes="private" doc="" />
            <variable name="_subscriptions" attributes="private" doc="" />
          </scope>
        </variable>
        <variable name="fx" citdl="Object" doc="Extension animations to the core dojo FX project">
          <variable name="_arg" citdl="Object" attributes="private" doc="">
            <scope name="StyleArgs" ilk="function" signature="StyleArgs(args)" doc="The node and CSS class to use for style manipulations.">
              <variable ilk="argument" name="args" citdl="Object" />
              <variable name="node" citdl="DOMNode" doc="The node to manipulate" />
              <variable name="cssClass" citdl="String" doc="The class to use during the manipulation" />
            </scope>
            <scope name="ShadowResizeArgs" ilk="function" signature="ShadowResizeArgs(args)" doc="The odd way to document object parameters.">
              <variable ilk="argument" name="args" citdl="Object" />
              <variable name="x" citdl="Integer" doc="the width to set" />
              <variable name="y" citdl="Integer" doc="the height to set" />
            </scope>
          </variable>
          <scope name="sizeTo" ilk="function" signature="sizeTo(args)" doc="Creates an animation that will size a node" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="slideBy" ilk="function" signature="slideBy(args)" doc="Returns an animation to slide a node by a defined offset." returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="crossFade" ilk="function" signature="crossFade(args)" doc="Returns an animation cross fading two element simultaneously" returns="dojo._Animation|Boolean" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" doc="args.nodes Array - two element array of domNodes, or id's  all other standard animation args mixins apply. args.node ignored." />
          </scope>
          <scope name="highlight" ilk="function" signature="highlight(args)" doc="Highlight a node" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="wipeTo" ilk="function" signature="wipeTo(args)" doc="Animate a node wiping to a specific width or height" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="anim" doc="" />
          <scope name="animateProperty" doc="" />
          <scope name="fadeTo" doc="" />
          <scope name="fadeIn" doc="" />
          <scope name="fadeOut" doc="" />
          <scope name="combine" doc="" />
          <scope name="chain" doc="" />
          <scope name="slideTo" doc="" />
          <scope name="wipeIn" doc="" />
          <scope name="wipeOut" doc="" />
          <variable name="_base" citdl="Object" attributes="private" doc="" />
          <scope name="_Line" ilk="function" signature="_Line(start,end)" doc="a custom _Line to accomodate multi-dimensional values" returns="Array|Decimal" attributes="private">
            <variable ilk="argument" name="start" citdl="Integer|Array" doc="An Integer (or an Array of integers) to use as a starting point" />
            <variable ilk="argument" name="end" citdl="Integer|Array" doc="An Integer (or an Array of integers) to use as an ending point" />
            <variable name="start" citdl="Integer|Array" doc="An Integer (or an Array of integers) to use as a starting point" />
            <variable name="end" citdl="Integer|Array" doc="An Integer (or an Array of integers) to use as an ending point" />
            <variable name="getValue" ilk="function" signature="getValue(n)" returns="Decimal" attributes="private" doc="Returns the point on the line, or an array of points">
              <variable ilk="argument" name="n" citdl="float" doc="a floating point number greater than 0 and less than 1" />
              <variable name="return_summary" />
            </variable>
          </scope>
          <variable name="_core" citdl="Object" attributes="private" doc="" />
          <scope name="easing" doc="" />
          <variable name="ext-dojo" citdl="Object" doc="">
            <variable name="NodeList" citdl="Object" doc="" />
          </variable>
          <scope name="flip" ilk="function" signature="flip(args)" doc="Animate a node flipping following a specific direction" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="flipCube" ilk="function" signature="flipCube(args)" doc="An extension to `dojox.fx.flip` providing a more 3d-like rotation">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="smoothScroll" ilk="function" signature="smoothScroll(args)" doc="Returns an animation that will smooth-scroll to a node (specified in etup())" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <variable name="scroll" citdl="Object" doc="Module to provide scroll-related FX" />
          <scope name="_split" ilk="function" signature="_split(args)" doc="Split a node into rectangular pieces and animate them." returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" doc="args.crop Boolean - If true, pieces will only be visible inside node's boundries args.rows: Integer - The number of horizontal pieces (default is 3) args.columns: Integer - The number of vertical pieces (default is 3) args.pieceAnimation: Function(piece, x, y, coords) - Returns either the dojo._Animation or an array of dojo._Animation objects for the piece at location (x, y) in the node's grid; coords is the result of dojo.coords(args.node, true);" />
          </scope>
          <scope name="explode" ilk="function" signature="explode(args)" doc="Explode a node into rectangular pieces" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" doc="args.rows Integer - The number of horizontal pieces (default is 3) args.columns: Integer - The number of vertical pieces (default is 3) args.random: Float - If set, pieces fly to random distances, for random durations, and in slightly random directions. The value defines how much randomness is introduced. args.distance: Float - Multiplier for the distance the pieces fly (even when random) args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.fadeEasing: Function - If args.fade is true, the fade animations use this easing function args.unhide: Boolean - If true, the animation is reversed args.sync: Boolean - If args.unhide is true, all the pieces converge at the same time (default is true)" />
          </scope>
          <scope name="converge" ilk="function" signature="converge(args)" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="disintegrate" ilk="function" signature="disintegrate(args)" doc="Split a node into rectangular pieces and let them fall" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" doc="args.rows Integer - The number of horizontal pieces (default is 5) args.columns: Integer - The number of vertical pieces (default is 5) args.interval: Float - The number of milliseconds between each piece's animation args.distance: Float - The number of the node's heights to drop (default is 1.5) args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.random: Float - If set, pieces fall in random order. The value defines how much randomness is introduced. args.reverseOrder: Boolean - If true, pieces animate in reversed order args.unhide: Boolean - If true, the peices fall from above and land in place" />
          </scope>
          <scope name="build" ilk="function" signature="build(args)" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="shear" ilk="function" signature="shear(args)" doc="Split a node into rectangular pieces and slide them in alternating directions" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" doc="args.rows Integer - The number of horizontal pieces (default is 6) args.columns: Integer - The number of vertical pieces (default is 6) args.interval: Float - The number of milliseconds between each piece's animation (default is 0) args.distance: Float - The multiple of the node's dimensions to slide (default is 1) args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.random: Float - If true, pieces have a random delay. The value defines how much randomness is introduced args.reverseOrder: Boolean - If true, pieces animate in reversed order args.unhide: Boolean - If true, the animation is reversed" />
          </scope>
          <scope name="unShear" ilk="function" signature="unShear(args)" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="pinwheel" ilk="function" signature="pinwheel(args)" doc="Split a node into rectangular pieces and wipe them in alternating directions" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" doc="args.rows Integer - The number of horizontal pieces (default is 4) args.columns: Integer - The number of vertical pieces (default is 4) args.interval: Float - The number of milliseconds between each piece's animation (default is 0) args.distance: Float - The percentage of the piece's dimensions the piece should wipe args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.random: Float - If true, pieces have a random delay. The value defines how much randomness is introduced. args.unhide: Boolean - If true, the animation is reversed" />
          </scope>
          <scope name="unPinwheel" ilk="function" signature="unPinwheel(args)" returns="dojo._Animation" attributes="private" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="blockFadeOut" ilk="function" signature="blockFadeOut(args)" doc="Split a node into rectangular pieces and fade them" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" doc="args.rows Integer - The number of horizontal pieces (default is 5) args.columns: Integer - The number of vertical pieces (default is 5) args.interval: Float - The number of milliseconds between each piece's animation (default is 0) args.random: Float - If true, pieces have a random delay. The value defines how much randomness is introduced args.reverseOrder: Boolean - If true, pieces animate in reversed order args.unhide: Boolean - If true, the animation is reversed" />
          </scope>
          <scope name="blockFadeIn" ilk="function" signature="blockFadeIn(args)" returns="dojo._Animation" attributes="private" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <variable name="split" citdl="Object" doc="" />
          <scope name="text" doc="">
            <scope name="_split" ilk="function" signature="_split(args)" doc="Split a block of text into words or letters" returns="dojo._Animation" attributes="private">
              <variable ilk="argument" name="args" citdl="Object" doc="args.crop Boolean - If true, pieces will be positioned relatively rather than absolutely args.text: String - Text to place inside the node (otherwise node.innerHTML is used) args.words: Boolean - If true, the text will be split into words rather than characters args.pieceAnimation: Function(piece, pieceCoords, nodeCoords, number, numPieces) - Returns either the dojo._Animation or an array of dojo._Animation objects for the piece; pieceCoords is the result of dojo.coords(piece, true); nodeCoords is the result of dojo.coords(args.node, true); number is the piece's position in the array of pieces, and numPieces is the array.length" />
            </scope>
            <scope name="explode" ilk="function" signature="explode(args)" doc="Explode a block of text into words or letters" returns="dojo._Animation" attributes="private">
              <variable ilk="argument" name="args" citdl="Object" doc="args.crop Boolean - If true, pieces will be positioned relatively rather than absolutely args.words: Boolean - If true, text will be split into words rather than characters args.random: Float - If set, pieces fly to random distances, for random durations, and in slightly random directions. The value defines how much randomness is introduced. args.distance: Float - Multiplier for the distance the pieces fly (even when random) args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.fadeEasing: Function - If args.fade is true, the fade animations use this easing function args.unhide: Boolean - If true, the animation is reversed args.sync: Boolean - If args.unhide is true, all the pieces converge at the same time (default is true)" />
            </scope>
            <scope name="converge" ilk="function" signature="converge(args)" doc="">
              <variable ilk="argument" name="args" citdl="Object" />
            </scope>
            <scope name="disintegrate" ilk="function" signature="disintegrate(args)" doc="Split a block of text into words or letters and let them fall" returns="dojo._Animation" attributes="private">
              <variable ilk="argument" name="args" citdl="Object" doc="args.crop Boolean - If true, pieces will be positioned relatively rather than absolutely args.words: Boolean - If true, text will be split into words rather than characters args.interval: Float - The number of milliseconds between each piece's animation args.distance: Float - The number of the node's heights to drop (default is 1.5) args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.random: Float - If set, pieces fall in random order. The value defines how much randomness is introduced args.reverseOrder: Boolean - If true, pieces animate in reversed order args.unhide: Boolean - If true, the peices fall from above and land in place" />
            </scope>
            <scope name="build" ilk="function" signature="build(args)" doc="">
              <variable ilk="argument" name="args" citdl="Object" />
            </scope>
            <scope name="blockFadeOut" ilk="function" signature="blockFadeOut(args)" doc="Split a block of text into words or letters and fade them" returns="dojo._Animation" attributes="private">
              <variable ilk="argument" name="args" citdl="Object" doc="args.words Boolean - If true, text will be split into words rather than characters args.interval: Float - The number of milliseconds between each piece's animation (default is 0) args.random: Float - If true, pieces have a random delay. The value defines how much randomness is introduced args.reverseOrder: Boolean - If true, pieces animate in reversed order args.unhide: Boolean - If true, the animation is reversed" />
            </scope>
            <scope name="blockFadeIn" ilk="function" signature="blockFadeIn(args)" doc="">
              <variable ilk="argument" name="args" citdl="Object" />
            </scope>
            <scope name="backspace" ilk="function" signature="backspace(args)" doc="Split a block of text into words or letters and backspace them in sequence" returns="dojo._Animation" attributes="private">
              <variable ilk="argument" name="args" citdl="Object" doc="args.interval Float - The number of milliseconds between each piece's animation (default is determined by text length and args.duration); args.wordDelay: Integer - The number of milliseconds between each word (only effective when args.unhide = true) args.fixed: Boolean - If true, only style.opacity changes; otherwise, style.display changes between none and inline, adding realism (default = false) args.random: Float - If true, pieces have a random delay. The value defines how much randomness is introduced (only effective when args.unhide = true) args.unhide: Boolean - If true, the animation is reversed" />
            </scope>
          </scope>
        </variable>
        <variable name="gfx" citdl="Object" doc="Cross-browser vector graphics API">
          <scope name="Mover" ilk="function" signature="Mover(shape,e,host)" doc="an object, which makes a shape follow the mouse, used as a default mover, and as a base class for custom movers">
            <variable ilk="argument" name="shape" citdl="dojox.gfx.Shape" doc="a shape object to be moved" />
            <variable ilk="argument" name="e" citdl="Event" doc="a mouse event, which started the move; only clientX and clientY properties are used" />
            <variable ilk="argument" name="host" citdl="Object" doc="object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)" />
            <scope name="onMouseMove" ilk="function" signature="onMouseMove(e)" doc="event processor for onmousemove">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onFirstMove" ilk="function" doc="it is meant to be called only once" />
            <scope name="destroy" ilk="function" doc="stops the move, deletes all references, so the object can be garbage-collected" />
            <variable name="lastX" doc="" />
            <variable name="lastY" doc="" />
            <variable name="events" doc="" />
            <variable name="shape" citdl="dojox.gfx.Shape" doc="a shape object to be moved" />
            <variable name="host" citdl="Object?" doc="object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)" />
          </scope>
          <scope name="VectorFont" ilk="function" signature="VectorFont(url)" doc="Create this font object based on the SVG Font definition at url.">
            <variable ilk="argument" name="url" citdl="String|dojo._Url" />
            <scope name="_entityRe" attributes="private" doc="" />
            <scope name="_decodeEntitySequence" ilk="function" signature="_decodeEntitySequence(str)" returns="undefined|String" attributes="private" doc="">
              <variable ilk="argument" name="str" />
            </scope>
            <scope name="_parse" ilk="function" signature="_parse(svg,url)" doc="Take the loaded SVG Font definition file and convert the info into things we can use. The SVG Font definition must follow the SVG 1.1 Font specification." attributes="private">
              <variable ilk="argument" name="svg" citdl="String" />
              <variable ilk="argument" name="url" citdl="String" />
            </scope>
            <scope name="_clean" ilk="function" doc="Clean off all of the given mixin parameters." attributes="private" />
            <scope name="load" ilk="function" signature="load(url)" doc="Load the passed SVG and send it to the parser for parsing." returns="dojox.gfx.VectorFont" attributes="private">
              <variable ilk="argument" name="url" citdl="String|dojo._Url" />
            </scope>
            <scope name="initialized" ilk="function" doc="Return if we've loaded a font def, and the parsing was successful." returns="Boolean" attributes="private" />
            <scope name="_round" ilk="function" signature="_round(n)" attributes="private" doc="">
              <variable ilk="argument" name="n" />
            </scope>
            <scope name="_leading" ilk="function" signature="_leading(unit)" attributes="private" doc="">
              <variable ilk="argument" name="unit" />
            </scope>
            <scope name="_normalize" ilk="function" signature="_normalize(str)" attributes="private" doc="">
              <variable ilk="argument" name="str" />
            </scope>
            <scope name="_getWidth" ilk="function" signature="_getWidth(glyphs)" attributes="private" doc="">
              <variable ilk="argument" name="glyphs" />
            </scope>
            <scope name="_getLongestLine" ilk="function" signature="_getLongestLine(lines)" attributes="private" doc="">
              <variable ilk="argument" name="lines" />
            </scope>
            <scope name="_trim" ilk="function" signature="_trim(lines)" attributes="private" doc="">
              <variable ilk="argument" name="lines" />
            </scope>
            <scope name="_split" ilk="function" signature="_split(chars,nLines)" doc="split passed chars into nLines by finding the closest whitespace." attributes="private">
              <variable ilk="argument" name="chars" />
              <variable ilk="argument" name="nLines" />
            </scope>
            <scope name="_getSizeFactor" ilk="function" signature="_getSizeFactor(size)" attributes="private" doc="">
              <variable ilk="argument" name="size" />
            </scope>
            <scope name="_getFitFactor" ilk="function" signature="_getFitFactor(lines,w,h,l)" doc="Find the scaling factor for the given phrase set." attributes="private">
              <variable ilk="argument" name="lines" />
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="l" />
            </scope>
            <scope name="_getBestFit" ilk="function" signature="_getBestFit(chars,w,h,ldng)" doc="Get the best number of lines to return given w and h." attributes="private">
              <variable ilk="argument" name="chars" />
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="ldng" />
            </scope>
            <scope name="_getBestFlow" ilk="function" signature="_getBestFlow(chars,w,scale)" doc="Based on the given scale, do the best line splitting possible." attributes="private">
              <variable ilk="argument" name="chars" />
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="scale" />
            </scope>
            <scope name="getWidth" ilk="function" signature="getWidth(text,scale)" doc="Get the width of the rendered text without actually rendering it.">
              <variable ilk="argument" name="text" citdl="String" />
              <variable ilk="argument" name="scale" citdl="Float" />
            </scope>
            <scope name="getLineHeight" ilk="function" signature="getLineHeight(scale)" doc="return the height of a single line, sans leading, based on scale." returns="Float" attributes="private">
              <variable ilk="argument" name="scale" citdl="Float" />
            </scope>
            <scope name="getCenterline" ilk="function" signature="getCenterline(scale)" doc="return the y coordinate that is the center of the viewbox.">
              <variable ilk="argument" name="scale" citdl="Float" />
            </scope>
            <scope name="getBaseline" ilk="function" signature="getBaseline(scale)" doc="Find the baseline coord for alignment; adjust for scale if passed." returns="Float" attributes="private">
              <variable ilk="argument" name="scale" citdl="Float" />
            </scope>
            <scope name="draw" ilk="function" signature="draw(group,textArgs,fontArgs,fillArgs,strokeArgs)" doc="based on the passed parameters, draw the given text using paths defined by this font." returns="dojox.gfx.Group" attributes="private">
              <variable ilk="argument" name="group" citdl="dojox.gfx.Container" />
              <variable ilk="argument" name="textArgs" citdl="dojox.gfx.__TextArgs" />
              <variable ilk="argument" name="fontArgs" citdl="dojox.gfx.__FontArgs" />
              <variable ilk="argument" name="fillArgs" citdl="dojox.gfx.__FillArgs" />
              <variable ilk="argument" name="strokeArgs" citdl="dojox.gfx.__StrokeArgs" />
            </scope>
            <scope name="onLoadBegin" ilk="function" signature="onLoadBegin(url)" doc="">
              <variable ilk="argument" name="url" citdl="String" />
            </scope>
            <scope name="onLoad" ilk="function" signature="onLoad(font)" doc="">
              <variable ilk="argument" name="font" citdl="dojox.gfx.VectorFont" />
            </scope>
            <variable name="_defaultLeading" attributes="private" doc="" />
          </scope>
          <variable name="vectorFontFitting" citdl="Object" doc="">
            <scope name="NONE" doc="" />
            <scope name="FLOW" doc="" />
            <scope name="FIT" doc="" />
          </variable>
          <scope name="defaultVectorText" doc="">
            <scope name="text" doc="" />
            <scope name="leading" doc="" />
          </scope>
          <scope name="defaultVectorFont" doc="" />
          <variable name="_vectorFontCache" citdl="Object" attributes="private" doc="" />
          <variable name="_svgFontCache" citdl="Object" attributes="private" doc="" />
          <scope name="getVectorFont" ilk="function" signature="getVectorFont(url)" doc="">
            <variable ilk="argument" name="url" citdl="String" />
          </scope>
          <variable name="VectorText" citdl="Object" doc="" />
          <scope name="defaultPath" doc="">
            <scope name="path" doc="" />
          </scope>
          <scope name="defaultPolyline" doc="">
            <scope name="points" doc="" />
          </scope>
          <scope name="defaultRect" doc="">
            <scope name="x" doc="" />
            <scope name="y" doc="" />
            <scope name="width" doc="" />
            <scope name="height" doc="" />
            <scope name="r" doc="" />
          </scope>
          <scope name="defaultEllipse" doc="">
            <scope name="cx" doc="" />
            <scope name="cy" doc="" />
            <scope name="rx" doc="" />
            <scope name="ry" doc="" />
          </scope>
          <scope name="defaultCircle" doc="">
            <scope name="cx" doc="" />
            <scope name="cy" doc="" />
            <scope name="r" doc="" />
          </scope>
          <scope name="defaultLine" doc="">
            <scope name="x1" doc="" />
            <scope name="y1" doc="" />
            <scope name="x2" doc="" />
            <scope name="y2" doc="" />
          </scope>
          <scope name="defaultImage" doc="">
            <scope name="x" doc="" />
            <scope name="y" doc="" />
            <scope name="width" doc="" />
            <scope name="height" doc="" />
            <scope name="src" doc="" />
          </scope>
          <scope name="defaultText" doc="">
            <scope name="x" doc="" />
            <scope name="y" doc="" />
            <scope name="text" doc="" />
            <scope name="align" doc="" />
            <scope name="defaultTextPath" doc="">
              <scope name="text" doc="" />
              <scope name="align" doc="" />
              <scope name="defaultStroke" doc="">
                <scope name="color" doc="" />
                <scope name="width" doc="" />
                <scope name="cap" doc="" />
                <scope name="join" doc="" />
              </scope>
              <scope name="defaultLinearGradient" doc="">
                <scope name="x1" doc="" />
                <scope name="y1" doc="" />
                <scope name="x2" doc="" />
                <scope name="y2" doc="" />
                <scope name="colors" doc="" />
              </scope>
              <scope name="defaultRadialGradient" doc="">
                <scope name="cx" doc="" />
                <scope name="cy" doc="" />
                <scope name="r" doc="" />
                <scope name="colors" doc="" />
              </scope>
              <scope name="defaultPattern" doc="">
                <scope name="x" doc="" />
                <scope name="y" doc="" />
                <scope name="width" doc="" />
                <scope name="height" doc="" />
                <scope name="src" doc="" />
              </scope>
              <scope name="defaultFont" doc="">
                <scope name="variant" doc="" />
                <scope name="weight" doc="" />
                <scope name="size" doc="" />
                <scope name="family" doc="" />
              </scope>
              <scope name="normalizeColor" ilk="function" signature="normalizeColor(color)" doc="converts any legal color representation to normalized dojo.Color object" returns="dojo.Color" attributes="private">
                <variable ilk="argument" name="color" citdl="Color" />
              </scope>
              <scope name="normalizeParameters" ilk="function" signature="normalizeParameters(existed,update)" doc="updates an existing object with properties from an &amp;amp;quot;update&amp;amp;quot; object" returns="Object" attributes="private">
                <variable ilk="argument" name="existed" citdl="Object" doc="the &amp;amp;quot;target&amp;amp;quot; object to be updated" />
                <variable ilk="argument" name="update" citdl="Object" doc="the &amp;amp;quot;update&amp;amp;quot; object, whose properties will be used to update the existed object" />
              </scope>
              <scope name="makeParameters" ilk="function" signature="makeParameters(defaults,update)" doc="copies the original object, and all copied properties from the &amp;amp;quot;update&amp;amp;quot; object" returns="Object" attributes="private">
                <variable ilk="argument" name="defaults" citdl="Object" doc="the object to be cloned before updating" />
                <variable ilk="argument" name="update" citdl="Object" doc="the object, which properties are to be cloned during updating" />
              </scope>
              <scope name="formatNumber" ilk="function" signature="formatNumber(x,addSpace)" doc="converts a number to a string using a fixed notation" returns="String" attributes="private">
                <variable ilk="argument" name="x" citdl="Number" doc="number to be converted" />
                <variable ilk="argument" name="addSpace" citdl="Boolean" doc="if it is true, add a space before a positive number" />
              </scope>
              <scope name="makeFontString" ilk="function" signature="makeFontString(font)" doc="converts a font object to a CSS font string" returns="Object" attributes="private">
                <variable ilk="argument" name="font" citdl="Object" doc="font object (see dojox.gfx.defaultFont)" />
              </scope>
              <scope name="splitFontString" ilk="function" signature="splitFontString(str)" doc="converts a CSS font string to a font object" returns="Object" attributes="private">
                <variable ilk="argument" name="str" citdl="String" doc="a CSS font string" />
              </scope>
              <scope name="cm_in_pt" doc="" />
              <scope name="mm_in_pt" doc="" />
              <scope name="px_in_pt" ilk="function" doc="returns a number of pixels per point" returns="Number" attributes="private" />
              <scope name="pt2px" ilk="function" signature="pt2px(len)" doc="converts points to pixels" returns="Number" attributes="private">
                <variable ilk="argument" name="len" citdl="Number" doc="a value in points" />
              </scope>
              <scope name="px2pt" ilk="function" signature="px2pt(len)" doc="converts pixels to points" returns="Number" attributes="private">
                <variable ilk="argument" name="len" citdl="Number" doc="a value in pixels" />
              </scope>
              <scope name="normalizedLength" ilk="function" signature="normalizedLength(len)" doc="converts any length value to pixels" returns="Number" attributes="private">
                <variable ilk="argument" name="len" citdl="String" doc="a length, e.g., &amp;amp;quot;12pc&amp;amp;quot;" />
              </scope>
              <scope name="pathVmlRegExp" doc="" />
              <scope name="pathSvgRegExp" doc="" />
              <scope name="equalSources" ilk="function" signature="equalSources(a,b)" doc="compares event sources, returns true if they are equal">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="b" />
              </scope>
            </scope>
            <scope name="defaultStroke" doc="">
              <scope name="color" doc="" />
              <scope name="width" doc="" />
              <scope name="cap" doc="" />
              <scope name="join" doc="" />
            </scope>
            <scope name="defaultLinearGradient" doc="">
              <scope name="x1" doc="" />
              <scope name="y1" doc="" />
              <scope name="x2" doc="" />
              <scope name="y2" doc="" />
              <scope name="colors" doc="" />
            </scope>
            <scope name="defaultRadialGradient" doc="">
              <scope name="cx" doc="" />
              <scope name="cy" doc="" />
              <scope name="r" doc="" />
              <scope name="colors" doc="" />
            </scope>
            <scope name="defaultPattern" doc="">
              <scope name="x" doc="" />
              <scope name="y" doc="" />
              <scope name="width" doc="" />
              <scope name="height" doc="" />
              <scope name="src" doc="" />
            </scope>
            <scope name="defaultFont" doc="">
              <scope name="variant" doc="" />
              <scope name="weight" doc="" />
              <scope name="size" doc="" />
              <scope name="family" doc="" />
            </scope>
            <scope name="normalizeColor" ilk="function" signature="normalizeColor(color)" doc="converts any legal color representation to normalized dojo.Color object" returns="dojo.Color" attributes="private">
              <variable ilk="argument" name="color" citdl="Color" />
            </scope>
            <scope name="normalizeParameters" ilk="function" signature="normalizeParameters(existed,update)" doc="updates an existing object with properties from an &amp;amp;quot;update&amp;amp;quot; object" returns="Object" attributes="private">
              <variable ilk="argument" name="existed" citdl="Object" doc="the &amp;amp;quot;target&amp;amp;quot; object to be updated" />
              <variable ilk="argument" name="update" citdl="Object" doc="the &amp;amp;quot;update&amp;amp;quot; object, whose properties will be used to update the existed object" />
            </scope>
            <scope name="makeParameters" ilk="function" signature="makeParameters(defaults,update)" doc="copies the original object, and all copied properties from the &amp;amp;quot;update&amp;amp;quot; object" returns="Object" attributes="private">
              <variable ilk="argument" name="defaults" citdl="Object" doc="the object to be cloned before updating" />
              <variable ilk="argument" name="update" citdl="Object" doc="the object, which properties are to be cloned during updating" />
            </scope>
            <scope name="formatNumber" ilk="function" signature="formatNumber(x,addSpace)" doc="converts a number to a string using a fixed notation" returns="String" attributes="private">
              <variable ilk="argument" name="x" citdl="Number" doc="number to be converted" />
              <variable ilk="argument" name="addSpace" citdl="Boolean" doc="if it is true, add a space before a positive number" />
            </scope>
            <scope name="makeFontString" ilk="function" signature="makeFontString(font)" doc="converts a font object to a CSS font string" returns="Object" attributes="private">
              <variable ilk="argument" name="font" citdl="Object" doc="font object (see dojox.gfx.defaultFont)" />
            </scope>
            <scope name="splitFontString" ilk="function" signature="splitFontString(str)" doc="converts a CSS font string to a font object" returns="Object" attributes="private">
              <variable ilk="argument" name="str" citdl="String" doc="a CSS font string" />
            </scope>
            <scope name="cm_in_pt" doc="" />
            <scope name="mm_in_pt" doc="" />
            <scope name="px_in_pt" ilk="function" doc="returns a number of pixels per point" returns="Number" attributes="private" />
            <scope name="pt2px" ilk="function" signature="pt2px(len)" doc="converts points to pixels" returns="Number" attributes="private">
              <variable ilk="argument" name="len" citdl="Number" doc="a value in points" />
            </scope>
            <scope name="px2pt" ilk="function" signature="px2pt(len)" doc="converts pixels to points" returns="Number" attributes="private">
              <variable ilk="argument" name="len" citdl="Number" doc="a value in pixels" />
            </scope>
            <scope name="normalizedLength" ilk="function" signature="normalizedLength(len)" doc="converts any length value to pixels" returns="Number" attributes="private">
              <variable ilk="argument" name="len" citdl="String" doc="a length, e.g., &amp;amp;quot;12pc&amp;amp;quot;" />
            </scope>
            <scope name="pathVmlRegExp" doc="" />
            <scope name="pathSvgRegExp" doc="" />
            <scope name="equalSources" ilk="function" signature="equalSources(a,b)" doc="compares event sources, returns true if they are equal">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
          </scope>
          <scope name="defaultTextPath" doc="">
            <scope name="text" doc="" />
            <scope name="align" doc="" />
            <scope name="defaultStroke" doc="">
              <scope name="color" doc="" />
              <scope name="width" doc="" />
              <scope name="cap" doc="" />
              <scope name="join" doc="" />
            </scope>
            <scope name="defaultLinearGradient" doc="">
              <scope name="x1" doc="" />
              <scope name="y1" doc="" />
              <scope name="x2" doc="" />
              <scope name="y2" doc="" />
              <scope name="colors" doc="" />
            </scope>
            <scope name="defaultRadialGradient" doc="">
              <scope name="cx" doc="" />
              <scope name="cy" doc="" />
              <scope name="r" doc="" />
              <scope name="colors" doc="" />
            </scope>
            <scope name="defaultPattern" doc="">
              <scope name="x" doc="" />
              <scope name="y" doc="" />
              <scope name="width" doc="" />
              <scope name="height" doc="" />
              <scope name="src" doc="" />
            </scope>
            <scope name="defaultFont" doc="">
              <scope name="variant" doc="" />
              <scope name="weight" doc="" />
              <scope name="size" doc="" />
              <scope name="family" doc="" />
            </scope>
            <scope name="normalizeColor" ilk="function" signature="normalizeColor(color)" doc="converts any legal color representation to normalized dojo.Color object" returns="dojo.Color" attributes="private">
              <variable ilk="argument" name="color" citdl="Color" />
            </scope>
            <scope name="normalizeParameters" ilk="function" signature="normalizeParameters(existed,update)" doc="updates an existing object with properties from an &amp;amp;quot;update&amp;amp;quot; object" returns="Object" attributes="private">
              <variable ilk="argument" name="existed" citdl="Object" doc="the &amp;amp;quot;target&amp;amp;quot; object to be updated" />
              <variable ilk="argument" name="update" citdl="Object" doc="the &amp;amp;quot;update&amp;amp;quot; object, whose properties will be used to update the existed object" />
            </scope>
            <scope name="makeParameters" ilk="function" signature="makeParameters(defaults,update)" doc="copies the original object, and all copied properties from the &amp;amp;quot;update&amp;amp;quot; object" returns="Object" attributes="private">
              <variable ilk="argument" name="defaults" citdl="Object" doc="the object to be cloned before updating" />
              <variable ilk="argument" name="update" citdl="Object" doc="the object, which properties are to be cloned during updating" />
            </scope>
            <scope name="formatNumber" ilk="function" signature="formatNumber(x,addSpace)" doc="converts a number to a string using a fixed notation" returns="String" attributes="private">
              <variable ilk="argument" name="x" citdl="Number" doc="number to be converted" />
              <variable ilk="argument" name="addSpace" citdl="Boolean" doc="if it is true, add a space before a positive number" />
            </scope>
            <scope name="makeFontString" ilk="function" signature="makeFontString(font)" doc="converts a font object to a CSS font string" returns="Object" attributes="private">
              <variable ilk="argument" name="font" citdl="Object" doc="font object (see dojox.gfx.defaultFont)" />
            </scope>
            <scope name="splitFontString" ilk="function" signature="splitFontString(str)" doc="converts a CSS font string to a font object" returns="Object" attributes="private">
              <variable ilk="argument" name="str" citdl="String" doc="a CSS font string" />
            </scope>
            <scope name="cm_in_pt" doc="" />
            <scope name="mm_in_pt" doc="" />
            <scope name="px_in_pt" ilk="function" doc="returns a number of pixels per point" returns="Number" attributes="private" />
            <scope name="pt2px" ilk="function" signature="pt2px(len)" doc="converts points to pixels" returns="Number" attributes="private">
              <variable ilk="argument" name="len" citdl="Number" doc="a value in points" />
            </scope>
            <scope name="px2pt" ilk="function" signature="px2pt(len)" doc="converts pixels to points" returns="Number" attributes="private">
              <variable ilk="argument" name="len" citdl="Number" doc="a value in pixels" />
            </scope>
            <scope name="normalizedLength" ilk="function" signature="normalizedLength(len)" doc="converts any length value to pixels" returns="Number" attributes="private">
              <variable ilk="argument" name="len" citdl="String" doc="a length, e.g., &amp;amp;quot;12pc&amp;amp;quot;" />
            </scope>
            <scope name="pathVmlRegExp" doc="" />
            <scope name="pathSvgRegExp" doc="" />
            <scope name="equalSources" ilk="function" signature="equalSources(a,b)" doc="compares event sources, returns true if they are equal">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
          </scope>
          <scope name="defaultStroke" doc="">
            <scope name="color" doc="" />
            <scope name="width" doc="" />
            <scope name="cap" doc="" />
            <scope name="join" doc="" />
          </scope>
          <scope name="defaultLinearGradient" doc="">
            <scope name="x1" doc="" />
            <scope name="y1" doc="" />
            <scope name="x2" doc="" />
            <scope name="y2" doc="" />
            <scope name="colors" doc="" />
          </scope>
          <scope name="defaultRadialGradient" doc="">
            <scope name="cx" doc="" />
            <scope name="cy" doc="" />
            <scope name="r" doc="" />
            <scope name="colors" doc="" />
          </scope>
          <scope name="defaultPattern" doc="">
            <scope name="x" doc="" />
            <scope name="y" doc="" />
            <scope name="width" doc="" />
            <scope name="height" doc="" />
            <scope name="src" doc="" />
          </scope>
          <scope name="defaultFont" doc="">
            <scope name="variant" doc="" />
            <scope name="weight" doc="" />
            <scope name="size" doc="" />
            <scope name="family" doc="" />
          </scope>
          <scope name="normalizeColor" ilk="function" signature="normalizeColor(color)" doc="converts any legal color representation to normalized dojo.Color object" returns="dojo.Color" attributes="private">
            <variable ilk="argument" name="color" citdl="Color" />
          </scope>
          <scope name="normalizeParameters" ilk="function" signature="normalizeParameters(existed,update)" doc="updates an existing object with properties from an &amp;amp;quot;update&amp;amp;quot; object" returns="Object" attributes="private">
            <variable ilk="argument" name="existed" citdl="Object" doc="the &amp;amp;quot;target&amp;amp;quot; object to be updated" />
            <variable ilk="argument" name="update" citdl="Object" doc="the &amp;amp;quot;update&amp;amp;quot; object, whose properties will be used to update the existed object" />
          </scope>
          <scope name="makeParameters" ilk="function" signature="makeParameters(defaults,update)" doc="copies the original object, and all copied properties from the &amp;amp;quot;update&amp;amp;quot; object" returns="Object" attributes="private">
            <variable ilk="argument" name="defaults" citdl="Object" doc="the object to be cloned before updating" />
            <variable ilk="argument" name="update" citdl="Object" doc="the object, which properties are to be cloned during updating" />
          </scope>
          <scope name="formatNumber" ilk="function" signature="formatNumber(x,addSpace)" doc="converts a number to a string using a fixed notation" returns="String" attributes="private">
            <variable ilk="argument" name="x" citdl="Number" doc="number to be converted" />
            <variable ilk="argument" name="addSpace" citdl="Boolean" doc="if it is true, add a space before a positive number" />
          </scope>
          <scope name="makeFontString" ilk="function" signature="makeFontString(font)" doc="converts a font object to a CSS font string" returns="Object" attributes="private">
            <variable ilk="argument" name="font" citdl="Object" doc="font object (see dojox.gfx.defaultFont)" />
          </scope>
          <scope name="splitFontString" ilk="function" signature="splitFontString(str)" doc="converts a CSS font string to a font object" returns="Object" attributes="private">
            <variable ilk="argument" name="str" citdl="String" doc="a CSS font string" />
          </scope>
          <scope name="cm_in_pt" doc="" />
          <scope name="mm_in_pt" doc="" />
          <scope name="px_in_pt" ilk="function" doc="returns a number of pixels per point" returns="Number" attributes="private" />
          <scope name="pt2px" ilk="function" signature="pt2px(len)" doc="converts points to pixels" returns="Number" attributes="private">
            <variable ilk="argument" name="len" citdl="Number" doc="a value in points" />
          </scope>
          <scope name="px2pt" ilk="function" signature="px2pt(len)" doc="converts pixels to points" returns="Number" attributes="private">
            <variable ilk="argument" name="len" citdl="Number" doc="a value in pixels" />
          </scope>
          <scope name="normalizedLength" ilk="function" signature="normalizedLength(len)" doc="converts any length value to pixels" returns="Number" attributes="private">
            <variable ilk="argument" name="len" citdl="String" doc="a length, e.g., &amp;amp;quot;12pc&amp;amp;quot;" />
          </scope>
          <scope name="pathVmlRegExp" doc="" />
          <scope name="pathSvgRegExp" doc="" />
          <scope name="equalSources" ilk="function" signature="equalSources(a,b)" doc="">
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="b" />
          </scope>
          <variable name="_base" citdl="Object" attributes="private" doc="" />
          <variable name="arc" citdl="Object" doc="">
            <scope name="unitArcAsBezier" doc="" />
            <scope name="curvePI4" doc="" />
            <scope name="arcAsBezier" ilk="function" signature="arcAsBezier(last,rx,ry,xRotg,large,sweep,x,y)" doc="calculates an arc as a series of Bezier curves given the last point and a standard set of SVG arc parameters, it returns an array of arrays of parameters to form a series of absolute Bezier curves." returns="Object" attributes="private">
              <variable ilk="argument" name="last" citdl="Object" doc="a point-like object as a start of the arc" />
              <variable ilk="argument" name="rx" citdl="Number" doc="a horizontal radius for the virtual ellipse" />
              <variable ilk="argument" name="ry" citdl="Number" doc="a vertical radius for the virtual ellipse" />
              <variable ilk="argument" name="xRotg" citdl="Number" doc="a rotation of an x axis of the virtual ellipse in degrees" />
              <variable ilk="argument" name="large" citdl="Boolean" doc="which part of the ellipse will be used (the larger arc if true)" />
              <variable ilk="argument" name="sweep" citdl="Boolean" doc="direction of the arc (CW if true)" />
              <variable ilk="argument" name="x" citdl="Number" doc="the x coordinate of the end point of the arc" />
              <variable ilk="argument" name="y" citdl="Number" doc="the y coordinate of the end point of the arc" />
            </scope>
          </variable>
          <variable name="attach" citdl="Object" doc="" />
          <scope name="Group" ilk="function" doc="a group shape (VML), which can be used to logically group shapes (e.g, to propagate matricies)">
            <scope name="_render" ilk="function" signature="_render(ctx)" doc="render the group" attributes="private">
              <variable ilk="argument" name="ctx" citdl="Object" />
            </scope>
            <scope name="setRawNode" ilk="function" signature="setRawNode(rawNode)" doc="sets a raw SVG node to be used by this shape">
              <variable ilk="argument" name="rawNode" citdl="Node" doc="an SVG node" />
              <scope name="rawNode" citdl="Node" doc="an SVG node" />
            </scope>
            <variable name="rawNode" doc="" />
            <scope name="nodeType" doc="" />
            <scope name="_applyTransform" ilk="function" doc="applies a transformation matrix to a group" returns="self" attributes="private" />
          </scope>
          <scope name="Rect" ilk="function" doc="a rectangle shape (VML)">
            <scope name="_renderShape" ilk="function" signature="_renderShape(ctx)" attributes="private" doc="">
              <variable ilk="argument" name="ctx" citdl="Object" />
            </scope>
            <scope name="setShape" ilk="function" signature="setShape(newShape)" doc="sets a rectangle shape object (VML)" returns="self" attributes="private">
              <variable ilk="argument" name="newShape" citdl="Object" doc="a rectangle shape object" />
            </scope>
            <scope name="_getAdjustedMatrix" ilk="function" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" returns="dojox.gfx.Matrix2D" attributes="private" />
            <variable name="shape" doc="" />
            <variable name="bbox" doc="" />
            <scope name="nodeType" doc="" />
            <scope name="rawNode">
              <variable name="arcsize" doc="" />
            </scope>
          </scope>
          <scope name="Ellipse" ilk="function" doc="an ellipse shape (VML)">
            <scope name="setShape" ilk="function" signature="setShape(newShape)" doc="sets an ellipse shape object (VML)" returns="self" attributes="private">
              <variable ilk="argument" name="newShape" citdl="Object" doc="an ellipse shape object" />
            </scope>
            <scope name="_renderShape" ilk="function" signature="_renderShape(ctx)" attributes="private" doc="">
              <variable ilk="argument" name="ctx" citdl="Object" />
            </scope>
            <variable name="canvasEllipse" doc="" />
            <scope name="_getAdjustedMatrix" ilk="function" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" returns="dojox.gfx.Matrix2D" attributes="private" />
            <variable name="shape" doc="" />
            <variable name="bbox" doc="" />
            <scope name="nodeType" doc="" />
          </scope>
          <scope name="Circle" ilk="function" doc="a circle shape (VML)">
            <scope name="_renderShape" ilk="function" signature="_renderShape(ctx)" attributes="private" doc="">
              <variable ilk="argument" name="ctx" citdl="Object" />
            </scope>
            <scope name="setShape" ilk="function" signature="setShape(newShape)" doc="sets a circle shape object (VML)" returns="self" attributes="private">
              <variable ilk="argument" name="newShape" citdl="Object" doc="a circle shape object" />
            </scope>
            <scope name="_getAdjustedMatrix" ilk="function" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" returns="dojox.gfx.Matrix2D" attributes="private" />
            <variable name="shape" doc="" />
            <variable name="bbox" doc="" />
            <scope name="nodeType" doc="" />
          </scope>
          <scope name="Line" ilk="function" doc="a line shape (VML)" signature="Line(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope name="_renderShape" ilk="function" signature="_renderShape(ctx)" attributes="private" doc="">
              <variable ilk="argument" name="ctx" citdl="Object" />
            </scope>
            <scope name="setShape" ilk="function" signature="setShape(newShape)" doc="sets a line shape object (VML)" returns="self" attributes="private">
              <variable ilk="argument" name="newShape" citdl="Object" doc="a line shape object" />
            </scope>
            <variable name="shape" doc="" />
            <variable name="bbox" doc="" />
            <scope name="nodeType" doc="" />
            <scope name="rawNode">
              <scope name="path">
                <variable name="v" doc="" />
              </scope>
            </scope>
          </scope>
          <scope name="Polyline" ilk="function" doc="a polyline/polygon shape (VML)" signature="Polyline(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope name="setShape" ilk="function" signature="setShape(points,closed)" doc="sets a polyline/polygon shape object (VML)" returns="self" attributes="private">
              <variable ilk="argument" name="points" citdl="Object" doc="a polyline/polygon shape object" />
              <variable ilk="argument" name="closed" citdl="Boolean" doc="if true, close the polyline explicitely" />
            </scope>
            <scope name="_renderShape" ilk="function" signature="_renderShape(ctx)" attributes="private" doc="">
              <variable ilk="argument" name="ctx" citdl="Object" />
            </scope>
            <variable name="canvasPolyline" doc="" />
            <variable name="shape" doc="" />
            <variable name="box" doc="" />
            <scope name="rawNode">
              <variable name="points" doc="" />
              <scope name="path">
                <variable name="v" doc="" />
              </scope>
            </scope>
            <scope name="nodeType" doc="" />
            <variable name="bbox" doc="" />
          </scope>
          <scope name="Image" ilk="function" doc="an image (VML)" signature="Image(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope name="setShape" ilk="function" signature="setShape(newShape)" doc="sets an image shape object (VML)" returns="self" attributes="private">
              <variable ilk="argument" name="newShape" citdl="Object" doc="an image shape object" />
            </scope>
            <scope name="_renderShape" ilk="function" signature="_renderShape(ctx)" attributes="private" doc="">
              <variable ilk="argument" name="ctx" citdl="Object" />
            </scope>
            <variable name="canvasImage" doc="" />
            <scope name="_getAdjustedMatrix" ilk="function" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" returns="dojox.gfx.Matrix2D" attributes="private" />
            <scope name="setRawNode" ilk="function" signature="setRawNode(rawNode)" doc="assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp;amp;amp; stroke by default)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <variable name="shape" doc="" />
            <variable name="bbox" doc="" />
            <variable name="rawNode" doc="">
              <scope name="firstChild">
                <variable name="src" doc="" />
              </scope>
            </variable>
            <scope name="nodeType" doc="" />
            <scope name="getEventSource" ilk="function" doc="returns a Node, which is used as a source of events for this shape" returns="Node" attributes="private" />
            <scope name="_setDimensions" ilk="function" signature="_setDimensions(s,w,h)" attributes="private" doc="">
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
            </scope>
            <scope name="_resetImage" ilk="function" attributes="private" doc="" />
            <scope name="_applyTransform" ilk="function" attributes="private" doc="" />
          </scope>
          <scope name="Text" ilk="function" doc="an anchored text (VML)" signature="Text(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope name="_renderShape" ilk="function" signature="_renderShape(ctx)" attributes="private" doc="">
              <variable ilk="argument" name="ctx" citdl="Object" />
            </scope>
            <scope name="setShape" ilk="function" signature="setShape(newShape)" doc="sets a text shape object (VML)" returns="self" attributes="private">
              <variable ilk="argument" name="newShape" citdl="Object" doc="a text shape object" />
            </scope>
            <scope name="_delayAlignment" ilk="function" attributes="private" doc="" />
            <scope name="_getAdjustedMatrix" ilk="function" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" attributes="private" />
            <scope name="setStroke" ilk="function" doc="ignore setting a stroke style" returns="self" attributes="private" />
            <scope name="_setFillAttr" ilk="function" signature="_setFillAttr(f)" attributes="private" doc="">
              <variable ilk="argument" name="f" />
            </scope>
            <scope name="setRawNode" ilk="function" signature="setRawNode(rawNode)" doc="assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp;amp;amp; stroke by default)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope name="getTextWidth" ilk="function" doc="get the text width, in px" />
            <variable name="shape" doc="" />
            <variable name="bbox" doc="" />
            <variable name="_delay" attributes="private" doc="" />
            <variable name="_delta" attributes="private" doc="" />
            <variable name="rawNode" doc="">
              <variable name="foreground" doc="" />
              <scope name="path">
                <variable name="v" doc="" />
              </scope>
            </variable>
            <scope name="nodeType" doc="" />
            <variable name="_alignment" citdl="Object" attributes="private" doc="">
              <scope name="start" doc="" />
              <scope name="middle" doc="" />
              <scope name="end" doc="" />
            </variable>
            <scope name="_setFont" ilk="function" doc="sets a font object (VML)" attributes="private" />
            <scope name="_getRealMatrix" ilk="function" doc="returns the cumulative (&amp;amp;quot;real&amp;amp;quot;) transformation matrix by combining the shape's matrix with its parent's matrix; it makes a correction for a font size" returns="dojox.gfx.Matrix2D" attributes="private" />
            <variable name="fontStyle" doc="" />
          </scope>
          <scope name="Path" ilk="function" doc="a path shape (VML)" signature="Path(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope name="setShape" ilk="function" signature="setShape(newShape)" doc="forms a path using a shape (VML)">
              <variable ilk="argument" name="newShape" citdl="Object" doc="an VML path string or a path object (see dojox.gfx.defaultPath)" />
            </scope>
            <scope name="_updateWithSegment" ilk="function" signature="_updateWithSegment(segment)" doc="updates the bounding box of path with new segment" attributes="private">
              <variable ilk="argument" name="segment" citdl="Object" doc="a segment" />
            </scope>
            <scope name="_renderShape" ilk="function" signature="_renderShape(ctx)" attributes="private" doc="">
              <variable ilk="argument" name="ctx" citdl="Object" />
            </scope>
            <scope name="_moveToA" ilk="function" signature="_moveToA(segment)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
            </scope>
            <scope name="_moveToR" ilk="function" signature="_moveToR(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_lineToA" ilk="function" signature="_lineToA(segment)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
            </scope>
            <scope name="_lineToR" ilk="function" signature="_lineToR(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_hLineToA" ilk="function" signature="_hLineToA(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_hLineToR" ilk="function" signature="_hLineToR(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_vLineToA" ilk="function" signature="_vLineToA(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_vLineToR" ilk="function" signature="_vLineToR(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_curveToA" ilk="function" signature="_curveToA(segment)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
            </scope>
            <scope name="_curveToR" ilk="function" signature="_curveToR(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_smoothCurveToA" ilk="function" signature="_smoothCurveToA(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_smoothCurveToR" ilk="function" signature="_smoothCurveToR(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_qCurveToA" ilk="function" signature="_qCurveToA(segment)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
            </scope>
            <scope name="_qCurveToR" ilk="function" signature="_qCurveToR(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_qSmoothCurveToA" ilk="function" signature="_qSmoothCurveToA(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_qSmoothCurveToR" ilk="function" signature="_qSmoothCurveToR(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_arcTo" ilk="function" signature="_arcTo(segment,last)" attributes="private" doc="">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope name="_closePath" ilk="function" attributes="private" doc="" />
            <variable name="canvasPath" doc="" />
            <variable name="last" doc="">
              <variable name="x" doc="" />
              <variable name="y" doc="" />
            </variable>
            <variable name="lastControl" doc="">
              <variable name="x" doc="" />
              <variable name="y" doc="" />
            </variable>
            <scope name="rawNode">
              <variable name="data" doc="" />
              <scope name="path">
                <variable name="v" doc="" />
              </scope>
            </scope>
            <scope name="nodeType" doc="" />
            <variable name="_pathVmlToSvgMap" citdl="Object" attributes="private" doc="">
              <scope name="m" doc="" />
              <scope name="l" doc="" />
              <scope name="t" doc="" />
              <scope name="r" doc="" />
              <scope name="c" doc="" />
              <scope name="v" doc="" />
              <scope name="qb" doc="" />
              <scope name="x" doc="" />
              <scope name="e" doc="" />
            </variable>
            <variable name="renderers" citdl="Object" doc="">
              <scope name="M" doc="" />
              <scope name="L" doc="" />
              <scope name="H" doc="" />
              <scope name="V" doc="" />
              <scope name="C" doc="" />
              <scope name="S" doc="" />
              <scope name="Q" doc="" />
              <scope name="T" doc="" />
              <scope name="A" doc="" />
              <scope name="Z" doc="" />
            </variable>
            <scope name="_addArgs" ilk="function" signature="_addArgs(path,segment,from,upto)" attributes="private" doc="">
              <variable ilk="argument" name="path" />
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="from" />
              <variable ilk="argument" name="upto" />
            </scope>
            <scope name="_adjustRelCrd" ilk="function" signature="_adjustRelCrd(last,segment,step)" attributes="private" doc="">
              <variable ilk="argument" name="last" />
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="step" />
            </scope>
            <scope name="_adjustRelPos" ilk="function" signature="_adjustRelPos(last,segment)" attributes="private" doc="">
              <variable ilk="argument" name="last" />
              <variable ilk="argument" name="segment" />
            </scope>
            <variable name="vmlPath" doc="" />
          </scope>
          <scope name="TextPath" ilk="function" doc="a textpath shape (VML)" signature="TextPath(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope name="_renderShape" ilk="function" signature="_renderShape(ctx)" attributes="private" doc="">
              <variable ilk="argument" name="ctx" citdl="Object" />
            </scope>
            <scope name="_updateWithSegment" ilk="function" signature="_updateWithSegment(segment)" doc="updates the bounding box of path with new segment" attributes="private">
              <variable ilk="argument" name="segment" citdl="Object" doc="a segment" />
            </scope>
            <scope name="setShape" ilk="function" signature="setShape(newShape)" doc="forms a path using a shape (SVG)" returns="self" attributes="private">
              <variable ilk="argument" name="newShape" citdl="Object" doc="an SVG path string or a path object (see dojox.gfx.defaultPath)" />
            </scope>
            <scope name="_setText" ilk="function" doc="sets a text shape object (VML)" attributes="private" />
            <scope name="nodeType" doc="" />
            <scope name="_setTextPath" ilk="function" attributes="private" doc="" />
            <scope name="setText" ilk="function" signature="setText(newText)" doc="sets a text to be drawn along the path" returns="self" attributes="private">
              <variable ilk="argument" name="newText" />
            </scope>
            <scope name="setFont" ilk="function" signature="setFont(newFont)" doc="sets a font for text" returns="self" attributes="private">
              <variable ilk="argument" name="newFont" />
            </scope>
            <scope name="_setFont" ilk="function" doc="sets a font object (VML)" attributes="private" />
            <variable name="text" doc="" />
            <variable name="fontStyle" doc="" />
            <variable name="bbox" doc="" />
          </scope>
          <scope name="Surface" ilk="function" doc="a surface object to be used for drawings (VML)">
            <scope name="setDimensions" ilk="function" signature="setDimensions(width,height)" doc="sets the width and height of the rawNode" returns="self" attributes="private">
              <variable ilk="argument" name="width" citdl="String" doc="width of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" />
              <variable ilk="argument" name="height" citdl="String" doc="height of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" />
              <scope name="width" citdl="String" doc="width of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" />
              <scope name="height" citdl="String" doc="height of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" />
            </scope>
            <scope name="getDimensions" ilk="function" doc="returns an object with properties &amp;amp;quot;width&amp;amp;quot; and &amp;amp;quot;height&amp;amp;quot;" returns="Object" attributes="private" />
            <scope name="_render" ilk="function" doc="render the all shapes" attributes="private" />
            <scope name="makeDirty" ilk="function" doc="internal method, which is called when we may need to redraw" />
            <scope name="downloadImage" ilk="function" signature="downloadImage(img,url)" doc="internal method, which starts an image download and renders, when it is ready">
              <variable ilk="argument" name="img" citdl="Image" doc="the image object" />
              <variable ilk="argument" name="url" citdl="String" doc="the url of the image" />
            </scope>
            <scope name="onImageLoad" ilk="function" doc="" />
            <scope name="getEventSource" ilk="function" doc="" />
            <scope name="connect" ilk="function" doc="" />
            <scope name="disconnect" ilk="function" doc="" />
            <variable name="width" doc="" />
            <variable name="height" doc="" />
            <scope name="rawNode">
              <variable name="width" doc="" />
              <variable name="height" doc="" />
            </scope>
            <variable name="pendingRender" doc="" />
            <variable name="pendingImageCount" doc="" />
            <scope name="createViewport" ilk="function" doc="" />
          </scope>
          <variable name="canvas" citdl="Object" doc="" />
          <scope name="attachNode" ilk="function" signature="attachNode(node)" doc="creates a shape from a Node" returns="dojox.gfx.Shape" attributes="private">
            <variable ilk="argument" name="node" citdl="Node" doc="an VML node" />
          </scope>
          <variable name="canvas_attach" citdl="Object" doc="" />
          <scope name="decompose" ilk="function" signature="decompose(matrix)" doc="decompose a 2D matrix into translation, scaling, and rotation components" returns="Object" attributes="private">
            <variable ilk="argument" name="matrix" citdl="dojox.gfx.matrix.Matrix2D" doc="a 2D matrix-like object" />
          </scope>
          <variable name="fx" citdl="Object" doc="" />
          <variable name="matrix" citdl="Object" doc="">
            <scope name="_degToRad" ilk="function" signature="_degToRad(degree)" attributes="private" doc="">
              <variable ilk="argument" name="degree" />
            </scope>
            <scope name="_radToDeg" ilk="function" signature="_radToDeg(radian)" attributes="private" doc="">
              <variable ilk="argument" name="radian" />
            </scope>
            <scope name="Matrix2D" ilk="function" signature="Matrix2D(arg)" doc="a 2D matrix object">
              <variable ilk="argument" name="arg" citdl="Object" doc="a 2D matrix-like object, a number, or an array of such objects" />
              <variable name="xx" doc="" />
              <scope name="xy" doc="" />
              <scope name="yx" doc="" />
              <scope name="yy" doc="" />
              <scope name="dx" doc="" />
              <scope name="dy" doc="" />
            </scope>
          </variable>
          <scope name="Matrix2D" doc="" />
          <variable name="move" citdl="Object" doc="" />
          <variable name="path" citdl="Object" doc="">
            <scope name="Path" ilk="function" doc="a path constructor" signature="Path(rawNode)">
              <variable ilk="argument" name="rawNode" citdl="Node" doc="a DOM node to be used by this path object" />
              <scope name="setAbsoluteMode" ilk="function" signature="setAbsoluteMode(mode)" doc="sets an absolute or relative mode for path points" returns="self" attributes="private">
                <variable ilk="argument" name="mode" citdl="Boolean" doc="true/false or &amp;amp;quot;absolute&amp;amp;quot;/&amp;amp;quot;relative&amp;amp;quot; to specify the mode" />
              </scope>
              <scope name="getAbsoluteMode" ilk="function" doc="returns a current value of the absolute mode" returns="Boolean" attributes="private" />
              <scope name="getBoundingBox" ilk="function" doc="returns the bounding box {x, y, width, height} or null" returns="dojox.gfx.Rectangle" attributes="private" />
              <scope name="getLastPosition" ilk="function" doc="returns the last point in the path, or null" returns="Object" attributes="private" />
              <scope name="_updateBBox" ilk="function" signature="_updateBBox(x,y)" doc="updates the bounding box of path with new point" attributes="private">
                <variable ilk="argument" name="x" citdl="Number" doc="an x coordinate" />
                <variable ilk="argument" name="y" citdl="Number" doc="a y coordinate" />
              </scope>
              <scope name="_updateWithSegment" ilk="function" signature="_updateWithSegment(segment)" doc="updates the bounding box of path with new segment" attributes="private">
                <variable ilk="argument" name="segment" citdl="Object" doc="a segment" />
              </scope>
              <variable name="_validSegments" citdl="Object" attributes="private" doc="">
                <scope name="m" doc="" />
                <scope name="l" doc="" />
                <scope name="h" doc="" />
                <scope name="v" doc="" />
                <scope name="c" doc="" />
                <scope name="s" doc="" />
                <scope name="q" doc="" />
                <scope name="t" doc="" />
                <scope name="a" doc="" />
                <scope name="z" doc="" />
              </variable>
              <scope name="_pushSegment" ilk="function" signature="_pushSegment(action,args)" doc="adds a segment" attributes="private">
                <variable ilk="argument" name="action" citdl="String" doc="valid SVG code for a segment's type" />
                <variable ilk="argument" name="args" citdl="Array" doc="a list of parameters for this segment" />
              </scope>
              <scope name="_collectArgs" ilk="function" signature="_collectArgs(array,args)" doc="converts an array of arguments to plain numeric values" attributes="private">
                <variable ilk="argument" name="array" citdl="Array" doc="an output argument (array of numbers)" />
                <variable ilk="argument" name="args" citdl="Array" doc="an input argument (can be values of Boolean, Number, dojox.gfx.Point, or an embedded array of them)" />
              </scope>
              <scope name="moveTo" ilk="function" doc="formes a move segment" returns="self" attributes="private" />
              <scope name="lineTo" ilk="function" doc="formes a line segment" returns="self" attributes="private" />
              <scope name="hLineTo" ilk="function" doc="formes a horizontal line segment" returns="self" attributes="private" />
              <scope name="vLineTo" ilk="function" doc="formes a vertical line segment" returns="self" attributes="private" />
              <scope name="curveTo" ilk="function" doc="formes a curve segment" returns="self" attributes="private" />
              <scope name="smoothCurveTo" ilk="function" doc="formes a smooth curve segment" returns="self" attributes="private" />
              <scope name="qCurveTo" ilk="function" doc="formes a quadratic curve segment" returns="self" attributes="private" />
              <scope name="qSmoothCurveTo" ilk="function" doc="formes a quadratic smooth curve segment" returns="self" attributes="private" />
              <scope name="arcTo" ilk="function" doc="formes an elliptic arc segment" returns="self" attributes="private" />
              <scope name="closePath" ilk="function" doc="closes a path" returns="self" attributes="private" />
              <scope name="_setPath" ilk="function" signature="_setPath(path)" doc="forms a path using an SVG path string" attributes="private">
                <variable ilk="argument" name="path" citdl="String" doc="an SVG path string" />
              </scope>
              <scope name="setShape" ilk="function" signature="setShape(newShape)" doc="forms a path using a shape" returns="self" attributes="private">
                <variable ilk="argument" name="newShape" citdl="Object" doc="an SVG path string or a path object (see dojox.gfx.defaultPath)" />
              </scope>
              <scope name="_2PI" attributes="private" doc="" />
              <variable name="absolute" doc="" />
              <variable name="bbox" doc="">
                <variable name="l" doc="" />
                <variable name="r" doc="" />
                <variable name="t" doc="" />
                <variable name="b" doc="" />
              </variable>
              <variable name="last" doc="">
                <variable name="x" doc="" />
                <variable name="y" doc="" />
              </variable>
              <variable name="shape" doc="">
                <variable name="path" doc="" />
              </variable>
              <variable name="segments" doc="" />
              <variable name="rawNode" citdl="Node" doc="a DOM node to be used by this path object" />
            </scope>
            <scope name="TextPath" ilk="function" doc="a TextPath shape constructor" signature="TextPath(rawNode)">
              <variable ilk="argument" name="rawNode" citdl="Node" doc="a DOM node to be used by this TextPath object" />
              <scope name="getText" ilk="function" doc="returns the current text object or null" returns="Object" attributes="private" />
              <scope name="setText" ilk="function" signature="setText(newText)" doc="sets a text to be drawn along the path" returns="self" attributes="private">
                <variable ilk="argument" name="newText" />
              </scope>
              <scope name="getFont" ilk="function" doc="returns the current font object or null" returns="Object" attributes="private" />
              <scope name="setFont" ilk="function" signature="setFont(newFont)" doc="sets a font for text" returns="self" attributes="private">
                <variable ilk="argument" name="newFont" />
              </scope>
              <variable name="text" doc="" />
              <variable name="fontStyle" doc="" />
            </scope>
            <scope name="_calcArc" ilk="function" signature="_calcArc(alpha)" attributes="private" doc="">
              <variable ilk="argument" name="alpha" />
            </scope>
          </variable>
          <scope name="Shape" doc="">
            <scope name="getNode" ilk="function" doc="returns the current DOM Node or null" returns="Node" attributes="private" />
            <scope name="getShape" ilk="function" doc="returns the current shape object or null (see dojox.gfx.defaultPath, dojox.gfx.defaultPolyline, dojox.gfx.defaultRect, dojox.gfx.defaultEllipse, dojox.gfx.defaultCircle, dojox.gfx.defaultLine, or dojox.gfx.defaultImage)" returns="Object" attributes="private" />
            <scope name="getTransform" ilk="function" doc="returns the current transformation matrix or null" returns="dojox.gfx.Matrix2D" attributes="private" />
            <scope name="getFill" ilk="function" doc="returns the current fill object or null (see dojox.gfx.defaultLinearGradient, dojox.gfx.defaultRadialGradient, dojox.gfx.defaultPattern, or dojo.Color)" returns="Object" attributes="private" />
            <scope name="getStroke" ilk="function" doc="returns the current stroke object or null (see dojox.gfx.defaultStroke)" returns="Object" attributes="private" />
            <scope name="getParent" ilk="function" doc="returns the parent or null (see dojox.gfx.Surface, dojox.gfx.shape.VirtualGroup, or dojox.gfx.Group)" returns="Object" attributes="private" />
            <scope name="getBoundingBox" ilk="function" doc="returns the bounding box or null (see dojox.gfx.defaultRect)" returns="dojox.gfx.Rectangle" attributes="private" />
            <scope name="getTransformedBoundingBox" ilk="function" doc="returns an array of four points or null four points represent four corners of the untransformed bounding box" returns="null|Array" attributes="private" />
            <scope name="getEventSource" ilk="function" doc="returns a Node, which is used as a source of events for this shape" returns="Node" attributes="private" />
            <scope name="setShape" ilk="function" signature="setShape(newShape)" doc="sets a shape object (SVG)" returns="self" attributes="private">
              <variable ilk="argument" name="newShape" citdl="Object" doc="a shape object (see dojox.gfx.defaultPath, dojox.gfx.defaultPolyline, dojox.gfx.defaultRect, dojox.gfx.defaultEllipse, dojox.gfx.defaultCircle, dojox.gfx.defaultLine, or dojox.gfx.defaultImage)" />
              <variable name="shape" citdl="Object" doc="a shape object (see dojox.gfx.defaultPath, dojox.gfx.defaultPolyline, dojox.gfx.defaultRect, dojox.gfx.defaultEllipse, dojox.gfx.defaultCircle, dojox.gfx.defaultLine, or dojox.gfx.defaultImage)" />
            </scope>
            <scope name="setFill" ilk="function" signature="setFill(fill)" doc="sets a fill object (VML)" returns="self" attributes="private">
              <variable ilk="argument" name="fill" citdl="Object" doc="a fill object (see dojox.gfx.defaultLinearGradient, dojox.gfx.defaultRadialGradient, dojox.gfx.defaultPattern, or dojo.Color)" />
            </scope>
            <scope name="setStroke" ilk="function" signature="setStroke(stroke)" doc="sets a stroke object (VML)" returns="self" attributes="private">
              <variable ilk="argument" name="stroke" citdl="Object" doc="a stroke object (see dojox.gfx.defaultStroke)" />
            </scope>
            <scope name="setTransform" ilk="function" signature="setTransform(matrix)" doc="sets a transformation matrix" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx.Matrix2D" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)" />
              <scope name="matrix" citdl="dojox.gfx.Matrix2D" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="_applyTransform" ilk="function" attributes="private" doc="" />
            <scope name="moveToFront" ilk="function" doc="moves a shape to front of its parent's list of shapes" returns="self" attributes="private" />
            <scope name="moveToBack" ilk="function" doc="moves a shape to back of its parent's list of shapes" />
            <scope name="_moveToFront" ilk="function" doc="moves a shape to front of its parent's list of shapes (VML)" attributes="private" />
            <scope name="_moveToBack" ilk="function" doc="moves a shape to back of its parent's list of shapes (VML)" attributes="private" />
            <scope name="applyRightTransform" ilk="function" signature="applyRightTransform(matrix)" doc="multiplies the existing matrix with an argument on right side (this.matrix * matrix)" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx.Matrix2D" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="applyLeftTransform" ilk="function" signature="applyLeftTransform(matrix)" doc="multiplies the existing matrix with an argument on left side (matrix * this.matrix)" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx.Matrix2D" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="applyTransform" ilk="function" signature="applyTransform(matrix)" doc="a shortcut for dojox.gfx.Shape.applyRightTransform" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx.Matrix2D" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="removeShape" ilk="function" signature="removeShape(silently)" doc="removes the shape from its parent's list of shapes" returns="self" attributes="private">
              <variable ilk="argument" name="silently" citdl="Boolean" doc="if true, do not redraw a picture yet" />
            </scope>
            <scope name="_setParent" ilk="function" signature="_setParent(parent,matrix)" doc="sets a parent" returns="self" attributes="private">
              <variable ilk="argument" name="parent" citdl="Object" doc="a parent or null (see dojox.gfx.Surface, dojox.gfx.shape.VirtualGroup, or dojox.gfx.Group)" />
              <variable ilk="argument" name="matrix" citdl="dojox.gfx.Matrix2D" doc="a 2D matrix or a matrix-like object" />
              <variable name="parent" citdl="Object" doc="a parent or null (see dojox.gfx.Surface, dojox.gfx.shape.VirtualGroup, or dojox.gfx.Group)" />
            </scope>
            <scope name="_updateParentMatrix" ilk="function" signature="_updateParentMatrix(matrix)" doc="updates the parent matrix with new matrix" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx.Matrix2D" doc="a 2D matrix or a matrix-like object" />
            </scope>
            <scope name="_getRealMatrix" ilk="function" doc="returns the cumulative (&amp;amp;quot;real&amp;amp;quot;) transformation matrix by combining the shape's matrix with its parent's matrix" returns="dojox.gfx.Matrix2D" attributes="private" />
            <variable name="shape" doc="" />
            <variable name="bbox" doc="" />
            <variable name="fillStyle" doc="" />
            <variable name="strokeStyle" doc="" />
            <variable name="matrix" doc="" />
            <variable name="parent" doc="" />
            <variable name="parentMatrix" doc="" />
            <variable name="rawNode" doc="">
              <variable name="fill" doc="">
                <variable name="opacity" doc="" />
                <variable name="method" doc="" />
              </variable>
              <variable name="filled" doc="" />
              <variable name="fillcolor" doc="" />
              <variable name="stroked" doc="" />
            </variable>
            <scope name="_setFillAttr" ilk="function" signature="_setFillAttr(f)" attributes="private" doc="">
              <variable ilk="argument" name="f" />
            </scope>
            <scope name="_getParentSurface" ilk="function" attributes="private" doc="" />
            <scope name="setRawNode" ilk="function" signature="setRawNode(rawNode)" doc="assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp;amp;amp; stroke by default)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope name="_getAdjustedMatrix" ilk="function" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" returns="dojox.gfx.Matrix2D" attributes="private" />
            <scope name="_setFillObject" ilk="function" signature="_setFillObject(f,nodeType)" attributes="private" doc="">
              <variable ilk="argument" name="f" />
              <variable ilk="argument" name="nodeType" />
            </scope>
            <variable name="_capMap" citdl="Object" attributes="private" doc="">
              <scope name="butt" doc="" />
            </variable>
            <variable name="_capMapReversed" citdl="Object" attributes="private" doc="">
              <scope name="flat" doc="" />
            </variable>
            <scope name="_translate" ilk="function" signature="_translate(dict,value)" attributes="private" doc="">
              <variable ilk="argument" name="dict" />
              <variable ilk="argument" name="value" />
            </scope>
          </scope>
          <variable name="shape" citdl="Object" doc="">
            <scope name="Surface" ilk="function" doc="a surface object to be used for drawings">
              <scope name="getEventSource" ilk="function" doc="returns a node, which can be used to attach event listeners" returns="Node" attributes="private" />
              <scope name="_getRealMatrix" ilk="function" doc="always returns the identity matrix" returns="dojox.gfx.Matrix2D" attributes="private" />
              <scope name="isLoaded" doc="" />
              <scope name="onLoad" ilk="function" signature="onLoad(surface)" doc="local event, fired once when the surface is created asynchronously, used only when isLoaded is false, required only for Silverlight.">
                <variable ilk="argument" name="surface" citdl="dojox.gfx.Surface" />
              </scope>
              <scope name="whenLoaded" ilk="function" signature="whenLoaded(context,method)" doc="">
                <variable ilk="argument" name="context" citdl="Object" />
                <variable ilk="argument" name="method" citdl="Function|String" />
              </scope>
              <variable name="rawNode" doc="" />
            </scope>
            <scope name="Rect" ilk="function" doc="a generic rectangle" signature="Rect(rawNode)">
              <variable ilk="argument" name="rawNode" citdl="Node" doc="a DOM Node" />
              <scope name="getBoundingBox" ilk="function" doc="returns the bounding box (its shape in this case)" returns="dojox.gfx.Rectangle" attributes="private" />
              <variable name="shape" doc="" />
              <variable name="rawNode" citdl="Node" doc="a DOM Node" />
            </scope>
            <scope name="Ellipse" ilk="function" doc="a generic ellipse" signature="Ellipse(rawNode)">
              <variable ilk="argument" name="rawNode" citdl="Node" doc="a DOM Node" />
              <scope name="getBoundingBox" ilk="function" doc="returns the bounding box" returns="dojox.gfx.Rectangle" attributes="private" />
              <variable name="bbox" doc="" />
              <variable name="shape" doc="" />
              <variable name="rawNode" citdl="Node" doc="a DOM Node" />
            </scope>
            <scope name="Circle" ilk="function" doc="a generic circle (this is a helper object, which is defined for convenience)" signature="Circle(rawNode)">
              <variable ilk="argument" name="rawNode" citdl="Node" doc="a DOM Node" />
              <scope name="getBoundingBox" ilk="function" doc="returns the bounding box" returns="dojox.gfx.Rectangle" attributes="private" />
              <variable name="bbox" doc="" />
              <variable name="shape" doc="" />
              <variable name="rawNode" citdl="Node" doc="a DOM Node" />
            </scope>
            <scope name="Line" ilk="function" doc="a generic line (this is a helper object, which is defined for convenience)" signature="Line(rawNode)">
              <variable ilk="argument" name="rawNode" citdl="Node" doc="a DOM Node" />
              <scope name="getBoundingBox" ilk="function" doc="returns the bounding box" returns="dojox.gfx.Rectangle" attributes="private" />
              <variable name="bbox" doc="" />
              <variable name="shape" doc="" />
              <variable name="rawNode" citdl="Node" doc="a DOM Node" />
            </scope>
            <scope name="Polyline" ilk="function" doc="a generic polyline/polygon (this is a helper object, which is defined for convenience)" signature="Polyline(rawNode)">
              <variable ilk="argument" name="rawNode" citdl="Node" doc="a DOM Node" />
              <scope name="setShape" ilk="function" signature="setShape(points,closed)" doc="sets a polyline/polygon shape object" returns="self" attributes="private">
                <variable ilk="argument" name="points" citdl="Object" doc="a polyline/polygon shape object" />
                <variable ilk="argument" name="closed" citdl="Boolean" doc="close the polyline to make a polygon" />
              </scope>
              <scope name="getBoundingBox" ilk="function" doc="returns the bounding box" returns="dojox.gfx.Rectangle" attributes="private" />
              <variable name="bbox" doc="" />
              <variable name="shape" doc="" />
              <variable name="rawNode" citdl="Node" doc="a DOM Node" />
            </scope>
            <scope name="Image" ilk="function" doc="a generic image (this is a helper object, which is defined for convenience)" signature="Image(rawNode)">
              <variable ilk="argument" name="rawNode" citdl="Node" doc="a DOM Node" />
              <scope name="getBoundingBox" ilk="function" doc="returns the bounding box (its shape in this case)" returns="dojox.gfx.Rectangle" attributes="private" />
              <scope name="setStroke" ilk="function" doc="ignore setting a stroke style" returns="self" attributes="private" />
              <scope name="setFill" ilk="function" doc="ignore setting a fill style" returns="self" attributes="private" />
              <variable name="shape" doc="" />
              <variable name="rawNode" citdl="Node" doc="a DOM Node" />
            </scope>
            <scope name="Text" ilk="function" doc="a generic text" signature="Text(rawNode)">
              <variable ilk="argument" name="rawNode" citdl="Node" doc="a DOM Node" />
              <scope name="getFont" ilk="function" doc="returns the current font object or null" returns="Object" attributes="private" />
              <scope name="setFont" ilk="function" signature="setFont(newFont)" doc="sets a font for text" returns="self" attributes="private">
                <variable ilk="argument" name="newFont" citdl="Object" doc="a font object (see dojox.gfx.defaultFont) or a font string" />
              </scope>
              <variable name="fontStyle" doc="" />
              <variable name="shape" doc="" />
              <variable name="rawNode" citdl="Node" doc="a DOM Node" />
            </scope>
            <variable name="_eventsProcessing" citdl="Object" attributes="private" doc="">
              <scope name="connect" ilk="function" signature="connect(name,object,method)" doc="connects a handler to an event on this shape" returns="Object" attributes="private">
                <variable ilk="argument" name="name" />
                <variable ilk="argument" name="object" />
                <variable ilk="argument" name="method" />
              </scope>
              <scope name="disconnect" ilk="function" signature="disconnect(token)" doc="connects a handler by token from an event on this shape">
                <variable ilk="argument" name="token" />
              </scope>
            </variable>
            <variable name="Container" citdl="Object" doc="a container of shapes, which can be used as a foundation for renderer-specific groups, or as a way to logically group shapes (e.g, to propagate matricies)">
              <scope name="_init" ilk="function" attributes="private" doc="">
                <variable name="children" citdl="Array" doc="a list of children" />
              </scope>
              <scope name="add" ilk="function" signature="add(shape)" doc="adds a shape to the list" returns="self" attributes="private">
                <variable ilk="argument" name="shape" citdl="dojox.gfx.Shape" doc="a shape" />
              </scope>
              <scope name="remove" ilk="function" signature="remove(shape,silently)" doc="removes a shape from the list" returns="self" attributes="private">
                <variable ilk="argument" name="shape" />
                <variable ilk="argument" name="silently" citdl="Boolean" doc="if true, do not redraw a picture yet" />
              </scope>
              <scope name="clear" ilk="function" doc="removes all shapes from a group/surface" returns="self" attributes="private">
                <variable name="children" doc="" />
              </scope>
              <scope name="_moveChildToFront" ilk="function" signature="_moveChildToFront(shape)" doc="moves a shape to front of the list of shapes" returns="self" attributes="private">
                <variable ilk="argument" name="shape" />
              </scope>
              <scope name="_moveChildToBack" ilk="function" signature="_moveChildToBack(shape)" doc="moves a shape to back of the list of shapes" returns="self" attributes="private">
                <variable ilk="argument" name="shape" />
              </scope>
            </variable>
            <variable name="Creator" citdl="Object" doc="shape creators">
              <scope name="createShape" ilk="function" signature="createShape(shape)" doc="creates a shape object based on its type; it is meant to be used by group-like objects">
                <variable ilk="argument" name="shape" citdl="Object" doc="a shape descriptor object" />
              </scope>
              <scope name="createGroup" ilk="function" doc="creates a VML group shape" returns="dojox.gfx.Group" attributes="private" />
              <scope name="createRect" ilk="function" signature="createRect(rect)" doc="creates an SVG rectangle shape" returns="dojox.gfx.Rect" attributes="private">
                <variable ilk="argument" name="rect" citdl="Object" doc="a path object (see dojox.gfx.defaultRect)" />
              </scope>
              <scope name="createEllipse" ilk="function" signature="createEllipse(ellipse)" doc="creates an SVG ellipse shape" returns="dojox.gfx.Ellipse" attributes="private">
                <variable ilk="argument" name="ellipse" citdl="Object" doc="an ellipse object (see dojox.gfx.defaultEllipse)" />
              </scope>
              <scope name="createCircle" ilk="function" signature="createCircle(circle)" doc="creates an SVG circle shape" returns="dojox.gfx.Circle" attributes="private">
                <variable ilk="argument" name="circle" citdl="Object" doc="a circle object (see dojox.gfx.defaultCircle)" />
              </scope>
              <scope name="createLine" ilk="function" signature="createLine(line)" doc="creates an SVG line shape" returns="dojox.gfx.Line" attributes="private">
                <variable ilk="argument" name="line" citdl="Object" doc="a line object (see dojox.gfx.defaultLine)" />
              </scope>
              <scope name="createPolyline" ilk="function" signature="createPolyline(points)" doc="creates an SVG polyline/polygon shape" returns="dojox.gfx.Polyline" attributes="private">
                <variable ilk="argument" name="points" citdl="Object" doc="a points object (see dojox.gfx.defaultPolyline) or an Array of points" />
              </scope>
              <scope name="createImage" ilk="function" signature="createImage(image)" doc="creates a VML image shape" returns="dojox.gfx.Image" attributes="private">
                <variable ilk="argument" name="image" citdl="Object" doc="an image object (see dojox.gfx.defaultImage)" />
              </scope>
              <scope name="createText" ilk="function" signature="createText(text)" doc="creates an SVG text shape" returns="dojox.gfx.Text" attributes="private">
                <variable ilk="argument" name="text" citdl="Object" doc="a text object (see dojox.gfx.defaultText)" />
              </scope>
              <scope name="createPath" ilk="function" signature="createPath(path)" doc="creates an SVG path shape" returns="dojox.gfx.Path" attributes="private">
                <variable ilk="argument" name="path" citdl="Object" doc="a path object (see dojox.gfx.defaultPath)" />
              </scope>
              <scope name="createTextPath" ilk="function" signature="createTextPath(text)" doc="creates an SVG text shape" returns="dojox.gfx.TextPath" attributes="private">
                <variable ilk="argument" name="text" citdl="Object" doc="a textpath object (see dojox.gfx.defaultTextPath)" />
              </scope>
              <scope name="createObject" ilk="function" signature="createObject(shapeType,rawShape)" doc="creates an instance of the passed shapeType class" returns="dojox.gfx.Shape" attributes="private">
                <variable ilk="function" name="shapeType" doc="a class constructor to create an instance of" />
                <variable ilk="argument" name="rawShape" citdl="Object" doc="properties to be passed in to the classes &amp;amp;quot;setShape&amp;amp;quot; method overrideSize: Boolean: set the size explicitly, if true" />
              </scope>
              <scope name="_overrideSize" ilk="function" signature="_overrideSize(node)" attributes="private" doc="">
                <variable ilk="argument" name="node" />
              </scope>
            </variable>
          </variable>
          <scope name="Point" ilk="function" doc="a hypothetical 2D point to be used for drawings - {x, y}" />
          <scope name="Rectangle" ilk="function" doc="a hypothetical rectangle - {x, y, width, height}" />
          <variable name="silverlight" citdl="Object" doc="">
            <variable name="dasharray" citdl="Object" doc="">
              <scope name="solid" doc="" />
              <scope name="shortdash" doc="" />
              <scope name="shortdot" doc="" />
              <scope name="shortdashdot" doc="" />
              <scope name="shortdashdotdot" doc="" />
              <scope name="dot" doc="" />
              <scope name="dash" doc="" />
              <scope name="longdash" doc="" />
              <scope name="dashdot" doc="" />
              <scope name="longdashdot" doc="" />
              <scope name="longdashdotdot" doc="" />
            </variable>
            <variable name="fontweight" citdl="Object" doc="">
              <scope name="normal" doc="" />
              <scope name="bold" doc="" />
            </variable>
            <variable name="caps" citdl="Object" doc="">
              <scope name="butt" doc="" />
              <scope name="round" doc="" />
              <scope name="square" doc="" />
            </variable>
            <variable name="joins" citdl="Object" doc="">
              <scope name="bevel" doc="" />
              <scope name="round" doc="" />
            </variable>
            <variable name="fonts" citdl="Object" doc="">
              <scope name="serif" doc="" />
              <scope name="times" doc="" />
              <scope name="sans-serif" doc="" />
              <scope name="helvetica" doc="" />
              <scope name="monotone" doc="" />
              <scope name="courier" doc="" />
            </variable>
            <variable name="surfaces" citdl="Object" doc="" />
            <variable name="Font" citdl="Object" doc="">
              <scope name="_setFont" ilk="function" doc="sets a font object (Silverlight)" attributes="private">
                <variable name="_delay" attributes="private" doc="" />
              </scope>
            </variable>
            <variable name="Container" citdl="Object" doc="">
              <scope name="_init" ilk="function" attributes="private" doc="" />
              <scope name="add" ilk="function" signature="add(shape)" doc="adds a shape to a group/surface" returns="self" attributes="private">
                <variable ilk="argument" name="shape" citdl="dojox.gfx.Shape" doc="a Silverlight shape object" />
              </scope>
              <scope name="remove" ilk="function" signature="remove(shape,silently)" doc="remove a shape from a group/surface" returns="self" attributes="private">
                <variable ilk="argument" name="shape" citdl="dojox.gfx.Shape" doc="a Silverlight shape object" />
                <variable ilk="argument" name="silently" citdl="Boolean" doc="if true, regenerate a picture" />
              </scope>
              <scope name="clear" ilk="function" doc="removes all shapes from a group/surface" />
              <scope name="_moveChildToFront" attributes="private" doc="" />
              <scope name="_moveChildToBack" attributes="private" doc="" />
            </variable>
            <scope name="hexColor" ilk="function" signature="hexColor(color)" doc="converts a color object to a Silverlight hex color string (#aarrggbb)" returns="String" attributes="private">
              <variable ilk="argument" name="color" citdl="String|Array|dojo.Color" />
            </scope>
          </variable>
          <scope name="createSurface" ilk="function" signature="createSurface(parentNode,width,height)" doc="creates a surface (VML)" returns="dojox.gfx.Surface" attributes="private">
            <variable ilk="argument" name="parentNode" citdl="Node" doc="a parent node" />
            <variable ilk="argument" name="width" citdl="String" doc="width of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" />
            <variable ilk="argument" name="height" citdl="String" doc="height of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" />
          </scope>
          <scope name="attachSurface" ilk="function" signature="attachSurface(node)" doc="creates a surface from a Node" returns="dojox.gfx.Surface" attributes="private">
            <variable ilk="argument" name="node" citdl="Node" doc="an VML node" />
          </scope>
          <variable name="silverlight_attach" citdl="Object" doc="" />
          <variable name="svg" citdl="Object" doc="">
            <variable name="xmlns" citdl="Object" doc="">
              <scope name="xlink" doc="" />
              <scope name="svg" doc="" />
            </variable>
            <variable name="dasharray" citdl="Object" doc="">
              <scope name="solid" doc="" />
              <scope name="shortdash" doc="" />
              <scope name="shortdot" doc="" />
              <scope name="shortdashdot" doc="" />
              <scope name="shortdashdotdot" doc="" />
              <scope name="dot" doc="" />
              <scope name="dash" doc="" />
              <scope name="longdash" doc="" />
              <scope name="dashdot" doc="" />
              <scope name="longdashdot" doc="" />
              <scope name="longdashdotdot" doc="" />
            </variable>
            <variable name="Font" citdl="Object" doc="">
              <scope name="_setFont" ilk="function" doc="sets a font object (SVG)" attributes="private" />
            </variable>
            <variable name="Container" citdl="Object" doc="">
              <scope name="_init" ilk="function" attributes="private" doc="" />
              <scope name="add" ilk="function" signature="add(shape)" doc="adds a shape to a group/surface" returns="self" attributes="private">
                <variable ilk="argument" name="shape" citdl="dojox.gfx.Shape" doc="an VML shape object" />
              </scope>
              <scope name="remove" ilk="function" signature="remove(shape,silently)" doc="remove a shape from a group/surface" returns="self" attributes="private">
                <variable ilk="argument" name="shape" citdl="dojox.gfx.Shape" doc="an VML shape object" />
                <variable ilk="argument" name="silently" citdl="Boolean" doc="if true, regenerate a picture" />
                <variable name="rawNode" doc="" />
              </scope>
              <scope name="clear" ilk="function" doc="removes all shapes from a group/surface" />
              <scope name="_moveChildToFront" attributes="private" doc="" />
              <scope name="_moveChildToBack" attributes="private" doc="" />
            </variable>
            <scope name="getRef" ilk="function" signature="getRef(name)" doc="returns a DOM Node specified by the name argument or null" returns="Node" attributes="private">
              <variable ilk="argument" name="name" citdl="String" doc="an SVG external reference" />
            </scope>
          </variable>
          <variable name="svg_attach" citdl="Object" doc="" />
          <variable name="utils" citdl="Object" doc="" />
          <variable name="vml" citdl="Object" doc="">
            <variable name="text_alignment" citdl="Object" doc="">
              <scope name="start" doc="" />
              <scope name="middle" doc="" />
              <scope name="end" doc="" />
            </variable>
            <variable name="_bool" citdl="Object" attributes="private" doc="">
              <scope name="t" doc="" />
              <scope name="true" doc="" />
            </variable>
            <variable name="Container" citdl="Object" doc="">
              <scope name="_init" ilk="function" attributes="private" doc="" />
              <scope name="add" ilk="function" signature="add(shape)" doc="adds a shape to a group/surface" returns="self" attributes="private">
                <variable ilk="argument" name="shape" citdl="dojox.gfx.Shape" doc="an VML shape object" />
              </scope>
              <scope name="remove" ilk="function" signature="remove(shape,silently)" doc="remove a shape from a group/surface" returns="self" attributes="private">
                <variable ilk="argument" name="shape" citdl="dojox.gfx.Shape" doc="an VML shape object" />
                <variable ilk="argument" name="silently" citdl="Boolean" doc="if true, regenerate a picture" />
                <variable name="rawNode" doc="" />
              </scope>
              <scope name="clear" ilk="function" doc="removes all shapes from a group/surface" />
              <scope name="_moveChildToFront" attributes="private" doc="" />
              <scope name="_moveChildToBack" attributes="private" doc="" />
            </variable>
            <scope name="_parseFloat" ilk="function" signature="_parseFloat(str)" doc="a helper function to parse VML-specific floating-point values" returns="Number" attributes="private">
              <variable ilk="argument" name="str" citdl="String" doc="a representation of a floating-point number" />
            </scope>
            <scope name="xmlns" doc="" />
          </variable>
          <variable name="vml_attach" citdl="Object" doc="" />
          <scope name="renderer" doc="" />
        </variable>
        <variable name="gfx3d" citdl="Object" doc="A 3d API for dojox.gfx">
          <scope name="gradient" ilk="function" signature="gradient(model,material,center,radius,from,to,matrix)" doc="calculate a cylindrical gradient">
            <variable ilk="argument" name="model" citdl="dojox.gfx3d.lighting.Model" doc="color model" />
            <variable ilk="argument" name="material" citdl="Object" doc="defines visual properties" />
            <variable ilk="argument" name="center" citdl="Object" doc="center of the cylinder's bottom" />
            <variable ilk="argument" name="radius" citdl="Number" doc="radius of the cylinder" />
            <variable ilk="argument" name="from" citdl="Number" doc="from position in radians" />
            <variable ilk="argument" name="to" citdl="Number" doc="from position in radians" />
            <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.Matrix3D" doc="the cumulative transformation matrix tolerance: Number: tolerable diffirence in colors between gradient steps" />
          </scope>
          <variable name="lighting" citdl="Object" doc="">
            <scope name="Model" ilk="function" signature="Model(incident,lights,ambient,specular)" doc="">
              <variable ilk="argument" name="incident" />
              <variable ilk="argument" name="lights" />
              <variable ilk="argument" name="ambient" />
              <variable ilk="argument" name="specular" />
              <scope name="constant" ilk="function" signature="constant(normal,finish,pigment)" doc="">
                <variable ilk="argument" name="normal" />
                <variable ilk="argument" name="finish" />
                <variable ilk="argument" name="pigment" />
              </scope>
              <scope name="matte" ilk="function" signature="matte(normal,finish,pigment)" doc="">
                <variable ilk="argument" name="normal" />
                <variable ilk="argument" name="finish" />
                <variable ilk="argument" name="pigment" />
              </scope>
              <scope name="metal" ilk="function" signature="metal(normal,finish,pigment)" doc="">
                <variable ilk="argument" name="normal" />
                <variable ilk="argument" name="finish" />
                <variable ilk="argument" name="pigment" />
              </scope>
              <scope name="plastic" ilk="function" signature="plastic(normal,finish,pigment)" doc="">
                <variable ilk="argument" name="normal" />
                <variable ilk="argument" name="finish" />
                <variable ilk="argument" name="pigment" />
              </scope>
              <scope name="npr" ilk="function" signature="npr(normal,finish,pigment)" doc="">
                <variable ilk="argument" name="normal" />
                <variable ilk="argument" name="finish" />
                <variable ilk="argument" name="pigment" />
              </scope>
              <variable name="incident" doc="" />
              <variable name="lights" doc="" />
              <variable name="ambient" doc="">
                <variable name="a" doc="" />
              </variable>
              <variable name="specular" doc="">
                <variable name="a" doc="" />
              </variable>
              <variable name="npr_cool" doc="" />
              <variable name="npr_warm" doc="" />
              <variable name="npr_alpha" doc="" />
              <variable name="npr_beta" doc="" />
              <variable name="npr_scale" doc="" />
            </scope>
            <variable name="finish" citdl="Object" doc="">
              <variable name="defaults" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="roughness" doc="" />
              </variable>
              <variable name="dull" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="roughness" doc="" />
              </variable>
              <variable name="shiny" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="roughness" doc="" />
              </variable>
              <variable name="glossy" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="roughness" doc="" />
              </variable>
              <variable name="phong_dull" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="phong" doc="" />
                <scope name="phong_size" doc="" />
              </variable>
              <variable name="phong_shiny" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="phong" doc="" />
                <scope name="phong_size" doc="" />
              </variable>
              <variable name="phong_glossy" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="phong" doc="" />
                <scope name="phong_size" doc="" />
              </variable>
              <variable name="luminous" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="roughness" doc="" />
              </variable>
              <variable name="metalA" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="roughness" doc="" />
              </variable>
              <variable name="metalB" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="roughness" doc="" />
              </variable>
              <variable name="metalC" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="roughness" doc="" />
              </variable>
              <variable name="metalD" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="roughness" doc="" />
              </variable>
              <variable name="metalE" citdl="Object" doc="">
                <scope name="Ka" doc="" />
                <scope name="Kd" doc="" />
                <scope name="Ks" doc="" />
                <scope name="roughness" doc="" />
              </variable>
            </variable>
            <scope name="black" ilk="function" doc="" />
            <scope name="white" ilk="function" doc="" />
            <scope name="toStdColor" ilk="function" signature="toStdColor(c)" doc="">
              <variable ilk="argument" name="c" />
            </scope>
            <scope name="fromStdColor" ilk="function" signature="fromStdColor(c)" doc="">
              <variable ilk="argument" name="c" />
            </scope>
            <scope name="scaleColor" ilk="function" signature="scaleColor(s,c)" doc="">
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="c" />
            </scope>
            <scope name="addColor" ilk="function" signature="addColor(a,b)" doc="">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope name="multiplyColor" ilk="function" signature="multiplyColor(a,b)" doc="">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope name="saturateColor" ilk="function" signature="saturateColor(c)" doc="">
              <variable ilk="argument" name="c" />
            </scope>
            <scope name="mixColor" ilk="function" signature="mixColor(c1,c2,s)" doc="">
              <variable ilk="argument" name="c1" />
              <variable ilk="argument" name="c2" />
              <variable ilk="argument" name="s" />
            </scope>
            <scope name="diff2Color" ilk="function" signature="diff2Color(c1,c2)" doc="">
              <variable ilk="argument" name="c1" />
              <variable ilk="argument" name="c2" />
            </scope>
            <scope name="length2Color" ilk="function" signature="length2Color(c)" doc="">
              <variable ilk="argument" name="c" />
            </scope>
            <scope name="dot" ilk="function" signature="dot(a,b)" doc="">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope name="scale" ilk="function" signature="scale(s,v)" doc="">
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="v" />
            </scope>
            <scope name="add" ilk="function" signature="add(a,b)" doc="">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope name="saturate" ilk="function" signature="saturate(v)" doc="">
              <variable ilk="argument" name="v" />
            </scope>
            <scope name="length" ilk="function" signature="length(v)" doc="">
              <variable ilk="argument" name="v" />
            </scope>
            <scope name="normalize" ilk="function" signature="normalize(v)" doc="">
              <variable ilk="argument" name="v" />
            </scope>
            <scope name="faceforward" ilk="function" signature="faceforward(n,i)" doc="">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="i" />
            </scope>
            <scope name="reflect" ilk="function" signature="reflect(i,n)" doc="">
              <variable ilk="argument" name="i" />
              <variable ilk="argument" name="n" />
            </scope>
            <scope name="diffuse" ilk="function" signature="diffuse(normal,lights)" doc="">
              <variable ilk="argument" name="normal" />
              <variable ilk="argument" name="lights" />
            </scope>
            <scope name="specular" ilk="function" signature="specular(normal,v,roughness,lights)" doc="">
              <variable ilk="argument" name="normal" />
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="roughness" />
              <variable ilk="argument" name="lights" />
            </scope>
            <scope name="phong" ilk="function" signature="phong(normal,v,size,lights)" doc="">
              <variable ilk="argument" name="normal" />
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="size" />
              <variable ilk="argument" name="lights" />
            </scope>
          </variable>
          <variable name="matrix" citdl="Object" doc="">
            <scope name="_degToRad" ilk="function" signature="_degToRad(degree)" attributes="private" doc="">
              <variable ilk="argument" name="degree" />
            </scope>
            <scope name="_radToDeg" ilk="function" signature="_radToDeg(radian)" attributes="private" doc="">
              <variable ilk="argument" name="radian" />
            </scope>
            <scope name="Matrix3D" ilk="function" signature="Matrix3D(arg)" doc="a 3D matrix object">
              <variable ilk="argument" name="arg" citdl="Object" doc="a 3D matrix-like object, a number, or an array of such objects" />
              <variable name="xx" doc="" />
              <scope name="xy" doc="" />
              <scope name="xz" doc="" />
              <scope name="yx" doc="" />
              <scope name="yy" doc="" />
              <scope name="yz" doc="" />
              <scope name="zx" doc="" />
              <scope name="zy" doc="" />
              <scope name="zz" doc="" />
              <scope name="dx" doc="" />
              <scope name="dy" doc="" />
              <scope name="dz" doc="" />
            </scope>
            <scope name="identity" doc="" />
            <scope name="translate" ilk="function" signature="translate(a,b,c)" doc="forms a translation matrix" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="a" citdl="Number" doc="an x coordinate value" />
              <variable ilk="argument" name="b" citdl="Number" doc="a y coordinate value" />
              <variable ilk="argument" name="c" citdl="Number" doc="a z coordinate value" />
            </scope>
            <scope name="scale" ilk="function" signature="scale(a,b,c)" doc="forms a scaling matrix" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="a" citdl="Number" doc="a scaling factor used for the x coordinate" />
              <variable ilk="argument" name="b" citdl="Number" doc="a scaling factor used for the y coordinate" />
              <variable ilk="argument" name="c" citdl="Number" doc="a scaling factor used for the z coordinate" />
            </scope>
            <scope name="rotateX" ilk="function" signature="rotateX(angle)" doc="forms a rotating matrix (about the x axis)" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="angle" citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="rotateXg" ilk="function" signature="rotateXg(degree)" doc="forms a rotating matrix (about the x axis)" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="degree" citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="rotateY" ilk="function" signature="rotateY(angle)" doc="forms a rotating matrix (about the y axis)" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="angle" citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="rotateYg" ilk="function" signature="rotateYg(degree)" doc="forms a rotating matrix (about the y axis)" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="degree" citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="rotateZ" ilk="function" signature="rotateZ(angle)" doc="forms a rotating matrix (about the z axis)" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="angle" citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="rotateZg" ilk="function" signature="rotateZg(degree)" doc="forms a rotating matrix (about the z axis)" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="degree" citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="cameraTranslate" ilk="function" signature="cameraTranslate(a,b,c)" doc="forms a translation matrix" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="a" citdl="Number" doc="an x coordinate value" />
              <variable ilk="argument" name="b" citdl="Number" doc="a y coordinate value" />
              <variable ilk="argument" name="c" citdl="Number" doc="a z coordinate value" />
            </scope>
            <scope name="cameraRotateX" ilk="function" signature="cameraRotateX(angle)" doc="forms a rotating matrix (about the x axis) in cameraTransform manner" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="angle" citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="cameraRotateXg" ilk="function" signature="cameraRotateXg(degree)" doc="forms a rotating matrix (about the x axis)in cameraTransform manner" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="degree" citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="cameraRotateY" ilk="function" signature="cameraRotateY(angle)" doc="forms a rotating matrix (about the y axis) in cameraTransform manner" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="angle" citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="cameraRotateYg" ilk="function" signature="cameraRotateYg(degree)" doc="forms a rotating matrix (about the y axis) in cameraTransform manner" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="degree" citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="cameraRotateZ" ilk="function" signature="cameraRotateZ(angle)" doc="forms a rotating matrix (about the z axis) in cameraTransform manner" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="angle" citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="cameraRotateZg" ilk="function" signature="cameraRotateZg(degree)" doc="forms a rotating matrix (about the z axis) in cameraTransform manner" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="degree" citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" />
            </scope>
            <scope name="normalize" ilk="function" signature="normalize(matrix)" doc="converts an object to a matrix, if necessary" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="matrix" citdl="Object" doc="an object, which is converted to a matrix, if necessary" />
            </scope>
            <scope name="clone" ilk="function" signature="clone(matrix)" doc="creates a copy of a 3D matrix" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix3D" doc="a 3D matrix-like object to be cloned" />
            </scope>
            <scope name="invert" ilk="function" signature="invert(matrix)" doc="inverts a 2D matrix" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx.matrix.Matrix3D" doc="a 2D matrix-like object to be inverted" />
            </scope>
            <scope name="_multiplyPoint" ilk="function" signature="_multiplyPoint(m,x,y,z)" doc="applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied" returns="Object" attributes="private">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="x" citdl="Number" doc="an x coordinate of a point" />
              <variable ilk="argument" name="y" citdl="Number" doc="a y coordinate of a point" />
              <variable ilk="argument" name="z" citdl="Number" doc="a z coordinate of a point" />
            </scope>
            <scope name="multiplyPoint" ilk="function" signature="multiplyPoint(matrix,a,b,c)" doc="applies a matrix to a point" returns="Object" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix3D" doc="a 3D matrix object to be applied" />
              <variable ilk="argument" name="a" citdl="Number||Point" doc="Number an x coordinate of a point" />
              <variable ilk="argument" name="b" citdl="Number, optional" doc="Number a y coordinate of a point" />
              <variable ilk="argument" name="c" citdl="Number, optional" doc="Number a z coordinate of a point" />
            </scope>
            <scope name="multiply" ilk="function" signature="multiply(matrix)" doc="combines matrices by multiplying them sequentially in the given order" returns="dojox.gfx3d.matrix.Matrix3D" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix3D" doc="a 3D matrix-like object, all subsequent arguments are matrix-like objects too">
                <scope name="repeating" />
              </variable>
            </scope>
            <scope name="_project" ilk="function" signature="_project(m,x,y,z)" doc="applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied" returns="Object" attributes="private">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="x" citdl="Number" doc="an x coordinate of a point" />
              <variable ilk="argument" name="y" citdl="Number" doc="a y coordinate of a point" />
              <variable ilk="argument" name="z" citdl="Number" doc="a z coordinate of a point" />
            </scope>
            <scope name="project" ilk="function" signature="project(matrix,a,b,c)" doc="applies a matrix to a point" returns="Object" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix3D" doc="a 3D matrix object to be applied" />
              <variable ilk="argument" name="a" citdl="Number||Point" doc="Number an x coordinate of a point" />
              <variable ilk="argument" name="b" citdl="Number, optional" doc="Number a y coordinate of a point" />
              <variable ilk="argument" name="c" citdl="Number, optional" doc="Number a z coordinate of a point" />
            </scope>
          </variable>
          <scope name="Matrix3D" doc="" />
          <scope name="Object" ilk="function" doc="a Object object, which knows how to map 3D objects to 2D shapes.">
            <scope name="setObject" ilk="function" signature="setObject(newObject)" doc="sets a Object object">
              <variable ilk="argument" name="newObject" />
              <variable name="object" citdl="Object" doc="an abstract Object object (see dojox.gfx3d.defaultEdges, dojox.gfx3d.defaultTriangles, dojox.gfx3d.defaultQuads dojox.gfx3d.defaultOrbit dojox.gfx3d.defaultCube or dojox.gfx3d.defaultCylinder)" />
            </scope>
            <scope name="setTransform" ilk="function" signature="setTransform(matrix)" doc="sets a transformation matrix" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)" />
              <scope name="matrix" citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="applyRightTransform" ilk="function" signature="applyRightTransform(matrix)" doc="multiplies the existing matrix with an argument on right side (this.matrix * matrix)" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="applyLeftTransform" ilk="function" signature="applyLeftTransform(matrix)" doc="multiplies the existing matrix with an argument on left side (matrix * this.matrix)" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="applyTransform" ilk="function" signature="applyTransform(matrix)" doc="a shortcut for dojox.gfx.Shape.applyRightTransform" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="setFill" ilk="function" signature="setFill(fill)" doc="sets a fill object (the default implementation is to delegate to the underlying 2D shape).">
              <variable ilk="argument" name="fill" citdl="Object" doc="a fill object (see dojox.gfx.defaultLinearGradient, dojox.gfx.defaultRadialGradient, dojox.gfx.defaultPattern, dojo.Color or dojox.gfx.MODEL)" />
            </scope>
            <scope name="setStroke" ilk="function" signature="setStroke(stroke)" doc="sets a stroke object (the default implementation simply ignores it)">
              <variable ilk="argument" name="stroke" citdl="Object" doc="a stroke object (see dojox.gfx.defaultStroke)" />
            </scope>
            <scope name="toStdFill" ilk="function" signature="toStdFill(lighting,normal)" doc="">
              <variable ilk="argument" name="lighting" />
              <variable ilk="argument" name="normal" />
            </scope>
            <scope name="invalidate" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <scope name="render" ilk="function" signature="render(camera)" doc="">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope name="draw" ilk="function" signature="draw(lighting)" doc="">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope name="getZOrder" ilk="function" doc="" />
            <scope name="getOutline" ilk="function" doc="" />
            <variable name="object" doc="" />
            <variable name="matrix" doc="" />
            <variable name="fillStyle" doc="" />
            <variable name="strokeStyle" doc="" />
            <variable name="shape" doc="" />
            <variable name="cache" doc="" />
            <variable name="renderer" doc="" />
            <variable name="parent" doc="" />
          </scope>
          <scope name="Scene" ilk="function" doc="a containter of other 3D objects">
            <scope name="setFill" ilk="function" signature="setFill(fill)" doc="">
              <variable ilk="argument" name="fill" />
            </scope>
            <scope name="setStroke" ilk="function" signature="setStroke(stroke)" doc="">
              <variable ilk="argument" name="stroke" />
            </scope>
            <scope name="render" ilk="function" signature="render(camera,deep)" doc="">
              <variable ilk="argument" name="camera" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope name="draw" ilk="function" signature="draw(lighting)" doc="">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope name="addTodo" ilk="function" signature="addTodo(newObject)" doc="">
              <variable ilk="argument" name="newObject" />
            </scope>
            <scope name="invalidate" ilk="function" doc="" />
            <scope name="getZOrder" ilk="function" doc="" />
            <variable name="fillStyle" doc="" />
            <variable name="strokeStyle" doc="" />
            <variable name="todos" doc="" />
            <variable name="objects" doc="" />
            <variable name="schedule" doc="" />
            <variable name="_draw" attributes="private" doc="" />
          </scope>
          <scope name="Edges" ilk="function" doc="a generic edge in 3D viewport">
            <scope name="setObject" ilk="function" signature="setObject(newObject,style)" doc="setup the object">
              <variable ilk="argument" name="newObject" citdl="Array" doc="of points || Object" />
              <variable ilk="argument" name="style" citdl="String, optional" doc="String optional" />
            </scope>
            <scope name="getZOrder" ilk="function" doc="" />
            <scope name="render" ilk="function" signature="render(camera)" doc="">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope name="draw" ilk="function" doc="" />
            <variable name="object" doc="" />
            <variable name="cache" doc="" />
            <variable name="shape" doc="" />
          </scope>
          <scope name="Orbit" ilk="function" doc="a generic edge in 3D viewport">
            <scope name="render" ilk="function" signature="render(camera)" doc="">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope name="draw" ilk="function" signature="draw(lighting)" doc="">
              <variable ilk="argument" name="lighting" />
            </scope>
            <variable name="cache" doc="" />
            <variable name="shape" doc="" />
            <variable name="object" doc="" />
          </scope>
          <scope name="Path3d" ilk="function" doc="a generic line (this is a helper object, which is defined for convenience)">
            <scope name="_collectArgs" ilk="function" signature="_collectArgs(array,args)" doc="converts an array of arguments to plain numeric values" attributes="private">
              <variable ilk="argument" name="array" citdl="Array" doc="an output argument (array of numbers)" />
              <variable ilk="argument" name="args" citdl="Array" doc="an input argument (can be values of Boolean, Number, dojox.gfx.Point, or an embedded array of them)" />
            </scope>
            <variable name="_validSegments" citdl="Object" attributes="private" doc="">
              <scope name="m" doc="" />
              <scope name="l" doc="" />
              <scope name="z" doc="" />
            </variable>
            <scope name="_pushSegment" ilk="function" signature="_pushSegment(action,args)" doc="adds a segment" attributes="private">
              <variable ilk="argument" name="action" citdl="String" doc="valid SVG code for a segment's type" />
              <variable ilk="argument" name="args" citdl="Array" doc="a list of parameters for this segment" />
            </scope>
            <scope name="moveTo" ilk="function" doc="formes a move segment" returns="self" attributes="private" />
            <scope name="lineTo" ilk="function" doc="formes a line segment" returns="self" attributes="private" />
            <scope name="closePath" ilk="function" doc="closes a path" returns="self" attributes="private" />
            <scope name="render" ilk="function" signature="render(camera)" doc="">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope name="_draw" ilk="function" attributes="private" doc="" />
            <variable name="cache" doc="" />
            <variable name="object" doc="" />
            <variable name="segments" doc="" />
            <variable name="absolute" doc="" />
            <variable name="last" doc="" />
            <variable name="path" doc="" />
          </scope>
          <scope name="Triangles" ilk="function" doc="a generic triangle (this is a helper object, which is defined for convenience)">
            <scope name="setObject" ilk="function" signature="setObject(newObject,style)" doc="setup the object">
              <variable ilk="argument" name="newObject" citdl="Array" doc="of points || Object" />
              <variable ilk="argument" name="style" citdl="String, optional" doc="String optional" />
            </scope>
            <scope name="render" ilk="function" signature="render(camera)" doc="">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope name="draw" ilk="function" signature="draw(lighting)" doc="">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope name="getZOrder" ilk="function" doc="" />
            <variable name="object" doc="" />
            <variable name="cache" doc="" />
            <variable name="shape" doc="" />
          </scope>
          <scope name="Quads" ilk="function" doc="a generic triangle (this is a helper object, which is defined for convenience)">
            <scope name="setObject" ilk="function" signature="setObject(newObject,style)" doc="setup the object">
              <variable ilk="argument" name="newObject" citdl="Array" doc="of points || Object" />
              <variable ilk="argument" name="style" citdl="String, optional" doc="String optional" />
            </scope>
            <scope name="render" ilk="function" signature="render(camera)" doc="">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope name="draw" ilk="function" signature="draw(lighting)" doc="">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope name="getZOrder" ilk="function" doc="" />
            <variable name="object" doc="" />
            <variable name="cache" doc="" />
            <variable name="shape" doc="" />
          </scope>
          <scope name="Polygon" ilk="function" doc="a generic triangle (this is a helper object, which is defined for convenience)">
            <scope name="setObject" ilk="function" signature="setObject(newObject)" doc="setup the object">
              <variable ilk="argument" name="newObject" citdl="Array" doc="of points || Object" />
            </scope>
            <scope name="render" ilk="function" signature="render(camera)" doc="">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope name="draw" ilk="function" signature="draw(lighting)" doc="">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope name="getZOrder" ilk="function" doc="" />
            <scope name="getOutline" ilk="function" doc="" />
            <variable name="object" doc="" />
            <variable name="cache" doc="" />
            <variable name="shape" doc="" />
          </scope>
          <scope name="Cube" ilk="function" doc="a generic triangle (this is a helper object, which is defined for convenience)">
            <scope name="setObject" ilk="function" signature="setObject(newObject)" doc="setup the object">
              <variable ilk="argument" name="newObject" citdl="Array" doc="of points || Object" />
            </scope>
            <scope name="render" ilk="function" signature="render(camera)" doc="">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope name="draw" ilk="function" signature="draw(lighting)" doc="">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope name="getZOrder" ilk="function" doc="" />
            <variable name="object" doc="" />
            <variable name="cache" doc="" />
            <variable name="shape" doc="" />
            <variable name="polygons" doc="" />
          </scope>
          <scope name="Cylinder" ilk="function" doc="">
            <scope name="render" ilk="function" signature="render(camera)" doc="">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope name="draw" ilk="function" doc="" />
            <scope name="fillStyle" />
            <variable name="cache" doc="" />
            <variable name="shape" doc="" />
            <variable name="object" doc="" />
          </scope>
          <scope name="Viewport" ilk="function" doc="a viewport/container for 3D objects, which knows the camera and lightings">
            <scope name="setCameraTransform" ilk="function" signature="setCameraTransform(matrix)" doc="sets a transformation matrix" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="applyCameraRightTransform" ilk="function" signature="applyCameraRightTransform(matrix)" doc="multiplies the existing matrix with an argument on right side (this.matrix * matrix)" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="applyCameraLeftTransform" ilk="function" signature="applyCameraLeftTransform(matrix)" doc="multiplies the existing matrix with an argument on left side (matrix * this.matrix)" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="applyCameraTransform" ilk="function" signature="applyCameraTransform(matrix)" doc="a shortcut for dojox.gfx3d.Object.applyRightTransform" returns="self" attributes="private">
              <variable ilk="argument" name="matrix" citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)" />
            </scope>
            <scope name="setLights" ilk="function" signature="setLights(lights,ambient,specular)" doc="set the lights">
              <variable ilk="argument" name="lights" citdl="Array || Object" doc="Array an array of light object or lights object" />
              <variable ilk="argument" name="ambient" citdl="Color, optional" doc="Color an ambient object" />
              <variable ilk="argument" name="specular" citdl="Color, optional" doc="Color an specular object" />
              <scope name="lights" citdl="Array" doc="an array of light object or lights object" />
            </scope>
            <scope name="addLights" ilk="function" signature="addLights(lights)" doc="add new light/lights to the viewport.">
              <variable ilk="argument" name="lights" citdl="Array" doc="|| light object: light object(s)" />
            </scope>
            <scope name="addTodo" ilk="function" signature="addTodo(newObject)" doc="">
              <variable ilk="argument" name="newObject" />
            </scope>
            <scope name="invalidate" ilk="function" doc="" />
            <scope name="setDimensions" ilk="function" signature="setDimensions(dim)" doc="">
              <variable ilk="argument" name="dim" />
            </scope>
            <scope name="render" ilk="function" doc="iterate all children and call their render callback function." />
            <variable name="camera" doc="" />
            <variable name="lights" doc="" />
            <variable name="lighting" doc="" />
            <variable name="deep" doc="" />
            <variable name="todos" doc="" />
            <variable name="dimension" doc="" />
            <variable name="objects" doc="" />
            <variable name="renderer" doc="" />
            <variable name="schedule" doc="" />
            <variable name="draw" doc="" />
            <scope name="nodeType" doc="" />
          </scope>
          <variable name="_creators" citdl="Object" doc="object creators" attributes="private">
            <scope name="createEdges" ilk="function" signature="createEdges(edges,style)" doc="creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)" returns="dojox.gfx3d.Edge" attributes="private">
              <variable ilk="argument" name="edges" />
              <variable ilk="argument" name="style" />
            </scope>
            <scope name="createTriangles" ilk="function" signature="createTriangles(tris,style)" doc="creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)" returns="dojox.gfx3d.Edge" attributes="private">
              <variable ilk="argument" name="tris" />
              <variable ilk="argument" name="style" />
            </scope>
            <scope name="createQuads" ilk="function" signature="createQuads(quads,style)" doc="creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)" returns="dojox.gfx3d.Edge" attributes="private">
              <variable ilk="argument" name="quads" />
              <variable ilk="argument" name="style" />
            </scope>
            <scope name="createPolygon" ilk="function" signature="createPolygon(points)" doc="creates an triangle object" returns="dojox.gfx3d.Polygon" attributes="private">
              <variable ilk="argument" name="points" citdl="Array" doc="of points || Object" />
            </scope>
            <scope name="createOrbit" ilk="function" signature="createOrbit(orbit)" doc="creates an triangle object points: Array of points || Object" returns="dojox.gfx3d.Cube" attributes="private">
              <variable ilk="argument" name="orbit" />
            </scope>
            <scope name="createCube" ilk="function" signature="createCube(cube)" doc="creates an triangle object points: Array of points || Object" returns="dojox.gfx3d.Cube" attributes="private">
              <variable ilk="argument" name="cube" />
            </scope>
            <scope name="createCylinder" ilk="function" signature="createCylinder(cylinder)" doc="creates an triangle object points: Array of points || Object" returns="dojox.gfx3d.Cube" attributes="private">
              <variable ilk="argument" name="cylinder" />
            </scope>
            <scope name="createPath3d" ilk="function" signature="createPath3d(path)" doc="creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)" returns="dojox.gfx3d.Edge" attributes="private">
              <variable ilk="argument" name="path" />
            </scope>
            <scope name="createScene" ilk="function" doc="creates an triangle object line: Object: a triangle object (see dojox.gfx3d.defaultPath)" returns="dojox.gfx3d.Scene" attributes="private" />
            <scope name="create3DObject" ilk="function" signature="create3DObject(objectType,rawObject,style)" doc="creates an instance of the passed shapeType class shapeType: Function: a class constructor to create an instance of rawShape: Object: properties to be passed in to the classes &amp;amp;quot;setShape&amp;amp;quot; method" returns="dojox.gfx3d.Object" attributes="private">
              <variable ilk="argument" name="objectType" />
              <variable ilk="argument" name="rawObject" />
              <variable ilk="argument" name="style" />
            </scope>
            <scope name="adopt" ilk="function" signature="adopt(obj)" doc="adds a shape to the list shape: dojox.gfx.Shape: a shape">
              <variable ilk="argument" name="obj" />
            </scope>
            <scope name="abandon" ilk="function" signature="abandon(obj,silently)" doc="removes a shape from the list" returns="self" attributes="private">
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="silently" citdl="Boolean" doc="if true, do not redraw a picture yet" />
            </scope>
            <scope name="setScheduler" ilk="function" signature="setScheduler(scheduler)" doc="">
              <variable ilk="argument" name="scheduler" />
              <variable name="schedule" doc="" />
            </scope>
            <scope name="setDrawer" ilk="function" signature="setDrawer(drawer)" doc="">
              <variable ilk="argument" name="drawer" />
              <variable name="draw" doc="" />
            </scope>
          </variable>
          <variable name="object" citdl="Object" doc="" />
          <variable name="scheduler" citdl="Object" doc="">
            <scope name="BinarySearchTree" ilk="function" signature="BinarySearchTree(obj,outline)" doc="build the binary search tree, using binary space partition algorithm. The idea is for any polygon, for example, (a, b, c), the space is divided by the plane into two space: plus and minus.  for any arbitary vertex p, if(p - a) dotProduct n = 0, p is inside the plane, &amp;amp;gt; 0, p is in the plus space, vice versa for minus space. n is the normal vector that is perpendicular the plate, defined as: n = ( b - a) crossProduct ( c - a )  in this implementation, n is declared as normal, ,a is declared as orient.">
              <variable ilk="argument" name="obj" citdl="object" doc="dojox.gfx3d.Object" />
              <variable ilk="argument" name="outline" />
              <scope name="add" ilk="function" signature="add(obj,outline)" doc="">
                <variable ilk="argument" name="obj" />
                <variable ilk="argument" name="outline" />
              </scope>
              <scope name="iterate" ilk="function" signature="iterate(outline)" doc="">
                <variable ilk="argument" name="outline" />
              </scope>
              <variable name="minus" doc="" />
              <variable name="plus" doc="" />
              <variable name="object" doc="" />
              <variable name="orient" doc="" />
              <variable name="normal" doc="" />
            </scope>
            <scope name="zOrder" ilk="function" signature="zOrder(buffer,order)" doc="">
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="order" />
            </scope>
            <scope name="bsp" ilk="function" signature="bsp(buffer,outline)" doc="">
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="outline" />
            </scope>
            <scope name="order" ilk="function" signature="order(it)" doc="">
              <variable ilk="argument" name="it" />
            </scope>
            <scope name="outline" ilk="function" signature="outline(it)" doc="">
              <variable ilk="argument" name="it" />
            </scope>
          </variable>
          <scope name="drawer">
            <scope name="conservative" ilk="function" signature="conservative(todos,objects,viewport)" doc="">
              <variable ilk="argument" name="todos" />
              <variable ilk="argument" name="objects" />
              <variable ilk="argument" name="viewport" />
            </scope>
            <scope name="chart" ilk="function" signature="chart(todos,objects,viewport)" doc="">
              <variable ilk="argument" name="todos" />
              <variable ilk="argument" name="objects" />
              <variable ilk="argument" name="viewport" />
            </scope>
          </scope>
          <variable name="vector" citdl="Object" doc="">
            <scope name="sum" ilk="function" doc="sum of the vectors" />
            <scope name="center" ilk="function" doc="center of the vectors" />
            <scope name="substract" ilk="function" signature="substract(a,b)" doc="">
              <variable ilk="argument" name="a" citdl="Pointer" />
              <variable ilk="argument" name="b" citdl="Pointer" />
            </scope>
            <scope name="_crossProduct" ilk="function" signature="_crossProduct(x,y,z,u,v,w)" doc="applies a cross product of two vectorss, (x, y, z) and (u, v, w)" returns="Object" attributes="private">
              <variable ilk="argument" name="x" citdl="Number" doc="an x coordinate of a point" />
              <variable ilk="argument" name="y" citdl="Number" doc="a y coordinate of a point" />
              <variable ilk="argument" name="z" citdl="Number" doc="a z coordinate of a point" />
              <variable ilk="argument" name="u" citdl="Number" doc="an x coordinate of a point" />
              <variable ilk="argument" name="v" citdl="Number" doc="a y coordinate of a point" />
              <variable ilk="argument" name="w" citdl="Number" doc="a z coordinate of a point" />
            </scope>
            <scope name="crossProduct" ilk="function" signature="crossProduct(a,b,c,d,e,f)" doc="applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied" returns="Object" attributes="private">
              <variable ilk="argument" name="a" citdl="Number||Point" doc="Number an x coordinate of a point" />
              <variable ilk="argument" name="b" citdl="Number||Point" doc="Number a y coordinate of a point" />
              <variable ilk="argument" name="c" citdl="Number, optional" doc="Number a z coordinate of a point" />
              <variable ilk="argument" name="d" citdl="Number, optional" doc="Number an x coordinate of a point" />
              <variable ilk="argument" name="e" citdl="Number, optional" doc="Number a y coordinate of a point" />
              <variable ilk="argument" name="f" citdl="Number, optional" doc="Number a z coordinate of a point" />
            </scope>
            <scope name="_dotProduct" ilk="function" signature="_dotProduct(x,y,z,u,v,w)" doc="applies a cross product of two vectorss, (x, y, z) and (u, v, w)" returns="Number" attributes="private">
              <variable ilk="argument" name="x" citdl="Number" doc="an x coordinate of a point" />
              <variable ilk="argument" name="y" citdl="Number" doc="a y coordinate of a point" />
              <variable ilk="argument" name="z" citdl="Number" doc="a z coordinate of a point" />
              <variable ilk="argument" name="u" citdl="Number" doc="an x coordinate of a point" />
              <variable ilk="argument" name="v" citdl="Number" doc="a y coordinate of a point" />
              <variable ilk="argument" name="w" citdl="Number" doc="a z coordinate of a point" />
            </scope>
            <scope name="dotProduct" ilk="function" signature="dotProduct(a,b,c,d,e,f)" doc="applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied" returns="Object" attributes="private">
              <variable ilk="argument" name="a" citdl="Number||Point" doc="Number an x coordinate of a point" />
              <variable ilk="argument" name="b" citdl="Number||Point" doc="Number a y coordinate of a point" />
              <variable ilk="argument" name="c" citdl="Number, optional" doc="Number a z coordinate of a point" />
              <variable ilk="argument" name="d" citdl="Number, optional" doc="Number an x coordinate of a point" />
              <variable ilk="argument" name="e" citdl="Number, optional" doc="Number a y coordinate of a point" />
              <variable ilk="argument" name="f" citdl="Number, optional" doc="Number a z coordinate of a point" />
            </scope>
            <scope name="normalize" ilk="function" signature="normalize(a,b,c)" doc="find the normal of the implicit surface">
              <variable ilk="argument" name="a" citdl="Point||Array" doc="Object a point" />
              <variable ilk="argument" name="b" citdl="Point" doc="Object a point" />
              <variable ilk="argument" name="c" citdl="Point" doc="Object a point" />
            </scope>
          </variable>
        </variable>
        <variable name="grid" citdl="Object" doc="An advanced Grid widget with virtual scrolling, cell editing, and much more">
          <scope name="DataSelection" ilk="function" doc="">
            <scope name="getFirstSelected" ilk="function" doc="" />
            <scope name="getNextSelected" ilk="function" signature="getNextSelected(inPrev)" doc="">
              <variable ilk="argument" name="inPrev" />
            </scope>
            <scope name="getSelected" ilk="function" doc="" />
            <scope name="addToSelection" ilk="function" signature="addToSelection(inItemOrIndex)" doc="">
              <variable ilk="argument" name="inItemOrIndex" />
            </scope>
            <scope name="deselect" ilk="function" signature="deselect(inItemOrIndex)" doc="">
              <variable ilk="argument" name="inItemOrIndex" />
            </scope>
            <scope name="deselectAll" ilk="function" signature="deselectAll(inItemOrIndex)" doc="">
              <variable ilk="argument" name="inItemOrIndex" />
            </scope>
            <variable name="mode" doc="" />
          </scope>
          <scope name="Grid" doc="" />
          <scope name="Selection" ilk="function" doc="Manages row selection for grid. Owned by grid and used internally for selection. Override to implement custom selection." signature="Selection(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <variable name="mode" doc="" />
            <variable name="selected" doc="" />
            <variable name="updating" doc="" />
            <variable name="selectedIndex" doc="" />
            <scope name="setMode" ilk="function" signature="setMode(mode)" doc="">
              <variable ilk="argument" name="mode" />
            </scope>
            <scope name="onCanSelect" ilk="function" signature="onCanSelect(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="onCanDeselect" ilk="function" signature="onCanDeselect(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="onSelected" ilk="function" signature="onSelected(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="onDeselected" ilk="function" signature="onDeselected(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="onChanging" ilk="function" doc="" />
            <scope name="onChanged" ilk="function" doc="" />
            <scope name="isSelected" ilk="function" signature="isSelected(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="getFirstSelected" ilk="function" doc="" />
            <scope name="getNextSelected" ilk="function" signature="getNextSelected(inPrev)" doc="">
              <variable ilk="argument" name="inPrev" />
            </scope>
            <scope name="getSelected" ilk="function" doc="" />
            <scope name="getSelectedCount" ilk="function" doc="" />
            <scope name="_beginUpdate" ilk="function" attributes="private" doc="" />
            <scope name="_endUpdate" ilk="function" attributes="private" doc="" />
            <scope name="select" ilk="function" signature="select(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="addToSelection" ilk="function" signature="addToSelection(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="deselect" ilk="function" signature="deselect(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="setSelected" ilk="function" signature="setSelected(inIndex,inSelect)" doc="">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inSelect" />
            </scope>
            <scope name="toggleSelect" ilk="function" signature="toggleSelect(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="_range" ilk="function" signature="_range(inFrom,inTo,func)" attributes="private" doc="">
              <variable ilk="argument" name="inFrom" />
              <variable ilk="argument" name="inTo" />
              <variable ilk="argument" name="func" />
            </scope>
            <scope name="selectRange" ilk="function" signature="selectRange(inFrom,inTo)" doc="">
              <variable ilk="argument" name="inFrom" />
              <variable ilk="argument" name="inTo" />
            </scope>
            <scope name="deselectRange" ilk="function" signature="deselectRange(inFrom,inTo)" doc="">
              <variable ilk="argument" name="inFrom" />
              <variable ilk="argument" name="inTo" />
            </scope>
            <scope name="insert" ilk="function" signature="insert(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="remove" ilk="function" signature="remove(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="deselectAll" ilk="function" signature="deselectAll(inExcept)" doc="">
              <variable ilk="argument" name="inExcept" />
            </scope>
            <scope name="clickSelect" ilk="function" signature="clickSelect(inIndex,inCtrlKey,inShiftKey)" doc="">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inCtrlKey" />
              <variable ilk="argument" name="inShiftKey" />
            </scope>
            <scope name="clickSelectEvent" ilk="function" signature="clickSelectEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="clear" ilk="function" doc="" />
            <variable name="grid" doc="" />
          </scope>
          <variable name="VirtualGrid" citdl="Object" doc="" />
          <scope name="_EditManager" ilk="function" doc="Controls grid cell editing process. Owned by grid and used internally for editing." signature="_EditManager(inGrid)" attributes="private">
            <variable ilk="argument" name="inGrid" citdl="dojox.Grid" doc="The dojox.Grid this editor should be attached to" />
            <variable name="info" citdl="Object" doc="">
              <variable name="rowIndex" doc="" />
            </variable>
            <scope name="destroy" ilk="function" doc="" />
            <scope name="cellFocus" ilk="function" signature="cellFocus(inCell,inRowIndex)" doc="Invoke editing when cell is focused">
              <variable ilk="argument" name="inCell" citdl="cell" doc="object Grid cell object" />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
            </scope>
            <scope name="rowClick" ilk="function" signature="rowClick(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="styleRow" ilk="function" signature="styleRow(inRow)" doc="">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope name="dispatchEvent" ilk="function" signature="dispatchEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="isEditing" ilk="function" doc="Indicates editing state of the grid.">
              <variable name="return_summary" />
            </scope>
            <scope name="isEditCell" ilk="function" signature="isEditCell(inRowIndex,inCellIndex)" doc="Indicates if the given cell is being edited.">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
              <variable ilk="argument" name="inCellIndex" citdl="Integer" doc="Grid cell index" />
              <variable name="return_summary" />
            </scope>
            <scope name="isEditRow" ilk="function" signature="isEditRow(inRowIndex)" doc="Indicates if the given row is being edited.">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
              <variable name="return_summary" />
            </scope>
            <scope name="setEditCell" ilk="function" signature="setEditCell(inCell,inRowIndex)" doc="Set the given cell to be edited">
              <variable ilk="argument" name="inCell" citdl="Object" doc="Grid cell object" />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
            </scope>
            <scope name="_focusEditor" ilk="function" signature="_focusEditor(inCell,inRowIndex)" attributes="private" doc="">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="focusEditor" ilk="function" doc="" />
            <scope name="_boomerangWindow" attributes="private" doc="" />
            <scope name="_shouldCatchBoomerang" ilk="function" attributes="private" doc="" />
            <scope name="_boomerangFocus" ilk="function" attributes="private" doc="" />
            <scope name="_doCatchBoomerang" ilk="function" attributes="private" doc="" />
            <scope name="start" ilk="function" signature="start(inCell,inRowIndex,inEditing)" doc="">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inEditing" />
            </scope>
            <scope name="_editorDo" ilk="function" signature="_editorDo(inMethod)" attributes="private" doc="">
              <variable ilk="argument" name="inMethod" />
            </scope>
            <scope name="editorApply" ilk="function" doc="" />
            <scope name="editorCancel" ilk="function" doc="" />
            <scope name="applyCellEdit" ilk="function" signature="applyCellEdit(inValue,inCell,inRowIndex)" doc="">
              <variable ilk="argument" name="inValue" />
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="applyRowEdit" ilk="function" doc="" />
            <scope name="apply" ilk="function" doc="Apply a grid edit" />
            <scope name="cancel" ilk="function" doc="Cancel a grid edit" />
            <scope name="save" ilk="function" signature="save(inRowIndex,inView)" doc="Save the grid editing state">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
              <variable ilk="argument" name="inView" citdl="Object" doc="Grid view" />
            </scope>
            <scope name="restore" ilk="function" signature="restore(inView,inRowIndex)" doc="Restores the grid editing state">
              <variable ilk="argument" name="inView" citdl="Object" doc="Grid view" />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
            </scope>
            <variable name="_catchBoomerang" attributes="private" doc="" />
            <variable name="grid" doc="" />
            <variable name="connections" doc="" />
          </scope>
          <scope name="_Events" ilk="function" doc="_Grid mixin that provides default implementations for grid events." attributes="private">
            <scope name="cellOverClass" citdl="String" doc="css class to apply to grid cells over which the cursor is placed." />
            <scope name="onKeyEvent" ilk="function" signature="onKeyEvent(e)" doc="top level handler for Key Events">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onContentEvent" ilk="function" signature="onContentEvent(e)" doc="Top level handler for Content events">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onHeaderEvent" ilk="function" signature="onHeaderEvent(e)" doc="Top level handler for header events">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onStyleRow" ilk="function" signature="onStyleRow(inRow)" doc="Perform row styling on a given row. Called whenever row styling is updated.">
              <variable ilk="argument" name="inRow" citdl="Object" doc="containing row state information: selected, true if the row is selcted; over: true of the mouse is over the row; odd: true if the row is odd. Use customClasses and customStyles to control row css classes and styles; both properties are strings." />
            </scope>
            <scope name="onKeyDown" ilk="function" signature="onKeyDown(e)" doc="Grid key event handler. By default enter begins editing and applies edits, escape cancels an edit, tab, shift-tab, and arrow keys move grid cell focus.">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onMouseOver" ilk="function" signature="onMouseOver(e)" doc="Event fired when mouse is over the grid.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onMouseOut" ilk="function" signature="onMouseOut(e)" doc="Event fired when mouse moves out of the grid.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onMouseDown" ilk="function" signature="onMouseDown(e)" doc="Event fired when mouse is down inside grid.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onMouseOverRow" ilk="function" signature="onMouseOverRow(e)" doc="Event fired when mouse is over any row (data or header).">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onMouseOutRow" ilk="function" signature="onMouseOutRow(e)" doc="Event fired when mouse moves out of any row (data or header).">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onMouseDownRow" ilk="function" signature="onMouseDownRow(e)" doc="Event fired when mouse is down inside grid row">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellMouseOver" ilk="function" signature="onCellMouseOver(e)" doc="Event fired when mouse is over a cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellMouseOut" ilk="function" signature="onCellMouseOut(e)" doc="Event fired when mouse moves out of a cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellMouseDown" ilk="function" signature="onCellMouseDown(e)" doc="Event fired when mouse is down in a header cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellClick" ilk="function" signature="onCellClick(e)" doc="Event fired when a cell is clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellDblClick" ilk="function" signature="onCellDblClick(e)" doc="Event fired when a cell is double-clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellContextMenu" ilk="function" signature="onCellContextMenu(e)" doc="Event fired when a cell context menu is accessed via mouse right click.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellFocus" ilk="function" signature="onCellFocus(inCell,inRowIndex)" doc="Event fired when a cell receives focus.">
              <variable ilk="argument" name="inCell" citdl="Object" doc="Cell object containing properties of the grid column." />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onRowClick" ilk="function" signature="onRowClick(e)" doc="Event fired when a row is clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onRowDblClick" ilk="function" signature="onRowDblClick(e)" doc="Event fired when a row is double clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onRowMouseOver" ilk="function" signature="onRowMouseOver(e)" doc="Event fired when mouse moves over a data row.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onRowMouseOut" ilk="function" signature="onRowMouseOut(e)" doc="Event fired when mouse moves out of a data row.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onRowMouseDown" ilk="function" signature="onRowMouseDown(e)" doc="Event fired when mouse is down in a row.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onRowContextMenu" ilk="function" signature="onRowContextMenu(e)" doc="Event fired when a row context menu is accessed via mouse right click.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderMouseOver" ilk="function" signature="onHeaderMouseOver(e)" doc="Event fired when mouse moves over the grid header.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderMouseOut" ilk="function" signature="onHeaderMouseOut(e)" doc="Event fired when mouse moves out of the grid header.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellMouseOver" ilk="function" signature="onHeaderCellMouseOver(e)" doc="Event fired when mouse moves over a header cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellMouseOut" ilk="function" signature="onHeaderCellMouseOut(e)" doc="Event fired when mouse moves out of a header cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellMouseDown" ilk="function" signature="onHeaderCellMouseDown(e)" doc="Event fired when mouse is down in a header cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderClick" ilk="function" signature="onHeaderClick(e)" doc="Event fired when the grid header is clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellClick" ilk="function" signature="onHeaderCellClick(e)" doc="Event fired when a header cell is clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderDblClick" ilk="function" signature="onHeaderDblClick(e)" doc="Event fired when the grid header is double clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellDblClick" ilk="function" signature="onHeaderCellDblClick(e)" doc="Event fired when a header cell is double clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellContextMenu" ilk="function" signature="onHeaderCellContextMenu(e)" doc="Event fired when a header cell context menu is accessed via mouse right click.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderContextMenu" ilk="function" signature="onHeaderContextMenu(e)" doc="Event fired when the grid header context menu is accessed via mouse right click.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onStartEdit" ilk="function" signature="onStartEdit(inCell,inRowIndex)" doc="Event fired when editing is started for a given grid cell">
              <variable ilk="argument" name="inCell" citdl="Object" doc="Cell object containing properties of the grid column." />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onApplyCellEdit" ilk="function" signature="onApplyCellEdit(inValue,inRowIndex,inFieldIndex)" doc="Event fired when editing is applied for a given grid cell">
              <variable ilk="argument" name="inValue" citdl="String" doc="Value from cell editor" />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
              <variable ilk="argument" name="inFieldIndex" citdl="Integer" doc="Index in the grid's data store" />
            </scope>
            <scope name="onCancelEdit" ilk="function" signature="onCancelEdit(inRowIndex)" doc="Event fired when editing is cancelled for a given grid cell">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onApplyEdit" ilk="function" signature="onApplyEdit(inRowIndex)" doc="Event fired when editing is applied for a given grid row">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onCanSelect" ilk="function" signature="onCanSelect(inRowIndex)" doc="Event to determine if a grid row may be selected">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
              <variable name="return_summary" />
            </scope>
            <scope name="onCanDeselect" ilk="function" signature="onCanDeselect(inRowIndex)" doc="Event to determine if a grid row may be deselected">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
              <variable name="return_summary" />
            </scope>
            <scope name="onSelected" ilk="function" signature="onSelected(inRowIndex)" doc="Event fired when a grid row is selected">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onDeselected" ilk="function" signature="onDeselected(inRowIndex)" doc="Event fired when a grid row is deselected">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onSelectionChanged" ilk="function" doc="" />
          </scope>
          <scope name="_FocusManager" ilk="function" doc="Controls grid cell focus. Owned by grid and used internally for focusing. Note: grid cell actually receives keyboard input only when cell is being edited." signature="_FocusManager(inGrid)" attributes="private">
            <variable ilk="argument" name="inGrid" />
            <scope name="destroy" ilk="function" doc="" />
            <variable name="_colHeadNode" attributes="private" doc="" />
            <variable name="tabbingOut" doc="" />
            <scope name="focusClass" doc="" />
            <variable name="focusView" doc="" />
            <scope name="initFocusView" ilk="function" doc="" />
            <scope name="isFocusCell" ilk="function" signature="isFocusCell(inCell,inRowIndex)" doc="states if the given cell is focused">
              <variable ilk="argument" name="inCell" citdl="object" doc="grid cell object" />
              <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              <variable name="return_summary" />
            </scope>
            <scope name="isLastFocusCell" ilk="function" doc="" />
            <scope name="isFirstFocusCell" ilk="function" doc="" />
            <scope name="isNoFocusCell" ilk="function" doc="" />
            <scope name="isNavHeader" ilk="function" doc="states whether currently navigating among column headers.">
              <variable name="return_summary" />
            </scope>
            <scope name="getHeaderIndex" ilk="function" doc="if one of the column headers currently has focus, return its index.">
              <variable name="return_summary" />
            </scope>
            <scope name="_focusifyCellNode" ilk="function" signature="_focusifyCellNode(inBork)" attributes="private" doc="">
              <variable ilk="argument" name="inBork" />
            </scope>
            <scope name="_initColumnHeaders" ilk="function" attributes="private" doc="" />
            <scope name="_findHeaderCells" ilk="function" attributes="private" doc="" />
            <scope name="scrollIntoView" ilk="function" doc="" />
            <scope name="_scrollInfo" ilk="function" signature="_scrollInfo(cell,domNode)" attributes="private" doc="">
              <variable ilk="argument" name="cell" />
              <variable ilk="argument" name="domNode" />
            </scope>
            <scope name="_scrollHeader" ilk="function" signature="_scrollHeader(currentIdx)" attributes="private" doc="">
              <variable ilk="argument" name="currentIdx" />
            </scope>
            <scope name="styleRow" ilk="function" signature="styleRow(inRow)" doc="">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope name="setFocusIndex" ilk="function" signature="setFocusIndex(inRowIndex,inCellIndex)" doc="focuses the given grid cell">
              <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              <variable ilk="argument" name="inCellIndex" citdl="int" doc="grid cell index" />
            </scope>
            <scope name="setFocusCell" ilk="function" signature="setFocusCell(inCell,inRowIndex)" doc="focuses the given grid cell">
              <variable ilk="argument" name="inCell" citdl="object" doc="grid cell object" />
              <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
            </scope>
            <scope name="next" ilk="function" doc="focus next grid cell" />
            <scope name="previous" ilk="function" doc="focus previous grid cell" />
            <scope name="move" ilk="function" signature="move(inRowDelta,inColDelta)" doc="focus grid cell or column header based on position relative to current focus">
              <variable ilk="argument" name="inRowDelta" citdl="int" doc="vertical distance from current focus" />
              <variable ilk="argument" name="inColDelta" citdl="int" doc="horizontal distance from current focus" />
            </scope>
            <scope name="previousKey" ilk="function" signature="previousKey(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="nextKey" ilk="function" signature="nextKey(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="tabOut" ilk="function" signature="tabOut(inFocusNode)" doc="">
              <variable ilk="argument" name="inFocusNode" />
            </scope>
            <scope name="focusGridView" ilk="function" doc="" />
            <scope name="focusGrid" ilk="function" signature="focusGrid(inSkipFocusCell)" doc="">
              <variable ilk="argument" name="inSkipFocusCell" />
            </scope>
            <scope name="focusHeader" ilk="function" doc="" />
            <scope name="doFocus" ilk="function" signature="doFocus(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doBlur" ilk="function" signature="doBlur(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doBlurHeader" ilk="function" signature="doBlurHeader(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doLastNodeFocus" ilk="function" signature="doLastNodeFocus(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doLastNodeBlur" ilk="function" signature="doLastNodeBlur(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doColHeaderFocus" ilk="function" signature="doColHeaderFocus(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doColHeaderBlur" ilk="function" signature="doColHeaderBlur(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="cell" doc="">
              <scope name="view">
                <scope name="scrollboxNode">
                  <variable name="scrollLeft" doc="" />
                </scope>
              </scope>
            </variable>
            <variable name="rowIndex" doc="" />
            <variable name="grid" doc="" />
            <variable name="_connects" attributes="private" doc="" />
          </scope>
          <scope name="_Grid" ilk="function" doc="A grid widget with virtual scrolling, cell editing, complex rows, sorting, fixed columns, sizeable columns, etc." attributes="private">
            <scope name="templatePath" doc="" />
            <scope name="classTag" citdl="String" doc="CSS class applied to the grid's domNode" />
            <variable name="get" ilk="function" signature="get(inRowIndex)" doc="Default data getter.">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Row for which to provide data" />
              <variable name="return_summary" />
            </variable>
            <variable name="rowCount" citdl="settings" doc="Integer Number of rows to display." />
            <variable name="keepRows" citdl="Integer" doc="Number of rows to keep in the rendering cache." />
            <scope name="rowsPerPage" citdl="Integer" doc="Number of rows to render at a time." />
            <scope name="autoWidth" citdl="Boolean" doc="If autoWidth is true, grid width is automatically set to fit the data." />
            <variable name="autoHeight" citdl="Boolean|Integer" doc="If autoHeight is true, grid height is automatically set to fit the data. If it is an integer, the height will be automatically set to fit the data if there are fewer than that many rows - and the height will be set to show that many rows if there are more" />
            <scope name="autoRender" citdl="Boolean" doc="If autoRender is true, grid will render itself after initialization." />
            <scope name="defaultHeight" citdl="String" doc="default height of the grid, measured in any valid css unit." />
            <variable name="height" citdl="String" doc="explicit height of the grid, measured in any valid css unit. This will be populated (and overridden) if the height: css attribute exists on the source node." />
            <scope name="structure" citdl="Object|String" doc="View layout defintion. Can be set to a layout object, or to the (string) name of a layout object." />
            <scope name="elasticView" citdl="Integer" doc="Override defaults and make the indexed grid view elastic, thus filling available horizontal space." />
            <scope name="singleClickEdit" citdl="boolean" doc="Single-click starts editing. Default is double-click" />
            <scope name="selectionMode" citdl="String" doc="Set the selection mode of grid's Selection. Value must be 'single', 'multiple', or 'extended'. Default is 'extended'." />
            <scope name="rowSelector" citdl="Boolean|String" doc="If set to true, will add a row selector view to this grid. If set to a CSS width, will add a row selector of that width to this grid." />
            <scope name="columnReordering" citdl="Boolean" doc="If set to true, will add drag and drop reordering to views with one row of columns." />
            <variable name="headerMenu" citdl="dijit.Menu" doc="If set to a dijit.Menu, will use this as a context menu for the grid headers." />
            <scope name="placeholderLabel" citdl="String" doc="Label of placeholders to search for in the header menu to replace with column toggling menu items." />
            <variable name="_click" attributes="private" doc="" />
            <variable name="loadingMessage" citdl="String" doc="Message that shows while the grid is loading" />
            <variable name="errorMessage" citdl="String" doc="Message that shows when the grid encounters an error loading" />
            <variable name="noDataMessage" citdl="String" doc="Message that shows if the grid has no data" />
            <variable name="sortInfo" doc="" />
            <scope name="themeable" doc="" />
            <variable name="_placeholders" attributes="private" doc="" />
            <scope name="buildRendering" ilk="function" doc="" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <scope name="_setAutoHeightAttr" ilk="function" signature="_setAutoHeightAttr(ah,skipRender)" attributes="private" doc="">
              <variable ilk="argument" name="ah" />
              <variable ilk="argument" name="skipRender" />
            </scope>
            <variable name="styleChanged" ilk="function" doc="" />
            <scope name="_styleChanged" ilk="function" attributes="private" doc="" />
            <scope name="textSizeChanged" ilk="function" doc="" />
            <scope name="_textSizeChanged" ilk="function" attributes="private" doc="" />
            <scope name="sizeChange" ilk="function" doc="" />
            <scope name="renderOnIdle" ilk="function" doc="" />
            <scope name="createManagers" ilk="function" doc="create grid managers for various tasks including rows, focus, selection, editing" />
            <scope name="createSelection" ilk="function" doc="" />
            <scope name="createScroller" ilk="function" doc="Creates a new virtual scroller" />
            <scope name="createLayout" ilk="function" doc="Creates a new Grid layout" />
            <scope name="onMoveColumn" ilk="function" doc="" />
            <scope name="createViews" ilk="function" doc="" />
            <scope name="createView" ilk="function" signature="createView(inClass,idx)" doc="">
              <variable ilk="argument" name="inClass" />
              <variable ilk="argument" name="idx" />
            </scope>
            <scope name="buildViews" ilk="function" doc="" />
            <scope name="setStructure" ilk="function" signature="setStructure(inStructure)" doc="Install a new structure and rebuild the grid.">
              <variable ilk="argument" name="inStructure" citdl="Object" doc="Structure object defines the grid layout and provides various options for grid views and columns" />
            </scope>
            <scope name="getColumnTogglingItems" ilk="function" doc="" />
            <scope name="setHeaderMenu" ilk="function" signature="setHeaderMenu(menu)" doc="">
              <variable ilk="argument" name="menu" />
            </scope>
            <scope name="setupHeaderMenu" ilk="function" doc="" />
            <scope name="_fetch" ilk="function" signature="_fetch(start)" attributes="private" doc="">
              <variable ilk="argument" name="start" />
            </scope>
            <scope name="getItem" ilk="function" signature="getItem(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="showMessage" ilk="function" signature="showMessage(message)" doc="">
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="_structureChanged" ilk="function" attributes="private" doc="" />
            <scope name="hasLayout" ilk="function" doc="" />
            <scope name="resize" ilk="function" signature="resize(changeSize,resultSize)" doc="Update the grid's rendering dimensions and resize it sizeBox: Object? {w: int, h: int, l: int, t: int}">
              <variable ilk="argument" name="changeSize" />
              <variable ilk="argument" name="resultSize" />
            </scope>
            <scope name="_getPadBorder" ilk="function" attributes="private" doc="" />
            <scope name="_getHeaderHeight" ilk="function" attributes="private" doc="" />
            <scope name="_resize" ilk="function" attributes="private" doc="" />
            <scope name="adaptWidth" ilk="function" doc="" />
            <scope name="adaptHeight" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="render" ilk="function" doc="Render the grid, headers, and views. Edit and scrolling states are reset. To retain edit and scrolling states, see Update." />
            <scope name="_render" ilk="function" attributes="private" doc="" />
            <scope name="prerender" ilk="function" doc="" />
            <scope name="postrender" ilk="function" doc="" />
            <scope name="postresize" ilk="function" doc="" />
            <scope name="renderRow" ilk="function" signature="renderRow(inRowIndex,inNodes)" doc="private, used internally to render rows">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="rowRemoved" ilk="function" signature="rowRemoved(inRowIndex)" doc="private, used internally to remove rows">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <variable name="invalidated" doc="">
              <variable name="all" doc="" />
              <variable name="rowCount" doc="" />
            </variable>
            <variable name="updating" doc="" />
            <scope name="beginUpdate" ilk="function" doc="Use to make multiple changes to rows while queueing row updating. NOTE: not currently supporting nested begin/endUpdate calls" />
            <scope name="endUpdate" ilk="function" doc="Use after calling beginUpdate to render any changes made to rows." />
            <scope name="defaultUpdate" ilk="function" doc="" />
            <variable name="update" ilk="function" doc="Update the grid, retaining edit and scrolling states." />
            <scope name="updateRow" ilk="function" signature="updateRow(inRowIndex)" doc="Render a single row.">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the row to render" />
            </scope>
            <scope name="updateRows" ilk="function" signature="updateRows(startIndex,howMany)" doc="Render consecutive rows at once.">
              <variable ilk="argument" name="startIndex" citdl="Integer" doc="Index of the starting row to render" />
              <variable ilk="argument" name="howMany" citdl="Integer" doc="How many rows to update." />
            </scope>
            <scope name="updateRowCount" ilk="function" signature="updateRowCount(inRowCount)" doc="Change the number of rows.">
              <variable ilk="argument" name="inRowCount" citdl="int" doc="Number of rows in the grid." />
            </scope>
            <scope name="updateRowStyles" ilk="function" signature="updateRowStyles(inRowIndex)" doc="Update the styles for a row after it's state has changed.">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="rowHeightChanged" ilk="function" signature="rowHeightChanged(inRowIndex)" doc="Update grid when the height of a row has changed. Row height is handled automatically as rows are rendered. Use this function only to update a row's height outside the normal rendering process.">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="index of the row that has changed height" />
            </scope>
            <scope name="fastScroll" citdl="Boolean" doc="flag modifies vertical scrolling behavior. Defaults to true but set to false for slower scroll performance but more immediate scrolling feedback" />
            <variable name="delayScroll" doc="" />
            <scope name="scrollRedrawThreshold" citdl="int" doc="pixel distance a user must scroll vertically to trigger grid scrolling." />
            <scope name="scrollTo" ilk="function" signature="scrollTo(inTop)" doc="Vertically scroll the grid to a given pixel position">
              <variable ilk="argument" name="inTop" citdl="Integer" doc="vertical position of the grid in pixels" />
            </scope>
            <scope name="finishScrollJob" ilk="function" doc="" />
            <scope name="setScrollTop" ilk="function" signature="setScrollTop(inTop)" doc="">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope name="scrollToRow" ilk="function" signature="scrollToRow(inRowIndex)" doc="Scroll the grid to a specific row.">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="grid row index" />
            </scope>
            <scope name="styleRowNode" ilk="function" signature="styleRowNode(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="_mouseOut" ilk="function" signature="_mouseOut(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="getCell" ilk="function" signature="getCell(inIndex)" doc="Retrieves the cell object for a given grid column.">
              <variable ilk="argument" name="inIndex" citdl="Integer" doc="Grid column index of cell to retrieve" />
              <variable name="return_summary" />
            </scope>
            <scope name="setCellWidth" ilk="function" signature="setCellWidth(inIndex,inUnitWidth)" doc="">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inUnitWidth" />
            </scope>
            <scope name="getCellName" ilk="function" signature="getCellName(inCell)" doc="Returns the cell name of a passed cell" returns="String" attributes="private">
              <variable ilk="argument" name="inCell" />
            </scope>
            <scope name="canSort" ilk="function" signature="canSort(inSortInfo)" doc="Determines if the grid can be sorted">
              <variable ilk="argument" name="inSortInfo" citdl="Integer" doc="Sort information, 1-based index of column on which to sort, positive for an ascending sort and negative for a descending sort" />
              <variable name="return_summary" />
            </scope>
            <scope name="sort" ilk="function" doc="" />
            <scope name="getSortAsc" ilk="function" signature="getSortAsc(inSortInfo)" doc="Returns true if grid is sorted in an ascending direction." returns="Boolean" attributes="private">
              <variable ilk="argument" name="inSortInfo" />
            </scope>
            <scope name="getSortIndex" ilk="function" signature="getSortIndex(inSortInfo)" doc="Returns the index of the column on which the grid is sorted" returns="Integer" attributes="private">
              <variable ilk="argument" name="inSortInfo" />
            </scope>
            <scope name="setSortIndex" ilk="function" signature="setSortIndex(inIndex,inAsc)" doc="Sort the grid on a column in a specified direction">
              <variable ilk="argument" name="inIndex" citdl="Integer" doc="Column index on which to sort." />
              <variable ilk="argument" name="inAsc" citdl="Boolean" doc="If true, sort the grid in ascending order, otherwise in descending order" />
            </scope>
            <scope name="setSortInfo" ilk="function" signature="setSortInfo(inSortInfo)" doc="">
              <variable ilk="argument" name="inSortInfo" />
            </scope>
            <scope name="doKeyEvent" ilk="function" signature="doKeyEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_dispatch" ilk="function" signature="_dispatch(m,e)" attributes="private" doc="">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="dispatchKeyEvent" ilk="function" signature="dispatchKeyEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="dispatchContentEvent" ilk="function" signature="dispatchContentEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="dispatchHeaderEvent" ilk="function" signature="dispatchHeaderEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="dokeydown" ilk="function" signature="dokeydown(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doclick" ilk="function" signature="doclick(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="dodblclick" ilk="function" signature="dodblclick(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="docontextmenu" ilk="function" signature="docontextmenu(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doheaderclick" ilk="function" signature="doheaderclick(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doheaderdblclick" ilk="function" signature="doheaderdblclick(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doheadercontextmenu" ilk="function" signature="doheadercontextmenu(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doStartEdit" ilk="function" signature="doStartEdit(inCell,inRowIndex)" doc="">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="doApplyCellEdit" ilk="function" signature="doApplyCellEdit(inValue,inRowIndex,inFieldIndex)" doc="">
              <variable ilk="argument" name="inValue" />
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inFieldIndex" />
            </scope>
            <scope name="doCancelEdit" ilk="function" signature="doCancelEdit(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="doApplyEdit" ilk="function" signature="doApplyEdit(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="addRow" ilk="function" doc="Add a row to the grid." />
            <scope name="removeSelectedRows" ilk="function" doc="Remove the selected rows from the grid." />
            <scope name="domNode">
              <variable name="tabIndex" doc="" />
              <variable name="onReveal" doc="" />
              <variable name="onSizeChange" doc="" />
            </scope>
            <variable name="_autoHeight" attributes="private" doc="" />
            <variable name="rows" doc="" />
            <variable name="focus" doc="" />
            <variable name="edit" doc="" />
            <variable name="selection" doc="" />
            <variable name="scroller" doc="">
              <variable name="grid" doc="" />
              <variable name="_pageIdPrefix" attributes="private" doc="" />
              <variable name="renderRow" doc="" />
              <variable name="removeRow" doc="" />
              <variable name="windowHeight" doc="" />
            </variable>
            <variable name="layout" doc="" />
            <variable name="views" doc="">
              <variable name="createView" doc="" />
            </variable>
            <scope name="messagesNode">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="_sizeBox" attributes="private" doc="" />
            <variable name="_padBorder" attributes="private" doc="" />
            <scope name="viewsNode" />
            <variable name="fitTo" doc="" />
            <scope name="viewsHeaderNode" />
            <variable name="lastScrollTop" doc="" />
            <variable name="scrollTop" doc="" />
            <scope name="markupFactory" ilk="function" signature="markupFactory(props,node,ctor,cellFunc)" returns="for vendetta" attributes="private" doc="">
              <variable ilk="argument" name="props" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="ctor" />
              <variable ilk="argument" name="cellFunc" />
            </scope>
          </scope>
          <scope name="_Layout" ilk="function" doc="Controls grid cell layout. Owned by grid and used internally." signature="_Layout(inGrid)" attributes="private">
            <variable ilk="argument" name="inGrid" />
            <variable name="cells" doc="" />
            <variable name="structure" doc="" />
            <scope name="defaultWidth" doc="" />
            <scope name="moveColumn" ilk="function" signature="moveColumn(sourceViewIndex,destViewIndex,cellIndex,targetIndex,before)" doc="">
              <variable ilk="argument" name="sourceViewIndex" />
              <variable ilk="argument" name="destViewIndex" />
              <variable ilk="argument" name="cellIndex" />
              <variable ilk="argument" name="targetIndex" />
              <variable ilk="argument" name="before" />
            </scope>
            <scope name="setColumnVisibility" ilk="function" signature="setColumnVisibility(columnIndex,visible)" doc="">
              <variable ilk="argument" name="columnIndex" />
              <variable ilk="argument" name="visible" />
            </scope>
            <scope name="addCellDef" ilk="function" signature="addCellDef(inRowIndex,inCellIndex,inDef)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inCellIndex" />
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope name="addRowDef" ilk="function" signature="addRowDef(inRowIndex,inDef)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope name="addRowsDef" ilk="function" signature="addRowsDef(inDef)" doc="">
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope name="addViewDef" ilk="function" signature="addViewDef(inDef)" doc="">
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope name="setStructure" ilk="function" signature="setStructure(inStructure)" doc="">
              <variable ilk="argument" name="inStructure" />
            </scope>
            <variable name="_defaultCellProps" attributes="private" doc="" />
            <variable name="fieldIndex" doc="" />
            <variable name="cellCount" doc="" />
            <variable name="grid" doc="" />
          </scope>
          <scope name="_RowManager" ilk="function" signature="_RowManager(inGrid)" attributes="private" doc="">
            <variable ilk="argument" name="inGrid" />
            <scope name="linesToEms" doc="" />
            <variable name="overRow" doc="" />
            <scope name="prepareStylingRow" ilk="function" signature="prepareStylingRow(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="styleRowNode" ilk="function" signature="styleRowNode(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="applyStyles" ilk="function" signature="applyStyles(inRow)" doc="">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope name="updateStyles" ilk="function" signature="updateStyles(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="setOverRow" ilk="function" signature="setOverRow(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="isOver" ilk="function" signature="isOver(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <variable name="grid" doc="" />
          </scope>
          <scope name="_RowSelector" ilk="function" doc="Custom grid view. If used in a grid structure, provides a small selectable region for grid rows." attributes="private">
            <scope name="defaultWidth" doc="" />
            <scope name="noscroll" doc="" />
            <scope name="padBorderWidth" doc="" />
            <scope name="buildRendering" ilk="function" doc="" />
            <scope name="getWidth" ilk="function" doc="" />
            <scope name="buildRowContent" ilk="function" signature="buildRowContent(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="renderHeader" ilk="function" doc="" />
            <scope name="resize" ilk="function" doc="" />
            <scope name="adaptWidth" ilk="function" doc="" />
            <scope name="doStyleRowNode" ilk="function" signature="doStyleRowNode(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="domouseover" ilk="function" signature="domouseover(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="domouseout" ilk="function" signature="domouseout(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="scrollboxNode" />
            <scope name="headerNode" />
          </scope>
          <scope name="_Scroller" ilk="function" signature="_Scroller(inContentNodes)" attributes="private" doc="">
            <variable ilk="argument" name="inContentNodes" />
            <variable name="rowCount" doc="" />
            <scope name="defaultRowHeight" doc="" />
            <variable name="keepRows" doc="" />
            <scope name="contentNode" doc="" />
            <scope name="scrollboxNode" doc="">
              <variable name="scrollTop" doc="" />
              <variable name="onscroll" doc="" />
            </scope>
            <variable name="defaultPageHeight" doc="" />
            <variable name="keepPages" doc="" />
            <variable name="pageCount" doc="" />
            <variable name="windowHeight" doc="" />
            <variable name="firstVisibleRow" doc="" />
            <variable name="lastVisibleRow" doc="" />
            <variable name="averageRowHeight" doc="" />
            <variable name="page" doc="" />
            <variable name="pageTop" doc="" />
            <scope name="init" ilk="function" signature="init(inRowCount,inKeepRows,inRowsPerPage)" doc="">
              <variable ilk="argument" name="inRowCount" />
              <variable ilk="argument" name="inKeepRows" />
              <variable ilk="argument" name="inRowsPerPage" />
            </scope>
            <scope name="_getPageCount" ilk="function" signature="_getPageCount(rowCount,rowsPerPage)" attributes="private" doc="">
              <variable ilk="argument" name="rowCount" />
              <variable ilk="argument" name="rowsPerPage" />
            </scope>
            <scope name="destroy" ilk="function" doc="" />
            <scope name="setKeepInfo" ilk="function" signature="setKeepInfo(inKeepRows)" doc="">
              <variable ilk="argument" name="inKeepRows" />
            </scope>
            <scope name="setContentNodes" ilk="function" signature="setContentNodes(inNodes)" doc="">
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="getDefaultNodes" ilk="function" doc="" />
            <scope name="invalidate" ilk="function" doc="" />
            <scope name="updateRowCount" ilk="function" signature="updateRowCount(inRowCount)" doc="">
              <variable ilk="argument" name="inRowCount" />
            </scope>
            <scope name="pageExists" ilk="function" signature="pageExists(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="measurePage" ilk="function" signature="measurePage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="positionPage" ilk="function" signature="positionPage(inPageIndex,inPos)" doc="">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope name="repositionPages" ilk="function" signature="repositionPages(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="installPage" ilk="function" signature="installPage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="preparePage" ilk="function" signature="preparePage(inPageIndex,inPos,inReuseNode)" doc="">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inPos" />
              <variable ilk="argument" name="inReuseNode" />
            </scope>
            <scope name="renderPage" ilk="function" signature="renderPage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="removePage" ilk="function" signature="removePage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="destroyPage" ilk="function" signature="destroyPage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="pacify" ilk="function" signature="pacify(inShouldPacify)" doc="">
              <variable ilk="argument" name="inShouldPacify" />
            </scope>
            <variable name="pacifying" doc="" />
            <scope name="pacifyTicks" doc="" />
            <scope name="setPacifying" ilk="function" signature="setPacifying(inPacifying)" doc="">
              <variable ilk="argument" name="inPacifying" />
            </scope>
            <scope name="startPacify" ilk="function" doc="" />
            <scope name="doPacify" ilk="function" doc="" />
            <scope name="endPacify" ilk="function" doc="" />
            <scope name="resize" ilk="function" doc="" />
            <scope name="calcLastPageHeight" ilk="function" doc="" />
            <scope name="updateContentHeight" ilk="function" signature="updateContentHeight(inDh)" doc="">
              <variable ilk="argument" name="inDh" />
            </scope>
            <scope name="updatePageHeight" ilk="function" signature="updatePageHeight(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="rowHeightChanged" ilk="function" signature="rowHeightChanged(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="invalidateNodes" ilk="function" doc="" />
            <scope name="createPageNode" ilk="function" doc="" />
            <scope name="getPageHeight" ilk="function" signature="getPageHeight(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="pushPage" ilk="function" signature="pushPage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="popPage" ilk="function" doc="" />
            <scope name="findPage" ilk="function" signature="findPage(inTop)" doc="">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope name="buildPage" ilk="function" signature="buildPage(inPageIndex,inReuseNode,inPos)" doc="">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inReuseNode" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope name="needPage" ilk="function" signature="needPage(inPageIndex,inPos)" doc="">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope name="onscroll" ilk="function" doc="" />
            <scope name="scroll" ilk="function" signature="scroll(inTop)" doc="">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope name="getScrollBottom" ilk="function" signature="getScrollBottom(inTop)" doc="">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope name="processNodeEvent" ilk="function" signature="processNodeEvent(e,inNode)" doc="">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope name="processEvent" ilk="function" signature="processEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="renderRow" ilk="function" signature="renderRow(inRowIndex,inPageNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inPageNode" />
            </scope>
            <scope name="removeRow" ilk="function" signature="removeRow(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="getDefaultPageNode" ilk="function" signature="getDefaultPageNode(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="positionPageNode" ilk="function" signature="positionPageNode(inNode,inPos)" doc="">
              <variable ilk="argument" name="inNode" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope name="getPageNodePosition" ilk="function" signature="getPageNodePosition(inNode)" doc="">
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope name="invalidatePageNode" ilk="function" signature="invalidatePageNode(inPageIndex,inNodes)" doc="">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="getPageRow" ilk="function" signature="getPageRow(inPage)" doc="">
              <variable ilk="argument" name="inPage" />
            </scope>
            <scope name="getLastPageRow" ilk="function" signature="getLastPageRow(inPage)" doc="">
              <variable ilk="argument" name="inPage" />
            </scope>
            <scope name="getFirstVisibleRow" ilk="function" signature="getFirstVisibleRow(inPage,inPageTop,inScrollTop)" doc="">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inPageTop" />
              <variable ilk="argument" name="inScrollTop" />
            </scope>
            <scope name="getLastVisibleRow" ilk="function" signature="getLastVisibleRow(inPage,inBottom,inScrollBottom)" doc="">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inBottom" />
              <variable ilk="argument" name="inScrollBottom" />
            </scope>
            <scope name="findTopRow" ilk="function" signature="findTopRow(inScrollTop)" doc="">
              <variable ilk="argument" name="inScrollTop" />
            </scope>
            <scope name="findScrollTop" ilk="function" signature="findScrollTop(inRow)" doc="">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope name="dummy" doc="" />
            <variable name="rowsPerPage" doc="" />
            <variable name="contentNodes" doc="" />
            <variable name="colCount" doc="" />
            <variable name="pageNodes" doc="" />
            <variable name="pageHeights" doc="" />
            <variable name="height" doc="" />
            <variable name="startPacifyTicks" doc="" />
            <scope name="grid">
              <variable name="scrollTop" doc="" />
            </scope>
            <variable name="offset" doc="" />
            <variable name="stack" doc="" />
          </scope>
          <scope name="_View" ilk="function" doc="A collection of grid columns. A grid is comprised of a set of views that stack horizontally. Grid creates views automatically based on grid's layout structure. Users should typically not need to access individual views directly." attributes="private">
            <scope name="defaultWidth" citdl="String" doc="Default width of the view" />
            <variable name="viewWidth" citdl="String" doc="Width for the view, in valid css unit" />
            <scope name="templatePath" doc="" />
            <scope name="themeable" doc="" />
            <scope name="classTag" doc="" />
            <scope name="marginBottom" doc="" />
            <scope name="rowPad" doc="" />
            <variable name="_togglingColumn" citdl="int" doc="Width of the column being toggled (-1 for none)" attributes="private" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <scope name="focus" ilk="function" doc="" />
            <scope name="setStructure" ilk="function" signature="setStructure(inStructure)" doc="">
              <variable ilk="argument" name="inStructure" />
            </scope>
            <scope name="testFlexCells" ilk="function" doc="" />
            <scope name="updateStructure" ilk="function" doc="" />
            <scope name="getScrollbarWidth" ilk="function" returns="Integer" attributes="private" doc="" />
            <scope name="getColumnsWidth" ilk="function" returns="Integer" attributes="private" doc="" />
            <scope name="setColumnsWidth" ilk="function" signature="setColumnsWidth(width)" doc="">
              <variable ilk="argument" name="width" />
            </scope>
            <scope name="getWidth" ilk="function" returns="String" attributes="private" doc="" />
            <scope name="getContentWidth" ilk="function" returns="String" attributes="private" doc="" />
            <scope name="render" ilk="function" doc="" />
            <scope name="_onDndDropBefore" ilk="function" signature="_onDndDropBefore(source,nodes,copy)" attributes="private" doc="">
              <variable ilk="argument" name="source" />
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="copy" />
            </scope>
            <scope name="_onDndDrop" ilk="function" signature="_onDndDrop(source,nodes,copy)" attributes="private" doc="">
              <variable ilk="argument" name="source" />
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="copy" />
            </scope>
            <scope name="renderHeader" ilk="function" doc="" />
            <scope name="_getHeaderContent" ilk="function" signature="_getHeaderContent(inCell)" attributes="private" doc="">
              <variable ilk="argument" name="inCell" />
            </scope>
            <scope name="resize" ilk="function" doc="" />
            <scope name="hasHScrollbar" ilk="function" signature="hasHScrollbar(reset)" returns="Boolean" attributes="private" doc="">
              <variable ilk="argument" name="reset" />
            </scope>
            <scope name="hasVScrollbar" ilk="function" signature="hasVScrollbar(reset)" returns="Boolean" attributes="private" doc="">
              <variable ilk="argument" name="reset" />
            </scope>
            <scope name="convertColPctToFixed" ilk="function" doc="" />
            <scope name="adaptHeight" ilk="function" signature="adaptHeight(minusScroll)" doc="">
              <variable ilk="argument" name="minusScroll" />
            </scope>
            <scope name="adaptWidth" ilk="function" doc="" />
            <scope name="setSize" ilk="function" signature="setSize(w,h)" doc="">
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
            </scope>
            <scope name="renderRow" ilk="function" signature="renderRow(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="createRowNode" ilk="function" signature="createRowNode(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="buildRow" ilk="function" signature="buildRow(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="buildRowContent" ilk="function" signature="buildRowContent(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="rowRemoved" doc="" />
            <scope name="getRowNode" ilk="function" signature="getRowNode(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="getCellNode" ilk="function" signature="getCellNode(inRowIndex,inCellIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inCellIndex" />
            </scope>
            <scope name="getHeaderCellNode" ilk="function" signature="getHeaderCellNode(inCellIndex)" doc="">
              <variable ilk="argument" name="inCellIndex" />
            </scope>
            <scope name="styleRow" ilk="function" signature="styleRow(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="styleRowNode" ilk="function" signature="styleRowNode(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="doStyleRowNode" ilk="function" signature="doStyleRowNode(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="updateRow" ilk="function" signature="updateRow(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="updateRowStyles" ilk="function" signature="updateRowStyles(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <variable name="lastTop" doc="" />
            <variable name="firstScroll" doc="" />
            <scope name="doscroll" ilk="function" signature="doscroll(inEvent)" doc="">
              <variable ilk="argument" name="inEvent" />
            </scope>
            <scope name="setScrollTop" ilk="function" signature="setScrollTop(inTop)" doc="">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope name="doContentEvent" ilk="function" signature="doContentEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doHeaderEvent" ilk="function" signature="doHeaderEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="dispatchContentEvent" ilk="function" signature="dispatchContentEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="dispatchHeaderEvent" ilk="function" signature="dispatchHeaderEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="setColWidth" ilk="function" signature="setColWidth(inIndex,inWidth)" doc="">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inWidth" />
            </scope>
            <scope name="update" ilk="function" doc="" />
            <variable name="rowNodes" doc="" />
            <variable name="content" doc="" />
            <variable name="header" doc="" />
            <scope name="headerNodeContainer" />
            <variable name="structure" doc="" />
            <variable name="onBeforeRow" doc="" />
            <variable name="noscroll" doc="" />
            <scope name="scrollboxNode">
              <variable name="scrollLeft" doc="" />
              <variable name="scrollTop" doc="" />
            </scope>
            <variable name="simpleStructure" doc="" />
            <variable name="flexCells" doc="" />
            <scope name="headerContentNode">
              <scope name="firstChild" />
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="_source_conn" attributes="private" doc="" />
            <variable name="_source_sub" attributes="private" doc="" />
            <variable name="_removingColumn" attributes="private" doc="" />
            <variable name="contentWidth" doc="" />
            <variable name="_hasHScroll" attributes="private" doc="" />
            <variable name="_hasVScroll" attributes="private" doc="" />
            <variable name="_pendingUpdate" attributes="private" doc="" />
            <scope name="headerNode">
              <variable name="scrollLeft" doc="" />
            </scope>
          </scope>
          <scope name="_GridAvatar" ilk="function" attributes="private" doc="">
            <scope name="construct" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <variable name="node" doc="" />
            <variable name="oldOffsetY" doc="" />
          </scope>
          <scope name="_ViewManager" ilk="function" doc="A collection of grid views. Owned by grid and used internally for managing grid views." signature="_ViewManager(inGrid)" attributes="private">
            <variable ilk="argument" name="inGrid" />
            <scope name="defaultWidth" doc="" />
            <variable name="views" doc="" />
            <scope name="resize" ilk="function" doc="" />
            <scope name="render" ilk="function" doc="" />
            <scope name="addView" ilk="function" signature="addView(inView)" doc="">
              <variable ilk="argument" name="inView" />
            </scope>
            <scope name="destroyViews" ilk="function" doc="" />
            <scope name="getContentNodes" ilk="function" doc="" />
            <scope name="forEach" ilk="function" signature="forEach(inCallback)" doc="">
              <variable ilk="argument" name="inCallback" />
            </scope>
            <scope name="onEach" ilk="function" signature="onEach(inMethod,inArgs)" doc="">
              <variable ilk="argument" name="inMethod" />
              <variable ilk="argument" name="inArgs" />
            </scope>
            <scope name="normalizeHeaderNodeHeight" ilk="function" doc="" />
            <scope name="normalizeRowNodeHeights" ilk="function" signature="normalizeRowNodeHeights(inRowNodes)" doc="">
              <variable ilk="argument" name="inRowNodes" />
            </scope>
            <scope name="resetHeaderNodeHeight" ilk="function" doc="" />
            <scope name="renormalizeRow" ilk="function" signature="renormalizeRow(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="getViewWidth" ilk="function" signature="getViewWidth(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="measureHeader" ilk="function" doc="" />
            <scope name="measureContent" ilk="function" doc="" />
            <scope name="findClient" ilk="function" signature="findClient(inAutoWidth)" doc="">
              <variable ilk="argument" name="inAutoWidth" />
            </scope>
            <scope name="arrange" ilk="function" signature="arrange(l,w)" doc="">
              <variable ilk="argument" name="l" />
              <variable ilk="argument" name="w" />
            </scope>
            <scope name="renderRow" ilk="function" signature="renderRow(inRowIndex,inNodes)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="rowRemoved" ilk="function" signature="rowRemoved(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="updateRow" ilk="function" signature="updateRow(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="updateRowStyles" ilk="function" signature="updateRowStyles(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="setScrollTop" ilk="function" signature="setScrollTop(inTop)" doc="">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope name="getFirstScrollingView" ilk="function" doc="Returns the first grid view with a scroll bar" />
            <variable name="grid" doc="" />
          </scope>
          <variable name="cells" citdl="Object" doc="">
            <scope name="_Base" ilk="function" doc="Respresents a grid cell and contains information about column options and methods for retrieving cell related information. Each column in a grid layout has a cell object and most events and many methods provide access to these objects." signature="_Base(inProps)" attributes="private">
              <variable ilk="argument" name="inProps" />
              <scope name="styles" doc="" />
              <scope name="classes" doc="" />
              <scope name="editable" doc="" />
              <scope name="alwaysEditing" doc="" />
              <scope name="formatter" doc="" />
              <scope name="defaultValue" doc="" />
              <variable name="value" doc="" />
              <scope name="hidden" doc="" />
              <scope name="_valueProp" attributes="private" doc="" />
              <variable name="_formatPending" attributes="private" doc="" />
              <scope name="format" ilk="function" signature="format(inRowIndex,inItem)" doc="provides the html for a given grid cell.">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
                <variable ilk="argument" name="inItem" />
                <variable name="return_summary" />
              </scope>
              <scope name="formatEditing" ilk="function" signature="formatEditing(inDatum,inRowIndex)" doc="formats the cell for editing">
                <variable ilk="argument" name="inDatum" citdl="anything" doc="cell data to edit" />
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
                <variable name="return_summary" />
              </scope>
              <scope name="getNode" ilk="function" signature="getNode(inRowIndex)" doc="gets the dom node for a given grid cell.">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
                <variable name="return_summary" />
              </scope>
              <scope name="getHeaderNode" ilk="function" doc="" />
              <scope name="getEditNode" ilk="function" signature="getEditNode(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="canResize" ilk="function" doc="" />
              <scope name="isFlex" ilk="function" doc="" />
              <scope name="applyEdit" ilk="function" signature="applyEdit(inValue,inRowIndex)" doc="">
                <variable ilk="argument" name="inValue" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="cancelEdit" ilk="function" signature="cancelEdit(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="_onEditBlur" ilk="function" signature="_onEditBlur(inRowIndex)" attributes="private" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="registerOnBlur" ilk="function" signature="registerOnBlur(inNode,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="needFormatNode" ilk="function" signature="needFormatNode(inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="cancelFormatNode" ilk="function" doc="" />
              <scope name="_formatNode" ilk="function" signature="_formatNode(inDatum,inRowIndex)" attributes="private" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="formatNode" ilk="function" signature="formatNode(inNode,inDatum,inRowIndex)" doc="format the editing dom node. Use when editor is a widget.">
                <variable ilk="argument" name="inNode" citdl="dom" doc="node dom node for the editor" />
                <variable ilk="argument" name="inDatum" citdl="anything" doc="cell data to edit" />
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <scope name="dispatchEvent" ilk="function" signature="dispatchEvent(m,e)" doc="">
                <variable ilk="argument" name="m" />
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="getValue" ilk="function" signature="getValue(inRowIndex)" doc="returns value entered into editor">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
                <variable name="return_summary" />
              </scope>
              <scope name="setValue" ilk="function" signature="setValue(inRowIndex,inValue)" doc="set the value of the grid editor">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
                <variable ilk="argument" name="inValue" citdl="anything" doc="value of editor" />
              </scope>
              <scope name="focus" ilk="function" signature="focus(inRowIndex,inNode)" doc="focus the grid editor">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
                <variable ilk="argument" name="inNode" citdl="dom" doc="node editor node" />
              </scope>
              <scope name="save" ilk="function" signature="save(inRowIndex)" doc="save editor state">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <scope name="restore" ilk="function" signature="restore(inRowIndex)" doc="restore editor state">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <scope name="_finish" ilk="function" signature="_finish(inRowIndex)" doc="called when editing is completed to clean up editor" attributes="private">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <scope name="apply" ilk="function" signature="apply(inRowIndex)" doc="apply edit from cell editor">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <scope name="cancel" ilk="function" signature="cancel(inRowIndex)" doc="cancel cell edit">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <variable name="_props" attributes="private" doc="" />
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cellDef)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cellDef" />
              </scope>
            </scope>
            <scope name="Cell" ilk="function" doc="">
              <variable name="keyFilter" citdl="RegExp" doc="optional regex for disallowing keypresses" />
              <scope name="formatEditing" ilk="function" signature="formatEditing(inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="formatNode" ilk="function" signature="formatNode(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="doKey" ilk="function" signature="doKey(e)" doc="">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="_finish" ilk="function" signature="_finish(inRowIndex)" attributes="private" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cellDef)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cellDef" />
              </scope>
            </scope>
            <scope name="RowIndex" ilk="function" doc="">
              <scope name="name" doc="" />
              <scope name="postscript" ilk="function" doc="" />
              <scope name="get" ilk="function" signature="get(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <variable name="editable" doc="" />
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cellDef)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cellDef" />
              </scope>
            </scope>
            <scope name="Select" ilk="function" doc="grid cell that provides a standard select for editing" signature="Select(inCell)">
              <variable ilk="argument" name="inCell" />
              <scope name="options" doc="" />
              <variable name="values" citdl="Array" doc="value for each item" />
              <scope name="returnIndex" citdl="Integer" doc="editor returns only the index of the selected option and not the value" />
              <scope name="formatEditing" ilk="function" signature="formatEditing(inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="getValue" ilk="function" signature="getValue(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cell)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope name="AlwaysEdit" ilk="function" doc="grid cell that is always in an editable state, regardless of grid editing state">
              <scope name="alwaysEditing" doc="" />
              <scope name="_formatNode" ilk="function" signature="_formatNode(inDatum,inRowIndex)" attributes="private" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="applyStaticValue" ilk="function" signature="applyStaticValue(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cell)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope name="Bool" ilk="function" doc="grid cell that provides a standard checkbox that is always on for editing">
              <scope name="_valueProp" attributes="private" doc="" />
              <scope name="formatEditing" ilk="function" signature="formatEditing(inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="doclick" ilk="function" signature="doclick(e)" doc="">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cell)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <variable name="_base" citdl="Object" attributes="private" doc="" />
            <scope name="_Widget" ilk="function" signature="_Widget(inCell)" attributes="private" doc="">
              <variable ilk="argument" name="inCell" />
              <variable name="widgetClass" doc="" />
              <scope name="formatEditing" ilk="function" signature="formatEditing(inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="getValue" ilk="function" signature="getValue(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="setValue" ilk="function" signature="setValue(inRowIndex,inValue)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope name="getWidgetProps" ilk="function" signature="getWidgetProps(inDatum)" doc="">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope name="createWidget" ilk="function" signature="createWidget(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="attachWidget" ilk="function" signature="attachWidget(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="formatNode" ilk="function" signature="formatNode(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="sizeWidget" ilk="function" signature="sizeWidget(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="focus" ilk="function" signature="focus(inRowIndex,inNode)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inNode" />
              </scope>
              <scope name="_finish" ilk="function" signature="_finish(inRowIndex)" attributes="private" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <variable name="widget" doc="" />
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cell)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope name="ComboBox" ilk="function" doc="">
              <scope name="widgetClass" doc="" />
              <scope name="getWidgetProps" ilk="function" signature="getWidgetProps(inDatum)" doc="">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope name="getValue" ilk="function" doc="" />
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cell)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope name="DateTextBox" ilk="function" doc="">
              <scope name="widgetClass" doc="" />
              <scope name="setValue" ilk="function" signature="setValue(inRowIndex,inValue)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope name="getWidgetProps" ilk="function" signature="getWidgetProps(inDatum)" doc="">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cell)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope name="CheckBox" ilk="function" doc="">
              <scope name="widgetClass" doc="" />
              <scope name="getValue" ilk="function" doc="" />
              <scope name="setValue" ilk="function" signature="setValue(inRowIndex,inValue)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope name="sizeWidget" ilk="function" signature="sizeWidget(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cell)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope name="Editor" ilk="function" doc="">
              <scope name="widgetClass" doc="" />
              <scope name="getWidgetProps" ilk="function" signature="getWidgetProps(inDatum)" doc="">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope name="createWidget" ilk="function" signature="createWidget(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="formatNode" ilk="function" signature="formatNode(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="populateEditor" ilk="function" doc="" />
              <variable name="content" doc="" />
              <scope name="markupFactory" ilk="function" signature="markupFactory(node,cell)" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <variable name="dijit" citdl="Object" doc="" />
          </variable>
          <variable name="compat" citdl="Object" doc="">
            <variable name="Grid" citdl="Object" doc="" />
            <variable name="VirtualGrid" citdl="Object" doc="" />
            <variable name="_data" citdl="Object" attributes="private" doc="">
              <variable name="dijitEditors" citdl="Object" doc="" />
              <variable name="editors" citdl="Object" doc="" />
              <variable name="fields" citdl="Object" doc="" />
              <variable name="model" citdl="Object" doc="" />
            </variable>
            <variable name="_grid" citdl="Object" attributes="private" doc="">
              <variable name="builder" citdl="Object" doc="" />
              <variable name="cell" citdl="Object" doc="" />
              <variable name="drag" citdl="Object" doc="" />
              <variable name="edit" citdl="Object" doc="" />
              <variable name="focus" citdl="Object" doc="" />
              <variable name="layout" citdl="Object" doc="" />
              <variable name="lib" citdl="Object" doc="" />
              <variable name="publicEvents" citdl="Object" doc="" />
              <variable name="rowbar" citdl="Object" doc="" />
              <variable name="rows" citdl="Object" doc="" />
              <variable name="scroller" citdl="Object" doc="" />
              <variable name="selection" citdl="Object" doc="" />
              <variable name="view" citdl="Object" doc="" />
              <variable name="views" citdl="Object" doc="" />
            </variable>
          </variable>
          <scope name="editors">
            <scope name="Dijit" ilk="function" signature="Dijit(inCell)" doc="">
              <variable ilk="argument" name="inCell" />
              <variable name="editorClass" doc="" />
              <scope name="format" ilk="function" signature="format(inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="getValue" ilk="function" signature="getValue(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="setValue" ilk="function" signature="setValue(inRowIndex,inValue)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope name="getEditorProps" ilk="function" signature="getEditorProps(inDatum)" doc="">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope name="createEditor" ilk="function" signature="createEditor(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="attachEditor" ilk="function" signature="attachEditor(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="formatNode" ilk="function" signature="formatNode(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="sizeEditor" ilk="function" signature="sizeEditor(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="focus" ilk="function" signature="focus(inRowIndex,inNode)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inNode" />
              </scope>
              <scope name="_finish" ilk="function" signature="_finish(inRowIndex)" attributes="private" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <variable name="editor" doc="" />
            </scope>
            <scope name="ComboBox" ilk="function" doc="">
              <scope name="editorClass" doc="" />
              <scope name="getEditorProps" ilk="function" signature="getEditorProps(inDatum)" doc="">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope name="getValue" ilk="function" doc="" />
            </scope>
            <scope name="DateTextBox" ilk="function" doc="">
              <scope name="editorClass" doc="" />
              <scope name="setValue" ilk="function" signature="setValue(inRowIndex,inValue)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope name="getEditorProps" ilk="function" signature="getEditorProps(inDatum)" doc="">
                <variable ilk="argument" name="inDatum" />
              </scope>
            </scope>
            <scope name="CheckBox" ilk="function" doc="">
              <scope name="editorClass" doc="" />
              <scope name="getValue" ilk="function" doc="" />
              <scope name="setValue" ilk="function" signature="setValue(inRowIndex,inValue)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope name="sizeEditor" ilk="function" signature="sizeEditor(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
            </scope>
            <scope name="Editor" ilk="function" doc="">
              <scope name="editorClass" doc="" />
              <scope name="getEditorProps" ilk="function" signature="getEditorProps(inDatum)" doc="">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope name="createEditor" ilk="function" signature="createEditor(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="formatNode" ilk="function" signature="formatNode(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="populateEditor" ilk="function" doc="" />
              <variable name="content" doc="" />
            </scope>
            <scope name="Base" ilk="function" doc="base grid editor class. Other grid editors should inherited from this class." signature="Base(inCell)">
              <variable ilk="argument" name="inCell" />
              <scope name="_valueProp" attributes="private" doc="" />
              <variable name="_formatPending" attributes="private" doc="" />
              <scope name="format" ilk="function" signature="format(inDatum,inRowIndex)" doc="formats the cell for editing">
                <variable ilk="argument" name="inDatum" citdl="anything" doc="cell data to edit" />
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
                <variable name="return_summary" />
              </scope>
              <scope name="needFormatNode" ilk="function" signature="needFormatNode(inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="cancelFormatNode" ilk="function" doc="" />
              <scope name="_formatNode" ilk="function" signature="_formatNode(inDatum,inRowIndex)" attributes="private" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="getNode" ilk="function" signature="getNode(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="formatNode" ilk="function" signature="formatNode(inNode,inDatum,inRowIndex)" doc="format the editing dom node. Use when editor is a widget.">
                <variable ilk="argument" name="inNode" citdl="dom" doc="node dom node for the editor" />
                <variable ilk="argument" name="inDatum" citdl="anything" doc="cell data to edit" />
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <scope name="dispatchEvent" ilk="function" signature="dispatchEvent(m,e)" doc="">
                <variable ilk="argument" name="m" />
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="getValue" ilk="function" signature="getValue(inRowIndex)" doc="returns value entered into editor">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
                <variable name="return_summary" />
              </scope>
              <scope name="setValue" ilk="function" signature="setValue(inRowIndex,inValue)" doc="set the value of the grid editor">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
                <variable ilk="argument" name="inValue" citdl="anything" doc="value of editor" />
              </scope>
              <scope name="focus" ilk="function" signature="focus(inRowIndex,inNode)" doc="focus the grid editor">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
                <variable ilk="argument" name="inNode" citdl="dom" doc="node editor node" />
              </scope>
              <scope name="save" ilk="function" signature="save(inRowIndex)" doc="save editor state">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <scope name="restore" ilk="function" signature="restore(inRowIndex)" doc="restore editor state">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <scope name="_finish" ilk="function" signature="_finish(inRowIndex)" doc="called when editing is completed to clean up editor" attributes="private">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <scope name="apply" ilk="function" signature="apply(inRowIndex)" doc="apply edit from cell editor">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <scope name="cancel" ilk="function" signature="cancel(inRowIndex)" doc="cancel cell edit">
                <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              </scope>
              <variable name="value" doc="" />
              <variable name="cell" doc="" />
            </scope>
            <scope name="Input" ilk="function" signature="Input(inCell)" doc="">
              <variable ilk="argument" name="inCell" />
              <variable name="keyFilter" citdl="object" doc="optional regex for disallowing keypresses" />
              <scope name="format" ilk="function" signature="format(inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="formatNode" ilk="function" signature="formatNode(inNode,inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="doKey" ilk="function" signature="doKey(e)" doc="">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="_finish" ilk="function" signature="_finish(inRowIndex)" attributes="private" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
            </scope>
            <scope name="Select" ilk="function" doc="grid cell editor that provides a standard select options: text of each item values: value for each item returnIndex: editor returns only the index of the selected option and not the value" signature="Select(inCell)">
              <variable ilk="argument" name="inCell" />
              <scope name="format" ilk="function" signature="format(inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="getValue" ilk="function" signature="getValue(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <variable name="options" doc="" />
              <variable name="values" doc="" />
            </scope>
            <scope name="AlwaysOn" ilk="function" doc="grid cell editor that is always on, regardless of grid editing state">
              <scope name="alwaysOn" citdl="boolean" doc="flag to use editor to format grid cell regardless of editing state." />
              <scope name="_formatNode" ilk="function" signature="_formatNode(inDatum,inRowIndex)" attributes="private" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="applyStaticValue" ilk="function" signature="applyStaticValue(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
            </scope>
            <scope name="Bool" ilk="function" doc="grid cell editor that provides a standard checkbox that is always on">
              <scope name="_valueProp" attributes="private" doc="" />
              <scope name="format" ilk="function" signature="format(inDatum,inRowIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="doclick" ilk="function" signature="doclick(e)" doc="">
                <variable ilk="argument" name="e" />
              </scope>
            </scope>
            <scope name="base" doc="" />
            <scope name="input" doc="" />
            <scope name="select" doc="" />
            <scope name="alwaysOn" doc="" />
            <scope name="bool" doc="" />
          </scope>
          <scope name="data">
            <scope name="Mixer" ilk="function" doc="basic collection class that provides a default value for items">
              <scope name="count" ilk="function" doc="" />
              <scope name="clear" ilk="function" doc="" />
              <scope name="build" ilk="function" signature="build(inIndex)" doc="">
                <variable ilk="argument" name="inIndex" />
              </scope>
              <scope name="getDefault" ilk="function" doc="" />
              <scope name="setDefault" ilk="function" signature="setDefault(inField)" doc="">
                <variable ilk="argument" name="inField" citdl="[, inField2, ... inFiel">
                  <scope name="repeating" />
                </variable>
              </scope>
              <scope name="get" ilk="function" signature="get(inIndex)" doc="">
                <variable ilk="argument" name="inIndex" />
              </scope>
              <scope name="_set" ilk="function" signature="_set(inIndex,inField)" attributes="private" doc="">
                <variable ilk="argument" name="inIndex" />
                <variable ilk="argument" name="inField" citdl="[, inField2, ... inFiel">
                  <scope name="repeating" />
                </variable>
              </scope>
              <scope name="set" ilk="function" doc="" />
              <scope name="insert" ilk="function" signature="insert(inIndex,inProps)" doc="">
                <variable ilk="argument" name="inIndex" />
                <variable ilk="argument" name="inProps" />
              </scope>
              <scope name="remove" ilk="function" signature="remove(inIndex)" doc="">
                <variable ilk="argument" name="inIndex" />
              </scope>
              <scope name="swap" ilk="function" signature="swap(inIndexA,inIndexB)" doc="">
                <variable ilk="argument" name="inIndexA" />
                <variable ilk="argument" name="inIndexB" />
              </scope>
              <scope name="move" ilk="function" signature="move(inFromIndex,inToIndex)" doc="">
                <variable ilk="argument" name="inFromIndex" />
                <variable ilk="argument" name="inToIndex" />
              </scope>
              <variable name="values" doc="" />
              <variable name="defaultValue" doc="" />
            </scope>
            <scope name="Field" ilk="function" signature="Field(inName)" doc="">
              <variable ilk="argument" name="inName" />
              <scope name="na" doc="" />
              <variable name="name" doc="" />
              <variable name="compare" doc="" />
            </scope>
            <scope name="Fields" ilk="function" signature="Fields(inFieldClass)" doc="">
              <variable ilk="argument" name="inFieldClass" />
              <scope name="indexOf" ilk="function" signature="indexOf(inKey)" doc="">
                <variable ilk="argument" name="inKey" />
              </scope>
              <variable name="defaultValue" doc="" />
            </scope>
            <scope name="compare" ilk="function" signature="compare(a,b)" doc="">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope name="Model" ilk="function" doc="Base abstract grid data model. Makes no assumptions about the structure of grid data." signature="Model(inFields,inData)">
              <variable ilk="argument" name="inFields" />
              <variable ilk="argument" name="inData" />
              <scope name="count" doc="" />
              <scope name="updating" doc="" />
              <scope name="observer" ilk="function" signature="observer(inObserver,inPrefix)" doc="">
                <variable ilk="argument" name="inObserver" />
                <variable ilk="argument" name="inPrefix" />
              </scope>
              <scope name="notObserver" ilk="function" signature="notObserver(inObserver)" doc="">
                <variable ilk="argument" name="inObserver" />
              </scope>
              <scope name="notify" ilk="function" signature="notify(inMsg,inArgs)" doc="">
                <variable ilk="argument" name="inMsg" />
                <variable ilk="argument" name="inArgs" />
              </scope>
              <scope name="clear" ilk="function" doc="" />
              <scope name="beginUpdate" ilk="function" doc="" />
              <scope name="endUpdate" ilk="function" doc="" />
              <scope name="clearData" ilk="function" doc="" />
              <scope name="change" ilk="function" doc="" />
              <scope name="insertion" ilk="function" doc="" />
              <scope name="removal" ilk="function" doc="" />
              <scope name="insert" ilk="function" signature="insert(inData)" doc="">
                <variable ilk="argument" name="inData" citdl=", index" />
              </scope>
              <scope name="remove" ilk="function" signature="remove(inData)" doc="">
                <variable ilk="argument" name="inData" citdl=", index" />
              </scope>
              <scope name="canSort" ilk="function" doc="" />
              <scope name="generateComparator" ilk="function" signature="generateComparator(inCompare,inField,inTrueForAscend,inSubCompare)" doc="">
                <variable ilk="argument" name="inCompare" />
                <variable ilk="argument" name="inField" />
                <variable ilk="argument" name="inTrueForAscend" />
                <variable ilk="argument" name="inSubCompare" />
              </scope>
              <scope name="makeComparator" ilk="function" signature="makeComparator(inIndices)" doc="">
                <variable ilk="argument" name="inIndices" />
              </scope>
              <scope name="sort" doc="" />
              <scope name="dummy" doc="" />
              <variable name="observers" doc="" />
              <variable name="fields" doc="" />
            </scope>
            <scope name="Rows" ilk="function" doc="">
              <scope name="allChange" ilk="function" doc="" />
              <scope name="rowChange" ilk="function" doc="" />
              <scope name="datumChange" ilk="function" doc="" />
              <scope name="beginModifyRow" ilk="function" signature="beginModifyRow(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="endModifyRow" ilk="function" signature="endModifyRow(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="cancelModifyRow" ilk="function" signature="cancelModifyRow(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
            </scope>
            <scope name="Table" ilk="function" doc="Basic grid data model for static data in the form of an array of rows that are arrays of cell data">
              <variable name="colCount" doc="" />
              <variable name="data" doc="" />
              <variable name="cache" doc="" />
              <scope name="measure" ilk="function" doc="" />
              <scope name="getRowCount" ilk="function" doc="" />
              <scope name="getColCount" ilk="function" doc="" />
              <scope name="badIndex" ilk="function" signature="badIndex(inCaller,inDescriptor)" doc="">
                <variable ilk="argument" name="inCaller" />
                <variable ilk="argument" name="inDescriptor" />
              </scope>
              <scope name="isGoodIndex" ilk="function" signature="isGoodIndex(inRowIndex,inColIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope name="getRow" ilk="function" signature="getRow(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="copyRow" ilk="function" signature="copyRow(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="getDatum" ilk="function" signature="getDatum(inRowIndex,inColIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope name="get" ilk="function" doc="" />
              <scope name="setData" ilk="function" signature="setData(inData)" doc="">
                <variable ilk="argument" name="inData" />
              </scope>
              <scope name="setRow" ilk="function" signature="setRow(inData,inRowIndex)" doc="">
                <variable ilk="argument" name="inData" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="setDatum" ilk="function" signature="setDatum(inDatum,inRowIndex,inColIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope name="set" ilk="function" doc="" />
              <scope name="setRows" ilk="function" signature="setRows(inData,inRowIndex)" doc="">
                <variable ilk="argument" name="inData" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="update" ilk="function" signature="update(inOldData,inNewData,inRowIndex)" doc="">
                <variable ilk="argument" name="inOldData" />
                <variable ilk="argument" name="inNewData" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="_insert" ilk="function" signature="_insert(inData,inRowIndex)" attributes="private" doc="">
                <variable ilk="argument" name="inData" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="_remove" ilk="function" signature="_remove(inKeys)" attributes="private" doc="">
                <variable ilk="argument" name="inKeys" />
              </scope>
              <scope name="sort" ilk="function" doc="" />
              <scope name="swap" ilk="function" signature="swap(inIndexA,inIndexB)" doc="">
                <variable ilk="argument" name="inIndexA" />
                <variable ilk="argument" name="inIndexB" />
              </scope>
              <scope name="dummy" doc="" />
              <variable name="count" doc="" />
            </scope>
            <scope name="Objects" ilk="function" signature="Objects(inFields,inData,inKey)" doc="">
              <variable ilk="argument" name="inFields" />
              <variable ilk="argument" name="inData" />
              <variable ilk="argument" name="inKey" />
              <scope name="allChange" ilk="function" doc="" />
              <scope name="autoAssignFields" ilk="function" doc="" />
              <scope name="setData" ilk="function" signature="setData(inData)" doc="">
                <variable ilk="argument" name="inData" />
              </scope>
              <scope name="getDatum" ilk="function" signature="getDatum(inRowIndex,inColIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <variable name="data" doc="" />
            </scope>
            <scope name="Dynamic" ilk="function" doc="Grid data model for dynamic data such as data retrieved from a server. Retrieves data automatically when requested and provides notification when data is received">
              <variable name="page" doc="" />
              <variable name="pages" doc="" />
              <scope name="rowsPerPage" doc="" />
              <variable name="requests" doc="" />
              <variable name="bop" doc="" />
              <variable name="eop" doc="" />
              <scope name="clearData" ilk="function" doc="" />
              <scope name="getRowCount" ilk="function" doc="" />
              <scope name="getColCount" ilk="function" doc="" />
              <scope name="setRowCount" ilk="function" signature="setRowCount(inCount)" doc="">
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope name="requestsPending" ilk="function" signature="requestsPending(inBoolean)" doc="">
                <variable ilk="argument" name="inBoolean" />
              </scope>
              <scope name="rowToPage" ilk="function" signature="rowToPage(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="pageToRow" ilk="function" signature="pageToRow(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="requestRows" ilk="function" signature="requestRows(inRowIndex,inCount)" doc="stub. Fill in to perform actual data row fetching logic. The returning logic must provide the data back to the system via setRow">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope name="rowsProvided" ilk="function" signature="rowsProvided(inRowIndex,inCount)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope name="requestPage" ilk="function" signature="requestPage(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="needPage" ilk="function" signature="needPage(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="preparePage" ilk="function" signature="preparePage(inRowIndex,inColIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope name="isRowLoaded" ilk="function" signature="isRowLoaded(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="removePages" ilk="function" signature="removePages(inRowIndexes)" doc="">
                <variable ilk="argument" name="inRowIndexes" />
              </scope>
              <scope name="remove" ilk="function" signature="remove(inRowIndexes)" doc="">
                <variable ilk="argument" name="inRowIndexes" />
              </scope>
              <scope name="getRow" ilk="function" signature="getRow(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="getDatum" ilk="function" signature="getDatum(inRowIndex,inColIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope name="setDatum" ilk="function" signature="setDatum(inDatum,inRowIndex,inColIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope name="canSort" ilk="function" doc="" />
              <variable name="count" doc="" />
            </scope>
            <scope name="DojoData" ilk="function" doc="A grid data model for dynamic data retreived from a store which implements the dojo.data API set. Retrieves data automatically when requested and provides notification when data is received" signature="DojoData(inFields,inData,args)">
              <variable ilk="argument" name="inFields" />
              <variable ilk="argument" name="inData" />
              <variable ilk="argument" name="args" />
              <scope name="markupFactory" ilk="function" signature="markupFactory(args,node)" doc="">
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="node" />
              </scope>
              <variable name="query" citdl="Object" doc="">
                <scope name="name" doc="" />
              </variable>
              <variable name="store" doc="" />
              <variable name="_currentlyProcessing" attributes="private" doc="" />
              <variable name="_canNotify" attributes="private" doc="" />
              <variable name="_canWrite" attributes="private" doc="" />
              <variable name="_canIdentify" attributes="private" doc="" />
              <variable name="_rowIdentities" citdl="Object" attributes="private" doc="" />
              <scope name="clientSort" doc="" />
              <variable name="sortFields" doc="" />
              <scope name="queryOptions" doc="" />
              <scope name="setData" ilk="function" signature="setData(inData)" doc="">
                <variable ilk="argument" name="inData" />
              </scope>
              <scope name="setRowCount" ilk="function" signature="setRowCount(inCount)" doc="">
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope name="beginReturn" ilk="function" signature="beginReturn(inCount)" doc="">
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope name="_setupFields" ilk="function" signature="_setupFields(dataItem)" attributes="private" doc="">
                <variable ilk="argument" name="dataItem" />
              </scope>
              <scope name="_getRowFromItem" ilk="function" signature="_getRowFromItem(item)" attributes="private" doc="">
                <variable ilk="argument" name="item" />
              </scope>
              <scope name="_createRow" ilk="function" signature="_createRow(item)" attributes="private" doc="">
                <variable ilk="argument" name="item" />
              </scope>
              <scope name="processRows" ilk="function" signature="processRows(items,request)" doc="">
                <variable ilk="argument" name="items" />
                <variable ilk="argument" name="request" />
              </scope>
              <scope name="requestRows" ilk="function" signature="requestRows(inRowIndex,inCount)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope name="getDatum" ilk="function" signature="getDatum(inRowIndex,inColIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope name="setDatum" ilk="function" signature="setDatum(inDatum,inRowIndex,inColIndex)" doc="">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope name="copyRow" ilk="function" signature="copyRow(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="_attrCompare" ilk="function" signature="_attrCompare(cache,data)" attributes="private" doc="">
                <variable ilk="argument" name="cache" />
                <variable ilk="argument" name="data" />
              </scope>
              <scope name="endModifyRow" ilk="function" signature="endModifyRow(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="cancelModifyRow" ilk="function" signature="cancelModifyRow(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="_setRowId" ilk="function" signature="_setRowId(item,offset,idx)" attributes="private" doc="">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="offset" />
                <variable ilk="argument" name="idx" />
              </scope>
              <scope name="_getRowId" ilk="function" signature="_getRowId(item,isNotItem)" doc="Function determine the row index for a particular item" attributes="private">
                <variable ilk="argument" name="item" citdl="The" doc="store item to examine to determine row index." />
                <variable ilk="argument" name="isNotItem" citdl="Boolean" doc="flag to indicate if the item passed is a store item or not." />
              </scope>
              <scope name="_storeDatumChange" ilk="function" signature="_storeDatumChange(item,attr,oldVal,newVal)" attributes="private" doc="">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="attr" />
                <variable ilk="argument" name="oldVal" />
                <variable ilk="argument" name="newVal" />
              </scope>
              <scope name="_storeDatumDelete" ilk="function" signature="_storeDatumDelete(item)" attributes="private" doc="">
                <variable ilk="argument" name="item" />
              </scope>
              <scope name="_storeDatumNew" ilk="function" signature="_storeDatumNew(item)" attributes="private" doc="">
                <variable ilk="argument" name="item" />
              </scope>
              <scope name="insert" ilk="function" signature="insert(item,index)" doc="">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="index" />
              </scope>
              <scope name="_insertItem" ilk="function" signature="_insertItem(storeItem,index)" attributes="private" doc="">
                <variable ilk="argument" name="storeItem" />
                <variable ilk="argument" name="index" />
              </scope>
              <scope name="datumChange" ilk="function" signature="datumChange(value,rowIdx,colIdx)" doc="">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="rowIdx" />
                <variable ilk="argument" name="colIdx" />
              </scope>
              <scope name="insertion" ilk="function" doc="" />
              <scope name="removal" ilk="function" doc="" />
              <scope name="remove" ilk="function" signature="remove(inRowIndexes)" doc="Function to remove a set of items from the store based on the row index.">
                <variable ilk="argument" name="inRowIndexes" citdl="An" doc="array of row indexes from the grid to remove from the store. Call delete on the store" />
              </scope>
              <scope name="_removeItems" ilk="function" signature="_removeItems(inRowIndexes)" doc="Function to remove a set of items from the store based on the row index." attributes="private">
                <variable ilk="argument" name="inRowIndexes" citdl="array" doc="An array of row indexes from the grid to remove from the store." />
              </scope>
              <scope name="canSort" ilk="function" doc="" />
              <scope name="sort" ilk="function" signature="sort(colIndex)" doc="">
                <variable ilk="argument" name="colIndex" />
              </scope>
              <scope name="refresh" ilk="function" doc="Function to cause the model to re-query the store and rebuild the current viewport." />
              <scope name="clearData" ilk="function" signature="clearData(keepStore)" doc="">
                <variable ilk="argument" name="keepStore" citdl="boolean" />
              </scope>
              <scope name="processError" ilk="function" signature="processError(error,request)" doc="Hook function to trap error messages from the store and emit them. Intended for connecting to and handling the error object or at least reporting it.">
                <variable ilk="argument" name="error" citdl="The" doc="error object returned by the store when a problem occurred." />
                <variable ilk="argument" name="request" citdl="The" doc="request object that caused the error." />
              </scope>
              <variable name="data" doc="" />
              <variable name="count" doc="" />
              <scope name="fields">
                <variable name="_nameMaps" attributes="private" doc="" />
              </scope>
              <variable name="_disableNew" attributes="private" doc="" />
              <variable name="pages" doc="" />
              <variable name="bop" doc="" />
            </scope>
            <scope name="table" doc="" />
            <scope name="dynamic" doc="" />
          </scope>
          <scope name="Builder" ilk="function" doc="Base class to produce html for grid content. Also provide event decoration, providing grid related information inside the event object passed to grid events." signature="Builder(inView)">
            <variable ilk="argument" name="inView" />
            <variable name="view" doc="" />
            <scope name="_table" attributes="private" doc="" />
            <scope name="generateCellMarkup" ilk="function" signature="generateCellMarkup(inCell,inMoreStyles,inMoreClasses,isHeader)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inMoreStyles" />
              <variable ilk="argument" name="inMoreClasses" />
              <variable ilk="argument" name="isHeader" />
            </scope>
            <scope name="isCellNode" ilk="function" signature="isCellNode(inNode)" doc="">
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope name="getCellNodeIndex" ilk="function" signature="getCellNodeIndex(inCellNode)" doc="">
              <variable ilk="argument" name="inCellNode" />
            </scope>
            <scope name="getCellNode" ilk="function" signature="getCellNode(inRowNode,inCellIndex)" doc="">
              <variable ilk="argument" name="inRowNode" />
              <variable ilk="argument" name="inCellIndex" />
            </scope>
            <scope name="findCellTarget" ilk="function" signature="findCellTarget(inSourceNode,inTopNode)" doc="">
              <variable ilk="argument" name="inSourceNode" />
              <variable ilk="argument" name="inTopNode" />
            </scope>
            <scope name="baseDecorateEvent" ilk="function" signature="baseDecorateEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="findTarget" ilk="function" signature="findTarget(inSource,inTag)" doc="">
              <variable ilk="argument" name="inSource" />
              <variable ilk="argument" name="inTag" />
            </scope>
            <scope name="findRowTarget" ilk="function" signature="findRowTarget(inSource)" doc="">
              <variable ilk="argument" name="inSource" />
            </scope>
            <scope name="isIntraNodeEvent" ilk="function" signature="isIntraNodeEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="isIntraRowEvent" ilk="function" signature="isIntraRowEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="dispatchEvent" ilk="function" signature="dispatchEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="domouseover" ilk="function" signature="domouseover(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="domouseout" ilk="function" signature="domouseout(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="domousedown" ilk="function" signature="domousedown(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="lastOverCellNode" doc="" />
            <variable name="grid" doc="" />
          </scope>
          <scope name="contentBuilder" ilk="function" doc="Produces html for grid data content. Owned by grid and used internally for rendering data. Override to implement custom rendering.">
            <scope name="update" ilk="function" doc="" />
            <scope name="prepareHtml" ilk="function" doc="" />
            <scope name="generateHtml" ilk="function" signature="generateHtml(inDataIndex,inRowIndex)" returns="String" attributes="private" doc="">
              <variable ilk="argument" name="inDataIndex" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="decorateEvent" ilk="function" signature="decorateEvent(e)" returns="Boolean" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope name="headerBuilder" ilk="function" doc="Produces html for grid header content. Owned by grid and used internally for rendering data. Override to implement custom rendering.">
            <variable name="bogusClickTime" doc="" />
            <scope name="overResizeWidth" doc="" />
            <scope name="minColWidth" doc="" />
            <scope name="_table" attributes="private" doc="" />
            <scope name="update" ilk="function" doc="" />
            <scope name="generateHtml" ilk="function" signature="generateHtml(inGetValue,inValue)" doc="">
              <variable ilk="argument" name="inGetValue" />
              <variable ilk="argument" name="inValue" />
            </scope>
            <scope name="getCellX" ilk="function" signature="getCellX(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="decorateEvent" ilk="function" signature="decorateEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="prepareResize" ilk="function" signature="prepareResize(e,mod)" doc="">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="mod" />
            </scope>
            <scope name="canResize" ilk="function" signature="canResize(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="overLeftResizeArea" ilk="function" signature="overLeftResizeArea(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="overRightResizeArea" ilk="function" signature="overRightResizeArea(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="domousemove" ilk="function" signature="domousemove(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="domousedown" ilk="function" signature="domousedown(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doclick" ilk="function" signature="doclick(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="beginColumnResize" ilk="function" signature="beginColumnResize(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="doResizeColumn" ilk="function" signature="doResizeColumn(inDrag,inEvent)" doc="">
              <variable ilk="argument" name="inDrag" />
              <variable ilk="argument" name="inEvent" />
            </scope>
            <scope name="endResizeColumn" ilk="function" signature="endResizeColumn(inDrag)" doc="">
              <variable ilk="argument" name="inDrag" />
            </scope>
            <variable name="tableMap" doc="" />
          </scope>
          <scope name="tableMap" ilk="function" doc="Maps an html table into a structure parsable for information about cell row and col spanning. Used by headerBuilder" signature="tableMap(inRows)">
            <variable ilk="argument" name="inRows" />
            <variable name="map" doc="" />
            <scope name="mapRows" ilk="function" signature="mapRows(inRows)" doc="Map table topography">
              <variable ilk="argument" name="inRows" />
            </scope>
            <scope name="dumpMap" ilk="function" doc="" />
            <scope name="getMapCoords" ilk="function" signature="getMapCoords(inRow,inCol)" doc="Find node's map coords by it's structure coords">
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inCol" />
            </scope>
            <scope name="getNode" ilk="function" signature="getNode(inTable,inRow,inCol)" doc="Find a node in inNode's table with the given structure coords">
              <variable ilk="argument" name="inTable" />
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inCol" />
            </scope>
            <scope name="_findOverlappingNodes" ilk="function" signature="_findOverlappingNodes(inTable,inRow,inCol)" attributes="private" doc="">
              <variable ilk="argument" name="inTable" />
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inCol" />
            </scope>
            <scope name="findOverlappingNodes" ilk="function" signature="findOverlappingNodes(inNode)" doc="">
              <variable ilk="argument" name="inNode" />
            </scope>
          </scope>
          <scope name="rowIndexTag" doc="" />
          <scope name="gridViewTag" doc="" />
          <scope name="cell" ilk="function" doc="Respresents a grid cell and contains information about column options and methods for retrieving cell related information. Each column in a grid layout has a cell object and most events and many methods provide access to these objects." signature="cell(inProps)">
            <variable ilk="argument" name="inProps" />
            <scope name="styles" doc="" />
            <scope name="format" ilk="function" signature="format(inRowIndex)" doc="provides the html for a given grid cell.">
              <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              <variable name="return_summary" />
            </scope>
            <scope name="getNode" ilk="function" signature="getNode(inRowIndex)" doc="gets the dom node for a given grid cell.">
              <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              <variable name="return_summary" />
            </scope>
            <scope name="isFlex" ilk="function" doc="" />
            <scope name="applyEdit" ilk="function" signature="applyEdit(inValue,inRowIndex)" doc="">
              <variable ilk="argument" name="inValue" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="cancelEdit" ilk="function" signature="cancelEdit(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="_onEditBlur" ilk="function" signature="_onEditBlur(inRowIndex)" attributes="private" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="registerOnBlur" ilk="function" signature="registerOnBlur(inNode,inRowIndex)" doc="">
              <variable ilk="argument" name="inNode" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <variable name="editor" doc="" />
          </scope>
          <variable name="drag" citdl="Object" doc="" />
          <scope name="edit" ilk="function" doc="Controls grid cell editing process. Owned by grid and used internally for editing." signature="edit(inGrid)">
            <variable ilk="argument" name="inGrid" citdl="dojox.Grid" doc="The dojox.Grid this editor should be attached to" />
            <variable name="info" citdl="Object" doc="">
              <variable name="rowIndex" doc="" />
            </variable>
            <scope name="destroy" ilk="function" doc="" />
            <scope name="cellFocus" ilk="function" signature="cellFocus(inCell,inRowIndex)" doc="Invoke editing when cell is focused">
              <variable ilk="argument" name="inCell" citdl="cell" doc="object Grid cell object" />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
            </scope>
            <scope name="rowClick" ilk="function" signature="rowClick(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="styleRow" ilk="function" signature="styleRow(inRow)" doc="">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope name="dispatchEvent" ilk="function" signature="dispatchEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="isEditing" ilk="function" doc="Indicates editing state of the grid.">
              <variable name="return_summary" />
            </scope>
            <scope name="isEditCell" ilk="function" signature="isEditCell(inRowIndex,inCellIndex)" doc="Indicates if the given cell is being edited.">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
              <variable ilk="argument" name="inCellIndex" citdl="Integer" doc="Grid cell index" />
              <variable name="return_summary" />
            </scope>
            <scope name="isEditRow" ilk="function" signature="isEditRow(inRowIndex)" doc="Indicates if the given row is being edited.">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
              <variable name="return_summary" />
            </scope>
            <scope name="setEditCell" ilk="function" signature="setEditCell(inCell,inRowIndex)" doc="Set the given cell to be edited">
              <variable ilk="argument" name="inCell" citdl="Object" doc="Grid cell object" />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
            </scope>
            <scope name="_focusEditor" ilk="function" signature="_focusEditor(inCell,inRowIndex)" attributes="private" doc="">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="focusEditor" ilk="function" doc="" />
            <scope name="_boomerangWindow" attributes="private" doc="" />
            <scope name="_shouldCatchBoomerang" ilk="function" attributes="private" doc="" />
            <scope name="_boomerangFocus" ilk="function" attributes="private" doc="" />
            <scope name="_doCatchBoomerang" ilk="function" attributes="private" doc="" />
            <scope name="start" ilk="function" signature="start(inCell,inRowIndex,inEditing)" doc="">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inEditing" />
            </scope>
            <scope name="_editorDo" ilk="function" signature="_editorDo(inMethod)" attributes="private" doc="">
              <variable ilk="argument" name="inMethod" />
            </scope>
            <scope name="editorApply" ilk="function" doc="" />
            <scope name="editorCancel" ilk="function" doc="" />
            <scope name="applyCellEdit" ilk="function" signature="applyCellEdit(inValue,inCell,inRowIndex)" doc="">
              <variable ilk="argument" name="inValue" />
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="applyRowEdit" ilk="function" doc="" />
            <scope name="apply" ilk="function" doc="Apply a grid edit" />
            <scope name="cancel" ilk="function" doc="Cancel a grid edit" />
            <scope name="save" ilk="function" signature="save(inRowIndex,inView)" doc="Save the grid editing state">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
              <variable ilk="argument" name="inView" citdl="Object" doc="Grid view" />
            </scope>
            <scope name="restore" ilk="function" signature="restore(inView,inRowIndex)" doc="Restores the grid editing state">
              <variable ilk="argument" name="inView" citdl="Object" doc="Grid view" />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
            </scope>
            <variable name="_catchBoomerang" attributes="private" doc="" />
            <variable name="grid" doc="" />
            <variable name="connections" doc="" />
          </scope>
          <scope name="focus" ilk="function" doc="Controls grid cell focus. Owned by grid and used internally for focusing. Note: grid cell actually receives keyboard input only when cell is being edited." signature="focus(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <variable name="tabbingOut" doc="" />
            <scope name="focusClass" doc="" />
            <variable name="focusView" doc="" />
            <scope name="initFocusView" ilk="function" doc="" />
            <scope name="isFocusCell" ilk="function" signature="isFocusCell(inCell,inRowIndex)" doc="states if the given cell is focused">
              <variable ilk="argument" name="inCell" citdl="object" doc="grid cell object" />
              <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              <variable name="return_summary" />
            </scope>
            <scope name="isLastFocusCell" ilk="function" doc="" />
            <scope name="isFirstFocusCell" ilk="function" doc="" />
            <scope name="isNoFocusCell" ilk="function" doc="" />
            <scope name="_focusifyCellNode" ilk="function" signature="_focusifyCellNode(inBork)" attributes="private" doc="">
              <variable ilk="argument" name="inBork" />
            </scope>
            <scope name="scrollIntoView" ilk="function" doc="" />
            <scope name="styleRow" ilk="function" signature="styleRow(inRow)" doc="">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope name="setFocusIndex" ilk="function" signature="setFocusIndex(inRowIndex,inCellIndex)" doc="focuses the given grid cell">
              <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
              <variable ilk="argument" name="inCellIndex" citdl="int" doc="grid cell index" />
            </scope>
            <scope name="setFocusCell" ilk="function" signature="setFocusCell(inCell,inRowIndex)" doc="focuses the given grid cell">
              <variable ilk="argument" name="inCell" citdl="object" doc="grid cell object" />
              <variable ilk="argument" name="inRowIndex" citdl="int" doc="grid row index" />
            </scope>
            <scope name="next" ilk="function" doc="focus next grid cell" />
            <scope name="previous" ilk="function" doc="focus previous grid cell" />
            <scope name="move" ilk="function" signature="move(inRowDelta,inColDelta)" doc="focus grid cell based on position relative to current focus">
              <variable ilk="argument" name="inRowDelta" citdl="int" doc="vertical distance from current focus" />
              <variable ilk="argument" name="inColDelta" citdl="int" doc="horizontal distance from current focus" />
            </scope>
            <scope name="previousKey" ilk="function" signature="previousKey(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="nextKey" ilk="function" signature="nextKey(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="tabOut" ilk="function" signature="tabOut(inFocusNode)" doc="">
              <variable ilk="argument" name="inFocusNode" />
            </scope>
            <scope name="focusGridView" ilk="function" doc="" />
            <scope name="focusGrid" ilk="function" signature="focusGrid(inSkipFocusCell)" doc="">
              <variable ilk="argument" name="inSkipFocusCell" />
            </scope>
            <scope name="doFocus" ilk="function" signature="doFocus(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="cell" doc="" />
            <variable name="rowIndex" doc="" />
            <variable name="grid" doc="" />
          </scope>
          <scope name="layout" ilk="function" doc="Controls grid cell layout. Owned by grid and used internally." signature="layout(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <variable name="cells" doc="" />
            <variable name="structure" doc="" />
            <scope name="defaultWidth" doc="" />
            <scope name="setStructure" ilk="function" signature="setStructure(inStructure)" doc="">
              <variable ilk="argument" name="inStructure" />
            </scope>
            <scope name="addViewDef" ilk="function" signature="addViewDef(inDef)" doc="">
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope name="addRowsDef" ilk="function" signature="addRowsDef(inDef)" doc="">
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope name="addRowDef" ilk="function" signature="addRowDef(inRowIndex,inDef)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope name="addCellDef" ilk="function" signature="addCellDef(inRowIndex,inCellIndex,inDef)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inCellIndex" />
              <variable ilk="argument" name="inDef" />
            </scope>
            <variable name="fieldIndex" doc="" />
            <variable name="cellCount" doc="" />
            <variable name="_defaultCellProps" attributes="private" doc="" />
            <variable name="grid" doc="" />
          </scope>
          <variable name="jobs" citdl="Object" doc="">
            <scope name="cancel" ilk="function" signature="cancel(inHandle)" doc="">
              <variable ilk="argument" name="inHandle" />
            </scope>
            <scope name="jobs" doc="" />
            <scope name="job" ilk="function" signature="job(inName,inDelay,inJob)" doc="">
              <variable ilk="argument" name="inName" />
              <variable ilk="argument" name="inDelay" />
              <variable ilk="argument" name="inJob" />
            </scope>
            <scope name="cancelJob" ilk="function" signature="cancelJob(inName)" doc="">
              <variable ilk="argument" name="inName" />
            </scope>
          </variable>
          <scope name="na" doc="" />
          <scope name="nop" ilk="function" doc="a null function?" />
          <scope name="getTdIndex" ilk="function" signature="getTdIndex(td)" doc="">
            <variable ilk="argument" name="td" />
          </scope>
          <scope name="getTrIndex" ilk="function" signature="getTrIndex(tr)" doc="">
            <variable ilk="argument" name="tr" />
          </scope>
          <scope name="getTr" ilk="function" signature="getTr(rowOwner,index)" doc="">
            <variable ilk="argument" name="rowOwner" />
            <variable ilk="argument" name="index" />
          </scope>
          <scope name="getTd" ilk="function" signature="getTd(rowOwner,rowIndex,cellIndex)" doc="">
            <variable ilk="argument" name="rowOwner" />
            <variable ilk="argument" name="rowIndex" />
            <variable ilk="argument" name="cellIndex" />
          </scope>
          <scope name="findTable" ilk="function" signature="findTable(node)" doc="">
            <variable ilk="argument" name="node" />
          </scope>
          <scope name="ascendDom" ilk="function" signature="ascendDom(inNode,inWhile)" doc="">
            <variable ilk="argument" name="inNode" />
            <variable ilk="argument" name="inWhile" />
          </scope>
          <scope name="makeNotTagName" ilk="function" signature="makeNotTagName(inTagName)" doc="">
            <variable ilk="argument" name="inTagName" />
          </scope>
          <scope name="fire" ilk="function" signature="fire(ob,ev,args)" doc="">
            <variable ilk="argument" name="ob" />
            <variable ilk="argument" name="ev" />
            <variable ilk="argument" name="args" />
          </scope>
          <scope name="setStyleText" ilk="function" signature="setStyleText(inNode,inStyleText)" doc="">
            <variable ilk="argument" name="inNode" />
            <variable ilk="argument" name="inStyleText" />
          </scope>
          <scope name="getStyleText" ilk="function" signature="getStyleText(inNode,inStyleText)" doc="">
            <variable ilk="argument" name="inNode" />
            <variable ilk="argument" name="inStyleText" />
          </scope>
          <scope name="setStyle" ilk="function" signature="setStyle(inElement,inStyle,inValue)" doc="">
            <variable ilk="argument" name="inElement" />
            <variable ilk="argument" name="inStyle" />
            <variable ilk="argument" name="inValue" />
          </scope>
          <scope name="setStyleHeightPx" ilk="function" signature="setStyleHeightPx(inElement,inHeight)" doc="">
            <variable ilk="argument" name="inElement" />
            <variable ilk="argument" name="inHeight" />
          </scope>
          <scope name="mouseEvents" doc="" />
          <scope name="keyEvents" doc="" />
          <scope name="funnelEvents" ilk="function" signature="funnelEvents(inNode,inObject,inMethod,inEvents)" doc="">
            <variable ilk="argument" name="inNode" />
            <variable ilk="argument" name="inObject" />
            <variable ilk="argument" name="inMethod" />
            <variable ilk="argument" name="inEvents" />
          </scope>
          <scope name="removeNode" ilk="function" signature="removeNode(inNode)" doc="">
            <variable ilk="argument" name="inNode" />
          </scope>
          <scope name="getScrollbarWidth" ilk="function" doc="">
            <variable name="_scrollBarWidth" attributes="private" doc="" />
          </scope>
          <scope name="getRef" ilk="function" signature="getRef(name,create,context)" doc="">
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="create" />
            <variable ilk="argument" name="context" />
          </scope>
          <scope name="getProp" ilk="function" signature="getProp(name,create,context)" doc="">
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="create" />
            <variable ilk="argument" name="context" />
          </scope>
          <scope name="indexInParent" ilk="function" signature="indexInParent(inNode)" doc="">
            <variable ilk="argument" name="inNode" />
          </scope>
          <scope name="cleanNode" ilk="function" signature="cleanNode(inNode)" doc="">
            <variable ilk="argument" name="inNode" />
          </scope>
          <scope name="getTagName" ilk="function" signature="getTagName(inNodeOrId)" doc="">
            <variable ilk="argument" name="inNodeOrId" />
          </scope>
          <scope name="nodeKids" ilk="function" signature="nodeKids(inNode,inTag)" doc="">
            <variable ilk="argument" name="inNode" />
            <variable ilk="argument" name="inTag" />
          </scope>
          <scope name="divkids" ilk="function" signature="divkids(inNode)" doc="">
            <variable ilk="argument" name="inNode" />
          </scope>
          <scope name="focusSelectNode" ilk="function" signature="focusSelectNode(inNode)" doc="">
            <variable ilk="argument" name="inNode" />
          </scope>
          <scope name="whenIdle" ilk="function" doc="" />
          <scope name="arrayCompare" ilk="function" signature="arrayCompare(inA,inB)" doc="">
            <variable ilk="argument" name="inA" />
            <variable ilk="argument" name="inB" />
          </scope>
          <scope name="arrayInsert" ilk="function" signature="arrayInsert(inArray,inIndex,inValue)" doc="">
            <variable ilk="argument" name="inArray" />
            <variable ilk="argument" name="inIndex" />
            <variable ilk="argument" name="inValue" />
          </scope>
          <scope name="arrayRemove" ilk="function" signature="arrayRemove(inArray,inIndex)" doc="">
            <variable ilk="argument" name="inArray" />
            <variable ilk="argument" name="inIndex" />
          </scope>
          <scope name="arraySwap" ilk="function" signature="arraySwap(inArray,inI,inJ)" doc="">
            <variable ilk="argument" name="inArray" />
            <variable ilk="argument" name="inI" />
            <variable ilk="argument" name="inJ" />
          </scope>
          <scope name="initTextSizePoll" ilk="function" signature="initTextSizePoll(inInterval)" doc="">
            <variable ilk="argument" name="inInterval" />
          </scope>
          <scope name="textSizeChanged" ilk="function" doc="" />
          <variable name="publicEvents" citdl="Object" doc="VirtualGrid mixin that provides default implementations for grid events.">
            <scope name="cellOverClass" citdl="String" doc="css class to apply to grid cells over which the cursor is placed." />
            <scope name="onKeyEvent" ilk="function" signature="onKeyEvent(e)" doc="top level handler for Key Events">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onContentEvent" ilk="function" signature="onContentEvent(e)" doc="Top level handler for Content events">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onHeaderEvent" ilk="function" signature="onHeaderEvent(e)" doc="Top level handler for header events">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onStyleRow" ilk="function" signature="onStyleRow(inRow)" doc="Perform row styling on a given row. Called whenever row styling is updated.">
              <variable ilk="argument" name="inRow" citdl="Object" doc="containing row state information: selected, true if the row is selcted; over: true of the mouse is over the row; odd: true if the row is odd. Use customClasses and customStyles to control row css classes and styles; both properties are strings." />
            </scope>
            <scope name="onKeyDown" ilk="function" signature="onKeyDown(e)" doc="Grid key event handler. By default enter begins editing and applies edits, escape cancels and edit, tab, shift-tab, and arrow keys move grid cell focus.">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onMouseOver" ilk="function" signature="onMouseOver(e)" doc="Event fired when mouse is over the grid.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onMouseOut" ilk="function" signature="onMouseOut(e)" doc="Event fired when mouse moves out of the grid.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onMouseDown" ilk="function" signature="onMouseDown(e)" doc="Event fired when mouse is down inside grid.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onMouseOverRow" ilk="function" signature="onMouseOverRow(e)" doc="Event fired when mouse is over any row (data or header).">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onMouseOutRow" ilk="function" signature="onMouseOutRow(e)" doc="Event fired when mouse moves out of any row (data or header).">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onMouseDownRow" ilk="function" signature="onMouseDownRow(e)" doc="Event fired when mouse is down inside grid row">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellMouseOver" ilk="function" signature="onCellMouseOver(e)" doc="Event fired when mouse is over a cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellMouseOut" ilk="function" signature="onCellMouseOut(e)" doc="Event fired when mouse moves out of a cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellMouseDown" ilk="function" signature="onCellMouseDown(e)" doc="Event fired when mouse is down in a header cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellClick" ilk="function" signature="onCellClick(e)" doc="Event fired when a cell is clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellDblClick" ilk="function" signature="onCellDblClick(e)" doc="Event fired when a cell is double-clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellContextMenu" ilk="function" signature="onCellContextMenu(e)" doc="Event fired when a cell context menu is accessed via mouse right click.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onCellFocus" ilk="function" signature="onCellFocus(inCell,inRowIndex)" doc="Event fired when a cell receives focus.">
              <variable ilk="argument" name="inCell" citdl="Object" doc="Cell object containing properties of the grid column." />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onRowClick" ilk="function" signature="onRowClick(e)" doc="Event fired when a row is clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onRowDblClick" ilk="function" signature="onRowDblClick(e)" doc="Event fired when a row is double clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onRowMouseOver" ilk="function" signature="onRowMouseOver(e)" doc="Event fired when mouse moves over a data row.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onRowMouseOut" ilk="function" signature="onRowMouseOut(e)" doc="Event fired when mouse moves out of a data row.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onRowMouseDown" ilk="function" signature="onRowMouseDown(e)" doc="Event fired when mouse is down in a row.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onRowContextMenu" ilk="function" signature="onRowContextMenu(e)" doc="Event fired when a row context menu is accessed via mouse right click.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderMouseOver" ilk="function" signature="onHeaderMouseOver(e)" doc="Event fired when mouse moves over the grid header.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderMouseOut" ilk="function" signature="onHeaderMouseOut(e)" doc="Event fired when mouse moves out of the grid header.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellMouseOver" ilk="function" signature="onHeaderCellMouseOver(e)" doc="Event fired when mouse moves over a header cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellMouseOut" ilk="function" signature="onHeaderCellMouseOut(e)" doc="Event fired when mouse moves out of a header cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellMouseDown" ilk="function" signature="onHeaderCellMouseDown(e)" doc="Event fired when mouse is down in a header cell.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderClick" ilk="function" signature="onHeaderClick(e)" doc="Event fired when the grid header is clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellClick" ilk="function" signature="onHeaderCellClick(e)" doc="Event fired when a header cell is clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderDblClick" ilk="function" signature="onHeaderDblClick(e)" doc="Event fired when the grid header is double clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellDblClick" ilk="function" signature="onHeaderCellDblClick(e)" doc="Event fired when a header cell is double clicked.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderCellContextMenu" ilk="function" signature="onHeaderCellContextMenu(e)" doc="Event fired when a header cell context menu is accessed via mouse right click.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onHeaderContextMenu" ilk="function" signature="onHeaderContextMenu(e)" doc="Event fired when the grid header context menu is accessed via mouse right click.">
              <variable ilk="argument" name="e" citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" />
            </scope>
            <scope name="onStartEdit" ilk="function" signature="onStartEdit(inCell,inRowIndex)" doc="Event fired when editing is started for a given grid cell">
              <variable ilk="argument" name="inCell" citdl="Object" doc="Cell object containing properties of the grid column." />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onApplyCellEdit" ilk="function" signature="onApplyCellEdit(inValue,inRowIndex,inFieldIndex)" doc="Event fired when editing is applied for a given grid cell">
              <variable ilk="argument" name="inValue" citdl="String" doc="Value from cell editor" />
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
              <variable ilk="argument" name="inFieldIndex" citdl="Integer" doc="Index in the grid's data model" />
            </scope>
            <scope name="onCancelEdit" ilk="function" signature="onCancelEdit(inRowIndex)" doc="Event fired when editing is cancelled for a given grid cell">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onApplyEdit" ilk="function" signature="onApplyEdit(inRowIndex)" doc="Event fired when editing is applied for a given grid row">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onCanSelect" ilk="function" signature="onCanSelect(inRowIndex)" doc="Event to determine if a grid row may be selected">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
              <variable name="return_summary" />
            </scope>
            <scope name="onCanDeselect" ilk="function" signature="onCanDeselect(inRowIndex)" doc="Event to determine if a grid row may be deselected">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
              <variable name="return_summary" />
            </scope>
            <scope name="onSelected" ilk="function" signature="onSelected(inRowIndex)" doc="Event fired when a grid row is selected">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onDeselected" ilk="function" signature="onDeselected(inRowIndex)" doc="Event fired when a grid row is deselected">
              <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the grid row" />
            </scope>
            <scope name="onSelectionChanged" ilk="function" doc="" />
          </variable>
          <scope name="rows" ilk="function" signature="rows(inGrid)" doc="">
            <variable ilk="argument" name="inGrid" />
            <scope name="linesToEms" doc="" />
            <scope name="defaultRowHeight" doc="" />
            <variable name="overRow" doc="" />
            <scope name="getHeight" ilk="function" signature="getHeight(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="getDefaultHeightPx" ilk="function" doc="">
              <variable name="return_summary" />
            </scope>
            <scope name="prepareStylingRow" ilk="function" signature="prepareStylingRow(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="styleRowNode" ilk="function" signature="styleRowNode(inRowIndex,inRowNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope name="applyStyles" ilk="function" signature="applyStyles(inRow)" doc="">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope name="updateStyles" ilk="function" signature="updateStyles(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="setOverRow" ilk="function" signature="setOverRow(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="isOver" ilk="function" signature="isOver(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <variable name="grid" doc="" />
          </scope>
          <scope name="scroller" ilk="function" doc="virtual scroller class, makes no assumption about shape of items being scrolled">
            <scope name="base" ilk="function" doc="virtual scrollbox, abstract class Content must in /rows/ Rows are managed in contiguous sets called /pages/ There are a fixed # of rows per page The minimum rendered unit is a page">
              <variable name="rowCount" doc="" />
              <scope name="defaultRowHeight" doc="" />
              <variable name="keepRows" doc="" />
              <scope name="contentNode" doc="" />
              <scope name="scrollboxNode" doc="">
                <variable name="scrollTop" doc="" />
                <variable name="onscroll" doc="" />
              </scope>
              <variable name="defaultPageHeight" doc="" />
              <variable name="keepPages" doc="" />
              <variable name="pageCount" doc="" />
              <variable name="windowHeight" doc="" />
              <variable name="firstVisibleRow" doc="" />
              <variable name="lastVisibleRow" doc="" />
              <variable name="page" doc="" />
              <variable name="pageTop" doc="" />
              <scope name="init" ilk="function" signature="init(inRowCount,inKeepRows,inRowsPerPage)" doc="">
                <variable ilk="argument" name="inRowCount" />
                <variable ilk="argument" name="inKeepRows" />
                <variable ilk="argument" name="inRowsPerPage" />
              </scope>
              <scope name="setKeepInfo" ilk="function" signature="setKeepInfo(inKeepRows)" doc="">
                <variable ilk="argument" name="inKeepRows" />
              </scope>
              <scope name="invalidate" ilk="function" doc="" />
              <scope name="updateRowCount" ilk="function" signature="updateRowCount(inRowCount)" doc="">
                <variable ilk="argument" name="inRowCount" />
              </scope>
              <scope name="pageExists" ilk="function" signature="pageExists(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="measurePage" ilk="function" signature="measurePage(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="positionPage" ilk="function" signature="positionPage(inPageIndex,inPos)" doc="">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inPos" />
              </scope>
              <scope name="repositionPages" ilk="function" signature="repositionPages(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="installPage" ilk="function" signature="installPage(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="preparePage" ilk="function" signature="preparePage(inPageIndex,inPos,inReuseNode)" doc="">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inPos" />
                <variable ilk="argument" name="inReuseNode" />
              </scope>
              <scope name="renderPage" ilk="function" signature="renderPage(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="removePage" ilk="function" signature="removePage(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="pacify" ilk="function" signature="pacify(inShouldPacify)" doc="">
                <variable ilk="argument" name="inShouldPacify" />
              </scope>
              <variable name="pacifying" doc="" />
              <scope name="pacifyTicks" doc="" />
              <scope name="setPacifying" ilk="function" signature="setPacifying(inPacifying)" doc="">
                <variable ilk="argument" name="inPacifying" />
              </scope>
              <scope name="startPacify" ilk="function" doc="" />
              <scope name="doPacify" ilk="function" doc="" />
              <scope name="endPacify" ilk="function" doc="" />
              <scope name="resize" ilk="function" doc="" />
              <scope name="calcLastPageHeight" ilk="function" doc="" />
              <scope name="updateContentHeight" ilk="function" signature="updateContentHeight(inDh)" doc="">
                <variable ilk="argument" name="inDh" />
              </scope>
              <scope name="updatePageHeight" ilk="function" signature="updatePageHeight(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="rowHeightChanged" ilk="function" signature="rowHeightChanged(inRowIndex)" doc="">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope name="invalidateNodes" ilk="function" doc="" />
              <scope name="createPageNode" ilk="function" doc="" />
              <scope name="getPageHeight" ilk="function" signature="getPageHeight(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="pushPage" ilk="function" signature="pushPage(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="popPage" ilk="function" doc="" />
              <scope name="findPage" ilk="function" signature="findPage(inTop)" doc="">
                <variable ilk="argument" name="inTop" />
              </scope>
              <scope name="buildPage" ilk="function" signature="buildPage(inPageIndex,inReuseNode,inPos)" doc="">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inReuseNode" />
                <variable ilk="argument" name="inPos" />
              </scope>
              <scope name="needPage" ilk="function" signature="needPage(inPageIndex,inPos)" doc="">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inPos" />
              </scope>
              <scope name="onscroll" ilk="function" doc="" />
              <scope name="scroll" ilk="function" signature="scroll(inTop)" doc="">
                <variable ilk="argument" name="inTop" />
              </scope>
              <scope name="getScrollBottom" ilk="function" signature="getScrollBottom(inTop)" doc="">
                <variable ilk="argument" name="inTop" />
              </scope>
              <scope name="processNodeEvent" ilk="function" signature="processNodeEvent(e,inNode)" doc="">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="inNode" />
              </scope>
              <scope name="processEvent" ilk="function" signature="processEvent(e)" doc="">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="dummy" doc="" />
              <variable name="rowsPerPage" doc="" />
              <variable name="pageHeights" doc="" />
              <variable name="height" doc="" />
              <variable name="startPacifyTicks" doc="" />
              <variable name="stack" doc="" />
            </scope>
            <scope name="renderRow" ilk="function" signature="renderRow(inRowIndex,inPageNode)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inPageNode" />
            </scope>
            <scope name="removeRow" ilk="function" signature="removeRow(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="getDefaultNodes" ilk="function" doc="" />
            <scope name="getDefaultPageNode" ilk="function" signature="getDefaultPageNode(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="positionPageNode" ilk="function" signature="positionPageNode(inNode,inPos)" doc="">
              <variable ilk="argument" name="inNode" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope name="getPageNodePosition" ilk="function" signature="getPageNodePosition(inNode)" doc="">
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope name="repositionPageNodes" ilk="function" signature="repositionPageNodes(inPageIndex,inNodes)" doc="">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="invalidatePageNode" ilk="function" signature="invalidatePageNode(inPageIndex,inNodes)" doc="">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="preparePageNode" ilk="function" signature="preparePageNode(inPageIndex,inReusePageIndex,inNodes)" doc="">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inReusePageIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="pageExists" ilk="function" signature="pageExists(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="measurePage" ilk="function" signature="measurePage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="positionPage" ilk="function" signature="positionPage(inPageIndex,inPos)" doc="">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope name="repositionPages" ilk="function" signature="repositionPages(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="preparePage" ilk="function" signature="preparePage(inPageIndex,inReuseNode)" doc="">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inReuseNode" />
            </scope>
            <scope name="installPage" ilk="function" signature="installPage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="destroyPage" ilk="function" signature="destroyPage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="renderPage" ilk="function" signature="renderPage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="removePage" ilk="function" signature="removePage(inPageIndex)" doc="">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope name="getPageRow" ilk="function" signature="getPageRow(inPage)" doc="">
              <variable ilk="argument" name="inPage" />
            </scope>
            <scope name="getLastPageRow" ilk="function" signature="getLastPageRow(inPage)" doc="">
              <variable ilk="argument" name="inPage" />
            </scope>
            <scope name="getFirstVisibleRowNodes" ilk="function" signature="getFirstVisibleRowNodes(inPage,inPageTop,inScrollTop,inNodes)" doc="">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inPageTop" />
              <variable ilk="argument" name="inScrollTop" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="getFirstVisibleRow" ilk="function" signature="getFirstVisibleRow(inPage,inPageTop,inScrollTop)" doc="">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inPageTop" />
              <variable ilk="argument" name="inScrollTop" />
            </scope>
            <scope name="getLastVisibleRowNodes" ilk="function" signature="getLastVisibleRowNodes(inPage,inBottom,inScrollBottom,inNodes)" doc="">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inBottom" />
              <variable ilk="argument" name="inScrollBottom" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="getLastVisibleRow" ilk="function" signature="getLastVisibleRow(inPage,inBottom,inScrollBottom)" doc="">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inBottom" />
              <variable ilk="argument" name="inScrollBottom" />
            </scope>
            <scope name="findTopRowForNodes" ilk="function" signature="findTopRowForNodes(inScrollTop,inNodes)" doc="">
              <variable ilk="argument" name="inScrollTop" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="findScrollTopForNodes" ilk="function" signature="findScrollTopForNodes(inRow,inNodes)" doc="">
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="findTopRow" ilk="function" signature="findTopRow(inScrollTop)" doc="">
              <variable ilk="argument" name="inScrollTop" />
            </scope>
            <scope name="findScrollTop" ilk="function" signature="findScrollTop(inRow)" doc="">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope name="dummy" doc="" />
            <variable name="_defaultRowHeight" attributes="private" doc="" />
            <variable name="rowsPerPage" doc="" />
            <variable name="offset" doc="" />
            <variable name="pageTop" doc="" />
            <variable name="pageNodes" doc="" />
            <scope name="columns" ilk="function" doc="Virtual scroller class that scrolls list of columns. Owned by grid and used internally for virtual scrolling." signature="columns(inContentNodes)">
              <variable ilk="argument" name="inContentNodes" />
              <scope name="setContentNodes" ilk="function" signature="setContentNodes(inNodes)" doc="">
                <variable ilk="argument" name="inNodes" />
              </scope>
              <scope name="getDefaultNodes" ilk="function" doc="" />
              <scope name="scroll" ilk="function" signature="scroll(inTop)" doc="">
                <variable ilk="argument" name="inTop" />
              </scope>
              <scope name="resize" ilk="function" doc="" />
              <scope name="positionPage" ilk="function" signature="positionPage(inPageIndex,inPos)" doc="">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inPos" />
              </scope>
              <scope name="preparePage" ilk="function" signature="preparePage(inPageIndex,inReuseNode)" doc="">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inReuseNode" />
              </scope>
              <scope name="installPage" ilk="function" signature="installPage(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="destroyPage" ilk="function" signature="destroyPage(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope name="renderPage" ilk="function" signature="renderPage(inPageIndex)" doc="">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <variable name="contentNodes" doc="" />
              <variable name="colCount" doc="" />
              <variable name="pageNodes" doc="" />
              <variable name="windowHeight" doc="" />
            </scope>
          </scope>
          <scope name="selection" ilk="function" doc="Manages row selection for grid. Owned by grid and used internally for selection. Override to implement custom selection." signature="selection(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <scope name="multiSelect" doc="" />
            <variable name="selected" doc="" />
            <variable name="updating" doc="" />
            <variable name="selectedIndex" doc="" />
            <scope name="onCanSelect" ilk="function" signature="onCanSelect(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="onCanDeselect" ilk="function" signature="onCanDeselect(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="onSelected" ilk="function" signature="onSelected(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="onDeselected" ilk="function" signature="onDeselected(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="onChanging" ilk="function" doc="" />
            <scope name="onChanged" ilk="function" doc="" />
            <scope name="isSelected" ilk="function" signature="isSelected(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="getFirstSelected" ilk="function" doc="" />
            <scope name="getNextSelected" ilk="function" signature="getNextSelected(inPrev)" doc="">
              <variable ilk="argument" name="inPrev" />
            </scope>
            <scope name="getSelected" ilk="function" doc="" />
            <scope name="getSelectedCount" ilk="function" doc="" />
            <scope name="beginUpdate" ilk="function" doc="" />
            <scope name="endUpdate" ilk="function" doc="" />
            <scope name="select" ilk="function" signature="select(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="addToSelection" ilk="function" signature="addToSelection(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="deselect" ilk="function" signature="deselect(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="setSelected" ilk="function" signature="setSelected(inIndex,inSelect)" doc="">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inSelect" />
            </scope>
            <scope name="toggleSelect" ilk="function" signature="toggleSelect(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="insert" ilk="function" signature="insert(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="remove" ilk="function" signature="remove(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="unselectAll" ilk="function" signature="unselectAll(inExcept)" doc="">
              <variable ilk="argument" name="inExcept" />
            </scope>
            <scope name="shiftSelect" ilk="function" signature="shiftSelect(inFrom,inTo)" doc="">
              <variable ilk="argument" name="inFrom" />
              <variable ilk="argument" name="inTo" />
            </scope>
            <scope name="clickSelect" ilk="function" signature="clickSelect(inIndex,inCtrlKey,inShiftKey)" doc="">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inCtrlKey" />
              <variable ilk="argument" name="inShiftKey" />
            </scope>
            <scope name="clickSelectEvent" ilk="function" signature="clickSelectEvent(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="clear" ilk="function" doc="" />
            <variable name="grid" doc="" />
          </scope>
          <scope name="views" ilk="function" doc="A collection of grid views. Owned by grid and used internally for managing grid views." signature="views(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <scope name="defaultWidth" doc="" />
            <variable name="views" doc="" />
            <scope name="resize" ilk="function" doc="" />
            <scope name="render" ilk="function" doc="" />
            <scope name="addView" ilk="function" signature="addView(inView)" doc="">
              <variable ilk="argument" name="inView" />
            </scope>
            <scope name="destroyViews" ilk="function" doc="" />
            <scope name="getContentNodes" ilk="function" doc="" />
            <scope name="forEach" ilk="function" signature="forEach(inCallback)" doc="">
              <variable ilk="argument" name="inCallback" />
            </scope>
            <scope name="onEach" ilk="function" signature="onEach(inMethod,inArgs)" doc="">
              <variable ilk="argument" name="inMethod" />
              <variable ilk="argument" name="inArgs" />
            </scope>
            <scope name="normalizeHeaderNodeHeight" ilk="function" doc="" />
            <scope name="normalizeRowNodeHeights" ilk="function" signature="normalizeRowNodeHeights(inRowNodes)" doc="">
              <variable ilk="argument" name="inRowNodes" />
            </scope>
            <scope name="resetHeaderNodeHeight" ilk="function" doc="" />
            <scope name="renormalizeRow" ilk="function" signature="renormalizeRow(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="getViewWidth" ilk="function" signature="getViewWidth(inIndex)" doc="">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="measureHeader" ilk="function" doc="" />
            <scope name="measureContent" ilk="function" doc="" />
            <scope name="findClient" ilk="function" signature="findClient(inAutoWidth)" doc="">
              <variable ilk="argument" name="inAutoWidth" />
            </scope>
            <scope name="arrange" ilk="function" signature="arrange(l,w)" doc="">
              <variable ilk="argument" name="l" />
              <variable ilk="argument" name="w" />
            </scope>
            <scope name="renderRow" ilk="function" signature="renderRow(inRowIndex,inNodes)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope name="rowRemoved" ilk="function" signature="rowRemoved(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="updateRow" ilk="function" signature="updateRow(inRowIndex,inHeight)" doc="">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inHeight" />
            </scope>
            <scope name="updateRowStyles" ilk="function" signature="updateRowStyles(inRowIndex)" doc="">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope name="setScrollTop" ilk="function" signature="setScrollTop(inTop)" doc="">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope name="getFirstScrollingView" ilk="function" doc="Returns the first grid view with a scroll bar" />
            <variable name="grid" doc="" />
          </scope>
          <variable name="util" citdl="Object" doc="">
            <scope name="na" doc="" />
            <scope name="mouseEvents" doc="" />
            <scope name="keyEvents" doc="" />
            <scope name="fire" ilk="function" signature="fire(ob,ev,args)" doc="">
              <variable ilk="argument" name="ob" />
              <variable ilk="argument" name="ev" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="setStyleHeightPx" ilk="function" signature="setStyleHeightPx(inElement,inHeight)" doc="">
              <variable ilk="argument" name="inElement" />
              <variable ilk="argument" name="inHeight" />
            </scope>
            <scope name="funnelEvents" ilk="function" signature="funnelEvents(inNode,inObject,inMethod,inEvents)" doc="">
              <variable ilk="argument" name="inNode" />
              <variable ilk="argument" name="inObject" />
              <variable ilk="argument" name="inMethod" />
              <variable ilk="argument" name="inEvents" />
            </scope>
            <scope name="removeNode" ilk="function" signature="removeNode(inNode)" doc="">
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope name="arrayCompare" ilk="function" signature="arrayCompare(inA,inB)" doc="">
              <variable ilk="argument" name="inA" />
              <variable ilk="argument" name="inB" />
            </scope>
            <scope name="arrayInsert" ilk="function" signature="arrayInsert(inArray,inIndex,inValue)" doc="">
              <variable ilk="argument" name="inArray" />
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inValue" />
            </scope>
            <scope name="arrayRemove" ilk="function" signature="arrayRemove(inArray,inIndex)" doc="">
              <variable ilk="argument" name="inArray" />
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope name="arraySwap" ilk="function" signature="arraySwap(inArray,inI,inJ)" doc="">
              <variable ilk="argument" name="inArray" />
              <variable ilk="argument" name="inI" />
              <variable ilk="argument" name="inJ" />
            </scope>
          </variable>
        </variable>
        <scope name="Grid" ilk="function" doc="A grid widget with virtual scrolling, cell editing, complex rows, sorting, fixed columns, sizeable columns, etc.">
          <variable name="model" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="destroy" ilk="function" doc="" />
          <scope name="_structureChanged" ilk="function" attributes="private" doc="" />
          <scope name="_setModel" ilk="function" signature="_setModel(inModel)" attributes="private" doc="">
            <variable ilk="argument" name="inModel" />
          </scope>
          <scope name="setModel" ilk="function" signature="setModel(inModel)" doc="Set the grid's data model">
            <variable ilk="argument" name="inModel" citdl="Object" doc="Model object, usually an instance of a dojox.grid.data.Model subclass" />
          </scope>
          <scope name="get" ilk="function" signature="get(inRowIndex)" doc="data socket (called in cell's context)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="modelAllChange" ilk="function" doc="" />
          <scope name="modelBeginUpdate" ilk="function" doc="" />
          <scope name="modelEndUpdate" ilk="function" doc="" />
          <scope name="modelRowChange" ilk="function" signature="modelRowChange(inData,inRowIndex)" doc="">
            <variable ilk="argument" name="inData" />
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="modelDatumChange" ilk="function" signature="modelDatumChange(inDatum,inRowIndex,inFieldIndex)" doc="">
            <variable ilk="argument" name="inDatum" />
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inFieldIndex" />
          </scope>
          <scope name="modelFieldsChange" ilk="function" doc="" />
          <scope name="modelInsertion" ilk="function" signature="modelInsertion(inRowIndex)" doc="">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="modelRemoval" ilk="function" signature="modelRemoval(inKeys)" doc="">
            <variable ilk="argument" name="inKeys" />
          </scope>
          <scope name="getCellName" ilk="function" signature="getCellName(inCell)" doc="">
            <variable ilk="argument" name="inCell" />
          </scope>
          <scope name="indexCellFields" ilk="function" doc="" />
          <scope name="refresh" ilk="function" doc="Re-render the grid, getting new data from the model" />
          <scope name="canSort" ilk="function" signature="canSort(inSortInfo)" doc="">
            <variable ilk="argument" name="inSortInfo" />
          </scope>
          <scope name="getSortField" ilk="function" signature="getSortField(inSortInfo)" doc="Retrieves the model field on which to sort data.">
            <variable ilk="argument" name="inSortInfo" citdl="Integer" doc="1-based grid column index; positive if sort is ascending, otherwise negative" />
          </scope>
          <scope name="sort" ilk="function" doc="" />
          <scope name="addRow" ilk="function" signature="addRow(inRowData,inIndex)" doc="">
            <variable ilk="argument" name="inRowData" />
            <variable ilk="argument" name="inIndex" />
          </scope>
          <scope name="removeSelectedRows" ilk="function" doc="" />
          <scope name="canEdit" ilk="function" signature="canEdit(inCell,inRowIndex)" doc="Determines if a given cell may be edited">
            <variable ilk="argument" name="inCell" citdl="Object" doc="A grid cell" />
            <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Grid row index" />
            <variable name="return_summary" />
          </scope>
          <scope name="doStartEdit" ilk="function" signature="doStartEdit(inCell,inRowIndex)" doc="">
            <variable ilk="argument" name="inCell" />
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="doApplyCellEdit" ilk="function" signature="doApplyCellEdit(inValue,inRowIndex,inFieldIndex)" doc="">
            <variable ilk="argument" name="inValue" />
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inFieldIndex" />
          </scope>
          <scope name="doCancelEdit" ilk="function" signature="doCancelEdit(inRowIndex)" doc="">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="doApplyEdit" ilk="function" signature="doApplyEdit(inRowIndex)" doc="">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="styleRowState" ilk="function" signature="styleRowState(inRow)" doc="Perform row styling">
            <variable ilk="argument" name="inRow" />
          </scope>
          <scope name="onStyleRow" ilk="function" signature="onStyleRow(inRow)" doc="">
            <variable ilk="argument" name="inRow" />
          </scope>
          <variable name="rowCount" doc="" />
          <scope name="markupFactory" ilk="function" signature="markupFactory(props,node,ctor)" returns="for vendetta" attributes="private" doc="">
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="ctor" />
          </scope>
        </scope>
        <scope name="VirtualGrid" ilk="function" doc="A grid widget with virtual scrolling, cell editing, complex rows, sorting, fixed columns, sizeable columns, etc.">
          <scope name="templatePath" doc="" />
          <scope name="classTag" citdl="String" doc="CSS class applied to the grid's domNode" />
          <variable name="get" ilk="function" signature="get(inRowIndex)" doc="Default data getter.">
            <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Row for which to provide data" />
            <variable name="return_summary" />
          </variable>
          <variable name="rowCount" citdl="settings" doc="Integer Number of rows to display." />
          <variable name="keepRows" citdl="Integer" doc="Number of rows to keep in the rendering cache." />
          <scope name="rowsPerPage" citdl="Integer" doc="Number of rows to render at a time." />
          <scope name="autoWidth" citdl="Boolean" doc="If autoWidth is true, grid width is automatically set to fit the data." />
          <scope name="autoHeight" citdl="Boolean" doc="If autoHeight is true, grid height is automatically set to fit the data." />
          <scope name="autoRender" citdl="Boolean" doc="If autoRender is true, grid will render itself after initialization." />
          <scope name="defaultHeight" citdl="String" doc="default height of the grid, measured in any valid css unit." />
          <variable name="structure" citdl="Object|String" doc="View layout defintion. Can be set to a layout object, or to the (string) name of a layout object." />
          <scope name="elasticView" citdl="Integer" doc="Override defaults and make the indexed grid view elastic, thus filling available horizontal space." />
          <scope name="singleClickEdit" citdl="boolean" doc="Single-click starts editing. Default is double-click" />
          <variable name="_click" attributes="private" doc="" />
          <variable name="sortInfo" doc="" />
          <scope name="themeable" doc="" />
          <scope name="buildRendering" ilk="function" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="destroy" ilk="function" doc="" />
          <variable name="styleChanged" ilk="function" doc="" />
          <scope name="_styleChanged" ilk="function" attributes="private" doc="" />
          <scope name="textSizeChanged" ilk="function" doc="" />
          <scope name="_textSizeChanged" ilk="function" attributes="private" doc="" />
          <scope name="sizeChange" ilk="function" doc="" />
          <scope name="renderOnIdle" ilk="function" doc="" />
          <scope name="createManagers" ilk="function" doc="create grid managers for various tasks including rows, focus, selection, editing  row manager" />
          <scope name="createScroller" ilk="function" doc="Creates a new virtual scroller" />
          <scope name="createLayout" ilk="function" doc="Creates a new Grid layout" />
          <scope name="createViews" ilk="function" doc="" />
          <scope name="createView" ilk="function" signature="createView(inClass)" doc="">
            <variable ilk="argument" name="inClass" />
          </scope>
          <scope name="buildViews" ilk="function" doc="" />
          <scope name="setStructure" ilk="function" signature="setStructure(inStructure)" doc="Install a new structure and rebuild the grid.">
            <variable ilk="argument" name="inStructure" citdl="Object" doc="Structure object defines the grid layout and provides various options for grid views and columns" />
          </scope>
          <scope name="_structureChanged" ilk="function" attributes="private" doc="" />
          <scope name="hasLayout" ilk="function" doc="" />
          <scope name="resize" ilk="function" signature="resize(sizeBox)" doc="Update the grid's rendering dimensions and resize it">
            <variable ilk="argument" name="sizeBox" citdl="Object" doc="{w: int, h: int, l: int, t: int}  FIXME: If grid is not sized explicitly, sometimes bogus scrollbars can appear in our container, which may require an extra call to 'resize' to sort out." />
          </scope>
          <scope name="_getPadBorder" ilk="function" attributes="private" doc="" />
          <scope name="_resize" ilk="function" attributes="private" doc="" />
          <scope name="adaptWidth" ilk="function" doc="" />
          <scope name="adaptHeight" ilk="function" doc="" />
          <scope name="render" ilk="function" doc="Render the grid, headers, and views. Edit and scrolling states are reset. To retain edit and scrolling states, see Update." />
          <scope name="prerender" ilk="function" doc="" />
          <scope name="postrender" ilk="function" doc="" />
          <scope name="postresize" ilk="function" doc="" />
          <scope name="renderRow" ilk="function" signature="renderRow(inRowIndex,inNodes)" doc="private, used internally to render rows">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inNodes" />
          </scope>
          <scope name="rowRemoved" ilk="function" signature="rowRemoved(inRowIndex)" doc="private, used internally to remove rows">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <variable name="invalidated" doc="">
            <variable name="rows" doc="" />
            <variable name="all" doc="" />
            <variable name="rowCount" doc="" />
          </variable>
          <variable name="updating" doc="" />
          <scope name="beginUpdate" ilk="function" doc="Use to make multiple changes to rows while queueing row updating." />
          <scope name="endUpdate" ilk="function" doc="Use after calling beginUpdate to render any changes made to rows." />
          <scope name="defaultUpdate" ilk="function" doc="" />
          <variable name="update" ilk="function" doc="Update the grid, retaining edit and scrolling states." />
          <scope name="updateRow" ilk="function" signature="updateRow(inRowIndex)" doc="Render a single row.">
            <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="Index of the row to render" />
          </scope>
          <scope name="updateRowCount" ilk="function" signature="updateRowCount(inRowCount)" doc="Change the number of rows.">
            <variable ilk="argument" name="inRowCount" citdl="int" doc="Number of rows in the grid." />
          </scope>
          <scope name="updateRowStyles" ilk="function" signature="updateRowStyles(inRowIndex)" doc="Update the styles for a row after it's state has changed.">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="rowHeightChanged" ilk="function" signature="rowHeightChanged(inRowIndex)" doc="Update grid when the height of a row has changed. Row height is handled automatically as rows are rendered. Use this function only to update a row's height outside the normal rendering process.">
            <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="index of the row that has changed height" />
          </scope>
          <scope name="fastScroll" citdl="Boolean" doc="flag modifies vertical scrolling behavior. Defaults to true but set to false for slower scroll performance but more immediate scrolling feedback" />
          <variable name="delayScroll" doc="" />
          <scope name="scrollRedrawThreshold" citdl="int" doc="pixel distance a user must scroll vertically to trigger grid scrolling." />
          <scope name="scrollTo" ilk="function" signature="scrollTo(inTop)" doc="Vertically scroll the grid to a given pixel position">
            <variable ilk="argument" name="inTop" citdl="Integer" doc="vertical position of the grid in pixels" />
          </scope>
          <scope name="finishScrollJob" ilk="function" doc="" />
          <scope name="setScrollTop" ilk="function" signature="setScrollTop(inTop)" doc="">
            <variable ilk="argument" name="inTop" />
          </scope>
          <scope name="scrollToRow" ilk="function" signature="scrollToRow(inRowIndex)" doc="Scroll the grid to a specific row.">
            <variable ilk="argument" name="inRowIndex" citdl="Integer" doc="grid row index" />
          </scope>
          <scope name="styleRowNode" ilk="function" signature="styleRowNode(inRowIndex,inRowNode)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope name="getCell" ilk="function" signature="getCell(inIndex)" doc="Retrieves the cell object for a given grid column.">
            <variable ilk="argument" name="inIndex" citdl="Integer" doc="Grid column index of cell to retrieve" />
            <variable name="return_summary" />
          </scope>
          <scope name="setCellWidth" ilk="function" signature="setCellWidth(inIndex,inUnitWidth)" doc="">
            <variable ilk="argument" name="inIndex" />
            <variable ilk="argument" name="inUnitWidth" />
          </scope>
          <scope name="getCellName" ilk="function" signature="getCellName(inCell)" doc="Returns the cell name of a passed cell" returns="String" attributes="private">
            <variable ilk="argument" name="inCell" />
          </scope>
          <scope name="canSort" ilk="function" signature="canSort(inSortInfo)" doc="Determines if the grid can be sorted">
            <variable ilk="argument" name="inSortInfo" citdl="Integer" doc="Sort information, 1-based index of column on which to sort, positive for an ascending sort and negative for a descending sort" />
            <variable name="return_summary" />
          </scope>
          <scope name="sort" ilk="function" doc="" />
          <scope name="getSortAsc" ilk="function" signature="getSortAsc(inSortInfo)" doc="Returns true if grid is sorted in an ascending direction." returns="Boolean" attributes="private">
            <variable ilk="argument" name="inSortInfo" />
          </scope>
          <scope name="getSortIndex" ilk="function" signature="getSortIndex(inSortInfo)" doc="Returns the index of the column on which the grid is sorted" returns="Integer" attributes="private">
            <variable ilk="argument" name="inSortInfo" />
          </scope>
          <scope name="setSortIndex" ilk="function" signature="setSortIndex(inIndex,inAsc)" doc="Sort the grid on a column in a specified direction">
            <variable ilk="argument" name="inIndex" citdl="Integer" doc="Column index on which to sort." />
            <variable ilk="argument" name="inAsc" citdl="Boolean" doc="If true, sort the grid in ascending order, otherwise in descending order" />
          </scope>
          <scope name="setSortInfo" ilk="function" signature="setSortInfo(inSortInfo)" doc="">
            <variable ilk="argument" name="inSortInfo" />
          </scope>
          <scope name="doKeyEvent" ilk="function" signature="doKeyEvent(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="_dispatch" ilk="function" signature="_dispatch(m,e)" attributes="private" doc="">
            <variable ilk="argument" name="m" />
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="dispatchKeyEvent" ilk="function" signature="dispatchKeyEvent(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="dispatchContentEvent" ilk="function" signature="dispatchContentEvent(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="dispatchHeaderEvent" ilk="function" signature="dispatchHeaderEvent(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="dokeydown" ilk="function" signature="dokeydown(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="doclick" ilk="function" signature="doclick(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="dodblclick" ilk="function" signature="dodblclick(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="docontextmenu" ilk="function" signature="docontextmenu(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="doheaderclick" ilk="function" signature="doheaderclick(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="doheaderdblclick" ilk="function" signature="doheaderdblclick(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="doheadercontextmenu" ilk="function" signature="doheadercontextmenu(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="doStartEdit" ilk="function" signature="doStartEdit(inCell,inRowIndex)" doc="">
            <variable ilk="argument" name="inCell" />
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="doApplyCellEdit" ilk="function" signature="doApplyCellEdit(inValue,inRowIndex,inFieldIndex)" doc="">
            <variable ilk="argument" name="inValue" />
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inFieldIndex" />
          </scope>
          <scope name="doCancelEdit" ilk="function" signature="doCancelEdit(inRowIndex)" doc="">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="doApplyEdit" ilk="function" signature="doApplyEdit(inRowIndex)" doc="">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="addRow" ilk="function" doc="Add a row to the grid." />
          <scope name="removeSelectedRows" ilk="function" doc="Remove the selected rows from the grid." />
          <scope name="domNode">
            <variable name="tabIndex" doc="" />
            <variable name="onReveal" doc="" />
            <variable name="onSizeChange" doc="" />
            <variable name="parentNode" doc="" />
          </scope>
          <variable name="rows" doc="" />
          <variable name="focus" doc="" />
          <variable name="selection" doc="" />
          <variable name="edit" doc="" />
          <variable name="scroller" doc="">
            <variable name="_pageIdPrefix" attributes="private" doc="" />
            <variable name="renderRow" doc="" />
            <variable name="removeRow" doc="" />
            <variable name="defaultRowHeight" doc="" />
            <variable name="windowHeight" doc="" />
          </variable>
          <variable name="layout" doc="" />
          <variable name="views" doc="">
            <variable name="createView" doc="" />
          </variable>
          <variable name="_sizeBox" attributes="private" doc="" />
          <variable name="_padBorder" attributes="private" doc="" />
          <scope name="viewsNode" />
          <variable name="fitTo" doc="" />
          <scope name="viewsHeaderNode" />
          <variable name="lastScrollTop" doc="" />
          <variable name="scrollTop" doc="" />
        </scope>
        <scope name="GridRowView" ilk="function" doc="Custom grid view. If used in a grid structure, provides a small selectable region for grid rows.">
          <scope name="defaultWidth" doc="" />
          <scope name="noscroll" doc="" />
          <scope name="padBorderWidth" doc="" />
          <scope name="buildRendering" ilk="function" doc="" />
          <scope name="getWidth" ilk="function" doc="" />
          <scope name="buildRowContent" ilk="function" signature="buildRowContent(inRowIndex,inRowNode)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope name="renderHeader" ilk="function" doc="" />
          <scope name="resize" ilk="function" doc="" />
          <scope name="adaptWidth" ilk="function" doc="" />
          <scope name="doStyleRowNode" ilk="function" signature="doStyleRowNode(inRowIndex,inRowNode)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope name="domouseover" ilk="function" signature="domouseover(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="domouseout" ilk="function" signature="domouseout(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="scrollboxNode" />
          <scope name="headerNode" />
        </scope>
        <scope name="GridView" ilk="function" doc="A collection of grid columns. A grid is comprised of a set of views that stack horizontally. Grid creates views automatically based on grid's layout structure. Users should typically not need to access individual views directly.">
          <scope name="defaultWidth" citdl="String" doc="Default widget of the view" />
          <variable name="viewWidth" citdl="String" doc="Width for the view, in valid css unit" />
          <scope name="templatePath" doc="" />
          <scope name="themeable" doc="" />
          <scope name="classTag" doc="" />
          <scope name="marginBottom" doc="" />
          <scope name="rowPad" doc="" />
          <scope name="postMixInProperties" ilk="function" doc="" />
          <scope name="postCreate" ilk="function" doc="" />
          <scope name="destroy" ilk="function" doc="" />
          <scope name="focus" ilk="function" doc="" />
          <scope name="setStructure" ilk="function" signature="setStructure(inStructure)" doc="">
            <variable ilk="argument" name="inStructure" />
          </scope>
          <scope name="testFlexCells" ilk="function" doc="" />
          <scope name="updateStructure" ilk="function" doc="" />
          <scope name="getScrollbarWidth" ilk="function" returns="Integer" attributes="private" doc="" />
          <scope name="getColumnsWidth" ilk="function" returns="Integer" attributes="private" doc="" />
          <scope name="getWidth" ilk="function" returns="String" attributes="private" doc="" />
          <scope name="getContentWidth" ilk="function" returns="String" attributes="private" doc="" />
          <scope name="render" ilk="function" doc="" />
          <scope name="renderHeader" ilk="function" doc="" />
          <scope name="_getHeaderContent" ilk="function" signature="_getHeaderContent(inCell)" attributes="private" doc="">
            <variable ilk="argument" name="inCell" />
          </scope>
          <scope name="resize" ilk="function" doc="" />
          <scope name="hasScrollbar" ilk="function" returns="Boolean" attributes="private" doc="" />
          <scope name="adaptHeight" ilk="function" doc="" />
          <scope name="adaptWidth" ilk="function" doc="" />
          <scope name="setSize" ilk="function" signature="setSize(w,h)" doc="">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
          </scope>
          <scope name="renderRow" ilk="function" signature="renderRow(inRowIndex,inHeightPx)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inHeightPx" />
          </scope>
          <scope name="createRowNode" ilk="function" signature="createRowNode(inRowIndex)" doc="">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="buildRow" ilk="function" signature="buildRow(inRowIndex,inRowNode)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope name="buildRowContent" ilk="function" signature="buildRowContent(inRowIndex,inRowNode)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope name="rowRemoved" doc="" />
          <scope name="getRowNode" ilk="function" signature="getRowNode(inRowIndex)" doc="">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope name="getCellNode" ilk="function" signature="getCellNode(inRowIndex,inCellIndex)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inCellIndex" />
          </scope>
          <scope name="styleRow" ilk="function" signature="styleRow(inRowIndex,inRowNode)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope name="styleRowNode" ilk="function" signature="styleRowNode(inRowIndex,inRowNode)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope name="doStyleRowNode" ilk="function" signature="doStyleRowNode(inRowIndex,inRowNode)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope name="updateRow" ilk="function" signature="updateRow(inRowIndex,inHeightPx,inPageNode)" doc="">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inHeightPx" />
            <variable ilk="argument" name="inPageNode" />
          </scope>
          <scope name="updateRowStyles" ilk="function" signature="updateRowStyles(inRowIndex)" doc="">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <variable name="lastTop" doc="" />
          <variable name="firstScroll" doc="" />
          <scope name="doscroll" ilk="function" signature="doscroll(inEvent)" doc="">
            <variable ilk="argument" name="inEvent" />
          </scope>
          <scope name="setScrollTop" ilk="function" signature="setScrollTop(inTop)" doc="">
            <variable ilk="argument" name="inTop" />
          </scope>
          <scope name="doContentEvent" ilk="function" signature="doContentEvent(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="doHeaderEvent" ilk="function" signature="doHeaderEvent(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="dispatchContentEvent" ilk="function" signature="dispatchContentEvent(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="dispatchHeaderEvent" ilk="function" signature="dispatchHeaderEvent(e)" doc="">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="setColWidth" ilk="function" signature="setColWidth(inIndex,inWidth)" doc="">
            <variable ilk="argument" name="inIndex" />
            <variable ilk="argument" name="inWidth" />
          </scope>
          <scope name="update" ilk="function" doc="" />
          <variable name="rowNodes" doc="" />
          <variable name="content" doc="" />
          <variable name="header" doc="" />
          <scope name="headerNodeContainer" />
          <variable name="structure" doc="" />
          <variable name="onBeforeRow" doc="" />
          <variable name="noscroll" doc="" />
          <scope name="scrollboxNode">
            <variable name="scrollLeft" doc="" />
            <variable name="scrollTop" doc="" />
          </scope>
          <variable name="flexCells" doc="" />
          <scope name="headerContentNode">
            <variable name="innerHTML" doc="" />
            <scope name="firstChild" />
          </scope>
          <variable name="contentWidth" doc="" />
          <scope name="headerNode">
            <variable name="scrollLeft" doc="" />
          </scope>
        </scope>
        <variable name="help" citdl="Object" doc="">
          <scope name="locate" ilk="function" signature="locate(searchFor,searchIn,maxResults)" doc="Search for dojo functionality that has something to do with the given string.">
            <variable ilk="argument" name="searchFor" citdl="String" />
            <variable ilk="argument" name="searchIn" citdl="String|Object|String[]|Object[]" doc="The namespaces to search in. Defaults to dojox.help._namespaces" />
            <variable ilk="argument" name="maxResults" citdl="Number" doc="The maximum number of results." />
          </scope>
          <scope name="refresh" ilk="function" signature="refresh(namespace,recursive)" doc="Useful if you reset some values, and want to restore their help function">
            <variable ilk="argument" name="namespace" citdl="String" doc="The string-representation of a namespace." />
            <variable ilk="argument" name="recursive" citdl="Boolean" doc="Whether to recurse through the namespace." />
          </scope>
          <scope name="noConflict" ilk="function" signature="noConflict(item)" doc="Use this function when you want to resolve the problems created by including a dojox.help package.">
            <variable ilk="argument" name="item" citdl="Object" doc="If you pass an item, only that item will be cleaned" />
          </scope>
          <scope name="init" ilk="function" signature="init(namespaces,noConflict)" doc="Should be called by one of the implementations. Runs startup code">
            <variable ilk="argument" name="namespaces" citdl="String[]" doc="Any namespaces to add to the default (dojox.help._namespaces)" />
            <variable ilk="argument" name="noConflict" citdl="Boolen" doc="Whether to start in noConflict mode" />
          </scope>
          <scope name="_noConflict" ilk="function" signature="_noConflict(item)" attributes="private" doc="">
            <variable ilk="argument" name="item" />
          </scope>
          <scope name="_namespaces" attributes="private" doc="" />
          <scope name="_rpc" attributes="private" doc="" />
          <scope name="_attributes" attributes="private" doc="" />
          <scope name="_clean" ilk="function" signature="_clean(self)" attributes="private" doc="">
            <variable ilk="argument" name="self" />
          </scope>
          <scope name="_displayLocated" ilk="function" signature="_displayLocated(located)" attributes="private" doc="">
            <variable ilk="argument" name="located" />
          </scope>
          <scope name="_displayHelp" ilk="function" signature="_displayHelp(loading,obj)" attributes="private" doc="">
            <variable ilk="argument" name="loading" />
            <variable ilk="argument" name="obj" />
          </scope>
          <scope name="_addVersion" ilk="function" signature="_addVersion(obj)" attributes="private" doc="">
            <variable ilk="argument" name="obj" />
          </scope>
          <scope name="_stripPrototype" ilk="function" signature="_stripPrototype(original)" attributes="private" doc="">
            <variable ilk="argument" name="original" />
          </scope>
          <scope name="_help" ilk="function" attributes="private" doc="">
            <variable name="__searched__" attributes="private" doc="" />
            <variable name="toString" doc="" />
          </scope>
          <scope name="_parse" ilk="function" signature="_parse(data)" attributes="private" doc="">
            <variable ilk="argument" name="data" />
            <variable name="__parameters__" attributes="private" doc="" />
            <variable name="__source__" attributes="private" doc="" />
          </scope>
          <variable name="_toStrings" citdl="Object" attributes="private" doc="" />
          <scope name="_toString" ilk="function" signature="_toString(data)" attributes="private" doc="">
            <variable ilk="argument" name="data" />
            <variable name="__parameters__" attributes="private" doc="" />
            <variable name="__searching__" attributes="private" doc="" />
            <variable name="__output__" attributes="private" doc="" />
          </scope>
          <scope name="__toString" ilk="function" attributes="private" doc="" />
          <scope name="_overrides" attributes="private" doc="" />
          <scope name="_recursions" attributes="private" doc="" />
          <variable name="_names" citdl="Object" attributes="private" doc="" />
          <scope name="_recurse" ilk="function" signature="_recurse(namespace,recursive)" attributes="private" doc="">
            <variable ilk="argument" name="namespace" citdl="String" />
            <variable ilk="argument" name="recursive" citdl="Boolean" />
          </scope>
          <scope name="__recurse" ilk="function" signature="__recurse(namespace,root,name,items,recursive)" attributes="private" doc="">
            <variable ilk="argument" name="namespace" />
            <variable ilk="argument" name="root" />
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="items" />
            <variable ilk="argument" name="recursive" />
          </scope>
          <variable name="_base" citdl="Object" attributes="private" doc="" />
          <scope name="_plainText" ilk="function" signature="_plainText(str)" attributes="private" doc="">
            <variable ilk="argument" name="str" />
          </scope>
          <variable name="console" citdl="Object" doc="" />
        </variable>
        <variable name="highlight" citdl="Object" doc="A client-side syntax highlighting engine.">
          <variable name="languages" citdl="Object" doc="">
            <variable name="_all" citdl="Object" attributes="private" doc="" />
            <variable name="_dynamic" citdl="Object" attributes="private" doc="" />
            <variable name="_static" citdl="Object" attributes="private" doc="" />
            <variable name="_www" citdl="Object" attributes="private" doc="" />
            <variable name="cpp" citdl="Object" doc="" />
            <variable name="css" citdl="Object" doc="" />
            <variable name="delphi" citdl="Object" doc="" />
            <variable name="django" citdl="Object" doc="" />
            <variable name="html" citdl="Object" doc="" />
            <variable name="javascript" citdl="Object" doc="" />
            <variable name="pygments" citdl="Object" doc="">
              <variable name="_html" citdl="Object" attributes="private" doc="">
                <variable name="tags" citdl="Object" doc="">
                  <scope name="code" doc="" />
                  <scope name="title" doc="" />
                  <scope name="th" doc="" />
                  <scope name="big" doc="" />
                  <scope name="isindex" doc="" />
                  <scope name="meta" doc="" />
                  <scope name="body" doc="" />
                  <scope name="strong" doc="" />
                  <scope name="col" doc="" />
                  <scope name="select" doc="" />
                  <scope name="cite" doc="" />
                  <scope name="var" doc="" />
                  <scope name="iframe" doc="" />
                  <scope name="samp" doc="" />
                  <scope name="textarea" doc="" />
                </variable>
              </variable>
              <variable name="_www" citdl="Object" attributes="private" doc="" />
              <variable name="css" citdl="Object" doc="" />
              <variable name="html" citdl="Object" doc="" />
              <variable name="javascript" citdl="Object" doc="" />
              <variable name="xml" citdl="Object" doc="">
                <scope name="a" doc="" />
              </variable>
            </variable>
            <variable name="xml" citdl="Object" doc="">
              <variable name="defaultMode" citdl="Object" doc="">
                <scope name="contains" doc="" />
              </variable>
              <scope name="modes" doc="" />
            </variable>
            <variable name="python" citdl="Object" doc="" />
            <variable name="sql" citdl="Object" doc="" />
          </variable>
        </variable>
        <variable name="html" citdl="Object" doc="">
          <variable name="metrics" citdl="Object" doc="">
            <scope name="_fontResizeNode" attributes="private" doc="" />
            <scope name="getFontMeasurements" ilk="function" returns="object" attributes="private" doc="" />
            <scope name="getCachedFontMeasurements" ilk="function" signature="getCachedFontMeasurements(recalculate)" doc="">
              <variable ilk="argument" name="recalculate" />
            </scope>
            <scope name="getTextBox" ilk="function" signature="getTextBox(text,style,className)" doc="">
              <variable ilk="argument" name="text" citdl="String" />
              <variable ilk="argument" name="style" citdl="Object" />
              <variable ilk="argument" name="className" citdl="String" />
            </scope>
            <scope name="getScrollbar" ilk="function" doc="" />
            <scope name="initOnFontResize" ilk="function" signature="initOnFontResize(interval)" doc="">
              <variable ilk="argument" name="interval" />
            </scope>
            <scope name="onFontResize" ilk="function" doc="" />
            <scope name="_fontresize" ilk="function" attributes="private" doc="" />
          </variable>
          <scope name="insertCssRule" ilk="function" signature="insertCssRule(selector,declaration,styleSheetName)" doc="">
            <variable ilk="argument" name="selector" citdl="summary" doc="Creates a style and attaches it to a dynamically created stylesheet arguments:  A fully qualified class name, as it would appear in a CSS dojo.doc. Start classes with periods, target nodes with '#'. Large selectors can also be created like:  &amp;amp;quot;#myDiv.myClass span input&amp;amp;quot;" />
            <variable ilk="argument" name="declaration" citdl="A" doc="single string that would make up a style block, not including the curly braces. Include semi-colons between statements. Do not use JavaScript style declarations in camel case, use as you would in a CSS dojo.doc:   &amp;amp;quot;color:#ffoooo;font-size:12px;margin-left:5px;&amp;amp;quot;" />
            <variable ilk="argument" name="styleSheetName" citdl="optional" doc=") Name of the dynamic style sheet this rule should be inserted into. If is not found by that name, it is created. If no name is passed, the name &amp;amp;quot;default&amp;amp;quot; is used." />
          </scope>
          <scope name="removeCssRule" ilk="function" signature="removeCssRule(selector,declaration,styleSheetName)" doc="">
            <variable ilk="argument" name="selector" />
            <variable ilk="argument" name="declaration" />
            <variable ilk="argument" name="styleSheetName" />
          </scope>
          <scope name="getStyleSheet" ilk="function" signature="getStyleSheet(styleSheetName)" doc="">
            <variable ilk="argument" name="styleSheetName" />
          </scope>
          <scope name="getDynamicStyleSheet" ilk="function" signature="getDynamicStyleSheet(styleSheetName)" doc="">
            <variable ilk="argument" name="styleSheetName" />
          </scope>
          <scope name="enableStyleSheet" ilk="function" signature="enableStyleSheet(styleSheetName)" doc="">
            <variable ilk="argument" name="styleSheetName" />
          </scope>
          <scope name="disableStyleSheet" ilk="function" signature="disableStyleSheet(styleSheetName)" doc="">
            <variable ilk="argument" name="styleSheetName" />
          </scope>
          <scope name="activeStyleSheet" ilk="function" signature="activeStyleSheet(title)" doc="">
            <variable ilk="argument" name="title" citdl="optional" />
          </scope>
          <scope name="getPreferredStyleSheet" ilk="function" doc="" />
          <scope name="getToggledStyleSheets" ilk="function" doc="">
            <variable name="return_summary" />
          </scope>
          <scope name="getStyleSheets" ilk="function" doc="">
            <variable name="return_summary" />
          </scope>
          <variable name="styles" citdl="Object" doc="" />
        </variable>
        <variable name="image" citdl="Object" doc="A collection of image related widgets">
          <scope name="FlickrBadge" ilk="function" doc="">
            <scope name="children" doc="" />
            <variable name="userid" citdl="String" doc="If you know your Flickr userid, you can set it to prevent a call to fetch the id" />
            <scope name="username" citdl="String" doc="Your Flickr username" />
            <scope name="setid" citdl="String" doc="The id of the set to display" />
            <scope name="tags" citdl="String|Array" doc="A comma separated list of tags or an array of tags to grab from Flickr" />
            <scope name="searchText" citdl="String" doc="Free text search. Photos who's title, description, or tags contain the text will be displayed" />
            <scope name="target" citdl="String" doc="Where to display the pictures when clicked on. Valid values are the same as the target attribute of the A tag." />
            <scope name="apikey" doc="" />
            <variable name="_store" attributes="private" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
          </scope>
          <scope name="Gallery" ilk="function" doc="Gallery widget that wraps a dojox.image.ThumbnailPicker and dojox.image.SlideShow widget">
            <scope name="imageHeight" citdl="Number" doc="Maximum height of an image in the SlideShow widget" />
            <scope name="imageWidth" citdl="Number" doc="Maximum width of an image in the SlideShow widget" />
            <scope name="pageSize" citdl="Number" doc="The number of records to retrieve from the data store per request." />
            <scope name="autoLoad" citdl="Boolean" doc="If true, images are loaded before the user views them. If false, an image is loaded when the user displays it." />
            <scope name="linkAttr" citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the URL to link to from an image, if any." />
            <scope name="imageThumbAttr" citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the URL to the thumbnail image." />
            <scope name="imageLargeAttr" citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the URL to the image." />
            <scope name="titleAttr" citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the title of the picture, if any." />
            <scope name="slideshowInterval" citdl="Integer" doc="time in seconds, between image changes in the slide show." />
            <scope name="templatePath" doc="" />
            <scope name="postCreate" ilk="function" doc="Initializes the widget, creates the ThumbnailPicker and SlideShow widgets" />
            <scope name="setDataStore" ilk="function" signature="setDataStore(dataStore,request,paramNames)" doc="Sets the data store and request objects to read data from.">
              <variable ilk="argument" name="dataStore" citdl="An" doc="implementation of the dojo.data.api.Read API. This accesses the image data." />
              <variable ilk="argument" name="request" citdl="An" doc="implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store" />
              <variable ilk="argument" name="paramNames" citdl="optional" doc="An object defining the names of the item attributes to fetch from the data store. The four attributes allowed are 'linkAttr', 'imageLargeAttr', 'imageThumbAttr' and 'titleAttr'" />
            </scope>
            <scope name="reset" ilk="function" doc="Resets the widget to its initial state" />
            <scope name="showNextImage" ilk="function" signature="showNextImage(inTimer)" doc="Changes the image being displayed in the SlideShow to the next image in the data store">
              <variable ilk="argument" name="inTimer" citdl="Boolean" doc="If true, a slideshow is active, otherwise the slideshow is inactive." />
            </scope>
            <scope name="toggleSlideshow" ilk="function" doc="Switches the slideshow mode on and off." />
            <scope name="showImage" ilk="function" signature="showImage(index,callback)" doc="Shows the image at index 'idx'. idx: Number The position of the image in the data store to display">
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="callback" citdl="optional" doc="Function Optional callback function to call when the image has finished displaying." />
            </scope>
            <scope name="_centerChildren" ilk="function" doc="Ensures that the ThumbnailPicker and the SlideShow widgets are centered." attributes="private" />
            <variable name="widgetid" doc="" />
            <variable name="thumbPicker" doc="" />
            <variable name="slideShow" doc="" />
          </scope>
          <scope name="Lightbox" ilk="function" doc="A dojo-based Lightbox implementation.">
            <scope name="group" citdl="String" doc="Grouping images in a page with similar tags will provide a 'slideshow' like grouping of images" />
            <scope name="title" citdl="String" doc="A string of text to be shown in the Lightbox beneath the image (empty if using a store)" />
            <scope name="href" doc="" />
            <scope name="duration" citdl="Integer" doc="Generic time in MS to adjust the feel of widget. could possibly add various durations for the various actions (dialog fadein, sizeing, img fadein ...)" />
            <variable name="_allowPassthru" citdl="Boolean" doc="Privately set this to disable/enable natural link of anchor tags" attributes="private" />
            <variable name="_attachedDialog" attributes="private" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_addSelf" ilk="function" doc="Add this instance to the master LightBoxDialog" attributes="private" />
            <scope name="_handleClick" ilk="function" signature="_handleClick(e)" doc="Handle the click on the link" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="show" ilk="function" doc="Show the Lightbox with this instance as the starting point" />
            <scope name="disable" ilk="function" doc="Disables event clobbering and dialog, and follows natural link" />
            <scope name="enable" ilk="function" doc="Enables the dialog (prevents default link)" />
          </scope>
          <scope name="LightboxDialog" ilk="function" doc="The &amp;amp;quot;dialog&amp;amp;quot; shared between any Lightbox instances on the page, publically available for programatic manipulation.">
            <scope name="title" citdl="String" doc="The current title, read from object passed to show()" />
            <variable name="inGroup" doc="" />
            <scope name="imgUrl" citdl="String" doc="The src=&amp;amp;quot;&amp;amp;quot; attribute of our imageNode (can be null at statup)" />
            <scope name="errorMessage" citdl="String" doc="The text to display when an unreachable image is linked" />
            <scope name="adjust" citdl="Boolean" doc="If true, ensure the image always stays within the viewport more difficult than necessary to disable, but enabled by default seems sane in most use cases." />
            <variable name="_groups" citdl="Object" attributes="private" doc="">
              <scope name="XnoGroupX" doc="" />
            </variable>
            <scope name="errorImg" citdl="Url" doc="Path to the image used when a 404 is encountered" />
            <scope name="templatePath" doc="" />
            <scope name="startup" ilk="function" doc="Add some extra event handlers, and startup our superclass." />
            <scope name="show" ilk="function" signature="show(groupData)" doc="Show the Master Dialog. Starts the chain of events to show an image in the dialog, including showing the dialog if it is not already visible">
              <variable ilk="argument" name="groupData" citdl="Object" doc="needs href and title attributes. the values for this image." />
            </scope>
            <scope name="_nextImage" ilk="function" doc="Load next image in group" attributes="private" />
            <scope name="_prevImage" ilk="function" doc="Load previous image in group" attributes="private" />
            <scope name="_loadImage" ilk="function" doc="Do the prep work before we can show another image" attributes="private" />
            <scope name="_prepNodes" ilk="function" doc="A localized hook to accompany _loadImage" attributes="private" />
            <scope name="resizeTo" ilk="function" signature="resizeTo(size)" doc="Resize our dialog container, and fire _showImage  22 == current styled margins or paddings, can calculate programatically if needed">
              <variable ilk="argument" name="size" citdl="Object" />
            </scope>
            <scope name="_showImage" ilk="function" doc="Fade in the image, and fire showNav" attributes="private" />
            <scope name="_showNav" ilk="function" doc="Fade in the footer, and setup our connections." attributes="private" />
            <scope name="hide" ilk="function" doc="Hide the Master Lightbox" />
            <scope name="addImage" ilk="function" signature="addImage(child,group)" doc="Add an image to this Master Lightbox">
              <variable ilk="argument" name="child" citdl="Object" doc="The image information to add. href: String - link to image (required) title: String - title to display" />
              <variable ilk="argument" name="group" citdl="String" doc="attach to group of similar tag or null for individual image instance" />
            </scope>
            <scope name="_handleKey" ilk="function" signature="_handleKey(e)" doc="Handle keyboard navigation internally" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_scaleToFit" ilk="function" signature="_scaleToFit(size)" doc="resize an image to fit within the bounds of the viewport" returns="Object" attributes="private">
              <variable ilk="argument" name="size" citdl="Object" doc="The 'size' object passed around for this image" />
            </scope>
            <scope name="_position" ilk="function" signature="_position(e)" doc="we want to know the viewport size any time it changes" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_makeAnims" ilk="function" doc="make and cleanup animation and animation connections" attributes="private" />
            <variable name="_animConnects" attributes="private" doc="" />
            <variable name="_clone" attributes="private" doc="" />
            <variable name="_vp" attributes="private" doc="" />
            <variable name="_positionIndex" attributes="private" doc="" />
            <variable name="_imageReady" attributes="private" doc="" />
            <scope name="imgNode">
              <variable name="src" doc="" />
            </scope>
            <variable name="_wasStyled" attributes="private" doc="" />
            <variable name="_showImageAnim" attributes="private" doc="" />
            <variable name="_loadingAnim" attributes="private" doc="" />
            <variable name="_showNavAnim" attributes="private" doc="" />
          </scope>
          <scope name="Magnifier" ilk="function" doc="Adds magnification on a portion of an image element, using dojox.gfx">
            <scope name="_createGlass" ilk="function" doc="create the glassNode, and an img on a dojox.gfx surface" attributes="private" />
            <scope name="_placeGlass" ilk="function" signature="_placeGlass(e)" doc="position the overlay centered under the cursor" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_setImage" ilk="function" signature="_setImage(e)" doc="set the image's offset in the clipping window relative to the mouse position" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="glassNode" doc="" />
            <variable name="surfaceNode" doc="" />
            <variable name="surface" doc="" />
            <variable name="img" doc="" />
          </scope>
          <scope name="MagnifierLite" ilk="function" doc="Adds magnification on a portion of an image element">
            <scope name="glassSize" citdl="Int" doc="the width and height of the bounding box" />
            <scope name="scale" citdl="Decimal" doc="the multiplier of the Mangification." />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_createGlass" ilk="function" doc="make img and glassNode elements as children of the body" attributes="private" />
            <scope name="_adjustScale" ilk="function" doc="update the calculations should this.scale change" attributes="private" />
            <scope name="_showGlass" ilk="function" signature="_showGlass(e)" doc="show the overlay" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_hideGlass" ilk="function" signature="_hideGlass(e)" doc="hide the overlay" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_placeGlass" ilk="function" signature="_placeGlass(e)" doc="position the overlay centered under the cursor" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_setImage" ilk="function" signature="_setImage(e)" doc="set the image's offset in the clipping window relative to the mouse position" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="destroy" ilk="function" signature="destroy(finalize)" doc="">
              <variable ilk="argument" name="finalize" />
            </scope>
            <variable name="glassNode" doc="" />
            <variable name="surfaceNode" doc="" />
            <variable name="img" doc="" />
            <variable name="offset" doc="" />
            <variable name="_imageSize" attributes="private" doc="" />
            <variable name="_zoomSize" attributes="private" doc="" />
          </scope>
          <scope name="SlideShow" ilk="function" doc="A Slideshow Widget">
            <scope name="imageHeight" doc="" />
            <scope name="imageWidth" citdl="Number" doc="The maximum width of an image." />
            <scope name="title" citdl="String" doc="the initial title of the SlideShow" />
            <scope name="titleTemplate" citdl="String" doc="a way to customize the wording in the title. supported parameters to be populated are: ${title} = the passed title of the image ${current} = the current index of the image ${total} = the total number of images in the SlideShow  should add more?" />
            <scope name="noLink" citdl="Boolean" doc="Prevents the slideshow from putting an anchor link around the displayed image enables if true, though still will not link in absence of a url to link to" />
            <scope name="loop" citdl="Boolean" doc="true/false - make the slideshow loop" />
            <scope name="hasNav" citdl="Boolean" doc="toggle to enable/disable the visual navigation controls" />
            <variable name="images" citdl="Array" doc="Contains the DOM nodes that individual images are stored in when loaded or loading." />
            <scope name="pageSize" citdl="Number" doc="The number of images to request each time." />
            <scope name="autoLoad" citdl="Boolean" doc="If true, then images are preloaded, before the user navigates to view them. If false, an image is not loaded until the user views it." />
            <scope name="autoStart" citdl="Boolean" doc="If true, the SlideShow begins playing immediately" />
            <scope name="fixedHeight" citdl="Boolean" doc="If true, the widget does not resize itself to fix the displayed image." />
            <variable name="imageStore" citdl="Object" doc="Implementation of the dojo.data.api.Read API, which provides data on the images to be displayed." />
            <scope name="linkAttr" citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the URL to link to from an image, if any." />
            <scope name="imageLargeAttr" citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the URL to the image." />
            <scope name="titleAttr" citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the title of the picture, if any." />
            <scope name="slideshowInterval" citdl="Number" doc="Time, in seconds, between image transitions during a slideshow." />
            <scope name="templatePath" doc="" />
            <variable name="_imageCounter" citdl="Number" doc="A counter to keep track of which index image is to be loaded next" attributes="private" />
            <variable name="_tmpImage" citdl="DomNode" doc="The temporary image to show when a picture is loading." attributes="private" />
            <variable name="_request" citdl="Object" doc="Implementation of the dojo.data.api.Request API, which defines the query parameters for accessing the store." attributes="private">
              <variable name="onComplete" doc="" />
              <variable name="start" doc="" />
            </variable>
            <scope name="postCreate" ilk="function" doc="Initilizes the widget, sets up listeners and shows the first image" />
            <scope name="setDataStore" ilk="function" signature="setDataStore(dataStore,request,paramNames)" doc="Sets the data store and request objects to read data from.">
              <variable ilk="argument" name="dataStore" citdl="An" doc="implementation of the dojo.data.api.Read API. This accesses the image data." />
              <variable ilk="argument" name="request" citdl="An" doc="implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store" />
              <variable ilk="argument" name="paramNames" citdl="optional" doc="An object defining the names of the item attributes to fetch from the data store. The three attributes allowed are 'linkAttr', 'imageLargeAttr' and 'titleAttr'" />
            </scope>
            <scope name="reset" ilk="function" doc="Resets the widget to its initial state" />
            <scope name="isImageLoaded" ilk="function" signature="isImageLoaded(index)" doc="Returns true if image at the specified index is loaded, false otherwise.">
              <variable ilk="argument" name="index" citdl="The" doc="number index in the data store to check if it is loaded." />
            </scope>
            <scope name="moveImageLoadingPointer" ilk="function" signature="moveImageLoadingPointer(index)" doc="If 'autoload' is true, this tells the widget to start loading images from the specified pointer.">
              <variable ilk="argument" name="index" citdl="The" doc="number index in the data store to start loading images from." />
            </scope>
            <scope name="destroy" ilk="function" doc="Cleans up the widget when it is being destroyed" />
            <scope name="showNextImage" ilk="function" signature="showNextImage(inTimer,forceLoop)" doc="Changes the image being displayed to the next image in the data store">
              <variable ilk="argument" name="inTimer" citdl="Boolean" doc="If true, a slideshow is active, otherwise the slideshow is inactive." />
              <variable ilk="argument" name="forceLoop" />
            </scope>
            <scope name="toggleSlideShow" ilk="function" doc="Switches the slideshow mode on and off." />
            <scope name="getShowTopicName" ilk="function" doc="Returns the topic id published to when an image is shown" />
            <scope name="getLoadTopicName" ilk="function" doc="Returns the topic id published to when an image finishes loading." />
            <scope name="showImage" ilk="function" signature="showImage(index,callback)" doc="Shows the image at index 'index'.">
              <variable ilk="argument" name="index" citdl="Number" doc="The position of the image in the data store to display" />
              <variable ilk="function" name="callback" doc="Optional callback function to call when the image has finished displaying." />
            </scope>
            <scope name="_fitSize" ilk="function" signature="_fitSize(force)" doc="Fits the widget size to the size of the image being shown, or centers the image, depending on the value of 'fixedHeight'" attributes="private">
              <variable ilk="argument" name="force" citdl="Boolean" doc="If true, the widget is always resized, regardless of the value of 'fixedHeight'" />
            </scope>
            <scope name="_getTopPadding" ilk="function" doc="Returns the padding to place at the top of the image to center it vertically." attributes="private" />
            <scope name="_loadNextImage" ilk="function" doc="Load the next unloaded image." attributes="private" />
            <scope name="_loadImage" ilk="function" signature="_loadImage(index,callbackFn)" doc="Load image at specified index" attributes="private">
              <variable ilk="argument" name="index" citdl="The" doc="position in the data store to load an image from." />
              <variable ilk="argument" name="callbackFn" citdl="An" doc="optional function to execute when the image has finished loading." />
              <scope name="_request">
                <variable name="onComplete" ilk="function" signature="onComplete(items)" doc="">
                  <variable ilk="argument" name="items" />
                </variable>
              </scope>
            </scope>
            <scope name="_stop" ilk="function" doc="Stops a running slide show." attributes="private" />
            <scope name="_prev" ilk="function" doc="Show the previous image. FIXME: either pull code from showNext/prev, or call it here" attributes="private" />
            <scope name="_next" ilk="function" doc="Show the next image" attributes="private" />
            <scope name="_startTimer" ilk="function" doc="Starts a timeout to show the next image when a slide show is active" attributes="private" />
            <scope name="_calcNavDimensions" ilk="function" doc="Calculates the dimensions of the navigation controls" attributes="private" />
            <scope name="_setTitle" ilk="function" signature="_setTitle(title)" doc="Sets the title to the image being displayed" attributes="private">
              <variable ilk="argument" name="title" citdl="String" doc="The String title of the image" />
            </scope>
            <scope name="_fitImage" ilk="function" signature="_fitImage(img)" doc="Ensures that the image width and height do not exceed the maximum." attributes="private">
              <variable ilk="argument" name="img" citdl="Node" doc="The image DOM node to optionally resize" />
            </scope>
            <scope name="_handleClick" ilk="function" signature="_handleClick(e)" doc="Performs navigation on the images based on users mouse clicks" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" doc="An Event object" />
            </scope>
            <scope name="_showNav" ilk="function" signature="_showNav(force)" doc="Shows the navigation controls" attributes="private">
              <variable ilk="argument" name="force" citdl="Boolean" doc="If true, the navigation controls are repositioned even if they are currently visible." />
            </scope>
            <scope name="_hideNav" ilk="function" signature="_hideNav(e)" doc="Hides the navigation controls" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" doc="The DOM Event that triggered this function" />
            </scope>
            <scope name="_overElement" ilk="function" signature="_overElement(element,e)" doc="Returns whether the mouse is over the passed element. Element must be display:block (ie, not a &amp;amp;lt;span&amp;amp;gt;)  When the page is unloading, if this method runs it will throw an exception." attributes="private">
              <variable ilk="argument" name="element" citdl="DomNode" />
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="outerNode" />
            <variable name="isInitialized" doc="" />
            <variable name="imageIndex" doc="" />
            <variable name="_timerCancelled" attributes="private" doc="" />
            <variable name="_slideId" attributes="private" doc="" />
            <scope name="navPlay">
              <variable name="_size" attributes="private" doc="" />
            </scope>
            <scope name="navPrev">
              <variable name="_size" attributes="private" doc="" />
            </scope>
            <scope name="navNext">
              <variable name="_size" attributes="private" doc="" />
            </scope>
            <scope name="titleNode">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="_navAnim" attributes="private" doc="" />
            <variable name="_navShowing" attributes="private" doc="" />
          </scope>
          <scope name="ThumbnailPicker" ilk="function" doc="A scrolling Thumbnail Picker widget">
            <variable name="imageStore" citdl="Object" doc="A data store that implements the dojo.data Read API." />
            <variable name="request" citdl="Object" doc="A dojo.data Read API Request object.">
              <variable name="start" doc="" />
              <variable name="count" doc="" />
              <variable name="onComplete" doc="" />
              <variable name="onError" doc="" />
            </variable>
            <scope name="size" citdl="Number" doc="Width or height in pixels, depending if horizontal or vertical." />
            <scope name="thumbHeight" citdl="Number" doc="Default height of a thumbnail image" />
            <scope name="thumbWidth" citdl="Number" doc="Default width of an image" />
            <scope name="useLoadNotifier" citdl="Boolean" doc="Setting useLoadNotifier to true makes a colored DIV appear under each thumbnail image, which is used to display the loading status of each image in the data store." />
            <scope name="useHyperlink" citdl="boolean" doc="Setting useHyperlink to true causes a click on a thumbnail to open a link." />
            <variable name="hyperlinkTarget" citdl="String" doc="If hyperlinkTarget is set to &amp;amp;quot;new&amp;amp;quot;, clicking on a thumb will open a new window If it is set to anything else, clicking a thumbnail will open the url in the current window." />
            <scope name="isClickable" citdl="Boolean" doc="When set to true, the cursor over a thumbnail changes." />
            <scope name="isScrollable" citdl="Boolean" doc="When true, uses smoothScroll to move between pages" />
            <scope name="isHorizontal" citdl="Boolean" doc="If true, the thumbnails are displayed horizontally. Otherwise they are displayed vertically" />
            <scope name="autoLoad" citdl="Boolean" doc="" />
            <scope name="linkAttr" citdl="String" doc="The attribute name for accessing the url from the data store" />
            <scope name="imageThumbAttr" citdl="String" doc="The attribute name for accessing the thumbnail image url from the data store" />
            <scope name="imageLargeAttr" citdl="String" doc="The attribute name for accessing the large image url from the data store" />
            <variable name="pageSize" citdl="Number" doc="The number of images to request each time." />
            <scope name="titleAttr" citdl="String" doc="The attribute name for accessing the title from the data store" />
            <scope name="templatePath" doc="" />
            <variable name="_thumbs" attributes="private" doc="" />
            <variable name="_thumbIndex" citdl="Number" doc="The index of the first thumbnail shown" attributes="private" />
            <variable name="_maxPhotos" citdl="Number" doc="The total number of photos in the image store" attributes="private" />
            <variable name="_loadedImages" citdl="Object" doc="Stores the indices of images that have been marked as loaded using the markImageLoaded function." attributes="private" />
            <scope name="postCreate" ilk="function" doc="Initializes styles and listeners" />
            <scope name="init" ilk="function" doc="Creates DOM nodes for thumbnail images and initializes their listeners" />
            <scope name="getClickTopicName" ilk="function" doc="Returns the name of the dojo topic that can be subscribed to in order to receive notifications on which thumbnail was selected." returns="String" attributes="private" />
            <scope name="getShowTopicName" ilk="function" doc="Returns the name of the dojo topic that can be subscribed to in order to receive notifications on which thumbnail is now visible" returns="String" attributes="private" />
            <scope name="setDataStore" ilk="function" signature="setDataStore(dataStore,request,paramNames)" doc="Sets the data store and request objects to read data from.">
              <variable ilk="argument" name="dataStore" citdl="An" doc="implementation of the dojo.data.api.Read API. This accesses the image data." />
              <variable ilk="argument" name="request" citdl="An" doc="implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store" />
              <variable ilk="argument" name="paramNames" citdl="optional" doc="An object defining the names of the item attributes to fetch from the data store. The four attributes allowed are 'linkAttr', 'imageLargeAttr', 'imageThumbAttr' and 'titleAttr'" />
              <scope name="request" citdl="An" doc="implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store" />
            </scope>
            <scope name="reset" ilk="function" doc="Resets the widget back to its original state." />
            <scope name="isVisible" ilk="function" signature="isVisible(index)" doc="Returns true if the image at the specified index is currently visible. False otherwise.">
              <variable ilk="argument" name="index" />
            </scope>
            <scope name="_next" ilk="function" doc="Displays the next page of images" attributes="private" />
            <scope name="_prev" ilk="function" doc="Displays the next page of images" attributes="private" />
            <scope name="_checkLoad" ilk="function" signature="_checkLoad(img,index)" attributes="private" doc="">
              <variable ilk="argument" name="img" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope name="_showThumbs" ilk="function" signature="_showThumbs(index)" doc="Displays thumbnail images, starting at position 'index'" attributes="private">
              <variable ilk="argument" name="index" citdl="Number" doc="The index of the first thumbnail" />
            </scope>
            <scope name="markImageLoaded" ilk="function" signature="markImageLoaded(index)" doc="Changes a visual cue to show the image is loaded">
              <variable ilk="argument" name="index" />
            </scope>
            <scope name="_setThumbClass" ilk="function" signature="_setThumbClass(thumb,className)" doc="Adds a CSS class to a thumbnail, only if 'autoLoad' is true" attributes="private">
              <variable ilk="argument" name="thumb" citdl="DomNode" doc="The thumbnail DOM node to set the class on" />
              <variable ilk="argument" name="className" citdl="String" doc="The CSS class to add to the DOM node." />
            </scope>
            <scope name="_loadNextPage" ilk="function" doc="Loads the next page of thumbnail images" attributes="private" />
            <scope name="_loadImage" ilk="function" signature="_loadImage(data,index,callback)" attributes="private" doc="">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope name="_updateNavControls" ilk="function" doc="Updates the navigation controls to hide/show them when at the first or last images." attributes="private" />
            <variable name="widgetid" doc="" />
            <variable name="_scrollerSize" attributes="private" doc="" />
            <variable name="_sizeProperty" attributes="private" doc="" />
            <variable name="_totalSize" attributes="private" doc="" />
            <variable name="isInitialized" doc="" />
            <variable name="_offsetAttr" attributes="private" doc="" />
            <variable name="_sizeAttr" attributes="private" doc="" />
            <variable name="_scrollAttr" attributes="private" doc="" />
            <variable name="_noImages" attributes="private" doc="" />
            <variable name="_loadingImages" attributes="private" doc="" />
            <scope name="thumbScroller">
              <variable name="scrollLeft" doc="" />
              <variable name="scrollTop" doc="" />
            </scope>
            <variable name="_loadInProgress" attributes="private" doc="" />
          </scope>
        </variable>
        <variable name="io" citdl="Object" doc="Extensions to the Core dojo.io transports">
          <variable name="proxy" citdl="Object" doc="">
            <variable name="xip" citdl="Object" doc="Object that implements the iframe handling for XMLHttpRequest IFrame Proxying.">
              <scope name="xipClientUrl" doc="" />
              <scope name="urlLimit" doc="" />
              <scope name="_callbackName" attributes="private" doc="" />
              <variable name="_state" citdl="Object" attributes="private" doc="" />
              <scope name="_stateIdCounter" attributes="private" doc="" />
              <scope name="_isWebKit" attributes="private" doc="" />
              <scope name="send" ilk="function" signature="send(facade)" doc="starts the xdomain request using the provided facade. This method first does some init work, then delegates to _realSend." returns="Object" attributes="private">
                <variable ilk="argument" name="facade" citdl="Object" />
                <variable name="fullXipClientUrl" doc="" />
                <variable name="send" doc="" />
              </scope>
              <scope name="_realSend" ilk="function" signature="_realSend(facade)" doc="starts the actual xdomain request using the provided facade." returns="Object" attributes="private">
                <variable ilk="argument" name="facade" />
              </scope>
              <scope name="receive" ilk="function" signature="receive(stateId,urlEncodedData)" doc="">
                <variable ilk="argument" name="stateId" citdl="String" />
                <variable ilk="argument" name="urlEncodedData" citdl="String" />
              </scope>
              <scope name="frameLoaded" ilk="function" signature="frameLoaded(stateId)" doc="">
                <variable ilk="argument" name="stateId" citdl="String" />
              </scope>
              <scope name="destroyState" ilk="function" signature="destroyState(stateId)" doc="">
                <variable ilk="argument" name="stateId" citdl="String" />
              </scope>
              <scope name="createFacade" ilk="function" doc="" />
              <scope name="sendRequest" ilk="function" signature="sendRequest(stateId,encodedData)" doc="">
                <variable ilk="argument" name="stateId" />
                <variable ilk="argument" name="encodedData" />
              </scope>
              <scope name="sendRequestStart" ilk="function" signature="sendRequestStart(stateId)" doc="">
                <variable ilk="argument" name="stateId" />
              </scope>
              <scope name="sendRequestPart" ilk="function" signature="sendRequestPart(stateId)" doc="">
                <variable ilk="argument" name="stateId" />
              </scope>
              <scope name="setServerUrl" ilk="function" signature="setServerUrl(stateId,cmd,message)" doc="">
                <variable ilk="argument" name="stateId" />
                <variable ilk="argument" name="cmd" />
                <variable ilk="argument" name="message" />
              </scope>
              <scope name="makeServerUrl" ilk="function" signature="makeServerUrl(stateId,cmd,message)" doc="">
                <variable ilk="argument" name="stateId" />
                <variable ilk="argument" name="cmd" />
                <variable ilk="argument" name="message" />
              </scope>
              <scope name="fragmentReceivedEvent" ilk="function" signature="fragmentReceivedEvent(evt)" doc="HTML5 document messaging endpoint. Unpack the event to see if we want to use it.">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope name="fragmentReceived" ilk="function" signature="fragmentReceived(frag)" doc="">
                <variable ilk="argument" name="frag" />
              </scope>
              <scope name="unpackMessage" ilk="function" signature="unpackMessage(encodedMessage)" doc="">
                <variable ilk="argument" name="encodedMessage" />
              </scope>
              <scope name="XhrIframeFacade" ilk="function" signature="XhrIframeFacade(ifpServerUrl)" doc="XMLHttpRequest facade object used by dojox.io.proxy.xip.">
                <variable ilk="argument" name="ifpServerUrl" />
                <variable name="_requestHeaders" attributes="private" doc="" />
                <variable name="_allResponseHeaders" attributes="private" doc="" />
                <variable name="_responseHeaders" attributes="private" doc="" />
                <variable name="_method" attributes="private" doc="" />
                <variable name="_uri" attributes="private" doc="" />
                <variable name="_bodyData" attributes="private" doc="" />
                <variable name="responseText" doc="" />
                <variable name="responseXML" doc="" />
                <variable name="status" doc="" />
                <variable name="statusText" doc="" />
                <variable name="readyState" doc="" />
                <variable name="_ifpServerUrl" attributes="private" doc="" />
                <variable name="_stateId" attributes="private" doc="" />
                <scope name="open" ilk="function" signature="open(method,uri)" doc="">
                  <variable ilk="argument" name="method" citdl="String" />
                  <variable ilk="argument" name="uri" citdl="String" />
                </scope>
                <scope name="setRequestHeader" ilk="function" signature="setRequestHeader(header,value)" doc="">
                  <variable ilk="argument" name="header" citdl="String" />
                  <variable ilk="argument" name="value" citdl="String" />
                </scope>
                <scope name="send" ilk="function" signature="send(stringData)" doc="">
                  <variable ilk="argument" name="stringData" citdl="String" />
                </scope>
                <scope name="abort" ilk="function" doc="" />
                <scope name="getAllResponseHeaders" ilk="function" returns="String" attributes="private" doc="" />
                <scope name="getResponseHeader" ilk="function" signature="getResponseHeader(header)" returns="String" attributes="private" doc="">
                  <variable ilk="argument" name="header" citdl="String" />
                </scope>
                <scope name="_setResponseHeaders" ilk="function" signature="_setResponseHeaders(allHeaders)" attributes="private" doc="">
                  <variable ilk="argument" name="allHeaders" citdl="String" />
                </scope>
              </scope>
              <scope name="_xhrObjOld" attributes="private" doc="" />
            </variable>
          </variable>
          <variable name="scriptFrame" citdl="Object" doc="">
            <variable name="_waiters" citdl="Object" attributes="private" doc="" />
            <variable name="_loadedIds" citdl="Object" attributes="private" doc="" />
            <scope name="_getWaiters" ilk="function" signature="_getWaiters(frameId)" attributes="private" doc="">
              <variable ilk="argument" name="frameId" citdl="String" />
            </scope>
            <scope name="_fixAttachUrl" ilk="function" signature="_fixAttachUrl(url)" doc="fixes the URL so that" attributes="private">
              <variable ilk="argument" name="url" citdl="String" />
            </scope>
            <scope name="_loaded" ilk="function" signature="_loaded(frameId)" doc="callback used when waiting for a frame to load (related to the usage of the frameId argument to dojo.io.script.get()." attributes="private">
              <variable ilk="argument" name="frameId" citdl="String" />
            </scope>
          </variable>
          <variable name="windowName" citdl="Object" doc="">
            <scope name="send" ilk="function" signature="send(method,args)" doc="Provides secure cross-domain request capability. Sends a request using an iframe (POST or GET) and reads the response through the frame's window.name.">
              <variable ilk="argument" name="method" citdl="String" doc="The method to use to send the request, GET or POST" />
              <variable ilk="argument" name="args" citdl="dojo.__IoArgs"
              doc="See dojo.xhr  args.authElement: DOMNode? By providing an authElement, this indicates that windowName should use the authorized window.name protocol, relying on the loaded XD resource to return to the provided return URL on completion of authorization/authentication. The provided authElement will be used to place the iframe in, so the user can interact with the server resource for authentication and/or authorization to access the resource.  args.onAuthLoad: Function? When using authorized access to resources, this function will be called when the authorization page has been loaded. (When authorization is actually completed, the deferred callback function is called with the result). The primary use for this is to make the authElement visible to the user once the resource has loaded (this can be preferable to showing the iframe while the resource is loading since it may not require authorization, it may simply return the resource)." />
            </scope>
            <scope name="_send" ilk="function" signature="_send(dfd,method,authTarget,onAuthLoad)" attributes="private" doc="">
              <variable ilk="argument" name="dfd" />
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="authTarget" />
              <variable ilk="argument" name="onAuthLoad" />
            </scope>
            <scope name="_frameNum" attributes="private" doc="" />
          </variable>
          <scope name="__xhrContentArgs" ilk="function" attributes="private" doc="">
            <variable name="name" citdl="String" doc="Name of the form value." />
            <variable name="content" citdl="String" doc="The contents of the value." />
            <variable name="filename" citdl="String?" doc="An optional filename to pass to the server, as defined by the boundary." />
            <variable name="contentType" citdl="String?" doc="An optional content-type (MIME) to pass to the server, if value is being treated as a file." />
            <variable name="charset" citdl="String?" doc="Optional charset to pass, for the server to interpret the file correctly." />
            <variable name="contentTransferEncoding" citdl="String?" doc="Optional transfer encoding header value." />
          </scope>
          <scope name="__xhrMultiArgs" ilk="function" attributes="private" doc="">
            <variable name="url" citdl="String" doc="URL to server endpoint." />
            <variable name="content" citdl="Object?" doc="Contains properties with string values. These properties will be serialized using multi-part boundaries." />
            <variable name="file" citdl="Object?" doc="Alias for &amp;amp;quot;content&amp;amp;quot;. Provided for backwards compatibility." />
            <variable name="timeout" citdl="Integer?" doc="Milliseconds to wait for the response. If this time passes, the then error callbacks are called." />
            <variable name="form" citdl="DOMNode?" doc="DOM node for a form. Used to extract the form values and send to the server; each form value will be serialized using multi-part boundaries." />
            <variable name="preventCache" citdl="Boolean?" doc="Default is false. If true, then a &amp;amp;quot;dojo.preventCache&amp;amp;quot; parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests." />
            <variable name="handleAs" citdl="String?" doc="Acceptable values depend on the type of IO transport (see specific IO calls for more information)." />
            <variable name="load" citdl="Function?" doc="function(response, ioArgs){}. response is an Object, ioArgs is of type dojo.__IoCallbackArgs. The load function will be called on a successful response." />
            <variable name="error" citdl="Function?" doc="function(response, ioArgs){}. response is an Object, ioArgs is of type dojo.__IoCallbackArgs. The error function will be called in an error case." />
            <variable name="handle" citdl="Function?" doc="function(response, ioArgs){}. response is an Object, ioArgs is of type dojo.__IoCallbackArgs. The handle function will be called in either the successful or error case." />
          </scope>
          <scope name="xhrMultiPart" ilk="function" signature="xhrMultiPart(args)" doc="">
            <variable ilk="argument" name="args" citdl="dojox.io.__xhrMultiArgs" />
          </scope>
          <variable name="xhrPlugins" citdl="Object" doc="">
            <scope name="register" ilk="function" doc="overrides the default xhr handler to implement a registry of xhr handlers" returns="or check to see if we have the same path" attributes="private" />
            <scope name="addProxy" ilk="function" signature="addProxy(proxyUrl)" doc="adds a server side proxy xhr handler for cross-site URLs">
              <variable ilk="argument" name="proxyUrl" citdl="This" doc="is URL to send the requests to." />
            </scope>
            <scope name="addCrossSiteXhr" ilk="function" signature="addCrossSiteXhr(url,httpAdapter)" doc="Adds W3C Cross site XHR or XDomainRequest handling for the given URL prefix">
              <variable ilk="argument" name="url" citdl="Requests" doc="that start with this URL will be considered for using cross-site XHR." />
              <variable ilk="argument" name="httpAdapter" citdl="This" doc="allows for adapting HTTP requests that could not otherwise be sent with XDR, so you can use a convention for headers and PUT/DELETE methods." />
            </scope>
            <scope name="fullHttpAdapter" ilk="function" signature="fullHttpAdapter(plainXhr,noRawBody)" doc="Provides a HTTP adaption.">
              <variable ilk="argument" name="plainXhr" />
              <variable ilk="argument" name="noRawBody" />
            </scope>
          </variable>
          <scope name="xhrWindowNamePlugin" ilk="function" signature="xhrWindowNamePlugin(url,httpAdapter,trusted)" doc="Adds the windowName transport as an XHR plugin for the given site. See dojox.io.windowName for more information on the transport.">
            <variable ilk="argument" name="url" citdl="String" doc="Url prefix of the site which can handle windowName requests." />
            <variable ilk="function" name="httpAdapter" doc="This allows for adapting HTTP requests that could not otherwise be sent with XDR, so you can use a convention for headers and PUT/DELETE methods." />
            <variable ilk="argument" name="trusted" citdl="Boolean" />
          </scope>
        </variable>
        <variable name="jsonPath" citdl="Object" doc="A query system for JavaScript objects" />
        <variable name="lang" citdl="Object" doc="Language specific extensions">
          <scope name="aspect">
            <scope name="counter" ilk="function" doc="Returns an object, which can be used to count calls to methods." returns="Object" attributes="private" />
            <scope name="memoizer" ilk="function" signature="memoizer(keyMaker)" doc="Returns an object, which can be used to count calls to methods." returns="Object" attributes="private">
              <variable ilk="function" name="keyMaker" doc="the function, which takes method's arguments and returns a key, which can be used to index the result." />
            </scope>
            <variable name="memoizerGuard" citdl="Object" doc="" />
            <variable name="profiler" citdl="Object" doc="" />
            <variable name="timer" citdl="Object" doc="" />
            <scope name="tracer" ilk="function" signature="tracer(grouping)" doc="Returns an object, which can be used to trace calls with Firebug's console. Prints argument, a return value, or an exception." returns="Object" attributes="private">
              <variable ilk="argument" name="grouping" citdl="Boolean" doc="The flag to group output. If true, indents embedded console messages." />
            </scope>
          </scope>
          <variable name="functional" citdl="Object" doc="Functional language constructs, including currying and lambda.">
            <variable name="array" citdl="Object" doc="" />
            <variable name="binrec" citdl="Object" doc="" />
            <variable name="curry" citdl="Object" doc="" />
            <variable name="fold" citdl="Object" doc="" />
            <variable name="lambda" citdl="Object" doc="" />
            <variable name="linrec" citdl="Object" doc="" />
            <scope name="buildListcomp" ilk="function" signature="buildListcomp(s)" doc="builds a function from a text snippet, which represents a valid JS 1.7 list comprehension, returns a string, which represents the function." returns="String" attributes="private">
              <variable ilk="argument" name="s" citdl="String" />
            </scope>
            <scope name="compileListcomp" ilk="function" signature="compileListcomp(s)" doc="builds a function from a text snippet, which represents a valid JS 1.7 list comprehension, returns a function object." returns="Function" attributes="private">
              <variable ilk="argument" name="s" citdl="String" />
            </scope>
            <scope name="listcomp" ilk="function" signature="listcomp(s)" doc="executes the list comprehension building an array." returns="Array" attributes="private">
              <variable ilk="argument" name="s" citdl="String" />
            </scope>
            <variable name="multirec" citdl="Object" doc="" />
            <variable name="numrec" citdl="Object" doc="" />
            <variable name="object" citdl="Object" doc="" />
            <variable name="reversed" citdl="Object" doc="" />
            <variable name="scan" citdl="Object" doc="" />
            <variable name="sequence" citdl="Object" doc="" />
            <variable name="tailrec" citdl="Object" doc="" />
            <variable name="util" citdl="Object" doc="" />
            <variable name="zip" citdl="Object" doc="" />
          </variable>
          <variable name="mix" citdl="Object" doc="" />
          <scope name="observable" ilk="function" signature="observable(wrapped,onRead,onWrite,onInvoke)" doc="Creates a wrapper object, which can be observed. The wrapper object is a proxy to the wrapped object. If you will be making multiple wrapper objects with the same set of listeners, it is recommended that you use makeObservable, as it is more memory efficient.">
            <variable ilk="argument" name="wrapped" citdl="Object" doc="The object to be wrapped and monitored for property access and modification" />
            <variable ilk="argument" name="onRead" citdl="function" doc="See dojox.lang.makeObservable.onRead" />
            <variable ilk="argument" name="onWrite" citdl="function" doc="See dojox.lang.makeObservable.onWrite" />
            <variable ilk="argument" name="onInvoke" citdl="function" doc="See dojox.lang.makeObservable.onInvoke" />
          </scope>
          <scope name="makeObservable" ilk="function" signature="makeObservable(onRead,onWrite,onInvoke,hiddenFunctions)" doc="Creates and returns an observable creator function. All the objects that are created with the returned constructor will use the provided onRead and onWrite listeners. The created constructor should be called with a single argument, the object that will be wrapped to be observed. The constructor will return the wrapper object." returns="the class can't be accessed, only called, so we have to wrap it with a function|do it with getters and setters" attributes="private">
            <variable ilk="argument" name="onRead" citdl="function" doc="This is called whenever one of the wrapper objects created from the constructor has a property that is accessed. onRead will be called with two arguments, the first being the wrapped object, and the second is the name of property that is being accessed. The value that onRead returns will be used as the value returned by the property access" />
            <variable ilk="argument" name="onWrite" citdl="function" doc="This is called whenever one of the wrapper objects created from the constructor has a property that is modified. onWrite will be called with three arguments, the first being the wrapped object, the second is the name of property that is being modified, and the third is the value that is being set on the property." />
            <variable ilk="argument" name="onInvoke" citdl="function" doc="This is called when a method on the object is invoked. The first argument is the wrapper object, the second is the original wrapped object, the third is the method name, and the fourth is the arguments." />
            <variable ilk="argument" name="hiddenFunctions" citdl="Object" doc="allows you to define functions that should be delegated but may not be enumerable on the wrapped objects, so they must be explicitly included" />
          </scope>
          <scope name="lettableWin" doc="" />
          <scope name="ReadOnlyProxy" doc="" />
          <variable name="utils" citdl="Object" doc="" />
        </variable>
        <scope ilk="function" name="__temp__" />
        <variable name="layout" citdl="Object" doc="A collection of layout related Widgets">
          <scope name="ContentPane" ilk="function" doc="cleans content to make it less likly to generate DOM/JS errors.">
            <scope name="adjustPaths" doc="" />
            <scope name="cleanContent" citdl="Boolean" doc="" />
            <scope name="renderStyles" citdl="Boolean" doc="trigger/load styles in the content" />
            <scope name="executeScripts" citdl="Boolean" doc="Execute (eval) scripts that is found in the content" />
            <scope name="scriptHasHooks" citdl="Boolean" doc="replace keyword '_container_' in scripts with 'dijit.byId(this.id)' NOTE this name might change in the near future" />
            <variable name="ioMethod" citdl="dojo.xhrGet|dojo.xhrPost" doc="reference to the method that should grab the content" />
            <variable name="ioArgs" citdl="Object" doc="makes it possible to add custom args to xhrGet, like ioArgs.headers['X-myHeader'] = 'true'" />
            <variable name="onLoadDeferred" citdl="dojo.Deferred" doc="callbackchain will start when onLoad occurs" />
            <variable name="onUnloadDeferred" citdl="dojo.Deferred" doc="callbackchain will start when onUnload occurs" />
            <scope name="setHref" ilk="function" signature="setHref(url)" doc="replace current content with url's content" returns="dojox.layout.ContentPane.DeferredHandle" attributes="private">
              <variable ilk="argument" name="url" />
            </scope>
            <scope name="refresh" ilk="function" returns="dojox.layout.ContentPane.DeferredHandle" attributes="private" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="onExecError" ilk="function" signature="onExecError(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_setContentAttr" ilk="function" signature="_setContentAttr(data)" returns="dojox.layout.ContentPane.DeferredHandle" attributes="private" doc="">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="cancel" ilk="function" doc="cancels a inflight download" />
            <scope name="_setUpDeferreds" ilk="function" attributes="private" doc="" />
            <scope name="_onLoadHandler" ilk="function" attributes="private" doc="" />
            <scope name="_onUnloadHandler" ilk="function" attributes="private" doc="" />
            <scope name="_onError" ilk="function" signature="_onError(type,err)" attributes="private" doc="">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="err" />
            </scope>
            <scope name="_prepareLoad" ilk="function" signature="_prepareLoad(forceLoad)" attributes="private" doc="">
              <variable ilk="argument" name="forceLoad" />
            </scope>
            <scope name="_setContent" ilk="function" signature="_setContent(cont)" attributes="private" doc="">
              <variable ilk="argument" name="cont" />
            </scope>
            <scope name="_xhrDfd">
              <variable name="fired" doc="" />
            </scope>
            <variable name="isLoaded" doc="" />
            <variable name="_contentSetter" attributes="private" doc="" />
            <scope name="containerNode">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="_contentSetterParams" attributes="private" doc="" />
            <variable name="DeferredHandle" citdl="Object" doc="">
              <scope name="cancel" ilk="function" doc="cancel a in flight download" />
              <scope name="addOnLoad" ilk="function" signature="addOnLoad(func)" doc="add a callback to the onLoad chain">
                <variable ilk="function" name="func" doc="" />
              </scope>
              <scope name="addOnUnload" ilk="function" signature="addOnUnload(func)" doc="add a callback to the onUnload chain">
                <variable ilk="function" name="func" doc="" />
              </scope>
            </variable>
          </scope>
          <scope name="DragPane" ilk="function" doc="Makes a pane's content dragable by/within it's surface">
            <scope name="invert" citdl="Boolean" doc="Naturally, the behavior is to invert the axis of the drag. Setting invert:false will make the pane drag in the same direction as the mouse." />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_down" ilk="function" signature="_down(e)" doc="mousedown handler, start the dragging" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_up" ilk="function" signature="_up(e)" doc="mouseup handler, stop the dragging" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_move" ilk="function" signature="_move(e)" doc="mousemove listener, offset the scroll amount by the delta since our last call." attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="_x" attributes="private" doc="" />
            <variable name="_y" attributes="private" doc="" />
            <variable name="_mover" attributes="private" doc="" />
          </scope>
          <scope name="ExpandoPane" ilk="function" doc="An experimental expando-pane for dijit.layout.BorderContainer">
            <scope name="maxHeight" doc="" />
            <scope name="maxWidth" doc="" />
            <scope name="splitter" doc="" />
            <scope name="templatePath" doc="" />
            <variable name="_showing" attributes="private" doc="" />
            <variable name="easeOut" citdl="String|Function" doc="easing function used to hide pane" />
            <variable name="easeIn" citdl="String|Function" doc="easing function use to show pane" />
            <scope name="duration" citdl="Integer" doc="duration to run show/hide animations" />
            <scope name="startExpanded" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_afterResize" ilk="function" signature="_afterResize(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_setupAnims" ilk="function" doc="Create the show and hide animations" attributes="private" />
            <scope name="toggle" ilk="function" doc="Toggle this pane's visibility" />
            <scope name="_hideWrapper" ilk="function" doc="Set the Expando state to &amp;amp;quot;closed&amp;amp;quot;" attributes="private" />
            <scope name="_showEnd" ilk="function" doc="Common animation onEnd code - &amp;amp;quot;unclose&amp;amp;quot;" attributes="private" />
            <scope name="_hideEnd" ilk="function" attributes="private" doc="" />
            <scope name="resize" ilk="function" doc="we aren't a layout widget, but need to act like one:" />
            <scope name="_trap" ilk="function" signature="_trap(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="_animConnects" attributes="private" doc="" />
            <variable name="_isHorizontal" attributes="private" doc="" />
            <variable name="_container" attributes="private" doc="" />
            <variable name="_closedSize" attributes="private" doc="" />
            <variable name="_currentSize" attributes="private" doc="" />
            <variable name="_showSize" attributes="private" doc="" />
            <variable name="_showAnim" attributes="private" doc="" />
            <variable name="_hideAnim" attributes="private" doc="" />
          </scope>
          <scope name="FloatingPane" ilk="function" doc="A non-modal Floating window.">
            <scope name="closable" citdl="Boolean" doc="Allow closure of this Node" />
            <scope name="dockable" citdl="Boolean" doc="Allow minimizing of pane if true" />
            <scope name="resizable" citdl="Boolean" doc="Allow resizing of pane true if true" />
            <scope name="maxable" citdl="Boolean" doc="Horrible param name for &amp;amp;quot;Can you maximize this floating pane?&amp;amp;quot;" />
            <scope name="resizeAxis" citdl="String" doc="One of: x | xy | y to limit pane's sizing direction" />
            <variable name="title" citdl="String" doc="Title to use in the header" />
            <variable name="dockTo" citdl="DomNode?" doc="if empty, will create private layout.Dock that scrolls with viewport on bottom span of viewport." />
            <scope name="duration" citdl="Integer" doc="Time is MS to spend toggling in/out node" />
            <scope name="iconSrc" citdl="String" doc="[not implemented yet] will be either icon in titlepane to left of Title, and/or icon show when docked in a fisheye-like dock or maybe dockIcon would be better?" />
            <scope name="contentClass" citdl="String" doc="The className to give to the inner node which has the content" />
            <scope name="_showAnim" attributes="private" doc="" />
            <scope name="_hideAnim" attributes="private" doc="" />
            <variable name="_dockNode" attributes="private" doc="" />
            <variable name="_restoreState" citdl="Object" attributes="private" doc="" />
            <scope name="_allFPs" attributes="private" doc="" />
            <scope name="_startZ" attributes="private" doc="" />
            <scope name="templateString" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="setTitle" ilk="function" signature="setTitle(title)" doc="Update the Title bar with a new string">
              <variable ilk="argument" name="title" citdl="String" />
            </scope>
            <scope name="close" ilk="function" doc="Close and destroy this widget" />
            <scope name="hide" ilk="function" signature="hide(callback)" doc="Close, but do not destroy this FloatingPane">
              <variable ilk="function" name="callback" />
            </scope>
            <scope name="show" ilk="function" signature="show(callback)" doc="Show the FloatingPane">
              <variable ilk="function" name="callback" />
            </scope>
            <scope name="minimize" ilk="function" doc="Hide and dock the FloatingPane" />
            <scope name="maximize" ilk="function" doc="Make this FloatingPane full-screen (viewport)" />
            <scope name="_restore" ilk="function" attributes="private" doc="" />
            <scope name="_dock" ilk="function" attributes="private" doc="" />
            <scope name="resize" ilk="function" signature="resize(dim)" doc="Size the FloatingPane and place accordingly">
              <variable ilk="argument" name="dim" citdl="Object" />
            </scope>
            <scope name="bringToTop" ilk="function" doc="bring this FloatingPane above all other panes" />
            <scope name="destroy" ilk="function" doc="Destroy this FloatingPane completely" />
            <scope name="dockNode" />
            <scope name="closeNode" />
            <scope name="maxNode" />
            <scope name="restoreNode" />
            <scope name="resizeHandle" />
            <scope name="domNode" />
            <scope name="canvas" />
            <scope name="containerNode" />
            <variable name="_resizeHandle" attributes="private" doc="" />
            <variable name="_started" attributes="private" doc="" />
            <scope name="titleNode">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="_isDocked" attributes="private" doc="" />
            <variable name="_naturalState" attributes="private" doc="" />
            <variable name="_maximized" attributes="private" doc="" />
            <variable name="_currentState" attributes="private" doc="" />
          </scope>
          <scope name="Dock" ilk="function" doc="A widget that attaches to a node and keeps track of incoming / outgoing FloatingPanes and handles layout">
            <scope name="templateString" doc="" />
            <scope name="_docked" attributes="private" doc="" />
            <variable name="_inPositioning" attributes="private" doc="" />
            <variable name="autoPosition" doc="" />
            <scope name="addNode" ilk="function" signature="addNode(refNode)" doc="Instert a dockNode refernce into the dock">
              <variable ilk="argument" name="refNode" />
            </scope>
            <scope name="startup" ilk="function" doc="" />
            <scope name="_positionDock" ilk="function" signature="_positionDock(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <variable name="id" doc="" />
            <variable name="_inPositiononing" attributes="private" doc="" />
          </scope>
          <scope name="_DockNode" ilk="function" doc="dojox.layout._DockNode is a private widget used to keep track of which pane is docked." attributes="private">
            <scope name="title" citdl="String" doc="Shown in dock icon. should read parent iconSrc?" />
            <scope name="paneRef" citdl="Widget" doc="reference to the FloatingPane we reprasent in any given dock" />
            <scope name="templateString" doc="" />
            <scope name="restore" ilk="function" doc="remove this dock item from parent dock, and call show() on reffed floatingpane" />
          </scope>
          <scope name="GridContainer" ilk="function" doc="The Grid Container is a container of child elements that are placed in a kind of grid." signature="GridContainer(props,node)">
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="node" />
            <scope name="templatePath" doc="" />
            <scope name="isContainer" doc="" />
            <variable name="i18n" citdl="Object" doc="Contain i18n ressources." />
            <scope name="isAutoOrganized" citdl="Boolean:" doc="Define auto organisation of children into the grid container." />
            <scope name="isRightFixed" citdl="Boolean" doc="Define if the right border has a fixed size." />
            <scope name="isLeftFixed" citdl="Boolean" doc="Define if the left border has a fixed size." />
            <scope name="hasResizableColumns" citdl="Boolean" doc="Allow or not resizing of columns by a grip handle." />
            <variable name="nbZones" citdl="Integer" doc="The number of dropped zones." />
            <scope name="opacity" citdl="Integer" doc="Define the opacity of the DnD Avatar." />
            <scope name="minColWidth" citdl="Integer" doc="Minimum column width in percentage." />
            <scope name="minChildWidth" citdl="Integer" doc="Minimun children with in pixel (only used for IE6 that doesn't handle min-width css property */" />
            <variable name="acceptTypes" citdl="Array" doc="The gridcontainer will only accept the children that fit to the types. In order to do that, the child must have a widgetType or a dndType attribute corresponding to the accepted type.*/" />
            <variable name="mode" citdl="String" doc="location to add columns, must be set to left or right(default)" />
            <scope name="allowAutoScroll" citdl="Boolean" doc="auto-scrolling enable inside the GridContainer" />
            <scope name="timeDisplayPopup" citdl="Integer" doc="display time of popup in miliseconds" />
            <scope name="isOffset" citdl="Boolean" doc="if true : Let the mouse to its original location when moving (allow to specify it proper offset) if false : Current behavior, mouse in the upper left corner of the widget" />
            <variable name="offsetDrag" citdl="Object" doc="Allow to specify its own offset (x and y) onl when Parameter isOffset is true" />
            <scope name="withHandles" citdl="Boolean" doc="Specify if there is a specific drag handle on widgets" />
            <scope name="handleClasses" citdl="Array" doc="Array of classes of nodes that will act as drag handles" />
            <scope name="_draggedWidget" attributes="private" doc="" />
            <variable name="_isResized" citdl="Boolean" doc="Determine if user can resizing the widget with the mouse." attributes="private" />
            <variable name="_activeGrip" attributes="private" doc="" />
            <variable name="_oldwidth" citdl="Integer" doc="Save the old width size." attributes="private" />
            <variable name="_oldheight" citdl="Integer" doc="Save the old height size." attributes="private" />
            <variable name="_a11yOn" attributes="private" doc="" />
            <variable name="_canDisplayPopup" attributes="private" doc="" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="_createCells" ilk="function" attributes="private" doc="" />
            <scope name="startup" doc="" />
            <scope name="init" ilk="function" doc="Initialization of the GridContainer widget" />
            <scope name="destroy" ilk="function" doc="destroy GridContainer Component." />
            <scope name="onResized" ilk="function" doc="Callback method to resize the GridContainer widget and columns" />
            <scope name="_organizeServices" ilk="function" doc="List all zones and insert service into columns." attributes="private" />
            <scope name="_organizeServicesManually" ilk="function" doc="Organize Services by column property of widget." attributes="private" />
            <scope name="_insertService" ilk="function" signature="_insertService(z,p,i,first)" doc="Insert a service in a specific column of the GridContainer widget." returns="String" attributes="private">
              <variable ilk="argument" name="z" citdl="Integer" />
              <variable ilk="argument" name="p" citdl="Integer" />
              <variable ilk="argument" name="i" citdl="Integer" />
              <variable ilk="argument" name="first" citdl="Boolean" />
            </scope>
            <scope name="addService" ilk="function" signature="addService(service,z,p)" doc="Add a service (child widget) in a specific column of the GridContainer widget." returns="Object" attributes="private">
              <variable ilk="argument" name="service" citdl="Object" doc="widget to insert" />
              <variable ilk="argument" name="z" citdl="Integer" doc="zone number (column)" />
              <variable ilk="argument" name="p" citdl="Integer" doc="place in the zone (first = 0)" />
            </scope>
            <scope name="_createGrid" ilk="function" doc="Create all grid (zones and grip)" returns="Object" attributes="private" />
            <scope name="_disconnectDnd" ilk="function" doc="disconnect all events on insertNodes" attributes="private" />
            <scope name="_createZone" ilk="function" signature="_createZone(zone)" doc="Create a DnD column." returns="plottedDnd Object" attributes="private">
              <variable ilk="argument" name="zone" citdl="Object" />
            </scope>
            <scope name="_createGrip" ilk="function" signature="_createGrip(dz)" doc="Create a grip for a specific zone" attributes="private">
              <variable ilk="argument" name="dz" citdl="Object" />
            </scope>
            <scope name="_initPlaceGrips" ilk="function" doc="Initialize the position of a grip which will not change (top)" attributes="private" />
            <scope name="_placeGrips" ilk="function" doc="Define the position of a grip and place it on page." attributes="private" />
            <scope name="_getZoneByIndex" ilk="function" signature="_getZoneByIndex(n)" doc="Return a DOM node containing a zone by given a index." returns="number" attributes="private">
              <variable ilk="argument" name="n" citdl="Integer" />
            </scope>
            <scope name="getIndexZone" ilk="function" signature="getIndexZone(zone)" doc="Return an integer by given a zone" returns="number" attributes="private">
              <variable ilk="argument" name="zone" citdl="Node" />
            </scope>
            <scope name="resizeColumnOn" ilk="function" signature="resizeColumnOn(e)" doc="Connect events to listen the resize action. Change the type of width columns (% to px) Calculate the minwidth according to the children">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="resizeColumnMove" ilk="function" signature="resizeColumnMove(e)" doc="Change columns size.">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="resizeColumnOff" ilk="function" signature="resizeColumnOff(e)" doc="Disconnect resize events. Change the type of width columns (px to %)">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="setColumns" ilk="function" signature="setColumns(nbColumns)" doc="Set the number of columns">
              <variable ilk="argument" name="nbColumns" citdl="Integer" />
            </scope>
            <scope name="_addColumn" ilk="function" signature="_addColumn(nbColumns)" doc="Add some columns" attributes="private">
              <variable ilk="argument" name="nbColumns" citdl="Integer" />
            </scope>
            <scope name="_deleteColumn" ilk="function" signature="_deleteColumn(indices)" doc="Remove some columns with indices passed as an array" attributes="private">
              <variable ilk="argument" name="indices" citdl="Array" />
            </scope>
            <scope name="_updateColumnsWidth" ilk="function" doc="Update the columns width." attributes="private" />
            <scope name="_selectFocus" ilk="function" signature="_selectFocus(event)" doc="Enable a11y into the GridContainer : - Possibility to move focus into the GridContainer (TAB, LEFT ARROW, RIGHT ARROW, UP ARROW, DOWN ARROW). - Possibility to move GridContainer's children (Drag and Drop) with keyboard. (SHIFT + ARROW). If the type of widget is not draggable, a popup is displayed." attributes="private">
              <variable ilk="argument" name="event" citdl="Event" />
            </scope>
            <scope name="_displayPopup" ilk="function" doc="display a popup when a widget type can not move" attributes="private" />
            <variable name="cell" doc="" />
            <variable name="grid" doc="">
              <variable name="length" doc="" />
            </variable>
            <variable name="dropHandler" doc="" />
            <variable name="tabDZ" doc="" />
            <variable name="handleDndStart" doc="" />
            <variable name="onMouseOver" doc="" />
            <variable name="_x" attributes="private" doc="" />
            <variable name="_topGrip" attributes="private" doc="" />
            <variable name="initX" doc="" />
            <variable name="oldTabSize" doc="" />
            <variable name="currentColumn" doc="" />
            <variable name="currentColumnWidth" doc="" />
            <variable name="nextColumn" doc="" />
            <variable name="nextColumnWidth" doc="" />
            <variable name="currentMinCol" doc="" />
            <variable name="nextMinCol" doc="" />
            <variable name="connectResizeColumnMove" doc="" />
            <variable name="connectResizeColumnOff" doc="" />
            <variable name="dragOffset" doc="" />
          </scope>
          <scope name="RadioGroup" ilk="function" doc="A Container that turns its Layout Children into a single Pane and transitions between states onHover of the button">
            <scope name="duration" doc="" />
            <scope name="hasButtons" citdl="Boolean" doc="toggles internal button making on or off" />
            <scope name="buttonClass" citdl="String" doc="The full declared className of the Button widget to use for hasButtons" />
            <scope name="templateString" citdl="String" doc="the template for our container" />
            <scope name="startup" ilk="function" doc="scan the container for children, and make &amp;amp;quot;tab buttons&amp;amp;quot; for them" />
            <scope name="_makeButton" ilk="function" signature="_makeButton(child)" doc="Creates a hover button for a child node of the RadioGroup" attributes="private">
              <variable ilk="argument" name="child" citdl="dijit._Widget" />
            </scope>
            <scope name="addChild" ilk="function" signature="addChild(child)" doc="Add a child to this Group and create a button if necessary">
              <variable ilk="argument" name="child" citdl="dijit._Widget" />
            </scope>
            <scope name="removeChild" ilk="function" signature="removeChild(child)" doc="">
              <variable ilk="argument" name="child" />
            </scope>
            <scope name="_transition" ilk="function" signature="_transition(newWidget,oldWidget)" doc="called when StackContainer receives a selectChild call, used to transition the panes." attributes="private">
              <variable ilk="argument" name="newWidget" citdl="Widget" />
              <variable ilk="argument" name="oldWidget" citdl="Widget" />
            </scope>
            <scope name="_showChild" ilk="function" signature="_showChild(page)" doc="show the selected child widget" attributes="private">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <scope name="_hideChild" ilk="function" signature="_hideChild(page)" doc="hide the specified child widget" attributes="private">
              <variable ilk="argument" name="page" citdl="Widget" />
            </scope>
            <variable name="_children" attributes="private" doc="" />
            <variable name="_buttons" attributes="private" doc="" />
            <variable name="_size" attributes="private" doc="" />
          </scope>
          <scope name="RadioGroupFade" ilk="function" doc="An extension on a stock RadioGroup, that fades the panes.">
            <scope name="_hideChild" ilk="function" signature="_hideChild(page)" doc="hide the specified child widget" attributes="private">
              <variable ilk="argument" name="page" />
            </scope>
            <scope name="_showChild" ilk="function" signature="_showChild(page)" doc="show the specified child widget" attributes="private">
              <variable ilk="argument" name="page" />
            </scope>
          </scope>
          <scope name="RadioGroupSlide" ilk="function" doc="A Sliding Radio Group">
            <variable name="easing" doc="" />
            <scope name="zTop" citdl="Integer" doc="A z-index to apply to the incoming pane" />
            <scope name="startup" ilk="function" doc="on startup, set each of the panes off-screen (_showChild is called later)" />
            <scope name="_positionChild" ilk="function" signature="_positionChild(page)" doc="set the child out of view immediately after being hidden" attributes="private">
              <variable ilk="argument" name="page" />
            </scope>
            <scope name="_showChild" ilk="function" signature="_showChild(page)" doc="Slide in the selected child widget" attributes="private">
              <variable ilk="argument" name="page" />
            </scope>
            <scope name="_hideChild" ilk="function" signature="_hideChild(page)" doc="reset the position of the hidden pane out of sight" attributes="private">
              <variable ilk="argument" name="page" />
            </scope>
            <scope name="addChild" ilk="function" signature="addChild(child)" doc="">
              <variable ilk="argument" name="child" />
            </scope>
            <variable name="_anim" attributes="private" doc="" />
            <variable name="_tmpConnect" attributes="private" doc="" />
          </scope>
          <scope name="_RadioButton" ilk="function" doc="The Buttons for a RadioGroup" attributes="private">
            <scope name="label" citdl="String" doc="the Text Label of the button" />
            <scope name="page" doc="" />
            <scope name="templateString" doc="" />
            <scope name="startup" ilk="function" doc="start listening to mouseOver" />
            <scope name="_onMouse" ilk="function" signature="_onMouse(e)" doc="set the selected child on hover, and set our hover state class" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_clearSelected" ilk="function" doc="remove hover state class from sibling Buttons. This is easier (and more reliable) than setting up an additional connection to onMouseOut  FIXME: this relies on the template being [div][span]node[/span][/div]" attributes="private" />
          </scope>
          <scope name="ResizeHandle" ilk="function" doc="A dragable handle used to resize an attached node.">
            <scope name="targetId" citdl="String" doc="id of the Widget OR DomNode that I will size" />
            <scope name="targetContainer" citdl="DomNode" doc="over-ride targetId and attch this handle directly to a reference of a DomNode" />
            <scope name="resizeAxis" citdl="String" doc="one of: x|y|xy limit resizing to a single axis, default to xy ..." />
            <scope name="activeResize" citdl="Boolean" doc="if true, node will size realtime with mouse movement, if false, node will create virtual node, and only resize target on mouseUp" />
            <scope name="activeResizeClass" citdl="String" doc="css class applied to virtual resize node." />
            <variable name="animateSizing" citdl="Boolean" doc="only applicable if activeResize = false. onMouseup, animate the node to the new size" />
            <scope name="animateMethod" citdl="String" doc="one of &amp;amp;quot;chain&amp;amp;quot; or &amp;amp;quot;combine&amp;amp;quot; ... visual effect only. combine will &amp;amp;quot;scale&amp;amp;quot; node to size, &amp;amp;quot;chain&amp;amp;quot; will alter width, then height" />
            <scope name="animateDuration" citdl="Integer" doc="time in MS to run sizing animation. if animateMethod=&amp;amp;quot;chain&amp;amp;quot;, total animation playtime is 2*animateDuration" />
            <scope name="minHeight" citdl="Integer" doc="smallest height in px resized node can be" />
            <scope name="minWidth" citdl="Integer" doc="smallest width in px resize node can be" />
            <scope name="templateString" doc="" />
            <scope name="postCreate" ilk="function" doc="setup our one major listener upon creation" />
            <scope name="_beginSizing" ilk="function" signature="_beginSizing(e)" doc="setup movement listeners and calculate initial size" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_updateSizing" ilk="function" signature="_updateSizing(e)" doc="called when moving the ResizeHandle ... determines new size based on settings/position and sets styles." attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_getNewCoords" ilk="function" signature="_getNewCoords(e)" returns="Object" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_changeSizing" ilk="function" signature="_changeSizing(e)" doc="apply sizing information based on information in (e) to attached node" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_endSizing" ilk="function" signature="_endSizing(e)" doc="disconnect listenrs and cleanup sizing" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="onResize" ilk="function" signature="onResize(e)" doc="Stub fired when sizing is done, for things like Grid">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="_resizeHelper" attributes="private" doc="" />
            <variable name="minSize" doc="" />
            <variable name="_resizeX" attributes="private" doc="" />
            <variable name="_resizeY" attributes="private" doc="" />
            <variable name="targetWidget" doc="">
              <variable name="resize" doc="" />
            </variable>
            <variable name="targetDomNode" doc="" />
            <variable name="_isSizing" attributes="private" doc="" />
            <variable name="startPoint" doc="" />
            <variable name="startSize" doc="" />
            <variable name="_pconnects" attributes="private" doc="" />
            <variable name="_activeResizeLastEvent" attributes="private" doc="" />
          </scope>
          <scope name="_ResizeHelper" ilk="function" doc="A global private resize helper shared between any resizeHandle with activeSizing='false;" attributes="private">
            <scope name="startup" ilk="function" doc="" />
            <scope name="show" ilk="function" doc="show helper to start resizing" />
            <scope name="hide" ilk="function" doc="hide helper after resizing is complete" />
            <scope name="resize" ilk="function" signature="resize(dim)" doc="size the widget and place accordingly  FIXME: this is off when padding present">
              <variable ilk="argument" name="dim" citdl="Object" />
            </scope>
            <scope name="domNode" />
          </scope>
          <scope name="RotatorContainer" ilk="function" doc="Extends a StackContainer to automatically transition between children and display navigation in the form of tabs or a pager.">
            <scope name="templateString" doc="" />
            <variable name="showTabs" citdl="Boolean" doc="Sets the display of the tabs. The tabs are actually a StackController. The child's title is used for the tab's label." />
            <scope name="transitionDelay" citdl="int" doc="The delay in milliseconds before transitioning to the next child." />
            <scope name="transition" citdl="String" doc="The type of transition to perform when switching children. A null transition will transition instantly." />
            <variable name="transitionDuration" citdl="int" doc="The duration of the transition in milliseconds." />
            <scope name="autoStart" citdl="Boolean" doc="Starts the timer to transition children upon creation." />
            <scope name="suspendOnHover" citdl="Boolean" doc="Pause the rotator when the mouse hovers over it." />
            <variable name="pauseOnManualChange" citdl="Boolean" doc="Pause the rotator when the tab is changed or the pager's next/previous buttons are clicked." />
            <scope name="reverse" citdl="Boolean" doc="Causes the rotator to rotate in reverse order." />
            <scope name="pagerId" citdl="String" doc="ID the pager widget." />
            <variable name="cycles" citdl="int" doc="Number of cycles before pausing." />
            <variable name="_timer" citdl="int" doc="The timer used for controlling the transitions." attributes="private" />
            <variable name="_over" citdl="Boolean" doc="Flag to quick check if the mouse is over the rotator." attributes="private" />
            <variable name="_playing" citdl="Boolean" doc="Flag to track transition state." attributes="private" />
            <scope name="pagerClass" citdl="String" doc="The declared Class of the Pager used for this Widget" />
            <scope name="postCreate" ilk="function" doc="Initializes the DOM nodes, tabs, and transition stuff." />
            <scope name="startup" ilk="function" doc="Initializes the pagers." />
            <scope name="destroy" ilk="function" doc="Unsubscribe to all of our topics" />
            <scope name="setAttribute" ilk="function" signature="setAttribute(attr,value)" doc="Exposes attributes to be changed.">
              <variable ilk="argument" name="attr" citdl="String" />
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="_updatePager" ilk="function" doc="Notify the pager's current and total numbers." attributes="private" />
            <scope name="_onMouseOver" ilk="function" doc="Triggered when the mouse is moved over the rotator container." attributes="private" />
            <scope name="_onMouseOut" ilk="function" doc="Triggered when the mouse is moved off the rotator container." attributes="private" />
            <scope name="_resetTimer" ilk="function" doc="Resets the timer used to start the next transition." attributes="private" />
            <scope name="_cycle" ilk="function" signature="_cycle(next)" doc="Cycles to the next/previous child." attributes="private">
              <variable ilk="argument" name="next" citdl="boolean or int" />
            </scope>
            <scope name="_manualChange" ilk="function" doc="This function is only called when a manual change occurs in which case we may need to stop playing and we need to reset the cycle counter" attributes="private" />
            <scope name="_play" ilk="function" signature="_play(skip)" doc="Schedules the next transition." attributes="private">
              <variable ilk="argument" name="skip" />
            </scope>
            <scope name="_pause" ilk="function" doc="Clears the transition timer and pauses the rotator." attributes="private" />
            <scope name="_state" ilk="function" signature="_state(playing)" doc="Fired when the play/pause pager button is toggled." attributes="private">
              <variable ilk="argument" name="playing" />
            </scope>
            <scope name="_transition" ilk="function" signature="_transition(next,prev)" doc="Dispatches the appropriate transition." attributes="private">
              <variable ilk="argument" name="next" citdl="Widget" />
              <variable ilk="argument" name="prev" citdl="Widget" />
            </scope>
            <scope name="_transitionEnd" ilk="function" attributes="private" doc="" />
            <scope name="_fade" ilk="function" signature="_fade(next,prev)" doc="Crossfades two children." attributes="private">
              <variable ilk="argument" name="next" citdl="Widget" />
              <variable ilk="argument" name="prev" citdl="Widget" />
            </scope>
            <scope name="_styleNode" ilk="function" signature="_styleNode(node,opacity,zIndex)" doc="Helper function to style the children." attributes="private">
              <variable ilk="argument" name="node" citdl="DOMnode" />
              <variable ilk="argument" name="opacity" citdl="number" />
              <variable ilk="argument" name="zIndex" citdl="int" />
            </scope>
            <variable name="tabNode" doc="" />
            <variable name="_stackController" attributes="private" doc="" />
            <variable name="_subscriptions" attributes="private" doc="" />
          </scope>
          <scope name="RotatorPager" ilk="function" doc="Defines controls used to manipulate a RotatorContainer">
            <scope name="widgetsInTemplate" doc="" />
            <scope name="rotatorId" citdl="int" doc="The ID of the rotator this pager is tied to. Only required if defined outside of the RotatorContainer's container." />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="Unsubscribe to all of our topics" />
            <scope name="_state" ilk="function" signature="_state(playing)" doc="Updates the display of the play/pause button" attributes="private">
              <variable ilk="argument" name="playing" citdl="boolean" />
            </scope>
            <scope name="_update" ilk="function" signature="_update(playing,current,total)" doc="Updates the pager's play/pause button, current child, and total number of children." attributes="private">
              <variable ilk="argument" name="playing" citdl="boolean" />
              <variable ilk="argument" name="current" citdl="int" />
              <variable ilk="argument" name="total" citdl="int" />
            </scope>
            <variable name="templateString" doc="" />
            <variable name="_subscriptions" attributes="private" doc="" />
            <scope name="current">
              <variable name="innerHTML" doc="" />
            </scope>
            <scope name="total">
              <variable name="innerHTML" doc="" />
            </scope>
          </scope>
          <scope name="ScrollPane" ilk="function" doc="A pane that &amp;amp;quot;scrolls&amp;amp;quot; its content based on the mouse poisition inside">
            <variable name="_line" citdl="dojo._Line" doc="storage for our top and bottom most scrollpoints" attributes="private" />
            <variable name="_lo" citdl="the" doc="height of the visible pane" attributes="private" />
            <scope name="_offset" attributes="private" doc="" />
            <scope name="orientation" citdl="String" doc="either &amp;amp;quot;horizontal&amp;amp;quot; or &amp;amp;quot;vertical&amp;amp;quot; for scroll orientation." />
            <scope name="templatePath" doc="" />
            <scope name="layout" ilk="function" doc="calculates required sizes. Call this if you add/remove content manually, or reload the content." />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_set" ilk="function" signature="_set(n)" doc="set the pane's scroll offset, and position the virtual scroll helper" attributes="private">
              <variable ilk="argument" name="n" citdl="Float" />
            </scope>
            <scope name="_calc" ilk="function" signature="_calc(e)" doc="calculate the relative offset of the cursor over the node, and call _set" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_enter" ilk="function" signature="_enter(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_leave" ilk="function" signature="_leave(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="_size" attributes="private" doc="" />
            <variable name="_helpLine" attributes="private" doc="" />
            <variable name="_showAnim" attributes="private" doc="" />
            <variable name="_hideAnim" attributes="private" doc="" />
            <variable name="_vertical" attributes="private" doc="" />
            <variable name="_dir" attributes="private" doc="" />
            <variable name="_edge" attributes="private" doc="" />
          </scope>
          <scope name="ToggleSplitter" ilk="function" doc="A draggable and toggle-to-close/open spacer between two items in a BorderContainer">
            <scope name="container" doc="" />
            <scope name="child" doc="" />
            <scope name="region" doc="" />
            <variable name="open" citdl="Boolean" doc="the initial and current state of the splitter (and its attached pane)" />
            <scope name="closedThreshold" citdl="Integer" doc="how small the attached pane can be before its considered closed" />
            <variable name="openSize" citdl="String" doc="the css height/width value to apply by default when the attached pane is open" />
            <scope name="_closedSize" citdl="String" doc="the css height/width value to apply by default when the attached pane is closed" attributes="private" />
            <scope name="templateString" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_onMouseUp" ilk="function" signature="_onMouseUp(evt)" attributes="private" doc="">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="_onPrelimMouseMove" ilk="function" signature="_onPrelimMouseMove(evt)" attributes="private" doc="">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="_onMouseDown" ilk="function" signature="_onMouseDown(evt)" doc="handle mousedown events from the domNode" attributes="private">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="_handleOnChange" ilk="function" attributes="private" doc="" />
            <scope name="_getStyleProps" ilk="function" signature="_getStyleProps(paneNode,open,paneStyle)" doc="create an object with the style property name: values that will need to be applied to the child pane render the given state" attributes="private">
              <variable ilk="argument" name="paneNode" />
              <variable ilk="argument" name="open" />
              <variable ilk="argument" name="paneStyle" />
            </scope>
            <scope name="_setStateClass" ilk="function" attributes="private" doc="" />
            <scope name="_setOpenAttr" ilk="function" signature="_setOpenAttr(value)" doc="setter for the open property" attributes="private">
              <variable ilk="argument" name="value" citdl="Boolean" />
            </scope>
            <scope name="onOpen" ilk="function" doc="" />
            <scope name="onClose" ilk="function" doc="" />
            <scope name="_toggleMe" ilk="function" signature="_toggleMe(evt)" doc="event handle, toggle the open state" attributes="private">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="_onKeyPress" ilk="function" signature="_onKeyPress(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <variable name="_started" attributes="private" doc="" />
            <variable name="_openStyleProps" attributes="private" doc="" />
            <variable name="_onUpHandle" attributes="private" doc="" />
            <variable name="_startPosn" attributes="private" doc="" />
            <variable name="_onMoveHandle" attributes="private" doc="" />
          </scope>
          <variable name="dnd" citdl="Object" doc="">
            <scope name="Avatar" ilk="function" signature="Avatar(manager,opacity)" doc="An Object, which represents the object being moved in a GridContainer">
              <variable ilk="argument" name="manager" />
              <variable ilk="argument" name="opacity" />
              <variable name="manager" doc="" />
              <scope name="construct" ilk="function" signature="construct(opacity)" doc="A constructor function. it is separate so it can be (dynamically) overwritten in case of need.">
                <variable ilk="argument" name="opacity" citdl="int" />
              </scope>
              <variable name="node" doc="" />
              <scope name="destroy" ilk="function" doc="Destroy this avatar instance" />
              <scope name="update" ilk="function" doc="" />
              <scope name="_generateText" ilk="function" attributes="private" doc="" />
            </scope>
            <scope name="PlottedDnd" ilk="function" doc="dnd source handling plotted zone to show the dropping area" signature="PlottedDnd(node,params)">
              <variable ilk="argument" name="node" citdl="Node" />
              <variable ilk="argument" name="params" citdl="Object" />
              <scope name="GC_OFFSET_X" doc="" />
              <scope name="GC_OFFSET_Y" doc="" />
              <scope name="_calculateCoords" ilk="function" signature="_calculateCoords(height)" doc="Calculate each position of children" attributes="private">
                <variable ilk="argument" name="height" citdl="Boolean" />
              </scope>
              <scope name="_legalMouseDown" ilk="function" signature="_legalMouseDown(e)" doc="Checks if user clicked on &amp;amp;quot;approved&amp;amp;quot; items." returns="Boolean" attributes="private">
                <variable ilk="argument" name="e" citdl="Event" />
              </scope>
              <scope name="setDndItemSelectable" ilk="function" signature="setDndItemSelectable(node,isSelectable)" doc="set an item as selectable">
                <variable ilk="argument" name="node" citdl="Node" />
                <variable ilk="argument" name="isSelectable" citdl="Boolean" />
              </scope>
              <scope name="getDraggedWidget" ilk="function" signature="getDraggedWidget(node)" doc="Return one or more widget selected during the drag.">
                <variable ilk="argument" name="node" citdl="Node" />
              </scope>
              <scope name="isAccepted" ilk="function" signature="isAccepted(node)" doc="test if this node can be accepted">
                <variable ilk="argument" name="node" citdl="Node" />
              </scope>
              <scope name="onDndStart" doc="" />
              <scope name="onDndCancel" doc="" />
              <scope name="onDndDrop" ilk="function" signature="onDndDrop(source,nodes,copy,target)" doc="Called to finish the DnD operation">
                <variable ilk="argument" name="source" />
                <variable ilk="argument" name="nodes" />
                <variable ilk="argument" name="copy" />
                <variable ilk="argument" name="target" />
              </scope>
              <scope name="onMouseDown" ilk="function" signature="onMouseDown(e)" doc="Event processor for onmousedown.">
                <variable ilk="argument" name="e" citdl="Event" />
              </scope>
              <scope name="onMouseUp" ilk="function" signature="onMouseUp(e)" doc="Event processor for onmouseup.">
                <variable ilk="argument" name="e" citdl="Event" />
              </scope>
              <scope name="onMouseMove" ilk="function" signature="onMouseMove(e)" doc="Event processor for onmousemove">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="_markTargetAnchor" ilk="function" signature="_markTargetAnchor(before)" doc="Assigns a class to the current target anchor based on &amp;amp;quot;before&amp;amp;quot; status" attributes="private">
                <variable ilk="argument" name="before" citdl="Boolean" />
              </scope>
              <scope name="_unmarkTargetAnchor" ilk="function" doc="Removes a class of the current target anchor based on &amp;amp;quot;before&amp;amp;quot; status." attributes="private" />
              <scope name="setIndicatorPosition" ilk="function" signature="setIndicatorPosition(e)" doc="set the position of the drop indicator">
                <variable ilk="argument" name="e" citdl="Event" />
              </scope>
              <scope name="onOverEvent" doc="" />
              <scope name="onOutEvent" ilk="function" doc="" />
              <scope name="deleteDashedZone" ilk="function" doc="hide the dashed zone" />
              <scope name="insertDashedZone" ilk="function" signature="insertDashedZone(before)" doc="Insert the dashed zone at the right place">
                <variable ilk="argument" name="before" citdl="Boolean" />
              </scope>
              <scope name="insertNodes" ilk="function" signature="insertNodes(addSelected,data,before,anchor)" doc="Inserts new data items (see Dojo Container's insertNodes method for details).">
                <variable ilk="argument" name="addSelected" citdl="Boolean" />
                <variable ilk="argument" name="data" citdl="Array" />
                <variable ilk="argument" name="before" citdl="Boolean" />
                <variable ilk="argument" name="anchor" citdl="Node" />
              </scope>
              <scope name="_checkAutoScroll" ilk="function" signature="_checkAutoScroll(e)" attributes="private" doc="">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="_autoScrollUp" ilk="function" signature="_autoScrollUp(node)" attributes="private" doc="">
                <variable ilk="argument" name="node" />
              </scope>
              <scope name="_autoScrollDown" ilk="function" signature="_autoScrollDown(node)" attributes="private" doc="">
                <variable ilk="argument" name="node" />
              </scope>
              <scope name="_stopAutoScroll" ilk="function" attributes="private" doc="" />
              <scope name="_sumAncestorProperties" ilk="function" signature="_sumAncestorProperties(node,prop)" returns="integer" attributes="private" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="prop" />
              </scope>
              <variable name="current" doc="">
                <variable name="coords" doc="" />
              </variable>
              <variable name="selection" doc="" />
              <variable name="anchor" doc="" />
              <variable name="_drop" attributes="private" doc="" />
              <variable name="offsetDrag" doc="">
                <variable name="x" doc="" />
                <variable name="y" doc="" />
              </variable>
              <variable name="containerSource" doc="" />
              <variable name="targetAnchor" doc="" />
              <variable name="targetBox" doc="" />
              <variable name="before" doc="" />
              <variable name="_over" attributes="private" doc="" />
              <variable name="dropObject" doc="">
                <variable name="c" doc="" />
              </variable>
              <variable name="firstIndicator" doc="" />
              <variable name="_timer" attributes="private" doc="" />
              <variable name="autoScrollActive" doc="" />
              <variable name="childBoxes" doc="" />
              <variable name="dropIndicator" doc="" />
              <variable name="withHandles" doc="" />
              <variable name="handleClasses" doc="" />
              <variable name="opacity" doc="" />
              <variable name="allowAutoScroll" doc="" />
              <variable name="dom" doc="" />
              <variable name="singular" doc="" />
              <variable name="skipForm" doc="" />
              <variable name="defaultHandleClass" doc="" />
              <variable name="isDropped" doc="" />
              <variable name="isOffset" doc="" />
              <variable name="hideSource" doc="" />
            </scope>
            <scope name="DropIndicator" ilk="function" doc="An empty widget to show at the user the drop zone of the widget." signature="DropIndicator(cn,tag)">
              <variable ilk="argument" name="cn" citdl="String" />
              <variable ilk="argument" name="tag" citdl="String" />
              <scope name="isInserted" ilk="function" doc="" />
              <scope name="create" ilk="function" signature="create(/*nodeRef*/){ 		if(this.node &amp;&amp; this.isInserted()) return this.node; 		var h= &quot;90px&quot;;  		var el = document.createElement(this.tag); 		if(this.style){ 			el.className = this.style; 			el.style.height = h; 		}else{ 			with(el.style) { 				position = &quot;relative&quot;; 				border = &quot;1px dashed #F60&quot;; 				margin = &quot;2px&quot;; 				height = h; 			} 		} 		this.node = el; 		return el; 	}, 	 	destroy : function()" doc="">
                <variable ilk="argument" name="/*nodeRef*/){ 		if(this.node &amp;&amp; this.isInserted()) return this.node; 		var h= &quot;90px&quot;;  		var el = document.createElement(this.tag); 		if(this.style){ 			el.className = this.style; 			el.style.height = h; 		}else{ 			with(el.style) { 				position = &quot;relative&quot;; 				border = &quot;1px dashed #F60&quot;; 				margin = &quot;2px&quot;; 				height = h; 			} 		} 		this.node = el; 		return el; 	}, 	 	destroy : function(" citdl="NodenodeRef" />
              </scope>
              <scope name="destroy" ilk="function" doc="" />
              <variable name="node" doc="">
                <scope name="parentNode">
                  <variable name="nodeType" doc="" />
                </scope>
              </variable>
              <variable name="tag" doc="" />
            </scope>
            <scope name="_setGcDndHandle" ilk="function" signature="_setGcDndHandle(service,withHandles,handleClasses,first)" attributes="private" doc="">
              <variable ilk="argument" name="service" />
              <variable ilk="argument" name="withHandles" />
              <variable ilk="argument" name="handleClasses" />
              <variable ilk="argument" name="first" />
            </scope>
            <scope name="handdleIE" doc="" />
          </variable>
        </variable>
        <variable name="math" citdl="Object" doc="A collection of various advanced math functions.">
          <variable name="curves" citdl="Object" doc="">
            <scope name="Line" doc="" />
            <scope name="Bezier" doc="" />
            <scope name="CatmullRom" doc="" />
            <scope name="Arc" doc="" />
            <scope name="CenteredArc" doc="" />
            <scope name="Circle" doc="" />
            <scope name="Path" doc="" />
          </variable>
          <variable name="matrix" citdl="Object" doc="">
            <scope name="iDF" doc="" />
            <scope name="ALMOST_ZERO" doc="" />
            <scope name="multiply" ilk="function" signature="multiply(a,b)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="Array" />
              <variable ilk="argument" name="b" citdl="Array" />
            </scope>
            <scope name="product" ilk="function" returns="Array" attributes="private" doc="" />
            <scope name="sum" ilk="function" returns="Number|Array" attributes="private" doc="" />
            <scope name="inverse" ilk="function" signature="inverse(a)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="Array" />
            </scope>
            <scope name="determinant" ilk="function" signature="determinant(a)" returns="Number" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="Array" />
            </scope>
            <scope name="upperTriangle" ilk="function" signature="upperTriangle(m)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="m" citdl="Array" />
              <variable name="iDF" doc="" />
            </scope>
            <scope name="create" ilk="function" signature="create(a,b,value)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="Number" />
              <variable ilk="argument" name="b" citdl="Number" />
              <variable ilk="argument" name="value" citdl="Number" />
            </scope>
            <scope name="ones" ilk="function" signature="ones(a,b)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="Number" />
              <variable ilk="argument" name="b" citdl="Number" />
            </scope>
            <scope name="zeros" ilk="function" signature="zeros(a,b)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="Number" />
              <variable ilk="argument" name="b" citdl="Number" />
            </scope>
            <scope name="identity" ilk="function" signature="identity(size,scale)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="size" citdl="Number" />
              <variable ilk="argument" name="scale" citdl="Number" />
            </scope>
            <scope name="adjoint" ilk="function" signature="adjoint(a)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="Array" />
            </scope>
            <scope name="transpose" ilk="function" signature="transpose(a)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="Array" />
            </scope>
            <scope name="format" ilk="function" signature="format(a,points)" returns="string" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="Array" />
              <variable ilk="argument" name="points" citdl="Number" />
            </scope>
            <scope name="copy" ilk="function" signature="copy(a)" returns="Array" attributes="private" doc="">
              <variable ilk="argument" name="a" citdl="Array" />
            </scope>
            <scope name="scale" ilk="function" signature="scale(a,factor)" doc="">
              <variable ilk="argument" name="a" citdl="Array" />
              <variable ilk="argument" name="factor" citdl="Number" />
            </scope>
          </variable>
        </variable>
        <variable name="off" citdl="Object" doc="the Dojo Offline project">
          <variable name="files" citdl="Object" doc="">
            <scope name="versionURL" citdl="String" doc="An optional file, that if present, records the version of our bundle of files to make available offline. If this file is present, and we are not currently debugging, then we only refresh our offline files if the version has changed." />
            <scope name="listOfURLs" citdl="Array" doc="For advanced usage; most developers can ignore this. Our list of URLs that will be cached and made available offline." />
            <scope name="refreshing" citdl="boolean" doc="For advanced usage; most developers can ignore this. Whether we are currently in the middle of refreshing our list of offline files." />
            <scope name="_cancelID" attributes="private" doc="" />
            <scope name="_error" attributes="private" doc="" />
            <scope name="_errorMessages" attributes="private" doc="" />
            <scope name="_currentFileIndex" attributes="private" doc="" />
            <scope name="_store" attributes="private" doc="" />
            <scope name="_doSlurp" attributes="private" doc="" />
            <scope name="slurp" ilk="function"
            doc="Autoscans the page to find all resources to cache. This includes scripts, images, CSS, and hyperlinks to pages that are in the same scheme/port/host as this page. We also scan the embedded CSS of any stylesheets to find @import statements and url()'s. You should call this method from the top-level, outside of any functions and before the page loads:  &amp;amp;lt;script&amp;amp;gt; dojo.require(&amp;amp;quot;dojox.sql&amp;amp;quot;); dojo.require(&amp;amp;quot;dojox.off&amp;amp;quot;); dojo.require(&amp;amp;quot;dojox.off.ui&amp;amp;quot;); dojo.require(&amp;amp;quot;dojox.off.sync&amp;amp;quot;);  // configure how we should work offline  // set our application name dojox.off.ui.appName = &amp;amp;quot;Moxie&amp;amp;quot;;  // automatically &amp;amp;quot;slurp&amp;amp;quot; the page and // capture the resources we need offline dojox.off.files.slurp();  // tell Dojo Offline we are ready for it to initialize itself now // that we have finished configuring it for our application dojox.off.initialize(); &amp;amp;lt;/script&amp;amp;gt;  Note that inline styles on elements are not handled (i.e. if you somehow have an inline style that uses a URL); object and embed tags are not scanned since their format differs based on type; and elements created by JavaScript after page load are not found. For these you must manually add them with a dojox.off.files.cache() method call.  just schedule the slurp once the page is loaded and Dojo Offline is ready to slurp; dojox.off will call our _slurp() method before indicating it is finished loading">

              <variable name="_doSlurp" attributes="private" doc="" />
            </scope>
            <scope name="cache" ilk="function" signature="cache(urlOrList)" doc="void  Caches a file or list of files to be available offline. This can either be a full URL, such as http://foobar.com/index.html, or a relative URL, such as ../index.html. This URL is not actually cached until dojox.off.sync.synchronize() is called.">
              <variable ilk="argument" name="urlOrList" citdl="String" doc="or Array[] A URL of a file to cache or an Array of Strings of files to cache  console.debug(&amp;amp;quot;dojox.off.files.cache, urlOrList=&amp;amp;quot;+urlOrList);" />
            </scope>
            <scope name="printURLs" ilk="function" doc="A helper function that will dump and print out all of the URLs that are cached for offline availability. This can help with debugging if you are trying to make sure that all of your URLs are available offline" />
            <scope name="remove" ilk="function" signature="remove(url)" doc="void  Removes a URL from the list of files to cache.">
              <variable ilk="argument" name="url" citdl="String" doc="The URL to remove" />
              <variable name="listOfURLs" doc="" />
            </scope>
            <scope name="isAvailable" ilk="function" signature="isAvailable(url)" doc="boolean  Determines whether the given resource is available offline.">
              <variable ilk="argument" name="url" citdl="String" doc="The URL to check" />
            </scope>
            <scope name="refresh" ilk="function" signature="refresh(callback)" doc="void console.debug(&amp;amp;quot;dojox.off.files.refresh&amp;amp;quot;);  For advanced usage; most developers can ignore this. Refreshes our list of offline resources, making them available offline.">
              <variable ilk="function" name="callback" doc="A callback that receives two arguments: whether an error occurred, which is a boolean; and an array of error message strings with details on errors encountered. If no error occured then message is empty array with length 0." />
              <variable name="refreshing" doc="" />
            </scope>
            <scope name="abortRefresh" ilk="function" doc="For advanced usage; most developers can ignore this. Aborts and cancels a refresh.">
              <variable name="refreshing" doc="" />
            </scope>
            <scope name="_slurp" ilk="function" attributes="private" doc="" />
            <scope name="_sameLocation" ilk="function" signature="_sameLocation(url)" attributes="private" doc="">
              <variable ilk="argument" name="url" />
            </scope>
            <scope name="_trimAnchor" ilk="function" signature="_trimAnchor(url)" attributes="private" doc="">
              <variable ilk="argument" name="url" />
            </scope>
            <scope name="_doRefresh" ilk="function" signature="_doRefresh(callback,newVersion)" attributes="private" doc="">
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="newVersion" />
              <variable name="_store" attributes="private" doc="" />
              <variable name="_currentFileIndex" attributes="private" doc="" />
              <variable name="_cancelID" attributes="private" doc="" />
            </scope>
            <scope name="_getVersionInfo" ilk="function" signature="_getVersionInfo(callback)" attributes="private" doc="">
              <variable ilk="argument" name="callback" />
            </scope>
          </variable>
          <variable name="offline" citdl="Object" doc="" />
          <variable name="resources" citdl="Object" doc="">
            <variable name="learnhow" citdl="Object" doc="" />
          </variable>
          <variable name="sync" citdl="Object" doc="">
            <scope name="ActionLog" ilk="function" doc="">
              <variable name="entries" citdl="Array" doc="An array of our action entries, where each one is simply a custom object literal that were passed to add() when this action entry was added." />
              <variable name="reasonHalted" citdl="String" doc="If we halted, the reason why" />
              <variable name="isReplaying" citdl="boolean" doc="If true, we are in the middle of replaying a command log; if false, then we are not" />
              <scope name="autoSave" citdl="boolean" doc="Whether we automatically save the action log after each call to add(); defaults to true. For applications that are rapidly adding many action log entries in a short period of time, it can be useful to set this to false and simply call save() yourself when you are ready to persist your command log -- otherwise performance could be slow as the default action is to attempt to persist the actions log constantly with calls to add()." />
              <scope name="add" ilk="function" signature="add(action)" doc="void  Adds an action to our action log">
                <variable ilk="argument" name="action" citdl="Object" />
              </scope>
              <scope name="onReplay" ilk="function" signature="onReplay(action,actionLog)" doc="void  Called when we replay our log, for each of our action entries.">
                <variable ilk="argument" name="action" citdl="Object" doc="A custom object literal representing an action for this application, such as {actionName: &amp;amp;quot;create&amp;amp;quot;, item: {title: &amp;amp;quot;message&amp;amp;quot;, content: &amp;amp;quot;hello world&amp;amp;quot;}}" />
                <variable ilk="argument" name="actionLog" citdl="dojox.off.sync.ActionLog" doc="A reference to the dojox.off.sync.actions log so that developers can easily call actionLog.continueReplay() or actionLog.haltReplay()." />
              </scope>
              <scope name="length" ilk="function" doc="Number  Returns the length of this action log" />
              <scope name="haltReplay" ilk="function" signature="haltReplay(reason)" doc="void Halts replaying this command log.">
                <variable ilk="argument" name="reason" citdl="String" doc="The reason we halted." />
              </scope>
              <scope name="continueReplay" ilk="function" doc="void  Indicates that we should continue processing out list of actions." />
              <scope name="clear" ilk="function" doc="void  Completely clears this action log of its entries" />
              <scope name="replay" ilk="function" doc="void  For advanced usage; most developers can ignore this. Replays all of the commands that have been cached in this command log when we go back online; onCommand will be called for each command we have" />
              <scope name="onReplayFinished" ilk="function" doc="For advanced usage; most developers can ignore this. Called when we are finished replaying our commands; called if we have successfully exhausted all of our commands, or if an error occurred during replaying. The default implementation simply continues the synchronization process. Connect to this to register for the event:  dojo.connect(dojox.off.sync.actions, &amp;amp;quot;onReplayFinished&amp;amp;quot;, someFunc)" />
              <scope name="toString" ilk="function" doc="" />
              <scope name="_save" ilk="function" signature="_save(callback)" attributes="private" doc="">
                <variable ilk="argument" name="callback" />
              </scope>
              <scope name="_load" ilk="function" signature="_load(callback)" attributes="private" doc="">
                <variable ilk="argument" name="callback" />
              </scope>
            </scope>
            <scope name="isSyncing" doc="" />
            <scope name="cancelled" doc="" />
            <scope name="successful" doc="" />
            <scope name="details" doc="" />
            <scope name="error" doc="" />
            <scope name="actions" doc="" />
            <scope name="autoSync" doc="" />
            <scope name="onSync" ilk="function" signature="onSync(type)" doc="">
              <variable ilk="argument" name="type" citdl="String" />
            </scope>
            <scope name="synchronize" ilk="function" doc="void Starts synchronizing">
              <variable name="isSyncing" doc="" />
              <variable name="successful" doc="" />
              <variable name="details" doc="" />
              <variable name="cancelled" doc="" />
            </scope>
            <scope name="cancel" ilk="function" doc="void  Attempts to cancel this sync session">
              <variable name="cancelled" doc="" />
            </scope>
            <scope name="finishedDownloading" ilk="function" signature="finishedDownloading(successful,errorMessage)" doc="Applications call this method from their after getting a &amp;amp;quot;download&amp;amp;quot; event in dojox.off.sync.onSync to signal that they are finished downloading any data that should be available offline">
              <variable ilk="argument" name="successful" citdl="boolean" doc="Whether our downloading was successful or not. If not present, defaults to true." />
              <variable ilk="argument" name="errorMessage" citdl="String" doc="If unsuccessful, a message explaining why" />
              <variable name="successful" citdl="boolean?" doc="Whether our downloading was successful or not. If not present, defaults to true." />
              <variable name="error" doc="" />
            </scope>
            <scope name="start" ilk="function" doc="void  For advanced usage; most developers can ignore this. Called at the start of the syncing process. Advanced developers can over-ride this method to use their own sync mechanism to start syncing." />
            <scope name="refreshFiles" ilk="function" doc="void  For advanced usage; most developers can ignore this. Called when we are going to refresh our list of offline files during syncing. Advanced developers can over-ride this method to do some advanced magic related to refreshing files.  dojo.debug(&amp;amp;quot;refreshFiles&amp;amp;quot;);">
              <variable name="error" doc="" />
              <variable name="successful" doc="" />
            </scope>
            <scope name="upload" ilk="function" doc="void  For advanced usage; most developers can ignore this. Called when syncing wants to upload data. Advanced developers can over-ride this method to completely throw away the Action Log and replaying system and roll their own advanced sync mechanism if needed." />
            <scope name="download" ilk="function" doc="void  For advanced usage; most developers can ignore this. Called when syncing wants to download data. Advanced developers can over-ride this method to use their own sync mechanism." />
            <scope name="finished" ilk="function" doc="void  For advanced usage; most developers can ignore this. Called when syncing is finished. Advanced developers can over-ride this method to clean up after finishing their own sync mechanism they might have rolled.">
              <variable name="isSyncing" doc="" />
              <variable name="successful" doc="" />
            </scope>
            <scope name="_save" ilk="function" signature="_save(callback)" attributes="private" doc="">
              <variable ilk="argument" name="callback" />
            </scope>
            <scope name="_load" ilk="function" signature="_load(callback)" attributes="private" doc="">
              <variable ilk="argument" name="callback" />
            </scope>
          </variable>
          <variable name="ui" citdl="Object" doc="">
            <scope name="appName" doc="" />
            <scope name="autoEmbed" doc="" />
            <scope name="autoEmbedID" doc="" />
            <scope name="runLink" doc="" />
            <scope name="runLinkTitle" doc="" />
            <scope name="learnHowPath" doc="" />
            <scope name="customLearnHowPath" doc="" />
            <scope name="htmlTemplatePath" doc="" />
            <scope name="cssTemplatePath" doc="" />
            <scope name="onlineImagePath" doc="" />
            <scope name="offlineImagePath" doc="" />
            <scope name="rollerImagePath" doc="" />
            <scope name="checkmarkImagePath" doc="" />
            <scope name="learnHowJSPath" doc="" />
            <scope name="_initialized" attributes="private" doc="" />
            <scope name="onLoad" ilk="function" doc="A function that should be connected to allow your application to know when Dojo Offline, the page, and the Offline Widget are all initialized and ready to be used:  dojo.connect(dojox.off.ui, &amp;amp;quot;onLoad&amp;amp;quot;, someFunc)" />
            <scope name="_initialize" ilk="function" attributes="private" doc="">
              <variable name="runLinkText" doc="" />
            </scope>
            <scope name="_doAutoEmbed" ilk="function" attributes="private" doc="" />
            <scope name="_templateLoaded" ilk="function" signature="_templateLoaded(data)" attributes="private" doc="">
              <variable ilk="argument" name="data" />
              <variable name="_initialized" attributes="private" doc="" />
            </scope>
            <scope name="_testNet" ilk="function" attributes="private" doc="" />
            <scope name="_updateNetIndicator" ilk="function" attributes="private" doc="" />
            <scope name="_initLearnHow" ilk="function" attributes="private" doc="" />
            <scope name="_validateAppName" ilk="function" signature="_validateAppName(appName)" attributes="private" doc="">
              <variable ilk="argument" name="appName" />
            </scope>
            <scope name="_updateSyncUI" ilk="function" attributes="private" doc="" />
            <scope name="_setSyncMessage" ilk="function" signature="_setSyncMessage(message)" attributes="private" doc="">
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="_clearSyncMessage" ilk="function" attributes="private" doc="" />
            <scope name="_initImages" ilk="function" attributes="private" doc="" />
            <scope name="_showDetails" ilk="function" signature="_showDetails(evt)" attributes="private" doc="">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="_cancel" ilk="function" signature="_cancel(evt)" attributes="private" doc="">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="_needsBrowserRestart" ilk="function" attributes="private" doc="" />
            <scope name="_showNeedsOfflineCache" ilk="function" attributes="private" doc="" />
            <scope name="_hideNeedsOfflineCache" ilk="function" attributes="private" doc="" />
            <scope name="_initMainEvtHandlers" ilk="function" attributes="private" doc="" />
            <scope name="_setOfflineEnabled" ilk="function" signature="_setOfflineEnabled(enabled)" attributes="private" doc="">
              <variable ilk="argument" name="enabled" />
            </scope>
            <scope name="_syncFinished" ilk="function" attributes="private" doc="" />
            <scope name="_onFrameworkEvent" ilk="function" signature="_onFrameworkEvent(type,saveData)" attributes="private" doc="">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="saveData" />
              <variable name="_userInformed" attributes="private" doc="" />
            </scope>
            <scope name="_onSync" ilk="function" signature="_onSync(type)" attributes="private" doc="">
              <variable ilk="argument" name="type" />
            </scope>
            <scope name="_onNetwork" ilk="function" signature="_onNetwork(type)" doc="Called when we go on- or off-line" attributes="private">
              <variable ilk="argument" name="type" citdl="String" doc="&amp;amp;quot;online&amp;amp;quot; if we just moved online, and &amp;amp;quot;offline&amp;amp;quot; if we just moved offline." />
            </scope>
          </variable>
        </variable>
        <variable name="presentation" citdl="Object" doc="A simple, experimental PowerPoint-like presentation project" />
        <variable name="_sql" citdl="Object" doc="objects to support Dojo Offline (dojox.off)" attributes="private" />
        <variable name="crypto" citdl="Object" doc="Cryptography in JS. DEPRECATED: use dojox.encoding instead." />
        <variable name="regexp" citdl="Object" doc="">
          <variable name="ca" citdl="Object" doc="">
            <scope name="postalCode" ilk="function" doc="" />
            <scope name="province" ilk="function" doc="a regular expression to match Canadian Province Abbreviations" />
          </variable>
          <variable name="us" citdl="Object" doc="">
            <scope name="state" ilk="function" signature="state(flags)" doc="A regular expression to match US state and territory abbreviations  flags An object. flags.allowTerritories Allow Guam, Puerto Rico, etc. Default is true. flags.allowMilitary Allow military 'states', e.g. Armed Forces Europe (AE). Default is true." returns="String" attributes="private">
              <variable ilk="argument" name="flags" citdl="Object" />
            </scope>
          </variable>
          <scope name="tld" ilk="function" signature="tld(flags)" doc="Builds a RE that matches a top-level domain" returns="String" attributes="private">
            <variable ilk="argument" name="flags" citdl="Object" doc="flags.allowCC Include 2 letter country code domains. Default is true. flags.allowGeneric Include the generic domains. Default is true. flags.allowInfra Include infrastructure domains. Default is true." />
          </scope>
          <scope name="ipAddress" ilk="function" signature="ipAddress(flags)" doc="Builds a RE that matches an IP Address" returns="String" attributes="private">
            <variable ilk="argument" name="flags" citdl="Object" />
          </scope>
          <scope name="host" ilk="function" signature="host(flags)" doc="Builds a RE that matches a host" returns="String" attributes="private">
            <variable ilk="argument" name="flags" citdl="Object" doc="An object. flags.allowNamed Allow a named host for local networks. Default is false. flags.allowIP Allow an IP address for hostname. Default is true. flags.allowLocal Allow the host to be &amp;amp;quot;localhost&amp;amp;quot;. Default is false. flags.allowPort Allow a port number to be present. Default is true. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." />
          </scope>
          <scope name="url" ilk="function" signature="url(flags)" doc="Builds a regular expression that matches a URL" returns="&amp;quot;; } return &amp;quot;&amp;quot;; }" attributes="private">
            <variable ilk="argument" name="flags" citdl="Object" doc="An object flags.scheme Can be true, false, or [true, false]. This means: required, not allowed, or match either one. flags in regexp.host can be applied. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." />
          </scope>
          <scope name="emailAddress" ilk="function" signature="emailAddress(flags)" returns="String" attributes="private" doc="">
            <variable ilk="argument" name="flags" citdl="Object" />
          </scope>
          <scope name="emailAddressList" ilk="function" signature="emailAddressList(flags)" doc="Builds a regular expression that matches a list of email addresses." returns="String" attributes="private">
            <variable ilk="argument" name="flags" citdl="Object" doc="An object. flags.listSeparator The character used to separate email addresses. Default is &amp;amp;quot;;&amp;amp;quot;, &amp;amp;quot;,&amp;amp;quot;, &amp;amp;quot;\n&amp;amp;quot; or &amp;amp;quot; &amp;amp;quot;. flags in regexp.emailAddress can be applied. flags in regexp.host can be applied. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." />
          </scope>
          <scope name="numberFormat" ilk="function" signature="numberFormat(flags)" doc="Builds a regular expression to match any sort of number based format" returns="String" attributes="private">
            <variable ilk="argument" name="flags" citdl="Object" doc="An object flags.format A string or an Array of strings for multiple formats." />
          </scope>
        </variable>
        <variable name="storage" citdl="Object" doc="">
          <scope name="AirDBStorageProvider" ilk="function" doc="">
            <scope name="DATABASE_FILE" doc="" />
            <scope name="TABLE_NAME" doc="" />
            <variable name="initialized" doc="" />
            <variable name="_db" attributes="private" doc="" />
            <scope name="initialize" ilk="function" doc="" />
            <scope name="_sql" ilk="function" signature="_sql(query,params)" attributes="private" doc="">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="params" />
            </scope>
            <scope name="_beginTransaction" ilk="function" attributes="private" doc="" />
            <scope name="_commitTransaction" ilk="function" attributes="private" doc="" />
            <scope name="isAvailable" ilk="function" doc="" />
            <scope name="put" ilk="function" signature="put(key,value,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="get" ilk="function" signature="get(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getNamespaces" ilk="function" doc="" />
            <scope name="getKeys" ilk="function" signature="getKeys(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="clear" ilk="function" signature="clear(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="remove" ilk="function" signature="remove(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="putMultiple" ilk="function" signature="putMultiple(keys,values,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getMultiple" ilk="function" signature="getMultiple(keys,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="removeMultiple" ilk="function" signature="removeMultiple(keys,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="isPermanent" ilk="function" doc="" />
            <scope name="getMaximumSize" ilk="function" doc="" />
            <scope name="hasSettingsUI" ilk="function" doc="" />
            <scope name="showSettingsUI" ilk="function" doc="" />
            <scope name="hideSettingsUI" ilk="function" doc="" />
            <variable name="_statusHandler" attributes="private" doc="" />
          </scope>
          <scope name="AirEncryptedLocalStorageProvider" ilk="function" doc="">
            <scope name="initialize" ilk="function" doc="" />
            <scope name="isAvailable" ilk="function" doc="" />
            <scope name="_getItem" ilk="function" signature="_getItem(key)" attributes="private" doc="">
              <variable ilk="argument" name="key" />
            </scope>
            <scope name="_setItem" ilk="function" signature="_setItem(key,value)" attributes="private" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_removeItem" ilk="function" signature="_removeItem(key)" attributes="private" doc="">
              <variable ilk="argument" name="key" />
            </scope>
            <scope name="put" ilk="function" signature="put(key,value,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="get" ilk="function" signature="get(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getNamespaces" ilk="function" doc="" />
            <scope name="getKeys" ilk="function" signature="getKeys(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="clear" ilk="function" signature="clear(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="remove" ilk="function" signature="remove(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="putMultiple" ilk="function" signature="putMultiple(keys,values,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getMultiple" ilk="function" signature="getMultiple(keys,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="removeMultiple" ilk="function" signature="removeMultiple(keys,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="isPermanent" ilk="function" doc="" />
            <scope name="getMaximumSize" ilk="function" doc="" />
            <scope name="hasSettingsUI" ilk="function" doc="" />
            <scope name="showSettingsUI" ilk="function" doc="" />
            <scope name="hideSettingsUI" ilk="function" doc="" />
            <variable name="_statusHandler" attributes="private" doc="" />
          </scope>
          <scope name="AirFileStorageProvider" ilk="function" doc="">
            <variable name="initialized" doc="" />
            <scope name="_storagePath" attributes="private" doc="" />
            <scope name="initialize" ilk="function" doc="" />
            <scope name="isAvailable" ilk="function" doc="" />
            <scope name="put" ilk="function" signature="put(key,value,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="get" ilk="function" signature="get(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getNamespaces" ilk="function" doc="" />
            <scope name="getKeys" ilk="function" signature="getKeys(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="clear" ilk="function" signature="clear(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="remove" ilk="function" signature="remove(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="putMultiple" ilk="function" signature="putMultiple(keys,values,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getMultiple" ilk="function" signature="getMultiple(keys,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="removeMultiple" ilk="function" signature="removeMultiple(keys,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="isPermanent" ilk="function" doc="" />
            <scope name="getMaximumSize" ilk="function" doc="" />
            <scope name="hasSettingsUI" ilk="function" doc="" />
            <scope name="showSettingsUI" ilk="function" doc="" />
            <scope name="hideSettingsUI" ilk="function" doc="" />
            <variable name="_statusHandler" attributes="private" doc="" />
          </scope>
          <scope name="FlashStorageProvider" ilk="function" doc="">
            <variable name="initialized" doc="" />
            <variable name="_available" attributes="private" doc="" />
            <variable name="_statusHandler" attributes="private" doc="" />
            <variable name="_flashReady" attributes="private" doc="" />
            <variable name="_pageReady" attributes="private" doc="" />
            <scope name="initialize" ilk="function" doc="" />
            <scope name="setFlushDelay" ilk="function" signature="setFlushDelay(newDelay)" doc="">
              <variable ilk="argument" name="newDelay" />
            </scope>
            <scope name="getFlushDelay" ilk="function" doc="" />
            <scope name="flush" ilk="function" signature="flush(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="isAvailable" ilk="function" doc="" />
            <scope name="put" ilk="function" signature="put(key,value,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="putMultiple" ilk="function" signature="putMultiple(keys,values,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="get" ilk="function" signature="get(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getMultiple" ilk="function" signature="getMultiple(keys,namespace)" doc="">
              <variable ilk="argument" name="keys" citdl="array" />
              <variable ilk="argument" name="namespace" citdl="string" />
            </scope>
            <scope name="_destringify" ilk="function" signature="_destringify(results)" attributes="private" doc="">
              <variable ilk="argument" name="results" />
            </scope>
            <scope name="getKeys" ilk="function" signature="getKeys(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getNamespaces" ilk="function" doc="" />
            <scope name="clear" ilk="function" signature="clear(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="remove" ilk="function" signature="remove(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="removeMultiple" ilk="function" signature="removeMultiple(keys,namespace)" doc="">
              <variable ilk="argument" name="keys" citdl="array" />
              <variable ilk="argument" name="namespace" citdl="string" />
            </scope>
            <scope name="isPermanent" ilk="function" doc="" />
            <scope name="getMaximumSize" ilk="function" doc="" />
            <scope name="hasSettingsUI" ilk="function" doc="" />
            <scope name="showSettingsUI" ilk="function" doc="" />
            <scope name="hideSettingsUI" ilk="function" doc="" />
            <scope name="getResourceList" ilk="function" doc="" />
            <scope name="_loaded" ilk="function" attributes="private" doc="" />
            <scope name="_onStatus" ilk="function" signature="_onStatus(statusResult,key,namespace)" attributes="private" doc="">
              <variable ilk="argument" name="statusResult" />
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <variable name="_allNamespaces" attributes="private" doc="" />
          </scope>
          <scope name="GearsStorageProvider" ilk="function" doc="Storage provider that uses the features of Google Gears to store data (it is saved into the local SQL database provided by Gears, using dojox.sql)">
            <variable name="TABLE_NAME" doc="" />
            <variable name="initialized" doc="" />
            <variable name="_available" attributes="private" doc="" />
            <variable name="_storageReady" attributes="private" doc="" />
            <scope name="initialize" ilk="function" doc="" />
            <scope name="isAvailable" ilk="function" doc="" />
            <scope name="put" ilk="function" signature="put(key,value,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="get" ilk="function" signature="get(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getNamespaces" ilk="function" doc="" />
            <scope name="getKeys" ilk="function" signature="getKeys(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="clear" ilk="function" signature="clear(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="remove" ilk="function" signature="remove(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="putMultiple" ilk="function" signature="putMultiple(keys,values,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getMultiple" ilk="function" signature="getMultiple(keys,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="removeMultiple" ilk="function" signature="removeMultiple(keys,namespace)" doc="">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="isPermanent" ilk="function" doc="" />
            <scope name="getMaximumSize" ilk="function" doc="" />
            <scope name="hasSettingsUI" ilk="function" doc="" />
            <scope name="showSettingsUI" ilk="function" doc="" />
            <scope name="hideSettingsUI" ilk="function" doc="" />
            <scope name="_initStorage" ilk="function" attributes="private" doc="" />
            <variable name="_statusHandler" attributes="private" doc="" />
          </scope>
          <scope name="Provider" ilk="function" doc="A singleton for working with dojox.storage.">
            <scope name="SUCCESS" citdl="String" doc="Flag that indicates a put() call to a storage provider was succesful." />
            <scope name="FAILED" citdl="String" doc="Flag that indicates a put() call to a storage provider failed." />
            <scope name="PENDING" citdl="String" doc="Flag that indicates a put() call to a storage provider is pending user approval." />
            <scope name="SIZE_NOT_AVAILABLE" citdl="String" doc="Returned by getMaximumSize() if this storage provider can not determine the maximum amount of data it can support." />
            <scope name="SIZE_NO_LIMIT" citdl="String" doc="Returned by getMaximumSize() if this storage provider has no theoretical limit on the amount of data it can store." />
            <scope name="DEFAULT_NAMESPACE" citdl="String" doc="The namespace for all storage operations. This is useful if several applications want access to the storage system from the same domain but want different storage silos." />
            <scope name="onHideSettingsUI" ilk="function" doc="If a function is assigned to this property, then when the settings provider's UI is closed this function is called. Useful, for example, if the user has just cleared out all storage for this provider using the settings UI, and you want to update your UI." />
            <scope name="initialize" ilk="function" doc="Allows this storage provider to initialize itself. This is called after the page has finished loading, so you can not do document.writes(). Storage Provider subclasses should initialize themselves inside of here rather than in their function constructor." />
            <scope name="isAvailable" ilk="function" doc="Boolean  Returns whether this storage provider is available on this platform." />
            <scope name="put" ilk="function" signature="put(key,value,resultsHandler,namespace)" doc="Puts a key and value into this storage system.">
              <variable ilk="argument" name="key" citdl="string" doc="A string key to use when retrieving this value in the future." />
              <variable ilk="argument" name="value" citdl="object" doc="A value to store; this can be any JavaScript type." />
              <variable ilk="argument" name="resultsHandler" citdl="function" doc="A callback function that will receive three arguments. The first argument is one of three values: dojox.storage.SUCCESS, dojox.storage.FAILED, or dojox.storage.PENDING; these values determine how the put request went. In some storage systems users can deny a storage request, resulting in a dojox.storage.FAILED, while in other storage systems a storage request must wait for user approval, resulting in a dojox.storage.PENDING status until the request is either approved or denied, resulting in another call back with dojox.storage.SUCCESS. The second argument in the call back is the key name that was being stored. The third argument in the call back is an optional message that details possible error messages that might have occurred during the storage process." />
              <variable ilk="argument" name="namespace" citdl="string" doc="Optional string namespace that this value will be placed into; if left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE" />
            </scope>
            <scope name="get" ilk="function" signature="get(key,namespace)" doc="Object  Gets the value with the given key. Returns null if this key is not in the storage system.">
              <variable ilk="argument" name="key" citdl="string" doc="A string key to get the value of." />
              <variable ilk="argument" name="namespace" citdl="string" doc="Optional string namespace that this value will be retrieved from; if left off, the value will be retrieved from dojox.storage.DEFAULT_NAMESPACE return: Returns any JavaScript object type; null if the key is not present" />
            </scope>
            <scope name="hasKey" ilk="function" signature="hasKey(key,namespace)" doc="Determines whether the storage has the given key." returns="Boolean" attributes="private">
              <variable ilk="argument" name="key" citdl="string" />
              <variable ilk="argument" name="namespace" citdl="string" />
            </scope>
            <scope name="getKeys" ilk="function" signature="getKeys(namespace)" doc="Array Enumerates all of the available keys in this storage system. return: Array of available keys">
              <variable ilk="argument" name="namespace" citdl="string" />
            </scope>
            <scope name="clear" ilk="function" signature="clear(namespace)" doc="Completely clears this storage system of all of it's values and keys. If 'namespace' is provided just clears the keys in that namespace.">
              <variable ilk="argument" name="namespace" citdl="string" />
            </scope>
            <scope name="remove" ilk="function" signature="remove(key,namespace)" doc="Removes the given key from this storage system.">
              <variable ilk="argument" name="key" citdl="string" />
              <variable ilk="argument" name="namespace" citdl="string" />
            </scope>
            <scope name="getNamespaces" ilk="function" doc="" />
            <scope name="isPermanent" ilk="function" doc="Boolean  Returns whether this storage provider's values are persisted when this platform is shutdown." />
            <scope name="getMaximumSize" ilk="function" doc="mixed The maximum storage allowed by this provider">
              <variable name="return_summary" />
            </scope>
            <scope name="putMultiple" ilk="function" signature="putMultiple(keys,values,resultsHandler,namespace)" doc="Puts multiple keys and values into this storage system.">
              <variable ilk="argument" name="keys" citdl="array" doc="An array of string keys to use when retrieving this value in the future, one per value to be stored" />
              <variable ilk="argument" name="values" citdl="array" doc="An array of values to store; this can be any JavaScript type, though the performance of plain strings is considerably better" />
              <variable ilk="argument" name="resultsHandler" citdl="function" doc="A callback function that will receive three arguments. The first argument is one of three values: dojox.storage.SUCCESS, dojox.storage.FAILED, or dojox.storage.PENDING; these values determine how the put request went. In some storage systems users can deny a storage request, resulting in a dojox.storage.FAILED, while in other storage systems a storage request must wait for user approval, resulting in a dojox.storage.PENDING status until the request is either approved or denied, resulting in another call back with dojox.storage.SUCCESS. The second argument in the call back is the key name that was being stored. The third argument in the call back is an optional message that details possible error messages that might have occurred during the storage process." />
              <variable ilk="argument" name="namespace" citdl="string" doc="Optional string namespace that this value will be placed into; if left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE" />
            </scope>
            <scope name="getMultiple" ilk="function" signature="getMultiple(keys,namespace)" doc="Object  Gets the valuse corresponding to each of the given keys. Returns a null array element for each given key that is not in the storage system.">
              <variable ilk="argument" name="keys" citdl="array" doc="An array of string keys to get the value of." />
              <variable ilk="argument" name="namespace" citdl="string" doc="Optional string namespace that this value will be retrieved from; if left off, the value will be retrieved from dojox.storage.DEFAULT_NAMESPACE return: Returns any JavaScript object type; null if the key is not present" />
            </scope>
            <scope name="removeMultiple" ilk="function" signature="removeMultiple(keys,namespace)" doc="Removes the given keys from this storage system.">
              <variable ilk="argument" name="keys" citdl="array" />
              <variable ilk="argument" name="namespace" citdl="string" />
            </scope>
            <scope name="isValidKeyArray" ilk="function" signature="isValidKeyArray(keys)" doc="">
              <variable ilk="argument" name="keys" />
            </scope>
            <scope name="hasSettingsUI" ilk="function" doc="Boolean Determines whether this provider has a settings UI." />
            <scope name="showSettingsUI" ilk="function" doc="If this provider has a settings UI, determined by calling hasSettingsUI(), it is shown." />
            <scope name="hideSettingsUI" ilk="function" doc="If this provider has a settings UI, hides it." />
            <scope name="isValidKey" ilk="function" signature="isValidKey(keyName)" doc="Boolean  Subclasses can call this to ensure that the key given is valid in a consistent way across different storage providers. We use the lowest common denominator for key values allowed: only letters, numbers, and underscores are allowed. No spaces.">
              <variable ilk="argument" name="keyName" citdl="string" />
            </scope>
            <scope name="getResourceList" ilk="function" doc="Array[]  Returns a list of URLs that this storage provider might depend on." />
          </scope>
          <scope name="WhatWGStorageProvider" ilk="function" doc="Storage provider that uses WHAT Working Group features in Firefox 2 to achieve permanent storage.">
            <variable name="initialized" doc="" />
            <variable name="_domain" attributes="private" doc="" />
            <variable name="_available" attributes="private" doc="" />
            <variable name="_statusHandler" attributes="private" doc="" />
            <scope name="_allNamespaces" attributes="private" doc="" />
            <scope name="_storageEventListener" attributes="private" doc="" />
            <scope name="initialize" ilk="function" doc="" />
            <scope name="isAvailable" ilk="function" doc="" />
            <scope name="put" ilk="function" signature="put(key,value,resultsHandler,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="get" ilk="function" signature="get(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="getNamespaces" ilk="function" doc="" />
            <scope name="getKeys" ilk="function" signature="getKeys(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="clear" ilk="function" signature="clear(namespace)" doc="">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="remove" ilk="function" signature="remove(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="isPermanent" ilk="function" doc="" />
            <scope name="getMaximumSize" ilk="function" doc="" />
            <scope name="hasSettingsUI" ilk="function" doc="" />
            <scope name="showSettingsUI" ilk="function" doc="" />
            <scope name="hideSettingsUI" ilk="function" doc="" />
            <scope name="getFullKey" ilk="function" signature="getFullKey(key,namespace)" doc="">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope name="_getDomain" ilk="function" attributes="private" doc="" />
          </scope>
          <variable name="_common" citdl="Object" attributes="private" doc="" />
          <scope name="manager" ilk="function" doc="A singleton class in charge of the dojox.storage system">
            <scope name="initialized" />
            <variable name="currentProvider" citdl="Object" doc="The storage provider that was automagically chosen to do storage on this platform, such as dojox.storage.FlashStorageProvider.">
              <variable name="declaredClass" doc="" />
            </variable>
            <variable name="available" doc="" />
            <variable name="providers" doc="" />
            <variable name="_initialized" attributes="private" doc="" />
            <variable name="_onLoadListeners" attributes="private" doc="" />
            <variable name="initialize" ilk="function" doc="Initializes the storage system and autodetects the best storage provider we can provide on this platform" />
            <variable name="register" ilk="function" signature="register(name,instance)" doc="Registers the existence of a new storage provider; used by subclasses to inform the manager of their existence. The storage manager will select storage providers based on their ordering, so the order in which you call this method matters.">
              <variable ilk="argument" name="name" citdl="string" doc="The full class name of this provider, such as &amp;amp;quot;dojox.storage.FlashStorageProvider&amp;amp;quot;." />
              <variable ilk="argument" name="instance" citdl="Object" doc="An instance of this provider, which we will use to call isAvailable() on.  keep list of providers as a list so that we can know what order storage providers are preferred; also, store the providers hashed by name in case someone wants to get a provider that uses a particular storage backend" />
            </variable>
            <variable name="setProvider" ilk="function" signature="setProvider(storageClass)" doc="Instructs the storageManager to use the given storage class for all storage requests.">
              <variable ilk="argument" name="storageClass" />
            </variable>
            <variable name="autodetect" ilk="function" doc="Autodetects the best possible persistent storage provider available on this platform.  console.debug(&amp;amp;quot;dojox.storage.manager.autodetect&amp;amp;quot;);" />
            <variable name="isAvailable" ilk="function" doc="Boolean Returns whether any storage options are available." />
            <variable name="addOnLoad" ilk="function" signature="addOnLoad(func)" doc="void  Adds an onload listener to know when Dojo Offline can be used.">
              <variable ilk="function" name="func" doc="A function to call when Dojo Offline is ready to go" />
            </variable>
            <variable name="removeOnLoad" ilk="function" signature="removeOnLoad(func)" doc="void Removes the given onLoad listener">
              <variable ilk="argument" name="func" />
            </variable>
            <variable name="isInitialized" ilk="function" doc="Boolean  Returns whether the storage system is initialized and ready to be used." />
            <variable name="supportsProvider" ilk="function" signature="supportsProvider(storageClass)" doc="Boolean Determines if this platform supports the given storage provider.">
              <variable ilk="argument" name="storageClass" citdl="string" />
            </variable>
            <variable name="getProvider" ilk="function" doc="Object Gets the current provider" />
            <variable name="loaded" ilk="function" doc="The storage provider should call this method when it is loaded and ready to be used. Clients who will use the provider will connect to this method to know when they can use the storage system. You can either use dojo.connect to connect to this function, or can use dojox.storage.manager.addOnLoad() to add a listener that does not depend on the dojo.event package." />
            <variable name="_fireLoaded" ilk="function" attributes="private" doc="" />
            <variable name="getResourceList" ilk="function" doc="Returns a list of whatever resources are necessary for storage providers to work." />
          </scope>
        </variable>
        <variable name="string" citdl="Object" doc="">
          <variable name="BidiComplex" citdl="Object" doc="">
            <scope name="attachInput" ilk="function" signature="attachInput(field,pattern)" doc="Attach key listeners to the INPUT field to accomodate dynamic complex BiDi expressions">
              <variable ilk="argument" name="field" citdl="DOMNode" doc="INPUT DOM node" />
              <variable ilk="argument" name="pattern" citdl="String" doc="Complex Expression Pattern type. One of &amp;amp;quot;FILE_PATH&amp;amp;quot;, &amp;amp;quot;URL&amp;amp;quot;, &amp;amp;quot;EMAIL&amp;amp;quot;, &amp;amp;quot;XPATH&amp;amp;quot;" />
            </scope>
            <scope name="createDisplayString" ilk="function" signature="createDisplayString(str,pattern)" doc="Create the display string by adding the Unicode direction Markers">
              <variable ilk="argument" name="str" citdl="String" />
              <variable ilk="argument" name="pattern" citdl="String" doc="Complex Expression Pattern type. One of &amp;amp;quot;FILE_PATH&amp;amp;quot;, &amp;amp;quot;URL&amp;amp;quot;, &amp;amp;quot;EMAIL&amp;amp;quot;, &amp;amp;quot;XPATH&amp;amp;quot;" />
            </scope>
            <scope name="stripSpecialCharacters" ilk="function" signature="stripSpecialCharacters(str)" doc="removes all Unicode directional markers from the string" returns="String" attributes="private">
              <variable ilk="argument" name="str" />
            </scope>
            <scope name="_ceKeyDown" ilk="function" signature="_ceKeyDown(event)" attributes="private" doc="">
              <variable ilk="argument" name="event" />
            </scope>
            <scope name="_ceKeyUp" ilk="function" signature="_ceKeyUp(event)" attributes="private" doc="">
              <variable ilk="argument" name="event" />
            </scope>
            <scope name="_processCopy" ilk="function" signature="_processCopy(obj,text,isReverse)" doc="This function strips the unicode directional controls when the text copied to the Clipboard" returns="FIXME: what's this?" attributes="private">
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="text" />
              <variable ilk="argument" name="isReverse" />
            </scope>
            <scope name="_ceCopyText" ilk="function" signature="_ceCopyText(obj)" attributes="private" doc="">
              <variable ilk="argument" name="obj" />
            </scope>
            <scope name="_ceCutText" ilk="function" signature="_ceCutText(obj)" attributes="private" doc="">
              <variable ilk="argument" name="obj" />
            </scope>
            <scope name="_getCaretPos" ilk="function" signature="_getCaretPos(event,obj)" attributes="private" doc="">
              <variable ilk="argument" name="event" />
              <variable ilk="argument" name="obj" />
            </scope>
            <scope name="_setSelectedRange" ilk="function" signature="_setSelectedRange(obj,selectionStart,selectionEnd)" attributes="private" doc="">
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="selectionStart" />
              <variable ilk="argument" name="selectionEnd" />
            </scope>
            <scope name="_isBidiChar" ilk="function" signature="_isBidiChar(c)" attributes="private" doc="">
              <variable ilk="argument" name="c" />
            </scope>
            <scope name="_isLatinChar" ilk="function" signature="_isLatinChar(c)" attributes="private" doc="">
              <variable ilk="argument" name="c" />
            </scope>
            <scope name="_isCharBeforeBiDiChar" ilk="function" signature="_isCharBeforeBiDiChar(buffer,i,previous)" attributes="private" doc="">
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="i" />
              <variable ilk="argument" name="previous" />
            </scope>
            <scope name="_parse" ilk="function" signature="_parse(str,pattern)" attributes="private" doc="">
              <variable ilk="argument" name="str" citdl="String" />
              <variable ilk="argument" name="pattern" citdl="String" />
            </scope>
            <scope name="_insertMarkers" ilk="function" signature="_insertMarkers(str,pattern)" attributes="private" doc="">
              <variable ilk="argument" name="str" citdl="String" />
              <variable ilk="argument" name="pattern" citdl="String" />
            </scope>
            <scope name="_segmentsPointers" attributes="private" doc="" />
            <scope name="_ce_type" attributes="private" doc="" />
            <scope name="_PATH" attributes="private" doc="" />
            <scope name="_insertAlways" attributes="private" doc="" />
            <scope name="_fOnCut" attributes="private" doc="" />
            <scope name="_fOnCopy" attributes="private" doc="" />
          </variable>
          <scope name="Builder" ilk="function" signature="Builder(str)" doc="A fast buffer for creating large strings." returns="dojox.string.Builder|String" attributes="private">
            <variable ilk="argument" name="str" citdl="String" />
            <variable name="length" citdl="Number" doc="The current length of the internal string." />
            <variable name="append" ilk="function" signature="append(s)" doc="Append all arguments to the end of the buffer" returns="dojox.string.Builder" attributes="private">
              <variable ilk="argument" name="s" citdl="String">
                <scope name="repeating" />
              </variable>
            </variable>
            <variable name="concat" ilk="function" signature="concat(s)" doc="Alias for append." returns="dojox.string.Builder" attributes="private">
              <variable ilk="argument" name="s" citdl="String">
                <scope name="repeating" />
              </variable>
            </variable>
            <variable name="appendArray" ilk="function" signature="appendArray(strings)" doc="Append an array of items to the internal buffer." returns="dojox.string.Builder" attributes="private">
              <variable ilk="argument" name="strings" citdl="Array" />
            </variable>
            <variable name="clear" ilk="function" doc="Remove all characters from the buffer." returns="dojox.string.Builder" attributes="private" />
            <variable name="replace" ilk="function" signature="replace(oldStr,newStr)" doc="Replace instances of one string with another in the buffer." returns="dojox.string.Builder" attributes="private">
              <variable ilk="argument" name="oldStr" citdl="String" />
              <variable ilk="argument" name="newStr" citdl="String" />
            </variable>
            <variable name="remove" ilk="function" signature="remove(start,len)" doc="Remove len characters starting at index start. If len is not provided, the end of the string is assumed." returns="dojox.string.Builder" attributes="private">
              <variable ilk="argument" name="start" citdl="Number" />
              <variable ilk="argument" name="len" citdl="Number" />
            </variable>
            <variable name="insert" ilk="function" signature="insert(index,str)" doc="Insert string str starting at index." returns="dojox.string.Builder" attributes="private">
              <variable ilk="argument" name="index" citdl="Number" />
              <variable ilk="argument" name="str" citdl="String" />
            </variable>
            <variable name="toString" ilk="function" doc="Return the string representation of the internal buffer." returns="String" attributes="private" />
          </scope>
          <scope name="sprintf" ilk="function" signature="sprintf(format,filler)" doc="">
            <variable ilk="argument" name="format" citdl="String" />
            <variable ilk="argument" name="filler" citdl="mixed">
              <scope name="repeating" />
            </variable>
            <scope name="Formatter" ilk="function" signature="Formatter(format)" doc="">
              <variable ilk="argument" name="format" citdl="String" />
              <variable name="_mapped" attributes="private" doc="" />
              <variable name="_format" attributes="private" doc="" />
              <variable name="_tokens" attributes="private" doc="" />
              <scope name="_re" attributes="private" doc="" />
              <scope name="_parseDelim" ilk="function" signature="_parseDelim(mapping,intmapping,flags,minWidth,period,precision,specifier)" attributes="private" doc="">
                <variable ilk="argument" name="mapping" />
                <variable ilk="argument" name="intmapping" />
                <variable ilk="argument" name="flags" />
                <variable ilk="argument" name="minWidth" />
                <variable ilk="argument" name="period" />
                <variable ilk="argument" name="precision" />
                <variable ilk="argument" name="specifier" />
              </scope>
              <variable name="_specifiers" citdl="Object" attributes="private" doc="">
                <variable name="b" citdl="Object" doc="">
                  <scope name="base" doc="" />
                  <scope name="isInt" doc="" />
                </variable>
                <variable name="o" citdl="Object" doc="">
                  <scope name="base" doc="" />
                  <scope name="isInt" doc="" />
                </variable>
                <variable name="x" citdl="Object" doc="">
                  <scope name="base" doc="" />
                  <scope name="isInt" doc="" />
                </variable>
                <variable name="X" citdl="Object" doc="">
                  <scope name="extend" doc="" />
                  <scope name="toUpper" doc="" />
                </variable>
                <variable name="d" citdl="Object" doc="">
                  <scope name="base" doc="" />
                  <scope name="isInt" doc="" />
                </variable>
                <variable name="i" citdl="Object" doc="">
                  <scope name="extend" doc="" />
                </variable>
                <variable name="u" citdl="Object" doc="">
                  <scope name="extend" doc="" />
                  <scope name="isUnsigned" doc="" />
                </variable>
                <variable name="c" citdl="Object" doc="">
                  <scope name="setArg" ilk="function" signature="setArg(token)" doc="">
                    <variable ilk="argument" name="token" />
                  </scope>
                </variable>
                <variable name="s" citdl="Object" doc="">
                  <scope name="setMaxWidth" ilk="function" signature="setMaxWidth(token)" doc="">
                    <variable ilk="argument" name="token" />
                  </scope>
                </variable>
                <variable name="e" citdl="Object" doc="">
                  <scope name="isDouble" doc="" />
                  <scope name="doubleNotation" doc="" />
                </variable>
                <variable name="E" citdl="Object" doc="">
                  <scope name="extend" doc="" />
                  <scope name="toUpper" doc="" />
                </variable>
                <variable name="f" citdl="Object" doc="">
                  <scope name="isDouble" doc="" />
                  <scope name="doubleNotation" doc="" />
                </variable>
                <variable name="F" citdl="Object" doc="">
                  <scope name="extend" doc="" />
                </variable>
                <variable name="g" citdl="Object" doc="">
                  <scope name="isDouble" doc="" />
                  <scope name="doubleNotation" doc="" />
                </variable>
                <variable name="G" citdl="Object" doc="">
                  <scope name="extend" doc="" />
                  <scope name="toUpper" doc="" />
                </variable>
              </variable>
              <scope name="format" ilk="function" signature="format(filler)" doc="">
                <variable ilk="argument" name="filler" citdl="mixed">
                  <scope name="repeating" />
                </variable>
              </scope>
              <scope name="_zeros10" attributes="private" doc="" />
              <scope name="_spaces10" attributes="private" doc="" />
              <scope name="formatInt" ilk="function" signature="formatInt(token)" doc="">
                <variable ilk="argument" name="token" />
              </scope>
              <scope name="formatDouble" ilk="function" signature="formatDouble(token)" doc="">
                <variable ilk="argument" name="token" />
              </scope>
              <scope name="zeroPad" ilk="function" signature="zeroPad(token,length)" doc="">
                <variable ilk="argument" name="token" />
                <variable ilk="argument" name="length" citdl="Int" />
              </scope>
              <scope name="fitField" ilk="function" signature="fitField(token)" doc="">
                <variable ilk="argument" name="token" />
              </scope>
              <scope name="spacePad" ilk="function" signature="spacePad(token,length)" doc="">
                <variable ilk="argument" name="token" />
                <variable ilk="argument" name="length" citdl="Int" />
              </scope>
            </scope>
          </scope>
          <scope name="tokenize" ilk="function" signature="tokenize(str,re,parseDelim,instance)" doc="Split a string by a regular expression with the ability to capture the delimeters">
            <variable ilk="argument" name="str" citdl="String" />
            <variable ilk="argument" name="re" citdl="RegExp" />
            <variable ilk="function" name="parseDelim" doc="Each group (excluding the 0 group) is passed as a parameter. If the function returns a value, it's added to the list of tokens." />
            <variable ilk="argument" name="instance" citdl="Object" doc="Used as the &amp;amp;quot;this&amp;amp;quot; instance when calling parseDelim" />
          </scope>
        </variable>
        <variable name="timing" citdl="Object" doc="">
          <scope name="Sequence" ilk="function" doc="This class provides functionality to really sequentialize function calls. You need to provide a list of functions and some parameters for each (like: pauseBefore) and they will be run one after another. This can be very useful for slideshows or alike things.">
            <variable name="_defsResolved" attributes="private" doc="" />
            <variable name="_goOnPause" attributes="private" doc="" />
            <variable name="_running" attributes="private" doc="" />
            <scope name="go" ilk="function" signature="go(defs,doneFunction)" doc="Run the passed sequence definition">
              <variable ilk="argument" name="defs" citdl="Array" doc="The sequence of actions" />
              <variable ilk="argument" name="doneFunction" citdl="Function|Array" doc="The function to call when done" />
            </scope>
            <scope name="_go" ilk="function" doc="Execute one task of this._defsResolved." attributes="private" />
            <scope name="goOn" ilk="function" doc="This method just provides a hook from the outside, so that an interrupted sequence can be continued." />
            <scope name="stop" ilk="function" doc="Stop the currently running sequence." />
            <variable name="_curId" attributes="private" doc="" />
          </scope>
          <scope name="Streamer" ilk="function" signature="Streamer(input,output,interval,minimum,initialData)" doc="">
            <variable ilk="argument" name="input" citdl="function" doc="summary Streamer will take an input function that pushes N datapoints into a queue, and will pass the next point in that queue out to an output function at the passed interval; this way you can emulate a constant buffered stream of data. the function executed when the internal queue reaches minimumSize" />
            <variable ilk="argument" name="output" citdl="function" doc="the function executed on internal tick" />
            <variable ilk="argument" name="interval" citdl="int" doc="the interval in ms at which the output function is fired." />
            <variable ilk="argument" name="minimum" citdl="int" doc="the minimum number of elements in the internal queue." />
            <variable ilk="argument" name="initialData" citdl="array" />
            <variable name="interval" citdl="the" doc="interval in ms at which the output function is fired." />
            <variable name="minimumSize" doc="" />
            <variable name="inputFunction" doc="" />
            <variable name="outputFunction" doc="" />
            <variable name="setInterval" ilk="function" signature="setInterval(ms)" doc="">
              <variable ilk="argument" name="ms" citdl="int" />
            </variable>
            <variable name="onTick" ilk="function" signature="onTick(obj)" doc="">
              <variable ilk="argument" name="obj" citdl="dojox.timing.Streamer" />
            </variable>
            <variable name="start" ilk="function" doc="" />
            <variable name="onStart" ilk="function" doc="" />
            <variable name="stop" ilk="function" doc="" />
            <variable name="onStop" ilk="function" doc="" />
          </scope>
          <variable name="threadStates" citdl="Object" doc="">
            <scope name="UNSTARTED" doc="" />
            <scope name="STOPPED" doc="" />
            <scope name="PENDING" doc="" />
            <scope name="RUNNING" doc="" />
            <scope name="SUSPENDED" doc="" />
            <scope name="WAITING" doc="" />
            <scope name="COMPLETE" doc="" />
            <scope name="ERROR" doc="" />
          </variable>
          <variable name="threadPriorities" citdl="Object" doc="">
            <scope name="LOWEST" doc="" />
            <scope name="BELOWNORMAL" doc="" />
            <scope name="NORMAL" doc="" />
            <scope name="ABOVENORMAL" doc="" />
            <scope name="HIGHEST" doc="" />
          </variable>
          <scope name="ThreadPool" doc="" />
          <scope name="Thread" ilk="function" signature="Thread(fn,priority)" doc="">
            <variable ilk="function" name="fn" />
            <variable ilk="argument" name="priority" citdl="dojox.timing.threadPriorities" />
            <variable name="state" doc="" />
            <variable name="priority" doc="" />
            <variable name="lastError" doc="" />
            <variable name="func" doc="" />
            <variable name="invoke" ilk="function" doc="" />
          </scope>
          <scope name="Timer" ilk="function" signature="Timer(interval)" doc="Timer object executes an &amp;amp;quot;onTick()&amp;amp;quot; method repeatedly at a specified interval. repeatedly at a given interval.">
            <variable ilk="argument" name="interval" citdl="int" doc="Interval between function calls, in milliseconds." />
            <variable name="timer" doc="" />
            <variable name="isRunning" doc="" />
            <variable name="interval" citdl="Interval" doc="between function calls, in milliseconds." />
            <variable name="onStart" doc="" />
            <variable name="onStop" doc="" />
            <scope name="onTick" ilk="function" doc="Method called every time the interval passes. Override to do something useful." />
            <scope name="setInterval" ilk="function" signature="setInterval(interval)" doc="Reset the interval of a timer, whether running or not.">
              <variable ilk="argument" name="interval" citdl="New" doc="interval, in milliseconds." />
              <scope name="interval" citdl="New" doc="interval, in milliseconds." />
            </scope>
            <scope name="start" ilk="function" doc="Start the timer ticking." />
            <scope name="stop" ilk="function" doc="Stop the timer." />
          </scope>
          <variable name="_base" citdl="Object" attributes="private" doc="" />
        </variable>
        <variable name="uuid" citdl="Object" doc="">
          <scope name="Uuid" ilk="function" signature="Uuid(input)" doc="This is the constructor for the Uuid class. The Uuid class offers methods for inspecting existing UUIDs.">
            <variable ilk="argument" name="input" citdl="String" doc="A 36-character string that conforms to the UUID spec. examples: var uuid; uuid = new dojox.uuid.Uuid(&amp;amp;quot;3b12f1df-5232-4804-897e-917bf397618a&amp;amp;quot;); uuid = new dojox.uuid.Uuid(); // &amp;amp;quot;00000000-0000-0000-0000-000000000000&amp;amp;quot; uuid = new dojox.uuid.Uuid(dojox.uuid.generateRandomUuid()); uuid = new dojox.uuid.Uuid(dojox.uuid.generateTimeBasedUuid()); dojox.uuid.Uuid.setGenerator(dojox.uuid.generateRandomUuid); uuid = new dojox.uuid.Uuid(); dojox.uuid.assert(!uuid.isEqual(dojox.uuid.NIL_UUID));" />
            <variable name="_uuidString" attributes="private" doc="" />
            <scope name="compare" ilk="function" signature="compare(uuidOne,uuidTwo,otherUuid)" doc="Compares this UUID to another UUID, and returns 0, 1, or -1." returns="integer (either 0, 1, or -1)" attributes="private">
              <variable ilk="argument" name="uuidOne" citdl="dojox.uuid.Uuid" doc="Any object that has toString() method that returns a 36-character string that conforms to the UUID spec." />
              <variable ilk="argument" name="uuidTwo" citdl="dojox.uuid.Uuid" doc="Any object that has toString() method that returns a 36-character string that conforms to the UUID spec." />
              <variable ilk="argument" name="otherUuid" citdl="dojox.uuid.Uuid" doc="Any object that has toString() method that returns a 36-character string that conforms to the UUID spec." />
            </scope>
            <scope name="setGenerator" ilk="function" signature="setGenerator(generator)" doc="Sets the default generator, which will be used by the &amp;amp;quot;new dojox.uuid.Uuid()&amp;amp;quot; constructor if no parameters are passed in.">
              <variable ilk="function" name="generator" doc="A UUID generator function, such as dojox.uuid.generateTimeBasedUuid." />
            </scope>
            <scope name="getGenerator" ilk="function" doc="Returns the default generator. See setGenerator()." returns="generator (A UUID generator, such as dojox.uuid.TimeBasedGenerator)." attributes="private" />
            <scope name="toString" ilk="function" doc="This method returns a standard 36-character string representing the UUID, such as &amp;amp;quot;3b12f1df-5232-4804-897e-917bf397618a&amp;amp;quot;." returns="string" attributes="private" />
            <scope name="isEqual" ilk="function" signature="isEqual(otherUuid)" doc="Returns true if this UUID is equal to the otherUuid, or false otherwise." returns="boolean" attributes="private">
              <variable ilk="argument" name="otherUuid" citdl="dojox.uuid.Uuid" doc="Any object that has toString() method that returns a 36-character string that conforms to the UUID spec." />
            </scope>
            <scope name="isValid" ilk="function" doc="Returns true if the UUID was initialized with a valid value." />
            <scope name="getVariant" ilk="function" doc="Returns a variant code that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.variant values." />
            <scope name="getVersion" ilk="function" doc="Returns a version number that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.version values." returns="dojox.uuid.version" attributes="private">
              <variable name="exceptions" />
            </scope>
            <variable name="_versionNumber" attributes="private" doc="" />
            <scope name="getNode" ilk="function" doc="If this is a version 1 UUID (a time-based UUID), getNode() returns a 12-character string with the &amp;amp;quot;node&amp;amp;quot; or &amp;amp;quot;pseudonode&amp;amp;quot; portion of the UUID, which is the rightmost 12 characters." returns="String (a 12-character string, which will look something like &amp;quot;917bf397618a&amp;quot;)" attributes="private">
              <variable name="exceptions" />
            </scope>
            <variable name="_nodeString" attributes="private" doc="" />
            <scope name="getTimestamp" ilk="function" signature="getTimestamp(returnType)" doc="If this is a version 1 UUID (a time-based UUID), this method returns the timestamp value encoded in the UUID. The caller can ask for the timestamp to be returned either as a JavaScript Date object or as a 15-character string of hex digits." returns="String (e.g. &amp;quot;Mon, 16 Jan 2006 20:21:41 GMT&amp;quot;)|String (e.g. &amp;quot;1da86cdb4308fb0&amp;quot;)|no returnType was specified, so default to Date|Date" attributes="private">
              <variable ilk="argument" name="returnType" citdl="String" doc="Any of these five values: &amp;amp;quot;string&amp;amp;quot;, String, &amp;amp;quot;hex&amp;amp;quot;, &amp;amp;quot;date&amp;amp;quot;, Date" />
              <variable name="return_summary" />
              <variable name="exceptions" />
            </scope>
            <variable name="_timestampAsHexString" attributes="private" doc="" />
            <variable name="_timestampAsDate" attributes="private" doc="" />
          </scope>
          <variable name="version" citdl="Object" doc="">
            <scope name="UNKNOWN" doc="" />
            <scope name="TIME_BASED" doc="" />
            <scope name="DCE_SECURITY" doc="" />
            <scope name="NAME_BASED_MD5" doc="" />
            <scope name="RANDOM" doc="" />
            <scope name="NAME_BASED_SHA1" doc="" />
          </variable>
          <variable name="variant" citdl="Object" doc="">
            <scope name="NCS" doc="" />
            <scope name="DCE" doc="" />
            <scope name="MICROSOFT" doc="" />
            <scope name="UNKNOWN" doc="" />
          </variable>
          <scope name="assert" ilk="function" signature="assert(booleanValue,message)" doc="Throws an exception if the assertion fails.">
            <variable ilk="argument" name="booleanValue" citdl="Boolean" doc="Must be true for the assertion to succeed." />
            <variable ilk="argument" name="message" citdl="String" doc="A string describing the assertion. throws: Throws an Error if 'booleanValue' is false." />
          </scope>
          <scope name="generateNilUuid" ilk="function" doc="This function returns the Nil UUID: &amp;amp;quot;00000000-0000-0000-0000-000000000000&amp;amp;quot;." returns="String" attributes="private" />
          <scope name="isValid" ilk="function" signature="isValid(uuidString)" doc="Returns true if the UUID was initialized with a valid value." returns="boolean" attributes="private">
            <variable ilk="argument" name="uuidString" citdl="String" />
          </scope>
          <scope name="getVariant" ilk="function" signature="getVariant(uuidString)" doc="Returns a variant code that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.variant values." returns="dojox.uuid.variant" attributes="private">
            <variable ilk="argument" name="uuidString" citdl="String" />
          </scope>
          <scope name="getVersion" ilk="function" signature="getVersion(uuidString)" doc="Returns a version number that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.version values." returns="dojox.uuid.version" attributes="private">
            <variable ilk="argument" name="uuidString" citdl="String" />
            <variable name="exceptions" />
          </scope>
          <scope name="getNode" ilk="function" signature="getNode(uuidString)" doc="If this is a version 1 UUID (a time-based UUID), getNode() returns a 12-character string with the &amp;amp;quot;node&amp;amp;quot; or &amp;amp;quot;pseudonode&amp;amp;quot; portion of the UUID, which is the rightmost 12 characters." returns="String (a 12-character string, which will look something like &amp;quot;917bf397618a&amp;quot;)" attributes="private">
            <variable ilk="argument" name="uuidString" citdl="String" />
            <variable name="exceptions" />
          </scope>
          <scope name="getTimestamp" ilk="function" signature="getTimestamp(uuidString,returnType)" doc="If this is a version 1 UUID (a time-based UUID), this method returns the timestamp value encoded in the UUID. The caller can ask for the timestamp to be returned either as a JavaScript Date object or as a 15-character string of hex digits." returns="String (e.g. &amp;quot;Mon, 16 Jan 2006 20:21:41 GMT&amp;quot;)|String (e.g. &amp;quot;1da86cdb4308fb0&amp;quot;)|no returnType was specified, so default to Date|Date" attributes="private">
            <variable ilk="argument" name="uuidString" citdl="String" />
            <variable ilk="argument" name="returnType" citdl="String" doc="Any of these five values: &amp;amp;quot;string&amp;amp;quot;, String, &amp;amp;quot;hex&amp;amp;quot;, &amp;amp;quot;date&amp;amp;quot;, Date" />
            <variable name="return_summary" />
            <variable name="exceptions" />
          </scope>
          <scope name="NIL_UUID" doc="" />
          <variable name="_base" citdl="Object" attributes="private" doc="" />
          <scope name="generateRandomUuid" ilk="function" doc="This function generates random UUIDs, meaning &amp;amp;quot;version 4&amp;amp;quot; UUIDs." returns="for example: &amp;quot;3B12F1DF&amp;quot;|String" attributes="private" />
          <scope name="generateTimeBasedUuid" ilk="function" signature="generateTimeBasedUuid(node)" doc="This function generates time-based UUIDs, meaning &amp;amp;quot;version 1&amp;amp;quot; UUIDs." returns="String" attributes="private">
            <variable ilk="argument" name="node" citdl="String" doc="A 12-character hex string representing either a pseudo-node or hardware-node (an IEEE 802.3 network node). A hardware-node will be something like &amp;amp;quot;017bf397618a&amp;amp;quot;, always with the first bit being 0. A pseudo-node will be something like &amp;amp;quot;f17bf397618a&amp;amp;quot;, always with the first bit being 1. examples: string = dojox.uuid.generateTimeBasedUuid(); string = dojox.uuid.generateTimeBasedUuid(&amp;amp;quot;017bf397618a&amp;amp;quot;); dojox.uuid.generateTimeBasedUuid.setNode(&amp;amp;quot;017bf397618a&amp;amp;quot;); string = dojox.uuid.generateTimeBasedUuid(); // the generated UUID has node == &amp;amp;quot;017bf397618a&amp;amp;quot;" />
            <scope name="isValidNode" ilk="function" signature="isValidNode(node)" returns="Boolean" attributes="private" doc="">
              <variable ilk="argument" name="node" citdl="String" />
            </scope>
            <scope name="setNode" ilk="function" signature="setNode(node)" doc="Sets the 'node' value that will be included in generated UUIDs.">
              <variable ilk="argument" name="node" citdl="String" doc="A 12-character hex string representing a pseudoNode or hardwareNode." />
              <variable name="_uniformNode" attributes="private" doc="" />
            </scope>
            <scope name="getNode" ilk="function" doc="Returns the 'node' value that will be included in generated UUIDs." returns="String (a 12-character hex string representing a pseudoNode or hardwareNode)" attributes="private" />
            <scope name="_generator" ilk="function" returns="Array with 4 elements, each of which is a 16-bit number.|string|String (an 8-character hex string)|String (a 36 character string, which will look something like &amp;quot;b4308fb0-86cd-11da-a72b-0800200c9a66&amp;quot;)" attributes="private" doc="">
              <scope name="initialized" />
              <variable name="GREGORIAN_CHANGE_OFFSET_IN_HOURS" doc="" />
              <variable name="generateUuidString" ilk="function" signature="generateUuidString(node)" doc="Generates a time-based UUID, meaning a version 1 UUID." returns="String (a 36 character string, which will look something like &amp;quot;b4308fb0-86cd-11da-a72b-0800200c9a66&amp;quot;)" attributes="private">
                <variable ilk="argument" name="node" citdl="String" doc="An optional 12-character string to use as the node in the new UUID." />
              </variable>
            </scope>
          </scope>
        </variable>
        <variable name="validate" citdl="Object" doc="">
          <variable name="ca" citdl="Object" doc="">
            <scope name="isPhoneNumber" ilk="function" signature="isPhoneNumber(value)" doc="Validates 10 Canadian digit phone number for several common formats" returns="same as US" attributes="private">
              <variable ilk="argument" name="value" citdl="String" />
              <variable name="return_summary" />
            </scope>
            <scope name="isProvince" ilk="function" signature="isProvince(value)" doc="Validates Canadian province abbreviations (2 chars)">
              <variable ilk="argument" name="value" citdl="String[2]" />
              <variable name="return_summary" />
            </scope>
            <scope name="isSocialInsuranceNumber" ilk="function" signature="isSocialInsuranceNumber(value)" doc="Validates Canadian 9 digit social insurance number for several common formats This routine only pattern matches and does not use the Luhn Algorithm to validate number.">
              <variable ilk="argument" name="value" citdl="String" />
              <variable name="return_summary" />
            </scope>
            <scope name="isPostalCode" ilk="function" signature="isPostalCode(value)" doc="Validates Canadian 6 digit postal code: Canadian postal codes are in the format ANA NAN, where A is a letter and N is a digit, with a space separating the third and fourth characters.">
              <variable ilk="argument" name="value" />
              <variable name="return_summary" />
            </scope>
          </variable>
          <variable name="creditCard" citdl="Object" doc="" />
          <variable name="_isInRangeCache" citdl="Object" attributes="private" doc="" />
          <scope name="isText" ilk="function" signature="isText(value,flags)" doc="Checks if a string has non whitespace characters. Parameters allow you to constrain the length." returns="Boolean" attributes="private">
            <variable ilk="argument" name="value" citdl="String" doc="A string" />
            <variable ilk="argument" name="flags" citdl="Object" doc="length Number, minlength: Number, maxlength: Number} flags.length If set, checks if there are exactly flags.length number of characters. flags.minlength If set, checks if there are at least flags.minlength number of characters. flags.maxlength If set, checks if there are at most flags.maxlength number of characters." />
          </scope>
          <scope name="isInRange" ilk="function" signature="isInRange(value,flags)" doc="Validates whether a string denoting a number is between a max and min." returns="Boolean" attributes="private">
            <variable ilk="argument" name="value" citdl="String" doc="A string" />
            <variable ilk="argument" name="flags" citdl="Object" doc="max:Number min:Number, decimal:String} flags.max A number, which the value must be less than or equal to for the validation to be true. flags.min A number, which the value must be greater than or equal to for the validation to be true. flags.decimal The character used for the decimal point. Default is &amp;amp;quot;.&amp;amp;quot;.  fixes ticket #2908" />
          </scope>
          <scope name="isNumberFormat" ilk="function" signature="isNumberFormat(value,flags)" doc="Validates any sort of number based format" returns="Boolean" attributes="private">
            <variable ilk="argument" name="value" citdl="String" doc="A string" />
            <variable ilk="argument" name="flags" citdl="Object" doc="format:String flags.format A string or an Array of strings for multiple formats." />
          </scope>
          <scope name="isValidLuhn" ilk="function" signature="isValidLuhn(value)" doc="Compares value against the Luhn algorithm to verify its integrity" returns="Boolean" attributes="private">
            <variable ilk="argument" name="value" citdl="String" />
          </scope>
          <variable name="_base" citdl="Object" attributes="private" doc="" />
          <scope name="check" ilk="function" signature="check(form,profile)" doc="validates user input of an HTML form based on input profile" returns="Object" attributes="private">
            <variable ilk="argument" name="form" citdl="HTMLFormElement" doc="form to be validated" />
            <variable ilk="argument" name="profile" citdl="Object" doc="specifies how the form fields are to be validated {trim:Array, uppercase:Array, lowercase:Array, ucfirst:Array, digit:Array, required:Array, dependencies:Object, constraints:Object, confirm:Object}" />
          </scope>
          <scope name="evaluateConstraint" ilk="function" signature="evaluateConstraint(profile,constraint,fieldName,elem)" doc="Evaluates dojo.validate.check() constraints that are specified as array arguments" returns="Boolean" attributes="private">
            <variable ilk="argument" name="profile" citdl="The" doc="dojo.validate.check() profile that this evaluation is against." />
            <variable ilk="argument" name="constraint" citdl="Array" doc="The single [] array of function and arguments for the function." />
            <variable ilk="argument" name="fieldName" citdl="The" doc="form dom name of the field being validated." />
            <variable ilk="argument" name="elem" citdl="The" doc="form element field." />
          </scope>
          <scope name="isValidCreditCard" ilk="function" signature="isValidCreditCard(value,ccType)" doc="">
            <variable ilk="argument" name="value" citdl="String|Int" />
            <variable ilk="argument" name="ccType" citdl="String" />
          </scope>
          <scope name="isValidCreditCardNumber" ilk="function" signature="isValidCreditCardNumber(value,ccType)" doc="checks if value matches the pattern for that card or any card types if none is specified" returns="boolean|string | boolean" attributes="private">
            <variable ilk="argument" name="value" citdl="String|Int" doc="Boolean CC #, white spaces and dashes are ignored" />
            <variable ilk="argument" name="ccType" citdl="String" doc="one of the values in cardinfo -- if Omitted it it returns a | delimited string of matching card types, or false if no matches found" />
          </scope>
          <scope name="isValidCvv" ilk="function" signature="isValidCvv(value,ccType)" returns="Boolean" attributes="private" doc="">
            <variable ilk="argument" name="value" citdl="String|Int" />
            <variable ilk="argument" name="ccType" citdl="String" />
          </scope>
          <scope name="isValidIsbn" ilk="function" signature="isValidIsbn(value)" doc="Vadlidate ISBN-10 or ISBN-13 based on the length of value">
            <variable ilk="argument" name="value" citdl="String" />
            <variable name="return_summary" />
          </scope>
          <variable name="isbn" citdl="Object" doc="" />
          <variable name="regexp" citdl="Object" doc="" />
          <variable name="us" citdl="Object" doc="">
            <scope name="isState" ilk="function" signature="isState(value,flags)" doc="Validates US state and territory abbreviations." returns="Boolean" attributes="private">
              <variable ilk="argument" name="value" citdl="String" doc="A two character string" />
              <variable ilk="argument" name="flags" citdl="Object" doc="An object flags.allowTerritories Allow Guam, Puerto Rico, etc. Default is true. flags.allowMilitary Allow military 'states', e.g. Armed Forces Europe (AE). Default is true." />
            </scope>
            <scope name="isPhoneNumber" ilk="function" signature="isPhoneNumber(value)" doc="Validates 10 US digit phone number for several common formats" returns="Boolean" attributes="private">
              <variable ilk="argument" name="value" citdl="String" doc="The telephone number string" />
            </scope>
            <scope name="isSocialSecurityNumber" ilk="function" signature="isSocialSecurityNumber(value)" doc="Validates social security number" returns="Boolean" attributes="private">
              <variable ilk="argument" name="value" citdl="String" />
            </scope>
            <scope name="isZipCode" ilk="function" signature="isZipCode(value)" doc="Validates U.S. zip-code" returns="Boolean" attributes="private">
              <variable ilk="argument" name="value" citdl="String" />
            </scope>
          </variable>
          <scope name="isIpAddress" ilk="function" signature="isIpAddress(value,flags)" doc="Validates an IP address" returns="Boolean" attributes="private">
            <variable ilk="argument" name="value" citdl="String" />
            <variable ilk="argument" name="flags" citdl="Object" />
          </scope>
          <scope name="isUrl" ilk="function" signature="isUrl(value,flags)" doc="Checks if a string could be a valid URL" returns="Boolean" attributes="private">
            <variable ilk="argument" name="value" citdl="String" doc="A string" />
            <variable ilk="argument" name="flags" citdl="Object" doc="An object flags.scheme Can be true, false, or [true, false]. This means: required, not allowed, or either. flags in regexp.host can be applied. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." />
          </scope>
          <scope name="isEmailAddress" ilk="function" signature="isEmailAddress(value,flags)" doc="Checks if a string could be a valid email address" returns="Boolean" attributes="private">
            <variable ilk="argument" name="value" citdl="String" doc="A string" />
            <variable ilk="argument" name="flags" citdl="Object" doc="An object flags.allowCruft Allow address like &amp;amp;lt;mailto:foo@yahoo.com&amp;amp;gt;. Default is false. flags in regexp.host can be applied. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." />
          </scope>
          <scope name="isEmailAddressList" ilk="function" signature="isEmailAddressList(value,flags)" doc="Checks if a string could be a valid email address list.  value A string. flags An object. flags.listSeparator The character used to separate email addresses. Default is &amp;amp;quot;;&amp;amp;quot;, &amp;amp;quot;,&amp;amp;quot;, &amp;amp;quot;\n&amp;amp;quot; or &amp;amp;quot; &amp;amp;quot;. flags in regexp.emailAddress can be applied. flags in regexp.host can be applied. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." returns="Boolean" attributes="private">
            <variable ilk="argument" name="value" citdl="String" />
            <variable ilk="argument" name="flags" citdl="Object" />
          </scope>
          <scope name="getEmailAddressList" ilk="function" signature="getEmailAddressList(value,flags)" doc="Check if value is an email address list. If an empty list is returned, the value didn't pass the test or it was empty." returns="Array" attributes="private">
            <variable ilk="argument" name="value" citdl="String" doc="A string" />
            <variable ilk="argument" name="flags" citdl="Object" doc="An object (same as dojo.validate.isEmailAddressList)" />
          </scope>
          <variable name="web" citdl="Object" doc="" />
        </variable>
        <variable name="widget" citdl="Object" doc="">
          <scope name="_CalendarBase" ilk="function" doc="constructor for the widget" attributes="private">
            <scope name="templatePath" doc="" />
            <variable name="_views" citdl="Array" doc="The list of mixin views available on this calendar." attributes="private" />
            <scope name="useFx" citdl="Boolean" doc="Specifies if visual effects should be applied to the widget. The default behavior of the widget does not contain any effects. The dojox.widget.CalendarFx package is needed for these." />
            <scope name="widgetsInTemplate" citdl="Boolean" doc="This widget is a container of other widgets, so this is true." />
            <variable name="value" citdl="Date" doc="the currently selected Date" />
            <scope name="postCreate" ilk="function" doc="Instantiates the mixin views" />
            <scope name="addFx" ilk="function" signature="addFx(query,fromNode)" doc="">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="fromNode" />
            </scope>
            <scope name="setValue" ilk="function" signature="setValue(value)" doc="set the current date and update the UI. If the date is disabled, the selection will not change, but the display will change to the corresponding month.">
              <variable ilk="argument" name="value" citdl="Date" />
            </scope>
            <scope name="isDisabledDate" ilk="function" signature="isDisabledDate(dateObject,locale)" doc="May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`" returns="Boolean" attributes="private">
              <variable ilk="argument" name="dateObject" citdl="Date" />
              <variable ilk="argument" name="locale" citdl="String" />
            </scope>
            <scope name="onValueSelected" ilk="function" signature="onValueSelected(date)" doc="a date cell was selected. It may be the same as the previous value.">
              <variable ilk="argument" name="date" citdl="Date" />
            </scope>
            <scope name="_onDateSelected" ilk="function" signature="_onDateSelected(date,formattedValue)" attributes="private" doc="">
              <variable ilk="argument" name="date" />
              <variable ilk="argument" name="formattedValue" />
            </scope>
            <scope name="onChange" ilk="function" signature="onChange(date)" doc="called only when the selected date has changed">
              <variable ilk="argument" name="date" citdl="Date" />
            </scope>
            <scope name="onHeaderClick" ilk="function" signature="onHeaderClick(e)" doc="Transitions to the next view.">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="goToToday" ilk="function" doc="" />
            <scope name="_transitionVert" ilk="function" signature="_transitionVert(direction)" doc="Animates the views to show one and hide another, in a vertical direction. If 'direction' is 1, then the views slide upwards. If 'direction' is -1, the views slide downwards." attributes="private">
              <variable ilk="argument" name="direction" citdl="Number" />
            </scope>
            <scope name="_slideTable" ilk="function" signature="_slideTable(widget,direction,callback)" doc="Animates the horizontal sliding of a table." attributes="private">
              <variable ilk="argument" name="widget" citdl="String" />
              <variable ilk="argument" name="direction" citdl="Number" />
              <variable ilk="function" name="callback" />
            </scope>
            <scope name="_addView" ilk="function" signature="_addView(view)" attributes="private" doc="">
              <variable ilk="argument" name="view" />
            </scope>
            <scope name="getClassForDate" ilk="function" signature="getClassForDate(dateObject,locale)" doc="May be overridden to return CSS classes to associate with the date entry for the given dateObject, for example to indicate a holiday in specified locale." returns="String" attributes="private">
              <variable ilk="argument" name="dateObject" citdl="Date" />
              <variable ilk="argument" name="locale" citdl="String" />
            </scope>
            <scope name="_adjustDisplay" ilk="function" signature="_adjustDisplay(part,amount,noSlide)" doc="This function overrides the base function defined in dijit._Calendar. It changes the displayed years, months and days depending on the inputs." attributes="private">
              <variable ilk="argument" name="part" citdl="String" />
              <variable ilk="argument" name="amount" citdl="int" />
              <variable ilk="argument" name="noSlide" />
            </scope>
            <variable name="_height" attributes="private" doc="" />
            <variable name="displayMonth" doc="" />
            <variable name="_children" attributes="private" doc="" />
            <variable name="_currentChild" attributes="private" doc="" />
            <scope name="footer">
              <variable name="innerHTML" doc="" />
            </scope>
          </scope>
          <scope name="_CalendarView" ilk="function" doc="Base implementation for all view mixins. All calendar views should extend this widget." attributes="private">
            <scope name="headerClass" doc="" />
            <scope name="cloneClass" ilk="function" signature="cloneClass(clazz,n)" doc="Clones all nodes with the class 'clazz' in a widget">
              <variable ilk="argument" name="clazz" />
              <variable ilk="argument" name="n" />
            </scope>
            <scope name="_setText" ilk="function" signature="_setText(node,text)" doc="sets the text inside a node" attributes="private">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="text" />
            </scope>
            <scope name="getHeader" ilk="function" doc="returns the header node of a view. If none exists, an empty DIV is created and returned." />
            <scope name="onValueSelected" ilk="function" signature="onValueSelected(date)" doc="">
              <variable ilk="argument" name="date" />
            </scope>
            <scope name="adjustDate" ilk="function" signature="adjustDate(date,amount)" doc="Adds or subtracts values from a date. The unit, e.g. &amp;amp;quot;day&amp;amp;quot;, &amp;amp;quot;month&amp;amp;quot; or &amp;amp;quot;year&amp;amp;quot;, is specified in the &amp;amp;quot;datePart&amp;amp;quot; property of the calendar view mixin.">
              <variable ilk="argument" name="date" />
              <variable ilk="argument" name="amount" />
            </scope>
            <variable name="header" doc="" />
          </scope>
          <scope name="_CalendarDay" ilk="function" doc="Mixin for the dojox.widget.Calendar which provides the standard day-view. A single month is shown at a time." attributes="private">
            <scope name="parent" doc="" />
          </scope>
          <scope name="_CalendarDayView" ilk="function" doc="View class for the dojox.widget.Calendar. Adds a view showing every day of a single month to the calendar. This should not be mixed in directly with dojox.widget._CalendarBase. Instead, use dojox.widget._CalendarDay" attributes="private">
            <scope name="templatePath" doc="" />
            <scope name="datePart" citdl="String" doc="Specifies how much to increment the displayed date when the user clicks the array button to increment of decrement the view." />
            <scope name="dayWidth" citdl="String" doc="Specifies the type of day name to display. &amp;amp;quot;narrow&amp;amp;quot; causes just one letter to be shown." />
            <scope name="postCreate" ilk="function" doc="Constructs the calendar view." />
            <scope name="_onDayClick" ilk="function" signature="_onDayClick(e)" doc="executed when a day value is clicked." attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="setValue" ilk="function" signature="setValue(value)" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_populateDays" ilk="function" doc="Fills the days of the current month." attributes="private" />
            <variable name="value" doc="" />
          </scope>
          <scope name="_CalendarMonth" ilk="function" doc="Adds a dojox.widget._CalendarMonthView view to the calendar widget." attributes="private">
            <scope name="headerClass" doc="" />
          </scope>
          <scope name="_CalendarMonthView" ilk="function" doc="A Calendar view listing the 12 months of the year" attributes="private">
            <scope name="templatePath" doc="" />
            <scope name="datePart" citdl="String" doc="Specifies how much to increment the displayed date when the user clicks the array button to increment of decrement the view." />
            <scope name="postCreate" ilk="function" doc="Constructs the view" />
            <scope name="setValue" ilk="function" signature="setValue(value)" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_getMonthNames" ilk="function" signature="_getMonthNames(format)" doc="Returns localized month names" attributes="private">
              <variable ilk="argument" name="format" />
            </scope>
            <scope name="_populateMonths" ilk="function" doc="Populate the month names using the localized values." attributes="private" />
            <scope name="onClick" ilk="function" signature="onClick(evt)" doc="Handles clicks on month names">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="header">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="_monthNames" attributes="private" doc="" />
          </scope>
          <scope name="_CalendarYear" ilk="function" doc="Adds a dojox.widget._CalendarYearView view to the dojo.widget._CalendarBase widget." attributes="private">
            <scope name="parent" doc="" />
          </scope>
          <scope name="_CalendarYearView" ilk="function" doc="A Calendar view listing 12 years" attributes="private">
            <scope name="templatePath" doc="" />
            <scope name="postCreate" ilk="function" doc="Constructs the view" />
            <scope name="setValue" ilk="function" signature="setValue(value)" doc="">
              <variable ilk="argument" name="value" />
            </scope>
            <scope name="_populateYears" ilk="function" signature="_populateYears(year)" doc="Writes the years to display to the view" attributes="private">
              <variable ilk="argument" name="year" />
            </scope>
            <scope name="adjustDate" ilk="function" signature="adjustDate(date,amount)" doc="Adjusts the value of a date. It moves it by 12 years each time.">
              <variable ilk="argument" name="date" />
              <variable ilk="argument" name="amount" />
            </scope>
            <scope name="onClick" ilk="function" signature="onClick(evt)" doc="Handles clicks on year values.">
              <variable ilk="argument" name="evt" />
            </scope>
            <variable name="_displayedYear" attributes="private" doc="" />
          </scope>
          <scope name="Calendar" ilk="function" doc="The standard Calendar. It includes day, month and year views. No visual effects are included." />
          <scope name="DailyCalendar" ilk="function" doc="A calendar with only a daily view." />
          <scope name="MonthlyCalendar" ilk="function" doc="A calendar with only a month view." />
          <scope name="YearlyCalendar" ilk="function" doc="A calendar with only a year view." />
          <scope name="_FisheyeFX" ilk="function" attributes="private" doc="">
            <scope name="addFx" ilk="function" signature="addFx(query,fromNode)" doc="">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="fromNode" />
            </scope>
          </scope>
          <scope name="CalendarFisheye" ilk="function" doc="The standard Calendar. It includes day, month and year views. FisheyeLite effects are included." />
          <variable name="CalendarFx" citdl="Object" doc="" />
          <scope name="ColorPicker" ilk="function" doc="a HSV color picker - similar to Photoshop picker">
            <scope name="showRgb" citdl="Boolean" doc="show/update RGB input nodes" />
            <scope name="showHsv" citdl="Boolean" doc="show/update HSV input nodes" />
            <scope name="showHex" citdl="Boolean" doc="show/update Hex value field" />
            <scope name="webSafe" citdl="Boolean" doc="deprecated? or just use a toggle to show/hide that node, too?" />
            <scope name="animatePoint" citdl="Boolean" doc="toggle to use slideTo (true) or just place the cursor (false) on click" />
            <scope name="slideDuration" citdl="Integer" doc="time in ms picker node will slide to next location (non-dragging) when animatePoint=true" />
            <scope name="liveUpdate" citdl="Boolean" doc="Set to true to fire onChange in an indeterminate way" />
            <scope name="_underlay" attributes="private" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="postCreate" ilk="function" doc="As quickly as we can, set up ie6 alpha-filter support for our underlay. we don't do image handles (done in css), just the 'core' of this widget: the underlay." />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_setTimer" ilk="function" signature="_setTimer(mover)" attributes="private" doc="">
              <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
            </scope>
            <scope name="_clearTimer" ilk="function" signature="_clearTimer(mover)" attributes="private" doc="">
              <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
            </scope>
            <scope name="_setHue" ilk="function" signature="_setHue(h)" doc="sets a natural color background for the underlay image against closest hue value (full saturation)" attributes="private">
              <variable ilk="argument" name="h" citdl="Decimal" doc="0..255" />
            </scope>
            <scope name="_updateColor" ilk="function" doc="update the previewNode color, and input values [optional]  all these should be in the [0..150] range" attributes="private" />
            <scope name="_updatePoints" ilk="function" signature="_updatePoints(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_setHuePoint" ilk="function" signature="_setHuePoint(evt)" doc="set the hue picker handle on relative y coordinates" attributes="private">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <scope name="_setPoint" ilk="function" signature="_setPoint(evt)" doc="set our picker point based on relative x/y coordinates evt.preventDefault();" attributes="private">
              <variable ilk="argument" name="evt" citdl="Event" />
            </scope>
            <scope name="_handleKey" ilk="function" signature="_handleKey(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="colorUnderlay">
              <variable name="src" doc="" />
            </scope>
            <scope name="rgbNode" />
            <scope name="hsvNode" />
            <scope name="hexNode" />
            <scope name="safePreviewNode" />
            <variable name="_offset" attributes="private" doc="" />
            <variable name="_shift" attributes="private" doc="" />
            <variable name="_mover" attributes="private" doc="" />
            <variable name="_hueMover" attributes="private" doc="" />
            <variable name="_sc" attributes="private" doc="" />
            <variable name="_hueSc" attributes="private" doc="" />
            <variable name="_timer" attributes="private" doc="" />
            <scope name="previewNode" />
            <scope name="hexCode">
              <variable name="value" doc="" />
            </scope>
            <scope name="Rval">
              <variable name="value" doc="" />
            </scope>
            <scope name="Gval">
              <variable name="value" doc="" />
            </scope>
            <scope name="Bval">
              <variable name="value" doc="" />
            </scope>
            <scope name="Hval">
              <variable name="value" doc="" />
            </scope>
            <scope name="Sval">
              <variable name="value" doc="" />
            </scope>
            <scope name="Vval">
              <variable name="value" doc="" />
            </scope>
            <variable name="value" doc="" />
          </scope>
          <scope name="Dialog" ilk="function" doc="A Lightbox-like Modal-dialog for HTML Content" signature="Dialog(props,node)">
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="node" />
            <scope name="templatePath" doc="" />
            <scope name="fixedSize" citdl="Boolean" doc="If false, fix the size of the dialog to the Viewport based on viewportPadding value rather than the calculated or natural stlye. If true, base the size on a passed dimension attribute. Eitherway, the viewportPadding value is used if the the content extends beyond the viewport size for whatever reason." />
            <scope name="viewportPadding" citdl="Integer" doc="If fixedSize=&amp;amp;quot;true&amp;amp;quot;, this is the value or used when fixed=&amp;amp;quot;false&amp;amp;quot; and dimensions exceed) to use" />
            <variable name="dimensions" citdl="Array" doc="A two-element array of [widht,height] to animate the Dialog to. Defaults to [300,300]" />
            <variable name="easing" citdl="Function?|String?" doc="An easing function to apply to the sizing animation." />
            <scope name="sizeDuration" citdl="Integer" doc="Time (in ms) to use in the Animation for sizing." />
            <scope name="sizeMethod" citdl="String" doc="To be passed to dojox.fx.sizeTo, one of &amp;amp;quot;chain&amp;amp;quot; or &amp;amp;quot;combine&amp;amp;quot; to effect the animation sequence." />
            <scope name="showTitle" citdl="Boolean" doc="Toogle to show or hide the Title area. Can only be set at startup." />
            <scope name="draggable" citdl="Boolean" doc="Make the pane draggable. Differs from dijit.Dialog by setting default to false" />
            <scope name="_setup" ilk="function" doc="Piggyback on dijit.Dialog's _setup for load-time options, deferred to" attributes="private" />
            <scope name="layout" ilk="function" signature="layout(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_setSize" ilk="function" doc="cache and set our desired end position" attributes="private" />
            <scope name="show" ilk="function" doc="" />
            <scope name="_handleNav" ilk="function" signature="_handleNav(e)" doc="Handle's showing or hiding the close icon" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_position" ilk="function" attributes="private" doc="" />
            <scope name="_showContent" ilk="function" signature="_showContent(e)" doc="Show the inner container after sizing animation" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <variable name="_navIn" attributes="private" doc="" />
            <variable name="_navOut" attributes="private" doc="" />
            <variable name="_vp" attributes="private" doc="" />
            <variable name="_displaysize" attributes="private" doc="" />
            <variable name="_sizing" attributes="private" doc="" />
            <variable name="_sizingConnect" attributes="private" doc="" />
          </scope>
          <scope name="DocTester" ilk="function" doc="A widget to run DocTests inside an HTML page.">
            <scope name="templatePath" doc="" />
            <scope name="widgetsInTemplate" doc="" />
            <scope name="_fillContent" attributes="private" doc="" />
            <scope name="postCreate" doc="" />
            <scope name="runTests" doc="" />
            <scope name="reset" doc="" />
            <scope name="_unescapeHtml" attributes="private" doc="" />
          </scope>
          <scope name="_FileInfoPane" ilk="function" doc="a pane to display the information for the currently-selected file" attributes="private">
            <scope name="templateString" citdl="string" doc="delete our template string" />
            <scope name="templatePath" citdl="string" doc="Our template path" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="onItems" ilk="function" doc="called after a fetch or load - at this point, this.items should be set and loaded." />
            <variable name="_messages" attributes="private" doc="" />
            <scope name="nameNode">
              <variable name="innerHTML" doc="" />
            </scope>
            <scope name="pathNode">
              <variable name="innerHTML" doc="" />
            </scope>
            <scope name="sizeNode">
              <variable name="innerHTML" doc="" />
            </scope>
          </scope>
          <scope name="FilePicker" ilk="function" doc="a specialized version of RollingList that handles file information in a store">
            <scope name="className" doc="" />
            <variable name="pathSeparator" citdl="string" doc="Our file separator - it will be guessed if not set" />
            <variable name="topDir" citdl="string" doc="The top directory string - it will be guessed if not set" />
            <scope name="parentAttr" citdl="string" doc="the attribute to read for finding our parent directory" />
            <scope name="pathAttr" citdl="string" doc="the attribute to read for getting the full path of our file" />
            <scope name="_itemsMatch" ilk="function" signature="_itemsMatch(item1,item2)" attributes="private" doc="">
              <variable ilk="argument" name="item1" citdl="item" />
              <variable ilk="argument" name="item2" citdl="item" />
            </scope>
            <scope name="startup" ilk="function" doc="" />
            <scope name="getChildItems" ilk="function" signature="getChildItems(item)" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="getMenuItemForItem" ilk="function" signature="getMenuItemForItem(item,parentPane,children)" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="parentPane" citdl="dijit._Contained" />
              <variable ilk="argument" name="children" citdl="item[]" />
            </scope>
            <scope name="getPaneForItem" ilk="function" signature="getPaneForItem(item,parentPane,children)" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="parentPane" citdl="dijit._Contained" />
              <variable ilk="argument" name="children" citdl="item[]" />
            </scope>
            <scope name="_setPathValueAttr" ilk="function" signature="_setPathValueAttr(path)" attributes="private" doc="">
              <variable ilk="argument" name="path" citdl="string" />
            </scope>
            <scope name="_getPathValueAttr" ilk="function" signature="_getPathValueAttr(val)" doc="returns the path value of the given value (or current value if not passed a value)" attributes="private">
              <variable ilk="argument" name="val" citdl="item" />
            </scope>
          </scope>
          <scope name="FisheyeList" ilk="function" doc="Menu similar to the fish eye menu on the Mac OS">
            <variable name="EDGE" citdl="Object" doc="">
              <scope name="CENTER" doc="" />
              <scope name="LEFT" doc="" />
              <scope name="RIGHT" doc="" />
              <scope name="TOP" doc="" />
              <scope name="BOTTOM" doc="" />
            </variable>
            <scope name="templateString" doc="" />
            <scope name="snarfChildDomOutput" doc="" />
            <scope name="itemWidth" citdl="Integer" doc="width of menu item (in pixels) in it's dormant state (when the mouse is far away)" />
            <scope name="itemHeight" citdl="Integer" doc="height of menu item (in pixels) in it's dormant state (when the mouse is far away)" />
            <scope name="itemMaxWidth" citdl="Integer" doc="width of menu item (in pixels) in it's fully enlarged state (when the mouse is directly over it)" />
            <scope name="itemMaxHeight" citdl="Integer" doc="height of menu item (in pixels) in it's fully enlarged state (when the mouse is directly over it)" />
            <scope name="imgNode" doc="" />
            <scope name="orientation" citdl="String" doc="orientation of the menu, either &amp;amp;quot;horizontal&amp;amp;quot; or &amp;amp;quot;vertical&amp;amp;quot;" />
            <scope name="isFixed" citdl="Boolean" doc="toggle to enable additional listener (window scroll) if FisheyeList is in a fixed postion" />
            <scope name="conservativeTrigger" citdl="Boolean" doc="if true, don't start enlarging menu items until mouse is over an image; if false, start enlarging menu items as the mouse moves near them." />
            <scope name="effectUnits" citdl="Number" doc="controls how much reaction the menu makes, relative to the distance of the mouse from the menu" />
            <scope name="itemPadding" citdl="Integer" doc="padding (in pixels) betweeen each menu item" />
            <scope name="attachEdge" citdl="String" doc="controls the border that the menu items don't expand past; for example, if set to &amp;amp;quot;top&amp;amp;quot;, then the menu items will drop downwards as they expand. values &amp;amp;quot;center&amp;amp;quot;, &amp;amp;quot;left&amp;amp;quot;, &amp;amp;quot;right&amp;amp;quot;, &amp;amp;quot;top&amp;amp;quot;, &amp;amp;quot;bottom&amp;amp;quot;." />
            <variable name="labelEdge" citdl="String" doc="controls were the labels show up in relation to the menu item icons values &amp;amp;quot;center&amp;amp;quot;, &amp;amp;quot;left&amp;amp;quot;, &amp;amp;quot;right&amp;amp;quot;, &amp;amp;quot;top&amp;amp;quot;, &amp;amp;quot;bottom&amp;amp;quot;." />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="create our connections and setup our FisheyeList" />
            <scope name="_initializePositioning" ilk="function" attributes="private" doc="" />
            <scope name="_overElement" ilk="function" signature="_overElement(node,e)" doc="Returns whether the mouse is over the passed element. Node: Must must be display:block (ie, not a &amp;amp;lt;span&amp;amp;gt;)" attributes="private">
              <variable ilk="argument" name="node" citdl="DomNode|String" />
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onBodyOut" ilk="function" signature="_onBodyOut(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_setDormant" ilk="function" signature="_setDormant(e)" doc="called when mouse moves out of menu's range" returns="already dormant?" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_setActive" ilk="function" signature="_setActive(e)" doc="called when mouse is moved into menu's range" returns="already activated?" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onMouseMove" ilk="function" signature="_onMouseMove(e)" doc="called when mouse is moved" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_onScroll" ilk="function" attributes="private" doc="" />
            <scope name="onResized" ilk="function" doc="" />
            <scope name="_onGridMouseMove" ilk="function" signature="_onGridMouseMove(x,y)" doc="called when mouse is moved in the vicinity of the menu" attributes="private">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope name="_paint" ilk="function" attributes="private" doc="" />
            <scope name="_weighAt" ilk="function" signature="_weighAt(cen,i)" returns="Integer" attributes="private" doc="">
              <variable ilk="argument" name="cen" citdl="Integer" />
              <variable ilk="argument" name="i" citdl="Integer" />
            </scope>
            <scope name="_setItemSize" ilk="function" signature="_setItemSize(p,scale)" attributes="private" doc="">
              <variable ilk="argument" name="p" />
              <variable ilk="argument" name="scale" />
            </scope>
            <scope name="_positionElementsFrom" ilk="function" signature="_positionElementsFrom(p,offset)" attributes="private" doc="">
              <variable ilk="argument" name="p" />
              <variable ilk="argument" name="offset" />
            </scope>
            <scope name="_positionLabel" ilk="function" signature="_positionLabel(itm)" attributes="private" doc="">
              <variable ilk="argument" name="itm" />
            </scope>
            <scope name="_calcHitGrid" ilk="function" attributes="private" doc="" />
            <scope name="_toEdge" ilk="function" signature="_toEdge(inp,def)" attributes="private" doc="">
              <variable ilk="argument" name="inp" />
              <variable ilk="argument" name="def" />
            </scope>
            <scope name="_expandSlowly" ilk="function" doc="slowly expand the image to user specified max size" attributes="private" />
            <scope name="destroyRecursive" ilk="function" doc="" />
            <variable name="isHorizontal" doc="" />
            <variable name="selectedNode" doc="" />
            <variable name="isOver" doc="" />
            <variable name="hitX1" doc="" />
            <variable name="hitY1" doc="" />
            <variable name="hitX2" doc="" />
            <variable name="hitY2" doc="" />
            <variable name="anchorEdge" doc="" />
            <variable name="proximityLeft" doc="" />
            <variable name="proximityRight" doc="" />
            <variable name="proximityTop" doc="" />
            <variable name="proximityBottom" doc="" />
            <variable name="children" doc="" />
            <variable name="_onMouseMoveHandle" attributes="private" doc="" />
            <variable name="_onScrollHandle" attributes="private" doc="" />
            <variable name="_onMouseOutHandle" attributes="private" doc="" />
            <variable name="_addChildHandle" attributes="private" doc="" />
            <variable name="_onResizeHandle" attributes="private" doc="" />
            <variable name="itemCount" doc="" />
            <variable name="barWidth" doc="" />
            <variable name="barHeight" doc="" />
            <variable name="totalWidth" doc="" />
            <variable name="totalHeight" doc="" />
            <scope name="domNode" />
            <variable name="timerScale" doc="" />
            <variable name="pos" doc="" />
          </scope>
          <scope name="FisheyeListItem" ilk="function" doc="">
            <scope name="iconSrc" doc="" />
            <scope name="label" citdl="String" doc="label to print next to the icon, when it is moused-over" />
            <scope name="id" citdl="String" doc="will be set to the id of the orginal div element" />
            <scope name="templateString" doc="" />
            <scope name="_isNode" ilk="function" signature="_isNode(wh)" doc="checks to see if wh is actually a node." returns="boolean" attributes="private">
              <variable ilk="argument" name="wh" citdl="object" />
            </scope>
            <scope name="_hasParent" ilk="function" signature="_hasParent(node)" doc="returns whether or not node is a child of another node." returns="boolean" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" />
            </scope>
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="onMouseOver" ilk="function" signature="onMouseOver(e)" doc="callback when user moves mouse over this menu item in conservative mode, don't activate the menu until user mouses over an icon">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="onMouseOut" ilk="function" signature="onMouseOut(e)" doc="callback when user moves mouse off of this menu item">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="onClick" ilk="function" signature="onClick(e)" doc="user overridable callback when user clicks this menu item">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="imgNode">
              <variable name="src" doc="" />
            </scope>
            <variable name="parent" doc="" />
          </scope>
          <scope name="FisheyeLite" ilk="function" doc="A Light-weight Fisheye Component, or an exhanced version of dojo.fx.Toggler ..." signature="FisheyeLite(props,node)">
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="node" />
            <scope name="durationIn" doc="" />
            <scope name="easeIn" ilk="function" doc="An easing function to use for the show animation" />
            <scope name="durationOut" citdl="Integer" doc="The Time (in ms) to run the hide animation" />
            <scope name="easeOut" ilk="function" doc="An easing function to use for the hide animation" />
            <variable name="properties" citdl="Object" doc="An object of &amp;amp;quot;property&amp;amp;quot;:scale pairs defaults to font-size with a scale of 2.75" />
            <scope name="unit" citdl="String" doc="Sometimes, you need to specify a unit. Should be part of properties attrib, but was trying to shorthand the logic there" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="show" ilk="function" doc="Show this Fisheye item." />
            <scope name="hide" ilk="function" doc="Hide this fisheye item on mouse leave" />
            <scope name="_makeAnims" ilk="function" doc="Pre-generate the animations" attributes="private" />
            <scope name="onClick" ilk="function" signature="onClick(e)" doc="stub function fired when target is clicked connect or override to use.">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="onSelected" ilk="function" signature="onSelected(e)" doc="stub function fired when Fisheye Item is fully visible and hovered. connect or override use.">
              <variable ilk="argument" name="e" citdl="Object" />
            </scope>
            <variable name="_target" attributes="private" doc="" />
            <variable name="_runningIn" attributes="private" doc="" />
            <variable name="_runningOut" attributes="private" doc="" />
          </scope>
          <scope name="Iterator" ilk="function" doc="">
            <scope name="constructor" doc="" />
            <scope name="start" doc="" />
            <scope name="fetchMax" doc="" />
            <variable name="query" citdl="Object" doc="">
              <scope name="name" doc="" />
            </variable>
            <variable name="attrs" doc="" />
            <scope name="defaultValue" doc="" />
            <variable name="widgetCtor" doc="" />
            <scope name="dataValues" doc="" />
            <scope name="data" doc="" />
            <scope name="store" doc="" />
            <variable name="_srcIndex" attributes="private" doc="" />
            <variable name="_srcParent" attributes="private" doc="" />
            <scope name="_setSrcIndex" ilk="function" signature="_setSrcIndex(s)" attributes="private" doc="">
              <variable ilk="argument" name="s" />
            </scope>
            <scope name="postscript" ilk="function" signature="postscript(p,s)" doc="">
              <variable ilk="argument" name="p" />
              <variable ilk="argument" name="s" />
            </scope>
            <scope name="clear" ilk="function" doc="" />
            <scope name="update" ilk="function" doc="" />
            <scope name="_addItem" ilk="function" signature="_addItem(config,idx)" attributes="private" doc="">
              <variable ilk="argument" name="config" citdl="Object" />
              <variable ilk="argument" name="idx" />
            </scope>
            <scope name="getAttrValuesObj" ilk="function" signature="getAttrValuesObj(item)" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="onDataAvailable" ilk="function" signature="onDataAvailable(data)" doc="">
              <variable ilk="argument" name="data" />
            </scope>
            <scope name="fetch" ilk="function" signature="fetch(query,start,end)" doc="">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="end" />
            </scope>
            <variable name="children" doc="" />
            <variable name="_classes" citdl="Object" attributes="private" doc="" />
          </scope>
          <scope name="Loader" ilk="function" doc="a configurable global xhr-listener to display a loading message during running xhr's or to simply provide base-level topic to subscribe to for custom loading messages">
            <scope name="loadIcon" doc="" />
            <scope name="loadMessage" citdl="String" doc="string to use for progress loading" />
            <scope name="hasVisuals" citdl="Boolean" doc="true to display a fixed loading message in TR cornder, false to unly provide &amp;amp;quot;Loader&amp;amp;quot; topic to subscribe to for your own custom loading message." />
            <scope name="attachToPointer" doc="" />
            <scope name="duration" citdl="Integer" doc="time in ms to toggle in/out the visual load indicator" />
            <scope name="_offset" citdl="Integer" doc="distance in px from the mouse pointer to show attachToPointer avatar" attributes="private" />
            <variable name="_pointerConnect" attributes="private" doc="" />
            <variable name="_xhrStart" attributes="private" doc="" />
            <variable name="_xhrEnd" attributes="private" doc="" />
            <scope name="templateString" doc="" />
            <scope name="postCreate" ilk="function" doc="setup the loader" />
            <scope name="_setMessage" ilk="function" signature="_setMessage(message)" doc="set's the message in the loader" attributes="private">
              <variable ilk="argument" name="message" citdl="String" />
            </scope>
            <scope name="_putLoader" ilk="function" signature="_putLoader(e)" doc="place the floating loading element based on mousemove connection position" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_show" ilk="function" doc="publish and show progress indicator" attributes="private" />
            <scope name="_hide" ilk="function" doc="publish &amp;amp;quot;xhr ended&amp;amp;quot; and hide progress indicator" attributes="private" />
            <scope name="loadNode" />
            <scope name="loadMessageNode">
              <variable name="innerHTML" doc="" />
            </scope>
          </scope>
          <scope name="Pager" ilk="function" doc="A Pager, displaying a list of sized nodes">
            <scope name="templatePath" doc="" />
            <scope name="iconPrevious" citdl="String?" doc="The url of the previous page icon" />
            <scope name="iconNext" citdl="String?" doc="The url of the next page icon" />
            <scope name="iconPage" doc="" />
            <scope name="iconPageActive" doc="" />
            <variable name="store" citdl="Object" doc="A dojo.data Data store" />
            <variable name="orientation" citdl="String" doc="Either &amp;amp;quot;horizontal or &amp;amp;quot;vertical&amp;amp;quot; to define the direction the pages will slide" />
            <variable name="statusPos" citdl="String" doc="A string describing where to put the Pager &amp;amp;quot;current page&amp;amp;quot; indicator. Options are &amp;amp;quot;leading&amp;amp;quot; or &amp;amp;quot;trailing&amp;amp;quot;. In the case of horiztonal orientation, &amp;amp;quot;leading&amp;amp;quot; indicates positioned above the PageItems. In the case of vertical, &amp;amp;quot;leading&amp;amp;quot; indicates &amp;amp;quot;before&amp;amp;quot;." />
            <variable name="pagerPos" citdl="String" doc="TODOC" />
            <scope name="duration" citdl="Integer" doc="Time in milliseconds to transition the pages" />
            <scope name="itemSpace" citdl="Integer" doc="Spacing between items? TODOC" />
            <scope name="resizeChildren" citdl="Boolean" doc="TODOC" />
            <scope name="itemClass" citdl="String" doc="The full dotted named of a Class to use for the internal Pager Items." />
            <scope name="itemsPage" citdl="Integer" doc="The numbers of items to display in each &amp;amp;quot;Page&amp;amp;quot;" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_a11yStyle" ilk="function" signature="_a11yStyle(e)" doc="top level onfocus/onblur listen to set a class &amp;amp;quot;pagerFocus&amp;amp;quot; on some node and remove it onblur" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_handleKey" ilk="function" signature="_handleKey(e)" doc="Handle keyboard navigation internally" attributes="private">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_init" ilk="function" signature="_init(items)" attributes="private" doc="">
              <variable ilk="argument" name="items" />
            </scope>
            <scope name="_renderPages" ilk="function" attributes="private" doc="" />
            <scope name="_renderPager" ilk="function" attributes="private" doc="" />
            <scope name="_renderStatus" ilk="function" attributes="private" doc="" />
            <scope name="_pagerSkip" ilk="function" signature="_pagerSkip(page)" attributes="private" doc="">
              <variable ilk="argument" name="page" />
            </scope>
            <scope name="_pagerNext" ilk="function" attributes="private" doc="" />
            <scope name="_pagerPrevious" ilk="function" attributes="private" doc="" />
            <scope name="onScrollEnd" ilk="function" doc="Stub Function. Fired after the slide is complete. Override or connect." />
            <variable name="items" doc="" />
            <variable name="_totalPages" attributes="private" doc="" />
            <variable name="iconWidth" doc="" />
            <variable name="iconHeight" doc="" />
            <variable name="iconsLoaded" doc="" />
            <variable name="_iconConnects" attributes="private" doc="" />
            <variable name="_currentPage" attributes="private" doc="" />
            <variable name="_toScroll" attributes="private" doc="" />
            <variable name="_anim" attributes="private" doc="" />
          </scope>
          <scope name="_PagerItem" ilk="function" attributes="private" doc="">
            <scope name="templateString" doc="" />
            <scope name="resizeChildren" ilk="function" doc="" />
            <scope name="parseChildren" ilk="function" doc="" />
          </scope>
          <scope name="PlaceholderMenuItem" ilk="function" doc="A menu item that can be used as a placeholder. Set the label of this item to a unique key and you can then use it to add new items at that location. This item is not displayed.">
            <variable name="_replaced" attributes="private" doc="" />
            <variable name="_replacedWith" attributes="private" doc="" />
            <scope name="_isPlaceholder" attributes="private" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="replace" ilk="function" signature="replace(menuItems)" doc="replaces this menu item with the given menuItems. The original menu item is not actually removed from the menu - so if you want it removed, you must do that explicitly.">
              <variable ilk="argument" name="menuItems" citdl="dijit.MenuItem[]" />
              <variable name="return_summary" />
            </scope>
            <scope name="unReplace" ilk="function" signature="unReplace(destroy)" doc="Removes menu items added by calling replace(). It returns the array of items that were actually removed (in case you want to clean them up later)" returns="dijit.MenuItem[]" attributes="private">
              <variable ilk="argument" name="destroy" citdl="Boolean" doc="Also call destroy on any removed items." />
              <variable name="return_summary" />
            </scope>
            <scope name="domNode" />
            <variable name="label" doc="" />
          </scope>
          <scope name="Roller" ilk="function" doc="A simple widget to take an unorder-list of Text and roll through them">
            <scope name="delay" citdl="Integer" doc="Interval between rolls" />
            <scope name="autoStart" citdl="Boolean" doc="Toggle to control starup behavior. Call .start() manually if set to `false`" />
            <scope name="items" citdl="Array" doc="If populated prior to instantiation, is used as the Items over the children" />
            <scope name="makeAnims" ilk="function" doc="Animation creator function. Need to create an 'in' and 'out' _Animation stored in _anim Object, which the rest of the widget will reuse." />
            <scope name="_setupConnects" ilk="function" doc="setup the loop connection logic" attributes="private" />
            <scope name="start" ilk="function" doc="Starts to Roller looping" />
            <scope name="_run" ilk="function" attributes="private" doc="" />
            <scope name="stop" ilk="function" doc="Stops the Roller from looping anymore." />
            <scope name="_set" ilk="function" signature="_set(i)" doc="Set the Roller to some passed index. If beyond range, go to first." attributes="private">
              <variable ilk="argument" name="i" />
            </scope>
            <variable name="_timeout" attributes="private" doc="" />
            <variable name="rolling" doc="" />
            <scope name="_roller">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="_idx" attributes="private" doc="" />
          </scope>
          <scope name="RollerSlide" ilk="function" doc="An add-on to the Roller to modify animations. This produces a slide-from-bottom like effect">
            <scope name="makeAnims" ilk="function" doc="Animation creator function. Need to create an 'in' and 'out' _Animation stored in _anim Object, which the rest of the widget will reuse." />
          </scope>
          <scope name="_RollingListPane" ilk="function" doc="a core pane that can be attached to a RollingList. All panes should extend this one" attributes="private">
            <scope name="templateString" doc="" />
            <scope name="parentWidget" citdl="dojox.widget.RollingList" doc="Our rolling list widget">
              <variable name="_focusedPane" attributes="private" doc="" />
            </scope>
            <scope name="parentPane" citdl="dojox.widget._RollingListPane" doc="The pane that immediately precedes ours" />
            <scope name="store" citdl="store" doc="the store we must use" />
            <variable name="items" citdl="item[]" doc="an array of (possibly not-yet-loaded) items to display in this. If this array is null, then the query and query options are used to get the top-level items to use. This array is also used to watch and see if the pane needs to be reloaded (store notifications are handled) by the pane" />
            <scope name="query" citdl="object" doc="a query to pass to the datastore. This is only used if items are null" />
            <scope name="queryOptions" citdl="object" doc="query options to be passed to the datastore" />
            <scope name="_focusByNode" attributes="private" doc="" />
            <scope name="_setContentAndScroll" ilk="function" signature="_setContentAndScroll(cont)" doc="sets the value of the content and scrolls it into view" attributes="private">
              <variable ilk="argument" name="cont" citdl="String|DomNode|Nodelist" />
            </scope>
            <scope name="startup" ilk="function" doc="" />
            <scope name="_focusKey" ilk="function" signature="_focusKey(e)" doc="called when a keypress happens on the widget" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="focus" ilk="function" signature="focus(force)" doc="sets the focus to this current widget">
              <variable ilk="argument" name="force" citdl="boolean" />
            </scope>
            <scope name="_loadCheck" ilk="function" signature="_loadCheck(forceLoad)" doc="checks that the store is loaded" attributes="private">
              <variable ilk="argument" name="forceLoad" citdl="Boolean" />
            </scope>
            <scope name="_doQuery" ilk="function" doc="either runs the query or loads potentially not-yet-loaded items." attributes="private" />
            <scope name="_hasItem" ilk="function" signature="_hasItem(item)" doc="returns whether or not the given item is handled by this pane" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="_onSetItem" ilk="function" signature="_onSetItem(item,attribute,oldValue,newValue)" attributes="private" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="oldValue" citdl="object | array" />
              <variable ilk="argument" name="newValue" citdl="object | array" />
            </scope>
            <scope name="_onNewItem" ilk="function" signature="_onNewItem(newItem,parentInfo)" attributes="private" doc="">
              <variable ilk="argument" name="newItem" citdl="item" />
              <variable ilk="argument" name="parentInfo" citdl="object" />
            </scope>
            <scope name="_onDeleteItem" ilk="function" signature="_onDeleteItem(deletedItem)" attributes="private" doc="">
              <variable ilk="argument" name="deletedItem" citdl="item" />
            </scope>
            <scope name="onFetchStart" ilk="function" doc="called before a fetch starts" />
            <scope name="onFetchError" ilk="function" signature="onFetchError(error)" doc="called when a fetch error occurs.">
              <variable ilk="argument" name="error" citdl="Error" />
            </scope>
            <scope name="onLoadStart" ilk="function" doc="called before a load starts" />
            <scope name="onLoadError" ilk="function" signature="onLoadError(error)" doc="called when a load error occurs.">
              <variable ilk="argument" name="error" citdl="Error" />
            </scope>
            <scope name="onItems" ilk="function" doc="called after a fetch or load - at this point, this.items should be set and loaded. Override this function to &amp;amp;quot;do your stuff&amp;amp;quot;" />
            <variable name="isLoaded" doc="" />
          </scope>
          <scope name="_RollingListGroupPane" ilk="function" doc="a pane that will handle groups (treats them as menu items)" attributes="private">
            <scope name="templateString" citdl="string" doc="our template" />
            <variable name="_menu" citdl="dijit.Menu" doc="The menu that we will call addChild() on for adding items" attributes="private" />
            <scope name="_loadCheck" ilk="function" signature="_loadCheck(forceLoad)" doc="checks that the store is loaded" attributes="private">
              <variable ilk="argument" name="forceLoad" citdl="Boolean" />
            </scope>
            <scope name="_setContent" ilk="function" signature="_setContent(cont)" attributes="private" doc="">
              <variable ilk="argument" name="cont" citdl="String|DomNode|Nodelist" />
            </scope>
            <scope name="onItems" ilk="function" doc="called after a fetch or load - at this point, this.items should be set and loaded." />
            <scope name="startup" ilk="function" doc="" />
            <scope name="focus" ilk="function" signature="focus(force)" doc="sets the focus to this current widget">
              <variable ilk="argument" name="force" citdl="boolean" />
            </scope>
            <scope name="_getMenu" ilk="function" doc="returns a widget to be used for the container widget." attributes="private" />
            <scope name="_getSelected" ilk="function" signature="_getSelected(menu)" doc="returns the selected menu item - or null if none are selected" attributes="private">
              <variable ilk="argument" name="menu" citdl="dijit.Menu" />
            </scope>
            <scope name="_setSelected" ilk="function" signature="_setSelected(item,menu)" doc="selectes the given item in the given menu (defaults to pane's menu)" attributes="private">
              <variable ilk="argument" name="item" citdl="dijit.MenuItem" />
              <variable ilk="argument" name="menu" citdl="dijit.Menu" />
            </scope>
            <scope name="containerNode">
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="_focusByNode" attributes="private" doc="" />
            <variable name="_pendingFocus" attributes="private" doc="" />
          </scope>
          <scope name="RollingList" ilk="function" doc="a rolling list that can be tied to a data store with children">
            <scope name="templateString" citdl="string" doc="our template string to use" />
            <scope name="className" citdl="string" doc="an additional class (or space-separated classes) to add for our widget" />
            <variable name="store" citdl="store" doc="the store we must use" />
            <scope name="query" citdl="object" doc="a query to pass to the datastore. This is only used if items are null" />
            <scope name="queryOptions" citdl="object" doc="query options to be passed to the datastore" />
            <scope name="childrenAttrs" citdl="String[]" doc="one ore more attributes that holds children of a node" />
            <scope name="parentAttr" citdl="string" doc="the attribute to read for finding our parent item (if any)" />
            <variable name="value" citdl="item" doc="The value that has been selected" />
            <scope name="_itemsMatch" ilk="function" signature="_itemsMatch(item1,item2)" attributes="private" doc="">
              <variable ilk="argument" name="item1" citdl="item" />
              <variable ilk="argument" name="item2" citdl="item" />
            </scope>
            <scope name="_removeAfter" ilk="function" signature="_removeAfter(idx)" doc="removes all widgets after the given widget (or index)" attributes="private">
              <variable ilk="argument" name="idx" citdl="Widget or int" />
            </scope>
            <scope name="addChild" ilk="function" signature="addChild(widget,insertIndex)" doc="adds a child to this rolling list - if passed an insertIndex, then all children from that index on will be removed and destroyed before adding the child.">
              <variable ilk="argument" name="widget" citdl="Widget" />
              <variable ilk="argument" name="insertIndex" citdl="int" />
            </scope>
            <scope name="_updateClass" ilk="function" signature="_updateClass(node,type,options)" doc="sets the state of the given node with the given type and options" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" />
              <variable ilk="argument" name="type" citdl="String" />
              <variable ilk="argument" name="options" citdl="Object" doc="an object with key-value-pairs. The values are boolean, if true, the key is added as a class, if false, it is removed." />
            </scope>
            <scope name="scrollIntoView" ilk="function" signature="scrollIntoView(childWidget)" doc="scrolls the given widget into view">
              <variable ilk="argument" name="childWidget" citdl="Widget" />
            </scope>
            <scope name="resize" ilk="function" signature="resize(args)" doc="">
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="layout" ilk="function" doc="" />
            <scope name="_onChange" ilk="function" signature="_onChange(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="item" />
            </scope>
            <scope name="_setValue" ilk="function" signature="_setValue(value)" doc="internally sets the value and fires onchange" attributes="private">
              <variable ilk="argument" name="value" citdl="item" />
            </scope>
            <scope name="_setValueAttr" ilk="function" signature="_setValueAttr(value)" doc="sets the value of this widget to the given store item" attributes="private">
              <variable ilk="argument" name="value" citdl="item" />
            </scope>
            <scope name="_onItemClick" ilk="function" signature="_onItemClick(evt,pane,item,children)" doc="internally called when a widget should pop up its child" attributes="private">
              <variable ilk="argument" name="evt" citdl="Event" />
              <variable ilk="argument" name="pane" citdl="dijit._Contained" />
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="children" citdl="item[]" />
            </scope>
            <scope name="_getPaneForItem" ilk="function" signature="_getPaneForItem(item,parentPane,children)" doc="gets the pane for the given item, and mixes in our needed parts Returns the pane for the given item (null if the root pane) - after mixing in its stuff." attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="parentPane" citdl="dijit._Contained" />
              <variable ilk="argument" name="children" citdl="item[]" />
            </scope>
            <scope name="_getMenuItemForItem" ilk="function" signature="_getMenuItemForItem(item,parentPane)" doc="returns a widget for the given store item. The returned item will be added to this widget's container widget. null will be passed in for an &amp;amp;quot;empty&amp;amp;quot; item." attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="parentPane" citdl="dijit._Contained" />
            </scope>
            <scope name="_setStore" ilk="function" signature="_setStore(store)" doc="sets the store for this widget */" attributes="private">
              <variable ilk="argument" name="store" citdl="dojo.data.api.Read" />
            </scope>
            <scope name="_onKey" ilk="function" signature="_onKey(e)" doc="called when a keypress event happens on this widget" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="focus" ilk="function" doc="sets the focus state of this widget" />
            <scope name="handleKey" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="getChildItems" ilk="function" signature="getChildItems(item)" doc="Returns the child items for the given store item">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="getMenuItemForItem" ilk="function" signature="getMenuItemForItem(item,parentPane,children)" doc="user overridable function to return a widget for the given item and its children.">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="parentPane" citdl="dijit._Contained" />
              <variable ilk="argument" name="children" citdl="item[]" />
            </scope>
            <scope name="getPaneForItem" ilk="function" signature="getPaneForItem(item,parentPane,children)" doc="user-overridable function to return a pane that corresponds to the given item in the store. It can return null to not add a new pane (ie, you are planning on doing something else with it in onItemClick)  Item is undefined for the root pane, children is undefined for non-group panes">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="parentPane" citdl="dijit._Contained" />
              <variable ilk="argument" name="children" citdl="item[]" />
            </scope>
            <scope name="onItemClick" ilk="function" signature="onItemClick(item,pane,children)" doc="called when an item is clicked - it receives the store item">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="pane" citdl="dijit._Contained" />
              <variable ilk="argument" name="children" citdl="item[]" />
            </scope>
            <scope name="onExecute" ilk="function" doc="exists so that popups don't disappear too soon" />
            <scope name="onCancel" ilk="function" doc="exists so that we can close ourselves if we wish" />
            <scope name="onChange" ilk="function" signature="onChange(value)" doc="called when the value of this widget has changed">
              <variable ilk="argument" name="value" citdl="item" />
            </scope>
            <variable name="_declaredClasses" attributes="private" doc="" />
            <variable name="_scrollingTimeout" attributes="private" doc="" />
            <variable name="_setInProgress" attributes="private" doc="" />
            <variable name="_visibleItem" attributes="private" doc="" />
            <variable name="_isIdentity" attributes="private" doc="" />
            <variable name="_savedFocus" attributes="private" doc="" />
          </scope>
          <scope name="SortList" ilk="function" doc="A sortable unordered-list with a fixed header for use in dijit.demos.chat for demonstration purposes only for now. feel free to make API suggestions or fixes.">
            <variable name="title" citdl="String" doc="The title in the header" />
            <scope name="heading" citdl="String" doc="In the event a parent container is expecting a title=&amp;amp;quot;&amp;amp;quot; attribute, set it for the parent via title, and the title of this widget via heading=&amp;amp;quot;&amp;amp;quot; ... assuming you want different titles for each. eg: TabContainer, AccordionContainer, etc." />
            <variable name="descending" citdl="Boolean" doc="Toggle sort order based on this value." />
            <variable name="selected" citdl="Array" doc="A list of the selected &amp;amp;lt;li&amp;amp;gt; nodes at any given time." />
            <scope name="sortable" citdl="Boolean" doc="toggle to enable/disable sorting" />
            <variable name="store" doc="" />
            <scope name="key" doc="" />
            <scope name="baseClass" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="_addItem" ilk="function" signature="_addItem(item)" attributes="private" doc="">
              <variable ilk="argument" name="item" />
            </scope>
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="resize" ilk="function" doc="do our additional calculations when resize() is called by or in a parent" />
            <scope name="onSort" ilk="function" signature="onSort(e)" doc="sort the data, and style the nodes.">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_set" ilk="function" signature="_set(e)" doc="set hover state" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_unset" ilk="function" signature="_unset(e)" doc="remove hover state (FIXME: combine with _set?)" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_handleClick" ilk="function" signature="_handleClick(e)" doc="click listener for data portion of widget. toggle selected state of node, and update this.selected array accordingly" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="_updateValues" ilk="function" attributes="private" doc="" />
            <scope name="_sorter" ilk="function" signature="_sorter(a,b)" doc="a basic sort function, use query sort, or keep this?" attributes="private">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope name="setTitle" ilk="function" signature="setTitle(title)" doc="Sets the widget title to a String">
              <variable ilk="argument" name="title" citdl="String" />
            </scope>
            <scope name="onChanged" ilk="function" doc="stub function, passes the last changed item, and is fired after current state" />
            <scope name="bodyWrapper" />
            <variable name="_selected" attributes="private" doc="" />
            <scope name="focusNode">
              <variable name="innerHTML" doc="" />
            </scope>
          </scope>
          <scope name="Toaster" ilk="function" doc="Message that slides in from the corner of the screen, used for notifications like &amp;amp;quot;new email&amp;amp;quot;.">
            <scope name="templateString" doc="" />
            <scope name="messageTopic" citdl="String" doc="Name of topic; anything published to this topic will be displayed as a message. Message format is either String or an object like {message: &amp;amp;quot;hello word&amp;amp;quot;, type: &amp;amp;quot;error&amp;amp;quot;, duration: 500}" />
            <scope name="_uniqueId" attributes="private" doc="" />
            <scope name="messageTypes" citdl="Enumeration" doc="Possible message types.">
              <scope name="MESSAGE" doc="" />
              <scope name="WARNING" doc="" />
              <scope name="ERROR" doc="" />
              <scope name="FATAL" doc="" />
            </scope>
            <scope name="defaultType" citdl="String" doc="If message type isn't specified (see &amp;amp;quot;messageTopic&amp;amp;quot; parameter), then display message as this type. Possible values in messageTypes enumeration (&amp;amp;quot;message&amp;amp;quot;, &amp;amp;quot;warning&amp;amp;quot;, &amp;amp;quot;error&amp;amp;quot;, &amp;amp;quot;fatal&amp;amp;quot;)" />
            <scope name="positionDirection" citdl="String" doc="Position from which message slides into screen, one of [&amp;amp;quot;br-up&amp;amp;quot;, &amp;amp;quot;br-left&amp;amp;quot;, &amp;amp;quot;bl-up&amp;amp;quot;, &amp;amp;quot;bl-right&amp;amp;quot;, &amp;amp;quot;tr-down&amp;amp;quot;, &amp;amp;quot;tr-left&amp;amp;quot;, &amp;amp;quot;tl-down&amp;amp;quot;, &amp;amp;quot;tl-right&amp;amp;quot;]" />
            <scope name="positionDirectionTypes" citdl="Array" doc="Possible values for positionDirection parameter" />
            <scope name="duration" citdl="Integer" doc="Number of milliseconds to show message" />
            <scope name="separator" citdl="String" doc="String used to separate messages if consecutive calls are made to setContent before previous messages go away" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="_handleMessage" ilk="function" signature="_handleMessage(message)" attributes="private" doc="">
              <variable ilk="argument" name="message" citdl="String|Object" />
            </scope>
            <scope name="_capitalize" ilk="function" signature="_capitalize(w)" attributes="private" doc="">
              <variable ilk="argument" name="w" citdl="String" />
            </scope>
            <scope name="setContent" ilk="function" signature="setContent(message,messageType,duration)" doc="sets and displays the given message and show duration">
              <variable ilk="argument" name="message" citdl="String|Function" doc="the message. If this is a function, it will be called with this toaster widget as the only argument." />
              <variable ilk="argument" name="messageType" citdl="String" doc="type of message; possible values in messageTypes enumeration (&amp;amp;quot;message&amp;amp;quot;, &amp;amp;quot;warning&amp;amp;quot;, &amp;amp;quot;error&amp;amp;quot;, &amp;amp;quot;fatal&amp;amp;quot;)" />
              <variable ilk="argument" name="duration" citdl="int" doc="duration in milliseconds to display message before removing it. Widget has default value." />
            </scope>
            <scope name="_setContent" ilk="function" signature="_setContent(message)" attributes="private" doc="">
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="_cancelHideTimer" attributes="private" doc="" />
            <scope name="_setHideTimer" attributes="private" doc="" />
            <scope name="_placeClip" ilk="function" attributes="private" doc="" />
            <scope name="onSelect" ilk="function" signature="onSelect(e)" doc="callback for when user clicks the message">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="show" ilk="function" doc="show the Toaster" />
            <scope name="hide" ilk="function" doc="hide the Toaster" />
            <scope name="clipNode">
              <variable name="className" doc="" />
              <variable name="id" doc="" />
            </scope>
            <scope name="contentNode">
              <variable name="className" doc="" />
              <variable name="innerHTML" doc="" />
            </scope>
            <variable name="slideAnim" doc="" />
            <variable name="fadeAnim" doc="" />
            <variable name="isVisible" doc="" />
            <variable name="_stickyMessage" attributes="private" doc="" />
            <variable name="bgIframe" doc="" />
            <variable name="_scrollConnected" attributes="private" doc="" />
          </scope>
          <scope name="Wizard" ilk="function" doc="A set of panels that display sequentially, typically notating a step-by-step procedure like an install">
            <scope name="widgetsInTemplate" doc="" />
            <scope name="templatePath" doc="" />
            <scope name="nextButtonLabel" citdl="String" doc="Label override for the &amp;amp;quot;Next&amp;amp;quot; button." />
            <scope name="previousButtonLabel" citdl="String" doc="Label override for the &amp;amp;quot;Previous&amp;amp;quot; button." />
            <scope name="cancelButtonLabel" citdl="String" doc="Label override for the &amp;amp;quot;Cancel&amp;amp;quot; button." />
            <scope name="doneButtonLabel" citdl="String" doc="Label override for the &amp;amp;quot;Done&amp;amp;quot; button." />
            <variable name="cancelFunction" citdl="Function|String" doc="Name of function to call if user presses cancel button. Cancel button is not displayed if function is not specified." />
            <scope name="hideDisabled" citdl="Boolean" doc="If true, disabled buttons are hidden; otherwise, they are assigned the &amp;amp;quot;WizardButtonDisabled&amp;amp;quot; CSS class" />
            <scope name="postMixInProperties" ilk="function" doc="" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_checkButtons" ilk="function" attributes="private" doc="" />
            <scope name="_setButtonClass" ilk="function" signature="_setButtonClass(button)" attributes="private" doc="">
              <variable ilk="argument" name="button" />
            </scope>
            <scope name="_forward" ilk="function" doc="callback when next button is clicked" attributes="private" />
            <scope name="done" ilk="function" doc="Finish the wizard's operation" />
            <scope name="destroy" ilk="function" doc="" />
            <scope name="cancelButton">
              <scope name="domNode" />
            </scope>
            <variable name="_subscription" attributes="private" doc="" />
            <variable name="_started" attributes="private" doc="" />
            <scope name="doneButton">
              <scope name="domNode" />
            </scope>
            <scope name="nextButton">
              <scope name="domNode" />
            </scope>
          </scope>
          <scope name="WizardPane" ilk="function" doc="A panel in a `dojox.widget.Wizard`">
            <variable name="canGoBack" citdl="Boolean" doc="If true, then can move back to a previous panel (by clicking the &amp;amp;quot;Previous&amp;amp;quot; button)" />
            <variable name="passFunction" citdl="String" doc="Name of function that checks if it's OK to advance to the next panel. If it's not OK (for example, mandatory field hasn't been entered), then returns an error message (String) explaining the reason." />
            <variable name="doneFunction" citdl="String" doc="Name of function that is run if you press the &amp;amp;quot;Done&amp;amp;quot; button from this panel" />
            <scope name="startup" ilk="function" doc="" />
            <scope name="_checkPass" ilk="function" doc="Called when the user presses the &amp;amp;quot;next&amp;amp;quot; button. Calls passFunction to see if it's OK to advance to next panel, and if it isn't, then display error. Returns true to advance, false to not advance. If passFunction returns a string, it is assumed to be a custom error message, and is alert()'ed" returns="Boolean" attributes="private" />
            <scope name="done" ilk="function" doc="" />
          </scope>
        </variable>
        <variable name="wire" citdl="Object" doc="">
          <scope name="CompositeWire" ilk="function" doc="Initialize properties" signature="CompositeWire(args)">
            <variable ilk="argument" name="args" citdl="Object" doc="Arguments to initialize properties children: An object or array containing child Wires" />
            <scope name="_wireClass" attributes="private" doc="" />
            <scope name="_getValue" ilk="function" signature="_getValue(object)" doc="Return an object with property values or an array with element values" returns="Object||Array" attributes="private">
              <variable ilk="argument" name="object" citdl="Object||Array" doc="A root object" />
              <variable name="return_summary" />
            </scope>
            <scope name="_setValue" ilk="function" signature="_setValue(object,value)" doc="Set an object properties or an array elements to an object desription: This method calls setValues() method of the child Wires with a corresponding property or element in 'value' argument and 'object' argument." returns="Object||Array" attributes="private">
              <variable ilk="argument" name="object" citdl="Object||Array" doc="A root object" />
              <variable ilk="argument" name="value" citdl="Object||Array" doc="An object or array with values to set" />
              <variable name="return_summary" />
            </scope>
            <scope name="_initializeChildren" ilk="function" signature="_initializeChildren(children)" doc="Initialize child Wires" returns="undefined" attributes="private">
              <variable ilk="argument" name="children" citdl="Object||Array" doc="An object or array containing child Wires" />
            </scope>
          </scope>
          <scope name="DataWire" ilk="function" doc="Initialize properties" signature="DataWire(args)">
            <variable ilk="argument" name="args" citdl="Object" doc="Arguments to initialize properties" />
            <scope name="_wireClass" attributes="private" doc="" />
            <scope name="_getValue" ilk="function" signature="_getValue(object)" doc="Return an attribute value of an item" returns="Object|undefined|anything" attributes="private">
              <variable ilk="argument" name="object" citdl="Object" doc="A root item" />
              <variable name="return_summary" />
            </scope>
            <scope name="_setValue" ilk="function" signature="_setValue(object,value)" doc="Set an attribute value to an item" returns="Object|undefined" attributes="private">
              <variable ilk="argument" name="object" citdl="Object" doc="A root item" />
              <variable ilk="argument" name="value" citdl="anything" doc="A value to set" />
              <variable name="return_summary" />
            </scope>
            <scope name="_getAttributeValue" ilk="function" signature="_getAttributeValue(item,attribute)" doc="Return an attribute value of an item" returns="return array for &amp;quot;attribute[]&amp;quot;|anything" attributes="private">
              <variable ilk="argument" name="item" citdl="Object" doc="An item attribute An attribute name" />
              <variable ilk="argument" name="attribute" citdl="String" />
              <variable name="return_summary" />
            </scope>
            <scope name="_setAttributeValue" ilk="function" signature="_setAttributeValue(item,attribute,value)" doc="Set an attribute value to an item" attributes="private">
              <variable ilk="argument" name="item" citdl="Object" doc="An item" />
              <variable ilk="argument" name="attribute" citdl="String" doc="An attribute name" />
              <variable ilk="argument" name="value" citdl="anything" doc="A value to set" />
            </scope>
            <variable name="dataStore" citdl="A" doc="data store attribute: A dotted notation to a descendant attribute" />
          </scope>
          <scope name="TableAdapter" ilk="function" doc="Initialize properties" signature="TableAdapter(args)">
            <variable ilk="argument" name="args" citdl="Object" doc="Arguments to initialize properties columns: An object or array containing child Wires for column values" />
            <scope name="_wireClass" attributes="private" doc="" />
            <scope name="_getValue" ilk="function" signature="_getValue(object)" doc="Return an array of table row value (object or array)" returns="Array" attributes="private">
              <variable ilk="argument" name="object" citdl="Array" doc="A root array" />
              <variable name="return_summary" />
            </scope>
            <scope name="_setValue" ilk="function" signature="_setValue(object,value)" doc="Not supported" attributes="private">
              <variable ilk="argument" name="object" citdl="Array" />
              <variable ilk="argument" name="value" citdl="Array" />
            </scope>
            <scope name="_getRow" ilk="function" signature="_getRow(object)" doc="Return an array or object for a table row" returns="Array||Object" attributes="private">
              <variable ilk="argument" name="object" citdl="Object||Array" />
              <variable name="return_summary" />
            </scope>
          </scope>
          <scope name="TextAdapter" ilk="function" doc="Initialize properties" signature="TextAdapter(args)">
            <variable ilk="argument" name="args" citdl="Object" doc="Arguments to initialize properties segments: An array containing child Wires for text segment values" />
            <scope name="_wireClass" attributes="private" doc="" />
            <scope name="_getValue" ilk="function" signature="_getValue(object)" doc="Return a concatenated text" returns="Object||Array|String" attributes="private">
              <variable ilk="argument" name="object" citdl="Object||Array" />
              <variable name="return_summary" />
            </scope>
            <scope name="_setValue" ilk="function" signature="_setValue(object,value)" doc="Not supported" attributes="private">
              <variable ilk="argument" name="object" citdl="Object||Array" />
              <variable ilk="argument" name="value" citdl="String" />
            </scope>
            <scope name="_addSegment" ilk="function" signature="_addSegment(text,segment)" doc="Return a concatenated text" returns="String" attributes="private">
              <variable ilk="argument" name="text" citdl="String" doc="A base text" />
              <variable ilk="argument" name="segment" citdl="String" doc="A text segment to add" />
              <variable name="return_summary" />
            </scope>
            <variable name="delimiter" citdl="A" doc="delimiter string" />
          </scope>
          <scope name="TreeAdapter" ilk="function" doc="Initialize properties" signature="TreeAdapter(args)">
            <variable ilk="argument" name="args" citdl="Object" doc="Arguments to initialize properties nodes: An array containing objects for child Wires for node values" />
            <scope name="_wireClass" attributes="private" doc="" />
            <scope name="_getValue" ilk="function" signature="_getValue(object)" doc="Return an array of tree node values" returns="Array" attributes="private">
              <variable ilk="argument" name="object" citdl="Array" doc="A root array" />
              <variable name="return_summary" />
            </scope>
            <scope name="_setValue" ilk="function" signature="_setValue(object,value)" doc="Not supported" attributes="private">
              <variable ilk="argument" name="object" citdl="Array" />
              <variable ilk="argument" name="value" citdl="Array" />
            </scope>
            <scope name="_initializeChildren" ilk="function" signature="_initializeChildren(children)" doc="Initialize child Wires" returns="undefined" attributes="private">
              <variable ilk="argument" name="children" citdl="Array" doc="An array of objects containing child Wires" />
            </scope>
            <scope name="_getNodes" ilk="function" signature="_getNodes(object,child)" doc="Return an array of tree node values" returns="Array" attributes="private">
              <variable ilk="argument" name="object" citdl="Object" doc="An object" />
              <variable ilk="argument" name="child" citdl="Object" doc="An object with child Wires" />
              <scope name="return_summary" />
            </scope>
          </scope>
          <scope name="Wire" doc="Initialize properties" signature="Wire(args)">
            <variable ilk="argument" name="args" citdl="Object" doc="Arguments to initialize properties object: A root object (or another Wire to access a root object) property: A dotted notation to a descendant property type: A type of the return value (for the source Wire)" />
            <scope name="_wireClass" attributes="private" doc="" />
            <scope name="getValue" ilk="function" signature="getValue(defaultObject)" doc="Return a value of an object" returns="anything (null, undefined, etc)|anything" attributes="private">
              <variable ilk="argument" name="defaultObject" citdl="Object||Array" doc="A default root object" />
              <variable name="return_summary" />
            </scope>
            <scope name="setValue" ilk="function" signature="setValue(value,defaultObject)" doc="Set a value to an object">
              <variable ilk="argument" name="value" citdl="anything" doc="A value to set" />
              <variable ilk="argument" name="defaultObject" citdl="Object||Array" doc="A default root object" />
            </scope>
            <scope name="_getPropertyValue" ilk="function" signature="_getPropertyValue(object,property)" doc="Return a property value of an object" returns="anything" attributes="private">
              <variable ilk="argument" name="object" citdl="Object||Array" doc="A default root object" />
              <variable ilk="argument" name="property" citdl="String" doc="A property name" />
              <variable name="return_summary" />
            </scope>
            <scope name="_setPropertyValue" ilk="function" signature="_setPropertyValue(object,property,value)" doc="Set a property value to an object" attributes="private">
              <variable ilk="argument" name="object" citdl="Object||Array" doc="An object" />
              <variable ilk="argument" name="property" citdl="String" doc="A property name" />
              <variable ilk="argument" name="value" citdl="anything" doc="A value to set" />
            </scope>
            <variable name="converter" citdl="A" doc="converter object (or class name) to convert the return value (for the source Wire)" />
          </scope>
          <scope name="XmlWire" ilk="function" doc="Initialize properties" signature="XmlWire(args)">
            <variable ilk="argument" name="args" citdl="Object" doc="Arguments to initialize properties path: A simplified XPath to an attribute, a text or elements" />
            <scope name="_wireClass" attributes="private" doc="" />
            <scope name="_getValue" ilk="function" signature="_getValue(object)" doc="Return an attribute value, a text value or an array of elements" returns="Node|undefined|String||Array" attributes="private">
              <variable ilk="argument" name="object" citdl="Node" doc="A root node" />
              <variable name="return_summary" />
            </scope>
            <scope name="_setValue" ilk="function" signature="_setValue(object,value)" doc="Set an attribute value or a child text value to an element" returns="Node|to be returned as a new object|undefined" attributes="private">
              <variable ilk="argument" name="object" citdl="Node" doc="A root node" />
              <variable ilk="argument" name="value" citdl="String" doc="A value to set" />
            </scope>
            <scope name="_getNodeValue" ilk="function" signature="_getNodeValue(node,exp)" doc="Return an attribute value, a text value or an array of elements" returns="String||Array" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" doc="A node" />
              <variable ilk="argument" name="exp" citdl="String" doc="An expression for attribute, text or elements" />
              <variable name="return_summary" />
            </scope>
            <scope name="_setNodeValue" ilk="function" signature="_setNodeValue(node,exp,value)" doc="Set an attribute value or a child text value to an element" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" doc="A node" />
              <variable ilk="argument" name="exp" citdl="String" doc="An expression for attribute or text" />
              <variable ilk="argument" name="value" citdl="String" doc="A value to set" />
            </scope>
            <scope name="_getChildNode" ilk="function" signature="_getChildNode(node,name)" doc="Return a child node" returns="Node|null" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" doc="A parent node" />
              <variable ilk="argument" name="name" citdl="String" doc="A tag name" />
              <variable name="return_summary" />
            </scope>
            <scope name="_getDocument" ilk="function" signature="_getDocument(node)" doc="Return a DOM document" returns="Document" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" />
              <variable name="return_summary" />
            </scope>
          </scope>
          <variable name="_wireClasses" citdl="Object" attributes="private" doc="">
            <scope name="attribute" doc="" />
            <scope name="path" doc="" />
            <scope name="children" doc="" />
            <scope name="columns" doc="" />
            <scope name="nodes" doc="" />
            <scope name="segments" doc="" />
          </variable>
          <scope name="register" ilk="function" signature="register(wireClass,key)" doc="Register a Wire class desription: The specified Wire class or a class name is registered with a key property of arguments to create a Wire" returns="undefined" attributes="private">
            <variable ilk="argument" name="wireClass" citdl="Function||String" doc="A class or full qualified class name" />
            <variable ilk="argument" name="key" citdl="String" doc="A key property of arguments to create a Wire" />
          </scope>
          <scope name="_getClass" ilk="function" signature="_getClass(name)" doc="Returns a class" returns="Function" attributes="private">
            <variable ilk="argument" name="name" citdl="String" doc="A class name" />
            <variable name="return_summary" />
          </scope>
          <scope name="create" ilk="function" signature="create(args)" doc="Create a Wire from arguments" returns="Object" attributes="private">
            <variable ilk="argument" name="args" citdl="Object" doc="Arguments to create a Wire" />
            <variable name="return_summary" />
          </scope>
          <scope name="isWire" ilk="function" signature="isWire(wire)" doc="Check if an object is a Wire" returns="Boolean" attributes="private">
            <variable ilk="argument" name="wire" citdl="Object" doc="An object to check" />
            <variable name="return_summary" />
          </scope>
          <scope name="transfer" ilk="function" signature="transfer(source,target,defaultObject,defaultTargetObject)" doc="Transfer a source value to a target value" returns="undefined" attributes="private">
            <variable ilk="argument" name="source" citdl="Wire||Object" doc="A Wire or arguments to create a Wire for a source value" />
            <variable ilk="argument" name="target" citdl="Wire||Object" doc="A Wire or arguments to create a Wire for a target value" />
            <variable ilk="argument" name="defaultObject" citdl="Object" doc="defaultTargetObject Optional default root objects passed to Wires" />
            <variable ilk="argument" name="defaultTargetObject" citdl="Object" />
          </scope>
          <scope name="connect" ilk="function" signature="connect(trigger,source,target)" doc="Transfer a source value to a target value on a trigger event or topic" returns="undefined|Object" attributes="private">
            <variable ilk="argument" name="trigger" citdl="Object" doc="An event or topic to trigger a transfer" />
            <variable ilk="argument" name="source" citdl="Wire||Object" doc="A Wire or arguments to create a Wire for a source value" />
            <variable ilk="argument" name="target" citdl="Wire||Object" doc="A Wire or arguments to create a Wire for a target value" />
            <variable name="return_summary" />
          </scope>
          <scope name="disconnect" ilk="function" signature="disconnect(connection)" doc="Remove a connection or subscription for transfer" returns="undefined" attributes="private">
            <variable ilk="argument" name="connection" citdl="Object" doc="A connection handle returned by connect()" />
          </scope>
          <scope name="_defaultWireClass" attributes="private" doc="" />
          <variable name="_base" citdl="Object" attributes="private" doc="" />
          <variable name="ml" citdl="Object" doc="">
            <scope name="Action" ilk="function" doc="A base widget to &amp;amp;quot;run&amp;amp;quot; a task on an event or a topic">
              <scope name="trigger" citdl="An" doc="event scope" />
              <scope name="triggerEvent" citdl="An" doc="event (function) name" />
              <scope name="triggerTopic" citdl="A" doc="topic name" />
              <scope name="postCreate" ilk="function" doc="Call _connect()" />
              <scope name="_connect" ilk="function" doc="Connect run() method to an event or a topic" attributes="private" />
              <scope name="_disconnect" ilk="function" doc="Disconnect run() method from an event or a topic" attributes="private" />
              <scope name="run" ilk="function" doc="Run a task" />
              <scope name="_run" ilk="function" doc="Call run() methods of child Action widgets" attributes="private" />
              <scope name="uninitialize" ilk="function" doc="Over-ride of base widget unitialize function to do some connection cleanup." />
              <variable name="_triggerHandle" attributes="private" doc="" />
            </scope>
            <scope name="ActionFilter" doc="A widget to define a filter for the parent Action to run">
              <variable name="required" citdl="A" doc="property required" />
              <variable name="requiredValue" citdl="Optional." doc="A specific value the property is required to have. If this isn't provided than any non-false/non-null value of the required propery will cause this filter to pass." />
              <scope name="message" citdl="An" doc="error message to emit if the filter doesn't execute due to property mismatch." />
              <scope name="error" citdl="A" doc="property to store an error due to property mismatch." />
              <scope name="filter" ilk="function" doc="Check if a required property is specified. Also, if provided, check to see if the required property contains a specific value." returns="Boolean|boolean" attributes="private">
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope name="Data" ilk="function" doc="A widget for a data object">
              <scope name="startup" ilk="function" doc="Call _initializeProperties()" />
              <scope name="_initializeProperties" ilk="function" signature="_initializeProperties(reset)" doc="Initialize a data object" attributes="private">
                <variable ilk="argument" name="reset" citdl="Boolean" doc="A boolean to reset current properties" />
              </scope>
              <scope name="getPropertyValue" ilk="function" signature="getPropertyValue(property)" doc="Return a property value" returns="anything" attributes="private">
                <variable ilk="argument" name="property" citdl="String" doc="A property name" />
                <variable name="return_summary" />
              </scope>
              <scope name="setPropertyValue" ilk="function" signature="setPropertyValue(property,value)" doc="Store a property value">
                <variable ilk="argument" name="property" citdl="String" doc="A property name" />
                <variable ilk="argument" name="value" citdl="anything" doc="A property value" />
              </scope>
              <variable name="_properties" attributes="private" doc="" />
            </scope>
            <scope name="DataProperty" doc="A widget to define a data property">
              <scope name="name" citdl="A" doc="property name" />
              <scope name="value" citdl="A" doc="property value" />
              <scope name="getValue" ilk="function" doc="Returns a property value" returns="anything" attributes="private">
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope name="DataStore" ilk="function" doc="A widget for a data store">
              <scope name="storeClass" citdl="A" doc="class name of a data store" />
              <scope name="postCreate" ilk="function" doc="Call _createStore()" />
              <scope name="_createStore" ilk="function" doc="Create a data store desription: A data store of 'storeClass' is created with arguments specified with attributes." returns="null|Object" attributes="private">
                <variable name="return_summary" />
              </scope>
              <scope name="getFeatures" ilk="function" doc="Call getFeatures() method of a data store" returns="Object" attributes="private">
                <variable name="return_summary" />
              </scope>
              <scope name="fetch" ilk="function" signature="fetch(request)" doc="Call fetch() method of a data store" returns="Object" attributes="private">
                <variable ilk="argument" name="request" citdl="Object" doc="A request object" />
                <variable name="return_summary" />
              </scope>
              <scope name="save" ilk="function" signature="save(args)" doc="Call save() method of a data store">
                <variable ilk="argument" name="args" citdl="Object" doc="A save arguments object" />
              </scope>
              <scope name="newItem" ilk="function" signature="newItem(args)" doc="Call newItem() method of a data store" returns="Object" attributes="private">
                <variable ilk="argument" name="args" citdl="Object" doc="A new item arguments object" />
                <variable name="return_summary" />
              </scope>
              <scope name="deleteItem" ilk="function" signature="deleteItem(item)" doc="Call deleteItem() method of a data store" returns="Boolean" attributes="private">
                <variable ilk="argument" name="item" citdl="Object" />
                <variable name="return_summary" />
              </scope>
              <scope name="revert" ilk="function" doc="Call revert() method of a data store" returns="Boolean" attributes="private">
                <variable name="return_summary" />
              </scope>
              <variable name="store" doc="" />
            </scope>
            <scope name="Invocation" ilk="function" doc="A widget to invoke a method or publish a topic" signature="Invocation(prototype,type,summary)">
              <scope name="object" citdl="A" doc="scope of a method to invoke" />
              <variable name="method" citdl="A" doc="name of a method to invoke" />
              <scope name="topic" citdl="A" doc="name of a topic to publish" />
              <variable ilk="argument" name="prototype" />
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="summary" />
              <scope name="result" citdl="A" doc="property to store a return value of the method call" />
              <scope name="error" citdl="A" doc="property to store an error on the method call" />
              <scope name="_run" ilk="function" doc="Invoke a method or publish a topic" returns="undefined" attributes="private" />
              <scope name="onComplete" ilk="function" signature="onComplete(result)" doc="A function called when the method or the topic publish completed">
                <variable ilk="argument" name="result" citdl="anything" doc="The return value of a method or undefined for a topic" />
              </scope>
              <scope name="onError" ilk="function" signature="onError(error)" doc="A function called on an error occurs">
                <variable ilk="argument" name="error" citdl="anything" doc="The exception or error occurred" />
              </scope>
              <scope name="_getParameters" ilk="function" signature="_getParameters(args)" doc="Returns arguments to a method or topic to invoke" returns="Array" attributes="private">
                <variable ilk="argument" name="args" citdl="Array" doc="Arguments to a trigger event or topic" />
              </scope>
            </scope>
            <scope name="Service" ilk="function" doc="A widget for a service">
              <scope name="url" citdl="A" doc="URL to a service description" />
              <variable name="serviceUrl" citdl="A" doc="URL to a service" />
              <scope name="serviceType" citdl="A" doc="service type" />
              <scope name="handlerClass" citdl="A" doc="service handler class name" />
              <scope name="preventCache" doc="" />
              <scope name="postCreate" ilk="function" doc="Call _createHandler()" />
              <variable name="_handlerClasses" citdl="Object" attributes="private" doc="">
                <scope name="TEXT" doc="" />
                <scope name="XML" doc="" />
                <scope name="JSON" doc="" />
                <scope name="JSON-RPC" doc="" />
              </variable>
              <scope name="_createHandler" ilk="function" doc="Create a service handler desription: A service handler class is determined by: 1. 'handlerClass' attribute 2. 'serviceType' attribute 3. 'serviceType' property in a service description" returns="null|Object" attributes="private">
                <variable name="return_summary" />
              </scope>
              <scope name="callMethod" ilk="function" signature="callMethod(method,parameters)" doc="Call a service method with parameters">
                <variable ilk="argument" name="method" citdl="A" doc="method name" />
                <variable ilk="argument" name="parameters" citdl="An" doc="array parameters" />
              </scope>
              <variable name="handler" doc="" />
            </scope>
            <scope name="RestHandler" ilk="function" doc="A REST service handler">
              <scope name="contentType" doc="" />
              <scope name="handleAs" doc="" />
              <scope name="bind" ilk="function" signature="bind(method,parameters,deferred,url)" doc="Call a service method with parameters.">
                <variable ilk="argument" name="method" citdl="A" doc="method name" />
                <variable ilk="argument" name="parameters" citdl="An" doc="array of parameters" />
                <variable ilk="argument" name="deferred" citdl="Deferred" doc="" />
                <variable ilk="argument" name="url" citdl="A" doc="URL for the method" />
              </scope>
              <scope name="_getUrl" ilk="function" signature="_getUrl(method,parameters,url)" doc="Generate a URL" returns="String" attributes="private">
                <variable ilk="argument" name="method" citdl="String" doc="A method name" />
                <variable ilk="argument" name="parameters" citdl="Array" doc="An array of parameters" />
                <variable ilk="argument" name="url" citdl="String" doc="A base URL" />
                <variable name="return_summary" />
              </scope>
              <scope name="_getContent" ilk="function" signature="_getContent(method,parameters)" doc="Generate a request content" returns="anything|null" attributes="private">
                <variable ilk="argument" name="method" citdl="String" doc="A method name" />
                <variable ilk="argument" name="parameters" citdl="Array" doc="An array of parameters" />
                <variable name="return_summary" />
              </scope>
              <scope name="_getResult" ilk="function" signature="_getResult(data)" doc="Extract a result" returns="anything" attributes="private">
                <variable ilk="argument" name="data" citdl="anything" doc="A response data returned by a service" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope name="XmlHandler" ilk="function" doc="A REST service handler for XML">
              <scope name="contentType" doc="" />
              <scope name="handleAs" doc="" />
              <scope name="_getContent" ilk="function" signature="_getContent(method,parameters)" attributes="private" doc="">
                <variable ilk="argument" name="method" citdl="String" doc="A method name" />
                <variable ilk="argument" name="parameters" citdl="Array" doc="An array of parameters" />
                <variable name="return_summary" />
              </scope>
              <scope name="_getResult" ilk="function" signature="_getResult(data)" doc="Extract a result" attributes="private">
                <variable ilk="argument" name="data" citdl="Document" doc="A response data returned by a service" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope name="JsonHandler" ilk="function" doc="A REST service handler for JSON">
              <scope name="contentType" doc="" />
              <scope name="handleAs" doc="" />
              <variable name="headers" citdl="Object" doc="">
                <scope name="Accept" doc="" />
              </variable>
              <scope name="_getContent" ilk="function" signature="_getContent(method,parameters)" doc="Generate a request content" returns="String" attributes="private">
                <variable ilk="argument" name="method" citdl="String" doc="A method name" />
                <variable ilk="argument" name="parameters" citdl="Array" doc="An array of parameters" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope name="Transfer" doc="A widget to transfer values through source and target Wires">
              <scope name="sourceStore" citdl="A" doc="data store for a source data item" />
              <scope name="sourceAttribute" citdl="An" doc="attribute of a source data item" />
              <scope name="sourcePath" citdl="A" doc="simplified XPath to a source property of an XML element" />
              <scope name="converter" citdl="A" doc="class name of a converter for the value to be transferred" />
              <scope name="delimiter" doc="" />
              <scope name="target" citdl="A" doc="target object and/or property" />
              <scope name="targetStore" citdl="A" doc="data store for a target data item" />
              <scope name="targetAttribute" citdl="An" doc="attribute of a target data item" />
              <scope name="targetPath" citdl="A" doc="simplified XPath to a target property of an XML element" />
              <scope name="_run" ilk="function" doc="Transfer a value from a source to a target" attributes="private" />
              <scope name="_getWire" ilk="function" signature="_getWire(which)" doc="Build Wire arguments from attributes" returns="Object" attributes="private">
                <variable ilk="argument" name="which" citdl="String" doc="Which Wire arguments to build, &amp;amp;quot;source&amp;amp;quot; or &amp;amp;quot;target&amp;amp;quot;" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope name="ChildWire" doc="A widget to add a child wire">
              <scope name="which" citdl="Which" doc="Wire to add a child Wire, &amp;amp;quot;source&amp;amp;quot; or &amp;amp;quot;target&amp;amp;quot;, default to &amp;amp;quot;source&amp;amp;quot;" />
              <scope name="object" citdl="A" doc="root object for the value" />
              <scope name="property" citdl="A" doc="property for the value" />
              <scope name="converter" citdl="A" doc="class name of a converter for the value" />
              <scope name="attribute" citdl="A" doc="data item attribute for the value" />
              <scope name="path" citdl="A" doc="simplified XPath for the value" />
              <scope name="name" citdl="A" doc="composite property name" />
              <scope name="_addWire" ilk="function" signature="_addWire(parent,args)" doc="Add a child Wire to Wire arguments" attributes="private">
                <variable ilk="argument" name="parent" citdl="Transfer" doc="A parent Transfer widget" />
                <variable ilk="argument" name="args" citdl="Object" doc="Wire arguments" />
              </scope>
              <scope name="_getWire" ilk="function" signature="_getWire(parent)" doc="Build child Wire arguments from attributes" attributes="private">
                <variable ilk="argument" name="parent" citdl="Transfer" doc="A parent Transfer widget" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope name="ColumnWire" ilk="function" doc="A widget to add a column wire">
              <scope name="column" citdl="A" doc="column name" />
              <scope name="_addWire" ilk="function" signature="_addWire(parent,args)" doc="Add a column Wire to Wire arguments" attributes="private">
                <variable ilk="argument" name="parent" citdl="Transfer" doc="A parent Transfer widget" />
                <variable ilk="argument" name="args" citdl="Object" doc="Wire arguments" />
              </scope>
            </scope>
            <scope name="NodeWire" ilk="function" doc="A widget to add node wires">
              <scope name="titleProperty" citdl="A" doc="property for the node title" />
              <scope name="titleAttribute" citdl="A" doc="data item attribute for the node title" />
              <scope name="titlePath" citdl="A" doc="simplified XPath for the node title" />
              <scope name="_addWire" ilk="function" signature="_addWire(parent,args)" doc="Add node Wires to Wire arguments" attributes="private">
                <variable ilk="argument" name="parent" citdl="Transfer" doc="A parent Transfer widget" />
                <variable ilk="argument" name="args" citdl="Object" doc="Wire arguments" />
              </scope>
              <scope name="_getWires" ilk="function" signature="_getWires(parent)" doc="Build node Wires arguments from attributes" returns="Object" attributes="private">
                <variable ilk="argument" name="parent" citdl="Transfer" doc="A parent Transfer widget" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope name="SegmentWire" ilk="function" doc="A widget to add a segment wire">
              <scope name="_addWire" ilk="function" signature="_addWire(parent,args)" doc="Add a segument Wire to Wire arguments" attributes="private">
                <variable ilk="argument" name="parent" citdl="Transfer" doc="A parent Transfer widget" />
                <variable ilk="argument" name="args" citdl="Object" doc="Wire arguments" />
              </scope>
            </scope>
            <scope name="XmlElement" ilk="function" doc="Initialize with an XML element or a tag name" signature="XmlElement(element)">
              <variable ilk="argument" name="element" citdl="Element||String" doc="An XML element or a tag name" />
              <scope name="getPropertyValue" ilk="function" signature="getPropertyValue(property)" doc="Return a property value" returns="undefined|String||Array||XmlElement" attributes="private">
                <variable ilk="argument" name="property" citdl="String" doc="A property name" />
                <variable name="return_summary" />
              </scope>
              <scope name="setPropertyValue" ilk="function" signature="setPropertyValue(property,value)" doc="Store a property value" returns="undefined" attributes="private">
                <variable ilk="argument" name="property" citdl="String" doc="A property name" />
                <variable ilk="argument" name="value" citdl="String||Array||XmlElement" doc="A property value" />
              </scope>
              <scope name="toString" ilk="function" doc="Return a value of the first text child of the element" returns="String" attributes="private">
                <variable name="return_summary" />
              </scope>
              <scope name="toObject" ilk="function" doc="Return an object representation of the element" returns="null|String|Object" attributes="private">
                <variable name="return_summary" />
              </scope>
              <scope name="_getDocument" ilk="function" doc="Return a DOM document" returns="Document" attributes="private">
                <variable name="return_summary" />
              </scope>
              <variable name="element" citdl="An" doc="XML element or a tag name">
                <variable name="nodeType" doc="" />
              </variable>
            </scope>
            <scope name="_getValue" ilk="function" signature="_getValue(source,args)" doc="Return a value" returns="undefined|Object|anything" attributes="private">
              <variable ilk="argument" name="source" citdl="String" doc="A string to specify an object and its property" />
              <variable ilk="argument" name="args" citdl="Array" doc="An optional arguments array" />
              <variable name="return_summary" />
            </scope>
            <scope name="_setValue" ilk="function" signature="_setValue(target,value)" doc="Store a value" returns="undefined" attributes="private">
              <variable ilk="argument" name="target" citdl="String" doc="A string to specify an object and its property" />
              <variable ilk="argument" name="value" citdl="anything" doc="A value" />
            </scope>
            <variable name="util" citdl="Object" doc="" />
          </variable>
        </variable>
        <variable name="xml" citdl="Object" doc="">
          <scope name="DomParser" ilk="function" doc="">
            <scope name="initialized" />
            <variable name="nodeType" doc="" />
            <variable name="nodeName" doc="" />
            <variable name="namespaces" doc="" />
            <variable name="_nsPaths" attributes="private" doc="" />
            <variable name="childNodes" doc="" />
            <variable name="documentElement" doc="" />
            <variable name="byId" doc="" />
            <variable name="byName" doc="" />
            <variable name="byNameNS" doc="" />
            <variable name="childrenByName" doc="" />
            <variable name="_add" ilk="function" signature="_add(obj)" attributes="private" doc="">
              <variable ilk="argument" name="obj" />
            </variable>
            <variable name="_remove" ilk="function" signature="_remove(id)" attributes="private" doc="">
              <variable ilk="argument" name="id" />
            </variable>
            <variable name="getElementById" ilk="function" signature="getElementById(id)" doc="">
              <variable ilk="argument" name="id" />
            </variable>
            <variable name="parse" ilk="function" signature="parse(str)" doc="">
              <variable ilk="argument" name="str" citdl="String" />
            </variable>
          </scope>
          <scope name="Script" ilk="function" signature="Script(props,node)" doc="">
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="node" />
          </scope>
          <variable name="parser" citdl="Object" doc="">
            <scope name="parse" ilk="function" signature="parse(str)" doc="returns a new native XML document from the string provided as the single argument to parse(). Parsing errors throw exceptions." returns="DomDocument" attributes="private">
              <variable ilk="argument" name="str" citdl="String" />
            </scope>
          </variable>
          <scope name="widgetParser" ilk="function" doc="">
            <scope name="initialized" />
            <variable name="parseNode" ilk="function" signature="parseNode(node)" doc="">
              <variable ilk="argument" name="node" />
            </variable>
            <variable name="_processScript" ilk="function" signature="_processScript(script)" attributes="private" doc="">
              <variable ilk="argument" name="script" />
            </variable>
            <variable name="toHTML" ilk="function" signature="toHTML(node)" doc="">
              <variable ilk="argument" name="node" citdl="XmlNode" />
            </variable>
          </scope>
        </variable>
        <variable name="resources" citdl="Object" doc="">
          <variable name="manualTests" citdl="Object" doc="" />
        </variable>
        <variable name="robot" citdl="Object" doc="" />
        <variable name="rpc" citdl="Object" doc="">
          <variable name="JsonRPC" citdl="Object" doc="" />
          <variable name="JsonRest" citdl="Object" doc="">
            <scope name="commit" ilk="function" signature="commit(kwArgs)" doc="Saves the dirty data using REST Ajax methods">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope name="getDirtyObjects" ilk="function" doc="" />
            <scope name="revert" ilk="function" doc="Reverts all the changes made to JSON/REST data" />
            <scope name="changing" ilk="function" signature="changing(object,_deleting)" doc="adds an object to the list of dirty objects. This object contains a reference to the object itself as well as a cloned and trimmed version of old object for use with revert.">
              <variable ilk="argument" name="object" />
              <variable ilk="argument" name="_deleting" />
            </scope>
            <scope name="deleteObject" ilk="function" signature="deleteObject(object)" doc="deletes an object">
              <variable ilk="argument" name="object" citdl="object" doc="to delete" />
            </scope>
            <scope name="getConstructor" ilk="function" signature="getConstructor(service,schema)" doc="Creates or gets a constructor for objects from this service">
              <variable ilk="argument" name="service" citdl="Function|String" />
              <variable ilk="argument" name="schema" />
              <variable name="__id" attributes="private" doc="" />
            </scope>
            <scope name="fetch" ilk="function" signature="fetch(absoluteId)" doc="Fetches a resource by an absolute path/id and returns a dojo.Deferred.">
              <variable ilk="argument" name="absoluteId" />
            </scope>
            <scope name="getIdAttribute" ilk="function" signature="getIdAttribute(service)" doc="Return the ids attribute used by this service (based on it's schema). Defaults to &amp;amp;quot;id&amp;amp;quot;, if not other id is defined">
              <variable ilk="argument" name="service" />
            </scope>
            <scope name="getServiceAndId" ilk="function" signature="getServiceAndId(absoluteId)" doc="Returns the REST service and the local id for the given absolute id. The result is returned as an object with a service property and an id property">
              <variable ilk="argument" name="absoluteId" citdl="String" doc="This is the absolute id of the object" />
            </scope>
            <scope name="services" doc="" />
          </variable>
          <scope name="Rest" ilk="function" signature="Rest(path,isJson,schema,getRequest)" doc="Creates a REST service using the provided path." returns="the last parameter is to let the OfflineRest know where to store the item" attributes="private">
            <variable ilk="argument" name="path" citdl="String" />
            <variable ilk="argument" name="isJson" citdl="Boolean" />
            <variable ilk="argument" name="schema" citdl="Object" />
            <variable ilk="function" name="getRequest" />
            <scope name="_get" ilk="function" signature="_get(service,id)" returns="if it is not found we have to just return the error|server error, let the error propagate" attributes="private" doc="">
              <variable ilk="argument" name="service" />
              <variable ilk="argument" name="id" />
            </scope>
            <scope name="_change" ilk="function" signature="_change(method,service,id,serializedContent)" attributes="private" doc="">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="service" />
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="serializedContent" />
            </scope>
          </scope>
          <variable name="OfflineRest" citdl="Object" doc="">
            <scope name="turnOffAutoSync" ilk="function" doc="" />
            <scope name="sync" doc="" />
            <scope name="sendChanges" doc="" />
            <scope name="downloadChanges" ilk="function" doc="" />
            <scope name="addStore" ilk="function" signature="addStore(store,baseQuery)" doc="Adds a store to the monitored store for local storage">
              <variable ilk="argument" name="store" citdl="data-store" doc="Store to add" />
              <variable ilk="argument" name="baseQuery" citdl="query" doc="This is the base query to should be used to load the items for the store. Generally you want to load all the items that should be available when offline." />
            </scope>
          </variable>
          <variable name="ProxiedPath" citdl="Object" doc="" />
          <scope name="Service" ilk="function" signature="Service(smd,options)" doc="Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use as a definition for the service">
            <variable ilk="argument" name="smd" citdl="object" doc="Takes a number of properties as kwArgs for defining the service. It also accepts a string. When passed a string, it is treated as a url from which it should synchronously retrieve an smd file. Otherwise it is a kwArgs object. It accepts serviceUrl, to manually define a url for the rpc service allowing the rpc system to be used without an smd definition. strictArgChecks forces the system to verify that the # of arguments provided in a call matches those defined in the smd. smdString allows a developer to pass a jsonString directly, which will be converted into an object or alternatively smdObject is accepts an smdObject directly." />
            <variable ilk="argument" name="options" />
            <scope name="_generateService" ilk="function" signature="_generateService(serviceName,method)" returns="define the schema" attributes="private" doc="">
              <variable ilk="argument" name="serviceName" />
              <variable ilk="argument" name="method" />
            </scope>
            <scope name="_getRequest" ilk="function" signature="_getRequest(method,args)" returns="serialize with the right schema for the context;" attributes="private" doc="">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope name="_executeMethod" ilk="function" signature="_executeMethod(method)" attributes="private" doc="">
              <variable ilk="argument" name="method" />
            </scope>
            <variable name="_options" attributes="private" doc="" />
            <variable name="_requestId" attributes="private" doc="" />
            <scope name="_nextId" attributes="private" doc="" />
          </scope>
          <scope name="getTarget" ilk="function" signature="getTarget(smd,method)" doc="">
            <variable ilk="argument" name="smd" />
            <variable ilk="argument" name="method" />
          </scope>
          <scope name="toOrdered" ilk="function" signature="toOrdered(method,args)" doc="">
            <variable ilk="argument" name="method" />
            <variable ilk="argument" name="args" />
          </scope>
          <scope name="transportRegistry" doc="" />
          <scope name="envelopeRegistry" doc="" />
        </variable>
        <variable name="secure" citdl="Object" doc="">
          <variable name="capability" citdl="Object" doc="">
            <scope name="keywords" doc="" />
            <scope name="validate" ilk="function" signature="validate(script,safeLibraries,safeGlobals)" doc="pass in the text of a script. If it passes and it can be eval'ed, it should be safe. Note that this does not do full syntax checking, it relies on eval to reject invalid scripts. There are also known false rejections: Nesting vars inside blocks will not declare the variable for the outer block Named functions are not treated as declaration so they are generally not allowed unless the name is declared with a var. Var declaration that involve multiple comma delimited variable assignments are not accepted" returns="comments are replaced with a space, strings and regex are replaced with a single safe token (0)|replace literal keys with 0: and replace properties with the innocuous ~|check for illegal operator usages|the whitelist for [ operator for array initializer context or [+num] syntax|turn into a known safe call|return a block reference so the outer block can fetch it"
            attributes="private">
              <variable ilk="argument" name="script" citdl="string" doc="the script to execute" />
              <variable ilk="argument" name="safeLibraries" citdl="Array" doc="The safe libraries that can be called (the functions can not be access/modified by the untrusted code, only called)" />
              <variable ilk="argument" name="safeGlobals" citdl="Object" doc="These globals can be freely interacted with by the untrusted code" />
            </scope>
          </variable>
          <scope name="badProps" doc="" />
          <scope name="__Sandbox" ilk="function" attributes="private" doc="">
            <scope name="loadJS" ilk="function" signature="loadJS(url)" doc="Loads the script from the given URL using XHR (assuming a plugin system is in place for cross-site requests) within the sandbox">
              <variable ilk="argument" name="url" citdl="The" doc="url of the script to load" />
            </scope>
            <scope name="loadHTML" ilk="function" signature="loadHTML(url)" doc="Loads the web page from the provided URL using XHR (assuming the plugin system is in place) within the sandbox. All scripts within the web page will also be sandboxed.">
              <variable ilk="argument" name="url" citdl="The" doc="url of the web page to load" />
            </scope>
            <scope name="evaluate" ilk="function" signature="evaluate(script)" doc="Evaluates the given script within the sandbox">
              <variable ilk="argument" name="script" citdl="The" doc="JavaScript text to evaluate" />
            </scope>
          </scope>
          <scope name="_safeDojoFunctions" ilk="function" signature="_safeDojoFunctions(element,wrap)" returns="wrap the NodeList|use the safe document" attributes="private" doc="">
            <variable ilk="argument" name="element" />
            <variable ilk="argument" name="wrap" />
          </scope>
          <scope name="sandbox" ilk="function" signature="sandbox(element)" doc="Creates a secure sandbox from which scripts and HTML can be loaded that will only be able to access the provided element and it's descendants, the rest of the DOM and JS environment will not be accessible to the sandboxed scripts and HTML." returns="dojox.secure.__Sandbox" attributes="private">
            <variable ilk="argument" name="element" citdl="The" doc="DOM element to use as the container for the sandbox" />
          </scope>
        </variable>
        <variable name="sketch" citdl="Object" doc="">
          <scope name="AnnotationTool" ilk="function" doc="">
            <scope name="onMouseMove" ilk="function" signature="onMouseMove(e,rect)" doc="">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="rect" />
            </scope>
            <scope name="onMouseUp" ilk="function" signature="onMouseUp(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="_create" ilk="function" signature="_create(start,end)" attributes="private" doc="">
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="end" />
            </scope>
            <variable name="_cshape" attributes="private" doc="" />
          </scope>
          <scope name="Annotation" ilk="function" signature="Annotation(figure,id)" doc="">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable name="Modes" citdl="Object" doc="">
              <scope name="View" doc="" />
              <scope name="Edit" doc="" />
            </variable>
            <variable name="labelFont" citdl="Object" doc="">
              <scope name="family" doc="" />
              <scope name="size" doc="" />
              <scope name="weight" doc="" />
            </variable>
            <variable name="id" doc="" />
            <variable name="figure" doc="" />
            <variable name="mode" doc="" />
            <variable name="shape" doc="" />
            <variable name="boundingBox" doc="" />
            <variable name="hasAnchors" doc="" />
            <variable name="anchors" doc="" />
            <variable name="_properties" attributes="private" doc="" />
            <scope name="register" ilk="function" signature="register(name)" doc="">
              <variable ilk="argument" name="name" />
            </scope>
          </scope>
          <scope name="DoubleArrowAnnotation" ilk="function" signature="DoubleArrowAnnotation(figure,id)" doc="">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable name="transform" doc="" />
            <variable name="start" doc="" />
            <variable name="control" doc="" />
            <variable name="end" doc="" />
            <variable name="textPosition" doc="" />
            <variable name="textOffset" doc="" />
            <variable name="textYOffset" doc="" />
            <variable name="textAlign" doc="" />
            <variable name="startRotation" doc="" />
            <variable name="endRotation" doc="" />
            <variable name="labelShape" doc="" />
            <variable name="pathShape" doc="" />
            <variable name="startArrow" doc="" />
            <variable name="startArrowGroup" doc="" />
            <variable name="endArrow" doc="" />
            <variable name="endArrowGroup" doc="" />
            <scope name="anchors">
              <variable name="start" doc="" />
              <variable name="control" doc="" />
              <variable name="end" doc="" />
            </scope>
          </scope>
          <variable name="tools" citdl="Object" doc="" />
          <scope name="registerTool" ilk="function" signature="registerTool(type,fn)" doc="">
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="fn" />
          </scope>
          <scope name="Figure" ilk="function" doc="">
            <variable name="shapes" doc="" />
            <variable name="image" doc="" />
            <variable name="imageSrc" doc="" />
            <variable name="size" doc="" />
            <variable name="surface" doc="" />
            <variable name="group" doc="" />
            <variable name="node" doc="" />
            <variable name="zoomFactor" doc="" />
            <variable name="tools" doc="" />
            <variable name="obj" doc="" />
            <variable name="selected" doc="" />
            <variable name="_c" attributes="private" doc="" />
            <variable name="_ctr" attributes="private" doc="" />
            <variable name="_lp" attributes="private" doc="" />
            <variable name="_action" attributes="private" doc="" />
            <variable name="_prevState" attributes="private" doc="" />
            <variable name="_startPoint" attributes="private" doc="" />
            <variable name="_ctool" attributes="private" doc="" />
            <variable name="_start" attributes="private" doc="" />
            <variable name="_end" attributes="private" doc="" />
            <variable name="_absEnd" attributes="private" doc="" />
            <variable name="_cshape" attributes="private" doc="" />
            <variable name="nextKey" ilk="function" doc="" />
            <variable name="hasSelections" ilk="function" doc="" />
            <variable name="isSelected" ilk="function" signature="isSelected(obj)" doc="">
              <variable ilk="argument" name="obj" />
            </variable>
            <variable name="select" ilk="function" signature="select(obj)" doc="">
              <variable ilk="argument" name="obj" />
            </variable>
            <variable name="deselect" ilk="function" signature="deselect(obj)" doc="">
              <variable ilk="argument" name="obj" />
            </variable>
            <variable name="clearSelections" ilk="function" doc="" />
            <variable name="replaceSelection" ilk="function" signature="replaceSelection(n,o)" doc="">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="o" />
            </variable>
            <variable name="_click" ilk="function" signature="_click(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </variable>
            <variable name="_dblclick" ilk="function" signature="_dblclick(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </variable>
            <variable name="_keydown" ilk="function" signature="_keydown(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </variable>
            <variable name="_md" ilk="function" signature="_md(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </variable>
            <variable name="_mm" ilk="function" signature="_mm(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </variable>
            <variable name="_mu" ilk="function" signature="_mu(e)" attributes="private" doc="">
              <variable ilk="argument" name="e" />
            </variable>
            <variable name="_delete" ilk="function" signature="_delete(arr,noundo)" attributes="private" doc="">
              <variable ilk="argument" name="arr" />
              <variable ilk="argument" name="noundo" />
            </variable>
          </scope>
          <scope name="LeadAnnotation" ilk="function" signature="LeadAnnotation(figure,id)" doc="">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable name="transform" doc="" />
            <variable name="start" doc="" />
            <variable name="control" doc="" />
            <variable name="end" doc="" />
            <variable name="textPosition" doc="" />
            <variable name="textOffset" doc="" />
            <variable name="textAlign" doc="" />
            <variable name="textYOffset" doc="" />
            <variable name="pathShape" doc="" />
            <variable name="labelShape" doc="" />
            <scope name="anchors">
              <variable name="start" doc="" />
              <variable name="control" doc="" />
              <variable name="end" doc="" />
            </scope>
          </scope>
          <scope name="PreexistingAnnotation" ilk="function" signature="PreexistingAnnotation(figure,id)" doc="">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable name="transform" doc="" />
            <variable name="start" doc="" />
            <variable name="end" doc="" />
            <variable name="radius" doc="" />
            <variable name="textPosition" doc="" />
            <variable name="textOffset" doc="" />
            <variable name="textAlign" doc="" />
            <variable name="rectShape" doc="" />
            <variable name="labelShape" doc="" />
            <scope name="anchors">
              <variable name="start" doc="" />
              <variable name="end" doc="" />
            </scope>
          </scope>
          <scope name="SingleArrowAnnotation" ilk="function" signature="SingleArrowAnnotation(figure,id)" doc="">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable name="transform" doc="" />
            <variable name="start" doc="" />
            <variable name="control" doc="" />
            <variable name="end" doc="" />
            <variable name="textPosition" doc="" />
            <variable name="textOffset" doc="" />
            <variable name="textAlign" doc="" />
            <variable name="textYOffset" doc="" />
            <variable name="rotation" doc="" />
            <variable name="pathShape" doc="" />
            <variable name="arrowhead" doc="" />
            <variable name="arrowheadGroup" doc="" />
            <variable name="labelShape" doc="" />
            <scope name="anchors">
              <variable name="start" doc="" />
              <variable name="control" doc="" />
              <variable name="end" doc="" />
            </scope>
          </scope>
          <scope name="Slider" ilk="function" doc="">
            <scope name="_initButton" ilk="function" attributes="private" doc="" />
            <scope name="_zoomToFit" ilk="function" attributes="private" doc="" />
            <scope name="_setZoom" ilk="function" signature="_setZoom(v)" attributes="private" doc="">
              <variable ilk="argument" name="v" />
            </scope>
            <scope name="setToolbar" ilk="function" signature="setToolbar(t)" doc="">
              <variable ilk="argument" name="t" />
            </scope>
            <variable name="slider" doc="" />
          </scope>
          <scope name="ButtonGroup" ilk="function" doc="">
            <scope name="add" ilk="function" signature="add(plugin)" doc="">
              <variable ilk="argument" name="plugin" citdl="_Plugin" />
            </scope>
            <scope name="_resetGroup" ilk="function" signature="_resetGroup(p)" attributes="private" doc="">
              <variable ilk="argument" name="p" />
            </scope>
            <variable name="_childMaps" attributes="private" doc="" />
            <variable name="_children" attributes="private" doc="" />
          </scope>
          <scope name="Toolbar" ilk="function" doc="">
            <scope name="figure" doc="" />
            <variable name="plugins" doc="" />
            <scope name="postCreate" ilk="function" doc="" />
            <scope name="destroy" ilk="function" doc="" />
            <scope name="addGroupItem" ilk="function" signature="addGroupItem(item,group)" doc="">
              <variable ilk="argument" name="item" citdl="_Plugin" />
              <variable ilk="argument" name="group" />
            </scope>
            <scope name="reset" ilk="function" doc="" />
            <scope name="_setShape" ilk="function" signature="_setShape(s)" attributes="private" doc="">
              <variable ilk="argument" name="s" />
            </scope>
            <variable name="shapeGroup" doc="" />
            <variable name="_plugins" attributes="private" doc="" />
            <variable name="_defaultTool" attributes="private" doc="" />
          </scope>
          <scope name="makeToolbar" ilk="function" signature="makeToolbar(node,figure)" doc="">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="figure" />
          </scope>
          <scope name="UnderlineAnnotation" ilk="function" signature="UnderlineAnnotation(figure,id)" doc="">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable name="transform" doc="" />
            <variable name="start" doc="" />
            <variable name="labelShape" doc="" />
            <variable name="lineShape" doc="" />
            <scope name="anchors">
              <variable name="start" doc="" />
            </scope>
          </scope>
          <scope name="UndoStack" ilk="function" signature="UndoStack(figure)" doc="">
            <variable ilk="argument" name="figure" />
            <scope name="apply" ilk="function" signature="apply(state,from,to)" doc="">
              <variable ilk="argument" name="state" />
              <variable ilk="argument" name="from" />
              <variable ilk="argument" name="to" />
            </scope>
            <scope name="add" ilk="function" signature="add(cmd,ann,before)" doc="">
              <variable ilk="argument" name="cmd" citdl="String" />
              <variable ilk="argument" name="ann" citdl="ta.Annotation" />
              <variable ilk="argument" name="before" citdl="String" />
            </scope>
            <scope name="destroy" ilk="function" doc="" />
            <scope name="undo" ilk="function" doc="" />
            <scope name="redo" ilk="function" doc="" />
            <variable name="_undoedSteps" attributes="private" doc="" />
            <variable name="figure" doc="" />
            <variable name="_steps" attributes="private" doc="" />
          </scope>
          <variable name="CommandTypes" citdl="Object" doc="">
            <scope name="Create" doc="" />
            <scope name="Move" doc="" />
            <scope name="Modify" doc="" />
            <scope name="Delete" doc="" />
            <scope name="Convert" doc="" />
          </variable>
          <scope name="_Plugin" ilk="function" signature="_Plugin(args)" attributes="private" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
            <variable name="figure" doc="" />
            <scope name="iconClassPrefix" doc="" />
            <scope name="itemGroup" doc="" />
            <variable name="button" doc="" />
            <scope name="queryCommand" doc="" />
            <scope name="shape" doc="" />
            <scope name="useDefaultCommand" doc="" />
            <scope name="buttonClass" doc="" />
            <scope name="_initButton" ilk="function" attributes="private" doc="" />
            <scope name="attr" ilk="function" signature="attr(name,value)" doc="">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="value" citdl="?" />
            </scope>
            <scope name="onActivate" ilk="function" doc="" />
            <scope name="activate" ilk="function" signature="activate(e)" doc="">
              <variable ilk="argument" name="e" citdl="?" />
            </scope>
            <scope name="onMouseDown" ilk="function" signature="onMouseDown(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onMouseMove" ilk="function" signature="onMouseMove(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onMouseUp" ilk="function" signature="onMouseUp(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="destroy" ilk="function" signature="destroy(f)" doc="">
              <variable ilk="argument" name="f" />
            </scope>
            <scope name="connect" ilk="function" signature="connect(o,f,tf)" doc="">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="f" />
              <variable ilk="argument" name="tf" />
            </scope>
            <scope name="setFigure" ilk="function" signature="setFigure(figure)" doc="">
              <variable ilk="argument" name="figure" citdl="Widget" />
            </scope>
            <scope name="setToolbar" ilk="function" signature="setToolbar(toolbar)" doc="">
              <variable ilk="argument" name="toolbar" citdl="Widget" />
            </scope>
            <variable name="_connects" attributes="private" doc="" />
          </scope>
        </variable>
        <variable name="sql" citdl="Object" doc="">
          <scope name="dbName" doc="" />
          <scope name="debug" doc="" />
          <scope name="open" ilk="function" signature="open(dbName)" doc="">
            <variable ilk="argument" name="dbName" />
            <variable name="dbName" doc="" />
            <variable name="_dbOpen" attributes="private" doc="" />
          </scope>
          <scope name="close" ilk="function" signature="close(dbName)" doc="">
            <variable ilk="argument" name="dbName" />
            <variable name="_dbOpen" attributes="private" doc="" />
          </scope>
          <scope name="_exec" ilk="function" signature="_exec(params)" returns="encrypted results will arrive asynchronously|decrypted results will arrive asynchronously" attributes="private" doc="">
            <variable ilk="argument" name="params" />
            <variable name="_autoClose" attributes="private" doc="" />
          </scope>
          <scope name="_initDb" ilk="function" attributes="private" doc="">
            <variable name="db" doc="" />
          </scope>
          <scope name="_printDebugSQL" ilk="function" signature="_printDebugSQL(sql,args)" attributes="private" doc="">
            <variable ilk="argument" name="sql" />
            <variable ilk="argument" name="args" />
          </scope>
          <scope name="_normalizeResults" ilk="function" signature="_normalizeResults(rs)" attributes="private" doc="">
            <variable ilk="argument" name="rs" />
          </scope>
          <scope name="_needsEncrypt" ilk="function" signature="_needsEncrypt(sql)" attributes="private" doc="">
            <variable ilk="argument" name="sql" />
          </scope>
          <scope name="_needsDecrypt" ilk="function" signature="_needsDecrypt(sql)" attributes="private" doc="">
            <variable ilk="argument" name="sql" />
          </scope>
          <variable name="_base" citdl="Object" attributes="private" doc="" />
          <variable name="_crypto" citdl="Object" attributes="private" doc="">
            <scope name="_POOL_SIZE" attributes="private" doc="" />
            <scope name="encrypt" ilk="function" signature="encrypt(plaintext,password,callback)" doc="Use Corrected Block TEA to encrypt plaintext using password (note plaintext &amp;amp;amp; password must be strings not string objects). Results will be returned to the 'callback' asychronously.">
              <variable ilk="argument" name="plaintext" />
              <variable ilk="argument" name="password" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope name="decrypt" ilk="function" signature="decrypt(ciphertext,password,callback)" doc="Use Corrected Block TEA to decrypt ciphertext using password (note ciphertext &amp;amp;amp; password must be strings not string objects). Results will be returned to the 'callback' asychronously.">
              <variable ilk="argument" name="ciphertext" />
              <variable ilk="argument" name="password" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope name="_initWorkerPool" ilk="function" attributes="private" doc="">
              <variable name="_manager" attributes="private" doc="">
                <variable name="onmessage" ilk="function" signature="onmessage(msg,sender)" doc="">
                  <variable ilk="argument" name="msg" />
                  <variable ilk="argument" name="sender" />
                </variable>
              </variable>
              <variable name="_unemployed" attributes="private" doc="" />
              <variable name="_employed" attributes="private" doc="" />
              <variable name="_handleMessage" attributes="private" doc="" />
            </scope>
            <scope name="_assignWork" ilk="function" signature="_assignWork(msg,callback)" attributes="private" doc="">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="callback" />
              <variable name="_handleMessage" attributes="private" doc="" />
            </scope>
            <scope name="_workerHandler" ilk="function" signature="_workerHandler(msg,sender)" returns="convert state to 1-d array before returning [&amp;Acirc;&amp;sect;3.4]|see fp.gladman.plus.com/cryptography_technology/rijndael/aes.spec.311.pdf|standard allows 128/192/256 bit keys" attributes="private" doc="">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="sender" />
            </scope>
          </variable>
        </variable>
        <variable name="testing" citdl="Object" doc="" />
        <variable name="xmpp" citdl="Object" doc="">
          <scope name="PresenceService" ilk="function" signature="PresenceService(xmppService)" doc="">
            <variable ilk="argument" name="xmppService" />
            <scope name="publish" ilk="function" signature="publish(presence)" doc="">
              <variable ilk="argument" name="presence" />
            </scope>
            <scope name="sendAvatarHash" ilk="function" signature="sendAvatarHash(avatarHash)" doc="">
              <variable ilk="argument" name="avatarHash" />
            </scope>
            <scope name="_setPresence" ilk="function" attributes="private" doc="" />
            <scope name="toggleBlockContact" ilk="function" signature="toggleBlockContact(jid)" doc="">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope name="toggleContactInvisiblity" ilk="function" signature="toggleContactInvisiblity(jid)" doc="">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope name="_createRestrictedJid" ilk="function" attributes="private" doc="" />
            <scope name="_updateRestricted" ilk="function" attributes="private" doc="" />
            <scope name="_setVisible" ilk="function" attributes="private" doc="" />
            <scope name="_setInvisible" ilk="function" attributes="private" doc="" />
            <scope name="_manageSubscriptions" ilk="function" signature="_manageSubscriptions(contact,type)" attributes="private" doc="">
              <variable ilk="argument" name="contact" />
              <variable ilk="argument" name="type" />
            </scope>
            <scope name="subscribe" ilk="function" signature="subscribe(contact)" doc="">
              <variable ilk="argument" name="contact" />
            </scope>
            <scope name="approveSubscription" ilk="function" signature="approveSubscription(contact)" doc="">
              <variable ilk="argument" name="contact" />
            </scope>
            <scope name="unsubscribe" ilk="function" signature="unsubscribe(contact)" doc="">
              <variable ilk="argument" name="contact" />
            </scope>
            <scope name="declineSubscription" ilk="function" signature="declineSubscription(contact)" doc="">
              <variable ilk="argument" name="contact" />
            </scope>
            <scope name="cancelSubscription" ilk="function" signature="cancelSubscription(contact)" doc="">
              <variable ilk="argument" name="contact" />
            </scope>
            <variable name="presence" doc="" />
            <variable name="avatarHash" doc="" />
            <variable name="isInvisible" doc="" />
            <variable name="session" doc="" />
            <variable name="restrictedContactjids" doc="" />
          </scope>
          <variable name="presence" citdl="Object" doc="">
            <scope name="UPDATE" doc="" />
            <scope name="SUBSCRIPTION_REQUEST" doc="" />
            <scope name="SUBSCRIPTION_SUBSTATUS_NONE" doc="" />
            <scope name="SUBSCRIPTION_NONE" doc="" />
            <scope name="SUBSCRIPTION_FROM" doc="" />
            <scope name="SUBSCRIPTION_TO" doc="" />
            <scope name="SUBSCRIPTION_BOTH" doc="" />
            <scope name="SUBSCRIPTION_REQUEST_PENDING" doc="" />
            <scope name="STATUS_ONLINE" doc="" />
            <scope name="STATUS_AWAY" doc="" />
            <scope name="STATUS_CHAT" doc="" />
            <scope name="STATUS_DND" doc="" />
            <scope name="STATUS_EXTENDED_AWAY" doc="" />
            <scope name="STATUS_OFFLINE" doc="" />
            <scope name="STATUS_INVISIBLE" doc="" />
          </variable>
          <scope name="RosterService" ilk="function" signature="RosterService(xmppSession)" doc="">
            <variable ilk="argument" name="xmppSession" />
            <scope name="addRosterItem" ilk="function" signature="addRosterItem(jid,name,groups)" doc="">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="groups" />
            </scope>
            <scope name="updateRosterItem" ilk="function" signature="updateRosterItem(jid,name,groups)" doc="">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="groups" />
            </scope>
            <scope name="verifyRoster" ilk="function" signature="verifyRoster(res)" doc="">
              <variable ilk="argument" name="res" />
            </scope>
            <scope name="addRosterItemToGroup" ilk="function" signature="addRosterItemToGroup(jid,group)" doc="">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="group" />
            </scope>
            <scope name="removeRosterGroup" ilk="function" signature="removeRosterGroup(group)" doc="">
              <variable ilk="argument" name="group" />
            </scope>
            <scope name="renameRosterGroup" ilk="function" signature="renameRosterGroup(group,newGroup)" doc="">
              <variable ilk="argument" name="group" />
              <variable ilk="argument" name="newGroup" />
            </scope>
            <scope name="removeRosterItemFromGroup" ilk="function" signature="removeRosterItemFromGroup(jid,group)" doc="">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="group" />
            </scope>
            <scope name="rosterItemRenameGroup" ilk="function" signature="rosterItemRenameGroup(jid,oldGroup,newGroup)" doc="">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="oldGroup" />
              <variable ilk="argument" name="newGroup" />
            </scope>
            <scope name="renameRosterItem" ilk="function" signature="renameRosterItem(jid,newName)" doc="">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="newName" />
            </scope>
            <scope name="removeRosterItem" ilk="function" signature="removeRosterItem(jid)" doc="">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope name="getAvatar" ilk="function" signature="getAvatar(jid)" doc="">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope name="publishAvatar" ilk="function" signature="publishAvatar(type,binval)" doc="">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="binval" />
            </scope>
            <scope name="onVerifyRoster" ilk="function" signature="onVerifyRoster(id)" doc="">
              <variable ilk="argument" name="id" />
            </scope>
            <scope name="onVerifyRosterFailed" ilk="function" signature="onVerifyRosterFailed(err)" doc="">
              <variable ilk="argument" name="err" />
            </scope>
            <variable name="session" doc="" />
          </scope>
          <variable name="roster" citdl="Object" doc="">
            <scope name="ADDED" doc="" />
            <scope name="CHANGED" doc="" />
            <scope name="REMOVED" doc="" />
          </variable>
          <scope name="TransportSession" ilk="function" signature="TransportSession(props)" doc="">
            <variable ilk="argument" name="props" />
            <variable name="transportIframes" doc="" />
            <scope name="_iframeOnload" ilk="function" signature="_iframeOnload(index)" attributes="private" doc="">
              <variable ilk="argument" name="index" />
            </scope>
            <scope name="handleBOSH" ilk="function" signature="handleBOSH(msg,rid)" doc="">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="rid" />
            </scope>
            <variable name="rid" doc="" />
            <scope name="hold" doc="" />
            <variable name="polling" doc="" />
            <scope name="secure" doc="" />
            <variable name="wait" doc="" />
            <scope name="lang" doc="" />
            <scope name="submitContentType" doc="" />
            <scope name="serviceUrl" doc="" />
            <scope name="defaultResource" doc="" />
            <scope name="domain" doc="" />
            <scope name="sendTimeout" doc="" />
            <scope name="useScriptSrcTransport" doc="" />
            <variable name="keepAliveTimer" doc="" />
            <variable name="state" doc="" />
            <variable name="transmitState" doc="" />
            <variable name="protocolPacketQueue" doc="">
              <variable name="length" doc="" />
            </variable>
            <variable name="outboundQueue" doc="" />
            <variable name="outboundRequests" citdl="Object" doc="" />
            <variable name="inboundQueue" doc="" />
            <variable name="deferredRequests" citdl="Object" doc="" />
            <variable name="matchTypeIdAttribute" citdl="Object" doc="" />
            <scope name="open" ilk="function" doc="" />
            <variable name="status" doc="" />
            <scope name="_sendLogin" ilk="function" attributes="private" doc="" />
            <scope name="processScriptSrc" ilk="function" signature="processScriptSrc(msg,rid)" doc="">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope name="_keepAlive" ilk="function" attributes="private" doc="" />
            <scope name="close" ilk="function" signature="close(protocolMsg)" doc="">
              <variable ilk="argument" name="protocolMsg" />
            </scope>
            <scope name="dispatchPacket" ilk="function" signature="dispatchPacket(msg,protocolMatchType,matchId,matchProperty)" doc="">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="protocolMatchType" />
              <variable ilk="argument" name="matchId" />
              <variable ilk="argument" name="matchProperty" />
            </scope>
            <variable name="dispatchTimer" doc="" />
            <scope name="_dispatchPacket" ilk="function" attributes="private" doc="" />
            <variable name="lastPollTime" doc="" />
            <scope name="redispatchPacket" ilk="function" signature="redispatchPacket(rid)" doc="">
              <variable ilk="argument" name="rid" />
            </scope>
            <scope name="addToOutboundQueue" ilk="function" signature="addToOutboundQueue(msg,rid)" doc="">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope name="removeFromOutboundQueue" ilk="function" signature="removeFromOutboundQueue(rid)" doc="">
              <variable ilk="argument" name="rid" />
            </scope>
            <scope name="processProtocolPacketQueue" ilk="function" doc="" />
            <scope name="findOpenIframe" ilk="function" doc="" />
            <scope name="sendXml" ilk="function" signature="sendXml(message,rid)" doc="">
              <variable ilk="argument" name="message" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope name="processDocument" ilk="function" signature="processDocument(doc,rid)" doc="">
              <variable ilk="argument" name="doc" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope name="processInboundQueue" ilk="function" doc="" />
            <scope name="addToInboundQueue" ilk="function" signature="addToInboundQueue(doc,rid)" doc="">
              <variable ilk="argument" name="doc" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope name="processResponse" ilk="function" signature="processResponse(body,rid)" doc="">
              <variable ilk="argument" name="body" />
              <variable ilk="argument" name="rid" />
            </scope>
            <variable name="sid" doc="" />
            <variable name="authId" doc="" />
            <variable name="inactivity" doc="" />
            <scope name="processProtocolResponse" ilk="function" signature="processProtocolResponse(msg,rid)" doc="">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope name="setState" ilk="function" signature="setState(state,message)" doc="">
              <variable ilk="argument" name="state" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="isTerminated" ilk="function" doc="" />
            <scope name="processError" ilk="function" signature="processError(err,httpStatusCode,rid)" doc="">
              <variable ilk="argument" name="err" />
              <variable ilk="argument" name="httpStatusCode" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope name="onTerminate" ilk="function" signature="onTerminate(newState,oldState,message)" doc="">
              <variable ilk="argument" name="newState" />
              <variable ilk="argument" name="oldState" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="onProcessProtocolResponse" ilk="function" signature="onProcessProtocolResponse(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="onReady" ilk="function" signature="onReady(newState,oldState)" doc="">
              <variable ilk="argument" name="newState" />
              <variable ilk="argument" name="oldState" />
            </scope>
          </scope>
          <scope name="UserService" ilk="function" signature="UserService(xmppService)" doc="">
            <variable ilk="argument" name="xmppService" />
            <scope name="getPersonalProfile" ilk="function" doc="" />
            <scope name="setPersonalProfile" ilk="function" signature="setPersonalProfile(props)" doc="">
              <variable ilk="argument" name="props" />
            </scope>
            <scope name="_onSetPersonalProfile" ilk="function" signature="_onSetPersonalProfile(response)" attributes="private" doc="">
              <variable ilk="argument" name="response" />
            </scope>
            <scope name="onSetPersonalProfile" ilk="function" signature="onSetPersonalProfile(id)" doc="">
              <variable ilk="argument" name="id" />
            </scope>
            <scope name="onSetPersonalProfileFailure" ilk="function" signature="onSetPersonalProfileFailure(err)" doc="">
              <variable ilk="argument" name="err" />
            </scope>
            <scope name="_onGetPersonalProfile" ilk="function" signature="_onGetPersonalProfile(profile)" attributes="private" doc="">
              <variable ilk="argument" name="profile" />
            </scope>
            <scope name="onGetPersonalProfile" ilk="function" signature="onGetPersonalProfile(profile)" doc="">
              <variable ilk="argument" name="profile" />
            </scope>
            <scope name="onGetPersonalProfileFailure" ilk="function" signature="onGetPersonalProfileFailure(err)" doc="">
              <variable ilk="argument" name="err" />
            </scope>
            <variable name="session" doc="" />
          </scope>
          <variable name="sasl" citdl="Object" doc="">
            <scope name="SunWebClientAuth" ilk="function" signature="SunWebClientAuth(session)" doc="">
              <variable ilk="argument" name="session" />
            </scope>
            <scope name="SaslPlain" ilk="function" signature="SaslPlain(session)" doc="">
              <variable ilk="argument" name="session" />
            </scope>
            <scope name="saslNS" doc="" />
          </variable>
          <variable name="util" citdl="Object" doc="">
            <variable name="Base64" citdl="Object" doc="">
              <scope name="encode" ilk="function" signature="encode(input)" doc="">
                <variable ilk="argument" name="input" />
              </scope>
              <scope name="decode" ilk="function" signature="decode(input)" doc="">
                <variable ilk="argument" name="input" />
              </scope>
              <scope name="keylist" doc="" />
            </variable>
            <scope name="xmlEncode" ilk="function" signature="xmlEncode(str)" doc="">
              <variable ilk="argument" name="str" />
            </scope>
            <scope name="encodeJid" ilk="function" signature="encodeJid(jid)" doc="">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope name="decodeJid" ilk="function" signature="decodeJid(jid)" doc="">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope name="createElement" ilk="function" signature="createElement(tag,attributes,terminal)" doc="">
              <variable ilk="argument" name="tag" />
              <variable ilk="argument" name="attributes" />
              <variable ilk="argument" name="terminal" />
            </scope>
            <scope name="stripHtml" ilk="function" signature="stripHtml(str)" doc="">
              <variable ilk="argument" name="str" />
            </scope>
            <scope name="decodeHtmlEntities" ilk="function" signature="decodeHtmlEntities(str)" doc="">
              <variable ilk="argument" name="str" />
            </scope>
            <scope name="htmlToPlain" ilk="function" signature="htmlToPlain(str)" doc="">
              <variable ilk="argument" name="str" />
            </scope>
          </variable>
          <variable name="widget" citdl="Object" doc="">
            <variable name="ChatSession" ilk="function" doc="">
              <scope name="templatePath" doc="" />
              <scope name="enableSubWidgets" doc="" />
              <scope name="widgetsInTemplate" doc="" />
              <scope name="widgetType" doc="" />
              <scope name="chatWith" doc="" />
              <scope name="postCreate" ilk="function" doc="" />
              <scope name="displayMessage" ilk="function" signature="displayMessage(message,type)" doc="">
                <variable ilk="argument" name="message" />
                <variable ilk="argument" name="type" />
              </scope>
              <scope name="goToLastMessage" ilk="function" doc="" />
              <scope name="onKeyPress" ilk="function" signature="onKeyPress(e)" doc="">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="messages">
                <scope name="domNode">
                  <variable name="scrollTop" doc="" />
                </scope>
              </scope>
              <scope name="chatInput">
                <variable name="value" doc="" />
              </scope>
            </variable>
          </variable>
          <variable name="xmpp" citdl="Object" doc="">
            <scope name="STREAM_NS" doc="" />
            <scope name="CLIENT_NS" doc="" />
            <scope name="STANZA_NS" doc="" />
            <scope name="SASL_NS" doc="" />
            <scope name="BIND_NS" doc="" />
            <scope name="BODY_NS" doc="" />
            <scope name="XHTML_BODY_NS" doc="" />
            <scope name="XHTML_IM_NS" doc="" />
            <scope name="INACTIVE" doc="" />
            <scope name="CONNECTED" doc="" />
            <scope name="ACTIVE" doc="" />
            <scope name="TERMINATE" doc="" />
            <scope name="LOGIN_FAILURE" doc="" />
            <scope name="INVALID_ID" doc="" />
            <scope name="NO_ID" doc="" />
            <scope name="error" doc="" />
            <scope name="CONFLICT" doc="" />
            <scope name="FEATURE_NOT_IMPLEMENTED" doc="" />
            <scope name="FORBIDDEN" doc="" />
            <scope name="GONE" doc="" />
            <scope name="INTERNAL_SERVER_ERROR" doc="" />
            <scope name="ITEM_NOT_FOUND" doc="" />
            <scope name="ID_MALFORMED" doc="" />
            <scope name="NOT_ACCEPTABLE" doc="" />
            <scope name="NOT_ALLOWED" doc="" />
            <scope name="NOT_AUTHORIZED" doc="" />
            <scope name="SERVICE_UNAVAILABLE" doc="" />
            <scope name="SUBSCRIPTION_REQUIRED" doc="" />
            <scope name="UNEXPECTED_REQUEST" doc="" />
          </variable>
          <scope name="xmppSession" ilk="function" signature="xmppSession(props)" doc="">
            <variable ilk="argument" name="props" />
            <variable name="session" doc="" />
            <scope name="roster" doc="" />
            <scope name="chatRegister" doc="" />
            <scope name="_iqId" attributes="private" doc="" />
            <scope name="open" ilk="function" signature="open(user,password,resource)" doc="">
              <variable ilk="argument" name="user" />
              <variable ilk="argument" name="password" />
              <variable ilk="argument" name="resource" />
            </scope>
            <variable name="jid" doc="" />
            <variable name="password" doc="" />
            <variable name="resource" doc="" />
            <scope name="close" ilk="function" doc="" />
            <variable name="state" doc="" />
            <scope name="processProtocolResponse" ilk="function" signature="processProtocolResponse(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="messageHandler" ilk="function" signature="messageHandler(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="iqHandler" ilk="function" signature="iqHandler(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="presenceHandler" ilk="function" signature="presenceHandler(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="featuresHandler" ilk="function" signature="featuresHandler(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="saslHandler" ilk="function" signature="saslHandler(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="chatHandler" ilk="function" signature="chatHandler(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <variable name="useChatState" doc="" />
            <scope name="simpleMessageHandler" ilk="function" signature="simpleMessageHandler(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="registerChatInstance" ilk="function" signature="registerChatInstance(chatInstance,message)" doc="">
              <variable ilk="argument" name="chatInstance" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="iqSetHandler" ilk="function" signature="iqSetHandler(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="sendIqResult" ilk="function" signature="sendIqResult(iqId,to)" doc="">
              <variable ilk="argument" name="iqId" />
              <variable ilk="argument" name="to" />
            </scope>
            <scope name="rosterSetHandler" ilk="function" signature="rosterSetHandler(elem)" doc="">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope name="presenceUpdate" ilk="function" signature="presenceUpdate(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="retrieveRoster" ilk="function" doc="" />
            <scope name="getRosterIndex" ilk="function" signature="getRosterIndex(jid)" doc="">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope name="createRosterEntry" ilk="function" signature="createRosterEntry(elem)" doc="">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope name="bindResource" ilk="function" doc="" />
            <scope name="getNextIqId" ilk="function" doc="" />
            <scope name="presenceSubscriptionRequest" ilk="function" signature="presenceSubscriptionRequest(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="dispatchPacket" ilk="function" signature="dispatchPacket(msg,type,matchId)" doc="">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="matchId" />
            </scope>
            <scope name="setState" ilk="function" signature="setState(state,message)" doc="">
              <variable ilk="argument" name="state" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="search" ilk="function" signature="search(searchString,service,searchAttribute)" doc="">
              <variable ilk="argument" name="searchString" />
              <variable ilk="argument" name="service" />
              <variable ilk="argument" name="searchAttribute" />
            </scope>
            <scope name="_onSearchResults" ilk="function" signature="_onSearchResults(msg)" attributes="private" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="onLogin" ilk="function" doc="" />
            <scope name="onLoginFailure" ilk="function" signature="onLoginFailure(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="onBindResource" ilk="function" signature="onBindResource(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="onSearchResults" ilk="function" signature="onSearchResults(results)" doc="">
              <variable ilk="argument" name="results" />
            </scope>
            <scope name="onRetrieveRoster" ilk="function" signature="onRetrieveRoster(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="onRosterUpdated" ilk="function" doc="" />
            <scope name="onSubscriptionRequest" ilk="function" signature="onSubscriptionRequest(req)" doc="">
              <variable ilk="argument" name="req" />
            </scope>
            <scope name="onPresenceUpdate" ilk="function" signature="onPresenceUpdate(p)" doc="">
              <variable ilk="argument" name="p" />
            </scope>
            <scope name="onTransportReady" ilk="function" doc="" />
            <variable name="rosterService" doc="" />
            <variable name="presenceService" doc="" />
            <variable name="userService" doc="" />
            <scope name="onTransportTerminate" ilk="function" signature="onTransportTerminate(newState,oldState,message)" doc="">
              <variable ilk="argument" name="newState" />
              <variable ilk="argument" name="oldState" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="onConnected" ilk="function" doc="" />
            <scope name="onTerminate" ilk="function" signature="onTerminate(newState,oldState,message)" doc="">
              <variable ilk="argument" name="newState" />
              <variable ilk="argument" name="oldState" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="onActive" ilk="function" doc="" />
            <scope name="onRegisterChatInstance" ilk="function" signature="onRegisterChatInstance(chatInstance,message)" doc="">
              <variable ilk="argument" name="chatInstance" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope name="onRosterAdded" ilk="function" signature="onRosterAdded(ri)" doc="">
              <variable ilk="argument" name="ri" />
            </scope>
            <scope name="onRosterRemoved" ilk="function" signature="onRosterRemoved(ri)" doc="">
              <variable ilk="argument" name="ri" />
            </scope>
            <scope name="onRosterChanged" ilk="function" signature="onRosterChanged(ri,previousCopy)" doc="">
              <variable ilk="argument" name="ri" />
              <variable ilk="argument" name="previousCopy" />
            </scope>
            <scope name="processXmppError" ilk="function" signature="processXmppError(msg)" doc="">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope name="sendStanzaError" ilk="function" signature="sendStanzaError(stanzaType,to,id,errorType,condition,text)" doc="">
              <variable ilk="argument" name="stanzaType" />
              <variable ilk="argument" name="to" />
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="errorType" />
              <variable ilk="argument" name="condition" />
              <variable ilk="argument" name="text" />
            </scope>
            <scope name="getBareJid" ilk="function" signature="getBareJid(jid)" doc="">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope name="getResourceFromJid" ilk="function" signature="getResourceFromJid(jid)" doc="">
              <variable ilk="argument" name="jid" />
            </scope>
          </scope>
        </variable>
      </scope>
      <scope ilk="class" name="dojo">
        <scope name="AdapterRegistry" ilk="function" signature="AdapterRegistry(returnWrappers)" doc="A registry to make contextual calling/searching easier." returns="Boolean" attributes="private">
          <variable ilk="argument" name="returnWrappers" citdl="Boolean" />
          <variable name="pairs" doc="" />
          <variable name="returnWrappers" doc="" />
          <scope name="register" ilk="function" signature="register(name,check,wrap,directReturn,override)" doc="register a check function to determine if the wrap function or object gets selected">
            <variable ilk="argument" name="name" citdl="String" doc="a way to identify this matcher." />
            <variable ilk="function" name="check" doc="a function that arguments are passed to from the adapter's match() function. The check function should return true if the given arguments are appropriate for the wrap function." />
            <variable ilk="function" name="wrap" />
            <variable ilk="argument" name="directReturn" citdl="Boolean" doc="If directReturn is true, the value passed in for wrap will be returned instead of being called. Alternately, the AdapterRegistry can be set globally to &amp;amp;quot;return not call&amp;amp;quot; using the returnWrappers property. Either way, this behavior allows the registry to act as a &amp;amp;quot;search&amp;amp;quot; function instead of a function interception library." />
            <variable ilk="argument" name="override" citdl="Boolean" doc="If override is given and true, the check function will be given highest priority. Otherwise, it will be the lowest priority adapter." />
          </scope>
          <scope name="match" ilk="function" doc="Find an adapter for the given arguments. If no suitable adapter is found, throws an exception. match() accepts any number of arguments, all of which are passed to all matching functions from the registered pairs." />
          <scope name="unregister" ilk="function" signature="unregister(name)" doc="Remove a named adapter from the registry">
            <variable ilk="argument" name="name" />
          </scope>
        </scope>
        <scope name="DeferredList" ilk="function" signature="DeferredList(list,fireOnOneCallback,fireOnOneErrback,consumeErrors,canceller)" doc="Provides event handling for a group of Deferred objects.">
          <variable ilk="argument" name="list" citdl="Array" doc="The list of deferreds to be synchronizied with this DeferredList" />
          <variable ilk="argument" name="fireOnOneCallback" citdl="Boolean" doc="Will cause the DeferredLists callback to be fired as soon as any of the deferreds in its list have been fired instead of waiting until the entire list has finished fireonOneErrback: Will cause the errback to fire upon any of the deferreds errback" />
          <variable ilk="argument" name="fireOnOneErrback" citdl="Boolean" />
          <variable ilk="argument" name="consumeErrors" citdl="Boolean" />
          <variable ilk="function" name="canceller" doc="A deferred canceller function, see dojo.Deferred" />
          <scope name="_cbDeferred" ilk="function" signature="_cbDeferred(index,succeeded,result)" doc="The DeferredLists' callback handler" attributes="private">
            <variable ilk="argument" name="index" />
            <variable ilk="argument" name="succeeded" />
            <variable ilk="argument" name="result" />
          </scope>
          <scope name="gatherResults" ilk="function" signature="gatherResults(deferredList)" doc="Gathers the results of the deferreds for packaging as the parameters to the Deferred Lists' callback">
            <variable ilk="argument" name="deferredList" />
          </scope>
          <variable name="finishedCount" doc="" />
          <variable name="list" citdl="The" doc="list of deferreds to be synchronizied with this DeferredList">
            <variable name="length" doc="" />
          </variable>
          <variable name="resultList" doc="" />
          <variable name="chain" doc="" />
          <variable name="id" doc="" />
          <variable name="fired" doc="" />
          <variable name="paused" doc="" />
          <variable name="results" doc="" />
          <variable name="canceller" citdl="A" doc="deferred canceller function, see dojo.Deferred" />
          <variable name="silentlyCancelled" doc="" />
          <variable name="fireOnOneCallback" citdl="Will" doc="cause the DeferredLists callback to be fired as soon as any of the deferreds in its list have been fired instead of waiting until the entire list has finished fireonOneErrback: Will cause the errback to fire upon any of the deferreds errback" />
          <variable name="fireOnOneErrback" doc="" />
          <variable name="consumeErrors" doc="" />
        </scope>
        <scope name="NodeList" ilk="function" doc="dojo.NodeList is as subclass of Array which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of dojo.query() calls.">
          <scope name="slice" ilk="function" signature="slice(begin,end)" doc="Returns a new NodeList, maintaining this one in place">
            <variable ilk="argument" name="begin" citdl="Integer" doc="Can be a positive or negative integer, with positive integers noting the offset to begin at, and negative integers denoting an offset from the end (i.e., to the left of the end)" />
            <variable ilk="argument" name="end" citdl="Integer" doc="Optional parameter to describe what position relative to the NodeList's zero index to end the slice at. Like begin, can be positive or negative." />
          </scope>
          <scope name="splice" ilk="function" signature="splice(index,howmany,item)" doc="Returns a new NodeList, manipulating this NodeList based on the arguments passed, potentially splicing in new elements at an offset, optionally deleting elements">
            <variable ilk="argument" name="index" citdl="Integer" doc="begin can be a positive or negative integer, with positive integers noting the offset to begin at, and negative integers denoting an offset from the end (i.e., to the left of the end)" />
            <variable ilk="argument" name="howmany" citdl="Integer" doc="Optional parameter to describe what position relative to the NodeList's zero index to end the slice at. Like begin, can be positive or negative." />
            <variable ilk="argument" name="item" citdl="Object" doc="Any number of optional parameters may be passed in to be spliced into the NodeList">
              <scope name="repeating" />
            </variable>
            <variable name="return_summary" />
          </scope>
          <scope name="concat" ilk="function" signature="concat(item)" doc="Returns a new NodeList comprised of items in this NodeList as well as items passed in as parameters">
            <variable ilk="argument" name="item" citdl="Object" doc="Any number of optional parameters may be passed in to be spliced into the NodeList">
              <scope name="repeating" />
            </variable>
            <variable name="return_summary" />
          </scope>
          <scope name="indexOf" ilk="function" signature="indexOf(value,fromIndex)" doc="see dojo.indexOf(). The primary difference is that the acted-on array is implicitly this NodeList" returns="Integer" attributes="private">
            <variable ilk="argument" name="value" citdl="Object" doc="The value to search for." />
            <variable ilk="argument" name="fromIndex" citdl="Integer" doc="The loction to start searching from. Optional. Defaults to 0." />
            <variable name="return_summary" />
          </scope>
          <scope name="lastIndexOf" ilk="function" signature="lastIndexOf(value,fromIndex)" doc="see dojo.lastIndexOf(). The primary difference is that the acted-on array is implicitly this NodeList" returns="Integer" attributes="private">
            <variable ilk="argument" name="value" citdl="Object" doc="The value to search for." />
            <variable ilk="argument" name="fromIndex" citdl="Integer" doc="The loction to start searching from. Optional. Defaults to 0." />
            <variable name="return_summary" />
          </scope>
          <scope name="every" ilk="function" signature="every(callback,thisObject)" doc="see `dojo.every()` and: &amp;amp;lt;http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every&amp;amp;gt; Takes the same structure of arguments and returns as dojo.every() with the caveat that the passed array is implicitly this NodeList" returns="Boolean" attributes="private">
            <variable ilk="function" name="callback" />
            <variable ilk="argument" name="thisObject" citdl="Object" />
          </scope>
          <scope name="some" ilk="function" signature="some(callback,thisObject)" doc="see dojo.some() and: http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some Takes the same structure of arguments and returns as dojo.some() with the caveat that the passed array is implicitly this NodeList" returns="Boolean" attributes="private">
            <variable ilk="function" name="callback" />
            <variable ilk="argument" name="thisObject" citdl="Object" />
          </scope>
          <scope name="map" ilk="function" signature="map(func,obj)" doc="see dojo.map(). The primary difference is that the acted-on array is implicitly this NodeList and the return is a dojo.NodeList (a subclass of Array)" returns="dojo.NodeList" attributes="private">
            <variable ilk="function" name="func" />
            <variable ilk="function" name="obj" />
          </scope>
          <scope name="forEach" ilk="function" signature="forEach(callback,thisObj)" doc="see dojo.forEach(). The primary difference is that the acted-on array is implicitly this NodeList" returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="callback" />
            <variable ilk="argument" name="thisObj" />
          </scope>
          <scope name="coords" ilk="function" doc="Returns the box objects all elements in a node list as an Array (*not* a NodeList)" returns="Array" attributes="private" />
          <scope name="attr" ilk="function" signature="attr(property,value)" doc="gets or sets the DOM attribute for every element in the NodeList" returns="dojo.NodeList|Array" attributes="private">
            <variable ilk="argument" name="property" citdl="String" doc="the attribute to get/set" />
            <variable ilk="argument" name="value" citdl="String" doc="optional. The value to set the property to" />
            <variable name="return_summary" />
          </scope>
          <scope name="addClass" ilk="function" signature="addClass(className)" doc="adds the specified class to every node in the list" returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="className" citdl="String" doc="the CSS class to add" />
          </scope>
          <scope name="removeClass" ilk="function" signature="removeClass(className)" doc="removes the specified class from every node in the list" returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="className" citdl="String" doc="the CSS class to add" />
            <variable name="return_summary" />
          </scope>
          <scope name="toggleClass" ilk="function" signature="toggleClass(className,condition)" doc="Adds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove." returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="className" citdl="String" doc="the CSS class to add" />
            <variable ilk="argument" name="condition" citdl="Boolean" doc="If passed, true means to add the class, false means to remove." />
          </scope>
          <scope name="connect" ilk="function" signature="connect(methodName,objOrFunc,funcName)" doc="attach event handlers to every item of the NodeList. Uses dojo.connect() so event properties are normalized">
            <variable ilk="argument" name="methodName" citdl="String" doc="the name of the method to attach to. For DOM events, this should be the lower-case name of the event" />
            <variable ilk="argument" name="objOrFunc" citdl="Object|Function|String" doc="if 2 arguments are passed (methodName, objOrFunc), objOrFunc should reference a function or be the name of the function in the global namespace to attach. If 3 arguments are provided (methodName, objOrFunc, funcName), objOrFunc must be the scope to locate the bound function in" />
            <variable ilk="argument" name="funcName" citdl="String" doc="optional. A string naming the function in objOrFunc to bind to the event. May also be a function reference." />
          </scope>
          <scope name="place" ilk="function" signature="place(queryOrNode,position)" doc="places elements of this node list relative to the first element matched by queryOrNode. Returns the original NodeList." returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="queryOrNode" citdl="String||Node" doc="may be a string representing any valid CSS3 selector or a DOM node. In the selector case, only the first matching element will be used for relative positioning." />
            <variable ilk="argument" name="position" citdl="String" doc="can be one of: * &amp;amp;quot;last&amp;amp;quot;||&amp;amp;quot;end&amp;amp;quot; (default) * &amp;amp;quot;first||&amp;amp;quot;start&amp;amp;quot; * &amp;amp;quot;before&amp;amp;quot; * &amp;amp;quot;after&amp;amp;quot; or an offset in the childNodes property" />
          </scope>
          <scope name="orphan" ilk="function" signature="orphan(simpleFilter)" doc="removes elements in this list that match the simple filter from their parents and returns them as a new NodeList." returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="simpleFilter" citdl="String" doc="single-expression CSS filter" />
            <variable name="return_summary" />
          </scope>
          <scope name="adopt" ilk="function" signature="adopt(queryOrListOrNode,position)" doc="places any/all elements in queryOrListOrNode at a position relative to the first element in this list. Returns a dojo.NodeList of the adopted elements." returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="queryOrListOrNode" citdl="String||Array||DomNode" doc="a DOM node or a query string or a query result. Represents the nodes to be adopted relative to the first element of this NodeList." />
            <variable ilk="argument" name="position" citdl="String" doc="can be one of: * &amp;amp;quot;last&amp;amp;quot;||&amp;amp;quot;end&amp;amp;quot; (default) * &amp;amp;quot;first||&amp;amp;quot;start&amp;amp;quot; * &amp;amp;quot;before&amp;amp;quot; * &amp;amp;quot;after&amp;amp;quot; or an offset in the childNodes property" />
          </scope>
          <scope name="query" ilk="function" signature="query(queryStr)" doc="Returns a new, flattened NodeList. Elements of the new list satisfy the passed query but use elements of the current NodeList as query roots." returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="queryStr" citdl="String" />
          </scope>
          <scope name="filter" ilk="function" signature="filter(simpleQuery)" doc="&amp;amp;quot;masks&amp;amp;quot; the built-in javascript filter() method to support passing a simple string filter in addition to supporting filtering function objects." returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="simpleQuery" citdl="String" />
          </scope>
          <scope name="addContent" ilk="function" signature="addContent(content,position)" doc="add a node or some HTML as a string to every item in the list. Returns the original list." returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="content" citdl="String" doc="the HTML in string format to add at position to every item" />
            <variable ilk="argument" name="position" citdl="String||Integer" doc="can be one of: * &amp;amp;quot;last&amp;amp;quot;||&amp;amp;quot;end&amp;amp;quot; (default) * &amp;amp;quot;first||&amp;amp;quot;start&amp;amp;quot; * &amp;amp;quot;before&amp;amp;quot; * &amp;amp;quot;after&amp;amp;quot; or an offset in the childNodes property" />
          </scope>
          <scope name="empty" ilk="function" doc="clears all content from each node in the list" returns="dojo.NodeList" attributes="private" />
          <scope name="instantiate" ilk="function" signature="instantiate(declaredClass,properties)" doc="Create a new instance of a specified class, using the specified properties and each node in the nodeList as a srcNodeRef">
            <variable ilk="argument" name="declaredClass" citdl="String|Object" />
            <variable ilk="argument" name="properties" citdl="Object" />
          </scope>
          <scope name="at" ilk="function" signature="at(index)" doc="Returns a new NodeList comprised of items in this NodeList at the given index or indices." returns="dojo.NodeList" attributes="private">
            <variable ilk="argument" name="index" citdl="Integer" doc="One or more 0-based indices of items in the current NodeList.">
              <scope name="repeating" />
            </variable>
            <variable name="return_summary" />
          </scope>
        </scope>
        <variable name="NodeList-fx" citdl="Object" doc="" />
        <variable name="NodeList-html" citdl="Object" doc="" />
        <variable name="OpenAjax" citdl="Object" doc="" />
        <scope name="Color" ilk="function" signature="Color(color)" doc="takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another dojo.Color object">
          <variable ilk="argument" name="color" citdl="Array|String|Object" />
          <scope name="r" doc="" />
          <scope name="_set" ilk="function" signature="_set(r,g,b,a)" attributes="private" doc="">
            <variable ilk="argument" name="r" />
            <variable ilk="argument" name="g" />
            <variable ilk="argument" name="b" />
            <variable ilk="argument" name="a" />
          </scope>
          <scope name="setColor" ilk="function" signature="setColor(color)" doc="takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another dojo.Color object" returns="dojo.Color" attributes="private">
            <variable ilk="argument" name="color" citdl="Array|String|Object" />
          </scope>
          <scope name="sanitize" ilk="function" doc="makes sure that the object has correct attributes" returns="dojo.Color" attributes="private" />
          <scope name="toRgb" ilk="function" doc="returns 3 component array of rgb values" returns="Array" attributes="private" />
          <scope name="toRgba" ilk="function" doc="returns a 4 component array of rgba values" returns="Array" attributes="private" />
          <scope name="toHex" ilk="function" doc="returns a css color string in hexadecimal representation" returns="String" attributes="private" />
          <scope name="toCss" ilk="function" signature="toCss(includeAlpha)" doc="returns a css color string in rgb(a) representation" returns="String" attributes="private">
            <variable ilk="argument" name="includeAlpha" citdl="Boolean" />
          </scope>
          <scope name="toString" ilk="function" doc="returns a visual representation of the color" returns="String" attributes="private" />
        </scope>
        <scope ilk="function" name="blendColors" signature="blendColors(start,end,weight,obj)" returns="dojo.Color" doc="blend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend, can reuse a previously allocated dojo.Color object for the result">
          <variable citdl="dojo.Color" name="start" ilk="argument" />
          <variable citdl="dojo.Color" name="end" ilk="argument" />
          <variable citdl="Number" name="weight" ilk="argument" />
          <variable citdl="dojo.Color" name="obj" ilk="argument" />
        </scope>
        <scope ilk="function" name="colorFromRgb" signature="colorFromRgb(color,obj)" returns="dojo.Color" doc="get rgb(a) array from css-style color declarations">
          <variable citdl="String" name="color" ilk="argument" />
          <variable citdl="dojo.Color" name="obj" ilk="argument" />
        </scope>
        <scope ilk="function" name="colorFromHex" signature="colorFromHex(color,obj)" returns="dojo.Color" doc="converts a hex string with a '#' prefix to a color object. Supports 12-bit #rgb shorthand.">
          <variable citdl="String" name="color" ilk="argument" />
          <variable citdl="dojo.Color" name="obj" ilk="argument" />
        </scope>
        <scope ilk="function" name="colorFromArray" signature="colorFromArray(a,obj)" returns="dojo.Color" doc="builds a color from 1, 2, 3, or 4 element array">
          <variable citdl="Array" name="a" ilk="argument" />
          <variable citdl="dojo.Color" name="obj" ilk="argument" />
        </scope>
        <scope ilk="function" name="colorFromString" signature="colorFromString(str,obj)" doc="parses str for a color value.">
          <variable citdl="String" name="str" ilk="argument" />
          <variable citdl="dojo.Color" name="obj" ilk="argument" />
        </scope>
        <scope name="Deferred" ilk="function" signature="Deferred(canceller)" doc="Encapsulates a sequence of callbacks in response to a value that may not yet be available. This is modeled after the Deferred class from Twisted &amp;amp;lt;http://twistedmatrix.com&amp;amp;gt;.">
          <variable ilk="function" name="canceller" />
          <variable name="chain" doc="" />
          <variable name="id" doc="" />
          <variable name="fired" doc="" />
          <variable name="paused" doc="" />
          <variable name="results" doc="" />
          <variable name="canceller" doc="" />
          <variable name="silentlyCancelled" doc="" />
          <scope name="_nextId" attributes="private" doc="" />
          <scope name="cancel" ilk="function" doc="Cancels a Deferred that has not yet received a value, or is waiting on another Deferred as its value." />
          <scope name="_resback" ilk="function" signature="_resback(res)" doc="The private primitive that means either callback or errback" attributes="private">
            <variable ilk="argument" name="res" />
          </scope>
          <scope name="_check" ilk="function" attributes="private" doc="" />
          <scope name="callback" ilk="function" signature="callback(res)" doc="Begin the callback sequence with a non-error value.">
            <variable ilk="argument" name="res" />
          </scope>
          <scope name="errback" ilk="function" signature="errback(res)" doc="Begin the callback sequence with an error result.">
            <variable ilk="argument" name="res" citdl="Error" />
          </scope>
          <scope name="addBoth" ilk="function" signature="addBoth(cb,cbfn)" doc="Add the same function as both a callback and an errback as the next element on the callback sequence.This is useful for code that you want to guarantee to run, e.g. a finalizer." returns="dojo.Deferred" attributes="private">
            <variable ilk="argument" name="cb" citdl="Function|Object" />
            <variable ilk="argument" name="cbfn" citdl="String" />
          </scope>
          <scope name="addCallback" ilk="function" signature="addCallback(cb,cbfn)" doc="Add a single callback to the end of the callback sequence." returns="dojo.Deferred" attributes="private">
            <variable ilk="argument" name="cb" citdl="Function|Object" />
            <variable ilk="argument" name="cbfn" citdl="String? .." />
          </scope>
          <scope name="addErrback" ilk="function" signature="addErrback(cb,cbfn)" doc="Add a single callback to the end of the callback sequence." returns="dojo.Deferred" attributes="private">
            <variable ilk="argument" name="cb" />
            <variable ilk="argument" name="cbfn" />
          </scope>
          <scope name="addCallbacks" ilk="function" signature="addCallbacks(cb,eb)" doc="Add separate callback and errback to the end of the callback sequence." returns="dojo.Deferred" attributes="private">
            <variable ilk="argument" name="cb" />
            <variable ilk="argument" name="eb" />
          </scope>
          <scope name="_fire" ilk="function" doc="Used internally to exhaust the callback sequence when a result is available." attributes="private" />
        </scope>
        <variable name="global" citdl="Object" doc="Alias for the global scope (e.g. the window object in a browser)." />
        <variable name="version" citdl="Object" doc="version number of dojo">
          <scope name="major" citdl="Integer" doc="Major version. If total version is &amp;amp;quot;1.2.0beta1&amp;amp;quot;, will be 1 minor: Integer Minor version. If total version is &amp;amp;quot;1.2.0beta1&amp;amp;quot;, will be 2 patch: Integer Patch version. If total version is &amp;amp;quot;1.2.0beta1&amp;amp;quot;, will be 0 flag: String Descriptor flag. If total version is &amp;amp;quot;1.2.0beta1&amp;amp;quot;, will be &amp;amp;quot;beta1&amp;amp;quot;" />
          <scope name="revision" citdl="Number" doc="The SVN rev from which dojo was pulled" />
          <scope name="toString" ilk="function" returns="String" attributes="private" doc="" />
        </variable>
        <scope ilk="function" name="deprecated" signature="deprecated(behaviour,extra,removal)" doc="Log a debug message to indicate that a behavior has been deprecated.">
          <variable citdl="String" name="behaviour" ilk="argument" />
          <variable citdl="String" name="extra" ilk="argument" doc="Text to append to the message." />
          <variable citdl="String" name="removal" ilk="argument" doc="Text to indicate when in the future the behavior will be removed." />
        </scope>
        <scope ilk="function" name="_mixin" signature="_mixin(obj,props)" returns="Object" doc="Adds all properties and methods of props to obj. This addition is &amp;amp;quot;prototype extension safe&amp;amp;quot;, so that instances of objects will not pass along prototype defaults.">
          <variable citdl="Object" name="obj" ilk="argument" />
          <variable citdl="Object" name="props" ilk="argument" />
        </scope>
        <scope ilk="function" name="mixin" signature="mixin(obj,props)" returns="Object" doc="Adds all properties and methods of props to obj and returns the (now modified) obj.">
          <variable citdl="Object" name="obj" ilk="argument" doc="The object to mix properties into. Also the return value." />
          <variable citdl="Object" name="props" ilk="argument" doc="One or more objects whose values are successively copied into obj. If more than one of these objects contain the same value, the one specified last in the function call will &amp;amp;quot;win&amp;amp;quot;." />
        </scope>
        <scope ilk="function" name="_getProp" signature="_getProp(parts,create,context)" returns="mixed">
          <variable citdl="Array" name="parts" ilk="argument" />
          <variable citdl="Boolean" name="create" ilk="argument" />
          <variable citdl="Object" name="context" ilk="argument" />
        </scope>
        <scope ilk="function" name="setObject" signature="setObject(name,value,context)" returns="Object" doc="Set a property from a dot-separated string, such as &amp;amp;quot;A.B.C&amp;amp;quot;">
          <variable citdl="String" name="name" ilk="argument" doc="Path to a property, in the form &amp;amp;quot;A.B.C&amp;amp;quot;." />
          <variable citdl="Object" name="value" ilk="argument" />
          <variable citdl="Object" name="context" ilk="argument" doc="Optional. Object to use as root of path. Defaults to `dojo.global`." />
        </scope>
        <scope ilk="function" name="getObject" signature="getObject(name,create,context)" returns="Object" doc="Get a property from a dot-separated string, such as &amp;amp;quot;A.B.C&amp;amp;quot;">
          <variable citdl="String" name="name" ilk="argument" doc="Path to an property, in the form &amp;amp;quot;A.B.C&amp;amp;quot;." />
          <variable citdl="Boolean" name="create" ilk="argument" doc="Optional. Defaults to `false`. If `true`, Objects will be created at any point along the 'path' that is undefined." />
          <variable citdl="Object" name="context" ilk="argument" doc="Optional. Object to use as root of path. Defaults to 'dojo.global'. Null may be passed." />
        </scope>
        <scope ilk="function" name="exists" signature="exists(name,obj)" returns="Boolean" doc="determine if an object supports a given method">
          <variable citdl="String" name="name" ilk="argument" doc="Path to an object, in the form &amp;amp;quot;A.B.C&amp;amp;quot;." />
          <variable citdl="Object" name="obj" ilk="argument" doc="to use as root of path. Defaults to 'dojo.global'. Null may be passed." />
        </scope>
        <scope ilk="function" name="eval" signature="eval(scriptFragment)" returns="Object" doc="Perform an evaluation in the global scope. Use this rather than calling 'eval()' directly.">
          <variable citdl="String" name="scriptFragment" ilk="argument" />
        </scope>
        <scope ilk="function" name="experimental" signature="experimental(moduleName,extra)" doc="Marks code as experimental.">
          <variable citdl="String" name="moduleName" ilk="argument" doc="The name of a module, or the name of a module file or a specific function" />
          <variable citdl="String" name="extra" ilk="argument" doc="some additional message for the user" />
        </scope>
        <scope ilk="function" name="_loadInit" signature="_loadInit(e)">
          <variable name="e" ilk="argument" />
        </scope>
        <scope ilk="function" name="_fakeLoadInit" />
        <variable name="baseUrl" citdl="Object" doc="The root relative path to dojo.js (as a string)" />
        <scope ilk="function" name="_xhrObj" returns="XMLHTTPRequest instance" doc="does the work of portably generating a new XMLHTTPRequest object." />
        <scope ilk="function" name="_isDocumentOk" signature="_isDocumentOk(http)" returns="Boolean">
          <variable name="http" ilk="argument" />
        </scope>
        <scope ilk="function" name="_getText" signature="_getText(uri,fail_ok)" returns="null|String" doc="Read the contents of the specified uri and return those contents.">
          <variable citdl="URI" name="uri" ilk="argument" doc="A relative or absolute uri. If absolute, it still must be in the same &amp;amp;quot;domain&amp;amp;quot; as we are." />
          <variable citdl="Boolean" name="fail_ok" ilk="argument" doc="Default false. If fail_ok and loading fails, return null instead of throwing." />
        </scope>
        <scope ilk="function" name="windowUnloaded" doc="signal fired by impending window destruction. You may use dojo.addOnWIndowUnload() or dojo.connect() to this method to perform page/application cleanup methods. See dojo.addOnWindowUnload for more info." />
        <scope ilk="function" name="addOnWindowUnload" signature="addOnWindowUnload(obj)" doc="registers a function to be triggered when window.onunload fires. Be careful trying to modify the DOM or access JavaScript properties during this phase of page unloading: they may not always be available. Consider dojo.addOnUnload() if you need to modify the DOM or do heavy JavaScript work.">
          <variable citdl="Object" name="obj" ilk="argument" />
        </scope>
        <scope ilk="function" name="byId" signature="byId(id,doc)" returns="DomNode" doc="Returns DOM node with matching `id` attribute or `null` if not found, similar to &amp;amp;quot;$&amp;amp;quot; function in another library. If `id` is a DomNode, this function is a no-op.">
          <variable citdl="String|DOMNode" name="id" ilk="argument" doc="A string to match an HTML id attribute or a reference to a DOM Node" />
          <variable citdl="Document" name="doc" ilk="argument" doc="Document to work in. Defaults to the current value of dojo.doc. Can be used to retrieve node references from other documents." />
        </scope>
        <scope ilk="function" name="_loadUri" signature="_loadUri(uri,cb,currentIsXDomain,module)" returns="Boolean" doc="Internal xd loader function. Overrides loadUri() from loader.js. xd loading requires slightly different behavior from loadPath().">
          <variable citdl="String" name="uri" ilk="argument" />
          <variable citdl="Function" name="cb" ilk="argument" />
          <variable citdl="boolean" name="currentIsXDomain" ilk="argument" />
          <variable citdl="String" name="module" ilk="argument" />
        </scope>
        <scope ilk="function" name="exit" signature="exit(exitcode)">
          <variable name="exitcode" ilk="argument" />
        </scope>
        <scope ilk="function" name="_rhinoCurrentScriptViaJava" signature="_rhinoCurrentScriptViaJava(depth)">
          <variable name="depth" ilk="argument" />
        </scope>
        <scope ilk="function" name="body" returns="Node" doc="Return the body element of the document return the body object associated with dojo.doc" />
        <variable name="doc" citdl="Object" doc="Alias for the current document. 'dojo.doc' can be modified for temporary context shifting. Also see dojo.withDoc()." />
        <variable name="isSpidermonkey" citdl="Object" doc="Detect spidermonkey" />
        <scope ilk="function" name="_spidermonkeyCurrentFile" signature="_spidermonkeyCurrentFile(depth)">
          <variable name="depth" ilk="argument" />
        </scope>
        <scope ilk="function" name="_loadPath" signature="_loadPath(relpath,module,cb)" returns="Boolean" doc="Internal xd loader function. Overrides loadPath() from loader.js. xd loading requires slightly different behavior from loadPath().">
          <variable citdl="String" name="relpath" ilk="argument" />
          <variable citdl="String" name="module" ilk="argument" />
          <variable citdl="Function" name="cb" ilk="argument" />
        </scope>
        <scope ilk="function" name="_loadUriAndCheck" signature="_loadUriAndCheck(uri,moduleName,cb)" returns="Boolean" doc="calls loadUri then findModule and returns true if both succeed">
          <variable citdl="String" name="uri" ilk="argument" />
          <variable citdl="String" name="moduleName" ilk="argument" />
          <variable citdl="Function" name="cb" ilk="argument" />
        </scope>
        <scope ilk="function" name="loaded" doc="signal fired when initial environment and package loading is complete. You may use dojo.addOnLoad() or dojo.connect() to this method in order to handle initialization tasks that require the environment to be initialized. In a browser host, declarative widgets will be constructed when this function finishes runing." />
        <scope ilk="function" name="unloaded" doc="signal fired by impending environment destruction. You may use dojo.addOnUnload() or dojo.connect() to this method to perform page/application cleanup methods. See dojo.addOnUnload for more info." />
        <scope ilk="function" name="_onto" signature="_onto(arr,obj,fn)">
          <variable name="arr" ilk="argument" />
          <variable name="obj" ilk="argument" />
          <variable name="fn" ilk="argument" />
        </scope>
        <scope ilk="function" name="addOnLoad" signature="addOnLoad(obj)" doc="Registers a function to be triggered after the DOM has finished loading and widgets declared in markup have been instantiated. Images and CSS files may or may not have finished downloading when the specified function is called. (Note that widgets' CSS and HTML code is guaranteed to be downloaded before said widgets are instantiated.)">
          <variable citdl="Object" name="obj" ilk="argument" />
        </scope>
        <scope ilk="function" name="addOnUnload" signature="addOnUnload(obj)" doc="registers a function to be triggered when the page unloads. In a browser enviroment, the functions will be triggered during the window.onbeforeunload event. Be careful doing work during window.onbeforeunload. onbeforeunload can be triggered if a link to download a file is clicked, or if the link is a javascript: link. In these cases, the onbeforeunload event fires, but the document is not actually destroyed. So be careful about doing destructive operations in a dojo.addOnUnload callback.">
          <variable citdl="Object" name="obj" ilk="argument" />
        </scope>
        <scope ilk="function" name="_modulesLoaded" />
        <scope ilk="function" name="_callLoaded" />
        <scope ilk="function" name="_getModuleSymbols" signature="_getModuleSymbols(modulename)" returns="Array" doc="Converts a module name in dotted JS notation to an array representing the path in the source tree">
          <variable citdl="String" name="modulename" ilk="argument" />
        </scope>
        <scope ilk="function" name="loadInit" signature="loadInit(init)" doc="Executes a function that needs to be executed for the loader's dojo.requireIf resolutions to work. This is needed mostly for the xdomain loader case where a function needs to be executed to set up the possible values for a dojo.requireIf call.">
          <variable citdl="Function" name="init" ilk="argument" doc="a function reference. Executed immediately." />
        </scope>
        <scope ilk="function" name="require" signature="require(moduleName,omitModuleCheck)" doc="loads a Javascript module from the appropriate URI">
          <variable citdl="String" name="moduleName" ilk="argument" doc="module name to load, using periods for separators, e.g. &amp;amp;quot;dojo.date.locale&amp;amp;quot;. Module paths are de-referenced by dojo's internal mapping of locations to names and are disambiguated by longest prefix. See `dojo.registerModulePath()` for details on registering new modules." />
          <variable citdl="Boolean" name="omitModuleCheck" ilk="argument" doc="if `true`, omitModuleCheck skips the step of ensuring that the loaded file actually defines the symbol it is referenced by. For example if it called as `dojo.require(&amp;amp;quot;a.b.c&amp;amp;quot;)` and the file located at `a/b/c.js` does not define an object `a.b.c`, and exception will be throws whereas no exception is raised when called as `dojo.require(&amp;amp;quot;a.b.c&amp;amp;quot;, true)`" />
        </scope>
        <scope ilk="function" name="provide" signature="provide(resourceName)">
          <variable name="resourceName" ilk="argument" />
        </scope>
        <scope ilk="function" name="platformRequire" signature="platformRequire(modMap)" doc="require one or more modules based on which host environment Dojo is currently operating in">
          <variable citdl="Object" name="modMap" ilk="argument" />
        </scope>
        <scope ilk="function" name="requireIf" signature="requireIf(condition,resourceName)" doc="If the condition is true then call dojo.require() for the specified resource">
          <variable citdl="Boolean" name="condition" ilk="argument" />
          <variable citdl="String" name="resourceName" ilk="argument" />
        </scope>
        <scope ilk="function" name="registerModulePath" signature="registerModulePath(module,prefix)" doc="maps a module name to a path">
          <variable citdl="String" name="module" ilk="argument" />
          <variable citdl="String" name="prefix" ilk="argument" />
        </scope>
        <scope ilk="function" name="requireLocalization" signature="requireLocalization(moduleName,bundleName,locale,availableFlatLocales)" doc="loads a bundle intelligently based on whether the module is local or xd. Overrides the local-case implementation.">
          <variable citdl="String" name="moduleName" ilk="argument" />
          <variable citdl="String" name="bundleName" ilk="argument" />
          <variable citdl="String" name="locale" ilk="argument" />
          <variable citdl="String" name="availableFlatLocales" ilk="argument" />
        </scope>
        <scope name="_Url" ilk="function" doc="Constructor to create an object representing a URL. It is marked as private, since we might consider removing or simplifying it." attributes="private">
          <variable name="uri" doc="" />
          <variable name="scheme" doc="" />
          <variable name="authority" doc="" />
          <variable name="path" doc="" />
          <variable name="query" doc="" />
          <variable name="fragment" doc="" />
          <variable name="user" doc="" />
          <variable name="password" doc="" />
          <variable name="host" doc="" />
          <variable name="port" doc="" />
          <scope name="toString" ilk="function" doc="" />
        </scope>
        <scope ilk="function" name="moduleUrl" signature="moduleUrl(module,url)" returns="String" doc="Returns a `dojo._Url` object relative to a module.">
          <variable citdl="String" name="module" ilk="argument" />
          <variable citdl="dojo._Url||String" name="url" ilk="argument" />
        </scope>
        <scope ilk="function" name="_xdDebugFileLoaded" signature="_xdDebugFileLoaded(resourceName)">
          <variable name="resourceName" ilk="argument" />
        </scope>
        <variable name="_xdBundleMap" citdl="Object" attributes="private" doc="" />
        <scope ilk="function" name="_xdReset" doc="Internal xd loader function. Resets the xd state." />
        <scope ilk="function" name="_xdCreateResource" signature="_xdCreateResource(contents,resourceName,resourcePath)" returns="String" doc="Internal xd loader function. Creates an xd module source given an non-xd module contents.">
          <variable citdl="String" name="contents" ilk="argument" />
          <variable citdl="String" name="resourceName" ilk="argument" />
          <variable citdl="String" name="resourcePath" ilk="argument" />
        </scope>
        <scope ilk="function" name="_xdExtractLoadInits" signature="_xdExtractLoadInits(fileContents)">
          <variable citdl="String" name="fileContents" ilk="argument" />
        </scope>
        <scope ilk="function" name="_xdIsXDomainPath" signature="_xdIsXDomainPath(relpath)" doc="Figure out whether the path is local or x-domain If there is a colon before the first / then, we have a URL with a protocol.">
          <variable citdl="string" name="relpath" ilk="argument" />
        </scope>
        <scope ilk="function" name="_xdResourceLoaded" signature="_xdResourceLoaded(res)" doc="Internal xd loader function. Called by an xd module resource when it has been loaded via a script tag.  Evaluate the function with scopeArgs for multiversion support.">
          <variable citdl="Object" name="res" ilk="argument" />
        </scope>
        <scope ilk="function" name="_xdLoadFlattenedBundle" signature="_xdLoadFlattenedBundle(moduleName,bundleName,locale,bundleData)" doc="Internal xd loader function. Used when loading a flattened localized bundle via a script tag.">
          <variable citdl="String" name="moduleName" ilk="argument" />
          <variable citdl="String" name="bundleName" ilk="argument" />
          <variable citdl="String" name="locale" ilk="argument" />
          <variable citdl="Object" name="bundleData" ilk="argument" />
        </scope>
        <scope ilk="function" name="_xdInitExtraLocales" />
        <scope ilk="function" name="xdRequireLocalization" signature="xdRequireLocalization(moduleName,bundleName,locale,availableFlatLocales)" doc="Internal xd loader function. The xd version of dojo.requireLocalization.">
          <variable citdl="String" name="moduleName" ilk="argument" />
          <variable citdl="String" name="bundleName" ilk="argument" />
          <variable citdl="String" name="locale" ilk="argument" />
          <variable citdl="String" name="availableFlatLocales" ilk="argument" />
        </scope>
        <scope ilk="function" name="_xdUnpackDependency" signature="_xdUnpackDependency(dep)" returns="Object" doc="Internal xd loader function. Determines what to do with a dependency that was listed in an xd version of a module contents.">
          <variable citdl="Array" name="dep" ilk="argument" />
        </scope>
        <scope ilk="function" name="_xdWalkReqs" doc="Internal xd loader function. Walks the requires and evaluates module resource contents in the right order." />
        <scope ilk="function" name="_xdEvalReqs" signature="_xdEvalReqs(reqChain)" doc="Internal xd loader function. Does a depth first, breadth second search and eval of required modules.">
          <variable citdl="Array" name="reqChain" ilk="argument" />
        </scope>
        <scope ilk="function" name="_xdClearInterval" doc="Internal xd loader function. Clears the interval timer used to check on the status of in-flight xd module resource requests." />
        <scope ilk="function" name="_xdWatchInFlight" doc="Internal xd loader function. Monitors in-flight requests for xd module resources." />
        <scope ilk="function" name="_xdNotifyLoaded" />
        <scope ilk="function" name="indexOf" signature="indexOf(array,value,fromIndex,findLast)" returns="Number" doc="locates the first index of the provided value in the passed array. If the value is not found, -1 is returned.">
          <variable citdl="Array" name="array" ilk="argument" />
          <variable citdl="Object" name="value" ilk="argument" />
          <variable citdl="Integer" name="fromIndex" ilk="argument" />
          <variable citdl="Boolean" name="findLast" ilk="argument" />
        </scope>
        <scope ilk="function" name="lastIndexOf" signature="lastIndexOf(array,value,fromIndex)" returns="Number" doc="locates the last index of the provided value in the passed array. If the value is not found, -1 is returned.">
          <variable citdl="Array" name="array" ilk="argument" />
          <variable citdl="Object" name="value" ilk="argument" />
          <variable citdl="Integer" name="fromIndex" ilk="argument" />
        </scope>
        <scope ilk="function" name="forEach" signature="forEach(arr,callback,thisObject)" doc="for every item in arr, callback is invoked. Return values are ignored.">
          <variable citdl="Array|String" name="arr" ilk="argument" doc="the array to iterate over. If a string, operates on individual characters." />
          <variable citdl="Function|String" name="callback" ilk="argument" doc="a function is invoked with three arguments: item, index, and array" />
          <variable citdl="Object" name="thisObject" ilk="argument" doc="may be used to scope the call to callback" />
        </scope>
        <scope ilk="function" name="_everyOrSome" signature="_everyOrSome(every,arr,callback,thisObject)" returns="Boolean">
          <variable citdl="Boolean" name="every" ilk="argument" />
          <variable citdl="Array|String" name="arr" ilk="argument" />
          <variable citdl="Function|String" name="callback" ilk="argument" />
          <variable citdl="Object" name="thisObject" ilk="argument" />
        </scope>
        <scope ilk="function" name="every" signature="every(arr,callback,thisObject)" returns="Boolean" doc="Determines whether or not every item in arr satisfies the condition implemented by callback.">
          <variable citdl="Array|String" name="arr" ilk="argument" doc="the array to iterate on. If a string, operates on individual characters." />
          <variable citdl="Function|String" name="callback" ilk="argument" doc="a function is invoked with three arguments: item, index, and array and returns true if the condition is met." />
          <variable citdl="Object" name="thisObject" ilk="argument" doc="may be used to scope the call to callback" />
        </scope>
        <scope ilk="function" name="some" signature="some(arr,callback,thisObject)" returns="Boolean" doc="Determines whether or not any item in arr satisfies the condition implemented by callback.">
          <variable citdl="Array|String" name="arr" ilk="argument" doc="the array to iterate over. If a string, operates on individual characters." />
          <variable citdl="Function|String" name="callback" ilk="argument" doc="a function is invoked with three arguments: item, index, and array and returns true if the condition is met." />
          <variable citdl="Object" name="thisObject" ilk="argument" doc="may be used to scope the call to callback" />
        </scope>
        <scope ilk="function" name="map" signature="map(arr,callback,thisObject)" returns="Array" doc="applies callback to each element of arr and returns an Array with the results">
          <variable citdl="Array|String" name="arr" ilk="argument" doc="the array to iterate on. If a string, operates on individual characters." />
          <variable citdl="Function|String" name="callback" ilk="argument" doc="a function is invoked with three arguments, (item, index, array), and returns a value" />
          <variable citdl="Function" name="thisObject" ilk="argument" doc="may be used to scope the call to callback" />
        </scope>
        <scope ilk="function" name="filter" signature="filter(arr,callback,thisObject)" returns="Array" doc="Returns a new Array with those items from arr that match the condition implemented by callback.">
          <variable citdl="Array" name="arr" ilk="argument" doc="the array to iterate over." />
          <variable citdl="Function|String" name="callback" ilk="argument" doc="a function that is invoked with three arguments (item, index, array). The return of this function is expected to be a boolean which determines whether the passed-in item will be included in the returned array." />
          <variable citdl="Object" name="thisObject" ilk="argument" doc="may be used to scope the call to callback" />
        </scope>
        <variable name="_listener" citdl="Object" attributes="private" doc="">
          <scope name="getDispatcher" ilk="function" doc="" />
          <scope name="add" ilk="function" signature="add(source,method,listener)" returns="Handle" attributes="private" doc="">
            <variable ilk="argument" name="source" citdl="Object" />
            <variable ilk="argument" name="method" citdl="String" />
            <variable ilk="function" name="listener" />
          </scope>
          <scope name="remove" ilk="function" signature="remove(source,method,handle)" doc="">
            <variable ilk="argument" name="source" citdl="Object" />
            <variable ilk="argument" name="method" citdl="String" />
            <variable ilk="argument" name="handle" citdl="Handle" />
          </scope>
        </variable>
        <variable name="_topics" citdl="Object" attributes="private" doc="" />
        <scope ilk="function" name="connect" signature="connect(obj,event,context,method,dontFix)" returns="Handle" doc="Create a link that calls one function when another executes.">
          <variable citdl="Object|null" name="obj" ilk="argument" doc="The source object for the event function. Defaults to dojo.global if null. If obj is a DOM node, the connection is delegated to the DOM event manager (unless dontFix is true)." />
          <variable citdl="String" name="event" ilk="argument" doc="name of the event function in obj. I.e. identifies a property obj[event]." />
          <variable citdl="Object|null" name="context" ilk="argument" doc="The object that method will receive as &amp;amp;quot;this&amp;amp;quot;.  If context is null and method is a function, then method inherits the context of event.  If method is a string then context must be the source object object for method (context[method]). If context is null, dojo.global is used." />
          <variable citdl="String|Function" name="method" ilk="argument" doc="A function reference, or name of a function in context. The function identified by method fires after event does. method receives the same arguments as the event. See context argument comments for information on method's scope." />
          <variable citdl="Boolean" name="dontFix" ilk="argument" doc="If obj is a DOM node, set dontFix to true to prevent delegation of this connection to the DOM event manager." />
        </scope>
        <scope ilk="function" name="_connect" signature="_connect(obj,event,context,method,dontFix)">
          <variable name="obj" ilk="argument" />
          <variable name="event" ilk="argument" />
          <variable name="context" ilk="argument" />
          <variable name="method" ilk="argument" />
          <variable name="dontFix" ilk="argument" />
        </scope>
        <scope ilk="function" name="disconnect" signature="disconnect(handle)" doc="Remove a link created by dojo.connect.">
          <variable citdl="Handle" name="handle" ilk="argument" doc="the return value of the dojo.connect call that created the connection." />
        </scope>
        <scope ilk="function" name="_disconnect" signature="_disconnect(obj,event,handle,listener)">
          <variable name="obj" ilk="argument" />
          <variable name="event" ilk="argument" />
          <variable name="handle" ilk="argument" />
          <variable name="listener" ilk="argument" />
        </scope>
        <scope ilk="function" name="subscribe" signature="subscribe(topic,context,method)" returns="Handle" doc="Attach a listener to a named topic. The listener function is invoked whenever the named topic is published (see: dojo.publish). Returns a handle which is needed to unsubscribe this listener.">
          <variable citdl="String" name="topic" ilk="argument" />
          <variable citdl="Object|null" name="context" ilk="argument" doc="Scope in which method will be invoked, or null for default scope." />
          <variable citdl="String|Function" name="method" ilk="argument" doc="The name of a function in context, or a function reference. This is the function that is invoked when topic is published." />
        </scope>
        <scope ilk="function" name="unsubscribe" signature="unsubscribe(handle)" doc="Remove a topic listener.">
          <variable citdl="Handle" name="handle" ilk="argument" doc="The handle returned from a call to subscribe." />
        </scope>
        <scope ilk="function" name="publish" signature="publish(topic,args)" doc="Invoke all listener method subscribed to topic.">
          <variable citdl="String" name="topic" ilk="argument" doc="The name of the topic to publish." />
          <variable citdl="Array" name="args" ilk="argument" doc="An array of arguments. The arguments will be applied to each topic subscriber (as first class parameters, via apply)." />
        </scope>
        <scope ilk="function" name="connectPublisher" signature="connectPublisher(topic,obj,event)" returns="Handle" doc="Ensure that everytime obj.event() is called, a message is published on the topic. Returns a handle which can be passed to dojo.disconnect() to disable subsequent automatic publication on the topic.">
          <variable citdl="String" name="topic" ilk="argument" doc="The name of the topic to publish." />
          <variable citdl="Object|null" name="obj" ilk="argument" doc="The source object for the event function. Defaults to dojo.global if null." />
          <variable citdl="String" name="event" ilk="argument" doc="The name of the event function in obj. I.e. identifies a property obj[event]." />
        </scope>
        <scope ilk="function" name="declare" signature="declare(className,superclass,props)" returns="Function" doc="Create a feature-rich constructor from compact notation">
          <variable citdl="String" name="className" ilk="argument" doc="The name of the constructor (loosely, a &amp;amp;quot;class&amp;amp;quot;) stored in the &amp;amp;quot;declaredClass&amp;amp;quot; property in the created prototype" />
          <variable citdl="Function|Function[]" name="superclass" ilk="argument" doc="May be null, a Function, or an Array of Functions. If an array, the first element is used as the prototypical ancestor and any following Functions become mixin ancestors." />
          <variable citdl="Object" name="props" ilk="argument" doc="An object whose properties are copied to the created prototype. Add an instance-initialization function by making it a property named &amp;amp;quot;constructor&amp;amp;quot;." />
        </scope>
        <scope ilk="function" name="_ieDispatcher" signature="_ieDispatcher(args,sender)">
          <variable name="args" ilk="argument" />
          <variable name="sender" ilk="argument" />
        </scope>
        <scope ilk="function" name="_getIeDispatcher" returns="function" />
        <variable name="_event_listener" citdl="Object" attributes="private" doc="" />
        <variable name="keys" citdl="Object" doc="definitions for common key values">
          <scope name="BACKSPACE" doc="" />
          <scope name="TAB" doc="" />
          <scope name="CLEAR" doc="" />
          <scope name="ENTER" doc="" />
          <scope name="SHIFT" doc="" />
          <scope name="CTRL" doc="" />
          <scope name="ALT" doc="" />
          <scope name="PAUSE" doc="" />
          <scope name="CAPS_LOCK" doc="" />
          <scope name="ESCAPE" doc="" />
          <scope name="SPACE" doc="" />
          <scope name="PAGE_UP" doc="" />
          <scope name="PAGE_DOWN" doc="" />
          <scope name="END" doc="" />
          <scope name="HOME" doc="" />
          <scope name="LEFT_ARROW" doc="" />
          <scope name="UP_ARROW" doc="" />
          <scope name="RIGHT_ARROW" doc="" />
          <scope name="DOWN_ARROW" doc="" />
          <scope name="INSERT" doc="" />
          <scope name="DELETE" doc="" />
          <scope name="HELP" doc="" />
          <scope name="LEFT_WINDOW" doc="" />
          <scope name="RIGHT_WINDOW" doc="" />
          <scope name="SELECT" doc="" />
          <scope name="NUMPAD_0" doc="" />
          <scope name="NUMPAD_1" doc="" />
          <scope name="NUMPAD_2" doc="" />
          <scope name="NUMPAD_3" doc="" />
          <scope name="NUMPAD_4" doc="" />
          <scope name="NUMPAD_5" doc="" />
          <scope name="NUMPAD_6" doc="" />
          <scope name="NUMPAD_7" doc="" />
          <scope name="NUMPAD_8" doc="" />
          <scope name="NUMPAD_9" doc="" />
          <scope name="NUMPAD_MULTIPLY" doc="" />
          <scope name="NUMPAD_PLUS" doc="" />
          <scope name="NUMPAD_ENTER" doc="" />
          <scope name="NUMPAD_MINUS" doc="" />
          <scope name="NUMPAD_PERIOD" doc="" />
          <scope name="NUMPAD_DIVIDE" doc="" />
          <scope name="F1" doc="" />
          <scope name="F2" doc="" />
          <scope name="F3" doc="" />
          <scope name="F4" doc="" />
          <scope name="F5" doc="" />
          <scope name="F6" doc="" />
          <scope name="F7" doc="" />
          <scope name="F8" doc="" />
          <scope name="F9" doc="" />
          <scope name="F10" doc="" />
          <scope name="F11" doc="" />
          <scope name="F12" doc="" />
          <scope name="F13" doc="" />
          <scope name="F14" doc="" />
          <scope name="F15" doc="" />
          <scope name="NUM_LOCK" doc="" />
          <scope name="SCROLL_LOCK" doc="" />
        </variable>
        <scope ilk="function" name="fixEvent" signature="fixEvent(evt,sender)" doc="normalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions">
          <variable citdl="Event" name="evt" ilk="argument" doc="native event object" />
          <variable citdl="DOMNode" name="sender" ilk="argument" doc="node to treat as &amp;amp;quot;currentTarget&amp;amp;quot;" />
        </scope>
        <scope ilk="function" name="stopEvent" signature="stopEvent(evt)" doc="prevents propagation and clobbers the default action of the passed event">
          <variable citdl="Event" name="evt" ilk="argument" doc="The event object. If omitted, window.event is used on IE." />
        </scope>
        <variable name="_ie_listener" citdl="Object" attributes="private" doc="" />
        <scope name="__AnimArgs" ilk="function" attributes="private" doc="">
          <variable name="properties" citdl="Object" doc="" />
        </scope>
        <scope name="_Animation" ilk="function" signature="_Animation(args)" attributes="private" doc="">
          <variable ilk="argument" name="args" citdl="Object" />
          <scope name="duration" citdl="Integer" doc="The time in milliseonds the animation will take to run" />
          <variable name="curve" citdl="dojo._Line||Array" doc="A two element array of start and end values, or a dojo._Line instance to be used in the Animation." />
          <scope name="easing" ilk="function" doc="A Function to adjust the acceleration (or deceleration) of the progress across a dojo._Line" />
          <scope name="repeat" citdl="Integer" doc="The number of times to loop the animation" />
          <scope name="rate" citdl="Integer" doc="the time in milliseconds to wait before advancing to next frame (used as a fps timer: rate/1000 = fps)" />
          <scope name="delay" citdl="Integer" doc="The time in milliseconds to wait before starting animation after it has been .play()'ed" />
          <scope name="beforeBegin" citdl="events" doc="Event Synthetic event fired before a dojo._Animation begins playing (synchronous)" />
          <scope name="onBegin" citdl="Event" doc="Synthetic event fired as a dojo._Animation begins playing (useful?)" />
          <scope name="onAnimate" citdl="Event" doc="Synthetic event fired at each interval of a dojo._Animation" />
          <scope name="onEnd" citdl="Event" doc="Synthetic event fired after the final frame of a dojo._Animation" />
          <scope name="onPlay" citdl="Event" doc="Synthetic event fired any time a dojo._Animation is play()'ed" />
          <scope name="onPause" citdl="Event" doc="Synthetic event fired when a dojo._Animation is paused" />
          <scope name="onStop" citdl="Event" doc="Synthetic event fires when a dojo._Animation is stopped" />
          <variable name="_percent" attributes="private" doc="" />
          <scope name="_startRepeatCount" attributes="private" doc="" />
          <scope name="_fire" ilk="function" signature="_fire(evt,args)" doc="Convenience function. Fire event &amp;amp;quot;evt&amp;amp;quot; and pass it the arguments specified in &amp;amp;quot;args&amp;amp;quot;." returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="evt" citdl="Event" doc="The event to fire." />
            <variable ilk="argument" name="args" citdl="Array" doc="The arguments to pass to the event." />
          </scope>
          <scope name="play" ilk="function" signature="play(delay,gotoStart)" doc="Start the animation." returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="delay" citdl="int" doc="How many milliseconds to delay before starting." />
            <variable ilk="argument" name="gotoStart" citdl="Boolean" doc="If true, starts the animation from the beginning; otherwise, starts it from its current position." />
          </scope>
          <scope name="_play" ilk="function" signature="_play(gotoStart)" returns="dojo._Animation" attributes="private" doc="">
            <variable ilk="argument" name="gotoStart" />
          </scope>
          <scope name="pause" ilk="function" doc="Pauses a running animation." returns="dojo._Animation" attributes="private" />
          <scope name="gotoPercent" ilk="function" signature="gotoPercent(percent,andPlay)" doc="Sets the progress of the animation." returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="percent" citdl="Decimal" doc="A percentage in decimal notation (between and including 0.0 and 1.0)." />
            <variable ilk="argument" name="andPlay" citdl="Boolean" doc="If true, play the animation after setting the progress." />
          </scope>
          <scope name="stop" ilk="function" signature="stop(gotoEnd)" doc="Stops a running animation." returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="gotoEnd" citdl="boolean" doc="If true, the animation will end." />
          </scope>
          <scope name="status" ilk="function" doc="Returns a string token representation of the status of the animation, one of: &amp;amp;quot;paused&amp;amp;quot;, &amp;amp;quot;playing&amp;amp;quot;, &amp;amp;quot;stopped&amp;amp;quot;" returns="String" attributes="private" />
          <scope name="_cycle" ilk="function" returns="dojo._Animation" attributes="private" doc="" />
          <variable name="_paused" attributes="private" doc="" />
          <variable name="_active" attributes="private" doc="" />
          <scope name="_startTimer" ilk="function" attributes="private" doc="" />
          <variable name="_timer" attributes="private" doc="" />
          <scope name="_stopTimer" ilk="function" attributes="private" doc="" />
        </scope>
        <scope name="_Line" ilk="function" signature="_Line(start,end)" doc="dojo._Line is the object used to generate values from a start value to an end value" returns="Decimal" attributes="private">
          <variable ilk="argument" name="start" citdl="int" doc="Beginning value for range" />
          <variable ilk="argument" name="end" citdl="int" doc="Ending value for range" />
          <variable name="start" citdl="int" doc="Beginning value for range" />
          <variable name="end" citdl="int" doc="Ending value for range" />
          <variable name="getValue" ilk="function" signature="getValue(n)" doc="returns the point on the line" returns="Decimal" attributes="private">
            <variable ilk="argument" name="n" citdl="float" doc="a floating point number greater than 0 and less than 1" />
          </variable>
        </scope>
        <scope ilk="function" name="_fade" signature="_fade(args)" returns="dojo._Animation" doc="Returns an animation that will fade the node defined by args.node from the start to end values passed (args.start args.end) (end is mandatory, start is optional)">
          <variable citdl="Object" name="args" ilk="argument" />
        </scope>
        <scope name="__FadeArgs" ilk="function" signature="__FadeArgs(node,duration,easing)" attributes="private" doc="">
          <variable ilk="argument" name="node" citdl="DOMNode|String" doc="The node referenced in the animation" />
          <variable ilk="argument" name="duration" citdl="Integer" doc="Duration of the animation in milliseconds." />
          <variable ilk="function" name="easing" doc="An easing function." />
          <variable name="node" citdl="DOMNode|String" doc="The node referenced in the animation" />
          <variable name="duration" citdl="Integer?" doc="Duration of the animation in milliseconds." />
          <variable name="easing" citdl="Function?" doc="An easing function." />
        </scope>
        <scope ilk="function" name="fadeIn" signature="fadeIn(args)" returns="dojo._Animation" doc="Returns an animation that will fade node defined in 'args' from its current opacity to fully opaque.">
          <variable citdl="dojo.__FadeArgs" name="args" ilk="argument" />
        </scope>
        <scope ilk="function" name="fadeOut" signature="fadeOut(args)" returns="dojo._Animation" doc="Returns an animation that will fade node defined in 'args' from its current opacity to fully transparent.">
          <variable citdl="dojo.__FadeArgs" name="args" ilk="argument" />
        </scope>
        <scope ilk="function" name="_defaultEasing" signature="_defaultEasing(n)" doc="The default easing function for dojo._Animation(s)">
          <variable citdl="Decimal" name="n" ilk="argument" />
        </scope>
        <scope ilk="function" name="animateProperty" signature="animateProperty(args)" returns="dojo._Animation" doc="Returns an animation that will transition the properties of node defined in 'args' depending how they are defined in 'args.properties'">
          <variable citdl="dojo.__AnimArgs" name="args" ilk="argument" />
        </scope>
        <scope ilk="function" name="anim" signature="anim(node,properties,duration,easing,onEnd,delay)" doc="A simpler interface to `dojo.animateProperty()`, also returns an instance of `dojo._Animation` but begins the animation immediately, unlike nearly every other Dojo animation API.">
          <variable citdl="DOMNode|String" name="node" ilk="argument" doc="a DOM node or the id of a node to animate CSS properties on" />
          <variable citdl="Object" name="properties" ilk="argument" />
          <variable citdl="Integer" name="duration" ilk="argument" doc="The number of milliseconds over which the animation should run. Defaults to the global animation default duration (350ms)." />
          <variable citdl="Function" name="easing" ilk="argument" doc="An easing function over which to calculate acceleration and deceleration of the animation through its duration. A default easing algorithm is provided, but you may plug in any you wish. A large selection of easing algorithms are available in `dojo.fx.easing`." />
          <variable citdl="Function" name="onEnd" ilk="argument" doc="A function to be called when the animation finishes running." />
          <variable citdl="Integer" name="delay" ilk="argument" doc="The number of milliseconds to delay beginning the animation by. The default is 0." />
        </scope>
        <scope ilk="function" name="getComputedStyle" signature="getComputedStyle(node)" returns="CSS2Properties" doc="Returns a &amp;amp;quot;computed style&amp;amp;quot; object.">
          <variable citdl="DOMNode" name="node" ilk="argument" doc="A reference to a DOM node. Does NOT support taking an ID string for speed reasons." />
        </scope>
        <scope ilk="function" name="_getOpacity" signature="_getOpacity(node)" returns="Number" doc="Returns the current opacity of the passed node as a floating-point value between 0 and 1.">
          <variable citdl="DomNode" name="node" ilk="argument" doc="a reference to a DOM node. Does NOT support taking an ID string for speed reasons." />
        </scope>
        <scope ilk="function" name="_setOpacity" signature="_setOpacity(node,opacity)" returns="Number" doc="set the opacity of the passed node portably. Returns the new opacity of the node.">
          <variable citdl="DOMNode" name="node" ilk="argument" doc="a reference to a DOM node. Does NOT support taking an ID string for performance reasons." />
          <variable citdl="Number" name="opacity" ilk="argument" doc="A Number between 0 and 1. 0 specifies transparent." />
        </scope>
        <scope ilk="function" name="_destroyElement" signature="_destroyElement(node)" doc="removes node from its parent, clobbers it and all of its children.">
          <variable citdl="String||DomNode" name="node" ilk="argument" doc="the element to be destroyed, either as an ID or a reference" />
        </scope>
        <scope ilk="function" name="isDescendant" signature="isDescendant(node,ancestor)" returns="Boolean" doc="Returns true if node is a descendant of ancestor">
          <variable citdl="DomNode|String" name="node" ilk="argument" doc="id or node reference to test" />
          <variable citdl="DomNode|String" name="ancestor" ilk="argument" doc="id or node reference of potential parent to test against" />
        </scope>
        <scope ilk="function" name="setSelectable" signature="setSelectable(node,selectable)" doc="enable or disable selection on a node">
          <variable citdl="DomNode|String" name="node" ilk="argument" doc="id or reference to node" />
          <variable citdl="Boolean" name="selectable" ilk="argument" />
        </scope>
        <scope ilk="function" name="place" signature="place(node,refNode,position)" returns="boolean" doc="Attempt to insert node into the DOM, choosing from various positioning options. Returns true if successful, false otherwise.">
          <variable citdl="String|DomNode" name="node" ilk="argument" doc="id or node reference to place relative to refNode" />
          <variable citdl="String|DomNode" name="refNode" ilk="argument" doc="id or node reference to use as basis for placement" />
          <variable citdl="String?|Number" name="position" ilk="argument" doc="string noting the position of node relative to refNode or a number indicating the location in the childNodes collection of refNode. Accepted string values are: * before * after * first * last  &amp;amp;quot;first&amp;amp;quot; and &amp;amp;quot;last&amp;amp;quot; indicate positions as children of refNode. position defaults to &amp;amp;quot;last&amp;amp;quot; if not specified" />
        </scope>
        <scope ilk="function" name="_toPixelValue" signature="_toPixelValue(element,value,avalue)">
          <variable name="element" ilk="argument" />
          <variable name="value" ilk="argument" />
          <variable name="avalue" ilk="argument" />
        </scope>
        <scope ilk="function" name="style" signature="style(node,style,value)" returns="Number|CSS2Properties||String||Number" doc="Accesses styles on a node. If 2 arguments are passed, acts as a getter. If 3 arguments are passed, acts as a setter.">
          <variable citdl="DomNode|String" name="node" ilk="argument" doc="id or reference to node to get/set style for" />
          <variable citdl="String?|Object" name="style" ilk="argument" doc="the style property to set in DOM-accessor format (&amp;amp;quot;borderWidth&amp;amp;quot;, not &amp;amp;quot;border-width&amp;amp;quot;) or an object with key/value pairs suitable for setting each property." />
          <variable citdl="String" name="value" ilk="argument" doc="If passed, sets value on the node for style, handling cross-browser concerns." />
        </scope>
        <scope ilk="function" name="_getPadExtents" signature="_getPadExtents(n,computedStyle)" doc="Returns object with special values specifically useful for node fitting.  * l/t = left/top padding (respectively) * w = the total of the left and right padding * h = the total of the top and bottom padding  If 'node' has position, l/t forms the origin for child nodes. The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.">
          <variable citdl="DomNode" name="n" ilk="argument" />
          <variable citdl="Object" name="computedStyle" ilk="argument" />
        </scope>
        <scope ilk="function" name="_getBorderExtents" signature="_getBorderExtents(n,computedStyle)" doc="returns an object with properties useful for noting the border dimensions.  * l/t = the sum of left/top border (respectively) * w = the sum of the left and right border * h = the sum of the top and bottom border  The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.">
          <variable citdl="DomNode" name="n" ilk="argument" />
          <variable citdl="Object" name="computedStyle" ilk="argument" />
        </scope>
        <scope ilk="function" name="_getPadBorderExtents" signature="_getPadBorderExtents(n,computedStyle)" doc="returns object with properties useful for box fitting with regards to padding.  * l/t = the sum of left/top padding and left/top border (respectively) * w = the sum of the left and right padding and border * h = the sum of the top and bottom padding and border  The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.">
          <variable citdl="DomNode" name="n" ilk="argument" />
          <variable citdl="Object" name="computedStyle" ilk="argument" />
        </scope>
        <scope ilk="function" name="_getMarginExtents" signature="_getMarginExtents(n,computedStyle)" doc="returns object with properties useful for box fitting with regards to box margins (i.e., the outer-box).  * l/t = marginLeft, marginTop, respectively * w = total width, margin inclusive * h = total height, margin inclusive  The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.">
          <variable name="n" ilk="argument" />
          <variable name="computedStyle" ilk="argument" />
        </scope>
        <scope ilk="function" name="_getMarginBox" signature="_getMarginBox(node,computedStyle)" doc="returns an object that encodes the width, height, left and top positions of the node's margin box.">
          <variable citdl="DomNode" name="node" ilk="argument" />
          <variable citdl="Object" name="computedStyle" ilk="argument" />
        </scope>
        <scope ilk="function" name="_getContentBox" signature="_getContentBox(node,computedStyle)" doc="Returns an object that encodes the width, height, left and top positions of the node's content box, irrespective of the current box model.">
          <variable name="node" ilk="argument" />
          <variable name="computedStyle" ilk="argument" />
        </scope>
        <scope ilk="function" name="_getBorderBox" signature="_getBorderBox(node,computedStyle)">
          <variable name="node" ilk="argument" />
          <variable name="computedStyle" ilk="argument" />
        </scope>
        <scope ilk="function" name="_setBox" signature="_setBox(node,l,t,w,h,u)" doc="sets width/height/left/top in the current (native) box-model dimentions. Uses the unit passed in u.">
          <variable citdl="DomNode" name="node" ilk="argument" doc="DOM Node reference. Id string not supported for performance reasons." />
          <variable citdl="Number" name="l" ilk="argument" doc="optional. left offset from parent." />
          <variable citdl="Number" name="t" ilk="argument" doc="optional. top offset from parent." />
          <variable citdl="Number" name="w" ilk="argument" doc="optional. width in current box model." />
          <variable citdl="Number" name="h" ilk="argument" doc="optional. width in current box model." />
          <variable citdl="String" name="u" ilk="argument" doc="optional. unit measure to use for other measures. Defaults to &amp;amp;quot;px&amp;amp;quot;." />
        </scope>
        <scope ilk="function" name="_isButtonTag" signature="_isButtonTag(node)" doc="True if the node is BUTTON or INPUT.type=&amp;amp;quot;button&amp;amp;quot;.">
          <variable citdl="DomNode" name="node" ilk="argument" />
        </scope>
        <scope ilk="function" name="_usesBorderBox" signature="_usesBorderBox(node)" returns="boolean" doc="True if the node uses border-box layout.">
          <variable citdl="DomNode" name="node" ilk="argument" />
        </scope>
        <scope ilk="function" name="_setContentSize" signature="_setContentSize(node,widthPx,heightPx,computedStyle)" doc="Sets the size of the node's contents, irrespective of margins, padding, or borders.">
          <variable citdl="DomNode" name="node" ilk="argument" />
          <variable citdl="Number" name="widthPx" ilk="argument" />
          <variable citdl="Number" name="heightPx" ilk="argument" />
          <variable citdl="Object" name="computedStyle" ilk="argument" />
        </scope>
        <scope ilk="function" name="_setMarginBox" signature="_setMarginBox(node,leftPx,topPx,widthPx,heightPx,computedStyle)" doc="sets the size of the node's margin box and placement (left/top), irrespective of box model. Think of it as a passthrough to dojo._setBox that handles box-model vagaries for you.">
          <variable citdl="DomNode" name="node" ilk="argument" />
          <variable citdl="Number" name="leftPx" ilk="argument" />
          <variable citdl="Number" name="topPx" ilk="argument" />
          <variable citdl="Number" name="widthPx" ilk="argument" />
          <variable citdl="Number" name="heightPx" ilk="argument" />
          <variable citdl="Object" name="computedStyle" ilk="argument" />
        </scope>
        <scope ilk="function" name="marginBox" signature="marginBox(node,box)" returns="Object" doc="Getter/setter for the margin-box of node.">
          <variable citdl="DomNode|String" name="node" ilk="argument" doc="id or reference to DOM Node to get/set box for" />
          <variable citdl="Object" name="box" ilk="argument" doc="If passed, denotes that dojo.marginBox() should update/set the margin box for node. Box is an object in the above format. All properties are optional if passed." />
        </scope>
        <scope ilk="function" name="contentBox" signature="contentBox(node,box)" returns="Object" doc="Getter/setter for the content-box of node.">
          <variable citdl="DomNode|String" name="node" ilk="argument" doc="id or reference to DOM Node to get/set box for" />
          <variable citdl="Object" name="box" ilk="argument" doc="If passed, denotes that dojo.contentBox() should update/set the content box for node. Box is an object in the above format. All properties are optional if passed." />
        </scope>
        <scope ilk="function" name="_docScroll" />
        <scope ilk="function" name="_isBodyLtr" />
        <scope ilk="function" name="_getIeDocumentElementOffset" />
        <scope ilk="function" name="_fixIeBiDiScrollLeft" signature="_fixIeBiDiScrollLeft(scrollLeft)" returns="Integer">
          <variable citdl="Integer" name="scrollLeft" ilk="argument" />
        </scope>
        <scope ilk="function" name="_abs" signature="_abs(node,includeScroll)" returns="object" doc="Gets the position of the passed element relative to the viewport (if includeScroll==false), or relative to the document root (if includeScroll==true).  Returns an object of the form: { x: 100, y: 300 } if includeScroll is passed, the x and y values will include any document offsets that may affect the position relative to the viewport.">
          <variable citdl="DomNode" name="node" ilk="argument" />
          <variable citdl="Boolean" name="includeScroll" ilk="argument" />
        </scope>
        <scope ilk="function" name="coords" signature="coords(node,includeScroll)" doc="Returns an object that measures margin box width/height and absolute positioning data from dojo._abs().">
          <variable citdl="DomNode|String" name="node" ilk="argument" />
          <variable citdl="Boolean" name="includeScroll" ilk="argument" />
        </scope>
        <scope ilk="function" name="hasAttr" signature="hasAttr(node,name)" returns="Boolean" doc="Returns true if the requested attribute is specified on the given element, and false otherwise.">
          <variable citdl="DomNode|String" name="node" ilk="argument" doc="id or reference to the element to check" />
          <variable citdl="String" name="name" ilk="argument" doc="the name of the attribute" />
        </scope>
        <scope ilk="function" name="attr" signature="attr(node,name,value)" doc="Gets or sets an attribute on an HTML element.">
          <variable citdl="DomNode|String" name="node" ilk="argument" doc="id or reference to the element to get or set the attribute on" />
          <variable citdl="String|Object" name="name" ilk="argument" doc="the name of the attribute to get or set." />
          <variable citdl="String" name="value" ilk="argument" doc="The value to set for the attribute" />
        </scope>
        <scope ilk="function" name="removeAttr" signature="removeAttr(node,name)" doc="Removes an attribute from an HTML element.">
          <variable citdl="DomNode|String" name="node" ilk="argument" doc="id or reference to the element to remove the attribute from" />
          <variable citdl="String" name="name" ilk="argument" doc="the name of the attribute to remove" />
        </scope>
        <scope ilk="function" name="hasClass" signature="hasClass(node,classStr)" returns="Boolean" doc="Returns whether or not the specified classes are a portion of the class list currently applied to the node.">
          <variable citdl="DomNode|String" name="node" ilk="argument" />
          <variable citdl="String" name="classStr" ilk="argument" />
        </scope>
        <scope ilk="function" name="addClass" signature="addClass(node,classStr)" doc="Adds the specified classes to the end of the class list on the passed node.">
          <variable citdl="DomNode|String" name="node" ilk="argument" />
          <variable citdl="String" name="classStr" ilk="argument" />
        </scope>
        <scope ilk="function" name="removeClass" signature="removeClass(node,classStr)" doc="Removes the specified classes from node.">
          <variable citdl="DomNode|String" name="node" ilk="argument" />
          <variable citdl="String" name="classStr" ilk="argument" />
        </scope>
        <scope ilk="function" name="toggleClass" signature="toggleClass(node,classStr,condition)" doc="Adds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove.">
          <variable citdl="DomNode|String" name="node" ilk="argument" />
          <variable citdl="String" name="classStr" ilk="argument" />
          <variable citdl="Boolean" name="condition" ilk="argument" doc="If passed, true means to add the class, false means to remove." />
        </scope>
        <scope ilk="function" name="fromJson" signature="fromJson(json)" returns="Object" doc="Parses a [JSON](http://json.org) string to return a JavaScript object. Throws for invalid JSON strings.">
          <variable citdl="String" name="json" ilk="argument" doc="a string literal of a JSON item, for instance: `'{ &amp;amp;quot;foo&amp;amp;quot;: [ &amp;amp;quot;bar&amp;amp;quot;, 1, { &amp;amp;quot;baz&amp;amp;quot;: &amp;amp;quot;thud&amp;amp;quot; } ] }'`" />
        </scope>
        <scope ilk="function" name="_escapeString" signature="_escapeString(str)" doc="Adds escape sequences for non-visual characters, double quote and backslash and surrounds with double quotes to form a valid string literal.">
          <variable citdl="String" name="str" ilk="argument" />
        </scope>
        <scope ilk="function" name="toJson" signature="toJson(it,prettyPrint,_indentStr)" returns="null|String" doc="Returns a [JSON](http://json.org) serialization of an object.">
          <variable citdl="Object" name="it" ilk="argument" doc="an object to be serialized. Objects may define their own serialization via a special &amp;amp;quot;__json__&amp;amp;quot; or &amp;amp;quot;json&amp;amp;quot; function property. If a specialized serializer has been defined, it will be used as a fallback." />
          <variable citdl="Boolean" name="prettyPrint" ilk="argument" doc="if true, we indent objects and arrays to make the output prettier. The variable dojo.toJsonIndentStr is used as the indent string -- to use something other than the default (tab), change that variable before calling dojo.toJson()." />
          <variable citdl="String" name="_indentStr" ilk="argument" doc="private variable for recursive calls when pretty printing, do not use." />
        </scope>
        <scope ilk="function" name="isString" signature="isString(it)" returns="Boolean" doc="Return true if it is a String">
          <variable citdl="anything" name="it" ilk="argument" />
        </scope>
        <scope ilk="function" name="isArray" signature="isArray(it)" returns="Boolean" doc="Return true if it is an Array">
          <variable citdl="anything" name="it" ilk="argument" />
        </scope>
        <scope ilk="function" name="isFunction" signature="isFunction(it)" returns="Boolean" doc="Return true if it is a Function">
          <variable citdl="anything" name="it" ilk="argument" />
        </scope>
        <scope ilk="function" name="isObject" signature="isObject(it)" doc="Returns true if it is a JavaScript object (or an Array, a Function or null)">
          <variable citdl="anything" name="it" ilk="argument" />
        </scope>
        <scope ilk="function" name="isArrayLike" signature="isArrayLike(it)" returns="Boolean" doc="similar to dojo.isArray() but more permissive">
          <variable citdl="anything" name="it" ilk="argument" />
        </scope>
        <scope ilk="function" name="isAlien" signature="isAlien(it)" returns="Boolean" doc="Returns true if it is a built-in function or some other kind of oddball that *should* report as a function but doesn't">
          <variable citdl="anything" name="it" ilk="argument" />
        </scope>
        <scope ilk="function" name="extend" signature="extend(constructor,props)" returns="Object" doc="Adds all properties and methods of props to constructor's prototype, making them available to all instances created with constructor.">
          <variable citdl="Object" name="constructor" ilk="argument" />
          <variable citdl="Object" name="props" ilk="argument" />
        </scope>
        <scope ilk="function" name="_hitchArgs" signature="_hitchArgs(scope,method)" returns="mixed">
          <variable name="scope" ilk="argument" />
          <variable citdl="," name="method" ilk="argument" />
        </scope>
        <scope ilk="function" name="hitch" signature="hitch(scope,method)" returns="Function" doc="Returns a function that will only ever execute in the a given scope. This allows for easy use of object member functions in callbacks and other places in which the &amp;amp;quot;this&amp;amp;quot; keyword may otherwise not reference the expected scope. Any number of default positional arguments may be passed as parameters beyond &amp;amp;quot;method&amp;amp;quot;. Each of these values will be used to &amp;amp;quot;placehold&amp;amp;quot; (similar to curry) for the hitched function.">
          <variable citdl="Object" name="scope" ilk="argument" doc="The scope to use when method executes. If method is a string, scope is also the object containing method." />
          <variable citdl="Function|String ," name="method" ilk="argument" doc="A function to be hitched to scope, or the name of the method in scope to be hitched." />
        </scope>
        <scope ilk="function" name="delegate" signature="delegate(obj,props)" doc="returns a new object which &amp;amp;quot;looks&amp;amp;quot; to obj for properties which it does not have a value for. Optionally takes a bag of properties to seed the returned object with initially.">
          <variable citdl="The" name="obj" ilk="argument" doc="object to delegate to for properties not found directly on the return object or in props." />
          <variable citdl="an" name="props" ilk="argument" doc="object containing properties to assign to the returned object" />
        </scope>
        <scope ilk="function" name="_toArray" signature="_toArray(obj,offset,startWith)" doc="Converts an array-like object (i.e. arguments, DOMCollection) to an array. Returns a new Array with the elements of obj.">
          <variable citdl="Object" name="obj" ilk="argument" doc="the object to &amp;amp;quot;arrayify&amp;amp;quot;. We expect the object to have, at a minimum, a length property which corresponds to integer-indexed properties." />
          <variable citdl="Number" name="offset" ilk="argument" doc="the location in obj to start iterating from. Defaults to 0. Optional." />
          <variable citdl="Array" name="startWith" ilk="argument" doc="An array to pack with the properties of obj. If provided, properties in obj are appended at the end of startWith and startWith is the returned array." />
        </scope>
        <scope ilk="function" name="partial" signature="partial(method)" returns="Function" doc="similar to hitch() except that the scope object is left to be whatever the execution context eventually becomes.">
          <variable citdl="Function|String ," name="method" ilk="argument" />
        </scope>
        <scope ilk="function" name="clone" signature="clone(o)" returns="Array|anything|Node|Date|Object" doc="Clones objects (including DOM nodes) and all children. Warning: do not clone cyclic structures.">
          <variable citdl="anything" name="o" ilk="argument" />
        </scope>
        <scope ilk="function" name="trim" signature="trim(str)" returns="String" doc="trims whitespaces from both sides of the string">
          <variable citdl="String" name="str" ilk="argument" />
        </scope>
        <scope ilk="function" name="_delegate" returns="Object" />
        <scope ilk="function" name="query" signature="query(query,root)" returns="dojo.NodeList" doc="Returns nodes which match the given CSS3 selector, searching the entire document by default but optionally taking a node to scope the search by. Returns an instance of dojo.NodeList.">
          <variable citdl="String" name="query" ilk="argument" doc="The CSS3 expression to match against. For details on the syntax of CSS3 selectors, see &amp;amp;lt;http://www.w3.org/TR/css3-selectors/#selectors&amp;amp;gt;" />
          <variable citdl="String|DOMNode" name="root" ilk="argument" doc="A DOMNode (or node id) to scope the search from. Optional." />
        </scope>
        <scope ilk="function" name="_filterQueryResult" signature="_filterQueryResult(nodeList,simpleFilter)">
          <variable name="nodeList" ilk="argument" />
          <variable name="simpleFilter" ilk="argument" />
        </scope>
        <scope ilk="function" name="setContext" signature="setContext(globalObject,globalDocument)" doc="changes the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe). The varibles dojo.global and dojo.doc are modified as a result of calling this function and the result of `dojo.body()` likewise differs.">
          <variable citdl="Object" name="globalObject" ilk="argument" />
          <variable citdl="DocumentElement" name="globalDocument" ilk="argument" />
        </scope>
        <scope ilk="function" name="_fireCallback" signature="_fireCallback(callback,context,cbArguments)">
          <variable name="callback" ilk="argument" />
          <variable name="context" ilk="argument" />
          <variable name="cbArguments" ilk="argument" />
        </scope>
        <scope ilk="function" name="withGlobal" signature="withGlobal(globalObject,callback,thisObject,cbArguments)" doc="Call callback with globalObject as dojo.global and globalObject.document as dojo.doc. If provided, globalObject will be executed in the context of object thisObject">
          <variable citdl="Object" name="globalObject" ilk="argument" />
          <variable citdl="Function" name="callback" ilk="argument" />
          <variable citdl="Object" name="thisObject" ilk="argument" />
          <variable citdl="Array" name="cbArguments" ilk="argument" />
        </scope>
        <scope ilk="function" name="withDoc" signature="withDoc(documentObject,callback,thisObject,cbArguments)" doc="Call callback with documentObject as dojo.doc. If provided, callback will be executed in the context of object thisObject">
          <variable citdl="Object" name="documentObject" ilk="argument" />
          <variable citdl="Function" name="callback" ilk="argument" />
          <variable citdl="Object" name="thisObject" ilk="argument" />
          <variable citdl="Array" name="cbArguments" ilk="argument" />
        </scope>
        <scope name="__XhrArgs" ilk="function" doc="In addition to the properties listed for the dojo._IoArgs type, the following properties are allowed for dojo.xhr* methods." attributes="private">
          <variable name="handleAs" citdl="String?" doc="Acceptable values are: text (default), json, json-comment-optional, json-comment-filtered, javascript, xml" />
          <variable name="sync" citdl="Boolean?" doc="false is default. Indicates whether the request should be a synchronous (blocking) request." />
          <variable name="headers" citdl="Object?" doc="Additional HTTP headers to send in the request." />
        </scope>
        <variable name="_contentHandlers" citdl="Object" attributes="private" doc="">
          <scope name="json-comment-optional" ilk="function" signature="json-comment-optional(xhr)" doc="">
            <variable ilk="argument" name="xhr" />
          </scope>
          <scope name="text" ilk="function" signature="text(xhr)" doc="">
            <variable ilk="argument" name="xhr" />
          </scope>
          <scope name="json" ilk="function" signature="json(xhr)" doc="">
            <variable ilk="argument" name="xhr" />
          </scope>
          <scope name="json-comment-filtered" ilk="function" signature="json-comment-filtered(xhr)" doc="">
            <variable ilk="argument" name="xhr" />
          </scope>
          <scope name="javascript" ilk="function" signature="javascript(xhr)" doc="">
            <variable ilk="argument" name="xhr" />
          </scope>
          <scope name="xml" ilk="function" signature="xml(xhr)" returns="DOMDocument" attributes="private" doc="">
            <variable ilk="argument" name="xhr" />
          </scope>
        </variable>
        <scope ilk="function" name="formToObject" signature="formToObject(formNode)" returns="Object" doc="dojo.formToObject returns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.">
          <variable citdl="DOMNode||String" name="formNode" ilk="argument" />
        </scope>
        <scope ilk="function" name="objectToQuery" signature="objectToQuery(map)" returns="String" doc="takes a name/value mapping object and returns a string representing a URL-encoded version of that object.">
          <variable citdl="Object" name="map" ilk="argument" />
        </scope>
        <scope ilk="function" name="formToQuery" signature="formToQuery(formNode)" returns="String" doc="Returns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize">
          <variable citdl="DOMNode||String" name="formNode" ilk="argument" />
        </scope>
        <scope ilk="function" name="formToJson" signature="formToJson(formNode,prettyPrint)" returns="String" doc="return a serialized JSON string from a form node or string ID identifying the form to serialize">
          <variable citdl="DOMNode||String" name="formNode" ilk="argument" />
          <variable citdl="Boolean" name="prettyPrint" ilk="argument" />
        </scope>
        <scope ilk="function" name="queryToObject" signature="queryToObject(str)" returns="Object" doc="returns an object representing a de-serialized query section of a URL. Query keys with multiple values are returned in an array.">
          <variable citdl="String" name="str" ilk="argument" />
        </scope>
        <scope name="__IoArgs" ilk="function" attributes="private" doc="">
          <variable name="url" citdl="String" doc="URL to server endpoint." />
          <variable name="content" citdl="Object?" doc="Contains properties with string values. These properties will be serialized as name1=value2 and passed in the request." />
          <variable name="timeout" citdl="Integer?" doc="Milliseconds to wait for the response. If this time passes, the then error callbacks are called." />
          <variable name="form" citdl="DOMNode?" doc="DOM node for a form. Used to extract the form values and send to the server." />
          <variable name="preventCache" citdl="Boolean?" doc="Default is false. If true, then a &amp;amp;quot;dojo.preventCache&amp;amp;quot; parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests." />
          <variable name="handleAs" citdl="String?" doc="Acceptable values depend on the type of IO transport (see specific IO calls for more information)." />
          <variable name="load" citdl="Function?" doc="function(response, ioArgs){} response is of type Object, ioArgs is of type dojo.__IoCallbackArgs. This function will be called on a successful HTTP response code." />
          <variable name="error" citdl="Function?" doc="function(response, ioArgs){} response is of type Object, ioArgs is of type dojo.__IoCallbackArgs. This function will be called when the request fails due to a network or server error, the url is invalid, etc. It will also be called if the load or handle callback throws an exception, unless djConfig.isDebug is true. This allows deployed applications to continue to run even when a logic error happens in the callback, while making it easier to troubleshoot while in debug mode." />
          <variable name="handle" citdl="Function?" doc="function(response, ioArgs){} response is of type Object, ioArgs is of type dojo.__IoCallbackArgs. This function will be called at the end of every request, whether or not an error occurs." />
        </scope>
        <scope name="__IoCallbackArgs" ilk="function" signature="__IoCallbackArgs(args,xhr,url,query,handleAs,id,canDelete,json)" attributes="private" doc="">
          <variable ilk="argument" name="args" citdl="Object" doc="the original object argument to the IO call." />
          <variable ilk="argument" name="xhr" citdl="XMLHttpRequest" doc="For XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request." />
          <variable ilk="argument" name="url" citdl="String" doc="The final URL used for the call. Many times it will be different than the original args.url value." />
          <variable ilk="argument" name="query" citdl="String" doc="For non-GET requests, the name1=value1&amp;amp;amp;name2=value2 parameters sent up in the request." />
          <variable ilk="argument" name="handleAs" citdl="String" doc="The final indicator on how the response will be handled." />
          <variable ilk="argument" name="id" citdl="String" doc="For dojo.io.script calls only, the internal script ID used for the request." />
          <variable ilk="argument" name="canDelete" citdl="Boolean" doc="For dojo.io.script calls only, indicates whether the script tag that represents the request can be deleted after callbacks have been called. Used internally to know when cleanup can happen on JSONP-type requests." />
          <variable ilk="argument" name="json" citdl="Object" doc="For dojo.io.script calls only: holds the JSON response for JSONP-type requests. Used internally to hold on to the JSON responses. You should not need to access it directly -- the same object should be passed to the success callbacks directly." />
          <variable name="args" citdl="Object" doc="the original object argument to the IO call." />
          <variable name="xhr" citdl="XMLHttpRequest" doc="For XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request." />
          <variable name="url" citdl="String" doc="The final URL used for the call. Many times it will be different than the original args.url value." />
          <variable name="query" citdl="String" doc="For non-GET requests, the name1=value1&amp;amp;amp;name2=value2 parameters sent up in the request." />
          <variable name="handleAs" citdl="String" doc="The final indicator on how the response will be handled." />
          <variable name="id" citdl="String" doc="For dojo.io.script calls only, the internal script ID used for the request." />
          <variable name="canDelete" citdl="Boolean" doc="For dojo.io.script calls only, indicates whether the script tag that represents the request can be deleted after callbacks have been called. Used internally to know when cleanup can happen on JSONP-type requests." />
          <variable name="json" citdl="Object" doc="For dojo.io.script calls only: holds the JSON response for JSONP-type requests. Used internally to hold on to the JSON responses. You should not need to access it directly -- the same object should be passed to the success callbacks directly." />
        </scope>
        <scope ilk="function" name="_ioSetArgs" signature="_ioSetArgs(args,canceller,okHandler,errHandler)" doc="sets up the Deferred and ioArgs property on the Deferred so it can be used in an io call.">
          <variable citdl="dojo.__IoArgs" name="args" ilk="argument" doc="The args object passed into the public io call. Recognized properties on the args object are:" />
          <variable citdl="Function" name="canceller" ilk="argument" doc="The canceller function used for the Deferred object. The function will receive one argument, the Deferred object that is related to the canceller." />
          <variable citdl="Function" name="okHandler" ilk="argument" doc="The first OK callback to be registered with Deferred. It has the opportunity to transform the OK response. It will receive one argument -- the Deferred object returned from this function." />
          <variable citdl="Function" name="errHandler" ilk="argument" doc="The first error callback to be registered with Deferred. It has the opportunity to do cleanup on an error. It will receive two arguments: error (the Error object) and dfd, the Deferred object returned from this function." />
        </scope>
        <scope ilk="function" name="_ioCancelAll" doc="Cancels all pending IO requests, regardless of IO type (xhr, script, iframe)." />
        <scope ilk="function" name="_ioWatch" signature="_ioWatch(dfd,validCheck,ioCheck,resHandle)" doc="watches the io request represented by dfd to see if it completes.">
          <variable citdl="Deferred" name="dfd" ilk="argument" doc="The Deferred object to watch." />
          <variable citdl="Function" name="validCheck" ilk="argument" doc="used to check if the IO request is still valid. Gets the dfd object as its only argument." />
          <variable citdl="Function" name="ioCheck" ilk="argument" doc="used to check if basic IO call worked. Gets the dfd object as its only argument." />
          <variable citdl="Function" name="resHandle" ilk="argument" doc="used to process response. Gets the dfd object as its only argument." />
        </scope>
        <scope ilk="function" name="_ioAddQueryToUrl" signature="_ioAddQueryToUrl(ioArgs)" doc="Adds query params discovered by the io deferred construction to the URL. Only use this for operations which are fundamentally GET-type operations.">
          <variable citdl="dojo.__IoCallbackArgs" name="ioArgs" ilk="argument" />
        </scope>
        <scope ilk="function" name="xhr" signature="xhr(method,args,hasBody)" returns="dojo.Deferred" doc="Sends an HTTP request with the given method.">
          <variable citdl="String" name="method" ilk="argument" doc="HTTP method to be used, such as GET, POST, PUT, DELETE. Should be uppercase." />
          <variable citdl="dojo.__XhrArgs" name="args" ilk="argument" />
          <variable citdl="Boolean" name="hasBody" ilk="argument" doc="If the request has an HTTP body, then pass true for hasBody." />
        </scope>
        <scope ilk="function" name="xhrGet" signature="xhrGet(args)" returns="dojo.Deferred" doc="Sends an HTTP GET request to the server.">
          <variable citdl="dojo.__XhrArgs" name="args" ilk="argument" />
        </scope>
        <scope ilk="function" name="xhrPost" signature="xhrPost(args)" returns="dojo.Deferred" doc="Sends an HTTP POST request to the server. In addtion to the properties listed for the dojo.__XhrArgs type, the following property is allowed: postData: String. Send raw data in the body of the POST request.">
          <variable citdl="dojo.__XhrArgs" name="args" ilk="argument" />
        </scope>
        <scope ilk="function" name="xhrPut" signature="xhrPut(args)" returns="dojo.Deferred" doc="Sends an HTTP PUT request to the server. In addtion to the properties listed for the dojo.__XhrArgs type, the following property is allowed: putData: String. Send raw data in the body of the PUT request.">
          <variable citdl="dojo.__XhrArgs" name="args" ilk="argument" />
        </scope>
        <scope ilk="function" name="xhrDelete" signature="xhrDelete(args)" returns="dojo.Deferred" doc="Sends an HTTP DELETE request to the server.">
          <variable citdl="dojo.__XhrArgs" name="args" ilk="argument" />
        </scope>
        <variable name="_base" citdl="Object" attributes="private" doc="" />
        <variable name="_firebug" citdl="Object" attributes="private" doc="" />
        <variable name="back" citdl="Object" doc="Browser history management resources">
          <scope name="getHash" doc="" />
          <scope name="setHash" doc="" />
          <scope name="goBack" doc="" />
          <scope name="goForward" doc="" />
          <scope name="init" ilk="function" doc="Initializes the undo stack. This must be called from a &amp;amp;lt;script&amp;amp;gt; block that lives inside the &amp;amp;lt;body&amp;amp;gt; tag to prevent bugs on IE." returns="prevent reinit" attributes="private" />
          <scope name="setInitialState" ilk="function" signature="setInitialState(args)" doc="Sets the state object and back callback for the very first page that is loaded.">
            <variable ilk="argument" name="args" citdl="Object" doc="See the addToHistory() function for the list of valid args properties." />
          </scope>
          <scope name="addToHistory" ilk="function" signature="addToHistory(args)" doc="adds a state object (args) to the history list.">
            <variable ilk="argument" name="args" citdl="dojo.__backArgs" />
          </scope>
          <scope name="_iframeLoaded" ilk="function" signature="_iframeLoaded(evt,ifrLoc)" doc="private method. Do not call this directly." attributes="private">
            <variable ilk="argument" name="evt" />
            <variable ilk="argument" name="ifrLoc" />
          </scope>
        </variable>
        <scope ilk="function" name="__backArgs" signature="__backArgs(kwArgs)">
          <variable name="kwArgs" ilk="argument" />
        </scope>
        <scope ilk="function" name="behavior" doc="Utility for unobtrusive/progressive event binding, DOM traversal, and manipulation." />
        <variable name="cldr" citdl="Object" doc="transformation of relevant pieces of the Unicode.org Common Locale Data Repository (see http://unicode.org/cldr) to JSON from the original XML with associated utility classes">
          <variable name="supplemental" citdl="Object" doc="">
            <scope name="getFirstDayOfWeek" ilk="function" signature="getFirstDayOfWeek(locale)" doc="Returns a zero-based index for first day of the week" returns="Number" attributes="private">
              <variable ilk="argument" name="locale" citdl="String" />
            </scope>
            <scope name="_region" ilk="function" signature="_region(locale)" attributes="private" doc="">
              <variable ilk="argument" name="locale" citdl="String" />
            </scope>
            <scope name="getWeekend" ilk="function" signature="getWeekend(locale)" doc="Returns a hash containing the start and end days of the weekend" returns="Object {start,end}" attributes="private">
              <variable ilk="argument" name="locale" citdl="String" />
            </scope>
          </variable>
        </variable>
        <variable name="colors" citdl="Object" doc="Color utilities">
          <scope name="makeGrey" ilk="function" signature="makeGrey(g,a)" doc="creates a greyscale color with an optional alpha">
            <variable ilk="argument" name="g" citdl="Number" />
            <variable ilk="argument" name="a" citdl="Number" />
          </scope>
        </variable>
        <scope ilk="function" name="__cookieProps" />
        <scope ilk="function" name="cookie" signature="cookie(name,value,props)" returns="String or undefined" doc="Get or set a cookie.">
          <variable citdl="String" name="name" ilk="argument" doc="Name of the cookie" />
          <variable citdl="String" name="value" ilk="argument" doc="Value for the cookie" />
          <variable citdl="dojo.__cookieProps" name="props" ilk="argument" doc="Properties for the cookie" />
        </scope>
        <variable name="currency" citdl="Object" doc="localized formatting and parsing routines for currencies">
          <scope name="_mixInDefaults" ilk="function" signature="_mixInDefaults(options)" attributes="private" doc="">
            <variable ilk="argument" name="options" />
          </scope>
          <scope name="format" ilk="function" signature="format(value,options)" doc="Format a Number as a currency, using locale-specific settings">
            <variable ilk="argument" name="value" citdl="Number" doc="the number to be formatted." />
            <variable ilk="argument" name="options" citdl="dojo.number.__FormatOptions" />
          </scope>
          <scope name="regexp" ilk="function" signature="regexp(options)" doc="Builds the regular needed to parse a currency value" returns="String" attributes="private">
            <variable ilk="argument" name="options" citdl="dojo.number.__RegexpOptions" />
          </scope>
          <scope name="parse" ilk="function" signature="parse(expression,options)" doc="Convert a properly formatted currency string to a primitive Number, using locale-specific settings.">
            <variable ilk="argument" name="expression" citdl="String" doc="A string representation of a Number" />
            <variable ilk="argument" name="options" citdl="dojo.currency.__ParseOptions" />
          </scope>
        </variable>
        <variable name="data" citdl="Object" doc="A uniform data access layer">
          <scope name="ItemFileWriteStore" ilk="function" signature="ItemFileWriteStore(keywordParameters)" doc="">
            <variable ilk="argument" name="keywordParameters" citdl="object" doc="typeMap object) The structure of the typeMap object is as follows: { type0: function || object, type1: function || object, ... typeN: function || object } Where if it is a function, it is assumed to be an object constructor that takes the value of _value as the initialization parameters. It is serialized assuming object.toString() serialization. If it is an object, then it is assumed to be an object of general form: { type: function, //constructor. deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately. serialize:	function(object) //The function that converts the object back into the proper file format form. }" />
            <variable name="referenceIntegrity" doc="" />
            <scope name="_assert" ilk="function" signature="_assert(condition)" attributes="private" doc="">
              <variable ilk="argument" name="condition" citdl="boolean" />
            </scope>
            <scope name="_getIdentifierAttribute" ilk="function" attributes="private" doc="" />
            <scope name="newItem" ilk="function" signature="newItem(keywordArgs,parentInfo)" doc="See dojo.data.api.Write.newItem()" returns="item" attributes="private">
              <variable ilk="argument" name="keywordArgs" citdl="Object" />
              <variable ilk="argument" name="parentInfo" citdl="Object" />
            </scope>
            <scope name="_removeArrayElement" ilk="function" signature="_removeArrayElement(array,element)" attributes="private" doc="">
              <variable ilk="argument" name="array" citdl="Array" />
              <variable ilk="argument" name="element" citdl="anything" />
            </scope>
            <scope name="deleteItem" ilk="function" signature="deleteItem(item)" doc="See dojo.data.api.Write.deleteItem()">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="setValue" ilk="function" signature="setValue(item,attribute,value)" doc="See dojo.data.api.Write.set()" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="value" citdl="almost anything" />
            </scope>
            <scope name="setValues" ilk="function" signature="setValues(item,attribute,values)" doc="See dojo.data.api.Write.setValues()" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="values" citdl="array" />
            </scope>
            <scope name="unsetAttribute" ilk="function" signature="unsetAttribute(item,attribute)" doc="See dojo.data.api.Write.unsetAttribute()">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="_setValueOrValues" ilk="function" signature="_setValueOrValues(item,attribute,newValueOrValues,callOnSet)" returns="boolean" attributes="private" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="newValueOrValues" citdl="anything" />
              <variable ilk="argument" name="callOnSet" citdl="boolean" />
            </scope>
            <scope name="_addReferenceToMap" ilk="function" signature="_addReferenceToMap(refItem,parentItem,attribute)" doc="Method to add an reference map entry for an item and attribute." attributes="private">
              <variable ilk="argument" name="refItem" citdl="item" doc="The item that is referenced." />
              <variable ilk="argument" name="parentItem" citdl="item" doc="The item that holds the new reference to refItem." />
              <variable ilk="argument" name="attribute" citdl="string" doc="The attribute on parentItem that contains the new reference." />
            </scope>
            <scope name="_removeReferenceFromMap" ilk="function" signature="_removeReferenceFromMap(refItem,parentItem,attribute)" doc="Method to remove an reference map entry for an item and attribute." attributes="private">
              <variable ilk="argument" name="refItem" citdl="item" doc="The item that is referenced." />
              <variable ilk="argument" name="parentItem" citdl="item" doc="The item holding a reference to refItem." />
              <variable ilk="argument" name="attribute" citdl="strin" doc="The attribute on parentItem that contains the reference." />
            </scope>
            <scope name="_dumpReferenceMap" ilk="function" doc="Function to dump the reverse reference map of all items in the store for debug purposes." attributes="private" />
            <scope name="_getValueOrValues" ilk="function" signature="_getValueOrValues(item,attribute)" attributes="private" doc="">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
            </scope>
            <scope name="_flatten" ilk="function" signature="_flatten(value)" attributes="private" doc="">
              <variable ilk="argument" name="value" citdl="anything" />
            </scope>
            <scope name="_getNewFileContentString" ilk="function" doc="Generate a string that can be saved to a file. The result should look similar to: http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json" attributes="private" />
            <scope name="_isEmpty" ilk="function" signature="_isEmpty(something)" doc="Function to determine if an array or object has no properties or values." returns="boolean" attributes="private">
              <variable ilk="argument" name="something" citdl="The" doc="array or object to examine." />
            </scope>
            <scope name="save" ilk="function" signature="save(keywordArgs)" doc="See dojo.data.api.Write.save()">
              <variable ilk="argument" name="keywordArgs" citdl="object" />
            </scope>
            <scope name="revert" ilk="function" doc="See dojo.data.api.Write.revert()" returns="boolean" attributes="private" />
            <scope name="isDirty" ilk="function" signature="isDirty(item)" doc="See dojo.data.api.Write.isDirty()" returns="boolean" attributes="private">
              <variable ilk="argument" name="item" citdl="item" />
            </scope>
            <scope name="onSet" ilk="function" signature="onSet(item,attribute,oldValue,newValue)" doc="See dojo.data.api.Notification.onSet()  No need to do anything. This method is here just so that the client code can connect observers to it.">
              <variable ilk="argument" name="item" citdl="item" />
              <variable ilk="argument" name="attribute" citdl="attribute-name-string" />
              <variable ilk="argument" name="oldValue" citdl="object | array" />
              <variable ilk="argument" name="newValue" citdl="object | array" />
            </scope>
            <scope name="onNew" ilk="function" signature="onNew(newItem,parentInfo)" doc="See dojo.data.api.Notification.onNew()  No need to do anything. This method is here just so that the client code can connect observers to it.">
              <variable ilk="argument" name="newItem" citdl="item" />
              <variable ilk="argument" name="parentInfo" citdl="object" />
            </scope>
            <scope name="onDelete" ilk="function" signature="onDelete(deletedItem)" doc="See dojo.data.api.Notification.onDelete()  No need to do anything. This method is here just so that the client code can connect observers to it.">
              <variable ilk="argument" name="deletedItem" citdl="item" />
            </scope>
            <scope name="close" ilk="function" signature="close(request)" doc="Over-ride of base close function of ItemFileReadStore to add in check for store state.">
              <variable ilk="argument" name="request" citdl="object" />
            </scope>
            <variable name="_saveInProgress" attributes="private" doc="" />
            <variable name="_pending" attributes="private" doc="" />
          </scope>
          <variable name="api" citdl="Object" doc="">
            <scope name="Identity" ilk="function" doc="This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.">
              <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
              <scope name="getIdentity" ilk="function" signature="getIdentity(item)" doc="Returns a unique identifier for an item. The return value will be either a string or something that has a toString() method (such as, for example, a dojox.uuid.Uuid object)." returns="string" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item from the store from which to obtain its identifier." />
                <variable name="exceptions" />
              </scope>
              <scope name="getIdentityAttributes" ilk="function" signature="getIdentityAttributes(item)" doc="Returns an array of attribute names that are used to generate the identity. For most stores, this is a single attribute, but for some complex stores such as RDB backed stores that use compound (multi-attribute) identifiers it can be more than one. If the identity is not composed of attributes on the item, it will return null. This function is intended to identify the attributes that comprise the identity so that so that during a render of all attributes, the UI can hide the the identity information if it chooses." returns="string" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item from the store from which to obtain the array of public attributes that compose the identifier, if any." />
              </scope>
              <scope name="fetchItemByIdentity" ilk="function" signature="fetchItemByIdentity(keywordArgs)" doc="Given the identity of an item, this method returns the item that has that identity through the onItem callback. Conforming implementations should return null if there is no item with the given identity. Implementations of fetchItemByIdentity() may sometimes return an item from a local cache and may sometimes fetch an item from a remote server,">
                <variable ilk="argument" name="keywordArgs" citdl="object"
                doc="An anonymous object that defines the item to locate and callbacks to invoke when the item has been located and load has completed. The format of the object is as follows: { identity: string|object, onItem: Function, onError: Function, scope: object } The *identity* parameter. The identity parameter is the identity of the item you wish to locate and load This attribute is required. It should be a string or an object that toString() can be called on.  The *onItem* parameter. Function(item) The onItem parameter is the callback to invoke when the item has been loaded. It takes only one parameter, the item located, or null if none found.  The *onError* parameter. Function(error) The onError parameter is the callback to invoke when the item load encountered an error. It takes only one parameter, the error object  The *scope* parameter. If a scope object is provided, all of the callback functions (onItem, onError, etc) will be invoked in the context of the scope object. In the body of the callback function, the value of the &amp;amp;quot;this&amp;amp;quot; keyword will be the scope object. If no scope object is provided, the callback functions will be called in the context of dojo.global. For example, onItem.call(scope, item, request) vs. onItem.call(dojo.global, item, request)" />
              </scope>
            </scope>
            <scope name="Notification" ilk="function" doc="This is an abstract API that data provider implementations conform to. This file defines functions signatures and intentionally leaves all the functions unimplemented.">
              <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
              <scope name="onSet" ilk="function" signature="onSet(item,attribute,oldValue,newValue)" doc="This function is called any time an item is modified via setValue, setValues, unsetAttribute, etc.">
                <variable ilk="argument" name="item" citdl="item" doc="The item being modified." />
                <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute being changed represented as a string name." />
                <variable ilk="argument" name="oldValue" citdl="object | array" doc="The old value of the attribute. In the case of single value calls, such as setValue, unsetAttribute, etc, this value will be generally be an atomic value of some sort (string, int, etc, object). In the case of multi-valued attributes, it will be an array." />
                <variable ilk="argument" name="newValue" citdl="object | array" doc="The new value of the attribute. In the case of single value calls, such as setValue, this value will be generally be an atomic value of some sort (string, int, etc, object). In the case of multi-valued attributes, it will be an array. In the case of unsetAttribute, the new value will be 'undefined'." />
                <variable name="return_summary" />
              </scope>
              <scope name="onNew" ilk="function" signature="onNew(newItem,parentInfo)" doc="This function is called any time a new item is created in the store. It is called immediately after the store newItem processing has completed.">
                <variable ilk="argument" name="newItem" citdl="item" doc="The item created." />
                <variable ilk="argument" name="parentInfo" citdl="object"
                doc="An optional javascript object that is passed when the item created was placed in the store hierarchy as a value f another item's attribute, instead of a root level item. Note that if this function is invoked with a value for parentInfo, then onSet is not invoked stating the attribute of the parent item was modified. This is to avoid getting two notification events occurring when a new item with a parent is created. The structure passed in is as follows: { item: someItem,							//The parent item attribute:	&amp;amp;quot;attribute-name-string&amp;amp;quot;,	//The attribute the new item was assigned to. oldValue: something	//Whatever was the previous value for the attribute. //If it is a single-value attribute only, then this value will be a single value. //If it was a multi-valued attribute, then this will be an array of all the values minues the new one. newValue: something	//The new value of the attribute. In the case of single value calls, such as setValue, this value will be //generally be an atomic value of some sort (string, int, etc, object). In the case of multi-valued attributes, //it will be an array. }" />
                <variable name="return_summary" />
              </scope>
              <scope name="onDelete" ilk="function" signature="onDelete(deletedItem)" doc="This function is called any time an item is deleted from the store. It is called immediately after the store deleteItem processing has completed.">
                <variable ilk="argument" name="deletedItem" citdl="item" doc="The item deleted." />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope name="Read" ilk="function" doc="This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented. For more information on the dojo.data APIs, please visit: http://www.dojotoolkit.org/node/98">
              <scope name="getValue" ilk="function" signature="getValue(item,attribute,defaultValue)" doc="Returns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute)." returns="a literal, an item, null, or undefined (never an array)" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item to access values on." />
                <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to access represented as a string." />
                <variable ilk="argument" name="defaultValue" citdl="value" doc="Optional. A default value to use for the getValue return in the attribute does not exist or has no value." />
                <variable name="exceptions" />
              </scope>
              <scope name="getValues" ilk="function" signature="getValues(item,attribute)" doc="This getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: []. (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return [].)" returns="an array that may contain literals and items" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item to access values on." />
                <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to access represented as a string." />
                <variable name="exceptions" />
              </scope>
              <scope name="getAttributes" ilk="function" signature="getAttributes(item)" doc="Returns an array with all the attributes that this item has. This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: []." returns="array" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item to access attributes on." />
                <variable name="exceptions" />
              </scope>
              <scope name="hasAttribute" ilk="function" signature="hasAttribute(item,attribute)" doc="Returns true if the given *item* has a value for the given *attribute*." returns="boolean" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item to access attributes on." />
                <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to access represented as a string." />
                <variable name="exceptions" />
              </scope>
              <scope name="containsValue" ilk="function" signature="containsValue(item,attribute,value)" doc="Returns true if the given *value* is one of the values that getValues() would return." returns="boolean" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item to access values on." />
                <variable ilk="argument" name="attribute" citdl="attribute-name-string" doc="The attribute to access represented as a string." />
                <variable ilk="argument" name="value" citdl="anything" doc="The value to match as a value for the attribute." />
                <variable name="exceptions" />
              </scope>
              <scope name="isItem" ilk="function" signature="isItem(something)" doc="Returns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item." returns="boolean" attributes="private">
                <variable ilk="argument" name="something" citdl="anything" doc="Can be anything." />
              </scope>
              <scope name="isItemLoaded" ilk="function" signature="isItemLoaded(something)" doc="Returns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server)." returns="boolean" attributes="private">
                <variable ilk="argument" name="something" citdl="anything" doc="Can be anything." />
              </scope>
              <scope name="loadItem" ilk="function" signature="loadItem(keywordArgs)" doc="Given an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded.">
                <variable ilk="argument" name="keywordArgs" citdl="object"
                doc="An anonymous object that defines the item to load and callbacks to invoke when the load has completed. The format of the object is as follows: { item: object, onItem: Function, onError: Function, scope: object } The *item* parameter. The item parameter is an object that represents the item in question that should be contained by the store. This attribute is required.  The *onItem* parameter. Function(item) The onItem parameter is the callback to invoke when the item has been loaded. It takes only one parameter, the fully loaded item.  The *onError* parameter. Function(error) The onError parameter is the callback to invoke when the item load encountered an error. It takes only one parameter, the error object  The *scope* parameter. If a scope object is provided, all of the callback functions (onItem, onError, etc) will be invoked in the context of the scope object. In the body of the callback function, the value of the &amp;amp;quot;this&amp;amp;quot; keyword will be the scope object. If no scope object is provided, the callback functions will be called in the context of dojo.global(). For example, onItem.call(scope, item, request) vs. onItem.call(dojo.global(), item, request)" />
              </scope>
              <scope name="fetch" ilk="function" signature="fetch(keywordArgs)" doc="Given a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. The format and expectations of stores is that they operate in a generally asynchronous manner, therefore callbacks are always used to return items located by the fetch parameters." returns="an object conforming to the dojo.data.api.Request API" attributes="private">
                <variable ilk="argument" name="keywordArgs" citdl="Object"
                doc="The keywordArgs parameter may either be an instance of conforming to dojo.data.api.Request or may be a simple anonymous object that may contain any of the following: { query: query-object or query-string, queryOptions: object, onBegin: Function, onItem: Function, onComplete: Function, onError: Function, scope: object, start: int count: int sort: array } All implementations should accept keywordArgs objects with any of the 9 standard properties: query, onBegin, onItem, onComplete, onError scope, sort, start, and count. Some implementations may accept additional properties in the keywordArgs object as valid parameters, such as {includeOutliers:true}.  The *query* parameter. The query may be optional in some data store implementations. The dojo.data.api.Read API does not specify the syntax or semantics of the query itself -- each different data store implementation may have its own notion of what a query should look like. However, as of dojo 0.9, 1.0, and 1.1, all the provided datastores in dojo.data and dojox.data support an object structure query, where the object is a set of name/value parameters such as { attrFoo: valueBar, attrFoo1: valueBar1}. Most of the dijit widgets, such as ComboBox assume this to be the case when working with a datastore when they dynamically update the query. Therefore, for maximum compatibility with dijit widgets the recommended query parameter is a key/value object. That does not mean that the the datastore may not take alternative query forms, such as a simple string, a Date, a number, or a mix of such. Ultimately, The dojo.data.api.Read API is agnostic about what the query format. Further note: In general for query objects that accept strings as attribute value matches, the store should also support basic filtering capability, such as * (match any character) and ? (match single character). An example query that is a query object would be like: { attrFoo: &amp;amp;quot;value*&amp;amp;quot;}. Which generally means match all items where they have an attribute named attrFoo, with a value that starts with 'value'.  The *queryOptions* parameter The queryOptions parameter is an optional parameter used to specify optiosn that may modify the query in some fashion, such as doing a case insensitive search, or doing a deep search where all items in a hierarchical representation of data are scanned instead of just the root items. It currently defines two options that all datastores should attempt to honor if possible: { ignoreCase: boolean, //Whether or not the query should match case sensitively or not. Default behaviour is false. deep: boolean 	//Whether or not a fetch should do a deep search of items and all child //items instead of just root-level items in a datastore. Default is false. }  The *onBegin* parameter. function(size, request); If an onBegin callback function is provided, the callback function will be called just once, before the first onItem callback is called. The onBegin callback function will be passed two arguments, the the total number of items identified and the Request object. If the total number is unknown, then size will be -1. Note that size is not necessarily the size of the collection of items returned from the query, as the request may have specified to return only a subset of the total set of items through the use of the start and count parameters.  The *onItem* parameter. function(item, request); If an onItem callback function is provided, the callback function will be called as each item in the result is received. The callback function will be passed two arguments: the item itself, and the Request object.  The *onComplete* parameter. function(items, request);  If an onComplete callback function is provided, the callback function will be called just once, after the last onItem callback is called. Note that if the onItem callback is not present, then onComplete will be passed an array containing all items which matched the query and the request object. If the onItem callback is present, then onComplete is called as: onComplete(null, request).  The *onError* parameter. function(errorData, request); If an onError callback function is provided, the callback function will be called if there is any sort of error while attempting to execute the query. The onError callback function will be passed two arguments: an Error object and the Request object.  The *scope* parameter. If a scope object is provided, all of the callback functions (onItem, onComplete, onError, etc) will be invoked in the context of the scope object. In the body of the callback function, the value of the &amp;amp;quot;this&amp;amp;quot; keyword will be the scope object. If no scope object is provided, the callback functions will be called in the context of dojo.global(). For example, onItem.call(scope, item, request) vs. onItem.call(dojo.global(), item, request)  The *start* parameter. If a start parameter is specified, this is a indication to the datastore to only start returning items once the start number of items have been located and skipped. When this parameter is paired withh 'count', the store should be able to page across queries with millions of hits by only returning subsets of the hits for each query  The *count* parameter. If a count parameter is specified, this is a indication to the datastore to only return up to that many items. This allows a fetch call that may have millions of item matches to be paired down to something reasonable.  The *sort* parameter. If a sort parameter is specified, this is a indication to the datastore to sort the items in some manner before returning the items. The array is an array of javascript objects that must conform to the following format to be applied to the fetching of items: { attribute: attribute || attribute-name-string, descending: true|false; // Optional. Default is false. } Note that when comparing attributes, if an item contains no value for the attribute (undefined), then it the default ascending sort logic should push it to the bottom of the list. In the descending order case, it such items should appear at the top of the list." />
                <variable name="return_summary" />
                <variable name="exceptions" />
              </scope>
              <scope name="getFeatures" ilk="function" doc="The getFeatures() method returns an simple keyword values object that specifies what interface features the datastore implements. A simple CsvStore may be read-only, and the only feature it implements will be the 'dojo.data.api.Read' interface, so the getFeatures() method will return an object like this one: {'dojo.data.api.Read': true}. A more sophisticated datastore might implement a variety of interface features, like 'dojo.data.api.Read', 'dojo.data.api.Write', 'dojo.data.api.Identity', and 'dojo.data.api.Attribution'." />
              <scope name="close" ilk="function" signature="close(request)" doc="The close() method is intended for instructing the store to 'close' out any information associated with a particular request.">
                <variable ilk="argument" name="request" citdl="dojo.data.api.Request || keywordArgs || null" doc="An instance of a request for the store to use to identify what to close out. If no request is passed, then the store should clear all internal caches (if any) and close out all 'open' connections. It does not render the store unusable from there on, it merely cleans out any current data and resets the store to initial state." />
              </scope>
              <scope name="getLabel" ilk="function" signature="getLabel(item)" doc="Method to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is.">
                <variable ilk="argument" name="item" citdl="item" doc="The item to return the label for." />
                <variable name="return_summary" />
              </scope>
              <scope name="getLabelAttributes" ilk="function" signature="getLabelAttributes(item)" doc="Method to inspect the item and return an array of what attributes of the item were used to generate its label, if any.">
                <variable ilk="argument" name="item" citdl="item" doc="The item to return the list of label attributes for." />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope name="Request" ilk="function" doc="This class defines out the semantics of what a 'Request' object looks like when returned from a fetch() method. In general, a request object is nothing more than the original keywordArgs from fetch with an abort function attached to it to allow users to abort a particular request if they so choose. No other functions are required on a general Request object return. That does not inhibit other store implementations from adding extentions to it, of course.  This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.  For more details on fetch, see dojo.data.api.Read.fetch().">
              <scope name="abort" ilk="function" doc="This function is a hook point for stores to provide as a way for a fetch to be halted mid-processing." />
            </scope>
            <scope name="Write" ilk="function" doc="This is an abstract API that data provider implementations conform to. This file defines function signatures and intentionally leaves all the functionss unimplemented.">
              <scope name="getFeatures" ilk="function" doc="See dojo.data.api.Read.getFeatures()" />
              <scope name="newItem" ilk="function" signature="newItem(keywordArgs,parentInfo)" doc="Returns a newly created item. Sets the attributes of the new item based on the *keywordArgs* provided. In general, the attribute names in the keywords become the attributes in the new item and as for the attribute values in keywordArgs, they become the values of the attributes in the new item. In addition, for stores that support hierarchical item creation, an optional second parameter is accepted that defines what item is the parent of the new item and what attribute of that item should the new item be assigned to. In general, this will assume that the attribute targetted is multi-valued and a new item is appended onto the list of values for that attribute." returns="item" attributes="private">
                <variable ilk="argument" name="keywordArgs" citdl="Object" doc="A javascript object defining the initial content of the item as a set of JavaScript 'property name: value' pairs." />
                <variable ilk="argument" name="parentInfo" citdl="Object" doc="An optional javascript object defining what item is the parent of this item (in a hierarchical store. Not all stores do hierarchical items), and what attribute of that parent to assign the new item to. If this is present, and the attribute specified is a multi-valued attribute, it will append this item into the array of values for that attribute. The structure of the object is as follows: { parent: someItem, attribute: &amp;amp;quot;attribute-name-string&amp;amp;quot; }" />
                <variable name="exceptions" />
              </scope>
              <scope name="deleteItem" ilk="function" signature="deleteItem(item)" doc="Deletes an item from the store." returns="boolean" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item to delete." />
                <variable name="exceptions" />
              </scope>
              <scope name="setValue" ilk="function" signature="setValue(item,attribute,value)" doc="Sets the value of an attribute on an item. Replaces any previous value or values." returns="boolean" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item to modify." />
                <variable ilk="argument" name="attribute" citdl="string" doc="The attribute of the item to change represented as a string name." />
                <variable ilk="argument" name="value" citdl="almost anything" doc="The value to assign to the item." />
                <variable name="exceptions" />
              </scope>
              <scope name="setValues" ilk="function" signature="setValues(item,attribute,values)" doc="Adds each value in the *values* array as a value of the given attribute on the given item. Replaces any previous value or values. Calling store.setValues(x, y, []) (with *values* as an empty array) has the same effect as calling store.unsetAttribute(x, y)." returns="boolean" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item to modify." />
                <variable ilk="argument" name="attribute" citdl="string" doc="The attribute of the item to change represented as a string name." />
                <variable ilk="argument" name="values" citdl="array" doc="An array of values to assign to the attribute.." />
                <variable name="exceptions" />
              </scope>
              <scope name="unsetAttribute" ilk="function" signature="unsetAttribute(item,attribute)" doc="Deletes all the values of an attribute on an item." returns="boolean" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item to modify." />
                <variable ilk="argument" name="attribute" citdl="string" doc="The attribute of the item to unset represented as a string." />
                <variable name="exceptions" />
              </scope>
              <scope name="save" ilk="function" signature="save(keywordArgs)" doc="Saves to the server all the changes that have been made locally. The save operation may take some time and is generally performed in an asynchronous fashion. The outcome of the save action is is passed into the set of supported callbacks for the save.">
                <variable ilk="argument" name="keywordArgs" citdl="object"
                doc="onComplete: function onError: function scope: object }  The *onComplete* parameter. function();  If an onComplete callback function is provided, the callback function will be called just once, after the save has completed. No parameters are generally passed to the onComplete.  The *onError* parameter. function(errorData);  If an onError callback function is provided, the callback function will be called if there is any sort of error while attempting to execute the save. The onError function will be based one parameter, the error.  The *scope* parameter. If a scope object is provided, all of the callback function ( onComplete, onError, etc) will be invoked in the context of the scope object. In the body of the callback function, the value of the &amp;amp;quot;this&amp;amp;quot; keyword will be the scope object. If no scope object is provided, the callback functions will be called in the context of dojo.global. For example, onComplete.call(scope) vs. onComplete.call(dojo.global)" />
                <variable name="return_summary" />
              </scope>
              <scope name="revert" ilk="function" doc="Discards any unsaved changes." returns="boolean" attributes="private" />
              <scope name="isDirty" ilk="function" signature="isDirty(item)" doc="Given an item, isDirty() returns true if the item has been modified since the last save(). If isDirty() is called with no *item* argument, then this function returns true if any item has been modified since the last save()." returns="boolean" attributes="private">
                <variable ilk="argument" name="item" citdl="item" doc="The item to check." />
                <variable name="exceptions" />
              </scope>
            </scope>
          </variable>
          <variable name="util" citdl="Object" doc="">
            <variable name="filter" citdl="Object" doc="">
              <scope name="patternToRegExp" ilk="function" signature="patternToRegExp(pattern,ignoreCase)" doc="Helper function to convert a simple pattern to a regular expression for matching." returns="RegExp" attributes="private">
                <variable ilk="argument" name="pattern" citdl="String" doc="string A simple matching pattern to convert that follows basic rules: * Means match anything, so ca* means match anything starting with ca ? Means match single character. So, b?b will match to bob and bab, and so on. \ is an escape character. So for example, \* means do not treat * as a match, but literal character *. To use a \ as a character in the string, it must be escaped. So in the pattern it should be represented by \\ to be treated as an ordinary \ character instead of an escape." />
                <variable ilk="argument" name="ignoreCase" citdl="boolean" doc="An optional flag to indicate if the pattern matching should be treated as case-sensitive or not when comparing By default, it is assumed case sensitive." />
              </scope>
            </variable>
            <variable name="simpleFetch" citdl="Object" doc="">
              <scope name="fetch" ilk="function" signature="fetch(request)"
              doc="The simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development. The simpleFetch mixin should work well for any datastore that can respond to a _fetchItems() call by returning an array of all the found items that matched the query. The simpleFetch mixin is not designed to work for datastores that respond to a fetch() call by incrementally loading items, or sequentially loading partial batches of the result set. For datastores that mixin simpleFetch, simpleFetch implements a fetch method that automatically handles eight of the fetch() arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope The class mixing in simpleFetch should not implement fetch(), but should instead implement a _fetchItems() method. The _fetchItems() method takes three arguments, the keywordArgs object that was passed to fetch(), a callback function to be called when the result array is available, and an error callback to be called if something goes wrong. The _fetchItems() method should ignore any keywordArgs parameters for start, count, onBegin, onItem, onComplete, onError, sort, and scope. The _fetchItems() method needs to correctly handle any other keywordArgs parameters, including the query parameter and any optional parameters (such as includeChildren). The _fetchItems() method should create an array of result items and pass it to the fetchHandler along with the original request object -- or, the _fetchItems() method may, if it wants to, create an new request object with other specifics about the request that are specific to the datastore and pass that as the request object to the handler.  For more information on this specific function, see dojo.data.api.Read.fetch()"
              returns="Object" attributes="private">
                <variable ilk="argument" name="request" citdl="Object" />
              </scope>
            </variable>
            <variable name="sorter" citdl="Object" doc="">
              <scope name="basicComparator" ilk="function" signature="basicComparator(a,b)" doc="Basic comparision function that compares if an item is greater or less than another item" returns="int, {-1,0,1}" attributes="private">
                <variable ilk="argument" name="a" citdl="anything" />
                <variable ilk="argument" name="b" citdl="anything" />
              </scope>
              <scope name="createSortFunction" ilk="function" signature="createSortFunction(sortSpec,store)" doc="Helper function to generate the sorting function based off the list of sort attributes." returns="int" attributes="private">
                <variable ilk="argument" name="sortSpec" citdl="attributes array" doc="array A JS object that array that defines out what attribute names to sort on and whether it should be descenting or asending. The objects should be formatted as follows: { attribute: &amp;amp;quot;attributeName-string&amp;amp;quot; || attribute, descending: true|false; // Default is false. }" />
                <variable ilk="argument" name="store" citdl="dojo.data.core.Read" doc="object The datastore object to look up item values from." />
              </scope>
            </variable>
          </variable>
        </variable>
        <variable name="date" citdl="Object" doc="Date manipulation utilities">
          <variable name="stamp" citdl="Object" doc="">
            <scope name="fromISOString" ilk="function" signature="fromISOString(formattedString,defaultTime)" doc="Returns a Date object given a string formatted according to a subset of the ISO-8601 standard." returns="Date or null" attributes="private">
              <variable ilk="argument" name="formattedString" citdl="String" doc="A string such as 2005-06-30T08:05:00-07:00 or 2005-06-30 or T08:05:00" />
              <variable ilk="argument" name="defaultTime" citdl="Number" doc="Used for defaults for fields omitted in the formattedString. Uses 1970-01-01T00:00:00.0Z by default." />
            </scope>
            <scope name="__Options" ilk="function" attributes="private" doc="">
              <variable name="selector" citdl="String" doc="&amp;amp;quot;date&amp;amp;quot; or &amp;amp;quot;time&amp;amp;quot; for partial formatting of the Date object. Both date and time will be formatted by default." />
              <variable name="zulu" citdl="Boolean" doc="if true, UTC/GMT is used for a timezone" />
              <variable name="milliseconds" citdl="Boolean" doc="if true, output milliseconds" />
            </scope>
            <scope name="toISOString" ilk="function" signature="toISOString(dateObject,options)" doc="Format a Date object as a string according a subset of the ISO-8601 standard" returns="String" attributes="private">
              <variable ilk="argument" name="dateObject" citdl="Date" doc="A Date object" />
              <variable ilk="argument" name="options" citdl="dojo.date.stamp.__Options" />
            </scope>
          </variable>
          <scope name="getDaysInMonth" ilk="function" signature="getDaysInMonth(dateObject)" doc="Returns the number of days in the month used by dateObject" returns="Number" attributes="private">
            <variable ilk="argument" name="dateObject" citdl="Date" />
          </scope>
          <scope name="isLeapYear" ilk="function" signature="isLeapYear(dateObject)" doc="Determines if the year of the dateObject is a leap year" returns="Boolean" attributes="private">
            <variable ilk="argument" name="dateObject" citdl="Date" />
          </scope>
          <scope name="getTimezoneName" ilk="function" signature="getTimezoneName(dateObject)" doc="Get the user's time zone as provided by the browser" returns="The result -- return empty string if nothing found|String" attributes="private">
            <variable ilk="argument" name="dateObject" citdl="Date" doc="Needed because the timezone may vary with time (daylight savings)" />
          </scope>
          <scope name="compare" ilk="function" signature="compare(date1,date2,portion)" doc="Compare two date objects by date, time, or both." returns="int" attributes="private">
            <variable ilk="argument" name="date1" citdl="Date" doc="object" />
            <variable ilk="argument" name="date2" citdl="Date" doc="object. If not specified, the current Date is used." />
            <variable ilk="argument" name="portion" citdl="String" doc="A string indicating the &amp;amp;quot;date&amp;amp;quot; or &amp;amp;quot;time&amp;amp;quot; portion of a Date object. Compares both &amp;amp;quot;date&amp;amp;quot; and &amp;amp;quot;time&amp;amp;quot; by default. One of the following: &amp;amp;quot;date&amp;amp;quot;, &amp;amp;quot;time&amp;amp;quot;, &amp;amp;quot;datetime&amp;amp;quot;" />
          </scope>
          <scope name="add" ilk="function" signature="add(date,interval,amount)" doc="Add to a Date in intervals of different size, from milliseconds to years" returns="Date" attributes="private">
            <variable ilk="argument" name="date" citdl="Date" doc="object to start with" />
            <variable ilk="argument" name="interval" citdl="String" doc="A string representing the interval. One of the following: &amp;amp;quot;year&amp;amp;quot;, &amp;amp;quot;month&amp;amp;quot;, &amp;amp;quot;day&amp;amp;quot;, &amp;amp;quot;hour&amp;amp;quot;, &amp;amp;quot;minute&amp;amp;quot;, &amp;amp;quot;second&amp;amp;quot;, &amp;amp;quot;millisecond&amp;amp;quot;, &amp;amp;quot;quarter&amp;amp;quot;, &amp;amp;quot;week&amp;amp;quot;, &amp;amp;quot;weekday&amp;amp;quot;" />
            <variable ilk="argument" name="amount" citdl="int" doc="How much to add to the date." />
          </scope>
          <scope name="difference" ilk="function" signature="difference(date1,date2,interval)" doc="Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer." returns="Integer return value|Number (integer)" attributes="private">
            <variable ilk="argument" name="date1" citdl="Date" doc="object" />
            <variable ilk="argument" name="date2" citdl="Date" doc="object. If not specified, the current Date is used." />
            <variable ilk="argument" name="interval" citdl="String" doc="A string representing the interval. One of the following: &amp;amp;quot;year&amp;amp;quot;, &amp;amp;quot;month&amp;amp;quot;, &amp;amp;quot;day&amp;amp;quot;, &amp;amp;quot;hour&amp;amp;quot;, &amp;amp;quot;minute&amp;amp;quot;, &amp;amp;quot;second&amp;amp;quot;, &amp;amp;quot;millisecond&amp;amp;quot;, &amp;amp;quot;quarter&amp;amp;quot;, &amp;amp;quot;week&amp;amp;quot;, &amp;amp;quot;weekday&amp;amp;quot; Defaults to &amp;amp;quot;day&amp;amp;quot;." />
          </scope>
        </variable>
        <variable name="dnd" citdl="Object" doc="Drag and Drop resources">
          <scope name="Container" ilk="function" doc="a constructor of the Container" signature="Container(node,params)">
            <variable ilk="argument" name="node" citdl="Node" doc="node or node's id to build the container on" />
            <variable ilk="argument" name="params" citdl="Object" doc="a dict of parameters, recognized parameters are:" />
            <variable name="skipForm" citdl="Boolean" doc="don't start the drag operation, if clicked on form elements dropParent: Node: node or node's id to use as the parent node for dropped items (must be underneath the 'node' parameter in the DOM) _skipStartup: Boolean: skip startup(), which collects children, for deferred initialization (this is used in the markup mode)" />
            <variable name="creator" ilk="function" doc="a creator function, which takes a data item, and returns an object like that: {node: newNode, data: usedData, type: arrayOfStrings}" />
            <scope name="getItem" ilk="function" signature="getItem(key)" doc="returns a data item by its key (id)" returns="Object" attributes="private">
              <variable ilk="argument" name="key" citdl="String" />
            </scope>
            <scope name="setItem" ilk="function" signature="setItem(key,data)" doc="associates a data item with its key (id)">
              <variable ilk="argument" name="key" citdl="String" />
              <variable ilk="argument" name="data" citdl="Object" />
            </scope>
            <scope name="delItem" ilk="function" signature="delItem(key)" doc="removes a data item from the map by its key (id)">
              <variable ilk="argument" name="key" citdl="String" />
            </scope>
            <scope name="forInItems" ilk="function" signature="forInItems(f,o)" doc="iterates over a data map skipping members, which are present in the empty object (IE and/or 3rd-party libraries)." returns="Object" attributes="private">
              <variable ilk="function" name="f" />
              <variable ilk="argument" name="o" citdl="Object" />
            </scope>
            <scope name="clearItems" ilk="function" doc="removes all data items from the map" />
            <scope name="getAllNodes" ilk="function" doc="returns a list (an array) of all valid child nodes" returns="NodeList" attributes="private" />
            <scope name="sync" ilk="function" doc="synch up the node list with the data map" returns="self" attributes="private" />
            <scope name="insertNodes" ilk="function" signature="insertNodes(data,before,anchor)" doc="inserts an array of new nodes before/after an anchor node" returns="self" attributes="private">
              <variable ilk="argument" name="data" citdl="Array" doc="a list of data items, which should be processed by the creator function" />
              <variable ilk="argument" name="before" citdl="Boolean" doc="insert before the anchor, if true, and after the anchor otherwise" />
              <variable ilk="argument" name="anchor" citdl="Node" doc="the anchor node to be used as a point of insertion" />
            </scope>
            <scope name="destroy" ilk="function" doc="prepares the object to be garbage-collected" />
            <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="startup" ilk="function" doc="collects valid child items and populate the map  set up the real parent node" />
            <scope name="onMouseOver" ilk="function" signature="onMouseOver(e)" doc="event processor for onmouseover">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseOut" ilk="function" signature="onMouseOut(e)" doc="event processor for onmouseout">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onSelectStart" ilk="function" signature="onSelectStart(e)" doc="event processor for onselectevent and ondragevent">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onOverEvent" ilk="function" doc="this function is called once, when mouse is over our container" />
            <scope name="onOutEvent" ilk="function" doc="this function is called once, when mouse is out of our container" />
            <scope name="_changeState" ilk="function" signature="_changeState(type,newState)" doc="changes a named state to new state value" attributes="private">
              <variable ilk="argument" name="type" citdl="String" doc="a name of the state to change" />
              <variable ilk="argument" name="newState" citdl="String" doc="new state" />
            </scope>
            <scope name="_addItemClass" ilk="function" signature="_addItemClass(node,type)" doc="adds a class with prefix &amp;amp;quot;dojoDndItem&amp;amp;quot;" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" doc="a node" />
              <variable ilk="argument" name="type" citdl="String" doc="a variable suffix for a class name" />
            </scope>
            <scope name="_removeItemClass" ilk="function" signature="_removeItemClass(node,type)" doc="removes a class with prefix &amp;amp;quot;dojoDndItem&amp;amp;quot;" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" doc="a node" />
              <variable ilk="argument" name="type" citdl="String" doc="a variable suffix for a class name" />
            </scope>
            <scope name="_getChildByEvent" ilk="function" signature="_getChildByEvent(e)" doc="gets a child, which is under the mouse at the moment, or null" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" doc="a mouse event" />
            </scope>
            <scope name="_normalizedCreator" ilk="function" signature="_normalizedCreator(item,hint)" doc="adds all necessary data to the output of the user-supplied creator function" attributes="private">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="hint" />
            </scope>
            <variable name="map" doc="" />
            <variable name="node" citdl="Node" doc="node or node's id to build the container on" />
            <variable name="parent" doc="" />
            <variable name="defaultCreator" doc="" />
            <variable name="current" doc="" />
            <variable name="containerState" doc="" />
            <variable name="events" doc="" />
          </scope>
          <variable name="_defaultCreatorNodes" citdl="Object" attributes="private" doc="">
            <scope name="ul" doc="" />
            <scope name="ol" doc="" />
            <scope name="div" doc="" />
            <scope name="p" doc="" />
          </variable>
          <scope name="_createNode" ilk="function" signature="_createNode(tag)" doc="returns a function, which creates an element of given tag (SPAN by default) and sets its innerHTML to given text" returns="Function" attributes="private">
            <variable ilk="argument" name="tag" citdl="String" doc="a tag name or empty for SPAN" />
          </scope>
          <scope name="_createTrTd" ilk="function" signature="_createTrTd(text)" doc="creates a TR/TD structure with given text as an innerHTML of TD" returns="Node" attributes="private">
            <variable ilk="argument" name="text" citdl="String" doc="a text for TD" />
          </scope>
          <scope name="_createSpan" ilk="function" signature="_createSpan(text)" doc="creates a SPAN element with given text as its innerHTML" returns="Node" attributes="private">
            <variable ilk="argument" name="text" citdl="String" doc="a text for SPAN" />
          </scope>
          <scope name="_defaultCreator" ilk="function" signature="_defaultCreator(node)" doc="takes a parent node, and returns an appropriate creator function" returns="Function" attributes="private">
            <variable ilk="argument" name="node" citdl="Node" doc="a container node" />
          </scope>
          <scope name="Manager" ilk="function" doc="the manager of DnD operations (usually a singleton)">
            <scope name="OFFSET_X" doc="" />
            <scope name="OFFSET_Y" doc="" />
            <scope name="overSource" ilk="function" signature="overSource(source)" doc="called when a source detected a mouse-over conditiion">
              <variable ilk="argument" name="source" citdl="Object" doc="the reporter" />
            </scope>
            <scope name="outSource" ilk="function" signature="outSource(source)" doc="called when a source detected a mouse-out conditiion">
              <variable ilk="argument" name="source" citdl="Object" doc="the reporter" />
            </scope>
            <scope name="startDrag" ilk="function" signature="startDrag(source,nodes,copy)" doc="called to initiate the DnD operation">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which provides items" />
              <variable ilk="argument" name="nodes" citdl="Array" doc="the list of transferred items" />
              <variable ilk="argument" name="copy" citdl="Boolean" doc="copy items, if true, move items otherwise" />
              <scope name="nodes" citdl="Array" doc="the list of transferred items" />
              <scope name="copy" citdl="Boolean" doc="copy items, if true, move items otherwise" />
            </scope>
            <scope name="canDrop" ilk="function" signature="canDrop(flag)" doc="called to notify if the current target can accept items">
              <variable ilk="argument" name="flag" />
            </scope>
            <scope name="stopDrag" ilk="function" doc="stop the DnD in progress" />
            <scope name="makeAvatar" ilk="function" doc="makes the avatar, it is separate to be overwritten dynamically, if needed" />
            <scope name="updateAvatar" ilk="function" doc="updates the avatar, it is separate to be overwritten dynamically, if needed" />
            <scope name="onMouseMove" ilk="function" signature="onMouseMove(e)" doc="event processor for onmousemove">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseUp" ilk="function" signature="onMouseUp(e)" doc="event processor for onmouseup">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onKeyDown" ilk="function" signature="onKeyDown(e)" doc="event processor for onkeydown: watching for CTRL for copy/move status, watching for ESCAPE to cancel the drag">
              <variable ilk="argument" name="e" citdl="Event" doc="keyboard event" />
            </scope>
            <scope name="onKeyUp" ilk="function" signature="onKeyUp(e)" doc="event processor for onkeyup, watching for CTRL for copy/move status">
              <variable ilk="argument" name="e" citdl="Event" doc="keyboard event" />
            </scope>
            <scope name="_setCopyStatus" ilk="function" signature="_setCopyStatus(copy)" doc="changes the copy status" attributes="private">
              <variable ilk="argument" name="copy" citdl="Boolean" doc="the copy status" />
              <scope name="copy" citdl="Boolean" doc="the copy status" />
            </scope>
            <variable name="target" doc="" />
            <variable name="canDropFlag" doc="" />
            <variable name="nodes" doc="" />
            <variable name="copy" doc="" />
            <variable name="avatar" doc="" />
            <variable name="events" doc="" />
          </scope>
          <scope name="manager" ilk="function" doc="returns the current DnD manager, creates one if it is not created yet" returns="Object" attributes="private" />
          <scope name="_manager" attributes="private" doc="" />
          <scope name="Moveable" ilk="function" signature="Moveable(node,params)" doc="an object, which makes a node moveable">
            <variable ilk="argument" name="node" citdl="Node" doc="a node (or node's id) to be moved" />
            <variable ilk="argument" name="params" citdl="Object" doc="an optional object with additional parameters; following parameters are recognized:" />
            <variable name="handle" citdl="Node" doc="a node (or node's id), which is used as a mouse handle if omitted, the node itself is used as a handle" />
            <variable name="delay" citdl="Number" doc="delay move by this number of pixels" />
            <variable name="skip" citdl="Boolean" doc="skip move of form elements" />
            <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="destroy" ilk="function" doc="stops watching for possible move, deletes all references, so the object can be garbage-collected" />
            <scope name="onMouseDown" ilk="function" signature="onMouseDown(e)" doc="event processor for onmousedown, creates a Mover for the node">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseMove" ilk="function" signature="onMouseMove(e)" doc="event processor for onmousemove, used only for delayed drags">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseUp" ilk="function" signature="onMouseUp(e)" doc="event processor for onmouseup, used only for delayed drags">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onSelectStart" ilk="function" signature="onSelectStart(e)" doc="event processor for onselectevent and ondragevent">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onDragDetected" ilk="function" signature="onDragDetected(e)" doc="called when the drag is detected, responsible for creation of the mover">
              <variable ilk="argument" name="e" citdl="Event" />
            </scope>
            <scope name="onMoveStart" ilk="function" signature="onMoveStart(mover)" doc="called before every move operation">
              <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
            </scope>
            <scope name="onMoveStop" ilk="function" signature="onMoveStop(mover)" doc="called after every move operation">
              <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
            </scope>
            <scope name="onFirstMove" ilk="function" signature="onFirstMove(mover)" doc="called during the very first move notification, can be used to initialize coordinates, can be overwritten.  default implementation does nothing">
              <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
            </scope>
            <scope name="onMove" ilk="function" signature="onMove(mover,leftTop)" doc="called during every move notification, should actually move the node, can be overwritten.">
              <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
              <variable ilk="argument" name="leftTop" citdl="Object" />
            </scope>
            <scope name="onMoving" ilk="function" signature="onMoving(mover,leftTop)" doc="called before every incremental move, can be overwritten.  default implementation does nothing">
              <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
              <variable ilk="argument" name="leftTop" citdl="Object" />
            </scope>
            <scope name="onMoved" ilk="function" signature="onMoved(mover,leftTop)" doc="called after every incremental move, can be overwritten.  default implementation does nothing">
              <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
              <variable ilk="argument" name="leftTop" citdl="Object" />
            </scope>
            <variable name="events" doc="" />
            <variable name="_lastX" attributes="private" doc="" />
            <variable name="_lastY" attributes="private" doc="" />
            <variable name="node" citdl="Node" doc="a node (or node's id) to be moved" />
            <variable name="mover" citdl="Object" doc="a constructor of custom Mover" />
          </scope>
          <scope name="Mover" ilk="function" signature="Mover(node,e,host)" doc="an object, which makes a node follow the mouse, used as a default mover, and as a base class for custom movers">
            <variable ilk="argument" name="node" citdl="Node" doc="a node (or node's id) to be moved" />
            <variable ilk="argument" name="e" citdl="Event" doc="a mouse event, which started the move; only pageX and pageY properties are used" />
            <variable ilk="argument" name="host" citdl="Object" doc="object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)" />
            <scope name="onMouseMove" ilk="function" signature="onMouseMove(e)" doc="event processor for onmousemove">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseUp" ilk="function" signature="onMouseUp(e)" doc="">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="onFirstMove" ilk="function" doc="makes the node absolute; it is meant to be called only once" />
            <scope name="destroy" ilk="function" doc="stops the move, deletes all references, so the object can be garbage-collected" />
            <variable name="mouseButton" doc="" />
            <variable name="marginBox" doc="">
              <variable name="l" doc="" />
              <variable name="t" doc="" />
            </variable>
            <variable name="events" doc="" />
            <variable name="node" citdl="Node" doc="a node (or node's id) to be moved" />
            <variable name="host" citdl="Object?" doc="object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)" />
          </scope>
          <scope name="Selector" ilk="function" doc="a constructor of the Selector" signature="Selector(node,params)">
            <variable ilk="argument" name="node" citdl="Node" doc="node or node's id to build the selector on" />
            <variable ilk="argument" name="params" citdl="Object" doc="a dict of parameters, recognized parameters are:" />
            <variable name="singular" citdl="Boolean" doc="allows selection of only one element, if true the rest of parameters are passed to the container" />
            <scope name="getSelectedNodes" ilk="function" doc="returns a list (an array) of selected nodes" returns="Array" attributes="private" />
            <scope name="selectNone" ilk="function" doc="unselects all items" returns="self" attributes="private" />
            <scope name="selectAll" ilk="function" doc="selects all items" returns="self" attributes="private" />
            <scope name="deleteSelectedNodes" ilk="function" doc="deletes all selected items" returns="self" attributes="private" />
            <scope name="forInSelectedItems" ilk="function" signature="forInSelectedItems(f,o)" doc="iterates over selected items, see dojo.dnd.Container.forInItems() for details">
              <variable ilk="function" name="f" />
              <variable ilk="argument" name="o" citdl="Object" />
            </scope>
            <scope name="sync" ilk="function" doc="synch up the node list with the data map" returns="self" attributes="private" />
            <scope name="insertNodes" ilk="function" signature="insertNodes(addSelected,data,before,anchor)" doc="inserts new data items (see Container's insertNodes method for details)" returns="self" attributes="private">
              <variable ilk="argument" name="addSelected" citdl="Boolean" doc="all new nodes will be added to selected items, if true, no selection change otherwise" />
              <variable ilk="argument" name="data" citdl="Array" doc="a list of data items, which should be processed by the creator function" />
              <variable ilk="argument" name="before" citdl="Boolean" doc="insert before the anchor, if true, and after the anchor otherwise" />
              <variable ilk="argument" name="anchor" citdl="Node" doc="the anchor node to be used as a point of insertion" />
              <variable name="_normalizedCreator" ilk="function" signature="_normalizedCreator(item,hint)" attributes="private" doc="">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="hint" />
              </variable>
              <variable name="anchor" citdl="Node" doc="the anchor node to be used as a point of insertion" />
            </scope>
            <scope name="destroy" ilk="function" doc="prepares the object to be garbage-collected" />
            <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="onMouseDown" ilk="function" signature="onMouseDown(e)" doc="event processor for onmousedown">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseUp" ilk="function" signature="onMouseUp(e)" doc="event processor for onmouseup">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseMove" ilk="function" signature="onMouseMove(e)" doc="event processor for onmousemove">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onOverEvent" ilk="function" doc="this function is called once, when mouse is over our container" />
            <scope name="onOutEvent" ilk="function" doc="this function is called once, when mouse is out of our container" />
            <scope name="_removeSelection" ilk="function" doc="unselects all items" returns="self" attributes="private" />
            <scope name="_removeAnchor" ilk="function" returns="self" attributes="private" doc="" />
            <variable name="anchor" doc="" />
            <variable name="selection" doc="" />
            <variable name="_normalizedCreator" attributes="private" doc="" />
            <variable name="simpleSelection" doc="" />
            <variable name="onmousemoveEvent" doc="" />
            <variable name="autoSync" citdl="Boolean" doc="autosynchronizes the source with its list of DnD nodes, false by default" />
          </scope>
          <scope name="Source" ilk="function" doc="a constructor of the Source" signature="Source(node,params)">
            <variable ilk="argument" name="node" citdl="DOMNode|String" doc="node or node's id to build the source on" />
            <variable ilk="argument" name="params" citdl="dojo.dnd.__SourceArgs" doc="any property of this class may be configured via the params object which is mixed-in to the `dojo.dnd.Source` instance" />
            <scope name="isSource" doc="" />
            <scope name="horizontal" doc="" />
            <scope name="copyOnly" doc="" />
            <scope name="selfCopy" doc="" />
            <scope name="selfAccept" doc="" />
            <scope name="skipForm" doc="" />
            <scope name="withHandles" doc="" />
            <scope name="autoSync" doc="" />
            <scope name="delay" doc="" />
            <variable name="accept" doc="" />
            <scope name="checkAcceptance" ilk="function" signature="checkAcceptance(source,nodes)" doc="checks, if the target can accept nodes from this source" returns="Boolean" attributes="private">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which provides items" />
              <variable ilk="argument" name="nodes" citdl="Array" doc="the list of transferred items" />
            </scope>
            <scope name="copyState" ilk="function" signature="copyState(keyPressed,self)" doc="Returns true, if we need to copy items, false to move. It is separated to be overwritten dynamically, if needed." returns="Boolean" attributes="private">
              <variable ilk="argument" name="keyPressed" citdl="Boolean" doc="the &amp;amp;quot;copy&amp;amp;quot; was pressed" />
              <variable ilk="argument" name="self" citdl="Boolean" doc="optional flag, which means that we are about to drop on itself" />
            </scope>
            <scope name="destroy" ilk="function" doc="prepares the object to be garbage-collected" />
            <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="onMouseMove" ilk="function" signature="onMouseMove(e)" doc="event processor for onmousemove">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseDown" ilk="function" signature="onMouseDown(e)" doc="event processor for onmousedown">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onMouseUp" ilk="function" signature="onMouseUp(e)" doc="event processor for onmouseup">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <scope name="onDndSourceOver" ilk="function" signature="onDndSourceOver(source)" doc="topic event processor for /dnd/source/over, called when detected a current source">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which has the mouse over it" />
            </scope>
            <scope name="onDndStart" ilk="function" signature="onDndStart(source,nodes,copy)" doc="topic event processor for /dnd/start, called to initiate the DnD operation">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which provides items" />
              <variable ilk="argument" name="nodes" citdl="Array" doc="the list of transferred items" />
              <variable ilk="argument" name="copy" citdl="Boolean" doc="copy items, if true, move items otherwise" />
            </scope>
            <scope name="onDndDrop" ilk="function" signature="onDndDrop(source,nodes,copy,target)" doc="topic event processor for /dnd/drop, called to finish the DnD operation">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which provides items" />
              <variable ilk="argument" name="nodes" citdl="Array" doc="the list of transferred items" />
              <variable ilk="argument" name="copy" citdl="Boolean" doc="copy items, if true, move items otherwise" />
              <variable ilk="argument" name="target" citdl="Object" doc="the target which accepts items" />
            </scope>
            <scope name="onDndCancel" ilk="function" doc="topic event processor for /dnd/cancel, called to cancel the DnD operation" />
            <scope name="onDrop" ilk="function" signature="onDrop(source,nodes,copy)" doc="called only on the current target, when drop is performed">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which provides items" />
              <variable ilk="argument" name="nodes" citdl="Array" doc="the list of transferred items" />
              <variable ilk="argument" name="copy" citdl="Boolean" doc="copy items, if true, move items otherwise" />
            </scope>
            <scope name="onDropExternal" ilk="function" signature="onDropExternal(source,nodes,copy)" doc="called only on the current target, when drop is performed from an external source">
              <variable ilk="argument" name="source" citdl="Object" doc="the source which provides items" />
              <variable ilk="argument" name="nodes" citdl="Array" doc="the list of transferred items" />
              <variable ilk="argument" name="copy" citdl="Boolean" doc="copy items, if true, move items otherwise" />
              <variable name="_normalizedCreator" ilk="function" signature="_normalizedCreator(node,hint)" attributes="private" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="hint" />
              </variable>
            </scope>
            <scope name="onDropInternal" ilk="function" signature="onDropInternal(nodes,copy)" doc="called only on the current target, when drop is performed from the same target/source">
              <variable ilk="argument" name="nodes" citdl="Array" doc="the list of transferred items" />
              <variable ilk="argument" name="copy" citdl="Boolean" doc="copy items, if true, move items otherwise" />
              <variable name="_normalizedCreator" ilk="function" signature="_normalizedCreator(node,hint)" attributes="private" doc="">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="hint" />
              </variable>
            </scope>
            <scope name="onDraggingOver" ilk="function" doc="called during the active DnD operation, when items are dragged over this target, and it is not disabled" />
            <scope name="onDraggingOut" ilk="function" doc="called during the active DnD operation, when items are dragged away from this target, and it is not disabled" />
            <scope name="onOverEvent" ilk="function" doc="this function is called once, when mouse is over our container" />
            <scope name="onOutEvent" ilk="function" doc="this function is called once, when mouse is out of our container" />
            <scope name="_markTargetAnchor" ilk="function" signature="_markTargetAnchor(before)" doc="assigns a class to the current target anchor based on &amp;amp;quot;before&amp;amp;quot; status" attributes="private">
              <variable ilk="argument" name="before" citdl="Boolean" doc="insert before, if true, after otherwise" />
              <scope name="before" citdl="Boolean" doc="insert before, if true, after otherwise" />
            </scope>
            <scope name="_unmarkTargetAnchor" ilk="function" doc="removes a class of the current target anchor based on &amp;amp;quot;before&amp;amp;quot; status" attributes="private" />
            <scope name="_markDndStatus" ilk="function" signature="_markDndStatus(copy)" doc="changes source's state based on &amp;amp;quot;copy&amp;amp;quot; status" attributes="private">
              <variable ilk="argument" name="copy" />
            </scope>
            <scope name="_legalMouseDown" ilk="function" signature="_legalMouseDown(e)" doc="checks if user clicked on &amp;amp;quot;approved&amp;amp;quot; items" returns="Boolean" attributes="private">
              <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
            </scope>
            <variable name="targetAnchor" doc="" />
            <variable name="targetState" doc="" />
            <variable name="targetBox" doc="" />
            <variable name="mouseDown" doc="" />
            <variable name="mouseButton" doc="" />
            <variable name="_lastX" attributes="private" doc="" />
            <variable name="_lastY" attributes="private" doc="" />
            <variable name="isDragging" doc="" />
            <variable name="before" doc="" />
            <variable name="_normalizedCreator" attributes="private" doc="" />
            <variable name="current" doc="" />
            <variable name="sourceState" doc="" />
            <variable name="topics" doc="" />
          </scope>
          <scope name="Target" ilk="function" doc="a constructor of the Target --- see the Source constructor for details" signature="Target(node,params)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="params" />
            <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <variable name="isSource" doc="" />
          </scope>
          <scope name="AutoSource" ilk="function" doc="a constructor of the AutoSource --- see the Source constructor for details" signature="AutoSource(node,params)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="params" />
            <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <variable name="autoSync" doc="" />
          </scope>
          <scope name="__SourceArgs" ilk="function" doc="a dict of parameters for DnD Source configuration. Note that any property on Source elements may be configured, but this is the short-list" attributes="private">
            <variable name="isSource" citdl="Boolean?" doc="can be used as a DnD source. Defaults to true." />
            <variable name="accept" citdl="Array?" doc="list of accepted types (text strings) for a target; defaults to [&amp;amp;quot;text&amp;amp;quot;]" />
            <variable name="horizontal" citdl="Boolean?" doc="a horizontal container, if true, vertical otherwise or when omitted" />
            <variable name="copyOnly" citdl="Boolean?" doc="copy items, if true, use a state of Ctrl key otherwise, see selfCopy and selfAccept for more details" />
            <variable name="selfCopy" citdl="Boolean?" doc="copy items by default when dropping on itself, false by default, works only if copyOnly is true" />
            <variable name="selfAccept" citdl="Boolean?" doc="accept its own items when copyOnly is true, true by default, works only if copyOnly is true" />
            <variable name="withHandles" citdl="Boolean?" doc="allows dragging only by handles, false by default" />
          </scope>
          <scope name="TimedMoveable" ilk="function" doc="an object, which makes a node moveable with a timer" signature="TimedMoveable(node,params)">
            <variable ilk="argument" name="node" citdl="Node" doc="a node (or node's id) to be moved" />
            <variable ilk="argument" name="params" citdl="Object" doc="an optional object with additional parameters. See dojo.dnd.Moveable for details on general parameters. Following parameters are specific for this class:" />
            <variable name="timeout" citdl="Number" doc="delay move by this number of ms accumulating position changes during the timeout  sanitize parameters" />
            <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope name="onMoveStop" ilk="function" signature="onMoveStop(mover)" doc="">
              <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
            </scope>
            <scope name="onMove" ilk="function" signature="onMove(mover,leftTop)" doc="">
              <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
              <variable ilk="argument" name="leftTop" citdl="Object" />
            </scope>
          </scope>
          <variable name="_validNodes" citdl="Object" attributes="private" doc="">
            <scope name="div" doc="" />
            <scope name="p" doc="" />
            <scope name="td" doc="" />
          </variable>
          <variable name="_validOverflow" citdl="Object" attributes="private" doc="">
            <scope name="auto" doc="" />
            <scope name="scroll" doc="" />
          </variable>
          <scope name="getViewport" ilk="function" doc="returns a viewport size (visible part of the window)" returns="Object" attributes="private" />
          <scope name="autoScroll" ilk="function" signature="autoScroll(e)" doc="a handler for onmousemove event, which scrolls the window, if necesary">
            <variable ilk="argument" name="e" citdl="Event" doc="onmousemove event" />
          </scope>
          <scope name="autoScrollNodes" ilk="function" signature="autoScrollNodes(e)" doc="a handler for onmousemove event, which scrolls the first avaialble Dom element, it falls back to dojo.dnd.autoScroll()">
            <variable ilk="argument" name="e" citdl="Event" doc="onmousemove event" />
          </scope>
          <scope name="V_TRIGGER_AUTOSCROLL" doc="" />
          <scope name="H_TRIGGER_AUTOSCROLL" doc="" />
          <scope name="V_AUTOSCROLL_VALUE" doc="" />
          <scope name="H_AUTOSCROLL_VALUE" doc="" />
          <variable name="autoscroll" citdl="Object" doc="" />
          <variable name="_empty" citdl="Object" attributes="private" doc="" />
          <scope name="getCopyKeyState" ilk="function" signature="getCopyKeyState(e)" doc="abstracts away the difference between selection on Mac and PC, and returns the state of the &amp;amp;quot;copy&amp;amp;quot; key to be pressed." returns="Boolean" attributes="private">
            <variable ilk="argument" name="e" citdl="Event" doc="mouse event" />
          </scope>
          <scope name="getUniqueId" ilk="function" doc="returns a unique string for use with any DOM element" />
          <scope name="isFormElement" ilk="function" signature="isFormElement(e)" doc="returns true, if user clicked on a form element" returns="Boolean" attributes="private">
            <variable ilk="argument" name="e" citdl="Event" />
          </scope>
          <scope name="_isMac" attributes="private" doc="" />
          <scope name="_copyKey" attributes="private" doc="" />
          <scope name="_uniqueId" attributes="private" doc="" />
          <variable name="common" citdl="Object" doc="" />
          <variable name="move" citdl="Object" doc="">
            <scope name="constrainedMoveable" ilk="function" signature="constrainedMoveable(node,params)" doc="an object, which makes a node moveable">
              <variable ilk="argument" name="node" citdl="Node" doc="a node (or node's id) to be moved" />
              <variable ilk="argument" name="params" citdl="Object" doc="an optional object with additional parameters; following parameters are recognized:" />
              <variable name="constraints" ilk="function" doc="a function, which calculates a constraint box, it is called in a context of the moveable object." />
              <variable name="within" citdl="Boolean" doc="restrict move within boundaries. the rest is passed to the base class" />
              <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
                <variable ilk="argument" name="params" />
                <variable ilk="argument" name="node" />
              </scope>
              <scope name="onFirstMove" ilk="function" signature="onFirstMove(mover)" doc="called during the very first move notification, can be used to initialize coordinates, can be overwritten.">
                <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
              </scope>
              <scope name="onMove" ilk="function" signature="onMove(mover,leftTop)" doc="called during every move notification, should actually move the node, can be overwritten.">
                <variable ilk="argument" name="mover" citdl="dojo.dnd.Mover" />
                <variable ilk="argument" name="leftTop" citdl="Object" />
              </scope>
              <variable name="constraintBox" doc="" />
            </scope>
            <scope name="boxConstrainedMoveable" ilk="function" signature="boxConstrainedMoveable(node,params)" doc="an object, which makes a node moveable">
              <variable ilk="argument" name="node" citdl="Node" doc="a node (or node's id) to be moved" />
              <variable ilk="argument" name="params" citdl="Object" doc="an optional object with additional parameters; following parameters are recognized: box: Object: a constraint box the rest is passed to the base class" />
              <variable name="box" citdl="Object" doc="" />
              <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
                <variable ilk="argument" name="params" />
                <variable ilk="argument" name="node" />
              </scope>
              <variable name="constraints" ilk="function" doc="" />
            </scope>
            <scope name="parentConstrainedMoveable" ilk="function" signature="parentConstrainedMoveable(node,params)" doc="an object, which makes a node moveable" returns="Object" attributes="private">
              <variable ilk="argument" name="node" citdl="Node" doc="a node (or node's id) to be moved" />
              <variable ilk="argument" name="params" citdl="Object" doc="an optional object with additional parameters; following parameters are recognized: area: String: a parent's area to restrict the move, can be &amp;amp;quot;margin&amp;amp;quot;, &amp;amp;quot;border&amp;amp;quot;, &amp;amp;quot;padding&amp;amp;quot;, or &amp;amp;quot;content&amp;amp;quot;. the rest is passed to the base class" />
              <scope name="area" doc="" />
              <scope name="markupFactory" ilk="function" signature="markupFactory(params,node)" doc="">
                <variable ilk="argument" name="params" />
                <variable ilk="argument" name="node" />
              </scope>
              <variable name="constraints" ilk="function" returns="Object" attributes="private" doc="" />
            </scope>
            <scope name="constrainedMover" ilk="function" signature="constrainedMover(fun,within)" doc="returns a constrained version of dojo.dnd.Mover" returns="Object" attributes="private">
              <variable ilk="function" name="fun" doc="called on drag, and returns a constraint box" />
              <variable ilk="argument" name="within" citdl="Boolean" doc="if true, constraints the whole dragged object withtin the rectangle, otherwise the constraint is applied to the left-top corner" />
              <variable name="constraintBox" doc="" />
            </scope>
            <scope name="boxConstrainedMover" ilk="function" signature="boxConstrainedMover(box,within)" doc="a specialization of dojo.dnd.constrainedMover, which constrains to the specified box" returns="Object" attributes="private">
              <variable ilk="argument" name="box" citdl="Object" doc="a constraint box (l, t, w, h)" />
              <variable ilk="argument" name="within" citdl="Boolean" doc="if true, constraints the whole dragged object withtin the rectangle, otherwise the constraint is applied to the left-top corner" />
            </scope>
            <scope name="parentConstrainedMover" ilk="function" signature="parentConstrainedMover(area,within)" doc="a specialization of dojo.dnd.constrainedMover, which constrains to the parent node" returns="Object" attributes="private">
              <variable ilk="argument" name="area" citdl="String" doc="&amp;amp;quot;margin&amp;amp;quot; to constrain within the parent's margin box, &amp;amp;quot;border&amp;amp;quot; for the border box, &amp;amp;quot;padding&amp;amp;quot; for the padding box, and &amp;amp;quot;content&amp;amp;quot; for the content box; &amp;amp;quot;content&amp;amp;quot; is the default value." />
              <variable ilk="argument" name="within" citdl="Boolean" doc="if true, constraints the whole dragged object withtin the rectangle, otherwise the constraint is applied to the left-top corner" />
            </scope>
          </variable>
          <scope name="constrainedMover" doc="" />
          <scope name="boxConstrainedMover" doc="" />
          <scope name="parentConstrainedMover" doc="" />
        </variable>
        <variable name="dojo" citdl="Object" doc="" />
        <variable name="fx" citdl="Object" doc="Effects library on top of Base animations">
          <scope name="Toggler" ilk="function" doc="class constructor for an animation toggler. It accepts a packed set of arguments about what type of animation to use in each direction, duration, etc." signature="Toggler(args)">
            <variable ilk="argument" name="args" />
            <scope name="node" citdl="DomNode" doc="the node to toggle" />
            <scope name="showFunc" ilk="function" doc="The function that returns the dojo._Animation to show the node" />
            <scope name="hideFunc" ilk="function" doc="The function that returns the dojo._Animation to hide the node" />
            <scope name="showDuration" citdl="Time" doc="in milliseconds to run the show Animation" />
            <scope name="hideDuration" citdl="Time" doc="in milliseconds to run the hide Animation" />
            <scope name="_showArgs" attributes="private" doc="" />
            <scope name="_showAnim" attributes="private" doc="" />
            <scope name="_hideArgs" attributes="private" doc="" />
            <scope name="_hideAnim" attributes="private" doc="" />
            <scope name="_isShowing" attributes="private" doc="" />
            <scope name="_isHiding" attributes="private" doc="" />
            <scope name="show" ilk="function" signature="show(delay)" doc="Toggle the node to showing">
              <variable ilk="argument" name="delay" />
            </scope>
            <scope name="hide" ilk="function" signature="hide(delay)" doc="Toggle the node to hidden">
              <variable ilk="argument" name="delay" />
            </scope>
          </scope>
          <scope name="wipeIn" ilk="function" signature="wipeIn(args)" returns="dojo._Animation" attributes="private" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="wipeOut" ilk="function" signature="wipeOut(args)" returns="dojo._Animation" attributes="private" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="slideTo" ilk="function" signature="slideTo(args)" returns="dojo._Animation" attributes="private" doc="">
            <variable ilk="argument" name="args" citdl="Object" />
          </scope>
          <scope name="chain" ilk="function" signature="chain(animations)" doc="Chain a list of dojo._Animation s to run in sequence" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="animations" citdl="dojo._Animation[]" />
          </scope>
          <scope name="combine" ilk="function" signature="combine(animations)" doc="Combine a list of dojo._Animation s to run in parallel" returns="dojo._Animation" attributes="private">
            <variable ilk="argument" name="animations" citdl="dojo._Animation[]" />
          </scope>
        </variable>
        <variable name="gears" citdl="Object" doc="" />
        <variable name="html" citdl="Object" doc="" />
        <variable name="i18n" citdl="Object" doc="Utility classes to enable loading of resources for internationalization (i18n)">
          <scope name="getLocalization" ilk="function" signature="getLocalization(packageName,bundleName,locale)" doc="Returns an Object containing the localization for a given resource bundle in a package, matching the specified locale." returns="Object" attributes="private">
            <variable ilk="argument" name="packageName" citdl="String" doc="package which is associated with this resource" />
            <variable ilk="argument" name="bundleName" citdl="String" doc="the base filename of the resource bundle (without the &amp;amp;quot;.js&amp;amp;quot; suffix)" />
            <variable ilk="argument" name="locale" citdl="String" doc="the variant to load (optional). By default, the locale defined by the host environment: dojo.locale" />
          </scope>
          <scope name="normalizeLocale" ilk="function" signature="normalizeLocale(locale)" doc="Returns canonical form of locale, as used by Dojo." returns="String" attributes="private">
            <variable ilk="argument" name="locale" citdl="String" />
          </scope>
          <scope name="_requireLocalization" ilk="function" signature="_requireLocalization(moduleName,bundleName,locale,availableFlatLocales,m,b)" doc="See dojo.requireLocalization()" attributes="private">
            <variable ilk="argument" name="moduleName" citdl="String" />
            <variable ilk="argument" name="bundleName" citdl="String" />
            <variable ilk="argument" name="locale" citdl="String" />
            <variable ilk="argument" name="availableFlatLocales" citdl="String" />
            <variable ilk="argument" name="m" />
            <variable ilk="argument" name="b" />
          </scope>
          <scope name="_searchLocalePath" ilk="function" signature="_searchLocalePath(locale,down,searchFunc)" doc="A helper method to assist in searching for locale-based resources. Will iterate through the variants of a particular locale, either up or down, executing a callback function. For example, &amp;amp;quot;en-us&amp;amp;quot; and true will try &amp;amp;quot;en-us&amp;amp;quot; followed by &amp;amp;quot;en&amp;amp;quot; and finally &amp;amp;quot;ROOT&amp;amp;quot;." attributes="private">
            <variable ilk="argument" name="locale" citdl="String" />
            <variable ilk="argument" name="down" citdl="Boolean" />
            <variable ilk="function" name="searchFunc" />
          </scope>
          <scope name="_preloadLocalizations" ilk="function" signature="_preloadLocalizations(bundlePrefix,localesGenerated)" doc="Load built, flattened resource bundles, if available for all locales used in the page. Only called by built layer files." returns="Boolean" attributes="private">
            <variable ilk="argument" name="bundlePrefix" citdl="String" />
            <variable ilk="argument" name="localesGenerated" citdl="Array" />
          </scope>
        </variable>
        <variable name="io" citdl="Object" doc="Additional I/O transports (Ajax)">
          <variable name="script" citdl="Object" doc="">
            <scope name="__ioArgs" ilk="function" doc="All the properties described in the dojo.__ioArgs type, apply to this type as well, EXCEPT &amp;amp;quot;handleAs&amp;amp;quot;. It is not applicable to dojo.io.script.get() calls, since it is implied by the usage of &amp;amp;quot;callbackParamName&amp;amp;quot; (response will be a JSONP call returning JSON) or &amp;amp;quot;checkString&amp;amp;quot; (response is pure JavaScript defined in the body of the script that was attached)." attributes="private">
              <variable name="callbackParamName" citdl="c&quot;." doc="" />
              <variable name="checkString" citdl="String" doc="A string of JavaScript that when evaluated like so: &amp;amp;quot;typeof(&amp;amp;quot; + checkString + &amp;amp;quot;) != 'undefined'&amp;amp;quot; being true means that the script fetched has been loaded. Do not use this if doing a JSONP type of call (use callbackParamName instead)." />
              <variable name="frameDoc" citdl="Document" doc="The Document object for a child iframe. If this is passed in, the script will be attached to that document. This can be helpful in some comet long-polling scenarios with Firefox and Opera." />
            </scope>
            <scope name="get" ilk="function" signature="get(args)" doc="sends a get request using a dynamically created script tag.">
              <variable ilk="argument" name="args" citdl="dojo.io.script.__ioArgs" />
            </scope>
            <scope name="attach" ilk="function" signature="attach(id,url,frameDocument)" doc="creates a new &amp;amp;lt;script&amp;amp;gt; tag pointing to the specified URL and adds it to the document.">
              <variable ilk="argument" name="id" citdl="String" />
              <variable ilk="argument" name="url" citdl="String" />
              <variable ilk="argument" name="frameDocument" citdl="Document" />
            </scope>
            <scope name="remove" ilk="function" signature="remove(id,frameDocument)" doc="removes the script element with the given id, from the given frameDocument. If no frameDocument is passed, the current document is used.">
              <variable ilk="argument" name="id" citdl="String" />
              <variable ilk="argument" name="frameDocument" citdl="Document" />
            </scope>
            <scope name="_makeScriptDeferred" ilk="function" signature="_makeScriptDeferred(args)" doc="sets up a Deferred object for an IO request." returns="dojo.Deferred" attributes="private">
              <variable ilk="argument" name="args" citdl="Object" />
            </scope>
            <scope name="_deferredCancel" ilk="function" signature="_deferredCancel(dfd)" doc="canceller function for dojo._ioSetArgs call." attributes="private">
              <variable ilk="argument" name="dfd" citdl="Deferred" />
            </scope>
            <scope name="_deferredOk" ilk="function" signature="_deferredOk(dfd)" doc="okHandler function for dojo._ioSetArgs call." attributes="private">
              <variable ilk="argument" name="dfd" citdl="Deferred" />
            </scope>
            <scope name="_deferredError" ilk="function" signature="_deferredError(error,dfd)" doc="errHandler function for dojo._ioSetArgs call." attributes="private">
              <variable ilk="argument" name="error" citdl="Error" />
              <variable ilk="argument" name="dfd" citdl="Deferred" />
            </scope>
            <scope name="_deadScripts" attributes="private" doc="" />
            <scope name="_counter" attributes="private" doc="" />
            <scope name="_addDeadScript" ilk="function" signature="_addDeadScript(ioArgs)" doc="sets up an entry in the deadScripts array." attributes="private">
              <variable ilk="argument" name="ioArgs" citdl="Object" />
            </scope>
            <scope name="_validCheck" ilk="function" signature="_validCheck(dfd)" doc="inflight check function to see if dfd is still valid." attributes="private">
              <variable ilk="argument" name="dfd" citdl="Deferred" />
            </scope>
            <scope name="_ioCheck" ilk="function" signature="_ioCheck(dfd)" doc="inflight check function to see if IO finished." attributes="private">
              <variable ilk="argument" name="dfd" citdl="Deferred" />
            </scope>
            <scope name="_resHandle" ilk="function" signature="_resHandle(dfd)" doc="inflight function to handle a completed response." attributes="private">
              <variable ilk="argument" name="dfd" citdl="Deferred" />
            </scope>
            <scope name="_canAttach" ilk="function" signature="_canAttach(ioArgs)" doc="A method that can be overridden by other modules to control when the script attachment occurs." attributes="private">
              <variable ilk="argument" name="ioArgs" citdl="Object" />
            </scope>
            <scope name="_jsonpCallback" ilk="function" signature="_jsonpCallback(json)" doc="generic handler for jsonp callback. A pointer to this function is used for all jsonp callbacks. NOTE: the &amp;amp;quot;this&amp;amp;quot; in this function will be the Deferred object that represents the script request." attributes="private">
              <variable ilk="argument" name="json" citdl="JSON Object" />
              <scope name="ioArgs">
                <variable name="json" doc="" />
              </scope>
            </scope>
          </variable>
        </variable>
        <variable name="jaxer" citdl="Object" doc="" />
        <variable name="number" citdl="Object" doc="localized formatting and parsing routines for Number">
          <scope name="__FormatOptions" attributes="private" doc="">
            <variable name="pattern" citdl="String?" doc="override [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) with this string" />
            <variable name="places" citdl="Number?" doc="fixed number of decimal places to show. This overrides any information in the provided pattern." />
            <variable name="round" citdl="Number?" doc="5 rounds to nearest .5; 0 rounds to nearest whole (default). -1 means don't round." />
            <variable name="currency" citdl="String?" doc="an [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like &amp;amp;quot;USD&amp;amp;quot;" />
            <variable name="symbol" citdl="String?" doc="localized currency symbol" />
            <variable name="locale" citdl="String?" doc="override the locale used to determine formatting rules" />
          </scope>
          <scope name="format" ilk="function" signature="format(value,options)" doc="Format a Number as a String, using locale-specific settings" returns="null|String" attributes="private">
            <variable ilk="argument" name="value" citdl="Number" doc="the number to be formatted. If not a valid JavaScript number, return null." />
            <variable ilk="argument" name="options" citdl="dojo.number.__FormatOptions" />
          </scope>
          <scope name="_applyPattern" ilk="function" signature="_applyPattern(value,pattern,options)" doc="Apply pattern to format value as a string using options. Gives no consideration to local customs." attributes="private">
            <variable ilk="argument" name="value" citdl="Number" doc="the number to be formatted." />
            <variable ilk="argument" name="pattern" citdl="String" doc="a pattern string as described by [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)" />
            <variable ilk="argument" name="options" citdl="dojo.number.__FormatOptions" doc="_applyPattern is usually called via `dojo.number.format()` which populates an extra property in the options parameter, &amp;amp;quot;customs&amp;amp;quot;. The customs object specifies group and decimal parameters if set." />
          </scope>
          <scope name="round" ilk="function" signature="round(value,places,multiple)" doc="Rounds the number at the given number of places" returns="Number" attributes="private">
            <variable ilk="argument" name="value" citdl="Number" doc="the number to round" />
            <variable ilk="argument" name="places" citdl="Number" doc="the number of decimal places where rounding takes place" />
            <variable ilk="argument" name="multiple" citdl="Number" doc="rounds next place to nearest multiple" />
          </scope>
          <scope name="__FormatAbsoluteOptions" ilk="function" attributes="private" doc="">
            <variable name="decimal" citdl="String?" doc="the decimal separator" />
            <variable name="group" citdl="String?" doc="the group separator" />
            <variable name="places" citdl="Integer?|String?" doc="number of decimal places. the range &amp;amp;quot;n,m&amp;amp;quot; will format to m places." />
            <variable name="round" citdl="Number?" doc="5 rounds to nearest .5; 0 rounds to nearest whole (default). -1 means don't round." />
          </scope>
          <scope name="_formatAbsolute" ilk="function" signature="_formatAbsolute(value,pattern,options)" doc="Apply numeric pattern to absolute value using options. Gives no consideration to local customs." attributes="private">
            <variable ilk="argument" name="value" citdl="Number" doc="the number to be formatted, ignores sign" />
            <variable ilk="argument" name="pattern" citdl="String" doc="the number portion of a pattern (e.g. `#,##0.00`)" />
            <variable ilk="argument" name="options" citdl="dojo.number.__FormatAbsoluteOptions" />
          </scope>
          <scope name="__RegexpOptions" attributes="private" doc="">
            <variable name="pattern" citdl="String?" doc="override pattern with this string. Default is provided based on locale." />
            <variable name="locale" citdl="String?" doc="override the locale used to determine formatting rules" />
            <variable name="strict" citdl="Boolean?" doc="strict parsing, false by default" />
            <variable name="places" citdl="Number|String?" doc="number of decimal places to accept: Infinity, a positive number, or a range &amp;amp;quot;n,m&amp;amp;quot;. Defined by pattern or Infinity if pattern not provided." />
          </scope>
          <scope name="regexp" ilk="function" signature="regexp(options)" doc="Builds the regular needed to parse a number" returns="String" attributes="private">
            <variable ilk="argument" name="options" citdl="dojo.number.__RegexpOptions" />
          </scope>
          <scope name="_parseInfo" ilk="function" signature="_parseInfo(options)" returns="Object" attributes="private" doc="">
            <variable ilk="argument" name="options" citdl="Object" />
          </scope>
          <scope name="__ParseOptions" attributes="private" doc="">
            <variable name="pattern" citdl="String" doc="override pattern with this string. Default is provided based on locale." />
            <variable name="locale" citdl="String" doc="override the locale used to determine formatting rules" />
            <variable name="strict" citdl="Boolean?" doc="strict parsing, false by default" />
            <variable name="currency" citdl="Object" doc="object with currency information" />
          </scope>
          <scope name="parse" ilk="function" signature="parse(expression,options)" doc="Convert a properly formatted string to a primitive Number, using locale-specific settings." returns="NaN|Number" attributes="private">
            <variable ilk="argument" name="expression" citdl="String" doc="A string representation of a Number" />
            <variable ilk="argument" name="options" citdl="dojo.number.__ParseOptions" />
          </scope>
          <scope name="__RealNumberRegexpFlags" ilk="function" attributes="private" doc="">
            <variable name="places" citdl="Number?" doc="The integer number of decimal places or a range given as &amp;amp;quot;n,m&amp;amp;quot;. If not given, the decimal part is optional and the number of places is unlimited." />
            <variable name="decimal" citdl="String?" doc="A string for the character used as the decimal point. Default is &amp;amp;quot;.&amp;amp;quot;." />
            <variable name="fractional" citdl="Boolean|Array?" doc="Whether decimal places are allowed. Can be true, false, or [true, false]. Default is [true, false]" />
            <variable name="exponent" citdl="Boolean|Array?" doc="Express in exponential notation. Can be true, false, or [true, false]. Default is [true, false], (i.e. will match if the exponential part is present are not)." />
            <variable name="eSigned" citdl="Boolean|Array?" doc="The leading plus-or-minus sign on the exponent. Can be true, false, or [true, false]. Default is [true, false], (i.e. will match if it is signed or unsigned). flags in regexp.integer can be applied." />
          </scope>
          <scope name="_realNumberRegexp" ilk="function" signature="_realNumberRegexp(flags)" doc="Builds a regular expression to match a real number in exponential notation" returns="String" attributes="private">
            <variable ilk="argument" name="flags" citdl="dojo.number.__RealNumberRegexpFlags" />
          </scope>
          <scope name="__IntegerRegexpFlags" ilk="function" attributes="private" doc="">
            <variable name="signed" citdl="Boolean?" doc="The leading plus-or-minus sign. Can be true, false, or `[true,false]`. Default is `[true, false]`, (i.e. will match if it is signed or unsigned)." />
            <variable name="separator" citdl="String?" doc="The character used as the thousands separator. Default is no separator. For more than one symbol use an array, e.g. `[&amp;amp;quot;,&amp;amp;quot;, &amp;amp;quot;&amp;amp;quot;]`, makes ',' optional." />
            <variable name="groupSize" citdl="Number?" doc="group size between separators" />
            <variable name="groupSize2" citdl="Number?" doc="second grouping, where separators 2..n have a different interval than the first separator (for India)" />
          </scope>
          <scope name="_integerRegexp" ilk="function" signature="_integerRegexp(flags)" doc="Builds a regular expression that matches an integer" returns="String" attributes="private">
            <variable ilk="argument" name="flags" citdl="dojo.number.__IntegerRegexpFlags" />
          </scope>
          <scope name="_numberPatternRE" attributes="private" doc="" />
        </variable>
        <scope ilk="function" name="parser" returns="typeof [] == &amp;quot;object&amp;quot;|assume timestamp|the NaN of dates|current date" doc="The Dom/Widget parsing package" />
        <variable name="regexp" citdl="Object" doc="Regular expressions and Builder resources">
          <scope name="escapeString" ilk="function" signature="escapeString(str,except)" doc="Adds escape sequences for special characters in regular expressions">
            <variable ilk="argument" name="str" citdl="String" />
            <variable ilk="argument" name="except" citdl="String" doc="a String with special characters to be left unescaped" />
          </scope>
          <scope name="buildGroupRE" ilk="function" signature="buildGroupRE(arr,re,nonCapture)" doc="Builds a regular expression that groups subexpressions" returns="String" attributes="private">
            <variable ilk="argument" name="arr" citdl="Object|Array" doc="A single value or an array of values." />
            <variable ilk="function" name="re" doc="A function. Takes one parameter and converts it to a regular expression." />
            <variable ilk="argument" name="nonCapture" citdl="Boolean" doc="If true, uses non-capturing match, otherwise matches are retained by regular expression. Defaults to false" />
          </scope>
          <scope name="group" ilk="function" signature="group(expression,nonCapture)" doc="adds group match to expression" returns="String" attributes="private">
            <variable ilk="argument" name="expression" citdl="String" />
            <variable ilk="argument" name="nonCapture" citdl="Boolean" doc="If true, uses non-capturing match, otherwise matches are retained by regular expression." />
          </scope>
        </variable>
        <variable name="rpc" citdl="Object" doc="">
          <scope name="JsonService" ilk="function" doc="">
            <scope name="bustCache" doc="" />
            <scope name="contentType" doc="" />
            <scope name="lastSubmissionId" doc="" />
            <scope name="callRemote" ilk="function" signature="callRemote(method,params)" doc="call an arbitrary remote method without requiring it to be predefined with SMD">
              <variable ilk="argument" name="method" citdl="string" doc="the name of the remote method you want to call." />
              <variable ilk="argument" name="params" citdl="array" doc="of parameters to pass to method" />
            </scope>
            <scope name="bind" ilk="function" signature="bind(method,parameters,deferredRequestHandler,url)" doc="JSON-RPC bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.">
              <variable ilk="argument" name="method" citdl="string" doc="The name of the method we are calling" />
              <variable ilk="argument" name="parameters" citdl="array" doc="The parameters we are passing off to the method" />
              <variable ilk="argument" name="deferredRequestHandler" citdl="deferred" doc="The Deferred object for this particular request" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope name="createRequest" ilk="function" signature="createRequest(method,params)" doc="create a JSON-RPC envelope for the request">
              <variable ilk="argument" name="method" citdl="string" doc="The name of the method we are creating the requst for" />
              <variable ilk="argument" name="params" citdl="array" doc="The array of parameters for this request;" />
            </scope>
            <scope name="parseResults" ilk="function" signature="parseResults(obj)" doc="parse the result envelope and pass the results back to the callback function">
              <variable ilk="argument" name="obj" citdl="anything" doc="Object Object containing envelope of data we recieve from the server" />
            </scope>
          </scope>
          <scope name="JsonpService" ilk="function" doc="Generic JSONP service. Minimally extends RpcService to allow easy definition of nearly any JSONP style service. Example SMD files exist in dojox.data" signature="JsonpService(args,requiredArgs)">
            <variable ilk="argument" name="args" />
            <variable ilk="argument" name="requiredArgs" />
            <scope name="strictArgChecks" doc="" />
            <scope name="bind" ilk="function" signature="bind(method,parameters,deferredRequestHandler,url)" doc="JSONP bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.">
              <variable ilk="argument" name="method" citdl="string" doc="The name of the method we are calling" />
              <variable ilk="argument" name="parameters" citdl="array" doc="The parameters we are passing off to the method" />
              <variable ilk="argument" name="deferredRequestHandler" citdl="deferred" doc="The Deferred object for this particular request" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope name="createRequest" ilk="function" signature="createRequest(parameters)" doc="create a JSONP req params: array The array of parameters for this request;">
              <variable ilk="argument" name="parameters" />
            </scope>
          </scope>
          <scope name="RpcService" ilk="function" signature="RpcService(args)" doc="Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use as a definition for the service">
            <variable ilk="argument" name="args" citdl="object" doc="Takes a number of properties as kwArgs for defining the service. It also accepts a string. When passed a string, it is treated as a url from which it should synchronously retrieve an smd file. Otherwise it is a kwArgs object. It accepts serviceUrl, to manually define a url for the rpc service allowing the rpc system to be used without an smd definition. strictArgChecks forces the system to verify that the # of arguments provided in a call matches those defined in the smd. smdString allows a developer to pass a jsonString directly, which will be converted into an object or alternatively smdObject is accepts an smdObject directly." />
            <variable name="strictArgChecks" doc="" />
            <variable name="serviceUrl" doc="" />
            <scope name="parseResults" ilk="function" signature="parseResults(obj)" doc="">
              <variable ilk="argument" name="obj" citdl="summary" doc="parse the results coming back from an rpc request. this base implementation, just returns the full object subclasses should parse and only return the actual results Object Object that is the return results from an rpc request" />
            </scope>
            <scope name="errorCallback" ilk="function" signature="errorCallback(deferredRequestHandler)" doc="create callback that calls the Deferres errback method">
              <variable ilk="argument" name="deferredRequestHandler" citdl="dojo.Deferred" doc="Deferred The deferred object handling a request." />
            </scope>
            <scope name="resultCallback" ilk="function" signature="resultCallback(deferredRequestHandler)" doc="create callback that calls the Deferred's callback method">
              <variable ilk="argument" name="deferredRequestHandler" citdl="dojo.Deferred" doc="Deferred The deferred object handling a request." />
            </scope>
            <scope name="generateMethod" ilk="function" signature="generateMethod(method,parameters,url)" doc="generate the local bind methods for the remote object">
              <variable ilk="argument" name="method" citdl="string" doc="The name of the method we are generating" />
              <variable ilk="argument" name="parameters" citdl="array" doc="the array of parameters for this call." />
              <variable ilk="argument" name="url" citdl="string" doc="the service url for this call" />
            </scope>
            <scope name="processSmd" ilk="function" signature="processSmd(object)" doc="callback method for reciept of a smd object. Parse the smd and generate functions based on the description">
              <variable ilk="argument" name="object" citdl="smd" doc="object defining this service." />
            </scope>
            <variable name="required" doc="" />
            <variable name="smd" doc="" />
            <variable name="timeout" doc="" />
          </scope>
        </variable>
        <variable name="resources" citdl="Object" doc="" />
        <variable name="robot" citdl="Object" doc="" />
        <variable name="robotx" citdl="Object" doc="" />
        <variable name="string" citdl="Object" doc="String utilities for Dojo">
          <scope name="rep" ilk="function" signature="rep(str,num)" doc="Efficiently replicate a string `n` times." returns="String" attributes="private">
            <variable ilk="argument" name="str" citdl="String" doc="the string to replicate" />
            <variable ilk="argument" name="num" citdl="Integer" doc="number of times to replicate the string" />
          </scope>
          <scope name="pad" ilk="function" signature="pad(text,size,ch,end)" doc="Pad a string to guarantee that it is at least `size` length by filling with the character `ch` at either the start or end of the string. Pads at the start, by default." returns="String" attributes="private">
            <variable ilk="argument" name="text" citdl="String" doc="the string to pad" />
            <variable ilk="argument" name="size" citdl="Integer" doc="length to provide padding" />
            <variable ilk="argument" name="ch" citdl="String" doc="character to pad, defaults to '0'" />
            <variable ilk="argument" name="end" citdl="Boolean" doc="adds padding at the end if true, otherwise pads at start" />
          </scope>
          <scope name="substitute" ilk="function" signature="substitute(template,map,transform,thisObject)" doc="Performs parameterized substitutions on a string. Throws an exception if any parameter is unmatched.">
            <variable ilk="argument" name="template" citdl="String" doc="a string with expressions in the form `${key}` to be replaced or `${key:format}` which specifies a format function." />
            <variable ilk="argument" name="map" citdl="Object|Array" doc="hash to search for substitutions" />
            <variable ilk="function" name="transform" doc="a function to process all parameters before substitution takes place, e.g. dojo.string.encodeXML" />
            <variable ilk="argument" name="thisObject" citdl="Object" doc="where to look for optional format function; default to the global namespace" />
          </scope>
          <scope name="trim" ilk="function" signature="trim(str)" doc="trims whitespaces from both sides of the string" returns="String" attributes="private">
            <variable ilk="argument" name="str" citdl="String" />
          </scope>
        </variable>
        <variable name="tests" citdl="Object" doc="D.O.H. Test files for Dojo unit testing." />
      </scope>
    </scope>
  </file>
</codeintel>
