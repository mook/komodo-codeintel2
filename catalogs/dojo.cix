<codeintel description="Dojo Toolkit API - version 1.3.0" encoding="UTF-8" version="2.0">
  <file lang="JavaScript" path="">
    <scope ilk="blob" lang="JavaScript" name="dojo_v130">
      <scope ilk="class" name="dijit">
        <scope doc="A checkbox-like menu item for toggling on and off" ilk="function" name="CheckedMenuItem">
          <scope doc="" name="templatePath" />
          <variable citdl="Boolean" doc="Our checked state" name="checked" />
          <scope attributes="private" doc="Hook so attr(&apos;checked&apos;, bool) works. Sets the class and state for the check box." ilk="function" name="_setCheckedAttr" signature="_setCheckedAttr(checked)">
            <variable citdl="Boolean" ilk="argument" name="checked" />
          </scope>
          <scope doc="User defined function to handle check/uncheck events" ilk="function" name="onChange" signature="onChange(checked)">
            <variable citdl="Boolean" ilk="argument" name="checked" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Clicking this item just toggles its state" ilk="function" name="_onClick" signature="_onClick(e)">
            <variable citdl="Event" ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
        </scope>
        <scope doc="A keyboard accessible color-picking widget" ilk="function" name="ColorPalette">
          <scope citdl="Number" doc="Number of milliseconds before a held key or button becomes typematic" name="defaultTimeout" />
          <scope citdl="Number" doc="Fraction of time used to change the typematic timer between events 1.0 means that each typematic event fires at defaultTimeout intervals &amp;amp;lt; 1.0 means that each typematic event fires at an increasing faster rate" name="timeoutChangeRate" />
          <scope citdl="String" doc="Size of grid, either &amp;amp;quot;7x10&amp;amp;quot; or &amp;amp;quot;3x4&amp;amp;quot;." name="palette" />
          <variable citdl="String" doc="The value of the selected color." name="value" />
          <variable attributes="private" citdl="Integer" doc="Index of the currently focused color." name="_currentFocus">
            <scope name="tags" />
          </variable>
          <variable attributes="private" citdl="Integer" doc="This is the number of colors horizontally across." name="_xDim">
            <scope name="tags" />
          </variable>
          <variable attributes="private" citdl="Integer" doc="/  This is the number of colors vertically down." name="_yDim">
            <scope name="tags" />
          </variable>
          <variable attributes="private" citdl="Object" doc="" name="_palettes">
            <scope doc="" name="7x10" />
            <scope doc="" name="3x4" />
          </variable>
          <variable attributes="private" citdl="Object" doc="" name="_imagePaths">
            <scope doc="" name="7x10" />
            <scope doc="" name="3x4" />
          </variable>
          <variable attributes="private" citdl="Object" doc="" name="_paletteCoords">
            <scope doc="" name="leftOffset" />
            <scope doc="" name="topOffset" />
            <scope doc="" name="cWidth" />
          </variable>
          <scope citdl="String" doc="Path to the template of this widget." name="templatePath" />
          <variable attributes="private" citdl="Object" doc="" name="_paletteDims">
            <variable citdl="Object" doc="" name="7x10">
              <scope doc="" name="width" />
              <scope doc="" name="height" />
            </variable>
            <variable citdl="Object" doc="" name="3x4">
              <scope doc="" name="width" />
              <scope doc="" name="height" />
            </variable>
          </variable>
          <scope citdl="String" doc="Widget tab index." name="tabIndex" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="Focus this ColorPalette. Puts focus on the first swatch." ilk="function" name="focus" />
          <scope doc="Callback when a color is selected." ilk="function" name="onChange" signature="onChange(color)">
            <variable citdl="String" doc="Hex value corresponding to color. console.debug(&amp;amp;quot;Color selected is: &amp;amp;quot;+color);" ilk="argument" name="color" />
          </scope>
          <scope attributes="private" doc="Focus the first cell in the color picker, or the previously selected cell, if there is one" ilk="function" name="_focusFirst">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for when focus goes to the ColorPalette itself. Shifts focus to the first color or the previously selected color." ilk="function" name="_onDivNodeFocus" signature="_onDivNodeFocus(evt)">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope attributes="private" doc="Handler for when the ColorPalette or a color cell inside of it get focus" ilk="function" name="_onFocus" />
          <scope attributes="private" doc="Handler for when the ColorPalette and the color cell inside of it lose focus" ilk="function" name="_onBlur">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for click, enter key &amp;amp;amp; space key. Selects the color." ilk="function" name="_onCellDijitclick" signature="_onCellDijitclick(evt)">
            <variable citdl="Event" doc="The event." ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for onMouseOver. Put focus on the color under the mouse." ilk="function" name="_onCellMouseEnter" signature="_onCellMouseEnter(evt)">
            <variable citdl="Event" doc="The mouse event." ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for onFocus of a cell. Removes highlight of the color that just lost focus, and highlights the new color." ilk="function" name="_onCellFocus" signature="_onCellFocus(evt)">
            <variable citdl="Event" doc="The focus event." ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called when a color is hovered or focused." ilk="function" name="_setCurrent" signature="_setCurrent(node)">
            <variable citdl="Node" ilk="argument" name="node" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="needed for Firefox 2 on Mac OS X" ilk="function" name="_onCellBlur" signature="_onCellBlur(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Removes the hover CSS class for the specified cell" ilk="function" name="_removeCellHighlight" signature="_removeCellHighlight(index)">
            <variable ilk="argument" name="index" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="This selects a color. It triggers the onChange event area: The area node that covers the color being selected." ilk="function" name="_selectColor" signature="_selectColor(selectNode)">
            <variable ilk="argument" name="selectNode" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="This is the callback for typematic. It changes the focus and the highlighed color." ilk="function" name="_navigateByKey" signature="_navigateByKey(increment,typeCount)">
            <variable citdl="How" doc="much the key is navigated." ilk="argument" name="increment" />
            <variable citdl="How" doc="many times typematic has fired." ilk="argument" name="typeCount" />
          </scope>
          <scope name="domNode" />
          <variable attributes="private" doc="" name="_cellNodes" />
          <variable doc="" name="colorNames" />
        </scope>
        <scope doc="The Declaration widget allows a developer to declare new widget classes directly from a snippet of markup." ilk="function" name="Declaration">
          <scope attributes="private" citdl="Boolean" doc="Flag to parser to leave alone the script tags contained inside of me" name="_noScript">
            <scope name="tags" />
          </scope>
          <scope citdl="String" doc="Name of class being declared, ex: &amp;amp;quot;acme.myWidget&amp;amp;quot;" name="widgetClass" />
          <scope doc="" name="defaults" />
          <scope doc="" ilk="function" name="buildRendering" />
        </scope>
        <scope doc="A modal dialog Widget" ilk="function" name="Dialog">
          <scope doc="" name="templateString" />
          <scope doc="" name="templatePath" />
          <scope doc="" name="attributeMap" />
          <variable citdl="Boolean" doc="True if Dialog is currently displayed on screen." name="open" />
          <scope citdl="Integer" doc="The time in milliseconds it takes the dialog to fade in and out" name="duration" />
          <scope citdl="Boolean" doc="A Toggle to modify the default focus behavior of a Dialog, which is to re-focus the element which had focus before being opened. False will disable refocusing. Default: true" name="refocus" />
          <scope citdl="Boolean" doc="A Toggle to modify the default focus behavior of a Dialog, which is to focus on the first dialog element after opening the dialog. False will disable autofocusing. Default: true" name="autofocus" />
          <variable attributes="private" citdl="readonly" doc="DomNode The pointer to the first focusable node in the dialog. Set by `dijit._DialogMixin._getFocusItems`." name="_firstFocusItem">
            <scope name="tags" />
          </variable>
          <scope attributes="private" citdl="readonly" doc="DomNode The pointer to which node has focus prior to our dialog. Set by `dijit._DialogMixin._getFocusItems`." name="_lastFocusItem">
            <scope name="tags" />
          </scope>
          <scope citdl="Boolean" doc="Don&apos;t change this parameter from the default value. This ContentPane parameter doesn&apos;t make sense for Dialog, since Dialog is never a child of a layout container, nor can you specify the size of Dialog in order to control the size of an inner widget." name="doLayout">
            <scope name="tags" />
          </scope>
          <scope citdl="Boolean" doc="Toggles the moveable aspect of the Dialog. If true, Dialog can be dragged by it&apos;s title. If false it will remain centered in the viewport." name="draggable" />
          <scope attributes="private" citdl="Boolean" doc="Does this Dialog attempt to restore the width and height after becoming too small?" name="_fixSizes" />
          <scope doc="" ilk="function" name="postMixInProperties" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="Called when data has been loaded from an href. Unlike most other callbacks, this function can be connected to (via `dojo.connect`) but should *not* be overriden." ilk="function" name="onLoad">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called after dragging the Dialog. Calculates the relative offset of the Dialog in relation to the viewport." ilk="function" name="_endDrag" signature="_endDrag(e)">
            <variable ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Stuff we need to do before showing the Dialog for the first time (but we defer it until right beforehand, for performance reasons)." ilk="function" name="_setup">
            <variable name="tags" />
          </scope>
          <scope doc="" ilk="function" name="uninitialize" />
          <scope attributes="private" doc="Make sure the dialog is small enough to fit in viewport." ilk="function" name="_size">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Position modal dialog in the viewport. If no relative offset in the viewport has been determined (by dragging, for instance), center the node. Otherwise, use the Dialog&apos;s stored relative offset, and position the node to top: left: values based on the viewport." ilk="function" name="_position">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handles the keyboard events for accessibility reasons" ilk="function" name="_onKey" returns="just let it go" signature="_onKey(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope doc="Display the dialog" ilk="function" name="show" />
          <scope attributes="private" doc="" ilk="function" name="hide" returns="just let it go" />
          <scope doc="Position the Dialog and the underlay" ilk="function" name="layout">
            <variable name="tags" />
          </scope>
          <scope doc="" ilk="function" name="destroy" />
          <scope attributes="private" doc="Called when user hovers over close icon" ilk="function" name="_onCloseEnter">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called when user stops hovering over close icon" ilk="function" name="_onCloseLeave">
            <variable name="tags" />
          </scope>
          <variable attributes="private" doc="" name="_modalconnects" />
          <variable attributes="private" doc="" name="_relativePosition" />
          <variable attributes="private" doc="" name="_moveable" />
          <variable attributes="private" doc="" name="_fadeIn" />
          <variable attributes="private" doc="" name="_fadeOut" />
          <variable attributes="private" doc="" name="_alreadyInitialized" />
          <variable attributes="private" doc="" name="_oldViewport" />
          <variable attributes="private" doc="" name="_savedFocus" />
          <variable attributes="private" doc="" name="_scrollConnected" />
        </scope>
        <scope doc="A shared instance of a `dijit.DialogUnderlay`" ilk="function" name="_underlay" signature="_underlay(kwArgs)">
          <variable ilk="argument" name="kwArgs" />
        </scope>
        <scope doc="The component that blocks the screen behind a `dijit.Dialog`" ilk="function" name="DialogUnderlay">
          <scope doc="" name="templateString" />
          <scope citdl="String" doc="Id of the dialog.... DialogUnderlay&apos;s id is based on this id" name="dialogId" />
          <scope citdl="String" doc="This class name is used on the DialogUnderlay node, in addition to dijitDialogUnderlay" name="class" />
          <variable citdl="Object" doc="" name="attributeMap">
            <scope doc="" name="id" />
          </variable>
          <scope attributes="private" doc="" ilk="function" name="_setDialogIdAttr" signature="_setDialogIdAttr(id)">
            <variable ilk="argument" name="id" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_setClassAttr" signature="_setClassAttr(clazz)">
            <variable ilk="argument" name="clazz" />
          </scope>
          <scope doc="Append the underlay to the body" ilk="function" name="postCreate" />
          <scope doc="Sets the background to the size of the viewport" ilk="function" name="layout">
            <variable name="tags" />
          </scope>
          <scope doc="Show the dialog underlay" ilk="function" name="show" />
          <scope doc="Hides the dialog underlay" ilk="function" name="hide" />
          <scope doc="" ilk="function" name="uninitialize" />
          <scope name="node">
            <variable doc="" name="className" />
          </scope>
          <variable doc="" name="bgIframe">
            <scope name="iframe" />
          </variable>
          <scope name="domNode" />
        </scope>
        <scope doc="Runs on widget initialization to setup arrays etc." ilk="function" name="Editor">
          <variable name="tags" />
          <variable citdl="String[" doc="A list of plugin names (as strings) or instances (as objects) for this widget." name="plugins" />
          <scope citdl="String[" doc="A list of extra plugin names which will be appended to plugins array" name="extraPlugins" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="" ilk="function" name="destroy" />
          <scope doc="takes a plugin name as a string or a plugin instance and adds it to the toolbar and associates it with this editor instance. The resulting plugin is added to the Editor&apos;s plugins array. If index is passed, it&apos;s placed in the plugins array at that index. No big magic, but a nice helper for passing in plugin names via markup." ilk="function" name="addPlugin" signature="addPlugin(plugin,index)">
            <variable citdl="String||Object" doc="String, args object or plugin instance  args: This object will be passed to the plugin constructor" ilk="argument" name="plugin" />
            <variable citdl="Integer" doc="Used when creating an instance from something already in this.plugins. Ensures that the new instance is assigned to this.plugins at that index." ilk="argument" name="index" />
          </scope>
          <scope doc="Exists to make Editor work as a child of a layout widget. Developers don&apos;t need to call this method." ilk="function" name="startup">
            <variable name="tags" />
          </scope>
          <scope doc="Resize the editor to the specified size, see `dijit.layout._LayoutWidget.resize`" ilk="function" name="resize" signature="resize(size)">
            <variable ilk="argument" name="size" />
          </scope>
          <scope doc="Called from `dijit.layout._LayoutWidget.resize`. This shouldn&apos;t be called directly" ilk="function" name="layout">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="IE only to prevent 2 clicks to focus" ilk="function" name="_onIEMouseDown" signature="_onIEMouseDown(e)">
            <variable citdl="Event" ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope doc="Called on IE right before focus is lost. Saves the selected range." ilk="function" name="onBeforeDeactivate" signature="onBeforeDeactivate(e)">
            <variable ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope citdl="Boolean" doc="Whether we shall use custom undo/redo support instead of the native browser support. By default, we only enable customUndo for IE, as it has broken native undo/redo support. Note: the implementation does support other browsers which have W3C DOM2 Range API implemented." name="customUndo" />
          <scope citdl="Integer" doc="When using customUndo, not every keystroke will be saved as a step. Instead typing (including delete) will be grouped together: after a user stops typing for editActionInterval seconds, a step will be saved; if a user resume typing within editActionInterval seconds, the timeout will be restarted. By default, editActionInterval is 3 seconds." name="editActionInterval" />
          <scope doc="Called to note that the user has started typing alphanumeric characters, if it&apos;s not already noted. Deals with saving undo; see editActionInterval parameter." ilk="function" name="beginEditing" signature="beginEditing(cmd)">
            <variable ilk="argument" name="cmd" />
            <variable name="tags" />
          </scope>
          <variable attributes="private" doc="" name="_steps" />
          <variable attributes="private" doc="" name="_undoedSteps" />
          <variable doc="" name="commands" />
          <variable doc="" name="toolbar" />
          <variable attributes="private" doc="" name="_plugins" />
          <scope name="editingArea" />
          <scope name="iframe" />
          <variable attributes="private" doc="" name="_layoutMode" />
          <variable attributes="private" doc="" name="_inEditing" />
          <variable attributes="private" doc="" name="_editTimer" />
          <variable attributes="private" doc="" name="_editInterval" />
        </scope>
        <scope doc="Sets up private arrays etc." ilk="function" name="InlineEditBox">
          <variable name="tags" />
          <variable citdl="Boolean" doc="Is the node currently in edit mode?" name="editing">
            <scope name="tags" />
          </variable>
          <scope citdl="Boolean" doc="Changing the value automatically saves it; don&apos;t have to push save button (and save button isn&apos;t even displayed)" name="autoSave" />
          <scope citdl="String" doc="Save button label" name="buttonSave" />
          <scope citdl="String" doc="Cancel button label" name="buttonCancel" />
          <scope citdl="Boolean" doc="Set this to true if the specified Editor&apos;s value should be interpreted as HTML rather than plain text (ex: `dijit.Editor`)" name="renderAsHtml" />
          <scope citdl="String" doc="Class name for Editor widget" name="editor" />
          <variable citdl="Object" doc="" name="editorParams" />
          <scope doc="Set this handler to be notified of changes to value." ilk="function" name="onChange" signature="onChange(value)">
            <variable ilk="argument" name="value" />
            <variable name="tags" />
          </scope>
          <scope doc="Set this handler to be notified when editing is cancelled." ilk="function" name="onCancel">
            <variable name="tags" />
          </scope>
          <scope citdl="String" doc="Width of editor. By default it&apos;s width=100% (ie, block mode)." name="width" />
          <variable citdl="String" doc="The display value of the widget in read-only mode" name="value" />
          <scope citdl="String" doc="The text that gets displayed when there is no value (so that the user has a place to click to edit)" name="noValueIndicator">
            <scope name="tags" />
          </scope>
          <scope doc="" ilk="function" name="postMixInProperties" />
          <scope doc="Deprecated. Use attr(&apos;disable&apos;, ...) instead." ilk="function" name="setDisabled" signature="setDisabled(disabled)">
            <variable citdl="Boolean" ilk="argument" name="disabled" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Hook to make attr(&amp;amp;quot;disabled&amp;amp;quot;, ...) work. Set disabled state of widget." ilk="function" name="_setDisabledAttr" signature="_setDisabledAttr(disabled)">
            <variable citdl="Boolean" ilk="argument" name="disabled" />
          </scope>
          <scope attributes="private" doc="Handler for onmouseover event." ilk="function" name="_onMouseOver">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for onmouseout event." ilk="function" name="_onMouseOut">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for onclick event." ilk="function" name="_onClick" signature="_onClick(e)">
            <variable citdl="Event" ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope doc="Display the editor widget in place of the original (read only) markup." ilk="function" name="edit">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Revert to display mode, and optionally focus on display node" ilk="function" name="_showText" signature="_showText(focus)">
            <variable citdl="Boolean" ilk="argument" name="focus" />
          </scope>
          <scope doc="Save the contents of the editor and revert to display mode." ilk="function" name="save" signature="save(focus)">
            <variable citdl="Boolean" doc="Focus on the display mode text" ilk="argument" name="focus" />
            <variable name="tags" />
          </scope>
          <scope doc="Deprecated. Use attr(&apos;value&apos;, ...) instead." ilk="function" name="setValue" signature="setValue(val)">
            <variable citdl="String" ilk="argument" name="val" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Hook to make attr(&amp;amp;quot;value&amp;amp;quot;, ...) work. Inserts specified HTML value into this node, or an &amp;amp;quot;input needed&amp;amp;quot; character if node is blank." ilk="function" name="_setValueAttr" signature="_setValueAttr(val)">
            <variable citdl="String" ilk="argument" name="val" />
          </scope>
          <scope doc="Deprecated. Use attr(&apos;value&apos;) instead." ilk="function" name="getValue">
            <variable name="tags" />
          </scope>
          <scope doc="Revert to display mode, discarding any changes made in the editor" ilk="function" name="cancel" signature="cancel(focus)">
            <variable citdl="Boolean" ilk="argument" name="focus" />
            <variable name="tags" />
          </scope>
          <variable doc="" name="displayNode">
            <variable doc="" name="innerHTML" />
          </variable>
          <variable doc="" name="disabled" />
          <variable doc="" name="editWidget" />
          <variable doc="" name="domNode" />
        </scope>
        <scope doc="Internal widget used by InlineEditBox, displayed when in editing mode to display the editor and maybe save/cancel buttons. Calling code should connect to save/cancel methods to detect when editing is finished  Has mainly the same parameters as InlineEditBox, plus these values:  style: Object Set of CSS attributes of display node, to replicate in editor  value: String Value as an HTML string or plain text string, depending on renderAsHTML flag" ilk="function" name="_InlineEditor">
          <scope doc="" name="templatePath" />
          <scope doc="" name="widgetsInTemplate" />
          <scope doc="" ilk="function" name="postMixInProperties" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="" ilk="function" name="destroy" />
          <scope doc="Return the [display] value of the edit widget" ilk="function" name="getValue" />
          <scope attributes="private" doc="Handler for keypress in the edit box (see template)." ilk="function" name="_onKeyPress" signature="_onKeyPress(e)">
            <variable ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called when focus moves outside the editor" ilk="function" name="_onBlur">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called when the underlying widget fires an onChange event, which means that the user has finished entering the value" ilk="function" name="_onChange">
            <variable name="tags" />
          </scope>
          <scope doc="User overridable function returning a Boolean to indicate if the Save button should be enabled or not - usually due to invalid conditions" ilk="function" name="enableSave">
            <variable name="tags" />
          </scope>
          <scope doc="Focus on the edit widget." ilk="function" name="focus" />
          <variable doc="" name="messages" />
          <variable doc="" name="width" />
          <scope name="domNode" />
          <scope name="editorParams" />
          <variable doc="" name="editWidget">
            <scope name="focusNode">
              <variable doc="" name="tagName" />
            </scope>
          </variable>
          <scope name="buttonContainer" />
          <variable attributes="private" doc="" name="_exitInProgress" />
        </scope>
        <scope doc="Base class for Menu and MenuBar" ilk="function" name="_MenuBase">
          <variable citdl="Widget" doc="pointer to menu that displayed me" name="parentMenu">
            <scope name="tags" />
          </variable>
          <scope citdl="Integer" doc="number of milliseconds before hovering (without clicking) causes the popup to automatically open." name="popupDelay" />
          <scope doc="" ilk="function" name="startup" />
          <scope doc="Attach point for notification about when a menu item has been executed. This is an internal mechanism used for Menus to signal to their parent to close them, because they are about to execute the onClick handler. In general developers should not attach to or override this method." ilk="function" name="onExecute">
            <variable name="tags" />
          </scope>
          <scope doc="Attach point for notification about when the user cancels the current menu This is an internal mechanism used for Menus to signal to their parent to close them. In general developers should not attach to or override this method." ilk="function" name="onCancel" signature="onCancel(closeAll)">
            <variable citdl="Boolean" ilk="argument" name="closeAll" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="This handles the right arrow key (left arrow key on RTL systems), which will either open a submenu, or move to the next item in the ancestor MenuBar" ilk="function" name="_moveToPopup" signature="_moveToPopup(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope doc="Called when cursor is over a MenuItem." ilk="function" name="onItemHover" signature="onItemHover(item)">
            <variable citdl="MenuItem" ilk="argument" name="item" />
          </scope>
          <scope attributes="private" doc="Called when a child MenuItem becomes inactive because focus has been removed from the MenuItem *and* it&apos;s descendant menus." ilk="function" name="_onChildBlur" signature="_onChildBlur(item)">
            <variable ilk="argument" name="item" />
            <variable name="tags" />
          </scope>
          <scope doc="Callback fires when mouse exits a MenuItem" ilk="function" name="onItemUnhover" signature="onItemUnhover(item)">
            <variable citdl="MenuItem" ilk="argument" name="item" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Cancels the popup timer because the user has stop hovering on the MenuItem, etc." ilk="function" name="_stopPopupTimer">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Returns the top menu in this chain of Menus" ilk="function" name="_getTopMenu">
            <variable name="tags" />
          </scope>
          <scope doc="Handle clicks on an item." ilk="function" name="onItemClick" signature="onItemClick(item,evt)">
            <variable citdl="Widget" ilk="argument" name="item" />
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Open the popup to the side of/underneath the current menu item" ilk="function" name="_openPopup">
            <variable name="tags" />
          </scope>
          <scope doc="Callback when this menu is opened. This is called by the popup manager as notification that the menu was opened." ilk="function" name="onOpen" signature="onOpen(e)">
            <variable citdl="Event" ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope doc="Callback when this menu is closed. This is called by the popup manager as notification that the menu was closed." ilk="function" name="onClose">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called when this Menu gets focus from: 1) clicking it 2) tabbing into it 3) being opened by a parent menu. This is not called just from mouse hover." ilk="function" name="_onFocus">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called when focus is moved away from this Menu and it&apos;s submenus." ilk="function" name="_onBlur">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called when submenu is clicked. Close hierarchy of menus." ilk="function" name="_onDescendantExecute">
            <variable name="tags" />
          </scope>
          <variable doc="" name="hover_timer" />
          <variable doc="" name="currentPopup" />
          <variable doc="" name="isShowingNow" />
          <variable doc="" name="focusedChild" />
          <variable doc="" name="isActive" />
        </scope>
        <scope doc="" ilk="function" name="Menu">
          <scope doc="" name="templatePath" />
          <scope citdl="String[" doc="Array of dom node ids of nodes to attach to. Fill this with nodeIds upon widget creation and it becomes context menu for those nodes." name="targetNodeIds">
            <scope name="tags" />
          </scope>
          <scope citdl="Boolean" doc="If true, right clicking anywhere on the window will cause this context menu to open. If false, must specify targetNodeIds." name="contextMenuForWindow">
            <scope name="tags" />
          </scope>
          <scope citdl="Boolean" doc="If true, menu will open on left click instead of right click, similiar to a file menu." name="leftClickToOpen">
            <scope name="tags" />
          </scope>
          <variable attributes="private" citdl="Boolean" doc="Used to record mouse and keyboard events to determine if a context menu is being opened with the keyboard or the mouse." name="_contextMenuWithMouse">
            <scope name="tags" />
          </variable>
          <scope doc="" ilk="function" name="postCreate" />
          <scope attributes="private" doc="Handle keyboard based menu navigation." ilk="function" name="_onKeyPress" signature="_onKeyPress(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Returns the window reference of the passed iframe" ilk="function" name="_iframeContentWindow" returns="Window" signature="_iframeContentWindow(iframe_el)">
            <variable citdl="HTMLIFrameElement" ilk="argument" name="iframe_el" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Returns a reference to the document object inside iframe_el" ilk="function" name="_iframeContentDocument" returns="HTMLDocument" signature="_iframeContentDocument(iframe_el)">
            <variable citdl="HTMLIFrameElement" ilk="argument" name="iframe_el" />
            <variable name="tags" />
          </scope>
          <scope doc="Attach menu to given node" ilk="function" name="bindDomNode" signature="bindDomNode(node)">
            <variable citdl="String|DomNode" ilk="argument" name="node" />
          </scope>
          <scope doc="Detach menu from given node" ilk="function" name="unBindDomNode" signature="unBindDomNode(nodeName)">
            <variable citdl="String|DomNode" ilk="argument" name="nodeName" />
          </scope>
          <scope attributes="private" doc="Code to handle popping up editor using F10 key rather than mouse" ilk="function" name="_contextKey" signature="_contextKey(e)">
            <variable ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Helper to remember when we opened the context menu with the mouse instead of with the keyboard" ilk="function" name="_contextMouse" signature="_contextMouse(e)">
            <variable ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Internal function for opening myself when the user does a right-click or something similar" ilk="function" name="_openMyself" signature="_openMyself(e)">
            <variable citdl="Event" ilk="argument" name="e" />
            <variable name="tags" />
            <variable attributes="private" doc="" ilk="function" name="_onBlur" />
          </scope>
          <scope doc="" ilk="function" name="uninitialize" />
          <variable attributes="private" doc="" name="_openSubMenuKey" />
          <variable attributes="private" doc="" name="_closeSubMenuKey" />
          <variable attributes="private" doc="" name="_onBlur" />
          <variable attributes="private" doc="" name="_bindings" />
          <scope attributes="private" doc="" ilk="function" name="_getTopMenu" />
          <scope attributes="private" doc="" ilk="function" name="_moveToPopup" signature="_moveToPopup(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
          </scope>
          <scope attributes="private" doc="Close all popups that are open and descendants of this menu" ilk="function" name="_onChildBlur" signature="_onChildBlur(item)">
            <variable ilk="argument" name="item" />
          </scope>
          <scope attributes="private" doc="open the popup to the side of the current menu item" ilk="function" name="_openPopup" />
          <scope attributes="private" doc="" ilk="function" name="_stopPopupTimer" />
          <variable doc="" name="currentPopup" />
          <variable doc="" name="focusedChild" />
          <variable doc="" name="hover_timer" />
          <variable doc="" name="isShowingNow" />
          <scope doc="attach point for notification about when the user cancels the current menu" ilk="function" name="onCancel" signature="onCancel(closeAll)">
            <variable citdl="Boolean" ilk="argument" name="closeAll" />
          </scope>
          <scope doc="callback when this menu is closed" ilk="function" name="onClose" />
          <scope doc="attach point for notification about when a menu item has been executed" ilk="function" name="onExecute" />
          <scope doc="user defined function to handle clicks on an item" ilk="function" name="onItemClick" signature="onItemClick(item,evt)">
            <variable citdl="Widget" ilk="argument" name="item" />
            <variable citdl="Event" ilk="argument" name="evt" />
          </scope>
          <scope doc="Called when cursor is over a MenuItem" ilk="function" name="onItemHover" signature="onItemHover(item)">
            <variable citdl="MenuItem" ilk="argument" name="item" />
          </scope>
          <scope doc="Callback fires when mouse exits a MenuItem" ilk="function" name="onItemUnhover" signature="onItemUnhover(item)">
            <variable citdl="MenuItem" ilk="argument" name="item" />
          </scope>
          <scope doc="Open menu relative to the mouse" ilk="function" name="onOpen" signature="onOpen(e)">
            <variable citdl="Event" ilk="argument" name="e" />
          </scope>
          <variable citdl="Widget" doc="pointer to menu that displayed me" name="parentMenu" />
          <scope citdl="Integer" doc="number of milliseconds before hovering (without clicking) causes the popup to automatically open" name="popupDelay" />
          <scope doc="" ilk="function" name="startup" />
          <scope doc="" name="templateString" />
        </scope>
        <scope doc="Sets up local variables etc." ilk="function" name="MenuBar">
          <scope doc="" name="templatePath" />
          <scope attributes="private" citdl="Boolean" doc="This is a MenuBar widget, not a (vertical) Menu widget." name="_isMenuBar">
            <scope name="tags" />
          </scope>
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="" ilk="function" name="focusChild" signature="focusChild(item)">
            <variable ilk="argument" name="item" />
          </scope>
          <scope attributes="private" doc="Handle keyboard based menu navigation." ilk="function" name="_onKeyPress" signature="_onKeyPress(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <variable attributes="private" doc="" name="_orient" />
        </scope>
        <scope doc="" ilk="function" name="_MenuBarItemMixin">
          <scope doc="" name="templatePath" />
          <scope doc="" name="attributeMap" />
        </scope>
        <scope doc="Item in a MenuBar that&apos;s clickable, and doesn&apos;t spawn a submenu when pressed (or hovered)" ilk="function" name="MenuBarItem" />
        <scope doc="" ilk="function" name="MenuItem">
          <scope doc="" name="templatePath" />
          <scope doc="" name="attributeMap" />
          <scope citdl="String" doc="Menu text" name="label" />
          <scope citdl="String" doc="Class to apply to DOMNode to make it display an icon." name="iconClass" />
          <variable citdl="String" doc="Text for the accelerator (shortcut) key combination. Note that although Menu can display accelerator keys there is no infrastructure to actually catch and execute these accelerators." name="accelKey" />
          <variable citdl="Boolean" doc="If true, the menu item is disabled. If false, the menu item is enabled." name="disabled" />
          <scope attributes="private" doc="" ilk="function" name="_fillContent" signature="_fillContent(source)">
            <variable citdl="DomNode" ilk="argument" name="source" />
          </scope>
          <scope doc="" ilk="function" name="postCreate" />
          <scope attributes="private" doc="Handler when mouse is moved onto menu item" ilk="function" name="_onHover">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler when mouse is moved off of menu item, possibly to a child menu, or maybe to a sibling menuitem or somewhere else entirely." ilk="function" name="_onUnhover" />
          <scope attributes="private" doc="Internal handler for click events on MenuItem." ilk="function" name="_onClick" signature="_onClick(evt)">
            <variable ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope doc="User defined function to handle clicks" ilk="function" name="onClick" signature="onClick(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope doc="Focus on this MenuItem" ilk="function" name="focus" />
          <scope attributes="private" doc="This is called by the focus manager when focus goes to this MenuItem or a child menu." ilk="function" name="_onFocus">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Indicate that this node is the currently selected one" ilk="function" name="_setSelected" signature="_setSelected(selected)">
            <variable ilk="argument" name="selected" />
          </scope>
          <scope doc="Deprecated. Use attr(&apos;label&apos;, ...) instead." ilk="function" name="setLabel" signature="setLabel(content)">
            <variable citdl="String" ilk="argument" name="content" />
            <variable name="tags" />
          </scope>
          <scope doc="Deprecated. Use attr(&apos;disabled&apos;, bool) instead." ilk="function" name="setDisabled" signature="setDisabled(disabled)">
            <variable citdl="Boolean" ilk="argument" name="disabled" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Hook for attr(&apos;disabled&apos;, ...) to work. Enable or disable this menu item." ilk="function" name="_setDisabledAttr" signature="_setDisabledAttr(value)">
            <variable citdl="Boolean" ilk="argument" name="value" />
          </scope>
          <scope attributes="private" doc="Hook for attr(&apos;accelKey&apos;, ...) to work. Set accelKey on this menu item." ilk="function" name="_setAccelKeyAttr" signature="_setAccelKeyAttr(value)">
            <variable citdl="String" ilk="argument" name="value" />
          </scope>
          <scope name="accelKeyNode">
            <variable doc="" name="innerHTML" />
          </scope>
          <scope doc="" name="templateString" />
        </scope>
        <scope doc="A line between two menu items" ilk="function" name="MenuSeparator">
          <scope doc="" name="templatePath" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope attributes="private" doc="Override to always return false" ilk="function" name="isFocusable" returns="Boolean">
            <variable name="tags" />
          </scope>
        </scope>
        <scope doc="Item in a MenuBar like &amp;amp;quot;File&amp;amp;quot; or &amp;amp;quot;Edit&amp;amp;quot;, that spawns a submenu when pressed (or hovered)" ilk="function" name="PopupMenuBarItem" />
        <scope doc="" ilk="function" name="PopupMenuItem">
          <scope attributes="private" doc="When Menu is declared in markup, this code gets the menu label and the popup widget from the srcNodeRef." ilk="function" name="_fillContent">
            <variable name="tags" />
          </scope>
          <scope doc="" ilk="function" name="startup" />
          <scope doc="" ilk="function" name="destroyDescendants" />
          <variable doc="" name="dropDownContainer" />
          <variable doc="" name="popup">
            <scope name="domNode" />
          </variable>
        </scope>
        <scope doc="A progress indication widget, showing the amount completed (often the percentage completed) of a task." ilk="function" name="ProgressBar">
          <variable citdl="String" doc="(Percentage or Number) Number or percentage indicating amount of task completed. With &amp;amp;quot;%&amp;amp;quot;: percentage value, 0% &amp;amp;lt;= progress &amp;amp;lt;= 100%, or without &amp;amp;quot;%&amp;amp;quot;: absolute value, 0 &amp;amp;lt;= progress &amp;amp;lt;= maximum TODO: rename to value for 2.0" name="progress">
            <scope name="tags" />
          </variable>
          <scope citdl="Float" doc="Max sample number" name="maximum">
            <scope name="tags" />
          </scope>
          <scope citdl="Number" doc="Number of places to show in values; 0 by default" name="places">
            <scope name="tags" />
          </scope>
          <scope citdl="Boolean" doc="If false: show progress value (number or percentage). If true: show that a process is underway but that the amount completed is unknown." name="indeterminate">
            <scope name="tags" />
          </scope>
          <scope doc="" name="templatePath" />
          <scope attributes="private" citdl="dojo._URL" doc="URL to image to use for indeterminate progress bar when display is in high contrast mode" name="_indeterminateHighContrastImagePath">
            <scope name="tags" />
          </scope>
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="Change attributes of ProgressBar, similar to attr(hash)." ilk="function" name="update" signature="update(attributes)">
            <variable citdl="Object" doc="May provide progress and/or maximum properties on this parameter; see attribute specs for details." ilk="argument" name="attributes" />
          </scope>
          <scope doc="Generates message to show inside progress bar (normally indicating amount of task completed). May be overridden." ilk="function" name="report" signature="report(percent)">
            <variable citdl="float" ilk="argument" name="percent" />
            <variable name="tags" />
          </scope>
          <scope doc="Callback fired when progress updates." ilk="function" name="onChange">
            <variable name="tags" />
          </scope>
          <scope name="label">
            <scope name="firstChild">
              <variable doc="" name="nodeValue" />
            </scope>
          </scope>
        </scope>
        <scope doc="A pane with a title on top, that can be expanded or collapsed." ilk="function" name="TitlePane">
          <scope citdl="String" doc="Title of the pane" name="title" />
          <variable citdl="Boolean" doc="Whether pane is opened or closed." name="open" />
          <scope citdl="Integer" doc="Time in milliseconds to fade in/fade out" name="duration" />
          <scope citdl="String" doc="The root className to use for the various states of this widget" name="baseClass">
            <scope name="tags" />
          </scope>
          <scope doc="" name="templatePath" />
          <scope doc="" name="attributeMap" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope attributes="private" doc="Hook to make attr(&amp;amp;quot;open&amp;amp;quot;, boolean) control the open/closed state of the pane." ilk="function" name="_setOpenAttr" signature="_setOpenAttr(open)">
            <variable citdl="Boolean" doc="True if you want to open the pane, false if you want to close it." ilk="argument" name="open" />
          </scope>
          <scope attributes="private" doc="Hook to make attr(&amp;amp;quot;content&amp;amp;quot;, ...) work. Typically called when an href is loaded. Our job is to make the animation smooth." ilk="function" name="_setContentAttr" signature="_setContentAttr(content)">
            <variable ilk="argument" name="content" />
          </scope>
          <scope doc="Switches between opened and closed state" ilk="function" name="toggle">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Set the open/close css state for the TitlePane" ilk="function" name="_setCss">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for when user hits a key" ilk="function" name="_onTitleKey" signature="_onTitleKey(e)">
            <variable citdl="Event" ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for when someone hovers over my title" ilk="function" name="_onTitleEnter">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler when someone stops hovering over my title" ilk="function" name="_onTitleLeave">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handle blur and focus for this widget" ilk="function" name="_handleFocus" signature="_handleFocus(e)">
            <variable citdl="Event" ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope doc="Deprecated. Use attr(&apos;title&apos;, ...) instead." ilk="function" name="setTitle" signature="setTitle(title)">
            <variable citdl="String" ilk="argument" name="title" />
            <variable name="tags" />
          </scope>
          <scope name="hideNode" />
          <variable attributes="private" doc="" name="_wipeIn" />
          <variable attributes="private" doc="" name="_wipeOut" />
          <scope name="arrowNodeInner">
            <variable doc="" name="innerHTML" />
          </scope>
          <scope name="titleNode">
            <variable doc="" name="innerHTML" />
          </scope>
        </scope>
        <scope doc="A Toolbar widget, used to hold things like `dijit.Editor` buttons" ilk="function" name="Toolbar">
          <scope doc="" name="templateString" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="" ilk="function" name="startup" />
        </scope>
        <scope doc="A spacer between two `dijit.Toolbar` items" ilk="function" name="ToolbarSeparator">
          <scope doc="" name="templateString" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="This widget isn&apos;t focusable, so pass along that fact." ilk="function" name="isFocusable">
            <variable name="tags" />
          </scope>
        </scope>
        <scope doc="Internal widget that holds the actual tooltip markup, which occurs once per page. Called by Tooltip widgets which are just containers to hold the markup tags: protected" ilk="function" name="_MasterTooltip">
          <scope citdl="Integer" doc="Milliseconds to fade in/fade out" name="duration" />
          <scope doc="" name="templatePath" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="Display tooltip w/specified contents to right of specified node (To left if there&apos;s no space on the right, or if LTR==right)" ilk="function" name="show" signature="show(innerHTML,aroundNode,position)">
            <variable citdl="String" ilk="argument" name="innerHTML" />
            <variable citdl="DomNode" ilk="argument" name="aroundNode" />
            <variable citdl="String[]" ilk="argument" name="position" />
          </scope>
          <scope doc="Private function to set CSS for tooltip node based on which position it&apos;s in. This is called by the dijit popup code." ilk="function" name="orient" signature="orient(node,aroundCorner,tooltipCorner)">
            <variable citdl="DomNode" ilk="argument" name="node" />
            <variable citdl="String" ilk="argument" name="aroundCorner" />
            <variable citdl="String" ilk="argument" name="tooltipCorner" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called at end of fade-in operation" ilk="function" name="_onShow">
            <variable name="tags" />
          </scope>
          <scope doc="Hide the tooltip" ilk="function" name="hide" signature="hide(aroundNode)">
            <variable ilk="argument" name="aroundNode" />
          </scope>
          <scope attributes="private" doc="Called at end of fade-out operation" ilk="function" name="_onHide">
            <variable name="tags" />
          </scope>
          <variable doc="" name="bgIframe" />
          <variable doc="" name="fadeIn" />
          <variable doc="" name="fadeOut" />
          <variable doc="" name="aroundNode" />
          <variable attributes="private" doc="" name="_onDeck" />
          <scope name="containerNode">
            <variable doc="" name="innerHTML" />
          </scope>
          <scope name="domNode" />
          <variable doc="" name="isShowingNow" />
        </scope>
        <scope doc="" ilk="function" name="Tooltip">
          <scope doc="" name="label" />
          <scope citdl="Integer" doc="Number of milliseconds to wait after hovering over/focusing on the object, before the tooltip is displayed." name="showDelay" />
          <variable citdl="String[" doc="Id&apos;s of domNodes to attach the tooltip to. When user hovers over any of the specified dom nodes, the tooltip will appear.  Note: Currently connectId can only be specified on initialization, it cannot be changed via attr(&apos;connectId&apos;, ...)  Note: in 2.0 this will be renamed to connectIds for less confusion." name="connectId">
            <scope name="tags" />
          </variable>
          <scope citdl="String[" doc="See description of `dijit.Tooltip.defaultPosition` for details on position parameter." name="position" />
          <scope attributes="private" doc="" ilk="function" name="_setConnectIdAttr" signature="_setConnectIdAttr(ids)">
            <variable ilk="argument" name="ids" />
          </scope>
          <scope doc="" ilk="function" name="postCreate" />
          <scope attributes="private" doc="Handler for mouseenter event on the target node" ilk="function" name="_onMouseEnter" signature="_onMouseEnter(e)">
            <variable citdl="Event" ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for mouseleave event on the target node" ilk="function" name="_onMouseLeave" signature="_onMouseLeave(e)">
            <variable citdl="Event" ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for focus event on the target node" ilk="function" name="_onFocus" signature="_onFocus(e)">
            <variable citdl="Event" ilk="argument" name="e" />
          </scope>
          <scope attributes="private" doc="Handler for blur event on the target node" ilk="function" name="_onBlur" signature="_onBlur(e)">
            <variable citdl="Event" ilk="argument" name="e" />
          </scope>
          <scope attributes="private" doc="Despite the name of this method, it actually handles both hover and focus events on the target node, setting a timer to show the tooltip." ilk="function" name="_onHover" signature="_onHover(e)">
            <variable citdl="Event" ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Despite the name of this method, it actually handles both mouseleave and blur events on the target node, hiding the tooltip." ilk="function" name="_onUnHover" signature="_onUnHover(e)">
            <variable citdl="Event" ilk="argument" name="e" />
          </scope>
          <scope doc="Display the tooltip; usually not called directly." ilk="function" name="open" signature="open(target)">
            <variable citdl="DomNode" ilk="argument" name="target" />
            <variable name="tags" />
          </scope>
          <scope doc="Hide the tooltip or cancel timer for show of tooltip" ilk="function" name="close">
            <variable name="tags" />
          </scope>
          <scope doc="" ilk="function" name="uninitialize" />
          <variable attributes="private" doc="" name="_connectNodes" />
          <variable attributes="private" doc="" name="_focus" />
          <variable attributes="private" doc="" name="_showTimer" />
          <variable attributes="private" doc="" name="_connectNode" />
          <scope doc="" name="defaultPosition" />
        </scope>
        <scope doc="Display tooltip w/specified contents in specified position. See description of dijit.Tooltip.defaultPosition for details on position parameter. If position is not specified then dijit.Tooltip.defaultPosition is used." ilk="function" name="showTooltip" signature="showTooltip(innerHTML,aroundNode,position)">
          <variable citdl="String" ilk="argument" name="innerHTML" />
          <variable citdl="DomNode" ilk="argument" name="aroundNode" />
          <variable citdl="String[]" ilk="argument" name="position" />
        </scope>
        <scope doc="Hide the tooltip" ilk="function" name="hideTooltip" signature="hideTooltip(aroundNode)">
          <variable ilk="argument" name="aroundNode" />
        </scope>
        <scope doc="Pops up a dialog that appears like a Tooltip" ilk="function" name="TooltipDialog">
          <scope citdl="String" doc="Description of tooltip dialog (required for a11y)" name="title" />
          <scope citdl="Boolean" doc="Don&apos;t change this parameter from the default value. This ContentPane parameter doesn&apos;t make sense for TooltipDialog, since TooltipDialog is never a child of a layout container, nor can you specify the size of TooltipDialog in order to control the size of an inner widget." name="doLayout">
            <scope name="tags" />
          </scope>
          <scope citdl="Boolean" doc="A Toggle to modify the default focus behavior of a Dialog, which is to focus on the first dialog element after opening the dialog. False will disable autofocusing. Default: true" name="autofocus" />
          <scope citdl="String" doc="The root className to use for the various states of this widget" name="baseClass">
            <scope name="tags" />
          </scope>
          <variable attributes="private" citdl="readonly" doc="DomNode The pointer to the first focusable node in the dialog. Set by `dijit._DialogMixin._getFocusItems`." name="_firstFocusItem">
            <scope name="tags" />
          </variable>
          <scope attributes="private" citdl="readonly" doc="DomNode The pointer to which node has focus prior to our dialog. Set by `dijit._DialogMixin._getFocusItems`." name="_lastFocusItem">
            <scope name="tags" />
          </scope>
          <scope doc="" name="templateString" />
          <scope doc="" name="templatePath" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="Configure widget to be displayed in given position relative to the button. This is called from the dijit.popup code, and should not be called directly." ilk="function" name="orient" signature="orient(node,aroundCorner,corner)">
            <variable citdl="DomNode" ilk="argument" name="node" />
            <variable citdl="String" ilk="argument" name="aroundCorner" />
            <variable citdl="String" ilk="argument" name="corner" />
            <variable name="tags" />
          </scope>
          <scope doc="Called when dialog is displayed. This is called from the dijit.popup code, and should not be called directly." ilk="function" name="onOpen" signature="onOpen(pos)">
            <variable citdl="Object" ilk="argument" name="pos" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for keyboard events" ilk="function" name="_onKey" signature="_onKey(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope name="containerNode">
            <variable doc="" name="title" />
          </scope>
          <variable attributes="private" doc="" name="_currentOrientClass" />
        </scope>
        <scope doc="Single node within a tree. This class is used internally by Tree and should not be accessed directly. tags: private" ilk="function" name="_TreeNode">
          <scope citdl="dojo.data.Item" doc="the dojo.data entry this tree represents" name="item" />
          <scope citdl="Boolean" doc="Indicates that this is a TreeNode. Used by `dijit.Tree` only, should not be accessed directly." name="isTreeNode">
            <scope name="tags" />
          </scope>
          <scope citdl="String" doc="Text of this tree node" name="label" />
          <variable citdl="Boolean" doc="This node has children, so show the expando node (+ sign)" name="isExpandable">
            <scope name="tags" />
          </variable>
          <variable citdl="Boolean" doc="This node is currently expanded (ie, opened)" name="isExpanded">
            <scope name="tags" />
          </variable>
          <variable citdl="String" doc="Dynamic loading-related stuff. When an empty folder node appears, it is &amp;amp;quot;UNCHECKED&amp;amp;quot; first, then after dojo.data query it becomes &amp;amp;quot;LOADING&amp;amp;quot; and, finally &amp;amp;quot;LOADED&amp;amp;quot;" name="state">
            <scope name="tags" />
          </variable>
          <scope doc="" name="templatePath" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope attributes="private" doc="Tell this node how many levels it should be indented" ilk="function" name="_setIndentAttr" signature="_setIndentAttr(indent)">
            <variable ilk="argument" name="indent" />
          </scope>
          <scope doc="Visually denote that tree is loading data, etc." ilk="function" name="markProcessing">
            <variable name="tags" />
          </scope>
          <scope doc="Clear markup from markProcessing() call" ilk="function" name="unmarkProcessing">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Set appropriate CSS classes for icon and label dom node (used to allow for item updates to change respective CSS)" ilk="function" name="_updateItemClasses" signature="_updateItemClasses(item)">
            <variable ilk="argument" name="item" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Set appropriate CSS classes for this.domNode" ilk="function" name="_updateLayout">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Set the right image for the expando node" ilk="function" name="_setExpando" signature="_setExpando(processing)">
            <variable citdl="Boolean" ilk="argument" name="processing" />
          </scope>
          <scope doc="Show my children" ilk="function" name="expand" />
          <scope doc="Collapse this node (if it&apos;s expanded)" ilk="function" name="collapse" />
          <scope doc="Sets the label" ilk="function" name="setLabelNode" signature="setLabelNode(label)">
            <variable ilk="argument" name="label" />
          </scope>
          <variable citdl="Integer" doc="Levels from this node to the root node" name="indent" />
          <scope doc="Sets the child items of this node, removing/adding nodes from current children to match specified items[] array." ilk="function" name="setChildItems" signature="setChildItems(items)">
            <variable citdl="Object[]" ilk="argument" name="items" />
          </scope>
          <scope doc="" ilk="function" name="removeChild" signature="removeChild(node)">
            <variable citdl="treeNode" ilk="argument" name="node" />
          </scope>
          <scope doc="" ilk="function" name="makeExpandable" />
          <scope attributes="private" doc="Called when this node is focused (possibly programatically)" ilk="function" name="_onLabelFocus" signature="_onLabelFocus(evt)">
            <variable ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called when focus was moved away from this node, either to another TreeNode or away from the Tree entirely. Note that we aren&apos;t using _onFocus/_onBlur builtin to dijit because _onBlur() isn&apos;t called when focus is moved to my child TreeNode." ilk="function" name="_onLabelBlur" signature="_onLabelBlur(evt)">
            <variable ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope doc="A Tree has a (single) currently selected node. Mark that this node is/isn&apos;t that currently selected node." ilk="function" name="setSelected" signature="setSelected(selected)">
            <variable citdl="Boolean" ilk="argument" name="selected" />
          </scope>
          <scope attributes="private" doc="Handler for onmouseenter event on a node" ilk="function" name="_onMouseEnter" signature="_onMouseEnter(evt)">
            <variable ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for onmouseenter event on a node" ilk="function" name="_onMouseLeave" signature="_onMouseLeave(evt)">
            <variable ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <variable attributes="private" doc="" name="_iconClass" />
          <variable attributes="private" doc="" name="_labelClass" />
          <scope name="expandoNodeText">
            <variable doc="" name="innerHTML" />
          </scope>
          <variable attributes="private" doc="" name="_wipeIn" />
          <variable attributes="private" doc="" name="_wipeOut" />
          <scope name="labelNode">
            <variable doc="" name="innerHTML" />
          </scope>
        </scope>
        <scope doc="This widget displays hierarchical data from a store." ilk="function" name="Tree">
          <scope citdl="String||dojo.data.Store" doc="Deprecated. Use &amp;amp;quot;model&amp;amp;quot; parameter instead. The store to get data to display in the tree." name="store">
            <scope name="tags" />
          </scope>
          <variable citdl="dijit.Tree.model" doc="Interface to read tree data, get notifications of changes to tree data, and for handling drop operations (i.e drag and drop onto the tree)" name="model" />
          <scope citdl="anything" doc="Deprecated. User should specify query to the model directly instead. Specifies datastore query to return the root item or top items for the tree." name="query">
            <scope name="tags" />
          </scope>
          <scope citdl="String" doc="Deprecated. Use dijit.tree.ForestStoreModel directly instead. Used in conjunction with query parameter. If a query is specified (rather than a root node id), and a label is also specified, then a fake root node is created and displayed, with this label." name="label">
            <scope name="tags" />
          </scope>
          <variable citdl="Boolean" doc="Should the root node be displayed, or hidden?" name="showRoot">
            <scope name="tags" />
          </variable>
          <scope citdl="String[" doc="Deprecated. This information should be specified in the model. One ore more attributes that holds children of a tree node" name="childrenAttr">
            <scope name="tags" />
          </scope>
          <scope citdl="Boolean" doc="If true, clicking a folder node&apos;s label will open it, rather than calling onClick()" name="openOnClick" />
          <scope citdl="Boolean" doc="If true, double-clicking a folder node&apos;s label will open it, rather than calling onDblClick()" name="openOnDblClick" />
          <scope doc="" name="templatePath" />
          <scope citdl="Boolean" doc="TODO: this appears to be vestigal, back from when Tree extended TreeNode. Remove." name="isExpandable">
            <scope name="tags">
              <variable name="1" />
            </scope>
          </scope>
          <scope citdl="Boolean" doc="TODO: this appears to be vestigal. Remove." name="isTree">
            <scope name="tags">
              <variable name="1" />
            </scope>
          </scope>
          <scope citdl="Boolean" doc="Enables/disables use of cookies for state saving." name="persist" />
          <variable citdl="String" doc="Class name to use as as the dnd controller. Specifying this class enables DnD. Generally you should specify this as &amp;amp;quot;dijit._tree.dndSource&amp;amp;quot;." name="dndController">
            <scope name="tags" />
          </variable>
          <scope doc="" name="dndParams" />
          <scope doc="Parameter to dndController, see `dijit._tree.dndSource.onDndDrop`. Generally this doesn&apos;t need to be set." ilk="function" name="onDndDrop">
            <scope name="tags" />
          </scope>
          <scope doc="Parameter to dndController, see `dijit._tree.dndSource.itemCreator`. Generally this doesn&apos;t need to be set." ilk="function" name="itemCreator">
            <scope name="tags" />
          </scope>
          <scope doc="Parameter to dndController, see `dijit._tree.dndSource.onDndCancel`. Generally this doesn&apos;t need to be set." ilk="function" name="onDndCancel">
            <scope name="tags" />
          </scope>
          <scope attributes="private" doc="Checks if the Tree itself can accept nodes from this source" ilk="function" name="checkAcceptance" returns="Boolean" signature="checkAcceptance(source,nodes)">
            <variable citdl="dijit.tree._dndSource" doc="The source which provides items" ilk="argument" name="source" />
            <variable citdl="DOMNode[" doc="Array of DOM nodes corresponding to nodes being dropped, dijitTreeRow nodes if source is a dijit.Tree." ilk="argument" name="nodes" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Stub function to be overridden if one wants to check for the ability to drop at the node/item level" ilk="function" name="checkItemAcceptance" returns="Boolean" signature="checkItemAcceptance(target,source,position)">
            <variable citdl="DOMNode" doc="The dijitTreeRoot DOM node inside of the TreeNode that we are dropping on to Use dijit.getEnclosingWidget(target) to get the TreeNode." ilk="argument" name="target" />
            <variable citdl="dijit._tree.dndSource" doc="The (set of) nodes we are dropping" ilk="argument" name="source" />
            <variable citdl="String" doc="&amp;amp;quot;over&amp;amp;quot;, &amp;amp;quot;before&amp;amp;quot;, or &amp;amp;quot;after&amp;amp;quot;" ilk="argument" name="position" />
            <variable name="tags" />
          </scope>
          <scope citdl="Integer" doc="Number of pixels mouse moves before it&apos;s considered the start of a drag operation" name="dragThreshold" />
          <scope citdl="Integer" doc="Set to a positive value to allow drag and drop &amp;amp;quot;between&amp;amp;quot; nodes.  If during DnD mouse is over a (target) node but less than betweenThreshold pixels from the bottom edge, dropping the the dragged node will make it the next sibling of the target node, rather than the child.  Similarly, if mouse is over a target node but less that betweenThreshold pixels from the top edge, dropping the dragged node will make it the target node&apos;s previous sibling rather than the target node&apos;s child." name="betweenThreshold" />
          <scope attributes="private" doc="Publish a message for this widget/topic" ilk="function" name="_publish" signature="_publish(topicName,message)">
            <variable citdl="String" ilk="argument" name="topicName" />
            <variable citdl="Object" ilk="argument" name="message" />
          </scope>
          <scope doc="" ilk="function" name="postMixInProperties" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope attributes="private" doc="User specified a store&amp;amp;amp;query rather than model, so create model from store/query" ilk="function" name="_store2model" />
          <scope attributes="private" doc="Initial load of the tree. Load root node (possibly hidden) and it&apos;s children." ilk="function" name="_load" />
          <scope doc="Deprecated. This should be specified on the model itself.  Overridable function to tell if an item has or may have children. Controls whether or not +/- expando icon is shown. (For efficiency reasons we may not want to check if an element actually has children until user clicks the expando node)" ilk="function" name="mayHaveChildren" signature="mayHaveChildren(item)">
            <variable citdl="dojo.data.Item" ilk="argument" name="item" />
            <variable name="tags" />
          </scope>
          <scope doc="Deprecated. This should be specified on the model itself.  Overridable function that return array of child items of given parent item, or if parentItem==null then return top items in tree" ilk="function" name="getItemChildren" signature="getItemChildren(parentItem,onComplete)">
            <variable citdl="dojo.data.Item" ilk="argument" name="parentItem" />
            <variable citdl="function(items)" ilk="argument" name="onComplete" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Overridable function to get the label for a tree node (given the item)" ilk="function" name="getLabel" returns="String" signature="getLabel(item)">
            <variable citdl="dojo.data.Item" ilk="argument" name="item" />
            <variable name="tags" />
          </scope>
          <scope doc="Overridable function to return CSS class name to display icon" ilk="function" name="getIconClass" signature="getIconClass(item,opened)">
            <variable citdl="dojo.data.Item" ilk="argument" name="item" />
            <variable citdl="Boolean" ilk="argument" name="opened" />
            <variable name="tags" />
          </scope>
          <scope doc="Overridable function to return CSS class name to display label" ilk="function" name="getLabelClass" signature="getLabelClass(item,opened)">
            <variable citdl="dojo.data.Item" ilk="argument" name="item" />
            <variable citdl="Boolean" ilk="argument" name="opened" />
            <variable name="tags" />
          </scope>
          <scope doc="Overridable function to return CSS styles to display icon" ilk="function" name="getIconStyle" signature="getIconStyle(item,opened)">
            <variable citdl="dojo.data.Item" ilk="argument" name="item" />
            <variable citdl="Boolean" ilk="argument" name="opened" />
            <variable name="return_summary" />
            <variable name="tags" />
          </scope>
          <scope doc="Overridable function to return CSS styles to display label" ilk="function" name="getLabelStyle" signature="getLabelStyle(item,opened)">
            <variable citdl="dojo.data.Item" ilk="argument" name="item" />
            <variable citdl="Boolean" ilk="argument" name="opened" />
            <variable name="return_summary" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Translates keypress events into commands for the controller" ilk="function" name="_onKeyPress" signature="_onKeyPress(e)">
            <variable citdl="Event" ilk="argument" name="e" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_onEnterKey" signature="_onEnterKey(message)">
            <variable citdl="Object" ilk="argument" name="message" />
          </scope>
          <scope attributes="private" doc="down arrow pressed; get next visible node, set focus there" ilk="function" name="_onDownArrow" signature="_onDownArrow(message)">
            <variable citdl="Object" ilk="argument" name="message" />
          </scope>
          <scope attributes="private" doc="Up arrow pressed; move to previous visible node" ilk="function" name="_onUpArrow" signature="_onUpArrow(message)">
            <variable citdl="Object" ilk="argument" name="message" />
          </scope>
          <scope attributes="private" doc="Right arrow pressed; go to child node" ilk="function" name="_onRightArrow" signature="_onRightArrow(message)">
            <variable citdl="Object" ilk="argument" name="message" />
          </scope>
          <scope attributes="private" doc="Left arrow pressed. If not collapsed, collapse, else move to parent." ilk="function" name="_onLeftArrow" signature="_onLeftArrow(message)">
            <variable citdl="Object" ilk="argument" name="message" />
          </scope>
          <scope attributes="private" doc="Home key pressed; get first visible node, and set focus there" ilk="function" name="_onHomeKey" />
          <scope attributes="private" doc="End key pressed; go to last visible node." ilk="function" name="_onEndKey" signature="_onEndKey(message)">
            <variable citdl="Object" ilk="argument" name="message" />
          </scope>
          <scope attributes="private" doc="Letter key pressed; search for node starting with first char = key" ilk="function" name="_onLetterKeyNav" signature="_onLetterKeyNav(message)">
            <variable ilk="argument" name="message" />
          </scope>
          <scope attributes="private" doc="Translates click events into commands for the controller to process" ilk="function" name="_onClick" signature="_onClick(e)">
            <variable citdl="Event" ilk="argument" name="e" />
          </scope>
          <scope attributes="private" doc="Translates double-click events into commands for the controller to process" ilk="function" name="_onDblClick" signature="_onDblClick(e)">
            <variable citdl="Event" ilk="argument" name="e" />
          </scope>
          <scope attributes="private" doc="User clicked the +/- icon; expand or collapse my children." ilk="function" name="_onExpandoClick" signature="_onExpandoClick(message)">
            <variable citdl="Object" ilk="argument" name="message" />
          </scope>
          <scope doc="Callback when a tree node is clicked" ilk="function" name="onClick" signature="onClick(item,node)">
            <variable citdl="dojo.data" ilk="argument" name="item" />
            <variable citdl="TreeNode" ilk="argument" name="node" />
            <variable name="tags" />
          </scope>
          <scope doc="Callback when a tree node is double-clicked" ilk="function" name="onDblClick" signature="onDblClick(item,node)">
            <variable citdl="dojo.data" ilk="argument" name="item" />
            <variable citdl="TreeNode" ilk="argument" name="node" />
            <variable name="tags" />
          </scope>
          <scope doc="Callback when a node is opened" ilk="function" name="onOpen" signature="onOpen(item,node)">
            <variable citdl="dojo.data" ilk="argument" name="item" />
            <variable citdl="TreeNode" ilk="argument" name="node" />
            <variable name="tags" />
          </scope>
          <scope doc="Callback when a node is closed" ilk="function" name="onClose" signature="onClose(item,node)">
            <variable citdl="dojo.data" ilk="argument" name="item" />
            <variable citdl="TreeNode" ilk="argument" name="node" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Get next visible node" ilk="function" name="_getNextNode" returns="_TreeNode" signature="_getNextNode(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope attributes="private" doc="Get first visible node" ilk="function" name="_getRootOrFirstNode" />
          <scope attributes="private" doc="Called when the user has requested to collapse the node" ilk="function" name="_collapseNode" signature="_collapseNode(node)">
            <variable citdl="_TreeNode" ilk="argument" name="node" />
          </scope>
          <scope attributes="private" doc="Called when the user has requested to expand the node" ilk="function" name="_expandNode" signature="_expandNode(node)">
            <variable citdl="_TreeNode" ilk="argument" name="node" />
          </scope>
          <scope attributes="private" doc="Focus on the specified node (which must be visible)" ilk="function" name="focusNode" returns="Boolean|String|_TreeNode" signature="focusNode(node)">
            <variable citdl="_tree.Node" ilk="argument" name="node" />
          </scope>
          <scope attributes="private" doc="Called when a TreeNode gets focus, either by user clicking it, or programatically by arrow key handling code." ilk="function" name="_onNodeFocus" signature="_onNodeFocus(node)">
            <variable citdl="Widget" ilk="argument" name="node" />
          </scope>
          <scope attributes="private" doc="Called when mouse is over a node (onmouseenter event)" ilk="function" name="_onNodeMouseEnter" signature="_onNodeMouseEnter(node)">
            <variable citdl="Widget" ilk="argument" name="node" />
          </scope>
          <scope attributes="private" doc="Called when mouse is over a node (onmouseenter event)" ilk="function" name="_onNodeMouseLeave" signature="_onNodeMouseLeave(node)">
            <variable citdl="Widget" ilk="argument" name="node" />
          </scope>
          <scope attributes="private" doc="Processes notification of a change to an item&apos;s scalar values like label" ilk="function" name="_onItemChange" signature="_onItemChange(item)">
            <variable citdl="Item" ilk="argument" name="item" />
          </scope>
          <scope attributes="private" doc="Processes notification of a change to an item&apos;s children" ilk="function" name="_onItemChildrenChange" signature="_onItemChildrenChange(parent,newChildrenList)">
            <variable citdl="dojo.data.Item" ilk="argument" name="parent" />
            <variable citdl="dojo.data.Item[]" ilk="argument" name="newChildrenList" />
          </scope>
          <scope attributes="private" doc="Processes notification of a deletion of an item" ilk="function" name="_onItemDelete" signature="_onItemDelete(item)">
            <variable citdl="Item" ilk="argument" name="item" />
          </scope>
          <scope attributes="private" doc="Load in which nodes should be opened automatically" ilk="function" name="_initState" />
          <scope attributes="private" doc="Query or set expanded state for an item," ilk="function" name="_state" signature="_state(item,expanded)">
            <variable ilk="argument" name="item" />
            <variable ilk="argument" name="expanded" />
          </scope>
          <scope attributes="private" doc="Create and save a cookie with the currently expanded nodes identifiers" ilk="function" name="_saveState" />
          <scope doc="" ilk="function" name="destroy" />
          <scope attributes="private" doc="" ilk="function" name="destroyRecursive" returns="Boolean|String|_TreeNode" />
          <scope attributes="private" doc="creates a TreeNode" ilk="function" name="_createTreeNode" signature="_createTreeNode(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <variable doc="" name="tree" />
          <variable attributes="private" doc="" name="_itemNodeMap" />
          <variable doc="" name="cookieName" />
          <variable attributes="private" doc="" name="_v10Compat" />
          <variable doc="" name="rootNode" />
          <variable attributes="private" doc="" name="_keyHandlerMap" />
          <variable doc="" name="lastFocused" />
          <variable attributes="private" doc="" name="_openedItemIds" />
        </scope>
        <scope doc="A simple GUI for choosing a date in the context of a monthly calendar." ilk="function" name="_Calendar">
          <scope doc="" name="templatePath" />
          <variable citdl="Date" doc="The currently selected Date" name="value" />
          <scope citdl="String" doc="How to represent the days of the week in the calendar header. See dojo.date.locale" name="dayWidth" />
          <scope doc="Deprecated. Used attr(&apos;value&apos;, ...) instead." ilk="function" name="setValue" signature="setValue(value)">
            <variable citdl="Date" ilk="argument" name="value" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Hook to make attr(&amp;amp;quot;value&amp;amp;quot;, ...) work." ilk="function" name="_setValueAttr" signature="_setValueAttr(value)">
            <variable citdl="Date" ilk="argument" name="value" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="This just sets the content of node to the specified text. Can&apos;t do &amp;amp;quot;node.innerHTML=text&amp;amp;quot; because of an IE bug w/tables, see #3434." ilk="function" name="_setText" signature="_setText(node,text)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="text" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Fills in the calendar grid with each day (1-31)" ilk="function" name="_populateGrid">
            <variable name="tags" />
          </scope>
          <scope doc="Sets calendar&apos;s value to today&apos;s date" ilk="function" name="goToToday" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope attributes="private" doc="Moves calendar forwards or backwards by months or years" ilk="function" name="_adjustDisplay" signature="_adjustDisplay(part,amount)">
            <variable citdl="String" doc="&amp;amp;quot;month&amp;amp;quot; or &amp;amp;quot;year&amp;amp;quot;" ilk="argument" name="part" />
            <variable citdl="int" doc="Number of months or years" ilk="argument" name="amount" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for when user clicks a day" ilk="function" name="_onDayClick" signature="_onDayClick(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for when user clicks a day" ilk="function" name="_onDayMouseOver" signature="_onDayMouseOver(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for when user clicks a day" ilk="function" name="_onDayMouseOut" signature="_onDayMouseOut(evt)">
            <variable citdl="Event" ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope doc="Notification that a date cell was selected. It may be the same as the previous value." ilk="function" name="onValueSelected" signature="onValueSelected(date)">
            <variable citdl="Date" ilk="argument" name="date" />
            <variable name="tags" />
          </scope>
          <scope doc="Called only when the selected date has changed" ilk="function" name="onChange" signature="onChange(date)">
            <variable citdl="Date" ilk="argument" name="date" />
          </scope>
          <scope attributes="private" doc="May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`" ilk="function" name="isDisabledDate" returns="Boolean" signature="isDisabledDate(dateObject,locale)">
            <variable citdl="Date" ilk="argument" name="dateObject" />
            <variable citdl="String" ilk="argument" name="locale" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="May be overridden to return CSS classes to associate with the date entry for the given dateObject, for example to indicate a holiday in specified locale." ilk="function" name="getClassForDate" returns="String" signature="getClassForDate(dateObject,locale)">
            <variable citdl="Date" ilk="argument" name="dateObject" />
            <variable citdl="String" ilk="argument" name="locale" />
            <variable name="tags" />
          </scope>
          <variable doc="" name="displayMonth" />
          <variable attributes="private" doc="" name="_currentNode" />
        </scope>
        <scope doc="" ilk="function" name="_Contained">
          <scope doc="Returns the parent widget of this widget, assuming the parent implements dijit._Container" ilk="function" name="getParent" />
          <scope attributes="private" doc="Returns next or previous sibling" ilk="function" name="_getSibling" returns="null" signature="_getSibling(which)">
            <variable citdl="Either" doc="&amp;amp;quot;next&amp;amp;quot; or &amp;amp;quot;previous&amp;amp;quot;" ilk="argument" name="which" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Returns null if this is the first child of the parent, otherwise returns the next element sibling to the &amp;amp;quot;left&amp;amp;quot;." ilk="function" name="getPreviousSibling" returns="Mixed" />
          <scope attributes="private" doc="Returns null if this is the last child of the parent, otherwise returns the next element sibling to the &amp;amp;quot;right&amp;amp;quot;." ilk="function" name="getNextSibling" returns="Mixed" />
          <scope attributes="private" doc="Returns the index of this widget within its container parent. It returns -1 if the parent does not exist, or if the parent is not a dijit._Container" ilk="function" name="getIndexInParent" returns="int" />
        </scope>
        <scope doc="Mixin for widgets that contain a set of widget children." ilk="function" name="_Container">
          <scope citdl="Boolean" doc="Just a flag indicating that this widget descends from dijit._Container" name="isContainer">
            <scope name="tags" />
          </scope>
          <scope doc="" ilk="function" name="buildRendering" />
          <scope doc="Makes the given widget a child of this widget." ilk="function" name="addChild" signature="addChild(widget,insertIndex)">
            <variable citdl="Widget" ilk="argument" name="widget" />
            <variable citdl="int" ilk="argument" name="insertIndex" />
          </scope>
          <scope doc="Removes the passed widget instance from this widget but does not destroy it. You can also pass in an integer indicating the index within the container to remove" ilk="function" name="removeChild" signature="removeChild(widget)">
            <variable citdl="Widget or int" ilk="argument" name="widget" />
          </scope>
          <scope attributes="private" doc="Find the next (non-text, non-comment etc) node" ilk="function" name="_nextElement" signature="_nextElement(node)">
            <variable ilk="argument" name="node" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Find the first (non-text, non-comment etc) node" ilk="function" name="_firstElement" signature="_firstElement(node)">
            <variable ilk="argument" name="node" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Returns array of children widgets." ilk="function" name="getChildren" returns="Widget[]" />
          <scope attributes="private" doc="Returns true if widget has children, i.e. if this.containerNode contains something." ilk="function" name="hasChildren" returns="Boolean" />
          <scope doc="Destroys all the widgets inside this.containerNode, but not this widget itself" ilk="function" name="destroyDescendants" signature="destroyDescendants(preserveDom)">
            <variable citdl="Boolean" ilk="argument" name="preserveDom" />
          </scope>
          <scope attributes="private" doc="Get the next or previous widget sibling of child" ilk="function" name="_getSiblingOfChild" signature="_getSiblingOfChild(child,dir)">
            <variable citdl="Widget" ilk="argument" name="child" />
            <variable citdl="int" doc="if 1, get the next sibling if -1, get the previous sibling" ilk="argument" name="dir" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Gets the index of the child in this container or -1 if not found" ilk="function" name="getIndexOfChild" returns="int" signature="getIndexOfChild(child)">
            <variable citdl="Widget" ilk="argument" name="child" />
          </scope>
          <variable doc="" name="containerNode" />
        </scope>
        <scope doc="This provides functions useful to Dialog and TooltipDialog" ilk="function" name="_DialogMixin">
          <scope doc="" name="attributeMap" />
          <scope doc="Callback when the user hits the submit button. Override this method to handle Dialog execution." ilk="function" name="execute" signature="execute(formContents)">
            <variable citdl="Object" ilk="argument" name="formContents" />
          </scope>
          <scope doc="Called when user has pressed the Dialog&apos;s cancel button, to notify container." ilk="function" name="onCancel" />
          <scope doc="Called when user has pressed the dialog&apos;s OK button, to notify container." ilk="function" name="onExecute" />
          <scope attributes="private" doc="Callback when user hits submit button type: protected" ilk="function" name="_onSubmit" />
          <scope attributes="private" doc="Find focusable Items each time a dialog is opened, setting _firstFocusItem and _lastFocusItem" ilk="function" name="_getFocusItems" signature="_getFocusItems(dialogNode)">
            <variable citdl="Node" ilk="argument" name="dialogNode" />
            <variable name="tags" />
          </scope>
          <variable attributes="private" doc="" name="_firstFocusItem" />
          <variable attributes="private" doc="" name="_lastFocusItem" />
        </scope>
        <scope doc="A _Container with keyboard navigation of its children." ilk="function" name="_KeyNavContainer">
          <variable citdl="Widget" doc="The currently focused child widget, or null if there isn&apos;t one" name="focusedChild">
            <scope name="tags" />
          </variable>
          <scope citdl="Integer" doc="Tab index of the container; same as HTML tabindex attribute. Note then when user tabs into the container, focus is immediately moved to the first item in the container." name="tabIndex" />
          <variable attributes="private" citdl="Object" doc="" name="_keyNavCodes" />
          <scope doc="Call in postCreate() to attach the keyboard handlers to the container. preKeyCodes: dojo.keys[] Key codes for navigating to the previous child." ilk="function" name="connectKeyNavHandlers" signature="connectKeyNavHandlers(prevKeyCodes,nextKeyCodes)">
            <variable citdl="dojo.keys[]" ilk="argument" name="prevKeyCodes" />
            <variable citdl="dojo.keys[]" doc="dojo.keys[] Key codes for navigating to the next child." ilk="argument" name="nextKeyCodes" />
            <variable name="tags" />
          </scope>
          <scope doc="Call in startup() to set child tabindexes to -1" ilk="function" name="startupKeyNavChildren">
            <variable name="tags" />
          </scope>
          <scope doc="Add a child to our _Container" ilk="function" name="addChild" signature="addChild(widget,insertIndex)">
            <variable citdl="Widget" ilk="argument" name="widget" />
            <variable citdl="int" ilk="argument" name="insertIndex" />
          </scope>
          <scope doc="Default focus() implementation: focus the first child." ilk="function" name="focus" />
          <scope doc="Focus the first focusable child in the container." ilk="function" name="focusFirstChild">
            <variable name="tags" />
          </scope>
          <scope doc="Focus the next widget or focal node (for widgets with multiple focal nodes) within this container." ilk="function" name="focusNext">
            <variable name="tags" />
          </scope>
          <scope doc="Focus the previous widget or focal node (for widgets with multiple focal nodes) within this container." ilk="function" name="focusPrev">
            <variable name="tags" />
          </scope>
          <scope doc="Focus widget. Optionally focus &apos;node&apos; within widget." ilk="function" name="focusChild" signature="focusChild(widget,node)">
            <variable citdl="Widget" ilk="argument" name="widget" />
            <variable citdl="Node" ilk="argument" name="node" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Set tabindex=&amp;amp;quot;-1&amp;amp;quot; on focusable widgets so that we can focus them programmatically and by clicking. Connect focus and blur handlers." ilk="function" name="_startupChild" signature="_startupChild(widget)">
            <variable citdl="Widget" ilk="argument" name="widget" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Monitor focus and blur events on the node" ilk="function" name="_connectNode" signature="_connectNode(node)">
            <variable citdl="Element" ilk="argument" name="node" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for when the container gets focus" ilk="function" name="_onContainerFocus" signature="_onContainerFocus(evt)">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_onBlur" signature="_onBlur(evt)">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope attributes="private" doc="When a key is pressed, if it&apos;s an arrow key etc. then it&apos;s handled here." ilk="function" name="_onContainerKeypress" signature="_onContainerKeypress(evt)">
            <variable ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Handler for onfocus event on a child node" ilk="function" name="_onNodeFocus" signature="_onNodeFocus(evt)">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope attributes="private" doc="Handler for onblur event on a child node" ilk="function" name="_onNodeBlur" signature="_onNodeBlur(evt)">
            <variable ilk="argument" name="evt" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called when focus leaves a child widget to go to a sibling widget." ilk="function" name="_onChildBlur" signature="_onChildBlur(widget)">
            <variable citdl="Widget" ilk="argument" name="widget" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Returns first child that can be focused" ilk="function" name="_getFirstFocusableChild" />
          <scope attributes="private" doc="Returns the next or previous focusable child, compared to &amp;amp;quot;child&amp;amp;quot;" ilk="function" name="_getNextFocusableChild" signature="_getNextFocusableChild(child,dir)">
            <variable citdl="Widget" doc="The current widget" ilk="argument" name="child" />
            <variable citdl="Integer" doc="* 1 = after * -1 = before" ilk="argument" name="dir" />
          </scope>
        </scope>
        <scope doc="Mixin for widgets that are instantiated from a template" ilk="function" name="_Templated">
          <scope citdl="String" doc="A string that represents the widget template. Pre-empts the templatePath. In builds that have their strings &amp;amp;quot;interned&amp;amp;quot;, the templatePath is converted to an inline templateString, thereby preventing a synchronous network call." name="templateString">
            <scope name="tags" />
          </scope>
          <scope citdl="String" doc="Path to template (HTML file) for this widget relative to dojo.baseUrl" name="templatePath">
            <scope name="tags" />
          </scope>
          <scope citdl="Boolean" doc="Should we parse the template to find widgets that might be declared in markup inside it? False by default." name="widgetsInTemplate">
            <scope name="tags" />
          </scope>
          <scope attributes="private" doc="" name="_skipNodeCache" />
          <scope attributes="private" doc="Does substitution of ${foo} type properties in template string" ilk="function" name="_stringRepl" signature="_stringRepl(tmpl)">
            <variable ilk="argument" name="tmpl" />
            <variable name="tags" />
          </scope>
          <scope doc="Construct the UI for this widget from a template, setting this.domNode." ilk="function" name="buildRendering" />
          <scope attributes="private" doc="Relocate source contents to templated container node. this.containerNode must be able to receive children, or exceptions will be thrown." ilk="function" name="_fillContent" signature="_fillContent(source)">
            <variable citdl="DomNode" ilk="argument" name="source" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Iterate through the template and attach functions and nodes accordingly." ilk="function" name="_attachTemplateNodes" signature="_attachTemplateNodes(rootNode,getAttrFunc)">
            <variable citdl="DomNode|Array[Widgets" doc="the node to search for properties. All children will be searched." ilk="argument" name="rootNode" />
            <variable doc="a function which will be used to obtain property for a given DomNode/Widget" ilk="function" name="getAttrFunc" />
            <variable name="tags" />
          </scope>
          <variable doc="" name="domNode" />
          <variable attributes="private" doc="" name="_supportingWidgets" />
          <variable attributes="private" citdl="Object" doc="" name="_templateCache" />
          <scope attributes="private" doc="Static method to get a template based on the templatePath or templateString key" ilk="function" name="getCachedTemplate" returns="String|Node" signature="getCachedTemplate(templatePath,templateString,alwaysUseString)">
            <variable citdl="String" doc="The URL to get the template from. dojo.uri.Uri is often passed as well." ilk="argument" name="templatePath" />
            <variable citdl="String" doc="a string to use in lieu of fetching the template from a URL. Takes precedence over templatePath" ilk="argument" name="templateString" />
            <variable ilk="argument" name="alwaysUseString" />
          </scope>
          <scope attributes="private" doc="Strips &amp;amp;lt;?xml ...?&amp;amp;gt; declarations so that external SVG and XML documents can be added to a document without worry. Also, if the string is an HTML document, only the part inside the body tag is returned." ilk="function" name="_sanitizeTemplateString" returns="String" signature="_sanitizeTemplateString(tString)">
            <variable citdl="String" ilk="argument" name="tString" />
          </scope>
        </scope>
        <scope doc="Base class for all dijit widgets." ilk="function" name="_Widget">
          <variable citdl="String" doc="A unique, opaque ID string that can be assigned by users or by the system. If the developer passes an ID which is known not to be unique, the specified ID is ignored and the system-generated ID is used instead." name="id">
            <scope name="tags" />
          </variable>
          <scope citdl="String" doc="Rarely used. Overrides the default Dojo locale used to render this widget, as defined by the [HTML LANG](http://www.w3.org/TR/html401/struct/dirlang.html#adef-lang) attribute. Value must be among the list of locales specified during by the Dojo bootstrap, formatted according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt) (like en-us)." name="lang">
            <scope name="tags" />
          </scope>
          <scope citdl="String" doc="Unsupported by Dijit, but here for completeness. Dijit only supports setting text direction on the entire document. Bi-directional support, as defined by the [HTML DIR](http://www.w3.org/TR/html401/struct/dirlang.html#adef-dir) attribute. Either left-to-right &amp;amp;quot;ltr&amp;amp;quot; or right-to-left &amp;amp;quot;rtl&amp;amp;quot;." name="dir">
            <scope name="tags" />
          </scope>
          <scope citdl="String" doc="HTML class attribute" name="class" />
          <scope doc="" name="title" />
          <variable citdl="DomNode" doc="pointer to original dom node" name="srcNodeRef">
            <scope name="tags" />
            <variable doc="" name="id" />
          </variable>
          <variable citdl="DomNode" doc="This is our visible representation of the widget! Other DOM Nodes may by assigned to other properties, usually through the template system&apos;s dojoAttachPoint syntax, but the domNode property is the canonical &amp;amp;quot;top level&amp;amp;quot; node in widget UI." name="domNode">
            <scope name="tags" />
          </variable>
          <scope citdl="DomNode" doc="Designates where children of the source dom node will be placed. &amp;amp;quot;Children&amp;amp;quot; in this case refers to both dom nodes and widgets. For example, for myWidget:   &amp;amp;lt;div dojoType=myWidget&amp;amp;gt;   &amp;amp;lt;b&amp;amp;gt; here&apos;s a plain dom node   &amp;amp;lt;span dojoType=subWidget&amp;amp;gt;and a widget&amp;amp;lt;/span&amp;amp;gt;   &amp;amp;lt;i&amp;amp;gt; and another plain dom node &amp;amp;lt;/i&amp;amp;gt;  &amp;amp;lt;/div&amp;amp;gt;  containerNode would point to:    &amp;amp;lt;b&amp;amp;gt; here&apos;s a plain dom node   &amp;amp;lt;span dojoType=subWidget&amp;amp;gt;and a widget&amp;amp;lt;/span&amp;amp;gt;   &amp;amp;lt;i&amp;amp;gt; and another plain dom node &amp;amp;lt;/i&amp;amp;gt;  In templated widgets, &amp;amp;quot;containerNode&amp;amp;quot; is set via a dojoAttachPoint assignment.  containerNode must be defined for any widget that accepts innerHTML (like ContentPane or BorderContainer or even Button), and conversely is null for widgets that don&apos;t, like TextBox." name="containerNode">
            <scope name="tags" />
          </scope>
          <variable citdl="Object" doc="" name="attributeMap">
            <scope doc="" name="id" />
            <scope doc="" name="dir" />
            <scope doc="" name="lang" />
            <scope doc="" name="class" />
            <scope doc="" name="title" />
          </variable>
          <variable attributes="private" citdl="Object" doc="" name="_deferredConnects">
            <scope doc="" name="onClick" />
            <scope doc="" name="onDblClick" />
            <scope doc="" name="onKeyDown" />
            <scope doc="" name="onKeyPress" />
            <scope doc="" name="onKeyUp" />
            <scope doc="" name="onMouseMove" />
            <scope doc="" name="onMouseDown" />
            <scope doc="" name="onMouseOut" />
            <scope doc="" name="onMouseOver" />
            <scope doc="" name="onMouseLeave" />
            <scope doc="" name="onMouseEnter" />
            <scope doc="" name="onMouseUp" />
          </variable>
          <scope doc="Connect to this function to receive notifications of mouse click events." ilk="function" name="onClick" signature="onClick(event)">
            <variable citdl="mouse" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of mouse double click events." ilk="function" name="onDblClick" signature="onDblClick(event)">
            <variable citdl="mouse" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of keys being pressed down." ilk="function" name="onKeyDown" signature="onKeyDown(event)">
            <variable citdl="key" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of printable keys being typed." ilk="function" name="onKeyPress" signature="onKeyPress(event)">
            <variable citdl="key" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of keys being released." ilk="function" name="onKeyUp" signature="onKeyUp(event)">
            <variable citdl="key" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of when the mouse button is pressed down." ilk="function" name="onMouseDown" signature="onMouseDown(event)">
            <variable citdl="mouse" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of when the mouse moves over nodes contained within this widget." ilk="function" name="onMouseMove" signature="onMouseMove(event)">
            <variable citdl="mouse" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of when the mouse moves off of nodes contained within this widget." ilk="function" name="onMouseOut" signature="onMouseOut(event)">
            <variable citdl="mouse" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of when the mouse moves onto nodes contained within this widget." ilk="function" name="onMouseOver" signature="onMouseOver(event)">
            <variable citdl="mouse" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of when the mouse moves off of this widget." ilk="function" name="onMouseLeave" signature="onMouseLeave(event)">
            <variable citdl="mouse" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of when the mouse moves onto this widget." ilk="function" name="onMouseEnter" signature="onMouseEnter(event)">
            <variable citdl="mouse" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope doc="Connect to this function to receive notifications of when the mouse button is released." ilk="function" name="onMouseUp" signature="onMouseUp(event)">
            <variable citdl="mouse" doc="Event" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" citdl="URL" doc="Used by &amp;amp;lt;img&amp;amp;gt; nodes in templates that really get there image via CSS background-image" name="_blankGif">
            <scope name="tags" />
          </scope>
          <scope doc="Kicks off widget instantiation. See create() for details." ilk="function" name="postscript" signature="postscript(params,srcNodeRef)">
            <variable citdl="Object" ilk="argument" name="params" />
            <variable citdl="DomNode|String" ilk="argument" name="srcNodeRef" />
            <variable name="tags" />
          </scope>
          <scope doc="Kick off the life-cycle of a widget" ilk="function" name="create" signature="create(params,srcNodeRef)">
            <variable citdl="Object" doc="Hash of initialization parameters for widget, including scalar values (like title, duration etc.) and functions, typically callbacks like onClick." ilk="argument" name="params" />
            <variable citdl="DomNode|String" doc="If a srcNodeRef (dom node) is specified: - use srcNodeRef.innerHTML as my contents - if this is a behavioral widget then apply behavior to that srcNodeRef - otherwise, replace srcNodeRef with my generated DOM tree" ilk="argument" name="srcNodeRef" />
            <scope citdl="Hash" doc="of initialization parameters for widget, including scalar values (like title, duration etc.) and functions, typically callbacks like onClick." name="params" />
            <scope citdl="If" doc="a srcNodeRef (dom node) is specified: - use srcNodeRef.innerHTML as my contents - if this is a behavioral widget then apply behavior to that srcNodeRef - otherwise, replace srcNodeRef with my generated DOM tree" name="srcNodeRef" />
          </scope>
          <scope attributes="private" doc="Step during widget creation to copy all widget attributes to the DOM as per attributeMap and _setXXXAttr functions." ilk="function" name="_applyAttributes">
            <variable name="tags" />
          </scope>
          <scope doc="Called after the parameters to the widget have been read-in, but before the widget template is instantiated. Especially useful to set properties that are referenced in the widget template." ilk="function" name="postMixInProperties">
            <variable name="tags" />
          </scope>
          <scope doc="Construct the UI for this widget, setting this.domNode. Most widgets will mixin `dijit._Templated`, which implements this method." ilk="function" name="buildRendering">
            <variable name="tags" />
          </scope>
          <scope doc="Called after a widget&apos;s dom has been setup" ilk="function" name="postCreate">
            <variable name="tags" />
          </scope>
          <scope doc="Called after a widget&apos;s children, and other widgets on the page, have been created. Provides an opportunity to manipulate any children before they are displayed. This is useful for composite widgets that need to control or layout sub-widgets. Many layout widgets can use this as a wiring phase." ilk="function" name="startup" />
          <scope doc="Destroy this widget and it&apos;s descendants. This is the generic &amp;amp;quot;destructor&amp;amp;quot; function that all widget users should call to cleanly discard with a widget. Once a widget is destroyed, it&apos;s removed from the manager object." ilk="function" name="destroyRecursive" signature="destroyRecursive(preserveDom)">
            <variable citdl="Boolean" doc="If true, this method will leave the original Dom structure alone of descendant Widgets. Note: This will NOT work with dijit._Templated widgets." ilk="argument" name="preserveDom" />
          </scope>
          <scope doc="Destroy this widget, but not its descendants. Will, however, destroy internal widgets such as those used within a template." ilk="function" name="destroy" signature="destroy(preserveDom)">
            <variable citdl="Boolean" doc="If true, this method will leave the original Dom structure alone. Note: This will not yet work with _Templated widgets" ilk="argument" name="preserveDom" />
          </scope>
          <scope doc="Destroys the DOM nodes associated with this widget" ilk="function" name="destroyRendering" signature="destroyRendering(preserveDom)">
            <variable citdl="Boolean" doc="If true, this method will leave the original Dom structure alone during tear-down. Note: this will not work with _Templated widgets yet." ilk="argument" name="preserveDom" />
            <variable name="tags" />
          </scope>
          <scope doc="Recursively destroy the children of this widget and their descendants." ilk="function" name="destroyDescendants" signature="destroyDescendants(preserveDom)">
            <variable citdl="Boolean" ilk="argument" name="preserveDom" />
          </scope>
          <scope doc="Stub function. Override to implement custom widget tear-down behavior." ilk="function" name="uninitialize">
            <variable name="tags" />
          </scope>
          <scope doc="Called when the widget becomes &amp;amp;quot;active&amp;amp;quot; because it or a widget inside of it either has focus, or has recently been clicked." ilk="function" name="onFocus">
            <variable name="tags" />
          </scope>
          <scope doc="Called when the widget stops being &amp;amp;quot;active&amp;amp;quot; because focus moved to something outside of it, or the user clicked somewhere outside of it, or the widget was hidden." ilk="function" name="onBlur">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="This is where widgets do processing for when they are active, such as changing CSS classes. See onFocus() for more details." ilk="function" name="_onFocus" signature="_onFocus(e)">
            <variable ilk="argument" name="e" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="This is where widgets do processing for when they stop being active, such as changing CSS classes. See onBlur() for more details." ilk="function" name="_onBlur">
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Called when someone connects to one of my handlers. &amp;amp;quot;Turn on&amp;amp;quot; that handler if it isn&apos;t active yet.  This is also called for every single initialization parameter so need to do nothing for parameters like &amp;amp;quot;id&amp;amp;quot;." ilk="function" name="_onConnect" signature="_onConnect(event)">
            <variable citdl="String" ilk="argument" name="event" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Custom setter for the CSS &amp;amp;quot;class&amp;amp;quot; attribute" ilk="function" name="_setClassAttr" signature="_setClassAttr(value)">
            <variable citdl="String" ilk="argument" name="value" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Sets the style attribut of the widget according to value, which is either a hash like {height: &amp;amp;quot;5px&amp;amp;quot;, width: &amp;amp;quot;3px&amp;amp;quot;} or a plain string" ilk="function" name="_setStyleAttr" signature="_setStyleAttr(value)">
            <variable citdl="String||Object" ilk="argument" name="value" />
            <variable name="tags" />
          </scope>
          <scope doc="Deprecated. Use attr() instead." ilk="function" name="setAttribute" signature="setAttribute(attr,value)">
            <variable citdl="String" ilk="argument" name="attr" />
            <variable citdl="anything" ilk="argument" name="value" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Reflect a widget attribute (title, tabIndex, duration etc.) to the widget DOM, as specified in attributeMap." ilk="function" name="_attrToDom" signature="_attrToDom(attr,value)">
            <variable citdl="String" ilk="argument" name="attr" />
            <variable citdl="String" ilk="argument" name="value" />
            <variable name="tags" />
          </scope>
          <scope doc="Set or get properties on a widget instance." ilk="function" name="attr" signature="attr(name,value)">
            <variable citdl="String|Object" doc="The property to get or set. If an object is passed here and not a string, its keys are used as names of attributes to be set and the value of the object as values to set in the widget." ilk="argument" name="name" />
            <variable citdl="Object" doc="Optional. If provided, attr() operates as a setter. If omitted, the current value of the named property is returned." ilk="argument" name="value" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_attrPairNames" />
          <scope attributes="private" doc="Helper function for Widget.attr(). Caches attribute name values so we don&apos;t do the string ops every time." ilk="function" name="_getAttrNames" signature="_getAttrNames(name)">
            <variable ilk="argument" name="name" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Returns a string that represents the widget. When a widget is cast to a string, this method will be used to generate the output. Currently, it does not implement any sort of reversable serialization." ilk="function" name="toString" returns="String" />
          <scope attributes="private" doc="Returns all the widgets that contained by this, i.e., all widgets underneath this.containerNode. This method should generally be avoided as it returns widgets declared in templates, which are supposed to be internal/hidden, but it&apos;s left here for back-compat reasons." ilk="function" name="getDescendants" returns="Array" />
          <scope doc="Returns all the widgets contained by this, i.e., all widgets underneath this.containerNode. Does not return nested widgets, nor widgets that are part of this widget&apos;s template." ilk="function" name="getChildren" />
          <scope citdl="String[" doc="List of nodes that correctly handle click events via native browser support, and don&apos;t need dijit&apos;s help" name="nodesWithKeyClick">
            <scope name="tags" />
          </scope>
          <scope doc="Connects specified obj/event to specified method of this object and registers for disconnect() on widget destroy." ilk="function" name="connect" signature="connect(obj,event,method)">
            <variable citdl="Object|null" ilk="argument" name="obj" />
            <variable citdl="String|Function" ilk="argument" name="event" />
            <variable citdl="String|Function" ilk="argument" name="method" />
            <variable name="tags" />
          </scope>
          <scope doc="Disconnects handle created by this.connect. Also removes handle from this widget&apos;s list of connects" ilk="function" name="disconnect" signature="disconnect(handles)">
            <variable citdl="Object" ilk="argument" name="handles" />
            <variable name="tags" />
          </scope>
          <scope attributes="private" doc="Checks the page for text direction" ilk="function" name="isLeftToRight" returns="Boolean">
            <variable name="tags" />
          </scope>
          <scope doc="Return true if this widget can currently be focused and false if not" ilk="function" name="isFocusable" />
          <scope doc="Place this widget&apos;s domNode reference somewhere in the DOM based on standard dojo.place conventions, or passing a Widget reference that contains and addChild member." ilk="function" name="placeAt" signature="placeAt(reference,position)">
            <variable citdl="String|DomNode|_Widget" doc="The String id of a domNode, a domNode reference, or a reference to a Widget posessing an addChild method." ilk="argument" name="reference" />
            <variable citdl="String?|Int" doc="If passed a string or domNode reference, the position argument accepts a string just as dojo.place does, one of: &amp;amp;quot;first&amp;amp;quot;, &amp;amp;quot;last&amp;amp;quot;, &amp;amp;quot;before&amp;amp;quot;, or &amp;amp;quot;after&amp;amp;quot;.  If passed a _Widget reference, and that widget reference has an &amp;amp;quot;.addChild&amp;amp;quot; method, it will be called passing this widget instance into that method, supplying the optional position index passed." ilk="argument" name="position" />
            <variable name="return_summary" />
          </scope>
          <variable attributes="private" doc="" name="_connects" />
          <variable doc="" name="params" />
          <variable attributes="private" doc="" name="_created" />
          <variable attributes="private" doc="" name="_started" />
          <scope doc="" name="region" />
          <scope doc="" name="splitter" />
          <scope doc="" name="minSize" />
          <scope doc="" name="maxSize" />
          <scope doc="" name="layoutAlign" />
          <scope doc="" name="sizeMin" />
          <scope doc="" name="sizeShare" />
          <scope doc="" name="selected" />
          <scope doc="" name="closable" />
          <scope attributes="private" doc="Callback if someone tries to close the child, child will be closed if func returns true" ilk="function" name="onClose" returns="Boolean">
            <variable name="tags" />
          </scope>
        </scope>
        <scope doc="A graphical time picker. This widget is used internally by other widgets and is not accessible as a standalone widget." ilk="function" name="_TimePicker">
          <scope doc="" name="templatePath" />
          <scope citdl="String" doc="The root className to use for the various states of this widget" name="baseClass">
            <scope name="tags" />
          </scope>
          <scope citdl="String" doc="ISO-8601 string representing the amount by which every clickable element in the time picker increases. Set in local time, without a time zone. Example: `T00:15:00` creates 15 minute increments Must divide dijit._TimePicker.visibleIncrement evenly" name="clickableIncrement" />
          <scope citdl="String" doc="ISO-8601 string representing the amount by which every element with a visible time in the time picker increases. Set in local time, without a time zone. Example: `T01:00:00` creates text in every 1 hour increment" name="visibleIncrement" />
          <scope citdl="String" doc="ISO-8601 string representing the range of this TimePicker. The TimePicker will only display times in this range. Example: `T05:00:00` displays 5 hours of options" name="visibleRange" />
          <scope citdl="String" doc="Date to display. Defaults to current time and date. Can be a Date object or an ISO-8601 string. If you specify the GMT time zone (`-01:00`), the time will be converted to the local time in the local time zone. Otherwise, the time is considered to be in the local time zone. If you specify the date and isDate is true, the date is used. Example: if your local time zone is `GMT -05:00`, `T10:00:00` becomes `T10:00:00-05:00` (considered to be local time), `T10:00:00-01:00` becomes `T06:00:00-05:00` (4 hour difference), `T10:00:00Z` becomes `T05:00:00-05:00` (5 hour difference between Zulu and local time) `yyyy-mm-ddThh:mm:ss` is the format to set the date and time Example: `2007-06-01T09:00:00`" name="value" />
          <scope attributes="private" doc="" name="_visibleIncrement" />
          <scope attributes="private" doc="" name="_clickableIncrement" />
          <scope attributes="private" doc="" name="_totalIncrements" />
          <scope citdl="dijit._TimePicker.__Constraints" doc="Specifies valid range of times (start time, end time)" name="constraints" />
        </scope>
        <scope ilk="function" name="_connectOnUseEventHandler" signature="_connectOnUseEventHandler(event)">
          <variable citdl="Event" ilk="argument" name="event" />
        </scope>
        <scope doc="Returns true if there is no text selected" ilk="function" name="isCollapsed" returns="Boolean" />
        <scope doc="Retrieves a bookmark that can be used with moveToBookmark to return to the same range" ilk="function" name="getBookmark" returns="Array" />
        <scope doc="Moves current selection to a bookmark" ilk="function" name="moveToBookmark" signature="moveToBookmark(bookmark)">
          <variable citdl="Object" doc="This should be a returned object from dojo.html.selection.getBookmark()" ilk="argument" name="bookmark" />
        </scope>
        <scope doc="Returns the current focus and selection. Called when a popup appears (either a top level menu or a dialog), or when a toolbar/menubar receives focus" ilk="function" name="getFocus" signature="getFocus(menu,openedForWindow)">
          <variable citdl="Widget" doc="The menu that&apos;s being opened" ilk="argument" name="menu" />
          <variable citdl="Window" doc="iframe in which menu was opened" ilk="argument" name="openedForWindow" />
        </scope>
        <scope doc="Sets the focused node and the selection according to argument. To set focus to an iframe&apos;s content, pass in the iframe itself." ilk="function" name="focus" signature="focus(handle)">
          <variable citdl="Object || DomNode" doc="object returned by get(), or a DomNode" ilk="argument" name="handle" />
        </scope>
        <scope doc="Registers listeners on the specified iframe so that any click or focus event on that iframe (or anything in it) is reported as a focus/click event on the &amp;amp;lt;iframe&amp;amp;gt; itself." ilk="function" name="registerIframe" signature="registerIframe(iframe)">
          <variable citdl="DomNode" ilk="argument" name="iframe" />
        </scope>
        <scope doc="Registers listeners on the specified window (either the main window or an iframe&apos;s window) to detect when the user has clicked somewhere or focused somewhere." ilk="function" name="registerWin" returns="Boolean|Array" signature="registerWin(targetWindow,effectiveNode)">
          <variable citdl="Window" doc="If specified this is the window associated with the iframe, i.e. iframe.contentWindow." ilk="argument" name="targetWindow" />
          <variable citdl="DomNode" ilk="argument" name="effectiveNode" />
        </scope>
        <scope doc="Called when focus leaves a node. Usually ignored, _unless_ it *isn&apos;t* follwed by touching another node, which indicates that we tabbed off the last field on the page, in which case every widget is marked inactive" ilk="function" name="_onBlurNode" signature="_onBlurNode(node)">
          <variable citdl="DomNode" ilk="argument" name="node" />
        </scope>
        <scope ilk="function" name="_onTouchNode" returns="Boolean|Array" signature="_onTouchNode(node)">
          <variable citdl="DomNode" ilk="argument" name="node" />
        </scope>
        <scope doc="Callback when node is focused" ilk="function" name="_onFocusNode" signature="_onFocusNode(node)">
          <variable citdl="DomNode" ilk="argument" name="node" />
        </scope>
        <scope doc="The stack of active widgets has changed. Send out appropriate events and records new stack." ilk="function" name="_setStack" signature="_setStack(newStack)">
          <variable ilk="argument" name="newStack" />
        </scope>
        <scope doc="A set of widgets indexed by id. A default instance of this class is available as `dijit.registry`" ilk="function" name="WidgetSet">
          <scope doc="Add a widget to this list. If a duplicate ID is detected, a error is thrown." ilk="function" name="add" signature="add(widget)">
            <variable citdl="Widget" doc="dijit._Widget Any dijit._Widget subclass." ilk="argument" name="widget" />
          </scope>
          <scope doc="Remove a widget from this WidgetSet. Does not destroy the widget; simply removes the reference." ilk="function" name="remove" signature="remove(id)">
            <variable citdl="String" ilk="argument" name="id" />
          </scope>
          <scope doc="Call specified function for each widget in this set." ilk="function" name="forEach" signature="forEach(func)">
            <variable doc="A callback function to run for each item. Is passed a the widget." ilk="function" name="func" />
          </scope>
          <scope attributes="private" doc="Filter down this WidgetSet to a smaller new WidgetSet Works the same as `dojo.filter` and `dojo.NodeList.filter`" ilk="function" name="filter" returns="dijit.WidgetSet" signature="filter(filter)">
            <variable doc="Callback function to test truthiness." ilk="function" name="filter" />
          </scope>
          <scope attributes="private" doc="Find a widget in this list by it&apos;s id." ilk="function" name="byId" returns="dijit._Widget" signature="byId(id)">
            <variable citdl="String" ilk="argument" name="id" />
          </scope>
          <scope attributes="private" doc="Reduce this widgetset to a new WidgetSet of a particular declaredClass" ilk="function" name="byClass" returns="dijit.WidgetSet" signature="byClass(cls)">
            <variable citdl="String" ilk="argument" name="cls" />
          </scope>
          <variable attributes="private" doc="" name="_hash" />
        </scope>
        <variable citdl="Object" doc="A list of widgets on a page." name="registry" />
        <variable attributes="private" citdl="Object" doc="" name="_widgetTypeCtr" />
        <variable attributes="private" citdl="Object" doc="" name="_tabElements">
          <scope doc="" name="area" />
          <scope doc="" name="button" />
          <scope doc="" name="input" />
          <scope doc="" name="object" />
          <scope doc="" name="select" />
          <scope doc="" name="textarea" />
        </variable>
        <scope doc="Generates a unique id for a given widgetType" ilk="function" name="getUniqueId" returns="String" signature="getUniqueId(widgetType)">
          <variable citdl="String" ilk="argument" name="widgetType" />
        </scope>
        <scope doc="Search subtree under root, putting found widgets in outAry. Doesn&apos;t search for nested widgets (ie, widgets inside other widgets)" ilk="function" name="findWidgets" signature="findWidgets(root)">
          <variable citdl="DomNode" ilk="argument" name="root" />
        </scope>
        <scope doc="Returns a widget by it&apos;s id, or if passed a widget, no-op (like dojo.byId())" ilk="function" name="byId" returns="Widget" signature="byId(id)">
          <variable citdl="String|Widget" ilk="argument" name="id" />
        </scope>
        <scope doc="Returns the widget corresponding to the given DOMNode" ilk="function" name="byNode" returns="Widget" signature="byNode(node)">
          <variable citdl="DOMNode" ilk="argument" name="node" />
        </scope>
        <scope doc="Returns the widget whose DOM tree contains the specified DOMNode, or null if the node is not contained within the DOM tree of any widget" ilk="function" name="getEnclosingWidget" signature="getEnclosingWidget(node)">
          <variable citdl="DOMNode" ilk="argument" name="node" />
        </scope>
        <scope ilk="function" name="_isElementShown" signature="_isElementShown(elem)">
          <variable citdl="Element" ilk="argument" name="elem" />
        </scope>
        <scope doc="Tests if an element is tab-navigable" ilk="function" name="isTabNavigable" returns="boolean" signature="isTabNavigable(elem)">
          <variable citdl="Element" ilk="argument" name="elem" />
        </scope>
        <scope doc="Finds descendants of the specified root node." ilk="function" name="_getTabNavigable" signature="_getTabNavigable(root)">
          <variable citdl="DOMNode" ilk="argument" name="root" />
        </scope>
        <scope doc="Finds the descendant of the specified root node that is first in the tabbing order" ilk="function" name="getFirstInTabbingOrder" returns="DomNode" signature="getFirstInTabbingOrder(root)">
          <variable citdl="String|DOMNode" ilk="argument" name="root" />
        </scope>
        <scope doc="Finds the descendant of the specified root node that is last in the tabbing order" ilk="function" name="getLastInTabbingOrder" returns="DomNode" signature="getLastInTabbingOrder(root)">
          <variable citdl="String|DOMNode" ilk="argument" name="root" />
        </scope>
        <scope doc="Returns the dimensions and scroll position of the viewable area of a browser window" ilk="function" name="getViewport" />
        <scope attributes="private" doc="" ilk="function" name="__Position">
          <variable doc="" name="y" />
        </scope>
        <scope doc="Positions one of the node&apos;s corners at specified position such that node is fully visible in viewport." ilk="function" name="placeOnScreen" signature="placeOnScreen(node,pos,corners,padding)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable citdl="dijit.__Position" doc="Object like {x: 10, y: 20}" ilk="argument" name="pos" />
          <variable citdl="String[]" doc="Array of Strings representing order to try corners in, like [&amp;amp;quot;TR&amp;amp;quot;, &amp;amp;quot;BL&amp;amp;quot;]. Possible values are: * &amp;amp;quot;BL&amp;amp;quot; - bottom left * &amp;amp;quot;BR&amp;amp;quot; - bottom right * &amp;amp;quot;TL&amp;amp;quot; - top left * &amp;amp;quot;TR&amp;amp;quot; - top right" ilk="argument" name="corners" />
          <variable citdl="dijit.__Position" doc="set padding to put some buffer around the element you want to position." ilk="argument" name="padding" />
        </scope>
        <scope doc="Given a list of spots to put node, put it at the first spot where it fits, of if it doesn&apos;t fit anywhere then the place with the least overflow" ilk="function" name="_place" signature="_place(node,choices,layoutNode)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable citdl="Array" doc="Array of elements like: {corner: &apos;TL&apos;, pos: {x: 10, y: 20} } Above example says to put the top-left corner of the node at (10,20)" ilk="argument" name="choices" />
          <variable citdl="Function" ilk="argument" name="layoutNode" />
        </scope>
        <scope doc="Position node adjacent or kitty-corner to aroundNode such that it&apos;s fully visible in viewport." ilk="function" name="placeOnScreenAroundNode" signature="placeOnScreenAroundNode(node,aroundNode,aroundCorners,layoutNode)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable citdl="DomNode" ilk="argument" name="aroundNode" />
          <variable citdl="Object" doc="Ordered list of pairs of corners to try matching up. Each pair of corners is represented as a key/value in the hash, where the key corresponds to the aroundNode&apos;s corner, and the value corresponds to the node&apos;s corner:   { aroundNodeCorner1: nodeCorner1, aroundNodeCorner2: nodeCorner2, ...}  The following strings are used to represent the four corners: * &amp;amp;quot;BL&amp;amp;quot; - bottom left * &amp;amp;quot;BR&amp;amp;quot; - bottom right * &amp;amp;quot;TL&amp;amp;quot; - top left * &amp;amp;quot;TR&amp;amp;quot; - top right" ilk="argument" name="aroundCorners" />
          <variable citdl="Function" doc="Function(node, aroundNodeCorner, nodeCorner) For things like tooltip, they are displayed differently (and have different dimensions) based on their orientation relative to the parent. This adjusts the popup based on orientation." ilk="argument" name="layoutNode" />
        </scope>
        <scope attributes="private" doc="" ilk="function" name="__Rectangle">
          <variable doc="" name="y" />
          <variable doc="" name="height" />
        </scope>
        <scope doc="Like dijit.placeOnScreenAroundNode(), except that the &amp;amp;quot;around&amp;amp;quot; parameter is an arbitrary rectangle on the screen (x, y, width, height) instead of a dom node." ilk="function" name="placeOnScreenAroundRectangle" signature="placeOnScreenAroundRectangle(node,aroundRect,aroundCorners,layoutNode)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable citdl="dijit.__Rectangle" ilk="argument" name="aroundRect" />
          <variable citdl="Object" ilk="argument" name="aroundCorners" />
          <variable citdl="Function" ilk="argument" name="layoutNode" />
        </scope>
        <scope ilk="function" name="_placeOnScreenAroundRect" signature="_placeOnScreenAroundRect(node,x,y,width,height,aroundCorners,layoutNode)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable citdl="Number" ilk="argument" name="x" />
          <variable citdl="Number" ilk="argument" name="y" />
          <variable citdl="Number" ilk="argument" name="width" />
          <variable citdl="Number" ilk="argument" name="height" />
          <variable citdl="Object" ilk="argument" name="aroundCorners" />
          <variable citdl="Function" ilk="argument" name="layoutNode" />
        </scope>
        <scope doc="Like dijit.placeOnScreenAroundNode(), except it accepts an arbitrary object for the &amp;amp;quot;around&amp;amp;quot; argument and finds a proper processor to place a node." ilk="function" name="placeOnScreenAroundElement" signature="placeOnScreenAroundElement(node,aroundElement,aroundCorners,layoutNode)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable citdl="Object" ilk="argument" name="aroundElement" />
          <variable citdl="Object" ilk="argument" name="aroundCorners" />
          <variable citdl="Function" ilk="argument" name="layoutNode" />
        </scope>
        <scope doc="This class is used to show/hide widgets as popups." ilk="function" name="popup">
          <scope name="initialized" />
          <scope attributes="private" doc="" ilk="function" name="__OpenArgs">
            <variable citdl="Widget" doc="widget to display" name="popup" />
            <variable citdl="Widget" doc="the button etc. that is displaying this popup" name="parent" />
            <variable citdl="DomNode" doc="DOM node (typically a button); place popup relative to this node. (Specify this *or* &amp;amp;quot;x&amp;amp;quot; and &amp;amp;quot;y&amp;amp;quot; parameters.)" name="around" />
            <variable citdl="Integer" doc="Absolute horizontal position (in pixels) to place node at. (Specify this *or* &amp;amp;quot;around&amp;amp;quot; parameter.)" name="x" />
            <variable citdl="Integer" doc="Absolute vertical position (in pixels) to place node at. (Specity this *or* &amp;amp;quot;around&amp;amp;quot; parameter.)" name="y" />
            <variable citdl="Object" doc="|| String When the around parameter is specified, orient should be an ordered list of tuples of the form (around-node-corner, popup-node-corner). dijit.popup.open() tries to position the popup according to each tuple in the list, in order, until the popup appears fully within the viewport.  The default value is {BL:&apos;TL&apos;, TL:&apos;BL&apos;}, which represents a list of two tuples: 1. (BL, TL) 2. (TL, BL) where BL means &amp;amp;quot;bottom left&amp;amp;quot; and &amp;amp;quot;TL&amp;amp;quot; means &amp;amp;quot;top left&amp;amp;quot;. So by default, it first tries putting the popup below the around node, left-aligning them, and then tries to put it above the around node, still left-aligning them. Note that the default is horizontally reversed when in RTL mode.  When an (x,y) position is specified rather than an around node, orient is either &amp;amp;quot;R&amp;amp;quot; or &amp;amp;quot;L&amp;amp;quot;. R (for right) means that it tries to put the popup to the right of the mouse, specifically positioning the popup&apos;s top-right corner at the mouse position, and if that doesn&apos;t fit in the viewport, then it tries, in order, the bottom-right corner, the top left corner, and the top-right corner." name="orient" />
            <variable doc="callback when user has canceled the popup by 1. hitting ESC or 2. by using the popup widget&apos;s proprietary cancel mechanism (like a cancel button in a dialog); i.e. whenever popupWidget.onCancel() is called, args.onCancel is called" ilk="function" name="onCancel" />
            <variable doc="callback whenever this popup is closed" ilk="function" name="onClose" />
            <variable doc="callback when user &amp;amp;quot;executed&amp;amp;quot; on the popup/sub-popup by selecting a menu choice, etc. (top menu only)" ilk="function" name="onExecute" />
            <variable citdl="dijit.__Position" doc="adding a buffer around the opening position. This is only useful when around is not set." name="padding" />
          </scope>
          <variable doc="Prepares a node to be used as a popup" ilk="function" name="prepare" signature="prepare(node)">
            <variable citdl="DomNode" ilk="argument" name="node" />
          </variable>
          <variable doc="" name="popup" />
          <variable doc="" name="parent" />
          <variable doc="" name="around" />
          <variable doc="" name="x" />
          <variable doc="" name="y" />
          <variable doc="" name="orient" />
          <variable doc="" name="onCancel" />
          <variable doc="" name="onClose" />
          <variable doc="" name="onExecute" />
          <variable doc="" name="padding" />
          <variable doc="Popup the widget at the specified position" ilk="function" name="open" signature="open(args)">
            <variable citdl="dijit.popup.__OpenArgs" ilk="argument" name="args" />
          </variable>
          <variable doc="Close specified popup and any popups that it parented" ilk="function" name="close" signature="close(popup)">
            <variable citdl="Widget" ilk="argument" name="popup" />
          </variable>
        </scope>
        <scope attributes="private" doc="cache of iframes" ilk="function" name="_frames">
          <scope name="initialized" />
          <variable doc="" ilk="function" name="pop" />
          <variable doc="" ilk="function" name="push" signature="push(iframe)">
            <variable ilk="argument" name="iframe" />
          </variable>
        </scope>
        <scope doc="For IE z-index schenanigans. id attribute is required." ilk="function" name="BackgroundIframe" signature="BackgroundIframe(node)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable doc="" name="iframe" />
          <scope doc="destroy the iframe" ilk="function" name="destroy" />
        </scope>
        <scope ilk="function" name="scrollIntoView" returns="TODO: handle without native call" signature="scrollIntoView(node)">
          <variable citdl="DomNode" ilk="argument" name="node" />
        </scope>
        <variable citdl="Object" doc="These functions are used to repetitively call a user specified callback method when a specific key or mouse click over a specific DOM node is held down for a specific amount of time. Only 1 such event is allowed to occur on the browser page at 1 time." name="typematic">
          <scope attributes="private" doc="" ilk="function" name="_fireEventAndReload">
            <variable attributes="private" doc="" name="_timer" />
            <variable attributes="private" doc="" name="_currentTimeout" />
          </scope>
          <scope doc="Start a timed, repeating callback sequence. If already started, the function call is ignored. This method is not normally called by the user but can be when the normal listener code is insufficient." ilk="function" name="trigger" signature="trigger(evt,_this,node,callback,obj,subsequentDelay,initialDelay)">
            <variable citdl="Event" doc="key or mouse event object" ilk="argument" name="evt" />
            <variable citdl="Object" doc="pointer to the user&apos;s widget space." ilk="argument" name="_this" />
            <variable citdl="DOMNode" doc="the DOM node object passed in" ilk="argument" name="node" />
            <variable doc="function to call until the sequence is stopped called with 3 parameters: count: integer representing number of repeated calls (0..n) with -1 indicating the iteration has stopped" ilk="function" name="callback" />
            <variable citdl="Object" doc="user space object used to uniquely identify each typematic sequence" ilk="argument" name="obj" />
            <variable citdl="Number" doc="if &amp;amp;gt; 1, the number of milliseconds until the 3-&amp;amp;gt;n events occur or else the fractional time multiplier for the next event&apos;s delay, default=0.9" ilk="argument" name="subsequentDelay" />
            <variable citdl="Number" doc="the number of milliseconds until the 2nd event occurs, default=500ms" ilk="argument" name="initialDelay" />
            <variable attributes="private" doc="" name="_initialDelay" />
            <variable attributes="private" doc="" name="_subsequentDelay" />
            <variable attributes="private" doc="" name="_obj" />
            <variable attributes="private" doc="" name="_evt" />
            <variable attributes="private" doc="" name="_node" />
            <variable attributes="private" doc="" name="_currentTimeout" />
            <variable attributes="private" doc="" name="_count" />
            <variable attributes="private" doc="" name="_callback" />
          </scope>
          <scope doc="Stop an ongoing timed, repeating callback sequence." ilk="function" name="stop">
            <variable attributes="private" doc="" name="_timer" />
            <variable attributes="private" doc="" name="_obj" />
          </scope>
          <scope doc="Start listening for a specific typematic key. See also the trigger method for other parameters." ilk="function" name="addKeyListener" signature="addKeyListener(node,keyObject,_this,callback,subsequentDelay,initialDelay)">
            <variable citdl="DOMNode" ilk="argument" name="node" />
            <variable citdl="Object" doc="an object defining the key to listen for. charOrCode: the printable character (string) or keyCode (number) to listen for. keyCode: (deprecated - use charOrCode) the keyCode (number) to listen for (implies charCode = 0). charCode: (deprecated - use charOrCode) the charCode (number) to listen for. ctrlKey: desired ctrl key state to initiate the calback sequence: - pressed (true) - released (false) - either (unspecified) altKey: same as ctrlKey but for the alt key shiftKey: same as ctrlKey but for the shift key" ilk="argument" name="keyObject" />
            <variable citdl="Object" ilk="argument" name="_this" />
            <variable ilk="function" name="callback" />
            <variable citdl="Number" ilk="argument" name="subsequentDelay" />
            <variable citdl="Number" ilk="argument" name="initialDelay" />
            <variable name="return_summary" />
          </scope>
          <scope doc="Start listening for a typematic mouse click. See the trigger method for other parameters." ilk="function" name="addMouseListener" signature="addMouseListener(node,_this,callback,subsequentDelay,initialDelay)">
            <variable citdl="DOMNode" ilk="argument" name="node" />
            <variable citdl="Object" ilk="argument" name="_this" />
            <variable ilk="function" name="callback" />
            <variable citdl="Number" ilk="argument" name="subsequentDelay" />
            <variable citdl="Number" ilk="argument" name="initialDelay" />
            <variable name="return_summary" />
          </scope>
          <scope doc="Start listening for a specific typematic key and mouseclick. This is a thin wrapper to addKeyListener and addMouseListener. See the addMouseListener and addKeyListener methods for other parameters." ilk="function" name="addListener" signature="addListener(mouseNode,keyNode,keyObject,_this,callback,subsequentDelay,initialDelay)">
            <variable citdl="Node" doc="the DOM node object to listen on for mouse events." ilk="argument" name="mouseNode" />
            <variable citdl="Node" doc="the DOM node object to listen on for key events." ilk="argument" name="keyNode" />
            <variable citdl="Object" ilk="argument" name="keyObject" />
            <variable citdl="Object" ilk="argument" name="_this" />
            <variable ilk="function" name="callback" />
            <variable citdl="Number" ilk="argument" name="subsequentDelay" />
            <variable citdl="Number" ilk="argument" name="initialDelay" />
            <variable name="return_summary" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="wai">
          <scope doc="" ilk="function" name="onload" />
        </variable>
        <scope doc="Determines if an element has a particular non-XHTML role." ilk="function" name="hasWaiRole" signature="hasWaiRole(elem,role)">
          <variable citdl="Element" ilk="argument" name="elem" />
          <variable citdl="String" ilk="argument" name="role" />
        </scope>
        <scope doc="Gets the non-XHTML role for an element (which should be a wai role)." ilk="function" name="getWaiRole" signature="getWaiRole(elem)">
          <variable citdl="Element" ilk="argument" name="elem" />
        </scope>
        <scope doc="Sets the role on an element." ilk="function" name="setWaiRole" signature="setWaiRole(elem,role)">
          <variable citdl="Element" ilk="argument" name="elem" />
          <variable citdl="String" ilk="argument" name="role" />
        </scope>
        <scope doc="Removes the specified non-XHTML role from an element. Removes role attribute if no specific role provided (for backwards compat.)" ilk="function" name="removeWaiRole" signature="removeWaiRole(elem,role)">
          <variable citdl="Element" ilk="argument" name="elem" />
          <variable citdl="String" ilk="argument" name="role" />
        </scope>
        <scope doc="Determines if an element has a given state." ilk="function" name="hasWaiState" returns="www.w3.org/2005/07/aaa&amp;quot;, state);" signature="hasWaiState(elem,state)">
          <variable citdl="Element" ilk="argument" name="elem" />
          <variable citdl="String" ilk="argument" name="state" />
        </scope>
        <scope doc="Gets the value of a state on an element." ilk="function" name="getWaiState" returns="www.w3.org/2005/07/aaa&amp;quot;, state);" signature="getWaiState(elem,state)">
          <variable citdl="Element" ilk="argument" name="elem" />
          <variable citdl="String" ilk="argument" name="state" />
        </scope>
        <scope doc="Sets a state on an element." ilk="function" name="setWaiState" signature="setWaiState(elem,state,value)">
          <variable citdl="Element" ilk="argument" name="elem" />
          <variable citdl="String" ilk="argument" name="state" />
          <variable citdl="String" ilk="argument" name="value" />
        </scope>
        <scope doc="Removes a state from an element." ilk="function" name="removeWaiState" signature="removeWaiState(elem,state)">
          <variable citdl="Element" ilk="argument" name="elem" />
          <variable citdl="String" ilk="argument" name="state" />
        </scope>
        <scope ilk="function" name="getDocumentWindow" returns="Window" signature="getDocumentWindow(doc)">
          <variable ilk="argument" name="doc" />
        </scope>
        <variable attributes="private" citdl="Object" doc="" name="_base" />
        <variable attributes="private" citdl="Object" doc="" name="_editor">
          <scope doc="" ilk="function" name="_Plugin" signature="_Plugin(args,node)">
            <variable citdl="Object" ilk="argument" name="args" />
            <variable citdl="DomNode" ilk="argument" name="node" />
            <variable citdl="dijit.Editor" doc="Points to the parent editor" name="editor">
              <scope name="tags" />
            </variable>
            <scope citdl="String" doc="The CSS class name for the button node is formed from `iconClassPrefix` and `command`" name="iconClassPrefix">
              <scope name="tags" />
            </scope>
            <variable citdl="dijit._Widget" doc="Pointer to `dijit.form.Button` or other widget (ex: `dijit.form.FilteringSelect`) that controls this plugin. If not specified, will be created on initialization according to `buttonClass`" name="button">
              <variable doc="" name="checked" />
              <scope name="domNode" />
            </variable>
            <scope citdl="TODO" doc="unused, remove" name="queryCommand" />
            <scope citdl="String" doc="String like &amp;amp;quot;insertUnorderedList&amp;amp;quot;, &amp;amp;quot;outdent&amp;amp;quot;, &amp;amp;quot;justifyCenter&amp;amp;quot;, etc. that represents an editor command. Passed to editor.execCommand() if `useDefaultCommand` is true." name="command" />
            <scope citdl="anything" doc="Argument to execCommand() after command. TODO: unused, remove" name="commandArg" />
            <scope citdl="Boolean" doc="If true, this plugin executes by calling Editor.execCommand() with the argument specified in `command`." name="useDefaultCommand" />
            <scope citdl="Widget" doc="Class Class for button to control this plugin. This is used to instantiate the button, unless `button` itself is specified directly." name="buttonClass" />
            <scope attributes="private" doc="Returns the label to use for the button" ilk="function" name="getLabel" returns="String" signature="getLabel(key)">
              <variable citdl="String" ilk="argument" name="key" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Initialize the button that will control this plugin. This code only works for plugins controlling built-in commands in the editor." ilk="function" name="_initButton" signature="_initButton(props)">
              <variable ilk="argument" name="props" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="destroy" returns="String" signature="destroy(f)">
              <variable ilk="argument" name="f" />
            </scope>
            <scope doc="Make a dojo.connect() that is automatically disconnected when this plugin is destroyed. Similar to `dijit._Widget.connect`." ilk="function" name="connect" signature="connect(o,f,tf)">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="f" />
              <variable ilk="argument" name="tf" />
              <variable name="tags" />
            </scope>
            <scope doc="Change state of the plugin to respond to events in the editor." ilk="function" name="updateState" />
            <scope attributes="private" doc="" ilk="function" name="setEditor" returns="String" signature="setEditor(editor)">
              <variable citdl="dijit.Editor" ilk="argument" name="editor" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="setToolbar" returns="String" signature="setToolbar(toolbar)">
              <variable citdl="dijit.Toolbar" ilk="argument" name="toolbar" />
            </scope>
            <variable doc="" name="enabled" />
            <variable doc="" name="checked" />
            <variable attributes="private" doc="" name="_connects" />
          </scope>
          <scope attributes="private" doc="Adds escape sequences for special characters in XML: &amp;amp;amp;&amp;amp;lt;&amp;amp;gt;&amp;amp;quot;&apos; Optionally skips escapes for single quotes" ilk="function" name="escapeXml" returns="string" signature="escapeXml(str,noSingleQuotes)">
            <variable citdl="String" ilk="argument" name="str" />
            <variable citdl="Boolean" ilk="argument" name="noSingleQuotes" />
          </scope>
          <scope doc="" ilk="function" name="getNodeHtml" signature="getNodeHtml(node)">
            <variable citdl="DomNode" ilk="argument" name="node" />
          </scope>
          <scope attributes="private" doc="Returns the html content of a DomNode and children" ilk="function" name="getChildrenHtml" returns="String" signature="getChildrenHtml(dom)">
            <variable citdl="DomNode" ilk="argument" name="dom" />
          </scope>
          <variable citdl="Object" doc="" name="html" />
          <variable citdl="Object" doc="" name="plugins">
            <scope doc="For auto-expanding editors, this plugin will keep the editor&apos;s toolbar visible even when the top of the editor has scrolled off the top of the viewport (usually when editing a long document)." ilk="function" name="AlwaysShowToolbar">
              <variable attributes="private" citdl="Boolean" doc="Enables/disables the handler for scroll events" name="_handleScroll" />
              <scope doc="" ilk="function" name="setEditor" signature="setEditor(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope doc="Enable plugin. Called when Editor has finished initializing." ilk="function" name="enable" signature="enable(d)">
                <variable ilk="argument" name="d" />
                <variable name="tags" />
              </scope>
              <scope attributes="private" doc="Updates the height of the editor area to fit the contents." ilk="function" name="_updateHeight" returns="prevent setting height to 0" />
              <variable attributes="private" citdl="Integer" doc="Height in px of the editor at the last time we did sizing" name="_lastHeight" />
              <scope doc="Handler for scroll events that bubbled up to &amp;amp;lt;html&amp;amp;gt;" ilk="function" name="globalOnScrollHandler">
                <variable name="tags" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="destroy" returns="prevent setting height to 0" />
              <variable doc="" name="editor" />
              <variable attributes="private" doc="" name="_scrollSetUp" />
              <variable attributes="private" doc="" name="_scrollThreshold" />
              <variable attributes="private" doc="" name="_IEOriginalPos" />
              <variable attributes="private" doc="" name="_fixEnabled" />
            </scope>
            <scope doc="This plugin tries to make all browsers have identical behavior when the user presses the ENTER key. Specifically, it fixes the double-spaced line problem on IE." ilk="function" name="EnterKeyHandling" signature="EnterKeyHandling(args)">
              <variable ilk="argument" name="args" />
              <variable citdl="String" doc="this property decides the behavior of Enter key. It can be either P, DIV, BR, or empty (which means disable this feature). Anything else will trigger errors." name="blockNodeForEnter" />
              <scope doc="" ilk="function" name="setEditor" signature="setEditor(editor)">
                <variable ilk="argument" name="editor" />
              </scope>
              <scope doc="" ilk="function" name="connect" signature="connect(o,f,tf)">
                <variable ilk="argument" name="o" />
                <variable ilk="argument" name="f" />
                <variable ilk="argument" name="tf" />
              </scope>
              <scope doc="" ilk="function" name="destroy" />
              <scope doc="Handler for keypress events." ilk="function" name="onKeyPressed" signature="onKeyPressed(e)">
                <variable ilk="argument" name="e" />
                <variable name="tags" />
              </scope>
              <scope citdl="String" doc="HTML to stick into a new empty block" name="bogusHtmlContent">
                <scope name="tags" />
              </scope>
              <scope citdl="Regex" doc="Regex for testing if a given tag is a block level (display:block) tag" name="blockNodes">
                <scope name="tags" />
              </scope>
              <scope attributes="private" doc="Handler for enter key events." ilk="function" name="handleEnterKey" returns="let brower handle" signature="handleEnterKey(e)">
                <variable ilk="argument" name="e" />
                <variable name="tags" />
              </scope>
              <scope doc="If last child of container is a &amp;amp;lt;br&amp;amp;gt;, then remove it." ilk="function" name="removeTrailingBr" signature="removeTrailingBr(container)">
                <variable ilk="argument" name="container" />
                <variable name="tags" />
              </scope>
              <scope attributes="private" doc="Insert CSS so &amp;amp;lt;p&amp;amp;gt; nodes don&apos;t have spacing around them, thus hiding the fact that ENTER key on IE is creating new paragraphs" ilk="function" name="_fixNewLineBehaviorForIE" returns="HTMLStyleElement" signature="_fixNewLineBehaviorForIE(d)">
                <variable ilk="argument" name="d" />
              </scope>
              <scope doc="Converts a &amp;amp;lt;p&amp;amp;gt; node containing &amp;amp;lt;br&amp;amp;gt;&apos;s into multiple &amp;amp;lt;p&amp;amp;gt; nodes." ilk="function" name="regularPsToSingleLinePs" signature="regularPsToSingleLinePs(element,noWhiteSpaceInEmptyP)">
                <variable ilk="argument" name="element" />
                <variable ilk="argument" name="noWhiteSpaceInEmptyP" />
                <variable name="tags" />
              </scope>
              <scope doc="Called as post-filter. Apparently collapses adjacent &amp;amp;lt;p&amp;amp;gt; nodes into a single &amp;amp;lt;p&amp;amp;gt; nodes with &amp;amp;lt;br&amp;amp;gt; separating each line." ilk="function" name="singleLinePsToRegularPs" signature="singleLinePsToRegularPs(element)">
                <variable ilk="argument" name="element" />
                <variable name="tags" />
              </scope>
              <variable doc="" name="editor">
                <scope name="document">
                  <variable attributes="private" doc="" name="__INSERTED_EDITIOR_NEWLINE_CSS" />
                </scope>
              </variable>
              <variable attributes="private" doc="" name="_connects" />
              <variable attributes="private" doc="" name="_checkListLater" />
              <variable attributes="private" doc="" name="_pressedEnterInBlock" />
            </scope>
            <scope doc="This plugin provides three dropdowns for setting font information in the editor" ilk="function" name="FontChoice">
              <scope attributes="private" doc="" name="_uniqueId" />
              <scope doc="" name="buttonClass" />
              <scope doc="" name="useDefaultCommand" />
              <scope attributes="private" doc="" ilk="function" name="_initButton" />
              <scope doc="" ilk="function" name="updateState" />
              <scope doc="" ilk="function" name="setToolbar" />
              <variable attributes="private" doc="" name="_availableValues" />
              <variable doc="" name="command" />
              <variable doc="" name="updating" />
              <variable attributes="private" doc="" name="_focusHandle" />
            </scope>
            <scope doc="This plugin provides dialogs for inserting links and images into the editor" ilk="function" name="LinkDialog">
              <scope doc="" name="buttonClass" />
              <scope doc="" name="useDefaultCommand" />
              <scope citdl="String" doc="Used for validating input as correct URL" name="urlRegExp">
                <scope name="tags" />
              </scope>
              <scope citdl="String" doc="Template for contents of TooltipDialog to pick URL" name="linkDialogTemplate">
                <scope name="tags" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_initButton" />
              <scope attributes="private" doc="Helper for _initButton above. Not sure why it&apos;s a separate method." ilk="function" name="_setContent" signature="_setContent(staticPanel)">
                <variable ilk="argument" name="staticPanel" />
              </scope>
              <scope doc="Callback from the dialog when user presses &amp;amp;quot;set&amp;amp;quot; button." ilk="function" name="setValue" signature="setValue(args)">
                <variable ilk="argument" name="args" />
              </scope>
              <scope attributes="private" doc="Handler for close event on the dialog" ilk="function" name="_onCloseDialog" />
              <scope attributes="private" doc="Handler for when the dialog is opened. If the caret is currently in a URL then populate the URL&apos;s info into the dialog." ilk="function" name="_onOpenDialog" />
              <variable doc="" name="tag" />
              <variable doc="" name="dropDown" />
            </scope>
            <scope doc="This plugin is used to allow the use of the tab and shift-tab keys to indent/outdent list items. This overrides the default behavior of moving focus from/to the toolbar  Override _Plugin.useDefaultCommand... processing is handled by this plugin, not by dijit.Editor." ilk="function" name="TabIndent">
              <scope doc="" name="useDefaultCommand" />
              <scope doc="" name="buttonClass" />
              <scope doc="" name="command" />
              <scope attributes="private" doc="" ilk="function" name="_initButton" />
              <scope doc="" ilk="function" name="updateState" />
              <scope attributes="private" doc="" ilk="function" name="_tabIndent" />
              <scope name="button">
                <variable doc="" name="checked" />
              </scope>
              <scope name="editor">
                <variable doc="" name="isTabIndent" />
              </scope>
            </scope>
            <scope doc="This plugin provides dropdown color pickers for setting text color and background color" ilk="function" name="TextColor">
              <scope doc="" name="buttonClass" />
              <variable doc="" name="dropDown" />
            </scope>
            <scope doc="" ilk="function" name="ToggleDir">
              <scope doc="" name="useDefaultCommand" />
              <scope doc="" name="command" />
              <scope attributes="private" doc="" ilk="function" name="_initButton" />
              <scope doc="" ilk="function" name="updateState" />
              <scope attributes="private" doc="Handler for button click events, to switch the text direction of the editor" ilk="function" name="_toggleDir" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="range" />
          <variable citdl="Object" doc="" name="selection">
            <scope doc="Get the selection type (like dojo.doc.select.type in IE)." ilk="function" name="getType" />
            <scope doc="Return the text (no html tags) included in the current selection or null if no text is selected" ilk="function" name="getSelectedText" />
            <scope doc="Return the html of the current selection or null if unavailable" ilk="function" name="getSelectedHtml" />
            <scope doc="Retrieves the selected element (if any), just in the case that a single element (object like and image or a table) is selected." ilk="function" name="getSelectedElement" />
            <scope doc="Get the parent element of the current selection" ilk="function" name="getParentElement" />
            <scope doc="Check whether current selection has a parent element which is of type tagName (or one of the other specified tagName)" ilk="function" name="hasAncestorElement" signature="hasAncestorElement(tagName)">
              <variable citdl="String" ilk="argument" name="tagName">
                <scope name="repeating" />
              </variable>
            </scope>
            <scope doc="Return the parent element of the current selection which is of type tagName (or one of the other specified tagName)" ilk="function" name="getAncestorElement" signature="getAncestorElement(tagName)">
              <variable citdl="String" ilk="argument" name="tagName">
                <scope name="repeating" />
              </variable>
            </scope>
            <scope doc="" ilk="function" name="isTag" signature="isTag(node,tags)">
              <variable citdl="DomNode" ilk="argument" name="node" />
              <variable citdl="Array" ilk="argument" name="tags" />
            </scope>
            <scope doc="" ilk="function" name="getParentOfType" signature="getParentOfType(node,tags)">
              <variable citdl="DomNode" ilk="argument" name="node" />
              <variable citdl="Array" ilk="argument" name="tags" />
            </scope>
            <scope doc="clear current selection" ilk="function" name="collapse" signature="collapse(beginning)">
              <variable citdl="Boolean" ilk="argument" name="beginning" />
            </scope>
            <scope doc="delete current selection" ilk="function" name="remove" />
            <scope doc="clear previous selection and select the content of the node (excluding the node itself)" ilk="function" name="selectElementChildren" signature="selectElementChildren(element,nochangefocus)">
              <variable citdl="DomNode" ilk="argument" name="element" />
              <variable citdl="Boolean" ilk="argument" name="nochangefocus" />
            </scope>
            <scope doc="clear previous selection and select element (including all its children)" ilk="function" name="selectElement" signature="selectElement(element,nochangefocus)">
              <variable citdl="DomNode" ilk="argument" name="element" />
              <variable citdl="Boolean" ilk="argument" name="nochangefocus" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="" name="range">
          <variable citdl="Object" doc="" name="ie">
            <variable citdl="Object" doc="" name="cachedSelection" />
            <scope doc="" ilk="function" name="selection" signature="selection(win)">
              <variable ilk="argument" name="win" />
              <variable attributes="private" doc="" name="_ranges" />
              <variable doc="" ilk="function" name="addRange" signature="addRange(r,internal)">
                <variable ilk="argument" name="r" />
                <variable citdl="boolean" ilk="argument" name="internal" />
              </variable>
              <variable doc="" name="rangeCount" />
              <variable attributes="private" doc="" ilk="function" name="removeAllRanges" returns="terminate dojo.every|carry on the every loop" />
              <variable doc="" ilk="function" name="getRangeAt" signature="getRangeAt(i)">
                <variable ilk="argument" name="i" />
              </variable>
              <variable attributes="private" doc="" ilk="function" name="_getCurrentSelection" />
            </scope>
            <scope doc="" ilk="function" name="decomposeControlRange" signature="decomposeControlRange(range)">
              <variable ilk="argument" name="range" />
            </scope>
            <scope doc="" ilk="function" name="getEndPoint" signature="getEndPoint(range,end)">
              <variable ilk="argument" name="range" />
              <variable ilk="argument" name="end" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="setEndPoint" returns="terminate dojo.every|carry on the every loop" signature="setEndPoint(range,container,offset)">
              <variable ilk="argument" name="range" />
              <variable ilk="argument" name="container" />
              <variable ilk="argument" name="offset" />
            </scope>
            <scope doc="" ilk="function" name="decomposeTextRange" signature="decomposeTextRange(range)">
              <variable ilk="argument" name="range" />
            </scope>
            <scope doc="" ilk="function" name="setRange" signature="setRange(range,startContainter,startOffset,endContainter,endOffset,collapsed)">
              <variable ilk="argument" name="range" />
              <variable ilk="argument" name="startContainter" />
              <variable ilk="argument" name="startOffset" />
              <variable ilk="argument" name="endContainter" />
              <variable ilk="argument" name="endOffset" />
              <variable ilk="argument" name="collapsed" />
            </scope>
          </variable>
          <scope doc="" ilk="function" name="getIndex" signature="getIndex(node,parent)">
            <variable citdl="DomNode" ilk="argument" name="node" />
            <variable citdl="DomNode" ilk="argument" name="parent" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="getNode" returns="terminate dojo.every|carry on the every loop" signature="getNode(index,parent)">
            <variable citdl="Array" ilk="argument" name="index" />
            <variable citdl="DomNode" ilk="argument" name="parent" />
          </scope>
          <scope doc="" ilk="function" name="getCommonAncestor" signature="getCommonAncestor(n1,n2)">
            <variable ilk="argument" name="n1" />
            <variable ilk="argument" name="n2" />
          </scope>
          <scope doc="" ilk="function" name="getAncestor" signature="getAncestor(node,regex,root)">
            <variable citdl="DomNode" ilk="argument" name="node" />
            <variable citdl="RegEx" ilk="argument" name="regex" />
            <variable citdl="DomNode" ilk="argument" name="root" />
          </scope>
          <scope doc="" ilk="function" name="getBlockAncestor" signature="getBlockAncestor(node,regex,root)">
            <variable citdl="DomNode" ilk="argument" name="node" />
            <variable citdl="RegEx" ilk="argument" name="regex" />
            <variable citdl="DomNode" ilk="argument" name="root" />
          </scope>
          <scope doc="" ilk="function" name="atBeginningOfContainer" signature="atBeginningOfContainer(container,node,offset)">
            <variable citdl="DomNode" ilk="argument" name="container" />
            <variable citdl="DomNode" ilk="argument" name="node" />
            <variable citdl="Int" ilk="argument" name="offset" />
          </scope>
          <scope doc="" ilk="function" name="atEndOfContainer" signature="atEndOfContainer(container,node,offset)">
            <variable citdl="DomNode" ilk="argument" name="container" />
            <variable citdl="DomNode" ilk="argument" name="node" />
            <variable citdl="Int" ilk="argument" name="offset" />
          </scope>
          <scope doc="" ilk="function" name="adjacentNoneTextNode" signature="adjacentNoneTextNode(startnode,next)">
            <variable ilk="argument" name="startnode" />
            <variable ilk="argument" name="next" />
          </scope>
          <scope doc="" ilk="function" name="create" />
          <scope doc="" ilk="function" name="getSelection" signature="getSelection(win,ignoreUpdate)">
            <variable ilk="argument" name="win" />
            <variable citdl="Boolean" ilk="argument" name="ignoreUpdate" />
          </scope>
          <scope doc="" name="BlockTagNames" />
          <scope attributes="private" doc="" name="_w3c" />
        </variable>
        <variable attributes="private" citdl="Object" doc="" name="_tree">
          <scope doc="Initialization" ilk="function" name="dndSelector" signature="dndSelector(tree,params)">
            <variable ilk="argument" name="tree" />
            <variable ilk="argument" name="params" />
            <variable name="tags" />
            <scope citdl="Boolean" doc="Apparently this is indicates whether a single or multiple elements are selected, but AFAIK Tree doesn&apos;t support multiple selection, so it doesn&apos;t do anything. (There is, however, a bunch of dead code that would only run if singular == true)   methods" name="singular">
              <scope name="tags" />
            </scope>
            <scope doc="Returns selected items, for which there is only one for Tree?" ilk="function" name="getSelectedItems" />
            <scope doc="Returns the set of selected nodes. Used by dndSource on the start of a drag." ilk="function" name="getSelectedNodes">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Unselects all items" ilk="function" name="selectNone" returns="self">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Inserts new data items (see Container&apos;s insertNodes method for details). Apparently an unused method." ilk="function" name="insertItems" returns="self" signature="insertItems(item,parent)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="parent" />
            </scope>
            <scope doc="Prepares the object to be garbage-collected" ilk="function" name="destroy" />
            <scope attributes="private" doc="Event processor for onmousedown" ilk="function" name="onMouseDown" returns="ignore right-click" signature="onMouseDown(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope doc="Event processor for onmouseup" ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Unselects all items" ilk="function" name="_removeSelection" returns="self">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Removes the Anchor CSS class from a node. According to `dojo.dnd.Selector`, anchor means that &amp;amp;quot;an item is selected, and is an anchor for a &apos;shift&apos; selection&amp;amp;quot;. It&apos;s not relevant for Tree at this point, since we don&apos;t support multiple selection." ilk="function" name="_removeAnchor" returns="self">
              <variable name="tags" />
            </scope>
            <variable doc="" name="selection" />
            <scope name="current">
              <variable doc="" name="id" />
            </scope>
            <variable doc="" name="simpleSelection" />
            <variable doc="" name="anchor" />
          </scope>
          <scope doc="a constructor of the Tree DnD Source" ilk="function" name="dndSource" signature="dndSource(tree,params)">
            <variable citdl="dijit.Tree" ilk="argument" name="tree" />
            <variable citdl="dijit._tree.__SourceArgs" ilk="argument" name="params" />
            <variable name="tags" />
            <variable citdl="Boolean" doc="Can be used as a DnD source." name="isSource">
              <scope name="tags" />
            </variable>
            <variable citdl="String[" doc="List of accepted types (text strings) for the Tree; defaults to [&amp;amp;quot;text&amp;amp;quot;]" name="accept" />
            <scope citdl="Boolean" doc="Copy items, if true, use a state of Ctrl key otherwise" name="copyOnly">
              <scope name="tags" />
            </scope>
            <scope citdl="Number" doc="The move delay in pixels before detecting a drag; 0 by default" name="dragThreshold" />
            <scope citdl="Integer" doc="Distance from upper/lower edge of node to allow drop to reorder nodes" name="betweenThreshold" />
            <scope citdl="Boolean" doc="TODO: apparently unused, should be removed" name="skipForm">
              <scope name="tags" />
            </scope>
            <scope doc="Apparently unused. TODO: remove" ilk="function" name="startup">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Checks if the target can accept nodes from this source" ilk="function" name="checkAcceptance" returns="Boolean" signature="checkAcceptance(source,nodes)">
              <variable citdl="dijit.tree._dndSource" doc="The source which provides items" ilk="argument" name="source" />
              <variable citdl="DOMNode[" doc="Array of DOM nodes corresponding to nodes being dropped, dijitTreeRow nodes if source is a dijit.Tree." ilk="argument" name="nodes" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Returns true, if we need to copy items, false to move. It is separated to be overwritten dynamically, if needed." ilk="function" name="copyState" returns="Boolean" signature="copyState(keyPressed)">
              <variable citdl="Boolean" doc="The &amp;amp;quot;copy&amp;amp;quot; control key was pressed" ilk="argument" name="keyPressed" />
              <variable name="tags" />
            </scope>
            <scope doc="Prepares the object to be garbage-collected." ilk="function" name="destroy" />
            <scope attributes="private" doc="Helper method for processing onmousemove/onmouseover events while drag is in progress. Keeps track of current drop target." ilk="function" name="_onDragMouse" signature="_onDragMouse(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Called for any onmousemove events over the Tree" ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable citdl="Event" doc="onmousemouse event" ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope doc="Event processor for onmousedown" ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="onmousedown event" ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope doc="Event processor for onmouseup" ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="onmouseup event" ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope doc="Event processor for when mouse is moved over a TreeNode" ilk="function" name="onMouseOver" signature="onMouseOver(widget,e)">
              <variable citdl="TreeNode" ilk="argument" name="widget" />
              <variable citdl="Event" ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope doc="Event processor for when mouse is moved away from a TreeNode" ilk="function" name="onMouseOut">
              <variable name="tags" />
            </scope>
            <scope doc="Stub function to be overridden if one wants to check for the ability to drop at the node/item level" ilk="function" name="checkItemAcceptance" signature="checkItemAcceptance(target,source,position)">
              <variable citdl="DOMNode" doc="The dijitTreeRoot DOM node inside of the TreeNode that we are dropping on to Use dijit.getEnclosingWidget(target) to get the TreeNode." ilk="argument" name="target" />
              <variable citdl="dijit._tree.dndSource" doc="The (set of) nodes we are dropping" ilk="argument" name="source" />
              <variable citdl="String" doc="&amp;amp;quot;over&amp;amp;quot;, &amp;amp;quot;before&amp;amp;quot;, or &amp;amp;quot;after&amp;amp;quot;" ilk="argument" name="position" />
              <variable name="tags" />
            </scope>
            <scope doc="Topic event processor for /dnd/source/over, called when detected a current source." ilk="function" name="onDndSourceOver" signature="onDndSourceOver(source)">
              <variable citdl="Object" doc="The dijit.tree._dndSource / dojo.dnd.Source which has the mouse over it" ilk="argument" name="source" />
              <variable name="tags" />
            </scope>
            <scope doc="Topic event processor for /dnd/start, called to initiate the DnD operation" ilk="function" name="onDndStart" signature="onDndStart(source,nodes,copy)">
              <variable citdl="Object" doc="The dijit.tree._dndSource / dojo.dnd.Source which is providing the items" ilk="argument" name="source" />
              <variable citdl="DomNode[" doc="The list of transferred items, dndTreeNode nodes if dragging from a Tree" ilk="argument" name="nodes" />
              <variable citdl="Boolean" doc="Copy items, if true, move items otherwise" ilk="argument" name="copy" />
              <variable name="tags" />
            </scope>
            <scope doc="Returns the &amp;amp;quot;item&amp;amp;quot; passed to the drop target (which is not necessarily a Tree, could be anything)" ilk="function" name="itemCreator" signature="itemCreator(nodes)">
              <variable ilk="argument" name="nodes" />
              <variable name="tags" />
            </scope>
            <scope doc="Topic event processor for /dnd/drop, called to finish the DnD operation." ilk="function" name="onDndDrop" signature="onDndDrop(source,nodes,copy)">
              <variable citdl="Object" doc="The dijit.tree._dndSource / dojo.dnd.Source which is providing the items" ilk="argument" name="source" />
              <variable citdl="DomNode[" doc="The list of transferred items, dndTreeNode nodes if dragging from a Tree" ilk="argument" name="nodes" />
              <variable citdl="Boolean" doc="Copy items, if true, move items otherwise" ilk="argument" name="copy" />
              <variable name="tags" />
            </scope>
            <scope doc="Topic event processor for /dnd/cancel, called to cancel the DnD operation" ilk="function" name="onDndCancel">
              <variable name="tags" />
            </scope>
            <scope doc="This method is called when mouse is moved over our container (like onmouseenter)" ilk="function" name="onOverEvent">
              <variable name="tags" />
            </scope>
            <scope doc="This method is called when mouse is moved out of our container (like onmouseleave)" ilk="function" name="onOutEvent">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Removes hover class of the current target anchor" ilk="function" name="_unmarkTargetAnchor">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Changes source&apos;s state based on &amp;amp;quot;copy&amp;amp;quot; status" ilk="function" name="_markDndStatus" signature="_markDndStatus(copy)">
              <variable ilk="argument" name="copy" />
            </scope>
            <variable doc="" name="targetAnchor" />
            <variable doc="" name="targetBox" />
            <variable doc="" name="dropPosition" />
            <variable doc="" name="targetState" />
            <variable doc="" name="mouseDown" />
            <variable doc="" name="mouseButton" />
            <variable attributes="private" doc="" name="_lastX" />
            <variable attributes="private" doc="" name="_lastY" />
            <variable doc="" name="isDragging" />
            <variable doc="" name="containerState" />
            <variable doc="" name="sourceState" />
            <variable doc="" name="topics" />
          </scope>
          <scope doc="A constructor of the Target --- see the Source constructor for details" ilk="function" name="dndTarget" signature="dndTarget(node,params)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="params" />
            <variable doc="" name="isSource" />
          </scope>
          <scope attributes="private" doc="A dict of parameters for Tree source configuration." ilk="function" name="__SourceArgs">
            <variable citdl="Boolean?" doc="Can be used as a DnD source. Defaults to true." name="isSource" />
            <variable citdl="String[" doc="List of accepted types (text strings) for a target; defaults to [&amp;amp;quot;text&amp;amp;quot;]" name="accept" />
            <variable doc="" name="autoSync" />
            <variable citdl="Boolean?" doc="Copy items, if true, use a state of Ctrl key otherwise," name="copyOnly" />
            <variable citdl="Number" doc="The move delay in pixels before detecting a drag; 0 by default" name="dragThreshold" />
            <variable citdl="Integer" doc="Distance from upper/lower edge of node to allow drop to reorder nodes" name="betweenThreshold" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="dijit-all" />
        <variable citdl="Object" doc="A roll-up for common dijit methods" name="dijit" />
        <variable citdl="Object" doc="Form and input related widgets" name="form">
          <scope doc="Same as an HTML checkbox, but with fancy styling." name="CheckBox">
            <scope doc="" name="templatePath" />
            <scope doc="" name="baseClass" />
            <variable citdl="String" doc="As an initialization parameter, equivalent to value field on normal checkbox (if checked, the value is passed as the value when form is submitted).  However, attr(&apos;value&apos;) will return either the string or false depending on whether or not the checkbox is checked.  attr(&apos;value&apos;, string) will check the checkbox and change the value to the specified string  attr(&apos;value&apos;, boolean) will change the checked state." name="value" />
            <scope attributes="private" doc="Handler for value= attribute to constructor, and also calls to attr(&apos;value&apos;, val)." ilk="function" name="_setValueAttr" signature="_setValueAttr(newValue)">
              <variable citdl="String or Boolean" ilk="argument" name="newValue" />
            </scope>
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;) works." ilk="function" name="_getValueAttr" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope attributes="private" doc="" ilk="function" name="_fillContent" signature="_fillContent(source)">
              <variable citdl="DomNode" ilk="argument" name="source" />
            </scope>
            <scope doc="" ilk="function" name="reset" />
            <scope attributes="private" doc="" ilk="function" name="_onFocus" />
            <scope attributes="private" doc="" ilk="function" name="_onBlur" />
            <variable doc="" name="checkedAttrSetting" />
            <variable attributes="private" doc="" name="_hasBeenBlurred" />
          </scope>
          <scope doc="" name="RadioButton">
            <scope doc="" name="baseClass" />
            <scope attributes="private" doc="" ilk="function" name="_setCheckedAttr" signature="_setCheckedAttr(value)">
              <variable citdl="Boolean" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_clicked" signature="_clicked(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
          </scope>
          <scope doc="Implements the base functionality for ComboBox/FilteringSelect" ilk="function" name="ComboBoxMixin">
            <variable citdl="Object" doc="This is the item returned by the dojo.data.store implementation that provides the data for this cobobox, it&apos;s the currently selected item." name="item" />
            <scope citdl="Integer" doc="Argument to data provider. Specifies number of search results per page (before hitting &amp;amp;quot;next&amp;amp;quot; button)" name="pageSize" />
            <variable citdl="Object" doc="Reference to data provider object used by this ComboBox" name="store" />
            <variable citdl="Object" doc="Mixin to the dojo.data store&apos;s fetch. For example, to set the sort order of the ComboBox menu, pass: {sort:{attribute:&amp;amp;quot;name&amp;amp;quot;,descending: true}}" name="fetchProperties" />
          </scope>
          <scope doc="Focus-less menu for internal use in `dijit.form.ComboBox` tags: private" ilk="function" name="_ComboBoxMenu">
            <scope doc="" name="templateString" />
            <variable attributes="private" citdl="Object" doc="Holds &amp;amp;quot;next&amp;amp;quot; and &amp;amp;quot;previous&amp;amp;quot; text for paging buttons on drop down" name="_messages" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" signature="_setValueAttr(value)">
              <variable citdl="Object" ilk="argument" name="value" />
            </scope>
            <scope doc="Notifies ComboBox/FilteringSelect that user clicked an option in the drop down menu. Probably should be called onSelect." ilk="function" name="onChange" signature="onChange(value)">
              <variable citdl="Object" ilk="argument" name="value" />
              <variable name="tags" />
            </scope>
            <scope doc="Notifies ComboBox/FilteringSelect that user clicked to advance to next/previous page." ilk="function" name="onPage" signature="onPage(direction)">
              <variable citdl="Number" ilk="argument" name="direction" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="postCreate" returns="throw out weird key combinations and spurious events|returns String, (almost) valid HTML (entities encoded)|string" />
            <scope doc="Callback from dijit.popup code to this widget, notifying it that it closed" ilk="function" name="onClose">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Creates an option to appear on the popup menu subclassed by `dijit.form.FilteringSelect`." ilk="function" name="_createOption" signature="_createOption(item,labelFunc)">
              <variable citdl="Object" ilk="argument" name="item" />
              <variable ilk="argument" name="labelFunc" />
            </scope>
            <scope attributes="private" doc="Fills in the items in the drop down list" ilk="function" name="createOptions" returns="throw out weird key combinations and spurious events|returns String, (almost) valid HTML (entities encoded)|string" signature="createOptions(results,dataObject,labelFunc)">
              <variable citdl="Array" doc="of dojo.data items" ilk="argument" name="results" />
              <variable citdl="dojo.data" doc="store" ilk="argument" name="dataObject" />
              <variable ilk="argument" name="labelFunc" />
            </scope>
            <scope doc="Clears the entries in the drop down list, but of course keeps the previous and next buttons." ilk="function" name="clearResultList" />
            <scope doc="Called from _showResultList(). Returns DOM Nodes representing the items in the drop down list." ilk="function" name="getItems" />
            <scope doc="Called from _showResultList(). Returns number of items in the drop down list, not including next and previous buttons." ilk="function" name="getListLength" />
            <scope attributes="private" doc="" ilk="function" name="_onMouseDown" signature="_onMouseDown(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onMouseUp" signature="_onMouseUp(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onMouseOver" signature="_onMouseOver(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onMouseOut" signature="_onMouseOut(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="Does the actual highlight." ilk="function" name="_focusOptionNode" signature="_focusOptionNode(node)">
              <variable citdl="DomNode" ilk="argument" name="node" />
            </scope>
            <scope attributes="private" doc="Removes highlight on highlighted option." ilk="function" name="_blurOptionNode" />
            <scope attributes="private" doc="" ilk="function" name="_highlightNextOption" returns="throw out weird key combinations and spurious events|returns String, (almost) valid HTML (entities encoded)|string" />
            <scope doc="Highlight the first real item in the list (not Previous Choices)." ilk="function" name="highlightFirstOption" />
            <scope doc="Highlight the last real item in the list (not More Choices)." ilk="function" name="highlightLastOption" />
            <scope attributes="private" doc="Highlight the item just above the current selection. If nothing selected, highlight last option (if you select Previous and try to keep scrolling up the list)." ilk="function" name="_highlightPrevOption" />
            <scope attributes="private" doc="Handles page-up and page-down keypresses" ilk="function" name="_page" signature="_page(up)">
              <variable citdl="Boolean" ilk="argument" name="up" />
            </scope>
            <scope doc="Handles pageup keypress. TODO: just call _page directly from handleKey()." ilk="function" name="pageUp">
              <variable name="tags" />
            </scope>
            <scope doc="Handles pagedown keypress. TODO: just call _page directly from handleKey()." ilk="function" name="pageDown">
              <variable name="tags" />
            </scope>
            <scope doc="Returns the highlighted option." ilk="function" name="getHighlightedOption" />
            <scope doc="" ilk="function" name="handleKey" signature="handleKey(key)">
              <variable ilk="argument" name="key" />
            </scope>
            <variable doc="" name="value" />
            <scope name="previousButton">
              <variable doc="" name="innerHTML" />
            </scope>
            <scope name="nextButton">
              <variable doc="" name="innerHTML" />
            </scope>
            <variable attributes="private" doc="" name="_highlighted_option">
              <scope name="previousSibling" />
              <scope name="nextSibling" />
            </variable>
          </scope>
          <scope doc="Auto-completing text box, and base class for dijit.form.FilteringSelect." ilk="function" name="ComboBox">
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;, value) works." ilk="function" name="_setValueAttr" signature="_setValueAttr(value,priorityChange)">
              <variable citdl="String" ilk="argument" name="value" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
            </scope>
          </scope>
          <scope doc="Inefficient but small data store specialized for inlined `dijit.form.ComboBox` data" ilk="function" name="_ComboBoxDataStore" signature="_ComboBoxDataStore(root)">
            <variable citdl="DomNode" ilk="argument" name="root" />
            <scope doc="" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="value" ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="" ilk="function" name="isItemLoaded" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="" ilk="function" name="getFeatures" />
            <scope attributes="private" doc="See dojo.data.util.simpleFetch.fetch()" ilk="function" name="_fetchItems" signature="_fetchItems(args,findCallback,errorCallback)">
              <variable citdl="Object" ilk="argument" name="args" />
              <variable ilk="function" name="findCallback" />
              <variable ilk="function" name="errorCallback" />
            </scope>
            <scope doc="" ilk="function" name="close" signature="close(request)">
              <variable citdl="dojo.data.api.Request || args || null" ilk="argument" name="request" />
            </scope>
            <scope doc="" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="getIdentity" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="Given the identity of an item, this method returns the item that has that identity through the onItem callback. Refer to dojo.data.api.Identity.fetchItemByIdentity() for more details." ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(args)">
              <variable citdl="Object" ilk="argument" name="args" />
            </scope>
            <scope doc="Get the option marked as selected, like `&amp;amp;lt;option selected&amp;amp;gt;`. Not part of dojo.data API." ilk="function" name="fetchSelectedItem" />
            <variable doc="" name="root" />
          </scope>
          <scope doc="A validating currency textbox" ilk="function" name="CurrencyTextBox">
            <scope attributes="private" doc="" ilk="function" name="__Constraints" />
            <scope citdl="String" doc="the [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like &amp;amp;quot;USD&amp;amp;quot;" name="currency" />
            <variable citdl="Object" doc="" name="constraints">
              <variable doc="" name="currency" />
            </variable>
            <scope doc="" name="regExpGen" />
            <scope attributes="private" doc="" name="_formatter" />
            <scope attributes="private" doc="Parses string as a Currency, according to constraints" ilk="function" name="parse" returns="Number" signature="parse(value,constraints)">
              <variable citdl="String" doc="The currency represented as a string" ilk="argument" name="value" />
              <variable citdl="dojo.currency.__ParseOptions" doc="" ilk="argument" name="constraints" />
              <variable name="tags" />
            </scope>
            <scope doc="" ilk="function" name="postMixInProperties" />
          </scope>
          <scope doc="A validating, serializable, range-bound date text box with a drop down calendar" ilk="function" name="DateTextBox">
            <scope doc="" name="baseClass" />
            <scope doc="" name="popupClass" />
            <scope attributes="private" doc="" name="_selector" />
            <scope citdl="Date" doc="The value of this widget as a JavaScript Date object, with only year/month/day specified.  Example:  new dijit.form.DateTextBox({value: new Date(2009,1,20)})  When passed to the parser in markup, must be specified according to locale-independent `dojo.date.stamp.fromISOString` format.  Example:  &amp;amp;lt;input dojotype=&apos;dijit.form.DateTextBox&apos; value=&apos;2009-01-20&apos;&amp;amp;gt;" name="value" />
          </scope>
          <scope doc="An enhanced version of the HTML SELECT tag, populated dynamically" ilk="function" name="FilteringSelect">
            <variable attributes="private" doc="" name="_isvalid" />
            <scope citdl="Boolean" doc="True if user is required to enter a value into this field." name="required" />
            <variable attributes="private" doc="" name="_lastDisplayedValue" />
            <scope attributes="private" doc="" ilk="function" name="isValid" returns="#5974" />
            <scope attributes="private" doc="" ilk="function" name="_callbackSetLabel" returns="#5974" signature="_callbackSetLabel(result,dataObject,priorityChange)">
              <variable citdl="Array" ilk="argument" name="result" />
              <variable citdl="Object" ilk="argument" name="dataObject" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_openResultList" returns="#5974" signature="_openResultList(results,dataObject)">
              <variable citdl="Object" ilk="argument" name="results" />
              <variable citdl="Object" ilk="argument" name="dataObject" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getValueAttr" returns="#5974" />
            <scope attributes="private" doc="" ilk="function" name="_getValueField" returns="#5974" />
            <scope attributes="private" doc="Internal function for setting the displayed value and hidden value. Differs from _setValueAttr() in that _setValueAttr() only takes a single value argument, and has to look up the displayed value from that." ilk="function" name="_setValue" signature="_setValue(value,displayedValue,priorityChange)">
              <variable citdl="String" ilk="argument" name="value" />
              <variable citdl="String" ilk="argument" name="displayedValue" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;, value) works." ilk="function" name="_setValueAttr" signature="_setValueAttr(value,priorityChange)">
              <variable citdl="String" ilk="argument" name="value" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
            </scope>
            <scope attributes="private" doc="Set the displayed valued in the input box, and the hidden value that gets submitted, based on a dojo.data store item." ilk="function" name="_setValueFromItem" signature="_setValueFromItem(item,priorityChange)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
              <variable name="tags" />
            </scope>
            <scope doc="Computes the label to display based on the dojo.data store item." ilk="function" name="labelFunc" signature="labelFunc(item,store)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="dojo.data.store" ilk="argument" name="store" />
              <variable name="return_summary" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Overrides ComboBox._doSelect(), the method called when an item in the menu is selected." ilk="function" name="_doSelect" signature="_doSelect(tgt)">
              <variable citdl="Event" ilk="argument" name="tgt" />
            </scope>
            <scope attributes="private" doc="Hook so attr(&apos;displayedValue&apos;, label) works." ilk="function" name="_setDisplayedValueAttr" returns="#5974" signature="_setDisplayedValueAttr(label,priorityChange)">
              <variable citdl="String" ilk="argument" name="label" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
            </scope>
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="undo" />
            <scope name="valueNode">
              <variable doc="" name="value" />
            </scope>
            <variable doc="" name="item" />
            <variable attributes="private" doc="" name="_lastQuery" />
            <scope name="textbox">
              <variable doc="" name="value" />
            </scope>
          </scope>
          <scope doc="Widget corresponding to HTML form tag, for validation and serialization" ilk="function" name="Form">
            <scope doc="" name="name" />
            <scope citdl="String" doc="Server-side form handler." name="action" />
            <scope citdl="String" doc="HTTP method used to submit the form, either &amp;amp;quot;GET&amp;amp;quot; or &amp;amp;quot;POST&amp;amp;quot;." name="method" />
            <variable citdl="String" doc="Encoding type for the form, ex: application/x-www-form-urlencoded." name="encType" />
            <scope citdl="String" doc="List of supported charsets." name="accept-charset" />
            <scope citdl="String" doc="List of MIME types for file upload." name="accept" />
            <scope citdl="String" doc="Target frame for the document to be opened in." name="target" />
            <scope doc="" name="templateString" />
            <scope doc="" name="attributeMap" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="Deprecated: use submit()" ilk="function" name="execute" signature="execute(formContents)">
              <variable citdl="Object" ilk="argument" name="formContents" />
              <variable name="tags" />
            </scope>
            <scope doc="Deprecated: use onSubmit()" ilk="function" name="onExecute">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setEncTypeAttr" signature="_setEncTypeAttr(value)">
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="Callback when user resets the form. This method is intended to be over-ridden. When the `reset` method is called programmatically, the return value from `onReset` is used to compute whether or not resetting should proceed" ilk="function" name="onReset" returns="Boolean" signature="onReset(e)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onReset" returns="Boolean|the IE way" signature="_onReset(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onSubmit" signature="_onSubmit(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Callback when user submits the form." ilk="function" name="onSubmit" returns="Boolean" signature="onSubmit(e)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope doc="programmatically submit form if and only if the `onSubmit` returns true" ilk="function" name="submit" />
            <variable doc="" name="nameAttrSetting" />
            <scope name="domNode">
              <variable doc="" name="encoding" />
            </scope>
            <variable doc="" name="returnValue" />
          </scope>
          <scope doc="Hash marks for `dijit.form.HorizontalSlider`" ilk="function" name="HorizontalRule">
            <scope doc="" name="templateString" />
            <variable citdl="Integer" doc="Number of hash marks to generate" name="count" />
            <scope citdl="String" doc="For HorizontalSlider, this is either &amp;amp;quot;topDecoration&amp;amp;quot; or &amp;amp;quot;bottomDecoration&amp;amp;quot;, and indicates whether this rule goes above or below the slider." name="container" />
            <scope citdl="String" doc="CSS style to apply to individual hash marks" name="ruleStyle" />
            <scope attributes="private" doc="" name="_positionPrefix" />
            <scope attributes="private" doc="" name="_positionSuffix" />
            <scope attributes="private" doc="" name="_suffix" />
            <scope attributes="private" doc="" ilk="function" name="_genHTML" signature="_genHTML(pos,ndx)">
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="ndx" />
            </scope>
            <scope attributes="private" citdl="Boolean" doc="VerticalRule will override this..." name="_isHorizontal">
              <scope name="tags">
                <variable name="1" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <scope name="domNode">
              <variable doc="" name="innerHTML" />
            </scope>
          </scope>
          <scope doc="Labels for `dijit.form.HorizontalSlider`" ilk="function" name="HorizontalRuleLabels">
            <scope doc="" name="templateString" />
            <scope citdl="String" doc="CSS style to apply to individual text labels" name="labelStyle" />
            <variable citdl="String[]" doc="Array of text labels to render - evenly spaced from left-to-right or bottom-to-top. Alternately, minimum and maximum can be specified, to get numeric labels." name="labels" />
            <scope citdl="Integer" doc="Number of generated numeric labels that should be rendered as &apos;&apos; on the ends when labels[] are not specified" name="numericMargin" />
            <scope doc="" name="minimum" />
            <scope doc="" name="maximum" />
            <variable citdl="Object" doc="" name="constraints">
              <scope doc="" name="pattern" />
            </variable>
            <scope attributes="private" doc="" name="_positionPrefix" />
            <scope attributes="private" doc="" name="_labelPrefix" />
            <scope attributes="private" doc="" name="_suffix" />
            <scope attributes="private" doc="Returns the value to be used in HTML for the label as part of the left: attribute" ilk="function" name="_calcPosition" signature="_calcPosition(pos)">
              <variable ilk="argument" name="pos" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_genHTML" signature="_genHTML(pos,ndx)">
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="ndx" />
            </scope>
            <scope doc="Overridable function to return array of labels to use for this slider. Can specify a getLabels() method instead of a labels[] array, or min/max attributes." ilk="function" name="getLabels" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope name="srcNodeRef">
              <variable doc="" name="innerHTML" />
            </scope>
            <variable doc="" name="count" />
          </scope>
          <scope doc="A form widget that allows one to select a value with a horizontally draggable handle" ilk="function" name="HorizontalSlider">
            <scope doc="" name="templatePath" />
            <scope doc="" name="value" />
            <scope citdl="Boolean" doc="Show increment/decrement buttons at the ends of the slider?" name="showButtons" />
            <scope citdl="Integer" doc="The minimum value the slider can be set to." name="minimum" />
            <scope citdl="Integer" doc="The maximum value the slider can be set to." name="maximum" />
            <scope citdl="Integer" doc="If specified, indicates that the slider handle has only &apos;discreteValues&apos; possible positions, and that after dragging the handle, it will snap to the nearest possible position. Thus, the slider has only &apos;discreteValues&apos; possible values.  For example, if minimum=10, maxiumum=30, and discreteValues=3, then the slider handle has three possible positions, representing values 10, 20, or 30.  If discreteValues is not specified or if it&apos;s value is higher than the number of pixels in the slider bar, then the slider handle can be moved freely, and the slider&apos;s value will be computed/reported based on pixel position (in this case it will likely be fractional, such as 123.456789)." name="discreteValues" />
            <scope citdl="Integer" doc="If discreteValues is also specified, this indicates the amount of clicks (ie, snap positions) that the slider handle is moved via pageup/pagedown keys. If discreteValues is not specified, it indicates the number of pixels." name="pageIncrement" />
            <scope citdl="Boolean" doc="If clicking the slider bar changes the value or not" name="clickSelect" />
            <scope citdl="Number" doc="The time in ms to take to animate the slider handle from 0% to 100%, when clicking the slider bar to make the handle move." name="slideDuration" />
            <scope doc="" name="widgetsInTemplate" />
            <scope doc="" name="attributeMap" />
            <scope doc="" name="baseClass" />
            <scope attributes="private" doc="" name="_mousePixelCoord" />
            <scope attributes="private" doc="" name="_pixelCount" />
            <scope attributes="private" doc="" name="_startingPixelCoord" />
            <scope attributes="private" doc="" name="_startingPixelCount" />
            <scope attributes="private" doc="" name="_handleOffsetCoord" />
            <scope attributes="private" doc="" name="_progressPixelSize" />
            <scope attributes="private" doc="" ilk="function" name="_onKeyPress" signature="_onKeyPress(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onHandleClick" signature="_onHandleClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Returns true if direction is from right to left" ilk="function" name="_isReversed">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onBarClick" signature="_onBarClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setPixelValue" signature="_setPixelValue(pixelValue,maxPixels,priorityChange)">
              <variable citdl="Number" ilk="argument" name="pixelValue" />
              <variable citdl="Number" ilk="argument" name="maxPixels" />
              <variable citdl="Boolean, optional" ilk="argument" name="priorityChange" />
            </scope>
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;, value) works." ilk="function" name="_setValueAttr" signature="_setValueAttr(value,priorityChange)">
              <variable citdl="Number" ilk="argument" name="value" />
              <variable citdl="Boolean, optional" ilk="argument" name="priorityChange" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_bumpValue" signature="_bumpValue(signedChange)">
              <variable ilk="argument" name="signedChange" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onClkBumper" signature="_onClkBumper(val)">
              <variable ilk="argument" name="val" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onClkIncBumper" />
            <scope attributes="private" doc="" ilk="function" name="_onClkDecBumper" />
            <scope doc="Decrement slider by 1 unit" ilk="function" name="decrement" signature="decrement(e)">
              <variable ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope doc="Increment slider by 1 unit" ilk="function" name="increment" signature="increment(e)">
              <variable ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Event handler for mousewheel where supported" ilk="function" name="_mouseWheeled" signature="_mouseWheeled(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_typematicCallback" signature="_typematicCallback(count,button,e)">
              <variable citdl="Number" ilk="argument" name="count" />
              <variable citdl="Object" ilk="argument" name="button" />
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="destroy" />
            <variable attributes="private" doc="" name="_descending" />
            <scope name="valueNode">
              <variable doc="" name="value" />
            </scope>
            <variable attributes="private" doc="" name="_inProgressAnim" />
            <scope name="incrementButton" />
            <scope name="decrementButton" />
            <variable doc="" name="widget" />
            <variable attributes="private" doc="" name="_movable" />
          </scope>
          <scope doc="" ilk="function" name="_SliderMover">
            <scope doc="" ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="destroy" signature="destroy(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope doc="A dijit.form.ValidationTextBox subclass which provides a base class for widgets that have a visible formatted display value, and a serializable value in a hidden input field which is actually sent to the server." ilk="function" name="MappedTextBox">
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope attributes="private" doc="Overridable function used to convert the attr(&apos;value&apos;) result to a canonical (non-localized) string. For example, will print dates in ISO format, and numbers the same way as they are represented in javascript." ilk="function" name="serialize" returns="String" signature="serialize(val,options)">
              <variable citdl="anything" ilk="argument" name="val" />
              <variable citdl="Object" ilk="argument" name="options" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Returns widget as a printable string using the widget&apos;s value" ilk="function" name="toString" returns="String">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="validate" returns="String|Boolean" />
            <scope attributes="private" doc="" ilk="function" name="buildRendering" returns="String|Boolean" />
            <scope attributes="private" doc="" ilk="function" name="_setDisabledAttr" signature="_setDisabledAttr(value)">
              <variable citdl="Boolean" ilk="argument" name="value" />
            </scope>
            <scope doc="" name="reset" />
            <variable doc="" name="nameAttrSetting" />
            <variable doc="" name="valueNode">
              <variable doc="" name="value" />
            </variable>
          </scope>
          <scope doc="Widget version of a &amp;amp;lt;select multiple=true&amp;amp;gt; element, for selecting multiple options." ilk="function" name="MultiSelect">
            <scope citdl="Number" doc="Number of elements to display on a page NOTE: may be removed in version 2.0, since elements may have variable height; set the size via style=&amp;amp;quot;...&amp;amp;quot; or CSS class names instead." name="size" />
            <scope doc="" name="templateString" />
            <scope doc="" name="attributeMap" />
            <scope doc="" ilk="function" name="reset" />
            <scope doc="Move the selected nodes of a passed Select widget instance to this Select widget." ilk="function" name="addSelected" signature="addSelected(select)">
              <variable citdl="dijit.form.MultiSelect" ilk="argument" name="select" />
            </scope>
            <scope attributes="private" doc="Access the NodeList of the selected options directly" ilk="function" name="getSelected" returns="Boolean" />
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;) works." ilk="function" name="_getValueAttr" />
            <scope attributes="private" doc="" name="_multiValue" />
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;, values) works." ilk="function" name="_setValueAttr" signature="_setValueAttr(values)">
              <variable citdl="Array" ilk="argument" name="values" />
            </scope>
            <scope doc="Invert the selection" ilk="function" name="invertSelection" signature="invertSelection(onChange)">
              <variable citdl="Boolean" doc="If null, onChange is not fired." ilk="argument" name="onChange" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onChange" signature="_onChange(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="resize" signature="resize(size)">
              <variable citdl="Object" ilk="argument" name="size" />
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <variable attributes="private" doc="" name="_hasBeenBlurred" />
            <scope name="domNode">
              <variable doc="" name="scrollTop" />
            </scope>
          </scope>
          <scope doc="Extends NumberTextBox to add up/down arrows and pageup/pagedown for incremental change to the value" ilk="function" name="NumberSpinner">
            <scope doc="" name="required" />
            <scope doc="Change Number val by the given amount" ilk="function" name="adjust" signature="adjust(val,delta)">
              <variable citdl="Object" ilk="argument" name="val" />
              <variable citdl="Number" ilk="argument" name="delta" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onKeyPress" signature="_onKeyPress(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope doc="A validating, serializable, range-bound text box." ilk="function" name="NumberTextBox">
            <scope attributes="private" doc="" ilk="function" name="__Constraints" />
          </scope>
          <scope doc="" ilk="function" name="NumberTextBoxMixin">
            <scope doc="" name="regExpGen" />
            <variable citdl="Object" doc="" name="constraints">
              <variable doc="" name="max" />
            </variable>
            <scope citdl="Number" doc="The value of this NumberTextBox as a javascript Number (ie, not a String). If the displayed value is blank, the value is NaN, and if the user types in an gibberish value (like &amp;amp;quot;hello world&amp;amp;quot;), the value is undefined (i.e. attr(&apos;value&apos;) returns undefined).  Symetrically, attr(&apos;value&apos;, NaN) will clear the displayed value, whereas attr(&apos;value&apos;, undefined) will have no effect." name="value" />
            <variable citdl="Object" doc="" name="editOptions">
              <scope doc="" name="pattern" />
            </variable>
            <scope attributes="private" doc="_formatter() is called by format(). It&apos;s the base routine for formatting a number, as a string, for example converting 12345 into &amp;amp;quot;12,345&amp;amp;quot;." ilk="function" name="_formatter" returns="String" signature="_formatter(value,options)">
              <variable citdl="Number" doc="The number to be converted into a string." ilk="argument" name="value" />
              <variable citdl="dojo.number.__FormatOptions" doc="Formatting options" ilk="argument" name="options" />
              <variable name="tags" />
            </scope>
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope attributes="private" doc="" ilk="function" name="_onFocus" />
            <scope doc="Formats the value as a Number, according to constraints." ilk="function" name="format" signature="format(value,constraints)">
              <variable citdl="Number" ilk="argument" name="value" />
              <variable citdl="dojo.number.__FormatOptions" ilk="argument" name="constraints" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Parses the string value as a Number, according to constraints." ilk="function" name="parse" returns="Number" signature="parse(value,constraints)">
              <variable citdl="String" doc="String representing a number" ilk="argument" name="value" />
              <variable citdl="dojo.number.__ParseOptions" doc="Formatting options" ilk="argument" name="constraints" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getDisplayedValueAttr" />
            <scope attributes="private" doc="This is called with both the display value (string), and the actual value (a number). When called with the actual value it does corrections so that &apos;&apos; etc. are represented as NaN. Otherwise it dispatches to the superclass&apos;s filter() method.  See `dijit.form.TextBox.filter` for more details." ilk="function" name="filter" returns="attr(&apos;value&apos;, null||&apos;&apos;||undefined) should fire onChange(NaN)" signature="filter(value)">
              <variable citdl="Number" ilk="argument" name="value" />
            </scope>
            <scope doc="Convert value (a Number) into a canonical string (ie, how the number literal is written in javascript/java/C/etc.)" ilk="function" name="serialize" signature="serialize(value,options)">
              <variable citdl="Number" ilk="argument" name="value" />
              <variable citdl="Object" ilk="argument" name="options" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;, ...) works." ilk="function" name="_setValueAttr" signature="_setValueAttr(value,priorityChange,formattedValue)">
              <variable citdl="Number" ilk="argument" name="value" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
              <variable citdl="String" ilk="argument" name="formattedValue" />
            </scope>
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;) works. Returns Number, NaN for &apos;&apos;, or undefined for unparsable text" ilk="function" name="_getValueAttr" returns="returns Number for all values accepted by parse() or NaN for all other displayed values|return exponential Number or undefined for random text|Number or NaN for &apos;&apos;" />
            <scope name="textbox">
              <variable doc="" name="value" />
            </scope>
          </scope>
          <scope doc="Base class for textbox form widgets which defines a range of valid values." ilk="function" name="RangeBoundTextBox">
            <variable citdl="String" doc="The message to display if value is out-of-range" name="rangeMessage" />
            <variable citdl="Object" doc="" name="constraints" />
            <scope attributes="private" doc="Overridable function used to validate the range of the numeric input value." ilk="function" name="rangeCheck" returns="Boolean" signature="rangeCheck(primitive,constraints)">
              <variable citdl="Number" ilk="argument" name="primitive" />
              <variable citdl="dijit.form.RangeBoundTextBox.__Constraints" ilk="argument" name="constraints" />
              <variable name="tags" />
            </scope>
            <scope doc="Tests if the value is in the min/max range specified in constraints" ilk="function" name="isInRange" signature="isInRange(isFocused)">
              <variable citdl="Boolean" ilk="argument" name="isFocused" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Returns true if the value is out of range and will remain out of range even if the user types more characters" ilk="function" name="_isDefinitelyOutOfRange" />
            <scope attributes="private" doc="Overrides `dijit.form.ValidationTextBox._isValidSubset`. Returns true if the input is syntactically valid, and either within range or could be made in range by more typing." ilk="function" name="_isValidSubset" />
            <scope attributes="private" doc="" ilk="function" name="isValid" returns="String|Boolean" signature="isValid(isFocused)">
              <variable citdl="Boolean" ilk="argument" name="isFocused" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="getErrorMessage" returns="String|Boolean" signature="getErrorMessage(isFocused)">
              <variable citdl="Boolean" ilk="argument" name="isFocused" />
            </scope>
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;, ...) works." ilk="function" name="_setValueAttr" signature="_setValueAttr(value,priorityChange)">
              <variable citdl="Number" ilk="argument" name="value" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
            </scope>
            <variable doc="" name="messages" />
            <scope attributes="private" doc="" ilk="function" name="__Constraints">
              <variable citdl="Number" doc="Minimum signed value. Default is -Infinity" name="min" />
              <variable citdl="Number" doc="Maximum signed value. Default is +Infinity" name="max" />
            </scope>
          </scope>
          <scope doc="A simple textarea that degrades, and responds to minimal LayoutContainer usage, and works with dijit.form.Form. Doesn&apos;t automatically size according to input, like Textarea." ilk="function" name="SimpleTextarea">
            <scope doc="" name="baseClass" />
            <scope doc="" name="attributeMap" />
            <scope citdl="Number" doc="The number of characters per line." name="rows" />
            <scope doc="" name="cols" />
            <scope doc="" name="templatePath" />
            <scope doc="" name="templateString" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="filter" signature="filter(value)">
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <variable attributes="private" doc="" name="_previousValue" />
            <scope attributes="private" doc="" ilk="function" name="_onInput" signature="_onInput(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable doc="" name="value" />
            <scope name="textbox">
              <variable doc="" name="value" />
            </scope>
          </scope>
          <variable citdl="Object" doc="" name="Slider" />
          <scope doc="A base class for textbox form inputs" ilk="function" name="TextBox">
            <scope citdl="Boolean" doc="Removes leading and trailing whitespace if true. Default is false." name="trim" />
            <scope citdl="Boolean" doc="Converts all characters to uppercase if true. Default is false." name="uppercase" />
            <scope citdl="Boolean" doc="Converts all characters to lowercase if true. Default is false." name="lowercase" />
            <scope citdl="Boolean" doc="Converts the first character of each word to uppercase if true." name="propercase" />
            <scope citdl="String" doc="HTML INPUT tag maxLength declaration." name="maxLength" />
            <scope doc="" name="templatePath" />
            <scope doc="" name="baseClass" />
            <scope doc="" name="attributeMap" />
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;) works as we like." ilk="function" name="_getValueAttr" />
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;, ...) works." ilk="function" name="_setValueAttr" signature="_setValueAttr(value,priorityChange,formattedValue)">
              <variable citdl="The" doc="visual element value is also set to a corresponding, but not necessarily the same, value." ilk="argument" name="value" />
              <variable citdl="Boolean" doc="If true, an onChange event is fired immediately instead of waiting for the next blur event." ilk="argument" name="priorityChange" />
              <variable citdl="String" doc="If specified, used to set the visual element value, otherwise a computed visual value is used." ilk="argument" name="formattedValue" />
            </scope>
            <scope citdl="String" doc="For subclasses like ComboBox where the displayed value (ex: Kentucky) and the serialized value (ex: KY) are different, this represents the displayed value.  Setting &apos;displayedValue&apos; through attr(&apos;displayedValue&apos;, ...) updates &apos;value&apos;, and vice-versa. Othewise &apos;value&apos; is updated from &apos;displayedValue&apos; periodically, like onBlur etc.  TODO: move declaration to MappedTextBox? Problem is that ComboBox references displayedValue, for benefit of FilteringSelect." name="displayedValue" />
            <scope doc="Deprecated. Use attr(&apos;displayedValue&apos;) instead." ilk="function" name="getDisplayedValue">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Hook so attr(&apos;displayedValue&apos;) works." ilk="function" name="_getDisplayedValueAttr" />
            <scope doc="Deprecated. Use attr(&apos;displayedValue&apos;, ...) instead." ilk="function" name="setDisplayedValue" signature="setDisplayedValue(value)">
              <variable citdl="String" ilk="argument" name="value" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Hook so attr(&apos;displayedValue&apos;, ...) works." ilk="function" name="_setDisplayedValueAttr" signature="_setDisplayedValueAttr(value)">
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
            <scope doc="Replacable function to convert a value to a properly formatted string." ilk="function" name="format" signature="format(value,constraints)">
              <variable citdl="String" ilk="argument" name="value" />
              <variable citdl="Object" ilk="argument" name="constraints" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Replacable function to convert a formatted string to a value" ilk="function" name="parse" returns="String" signature="parse(value,constraints)">
              <variable citdl="String" ilk="argument" name="value" />
              <variable citdl="Object" ilk="argument" name="constraints" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="After the user types some characters, etc., this method is called to check the field for validity etc. The base method in `dijit.form.TextBox` does nothing, but subclasses override." ilk="function" name="_refreshState">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onInput" signature="_onInput(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="postCreate" returns="String" />
            <scope doc="Auto-corrections (such as trimming) that are applied to textbox value on blur or form submit." ilk="function" name="filter" signature="filter(val)">
              <variable ilk="argument" name="val" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setBlurValue" />
            <scope attributes="private" doc="" ilk="function" name="_onBlur" signature="_onBlur(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onFocus" signature="_onFocus(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="reset" returns="String" />
            <scope name="textbox">
              <variable doc="" name="value" />
            </scope>
          </scope>
          <scope doc="A textarea widget that adjusts it&apos;s height according to the amount of data." ilk="function" name="Textarea">
            <scope doc="" name="cols" />
            <variable attributes="private" doc="" name="_previousNewlines" />
            <scope attributes="private" doc="" name="_strictMode" />
            <scope attributes="private" doc="" ilk="function" name="_getHeight" signature="_getHeight(textarea)">
              <variable ilk="argument" name="textarea" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onInput" />
            <variable attributes="private" doc="" name="_busyResizing" />
            <scope attributes="private" doc="" ilk="function" name="_shrink" />
            <scope doc="Resizes the textarea vertically (should be called after a style/value change)" ilk="function" name="resize" />
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" />
            <scope doc="" ilk="function" name="postCreate" />
          </scope>
          <scope doc="A validating, serializable, range-bound time text box with a drop down time picker" ilk="function" name="TimeTextBox">
            <scope attributes="private" doc="" ilk="function" name="__Constraints" />
            <scope doc="" name="baseClass" />
            <scope doc="" name="popupClass" />
            <scope attributes="private" doc="" name="_selector" />
            <scope citdl="dijit.form.TimeTextBox.__Constraints" doc="" name="constraints" />
          </scope>
          <scope doc="Base class for textbox widgets with the ability to validate content of various types and provide user feedback. tags: protected" ilk="function" name="ValidationTextBox">
            <scope doc="" name="templatePath" />
            <scope doc="" name="baseClass" />
            <variable citdl="Boolean" doc="User is required to enter data into this field." name="required" />
            <scope citdl="String" doc="If defined, display this hint string immediately on focus to the textbox, if empty. Think of this like a tooltip that tells the user what to do, not an error message that tells the user what they&apos;ve done wrong.  Message disappears when user starts typing." name="promptMessage" />
            <variable citdl="String" doc="The message to display if value is invalid." name="invalidMessage" />
            <variable citdl="Object" doc="" name="constraints">
              <variable doc="" name="locale" />
            </variable>
            <variable citdl="String" doc="regular expression string used to validate the input Do not specify both regExp and regExpGen" name="regExp">
              <scope name="tags">
                <variable name="1" />
              </scope>
            </variable>
            <scope attributes="private" doc="Overridable function used to generate regExp when dependent on constraints. Do not specify both regExp and regExpGen." ilk="function" name="regExpGen" returns="String" signature="regExpGen(constraints)">
              <variable citdl="dijit.form.ValidationTextBox.__Constraints" ilk="argument" name="constraints" />
              <variable name="tags" />
            </scope>
            <variable citdl="String" doc="Shows current state (ie, validation result) of input (Normal, Warning, or Error)" name="state">
              <scope name="tags" />
            </variable>
            <scope citdl="String[" doc="See description of `dijit.Tooltip.defaultPosition` for details on this parameter." name="tooltipPosition" />
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;, ...) works." ilk="function" name="_setValueAttr" />
            <scope doc="Overridable function used to validate the text input against the regular expression." ilk="function" name="validator" signature="validator(value,constraints)">
              <variable citdl="anything" ilk="argument" name="value" />
              <variable citdl="dijit.form.ValidationTextBox.__Constraints" ilk="argument" name="constraints" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Returns true if the value is either already valid or could be made valid by appending characters. This is used for validation while the user [may be] still typing." ilk="function" name="_isValidSubset" />
            <scope doc="Tests if value is valid. Can override with your own routine in a subclass." ilk="function" name="isValid" signature="isValid(isFocused)">
              <variable citdl="Boolean" ilk="argument" name="isFocused" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Checks for whitespace" ilk="function" name="_isEmpty" returns="Boolean" signature="_isEmpty(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Return an error message to show if appropriate" ilk="function" name="getErrorMessage" returns="String" signature="getErrorMessage(isFocused)">
              <variable citdl="Boolean" ilk="argument" name="isFocused" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Return a hint message to show when widget is first focused" ilk="function" name="getPromptMessage" returns="String" signature="getPromptMessage(isFocused)">
              <variable citdl="Boolean" ilk="argument" name="isFocused" />
              <variable name="tags" />
            </scope>
            <variable attributes="private" doc="" name="_maskValidSubsetError" />
            <scope doc="Called by oninit, onblur, and onkeypress." ilk="function" name="validate" signature="validate(isFocused)">
              <variable citdl="Boolean" ilk="argument" name="isFocused" />
              <variable name="tags" />
            </scope>
            <variable attributes="private" citdl="String" doc="Currently displayed message" name="_message" />
            <scope doc="Overridable method to display validation errors/hints. By default uses a tooltip." ilk="function" name="displayMessage" signature="displayMessage(message)">
              <variable citdl="String" ilk="argument" name="message" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_refreshState" returns="String|Boolean" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope attributes="private" doc="" ilk="function" name="_setDisabledAttr" signature="_setDisabledAttr(value)">
              <variable citdl="Boolean" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setRequiredAttr" signature="_setRequiredAttr(value)">
              <variable citdl="Boolean" ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" name="reset" />
            <variable doc="" name="messages" />
            <variable attributes="private" doc="" name="_partialre" />
            <scope name="valueNode">
              <variable doc="" name="disabled" />
            </scope>
            <scope name="focusNode" />
            <scope attributes="private" doc="" ilk="function" name="__Constraints">
              <variable citdl="String" doc="locale used for validation, picks up value from this widget&apos;s lang attribute" name="locale" />
              <variable attributes="private" citdl="anything" doc="various flags passed to regExpGen function" name="_flags_" />
            </scope>
          </scope>
          <scope doc="Hash marks for the `dijit.form.VerticalSlider`" ilk="function" name="VerticalRule">
            <scope doc="" name="templateString" />
            <scope attributes="private" doc="" name="_positionPrefix" />
            <scope citdl="String" doc="This is either &amp;amp;quot;leftDecoration&amp;amp;quot; or &amp;amp;quot;rightDecoration&amp;amp;quot;, to indicate whether this rule goes to the left or to the right of the slider. Note that on RTL system, &amp;amp;quot;leftDecoration&amp;amp;quot; would actually go to the right, and vice-versa." name="container" />
            <scope attributes="private" doc="" name="_isHorizontal" />
          </scope>
          <scope doc="Labels for the `dijit.form.VerticalSlider`" ilk="function" name="VerticalRuleLabels">
            <scope doc="" name="templateString" />
            <scope attributes="private" doc="" name="_positionPrefix" />
            <scope attributes="private" doc="" name="_labelPrefix" />
            <scope attributes="private" doc="" ilk="function" name="_calcPosition" signature="_calcPosition(pos)">
              <variable ilk="argument" name="pos" />
            </scope>
            <scope attributes="private" doc="" name="_isHorizontal" />
          </scope>
          <scope doc="A form widget that allows one to select a value with a vertically draggable handle" ilk="function" name="VerticalSlider">
            <scope doc="" name="templatePath" />
            <scope attributes="private" doc="" name="_mousePixelCoord" />
            <scope attributes="private" doc="" name="_pixelCount" />
            <scope attributes="private" doc="" name="_startingPixelCoord" />
            <scope attributes="private" doc="" name="_startingPixelCount" />
            <scope attributes="private" doc="" name="_handleOffsetCoord" />
            <scope attributes="private" doc="" name="_progressPixelSize" />
            <scope attributes="private" citdl="Boolean" doc="Specifies if the slider values go from high-on-top (true), or low-on-top (false) TODO: expose this in 1.2 - the css progress/remaining bar classes need to be reversed" name="_descending" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="Overrides HorizontalSlider._isReversed. Indicates if values are high on top (with low numbers on the bottom)." ilk="function" name="_isReversed" />
            <scope attributes="private" doc="Helper function on gecko. Rectify children nodes for left/right decoration in rtl case. Simply switch the rule and label child for each decoration node." ilk="function" name="_rtlRectify" signature="_rtlRectify(decorationNode)">
              <variable citdl="NodeList" ilk="argument" name="decorationNode" />
              <variable name="tags" />
            </scope>
          </scope>
          <scope doc="Base class for validating, serializable, range-bound date or time text box." ilk="function" name="_DateTimeTextBox">
            <scope attributes="private" doc="" ilk="function" name="__Constraints" />
            <variable citdl="Object" doc="" name="constraints" />
            <scope doc="" name="regExpGen" />
            <scope doc="" name="compare" />
            <scope doc="Formats the value as a Date, according to specified locale (second argument)" ilk="function" name="format" signature="format(value,constraints)">
              <variable citdl="Date" ilk="argument" name="value" />
              <variable citdl="dojo.date.locale.__FormatOptions" ilk="argument" name="constraints" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Parses as string as a Date, according to constraints" ilk="function" name="parse" returns="Date" signature="parse(value,constraints)">
              <variable citdl="String" ilk="argument" name="value" />
              <variable citdl="dojo.date.locale.__FormatOptions" ilk="argument" name="constraints" />
              <variable name="tags" />
            </scope>
            <scope doc="" name="serialize" />
            <variable citdl="Date" doc="The value of this widget as a JavaScript Date object. Use attr(&amp;amp;quot;value&amp;amp;quot;) / attr(&amp;amp;quot;value&amp;amp;quot;, val) to manipulate. When passed to the parser in markup, must be specified according to `dojo.date.stamp.fromISOString`" name="value" />
            <scope citdl="String" doc="Name of the popup widget class used to select a date/time. Subclasses should specify this." name="popupClass">
              <scope name="tags">
                <variable name="1" />
              </scope>
            </scope>
            <scope attributes="private" citdl="String" doc="Specifies constraints.selector passed to dojo.date functions, should be either &amp;amp;quot;date&amp;amp;quot; or &amp;amp;quot;time&amp;amp;quot;. Subclass must specify this." name="_selector">
              <scope name="tags">
                <variable name="1" />
              </scope>
            </scope>
            <scope attributes="private" doc="" ilk="function" name="postMixInProperties" returns="Date" />
            <scope attributes="private" doc="open the TimePicker popup" ilk="function" name="_onFocus" signature="_onFocus(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="Sets the date on this textbox. Note that `value` must be a Javascript Date object." ilk="function" name="_setValueAttr" signature="_setValueAttr(value,priorityChange,formattedValue)">
              <variable citdl="Date" ilk="argument" name="value" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
              <variable citdl="String" ilk="argument" name="formattedValue" />
            </scope>
            <scope attributes="private" doc="opens the TimePicker, and sets the onValueSelected value" ilk="function" name="_open" />
            <scope attributes="private" doc="" ilk="function" name="_close" />
            <scope attributes="private" doc="Called magically when focus has shifted away from this widget and it&apos;s dropdown" ilk="function" name="_onBlur" />
            <scope attributes="private" doc="" ilk="function" name="_getDisplayedValueAttr" />
            <scope attributes="private" doc="" ilk="function" name="_setDisplayedValueAttr" signature="_setDisplayedValueAttr(value,priorityChange)">
              <variable citdl="String" ilk="argument" name="value" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
            </scope>
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="Handler for keypress events" ilk="function" name="_onKeyPress" signature="_onKeyPress(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_picker" />
            <variable attributes="private" doc="" name="_opened" />
            <variable attributes="private" doc="" name="_tabbingAway" />
          </scope>
          <scope doc="Mixin for containers of form widgets (i.e. widgets that represent a single value and can be children of a &amp;amp;lt;form&amp;amp;gt; node or dijit.form.Form widget)" ilk="function" name="_FormMixin">
            <scope doc="" ilk="function" name="reset" />
            <scope doc="returns if the form is valid - same as isValid - but provides a few additional (ui-specific) features. 1 - it will highlight any sub-widgets that are not valid 2 - it will call focus() on the first invalid sub-widget" ilk="function" name="validate" />
            <scope doc="" ilk="function" name="setValues" signature="setValues(val)">
              <variable ilk="argument" name="val" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" returns="like &amp;quot;continue&amp;quot;" signature="_setValueAttr(obj)">
              <variable citdl="object" ilk="argument" name="obj" />
            </scope>
            <scope doc="" ilk="function" name="getValues" />
            <scope attributes="private" doc="Returns Object representing form values." ilk="function" name="_getValueAttr" returns="like &amp;quot;continue&amp;quot;" />
            <scope doc="Returns true if all of the widgets are valid  This also populate this._invalidWidgets[] array with list of invalid widgets... TODO: put that into separate function? It&apos;s confusing to have that as a side effect of a method named isValid()." ilk="function" name="isValid" />
            <scope doc="Stub function to connect to if you want to do something (like disable/enable a submit button) when the valid state changes on the form as a whole." ilk="function" name="onValidStateChange" signature="onValidStateChange(isValid)">
              <variable ilk="argument" name="isValid" />
            </scope>
            <scope attributes="private" doc="Connected to a widget&apos;s onChange function - update our valid state, if needed." ilk="function" name="_widgetChange" signature="_widgetChange(widget)">
              <variable ilk="argument" name="widget" />
            </scope>
            <scope doc="Connects to the onChange function of all children to track valid state changes. You can call this function directly, ex. in the event that you programmatically add a widget to the form *after* the form has been initialized." ilk="function" name="connectChildren" />
            <scope doc="" ilk="function" name="startup" />
            <variable attributes="private" doc="" name="_invalidWidgets">
              <variable doc="" name="length" />
            </variable>
            <variable attributes="private" doc="" name="_lastValidState" />
            <variable attributes="private" doc="" name="_changeConnections" />
          </scope>
          <scope doc="Base class for widgets corresponding to native HTML elements such as &amp;amp;lt;checkbox&amp;amp;gt; or &amp;amp;lt;button&amp;amp;gt;, which can be children of a &amp;amp;lt;form&amp;amp;gt; node or a `dijit.form.Form` widget." name="_FormWidget">
            <scope citdl="String" doc="Root CSS class of the widget (ex: dijitTextBox), used to add CSS classes of widget (ex: &amp;amp;quot;dijitTextBox dijitTextBoxInvalid dijitTextBoxFocused dijitTextBoxInvalidFocused&amp;amp;quot;) See _setStateClass()." name="baseClass">
              <scope name="tags" />
            </scope>
            <scope citdl="String" doc="Name used when submitting form; same as &amp;amp;quot;name&amp;amp;quot; attribute or plain HTML elements" name="name" />
            <scope citdl="String" doc="Corresponds to the native HTML &amp;amp;lt;input&amp;amp;gt; element&apos;s attribute." name="alt" />
            <scope citdl="String" doc="Corresponds to the native HTML &amp;amp;lt;input&amp;amp;gt; element&apos;s attribute." name="value" />
            <scope citdl="Integer" doc="Order fields are traversed when user hits the tab key" name="tabIndex" />
            <variable citdl="Boolean" doc="Should this widget respond to user input? In markup, this is specified as &amp;amp;quot;disabled=&apos;disabled&apos;&amp;amp;quot;, or just &amp;amp;quot;disabled&amp;amp;quot;." name="disabled" />
            <scope citdl="Boolean" doc="Should this widget respond to user input? In markup, this is specified as &amp;amp;quot;readOnly&amp;amp;quot;. Similar to disabled except readOnly form values are submitted." name="readOnly" />
            <scope citdl="Boolean" doc="Fires onChange for each value change or only on demand" name="intermediateChanges" />
            <scope citdl="Boolean" doc="On focus, should this widget scroll into view?" name="scrollOnFocus" />
            <scope doc="" name="attributeMap" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope attributes="private" doc="" ilk="function" name="_setDisabledAttr" signature="_setDisabledAttr(value)">
              <variable citdl="Boolean" ilk="argument" name="value" />
            </scope>
            <scope doc="Deprecated. Use attr(&apos;disabled&apos;, ...) instead." ilk="function" name="setDisabled" signature="setDisabled(disabled)">
              <variable citdl="Boolean" ilk="argument" name="disabled" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onFocus" signature="_onFocus(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Sets _hovering, _active, and stateModifier properties depending on mouse state, then calls setStateClass() to set appropriate CSS classes for this.domNode.  To get a different CSS class for hover, send onmouseover and onmouseout events to this method. To get a different CSS class while mouse button is depressed, send onmousedown to this method." ilk="function" name="_onMouse" signature="_onMouse(event)">
              <variable citdl="Event" ilk="argument" name="event" />
            </scope>
            <scope doc="Tells if this widget is focusable or not. Used internally by dijit." ilk="function" name="isFocusable">
              <variable name="tags" />
            </scope>
            <scope doc="Put focus on this widget" ilk="function" name="focus" />
            <scope attributes="private" doc="Update the visual state of the widget by setting the css classes on this.domNode (or this.stateNode if defined) by combining this.baseClass with various suffixes that represent the current widget state(s)." ilk="function" name="_setStateClass" />
            <scope doc="Compare 2 values (as returned by attr(&apos;value&apos;) for this widget)." ilk="function" name="compare" signature="compare(val1,val2)">
              <variable citdl="anything" ilk="argument" name="val1" />
              <variable citdl="anything" ilk="argument" name="val2" />
              <variable name="tags" />
            </scope>
            <scope doc="Callback when this widget&apos;s value is changed." ilk="function" name="onChange" signature="onChange(newValue)">
              <variable ilk="argument" name="newValue" />
              <variable name="tags" />
            </scope>
            <variable attributes="private" citdl="Boolean" doc="Indicates that changes to the value should call onChange() callback. This is false during widget initialization, to avoid calling onChange() when the initial value is set." name="_onChangeActive">
              <scope name="tags" />
            </variable>
            <scope attributes="private" doc="Called when the value of the widget is set. Calls onChange() if appropriate" ilk="function" name="_handleOnChange" signature="_handleOnChange(newValue,priorityChange)">
              <variable citdl="anything" doc="the new value" ilk="argument" name="newValue" />
              <variable citdl="Boolean" doc="For a slider, for example, dragging the slider is priorityChange==false, but on mouse up, it&apos;s priorityChange==true. If intermediateChanges==true, onChange is only called form priorityChange=true events." ilk="argument" name="priorityChange" />
              <variable name="tags" />
            </scope>
            <scope doc="" ilk="function" name="create" />
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="Deprecated. Use attr(&apos;value&apos;, ...) instead." ilk="function" name="setValue" signature="setValue(value)">
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
            <scope doc="Deprecated. Use attr(&apos;value&apos;) instead." ilk="function" name="getValue" />
            <scope attributes="private" doc="Work around table sizing bugs on FF2 by forcing redraw" ilk="function" name="_layoutHack" />
            <variable doc="" name="nameAttrSetting" />
            <variable attributes="private" doc="" name="_hovering" />
            <variable attributes="private" doc="" name="_active" />
            <variable doc="" name="stateModifier" />
            <variable attributes="private" doc="" name="_mouseDown" />
            <variable attributes="private" doc="" name="_stateClasses" />
            <variable attributes="private" doc="" name="_lastValue" />
            <variable attributes="private" doc="" name="_lastValueReported" />
            <variable attributes="private" doc="" name="_resetValue" />
            <variable attributes="private" doc="" name="_layoutHackHandle" />
          </scope>
          <scope doc="Base class for widgets corresponding to native HTML elements such as &amp;amp;lt;input&amp;amp;gt; or &amp;amp;lt;select&amp;amp;gt; that have user changeable values." ilk="function" name="_FormValueWidget">
            <scope doc="" name="attributeMap" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;, value) works." ilk="function" name="_setValueAttr" signature="_setValueAttr(newValue,priorityChange)">
              <variable citdl="anything" ilk="argument" name="newValue" />
              <variable citdl="Boolean, optional" ilk="argument" name="priorityChange" />
            </scope>
            <scope attributes="private" doc="Hook so attr(&apos;value&apos;) works." ilk="function" name="_getValueAttr" signature="_getValueAttr(value)">
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
            <scope doc="Restore the value to the last value passed to onChange" ilk="function" name="undo" />
            <scope doc="Reset the widget&apos;s value to what it was at initialization time" ilk="function" name="reset" />
            <scope attributes="private" doc="" ilk="function" name="_onKeyDown" signature="_onKeyDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_resetValue" />
            <variable doc="" name="value" />
            <variable attributes="private" doc="" name="_hasBeenBlurred" />
          </scope>
          <scope doc="Mixin for validation widgets with a spinner." ilk="function" name="_Spinner">
            <scope citdl="Number" doc="Number of milliseconds before a held arrow key or up/down button becomes typematic" name="defaultTimeout" />
            <scope citdl="Number" doc="Fraction of time used to change the typematic timer between events. 1.0 means that each typematic event fires at defaultTimeout intervals. &amp;amp;lt; 1.0 means that each typematic event fires at an increasing faster rate." name="timeoutChangeRate" />
            <scope citdl="Number" doc="Adjust the value by this much when spinning using the arrow keys/buttons" name="smallDelta" />
            <scope citdl="Number" doc="Adjust the value by this much when spinning using the PgUp/Dn keys" name="largeDelta" />
            <scope doc="" name="templatePath" />
            <scope doc="" name="baseClass" />
            <scope doc="Overridable function used to adjust a primitive value(Number/Date/...) by the delta amount specified. The val is adjusted in a way that makes sense to the object type." ilk="function" name="adjust" signature="adjust(val,delta)">
              <variable citdl="Object" ilk="argument" name="val" />
              <variable citdl="Number" ilk="argument" name="delta" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Called when an arrow key is pressed to update the relevant CSS classes" ilk="function" name="_arrowState" signature="_arrowState(node,pressed)">
              <variable citdl="Node" ilk="argument" name="node" />
              <variable citdl="Boolean" ilk="argument" name="pressed" />
            </scope>
            <scope attributes="private" doc="Handler for arrow button or arrow key being pressed" ilk="function" name="_arrowPressed" signature="_arrowPressed(nodePressed,direction,increment)">
              <variable citdl="Node" ilk="argument" name="nodePressed" />
              <variable citdl="Number" ilk="argument" name="direction" />
              <variable citdl="Number" ilk="argument" name="increment" />
            </scope>
            <scope attributes="private" doc="Handler for arrow button or arrow key being released" ilk="function" name="_arrowReleased" signature="_arrowReleased(node)">
              <variable citdl="Node" ilk="argument" name="node" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_typematicCallback" signature="_typematicCallback(count,node,evt)">
              <variable citdl="Number" ilk="argument" name="count" />
              <variable citdl="DOMNode" ilk="argument" name="node" />
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <variable attributes="private" doc="" name="_wheelTimer" />
            <scope attributes="private" doc="Mouse wheel listener where supported" ilk="function" name="_mouseWheeled" signature="_mouseWheeled(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <variable attributes="private" doc="" name="_active" />
            <variable doc="" name="stateModifier" />
            <scope name="upArrowNode" />
            <scope name="downArrowNode" />
            <scope name="focusNode">
              <scope name="parentNode" />
            </scope>
          </scope>
        </variable>
        <scope ilk="function" name="selectInputText" returns="String" signature="selectInputText(element,start,stop)">
          <variable citdl="DomNode" ilk="argument" name="element" />
          <variable citdl="Number" ilk="argument" name="start" />
          <variable citdl="Number" ilk="argument" name="stop" />
        </scope>
        <variable citdl="Object" doc="Layout related widgets" name="layout">
          <scope doc="Deprecated widget. Use `dijit.layout.ContentPane` instead. tags: deprecated" ilk="function" name="AccordionPane">
            <scope doc="called when this pane is selected" ilk="function" name="onSelected" />
          </scope>
          <scope doc="Provides layout in up to 5 regions, a mandatory center with optional borders along its 4 sides." ilk="function" name="BorderContainer">
            <variable citdl="String" doc="Which design is used for the layout: - &amp;amp;quot;headline&amp;amp;quot; (default) where the top and bottom extend the full width of the container - &amp;amp;quot;sidebar&amp;amp;quot; where the left and right sides extend from top to bottom." name="design" />
            <scope citdl="Boolean" doc="Give each pane a border and margin. Margin determined by domNode.paddingLeft. When false, only resizable panes have a gutter (i.e. draggable splitter) for resizing." name="gutters" />
            <scope citdl="Boolean" doc="Specifies whether splitters resize as you drag (true) or only upon mouseup (false)" name="liveSplitters" />
            <scope citdl="Boolean" doc="Save splitter positions in a cookie." name="persist" />
            <scope doc="" name="baseClass" />
            <scope attributes="private" citdl="String" doc="Optional hook to override the default Splitter widget used by BorderContainer" name="_splitterClass" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_setupChild" signature="_setupChild(child)">
              <variable citdl="Widget" ilk="argument" name="child" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_computeSplitterThickness" signature="_computeSplitterThickness(region)">
              <variable ilk="argument" name="region" />
            </scope>
            <scope doc="" ilk="function" name="layout" />
            <scope doc="" ilk="function" name="addChild" signature="addChild(child,insertIndex)">
              <variable citdl="Widget" ilk="argument" name="child" />
              <variable citdl="Integer" ilk="argument" name="insertIndex" />
            </scope>
            <scope doc="" ilk="function" name="removeChild" signature="removeChild(child)">
              <variable citdl="Widget" ilk="argument" name="child" />
            </scope>
            <scope doc="" ilk="function" name="getChildren" />
            <scope doc="Returns the widget responsible for rendering the splitter associated with region" ilk="function" name="getSplitter" signature="getSplitter(region)">
              <variable citdl="String" ilk="argument" name="region" />
            </scope>
            <scope doc="" ilk="function" name="resize" signature="resize(newSize,currentSize)">
              <variable ilk="argument" name="newSize" />
              <variable ilk="argument" name="currentSize" />
            </scope>
            <scope attributes="private" doc="This is the main routine for setting size/position of each child" ilk="function" name="_layoutChildren" signature="_layoutChildren(changedRegion)">
              <variable citdl="String" ilk="argument" name="changedRegion" />
            </scope>
            <scope doc="" ilk="function" name="destroy" />
            <variable attributes="private" doc="" name="_splitters" />
            <variable attributes="private" doc="" name="_splitterThickness" />
            <variable doc="" name="cs" />
            <variable doc="" name="pe">
              <variable doc="" name="r" />
              <variable doc="" name="b" />
            </variable>
          </scope>
          <scope doc="A draggable spacer between two items in a `dijit.layout.BorderContainer`." ilk="function" name="_Splitter">
            <scope citdl="dijit.layout.BorderContainer" doc="Pointer to the parent BorderContainer" name="container">
              <scope name="tags" />
            </scope>
            <scope citdl="dijit.layout._LayoutWidget" doc="Pointer to the pane associated with this splitter" name="child">
              <scope name="tags" />
              <scope name="domNode">
                <variable attributes="private" doc="" name="_recalc" />
              </scope>
            </scope>
            <scope citdl="String" doc="Region of pane associated with this splitter. &amp;amp;quot;top&amp;amp;quot;, &amp;amp;quot;bottom&amp;amp;quot;, &amp;amp;quot;left&amp;amp;quot;, &amp;amp;quot;right&amp;amp;quot;." name="region" />
            <scope citdl="Boolean" doc="If true, the child&apos;s size changes and the child widget is redrawn as you drag the splitter; otherwise, the size doesn&apos;t change until you drop the splitter (by mouse-up)" name="live">
              <scope name="tags" />
            </scope>
            <scope doc="" name="templateString" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="" ilk="function" name="_computeMaxSize" />
            <scope attributes="private" doc="" ilk="function" name="_startDrag" signature="_startDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="private" doc="" ilk="function" name="_drag" signature="_drag(e,forceResize)">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="forceResize" />
              </variable>
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_stopDrag" signature="_stopDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_cleanupHandlers" />
            <scope attributes="private" doc="" ilk="function" name="_onKeyPress" signature="_onKeyPress(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="destroy" />
            <variable doc="" name="horizontal" />
            <variable attributes="private" doc="" name="_factor" />
            <variable attributes="private" doc="" name="_minSize" />
            <variable attributes="private" doc="" name="_cookieName" />
            <variable attributes="private" doc="" name="_maxSize" />
            <variable doc="" name="cover" />
            <variable attributes="private" doc="" name="_resize" />
            <variable doc="" name="fake" />
            <variable attributes="private" doc="" name="_handlers" />
            <variable attributes="private" doc="" name="_drag" />
            <scope name="oppNode">
              <variable attributes="private" doc="" name="_recalc" />
            </scope>
          </scope>
          <scope doc="Just a spacer div to separate side pane from center pane. Basically a trick to lookup the gutter/splitter width from the theme." ilk="function" name="_Gutter">
            <scope doc="" name="templateString" />
            <scope doc="" ilk="function" name="postCreate" />
            <variable doc="" name="horizontal" />
          </scope>
          <scope doc="A widget that acts as a container for mixed HTML and widgets, and includes an Ajax interface" ilk="function" name="ContentPane">
            <variable citdl="String" doc="The href of the content that displays now. Set this at construction if you want to load data externally when the pane is shown. (Set preload=true to load it immediately.) Changing href after creation doesn&apos;t have any effect; use attr(&apos;href&apos;, ...);" name="href" />
            <scope citdl="String" doc="|| DomNode || NodeList || dijit._Widget The innerHTML of the ContentPane. Note that the initialization parameter / argument to attr(&amp;amp;quot;content&amp;amp;quot;, ...) can be a String, DomNode, Nodelist, or _Widget." name="content" />
            <scope citdl="Boolean" doc="Extract visible content from inside of &amp;amp;lt;body&amp;amp;gt; .... &amp;amp;lt;/body&amp;amp;gt;. I.e., strip &amp;amp;lt;html&amp;amp;gt; and &amp;amp;lt;head&amp;amp;gt; (and it&apos;s contents) from the href" name="extractContent" />
            <scope citdl="Boolean" doc="Parse content and create the widgets, if any." name="parseOnLoad" />
            <scope citdl="Boolean" doc="Prevent caching of data from href&apos;s by appending a timestamp to the href." name="preventCache" />
            <scope citdl="Boolean" doc="Force load of data on initialization even if pane is hidden." name="preload" />
            <scope citdl="Boolean" doc="Refresh (re-download) content when pane goes from hidden to shown" name="refreshOnShow" />
            <variable citdl="String" doc="Message that shows while downloading" name="loadingMessage" />
            <variable citdl="String" doc="Message that shows if an error occurs" name="errorMessage" />
            <variable citdl="Boolean" doc="True if the ContentPane has data in it, either specified during initialization (via href or inline content), or set via attr(&apos;content&apos;, ...) / attr(&apos;href&apos;, ...)  False if it doesn&apos;t have any content, or if ContentPane is still in the process of downloading href." name="isLoaded">
              <scope name="tags" />
            </variable>
            <scope doc="" name="baseClass" />
            <scope citdl="Boolean" doc="- false - don&apos;t adjust size of children - true - if there is a single visible child widget, set it&apos;s size to however big the ContentPane is" name="doLayout" />
            <variable citdl="Object" doc="" name="ioArgs" />
            <scope citdl="Boolean" doc="Just a flag indicating that this widget will call resize() on its children. _LayoutWidget based widgets check for    if(!this.getParent || !this.getParent()){  and if getParent() returns false because !parent.isContainer, then they resize themselves on initialization." name="isContainer">
              <scope name="tags" />
            </scope>
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="buildRendering" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="See `dijit.layout._LayoutWidget.startup` for description. Although ContentPane doesn&apos;t extend _LayoutWidget, it does implement the same API." ilk="function" name="startup" />
            <scope attributes="private" doc="Test if we have exactly one visible widget as a child, and if so assume that we are a container for that widget, and should propogate startup() and resize() calls to it. Skips over things like data stores since they aren&apos;t visible." ilk="function" name="_checkIfSingleChild" />
            <scope doc="Deprecated. Use attr(&apos;href&apos;, ...) instead." ilk="function" name="setHref" signature="setHref(href)">
              <variable citdl="String|Uri" ilk="argument" name="href" />
            </scope>
            <scope attributes="private" doc="Hook so attr(&amp;amp;quot;href&amp;amp;quot;, ...) works." ilk="function" name="_setHrefAttr" signature="_setHrefAttr(href)">
              <variable citdl="String|Uri" ilk="argument" name="href" />
            </scope>
            <scope doc="Deprecated. Use attr(&apos;content&apos;, ...) instead." ilk="function" name="setContent" signature="setContent(data)">
              <variable citdl="String|DomNode|Nodelist" ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="Hook to make attr(&amp;amp;quot;content&amp;amp;quot;, ...) work. Replaces old content with data content, include style classes from old content" ilk="function" name="_setContentAttr" signature="_setContentAttr(data)">
              <variable citdl="String|DomNode|Nodelist" ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="Hook to make attr(&amp;amp;quot;content&amp;amp;quot;) work" ilk="function" name="_getContentAttr" />
            <scope doc="Cancels an in-flight download of content" ilk="function" name="cancel" />
            <scope doc="" ilk="function" name="uninitialize" />
            <scope doc="" ilk="function" name="destroyRecursive" signature="destroyRecursive(preserveDom)">
              <variable citdl="Boolean" ilk="argument" name="preserveDom" />
            </scope>
            <scope doc="See `dijit.layout._LayoutWidget.resize` for description. Although ContentPane doesn&apos;t extend _LayoutWidget, it does implement the same API." ilk="function" name="resize" signature="resize(size)">
              <variable ilk="argument" name="size" />
            </scope>
            <scope attributes="private" doc="Returns true if the content is currently shown" ilk="function" name="_isShown" returns="for TitlePane, etc." />
            <scope attributes="private" doc="Called when the ContentPane is made visible" ilk="function" name="_onShow" />
            <scope attributes="private" doc="Call this to load href contents if necessary." ilk="function" name="_loadCheck" />
            <scope attributes="private" doc="[Re]download contents of href and display" ilk="function" name="refresh" returns="for TitlePane, etc." />
            <scope attributes="private" doc="This is called whenever new content is being loaded" ilk="function" name="_onLoadHandler" signature="_onLoadHandler(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="This is called whenever the content is being unloaded" ilk="function" name="_onUnloadHandler" />
            <scope attributes="private" doc="" ilk="function" name="destroyDescendants" returns="for TitlePane, etc." />
            <scope attributes="private" doc="" ilk="function" name="_setContent" returns="for TitlePane, etc." signature="_setContent(cont,isFakeContent)">
              <variable ilk="argument" name="cont" />
              <variable ilk="argument" name="isFakeContent" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onError" returns="for TitlePane, etc." signature="_onError(type,err,consoleText)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="err" />
              <variable ilk="argument" name="consoleText" />
            </scope>
            <scope attributes="private" doc="Call resize() on each of my child layout widgets, either now (if I&apos;m currently visible) or when I become visible" ilk="function" name="_scheduleLayout" />
            <scope attributes="private" doc="Since I am a Container widget, each of my children expects me to call resize() or layout() on them." ilk="function" name="_layoutChildren" />
            <scope doc="Event hook, is called after everything is loaded and widgetified" ilk="function" name="onLoad" signature="onLoad(data)">
              <variable ilk="argument" name="data" />
              <variable name="tags" />
            </scope>
            <scope doc="Event hook, is called before old content is cleared" ilk="function" name="onUnload">
              <variable name="tags" />
            </scope>
            <scope doc="Called before download starts." ilk="function" name="onDownloadStart">
              <variable name="tags" />
            </scope>
            <scope doc="Called on DOM faults, require faults etc. in content.  In order to display an error message in the pane, return the error message from this method, as an HTML string.  By default (if this method is not overriden), it returns nothing, so the error message is just printed to the console." ilk="function" name="onContentError" signature="onContentError(error)">
              <variable citdl="Error" ilk="argument" name="error" />
              <variable name="tags" />
            </scope>
            <scope doc="Called when download error occurs.  In order to display an error message in the pane, return the error message from this method, as an HTML string.  Default behavior (if this method is not overriden) is to display the error message inside the pane." ilk="function" name="onDownloadError" signature="onDownloadError(error)">
              <variable citdl="Error" ilk="argument" name="error" />
              <variable name="tags" />
            </scope>
            <scope doc="Called when download is finished." ilk="function" name="onDownloadEnd">
              <variable name="tags" />
            </scope>
            <variable doc="" name="containerNode">
              <variable doc="" name="innerHTML" />
            </variable>
            <scope name="domNode">
              <variable doc="" name="title" />
            </scope>
            <variable attributes="private" doc="" name="_singleChild" />
            <variable attributes="private" doc="" name="_hrefChanged" />
            <variable attributes="private" doc="" name="_isDownloaded" />
            <variable attributes="private" doc="" name="_xhrDfd">
              <variable doc="" name="fired" />
            </variable>
            <variable attributes="private" doc="" name="_beingDestroyed" />
            <variable attributes="private" doc="" name="_contentBox" />
            <variable attributes="private" doc="" name="_contentSetter" />
            <variable attributes="private" doc="" name="_needLayout" />
          </scope>
          <scope doc="Deprecated. Use `dijit.layout.BorderContainer` instead." ilk="function" name="LayoutContainer">
            <scope doc="" name="baseClass" />
            <scope doc="" ilk="function" name="layout" />
            <scope doc="" ilk="function" name="addChild" signature="addChild(child,insertIndex)">
              <variable citdl="Widget" ilk="argument" name="child" />
              <variable citdl="Integer" ilk="argument" name="insertIndex" />
            </scope>
            <scope doc="" ilk="function" name="removeChild" signature="removeChild(widget)">
              <variable citdl="Widget" ilk="argument" name="widget" />
            </scope>
          </scope>
          <scope doc="A ContentPane with an href where (when declared in markup) the title is specified as innerHTML rather than as a title attribute." ilk="function" name="LinkPane">
            <scope doc="" name="templateString" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope attributes="private" doc="" ilk="function" name="_fillContent" signature="_fillContent(source)">
              <variable citdl="DomNode" ilk="argument" name="source" />
            </scope>
          </scope>
          <scope doc="Deprecated. Use `dijit.layout.BorderContainer` instead." ilk="function" name="SplitContainer">
            <scope citdl="Boolean" doc="If true, the children&apos;s size changes as you drag the bar; otherwise, the sizes don&apos;t change until you drop the bar (by mouse-up)" name="activeSizing" />
            <variable citdl="Integer" doc="Size in pixels of the bar between each child" name="sizerWidth" />
            <scope citdl="String" doc="either &apos;horizontal&apos; or vertical; indicates whether the children are arranged side-by-side or up/down." name="orientation" />
            <scope citdl="Boolean" doc="Save splitter positions in a cookie" name="persist" />
            <scope doc="" name="baseClass" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_setupChild" signature="_setupChild(child)">
              <variable citdl="Widget" ilk="argument" name="child" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onSizerMouseDown" signature="_onSizerMouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_addSizer" signature="_addSizer(index)">
              <variable ilk="argument" name="index" />
            </scope>
            <scope doc="Remove sizer, but only if widget is really our child and we have at least one sizer to throw away" ilk="function" name="removeChild" signature="removeChild(widget)">
              <variable ilk="argument" name="widget" />
            </scope>
            <scope doc="Add a child widget to the container" ilk="function" name="addChild" signature="addChild(child,insertIndex)">
              <variable citdl="Widget" doc="a widget to add" ilk="argument" name="child" />
              <variable citdl="Integer" doc="postion in the &amp;amp;quot;stack&amp;amp;quot; to add the child widget" ilk="argument" name="insertIndex" />
            </scope>
            <scope doc="" ilk="function" name="layout" />
            <scope attributes="private" doc="" ilk="function" name="_movePanel" signature="_movePanel(panel,pos,size)">
              <variable ilk="argument" name="panel" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="size" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_moveSlider" signature="_moveSlider(slider,pos,size)">
              <variable ilk="argument" name="slider" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="size" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_growPane" signature="_growPane(growth,pane)">
              <variable ilk="argument" name="growth" />
              <variable ilk="argument" name="pane" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_checkSizes" />
            <scope doc="" ilk="function" name="beginSizing" signature="beginSizing(e,i)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="i" />
            </scope>
            <scope doc="" ilk="function" name="changeSizing" signature="changeSizing(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="endSizing" signature="endSizing(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="movePoint" />
            <scope doc="" ilk="function" name="legaliseSplitPoint" signature="legaliseSplitPoint(a)">
              <variable ilk="argument" name="a" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_updateSize" />
            <scope attributes="private" doc="" ilk="function" name="_showSizingLine" />
            <scope attributes="private" doc="" ilk="function" name="_hideSizingLine" />
            <scope attributes="private" doc="" ilk="function" name="_moveSizingLine" />
            <scope attributes="private" doc="" ilk="function" name="_getCookieName" signature="_getCookieName(i)">
              <variable ilk="argument" name="i" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_restoreState" />
            <scope attributes="private" doc="" ilk="function" name="_saveState" />
            <variable doc="" name="isHorizontal" />
            <variable doc="" name="sizers" />
            <scope name="domNode" />
            <variable doc="" name="virtualSizer" />
            <variable doc="" name="paneWidth" />
            <variable doc="" name="paneHeight" />
            <variable doc="" name="paneBefore">
              <variable doc="" name="sizeActual" />
            </variable>
            <variable doc="" name="paneAfter">
              <variable doc="" name="position" />
              <variable doc="" name="sizeActual" />
            </variable>
            <variable doc="" name="isSizing" />
            <variable doc="" name="sizingSplitter" />
            <variable doc="" name="cover" />
            <variable doc="" name="originPos" />
            <variable doc="" name="startPoint" />
            <variable doc="" name="screenToClientOffset" />
            <variable doc="" name="dragOffset" />
            <variable attributes="private" doc="" name="_ownconnects" />
            <variable doc="" name="lastPoint" />
            <variable doc="" name="isDraggingLeft" />
          </scope>
          <scope doc="A container that has multiple children, but shows only one child at a time" ilk="function" name="StackContainer">
            <scope citdl="Boolean" doc="If true, change the size of my currently displayed child to match my size" name="doLayout" />
            <scope citdl="Boolean" doc="Remembers the selected child across sessions" name="persist" />
            <scope doc="" name="baseClass" />
            <scope attributes="private" citdl="Boolean" doc="startup() has completed. TODO: comment this section out, it&apos;s just needed for documentation. Plus, move it to _Widget" name="_started" />
            <variable citdl="Widget" doc="References the currently selected child widget, if any" name="selectedChildWidget" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_setupChild" returns="dijit._Widget  (TODO: remove this, return code is unused)" signature="_setupChild(child)">
              <variable citdl="Widget" ilk="argument" name="child" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="addChild" returns="dijit._Widget  (TODO: remove this, return code is unused)" signature="addChild(child,insertIndex)">
              <variable citdl="Widget" ilk="argument" name="child" />
              <variable citdl="Integer" ilk="argument" name="insertIndex" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="removeChild" returns="dijit._Widget  (TODO: remove this, return code is unused)" signature="removeChild(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
            </scope>
            <scope doc="Show the given widget (which must be one of my children)" ilk="function" name="selectChild" signature="selectChild(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
            </scope>
            <scope attributes="private" doc="Hide the old widget and display the new widget. Subclasses should override this." ilk="function" name="_transition" signature="_transition(newWidget,oldWidget)">
              <variable citdl="Widget" ilk="argument" name="newWidget" />
              <variable citdl="Widget" ilk="argument" name="oldWidget" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Gets the next/previous child widget in this container from the current selection." ilk="function" name="_adjacent" returns="dijit._Widget" signature="_adjacent(forward)">
              <variable citdl="Boolean" ilk="argument" name="forward" />
            </scope>
            <scope doc="Advance to next page." ilk="function" name="forward" />
            <scope doc="Go back to previous page." ilk="function" name="back" />
            <scope attributes="private" doc="" ilk="function" name="_onKeyPress" signature="_onKeyPress(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="layout" returns="dijit._Widget  (TODO: remove this, return code is unused)|dijit._Widget" />
            <scope attributes="private" doc="Show the specified child by changing it&apos;s CSS, and call _onShow()/onShow() so it can do any updates it needs regarding loading href&apos;s etc." ilk="function" name="_showChild" signature="_showChild(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
            </scope>
            <scope attributes="private" doc="Hide the specified child by changing it&apos;s CSS, and call _onHide() so it&apos;s notified." ilk="function" name="_hideChild" signature="_hideChild(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
            </scope>
            <scope doc="Callback when user clicks the [X] to remove a page. If onClose() returns true then remove and destroy the child." ilk="function" name="closeChild" signature="closeChild(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
              <variable name="tags" />
            </scope>
            <scope doc="" ilk="function" name="destroy" />
            <variable attributes="private" doc="" name="_beingDestroyed" />
          </scope>
          <scope doc="Set of buttons to select a page in a page list." ilk="function" name="StackController">
            <scope doc="" name="templateString" />
            <scope citdl="String" doc="The id of the page container that I point to" name="containerId">
              <scope name="tags" />
            </scope>
            <scope citdl="String" doc="The name of the button widget to create to correspond to each page" name="buttonWidget">
              <scope name="tags" />
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="Called after StackContainer has finished initializing" ilk="function" name="onStartup" signature="onStartup(info)">
              <variable citdl="Object" ilk="argument" name="info" />
              <variable name="tags" />
            </scope>
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="Called whenever a page is added to the container. Create button corresponding to the page." ilk="function" name="onAddChild" signature="onAddChild(page,insertIndex)">
              <variable citdl="Widget" ilk="argument" name="page" />
              <variable citdl="Integer" ilk="argument" name="insertIndex" />
            </scope>
            <scope doc="Called whenever a page is removed from the container. Remove the button corresponding to the page." ilk="function" name="onRemoveChild" signature="onRemoveChild(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
              <variable name="tags" />
            </scope>
            <scope doc="Called when a page has been selected in the StackContainer, either by me or by another StackController" ilk="function" name="onSelectChild" signature="onSelectChild(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
              <variable name="tags" />
            </scope>
            <scope doc="Called whenever one of my child buttons is pressed in an attempt to select a page" ilk="function" name="onButtonClick" signature="onButtonClick(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
              <variable name="tags" />
            </scope>
            <scope doc="Called whenever one of my child buttons [X] is pressed in an attempt to close a page" ilk="function" name="onCloseButtonClick" signature="onCloseButtonClick(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Helper for onkeypress to find next/previous button" ilk="function" name="adjacent" returns="dijit._Widget" signature="adjacent(forward)">
              <variable citdl="Boolean" ilk="argument" name="forward" />
              <variable name="tags" />
            </scope>
            <scope doc="Handle keystrokes on the page list, for advancing to next/previous button and closing the current page if the page is closable." ilk="function" name="onkeypress" signature="onkeypress(e)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable name="tags" />
            </scope>
            <scope doc="Called when there was a keypress on the container" ilk="function" name="onContainerKeyPress" signature="onContainerKeyPress(info)">
              <variable citdl="Object" ilk="argument" name="info" />
              <variable name="tags" />
            </scope>
            <variable doc="" name="pane2button" />
            <variable doc="" name="pane2handles" />
            <variable doc="" name="pane2menu" />
            <variable attributes="private" doc="" name="_subscriptions" />
            <variable attributes="private" doc="" name="_currentChild" />
          </scope>
          <scope doc="Internal widget used by StackContainer." ilk="function" name="_StackButton">
            <scope doc="" name="tabIndex" />
            <scope doc="" ilk="function" name="postCreate" signature="postCreate(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope doc="This is for TabContainer where the tabs are &amp;amp;lt;span&amp;amp;gt; rather than button, so need to set focus explicitly (on some browsers) Note that you shouldn&apos;t override this method, but you can connect to it." ilk="function" name="onClick" signature="onClick(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope doc="StackContainer connects to this function; if your widget contains a close button then clicking it should call this function. Note that you shouldn&apos;t override this method, but you can connect to it." ilk="function" name="onClickCloseButton" signature="onClickCloseButton(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
          </scope>
          <scope doc="A Container with tabs to select each child (only one of which is displayed at a time)." ilk="function" name="TabContainer">
            <scope citdl="String" doc="Defines where tabs go relative to tab content. &amp;amp;quot;top&amp;amp;quot;, &amp;amp;quot;bottom&amp;amp;quot;, &amp;amp;quot;left-h&amp;amp;quot;, &amp;amp;quot;right-h&amp;amp;quot;" name="tabPosition" />
            <scope doc="" name="baseClass" />
            <scope citdl="Boolean" doc="Defines whether the tablist gets an extra class for layouting, putting a border/shading around the set of tabs." name="tabStrip" />
            <scope citdl="Boolean" doc="If true, use styling for a TabContainer nested inside another TabContainer. For tundra etc., makes tabs look like links, and hides the outer border since the outer TabContainer already has a border." name="nested" />
            <scope doc="" name="templateString" />
            <scope doc="" name="templatePath" />
            <scope attributes="private" citdl="String" doc="An optional parameter to overrider the default TabContainer controller used." name="_controllerWidget" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="" ilk="function" name="_setupChild" returns="Widget  (TODO: remove this, return code is unused)" signature="_setupChild(tab)">
              <variable citdl="Widget" ilk="argument" name="tab" />
            </scope>
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="layout" returns="Widget  (TODO: remove this, return code is unused)" />
            <scope doc="" ilk="function" name="destroy" />
            <variable doc="" name="tablist" />
            <variable attributes="private" doc="" name="_containerContentBox" />
          </scope>
          <scope doc="Set of tabs (the things with titles and a close button, that you click to show a tab panel). Used internally by `dijit.layout.TabContainer`." ilk="function" name="TabController">
            <scope doc="" name="templateString" />
            <scope citdl="String" doc="Defines where tabs go relative to the content. &amp;amp;quot;top&amp;amp;quot;, &amp;amp;quot;bottom&amp;amp;quot;, &amp;amp;quot;left-h&amp;amp;quot;, &amp;amp;quot;right-h&amp;amp;quot;" name="tabPosition" />
            <scope citdl="Boolean" doc="TODO: unused, remove" name="doLayout" />
            <scope citdl="String" doc="The name of the tab widget to create to correspond to each page" name="buttonWidget" />
            <scope attributes="private" doc="Rectify the width of all tabs in rtl, otherwise the tab widths are different in IE" ilk="function" name="_rectifyRtlTabList" />
          </scope>
          <scope doc="A tab (the thing you click to select a pane)." ilk="function" name="_TabButton">
            <scope doc="" name="baseClass" />
            <scope doc="" name="templatePath" />
            <scope doc="" name="scrollOnFocus" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="Handler when mouse is moved over the close icon (the X)" ilk="function" name="_onCloseButtonEnter" />
            <scope attributes="private" doc="Handler when mouse is moved off the close icon (the X)" ilk="function" name="_onCloseButtonLeave" />
            <scope name="closeNode" />
          </scope>
          <scope doc="Base class for a _Container widget which is responsible for laying out its children. Widgets which mixin this code must define layout() to lay out the children." ilk="function" name="_LayoutWidget">
            <scope citdl="String" doc="This class name is applied to the widget&apos;s domNode and also may be used to generate names for sub nodes, like for example dijitTabContainer-content." name="baseClass">
              <scope name="tags">
                <variable name="1" />
              </scope>
            </scope>
            <scope citdl="Boolean" doc="TODO: this is unused, but maybe it *should* be used for a child to detect whether the parent is going to call resize() on it or not (see calls to getParent() and resize() in this file)" name="isLayoutContainer">
              <scope name="tags">
                <variable name="1" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="Called after all the widgets have been instantiated and their dom nodes have been inserted somewhere under dojo.doc.body.  Widgets should override this method to do any initialization dependent on other widgets existing, and then call this superclass method to finish things off.  startup() in subclasses shouldn&apos;t do anything size related because the size of the widget hasn&apos;t been set yet." ilk="function" name="startup" />
            <scope doc="Call this to resize a widget, or after its size has changed." ilk="function" name="resize" signature="resize(changeSize,resultSize)">
              <variable citdl="Object" doc="Sets the widget to this margin-box size and position. May include any/all of the following properties:   {w: int, h: int, l: int, t: int}" ilk="argument" name="changeSize" />
              <variable citdl="Object" doc="The margin-box size of this widget after applying changeSize (if changeSize is specified). If caller knows this size and passes it in, we don&apos;t need to query the browser to get the size.   {w: int, h: int}" ilk="argument" name="resultSize" />
            </scope>
            <scope doc="Widgets override this method to size and position their contents/children. When this is called this._contentBox is guaranteed to be set (see resize()).  This is called after startup(), and also when the widget&apos;s size has been changed." ilk="function" name="layout">
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="Common setup for initial children and children which are added after startup" ilk="function" name="_setupChild" signature="_setupChild(child)">
              <variable citdl="Widget" ilk="argument" name="child" />
              <variable name="tags" />
            </scope>
            <scope doc="" ilk="function" name="addChild" signature="addChild(child,insertIndex)">
              <variable citdl="Widget" ilk="argument" name="child" />
              <variable citdl="Integer" ilk="argument" name="insertIndex" />
            </scope>
            <scope doc="" ilk="function" name="removeChild" signature="removeChild(child)">
              <variable citdl="Widget" ilk="argument" name="child" />
            </scope>
            <variable attributes="private" doc="" name="_viewport" />
            <variable attributes="private" doc="" name="_borderBox" />
            <variable attributes="private" doc="" name="_contentBox" />
          </scope>
          <scope doc="Given the margin-box size of a node, return its content box size. Functions like dojo.contentBox() but is more reliable since it doesn&apos;t have to wait for the browser to compute sizes." ilk="function" name="marginBox2contentBox" signature="marginBox2contentBox(node,mb)">
            <variable citdl="DomNode" ilk="argument" name="node" />
            <variable citdl="Object" ilk="argument" name="mb" />
          </scope>
          <scope doc="" ilk="function" name="layoutChildren" signature="layoutChildren(container,dim,children)">
            <variable citdl="DomNode" ilk="argument" name="container" />
            <variable citdl="Object" ilk="argument" name="dim" />
            <variable citdl="Object[]" ilk="argument" name="children" />
          </scope>
        </variable>
        <variable citdl="Object" doc="Home of the official dijit demo code" name="demos" />
        <variable citdl="Object" doc="" name="resources" />
        <variable citdl="Object" doc="" name="robot" />
        <variable citdl="Object" doc="" name="robotx" />
        <variable citdl="Object" doc="" name="tree">
          <scope doc="Passed the arguments listed above (store, etc)" ilk="function" name="TreeStoreModel" signature="TreeStoreModel(args)">
            <variable citdl="Object" ilk="argument" name="args" />
            <variable name="tags" />
            <scope citdl="dojo.data.Store" doc="Underlying store" name="store" />
            <scope citdl="String[" doc="One or more attribute names (attributes in the dojo.data item) that specify that item&apos;s children" name="childrenAttrs" />
            <scope citdl="String" doc="If specified, get label for tree node from this attribute, rather than by calling store.getLabel()" name="labelAttr" />
            <variable citdl="dojo.data.Item" doc="Pointer to the root item (read only, not a parameter)" name="root">
              <scope name="tags" />
            </variable>
            <scope citdl="anything" doc="Specifies datastore query to return the root item for the tree. Must only return a single item. Alternately can just pass in pointer to root item." name="query" />
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="Calls onItem with the root item for the tree, possibly a fabricated item. Calls onError on error." ilk="function" name="getRoot" signature="getRoot(onItem,onError)">
              <variable ilk="argument" name="onItem" />
              <variable ilk="argument" name="onError" />
            </scope>
            <scope doc="Tells if an item has or may have children. Implementing logic here avoids showing +/- expando icon for nodes that we know don&apos;t have children. (For efficiency reasons we may not want to check if an element actually has children until user clicks the expando node)" ilk="function" name="mayHaveChildren" signature="mayHaveChildren(item)">
              <variable citdl="dojo.data.Item" ilk="argument" name="item" />
            </scope>
            <scope doc="Calls onComplete() with array of child items of given parent item, all loaded." ilk="function" name="getChildren" signature="getChildren(parentItem,onComplete,onError)">
              <variable citdl="dojo.data.Item" ilk="argument" name="parentItem" />
              <variable citdl="function(items)" ilk="argument" name="onComplete" />
              <variable citdl="function" ilk="argument" name="onError" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="getIdentity" returns="Object" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="Get the label for an item" ilk="function" name="getLabel" returns="String" signature="getLabel(item)">
              <variable citdl="dojo.data.Item" ilk="argument" name="item" />
            </scope>
            <scope doc="Creates a new item. See `dojo.data.api.Write` for details on args. Used in drag &amp;amp;amp; drop when item from external source dropped onto tree." ilk="function" name="newItem" signature="newItem(args,parent)">
              <variable citdl="Object" ilk="argument" name="args" />
              <variable citdl="Item" ilk="argument" name="parent" />
            </scope>
            <scope doc="Move or copy an item from one parent item to another. Used in drag &amp;amp;amp; drop" ilk="function" name="pasteItem" signature="pasteItem(childItem,oldParentItem,newParentItem,bCopy,insertIndex)">
              <variable citdl="Item" ilk="argument" name="childItem" />
              <variable citdl="Item" ilk="argument" name="oldParentItem" />
              <variable citdl="Item" ilk="argument" name="newParentItem" />
              <variable citdl="Boolean" ilk="argument" name="bCopy" />
              <variable citdl="int" ilk="argument" name="insertIndex" />
            </scope>
            <scope doc="Callback whenever an item has changed, so that Tree can update the label, icon, etc. Note that changes to an item&apos;s children or parent(s) will trigger an onChildrenChange() so you can ignore those changes here." ilk="function" name="onChange" signature="onChange(item)">
              <variable citdl="dojo.data.Item" ilk="argument" name="item" />
              <variable name="tags" />
            </scope>
            <scope doc="Callback to do notifications about new, updated, or deleted items." ilk="function" name="onChildrenChange" signature="onChildrenChange(parent,newChildrenList)">
              <variable citdl="dojo.data.Item" ilk="argument" name="parent" />
              <variable citdl="dojo.data.Item[]" ilk="argument" name="newChildrenList" />
              <variable name="tags" />
            </scope>
            <scope doc="Callback when an item has been deleted." ilk="function" name="onDelete" signature="onDelete(parent,newChildrenList)">
              <variable citdl="dojo.data.Item" ilk="argument" name="parent" />
              <variable citdl="dojo.data.Item[]" ilk="argument" name="newChildrenList" />
              <variable name="tags" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onNewItem" returns="Object|String" signature="_onNewItem(item,parentInfo)">
              <variable citdl="dojo.data.Item" ilk="argument" name="item" />
              <variable citdl="Object" ilk="argument" name="parentInfo" />
            </scope>
            <scope attributes="private" doc="Handler for delete notifications from underlying store" ilk="function" name="_onDeleteItem" signature="_onDeleteItem(item)">
              <variable citdl="Object" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="Set data event on an item in the store" ilk="function" name="_onSetItem" signature="_onSetItem(item,attribute,oldValue,newValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="object | array" ilk="argument" name="oldValue" />
              <variable citdl="object | array" ilk="argument" name="newValue" />
            </scope>
            <variable doc="" name="connects" />
          </scope>
          <scope doc="Contract for any data provider object for the tree." ilk="function" name="model">
            <scope doc="Destroys this object, releasing connections to the store" ilk="function" name="destroy">
              <variable name="tags" />
            </scope>
            <scope doc="Calls onItem with the root item for the tree, possibly a fabricated item. Throws exception on error." ilk="function" name="getRoot" signature="getRoot(onItem)">
              <variable ilk="argument" name="onItem" />
              <variable name="tags" />
            </scope>
            <scope doc="Tells if an item has or may have children. Implementing logic here avoids showing +/- expando icon for nodes that we know don&apos;t have children. (For efficiency reasons we may not want to check if an element actually has children until user clicks the expando node)" ilk="function" name="mayHaveChildren" signature="mayHaveChildren(item)">
              <variable citdl="dojo.data.Item" ilk="argument" name="item" />
              <variable name="tags" />
            </scope>
            <scope doc="Calls onComplete() with array of child items of given parent item, all loaded. Throws exception on error." ilk="function" name="getChildren" signature="getChildren(parentItem,onComplete)">
              <variable citdl="dojo.data.Item" ilk="argument" name="parentItem" />
              <variable citdl="function(items)" ilk="argument" name="onComplete" />
              <variable name="tags" />
            </scope>
            <scope doc="Returns identity for an item" ilk="function" name="getIdentity" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable name="tags" />
            </scope>
            <scope doc="Get the label for an item" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable citdl="dojo.data.Item" ilk="argument" name="item" />
              <variable name="tags" />
            </scope>
            <scope doc="Creates a new item. See `dojo.data.api.Write` for details on args." ilk="function" name="newItem" signature="newItem(args,parent)">
              <variable citdl="Object" ilk="argument" name="args" />
              <variable citdl="Item" ilk="argument" name="parent" />
              <variable name="tags" />
            </scope>
            <scope doc="Move or copy an item from one parent item to another. Used in drag &amp;amp;amp; drop. If oldParentItem is specified and bCopy is false, childItem is removed from oldParentItem. If newParentItem is specified, childItem is attached to newParentItem." ilk="function" name="pasteItem" signature="pasteItem(childItem,oldParentItem,newParentItem,bCopy)">
              <variable citdl="Item" ilk="argument" name="childItem" />
              <variable citdl="Item" ilk="argument" name="oldParentItem" />
              <variable citdl="Item" ilk="argument" name="newParentItem" />
              <variable citdl="Boolean" ilk="argument" name="bCopy" />
              <variable name="tags" />
            </scope>
            <scope doc="Callback whenever an item has changed, so that Tree can update the label, icon, etc. Note that changes to an item&apos;s children or parent(s) will trigger an onChildrenChange() so you can ignore those changes here." ilk="function" name="onChange" signature="onChange(item)">
              <variable citdl="dojo.data.Item" ilk="argument" name="item" />
              <variable name="tags" />
            </scope>
            <scope doc="Callback to do notifications about new, updated, or deleted items." ilk="function" name="onChildrenChange" signature="onChildrenChange(parent,newChildrenList)">
              <variable citdl="dojo.data.Item" ilk="argument" name="parent" />
              <variable citdl="dojo.data.Item[]" ilk="argument" name="newChildrenList" />
              <variable name="tags" />
            </scope>
          </scope>
        </variable>
      </scope>
      <scope ilk="class" name="dojox">
        <variable citdl="Object" doc="" name="analytics">
          <variable attributes="private" doc="" name="_data" />
          <variable attributes="private" doc="" name="_id" />
          <variable doc="" name="sendInterval" />
          <variable doc="" name="inTransitRetry" />
          <variable doc="" name="dataUrl" />
          <variable doc="" name="sendMethod" />
          <variable doc="" name="maxRequestSize" />
          <scope doc="Schedule the data pushing routines to happen in interval ms" ilk="function" name="schedulePusher" signature="schedulePusher(interval)">
            <variable citdl="Int" ilk="argument" name="interval" />
          </scope>
          <scope doc="add data to the queue. Will be pusshed to the server on the next data push" ilk="function" name="addData" signature="addData(dataType,data)">
            <variable ilk="argument" name="dataType" />
            <variable ilk="argument" name="data" />
          </scope>
          <scope doc="TODOC?" ilk="function" name="checkData" />
          <scope doc="pushes data to the server if any exists. If a push is done, return the deferred after hooking up completion callbacks. If there is no data to be pushed, return false;" ilk="function" name="pushData" />
          <variable attributes="private" doc="" name="_inTransit" />
          <scope doc="TODOC" ilk="function" name="getQueryPacket" />
          <variable attributes="private" doc="" name="_split" />
          <scope doc="If our data push was successfully, remove the _inTransit data and schedule the next parser run." ilk="function" name="onPushComplete" signature="onPushComplete(results)">
            <variable ilk="argument" name="results" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <variable citdl="Object" doc="" name="plugins">
            <scope doc="plugin to have analyitcs return the base info dojo collects" ilk="function" name="consoleMessages">
              <scope name="initialized" />
              <variable doc="" name="addData" />
            </scope>
            <scope doc="plugin to have analyitcs return the base info dojo collects" ilk="function" name="dojo">
              <scope name="initialized" />
              <variable doc="" name="addData" />
            </scope>
            <scope doc="" ilk="function" name="idle">
              <scope name="initialized" />
              <variable doc="" name="addData" />
              <variable doc="" name="idleTime" />
              <variable doc="" name="idle" />
              <variable doc="" ilk="function" name="setIdle" />
              <variable doc="" name="idleTimer" />
            </scope>
            <scope doc="" ilk="function" name="mouseClick">
              <scope name="initialized" />
              <variable doc="" name="addData" />
              <variable doc="" ilk="function" name="onClick" signature="onClick(e)">
                <variable ilk="argument" name="e" />
              </variable>
              <variable doc="" ilk="function" name="trimEvent" signature="trimEvent(e)">
                <variable ilk="argument" name="e" />
              </variable>
            </scope>
            <scope doc="" ilk="function" name="mouseOver">
              <scope name="initialized" />
              <variable doc="" name="watchMouse" />
              <variable doc="" name="mouseSampleDelay" />
              <variable doc="" name="addData" />
              <variable doc="" name="targetProps" />
              <variable attributes="private" doc="" name="_rateLimited" />
              <variable attributes="private" doc="" name="_lastMouseEvent" />
              <variable doc="" ilk="function" name="toggleWatchMouse" />
              <variable doc="" ilk="function" name="sampleMouse" signature="sampleMouse(e)">
                <variable ilk="argument" name="e" />
              </variable>
              <variable doc="" ilk="function" name="trimMouseEvent" signature="trimMouseEvent(e)">
                <variable ilk="argument" name="e" />
              </variable>
            </scope>
            <scope doc="" ilk="function" name="window">
              <scope name="initialized" />
              <variable doc="" name="addData" />
              <variable doc="" name="windowConnects" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="profiles">
            <variable citdl="Object" doc="" name="analytics">
              <variable citdl="Object" doc="" name="profile" />
            </variable>
            <variable citdl="Object" doc="" name="analyticsInBase">
              <variable citdl="Object" doc="" name="profile" />
            </variable>
          </variable>
        </variable>
        <variable citdl="Object" doc="" name="atom">
          <scope name="io">
            <variable citdl="Object" doc="" name="model">
              <scope doc="" ilk="function" name="Node" signature="Node(name_space,name,attributes,content,shortNs)">
                <variable ilk="argument" name="name_space" />
                <variable ilk="argument" name="name" />
                <variable ilk="argument" name="attributes" />
                <variable ilk="argument" name="content" />
                <variable ilk="argument" name="shortNs" />
                <scope doc="" ilk="function" name="buildFromDom" signature="buildFromDom(node)">
                  <variable ilk="argument" name="node" />
                </scope>
                <scope attributes="private" doc="" ilk="function" name="_saveAttributes" signature="_saveAttributes(node)">
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="addAttribute" signature="addAttribute(name,value)">
                  <variable ilk="argument" name="name" />
                  <variable ilk="argument" name="value" />
                </scope>
                <scope doc="" ilk="function" name="getAttribute" signature="getAttribute(name)">
                  <variable ilk="argument" name="name" />
                </scope>
                <scope attributes="private" doc="" ilk="function" name="_getAttributeNames" signature="_getAttributeNames(node)">
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="toString" />
                <scope doc="" ilk="function" name="addContent" signature="addContent(content)">
                  <variable ilk="argument" name="content" />
                </scope>
                <variable doc="" name="name_space" />
                <variable doc="" name="shortNs" />
                <variable doc="" name="name" />
                <variable doc="" name="textContent" />
                <variable doc="" name="attributes" />
                <variable doc="" name="content" />
                <variable doc="" name="rawNodes" />
                <variable attributes="private" doc="" name="_objName" />
              </scope>
              <scope doc="Class container for generic Atom items." ilk="function" name="AtomItem" signature="AtomItem(args)">
                <variable ilk="argument" name="args" />
                <scope attributes="private" doc="" ilk="function" name="_getAttributeNames" />
                <variable attributes="private" citdl="Object" doc="" name="_accepts" />
                <scope doc="" ilk="function" name="accept" signature="accept(tag)">
                  <variable ilk="argument" name="tag" />
                </scope>
                <scope attributes="private" doc="" ilk="function" name="_postBuild" />
                <scope doc="" ilk="function" name="buildFromDom" signature="buildFromDom(node)">
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="addNamespace" signature="addNamespace(fullName,shortName)">
                  <variable ilk="argument" name="fullName" />
                  <variable ilk="argument" name="shortName" />
                </scope>
                <scope doc="Function to add in an author to the list of authors." ilk="function" name="addAuthor" signature="addAuthor(name,email,uri)">
                  <variable citdl="String" doc="The author&apos;s name." ilk="argument" name="name" />
                  <variable citdl="String" doc="The author&apos;s e-mail address." ilk="argument" name="email" />
                  <variable citdl="String" doc="A URI associated with the author." ilk="argument" name="uri" />
                </scope>
                <scope doc="Function to add in an author to the list of authors." ilk="function" name="addContributor" signature="addContributor(name,email,uri)">
                  <variable citdl="String" doc="The author&apos;s name." ilk="argument" name="name" />
                  <variable citdl="String" doc="The author&apos;s e-mail address." ilk="argument" name="email" />
                  <variable citdl="String" doc="A URI associated with the author." ilk="argument" name="uri" />
                </scope>
                <scope doc="Function to add in a link to the list of links." ilk="function" name="addLink" signature="addLink(href,rel,hrefLang,title,type)">
                  <variable citdl="String" doc="The href." ilk="argument" name="href" />
                  <variable citdl="String" doc="" ilk="argument" name="rel" />
                  <variable citdl="String" doc="" ilk="argument" name="hrefLang" />
                  <variable citdl="String" doc="A title to associate with the link." ilk="argument" name="title" />
                  <variable citdl="String" doc="The type of link is is." ilk="argument" name="type" />
                </scope>
                <scope doc="Function to remove a link from the list of links." ilk="function" name="removeLink" signature="removeLink(href,rel)">
                  <variable citdl="String" doc="The href." ilk="argument" name="href" />
                  <variable citdl="String" doc="" ilk="argument" name="rel" />
                </scope>
                <scope doc="Function to remove all basic links from the list of links." ilk="function" name="removeBasicLinks" />
                <scope doc="Function to add in a category to the list of categories." ilk="function" name="addCategory" signature="addCategory(scheme,term,label)">
                  <variable citdl="String" doc="" ilk="argument" name="scheme" />
                  <variable citdl="String" doc="" ilk="argument" name="term" />
                  <variable citdl="String" doc="" ilk="argument" name="label" />
                </scope>
                <scope doc="Function to get all categories that match a particular scheme." ilk="function" name="getCategories" signature="getCategories(scheme)">
                  <variable citdl="String" doc="The scheme to filter on." ilk="argument" name="scheme" />
                </scope>
                <scope doc="Function to remove all categories that match a particular scheme and term." ilk="function" name="removeCategories" signature="removeCategories(scheme,term)">
                  <variable citdl="String" doc="The scheme to filter on." ilk="argument" name="scheme" />
                  <variable citdl="String" doc="The term to filter on." ilk="argument" name="term" />
                </scope>
                <scope doc="Function to set the title of the item." ilk="function" name="setTitle" signature="setTitle(str,type)">
                  <variable citdl="String" doc="The title to set." ilk="argument" name="str" />
                  <variable citdl="String" doc="The type of title format, text, xml, xhtml, etc." ilk="argument" name="type" />
                </scope>
                <scope doc="Function to add in an extension namespace into the item." ilk="function" name="addExtension" signature="addExtension(name_space,name,attributes,content,shortNS)">
                  <variable citdl="String" doc="The namespace of the extension." ilk="argument" name="name_space" />
                  <variable citdl="String" doc="The name of the extension" ilk="argument" name="name" />
                  <variable citdl="Array" doc="The attributes associated with the extension." ilk="argument" name="attributes" />
                  <variable citdl="String" doc="The content of the extension." ilk="argument" name="content" />
                  <variable citdl="String" ilk="argument" name="shortNS" />
                </scope>
                <scope doc="Function to get extensions that match a namespace and name." ilk="function" name="getExtensions" signature="getExtensions(name_space,name)">
                  <variable citdl="String" doc="The namespace of the extension." ilk="argument" name="name_space" />
                  <variable citdl="String" doc="The name of the extension" ilk="argument" name="name" />
                </scope>
                <scope doc="Function to remove extensions that match a namespace and name." ilk="function" name="removeExtensions" signature="removeExtensions(name_space,name)">
                  <variable citdl="String" doc="The namespace of the extension." ilk="argument" name="name_space" />
                  <variable citdl="String" doc="The name of the extension" ilk="argument" name="name" />
                </scope>
                <scope doc="" ilk="function" name="destroy" />
                <variable doc="" name="extensions" />
                <variable doc="" name="authors" />
                <variable doc="" name="contributors" />
                <variable doc="" name="links" />
                <variable doc="" name="categories" />
                <variable doc="" name="title">
                  <variable doc="" name="value" />
                </variable>
                <variable doc="" name="icon" />
                <variable doc="" name="subtitle" />
                <variable doc="" name="updated" />
                <variable doc="" name="issued" />
                <variable doc="" name="content" />
                <variable doc="" name="entries" />
                <variable doc="" name="ATOM_URI" />
                <variable doc="" name="name_spaces" />
                <variable attributes="private" doc="" name="_objName" />
              </scope>
              <scope doc="Class container for &apos;Category&apos; types." ilk="function" name="Category" signature="Category(scheme,term,label)">
                <variable citdl="String" ilk="argument" name="scheme" />
                <variable citdl="String" ilk="argument" name="term" />
                <variable citdl="String" ilk="argument" name="label" />
                <scope attributes="private" doc="" ilk="function" name="_postBuild" />
                <scope attributes="private" doc="" ilk="function" name="_getAttributeNames" />
                <scope doc="Function to construct string form of the category tag, which is an XML structure." ilk="function" name="toString" />
                <scope doc="Function to do construction of the Category data from the DOM node containing it." ilk="function" name="buildFromDom" signature="buildFromDom(node)">
                  <variable citdl="DOM node" doc="The DOM node to process for content." ilk="argument" name="node" />
                </scope>
                <variable doc="" name="label" />
                <variable doc="" name="scheme" />
                <variable doc="" name="term" />
                <variable attributes="private" doc="" name="_objName" />
              </scope>
              <scope doc="Class container for &apos;Content&apos; types. Such as summary, content, username, and so on types of data." name="Content" signature="Content(tagName,value,src,type,xmlLang)">
                <variable ilk="argument" name="tagName" />
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="src" />
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="xmlLang" />
                <scope attributes="private" doc="" ilk="function" name="_getAttributeNames" />
                <scope attributes="private" doc="" ilk="function" name="_postBuild" />
                <scope doc="Function to do construction of the Content data from the DOM node containing it." ilk="function" name="buildFromDom" signature="buildFromDom(node)">
                  <variable citdl="DOM node" doc="The DOM node to process for content." ilk="argument" name="node" />
                </scope>
                <scope doc="Function to construct string form of the content tag, which is an XML structure." ilk="function" name="toString" />
                <variable doc="" name="value" />
                <variable doc="" name="scheme" />
                <variable doc="" name="term" />
                <variable doc="" name="tagName" />
                <variable doc="" name="HTML" />
                <variable attributes="private" doc="" name="_useTextContent" />
              </scope>
              <scope doc="Class container for &apos;link&apos; types." name="Link" signature="Link(href,rel,hrefLang,title,type)">
                <variable ilk="argument" name="href" />
                <variable ilk="argument" name="rel" />
                <variable ilk="argument" name="hrefLang" />
                <variable ilk="argument" name="title" />
                <variable ilk="argument" name="type" />
                <scope attributes="private" doc="" ilk="function" name="_getAttributeNames" />
                <scope attributes="private" doc="" ilk="function" name="_postBuild" />
                <scope doc="Function to do construction of the link data from the DOM node containing it." ilk="function" name="buildFromDom" signature="buildFromDom(node)">
                  <variable citdl="The" doc="DOM node to process for link data." ilk="argument" name="node" />
                </scope>
                <scope doc="Function to construct string form of the link tag, which is an XML structure." ilk="function" name="toString" />
                <variable doc="" name="href" />
                <variable doc="" name="hrefLang" />
                <variable doc="" name="rel" />
                <variable doc="" name="title" />
              </scope>
              <scope doc="Class container for &apos;person&apos; types, such as Author, controbutors, and so on." ilk="function" name="Person" signature="Person(personType,name,email,uri)">
                <variable ilk="argument" name="personType" />
                <variable ilk="argument" name="name" />
                <variable ilk="argument" name="email" />
                <variable ilk="argument" name="uri" />
                <scope attributes="private" doc="" ilk="function" name="_getAttributeNames" />
                <scope attributes="private" doc="" ilk="function" name="_postBuild" />
                <scope doc="" ilk="function" name="accept" signature="accept(tag)">
                  <variable ilk="argument" name="tag" />
                </scope>
                <scope doc="Function to do construction of the person data from the DOM node containing it." ilk="function" name="buildFromDom" signature="buildFromDom(node)">
                  <variable citdl="The" doc="DOM node to process for person data." ilk="argument" name="node" />
                </scope>
                <variable attributes="private" citdl="Object" doc="" name="_accepts" />
                <scope doc="Function to construct string form of the Person tag, which is an XML structure." ilk="function" name="toString" />
                <variable doc="" name="extensions" />
                <variable doc="" name="author" />
                <variable doc="" name="contributor" />
                <variable doc="" name="personType" />
                <variable doc="" name="name" />
                <variable doc="" name="email" />
                <variable doc="" name="uri" />
                <variable attributes="private" doc="" name="_objName" />
              </scope>
              <scope doc="Class container for &apos;Generator&apos; types." ilk="function" name="Generator" signature="Generator(uri,version,value)">
                <variable citdl="String" ilk="argument" name="uri" />
                <variable citdl="String" ilk="argument" name="version" />
                <variable citdl="String" ilk="argument" name="value" />
                <scope attributes="private" doc="" ilk="function" name="_postBuild" />
                <scope doc="Function to do construction of the generator data from the DOM node containing it." ilk="function" name="buildFromDom" signature="buildFromDom(node)">
                  <variable citdl="The" doc="DOM node to process for link data." ilk="argument" name="node" />
                </scope>
                <scope doc="Function to construct string form of the Generator tag, which is an XML structure." ilk="function" name="toString" />
                <variable doc="" name="value" />
                <variable doc="" name="uri" />
                <variable doc="" name="version" />
              </scope>
              <scope doc="Class container for &apos;Entry&apos; types." ilk="function" name="Entry" signature="Entry(id)">
                <variable citdl="String" ilk="argument" name="id" />
                <scope attributes="private" doc="" ilk="function" name="_getAttributeNames" />
                <variable attributes="private" citdl="Object" doc="" name="_accepts" />
                <scope attributes="private" doc="Function to construct string form of the entry tag, which is an XML structure." ilk="function" name="toString" returns="string" signature="toString(amPrimary)">
                  <variable ilk="argument" name="amPrimary" />
                </scope>
                <scope attributes="private" doc="Function to get the href that allows editing of this feed entry." ilk="function" name="getEditHref" returns="string">
                  <variable name="return_summary" />
                </scope>
                <scope doc="" ilk="function" name="setEditHref" signature="setEditHref(url)">
                  <variable ilk="argument" name="url" />
                </scope>
                <variable doc="" name="published" />
                <variable doc="" name="updated" />
                <variable doc="" name="links" />
                <variable doc="" name="id" />
              </scope>
              <scope doc="Class container for &apos;Feed&apos; types." ilk="function" name="Feed">
                <variable attributes="private" citdl="Object" doc="" name="_accepts" />
                <scope doc="Function to add an entry to this feed." ilk="function" name="addEntry" signature="addEntry(entry)">
                  <variable citdl="object" doc="The entry object to add." ilk="argument" name="entry" />
                </scope>
                <scope attributes="private" doc="Function to get the first entry of the feed." ilk="function" name="getFirstEntry" returns="object">
                  <variable name="return_summary" />
                </scope>
                <scope doc="Function to get an entry by its id." ilk="function" name="getEntry" signature="getEntry(entryId)">
                  <variable citdl="String" ilk="argument" name="entryId" />
                  <variable name="return_summary" />
                </scope>
                <scope doc="Function to remove an entry from the list of links." ilk="function" name="removeEntry" signature="removeEntry(entry)">
                  <variable citdl="object" doc="The entry." ilk="argument" name="entry" />
                </scope>
                <scope doc="Function to add a set of entries to the feed." ilk="function" name="setEntries" signature="setEntries(arrayOfEntry)">
                  <variable citdl="array" doc="An array of entry objects to add to the feed." ilk="argument" name="arrayOfEntry" />
                </scope>
                <scope doc="Function to construct string form of the feed tag, which is an XML structure." ilk="function" name="toString" />
                <scope attributes="private" doc="Function to Create a new entry object in the feed." ilk="function" name="createEntry" returns="object">
                  <variable name="return_summary" />
                </scope>
                <scope attributes="private" doc="Function to get the href that refers to this feed." ilk="function" name="getSelfHref" returns="string">
                  <variable name="return_summary" />
                </scope>
                <variable doc="" name="entries">
                  <variable doc="" name="length" />
                </variable>
                <variable doc="" name="rights" />
                <variable doc="" name="updated" />
                <variable doc="" name="links" />
              </scope>
              <scope doc="Class container for &apos;Feed&apos; types." ilk="function" name="Service" signature="Service(href)">
                <variable ilk="argument" name="href" />
                <scope doc="Function to do construction of the Service data from the DOM node containing it." ilk="function" name="buildFromDom" signature="buildFromDom(node)">
                  <variable citdl="DOM node" doc="The DOM node to process for content." ilk="argument" name="node" />
                </scope>
                <scope doc="Function to collections that match a specific url." ilk="function" name="getCollection" signature="getCollection(url)">
                  <variable citdl="String" doc="e URL to match collections against." ilk="argument" name="url" />
                </scope>
                <variable doc="" name="workspaces" />
                <variable doc="" name="name_space" />
                <variable doc="" name="href" />
              </scope>
              <scope doc="Class container for &apos;Workspace&apos; types." ilk="function" name="Workspace" signature="Workspace(title)">
                <variable ilk="argument" name="title" />
                <scope doc="Function to do construction of the Workspace data from the DOM node containing it." ilk="function" name="buildFromDom" signature="buildFromDom(node)">
                  <variable citdl="DOM node" doc="The DOM node to process for content." ilk="argument" name="node" />
                </scope>
                <variable doc="" name="title" />
                <variable doc="" name="collections" />
              </scope>
              <scope doc="Class container for &apos;Collection&apos; types." ilk="function" name="Collection" signature="Collection(href,title)">
                <variable ilk="argument" name="href" />
                <variable ilk="argument" name="title" />
                <scope doc="Function to do construction of the Collection data from the DOM node containing it." ilk="function" name="buildFromDom" signature="buildFromDom(node)">
                  <variable citdl="DOM node" doc="The DOM node to process for content." ilk="argument" name="node" />
                </scope>
                <variable doc="" name="href" />
                <variable doc="" name="memberType" />
                <variable doc="" name="id" />
                <variable doc="" name="title" />
                <variable doc="" name="attributes" />
                <variable doc="" name="features" />
                <variable doc="" name="children" />
              </scope>
              <variable attributes="private" citdl="Object" doc="Container for general constants." name="_Constants">
                <scope doc="" name="ATOM_URI" />
                <scope doc="" name="ATOM_NS" />
                <scope doc="" name="PURL_NS" />
                <scope doc="" name="APP_NS" />
              </variable>
              <variable attributes="private" citdl="Object" doc="" name="_actions">
                <scope doc="" ilk="function" name="link" signature="link(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="author" signature="author(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="contributor" signature="contributor(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="category" signature="category(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="icon" signature="icon(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="id" signature="id(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="rights" signature="rights(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="subtitle" signature="subtitle(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="title" signature="title(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="updated" signature="updated(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="issued" signature="issued(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="modified" signature="modified(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="published" signature="published(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="entry" signature="entry(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="content" signature="content(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="name" signature="name(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="email&quot;" signature="email&quot;(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="uri&quot;" signature="uri&quot;(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="generator&quot;" signature="generator&quot;(obj,node)">
                  <variable ilk="argument" name="obj" />
                  <variable ilk="argument" name="node" />
                </scope>
              </variable>
              <variable citdl="Object" doc="" name="util">
                <scope doc="Utility function to create a date from a DOM node&apos;s text content." ilk="function" name="createDate" signature="createDate(node)">
                  <variable citdl="DOM node" doc="The DOM node to inspect." ilk="argument" name="node" />
                  <variable name="return_summary" />
                </scope>
                <scope doc="Utility function to escape XML special characters in an HTML string." ilk="function" name="escapeHtml" signature="escapeHtml(str)">
                  <variable citdl="String" doc="The string to escape" ilk="argument" name="str" />
                  <variable name="return_summary" />
                </scope>
                <scope doc="Utility function to un-escape XML special characters in an HTML string." ilk="function" name="unEscapeHtml" signature="unEscapeHtml(str)">
                  <variable citdl="String" doc="The string to un-escape." ilk="argument" name="str" />
                  <variable name="return_summary" />
                </scope>
                <scope doc="Utility function to get a node name and deal with IE&apos;s bad handling of namespaces on tag names." ilk="function" name="getNodename" signature="getNodename(node)">
                  <variable citdl="DOM node" doc="The DOM node whose name to retrieve." ilk="argument" name="node" />
                  <variable name="return_summary" />
                </scope>
              </variable>
            </variable>
          </scope>
          <variable citdl="Object" doc="" name="widget">
            <scope doc="An ATOM feed entry editor that allows viewing of the individual attributes of an entry." ilk="function" name="FeedEntryEditor">
              <variable attributes="private" doc="" name="_contentEditor" />
              <scope attributes="private" doc="" name="_oldContent" />
              <scope attributes="private" doc="" name="_setObject" />
              <scope doc="" name="enableEdit" />
              <scope attributes="private" doc="" name="_contentEditorCreator" />
              <variable attributes="private" citdl="Object" doc="" name="_editors">
                <variable doc="" name="authors" />
                <variable doc="" name="contributors" />
                <variable doc="" name="id" />
                <variable doc="" name="updated" />
                <variable doc="" name="title" />
                <variable doc="" name="content" />
              </variable>
              <scope doc="" name="entryNewButton" />
              <variable attributes="private" doc="" name="_editable" />
              <scope doc="" name="templatePath" />
              <scope doc="" ilk="function" name="postCreate" />
              <scope doc="Function to set the current entry that is being edited." ilk="function" name="setEntry" signature="setEntry(entry,feed,leaveMenuState)">
                <variable citdl="object" doc="Instance of dojox.atom.io.model.Entry to display for reading/editing." ilk="argument" name="entry" />
                <variable citdl="object" ilk="argument" name="feed" />
                <variable citdl="boolean" ilk="argument" name="leaveMenuState" />
              </scope>
              <scope attributes="private" doc="Internal function for toggling/enabling the display of edit mode" ilk="function" name="_toggleEdit">
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for listening to a topic that will handle entry notification." ilk="function" name="_handleEvent" signature="_handleEvent(entrySelectionEvent)">
                <variable citdl="object" doc="The topic message containing the entry that was selected for view." ilk="argument" name="entrySelectionEvent" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for determining of a particular entry is editable." ilk="function" name="_isEditable" signature="_isEditable(entry)">
                <variable citdl="object" doc="The dojox.atom.io.model.Entry object to examine" ilk="argument" name="entry" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function to set the contents of the title node in the template to some value from the entry." ilk="function" name="setTitle" signature="setTitle(titleAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the title data to." ilk="argument" name="titleAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the author node in the template to some value from the entry." ilk="function" name="setAuthors" signature="setAuthors(authorsAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the author data to." ilk="argument" name="authorsAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the contributor node in the template to some value from the entry." ilk="function" name="setContributors" signature="setContributors(contributorsAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the contributor data to." ilk="argument" name="contributorsAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the ID node in the template to some value from the entry." ilk="function" name="setId" signature="setId(idAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the ID data to." ilk="argument" name="idAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the updated node in the template to some value from the entry." ilk="function" name="setUpdated" signature="setUpdated(updatedAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the udpated data to." ilk="argument" name="updatedAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the summary node in the template to some value from the entry." ilk="function" name="setSummary" signature="setSummary(summaryAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the summary data to." ilk="argument" name="summaryAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the content node in the template to some value from the entry." ilk="function" name="setContent" signature="setContent(contentAnchorNode,editMode,entry)">
                <variable citdl="DOM node" ilk="argument" name="contentAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope attributes="private" doc="Function to create an appropriate text editor widget based on the given parameters." ilk="function" name="_createEditor" signature="_createEditor(anchorNode,node,multiline,rte)">
                <variable citdl="DOM node" doc="The DOM node to attach the editor widget to." ilk="argument" name="anchorNode" />
                <variable citdl="DOM node" doc="An object containing the value to be put into the editor. This ranges from an anonymous object with a value parameter to a dojox.atom.io.model.Content object." ilk="argument" name="node" />
                <variable citdl="boolean" doc="A boolean indicating whether the content should be multiline (such as a textarea) instead of a single line (such as a textbox)." ilk="argument" name="multiline" />
                <variable citdl="object" doc="A boolean indicating whether the content should be a rich text editor widget." ilk="argument" name="rte" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Function to switch between editor types." ilk="function" name="_switchEditor" signature="_switchEditor(event)">
                <variable citdl="object" doc="The event generated by the change in the select box on the page." ilk="argument" name="event" />
              </scope>
              <scope attributes="private" doc="Creates a People Editor widget and returns it." ilk="function" name="_createPeopleEditor" signature="_createPeopleEditor(anchorNode,node)">
                <variable citdl="DOM node" doc="The node to attach the editor to." ilk="argument" name="anchorNode" />
                <variable citdl="DOM node" doc="An object containing the value to be put into the editor. Typically, this is an dojox.atom.io.model.Person object." ilk="argument" name="node" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Saves edits submitted when the &apos;save&apos; button is pressed." ilk="function" name="saveEdits">
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Function for handling the save of an entry, cleaning up the display after the edit is completed." ilk="function" name="_handleSave" signature="_handleSave(entry,location)">
                <variable citdl="object" doc="dojox.atom.io.model.Entry object The entry that was saved. Location: String A URL to be used, not used here, but part of the call back from the AtomIO" ilk="argument" name="entry" />
                <variable citdl="string" ilk="argument" name="location" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Cancels edits and reverts the editor to its previous state (display mode)" ilk="function" name="cancelEdits">
                <variable name="return_summary" />
              </scope>
              <scope doc="Clears the editor, destorys all editors, leaving the editor completely clear" ilk="function" name="clear" />
              <scope doc="" ilk="function" name="clearEditors" />
              <scope attributes="private" doc="Function for cleaning up/enforcing the XHTML standard in HTML returned from the editor2 widget." ilk="function" name="_enforceXhtml" signature="_enforceXhtml(html)">
                <variable citdl="string" doc="HTML string to be enforced as xhtml." ilk="argument" name="html" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Function for closing tags in a text of HTML/XHTML" ilk="function" name="_closeTag" signature="_closeTag(xhtml,tag)">
                <variable citdl="string" doc="String XHTML string which needs the closing tag." ilk="argument" name="xhtml" />
                <variable citdl="string" doc="The tag to close." ilk="argument" name="tag" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Function to put the editor into a state to create a new entry." ilk="function" name="_toggleNew" />
              <scope attributes="private" doc="Function to display the appropriate sections based on validity." ilk="function" name="_displaySections" />
              <variable attributes="private" doc="" name="_subscriptions" />
              <scope name="displayOptions">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelTitle">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelAuthors">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelContributors">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelId">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="close">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelUpdated">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelSummary">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelContent">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="doNew">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="edit">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="save">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="cancel">
                <variable doc="" name="innerHTML" />
              </scope>
              <variable attributes="private" doc="" name="_editMode" />
              <variable attributes="private" doc="" name="_toLoad" />
              <scope name="entryTitleSelect">
                <variable doc="" name="value" />
              </scope>
              <scope name="entrySummarySelect">
                <variable doc="" name="value" />
              </scope>
              <scope name="entryContentSelect">
                <variable doc="" name="value" />
              </scope>
              <variable doc="" name="editor" />
              <variable attributes="private" doc="" name="_new" />
            </scope>
            <scope doc="An editor for dojox.atom.io.model.Person objects." ilk="function" name="PeopleEditor">
              <scope doc="" name="templatePath" />
              <scope attributes="private" doc="" name="_rows" />
              <variable attributes="private" doc="" name="_editors" />
              <variable attributes="private" doc="" name="_index" />
              <variable attributes="private" doc="" name="_numRows" />
              <scope doc="" ilk="function" name="postCreate" />
              <scope doc="" ilk="function" name="destroy" />
              <scope attributes="private" doc="creates editor boxes (textbox widgets) for the individual values of a Person." ilk="function" name="_createEditors" signature="_createEditors(name,email,uri,index,widgetName)">
                <variable citdl="string" doc="The name of this Person." ilk="argument" name="name" />
                <variable citdl="string" doc="The email of this Person." ilk="argument" name="email" />
                <variable citdl="string" doc="The Person&apos;s URI." ilk="argument" name="uri" />
                <variable citdl="int" doc="The row index to use for this Person." ilk="argument" name="index" />
                <variable citdl="string" ilk="argument" name="widgetName" />
              </scope>
              <scope attributes="private" doc="Creates an individual editor widget (textbox) for a value." ilk="function" name="_createEditor" signature="_createEditor(value,id,name,labelNode,node)">
                <variable citdl="string" doc="The initial value of the textbox" ilk="argument" name="value" />
                <variable citdl="string" doc="The id the textbox should have." ilk="argument" name="id" />
                <variable citdl="string" doc="The text to put in the label element for this textbox." ilk="argument" name="name" />
                <variable citdl="DOM node" doc="The node to attach the label to." ilk="argument" name="labelNode" />
                <variable citdl="DOM node" doc="The node to attach the editor rows to." ilk="argument" name="node" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Removes a Person from our list of editors." ilk="function" name="_removeEditor" signature="_removeEditor(event)">
                <variable citdl="object" doc="The event generated when the remove button is pressed on the page." ilk="argument" name="event" />
              </scope>
              <scope attributes="private" doc="Adds a new block of blank editors to represent a Person." ilk="function" name="_add" />
              <scope doc="Gets the values of this editor in an array." ilk="function" name="getValues">
                <variable name="return_summary" />
              </scope>
              <variable doc="" name="name" />
              <scope name="data">
                <variable doc="" name="length" />
              </scope>
            </scope>
            <scope doc="An ATOM feed entry editor for publishing updated ATOM entries, or viewing non-editable entries." ilk="function" name="FeedEntryViewer">
              <scope doc="" name="entrySelectionTopic" />
              <variable attributes="private" citdl="Object" doc="" name="_validEntryFields" />
              <variable doc="" name="displayEntrySections" />
              <variable attributes="private" doc="" name="_displayEntrySections" />
              <scope doc="" name="enableMenu" />
              <scope doc="" name="enableMenuFade" />
              <variable attributes="private" doc="" name="_optionButtonDisplayed" />
              <scope doc="" name="templatePath" />
              <variable attributes="private" doc="" name="_entry" />
              <variable attributes="private" doc="" name="_feed" />
              <scope attributes="private" doc="" name="_editMode" />
              <scope doc="" ilk="function" name="postCreate" />
              <scope doc="" ilk="function" name="startup" />
              <scope doc="Function to clear the state of the widget." ilk="function" name="clear" />
              <scope doc="Function to clear all the display nodes for the ATOM entry from the viewer." ilk="function" name="clearNodes" />
              <scope doc="Function to set the current entry that is being edited." ilk="function" name="setEntry" signature="setEntry(entry,feed,leaveMenuState)">
                <variable citdl="object" doc="Instance of dojox.atom.io.model.Entry to display for reading/editing." ilk="argument" name="entry" />
                <variable citdl="object" ilk="argument" name="feed" />
                <variable citdl="boolean" ilk="argument" name="leaveMenuState" />
              </scope>
              <scope doc="Function to set the contents of the title header node in the template to some value." ilk="function" name="setTitleHeader" signature="setTitleHeader(titleHeaderNode,entry)">
                <variable citdl="DOM node" ilk="argument" name="titleHeaderNode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the title node in the template to some value from the entry." ilk="function" name="setTitle" signature="setTitle(titleAnchorNode,editMode,entry)">
                <variable ilk="argument" name="titleAnchorNode" />
                <variable citdl="Boolean" doc="to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="The" doc="Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the title format for the authors section of the author row in the template to some value from the entry." ilk="function" name="setAuthorsHeader" signature="setAuthorsHeader(authorHeaderNode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the author section header data to." ilk="argument" name="authorHeaderNode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the author node in the template to some value from the entry." ilk="function" name="setAuthors" signature="setAuthors(authorsAnchorNode,editMode,entry)">
                <variable citdl="DOM node" ilk="argument" name="authorsAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the contributor header node in the template to some value from the entry." ilk="function" name="setContributorsHeader" signature="setContributorsHeader(contributorsHeaderNode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the contributor title to." ilk="argument" name="contributorsHeaderNode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the contributor node in the template to some value from the entry." ilk="function" name="setContributors" signature="setContributors(contributorsAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the contributor data to." ilk="argument" name="contributorsAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the ID node in the template to some value from the entry." ilk="function" name="setIdHeader" signature="setIdHeader(idHeaderNode,entry)">
                <variable citdl="DOM node" ilk="argument" name="idHeaderNode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the ID node in the template to some value from the entry." ilk="function" name="setId" signature="setId(idAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the ID data to." ilk="argument" name="idAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the updated header node in the template to some value from the entry." ilk="function" name="setUpdatedHeader" signature="setUpdatedHeader(updatedHeaderNode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the updated header data to." ilk="argument" name="updatedHeaderNode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the updated node in the template to some value from the entry." ilk="function" name="setUpdated" signature="setUpdated(updatedAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the udpated data to." ilk="argument" name="updatedAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the summary node in the template to some value from the entry." ilk="function" name="setSummaryHeader" signature="setSummaryHeader(summaryHeaderNode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the summary title to." ilk="argument" name="summaryHeaderNode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the summary node in the template to some value from the entry." ilk="function" name="setSummary" signature="setSummary(summaryAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the summary data to." ilk="argument" name="summaryAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the content node in the template to some value from the entry." ilk="function" name="setContentHeader" signature="setContentHeader(contentHeaderNode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the content data to." ilk="argument" name="contentHeaderNode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope doc="Function to set the contents of the content node in the template to some value from the entry." ilk="function" name="setContent" signature="setContent(contentAnchorNode,editMode,entry)">
                <variable citdl="DOM node" doc="The DOM node to attach the content data to." ilk="argument" name="contentAnchorNode" />
                <variable citdl="boolean" doc="Boolean to indicate if the display should be in edit mode or not." ilk="argument" name="editMode" />
                <variable citdl="object" doc="The Feed Entry to work with." ilk="argument" name="entry" />
              </scope>
              <scope attributes="private" doc="Internal function for determining which sections of the view to actually display." ilk="function" name="_displaySections">
                <variable name="return_summary" />
              </scope>
              <scope doc="Function for setting which sections of the entry should be displayed." ilk="function" name="setDisplaySections" signature="setDisplaySections(sectionsArray)">
                <variable citdl="array" doc="Array of string names that indicate which sections to display." ilk="argument" name="sectionsArray" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for setting which checkboxes on the display are selected." ilk="function" name="_setDisplaySectionsCheckboxes">
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for reading what is currently checked for display and generating the display list from it." ilk="function" name="_readDisplaySections">
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for determining of a particular entry is editable." ilk="function" name="_toggleCheckbox" signature="_toggleCheckbox(checkBox)">
                <variable citdl="object" doc="The checkbox object to toggle the selection on." ilk="argument" name="checkBox" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for determining of a particular entry is editable." ilk="function" name="_toggleOptions" signature="_toggleOptions(checkBox)">
                <variable citdl="object" doc="The checkbox object to toggle the selection on." ilk="argument" name="checkBox" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for listening to a topic that will handle entry notification." ilk="function" name="_handleEvent" signature="_handleEvent(entrySelectionEvent)">
                <variable citdl="object" doc="The topic message containing the entry that was selected for view." ilk="argument" name="entrySelectionEvent" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function to set whether a field in the view is valid and displayable." ilk="function" name="setFieldValidity" signature="setFieldValidity(field,isValid)">
                <variable citdl="string" doc="The field name to set the valid parameter on. Such as &apos;content&apos;, &apos;id&apos;, etc." ilk="argument" name="field" />
                <variable citdl="boolean" doc="Flag denoting if the field is valid or not." ilk="argument" name="isValid" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function to return if a displayable field is valid or not" ilk="function" name="isFieldValid" signature="isFieldValid(field)">
                <variable citdl="string" doc="The field name to get the valid parameter of. Such as &apos;content&apos;, &apos;id&apos;, etc." ilk="argument" name="field" />
                <variable name="return_summary" />
              </scope>
              <scope doc="" ilk="function" name="getEntry" />
              <scope doc="" ilk="function" name="getFeed" />
              <scope doc="" ilk="function" name="destroy" />
              <variable attributes="private" doc="" name="_subscriptions" />
              <scope name="displayOptions">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelTitle">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelAuthors">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelContributors">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelId">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="close">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelUpdated">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelSummary">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope name="feedEntryCheckBoxLabelContent">
                <variable doc="" name="innerHTML" />
              </scope>
            </scope>
            <scope doc="Widget representing a header in a FeedEntryViewer/Editor" ilk="function" name="EntryHeader">
              <variable doc="" name="title" />
              <scope doc="" name="templatePath" />
              <scope doc="" ilk="function" name="postCreate" />
              <scope doc="" ilk="function" name="setListHeader" signature="setListHeader(title)">
                <variable citdl="string" ilk="argument" name="title" />
              </scope>
              <scope doc="" ilk="function" name="clear" />
              <scope doc="" ilk="function" name="destroy" />
            </scope>
            <scope doc="An ATOM feed viewer that allows for viewing a feed, deleting entries, and editing entries." ilk="function" name="FeedViewer">
              <scope doc="" name="feedViewerTableBody" />
              <scope doc="" name="feedViewerTable" />
              <scope doc="" name="entrySelectionTopic" />
              <variable doc="" name="url" />
              <scope doc="" name="xmethod" />
              <scope doc="" name="localSaveOnly" />
              <scope doc="" name="templatePath" />
              <variable attributes="private" doc="" name="_feed" />
              <variable attributes="private" doc="" name="_currentSelection" />
              <variable attributes="private" doc="" name="_includeFilters" />
              <scope doc="" name="alertsEnabled" />
              <scope doc="The postCreate function." ilk="function" name="postCreate" />
              <scope doc="The startup function." ilk="function" name="startup" />
              <scope doc="Function clearing all current entries in the feed view." ilk="function" name="clear">
                <variable name="return_summary" />
              </scope>
              <scope doc="Function setting the feed from a URL which to get the feed." ilk="function" name="setFeedFromUrl" signature="setFeedFromUrl(url)">
                <variable citdl="string" doc="The URL to the feed to load." ilk="argument" name="url" />
                <variable name="return_summary" />
                <scope citdl="The" doc="URL to the feed to load." name="url" />
              </scope>
              <scope doc="Function setting the dojox.atom.io.model.Feed data into the view." ilk="function" name="setFeed" signature="setFeed(feed)">
                <variable citdl="object" ilk="argument" name="feed" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for determining the appropriate date to display." ilk="function" name="_displayDateForEntry" signature="_displayDateForEntry(entry)">
                <variable citdl="object" doc="The dojox.atom.io.model.Entry object to examine." ilk="argument" name="entry" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function for appending a new grouping of entries to the feed view." ilk="function" name="appendGrouping" signature="appendGrouping(titleText)">
                <variable citdl="string" ilk="argument" name="titleText" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function for appending an entry to the feed view." ilk="function" name="appendEntry" signature="appendEntry(entry)">
                <variable citdl="object" doc="The dojox.atom.io.model.Entry object to append" ilk="argument" name="entry" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function for deleting a row from the view" ilk="function" name="deleteEntry" signature="deleteEntry(entryRow)">
                <variable citdl="object" ilk="argument" name="entryRow" />
              </scope>
              <scope attributes="private" doc="callback for when an entry is deleted from a feed." ilk="function" name="_removeEntry" signature="_removeEntry(entry,success)">
                <variable citdl="FeedViewerEntry" ilk="argument" name="entry" />
                <variable citdl="boolean" ilk="argument" name="success" />
              </scope>
              <scope attributes="private" doc="Internal function for handling the selection of feed entries." ilk="function" name="_rowSelected" signature="_rowSelected(evt)">
                <variable citdl="object" doc="The click event that triggered a selection." ilk="argument" name="evt" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for unselecting the current selection." ilk="function" name="_deselectCurrentSelection">
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for determining of a particular entry is editable." ilk="function" name="_isEditable" signature="_isEditable(entry)">
                <variable citdl="object" doc="The dojox.atom.io.model.Entry object to examine" ilk="argument" name="entry" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function intended for over-riding/replacement as an attachpoint to for other items to recieve selection notification." ilk="function" name="onEntrySelected" signature="onEntrySelected(entry)">
                <variable citdl="object" doc="The dojox.atom.io.model.Entry object selected." ilk="argument" name="entry" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Method to determine if the URL is relative or absolute." ilk="function" name="_isRelativeURL" signature="_isRelativeURL(url)">
                <variable citdl="string" doc="The URL to inspect." ilk="argument" name="url" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function to calculate a baseline URL from the provided full URL." ilk="function" name="_calculateBaseURL" signature="_calculateBaseURL(fullURL,currentPageRelative)">
                <variable citdl="string" doc="The full URL as a string." ilk="argument" name="fullURL" />
                <variable citdl="boolean" doc="Flag to denote of the base URL should be calculated as just the server base, or relative to the current page/location in the URL." ilk="argument" name="currentPageRelative" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function to do matching of category filters to widgets." ilk="function" name="_isFilterAccepted" signature="_isFilterAccepted(entry)">
                <variable citdl="object" ilk="argument" name="entry" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function to add a filter for entry inclusion in the feed view." ilk="function" name="addCategoryIncludeFilter" signature="addCategoryIncludeFilter(filter)">
                <variable citdl="object" doc="The basic items to filter on and the values. Should be of format: {scheme: &amp;amp;lt;some text or null&amp;amp;gt;, term: &amp;amp;lt;some text or null&amp;amp;gt;, label: &amp;amp;lt;some text or null&amp;amp;gt;}" ilk="argument" name="filter" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function to remove a filter for entry inclusion in the feed view." ilk="function" name="removeCategoryIncludeFilter" signature="removeCategoryIncludeFilter(filter)">
                <variable citdl="object" doc="The basic items to identify the filter that is present. Should be of format: {scheme: &amp;amp;lt;some text or null&amp;amp;gt;, term: &amp;amp;lt;some text or null&amp;amp;gt;, label: &amp;amp;lt;some text or null&amp;amp;gt;}" ilk="argument" name="filter" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Internal function for listening to a topic that will handle entry notification." ilk="function" name="_handleEvent" signature="_handleEvent(entrySelectionEvent)">
                <variable citdl="object" doc="The topic message containing the entry that was selected for view." ilk="argument" name="entrySelectionEvent" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="callback function used when adding an entry to the feed." ilk="function" name="_addEntry" signature="_addEntry(entry)">
                <variable citdl="object" ilk="argument" name="entry" />
              </scope>
              <scope doc="Destroys this widget, including all descendants and subscriptions." ilk="function" name="destroy" />
              <variable attributes="private" doc="" name="_subscriptions" />
              <variable doc="" name="atomIO" />
              <variable doc="" name="childWidgets" />
              <variable doc="" name="containerNode" />
              <scope doc="The initializer function." ilk="function" name="CategoryIncludeFilter" signature="CategoryIncludeFilter(scheme,term,label)">
                <variable ilk="argument" name="scheme" />
                <variable ilk="argument" name="term" />
                <variable ilk="argument" name="label" />
                <scope doc="Function to determine if this category filter matches against a category on an atom entry" ilk="function" name="match" signature="match(entry)">
                  <variable ilk="argument" name="entry" />
                  <variable name="return_summary" />
                </scope>
                <variable doc="" name="scheme" />
                <variable doc="" name="term" />
                <variable doc="" name="label" />
              </scope>
            </scope>
            <scope doc="Widget for handling the display of an entry and specific events associated with it." ilk="function" name="FeedViewerEntry">
              <scope doc="" name="templatePath" />
              <scope doc="" name="entryNode" />
              <scope doc="" name="timeNode" />
              <scope doc="" name="deleteButton">
                <variable doc="" name="innerHTML" />
              </scope>
              <scope doc="" name="entry" />
              <scope doc="" name="feed" />
              <scope doc="" ilk="function" name="postCreate" />
              <scope doc="Function to set the title of the entry." ilk="function" name="setTitle" signature="setTitle(text)">
                <variable citdl="string" doc="The title." ilk="argument" name="text" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function to set the time of the entry." ilk="function" name="setTime" signature="setTime(timeText)">
                <variable citdl="string" doc="The string form of the date." ilk="argument" name="timeText" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Function to enable the delete action on this entry." ilk="function" name="enableDelete">
                <variable name="return_summary" />
              </scope>
              <scope doc="Function to disable the delete action on this entry." ilk="function" name="disableDelete">
                <variable name="return_summary" />
              </scope>
              <scope doc="Function to handle the delete event and delete the entry." ilk="function" name="deleteEntry" signature="deleteEntry(event)">
                <variable citdl="object" ilk="argument" name="event" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Attach point for when a row is clicked on." ilk="function" name="onClick" signature="onClick(e)">
                <variable citdl="object" doc="The event generated by the click." ilk="argument" name="e" />
              </scope>
            </scope>
            <scope doc="Grouping of feed entries." ilk="function" name="FeedViewerGrouping">
              <scope doc="" name="templatePath" />
              <scope doc="" name="groupingNode" />
              <scope doc="" name="titleNode" />
              <scope doc="Sets the text to be shown above this grouping." ilk="function" name="setText" signature="setText(text)">
                <variable citdl="The" doc="text to show." ilk="argument" name="text" />
              </scope>
            </scope>
            <scope doc="A filter to be applied to the list of entries." ilk="function" name="AtomEntryCategoryFilter">
              <scope doc="" name="scheme" />
              <scope doc="" name="term" />
              <scope doc="" name="label" />
              <scope doc="" name="isFilter" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="" name="av">
          <scope doc="Inserts a Flash FLV video into the HTML page and provides methods and events for controlling the video. Also plays the H264/M4V codec with a little trickery: change the &apos;.M4V&apos; extension to &apos;.flv&apos;." ilk="function" name="FLVideo">
            <scope attributes="private" citdl="Uri" doc="The path to the video player SWF resource" name="_swfPath" />
            <scope doc="Initialize the media." ilk="function" name="postCreate">
              <scope name="_flashObject">
                <variable doc="" ilk="function" name="onError" signature="onError(err)">
                  <variable ilk="argument" name="err" />
                </variable>
              </scope>
            </scope>
            <scope doc="Plays the video. If an url is passed in, plays the new link." ilk="function" name="play" signature="play(newUrl)">
              <variable citdl="String" ilk="argument" name="newUrl" />
            </scope>
            <scope doc="Pauses the video" ilk="function" name="pause" />
            <scope doc="Goes to the time passed in the argument" ilk="function" name="seek" signature="seek(time)">
              <variable citdl="Float" ilk="argument" name="time" />
            </scope>
            <scope attributes="private" doc="Sets the volume of the video to the time in the argument - between 0 - 1." ilk="function" name="volume" returns="Float" signature="volume(vol)">
              <variable citdl="Float" ilk="argument" name="vol" />
            </scope>
            <scope doc="Fired when the SWF player has loaded NOT when the video has loaded" ilk="function" name="onLoad" signature="onLoad(mov)">
              <variable ilk="argument" name="mov" />
            </scope>
            <scope doc="Fires the amount of that the media has been downloaded. Number, 0-100" ilk="function" name="onDownloaded" signature="onDownloaded(percent)">
              <variable ilk="argument" name="percent" />
            </scope>
            <scope doc="Fires when the player is clicked Could be used to toggle play/pause, or do an external activity, like opening a new window." ilk="function" name="onClick" signature="onClick(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope doc="Fired on SWF resize, or when its toggled between fullscreen." ilk="function" name="onSwfSized" signature="onSwfSized(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="The video properties. Width, height, duration, etc. NOTE:  if data is empty, this is an older FLV with no meta data. Duration cannot be determined. In original FLVs, duration could only be obtained with Flash Media Server. NOTE:  Older FLVs can still return width and height and will do so on a second event call" ilk="function" name="onMetaData" signature="onMetaData(data,evt)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="evt" />
            </scope>
            <scope doc="The position of the playhead in seconds" ilk="function" name="onPosition" signature="onPosition(time)">
              <variable ilk="argument" name="time" />
            </scope>
            <scope doc="Fires when video starts Good for setting the play button to pause during an autoPlay for example" ilk="function" name="onStart" signature="onStart(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="Fires when video starts and resumes" ilk="function" name="onPlay" signature="onPlay(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="Fires when the pause button is clicked" ilk="function" name="onPause" signature="onPause(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="Fires when video ends Could be used to change pause button to play or show a post video graphic, like YouTube" ilk="function" name="onEnd" signature="onEnd(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="Fire when the Stop button is clicked TODO:  This is not hooked up yet and shouldn&apos;t fire." ilk="function" name="onStop" />
            <scope doc="Fires a boolean to tell if media is paused for buffering or if buffering has finished" ilk="function" name="onBuffer" signature="onBuffer(isBuffering)">
              <variable ilk="argument" name="isBuffering" />
            </scope>
            <scope doc="Fired when the player encounters an error" ilk="function" name="onError" signature="onError(data,url)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope doc="Simple status" ilk="function" name="onStatus" signature="onStatus(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="The status of the video from the SWF playing, stopped, bufering, etc." ilk="function" name="onPlayerStatus" signature="onPlayerStatus(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="Fired on page resize" ilk="function" name="onResize" />
            <scope attributes="private" doc="Checks that there is a proper buffer time between current playhead time and the amount of data loaded. Works only on FLVs with a duration (not older). Pauses the video while continuing download." ilk="function" name="_checkBuffer" signature="_checkBuffer(time,bufferLength)">
              <variable citdl="Float" ilk="argument" name="time" />
              <variable citdl="Float" ilk="argument" name="bufferLength" />
            </scope>
            <scope attributes="private" doc="Helper function to fire onPosition, check download progress, and check buffer." ilk="function" name="_update" />
            <variable attributes="private" doc="" name="_subs" />
            <variable attributes="private" doc="" name="_cons" />
            <variable doc="" name="mediaUrl" />
            <variable doc="" name="initialVolume" />
            <variable attributes="private" doc="" name="_flashObject">
              <variable doc="" name="onError" />
              <variable doc="" name="onLoad" />
            </variable>
            <variable doc="" name="flashMedia" />
            <variable doc="" name="isPlaying" />
            <variable doc="" name="isStopped" />
            <variable doc="" name="isBuffering" />
            <variable doc="" name="percentDownloaded" />
          </scope>
          <scope doc="Used as a mixin for dojox and AIR media" ilk="function" name="_Media">
            <scope doc="" name="mediaUrl" />
            <scope citdl="Float" doc="The initial volume setting of the player. Acccepts between 0 and 1." name="initialVolume" />
            <scope citdl="Boolean" doc="Whether the video automatically plays on load or not." name="autoPlay" />
            <scope citdl="Number" doc="Time in milliseconds that the video should be loaded before it will play. May pause and resume to build up buffer. Prevents stuttering. Note: Older FLVs, without a duration, cannot be buffered." name="bufferTime" />
            <scope citdl="Number" doc="Time in milliseconds bwteen the playhead time and loaded time that will trigger the buffer. When buffer is triggered, video will pause until the bufferTime amount is buffered. Note: Should be a small number, greater than zero." name="minBufferTime" />
            <scope citdl="Number" doc="How often, in milliseconds to get an update of the video position." name="updateTime" />
            <scope citdl="String" doc="The id of this widget and the id of the SWF movie." name="id" />
            <scope citdl="Boolean" doc="Setting to true tells the SWF to output log messages to Firebug." name="isDebug" />
            <scope citdl="read-only-Number" doc="The percentage the media has downloaded; from 0-100" name="percentDownloaded" />
            <scope attributes="private" citdl="read-only-Object" doc="The dojox.embed object" name="_flashObject" />
            <scope citdl="read-only-SWF" doc="The SWF object. Methods are passed to this.     ============== // Player Getters // ============== //    ============= // Player Events // ============= //" name="flashMedia" />
            <scope attributes="private" doc="Connect mediaStatus to the media." ilk="function" name="_initStatus" />
            <scope attributes="private" doc="Returns the current time of the video Note: Consider the onPosition event, which returns the time at a set interval. Too many trips to the SWF could impact performance." ilk="function" name="getTime" returns="Float" />
            <scope doc="Fired when the SWF player has loaded NOT when the video has loaded" ilk="function" name="onLoad" signature="onLoad(mov)">
              <variable citdl="SWF" ilk="argument" name="mov" />
            </scope>
            <scope doc="Fires the amount of that the media has been downloaded. Number, 0-100" ilk="function" name="onDownloaded" signature="onDownloaded(percent)">
              <variable citdl="Number" ilk="argument" name="percent" />
            </scope>
            <scope doc="TODO: Return x/y of click Fires when the player is clicked Could be used to toggle play/pause, or do an external activity, like opening a new window." ilk="function" name="onClick" signature="onClick(evt)">
              <variable citdl="Object" ilk="argument" name="evt" />
            </scope>
            <scope doc="Fired on SWF resize, or when its toggled between fullscreen." ilk="function" name="onSwfSized" signature="onSwfSized(data)">
              <variable citdl="Object" ilk="argument" name="data" />
            </scope>
            <scope doc="The video properties. Width, height, duration, etc. NOTE:  if data is empty, this is an older FLV with no meta data. Duration cannot be determined. In original FLVs, duration could only be obtained with Flash Media Server. NOTE:  Older FLVs can still return width and height and will do so on a second event call" ilk="function" name="onMetaData" signature="onMetaData(data,evt)">
              <variable citdl="Object" ilk="argument" name="data" />
              <variable citdl="Object" ilk="argument" name="evt" />
            </scope>
            <scope doc="The position of the playhead in seconds" ilk="function" name="onPosition" signature="onPosition(time)">
              <variable citdl="Float" ilk="argument" name="time" />
            </scope>
            <scope doc="Fires when video starts Good for setting the play button to pause during an autoPlay for example" ilk="function" name="onStart" signature="onStart(data)">
              <variable citdl="Object" ilk="argument" name="data" />
            </scope>
            <scope doc="Fires when video starts and resumes" ilk="function" name="onPlay" signature="onPlay(data)">
              <variable citdl="Object" ilk="argument" name="data" />
            </scope>
            <scope doc="Fires when the pause button is clicked" ilk="function" name="onPause" signature="onPause(data)">
              <variable citdl="Object" ilk="argument" name="data" />
            </scope>
            <scope doc="Fires when video ends Could be used to change pause button to play or show a post video graphic, like YouTube" ilk="function" name="onEnd" signature="onEnd(data)">
              <variable citdl="Object" ilk="argument" name="data" />
            </scope>
            <scope doc="Fire when the Stop button is clicked TODO:  This is not hooked up yet and shouldn&apos;t fire." ilk="function" name="onStop" />
            <scope doc="Fires a boolean to tell if media is paused for buffering or if buffering has finished" ilk="function" name="onBuffer" signature="onBuffer(isBuffering)">
              <variable citdl="Boolean" ilk="argument" name="isBuffering" />
            </scope>
            <scope doc="Fired when the player encounters an error" ilk="function" name="onError" signature="onError(data,url)">
              <variable citdl="Object" ilk="argument" name="data" />
              <variable citdl="String" ilk="argument" name="url" />
            </scope>
            <scope doc="Simple status" ilk="function" name="onStatus" signature="onStatus(data)">
              <variable citdl="Object" ilk="argument" name="data" />
            </scope>
            <scope doc="The status of the video from the SWF playing, stopped, bufering, etc." ilk="function" name="onPlayerStatus" signature="onPlayerStatus(data)">
              <variable citdl="Object" ilk="argument" name="data" />
            </scope>
            <scope doc="" ilk="function" name="onResize" />
            <scope attributes="private" doc="Calculate media status, based on playhead movement, and onStop and onStart events TODO: Figure in real status from the media for more accurate results." ilk="function" name="_figureStatus" />
            <scope attributes="private" doc="Creates a generic event object." ilk="function" name="_eventFactory" returns="Object" />
            <scope attributes="private" doc="helper for subscribing to topics" ilk="function" name="_sub" signature="_sub(topic,method)">
              <variable ilk="argument" name="topic" />
              <variable ilk="argument" name="method" />
            </scope>
            <scope attributes="private" doc="Ensures volume is less than one" ilk="function" name="_normalizeVolume" signature="_normalizeVolume(vol)">
              <variable ilk="argument" name="vol" />
            </scope>
            <scope attributes="private" doc="Checks that path is relative to HTML file or convertes it to an absolute path." ilk="function" name="_normalizeUrl" signature="_normalizeUrl(_url)">
              <variable ilk="argument" name="_url" />
            </scope>
            <scope doc="destroys flash" ilk="function" name="destroy" />
            <variable doc="" name="status" />
            <variable doc="" name="duration" />
            <variable doc="" name="isBuffering" />
            <variable attributes="private" doc="" name="_prevPos" />
            <variable attributes="private" doc="" name="_prevStatus" />
          </scope>
          <variable citdl="Object" doc="" name="widget">
            <scope doc="A Play/Pause button widget to use with dojox.av.widget.Player" ilk="function" name="PlayButton">
              <scope doc="" name="templatePath" />
              <scope doc="Intialize button." ilk="function" name="postCreate" />
              <scope doc="A common method to set the media in all Player widgets. May do connections and initializations." ilk="function" name="setMedia" signature="setMedia(med)">
                <variable citdl="Object" ilk="argument" name="med" />
              </scope>
              <scope doc="Fired on play or pause click." ilk="function" name="onClick" />
              <scope doc="Fired on play click." ilk="function" name="onPlay" />
              <scope doc="Fired on pause click." ilk="function" name="onPause" />
              <scope doc="Toggles the pause button invisible and the play button visible.." ilk="function" name="showPlay" />
              <scope doc="Toggles the play button invisible and the pause button visible." ilk="function" name="showPause" />
              <variable doc="" name="media" />
              <variable attributes="private" doc="" name="_mode" />
            </scope>
            <scope doc="A Media Player UI widget for all types of dojox.av and AIR media." ilk="function" name="Player">
              <scope citdl="Number" doc="or String */ Sets the width of the player (not the video size) Number will be converted to pixels String will be used literally. EX: &amp;amp;quot;320px&amp;amp;quot; or &amp;amp;quot;100%&amp;amp;quot;" name="playerWidth" />
              <scope doc="" name="widgetsInTemplate" />
              <scope doc="" name="templatePath" />
              <scope attributes="private" doc="" ilk="function" name="_fillContent" />
              <scope doc="Do player styling, and place child widgets in the proper location." ilk="function" name="postCreate" />
              <scope doc="Fired when all children are ready. Set the media in all children with setMedia()" ilk="function" name="startup" />
              <scope doc="If a player size is a percentage, this will fire an onResize event for all children, passing the size of the player." ilk="function" name="onResize" signature="onResize(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <variable doc="" name="items" />
              <variable doc="" name="children" />
              <variable doc="" name="mediaNode" />
              <variable doc="" name="media" />
            </scope>
            <scope doc="A custom slider widget to use with dojox.av.widget.Player." ilk="function" name="ProgressSlider">
              <scope doc="" name="templatePath" />
              <scope doc="Initialize slider." ilk="function" name="postCreate" />
              <scope doc="A common method to set the media in all Player widgets. May do connections and initializations." ilk="function" name="setMedia" signature="setMedia(med,playerWidget)">
                <variable citdl="Object" ilk="argument" name="med" />
                <variable ilk="argument" name="playerWidget" />
              </scope>
              <scope doc="Fired when the mouse is moved. Sets the slider." ilk="function" name="onDrag" signature="onDrag(evt)">
                <variable citdl="HTMLEvent" ilk="argument" name="evt" />
              </scope>
              <scope doc="Fired onmousedown of the slider handle." ilk="function" name="startDrag" />
              <scope doc="Fired on document.onmouseup." ilk="function" name="endDrag" />
              <scope doc="Sets the slider handle (when it is not being dragged)" ilk="function" name="setHandle" signature="setHandle(time)">
                <variable ilk="argument" name="time" />
              </scope>
              <scope doc="Sets the download progress bar to the percentage of how much the media has been downloaded." ilk="function" name="setLoadedPosition" signature="setLoadedPosition(decimal)">
                <variable ilk="argument" name="decimal" />
              </scope>
              <scope doc="Highlights the slider handle on mouseover, and stays highlighted during drag." ilk="function" name="handleOver" />
              <scope doc="Unhighlights handle onmouseover, or on endDrag." ilk="function" name="handleOut" />
              <scope doc="Handles player resize. Need to recalculate the width of position an download bars." ilk="function" name="onResize" signature="onResize(playerDimensions)">
                <variable ilk="argument" name="playerDimensions" />
              </scope>
              <variable doc="" name="seeking" />
              <variable doc="" name="handleWidth" />
              <variable doc="" name="finalWidth" />
              <variable doc="" name="width" />
              <variable doc="" name="x" />
              <variable doc="" name="playerWidget" />
              <variable doc="" name="media" />
              <variable doc="" name="duration" />
              <variable doc="" name="posCon" />
              <variable doc="" name="cmove" />
              <variable doc="" name="cup" />
            </scope>
            <scope doc="A Status widget to use with dojox.av.widget.Player" ilk="function" name="Status">
              <scope doc="" name="templatePath" />
              <scope doc="" ilk="function" name="postCreate" />
              <scope doc="A common method to set the media in all Player widgets. May do connections and initializations." ilk="function" name="setMedia" signature="setMedia(med)">
                <variable citdl="Object" ilk="argument" name="med" />
              </scope>
              <scope doc="" ilk="function" name="onMetaData" signature="onMetaData(data)">
                <variable ilk="argument" name="data" />
              </scope>
              <scope doc="" ilk="function" name="onBuffer" signature="onBuffer(isBuffering)">
                <variable ilk="argument" name="isBuffering" />
              </scope>
              <scope doc="" name="onPosition" />
              <scope doc="" ilk="function" name="onStart" />
              <scope doc="" ilk="function" name="onPlay" />
              <scope doc="" ilk="function" name="onPause" />
              <scope doc="" ilk="function" name="onStop" />
              <scope doc="" ilk="function" name="onEnd" />
              <scope doc="" ilk="function" name="onError" signature="onError(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope doc="" ilk="function" name="onLoad" />
              <scope doc="" ilk="function" name="setStatus" signature="setStatus(str,isError)">
                <variable ilk="argument" name="str" />
                <variable ilk="argument" name="isError" />
              </scope>
              <scope doc="" ilk="function" name="toSeconds" signature="toSeconds(time)">
                <variable ilk="argument" name="time" />
              </scope>
              <variable doc="" name="titleNode">
                <variable doc="" name="innerHTML" />
              </variable>
              <variable doc="" name="durNode">
                <variable doc="" name="innerHTML" />
              </variable>
              <variable doc="" name="timeNode" />
              <variable doc="" name="media" />
              <variable doc="" name="duration" />
              <variable doc="" name="title" />
              <variable doc="" name="isBuffering" />
            </scope>
            <scope doc="A volume widget to use with dojox.av.widget.Player" ilk="function" name="VolumeButton">
              <scope doc="" name="templatePath" />
              <scope doc="Initialize the widget." ilk="function" name="postCreate" />
              <scope doc="A common method to set the media in all Player widgets. May do connections and initializations." ilk="function" name="setMedia" signature="setMedia(med)">
                <variable citdl="Object" ilk="argument" name="med" />
              </scope>
              <scope doc="Changes the icon on the button according to volume level." ilk="function" name="updateIcon" signature="updateIcon(vol)">
                <variable citdl="Float" ilk="argument" name="vol" />
              </scope>
              <scope doc="Shows the volume slider." ilk="function" name="onShowVolume" signature="onShowVolume(evt)">
                <variable citdl="DOMEvent" ilk="argument" name="evt" />
              </scope>
              <scope doc="Fired on document.onmousedown. Checks if clicked inside of this widget or not." ilk="function" name="onDocClick" signature="onDocClick(evt)">
                <variable citdl="DOMEvent" ilk="argument" name="evt" />
              </scope>
              <scope doc="Hides volume slider." ilk="function" name="onHideVolume" />
              <scope doc="Fired on mousemove. Updates volume and position of slider handle." ilk="function" name="onDrag" signature="onDrag(evt)">
                <variable citdl="DOMEvent" ilk="argument" name="evt" />
              </scope>
              <scope doc="Fired on mousedown of the slider handle." ilk="function" name="startDrag" />
              <scope doc="Fired on mouseup of the slider handle." ilk="function" name="endDrag" />
              <scope doc="Highlights the slider handle on mouseover, and stays highlighted during drag." ilk="function" name="handleOver" />
              <scope doc="Unhighlights handle onmouseover, or on endDrag." ilk="function" name="handleOut" />
              <scope attributes="private" doc="Gets dimensions of slider background node. Only uses dojo.coords once, unless the page or player is resized." ilk="function" name="_getVolumeDim" />
              <scope attributes="private" doc="Gets dimensions of slider handle. Only uses dojo.marginBox once." ilk="function" name="_getHandleDim" />
              <scope doc="Fired on player resize. Zeros dimensions so that it can be calculated again." ilk="function" name="onResize" signature="onResize(playerDimensions)">
                <variable citdl="Object" ilk="argument" name="playerDimensions" />
              </scope>
              <variable doc="" name="handleWidth" />
              <variable doc="" name="width" />
              <variable doc="" name="slotWidth" />
              <variable doc="" name="volumeSlider" />
              <variable doc="" name="media" />
              <variable doc="" name="showing" />
              <variable doc="" name="x" />
              <variable doc="" name="clickOff" />
              <variable doc="" name="isDragging" />
              <variable doc="" name="cmove" />
              <variable doc="" name="cup" />
              <variable attributes="private" doc="" name="_domCoords" />
              <variable attributes="private" doc="" name="_handleCoords" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="Vector graphic, data-driven graphs and charts" name="charting">
          <scope doc="" ilk="function" name="Chart3D" signature="Chart3D(node,lights,camera,theme)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="lights" />
            <variable ilk="argument" name="camera" />
            <variable ilk="argument" name="theme" />
            <scope doc="" ilk="function" name="generate" />
            <scope doc="" ilk="function" name="invalidate" />
            <scope doc="" ilk="function" name="render" />
            <scope doc="" ilk="function" name="addPlot" signature="addPlot(plot)">
              <variable ilk="argument" name="plot" />
            </scope>
            <scope doc="" ilk="function" name="removePlot" signature="removePlot(plot)">
              <variable ilk="argument" name="plot" />
            </scope>
            <scope doc="" ilk="function" name="addWall" signature="addWall(wall)">
              <variable ilk="argument" name="wall" />
            </scope>
            <scope doc="" ilk="function" name="removeWall" signature="removeWall(wall)">
              <variable ilk="argument" name="wall" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_add" signature="_add(array,item)">
              <variable ilk="argument" name="array" />
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_remove" signature="_remove(array,item)">
              <variable ilk="argument" name="array" />
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_generateWalls" />
            <scope attributes="private" doc="" ilk="function" name="_generatePlots" />
            <variable doc="" name="node" />
            <variable doc="" name="surface" />
            <variable doc="" name="view" />
            <variable doc="" name="theme" />
            <variable doc="" name="walls" />
            <variable doc="" name="plots" />
          </scope>
          <scope doc="Set up properties and initialize chart build.  arguments:" ilk="function" name="DataChart" signature="DataChart(node,kwArgs)">
            <variable citdl="DomNode" doc="The node to attach the chart to." ilk="argument" name="node" />
            <variable citdl="Object" doc="" ilk="argument" name="kwArgs" />
            <scope citdl="Boolean" doc="Whether live data updates and changes display, like columns moving up and down, or whether it scrolls to the left as data is added" name="scroll" />
            <scope citdl="Boolean" doc="If false, all items are each their own series. If true, the items are combined into one series so that their charted properties can be compared." name="comparative" />
            <variable citdl="String" doc="Used for fetching items. Will vary depending upon store." name="query" />
            <variable citdl="String" doc="Option used for fetching items    start:Number first item to fetch from store count:Number Total amount of items to fetch from store sort:Object Paramaters to sort the fetched items from store" name="queryOptions" />
            <variable citdl="String" doc="The field in the store item that is getting charted" name="fieldName" />
            <scope citdl="dojox.charting.themes." doc="The theme to style the chart. Defaults to PlotKit.blue." name="chartTheme">
              <scope name="plotarea">
                <variable doc="" name="stroke" />
              </scope>
            </scope>
            <variable citdl="Number" doc="The number of major ticks to show on the xaxis" name="displayRange" />
            <variable citdl="Boolean" doc="If true, chart is sized to data. If false, chart is a fixed size. Note, is overridden by displayRange. TODO: Stretch for the y-axis?" name="stretchToFit" />
            <scope citdl="Number" doc="The the smallest the chart width can be" name="minWidth" />
            <scope citdl="Number" doc="The the smallest the chart height can be" name="minHeight" />
            <variable citdl="Boolean" doc="Whether the chart is showing (default) on initialization or hidden." name="showing" />
            <variable citdl="String" doc="The name field of the store item DO NOT SET: Set from store.labelAttribute" name="label" />
            <scope doc="Sets the chart store and query then does the first fetch and connects to subsequent changes.  TODO: Not handling resetting store" ilk="function" name="setStore" signature="setStore(store,query,fieldName,queryOptions)">
              <variable citdl="Object" ilk="argument" name="store" />
              <variable citdl="? String" ilk="argument" name="query" />
              <variable citdl="? String" ilk="argument" name="fieldName" />
              <variable citdl="? Object" ilk="argument" name="queryOptions" />
            </scope>
            <scope doc="If chart is hidden, show it" ilk="function" name="show" />
            <scope doc="If chart is showing, hide it Prevents rendering while hidden" ilk="function" name="hide" />
            <scope doc="Fired when a store item changes. Collects the item calls and when done (after 200ms), sends item array to onData().  FIXME: Using labels instead of IDs for item identifiers here and in the chart series. This is obviously short sighted, but currently used for seriesLabels. Workaround for potential bugs is to assign a label for which all items are unique." ilk="function" name="onSet" signature="onSet(item)">
              <variable citdl="storeObject" ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="onError" signature="onError(err)">
              <variable citdl="Error" ilk="argument" name="err" />
            </scope>
            <scope doc="stub. Fires after data is received but before data is parsed and rendered" ilk="function" name="onDataReceived" signature="onDataReceived(items)">
              <variable citdl="Array" ilk="argument" name="items" />
            </scope>
            <scope doc="The main use of this function is to determine between a single value and an array of values. Other property types included for convenience." ilk="function" name="getProperty" signature="getProperty(item,prop)">
              <variable citdl="storeObject" ilk="argument" name="item" />
              <variable ilk="argument" name="prop" />
            </scope>
            <scope doc="Called after a completed fetch or when store items change. On first run, sets the chart data, then updates chart and legends.  console.log(&amp;amp;quot;Store:&amp;amp;quot;, store);console.log(&amp;amp;quot;items: (&amp;amp;quot;, items.length+&amp;amp;quot;)&amp;amp;quot;, items);console.log(&amp;amp;quot;Chart:&amp;amp;quot;, this);" ilk="function" name="onData" signature="onData(items)">
              <variable citdl="Array" ilk="argument" name="items" />
            </scope>
            <scope doc="Fetches initial data. Subsequent changes are received via onSet in data store." ilk="function" name="fetch" />
            <scope attributes="private" doc="Convenience method to convert a label array of strings into an array of objects" ilk="function" name="convertLabels" returns="null" signature="convertLabels(axis)">
              <variable ilk="argument" name="axis" />
            </scope>
            <scope attributes="private" doc="Convenience method that sets series labels based on item labels." ilk="function" name="seriesLabels" returns="String" signature="seriesLabels(val)">
              <variable citdl="Number" ilk="argument" name="val" />
            </scope>
            <scope doc="Call this function to change the chart size. Can be connected to a layout widget that calls resize." ilk="function" name="resizeChart" signature="resizeChart(dim)">
              <variable citdl="Object" ilk="argument" name="dim" />
            </scope>
            <variable doc="" name="firstRun" />
            <variable doc="" name="store" />
            <variable doc="" name="onSetInterval" />
            <variable doc="" name="onSetItems" />
            <variable doc="" name="items" />
            <variable doc="" name="dataOffset" />
            <variable doc="" name="dataLength" />
            <variable doc="" name="domNode" />
            <variable citdl="Object" doc="First query for store grid: Object Options for the grid plot chartPlot: Object Options for chart elements (lines, bars, etc)" name="xaxis">
              <variable doc="" name="labelFunc" />
              <variable doc="" name="to" />
            </variable>
            <variable citdl="Object" doc="optional parameters for yaxis (see above) store: Object dojo.data store (currently nly supports Persevere)" name="yaxis">
              <variable doc="" name="labelFunc" />
            </variable>
            <variable doc="" name="seriesData" />
            <variable doc="" name="seriesDataBk" />
          </scope>
          <scope doc="" ilk="function" name="Element" signature="Element(chart)">
            <variable ilk="argument" name="chart" />
            <scope doc="" ilk="function" name="createGroup" signature="createGroup(creator)">
              <variable ilk="argument" name="creator" />
            </scope>
            <scope doc="" ilk="function" name="purgeGroup" />
            <scope doc="" ilk="function" name="cleanGroup" signature="cleanGroup(creator)">
              <variable ilk="argument" name="creator" />
            </scope>
            <scope doc="" ilk="function" name="destroyHtmlElements" />
            <scope doc="" ilk="function" name="destroy" />
            <variable doc="" name="group" />
            <variable doc="" name="dirty" />
            <variable doc="" name="htmlElements" />
            <variable doc="" name="chart" />
          </scope>
          <scope doc="" ilk="function" name="Series" signature="Series(chart,data,kwArgs)">
            <variable ilk="argument" name="chart" />
            <variable ilk="argument" name="data" />
            <variable ilk="argument" name="kwArgs" />
            <scope doc="" ilk="function" name="clear" />
            <variable doc="" name="dyn" />
            <variable doc="" name="plot" />
            <variable doc="" name="data" />
            <variable doc="" name="dirty" />
          </scope>
          <scope doc="" ilk="function" name="Theme" signature="Theme(kwArgs)">
            <variable citdl="Object" ilk="argument" name="kwArgs" />
            <variable citdl="Object" doc="" name="Markers">
              <scope doc="" name="CIRCLE" />
              <scope doc="" name="SQUARE" />
              <scope doc="" name="DIAMOND" />
              <scope doc="" name="CROSS" />
              <scope doc="" name="X" />
              <scope doc="" name="TRIANGLE" />
              <scope doc="" name="TRIANGLE_INVERTED" />
            </variable>
            <variable attributes="private" citdl="Object" doc="" name="_def">
              <scope doc="" name="chart" />
              <scope doc="" name="fill" />
            </variable>
            <variable doc="" name="markers" />
            <variable doc="" name="colors" />
            <variable doc="" name="antiAlias" />
            <variable doc="" name="assignColors" />
            <variable doc="" name="assignMarkers" />
            <variable attributes="private" doc="" name="_current">
              <variable doc="" name="marker" />
            </variable>
            <variable attributes="private" doc="" name="_markers" />
            <scope doc="Generate a set of colors for the theme based on keyword arguments" ilk="function" name="defineColors" signature="defineColors(obj)">
              <variable ilk="argument" name="obj" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_buildMarkerArray" />
            <scope attributes="private" doc="Return a clone of this theme, with the position vars reset to 0." ilk="function" name="_clone" />
            <scope doc="" name="addMarker" />
            <scope doc="" name="setMarkers" />
            <scope doc="get either the next color or the next marker, depending on what was passed. If type is not passed, it assumes color." ilk="function" name="next" signature="next(type)">
              <variable citdl="String" doc="Optional. One of either &amp;amp;quot;color&amp;amp;quot; or &amp;amp;quot;marker&amp;amp;quot;. Defaults to &amp;amp;quot;color&amp;amp;quot;." ilk="argument" name="type" />
            </scope>
            <scope doc="resets both marker and color counters back to the start. Subsequent calls to `next` will retrievie the first value of each depending on the passed type." ilk="function" name="clear" />
          </scope>
          <variable citdl="Object" doc="" name="action2d">
            <scope doc="" ilk="function" name="Base" signature="Base(chart,plot,kwargs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwargs" />
              <variable citdl="Object" doc="" name="overOutEvents">
                <scope doc="" name="onmouseover" />
                <scope doc="" name="onmouseout" />
              </variable>
              <scope doc="" ilk="function" name="connect" />
              <scope doc="" ilk="function" name="disconnect" />
              <scope doc="" ilk="function" name="reset" />
              <scope doc="" ilk="function" name="destroy" />
              <variable doc="" name="handle" />
              <variable doc="" name="anim" />
              <variable doc="" name="chart" />
              <variable doc="" name="plot" />
              <variable doc="" name="duration" />
              <variable doc="" name="easing" />
            </scope>
            <scope doc="" ilk="function" name="Highlight" signature="Highlight(chart,plot,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="duration" />
                <scope doc="" name="easing" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams">
                <scope doc="" name="highlight" />
              </variable>
              <scope doc="" ilk="function" name="process" signature="process(o)">
                <variable ilk="argument" name="o" />
              </scope>
              <variable doc="" name="colorFun" />
            </scope>
            <scope doc="" ilk="function" name="Magnify" signature="Magnify(chart,plot,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="duration" />
                <scope doc="" name="easing" />
                <scope doc="" name="scale" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams" />
              <scope doc="" ilk="function" name="process" signature="process(o)">
                <variable ilk="argument" name="o" />
              </scope>
              <variable doc="" name="scale" />
            </scope>
            <scope doc="" ilk="function" name="MoveSlice" signature="MoveSlice(chart,plot,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="duration" />
                <scope doc="" name="easing" />
                <scope doc="" name="scale" />
                <scope doc="" name="shift" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams" />
              <scope doc="" ilk="function" name="process" signature="process(o)">
                <variable ilk="argument" name="o" />
              </scope>
              <scope doc="" ilk="function" name="reset" />
              <variable doc="" name="angles" />
              <variable doc="" name="scale" />
              <variable doc="" name="shift" />
            </scope>
            <scope doc="" ilk="function" name="Shake" signature="Shake(chart,plot,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="duration" />
                <scope doc="" name="easing" />
                <scope doc="" name="shiftX" />
                <scope doc="" name="shiftY" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams" />
              <scope doc="" ilk="function" name="process" signature="process(o)">
                <variable ilk="argument" name="o" />
              </scope>
              <variable doc="" name="shiftX" />
              <variable doc="" name="shiftY" />
            </scope>
            <scope doc="" ilk="function" name="Tooltip" signature="Tooltip(chart,plot,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="plot" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="text" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams" />
              <scope doc="" ilk="function" name="process" signature="process(o)">
                <variable ilk="argument" name="o" />
              </scope>
              <variable doc="" name="aroundRect" />
              <variable doc="" name="angles" />
              <variable doc="" name="text" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="axis2d">
            <scope doc="" ilk="function" name="Base" signature="Base(chart,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <scope doc="" ilk="function" name="clear" />
              <scope doc="" ilk="function" name="initialized" />
              <scope doc="" ilk="function" name="calculate" signature="calculate(min,max,span)">
                <variable ilk="argument" name="min" />
                <variable ilk="argument" name="max" />
                <variable ilk="argument" name="span" />
              </scope>
              <scope doc="" ilk="function" name="getScaler" />
              <scope doc="" ilk="function" name="getTicks" />
              <scope doc="" ilk="function" name="getOffsets" />
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable doc="" name="vertical" />
            </scope>
            <scope doc="" ilk="function" name="Default" signature="Default(chart,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="vertical" />
                <scope doc="" name="fixUpper" />
                <scope doc="" name="fixLower" />
                <scope doc="" name="natural" />
                <scope doc="" name="leftBottom" />
                <scope doc="" name="includeZero" />
                <scope doc="" name="fixed" />
                <scope doc="" name="majorLabels" />
                <scope doc="" name="minorTicks" />
                <scope doc="" name="minorLabels" />
                <scope doc="" name="microTicks" />
                <scope doc="" name="htmlLabels" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams">
                <scope doc="" name="min" />
                <scope doc="" name="max" />
                <scope doc="" name="from" />
                <scope doc="" name="to" />
                <scope doc="" name="majorTickStep" />
                <scope doc="" name="minorTickStep" />
                <scope doc="" name="microTickStep" />
                <scope doc="" name="labels" />
                <scope doc="" name="labelFunc" />
                <scope doc="" name="maxLabelSize" />
                <variable citdl="Object" doc="" name="stroke" />
                <variable citdl="Object" doc="" name="majorTick" />
                <variable citdl="Object" doc="" name="minorTick" />
                <variable citdl="Object" doc="" name="microTick" />
                <scope doc="" name="font" />
                <scope doc="" name="fontColor" />
              </variable>
              <scope doc="" ilk="function" name="dependOnData" />
              <scope doc="" ilk="function" name="clear" />
              <scope doc="" ilk="function" name="initialized" />
              <scope doc="" ilk="function" name="setWindow" signature="setWindow(scale,offset)">
                <variable ilk="argument" name="scale" />
                <variable ilk="argument" name="offset" />
              </scope>
              <scope doc="" ilk="function" name="getWindowScale" />
              <scope doc="" ilk="function" name="getWindowOffset" />
              <scope doc="" ilk="function" name="calculate" signature="calculate(min,max,span,labels)">
                <variable ilk="argument" name="min" />
                <variable ilk="argument" name="max" />
                <variable ilk="argument" name="span" />
                <variable ilk="argument" name="labels" />
              </scope>
              <scope doc="" ilk="function" name="getScaler" />
              <scope doc="" ilk="function" name="getTicks" />
              <scope doc="" ilk="function" name="getOffsets" />
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable doc="" name="dirty" />
              <variable doc="" name="scale" />
              <variable doc="" name="offset" />
              <variable doc="" name="labels" />
              <variable doc="" name="scaler">
                <variable doc="" name="minMinorStep" />
              </variable>
              <variable doc="" name="opt">
                <variable doc="" name="from" />
                <variable doc="" name="to" />
              </variable>
              <variable doc="" name="ticks" />
            </scope>
            <variable citdl="Object" doc="" name="common">
              <variable citdl="Object" doc="" name="createText">
                <scope doc="" ilk="function" name="gfx" signature="gfx(chart,creator,x,y,align,text,font,fontColor)">
                  <variable ilk="argument" name="chart" />
                  <variable ilk="argument" name="creator" />
                  <variable ilk="argument" name="x" />
                  <variable ilk="argument" name="y" />
                  <variable ilk="argument" name="align" />
                  <variable ilk="argument" name="text" />
                  <variable ilk="argument" name="font" />
                  <variable ilk="argument" name="fontColor" />
                </scope>
                <scope doc="" ilk="function" name="html" signature="html(chart,creator,x,y,align,text,font,fontColor)">
                  <variable ilk="argument" name="chart" />
                  <variable ilk="argument" name="creator" />
                  <variable ilk="argument" name="x" />
                  <variable ilk="argument" name="y" />
                  <variable ilk="argument" name="align" />
                  <variable ilk="argument" name="text" />
                  <variable ilk="argument" name="font" />
                  <variable ilk="argument" name="fontColor" />
                </scope>
              </variable>
            </variable>
          </variable>
          <variable citdl="Object" doc="" name="plot2d">
            <scope doc="" ilk="function" name="Areas">
              <scope name="opt">
                <variable doc="" name="lines" />
                <variable doc="" name="areas" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="Bars" signature="Bars(chart,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="hAxis" />
                <scope doc="" name="vAxis" />
                <scope doc="" name="gap" />
                <scope doc="" name="shadows" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams">
                <scope doc="" name="minBarSize" />
                <scope doc="" name="maxBarSize" />
              </variable>
              <scope doc="" ilk="function" name="calculateAxes" signature="calculateAxes(dim)">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable doc="" name="dirty" />
              <variable doc="" name="opt" />
              <variable doc="" name="series" />
              <variable doc="" name="hAxis" />
              <variable doc="" name="vAxis" />
            </scope>
            <scope doc="" ilk="function" name="Base">
              <scope doc="" ilk="function" name="destroy" />
              <scope doc="" ilk="function" name="clear" />
              <scope doc="" ilk="function" name="setAxis" signature="setAxis(axis)">
                <variable ilk="argument" name="axis" />
              </scope>
              <scope doc="" ilk="function" name="addSeries" signature="addSeries(run)">
                <variable ilk="argument" name="run" />
              </scope>
              <scope doc="" ilk="function" name="calculateAxes" signature="calculateAxes(dim)">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope doc="" ilk="function" name="isDirty" />
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <scope doc="" ilk="function" name="getRequiredColors" />
              <scope doc="" ilk="function" name="plotEvent" signature="plotEvent(o)">
                <variable ilk="argument" name="o" />
              </scope>
              <scope doc="" ilk="function" name="connect" signature="connect(object,method)">
                <variable ilk="argument" name="object" />
                <variable ilk="argument" name="method" />
              </scope>
              <scope doc="" ilk="function" name="events" />
              <scope doc="" ilk="function" name="resetEvents" />
              <scope attributes="private" doc="" ilk="function" name="_calc" signature="_calc(dim,stats)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="stats" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_connectEvents" signature="_connectEvents(shape,o)">
                <variable ilk="argument" name="shape" />
                <variable ilk="argument" name="o" />
              </scope>
              <variable doc="" name="series" />
              <variable attributes="private" doc="" name="_hAxis" />
              <variable attributes="private" doc="" name="_vAxis" />
              <variable doc="" name="dirty" />
              <variable attributes="private" doc="" name="_hScaler" />
              <variable attributes="private" doc="" name="_vScaler" />
            </scope>
            <scope doc="" ilk="function" name="Bubble" signature="Bubble(chart,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="hAxis" />
                <scope doc="" name="vAxis" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams" />
              <scope doc="" ilk="function" name="calculateAxes" signature="calculateAxes(dim)">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable doc="" name="dirty" />
              <variable doc="" name="opt" />
              <variable doc="" name="series" />
              <variable doc="" name="hAxis" />
              <variable doc="" name="vAxis" />
            </scope>
            <scope doc="" ilk="function" name="ClusteredBars">
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable doc="" name="dirty" />
            </scope>
            <scope doc="" ilk="function" name="ClusteredColumns">
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable doc="" name="dirty" />
            </scope>
            <scope doc="" ilk="function" name="Columns" signature="Columns(chart,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="hAxis" />
                <scope doc="" name="vAxis" />
                <scope doc="" name="gap" />
                <scope doc="" name="shadows" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams">
                <scope doc="" name="minBarSize" />
                <scope doc="" name="maxBarSize" />
              </variable>
              <scope doc="" ilk="function" name="calculateAxes" signature="calculateAxes(dim)">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable doc="" name="dirty" />
              <variable doc="" name="opt" />
              <variable doc="" name="series" />
              <variable doc="" name="hAxis" />
              <variable doc="" name="vAxis" />
            </scope>
            <scope doc="" ilk="function" name="Default" signature="Default(chart,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="hAxis" />
                <scope doc="" name="vAxis" />
                <scope doc="" name="lines" />
                <scope doc="" name="areas" />
                <scope doc="" name="markers" />
                <scope doc="" name="shadows" />
                <scope doc="" name="tension" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams" />
              <scope doc="" ilk="function" name="calculateAxes" signature="calculateAxes(dim)">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable doc="" name="dirty" />
              <variable doc="" name="opt" />
              <variable doc="" name="series" />
              <variable doc="" name="hAxis" />
              <variable doc="" name="vAxis" />
            </scope>
            <scope doc="" ilk="function" name="Grid" signature="Grid(chart,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="hAxis" />
                <scope doc="" name="vAxis" />
                <scope doc="" name="hMajorLines" />
                <scope doc="" name="hMinorLines" />
                <scope doc="" name="vMajorLines" />
                <scope doc="" name="vMinorLines" />
                <scope doc="" name="hStripes" />
                <scope doc="" name="vStripes" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams" />
              <scope doc="" ilk="function" name="clear" />
              <scope doc="" ilk="function" name="setAxis" signature="setAxis(axis)">
                <variable ilk="argument" name="axis" />
              </scope>
              <scope doc="" ilk="function" name="addSeries" signature="addSeries(run)">
                <variable ilk="argument" name="run" />
              </scope>
              <scope doc="" ilk="function" name="calculateAxes" signature="calculateAxes(dim)">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope doc="" ilk="function" name="isDirty" />
              <scope doc="" ilk="function" name="getRequiredColors" />
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable attributes="private" doc="" name="_hAxis" />
              <variable attributes="private" doc="" name="_vAxis" />
              <variable doc="" name="dirty" />
              <variable doc="" name="opt" />
              <variable doc="" name="hAxis" />
              <variable doc="" name="vAxis" />
            </scope>
            <scope doc="" ilk="function" name="Lines">
              <scope name="opt">
                <variable doc="" name="lines" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="Markers">
              <scope name="opt">
                <variable doc="" name="markers" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="MarkersOnly">
              <scope name="opt">
                <variable doc="" name="lines" />
                <variable doc="" name="markers" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="Pie" signature="Pie(chart,kwArgs)">
              <variable ilk="argument" name="chart" />
              <variable ilk="argument" name="kwArgs" />
              <variable citdl="Object" doc="" name="defaultParams">
                <scope doc="" name="labels" />
                <scope doc="" name="ticks" />
                <scope doc="" name="fixed" />
                <scope doc="" name="precision" />
                <scope doc="" name="labelOffset" />
                <scope doc="" name="labelStyle" />
                <scope doc="" name="htmlLabels" />
              </variable>
              <variable citdl="Object" doc="" name="optionalParams">
                <scope doc="" name="font" />
                <scope doc="" name="fontColor" />
                <scope doc="" name="radius" />
              </variable>
              <scope doc="" ilk="function" name="destroy" />
              <scope doc="" ilk="function" name="clear" />
              <scope doc="" ilk="function" name="setAxis" signature="setAxis(axis)">
                <variable ilk="argument" name="axis" />
              </scope>
              <scope doc="" ilk="function" name="addSeries" signature="addSeries(run)">
                <variable ilk="argument" name="run" />
              </scope>
              <scope doc="" ilk="function" name="calculateAxes" signature="calculateAxes(dim)">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope doc="" ilk="function" name="getRequiredColors" />
              <scope doc="" ilk="function" name="plotEvent" signature="plotEvent(o)">
                <variable ilk="argument" name="o" />
              </scope>
              <scope doc="" ilk="function" name="connect" signature="connect(object,method)">
                <variable ilk="argument" name="object" />
                <variable ilk="argument" name="method" />
              </scope>
              <scope doc="" ilk="function" name="events" />
              <scope doc="" ilk="function" name="resetEvents" />
              <scope attributes="private" doc="" ilk="function" name="_connectEvents" signature="_connectEvents(shape,o)">
                <variable ilk="argument" name="shape" />
                <variable ilk="argument" name="o" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="render" returns="continue|stop iteration" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable doc="" name="dirty" />
              <variable doc="" name="dyn" />
              <variable doc="" name="run" />
              <variable doc="" name="opt" />
            </scope>
            <scope doc="" ilk="function" name="Scatter">
              <scope name="opt">
                <variable doc="" name="lines" />
                <variable doc="" name="markers" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="Stacked">
              <scope doc="" ilk="function" name="calculateAxes" signature="calculateAxes(dim)">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable attributes="private" doc="" name="_maxRunLength" />
              <variable doc="" name="dirty" />
            </scope>
            <scope doc="" ilk="function" name="StackedAreas">
              <scope name="opt">
                <variable doc="" name="lines" />
                <variable doc="" name="areas" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="StackedBars">
              <scope doc="" ilk="function" name="calculateAxes" signature="calculateAxes(dim)">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable attributes="private" doc="" name="_maxRunLength" />
              <variable doc="" name="dirty" />
            </scope>
            <scope doc="" ilk="function" name="StackedColumns">
              <scope doc="" ilk="function" name="calculateAxes" signature="calculateAxes(dim)">
                <variable ilk="argument" name="dim" />
              </scope>
              <scope doc="" ilk="function" name="render" signature="render(dim,offsets)">
                <variable ilk="argument" name="dim" />
                <variable ilk="argument" name="offsets" />
              </scope>
              <variable attributes="private" doc="" name="_maxRunLength" />
              <variable doc="" name="dirty" />
            </scope>
            <scope doc="" ilk="function" name="StackedLines">
              <scope name="opt">
                <variable doc="" name="lines" />
              </scope>
            </scope>
            <variable citdl="Object" doc="" name="common">
              <scope doc="" ilk="function" name="makeStroke" signature="makeStroke(stroke)">
                <variable ilk="argument" name="stroke" />
              </scope>
              <scope doc="" ilk="function" name="augmentColor" signature="augmentColor(target,color)">
                <variable ilk="argument" name="target" />
                <variable ilk="argument" name="color" />
              </scope>
              <scope doc="" ilk="function" name="augmentStroke" signature="augmentStroke(stroke,color)">
                <variable ilk="argument" name="stroke" />
                <variable ilk="argument" name="color" />
              </scope>
              <scope doc="" ilk="function" name="augmentFill" signature="augmentFill(fill,color)">
                <variable ilk="argument" name="fill" />
                <variable ilk="argument" name="color" />
              </scope>
              <variable citdl="Object" doc="" name="defaultStats">
                <scope doc="" name="hmin" />
                <scope doc="" name="hmax" />
                <scope doc="" name="vmin" />
                <scope doc="" ilk="function" name="collectSimpleStats" signature="collectSimpleStats(series)">
                  <variable ilk="argument" name="series" />
                </scope>
                <scope attributes="private" doc="" ilk="function" name="calculateBarSize" returns="Object" signature="calculateBarSize(availableSize,opt,clusterSize)">
                  <variable citdl="Number" ilk="argument" name="availableSize" />
                  <variable citdl="Object" ilk="argument" name="opt" />
                  <variable citdl="Number" ilk="argument" name="clusterSize" />
                </scope>
                <scope attributes="private" doc="" ilk="function" name="collectStackedStats" returns="Object" signature="collectStackedStats(series)">
                  <variable ilk="argument" name="series" />
                </scope>
                <scope attributes="private" doc="" ilk="function" name="curve" returns="Object" signature="curve(a,tension)">
                  <variable citdl="Number[]" ilk="argument" name="a" />
                  <variable citdl="Number|String" ilk="argument" name="tension" />
                </scope>
              </variable>
              <scope doc="" ilk="function" name="collectSimpleStats" signature="collectSimpleStats(series)">
                <variable ilk="argument" name="series" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="calculateBarSize" returns="Object" signature="calculateBarSize(availableSize,opt,clusterSize)">
                <variable citdl="Number" ilk="argument" name="availableSize" />
                <variable citdl="Object" ilk="argument" name="opt" />
                <variable citdl="Number" ilk="argument" name="clusterSize" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="collectStackedStats" returns="Object" signature="collectStackedStats(series)">
                <variable ilk="argument" name="series" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="curve" returns="Object" signature="curve(a,tension)">
                <variable citdl="Number[]" ilk="argument" name="a" />
                <variable citdl="Number|String" ilk="argument" name="tension" />
              </scope>
            </variable>
          </variable>
          <variable citdl="Object" doc="" name="plot3d">
            <scope doc="" ilk="function" name="Bars" signature="Bars(width,height,kwArgs)">
              <variable ilk="argument" name="width" />
              <variable ilk="argument" name="height" />
              <variable ilk="argument" name="kwArgs" />
              <scope doc="" ilk="function" name="getDepth" />
              <scope doc="" ilk="function" name="generate" signature="generate(chart,creator)">
                <variable ilk="argument" name="chart" />
                <variable ilk="argument" name="creator" />
              </scope>
              <variable doc="" name="depth" />
              <variable doc="" name="gap" />
              <variable doc="" name="data" />
              <variable doc="" name="material">
                <variable doc="" name="color" />
              </variable>
            </scope>
            <scope doc="" ilk="function" name="Base" signature="Base(width,height,kwArgs)">
              <variable ilk="argument" name="width" />
              <variable ilk="argument" name="height" />
              <variable ilk="argument" name="kwArgs" />
              <scope doc="" ilk="function" name="setData" signature="setData(data)">
                <variable ilk="argument" name="data" />
              </scope>
              <scope doc="" ilk="function" name="getDepth" />
              <scope doc="" ilk="function" name="generate" signature="generate(chart,creator)">
                <variable ilk="argument" name="chart" />
                <variable ilk="argument" name="creator" />
              </scope>
              <variable doc="" name="data" />
              <variable doc="" name="width" />
              <variable doc="" name="height" />
            </scope>
            <scope doc="" ilk="function" name="Cylinders" signature="Cylinders(width,height,kwArgs)">
              <variable ilk="argument" name="width" />
              <variable ilk="argument" name="height" />
              <variable ilk="argument" name="kwArgs" />
              <scope doc="" ilk="function" name="getDepth" />
              <scope doc="" ilk="function" name="generate" signature="generate(chart,creator)">
                <variable ilk="argument" name="chart" />
                <variable ilk="argument" name="creator" />
              </scope>
              <variable doc="" name="depth" />
              <variable doc="" name="gap" />
              <variable doc="" name="data" />
              <variable doc="" name="material">
                <variable doc="" name="color" />
              </variable>
              <variable doc="" name="outline" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="scaler">
            <variable citdl="Object" doc="" name="common">
              <scope doc="" ilk="function" name="findString" signature="findString(val,text)">
                <variable citdl="String" ilk="argument" name="val" />
                <variable citdl="Array" ilk="argument" name="text" />
              </scope>
              <scope doc="" ilk="function" name="getNumericLabel" signature="getNumericLabel(number,precision,kwArgs)">
                <variable citdl="Number" ilk="argument" name="number" />
                <variable citdl="Number" ilk="argument" name="precision" />
                <variable citdl="Object" ilk="argument" name="kwArgs" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="linear">
              <scope attributes="private" doc="" ilk="function" name="buildScaler" returns="Object" signature="buildScaler(min,max,span,kwArgs)">
                <variable citdl="Number" ilk="argument" name="min" />
                <variable citdl="Number" ilk="argument" name="max" />
                <variable citdl="Number" ilk="argument" name="span" />
                <variable citdl="Object" ilk="argument" name="kwArgs" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="buildTicks" returns="Object" signature="buildTicks(scaler,kwArgs)">
                <variable citdl="Object" ilk="argument" name="scaler" />
                <variable citdl="Object" ilk="argument" name="kwArgs" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="getTransformerFromModel" returns="Function" signature="getTransformerFromModel(scaler)">
                <variable citdl="Object" ilk="argument" name="scaler" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="getTransformerFromPlot" returns="Function" signature="getTransformerFromPlot(scaler)">
                <variable citdl="Object" ilk="argument" name="scaler" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="primitive">
              <scope doc="" ilk="function" name="buildScaler" signature="buildScaler(min,max,span,kwArgs)">
                <variable citdl="Number" ilk="argument" name="min" />
                <variable citdl="Number" ilk="argument" name="max" />
                <variable citdl="Number" ilk="argument" name="span" />
                <variable citdl="Object" ilk="argument" name="kwArgs" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="buildTicks" returns="Object" signature="buildTicks(scaler,kwArgs)">
                <variable citdl="Object" ilk="argument" name="scaler" />
                <variable citdl="Object" ilk="argument" name="kwArgs" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="getTransformerFromModel" returns="Function" signature="getTransformerFromModel(scaler)">
                <variable citdl="Object" ilk="argument" name="scaler" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="getTransformerFromPlot" returns="Function" signature="getTransformerFromPlot(scaler)">
                <variable citdl="Object" ilk="argument" name="scaler" />
              </scope>
            </variable>
          </variable>
          <variable citdl="Object" doc="" name="themes">
            <scope doc="" name="Adobebricks" />
            <scope doc="" name="Algae" />
            <scope doc="" name="Bahamation" />
            <scope doc="" name="BlueDusk" />
            <scope doc="" name="CubanShirts" />
            <scope doc="" name="Desert" />
            <scope doc="" name="Dollar" />
            <variable citdl="Object" doc="" name="ET">
              <scope doc="" name="greys" />
            </variable>
            <scope doc="" name="Grasshopper" />
            <scope doc="" name="Grasslands" />
            <scope doc="" name="GreySkies" />
            <scope doc="" name="IndigoNation" />
            <scope doc="" name="Ireland" />
            <scope doc="" name="MiamiNice" />
            <scope doc="" name="Midwest" />
            <scope doc="" name="Minty" />
            <variable citdl="Object" doc="" name="PlotKit">
              <scope doc="" name="blue" />
              <scope doc="" name="cyan" />
              <scope doc="" name="green" />
              <scope doc="" name="orange" />
              <scope doc="" name="purple" />
              <scope doc="" name="red" />
            </variable>
            <scope doc="" name="PurpleRain" />
            <scope doc="" name="RoyalPurples" />
            <scope doc="" name="SageToLime" />
            <scope doc="" name="Shrooms" />
            <scope doc="" name="Tufte" />
            <scope doc="" name="WatersEdge" />
            <scope doc="" name="Wetland" />
          </variable>
          <variable citdl="Object" doc="" name="widget">
            <scope doc="" ilk="function" name="Chart2D">
              <scope doc="" name="theme" />
              <scope doc="" name="margins" />
              <scope doc="" name="stroke" />
              <scope doc="" name="fill" />
              <scope doc="" ilk="function" name="buildRendering" />
              <scope doc="properly destroy the widget" ilk="function" name="destroy" />
              <scope doc="resize the widget" ilk="function" name="resize" signature="resize(box)">
                <variable ilk="argument" name="box" />
              </scope>
              <variable doc="" name="domNode" />
              <variable doc="" name="chart" />
              <variable doc="" name="actions" />
            </scope>
            <scope doc="A legend for a chart. A legend contains summary labels for each series of data contained in the chart.  Set the boolean horizontal attribute to false to layout legend labels vertically.  (Line or Scatter charts (colored lines with shape symbols) ) -o- Series1  -X- Series2  -v- Series3  (Area/Bar/Pie charts (letters represent colors)) [a] Series1  [b] Series2  [c] Series3" ilk="function" name="Legend">
              <scope doc="" name="chartRef" />
              <scope doc="" name="horizontal" />
              <scope doc="" name="templateString" />
              <scope doc="" name="legendNode" />
              <scope doc="" name="legendBody" />
              <scope doc="" ilk="function" name="postCreate" />
              <scope doc="regenerates the legend to reflect changes to the chart" ilk="function" name="refresh" />
              <scope attributes="private" doc="" ilk="function" name="_addLabel" signature="_addLabel(dyn,label)">
                <variable ilk="argument" name="dyn" />
                <variable ilk="argument" name="label" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_makeIcon" signature="_makeIcon(div,dyn)">
                <variable ilk="argument" name="div" />
                <variable ilk="argument" name="dyn" />
              </scope>
              <variable doc="" name="chart" />
              <variable doc="" name="series" />
              <variable attributes="private" doc="" name="_surfaces" />
              <variable attributes="private" doc="" name="_tr" />
            </scope>
            <scope doc="" name="Sparkline">
              <scope doc="" name="theme" />
              <variable citdl="Object" doc="" name="margins">
                <scope doc="" name="l" />
                <scope doc="" name="r" />
                <scope doc="" name="t" />
                <scope doc="" name="b" />
              </variable>
              <scope doc="" name="valueFn" />
              <scope doc="" name="store" />
              <scope doc="" name="field" />
              <scope doc="" name="query" />
              <scope doc="" name="queryOptions" />
              <scope doc="" name="start" />
              <scope doc="" name="count" />
              <scope doc="" name="sort" />
              <scope doc="" name="data" />
              <scope doc="" name="name" />
              <scope doc="" ilk="function" name="buildRendering" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="A set of lists and hashes for easy use within your applications." name="collections">
          <scope doc="" ilk="function" name="BinaryTree" signature="BinaryTree(data)">
            <variable ilk="argument" name="data" />
            <variable citdl="Object" doc="" name="TraversalMethods">
              <scope doc="" name="Preorder" />
            </variable>
            <variable doc="" name="value" />
            <variable doc="" name="right" />
            <variable doc="" name="left" />
            <variable doc="" name="count" />
            <variable doc="" name="root" />
            <variable doc="" ilk="function" name="clone" />
            <variable doc="" ilk="function" name="compare" signature="compare(n)">
              <variable ilk="argument" name="n" />
            </variable>
            <variable doc="" ilk="function" name="compareData" signature="compareData(d)">
              <variable ilk="argument" name="d" />
            </variable>
            <variable doc="" ilk="function" name="add" signature="add(data)">
              <variable ilk="argument" name="data" />
            </variable>
            <variable doc="" ilk="function" name="clear" />
            <variable doc="" ilk="function" name="contains" signature="contains(data)">
              <variable ilk="argument" name="data" />
            </variable>
            <variable doc="" ilk="function" name="deleteData" signature="deleteData(data)">
              <variable ilk="argument" name="data" />
            </variable>
            <variable doc="" ilk="function" name="getIterator" />
            <variable doc="" ilk="function" name="search" signature="search(data)">
              <variable ilk="argument" name="data" />
            </variable>
            <variable doc="" ilk="function" name="toString" signature="toString(order,sep)">
              <variable ilk="argument" name="order" />
              <variable ilk="argument" name="sep" />
            </variable>
          </scope>
          <scope attributes="private" doc="" ilk="function" name="Dictionary" returns="dojox.collections.Dictionary|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator" signature="Dictionary(dictionary)">
            <variable citdl="dojox.collections.Dictionary" ilk="argument" name="dictionary" />
            <variable doc="" name="count" />
            <variable doc="" name="contains" />
            <variable doc="" ilk="function" name="add" signature="add(k,v)">
              <variable citdl="string" ilk="argument" name="k" />
              <variable citdl="object" ilk="argument" name="v" />
            </variable>
            <variable doc="" ilk="function" name="clear" />
            <variable attributes="private" doc="" ilk="function" name="clone" returns="dojox.collections.Dictionary" />
            <variable attributes="private" doc="" ilk="function" name="containsKey" returns="dojox.collections.Dictionary|bool" signature="containsKey(k)">
              <variable citdl="string" ilk="argument" name="k" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="containsValue" returns="dojox.collections.Dictionary|bool" signature="containsValue(v)">
              <variable citdl="object" ilk="argument" name="v" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="entry" returns="dojox.collections.Dictionary|bool|dojox.collections.DictionaryEntry" signature="entry(k)">
              <variable citdl="string" ilk="argument" name="k" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="forEach" returns="dojox.collections.Dictionary|bool|dojox.collections.DictionaryEntry" signature="forEach(fn,scope)">
              <variable citdl="function" ilk="argument" name="fn" />
              <variable citdl="object" ilk="argument" name="scope" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="getKeyList" returns="dojox.collections.Dictionary|bool|dojox.collections.DictionaryEntry" />
            <variable attributes="private" doc="" ilk="function" name="getValueList" returns="dojox.collections.Dictionary|bool|dojox.collections.DictionaryEntry" />
            <variable attributes="private" doc="" ilk="function" name="item" returns="dojox.collections.Dictionary|bool|dojox.collections.DictionaryEntry|object" signature="item(k)">
              <variable citdl="string" ilk="argument" name="k" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="getIterator" returns="dojox.collections.Dictionary|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator" />
            <variable attributes="private" doc="" ilk="function" name="remove" returns="dojox.collections.Dictionary|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator" signature="remove(k)">
              <variable citdl="string" ilk="argument" name="k" />
            </variable>
          </scope>
          <scope attributes="private" doc="" ilk="function" name="Queue" returns="dojox.collections.Queue|bool|object|dojox.collections.Iterator" signature="Queue(arr)">
            <variable citdl="array" ilk="argument" name="arr" />
            <variable doc="" name="count" />
            <variable doc="" ilk="function" name="clear" />
            <variable attributes="private" doc="" ilk="function" name="clone" returns="dojox.collections.Queue" />
            <variable attributes="private" doc="" ilk="function" name="contains" returns="dojox.collections.Queue|bool" signature="contains(o)">
              <variable citdl="object" ilk="argument" name="o" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="copyTo" returns="dojox.collections.Queue|bool" signature="copyTo(arr,i)">
              <variable citdl="array" ilk="argument" name="arr" />
              <variable citdl="int" ilk="argument" name="i" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="dequeue" returns="dojox.collections.Queue|bool|object" />
            <variable attributes="private" doc="" ilk="function" name="enqueue" returns="dojox.collections.Queue|bool|object" signature="enqueue(o)">
              <variable citdl="object" ilk="argument" name="o" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="forEach" returns="dojox.collections.Queue|bool|object" signature="forEach(fn,scope)">
              <variable citdl="function" ilk="argument" name="fn" />
              <variable citdl="object" ilk="argument" name="scope" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="getIterator" returns="dojox.collections.Queue|bool|object|dojox.collections.Iterator" />
            <variable attributes="private" doc="" ilk="function" name="peek" returns="dojox.collections.Queue|bool|object|dojox.collections.Iterator" />
            <variable attributes="private" doc="" ilk="function" name="toArray" returns="dojox.collections.Queue|bool|object|dojox.collections.Iterator" />
          </scope>
          <scope doc="" name="Set" />
          <scope attributes="private" doc="" ilk="function" name="SortedList" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array|int" signature="SortedList(dictionary)">
            <variable citdl="object" ilk="argument" name="dictionary" />
            <variable doc="" name="count" />
            <variable doc="" name="contains" />
            <variable doc="" ilk="function" name="add" signature="add(k,v)">
              <variable citdl="string" ilk="argument" name="k" />
              <variable citdl="object" ilk="argument" name="v" />
            </variable>
            <variable doc="" ilk="function" name="clear" />
            <variable attributes="private" doc="" ilk="function" name="clone" returns="dojox.collections.SortedList" />
            <variable attributes="private" doc="" ilk="function" name="containsKey" returns="dojox.collections.SortedList|bool" signature="containsKey(k)">
              <variable citdl="string" ilk="argument" name="k" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="containsValue" returns="dojox.collections.SortedList|bool" signature="containsValue(o)">
              <variable citdl="object" ilk="argument" name="o" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="copyTo" returns="dojox.collections.SortedList|bool" signature="copyTo(arr,i)">
              <variable citdl="array" ilk="argument" name="arr" />
              <variable citdl="int" ilk="argument" name="i" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="entry" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry" signature="entry(k)">
              <variable citdl="string" ilk="argument" name="k" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="forEach" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry" signature="forEach(fn,scope)">
              <variable citdl="function" ilk="argument" name="fn" />
              <variable citdl="object" ilk="argument" name="scope" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="getByIndex" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object" signature="getByIndex(i)">
              <variable citdl="int" ilk="argument" name="i" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="getIterator" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator" />
            <variable attributes="private" doc="" ilk="function" name="getKey" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator" signature="getKey(i)">
              <variable citdl="int" ilk="argument" name="i" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="getKeyList" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array" />
            <variable attributes="private" doc="" ilk="function" name="getValueList" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array" />
            <variable attributes="private" doc="" ilk="function" name="indexOfKey" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array|int" signature="indexOfKey(k)">
              <variable citdl="string" ilk="argument" name="k" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="indexOfValue" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array|int" signature="indexOfValue(o)">
              <variable citdl="object" ilk="argument" name="o" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="item" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array|int" signature="item(k)">
              <variable citdl="string" ilk="argument" name="k" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="remove" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array|int" signature="remove(k)">
              <variable citdl="string" ilk="argument" name="k" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="removeAt" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array|int" signature="removeAt(i)">
              <variable citdl="int" ilk="argument" name="i" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="replace" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array|int" signature="replace(k,v)">
              <variable citdl="string" ilk="argument" name="k" />
              <variable citdl="object" ilk="argument" name="v" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="setByIndex" returns="dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array|int" signature="setByIndex(i,o)">
              <variable citdl="int" ilk="argument" name="i" />
              <variable citdl="object" ilk="argument" name="o" />
            </variable>
          </scope>
          <scope attributes="private" doc="" ilk="function" name="Stack" returns="bool|dojox.collections.Iterator|object|array" signature="Stack(arr)">
            <variable citdl="array" ilk="argument" name="arr" />
            <variable doc="" name="count" />
            <variable doc="" ilk="function" name="clear" />
            <variable doc="" ilk="function" name="clone" />
            <variable attributes="private" doc="" ilk="function" name="contains" returns="bool" signature="contains(o)">
              <variable citdl="object" ilk="argument" name="o" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="copyTo" returns="bool" signature="copyTo(arr,i)">
              <variable citdl="array" ilk="argument" name="arr" />
              <variable citdl="int" ilk="argument" name="i" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="forEach" returns="bool" signature="forEach(fn,scope)">
              <variable citdl="function" ilk="argument" name="fn" />
              <variable citdl="object" ilk="argument" name="scope" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="getIterator" returns="bool|dojox.collections.Iterator" />
            <variable attributes="private" doc="" ilk="function" name="peek" returns="bool|dojox.collections.Iterator|object" />
            <variable attributes="private" doc="" ilk="function" name="pop" returns="bool|dojox.collections.Iterator|object" />
            <variable attributes="private" doc="" ilk="function" name="push" returns="bool|dojox.collections.Iterator|object" signature="push(o)">
              <variable citdl="object" ilk="argument" name="o" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="toArray" returns="bool|dojox.collections.Iterator|object|array" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="DictionaryEntry" returns="object|string" signature="DictionaryEntry(k,v)">
            <variable citdl="string" ilk="argument" name="k" />
            <variable citdl="object" ilk="argument" name="v" />
            <variable doc="" name="key" />
            <variable doc="" name="value" />
            <variable attributes="private" doc="" ilk="function" name="valueOf" returns="object" />
            <variable attributes="private" doc="" ilk="function" name="toString" returns="string" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="Iterator" returns="object|string|bool" signature="Iterator(arr)">
            <variable citdl="array" ilk="argument" name="arr" />
            <variable doc="" name="element" />
            <variable attributes="private" doc="" ilk="function" name="atEnd" returns="object|string|bool" />
            <variable attributes="private" doc="" ilk="function" name="get" returns="object|string|bool" />
            <variable attributes="private" doc="" ilk="function" name="map" returns="object|string|bool" signature="map(fn,scope)">
              <variable citdl="function" ilk="argument" name="fn" />
              <variable citdl="object" ilk="argument" name="scope" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="reset" returns="object|string|bool" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="DictionaryIterator" returns="object|string|bool" signature="DictionaryIterator(obj)">
            <variable citdl="object" ilk="argument" name="obj" />
            <variable doc="" name="element" />
            <variable attributes="private" doc="" ilk="function" name="atEnd" returns="object|string|bool" />
            <variable attributes="private" doc="" ilk="function" name="get" returns="object|string|bool" />
            <variable attributes="private" doc="" ilk="function" name="map" returns="object|string|bool" signature="map(fn,scope)">
              <variable citdl="function" ilk="argument" name="fn" />
              <variable citdl="object" ilk="argument" name="scope" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="reset" returns="object|string|bool" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_base" />
        </variable>
        <variable citdl="Object" doc="Advanced color methods, including HSV, HSL, and CMYK conversion, a color generator and advanced colorspace calculations." name="color">
          <scope doc="" ilk="function" name="Palette" signature="Palette(base)">
            <variable citdl="String|Array|dojox.color.Color|dojox.color.Palette" ilk="argument" name="base" />
            <variable doc="" name="colors" />
            <scope attributes="private" doc="" ilk="function" name="transform" returns="dojox.color.Palette" signature="transform(kwArgs)">
              <variable citdl="Object" ilk="argument" name="kwArgs" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="clone" returns="dojox.color.Palette" />
            <variable citdl="Object" doc="" name="generators">
              <scope doc="" name="analogous" />
              <scope doc="" ilk="function" name="monochromatic" signature="monochromatic(args)">
                <variable citdl="Object" ilk="argument" name="args" />
              </scope>
              <scope doc="" ilk="function" name="triadic" signature="triadic(args)">
                <variable citdl="Object" ilk="argument" name="args" />
              </scope>
              <scope doc="" ilk="function" name="complementary" signature="complementary(args)">
                <variable citdl="Object" ilk="argument" name="args" />
              </scope>
              <scope doc="" ilk="function" name="splitComplementary" signature="splitComplementary(args)">
                <variable citdl="Object" ilk="argument" name="args" />
              </scope>
              <scope doc="" ilk="function" name="compound" signature="compound(args)">
                <variable citdl="Object" ilk="argument" name="args" />
              </scope>
              <scope doc="" ilk="function" name="shades" signature="shades(args)">
                <variable citdl="Object" ilk="argument" name="args" />
              </scope>
            </variable>
            <scope attributes="private" doc="" ilk="function" name="generate" returns="dojox.color.Palette" signature="generate(base,type)">
              <variable citdl="String|dojox.color.Color" ilk="argument" name="base" />
              <variable citdl="Function|String" ilk="argument" name="type" />
            </scope>
          </scope>
          <scope doc="" name="Color">
            <scope attributes="private" doc="" ilk="function" name="toCmy" returns="dojox.color.Color|Object" />
            <scope attributes="private" doc="" ilk="function" name="toCmyk" returns="dojox.color.Color|Object" />
            <scope attributes="private" doc="" ilk="function" name="toHsl" returns="dojox.color.Color|Object" />
            <scope attributes="private" doc="" ilk="function" name="toHsv" returns="dojox.color.Color|Object" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="fromCmy" returns="dojox.color.Color" signature="fromCmy(cyan,magenta,yellow)">
            <variable citdl="Object|Array|int" ilk="argument" name="cyan" />
            <variable citdl="int" ilk="argument" name="magenta" />
            <variable citdl="int" ilk="argument" name="yellow" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="fromCmyk" returns="dojox.color.Color" signature="fromCmyk(cyan,magenta,yellow,black)">
            <variable citdl="Object|Array|int" ilk="argument" name="cyan" />
            <variable citdl="int" ilk="argument" name="magenta" />
            <variable citdl="int" ilk="argument" name="yellow" />
            <variable citdl="int" ilk="argument" name="black" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="fromHsl" returns="dojox.color.Color" signature="fromHsl(hue,saturation,luminosity)">
            <variable citdl="Object|Array|int" ilk="argument" name="hue" />
            <variable citdl="int" ilk="argument" name="saturation" />
            <variable citdl="int" ilk="argument" name="luminosity" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="fromHsv" returns="dojox.color.Color" signature="fromHsv(hue,saturation,value)">
            <variable citdl="Object|Array|int" ilk="argument" name="hue" />
            <variable citdl="int" ilk="argument" name="saturation" />
            <variable citdl="int" ilk="argument" name="value" />
          </scope>
          <scope doc="" name="blend" />
          <scope doc="" name="fromRgb" />
          <scope doc="" name="fromHex" />
          <scope doc="" name="fromArray" />
          <scope doc="" name="fromString" />
          <scope doc="" name="greyscale" />
          <variable attributes="private" citdl="Object" doc="" name="_base" />
        </variable>
        <variable citdl="Object" doc="A cometd client written in Dojo" name="cometd">
          <scope doc="Initiates the REST Channels protocol" ilk="function" name="RestChannels" signature="RestChannels(options)">
            <variable citdl="Keyword" doc="arguments: The *autoSubscribeRoot* parameter: When this is set, all REST service requests that have this prefix will be auto-subscribed. The default is &apos;/&apos; (all REST requests). The *url* parameter: This is the url to connect to for server-sent messages. The default is &amp;amp;quot;/channels&amp;amp;quot;. The *autoReconnectTime* parameter: This is amount time to wait to reconnect with a connection is broken The *reloadDataOnReconnect* parameter: This indicates whether RestChannels should re-download data when a connection is restored (value of true), or if it should re-subscribe with retroactive subscriptions (Subscribe-Since header) using HEAD requests (value of false). The default is true." ilk="argument" name="options" />
            <scope doc="" ilk="function" name="absoluteUrl" signature="absoluteUrl(baseUrl,relativeUrl)">
              <variable ilk="argument" name="baseUrl" />
              <variable ilk="argument" name="relativeUrl" />
            </scope>
            <scope doc="" name="acceptType" />
            <variable citdl="Object" doc="" name="subscriptions" />
            <variable citdl="Object" doc="" name="subCallbacks" />
            <scope doc="" name="autoReconnectTime" />
            <scope doc="" name="reloadDataOnReconnect" />
            <scope doc="" name="sendAsJson" />
            <scope doc="" name="url" />
            <scope doc="" name="autoSubscribeRoot" />
            <scope attributes="private" doc="Startup the transport (connect to the &amp;amp;quot;channels&amp;amp;quot; resource to receive updates from the server)." ilk="function" name="open" returns="this can be called after dojo is unloaded, just do nothing in that case" />
            <scope attributes="private" doc="" ilk="function" name="_send" returns="this can be called after dojo is unloaded, just do nothing in that case" signature="_send(method,args,data)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="Subscribes to a channel/uri, and returns a dojo.Deferred object for the response from the subscription request" ilk="function" name="subscribe" returns="don&apos;t process the response, the response will be received in the main channels response" signature="subscribe(channel,args)">
              <variable citdl="String" doc="the uri for the resource you want to monitor" ilk="argument" name="channel" />
              <variable citdl="dojo.__XhrArgs" doc="See dojo.xhr  headers: These are the headers to be applied to the channel subscription request  callback: This will be called when a event occurs for the channel The callback will be called with a single argument:  callback(message) where message is an object that follows the XHR API: status : Http status statusText : Http status text getAllResponseHeaders() : The response headers getResponseHeaders(headerName) : Retrieve a header by name responseText : The response body as text with the following additional Bayeux properties data : The response body as JSON channel : The channel/url of the response" ilk="argument" name="args" />
            </scope>
            <scope doc="Publish an event." ilk="function" name="publish" signature="publish(channel,data)">
              <variable citdl="Channel/resource" doc="path to publish to" ilk="argument" name="channel" />
              <variable citdl="data" doc="to publish" ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processMessage" returns="indicate an error" signature="_processMessage(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="onprogress" returns="this can be called after dojo is unloaded, just do nothing in that case|don&apos;t process the response, the response will be received in the main channels response|indicate an error" signature="onprogress(xhr,data,contentType)">
              <variable ilk="argument" name="xhr" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="contentType" />
            </scope>
            <scope doc="GET the initial value of the resource and subscribe to it See subscribe for parameter values" ilk="function" name="get" signature="get(channel,args)">
              <variable citdl="String" ilk="argument" name="channel" />
              <variable citdl="dojo.__XhrArgs" ilk="argument" name="args" />
            </scope>
            <variable doc="Called when a message is received from the server" ilk="function" name="receive" signature="receive(message)">
              <variable citdl="A" doc="cometd/XHR message" ilk="argument" name="message" />
            </variable>
            <scope doc="called when our channel gets disconnected" ilk="function" name="disconnected" />
            <scope doc="unsubscribes from the resource See subscribe for parameter values" ilk="function" name="unsubscribe" signature="unsubscribe(channel,args)">
              <variable citdl="String" ilk="argument" name="channel" />
              <variable citdl="dojo.__XhrArgs" ilk="argument" name="args" />
            </scope>
            <scope doc="disconnect from the server" ilk="function" name="disconnect" />
            <variable doc="" name="started" />
            <variable doc="" name="connectionId" />
            <variable doc="" name="createdClientId" />
            <variable doc="" name="lastIndex" />
            <variable doc="" name="connected" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="Connection" returns="return: dojo.Deferred|dojo.Deferred" signature="Connection(prefix)">
            <variable ilk="argument" name="prefix" />
            <variable doc="" ilk="function" name="state" />
            <variable attributes="private" doc="" ilk="function" name="init" returns="return: dojo.Deferred" signature="init(root,props,bargs)">
              <variable citdl="String" ilk="argument" name="root" />
              <variable citdl="Object" ilk="argument" name="props" />
              <variable citdl="Object" ilk="argument" name="bargs" />
            </variable>
            <variable doc="" name="url" />
            <variable attributes="private" doc="" name="_isXD" />
            <variable attributes="private" doc="" name="_props" />
            <variable attributes="private" doc="" name="_messageQ" />
            <variable attributes="private" doc="" name="_subscriptions" />
            <variable attributes="private" doc="" name="_initialized" />
            <variable attributes="private" doc="" name="_status" />
            <variable doc="" name="batch" />
            <variable doc="publishes the passed message to the cometd server for delivery on the specified topic" ilk="function" name="publish" signature="publish(channel,data,props)">
              <variable citdl="String" doc="the destination channel for the message" ilk="argument" name="channel" />
              <variable citdl="Object" doc="a JSON object containing the message &amp;amp;quot;payload&amp;amp;quot; properties: Optional. Other meta-data to be mixed into the top-level of the message" ilk="argument" name="data" />
              <variable citdl="Object" ilk="argument" name="props" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="subscribe" returns="return: dojo.Deferred|dojo.Deferred" signature="subscribe(channel,objOrFunc,funcName,props)">
              <variable citdl="String" ilk="argument" name="channel" />
              <variable citdl="Object" ilk="argument" name="objOrFunc" />
              <variable citdl="String" ilk="argument" name="funcName" />
              <variable citdl="Object" ilk="argument" name="props" />
            </variable>
            <variable attributes="private" doc="inform the server of this client&apos;s disinterest in channel" ilk="function" name="unsubscribe" returns="dojo.Deferred" signature="unsubscribe(channel,objOrFunc,funcName,props)">
              <variable citdl="String" doc="name of the cometd channel to unsubscribe from" ilk="argument" name="channel" />
              <variable citdl="Object" doc="an object scope for funcName or the name or reference to a function to be called when messages are delivered to the channel. If null then all subscribers to the channel are unsubscribed." ilk="argument" name="objOrFunc" />
              <variable citdl="String" doc="the second half of the objOrFunc/funcName pair for identifying a callback function to notifiy upon channel message delivery" ilk="argument" name="funcName" />
              <variable citdl="Object" ilk="argument" name="props" />
            </variable>
            <variable doc="Disconnect from the server." ilk="function" name="disconnect" />
            <variable attributes="private" doc="" name="_handshook" />
            <variable doc="" ilk="function" name="subscribed" signature="subscribed(channel,message)">
              <variable citdl="String" ilk="argument" name="channel" />
              <variable citdl="Object" ilk="argument" name="message" />
            </variable>
            <variable doc="" ilk="function" name="unsubscribed" signature="unsubscribed(channel,message)">
              <variable citdl="String" ilk="argument" name="channel" />
              <variable citdl="Object" ilk="argument" name="message" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="tunnelInit" returns="return: dojo.Deferred|dojo.Deferred" signature="tunnelInit(childLocation,childDomain)">
              <variable ilk="argument" name="childLocation" />
              <variable ilk="argument" name="childDomain" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="tunnelCollapse" returns="return: dojo.Deferred|dojo.Deferred" />
            <variable attributes="private" doc="" ilk="function" name="_backoff" />
            <variable attributes="private" doc="" name="_advice">
              <variable doc="" name="interval" />
              <variable doc="" name="reconnect" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_backon" />
            <variable attributes="private" doc="" name="_backoffInterval" />
            <variable attributes="private" doc="" ilk="function" name="_interval" />
            <variable attributes="private" doc="" ilk="function" name="_publishMeta" signature="_publishMeta(action,successful,props)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="successful" />
              <variable ilk="argument" name="props" />
            </variable>
            <variable attributes="private" doc="Handle the handshake return from the server and initialize connection if all is OK" ilk="function" name="_finishInit" signature="_finishInit(data)">
              <variable ilk="argument" name="data" />
            </variable>
            <variable doc="" name="handshakeReturn" />
            <variable doc="" name="currentTransport" />
            <variable doc="" name="clientId" />
            <variable attributes="private" doc="Handle extensions for inbound messages" ilk="function" name="_extendIn" signature="_extendIn(message)">
              <variable ilk="argument" name="message" />
            </variable>
            <variable attributes="private" doc="Handle extensions for inbound messages" ilk="function" name="_extendOut" signature="_extendOut(message)">
              <variable ilk="argument" name="message" />
            </variable>
            <variable doc="" ilk="function" name="deliver" signature="deliver(messages)">
              <variable ilk="argument" name="messages" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_deliver" returns="return: dojo.Deferred|dojo.Deferred" signature="_deliver(message)">
              <variable ilk="argument" name="message" />
            </variable>
            <variable doc="" name="lastMessage" />
            <variable attributes="private" doc="" ilk="function" name="_sendMessage" signature="_sendMessage(message)">
              <variable citdl="object" ilk="argument" name="message" />
            </variable>
            <variable doc="" ilk="function" name="startBatch" />
            <variable doc="" ilk="function" name="endBatch" />
            <variable attributes="private" doc="" ilk="function" name="_onUnload" returns="return: dojo.Deferred|dojo.Deferred" />
            <variable attributes="private" doc="Return the connect timeout in ms, calculated as the minimum of the advised timeout and the configured timeout. Else 0 to indicate no client side timeout" ilk="function" name="_connectTimeout" />
          </scope>
          <scope doc="" name="connectionTypes" />
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <scope attributes="private" doc="" ilk="function" name="_ack">
            <scope name="initialized" />
            <variable attributes="private" doc="" ilk="function" name="_in" signature="_in(msg)">
              <variable ilk="argument" name="msg" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_out" signature="_out(msg)">
              <variable ilk="argument" name="msg" />
            </variable>
          </scope>
          <scope doc="" name="ackEnabled" />
          <variable citdl="Object" doc="" name="ack" />
          <scope doc="" ilk="function" name="callbackPollTransport">
            <scope name="initialized" />
            <variable attributes="private" doc="" name="_connectionType" />
            <variable attributes="private" doc="" name="_cometd">
              <variable attributes="private" doc="" name="_polling" />
            </variable>
            <variable doc="" ilk="function" name="check" signature="check(types,version,xdomain)">
              <variable ilk="argument" name="types" />
              <variable ilk="argument" name="version" />
              <variable ilk="argument" name="xdomain" />
            </variable>
            <variable doc="" ilk="function" name="tunnelInit" />
            <variable doc="" name="tunnelCollapse" />
            <variable attributes="private" doc="" name="_connect" />
            <variable doc="" name="deliver" />
            <variable doc="" ilk="function" name="openTunnelWith" signature="openTunnelWith(content,url)">
              <variable ilk="argument" name="content" />
              <variable ilk="argument" name="url" />
            </variable>
            <variable doc="" ilk="function" name="sendMessages" signature="sendMessages(messages)">
              <variable citdl="array" ilk="argument" name="messages" />
            </variable>
            <variable doc="" ilk="function" name="startup" signature="startup(handshakeData)">
              <variable ilk="argument" name="handshakeData" />
            </variable>
            <variable doc="" ilk="function" name="disconnect" />
            <variable doc="" ilk="function" name="cancelConnect" />
          </scope>
          <scope doc="" name="longPollTransport" />
          <scope doc="" ilk="function" name="longPollTransportFormEncoded">
            <scope name="initialized" />
            <variable attributes="private" doc="" name="_connectionType" />
            <variable attributes="private" doc="" name="_cometd">
              <variable attributes="private" doc="" name="_status" />
              <variable attributes="private" doc="" name="_polling" />
            </variable>
            <variable doc="" ilk="function" name="check" signature="check(types,version,xdomain)">
              <variable ilk="argument" name="types" />
              <variable ilk="argument" name="version" />
              <variable ilk="argument" name="xdomain" />
            </variable>
            <variable doc="" ilk="function" name="tunnelInit" />
            <variable doc="" ilk="function" name="tunnelCollapse" />
            <variable attributes="private" doc="" ilk="function" name="_connect" />
            <variable attributes="private" doc="" name="_initialized" />
            <variable doc="" ilk="function" name="deliver" signature="deliver(message)">
              <variable ilk="argument" name="message" />
            </variable>
            <variable doc="" ilk="function" name="openTunnelWith" signature="openTunnelWith(content,url)">
              <variable ilk="argument" name="content" />
              <variable ilk="argument" name="url" />
            </variable>
            <variable attributes="private" doc="" name="_poll" />
            <variable doc="" ilk="function" name="sendMessages" signature="sendMessages(messages)">
              <variable ilk="argument" name="messages" />
            </variable>
            <variable doc="" ilk="function" name="startup" signature="startup(handshakeData)">
              <variable ilk="argument" name="handshakeData" />
            </variable>
            <variable doc="" ilk="function" name="disconnect" />
            <variable doc="" ilk="function" name="cancelConnect" />
          </scope>
          <scope doc="" ilk="function" name="longPollTransportJsonEncoded">
            <scope name="initialized" />
            <variable attributes="private" doc="" name="_connectionType" />
            <variable attributes="private" doc="" name="_cometd">
              <variable attributes="private" doc="" name="_status" />
              <variable attributes="private" doc="" name="_polling" />
            </variable>
            <variable doc="" ilk="function" name="check" signature="check(types,version,xdomain)">
              <variable ilk="argument" name="types" />
              <variable ilk="argument" name="version" />
              <variable ilk="argument" name="xdomain" />
            </variable>
            <variable doc="" ilk="function" name="tunnelInit" />
            <variable doc="" ilk="function" name="tunnelCollapse" />
            <variable attributes="private" doc="" ilk="function" name="_connect" />
            <variable attributes="private" doc="" name="_initialized" />
            <variable doc="" ilk="function" name="deliver" signature="deliver(message)">
              <variable ilk="argument" name="message" />
            </variable>
            <variable doc="" ilk="function" name="openTunnelWith" signature="openTunnelWith(messages,url)">
              <variable ilk="argument" name="messages" />
              <variable ilk="argument" name="url" />
            </variable>
            <variable attributes="private" doc="" name="_poll" />
            <variable doc="" ilk="function" name="sendMessages" signature="sendMessages(messages)">
              <variable ilk="argument" name="messages" />
            </variable>
            <variable doc="" ilk="function" name="startup" signature="startup(handshakeData)">
              <variable ilk="argument" name="handshakeData" />
            </variable>
            <variable doc="" ilk="function" name="disconnect" />
            <variable doc="" ilk="function" name="cancelConnect" />
          </scope>
          <variable citdl="Object" doc="" name="timestamp" />
          <scope attributes="private" doc="" ilk="function" name="timesync" returns="return: long|return: Date">
            <scope name="initialized" />
            <variable attributes="private" doc="" name="_window" />
            <variable attributes="private" doc="" name="_lags" />
            <variable attributes="private" doc="" name="_offsets" />
            <variable doc="" name="lag" />
            <variable doc="" name="offset" />
            <variable doc="" name="samples" />
            <variable attributes="private" doc="" ilk="function" name="getServerTime" returns="return: long" />
            <variable attributes="private" doc="" ilk="function" name="getServerDate" returns="return: long|return: Date" />
            <variable attributes="private" doc="" ilk="function" name="setTimeout" returns="return: long|return: Date" signature="setTimeout(call,atTimeOrDate)">
              <variable citdl="function" ilk="argument" name="call" />
              <variable citdl="long|Date" ilk="argument" name="atTimeOrDate" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_in" returns="return: long|return: Date" signature="_in(msg)">
              <variable citdl="Object" ilk="argument" name="msg" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_out" returns="return: long|return: Date" signature="_out(msg)">
              <variable ilk="argument" name="msg" />
            </variable>
          </scope>
        </variable>
        <variable citdl="Object" doc="Additional dojo.data data stores and demos" name="data">
          <scope doc="" ilk="function" name="AndOrWriteStore" signature="AndOrWriteStore(keywordParameters)">
            <variable citdl="object" ilk="argument" name="keywordParameters" />
            <variable doc="" name="referenceIntegrity" />
            <scope attributes="private" doc="" ilk="function" name="_assert" signature="_assert(condition)">
              <variable citdl="boolean" ilk="argument" name="condition" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getIdentifierAttribute" />
            <scope attributes="private" doc="See dojo.data.api.Write.newItem()" ilk="function" name="newItem" returns="item" signature="newItem(keywordArgs,parentInfo)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
              <variable citdl="Object" ilk="argument" name="parentInfo" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_removeArrayElement" signature="_removeArrayElement(array,element)">
              <variable citdl="Array" ilk="argument" name="array" />
              <variable citdl="anything" ilk="argument" name="element" />
            </scope>
            <scope doc="See dojo.data.api.Write.deleteItem()" ilk="function" name="deleteItem" signature="deleteItem(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Write.set()" ilk="function" name="setValue" returns="boolean" signature="setValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="almost anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Write.setValues()" ilk="function" name="setValues" returns="boolean" signature="setValues(item,attribute,values)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="array" ilk="argument" name="values" />
            </scope>
            <scope doc="See dojo.data.api.Write.unsetAttribute()" ilk="function" name="unsetAttribute" signature="unsetAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setValueOrValues" returns="boolean" signature="_setValueOrValues(item,attribute,newValueOrValues,callOnSet)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="newValueOrValues" />
              <variable citdl="boolean" ilk="argument" name="callOnSet" />
            </scope>
            <scope attributes="private" doc="Method to add an reference map entry for an item and attribute." ilk="function" name="_addReferenceToMap" signature="_addReferenceToMap(refItem,parentItem,attribute)">
              <variable citdl="item" doc="The item that is referenced." ilk="argument" name="refItem" />
              <variable citdl="item" doc="The item that holds the new reference to refItem." ilk="argument" name="parentItem" />
              <variable citdl="string" doc="The attribute on parentItem that contains the new reference." ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="Method to remove an reference map entry for an item and attribute." ilk="function" name="_removeReferenceFromMap" signature="_removeReferenceFromMap(refItem,parentItem,attribute)">
              <variable citdl="item" doc="The item that is referenced." ilk="argument" name="refItem" />
              <variable citdl="item" doc="The item holding a reference to refItem." ilk="argument" name="parentItem" />
              <variable citdl="strin" doc="The attribute on parentItem that contains the reference." ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="Function to dump the reverse reference map of all items in the store for debug purposes." ilk="function" name="_dumpReferenceMap" />
            <scope attributes="private" doc="" ilk="function" name="_getValueOrValues" signature="_getValueOrValues(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_flatten" signature="_flatten(value)">
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Generate a string that can be saved to a file. The result should look similar to: http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json" ilk="function" name="_getNewFileContentString" />
            <scope attributes="private" doc="Function to determine if an array or object has no properties or values." ilk="function" name="_isEmpty" returns="boolean" signature="_isEmpty(something)">
              <variable citdl="The" doc="array or object to examine." ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Write.save()" ilk="function" name="save" signature="save(keywordArgs)">
              <variable citdl="object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Write.revert()" ilk="function" name="revert" returns="boolean" />
            <scope attributes="private" doc="See dojo.data.api.Write.isDirty()" ilk="function" name="isDirty" returns="boolean" signature="isDirty(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Notification.onSet()  No need to do anything. This method is here just so that the client code can connect observers to it." ilk="function" name="onSet" signature="onSet(item,attribute,oldValue,newValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="object | array" ilk="argument" name="oldValue" />
              <variable citdl="object | array" ilk="argument" name="newValue" />
            </scope>
            <scope doc="See dojo.data.api.Notification.onNew()  No need to do anything. This method is here just so that the client code can connect observers to it." ilk="function" name="onNew" signature="onNew(newItem,parentInfo)">
              <variable citdl="item" ilk="argument" name="newItem" />
              <variable citdl="object" ilk="argument" name="parentInfo" />
            </scope>
            <scope doc="See dojo.data.api.Notification.onDelete()  No need to do anything. This method is here just so that the client code can connect observers to it." ilk="function" name="onDelete" signature="onDelete(deletedItem)">
              <variable citdl="item" ilk="argument" name="deletedItem" />
            </scope>
            <scope attributes="private" doc="Over-ride of base close function of ItemFileReadStore to add in check for store state." ilk="function" name="close" returns="item|boolean" signature="close(request)">
              <variable citdl="object" ilk="argument" name="request" />
            </scope>
            <variable attributes="private" doc="" name="_saveInProgress" />
            <variable attributes="private" doc="" name="_pending" />
          </scope>
          <scope doc="The APP data store." ilk="function" name="AppStore" signature="AppStore(args)">
            <variable citdl="Object" doc="An anonymous object to initialize properties. It expects the following values:" ilk="argument" name="args" />
            <variable citdl="The" doc="url of the Collection to load." name="url" />
            <variable citdl="Whether" doc="or not to append on cache prevention params (as defined by dojo.xhr*)" name="urlPreventCache" />
            <scope doc="" name="xmethod" />
            <variable attributes="private" doc="" name="_atomIO" />
            <variable attributes="private" doc="" name="_feed" />
            <variable attributes="private" doc="" name="_requests" />
            <scope attributes="private" doc="" name="_processing" />
            <variable attributes="private" doc="" name="_updates" />
            <variable attributes="private" doc="" name="_adds" />
            <variable attributes="private" doc="" name="_deletes" />
            <scope attributes="private" doc="Sets the internal feed using a dojox.atom.io.model.Feed object." ilk="function" name="_setFeed" signature="_setFeed(feed,data)">
              <variable citdl="dojox.atom.io.model.Feed" doc="object The Feed to use for this data store." ilk="argument" name="feed" />
              <variable citdl="unused" doc="Signature for this function is defined by AtomIO.getFeed, since this is a callback." ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="Function to return all entries in the Feed as an array of items." ilk="function" name="_getAllItems" returns="array">
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item is an item." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item is an attribute." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="String" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Internal function to add an updated entry to our updates array" ilk="function" name="_addUpdate" signature="_addUpdate(update)">
              <variable citdl="Object" doc="dojox.atom.io.model.Entry object The updated Entry we&apos;ve changed." ilk="argument" name="update" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" returns="Object || int || Boolean" signature="getValue(item,attribute,defaultValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="value" ilk="argument" name="defaultValue" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValues()" ilk="function" name="getValues" returns="Array" signature="getValues(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" returns="Array" signature="getAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttribute()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" returns="boolean." signature="containsValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Internal function for looking at the values contained by the item." ilk="function" name="_containsValue" returns="Boolean" signature="_containsValue(item,attribute,value,regexp,trim)">
              <variable citdl="item" doc="The data item to examine for attribute values." ilk="argument" name="item" />
              <variable citdl="attribute-name-string" doc="The attribute to inspect." ilk="argument" name="attribute" />
              <variable citdl="anything" doc="The value to match." ilk="argument" name="value" />
              <variable citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of &apos;value&apos;" ilk="argument" name="regexp" />
              <variable citdl="Boolean" ilk="argument" name="trim" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" returns="boolean" signature="isItem(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItemLoaded()" ilk="function" name="isItemLoaded" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="Fetch items (Atom entries) that match to a query" ilk="function" name="_fetchItems" signature="_fetchItems(request,fetchHandler,errorHandler)">
              <variable citdl="A" doc="request object" ilk="argument" name="request" />
              <variable citdl="A" doc="function to call for fetched items" ilk="argument" name="fetchHandler" />
              <variable citdl="A" doc="function to call on error" ilk="argument" name="errorHandler" />
            </scope>
            <scope attributes="private" doc="Internal function for finishing a fetch request." ilk="function" name="_finishFetchItems" signature="_finishFetchItems(request,fetchHandler,errorHandler)">
              <variable citdl="A" doc="request object" ilk="argument" name="request" />
              <variable citdl="A" doc="function to call for fetched items" ilk="argument" name="fetchHandler" />
              <variable citdl="A" doc="function to call on error" ilk="argument" name="errorHandler" />
            </scope>
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.close() nothing to do here!" ilk="function" name="close" signature="close(request)">
              <variable citdl="dojo.data.api.Request || keywordArgs || null" ilk="argument" name="request" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentity()" ilk="function" name="getIdentity" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentityAttributes()" ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.fetchItemByIdentity()" ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(keywordArgs)">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Write.newItem()" ilk="function" name="newItem" signature="newItem(keywordArgs)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Write.deleteItem()" ilk="function" name="deleteItem" signature="deleteItem(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Write.setValue()" ilk="function" name="setValue" signature="setValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="string" ilk="argument" name="attribute" />
              <variable citdl="almost anything" ilk="argument" name="value" />
            </scope>
            <scope doc="See dojo.data.api.Write.setValues()" ilk="function" name="setValues" signature="setValues(item,attribute,values)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="string" ilk="argument" name="attribute" />
              <variable citdl="array" ilk="argument" name="values" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Write.unsetAttribute()" ilk="function" name="unsetAttribute" returns="boolean" signature="unsetAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="string" ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Write.save()" ilk="function" name="save" signature="save(keywordArgs)">
              <variable citdl="object" doc="{ onComplete: function onError: function scope: object }" ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Write.revert()" ilk="function" name="revert" />
            <scope attributes="private" doc="See dojo.data.api.Write.isDirty()" ilk="function" name="isDirty" returns="boolean" signature="isDirty(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
          </scope>
          <scope doc="Constructor for the AtomRead store." ilk="function" name="AtomReadStore" signature="AtomReadStore(args)">
            <variable citdl="object" doc="An anonymous object to initialize properties. It expects the following values:" ilk="argument" name="args" />
            <variable citdl="The" doc="url to a service or an XML document that represents the store" name="url" />
            <variable doc="" name="label" />
            <variable citdl="A" doc="boolean indicate to add a query string to the service URL" name="sendQuery" />
            <variable citdl="A" doc="boolean to specify whether or not to unescape HTML text" name="unescapeHTML" />
            <scope doc="Return an attribute value" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable citdl="item" doc="An item returned by a call to the &apos;fetch&apos; method." ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="A attribute of the Atom Entry" ilk="argument" name="attribute" />
              <variable citdl="value" doc="A default value" ilk="argument" name="defaultValue" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Return an attribute value" ilk="function" name="getValues" signature="getValues(item,attribute)">
              <variable citdl="item" doc="An item returned by a call to the &apos;fetch&apos; method." ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="A attribute of the Atom Entry" ilk="argument" name="attribute" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Return an array of attribute names" ilk="function" name="getAttributes" returns="array" signature="getAttributes(item)">
              <variable citdl="item" doc="An XML element" ilk="argument" name="item" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Check whether an element has the attribute" ilk="function" name="hasAttribute" returns="boolean" signature="hasAttribute(item,attribute)">
              <variable citdl="item" doc="must be created by the AtomReadStore instance." ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="An attribute of an Atom Entry item." ilk="argument" name="attribute" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Check whether the attribute values contain the value" ilk="function" name="containsValue" returns="boolean" signature="containsValue(item,attribute,value)">
              <variable citdl="item" doc="must be an instance of a dojox.data.XmlItem from the store instance." ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="A tag name of a child element, An XML attribute name or one of special names" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="value" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Check whether the object is an item (XML element) item: An object to check" ilk="function" name="isItem" returns="boolean|boolran" signature="isItem(something)">
              <variable citdl="anything" ilk="argument" name="something" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Check whether the object is an item (XML element) and loaded item: An object to check" ilk="function" name="isItemLoaded" returns="boolean" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Load an item (XML element)" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable citdl="object" doc="containing the args for loadItem. See dojo.data.api.Read.loadItem()" ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="Return supported data APIs" ilk="function" name="getFeatures" returns="array">
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" returns="undefined" signature="getLabel(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" returns="array|null" signature="getLabelAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="Non-API method for retrieving values regarding the Atom feed, rather than the Atom entries." ilk="function" name="getFeedValue" signature="getFeedValue(attribute,defaultValue)">
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="Non-API method for retrieving values regarding the Atom feed, rather than the Atom entries." ilk="function" name="getFeedValues" signature="getFeedValues(attribute,defaultValue)">
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope attributes="private" doc="Initializes an item before it can be parsed." ilk="function" name="_initItem" signature="_initItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="Retrieves the items from the Atom XML document." ilk="function" name="_fetchItems" signature="_fetchItems(request,fetchHandler,errorHandler)">
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="fetchHandler" />
              <variable ilk="argument" name="errorHandler" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getFetchUrl" signature="_getFetchUrl(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="Parses the document in a first pass" ilk="function" name="_getItems" signature="_getItems(document,request)">
              <variable ilk="argument" name="document" />
              <variable ilk="argument" name="request" />
            </scope>
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable citdl="dojo.data.api.Request || keywordArgs || null" ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getItem" signature="_getItem(element)">
              <variable ilk="argument" name="element" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_parseItem" signature="_parseItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_unescapeHTML" returns="array|boolean|boolran|undefined|null" signature="_unescapeHTML(text)">
              <variable ilk="argument" name="text" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="attribute-name-string" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <variable attributes="private" doc="" name="_feedMetaData" />
            <variable attributes="private" doc="" name="_items" />
            <variable doc="" name="rewriteUrl" />
          </scope>
          <scope doc="This is an abstract class that data stores can extend to add updateable result set functionality as well as client side querying capabilities. This enables widgets to be aware of how active results change in response to the modifications/notifications." ilk="function" name="ClientFilter">
            <scope doc="Attempts to update the given result set based on previous notifications" ilk="function" name="updateResultSet" signature="updateResultSet(resultSet,request)">
              <variable citdl="Array" doc="The result set array that should be updated" ilk="argument" name="resultSet" />
              <variable citdl="Object" doc="This object follows the same meaning as the keywordArgs passed to a dojo.data.api.Read.fetch." ilk="argument" name="request" />
            </scope>
            <scope doc="Determines whether the provided arguments are super/sub sets of each other" ilk="function" name="querySuperSet" signature="querySuperSet(argsSuper,argsSub)">
              <variable citdl="Dojo" doc="Data Fetch arguments" ilk="argument" name="argsSuper" />
              <variable citdl="Dojo" doc="Data Fetch arguments" ilk="argument" name="argsSub" />
            </scope>
            <scope doc="" name="serverVersion" />
            <scope doc="" ilk="function" name="cachingFetch" signature="cachingFetch(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope doc="Returns whether the provide fetch arguments can be used to update an existing list" ilk="function" name="isUpdateable" signature="isUpdateable(request)">
              <variable citdl="Object" doc="See dojo.data.api.Read.fetch request" ilk="argument" name="request" />
            </scope>
            <scope doc="Performs a query on the client side and returns the results as an array" ilk="function" name="clientSideFetch" signature="clientSideFetch(request,baseResults)">
              <variable citdl="Object" doc="See dojo.data.api.Read.fetch request" ilk="argument" name="request" />
              <variable citdl="Array" doc="This provides the result set to start with for client side querying" ilk="argument" name="baseResults" />
            </scope>
            <scope doc="" ilk="function" name="clientSidePaging" signature="clientSidePaging(request,baseResults)">
              <variable citdl="Object" ilk="argument" name="request" />
              <variable citdl="Array" ilk="argument" name="baseResults" />
            </scope>
            <scope doc="" ilk="function" name="matchesQuery" signature="matchesQuery(item,request)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="returns a comparator function for the given sort order array" ilk="function" name="makeComparator" returns="keep the order unchanged" signature="makeComparator(sort)">
              <variable citdl="See" doc="dojox.data.api.Read.fetch" ilk="argument" name="sort" />
            </scope>
            <variable doc="" name="onSet" />
            <variable doc="" name="onNew" />
            <variable doc="" name="onDelete" />
            <variable attributes="private" doc="" name="_updates" />
            <variable attributes="private" doc="" name="_fetchCache" />
          </scope>
          <scope doc="" ilk="function" name="CouchDBRestStore">
            <scope doc="" ilk="function" name="save" signature="save(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope doc="This only differs from JsonRestStore in that it, will put the query string the query part of the URL and it handles start and count" ilk="function" name="fetch" signature="fetch(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processResults" signature="_processResults(results)">
              <variable ilk="argument" name="results" />
            </scope>
            <scope doc="" ilk="function" name="getStores" signature="getStores(couchServerUrl)">
              <variable ilk="argument" name="couchServerUrl" />
            </scope>
          </scope>
          <scope doc="Basic store to display CSS information." ilk="function" name="CssClassStore">
            <scope attributes="private" doc="" name="_labelAttribute" />
            <scope attributes="private" doc="" name="_idAttribute" />
            <scope attributes="private" doc="" name="_cName" />
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="See dojo.data.api.Read.getValues()" ilk="function" name="getValues" signature="getValues(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="Handles the creation of an item based on the passed rule. In this store, this implies parsing out all available class names." ilk="function" name="_handleRule" signature="_handleRule(rule,styleSheet,href)">
              <variable ilk="argument" name="rule" />
              <variable ilk="argument" name="styleSheet" />
              <variable ilk="argument" name="href" />
            </scope>
            <scope attributes="private" doc="Handles the return from a fetching action. Delegates requests to act on the resulting item set to eitehr the _handleFetchReturn or _handleFetchByIdentityReturn depending on where the request originated." ilk="function" name="_handleReturn" />
            <scope attributes="private" doc="Handles a fetchByIdentity request by finding the correct item." ilk="function" name="_handleFetchByIdentityReturn" signature="_handleFetchByIdentityReturn(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentity()" ilk="function" name="getIdentity" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentityAttributes()" ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.fetchItemByIdentity()" ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(request)">
              <variable citdl="request" ilk="argument" name="request" />
            </scope>
            <variable attributes="private" doc="" name="_pending" />
          </scope>
          <scope doc="Basic store to display CSS information." ilk="function" name="CssRuleStore" signature="CssRuleStore(keywordParameters)">
            <variable citdl="Object" ilk="argument" name="keywordParameters" />
            <scope attributes="private" doc="" name="_storeRef" />
            <scope attributes="private" doc="" name="_labelAttribute" />
            <variable attributes="private" doc="" name="_cache" />
            <scope attributes="private" doc="" name="_browserMap" />
            <scope attributes="private" doc="" name="_cName" />
            <scope doc="" ilk="function" name="setContext" signature="setContext(context)">
              <variable citdl="Array" ilk="argument" name="context" />
            </scope>
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" signature="isItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttribute()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="See dojo.data.api.Read.getValues()" ilk="function" name="getValues" signature="getValues(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" returns="boolean." signature="containsValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.isItemLoaded()" ilk="function" name="isItemLoaded" returns="boolean" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable citdl="object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Read.fetch()" ilk="function" name="fetch" signature="fetch(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="Populates the _allItems object with unique class names" ilk="function" name="_fetch" signature="_fetch(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="Handles the creation of an item based on the passed rule. In this store, this implies parsing out all available class names." ilk="function" name="_handleRule" signature="_handleRule(rule,styleSheet,href)">
              <variable ilk="argument" name="rule" />
              <variable ilk="argument" name="styleSheet" />
              <variable ilk="argument" name="href" />
            </scope>
            <scope attributes="private" doc="Handles the return from a fetching action. Delegates requests to act on the resulting item set to eitehr the _handleFetchReturn or _handleFetchByIdentityReturn depending on where the request originated." ilk="function" name="_handleReturn" />
            <scope attributes="private" doc="Handles a fetchByIdentity request by finding the correct items." ilk="function" name="_handleFetchReturn" signature="_handleFetchReturn(request)">
              <variable citdl="Request" ilk="argument" name="request" />
            </scope>
            <scope doc="See dojo.data.api.Read.close() Clears out the cache and allItems objects, meaning all future fetches will requery the stylesheets." ilk="function" name="close" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="attribute-name-string" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="Internal function for looking at the values contained by the item." ilk="function" name="_containsValue" returns="Boolean" signature="_containsValue(item,attribute,value,regexp)">
              <variable citdl="item" doc="The data item to examine for attribute values." ilk="argument" name="item" />
              <variable citdl="attribute-name-string" doc="The attribute to inspect." ilk="argument" name="attribute" />
              <variable citdl="anything" doc="The value to match." ilk="argument" name="value" />
              <variable citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of &apos;value&apos;" ilk="argument" name="regexp" />
            </scope>
            <variable doc="" name="context" />
            <variable attributes="private" doc="" name="_pending" />
            <variable attributes="private" doc="" name="_allItems" />
            <variable attributes="private" doc="" name="_waiting" />
            <variable doc="" name="gatherHandle" />
          </scope>
          <scope doc="initializer" ilk="function" name="CsvStore" signature="CsvStore(keywordParameters)">
            <variable citdl="Object" doc="identifier: String} The column label for the column to use for the identity. Optional. If not set, the identity is the row number." ilk="argument" name="keywordParameters" />
            <variable doc="" name="url" />
            <variable doc="" name="label" />
            <variable doc="" name="identifier" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="item || String" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="Internal function to get the internal index to the item data from the item handle" ilk="function" name="_getIndex" signature="_getIndex(item)">
              <variable citdl="The" doc="idem handle to get the index for." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValue() Note that for the CsvStore, an empty string value is the same as no value, so the defaultValue would be returned instead of an empty string." ilk="function" name="getValue" returns="String" signature="getValue(item,attribute,defaultValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="value" ilk="argument" name="defaultValue" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValues() CSV syntax does not support multi-valued attributes, so this is just a wrapper function for getValue()." ilk="function" name="getValues" returns="Array" signature="getValues(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" returns="Array" signature="getAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.hasAttribute() The hasAttribute test is true if attribute has an index number within the item&apos;s array length AND if the item has a value for that attribute. Note that for the CsvStore, an empty string value is the same as no value." ilk="function" name="hasAttribute" returns="Boolean" signature="hasAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" returns="boolean." signature="containsValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Internal function for looking at the values contained by the item." ilk="function" name="_containsValue" returns="Boolean" signature="_containsValue(item,attribute,value,regexp)">
              <variable citdl="item" doc="The data item to examine for attribute values." ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="The attribute to inspect." ilk="argument" name="attribute" />
              <variable citdl="anything" doc="The value to match." ilk="argument" name="value" />
              <variable citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of &apos;value&apos;" ilk="argument" name="regexp" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" returns="Boolean" signature="isItem(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.isItemLoaded() The CsvStore always loads all items, so if it&apos;s an item, then it&apos;s loaded." ilk="function" name="isItemLoaded" returns="Boolean" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" returns="Object" />
            <scope attributes="private" doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" returns="String|undefined" signature="getLabel(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" returns="array|null" signature="getLabelAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.util.simpleFetch.fetch()" ilk="function" name="_fetchItems" signature="_fetchItems(keywordArgs,findCallback,errorCallback)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
              <variable ilk="function" name="findCallback" />
              <variable ilk="function" name="errorCallback" />
            </scope>
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable citdl="dojo.data.api.Request || keywordArgs || null" ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getArrayOfArraysFromCsvFileContents" returns="null" signature="_getArrayOfArraysFromCsvFileContents(csvFileContents)">
              <variable citdl="string" ilk="argument" name="csvFileContents" />
            </scope>
            <scope attributes="private" doc="Function to split the CSV file contents into separate lines. Since line breaks can occur inside quotes, a Regexp didn&apos;t work as well. A quick passover parse should be just as efficient." ilk="function" name="_splitLines" signature="_splitLines(csvContent)">
              <variable ilk="argument" name="csvContent" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processData" signature="_processData(data)">
              <variable citdl="String" ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_createItemFromIdentity" returns="Object" signature="_createItemFromIdentity(identity)">
              <variable citdl="String" ilk="argument" name="identity" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Identity.getIdentity()" ilk="function" name="getIdentity" returns="String|null" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.fetchItemByIdentity()" ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(keywordArgs)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentifierAttributes()  Identity isn&apos;t a public attribute in the item, it&apos;s the row position index. So, return null." ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="Internal function to execute delayed request in the store. Execute any deferred fetches now." ilk="function" name="_handleQueuedFetches" />
            <variable attributes="private" doc="" name="_loadInProgress" />
            <variable attributes="private" doc="" name="_csvData" />
            <variable attributes="private" doc="" name="_attributes" />
            <variable attributes="private" doc="" name="_dataArray" />
            <variable attributes="private" doc="" name="_arrayOfAllItems" />
            <variable attributes="private" doc="" name="_loadFinished" />
            <variable attributes="private" doc="" name="_queuedFetches" />
            <variable attributes="private" doc="" name="_attributeIndexes" />
            <variable attributes="private" doc="" name="_storeProp" />
            <variable attributes="private" doc="" name="_idProp" />
            <variable attributes="private" doc="" name="_features" />
            <variable attributes="private" doc="" name="_idMap" />
          </scope>
          <scope doc="A simple store that provides a datastore interface to a filesystem." ilk="function" name="FileStore" signature="FileStore(args)">
            <variable citdl="Object" ilk="argument" name="args" />
            <variable citdl="The" doc="URL of the service which provides the file store serverside implementation." name="url" />
            <scope attributes="private" doc="" name="_storeRef" />
            <variable citdl="The" doc="attribute of the file to use as the huma-readable text. Default is &apos;name&apos;. The purpose of this store is to represent a file as a datastore item. The datastore item by default has the following attributes that can be examined on it. directory: Boolean indicating if the file item represents a directory. name: The filename with no path informatiom. path: The file complete file path including name, relative to the location the file service scans from size: The size of the file, in bytes. parentDir: The parent directory path. children: Any child files contained by a directory file item.  Note that the store&apos;s server call pattern is RESTlike.  The store also supports the passing of configurable options to the back end service, such as expanding all child files (no lazy load), displaying hidden files, displaying only directories, and so on. These are defined through a comma-separated list in declarative, or through setting the options array in programmatic." name="label" />
            <scope attributes="private" doc="" name="_identifier" />
            <scope attributes="private" doc="" name="_attributes" />
            <variable doc="" name="pathSeparator" />
            <variable doc="" name="options" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="attribute-name-string" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <variable doc="" name="pathAsQueryParam" />
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttributes()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentity()" ilk="function" name="getIdentity" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItemLoaded()" ilk="function" name="isItemLoaded" signature="isItemLoaded(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" signature="containsValue(item,attribute,value)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValues" signature="getValues(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" signature="isItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope doc="Fetch items that match to a query" ilk="function" name="fetch" signature="fetch(request)">
              <variable citdl="A" doc="request object fetchHandler: A function to call for fetched items errorHandler: A function to call on error" ilk="argument" name="request" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(keywordArgs)">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processResult" signature="_processResult(data,request)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="Internal function for processing an array of items for return." ilk="function" name="_processItemArray" signature="_processItemArray(itemArray)">
              <variable ilk="argument" name="itemArray" />
            </scope>
            <scope attributes="private" doc="Internal function for processing an item returned from the store. It sets up the store ref as well as sets up the attributes necessary to invoke a lazy load on a child, if there are any." ilk="function" name="_processItem" signature="_processItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
          </scope>
          <scope doc="Initializer for the FlickrRestStore store." ilk="function" name="FlickrRestStore" signature="FlickrRestStore(args)">
            <variable citdl="Object" ilk="argument" name="args" />
            <variable attributes="private" citdl="Integer" doc="A unique identifier for this store." name="_id" />
            <scope attributes="private" citdl="Integer" doc="A counter for the number of requests made. This is used to define the callback function that Flickr will use." name="_requestCount" />
            <scope attributes="private" citdl="String" doc="The URL to the Flickr REST services." name="_flickrRestUrl" />
            <variable attributes="private" citdl="String" doc="The users API key to be used when accessing Flickr REST services." name="_apikey" />
            <scope attributes="private" citdl="String" doc="A key used to mark an data store item as belonging to this store." name="_storeRef" />
            <variable attributes="private" citdl="Array" doc="An Array of all previously downloaded picture info." name="_cache" />
            <variable attributes="private" citdl="Object" doc="A HashMap used to record the signature of a request to prevent duplicate request being made." name="_prevRequests" />
            <variable attributes="private" citdl="Object" doc="A HashMap used to record the handlers registered for a single remote request. Multiple requests may be made for the same information before the first request has finished. Each element of this Object is an array of handlers to call back when the request finishes. This prevents multiple requests being made for the same information." name="_handlers" />
            <variable attributes="private" citdl="Object" doc="" name="_sortAttributes">
              <scope doc="" name="date-posted" />
              <scope doc="" name="date-taken" />
              <scope doc="" name="interestingness" />
            </variable>
            <scope attributes="private" doc="Fetch flickr items that match to a query" ilk="function" name="_fetchItems" signature="_fetchItems(request,fetchHandler,errorHandler)">
              <variable citdl="Object" doc="A request object" ilk="argument" name="request" />
              <variable doc="A function to call for fetched items" ilk="function" name="fetchHandler" />
              <variable doc="A function to call on error" ilk="function" name="errorHandler" />
            </scope>
            <scope doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValues" returns="String|www.flickr.com/photos/&amp;quot; + item.owner + &amp;quot;/&amp;quot; + item.id ]; // String" signature="getValues(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="Processes the raw data from Flickr and updates the internal cache." ilk="function" name="_processFlickrData" returns="Array" signature="_processFlickrData(data,request,cacheKey)">
              <variable citdl="Object" doc="Data returned from Flickr" ilk="argument" name="data" />
              <variable citdl="Object" doc="The original dojo.data.Request object passed in by the user.  If the data contains an &apos;item&apos; object, it has not come from the REST services, so process it using the FlickrStore." ilk="argument" name="request" />
              <variable citdl="String" ilk="argument" name="cacheKey" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_checkPrevRanges" signature="_checkPrevRanges(primaryKey,start,count)">
              <variable ilk="argument" name="primaryKey" />
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="count" />
            </scope>
            <variable doc="" name="label" />
            <variable attributes="private" doc="" name="_prevRequestRanges" />
            <variable attributes="private" doc="" name="_maxPhotosPerUser" />
          </scope>
          <scope doc="Initializer for the FlickrStore store." ilk="function" name="FlickrStore" signature="FlickrStore(args)">
            <variable citdl="Object" ilk="argument" name="args" />
            <scope attributes="private" doc="" name="_storeRef" />
            <variable doc="" name="label" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="attribute-name-string" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttributes()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItemLoaded()" ilk="function" name="isItemLoaded" signature="isItemLoaded(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" signature="containsValue(item,attribute,value)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValues" signature="getValues(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" signature="isItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="Fetch flickr items that match to a query" ilk="function" name="_fetchItems" signature="_fetchItems(request,fetchHandler,errorHandler)">
              <variable citdl="A" doc="request object" ilk="argument" name="request" />
              <variable citdl="A" doc="function to call for fetched items" ilk="argument" name="fetchHandler" />
              <variable citdl="A" doc="function to call on error" ilk="argument" name="errorHandler" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processFlickrData" signature="_processFlickrData(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="Utility function to un-escape XML special characters in an HTML string." ilk="function" name="_unescapeHtml" signature="_unescapeHtml(str)">
              <variable citdl="String" doc="String. The string to un-escape" ilk="argument" name="str" />
            </scope>
          </scope>
          <scope doc="A data store for retrieving RSS and Atom feeds from Google. The feeds can come from any source, which is specified in the &amp;amp;quot;url&amp;amp;quot; parameter of the query passed to the &amp;amp;quot;fetch&amp;amp;quot; function. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The feed entry title.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;link - The URL for the HTML version of the feed entry.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - The full content of the blog post, in HTML format&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;summary - A snippet of information about the feed entry, in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;published - The string date on which the entry was published. You can parse the date with new Date(store.getValue(item, &amp;amp;quot;published&amp;amp;quot;)&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;categories - An array of string tags for the entry&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: url - The URL of the feed to retrieve" ilk="function" name="GoogleFeedStore">
            <scope attributes="private" doc="" name="_type" />
            <scope attributes="private" doc="" name="_googleUrl" />
            <scope attributes="private" doc="" name="_attributes" />
            <scope attributes="private" doc="" name="_queryAttr" />
            <scope attributes="private" doc="" ilk="function" name="_processItem" signature="_processItem(item,request)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getItems" signature="_getItems(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_createContent" signature="_createContent(query,callback,request)">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="request" />
            </scope>
          </scope>
          <scope doc="Initializer for the GoogleSearchStore store." ilk="function" name="GoogleSearchStore" signature="GoogleSearchStore(args)">
            <variable citdl="Object" ilk="argument" name="args" />
            <variable attributes="private" citdl="Integer" doc="A unique identifier for this store." name="_id" />
            <scope attributes="private" citdl="Integer" doc="A counter for the number of requests made. This is used to define the callback function that GoogleSearchStore will use." name="_requestCount" />
            <scope attributes="private" citdl="String" doc="The URL to Googles search web service." name="_googleUrl" />
            <scope attributes="private" citdl="String" doc="The internal reference added to each item pointing at the store which owns it." name="_storeRef" />
            <scope attributes="private" citdl="Array" doc="The list of attributes that this store supports" name="_attributes" />
            <variable citdl="String" doc="The default attribute which acts as a label for each item." name="label" />
            <scope attributes="private" doc="" name="_type" />
            <scope attributes="private" doc="" name="_queryAttr" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="attribute-name-string" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttributes()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItemLoaded()" ilk="function" name="isItemLoaded" signature="isItemLoaded(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" signature="containsValue(item,attribute,value)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValues" signature="getValues(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" signature="isItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_format" returns="base implementation does not format any items" signature="_format(item,name)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="name" />
            </scope>
            <scope attributes="private" doc="Fetch Google search items that match to a query" ilk="function" name="fetch" returns="an error occurred, do not return anything else." signature="fetch(request)">
              <variable citdl="A" doc="request object fetchHandler: A function to call for fetched items errorHandler: A function to call on error" ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processItem" signature="_processItem(item,data)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getItems" signature="_getItems(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_createContent" signature="_createContent(query,callback,request)">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="request" />
            </scope>
            <variable attributes="private" doc="" name="_key" />
            <variable attributes="private" doc="" name="_lang" />
          </scope>
          <scope doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The page title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The page title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the page&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the item&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;visibleUrl - The URL with no protocol specified.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;cacheUrl - The URL to the copy of the document cached by Google&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for" ilk="function" name="GoogleWebSearchStore" />
          <scope doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The blog post title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The blog post title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the blog post&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;blogUrl - The URL for the blog&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;postUrl - The URL for the a single blog post&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;visibleUrl - The URL with no protocol specified. &amp;amp;lt;li&amp;amp;gt;cacheUrl - The URL to the copy of the document cached by Google &amp;amp;lt;li&amp;amp;gt;author - The author of the blog post&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;publishedDate - The published date, in RFC-822 format&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for" ilk="function" name="GoogleBlogSearchStore">
            <scope attributes="private" doc="" name="_type" />
            <scope attributes="private" doc="" name="_attributes" />
          </scope>
          <scope doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The blog post title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The blog post title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the blog post&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the item&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;lat - The latitude.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;lng - The longtitude.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;streetAddress - The street address&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;city - The city&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;region - The region&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;country - The country&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;phoneNumbers - Phone numbers associated with this address. Can be one or more.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;ddUrl - A URL that can be used to provide driving directions from the center of the search results to this search results&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;ddUrlToHere - A URL that can be used to provide driving directions from this search result to a user specified location&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;staticMapUrl - The published date, in RFC-822 format&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for" ilk="function" name="GoogleLocalSearchStore">
            <scope attributes="private" doc="" name="_type" />
            <scope attributes="private" doc="" name="_attributes" />
          </scope>
          <scope doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The blog post title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The blog post title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the blog post&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the item&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;published - The published date, in RFC-822 format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;publisher - The name of the publisher.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;duration - The approximate duration, in seconds, of the video.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbWidth - The width in pixels of the video.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbHeight - The height in pixels of the video&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbUrl - The URL to a thumbnail representation of the video.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;playUrl - If present, supplies the url of the flash version of the video that can be played inline on your page. To play this video simply create and &amp;amp;lt;embed&amp;amp;gt; element on your page using this value as the src attribute and using application/x-shockwave-flash as the type attribute. If you want the video to play right away, make sure to append &amp;amp;amp;autoPlay=true to the url..&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for" ilk="function" name="GoogleVideoSearchStore">
            <scope attributes="private" doc="" name="_type" />
            <scope attributes="private" doc="" name="_attributes" />
          </scope>
          <scope doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The news story title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The news story title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the news story&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the item&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;publisher - The name of the publisher&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;clusterUrl - A URL pointing to a page listing related storied.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;location - The location of the news story.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;publishedDate - The date of publication, in RFC-822 format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;relatedStories - An optional array of objects specifying related stories. Each object has the following subset of properties: &amp;amp;quot;title&amp;amp;quot;, &amp;amp;quot;titleNoFormatting&amp;amp;quot;, &amp;amp;quot;url&amp;amp;quot;, &amp;amp;quot;unescapedUrl&amp;amp;quot;, &amp;amp;quot;publisher&amp;amp;quot;, &amp;amp;quot;location&amp;amp;quot;, &amp;amp;quot;publishedDate&amp;amp;quot;. &amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for" ilk="function" name="GoogleNewsSearchStore">
            <scope attributes="private" doc="" name="_type" />
            <scope attributes="private" doc="" name="_attributes" />
          </scope>
          <scope doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The book title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The book title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;authors - An array of authors&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the item&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;bookId - An identifier for the book, usually an ISBN.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;pageCount - The number of pages in the book.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;publishedYear - The year of publication.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for" ilk="function" name="GoogleBookSearchStore">
            <scope attributes="private" doc="" name="_type" />
            <scope attributes="private" doc="" name="_attributes" />
          </scope>
          <scope doc="A data store for retrieving search results from Google. The following attributes are supported on each item: &amp;amp;lt;ul&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;title - The image title in HTML format.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;titleNoFormatting - The image title in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;url - The URL for the image&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;unescapedUrl - The URL for the image, with URL escaping. This is often more readable&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbUrl - The URL for the image thumbnail&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;visibleUrl - A shortened version of the URL associated with the result, stripped of a protocol and path&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;originalContextUrl - The URL of the page containing the image.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;width - The width of the image in pixels.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;height - The height of the image in pixels.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbWidth - The width of the image thumbnail in pixels.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;tbHeight - The height of the image thumbnail in pixels.&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;content - A snippet of information about the image, in HTML format&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;li&amp;amp;gt;contentNoFormatting - A snippet of information about the image, in plain text&amp;amp;lt;/li&amp;amp;gt; &amp;amp;lt;/ul&amp;amp;gt; The query accepts one parameter: text - The string to search for" ilk="function" name="GoogleImageSearchStore">
            <scope attributes="private" doc="" name="_type" />
            <scope attributes="private" doc="" name="_attributes" />
          </scope>
          <scope doc="Initializer for the HTML table store." ilk="function" name="HtmlStore" signature="HtmlStore(args)">
            <variable citdl="Object" doc="An anonymous object to initialize properties. It expects the following values:" ilk="argument" name="args" />
            <variable citdl="The" doc="url of the remote page to load" name="url" />
            <variable citdl="The" doc="id of the table element in the remote page" name="dataId" />
            <scope attributes="private" doc="" ilk="function" name="_indexItems" />
            <scope attributes="private" doc="Function to load the attribute names from the table header so that the attributes (cells in a row), can have a reasonable name. For list items, returns single implicit heading, [&amp;amp;quot;name&amp;amp;quot;]" ilk="function" name="_getHeadings" />
            <scope attributes="private" doc="Function to return all rows in the table as an array of items." ilk="function" name="_getAllItems" returns="array" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" returns="int" signature="_assertIsAttribute(attribute)">
              <variable citdl="String" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" returns="Object || int || Boolean" signature="getValue(item,attribute,defaultValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="value" ilk="argument" name="defaultValue" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValues()" ilk="function" name="getValues" returns="return Value for lists|Array" signature="getValues(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" returns="Array" signature="getAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttribute()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" returns="boolean." signature="containsValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Internal function for looking at the values contained by the item." ilk="function" name="_containsValue" returns="Boolean" signature="_containsValue(item,attribute,value,regexp)">
              <variable citdl="item" doc="The data item to examine for attribute values." ilk="argument" name="item" />
              <variable citdl="attribute-name-string" doc="The attribute to inspect." ilk="argument" name="attribute" />
              <variable citdl="anything" doc="The value to match." ilk="argument" name="value" />
              <variable citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of &apos;value&apos;" ilk="argument" name="regexp" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" returns="boolean" signature="isItem(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItemLoaded()" ilk="function" name="isItemLoaded" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="Fetch items (XML elements) that match to a query" ilk="function" name="_fetchItems" returns="object|null" signature="_fetchItems(request,fetchHandler,errorHandler)">
              <variable citdl="A" doc="request object" ilk="argument" name="request" />
              <variable citdl="A" doc="function to call for fetched items" ilk="argument" name="fetchHandler" />
              <variable citdl="A" doc="function to call on error" ilk="argument" name="errorHandler" />
            </scope>
            <scope attributes="private" doc="Internal function for processing the passed in request and locating the requested items." ilk="function" name="_finishFetchItems" signature="_finishFetchItems(request,fetchHandler,errorHandler)">
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="fetchHandler" />
              <variable ilk="argument" name="errorHandler" />
            </scope>
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.close() nothing to do here!" ilk="function" name="close" signature="close(request)">
              <variable citdl="dojo.data.api.Request || keywordArgs || null" ilk="argument" name="request" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentity()" ilk="function" name="getIdentity" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentityAttributes() Identity isn&apos;t taken from a public attribute." ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Identity.fetchItemByIdentity()" ilk="function" name="fetchItemByIdentity" returns="object|null" signature="fetchItemByIdentity(keywordArgs)">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <variable attributes="private" doc="" name="_rootNode" />
            <variable attributes="private" doc="" name="_headings" />
          </scope>
          <scope doc="" ilk="function" name="HtmlTableStore" signature="HtmlTableStore(args)">
            <variable citdl="Object" ilk="argument" name="args" />
            <variable doc="" name="url" />
            <variable doc="" name="tableId" />
            <scope attributes="private" doc="Function to load the attribute names from the table header so that the attributes (cells in a row), can have a reasonable name." ilk="function" name="_getHeadings" />
            <scope attributes="private" doc="Function to return all rows in the table as an array of items." ilk="function" name="_getAllItems" returns="array" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" returns="int" signature="_assertIsAttribute(attribute)">
              <variable citdl="String" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" returns="Object || int || Boolean" signature="getValue(item,attribute,defaultValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="value" ilk="argument" name="defaultValue" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValues()" ilk="function" name="getValues" returns="Array" signature="getValues(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" returns="Array" signature="getAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttribute()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" returns="boolean." signature="containsValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Internal function for looking at the values contained by the item." ilk="function" name="_containsValue" returns="Boolean" signature="_containsValue(item,attribute,value,regexp)">
              <variable citdl="item" doc="The data item to examine for attribute values." ilk="argument" name="item" />
              <variable citdl="attribute-name-string" doc="The attribute to inspect." ilk="argument" name="attribute" />
              <variable citdl="anything" doc="The value to match." ilk="argument" name="value" />
              <variable citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of &apos;value&apos;" ilk="argument" name="regexp" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" returns="boolean" signature="isItem(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItemLoaded()" ilk="function" name="isItemLoaded" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="Fetch items (XML elements) that match to a query" ilk="function" name="_fetchItems" returns="object|null" signature="_fetchItems(request,fetchHandler,errorHandler)">
              <variable citdl="A" doc="request object" ilk="argument" name="request" />
              <variable citdl="A" doc="function to call for fetched items" ilk="argument" name="fetchHandler" />
              <variable citdl="A" doc="function to call on error" ilk="argument" name="errorHandler" />
            </scope>
            <scope attributes="private" doc="Internal function for processing the passed in request and locating the requested items." ilk="function" name="_finishFetchItems" signature="_finishFetchItems(request,fetchHandler,errorHandler)">
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="fetchHandler" />
              <variable ilk="argument" name="errorHandler" />
            </scope>
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.close() nothing to do here!" ilk="function" name="close" signature="close(request)">
              <variable citdl="dojo.data.api.Request || keywordArgs || null" ilk="argument" name="request" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Identity.getIdentity()" ilk="function" name="getIdentity" returns="int" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentityAttributes() Identity isn&apos;t taken from a public attribute." ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Identity.fetchItemByIdentity()" ilk="function" name="fetchItemByIdentity" returns="object|null" signature="fetchItemByIdentity(keywordArgs)">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <variable attributes="private" doc="" name="_headings" />
            <variable attributes="private" doc="" name="_rootNode" />
          </scope>
          <scope doc="" ilk="function" name="ItemExplorer" signature="ItemExplorer(options)">
            <variable ilk="argument" name="options" />
            <scope doc="" name="useSelect" />
            <scope doc="" name="refSelectSearchAttr" />
            <scope doc="" ilk="function" name="postCreate" />
            <variable doc="" name="store" />
            <scope doc="" ilk="function" name="setStore" signature="setStore(store)">
              <variable ilk="argument" name="store" />
            </scope>
            <scope doc="" ilk="function" name="setItem" signature="setItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="refreshItem" />
            <scope attributes="private" doc="" ilk="function" name="_createEditDialog" returns="isFocused || this.store.getItemByIdentity(this._editDialog.attr(&amp;quot;value&amp;quot;)._reference);" />
            <scope attributes="private" doc="" ilk="function" name="_enableFields" returns="isFocused || this.store.getItemByIdentity(this._editDialog.attr(&amp;quot;value&amp;quot;)._reference);" signature="_enableFields(selection)">
              <variable ilk="argument" name="selection" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_updateItem" returns="isFocused || this.store.getItemByIdentity(this._editDialog.attr(&amp;quot;value&amp;quot;)._reference);" signature="_updateItem(vals)">
              <variable ilk="argument" name="vals" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_editProperty" returns="isFocused || this.store.getItemByIdentity(this._editDialog.attr(&amp;quot;value&amp;quot;)._reference);" />
            <scope attributes="private" doc="" ilk="function" name="_destroyProperty" />
            <scope attributes="private" doc="" ilk="function" name="_addProperty" returns="isFocused || this.store.getItemByIdentity(this._editDialog.attr(&amp;quot;value&amp;quot;)._reference);" />
            <variable doc="" name="lastFocused" />
            <variable attributes="private" doc="" name="_modelNodeIdMap" />
            <variable attributes="private" doc="" name="_modelNodePropMap" />
            <variable doc="" name="rootModelNode">
              <variable doc="" name="value" />
            </variable>
            <variable attributes="private" doc="" name="_editDialog" />
            <variable doc="" name="model" />
          </scope>
          <scope doc="" ilk="function" name="JsonQueryRestStore">
            <scope doc="" ilk="function" name="matchesQuery" signature="matchesQuery(item,request)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="request" />
            </scope>
          </scope>
          <scope doc="JsonRestStore is a Dojo Data store interface to JSON HTTP/REST web storage services that support read and write through GET, PUT, POST, and DELETE." ilk="function" name="JsonRestStore" signature="JsonRestStore(options)">
            <variable citdl="Keyword" doc="arguments  The *schema* parameter This is a schema object for this store. This should be JSON Schema format.  The *service* parameter This is the service object that is used to retrieve lazy data and save results The function should be directly callable with a single parameter of an object id to be loaded The function should also have the following methods: put(id,value) - puts the value at the given id post(id,value) - posts (appends) the value at the given id delete(id) - deletes the value corresponding to the given id Note that it is critical that the service parses responses as JSON. If you are using dojox.rpc.Service, the easiest way to make sure this happens is to make the responses have a content type of application/json. If you are creating your own service, make sure you use handleAs: &amp;amp;quot;json&amp;amp;quot; with your XHR requests.  The *target* parameter This is the target URL for this Service store. This may be used in place of a service parameter to connect directly to RESTful URL without using a dojox.rpc.Service object.  The *idAttribute* parameter Defaults to &apos;id&apos;. The name of the attribute that holds an objects id. This can be a preexisting id provided by the server. If an ID isn&apos;t already provided when an object is fetched or added to the store, the autoIdentity system will generate an id for it and add it to the index.  The *syncMode* parameter Setting this to true will set the store to using synchronous calls by default. Sync calls return their data immediately from the calling function, so callbacks are unnecessary" ilk="argument" name="options" />
            <scope doc="" name="referenceIntegrity" />
            <scope doc="" name="target" />
            <scope doc="adds a new item to the store at the specified point. Takes two parameters, data, and options." ilk="function" name="newItem" signature="newItem(data,parentInfo)">
              <variable citdl="object" doc="*/ The data to be added in as an item." ilk="argument" name="data" />
              <variable ilk="argument" name="parentInfo" />
            </scope>
            <scope doc="deletes item and any references to that item from the store." ilk="function" name="deleteItem" signature="deleteItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="adds an item to the list of dirty items. This item contains a reference to the item itself as well as a cloned and trimmed version of old item for use with revert." ilk="function" name="changing" signature="changing(item,_deleting)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="_deleting" />
            </scope>
            <scope doc="sets &apos;attribute&apos; on &apos;item&apos; to &apos;value&apos;" ilk="function" name="setValue" signature="setValue(item,attribute,value)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="sets &apos;attribute&apos; on &apos;item&apos; to &apos;value&apos; value must be an array." ilk="function" name="setValues" signature="setValues(item,attribute,values)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="values" />
            </scope>
            <scope doc="unsets &apos;attribute&apos; on &apos;item&apos;" ilk="function" name="unsetAttribute" signature="unsetAttribute(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="Saves the dirty data using REST Ajax methods. See dojo.data.api.Write for API.  kwArgs.global: This will cause the save to commit the dirty data for all JsonRestStores as a single transaction." ilk="function" name="save" signature="save(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope doc="" ilk="function" name="revert" signature="revert(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope doc="" ilk="function" name="isDirty" signature="isDirty(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="Checks to see if a passed &apos;item&apos; really belongs to this JsonRestStore." ilk="function" name="isItem" signature="isItem(item,anyStore)">
              <variable citdl="object" doc="*/ The value to test for being an item" ilk="argument" name="item" />
              <variable citdl="boolean*" doc="If true, this will return true if the value is an item for any JsonRestStore, not just this instance" ilk="argument" name="anyStore" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_doQuery" signature="_doQuery(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processResults" signature="_processResults(results,deferred)">
              <variable ilk="argument" name="results" />
              <variable ilk="argument" name="deferred" />
            </scope>
            <scope doc="Gets the constructor for objects from this store" ilk="function" name="getConstructor" />
            <scope attributes="private" doc="" ilk="function" name="getIdentity" returns="String" signature="getIdentity(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope doc="" ilk="function" name="onSet" />
            <scope doc="" ilk="function" name="onNew" />
            <scope doc="" ilk="function" name="onDelete" />
            <scope doc="return the store feature set" ilk="function" name="getFeatures" />
            <variable doc="" name="serverVersion" />
            <variable doc="" name="service">
              <variable attributes="private" doc="" name="_store" />
            </variable>
            <variable doc="" name="idAttribute" />
            <variable doc="" name="schema">
              <variable attributes="private" doc="" name="_idAttr" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_constructor" signature="_constructor(data)">
              <variable ilk="argument" name="data" />
            </variable>
            <variable attributes="private" doc="" name="_index" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_getStoreForItem" signature="_getStoreForItem(item)">
            <variable ilk="argument" name="item" />
          </scope>
          <scope doc="constructor" ilk="function" name="KeyValueStore" signature="KeyValueStore(keywordParameters)">
            <variable citdl="Object" doc="dataVar: jsonObject}" ilk="argument" name="keywordParameters" />
            <variable doc="" name="url" />
            <scope doc="" name="data" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="String" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="value" ilk="argument" name="defaultValue" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValues() Key/Value syntax does not support multi-valued attributes, so this is just a wrapper function for getValue()." ilk="function" name="getValues" returns="Array" signature="getValues(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttribute()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" returns="boolean." signature="containsValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Internal function for looking at the values contained by the item." ilk="function" name="_containsValue" returns="Boolean" signature="_containsValue(item,attribute,value,regexp)">
              <variable citdl="item" doc="The data item to examine for attribute values." ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="The attribute to inspect." ilk="argument" name="attribute" />
              <variable citdl="anything" doc="The value to match." ilk="argument" name="value" />
              <variable citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of &apos;value&apos;" ilk="argument" name="regexp" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" returns="Boolean" signature="isItem(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.isItemLoaded() The KeyValueStore always loads all items, so if it&apos;s an item, then it&apos;s loaded." ilk="function" name="isItemLoaded" returns="Boolean" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable citdl="object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" returns="Object" />
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable citdl="dojo.data.api.Request || keywordArgs || null" ilk="argument" name="request" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.util.simpleFetch.fetch()" ilk="function" name="_fetchItems" signature="_fetchItems(keywordArgs,findCallback,errorCallback)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
              <variable ilk="function" name="findCallback" />
              <variable ilk="function" name="errorCallback" />
            </scope>
            <scope attributes="private" doc="Internal function to execute delayed request in the store. Execute any deferred fetches now." ilk="function" name="_handleQueuedFetches" />
            <scope attributes="private" doc="" ilk="function" name="_processData" signature="_processData(data)">
              <variable citdl="Array" ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_createItem" returns="Object" signature="_createItem(something)">
              <variable citdl="Object" ilk="argument" name="something" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Identity.getIdentity()" ilk="function" name="getIdentity" returns="String|null" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentifierAttributes()" ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.fetchItemByIdentity()" ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(keywordArgs)">
              <variable citdl="object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_finishFetchItemByIdentity" signature="_finishFetchItemByIdentity(items,request)">
              <variable citdl="Array" ilk="argument" name="items" />
              <variable citdl="object" ilk="argument" name="request" />
            </scope>
            <variable attributes="private" doc="" name="_loadInProgress" />
            <variable attributes="private" doc="" name="_keyValueString" />
            <variable attributes="private" doc="" name="_keyValueVar" />
            <variable attributes="private" doc="" name="_queuedFetches" />
            <variable attributes="private" doc="" name="_arrayOfAllItems" />
            <variable attributes="private" doc="" name="_loadFinished" />
            <variable attributes="private" doc="" name="_keyAttribute" />
            <variable attributes="private" doc="" name="_valueAttribute" />
            <variable attributes="private" doc="" name="_storeProp" />
            <variable attributes="private" doc="" name="_features" />
          </scope>
          <scope doc="Initializer for the OpenSearchStore store." ilk="function" name="OpenSearchStore" signature="OpenSearchStore(args)">
            <variable citdl="Object" ilk="argument" name="args" />
            <variable doc="" name="url" />
            <variable doc="" name="itemPath" />
            <scope attributes="private" doc="" name="_storeRef" />
            <variable doc="" name="urlElement" />
            <scope doc="" name="iframeElement" />
            <scope doc="" name="ATOM_CONTENT_TYPE" />
            <scope doc="" name="ATOM_CONTENT_TYPE_STRING" />
            <scope doc="" name="RSS_CONTENT_TYPE" />
            <scope doc="" name="RSS_CONTENT_TYPE_STRING" />
            <scope doc="" name="XML_CONTENT_TYPE" />
            <scope doc="" name="XML_CONTENT_TYPE_STRING" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="attribute-name-string" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttributes()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItemLoaded()" ilk="function" name="isItemLoaded" signature="isItemLoaded(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" signature="containsValue(item,attribute,value)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValues" signature="getValues(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" signature="isItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope doc="" ilk="function" name="process" signature="process(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="" ilk="function" name="processItem" signature="processItem(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_createSearchUrl" signature="_createSearchUrl(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="Fetch OpenSearch items that match to a query" ilk="function" name="_fetchItems" signature="_fetchItems(request,fetchHandler,errorHandler)">
              <variable citdl="A" doc="request object" ilk="argument" name="request" />
              <variable citdl="A" doc="function to call for fetched items" ilk="argument" name="fetchHandler" />
              <variable citdl="A" doc="function to call on error" ilk="argument" name="errorHandler" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processOSDxml" signature="_processOSDxml(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processItemxml" signature="_processItemxml(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processOSDatom" signature="_processOSDatom(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processItematom" signature="_processItematom(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processOSDrss" signature="_processOSDrss(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processItemrss" signature="_processItemrss(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processOSDfeed" signature="_processOSDfeed(data,type)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="type" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processItemfeed" signature="_processItemfeed(item,attribute,type)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="type" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getNodeXml" signature="_getNodeXml(node,skipFirst)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="skipFirst" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processOsdd" signature="_processOsdd(doc)">
              <variable ilk="argument" name="doc" />
            </scope>
            <variable doc="" name="contentType" />
            <variable doc="" name="label" />
          </scope>
          <scope doc="constructor" ilk="function" name="OpmlStore" signature="OpmlStore(keywordParameters)">
            <variable citdl="Object" doc="url: String, label: String} Where label is optional and configures what should be used as the return from getLabel()" ilk="argument" name="keywordParameters" />
            <variable doc="" name="label" />
            <variable doc="" name="url" />
            <scope attributes="private" doc="" ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="item || String" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_removeChildNodesThatAreNotElementNodes" signature="_removeChildNodesThatAreNotElementNodes(node,recursive)">
              <variable citdl="node" ilk="argument" name="node" />
              <variable citdl="boolean" ilk="argument" name="recursive" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processRawXmlTree" signature="_processRawXmlTree(rawXmlTree)">
              <variable citdl="xmlDoc" ilk="argument" name="rawXmlTree" />
            </scope>
            <scope attributes="private" doc="Internal function to recurse over all child nodes from the store and add them As non-toplevel items" ilk="function" name="_checkChildNodes" signature="_checkChildNodes(node)">
              <variable citdl="Node" doc="The child node to walk." ilk="argument" name="node" />
            </scope>
            <scope attributes="private" doc="Internal function to determine which list of items to search over." ilk="function" name="_getItemsArray" signature="_getItemsArray(queryOptions)">
              <variable citdl="object" doc="The query options parameter, if any." ilk="argument" name="queryOptions" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" returns="Object" signature="getValue(item,attribute,defaultValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="value" ilk="argument" name="defaultValue" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValues()" ilk="function" name="getValues" returns="Array" signature="getValues(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" returns="Array" signature="getAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.hasAttribute()" ilk="function" name="hasAttribute" returns="Boolean" signature="hasAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" returns="boolean." signature="containsValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Internal function for looking at the values contained by the item." ilk="function" name="_containsValue" returns="Boolean" signature="_containsValue(item,attribute,value,regexp)">
              <variable citdl="item" doc="The data item to examine for attribute values." ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="The attribute to inspect." ilk="argument" name="attribute" />
              <variable citdl="anything" doc="The value to match." ilk="argument" name="value" />
              <variable citdl="RegExp" doc="Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of &apos;value&apos;" ilk="argument" name="regexp" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" signature="isItem(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.isItemLoaded() OpmlStore loads every item, so if it&apos;s an item, then it&apos;s loaded." ilk="function" name="isItemLoaded" returns="Boolean" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" returns="String|undefined" signature="getLabel(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" returns="array" signature="getLabelAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.util.simpleFetch.fetch()" ilk="function" name="_fetchItems" signature="_fetchItems(keywordArgs,findCallback,errorCallback)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
              <variable ilk="function" name="findCallback" />
              <variable ilk="function" name="errorCallback" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" returns="Object" />
            <scope attributes="private" doc="See dojo.data.api.Identity.getIdentity()" ilk="function" name="getIdentity" returns="null" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="fetchItemByIdentity" returns="Object|Array|Boolean|boolean.|String|undefined|array|null" signature="fetchItemByIdentity(keywordArgs)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentifierAttributes()  Identity isn&apos;t a public attribute in the item, it&apos;s the node count. So, return null." ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="Internal function to execute delayed request in the store. Execute any deferred fetches now." ilk="function" name="_handleQueuedFetches" />
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable citdl="dojo.data.api.Request || keywordArgs || null" ilk="argument" name="request" />
            </scope>
            <variable attributes="private" doc="" name="_loadFinished" />
            <variable attributes="private" doc="" name="_xmlData" />
            <variable attributes="private" doc="" name="_metadataNodes" />
            <variable attributes="private" doc="" name="_loadInProgress" />
            <variable attributes="private" doc="" name="_opmlData" />
            <variable attributes="private" doc="" name="_queuedFetches" />
            <variable attributes="private" doc="" name="_arrayOfTopLevelItems" />
            <variable attributes="private" doc="" name="_arrayOfAllItems" />
            <variable attributes="private" doc="" name="_identityMap" />
            <variable attributes="private" doc="" name="_identCount" />
            <variable attributes="private" doc="" name="_idProp" />
          </scope>
          <scope doc="" ilk="function" name="PersevereStore">
            <scope doc="" name="useFullIdInQueries" />
            <scope doc="" name="jsonQueryPagination" />
            <scope doc="Creates Dojo data stores for all the table/classes on a Persevere server" ilk="function" name="getStores" signature="getStores(path,sync)">
              <variable citdl="String" doc="URL of the Persevere server&apos;s root, this normally just &amp;amp;quot;/&amp;amp;quot; which is the default value if the target is not provided" ilk="argument" name="path" />
              <variable citdl="Boolean" doc="Indicates that the operation should happen synchronously. return: A map/object of datastores will be returned if it is performed asynchronously, otherwise it will return a Deferred object that will provide the map/object. The name of each property is a the name of a store, and the value is the actual data store object." ilk="argument" name="sync" />
            </scope>
            <scope doc="Invokes the XHR proxy plugin. Call this if you will be using x-site data." ilk="function" name="addProxy" />
          </scope>
          <scope doc="Initializer for the PicasaStore store." ilk="function" name="PicasaStore" signature="PicasaStore(args)">
            <variable citdl="Object" ilk="argument" name="args" />
            <scope attributes="private" doc="" name="_picasaUrl" />
            <scope attributes="private" doc="" name="_storeRef" />
            <variable doc="" name="label" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="attribute-name-string" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttributes()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItemLoaded()" ilk="function" name="isItemLoaded" signature="isItemLoaded(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" signature="containsValue(item,attribute,value)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValues" signature="getValues(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" signature="isItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="Fetch picasa items that match to a query" ilk="function" name="_fetchItems" signature="_fetchItems(request,fetchHandler,errorHandler)">
              <variable citdl="A" doc="request object" ilk="argument" name="request" />
              <variable citdl="A" doc="function to call for fetched items" ilk="argument" name="fetchHandler" />
              <variable citdl="A" doc="function to call on error" ilk="argument" name="errorHandler" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processPicasaData" signature="_processPicasaData(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="Utility function to un-escape XML special characters in an HTML string." ilk="function" name="_unescapeHtml" signature="_unescapeHtml(str)">
              <variable citdl="String." doc="The string to un-escape" ilk="argument" name="str" />
              <variable name="return_summary" />
            </scope>
          </scope>
          <scope doc="This class provides a store that is mainly intended to be used for loading data dynamically from the server, used i.e. for retreiving chunks of data from huge data stores on the server (by server-side filtering!). Upon calling the fetch() method of this store the data are requested from the server if they are not yet loaded for paging (or cached).  For example used for a combobox which works on lots of data. It can be used to retreive the data partially upon entering the letters &amp;amp;quot;ac&amp;amp;quot; it returns only items like &amp;amp;quot;action&amp;amp;quot;, &amp;amp;quot;acting&amp;amp;quot;, etc.  note: The field name &amp;amp;quot;id&amp;amp;quot; in a query is reserved for looking up data by id. This is necessary as before the first fetch, the store has no way of knowing which field the server will declare as identifier." ilk="function" name="QueryReadStore" signature="QueryReadStore(params)">
            <variable citdl="Object" ilk="argument" name="params" />
            <scope doc="" name="url" />
            <scope doc="" name="requestMethod" />
            <scope attributes="private" doc="" name="_className" />
            <variable attributes="private" doc="" name="_items" />
            <variable attributes="private" doc="" name="_labelAttr" />
            <scope doc="" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="value" ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="" ilk="function" name="getValues" signature="getValues(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope doc="" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttribute()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope doc="" ilk="function" name="containsValue" signature="containsValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="isItem" signature="isItem(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="" ilk="function" name="isItemLoaded" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
            </scope>
            <scope doc="" ilk="function" name="loadItem" signature="loadItem(args)">
              <variable citdl="object" ilk="argument" name="args" />
            </scope>
            <scope doc="" name="fetch" />
            <scope doc="" ilk="function" name="getFeatures" />
            <scope attributes="private" doc="" ilk="function" name="close" returns="Object" signature="close(request)">
              <variable citdl="dojo.data.api.Request || keywordArgs || null" ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" returns="String|undefined" signature="getLabel(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" returns="array|null" signature="getLabelAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_xhrFetchHandler" signature="_xhrFetchHandler(data,request,fetchHandler,errorHandler)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="fetchHandler" />
              <variable ilk="argument" name="errorHandler" />
            </scope>
            <scope attributes="private" doc="The request contains the data as defined in the Read-API. Additionally there is following keyword &amp;amp;quot;serverQuery&amp;amp;quot;.  The *serverQuery* parameter, optional. This parameter contains the data that will be sent to the server. If this parameter is not given the parameter &amp;amp;quot;query&amp;amp;quot;&apos;s data are sent to the server. This is done for some reasons: - to specify explicitly which data are sent to the server, they might also be a mix of what is contained in &amp;amp;quot;query&amp;amp;quot;, &amp;amp;quot;queryOptions&amp;amp;quot; and the paging parameters &amp;amp;quot;start&amp;amp;quot; and &amp;amp;quot;count&amp;amp;quot; or may be even completely different things. - don&apos;t modify the request.query data, so the interface using this store can rely on unmodified data, as the combobox dijit currently does it, it compares if the query has changed - request.query is required by the Read-API  I.e. the following examples might be sent via GET: fetch({query:{name:&amp;amp;quot;abc&amp;amp;quot;}, queryOptions:{ignoreCase:true}}) the URL will become: /url.php?name=abc  fetch({serverQuery:{q:&amp;amp;quot;abc&amp;amp;quot;, c:true}, query:{name:&amp;amp;quot;abc&amp;amp;quot;}, queryOptions:{ignoreCase:true}}) the URL will become: /url.php?q=abc&amp;amp;amp;c=true // The serverQuery-parameter has overruled the query-parameter // but the query parameter stays untouched, but is not sent to the server! // The serverQuery contains more data than the query, so they might differ!" ilk="function" name="_fetchItems" signature="_fetchItems(request,fetchHandler,errorHandler)">
              <variable ilk="argument" name="request" />
              <variable ilk="argument" name="fetchHandler" />
              <variable ilk="argument" name="errorHandler" />
            </scope>
            <scope attributes="private" doc="If the data from servers needs to be processed before it can be processed by this store, then this function should be re-implemented in subclass. This default implementation just return the data unchanged." ilk="function" name="_filterResponse" signature="_filterResponse(data)">
              <variable citdl="The" doc="data received from server" ilk="argument" name="data" />
            </scope>
            <scope attributes="private" doc="It throws an error if item is not valid, so you can call it in every method that needs to throw an error when item is invalid." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="attribute-name-string" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Identity.fetchItemByIdentity()  See if we have already loaded the item with that id In case there hasn&apos;t been a fetch yet, _itemsByIdentity is null and thus a fetch will be triggered below." ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(keywordArgs)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentity()" ilk="function" name="getIdentity" signature="getIdentity(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.getIdentityAttributes()" ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <variable attributes="private" doc="" name="_itemsByIdentity" />
            <variable attributes="private" doc="" name="_identifier" />
            <variable attributes="private" doc="" name="_numRows" />
            <variable doc="" name="lastRequestHash" />
            <variable attributes="private" doc="" name="_lastServerQuery" />
          </scope>
          <scope doc="RailsStore is a data store for interacting with RESTful Rails controllers" ilk="function" name="RailsStore">
            <scope doc="" ilk="function" name="preamble" signature="preamble(options)">
              <variable ilk="argument" name="options" />
            </scope>
            <scope doc="" ilk="function" name="fetch" signature="fetch(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processResults" signature="_processResults(results,deferred)">
              <variable ilk="argument" name="results" />
              <variable ilk="argument" name="deferred" />
            </scope>
            <variable doc="" name="rootAttribute" />
          </scope>
          <scope doc="" ilk="function" name="S3Store">
            <scope attributes="private" doc="" ilk="function" name="_processResults" signature="_processResults(results)">
              <variable ilk="argument" name="results" />
            </scope>
          </scope>
          <scope doc="ServiceStore constructor, instantiate a new ServiceStore A ServiceStore can be configured from a JSON Schema. Queries are just passed through to the underlying services" ilk="function" name="ServiceStore" signature="ServiceStore(options)">
            <variable citdl="Keyword" doc="arguments The *schema* parameter This is a schema object for this store. This should be JSON Schema format.  The *service* parameter This is the service object that is used to retrieve lazy data and save results The function should be directly callable with a single parameter of an object id to be loaded  The *idAttribute* parameter Defaults to &apos;id&apos;. The name of the attribute that holds an objects id. This can be a preexisting id provided by the server. If an ID isn&apos;t already provided when an object is fetched or added to the store, the autoIdentity system will generate an id for it and add it to the index.  The *estimateCountFactor* parameter This parameter is used by the ServiceStore to estimate the total count. When paging is indicated in a fetch and the response includes the full number of items requested by the fetch&apos;s count parameter, then the total count will be estimated to be estimateCountFactor multiplied by the provided count. If this is 1, then it is assumed that the server does not support paging, and the response is the full set of items, where the total count is equal to the numer of items returned. If the server does support paging, an estimateCountFactor of 2 is a good value for estimating the total count It is also possible to override _processResults if the server can provide an exact total count.  The *syncMode* parameter Setting this to true will set the store to using synchronous calls by default. Sync calls return their data immediately from the calling function, so callbacks are unnecessary. This will only work with a synchronous capable service." ilk="argument" name="options" />
            <scope doc="" name="schema" />
            <variable doc="" name="idAttribute" />
            <scope doc="" name="syncMode" />
            <scope doc="" name="estimateCountFactor" />
            <scope doc="" ilk="function" name="getSchema" />
            <scope doc="" name="loadLazyValues" />
            <scope attributes="private" doc="Gets the value of an item&apos;s &apos;property&apos;" ilk="function" name="getValue" returns="return the plain value since it was found;|we do, so we can return it|not in item -&amp;gt; return default value" signature="getValue(item,property,defaultValue)">
              <variable citdl="Object" doc="The item to get the value from" ilk="argument" name="item" />
              <variable citdl="String" doc="property to look up value for" ilk="argument" name="property" />
              <variable citdl="value" doc="the default value" ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="Gets the value of an item&apos;s &apos;property&apos; and returns it. If this value is an array it is just returned, if not, the value is added to an array and that is returned." ilk="function" name="getValues" signature="getValues(item,property)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
              <variable citdl="string" doc="*/ property to look up value for" ilk="argument" name="property" />
            </scope>
            <scope doc="Gets the available attributes of an item&apos;s &apos;property&apos; and returns it as an array." ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
            </scope>
            <scope doc="Checks to see if item has attribute" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
              <variable citdl="string" doc="*/" ilk="argument" name="attribute" />
            </scope>
            <scope doc="Checks to see if &apos;item&apos; has &apos;value&apos; at &apos;attribute&apos;" ilk="function" name="containsValue" signature="containsValue(item,attribute,value)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
              <variable citdl="string" doc="*/" ilk="argument" name="attribute" />
              <variable citdl="anything" doc="*/" ilk="argument" name="value" />
            </scope>
            <scope doc="Checks to see if the argument is an item" ilk="function" name="isItem" signature="isItem(item)">
              <variable citdl="object" doc="*/ attribute: /* string */  we have no way of determining if it belongs, we just have object returned from service queries" ilk="argument" name="item" />
            </scope>
            <scope doc="Checks to see if the item is loaded." ilk="function" name="isItemLoaded" signature="isItemLoaded(item)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="Loads an item and calls the callback handler. Note, that this will call the callback handler even if the item is loaded. Consequently, you can use loadItem to ensure that an item is loaded is situations when the item may or may not be loaded yet. If you access a value directly through property access, you can use this to load a lazy value as well (doesn&apos;t need to be an item)." ilk="function" name="loadItem" returns="in synchronous mode this can allow loadItem to return the value" signature="loadItem(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="" name="_currentId" />
            <scope attributes="private" doc="" ilk="function" name="_processResults" returns="return the plain value since it was found;|we do, so we can return it|not in item -&amp;gt; return default value|in synchronous mode this can allow loadItem to return the value" signature="_processResults(results,deferred)">
              <variable ilk="argument" name="results" />
              <variable ilk="argument" name="deferred" />
            </scope>
            <scope doc="" ilk="function" name="close" signature="close(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope doc="See dojo.data.api.Read.fetch  The *queryOptions.cache* parameter If true, indicates that the query result should be cached for future use. This is only available if dojox.data.ClientFilter has been loaded before the ServiceStore  The *syncMode* parameter Indicates that the call should be fetch synchronously if possible (this is not always possible)  The *clientFetch* parameter This is a fetch keyword argument for explicitly doing client side filtering, querying, and paging" ilk="function" name="fetch" signature="fetch(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_doQuery" signature="_doQuery(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope doc="return the store feature set" ilk="function" name="getFeatures" />
            <scope attributes="private" doc="" ilk="function" name="getLabel" returns="return the plain value since it was found;|we do, so we can return it|not in item -&amp;gt; return default value|in synchronous mode this can allow loadItem to return the value" signature="getLabel(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="returns an array of attributes that are used to create the label of an item" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="getIdentity" signature="getIdentity(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="returns the attributes which are used to make up the identity of an item. Basically returns this.idAttribute" ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="fetch an item by its identity, by looking in our index of what we have loaded" ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <variable doc="" name="byId" />
            <variable attributes="private" doc="" name="_index" />
            <variable doc="" name="labelAttribute" />
          </scope>
          <scope doc="Initialize a SnapLogicStore object." ilk="function" name="SnapLogicStore" signature="SnapLogicStore(args)">
            <variable citdl="Object" doc="An object that contains properties for initializing the new data store object. The following properties are understood:" ilk="argument" name="args" />
            <variable citdl="Object" doc="" name="Parts">
              <scope doc="" name="DATA" />
              <scope doc="" name="COUNT" />
            </variable>
            <variable citdl="A" doc="URL to the SnapLogic pipeline&apos;s output routed through PipeToHttp. Typically, this will look like &amp;amp;quot;http://&amp;amp;lt;server-host&amp;amp;gt;:&amp;amp;lt;port&amp;amp;gt;/pipe/&amp;amp;lt;pipeline-url&amp;amp;gt;/&amp;amp;lt;pipeline-output-view&amp;amp;gt;&amp;amp;quot;. parameters: An object whose properties define parameters to the pipeline. The values of these properties will be sent to the pipeline as parameters when it run." name="url" />
            <scope attributes="private" doc="This function tests whether the item passed in is indeed an item in the store." ilk="function" name="_assertIsItem" signature="_assertIsItem(item)">
              <variable citdl="item" doc="The item to test for being contained by the store." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="This function tests whether the item passed in is indeed a valid &apos;attribute&apos; like type for the store." ilk="function" name="_assertIsAttribute" signature="_assertIsAttribute(attribute)">
              <variable citdl="attribute-name-string" doc="The attribute to test for being contained by the store." ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
            <scope doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValue" signature="getValue(item,attribute,defaultValue)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="defaultValue" />
            </scope>
            <scope doc="See dojo.data.api.Read.getAttributes()" ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.hasAttributes()" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.isItemLoaded()" ilk="function" name="isItemLoaded" returns="Boolean" signature="isItemLoaded(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.loadItem()" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable ilk="argument" name="keywordArgs" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.containsValue()" ilk="function" name="containsValue" returns="Boolean" signature="containsValue(item,attribute,value)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getValue()" ilk="function" name="getValues" returns="Array" signature="getValues(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="See dojo.data.api.Read.isItem()" ilk="function" name="isItem" signature="isItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="Process data retrieved via fetch and send it back to requester. response: The data returend from the I/O transport. In the normal case, it will be an array of result rows from the pipeline. In the special case for record count optimization, response will be an array with a single element containing the total pipeline result row count. See fetch() for details on this optimization." ilk="function" name="_fetchHandler" signature="_fetchHandler(request)">
              <variable citdl="Object" ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="Handle the individual replies for both data and length requests." ilk="function" name="_partHandler" signature="_partHandler(request,part,response)">
              <variable citdl="Object" doc="The request/handle object used with the original fetch() call." ilk="argument" name="request" />
              <variable citdl="String" doc="A value indicating which request this handler call is for (this.Parts)." ilk="argument" name="part" />
              <variable citdl="Object" doc="Response received from the underlying IO transport." ilk="argument" name="response" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.close()" ilk="function" name="fetch" returns="Object" signature="fetch(request)">
              <variable citdl="Object" doc="See dojo.data.api.Read.close() for generic interface.  In addition to the standard Read API fetch support, this store supports an optimization for for retrieving the total count of records in the Pipeline without retrieving the data. To use this optimization, simply provide an onBegin handler without an onItem or onComplete handler." ilk="argument" name="request" />
            </scope>
            <variable attributes="private" doc="" name="_parameters" />
          </scope>
          <scope doc="" ilk="function" name="StoreExplorer" signature="StoreExplorer(options)">
            <variable ilk="argument" name="options" />
            <variable doc="" name="store" />
            <scope doc="" name="stringQueries" />
            <scope doc="" ilk="function" name="postCreate">
              <variable doc="" ilk="function" name="setItemName" signature="setItemName(name)">
                <variable ilk="argument" name="name" />
              </variable>
            </scope>
            <scope doc="" ilk="function" name="setQuery" signature="setQuery(query)">
              <variable ilk="argument" name="query" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_formatCell" signature="_formatCell(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="setStore" signature="setStore(store)">
              <variable ilk="argument" name="store" />
            </scope>
            <scope doc="" ilk="function" name="createNew" />
            <variable doc="" name="setItemName" />
            <variable doc="" name="grid" />
            <variable doc="" name="tree" />
            <variable doc="" name="gridOnFetchComplete" />
            <variable doc="" name="queryOptions" />
          </scope>
          <scope doc="Initializer for the Wikipedia data store interface." ilk="function" name="WikipediaStore" signature="WikipediaStore(options)">
            <variable ilk="argument" name="options" />
            <scope doc="Fetch a page or some partially-loaded search results from Wikipedia. Note that there isn&apos;t a way to sort data coming in from the API, so we just ignore the *sort* parameter." ilk="function" name="fetch" signature="fetch(request)">
              <variable citdl="object" ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_processResults" signature="_processResults(results,def)">
              <variable ilk="argument" name="results" />
              <variable ilk="argument" name="def" />
            </scope>
            <variable doc="" name="service" />
            <variable doc="" name="idAttribute" />
          </scope>
          <scope doc="Constructor for the XML store." ilk="function" name="XmlStore" signature="XmlStore(args)">
            <variable citdl="object" doc="An anonymous object to initialize properties. It expects the following values:" ilk="argument" name="args" />
            <variable citdl="The" doc="url to a service or an XML document that represents the store" name="url" />
            <variable citdl="A" doc="tag name for root items" name="rootItem" />
            <variable citdl="An" doc="attribute name for a key or an identity (unique identifier) Required for serverside fetchByIdentity, etc. Not required for client side fetchItemBIdentity, as it will use an XPath-like structure if keyAttribute was not specified. Recommended to always set this, though, for consistent identity behavior. attributeMap: An anonymous object contains properties for attribute mapping, {&amp;amp;quot;tag_name.item_attribute_name&amp;amp;quot;: &amp;amp;quot;@xml_attribute_name&amp;amp;quot;, ...}" name="keyAttribute" />
            <variable doc="" name="label" />
            <variable citdl="A" doc="boolean indicate to add a query string to the service URL. Default is false." name="sendQuery" />
            <scope doc="" name="attributeMap" />
            <scope attributes="private" doc="Return an attribute value" ilk="function" name="getValue" returns="object|string" signature="getValue(item,attribute,defaultValue)">
              <variable citdl="item" doc="An XML element that holds the attribute" ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="A tag name of a child element, An XML attribute name or one of special names" ilk="argument" name="attribute" />
              <variable citdl="value" doc="A default value" ilk="argument" name="defaultValue" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Return an array of attribute values" ilk="function" name="getValues" returns="array" signature="getValues(item,attribute)">
              <variable citdl="item" doc="An XML element that holds the attribute" ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="A tag name of child elements, An XML attribute name or one of special names" ilk="argument" name="attribute" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Return an array of attribute names" ilk="function" name="getAttributes" returns="array" signature="getAttributes(item)">
              <variable citdl="item" doc="An XML element" ilk="argument" name="item" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Check whether an element has the attribute" ilk="function" name="hasAttribute" returns="boolean" signature="hasAttribute(item,attribute)">
              <variable citdl="item" doc="must be an instance of a dojox.data.XmlItem from the store instance." ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="A tag name of a child element, An XML attribute name or one of special names" ilk="argument" name="attribute" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Check whether the attribute values contain the value" ilk="function" name="containsValue" returns="boolean" signature="containsValue(item,attribute,value)">
              <variable citdl="item" doc="must be an instance of a dojox.data.XmlItem from the store instance." ilk="argument" name="item" />
              <variable citdl="attribute || attribute-name-string" doc="A tag name of a child element, An XML attribute name or one of special names" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="value" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Check whether the object is an item (XML element) item: An object to check" ilk="function" name="isItem" returns="boolean|boolran" signature="isItem(something)">
              <variable citdl="anything" ilk="argument" name="something" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Check whether the object is an item (XML element) and loaded item: An object to check" ilk="function" name="isItemLoaded" returns="boolean" signature="isItemLoaded(something)">
              <variable citdl="anything" ilk="argument" name="something" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Load an item (XML element)" ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
              <variable citdl="object" doc="containing the args for loadItem. See dojo.data.api.Read.loadItem()" ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="Return supported data APIs" ilk="function" name="getFeatures" returns="array">
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getLabel()" ilk="function" name="getLabel" returns="undefined" signature="getLabel(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Read.getLabelAttributes()" ilk="function" name="getLabelAttributes" returns="array|null" signature="getLabelAttributes(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="Fetch items (XML elements) that match to a query" ilk="function" name="_fetchItems" signature="_fetchItems(request,fetchHandler,errorHandler)">
              <variable citdl="A" doc="request object" ilk="argument" name="request" />
              <variable citdl="A" doc="function to call for fetched items" ilk="argument" name="fetchHandler" />
              <variable citdl="A" doc="function to call on error" ilk="argument" name="errorHandler" />
            </scope>
            <scope attributes="private" doc="Generate a URL for fetch" ilk="function" name="_getFetchUrl" signature="_getFetchUrl(request)">
              <variable citdl="A" doc="request object" ilk="argument" name="request" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Fetch items (XML elements) in an XML document based on a request" ilk="function" name="_getItems" signature="_getItems(document,request)">
              <variable citdl="An" doc="XML document" ilk="argument" name="document" />
              <variable citdl="A" doc="request object" ilk="argument" name="request" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_flattenNodes" returns="object|string|array|boolean|boolran|undefined|null" signature="_flattenNodes(nodes)">
              <variable ilk="argument" name="nodes" />
            </scope>
            <scope doc="See dojo.data.api.Read.close()" ilk="function" name="close" signature="close(request)">
              <variable citdl="dojo.data.api.Request || keywordArgs || null" ilk="argument" name="request" />
            </scope>
            <scope attributes="private" doc="Return a new dojox.data.XmlItem" ilk="function" name="newItem" returns="object" signature="newItem(keywordArgs,parentInfo)">
              <variable citdl="object" doc="An object containing initial attributes" ilk="argument" name="keywordArgs" />
              <variable ilk="argument" name="parentInfo" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Delete an dojox.data.XmlItem (wrapper to a XML element)." ilk="function" name="deleteItem" returns="boolean" signature="deleteItem(item)">
              <variable citdl="item" doc="An XML element to delete" ilk="argument" name="item" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Set an attribute value" ilk="function" name="setValue" returns="boolean" signature="setValue(item,attribute,value)">
              <variable citdl="item" doc="An XML element that holds the attribute" ilk="argument" name="item" />
              <variable citdl="attribute || string" doc="A tag name of a child element, An XML attribute name or one of special names" ilk="argument" name="attribute" />
              <variable citdl="almost anything" doc="A attribute value to set" ilk="argument" name="value" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Set attribute values" ilk="function" name="setValues" returns="boolean" signature="setValues(item,attribute,values)">
              <variable citdl="item" doc="An XML element that holds the attribute" ilk="argument" name="item" />
              <variable citdl="attribute || string" doc="A tag name of child elements, an XML attribute name or one of special names value: A attribute value to set notify: A non-API optional argument, used to indicate if notification API should be called or not." ilk="argument" name="attribute" />
              <variable citdl="array" ilk="argument" name="values" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Remove an attribute" ilk="function" name="unsetAttribute" returns="boolean" signature="unsetAttribute(item,attribute)">
              <variable citdl="item" doc="An XML element that holds the attribute" ilk="argument" name="item" />
              <variable citdl="attribute || string" doc="A tag name of child elements, an XML attribute name or one of special names" ilk="argument" name="attribute" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Save new and/or modified items (XML elements)" ilk="function" name="save" signature="save(keywordArgs)">
              <variable citdl="object" doc="An object for callbacks" ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="Invalidate changes (new and/or modified elements)" ilk="function" name="revert" returns="boolean">
              <variable name="return_summary" />
            </scope>
            <scope doc="Check whether an item is new, modified or deleted" ilk="function" name="isDirty" signature="isDirty(item)">
              <variable citdl="item" doc="An item (XML element) to check" ilk="argument" name="item" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_saveItem" signature="_saveItem(item,keywordArgs,method)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="keywordArgs" />
              <variable ilk="argument" name="method" />
            </scope>
            <scope attributes="private" doc="Generate a URL for post" ilk="function" name="_getPostUrl" returns="string" signature="_getPostUrl(item)">
              <variable citdl="An" doc="item to save" ilk="argument" name="item" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Generate a URL for put" ilk="function" name="_getPutUrl" returns="string" signature="_getPutUrl(item)">
              <variable citdl="An" doc="item to save" ilk="argument" name="item" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Generate a URL for delete" ilk="function" name="_getDeleteUrl" returns="string" signature="_getDeleteUrl(item)">
              <variable citdl="An" doc="item to delete" ilk="argument" name="item" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Generate a content to post" ilk="function" name="_getPostContent" returns="XML string" signature="_getPostContent(item)">
              <variable citdl="An" doc="item to save" ilk="argument" name="item" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Generate a content to put" ilk="function" name="_getPutContent" returns="XML string" signature="_getPutContent(item)">
              <variable citdl="An" doc="item to save" ilk="argument" name="item" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getAttribute" returns="object" signature="_getAttribute(tagName,attribute)">
              <variable ilk="argument" name="tagName" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getItem" returns="object" signature="_getItem(element)">
              <variable ilk="argument" name="element" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getItemIndex" returns="int" signature="_getItemIndex(items,element)">
              <variable ilk="argument" name="items" />
              <variable ilk="argument" name="element" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_backupItem" returns="new or already modified" signature="_backupItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_restoreItems" signature="_restoreItems(items)">
              <variable ilk="argument" name="items" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_forgetItem" signature="_forgetItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getDocument" returns="DOMDocument|null" signature="_getDocument(element)">
              <variable ilk="argument" name="element" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getRootElement" returns="DOMElement" signature="_getRootElement(element)">
              <variable ilk="argument" name="element" />
            </scope>
            <scope attributes="private" doc="A function to compute the xpath of a node in a DOM document." ilk="function" name="_getXPath" returns="string" signature="_getXPath(element)">
              <variable ilk="argument" name="element" />
            </scope>
            <scope attributes="private" doc="Returns a unique identifier for an item." ilk="function" name="getIdentity" returns="String." signature="getIdentity(item)">
              <variable citdl="item" doc="The XML Item from the store from which to obtain its identifier." ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="Returns an array of attribute names that are used to generate the identity." ilk="function" name="getIdentityAttributes" returns="array|null" signature="getIdentityAttributes(item)">
              <variable citdl="item" doc="The item from the store from which to obtain the array of public attributes that compose the identifier, if any." ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Identity.fetchItemByIdentity(keywordArgs)" ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(keywordArgs)">
              <variable citdl="object" ilk="argument" name="keywordArgs" />
            </scope>
            <variable attributes="private" doc="" name="_newItems" />
            <variable attributes="private" doc="" name="_deletedItems" />
            <variable attributes="private" doc="" name="_modifiedItems" />
            <variable attributes="private" doc="" name="_attributeMap" />
          </scope>
          <scope doc="Initialize with an XML element" ilk="function" name="XmlItem" signature="XmlItem(element,store,query)">
            <variable citdl="An" doc="XML element" ilk="argument" name="element" />
            <variable citdl="The" doc="containing store, if any." ilk="argument" name="store" />
            <variable citdl="The" doc="query to use to look up a specific element. Usually an XPath or dojo.query statement." ilk="argument" name="query" />
            <scope attributes="private" doc="Return a value of the first text child of the element" ilk="function" name="toString" returns="String">
              <variable name="return_summary" />
            </scope>
            <variable citdl="An" doc="XML element" name="element" />
            <variable citdl="The" doc="containing store, if any." name="store" />
            <variable doc="" name="q" />
          </scope>
          <variable citdl="Object" doc="" name="css">
            <scope name="rules">
              <scope doc="" ilk="function" name="forEach" signature="forEach(fn,ctx,context)">
                <variable ilk="argument" name="fn" />
                <variable ilk="argument" name="ctx" />
                <variable ilk="argument" name="context" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="findStyleSheets" signature="findStyleSheets(sheets)">
              <variable ilk="argument" name="sheets" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="findStyleSheet" returns="IE stylesheet has imports[] containing @import&apos;ed rules" signature="findStyleSheet(sheet)">
              <variable ilk="argument" name="sheet" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="determineContext" returns="IE stylesheet has imports[] containing @import&apos;ed rules" signature="determineContext(initialStylesheets)">
              <variable ilk="argument" name="initialStylesheets" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="dom">
            <scope attributes="private" doc="cross-browser implementation of creating an XML document object." ilk="function" name="createDocument" returns="DOMDocument." signature="createDocument(str,mimetype)">
              <variable citdl="string" doc="Optional text to create the document from. If not provided, an empty XML document will be created. If str is empty string &amp;amp;quot;&amp;amp;quot;, then a new empty document will be created." ilk="argument" name="str" />
              <variable citdl="string" doc="Optional mimetype of the text. Typically, this is text/xml. Will be defaulted to text/xml if not provided." ilk="argument" name="mimetype" />
            </scope>
            <scope attributes="private" doc="Implementation of the DOM Level 3 attribute; scan node for text" ilk="function" name="textContent" returns="string" signature="textContent(node,text)">
              <variable citdl="Node" doc="The node to get the text off of or set the text on." ilk="argument" name="node" />
              <variable citdl="string" doc="Optional argument of the text to apply to the node." ilk="argument" name="text" />
            </scope>
            <scope doc="Removes all children of node and appends newChild. All the existing children will be destroyed." ilk="function" name="replaceChildren" signature="replaceChildren(node,newChildren)">
              <variable citdl="Element" doc="The node to modify the children on" ilk="argument" name="node" />
              <variable citdl="Node || array" doc="The children to add to the node. It can either be a single Node or an array of Nodes." ilk="argument" name="newChildren" />
            </scope>
            <scope attributes="private" doc="removes all children from node and returns the count of children removed. The children nodes are not destroyed. Be sure to call dojo._destroyElement on them after they are not used anymore." ilk="function" name="removeChildren" returns="int" signature="removeChildren(node)">
              <variable citdl="Element" doc="The node to remove all the children from." ilk="argument" name="node" />
            </scope>
            <scope attributes="private" doc="Implementation of MS&apos;s innerXML function." ilk="function" name="innerXML" returns="string||null" signature="innerXML(node)">
              <variable citdl="Node" doc="The node from which to generate the XML text representation." ilk="argument" name="node" />
            </scope>
          </variable>
          <scope doc="" ilk="function" name="jsonPathStore" signature="jsonPathStore(options)">
            <variable ilk="argument" name="options" />
            <scope doc="" name="mode" />
            <scope doc="" name="metaLabel" />
            <scope doc="" name="hideMetaAttributes" />
            <scope doc="" name="autoIdPrefix" />
            <scope doc="" name="autoIdentity" />
            <scope doc="" name="idAttribute" />
            <scope doc="" name="indexOnLoad" />
            <scope doc="" name="labelAttribute" />
            <scope doc="" name="url" />
            <scope attributes="private" doc="" name="_replaceRegex" />
            <scope doc="" name="noRevert" />
            <scope attributes="private" doc="load data into the store. Index it if appropriate." ilk="function" name="_loadData" signature="_loadData(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="" ilk="function" name="onLoadData" signature="onLoadData(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="set the stores&apos; data to the supplied object and then load and/or setup that data with the required meta info" ilk="function" name="setData" signature="setData(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="parse the object structure, and turn any objects into jsonPathStore items. Basically this just does a recursive series of fetches which itself already examines any items as they are retrieved and setups up the required meta information." ilk="function" name="buildIndex" signature="buildIndex(path,item)">
              <variable citdl="string" doc="*/ jsonPath Query for the starting point of this index construction." ilk="argument" name="path" />
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="make sure we have an reference to the item in the store and not a clone. Takes an item, matches it to the corresponding item in the store and if it is the same, returns itself, otherwise it returns the item from the store." ilk="function" name="_correctReference" signature="_correctReference(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="Gets the value of an item&apos;s &apos;property&apos;" ilk="function" name="getValue" signature="getValue(item,property)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
              <variable citdl="string" doc="*/ property to look up value for" ilk="argument" name="property" />
            </scope>
            <scope doc="Gets the value of an item&apos;s &apos;property&apos; and returns it. If this value is an array it is just returned, if not, the value is added to an array and that is returned." ilk="function" name="getValues" signature="getValues(item,property)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
              <variable citdl="string" doc="*/ property to look up value for" ilk="argument" name="property" />
            </scope>
            <scope doc="Gets the available attributes of an item&apos;s &apos;property&apos; and returns it as an array. If the store has &apos;hideMetaAttributes&apos; set to true the attributed identified by &apos;metaLabel&apos; will not be included." ilk="function" name="getAttributes" signature="getAttributes(item)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
            </scope>
            <scope doc="Checks to see if item has attribute" ilk="function" name="hasAttribute" signature="hasAttribute(item,attribute)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
              <variable citdl="string" doc="*/" ilk="argument" name="attribute" />
            </scope>
            <scope doc="Checks to see if &apos;item&apos; has &apos;value&apos; at &apos;attribute&apos;" ilk="function" name="containsValue" signature="containsValue(item,attribute,value)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
              <variable citdl="string" doc="*/" ilk="argument" name="attribute" />
              <variable citdl="anything" doc="*/" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_shallowCompare" signature="_shallowCompare(a,b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope doc="Checks to see if a passed &apos;item&apos; is really a jsonPathStore item. Currently it only verifies structure. It does not verify that it belongs to this store at this time." ilk="function" name="isItem" signature="isItem(item)">
              <variable citdl="object" doc="*/ attribute: /* string */" ilk="argument" name="item" />
            </scope>
            <scope doc="returns isItem() :)" ilk="function" name="isItemLoaded" signature="isItemLoaded(item)">
              <variable citdl="object" doc="*/" ilk="argument" name="item" />
            </scope>
            <scope doc="returns true. Future implementatins might alter this" ilk="function" name="loadItem" signature="loadItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="verifies that &apos;item&apos; has a meta object attached and if not it creates it by setting it to &apos;props&apos; if the meta attribute already exists, mix &apos;props&apos; into it." ilk="function" name="_updateMeta" signature="_updateMeta(item,props)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="props" />
            </scope>
            <scope doc="" ilk="function" name="cleanMeta" signature="cleanMeta(data,options)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="options" />
            </scope>
            <scope doc="" ilk="function" name="fetch" signature="fetch(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope doc="exports the store data set. Takes an options object with a number of parameters  data: /* object */ Defaults to the root of the store. The data to be exported.  clone: /* boolean */ clone the data set before returning it or modifying it for export  cleanMeta: /* boolean */ clean the meta data off of the data. Note that this will happen to the actual store data if !clone. If you want to continue using the store after this operation, it is probably better to export it as a clone if you want it cleaned.  suppressExportMeta: /* boolean */ By default, when data is exported from the store some information, such as as a timestamp, is added to the root of exported data. This prevents that from happening. It is mainly used for making tests easier.  type: &amp;amp;quot;raw&amp;amp;quot; || &amp;amp;quot;json&amp;amp;quot; Defaults to &apos;json&apos;. &apos;json&apos; will convert the data into json before returning it. &apos;raw&apos; will just return a reference to the object" ilk="function" name="dump" signature="dump(options)">
              <variable ilk="argument" name="options" />
            </scope>
            <scope doc="return the store feature set" ilk="function" name="getFeatures" />
            <scope doc="" ilk="function" name="getLabel" signature="getLabel(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="returns an array of attributes that are used to create the label of an item" ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="sort" signature="sort(a,b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope doc="" ilk="function" name="getIdentity" signature="getIdentity(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="returns the attributes which are used to make up the identity of an item. Basically returns this.idAttribute" ilk="function" name="getIdentityAttributes" signature="getIdentityAttributes(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="fetch an item by its identity. This store also provides a much more finger friendly alias, &apos;byId&apos; which does the same thing as this function. If provided a string this call will be treated as a SYNC request and will return the identified item immediatly. Alternatively it takes a object as a set of keywordArgs:  identity: /* string */ the id of the item you want to retrieve  mode: dojox.data.SYNC_MODE || dojox.data.ASYNC_MODE overrides the default store fetch mode  onItem: /* function */ Result call back. Passed the fetched item.  onError: /* function */ error callback." ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_makeItAnItem" signature="_makeItAnItem(data,pInfo)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="pInfo" />
            </scope>
            <scope doc="adds a new item to the store at the specified point. Takes two parameters, data, and options." ilk="function" name="newItem" signature="newItem(data,options)">
              <variable citdl="object" doc="*/ The data to be added in as an item. This could be a new javascript object, or it could be an item that already exists in the store. If it already exists in the store, then this will be added as a reference." ilk="argument" name="data" />
              <variable ilk="argument" name="options" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_addReference" signature="_addReference(item,pInfo)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="pInfo" />
            </scope>
            <scope doc="" ilk="function" name="deleteItem" signature="deleteItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setDirty" signature="_setDirty(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="sets &apos;attribute&apos; on &apos;item&apos; to &apos;value&apos;" ilk="function" name="setValue" signature="setValue(item,attribute,value)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="sets &apos;attribute&apos; on &apos;item&apos; to &apos;value&apos; value must be an array." ilk="function" name="setValues" signature="setValues(item,attribute,values)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="values" />
            </scope>
            <scope doc="unsets &apos;attribute&apos; on &apos;item&apos;" ilk="function" name="unsetAttribute" signature="unsetAttribute(item,attribute)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="attribute" />
            </scope>
            <scope doc="Takes an optional set of keyword Args with some save options. Currently only format with options being &amp;amp;quot;raw&amp;amp;quot; or &amp;amp;quot;json&amp;amp;quot;. This function goes through the dirty item lists, clones and trims the item down so that the items children are not part of the data (the children are replaced with reference objects). This data is compiled into a single array, the dirty objects are all marked as clean, and the new data is then passed on to the onSave handler." ilk="function" name="save" signature="save(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_markClean" signature="_markClean(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="revert" />
            <scope attributes="private" doc="specialized mixin that hooks up objects in the store where references are identified." ilk="function" name="_mixin" signature="_mixin(target,data)">
              <variable ilk="argument" name="target" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="" ilk="function" name="isDirty" signature="isDirty(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_createReference" signature="_createReference(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="copy an item recursively stoppying at other items that have id&apos;s and replace them with a refrence object;" ilk="function" name="_trimItem" signature="_trimItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="onSet" signature="onSet(item,attribute,oldValue,newValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="object | array" ilk="argument" name="oldValue" />
              <variable citdl="object | array" ilk="argument" name="newValue" />
            </scope>
            <scope doc="" ilk="function" name="onNew" signature="onNew(newItem,parentInfo)">
              <variable citdl="item" ilk="argument" name="newItem" />
              <variable citdl="object" ilk="argument" name="parentInfo" />
            </scope>
            <scope doc="" ilk="function" name="onDelete" signature="onDelete(deletedItem)">
              <variable citdl="item" ilk="argument" name="deletedItem" />
            </scope>
            <scope doc="notification of the save event..not part of the notification api, but probably should be. console.log(&amp;amp;quot;onSave() &amp;amp;quot;, items);" ilk="function" name="onSave" signature="onSave(items)">
              <variable ilk="argument" name="items" />
            </scope>
            <scope doc="notification of the revert event..not part of the notification api, but probably should be." ilk="function" name="onRevert" />
            <variable attributes="private" doc="" name="_data" />
            <variable doc="" name="byId" />
            <variable attributes="private" doc="" name="_dirtyItems" />
            <variable attributes="private" doc="" name="_autoId" />
            <variable attributes="private" doc="" name="_referenceId" />
            <variable attributes="private" doc="" name="_references" />
            <variable attributes="private" doc="" name="_fetchQueue" />
            <variable doc="" name="index" />
            <variable doc="" name="metaRegex" />
          </scope>
          <scope doc="" name="ASYNC_MODE" />
          <scope doc="" name="SYNC_MODE" />
          <scope doc="this function can be used to receive REST notifications, from Comet or from another frame" ilk="function" name="restListener" signature="restListener(message)">
            <variable ilk="argument" name="message" />
          </scope>
          <variable citdl="Object" doc="" name="util">
            <scope doc="" ilk="function" name="JsonQuery">
              <scope doc="" name="useFullIdInQueries" />
              <scope attributes="private" doc="" ilk="function" name="_toJsonQuery" signature="_toJsonQuery(args,jsonQueryPagination)">
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="jsonQueryPagination" />
              </scope>
              <scope doc="" name="jsonQueryPagination" />
              <scope doc="" ilk="function" name="fetch" signature="fetch(args)">
                <variable ilk="argument" name="args" />
              </scope>
              <scope doc="" ilk="function" name="isUpdateable" />
              <scope doc="" ilk="function" name="matchesQuery" signature="matchesQuery(item,request)">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="request" />
              </scope>
              <scope doc="" ilk="function" name="clientSideFetch" signature="clientSideFetch(request,baseResults)">
                <variable citdl="Object" ilk="argument" name="request" />
                <variable citdl="Array" ilk="argument" name="baseResults" />
              </scope>
              <scope doc="" ilk="function" name="querySuperSet" signature="querySuperSet(argsSuper,argsSub)">
                <variable ilk="argument" name="argsSuper" />
                <variable ilk="argument" name="argsSub" />
              </scope>
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="" name="json">
          <variable citdl="Object" doc="" name="ref">
            <scope doc="Indexes and resolves references in the JSON object." ilk="function" name="resolveJson" signature="resolveJson(root,args)">
              <variable citdl="Object" doc="The root object of the object graph to be processed" ilk="argument" name="root" />
              <variable citdl="Object" doc="with additional arguments:  The *index* parameter. This is the index object (map) to use to store an index of all the objects. If you are using inter-message referencing, you must provide the same object for each call. The *defaultId* parameter. This is the default id to use for the root object (if it doesn&apos;t define it&apos;s own id) The *idPrefix* parameter. This the prefix to use for the ids as they enter the index. This allows multiple tables to use ids (that might otherwise collide) that enter the same global index. idPrefix should be in the form &amp;amp;quot;/Service/&amp;amp;quot;. For example, if the idPrefix is &amp;amp;quot;/Table/&amp;amp;quot;, and object is encountered {id:&amp;amp;quot;4&amp;amp;quot;,...}, this would go in the index as &amp;amp;quot;/Table/4&amp;amp;quot;. The *idAttribute* parameter. This indicates what property is the identity property. This defaults to &amp;amp;quot;id&amp;amp;quot; The *assignAbsoluteIds* parameter. This indicates that the resolveJson should assign absolute ids (__id) as the objects are being parsed.  The *schemas* parameter This provides a map of schemas, from which prototypes can be retrieved The *loader* parameter This is a function that is called added to the reference objects that can&apos;t be resolved (lazy objects) return: An object, the result of the processing" ilk="argument" name="args" />
            </scope>
            <scope doc="evaluates the passed string-form of a JSON object." ilk="function" name="fromJson" signature="fromJson(str,args)">
              <variable citdl="String" doc="a string literal of a JSON item, for instance: &apos;{ &amp;amp;quot;foo&amp;amp;quot;: [ &amp;amp;quot;bar&amp;amp;quot;, 1, { &amp;amp;quot;baz&amp;amp;quot;: &amp;amp;quot;thud&amp;amp;quot; } ] }&apos;" ilk="argument" name="str" />
              <variable citdl="Object" doc="See resolveJson  return: An object, the result of the evaluation" ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="Create a JSON serialization of an object. This has support for referencing, including circular references, duplicate references, and out-of-message references id and path-based referencing is supported as well and is based on http://www.json.com/2007/10/19/json-referencing-proposal-and-library/." ilk="function" name="toJson" returns="use the default serializer for primitives" signature="toJson(it,prettyPrint,idPrefix,indexSubObjects)">
              <variable citdl="Object" doc="an object to be serialized." ilk="argument" name="it" />
              <variable citdl="Boolean" doc="if true, we indent objects and arrays to make the output prettier. The variable dojo.toJsonIndentStr is used as the indent string -- to use something other than the default (tab), change that variable before calling dojo.toJson()." ilk="argument" name="prettyPrint" />
              <variable citdl="Object" doc="The prefix that has been used for the absolute ids  return: a String representing the serialized version of the passed object." ilk="argument" name="idPrefix" />
              <variable citdl="Object" ilk="argument" name="indexSubObjects" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_addProp" signature="_addProp(id,prop)">
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="prop" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="schema">
            <scope doc="To use the validator call this with an instance object and an optional schema object. If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating), that schema will be used to validate and the schema parameter is not necessary (if both exist, both validations will occur)." ilk="function" name="validate" signature="validate(instance,schema)">
              <variable citdl="Any" doc="The instance value/object to validate" ilk="argument" name="instance" />
              <variable citdl="Object" doc="The schema to use to validate" ilk="argument" name="schema" />
            </scope>
            <scope doc="The checkPropertyChange method will check to see if an value can legally be in property with the given schema This is slightly different than the validate method in that it will fail if the schema is readonly and it will not check for self-validation, it is assumed that the passed in value is already internally valid. The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for information." ilk="function" name="checkPropertyChange" signature="checkPropertyChange(value,schema)">
              <variable citdl="Any" doc="The new instance value/object to check" ilk="argument" name="value" />
              <variable citdl="Object" doc="The schema to use to validate return: see dojox.validate.jsonSchema.validate" ilk="argument" name="schema" />
            </scope>
            <scope doc="This checks to ensure that the result is valid and will throw an appropriate error message if it is not" ilk="function" name="mustBeValid" signature="mustBeValid(result)">
              <variable citdl="the" doc="result returned from checkPropertyChange or validate" ilk="argument" name="result" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_validate" signature="_validate(instance,schema,_changing)">
              <variable citdl="Any" ilk="argument" name="instance" />
              <variable citdl="Object" ilk="argument" name="schema" />
              <variable citdl="Boolean" ilk="argument" name="_changing" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="Additional date manipulation functions" name="date">
          <variable citdl="Object" doc="" name="HebrewLocale">
            <scope attributes="private" doc="Used to get localized strings from dojo.cldr for day or month names." ilk="function" name="getNames" returns="Array" signature="getNames(item,type,context,locale)">
              <variable citdl="String" doc="&apos;months&apos; || &apos;days&apos;" ilk="argument" name="item" />
              <variable citdl="String" doc="&apos;wide&apos; || &apos;narrow&apos; || &apos;abbr&apos; (e.g. &amp;amp;quot;Monday&amp;amp;quot;, &amp;amp;quot;Mon&amp;amp;quot;, or &amp;amp;quot;M&amp;amp;quot; respectively, in English) use: &apos;standAlone&apos; || &apos;format&apos; (default)" ilk="argument" name="type" />
              <variable citdl="String" ilk="argument" name="context" />
              <variable citdl="String" doc="override locale used to find the names  using var monthNames = dojox.date.HebrewLocale.getNames(&apos;months&apos;, &apos;wide&apos;, &apos;format&apos;, &apos;he&apos;);" ilk="argument" name="locale" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="format" returns="String" signature="format(dateObject,options)">
              <variable citdl="HebrewDate" ilk="argument" name="dateObject" />
              <variable citdl="object" ilk="argument" name="options" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="regexp" returns="String" signature="regexp(options)">
              <variable citdl="object" ilk="argument" name="options" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_parseInfo" returns="String" signature="_parseInfo(options)">
              <variable citdl="oblect" ilk="argument" name="options" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="parse" returns="String|HebrewDate" signature="parse(value,options)">
              <variable citdl="String" ilk="argument" name="value" />
              <variable citdl="object" ilk="argument" name="options" />
            </scope>
            <scope doc="Add a reference to a bundle containing localized custom formats to be used by date/time formatting and parsing routines." ilk="function" name="addCustomFormats" signature="addCustomFormats(packageName,bundleName)">
              <variable citdl="String" ilk="argument" name="packageName" />
              <variable citdl="String" ilk="argument" name="bundleName" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getHebrewBundle" returns="Object" signature="_getHebrewBundle(locale)">
              <variable citdl="String" ilk="argument" name="locale" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="HebrewNumerals">
            <scope doc="This function return year written in Hebrew numbers-letters," ilk="function" name="getYearHebrewLetters" signature="getYearHebrewLetters(year)">
              <variable citdl="Number" ilk="argument" name="year" />
            </scope>
            <scope doc="This function return year in format number from the year written in Hebrew numbers-letters" ilk="function" name="parseYearHebrewLetters" signature="parseYearHebrewLetters(year)">
              <variable citdl="String hebrew year" ilk="argument" name="year" />
            </scope>
            <scope doc="" ilk="function" name="getDayHebrewLetters" signature="getDayHebrewLetters(day,nogrsh)">
              <variable ilk="argument" name="day" />
              <variable citdl="bool" ilk="argument" name="nogrsh" />
            </scope>
            <scope doc="This function return date in format number from the date written in Hebrew numbers-letter" ilk="function" name="parseDayHebrewLetters" signature="parseDayHebrewLetters(day)">
              <variable citdl="String hebrew" ilk="argument" name="day" />
            </scope>
            <scope doc="This function return month written in Hebrew numerals" ilk="function" name="getMonthHebrewLetters" signature="getMonthHebrewLetters(monthNum,isNum,year)">
              <variable ilk="argument" name="monthNum" />
              <variable citdl="bool hebrew numbers" ilk="argument" name="isNum" />
              <variable citdl="Number" ilk="argument" name="year" />
            </scope>
            <scope doc="" ilk="function" name="parseMonthHebrewLetters" signature="parseMonthHebrewLetters(monthStr)">
              <variable ilk="argument" name="monthStr" />
            </scope>
          </variable>
          <scope doc="This is the constructor" ilk="function" name="IslamicDate">
            <variable attributes="private" doc="" name="_date" />
            <variable attributes="private" doc="" name="_month" />
            <variable attributes="private" doc="" name="_year" />
            <variable attributes="private" doc="" name="_hours" />
            <variable attributes="private" doc="" name="_minutes" />
            <variable attributes="private" doc="" name="_seconds" />
            <variable attributes="private" doc="" name="_milliseconds" />
            <variable attributes="private" doc="" name="_day" />
            <scope attributes="private" doc="" name="_GREGORIAN_EPOCH" />
            <scope attributes="private" doc="" name="_ISLAMIC_EPOCH" />
            <scope doc="" name="getDate" />
            <scope doc="" name="getMonth" />
            <scope doc="" name="getFullYear" />
            <scope doc="" name="getDay" />
            <scope doc="" name="getHours" />
            <scope doc="" name="getMinutes" />
            <scope doc="" name="getSeconds" />
            <scope doc="" name="getMilliseconds" />
            <scope doc="This function sets the Date" ilk="function" name="setDate" signature="setDate(date)">
              <variable citdl="number" ilk="argument" name="date" />
            </scope>
            <scope doc="" name="setYear" />
            <scope doc="" name="setMonth" />
            <scope doc="" name="setHours" />
            <scope doc="" name="setMinutes" />
            <scope doc="" name="setSeconds" />
            <scope doc="" name="setMilliseconds" />
            <scope doc="" name="toString" />
            <scope doc="" name="toGregorian" />
            <scope doc="" name="fromGregorian" />
            <scope doc="" name="parse" />
            <scope doc="" name="valueOf" />
            <scope attributes="private" doc="" name="_yearStart" />
            <scope attributes="private" doc="" name="_monthStart" />
            <scope attributes="private" doc="" name="_civilLeapYear" />
            <scope attributes="private" doc="" ilk="function" name="getDaysInIslamicMonth" returns="dojox.date.IslamicDate" signature="getDaysInIslamicMonth(month)">
              <variable citdl="dojox.date.IslamicDate" ilk="argument" name="month" />
            </scope>
            <scope attributes="private" doc="" name="_mod" />
            <scope attributes="private" doc="Used to get localized strings from dojo.cldr for day or month names." ilk="function" name="_getNames" returns="Array" signature="_getNames(item,type,use,locale)">
              <variable citdl="String" doc="&apos;months&apos; || &apos;days&apos;" ilk="argument" name="item" />
              <variable citdl="String" doc="&apos;wide&apos; || &apos;narrow&apos; || &apos;abbr&apos; (e.g. &amp;amp;quot;Monday&amp;amp;quot;, &amp;amp;quot;Mon&amp;amp;quot;, or &amp;amp;quot;M&amp;amp;quot; respectively, in English)" ilk="argument" name="type" />
              <variable citdl="String" doc="&apos;standAlone&apos; || &apos;format&apos; (default)" ilk="argument" name="use" />
              <variable citdl="String" doc="override locale used to find the names" ilk="argument" name="locale" />
            </scope>
            <scope doc="" name="weekDays" />
            <scope doc="" name="months" />
          </scope>
          <variable citdl="Object" doc="" name="php">
            <scope doc="Get a formatted string for a given date object" ilk="function" name="format" signature="format(date,format)">
              <variable citdl="Date" ilk="argument" name="date" />
              <variable citdl="String" ilk="argument" name="format" />
            </scope>
            <scope doc="Format the internal date object" ilk="function" name="DateFormat" signature="DateFormat(format)">
              <variable citdl="String" ilk="argument" name="format" />
              <scope name="constructor" />
              <variable doc="" name="tokens" />
              <variable doc="" name="replacements" />
              <scope doc="" name="weekdays" />
              <scope doc="" name="weekdays_3" />
              <scope doc="" name="months" />
              <scope doc="" name="months_3" />
              <scope doc="" name="monthdays" />
              <scope doc="" ilk="function" name="format" signature="format(date)">
                <variable citdl="Date" ilk="argument" name="date" />
              </scope>
              <variable doc="" name="date" />
              <scope doc="Day of the month, 2 digits with leading zeros" ilk="function" name="d" />
              <scope doc="A textual representation of a day, three letters" ilk="function" name="D" />
              <scope doc="Day of the month without leading zeros" ilk="function" name="j" />
              <scope doc="A full textual representation of the day of the week" ilk="function" name="l" />
              <scope doc="ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)" ilk="function" name="N" />
              <scope doc="English ordinal suffix for the day of the month, 2 characters" ilk="function" name="S" />
              <scope doc="Numeric representation of the day of the week" ilk="function" name="w" />
              <scope doc="The day of the year (starting from 0)" ilk="function" name="z" />
              <scope doc="ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)" ilk="function" name="W" />
              <scope doc="A full textual representation of a month, such as January or March" ilk="function" name="F" />
              <scope doc="Numeric representation of a month, with leading zeros" ilk="function" name="m" />
              <scope doc="A short textual representation of a month, three letters" ilk="function" name="M" />
              <scope doc="Numeric representation of a month, without leading zeros" ilk="function" name="n" />
              <scope doc="Number of days in the given month" ilk="function" name="t" />
              <scope doc="Whether it&apos;s a leap year" ilk="function" name="L" />
              <scope doc="ISO-8601 year number. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0) TODO: Figure out what this means" ilk="function" name="o" />
              <scope doc="A full numeric representation of a year, 4 digits" ilk="function" name="Y" />
              <scope doc="A two digit representation of a year" ilk="function" name="y" />
              <scope doc="Lowercase Ante meridiem and Post meridiem" ilk="function" name="a" />
              <scope doc="Uppercase Ante meridiem and Post meridiem" ilk="function" name="b" />
              <scope doc="Swatch Internet time A day is 1,000 beats. All time is measured from GMT + 1" ilk="function" name="B" />
              <scope doc="12-hour format of an hour without leading zeros" ilk="function" name="g" />
              <scope doc="24-hour format of an hour without leading zeros" ilk="function" name="G" />
              <scope doc="12-hour format of an hour with leading zeros" ilk="function" name="h" />
              <scope doc="24-hour format of an hour with leading zeros" ilk="function" name="H" />
              <scope doc="Minutes with leading zeros" ilk="function" name="i" />
              <scope doc="Seconds, with leading zeros" ilk="function" name="s" />
              <scope doc="Timezone identifier (added in PHP 5.1.0)" ilk="function" name="e" />
              <scope doc="Whether or not the date is in daylight saving time TODO: Can dojo.date do this?" ilk="function" name="I" />
              <scope doc="Difference to Greenwich time (GMT) in hours" ilk="function" name="O" />
              <scope doc="Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)" ilk="function" name="P" />
              <scope doc="" ilk="function" name="T" />
              <scope doc="Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive." ilk="function" name="Z" />
              <scope doc="ISO 8601 date (added in PHP 5)" ilk="function" name="c" />
              <scope doc="RFC 2822 formatted date" ilk="function" name="r" />
              <scope doc="Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)" ilk="function" name="U" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="posix">
            <scope attributes="private" doc="Formats the date object using the specifications of the POSIX strftime function" ilk="function" name="strftime" returns="String" signature="strftime(dateObject,format,locale)">
              <variable citdl="Date" ilk="argument" name="dateObject" />
              <variable citdl="String" ilk="argument" name="format" />
              <variable citdl="String" ilk="argument" name="locale" />
            </scope>
            <scope attributes="private" doc="Return a date object representing the first day of the given date&apos;s week." ilk="function" name="getStartOfWeek" returns="Date" signature="getStartOfWeek(dateObject,firstDay)">
              <variable citdl="Date" ilk="argument" name="dateObject" />
              <variable citdl="Number" ilk="argument" name="firstDay" />
            </scope>
            <scope attributes="private" doc="Set the ISO8601 week number of the given date. The week containing January 4th is the first week of the year." ilk="function" name="setIsoWeekOfYear" returns="Date" signature="setIsoWeekOfYear(dateObject,week)">
              <variable citdl="Date" ilk="argument" name="dateObject" />
              <variable citdl="Number" doc="can be positive or negative: -1 is the year&apos;s last week." ilk="argument" name="week" />
            </scope>
            <scope attributes="private" doc="Get the ISO8601 week number of the given date. The week containing January 4th is the first week of the year. See http://en.wikipedia.org/wiki/ISO_week_date" ilk="function" name="getIsoWeekOfYear" returns="Integer" signature="getIsoWeekOfYear(dateObject)">
              <variable citdl="Date" ilk="argument" name="dateObject" />
            </scope>
            <scope attributes="private" doc="Determine the number of ISO8601 weeks in the year of the given date. Most years have 52 but some have 53. See http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm" ilk="function" name="getIsoWeeksInYear" returns="Integer" signature="getIsoWeeksInYear(dateObject)">
              <variable citdl="Date" ilk="argument" name="dateObject" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="Django Templating Language implementation" name="dtl">
          <scope doc="" ilk="function" name="DomInline" signature="DomInline(args,node)">
            <variable ilk="argument" name="args" />
            <variable ilk="argument" name="node" />
            <variable doc="" name="context" />
            <scope doc="" ilk="function" name="render" signature="render(context)">
              <variable citdl="dojox.dtl.Context" ilk="argument" name="context" />
            </scope>
            <variable doc="" name="containerNode" />
            <scope doc="" name="declaredClass" />
            <scope doc="" ilk="function" name="buildRendering" />
            <variable doc="" name="domNode" />
            <variable doc="" name="template" />
            <scope doc="" ilk="function" name="postMixInProperties" />
          </scope>
          <scope doc="" name="HtmlInline" />
          <scope doc="" ilk="function" name="Inline" signature="Inline(args,node)">
            <variable ilk="argument" name="args" />
            <variable ilk="argument" name="node" />
            <variable doc="" name="context" />
            <scope doc="" ilk="function" name="render" signature="render(context)">
              <variable citdl="Object|dojox.dtl.Context" ilk="argument" name="context" />
            </scope>
            <variable doc="" name="domNode">
              <variable doc="" name="innerHTML" />
            </variable>
            <scope doc="" name="declaredClass" />
            <scope doc="" ilk="function" name="buildRendering" />
            <variable doc="" name="template" />
            <scope doc="" ilk="function" name="postMixInProperties" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_DomTemplated" />
          <scope attributes="private" doc="" name="_HtmlTemplated" />
          <scope doc="" ilk="function" name="_Templated">
            <scope attributes="private" doc="" name="_dijitTemplateCompat" />
            <scope doc="" ilk="function" name="buildRendering" />
            <variable attributes="private" citdl="Object" doc="" name="_templateCache" />
            <scope doc="Layer for dijit._Templated.getCachedTemplate" ilk="function" name="getCachedTemplate" signature="getCachedTemplate(templatePath,templateString,alwaysUseString)">
              <variable ilk="argument" name="templatePath" />
              <variable ilk="argument" name="templateString" />
              <variable ilk="argument" name="alwaysUseString" />
            </scope>
            <scope doc="" ilk="function" name="render" />
            <variable attributes="private" doc="" name="_template" />
            <variable doc="" name="domNode" />
          </scope>
          <scope doc="" name="TOKEN_BLOCK" />
          <scope doc="" name="TOKEN_VAR" />
          <scope doc="" name="TOKEN_COMMENT" />
          <scope doc="" name="TOKEN_TEXT" />
          <scope doc="Pass one of these when rendering a template to tell the template what values to use." ilk="function" name="_Context" signature="_Context(dict)">
            <variable ilk="argument" name="dict" />
            <variable attributes="private" doc="" name="_dicts" />
            <scope doc="" ilk="function" name="push" />
            <scope doc="" ilk="function" name="pop" />
            <scope doc="" ilk="function" name="get" signature="get(key,otherwise)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="otherwise" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_normalize" signature="_normalize(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="update" signature="update(dict)">
              <variable ilk="argument" name="dict" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="Template" signature="Template(template,isString)">
            <variable citdl="String|dojo._Url" doc="The string or location of the string to use as a template" ilk="argument" name="template" />
            <variable citdl="Boolean" ilk="argument" name="isString" />
            <variable doc="" name="nodelist" />
            <scope doc="" ilk="function" name="update" signature="update(node,context)">
              <variable citdl="DOMNode|String|dojo.NodeList" doc="A node reference or set of nodes" ilk="argument" name="node" />
              <variable citdl="dojo._Url|String|Object" doc="The context object or location" ilk="argument" name="context" />
            </scope>
            <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable citdl="concatenatable" ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="getBuffer" />
          </scope>
          <scope doc="" ilk="function" name="_QuickNodeList" signature="_QuickNodeList(contents)">
            <variable ilk="argument" name="contents" />
            <variable doc="" name="contents" />
            <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="dummyRender" signature="dummyRender(context)">
              <variable ilk="argument" name="context" />
            </scope>
            <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
              <variable ilk="argument" name="buffer" />
            </scope>
          </scope>
          <scope doc="Uses a string to find (and manipulate) a variable" ilk="function" name="_Filter" signature="_Filter(token)">
            <variable ilk="argument" name="token" />
            <variable doc="" name="contents" />
            <variable doc="" name="key" />
            <variable doc="" name="filters" />
            <variable attributes="private" citdl="Object" doc="" name="_cache" />
            <scope attributes="private" doc="" name="_re" />
            <variable attributes="private" citdl="Object" doc="" name="_values" />
            <variable attributes="private" citdl="Object" doc="" name="_args">
              <scope doc="" name="4" />
              <scope doc="" name="5" />
              <scope doc="" name="6" />
              <scope doc="" name="7" />
            </variable>
            <scope attributes="private" doc="" ilk="function" name="_tokenize" />
            <scope doc="" ilk="function" name="getExpression" />
            <scope doc="" ilk="function" name="resolve" signature="resolve(context)">
              <variable ilk="argument" name="context" />
            </scope>
            <scope doc="" ilk="function" name="resolvePath" signature="resolvePath(path,context)">
              <variable ilk="argument" name="path" />
              <variable ilk="argument" name="context" />
            </scope>
          </scope>
          <scope attributes="private" doc="" name="_TextNode" />
          <scope doc="Allows us to render a group of nodes" ilk="function" name="_NodeList" signature="_NodeList(nodes)">
            <variable citdl="Node[]" ilk="argument" name="nodes" />
            <variable doc="" name="contents" />
            <variable doc="" name="last" />
            <scope doc="Add a new node to the list" ilk="function" name="push" signature="push(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="" ilk="function" name="concat" signature="concat(nodes)">
              <variable ilk="argument" name="nodes" />
            </scope>
            <scope doc="Adds all content onto the buffer" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="dummyRender" signature="dummyRender(context)">
              <variable ilk="argument" name="context" />
            </scope>
            <scope doc="" ilk="function" name="unrender" />
            <scope doc="" ilk="function" name="clone" />
            <scope doc="" ilk="function" name="rtrim" />
          </scope>
          <scope doc="A node to be processed as a variable" ilk="function" name="_VarNode" signature="_VarNode(str)">
            <variable ilk="argument" name="str" />
            <variable doc="" name="contents" />
            <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
          </scope>
          <scope attributes="private" doc="" name="_noOpNode" />
          <scope doc="Parser used during initialization and for tag groups." ilk="function" name="_Parser" signature="_Parser(tokens)">
            <variable ilk="argument" name="tokens" />
            <variable doc="" name="contents">
              <variable doc="" name="length" />
            </variable>
            <scope doc="" name="i" />
            <scope doc="Turns tokens into nodes" ilk="function" name="parse" signature="parse(stop_at)">
              <variable citdl="Array" ilk="argument" name="stop_at" />
            </scope>
            <scope doc="Returns the next token in the list." ilk="function" name="next_token" />
            <scope doc="" ilk="function" name="delete_first_token" />
            <scope doc="" ilk="function" name="skip_past" signature="skip_past(endtag)">
              <variable ilk="argument" name="endtag" />
            </scope>
            <scope doc="" ilk="function" name="create_variable_node" signature="create_variable_node(expr)">
              <variable ilk="argument" name="expr" />
            </scope>
            <scope doc="" ilk="function" name="create_text_node" signature="create_text_node(expr)">
              <variable ilk="argument" name="expr" />
            </scope>
            <scope doc="" ilk="function" name="getTemplate" signature="getTemplate(file)">
              <variable ilk="argument" name="file" />
            </scope>
          </scope>
          <variable citdl="Object" doc="" name="register">
            <variable attributes="private" citdl="Object" doc="" name="_registry">
              <scope doc="" name="attributes" />
              <scope doc="" name="tags" />
              <scope doc="" name="filters" />
            </variable>
            <scope doc="" ilk="function" name="get" signature="get(module,name)">
              <variable citdl="String" ilk="argument" name="module" />
              <variable citdl="String" ilk="argument" name="name" />
            </scope>
            <scope doc="" ilk="function" name="getAttributeTags" />
            <scope attributes="private" doc="" ilk="function" name="_any" signature="_any(type,base,locations)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="base" />
              <variable ilk="argument" name="locations" />
            </scope>
            <scope doc="" ilk="function" name="tags" signature="tags(base,locations)">
              <variable citdl="String" ilk="argument" name="base" />
              <variable citdl="Object" ilk="argument" name="locations" />
            </scope>
            <scope doc="" ilk="function" name="filters" signature="filters(base,locations)">
              <variable citdl="String" ilk="argument" name="base" />
              <variable citdl="Object" ilk="argument" name="locations" />
            </scope>
          </variable>
          <scope doc="" name="mark_safe" />
          <scope doc="" ilk="function" name="Token" signature="Token(token_type,contents)">
            <variable ilk="argument" name="token_type" />
            <variable ilk="argument" name="contents" />
            <variable doc="" name="token_type" />
            <variable doc="" name="contents">
              <variable doc="" name="split" />
            </variable>
            <variable doc="" ilk="function" name="split" />
            <scope doc="" ilk="function" name="split_contents" signature="split_contents(limit)">
              <variable citdl="Integer" ilk="argument" name="limit" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="quickFilter" signature="quickFilter(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_base">
            <scope doc="Escapes a string&apos;s HTML" ilk="function" name="escape" signature="escape(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="safe" signature="safe(value)">
              <variable ilk="argument" name="value" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="text">
            <scope attributes="private" doc="Used to find both tags and filters" ilk="function" name="_get" signature="_get(module,name,errorless)">
              <variable ilk="argument" name="module" />
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="errorless" />
            </scope>
            <scope doc="" ilk="function" name="getTag" signature="getTag(name,errorless)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="errorless" />
            </scope>
            <scope doc="" ilk="function" name="getFilter" signature="getFilter(name,errorless)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="errorless" />
            </scope>
            <scope doc="" ilk="function" name="getTemplate" signature="getTemplate(file)">
              <variable ilk="argument" name="file" />
            </scope>
            <scope doc="" ilk="function" name="getTemplateString" signature="getTemplateString(file)">
              <variable ilk="argument" name="file" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_resolveLazy" signature="_resolveLazy(location,sync,json)">
              <variable ilk="argument" name="location" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="json" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_resolveTemplateArg" signature="_resolveTemplateArg(arg,sync)">
              <variable ilk="argument" name="arg" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_isTemplate" signature="_isTemplate(arg)">
              <variable ilk="argument" name="arg" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_resolveContextArg" signature="_resolveContextArg(arg,sync)">
              <variable ilk="argument" name="arg" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope attributes="private" doc="" name="_re" />
            <scope doc="" ilk="function" name="tokenize" signature="tokenize(str)">
              <variable ilk="argument" name="str" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_parseDelims" signature="_parseDelims(varr,load,tag)">
              <variable ilk="argument" name="varr" />
              <variable ilk="argument" name="load" />
              <variable ilk="argument" name="tag" />
            </scope>
          </variable>
          <scope doc="Basic catch-all node" ilk="function" name="_Node" signature="_Node(obj)">
            <variable citdl="Object" ilk="argument" name="obj" />
            <variable doc="" name="contents" />
            <scope doc="" ilk="function" name="set" signature="set(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="Adds content onto the buffer" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="isEmpty" />
            <scope doc="" ilk="function" name="clone" />
          </scope>
          <variable citdl="Object" doc="" name="contrib">
            <variable citdl="Object" doc="" name="data">
              <scope doc="" ilk="function" name="_BoundItem" signature="_BoundItem(item,store)">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="store" />
                <variable doc="" name="item" />
                <variable doc="" name="store" />
                <scope doc="" ilk="function" name="get" signature="get(key)">
                  <variable ilk="argument" name="key" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="BindDataNode" signature="BindDataNode(items,query,store,alias)">
                <variable ilk="argument" name="items" />
                <variable ilk="argument" name="query" />
                <variable ilk="argument" name="store" />
                <variable ilk="argument" name="alias" />
                <variable doc="" name="items" />
                <variable doc="" name="query" />
                <variable doc="" name="store" />
                <variable doc="" name="alias" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" />
              </scope>
              <scope name="_get">
                <scope doc="" name="safe" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="dijit">
              <scope doc="" ilk="function" name="AttachNode" signature="AttachNode(keys,object)">
                <variable ilk="argument" name="keys" />
                <variable ilk="argument" name="object" />
                <variable attributes="private" doc="" name="_keys" />
                <variable attributes="private" doc="" name="_object" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable attributes="private" doc="" name="_rendered" />
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="EventNode" signature="EventNode(command,obj)">
                <variable ilk="argument" name="command" />
                <variable ilk="argument" name="obj" />
                <variable attributes="private" doc="" name="_command" />
                <variable attributes="private" doc="" name="_types" />
                <variable attributes="private" doc="" name="_fns" />
                <variable attributes="private" doc="" name="_object" />
                <variable attributes="private" doc="" name="_rendered" />
                <variable attributes="private" doc="" name="_clear" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" />
              </scope>
              <scope doc="" ilk="function" name="DojoTypeNode" signature="DojoTypeNode(node,parsed)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="parsed" />
                <variable attributes="private" doc="" name="_node" />
                <variable attributes="private" doc="" name="_parsed" />
                <variable attributes="private" doc="" name="_events">
                  <variable attributes="private" doc="" name="_object" />
                </variable>
                <variable attributes="private" doc="" name="_attach">
                  <variable attributes="private" doc="" name="_object" />
                </variable>
                <variable attributes="private" doc="" name="_dijit" />
                <variable attributes="private" doc="" name="_template" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable attributes="private" doc="" name="_rendered" />
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="dom">
              <scope doc="" ilk="function" name="StyleNode" signature="StyleNode(styles)">
                <variable ilk="argument" name="styles" />
                <variable doc="" name="contents" />
                <variable attributes="private" doc="" name="_current" />
                <variable attributes="private" doc="" name="_styles" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="BufferNode" signature="BufferNode(nodelist,options)">
                <variable ilk="argument" name="nodelist" />
                <variable ilk="argument" name="options" />
                <variable doc="" name="nodelist" />
                <variable doc="" name="options" />
                <scope attributes="private" doc="" ilk="function" name="_swap" signature="_swap(type,node)">
                  <variable ilk="argument" name="type" />
                  <variable ilk="argument" name="node" />
                </scope>
                <variable doc="" name="swapped" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable doc="" name="parent" />
                <variable doc="" name="onAddNode" />
                <variable doc="" name="onRemoveNode" />
                <variable doc="" name="onChangeData" />
                <variable doc="" name="onChangeAttribute" />
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="html" />
            <variable citdl="Object" doc="" name="objects">
              <scope doc="" ilk="function" name="key" signature="key(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
            </variable>
          </variable>
          <variable citdl="Object" doc="" name="BOOLS">
            <scope doc="" name="checked" />
            <scope doc="" name="disabled" />
            <scope doc="" name="readonly" />
          </variable>
          <scope doc="" name="TOKEN_CHANGE" />
          <scope doc="" name="TOKEN_ATTR" />
          <scope doc="" name="TOKEN_CUSTOM" />
          <scope doc="" name="TOKEN_NODE" />
          <scope doc="Use this object for DOM templating" ilk="function" name="DomTemplate" signature="DomTemplate(obj)">
            <variable citdl="String|DOMNode|dojo._Url" ilk="argument" name="obj" />
            <variable doc="" name="tokens" />
            <variable doc="" name="nodelist" />
            <scope attributes="private" doc="" name="_count" />
            <scope attributes="private" doc="" name="_re" />
            <scope doc="" ilk="function" name="setClass" signature="setClass(str)">
              <variable ilk="argument" name="str" />
            </scope>
            <scope doc="" ilk="function" name="getRootNode" />
            <scope doc="" ilk="function" name="getBuffer" />
            <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <variable doc="" name="buffer" />
            <variable doc="" name="rootNode" />
            <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
          </scope>
          <scope doc="Allows the manipulation of DOM" ilk="function" name="DomBuffer" signature="DomBuffer(parent)">
            <variable citdl="Node" ilk="argument" name="parent" />
            <variable attributes="private" doc="" name="_parent" />
            <variable attributes="private" doc="" name="_cache" />
            <scope doc="" ilk="function" name="concat" signature="concat(node)">
              <variable citdl="DOMNode" ilk="argument" name="node" />
            </scope>
            <variable doc="" name="rootNode" />
            <scope doc="" ilk="function" name="remove" signature="remove(obj)">
              <variable ilk="argument" name="obj" />
            </scope>
            <variable attributes="private" doc="" name="_removed" />
            <scope doc="" ilk="function" name="setAttribute" signature="setAttribute(key,value)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="addEvent" signature="addEvent(context,type,fn,args)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="fn" />
              <variable citdl="Array|Function" ilk="argument" name="args" />
            </scope>
            <scope doc="" ilk="function" name="setParent" signature="setParent(node,up,root)">
              <variable ilk="argument" name="node" />
              <variable citdl="Boolean" ilk="argument" name="up" />
              <variable citdl="Boolean" ilk="argument" name="root" />
            </scope>
            <variable attributes="private" doc="" name="_closed" />
            <scope doc="" ilk="function" name="getParent" />
            <scope doc="" ilk="function" name="getRootNode" />
            <scope doc="Stub called when setParent is used." ilk="function" name="onSetParent" signature="onSetParent(node,up)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="up" />
            </scope>
            <scope doc="Stub called before new nodes are added" ilk="function" name="onAddNode" signature="onAddNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="Stub called after new nodes are added" ilk="function" name="onAddNodeComplete" signature="onAddNodeComplete(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="Stub called when nodes are removed" ilk="function" name="onRemoveNode" signature="onRemoveNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="Stub called when an attribute is changed" ilk="function" name="onChangeAttribute" signature="onChangeAttribute(node,attribute,old,updated)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="attribute" />
              <variable ilk="argument" name="old" />
              <variable ilk="argument" name="updated" />
            </scope>
            <scope doc="Stub called when a data in a node is changed" ilk="function" name="onChangeData" signature="onChangeData(node,old,updated)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="old" />
              <variable ilk="argument" name="updated" />
            </scope>
            <scope doc="Stub called when a node is duplicated" ilk="function" name="onClone" signature="onClone(from,to)">
              <variable citdl="DOMNode" doc="" ilk="argument" name="from" />
              <variable citdl="DOMNode" doc="" ilk="argument" name="to" />
            </scope>
            <scope doc="Stub to call when you&apos;re adding an event" ilk="function" name="onAddEvent" signature="onAddEvent(node,type,description)">
              <variable citdl="DOMNode" doc="" ilk="argument" name="node" />
              <variable citdl="String" doc="" ilk="argument" name="type" />
              <variable citdl="String" doc="" ilk="argument" name="description" />
            </scope>
          </scope>
          <scope doc="Places a node into DOM" ilk="function" name="_DomNode" signature="_DomNode(node)">
            <variable ilk="argument" name="node" />
            <variable doc="" name="contents" />
            <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <variable attributes="private" doc="" name="_rendered" />
            <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
              <variable ilk="argument" name="buffer" />
            </scope>
          </scope>
          <scope doc="A list of any DOM-specific node objects" ilk="function" name="_DomNodeList" signature="_DomNodeList(nodes)">
            <variable citdl="Node[]" ilk="argument" name="nodes" />
            <variable doc="" name="contents" />
            <scope doc="" ilk="function" name="push" signature="push(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="" ilk="function" name="unshift" signature="unshift(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="" ilk="function" name="render" signature="render(context,buffer,instance)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
              <variable citdl="Node" ilk="argument" name="instance" />
            </scope>
            <scope doc="A really expensive way of checking to see how a rendering will look. Used in the ifchanged tag" ilk="function" name="dummyRender" signature="dummyRender(context,buffer,asNode)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="asNode" />
            </scope>
            <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer,instance)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="instance" />
            </scope>
            <scope doc="Used to create an identical copy of a NodeList, useful for things like the for tag." ilk="function" name="clone" signature="clone(buffer)">
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="rtrim" />
          </scope>
          <scope doc="A node to be processed as a variable" ilk="function" name="_DomVarNode" signature="_DomVarNode(str)">
            <variable ilk="argument" name="str" />
            <variable doc="" name="contents" />
            <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <variable attributes="private" doc="" name="_type" />
            <variable attributes="private" doc="" name="_rendered" />
            <variable attributes="private" doc="" name="_txt">
              <variable doc="" name="data" />
            </variable>
            <variable attributes="private" doc="" name="_root" />
            <variable attributes="private" doc="" name="_injected" />
            <variable attributes="private" doc="" name="_node">
              <variable doc="" name="parentNode" />
            </variable>
            <variable attributes="private" doc="" name="_src" />
            <variable attributes="private" doc="" name="_html" />
            <variable attributes="private" doc="" name="_div" />
            <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="clone" />
          </scope>
          <scope doc="Changes the parent during render/unrender" ilk="function" name="ChangeNode" signature="ChangeNode(node,up,root)">
            <variable ilk="argument" name="node" />
            <variable citdl="Boolean" ilk="argument" name="up" />
            <variable citdl="Bookean" ilk="argument" name="root" />
            <variable doc="" name="contents" />
            <variable doc="" name="up" />
            <variable doc="" name="root" />
            <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="clone" />
          </scope>
          <scope doc="Works on attributes" ilk="function" name="AttributeNode" signature="AttributeNode(key,value)">
            <variable ilk="argument" name="key" />
            <variable ilk="argument" name="value" />
            <variable doc="" name="key" />
            <variable doc="" name="value" />
            <variable doc="" name="contents" />
            <variable doc="" name="nodelist" />
            <variable attributes="private" citdl="Object" doc="" name="_pool" />
            <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
              <variable ilk="argument" name="buffer" />
            </scope>
          </scope>
          <scope doc="Adds a straight text node without any processing" ilk="function" name="_DomTextNode" signature="_DomTextNode(str)">
            <variable ilk="argument" name="str" />
            <variable doc="" name="contents">
              <variable doc="" name="data" />
            </variable>
            <variable doc="" name="upcoming" />
            <scope doc="" ilk="function" name="set" signature="set(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
              <variable ilk="argument" name="context" />
              <variable ilk="argument" name="buffer" />
            </scope>
            <scope doc="" ilk="function" name="isEmpty" />
            <scope doc="" ilk="function" name="clone" />
          </scope>
          <scope doc="Turn a simple array into a set of objects" ilk="function" name="_DomParser" signature="_DomParser(tokens)">
            <variable ilk="argument" name="tokens" />
            <variable doc="" name="contents" />
            <scope doc="" name="i" />
            <scope doc="" ilk="function" name="parse" signature="parse(stop_at)">
              <variable citdl="Array" ilk="argument" name="stop_at" />
            </scope>
            <scope doc="Returns the next token in the list." ilk="function" name="next_token" />
            <scope doc="" ilk="function" name="delete_first_token" />
            <scope doc="" ilk="function" name="skip_past" signature="skip_past(endtag)">
              <variable ilk="argument" name="endtag" />
            </scope>
            <scope doc="" ilk="function" name="create_variable_node" signature="create_variable_node(expr)">
              <variable ilk="argument" name="expr" />
            </scope>
            <scope doc="" ilk="function" name="create_text_node" signature="create_text_node(expr)">
              <variable ilk="argument" name="expr" />
            </scope>
            <scope doc="" ilk="function" name="getTemplate" signature="getTemplate(loc)">
              <variable citdl="String" ilk="argument" name="loc" />
            </scope>
          </scope>
          <variable citdl="Object" doc="" name="dom">
            <variable attributes="private" citdl="Object" doc="" name="_attributes" />
            <variable attributes="private" citdl="Object" doc="" name="_uppers" />
            <scope attributes="private" doc="" name="_re4" />
            <scope attributes="private" doc="" name="_reTrim" />
            <scope attributes="private" doc="" name="_reSplit" />
            <scope doc="" ilk="function" name="getTemplate" signature="getTemplate(text)">
              <variable ilk="argument" name="text" />
              <variable attributes="private" doc="" name="_commentable" />
            </scope>
            <scope doc="" ilk="function" name="tokenize" signature="tokenize(nodes)">
              <variable citdl="Node" ilk="argument" name="nodes" />
            </scope>
            <scope attributes="private" doc="" name="_swallowed" />
            <scope attributes="private" doc="" ilk="function" name="_tokenize" signature="_tokenize(node,tokens)">
              <variable citdl="Node" ilk="argument" name="node" />
              <variable citdl="Array" ilk="argument" name="tokens" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="__tokenize" signature="__tokenize(child,tokens)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="tokens" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="ext-dojo">
            <variable citdl="Object" doc="" name="NodeList" />
          </variable>
          <variable citdl="Object" doc="" name="filter">
            <variable citdl="Object" doc="" name="dates" />
            <variable citdl="Object" doc="" name="htmlstrings">
              <scope attributes="private" doc="" name="_linebreaksrn" />
              <scope attributes="private" doc="" name="_linebreaksn" />
              <scope attributes="private" doc="" name="_linebreakss" />
              <scope attributes="private" doc="" name="_linebreaksbr" />
              <scope attributes="private" doc="" name="_removetagsfind" />
              <scope attributes="private" doc="" name="_striptags" />
              <scope doc="Converts newlines into &amp;amp;lt;p&amp;amp;gt; and &amp;amp;lt;br /&amp;amp;gt;s" ilk="function" name="linebreaks" signature="linebreaks(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Converts newlines into &amp;amp;lt;br /&amp;amp;gt;s" ilk="function" name="linebreaksbr" signature="linebreaksbr(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Removes a space separated list of [X]HTML tags from the output&amp;amp;quot;" ilk="function" name="removetags" signature="removetags(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Strips all [X]HTML tags" ilk="function" name="striptags" signature="striptags(value)">
                <variable ilk="argument" name="value" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="integers">
              <scope doc="" ilk="function" name="add" signature="add(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Given a whole number, returns the 1-based requested digit of it desciprtion: 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer." ilk="function" name="get_digit" signature="get_digit(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="lists">
              <scope attributes="private" doc="" ilk="function" name="_dictsort" signature="_dictsort(a,b)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="b" />
              </scope>
              <scope doc="Takes a list of dicts, returns that list sorted by the property given in the argument." ilk="function" name="dictsort" signature="dictsort(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Takes a list of dicts, returns that list sorted in reverse order by the property given in the argument." ilk="function" name="dictsortreversed" signature="dictsortreversed(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Returns the first item in a list" ilk="function" name="first" signature="first(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Joins a list with a string, like Python&apos;s ``str.join(list)``" ilk="function" name="join" signature="join(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Returns the length of the value - useful for lists" ilk="function" name="length" signature="length(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Returns a boolean of whether the value&apos;s length is the argument" ilk="function" name="length_is" signature="length_is(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Returns a random item from the list" ilk="function" name="random" signature="random(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Returns a slice of the list." ilk="function" name="slice" signature="slice(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_unordered_list" signature="_unordered_list(value,tabs)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="tabs" />
              </scope>
              <scope doc="Recursively takes a self-nested list and returns an HTML unordered list -- WITHOUT opening and closing &amp;amp;lt;ul&amp;amp;gt; tags." ilk="function" name="unordered_list" signature="unordered_list(value)">
                <variable ilk="argument" name="value" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="logic">
              <scope doc="If value is unavailable, use given default" ilk="function" name="default_" signature="default_(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="If value is null, use given default" ilk="function" name="default_if_none" signature="default_if_none(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Returns true if the value is devisible by the argument&amp;amp;quot;" ilk="function" name="divisibleby" signature="divisibleby(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope attributes="private" doc="" name="_yesno" />
              <scope doc="arg being a comma-delimited string, value of true/false/none chooses the appropriate item from the string" ilk="function" name="yesno" signature="yesno(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="misc">
              <scope doc="Format the value like a &apos;human-readable&apos; file size (i.e. 13 KB, 4.1 MB, 102bytes, etc)." ilk="function" name="filesizeformat" signature="filesizeformat(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Returns a plural suffix if the value is not 1, for &apos;1 vote&apos; vs. &apos;2 votes&apos;" ilk="function" name="pluralize" signature="pluralize(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <variable attributes="private" citdl="Object" doc="" name="_phone2numeric">
                <scope doc="" name="a" />
                <scope doc="" name="b" />
                <scope doc="" name="c" />
                <scope doc="" name="d" />
                <scope doc="" name="e" />
                <scope doc="" name="f" />
                <scope doc="" name="g" />
                <scope doc="" name="h" />
                <scope doc="" name="i" />
                <scope doc="" name="j" />
                <scope doc="" name="k" />
                <scope doc="" name="l" />
                <scope doc="" name="m" />
                <scope doc="" name="n" />
                <scope doc="" name="o" />
                <scope doc="" name="p" />
                <scope doc="" name="r" />
                <scope doc="" name="s" />
                <scope doc="" name="t" />
                <scope doc="" name="u" />
                <scope doc="" name="v" />
                <scope doc="" name="w" />
                <scope doc="" name="x" />
                <scope doc="" name="y" />
              </variable>
              <scope doc="Takes a phone number and converts it in to its numerical equivalent" ilk="function" name="phone2numeric" signature="phone2numeric(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="A wrapper around toJson unless something better comes along" ilk="function" name="pprint" signature="pprint(value)">
                <variable ilk="argument" name="value" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="strings">
              <scope attributes="private" doc="" ilk="function" name="_urlquote" signature="_urlquote(url,safe)">
                <variable citdl="String" ilk="argument" name="url" />
                <variable citdl="String" ilk="argument" name="safe" />
              </scope>
              <scope doc="Adds slashes - useful for passing strings to JavaScript, for example." ilk="function" name="addslashes" signature="addslashes(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Capitalizes the first character of the value" ilk="function" name="capfirst" signature="capfirst(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Centers the value in a field of a given width" ilk="function" name="center" signature="center(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Removes all values of arg from the given string" ilk="function" name="cut" signature="cut(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope attributes="private" doc="" name="_fix_ampersands" />
              <scope doc="Replaces ampersands with ``&amp;amp;amp;amp;`` entities" ilk="function" name="fix_ampersands" signature="fix_ampersands(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Format a number according to arg" ilk="function" name="floatformat" signature="floatformat(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="" ilk="function" name="iriencode" signature="iriencode(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Displays text with line numbers" ilk="function" name="linenumbers" signature="linenumbers(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="" ilk="function" name="ljust" signature="ljust(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Converts a string into all lowercase" ilk="function" name="lower" signature="lower(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Returns the value turned into a list. For an integer, it&apos;s a list of digits. For a string, it&apos;s a list of characters." ilk="function" name="make_list" signature="make_list(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="" ilk="function" name="rjust" signature="rjust(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Converts to lowercase, removes non-alpha chars and converts spaces to hyphens" ilk="function" name="slugify" signature="slugify(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <variable attributes="private" citdl="Object" doc="" name="_strings" />
              <scope doc="Formats the variable according to the argument, a string formatting specifier. This specifier uses Python string formating syntax, with the exception that the leading &amp;amp;quot;%&amp;amp;quot; is dropped." ilk="function" name="stringformat" signature="stringformat(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="Converts a string into titlecase" ilk="function" name="title" signature="title(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope attributes="private" doc="" name="_truncatewords" />
              <scope doc="Truncates a string after a certain number of words" ilk="function" name="truncatewords" signature="truncatewords(value,arg)">
                <variable ilk="argument" name="value" />
                <variable citdl="Integer" doc="Number of words to truncate after" ilk="argument" name="arg" />
              </scope>
              <scope attributes="private" doc="" name="_truncate_words" />
              <scope attributes="private" doc="" name="_truncate_tag" />
              <variable attributes="private" citdl="Object" doc="" name="_truncate_singlets">
                <scope doc="" name="br" />
                <scope doc="" name="col" />
                <scope doc="" name="link" />
                <scope doc="" name="base" />
                <scope doc="" name="img" />
                <scope doc="" name="param" />
                <scope doc="" name="area" />
                <scope doc="" name="hr" />
                <scope doc="" name="input" />
              </variable>
              <scope doc="" ilk="function" name="truncatewords_html" signature="truncatewords_html(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="" ilk="function" name="upper" signature="upper(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="" ilk="function" name="urlencode" signature="urlencode(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope attributes="private" doc="" name="_urlize" />
              <scope attributes="private" doc="" name="_urlize2" />
              <scope doc="" ilk="function" name="urlize" signature="urlize(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="urlizetrunc" returns="&apos; + middle + &apos;&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;&apos; + trimmed + &apos;&amp;lt;/a&amp;gt;&apos;;" signature="urlizetrunc(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
              <scope doc="" ilk="function" name="wordcount" signature="wordcount(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="" ilk="function" name="wordwrap" signature="wordwrap(value,arg)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="arg" />
              </scope>
            </variable>
          </variable>
          <scope doc="" name="HtmlTemplate" />
          <variable citdl="Object" doc="" name="html" />
          <variable citdl="Object" doc="" name="render">
            <variable citdl="Object" doc="" name="dom">
              <scope doc="" ilk="function" name="Render" signature="Render(attachPoint,tpl)">
                <variable citdl="DOMNode" ilk="argument" name="attachPoint" />
                <variable citdl="dojox.dtl.DomTemplate" ilk="argument" name="tpl" />
                <variable attributes="private" doc="" name="_tpl" />
                <variable doc="" name="domNode" />
                <scope doc="" ilk="function" name="setAttachPoint" signature="setAttachPoint(node)">
                  <variable citdl="Node" ilk="argument" name="node" />
                </scope>
                <scope doc="" ilk="function" name="render" signature="render(context,tpl,buffer)">
                  <variable citdl="Object" ilk="argument" name="context" />
                  <variable citdl="dojox.dtl.DomTemplate" ilk="argument" name="tpl" />
                  <variable citdl="dojox.dtl.DomBuffer" ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="html">
              <scope doc="" name="Render" />
            </variable>
          </variable>
          <variable citdl="Object" doc="" name="tag">
            <variable citdl="Object" doc="" name="date">
              <scope doc="" ilk="function" name="NowNode" signature="NowNode(format,node)">
                <variable ilk="argument" name="format" />
                <variable ilk="argument" name="node" />
                <variable attributes="private" doc="" name="_format" />
                <variable doc="" name="format" />
                <variable doc="" name="contents" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="now" signature="now(parser,token)">
                <variable ilk="argument" name="parser" />
                <variable ilk="argument" name="token" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="loader">
              <scope doc="" ilk="function" name="BlockNode" signature="BlockNode(name,nodelist)">
                <variable ilk="argument" name="name" />
                <variable ilk="argument" name="nodelist" />
                <variable doc="" name="name" />
                <variable doc="" name="nodelist" />
                <scope doc="" ilk="function" name="super" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable doc="" name="rendered" />
                <variable doc="" name="context" />
                <variable doc="" name="parent" />
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="toString" />
              </scope>
              <scope doc="" ilk="function" name="ExtendsNode" signature="ExtendsNode(getTemplate,nodelist,shared,parent,key)">
                <variable ilk="argument" name="getTemplate" />
                <variable ilk="argument" name="nodelist" />
                <variable ilk="argument" name="shared" />
                <variable ilk="argument" name="parent" />
                <variable ilk="argument" name="key" />
                <variable doc="" name="getTemplate" />
                <variable doc="" name="nodelist" />
                <variable doc="" name="shared" />
                <variable doc="" name="parent" />
                <variable doc="" name="key" />
                <variable citdl="Object" doc="" name="parents" />
                <scope doc="" ilk="function" name="getParent" signature="getParent(context)">
                  <variable ilk="argument" name="context" />
                </scope>
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable doc="" name="rendered" />
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="toString" />
              </scope>
              <scope doc="" ilk="function" name="IncludeNode" signature="IncludeNode(path,constant,getTemplate,text,parsed)">
                <variable ilk="argument" name="path" />
                <variable ilk="argument" name="constant" />
                <variable ilk="argument" name="getTemplate" />
                <variable ilk="argument" name="text" />
                <variable ilk="argument" name="parsed" />
                <variable attributes="private" doc="" name="_path" />
                <variable doc="" name="constant" />
                <variable doc="" name="path" />
                <variable doc="" name="getTemplate" />
                <variable doc="" name="text" />
                <variable doc="" name="parsed" />
                <scope attributes="private" doc="" name="_cache" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <variable doc="" name="last" />
                <variable doc="" name="rendered" />
                <variable doc="" name="nodelist" />
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="logic">
              <scope doc="" name="IfNode" signature="IfNode(bools,trues,falses,type)">
                <variable ilk="argument" name="bools" />
                <variable ilk="argument" name="trues" />
                <variable ilk="argument" name="falses" />
                <variable ilk="argument" name="type" />
                <variable doc="" name="bools" />
                <variable doc="" name="trues" />
                <variable doc="" name="falses" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="IfEqualNode" signature="IfEqualNode(var1,var2,trues,falses,negate)">
                <variable ilk="argument" name="var1" />
                <variable ilk="argument" name="var2" />
                <variable ilk="argument" name="trues" />
                <variable ilk="argument" name="falses" />
                <variable ilk="argument" name="negate" />
                <variable doc="" name="var1" />
                <variable doc="" name="var2" />
                <variable doc="" name="trues" />
                <variable doc="" name="falses" />
                <variable doc="" name="negate" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="ForNode" signature="ForNode(assign,loop,reversed,nodelist)">
                <variable ilk="argument" name="assign" />
                <variable ilk="argument" name="loop" />
                <variable ilk="argument" name="reversed" />
                <variable ilk="argument" name="nodelist" />
                <variable doc="" name="assign" />
                <variable doc="" name="loop" />
                <variable doc="" name="reversed" />
                <variable doc="" name="nodelist" />
                <variable doc="" name="pool" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="loop">
              <scope doc="" ilk="function" name="CycleNode" signature="CycleNode(cyclevars,name,text,shared)">
                <variable ilk="argument" name="cyclevars" />
                <variable ilk="argument" name="name" />
                <variable ilk="argument" name="text" />
                <variable ilk="argument" name="shared" />
                <variable doc="" name="cyclevars" />
                <variable doc="" name="name" />
                <variable doc="" name="contents" />
                <variable doc="" name="shared">
                  <variable doc="" name="counter" />
                </variable>
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="IfChangedNode" signature="IfChangedNode(nodes,vars,shared)">
                <variable ilk="argument" name="nodes" />
                <variable ilk="argument" name="vars" />
                <variable ilk="argument" name="shared" />
                <variable doc="" name="nodes" />
                <variable attributes="private" doc="" name="_vars" />
                <variable doc="" name="shared">
                  <variable doc="" name="last" />
                  <variable doc="" name="counter" />
                </variable>
                <variable doc="" name="vars" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="RegroupNode" signature="RegroupNode(expression,key,alias)">
                <variable ilk="argument" name="expression" />
                <variable ilk="argument" name="key" />
                <variable ilk="argument" name="alias" />
                <variable attributes="private" doc="" name="_expression" />
                <variable doc="" name="expression" />
                <variable doc="" name="key" />
                <variable doc="" name="alias" />
                <scope attributes="private" doc="" ilk="function" name="_push" signature="_push(container,grouper,stack)">
                  <variable ilk="argument" name="container" />
                  <variable ilk="argument" name="grouper" />
                  <variable ilk="argument" name="stack" />
                </scope>
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="misc">
              <scope doc="" ilk="function" name="DebugNode" signature="DebugNode(text)">
                <variable ilk="argument" name="text" />
                <variable doc="" name="text" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="toString" />
              </scope>
              <scope doc="" ilk="function" name="FilterNode" signature="FilterNode(varnode,nodelist)">
                <variable ilk="argument" name="varnode" />
                <variable ilk="argument" name="nodelist" />
                <variable attributes="private" doc="" name="_varnode" />
                <variable attributes="private" doc="" name="_nodelist" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="FirstOfNode" signature="FirstOfNode(vars,text)">
                <variable ilk="argument" name="vars" />
                <variable ilk="argument" name="text" />
                <variable attributes="private" doc="" name="_vars" />
                <variable doc="" name="vars" />
                <variable doc="" name="contents" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="SpacelessNode" signature="SpacelessNode(nodelist,text)">
                <variable ilk="argument" name="nodelist" />
                <variable ilk="argument" name="text" />
                <variable doc="" name="nodelist" />
                <variable doc="" name="contents" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope attributes="private" doc="" ilk="function" name="_isEmpty" signature="_isEmpty(node)">
                  <variable ilk="argument" name="node" />
                </scope>
                <scope attributes="private" doc="" ilk="function" name="_watch" signature="_watch(node)">
                  <variable ilk="argument" name="node" />
                </scope>
                <scope attributes="private" doc="" ilk="function" name="_watchParent" signature="_watchParent(node)">
                  <variable ilk="argument" name="node" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="TemplateTagNode" signature="TemplateTagNode(tag,text)">
                <variable ilk="argument" name="tag" />
                <variable ilk="argument" name="text" />
                <variable doc="" name="tag" />
                <variable doc="" name="contents" />
                <variable citdl="Object" doc="" name="mapping">
                  <scope doc="" name="openblock" />
                  <scope doc="" name="closeblock" />
                  <scope doc="" name="openvariable" />
                  <scope doc="" name="closevariable" />
                  <scope doc="" name="openbrace" />
                  <scope doc="" name="closebrace" />
                  <scope doc="" name="opencomment" />
                  <scope doc="" name="closecomment" />
                </variable>
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="WidthRatioNode" signature="WidthRatioNode(current,max,width,text)">
                <variable ilk="argument" name="current" />
                <variable ilk="argument" name="max" />
                <variable ilk="argument" name="width" />
                <variable ilk="argument" name="text" />
                <variable doc="" name="current" />
                <variable doc="" name="max" />
                <variable doc="" name="width" />
                <variable doc="" name="contents" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="WithNode" signature="WithNode(target,alias,nodelist)">
                <variable ilk="argument" name="target" />
                <variable ilk="argument" name="alias" />
                <variable ilk="argument" name="nodelist" />
                <variable doc="" name="target" />
                <variable doc="" name="alias" />
                <variable doc="" name="nodelist" />
                <scope doc="" ilk="function" name="render" signature="render(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="unrender" signature="unrender(context,buffer)">
                  <variable ilk="argument" name="context" />
                  <variable ilk="argument" name="buffer" />
                </scope>
                <scope doc="" ilk="function" name="clone" signature="clone(buffer)">
                  <variable ilk="argument" name="buffer" />
                </scope>
              </scope>
            </variable>
          </variable>
          <variable citdl="Object" doc="" name="utils">
            <variable citdl="Object" doc="" name="date">
              <scope doc="" ilk="function" name="DateFormat" signature="DateFormat(format)">
                <variable citdl="String" ilk="argument" name="format" />
                <scope doc="Time, in 12-hour hours and minutes, with minutes left off if they&apos;re zero." ilk="function" name="f" />
                <scope doc="Month abbreviation in Associated Press style. Proprietary extension." ilk="function" name="N" />
                <scope doc="Time, in 12-hour hours, minutes and &apos;a.m.&apos;/&apos;p.m.&apos;, with minutes left off if they&apos;re zero and the strings &apos;midnight&apos; and &apos;noon&apos; if appropriate." ilk="function" name="P" />
              </scope>
              <scope doc="" ilk="function" name="format" signature="format(date,format)">
                <variable citdl="Date" ilk="argument" name="date" />
                <variable citdl="String" ilk="argument" name="format" />
              </scope>
              <scope doc="Takes two datetime objects and returns the time between then and now as a nicely formatted string, e.g &amp;amp;quot;10 minutes&amp;amp;quot;" ilk="function" name="timesince" signature="timesince(d,now)">
                <variable ilk="argument" name="d" />
                <variable ilk="argument" name="now" />
              </scope>
              <scope attributes="private" doc="" name="_chunks" />
              <scope attributes="private" doc="" name="_months_ap" />
            </variable>
          </variable>
        </variable>
        <variable citdl="Object" doc="" name="editor">
          <scope name="plugins">
            <scope doc="Adds an icon to the Editor toolbar that when clicked, opens a system dialog Although the toolbar icon is a tiny &amp;amp;quot;image&amp;amp;quot; the uploader could be used for any file type" ilk="function" name="UploadImage">
              <scope doc="" name="tempImageUrl" />
              <scope doc="" name="iconClassPrefix" />
              <scope doc="" name="useDefaultCommand" />
              <scope doc="" name="uploadUrl" />
              <variable doc="" name="fileInput" />
              <scope doc="" name="label" />
              <scope attributes="private" doc="" ilk="function" name="_initButton" />
              <scope doc="" ilk="function" name="createFileInput" />
              <scope doc="" ilk="function" name="onComplete" signature="onComplete(data,ioArgs,widgetRef)">
                <variable ilk="argument" name="data" />
                <variable ilk="argument" name="ioArgs" />
                <variable ilk="argument" name="widgetRef" />
              </scope>
              <scope doc="" ilk="function" name="insertTempImage" />
              <variable doc="" name="command" />
              <variable doc="" name="currentImageId" />
            </scope>
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="embed">
          <scope name="Flash">
            <scope doc="" ilk="function" name="place" signature="place(kwArgs,node)">
              <variable ilk="argument" name="kwArgs" />
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <variable citdl="Object" doc="" name="IE">
            <variable citdl="Object" doc="" name="flash" />
          </variable>
          <scope doc="A widget you can use to embed either a Flash or Quicktime movie." ilk="function" name="Object">
            <variable citdl="Number" doc="The width of the movie. If not provided, the width of this.domNode is used." name="width" />
            <scope citdl="Number" doc="The height of the movie. If not provided, the height of this.domNode is used." name="height" />
            <scope citdl="String" doc="The URL of the movie to embed." name="src" />
            <variable citdl="HTMLEmbed" doc="The eventual reference to the movie embedded. If you are looking to script control over the movie, you&apos;d access it this way." name="movie" />
            <variable citdl="Object" doc="A property bag that is created postCreate. Any additional attributes you define on your domNode will be collected and placed into this, which will then be passed to the movie constructor." name="params" />
            <scope citdl="RegExp" doc="Expression used on the src property to determine if this is Flash or Quicktime." name="reFlash" />
            <scope citdl="RegExp" doc="Expression used on the src property to determine if this is Flash or Quicktime." name="reQtMovie" />
            <scope citdl="RegExp" doc="Expression used on the src property to determine if this is Flash or Quicktime." name="reQtAudio" />
            <scope doc="" ilk="function" name="postCreate" />
          </scope>
          <scope attributes="private" doc="Returns a reference to the HTMLObject/HTMLEmbed that is created to place the movie in the document. You can use this either with or without the new operator. Note that with any other DOM manipulation, you must wait until the document is finished loading before trying to use this." ilk="function" name="Quicktime" returns="HTMLObject" signature="Quicktime(kwArgs,node)">
            <variable citdl="dojox.embed.__QTArgs" ilk="argument" name="kwArgs" />
            <variable citdl="DOMNode" ilk="argument" name="node" />
            <scope doc="" name="supported" />
            <variable citdl="Object" doc="" name="version">
              <scope doc="" name="major" />
              <scope doc="" name="minor" />
              <scope doc="" name="rev" />
            </variable>
            <scope doc="" name="minSupported" />
            <scope doc="" name="available" />
            <scope doc="" name="initialized" />
            <scope doc="" ilk="function" name="onInitialize" />
            <scope attributes="private" doc="" ilk="function" name="place" returns="QuickTimeObject" signature="place(kwArgs,node)">
              <variable ilk="argument" name="kwArgs" />
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <scope attributes="private" doc="" ilk="function" name="__QTArgs" signature="__QTArgs(path,id,width,height,params,redirect)">
            <variable citdl="String" doc="The URL of the movie to embed." ilk="argument" name="path" />
            <variable citdl="String" doc="A unique key that will be used as the id of the created markup. If you don&apos;t provide this, a unique key will be generated." ilk="argument" name="id" />
            <variable citdl="Number" doc="The width of the embedded movie; the default value is 320px." ilk="argument" name="width" />
            <variable citdl="Number" doc="The height of the embedded movie; the default value is 240px" ilk="argument" name="height" />
            <variable citdl="Object" doc="A set of key/value pairs that you want to define in the resultant markup." ilk="argument" name="params" />
            <variable citdl="String" doc="A url to redirect the browser to if the current QuickTime version is not supported." ilk="argument" name="redirect" />
            <variable citdl="String?" doc="A unique key that will be used as the id of the created markup. If you don&apos;t provide this, a unique key will be generated." name="id" />
            <variable citdl="String" doc="The URL of the movie to embed." name="path" />
            <variable citdl="Number?" doc="The width of the embedded movie; the default value is 320px." name="width" />
            <variable citdl="Number?" doc="The height of the embedded movie; the default value is 240px" name="height" />
            <variable citdl="Object?" doc="A set of key/value pairs that you want to define in the resultant markup." name="params" />
            <variable citdl="String?" doc="A url to redirect the browser to if the current QuickTime version is not supported." name="redirect" />
          </scope>
        </variable>
        <variable citdl="Object" doc="Various encoding algorithms, including crypto and digests." name="encoding">
          <variable citdl="Object" doc="" name="ascii85">
            <scope attributes="private" doc="encodes input data in ascii85 string" ilk="function" name="encode" returns="String" signature="encode(input)">
              <variable citdl="Array" doc="an array of numbers (0-255) to encode" ilk="argument" name="input" />
            </scope>
            <scope doc="decodes the input string back to array of numbers" ilk="function" name="decode" signature="decode(input)">
              <variable citdl="String" doc="the input string to decode" ilk="argument" name="input" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="base64">
            <scope attributes="private" doc="" ilk="function" name="encode" returns="string" signature="encode(ba)">
              <variable citdl="byte[]" ilk="argument" name="ba" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="decode" returns="string|byte[]" signature="decode(str)">
              <variable citdl="string" ilk="argument" name="str" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="bits">
            <scope doc="" ilk="function" name="OutputStream">
              <scope doc="" ilk="function" name="reset" />
              <variable doc="" name="buffer" />
              <variable doc="" name="accumulator" />
              <variable doc="" name="available" />
              <scope doc="" ilk="function" name="putBits" signature="putBits(value,width)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="width" />
              </scope>
              <scope doc="" ilk="function" name="getWidth" />
              <scope doc="" ilk="function" name="getBuffer" />
            </scope>
            <scope doc="" ilk="function" name="InputStream" signature="InputStream(buffer,width)">
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="width" />
              <variable doc="" name="buffer" />
              <variable doc="" name="width" />
              <variable doc="" name="bbyte" />
              <scope doc="" ilk="function" name="getBits" signature="getBits(width)">
                <variable ilk="argument" name="width" />
              </scope>
              <variable doc="" name="bit" />
              <scope doc="" ilk="function" name="getWidth" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="compression">
            <variable citdl="Object" doc="" name="lzw">
              <scope doc="" ilk="function" name="Encoder" signature="Encoder(n)">
                <variable ilk="argument" name="n" />
                <variable doc="" name="size" />
                <scope doc="" ilk="function" name="init" />
                <variable doc="" name="dict" />
                <variable doc="" name="width" />
                <variable doc="" name="p">
                  <variable doc="" name="length" />
                </variable>
                <scope doc="" ilk="function" name="encode" signature="encode(value,stream)">
                  <variable ilk="argument" name="value" />
                  <variable ilk="argument" name="stream" />
                </scope>
                <scope doc="" ilk="function" name="flush" signature="flush(stream)">
                  <variable ilk="argument" name="stream" />
                </scope>
              </scope>
              <scope doc="" ilk="function" name="Decoder" signature="Decoder(n)">
                <variable ilk="argument" name="n" />
                <variable doc="" name="size" />
                <scope doc="" ilk="function" name="init" />
                <variable doc="" name="codes" />
                <variable doc="" name="width" />
                <variable doc="" name="p" />
                <scope doc="" ilk="function" name="decode" signature="decode(stream)">
                  <variable ilk="argument" name="stream" />
                </scope>
              </scope>
            </variable>
            <scope doc="" ilk="function" name="Splay" signature="Splay(n)">
              <variable ilk="argument" name="n" />
              <variable doc="" name="up" />
              <variable doc="" name="left" />
              <variable doc="" name="right" />
              <scope doc="" ilk="function" name="reset" />
              <scope doc="" ilk="function" name="splay" signature="splay(i)">
                <variable ilk="argument" name="i" />
              </scope>
              <scope doc="" ilk="function" name="encode" signature="encode(value,stream)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="stream" />
              </scope>
              <scope doc="" ilk="function" name="decode" signature="decode(stream)">
                <variable ilk="argument" name="stream" />
              </scope>
            </scope>
            <variable citdl="Object" doc="" name="splay" />
          </variable>
          <variable citdl="Object" doc="" name="crypto">
            <scope attributes="private" doc="" ilk="function" name="Blowfish" returns="string|array">
              <scope name="initialized" />
              <variable attributes="private" doc="" ilk="function" name="encrypt" returns="string|array" signature="encrypt(plaintext,key,ao)">
                <variable citdl="string" ilk="argument" name="plaintext" />
                <variable citdl="string" ilk="argument" name="key" />
                <variable citdl="object" ilk="argument" name="ao" />
              </variable>
              <variable attributes="private" doc="" ilk="function" name="decrypt" returns="string|array" signature="decrypt(ciphertext,key,ao)">
                <variable citdl="string" ilk="argument" name="ciphertext" />
                <variable citdl="string" ilk="argument" name="key" />
                <variable citdl="object" ilk="argument" name="ao" />
              </variable>
              <variable attributes="private" doc="" ilk="function" name="getIV" returns="string|array" signature="getIV(outputType)">
                <variable citdl="dojox.encoding.crypto.outputTypes" ilk="argument" name="outputType" />
              </variable>
              <variable attributes="private" doc="" ilk="function" name="setIV" returns="string|array" signature="setIV(data,inputType)">
                <variable citdl="string" ilk="argument" name="data" />
                <variable citdl="dojox.encoding.crypto.outputTypes" ilk="argument" name="inputType" />
              </variable>
            </scope>
            <scope doc="" name="SimpleAES" />
            <variable citdl="Object" doc="" name="cipherModes">
              <scope doc="" name="ECB" />
            </variable>
            <variable citdl="Object" doc="" name="outputTypes">
              <scope doc="" name="Base64" />
            </variable>
            <variable attributes="private" citdl="Object" doc="" name="_base" />
          </variable>
          <variable citdl="Object" doc="" name="digests">
            <scope attributes="private" doc="" ilk="function" name="MD5" returns="word[]|string" signature="MD5(data,outputType)">
              <variable citdl="string" ilk="argument" name="data" />
              <variable citdl="dojox.encoding.digests.outputTypes" ilk="argument" name="outputType" />
              <scope attributes="private" doc="" ilk="function" name="_hmac" returns="word[]|string" signature="_hmac(data,key,outputType)">
                <variable citdl="string" ilk="argument" name="data" />
                <variable citdl="string" ilk="argument" name="key" />
                <variable citdl="dojox.encoding.digests.outputTypes" ilk="argument" name="outputType" />
              </scope>
            </scope>
            <scope attributes="private" doc="Computes the SHA1 digest of the data, and returns the result according to output type." ilk="function" name="SHA1" returns="word[]|string" signature="SHA1(data,outputType)">
              <variable citdl="String" ilk="argument" name="data" />
              <variable citdl="dojox.encoding.digests.outputTypes" ilk="argument" name="outputType" />
              <scope attributes="private" doc="computes the digest of data, and returns the result according to type outputType" ilk="function" name="_hmac" returns="word[]|string" signature="_hmac(data,key,outputType)">
                <variable citdl="string" ilk="argument" name="data" />
                <variable citdl="string" ilk="argument" name="key" />
                <variable citdl="dojox.encoding.digests.outputTypes" ilk="argument" name="outputType" />
              </scope>
            </scope>
            <variable citdl="Object" doc="Enumeration for input and output encodings." name="outputTypes">
              <scope doc="" name="Base64" />
            </variable>
            <scope attributes="private" doc="add a pair of words together with rollover" ilk="function" name="addWords" returns="word" signature="addWords(a,b)">
              <variable citdl="word" ilk="argument" name="a" />
              <variable citdl="word" ilk="argument" name="b" />
            </scope>
            <scope attributes="private" doc="convert a string to a word array" ilk="function" name="stringToWord" returns="word[]" signature="stringToWord(s)">
              <variable citdl="string" ilk="argument" name="s" />
            </scope>
            <scope attributes="private" doc="convert an array of words to a string" ilk="function" name="wordToString" returns="string" signature="wordToString(wa)">
              <variable citdl="word[]" ilk="argument" name="wa" />
            </scope>
            <scope attributes="private" doc="convert an array of words to a hex tab" ilk="function" name="wordToHex" returns="string" signature="wordToHex(wa)">
              <variable citdl="word[]" ilk="argument" name="wa" />
            </scope>
            <scope attributes="private" doc="convert an array of words to base64 encoding, should be more efficient than using dojox.encoding.base64" ilk="function" name="wordToBase64" returns="string" signature="wordToBase64(wa)">
              <variable citdl="word[]" ilk="argument" name="wa" />
            </scope>
            <variable attributes="private" citdl="Object" doc="" name="_base" />
          </variable>
          <variable citdl="Object" doc="" name="easy64">
            <scope attributes="private" doc="encodes input data in easy64 string" ilk="function" name="encode" returns="String" signature="encode(input)">
              <variable citdl="Array" doc="an array of numbers (0-255) to encode" ilk="argument" name="input" />
            </scope>
            <scope doc="decodes the input string back to array of numbers" ilk="function" name="decode" signature="decode(input)">
              <variable citdl="String" doc="the input string to decode" ilk="argument" name="input" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="Utilities to embed and communicate with Flash-based objects" name="flash">
          <scope doc="" name="ready" />
          <scope doc="" name="url" />
          <scope attributes="private" doc="" name="_visible" />
          <scope attributes="private" doc="" name="_loadedListeners" />
          <scope attributes="private" doc="" name="_installingListeners" />
          <scope doc="Sets the SWF files and versions we are using." ilk="function" name="setSwf" signature="setSwf(url,visible)">
            <variable citdl="String" doc="The URL to this Flash file." ilk="argument" name="url" />
            <variable citdl="boolean" doc="Whether the Flash file is visible or not. If it is not visible we hide it off the screen. This defaults to true (i.e. the Flash file is visible)." ilk="argument" name="visible" />
            <variable citdl="String" doc="The URL to this Flash file." name="url" />
            <variable attributes="private" doc="" name="_visible" />
          </scope>
          <scope doc="Adds a listener to know when Flash is finished loading. Useful if you don&apos;t want a dependency on dojo.event." ilk="function" name="addLoadedListener" signature="addLoadedListener(listener)">
            <variable doc="A function that will be called when Flash is done loading." ilk="function" name="listener" />
          </scope>
          <scope doc="Adds a listener to know if Flash is being installed. Useful if you don&apos;t want a dependency on dojo.event." ilk="function" name="addInstallingListener" signature="addInstallingListener(listener)">
            <variable doc="A function that will be called if Flash is being installed" ilk="function" name="listener" />
          </scope>
          <scope doc="Called back when the Flash subsystem is finished loading." ilk="function" name="loaded" />
          <scope doc="Called if Flash is being installed." ilk="function" name="installing" />
          <scope attributes="private" doc="" ilk="function" name="_initialize" />
          <scope doc="A class that helps us determine whether Flash is available." ilk="function" name="Info" />
          <scope doc="A class that is used to write out the Flash object into the page." ilk="function" name="Embed" signature="Embed(visible)">
            <variable ilk="argument" name="visible" />
            <variable attributes="private" doc="" name="_visible" />
          </scope>
          <scope doc="A class that is used to communicate between Flash and JavaScript." ilk="function" name="Communicator" />
          <scope doc="Helps install Flash plugin if needed." ilk="function" name="Install" />
          <scope doc="" name="info" />
          <variable attributes="private" citdl="Object" doc="" name="_base" />
        </variable>
        <variable citdl="Object" doc="" name="form">
          <scope doc="The individual items for a CheckedMultiSelect" ilk="function" name="_CheckedMultiSelectItem">
            <scope doc="" name="widgetsInTemplate" />
            <scope doc="" name="templatePath" />
            <scope doc="" name="baseClass" />
            <scope citdl="dojox.form.__SelectOption" doc="The option that is associated with this item" name="option">
              <variable doc="" name="selected" />
            </scope>
            <scope doc="" name="parent" />
            <variable citdl="boolean" doc="Whether or not this widget is disabled" name="disabled" />
            <variable citdl="boolean" doc="Whether or not this widget is readOnly" name="readOnly" />
            <scope doc="Set the appropriate _subClass value - based on if we are multi- or single-select" ilk="function" name="postMixInProperties" />
            <scope doc="Set innerHTML here - since the template gets messed up sometimes with rich text" ilk="function" name="postCreate" />
            <scope attributes="private" doc="Called to force the select to match the state of the check box (only on click of the checkbox) Radio-based calls _setValueAttr instead." ilk="function" name="_changeBox" />
            <scope attributes="private" doc="Sets the hover state depending on mouse state (passes through to the check box)" ilk="function" name="_onMouse" signature="_onMouse(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Sets the click state (passes through to the check box)" ilk="function" name="_onClick" signature="_onClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Called to force the box to match the state of the select" ilk="function" name="_updateBox" />
            <scope attributes="private" doc="Disables (or enables) all the children as well" ilk="function" name="_setDisabledAttr" signature="_setDisabledAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Sets read only (or unsets) all the children as well" ilk="function" name="_setReadOnlyAttr" signature="_setReadOnlyAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <variable attributes="private" doc="" name="_type" />
            <scope name="labelNode">
              <variable doc="" name="innerHTML" />
            </scope>
          </scope>
          <scope doc="Extends the core dijit MultiSelect to provide a &amp;amp;quot;checkbox&amp;amp;quot; selector" ilk="function" name="CheckedMultiSelect">
            <scope doc="" name="templateString" />
            <scope doc="" name="templatePath" />
            <scope doc="" name="baseClass" />
            <scope attributes="private" doc="Cancels the mousedown event to prevent others from stealing focus" ilk="function" name="_mouseDown" signature="_mouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_addOptionItem" signature="_addOptionItem(option)">
              <variable citdl="dojox.form.__SelectOption" ilk="argument" name="option" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_updateSelection" />
            <scope attributes="private" doc="" ilk="function" name="_getChildren" />
            <scope doc="Invert the selection" ilk="function" name="invertSelection" signature="invertSelection(onChange)">
              <variable citdl="Boolean" doc="If null, onChange is not fired." ilk="argument" name="onChange" />
            </scope>
            <scope attributes="private" doc="Disable (or enable) all the children as well" ilk="function" name="_setDisabledAttr" signature="_setDisabledAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Sets read only (or unsets) all the children as well" ilk="function" name="_setReadOnlyAttr" signature="_setReadOnlyAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="uninitialize" />
            <variable doc="" name="readOnly" />
          </scope>
          <scope doc="A validating, serializable, range-bound date text box with a popup calendar" ilk="function" name="DateTextBox">
            <scope citdl="String" doc="The popup widget to use. In this case, a calendar with Day, Month and Year views." name="popupClass" />
            <scope attributes="private" doc="" name="_selector" />
            <scope attributes="private" doc="" ilk="function" name="_open" />
          </scope>
          <scope doc="A validating, serializable, range-bound date text box with a popup calendar that contains just months." ilk="function" name="DayTextBox">
            <scope citdl="String" doc="The popup widget to use. In this case, a calendar with just a Month view." name="popupClass" />
            <scope doc="" ilk="function" name="format" signature="format(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="validator" signature="validator(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_open" />
            <scope name="_picker">
              <variable doc="" name="onValueSelected" />
            </scope>
          </scope>
          <scope doc="A validating, serializable, range-bound date text box with a popup calendar that contains just months." ilk="function" name="MonthTextBox">
            <scope citdl="String" doc="The popup widget to use. In this case, a calendar with just a Month view." name="popupClass" />
            <scope doc="" ilk="function" name="format" signature="format(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="validator" signature="validator(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_open" />
            <scope name="_picker">
              <variable doc="" name="onValueSelected" />
            </scope>
          </scope>
          <scope doc="A validating, serializable, range-bound date text box with a popup calendar that contains only years" ilk="function" name="YearTextBox">
            <scope citdl="String" doc="The popup widget to use. In this case, a calendar with just a Year view." name="popupClass" />
            <scope doc="" ilk="function" name="format" signature="format(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="validator" signature="validator(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_open" />
            <scope name="_picker">
              <variable doc="" name="onValueSelected" />
            </scope>
          </scope>
          <scope doc="This is a &amp;amp;quot;Styleable&amp;amp;quot; select box - it is basically a DropDownButton which can take as its input a &amp;amp;lt;select&amp;amp;gt;." ilk="function" name="DropDownSelect">
            <variable citdl="Object" doc="Add in our style to be applied to the focus node" name="attributeMap" />
            <scope doc="" name="baseClass" />
            <scope doc="" name="templatePath" />
            <scope citdl="Boolean" doc="Can be true or false, default is false." name="required" />
            <variable citdl="String" doc="Shows current state (ie, validation result) of input (Normal, Warning, or Error)" name="state" />
            <scope citdl="String[" doc="See description of dijit.Tooltip.defaultPosition for details on this parameter." name="tooltipPosition" />
            <scope citdl="string" doc="What to display in an &amp;amp;quot;empty&amp;amp;quot; dropdown" name="emptyLabel" />
            <variable attributes="private" citdl="boolean" doc="Whether or not we have been loaded" name="_isLoaded" />
            <variable attributes="private" citdl="boolean" doc="Whether or not our children have been loaded" name="_childrenLoaded" />
            <scope attributes="private" doc="Set the value to be the first, or the selected index" ilk="function" name="_fillContent" />
            <scope attributes="private" doc="For the given option, return the menu item that should be used to display it. This can be overridden as needed" ilk="function" name="_getMenuItemForOption" signature="_getMenuItemForOption(option)">
              <variable citdl="dojox.form.__SelectOption" ilk="argument" name="option" />
            </scope>
            <scope attributes="private" doc="For the given option, add a option to our dropdown If the option doesn&apos;t have a value, then a separator is added in that place." ilk="function" name="_addOptionItem" signature="_addOptionItem(option)">
              <variable citdl="dojox.form.__SelectOption" ilk="argument" name="option" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getChildren" />
            <scope attributes="private" doc="Resets the menu and the length attribute of the button - and ensures that the label is appropriately set." ilk="function" name="_loadChildren" />
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" signature="_setValueAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="sets the display for the given value (or values)" ilk="function" name="_setDisplay" signature="_setDisplay(newDisplay)">
              <variable citdl="String" ilk="argument" name="newDisplay" />
            </scope>
            <scope doc="Called by oninit, onblur, and onkeypress." ilk="function" name="validate" signature="validate(isFocused)">
              <variable citdl="Boolean" ilk="argument" name="isFocused" />
            </scope>
            <scope doc="Whether or not this is a valid value" ilk="function" name="isValid" signature="isValid(isFocused)">
              <variable citdl="Boolean" ilk="argument" name="isFocused" />
            </scope>
            <scope doc="Overridden so that the state will be cleared." ilk="function" name="reset" />
            <scope doc="set the missing message" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_onMenuMouseup" signature="_onMenuMouseup(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="isLoaded" />
            <scope doc="populates the menu" ilk="function" name="loadDropDown" signature="loadDropDown(loadCallback)">
              <variable ilk="function" name="loadCallback" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setReadOnlyAttr" signature="_setReadOnlyAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setDisabledAttr" signature="_setDisabledAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="uninitialize" signature="uninitialize(preserveDom)">
              <variable ilk="argument" name="preserveDom" />
            </scope>
            <variable doc="" name="value" />
            <variable doc="" name="dropDown" />
            <scope name="containerNode">
              <variable doc="" name="innerHTML" />
            </scope>
            <variable attributes="private" doc="" name="_message" />
            <variable attributes="private" doc="" name="_missingMsg" />
            <variable attributes="private" doc="" name="_iReadOnly" />
            <scope name="options">
              <variable doc="" name="length" />
            </scope>
            <variable doc="" name="readOnly" />
            <variable attributes="private" doc="" name="_iDisabled" />
          </scope>
          <scope doc="A dropdown-based select stack." ilk="function" name="DropDownStack" />
          <scope doc="A styled input type=&amp;amp;quot;file&amp;amp;quot;" ilk="function" name="FileInput">
            <scope citdl="String" doc="the title text of the &amp;amp;quot;Browse&amp;amp;quot; button" name="label" />
            <scope citdl="String" doc="the title of the &amp;amp;quot;Cancel&amp;amp;quot; button" name="cancelText" />
            <scope citdl="String" doc="ugh, this should be pulled from this.domNode" name="name" />
            <scope doc="" name="templatePath" />
            <scope doc="listen for changes on our real file input" ilk="function" name="startup" />
            <scope attributes="private" doc="set the content of the upper input based on the semi-hidden file input" ilk="function" name="_matchValue" />
            <scope doc="method to allow use to change button label" ilk="function" name="setLabel" signature="setLabel(label,cssClass)">
              <variable citdl="String" ilk="argument" name="label" />
              <variable citdl="String" ilk="argument" name="cssClass" />
            </scope>
            <scope doc="on click of cancel button, since we can&apos;t clear the input because of security reasons, we destroy it, and add a new one in it&apos;s place." ilk="function" name="reset" signature="reset(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_listener" />
            <variable attributes="private" doc="" name="_keyListener" />
            <scope name="inputNode">
              <variable doc="" name="value" />
            </scope>
            <scope name="cancelNode" />
            <scope name="titleNode">
              <variable doc="" name="innerHTML" />
            </scope>
            <variable doc="" name="fileInput" />
          </scope>
          <scope doc="An extension on dojox.form.FileInput providing background upload progress" ilk="function" name="FileInputAuto">
            <scope citdl="String" doc="the URL where our background FileUpload will be sent" name="url" />
            <scope citdl="Integer" doc="time in ms before an un-focused widget will wait before uploading the file to the url=&amp;amp;quot;&amp;amp;quot; specified default: 2 seconds" name="blurDelay" />
            <scope citdl="Integer" doc="The time in ms to use as the generic timing mechanism for the animations set to 1 or 0 for &amp;amp;quot;immediate respose&amp;amp;quot;" name="duration" />
            <scope citdl="String" doc="FIXME: i18n somehow?" name="uploadMessage" />
            <scope citdl="String" doc="Event which triggers the upload. Defaults to onblur, sending the file selected &apos;blurDelay&apos; milliseconds after losing focus. Set to &amp;amp;quot;onchange&amp;amp;quot; with a low blurDelay to send files immediately after uploading." name="triggerEvent" />
            <variable attributes="private" doc="" name="_sent" />
            <scope doc="" name="templatePath" />
            <scope doc="add our extra blur listeners" ilk="function" name="startup" />
            <scope attributes="private" doc="clear the upload timer" ilk="function" name="_onFocus" />
            <scope attributes="private" doc="start the upload timer" ilk="function" name="_onBlur" />
            <scope doc="set the text of the progressbar  innerHTML throws errors in IE! so use DOM manipulation instead this.overlay.innerHTML = title;" ilk="function" name="setMessage" signature="setMessage(title)">
              <variable citdl="String" ilk="argument" name="title" />
            </scope>
            <scope attributes="private" doc="triggers the chain of events needed to upload a file in the background." ilk="function" name="_sendFile" signature="_sendFile(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_handleSend" signature="_handleSend(data,ioArgs)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="ioArgs" />
            </scope>
            <scope doc="accomodate our extra focusListeners" ilk="function" name="reset" signature="reset(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="stub function fired when an upload has finished." ilk="function" name="onComplete" signature="onComplete(data,ioArgs,widgetRef)">
              <variable citdl="the" doc="raw data found in the first [TEXTAREA] tag of the post url" ilk="argument" name="data" />
              <variable citdl="the" doc="dojo.Deferred data being passed from the handle: callback" ilk="argument" name="ioArgs" />
              <variable citdl="this" doc="widget pointer, so you can set this.overlay to a completed/error message easily" ilk="argument" name="widgetRef" />
            </scope>
            <variable attributes="private" doc="" name="_blurListener" />
            <variable attributes="private" doc="" name="_focusListener" />
            <variable attributes="private" doc="" name="_blurTimer" />
            <variable attributes="private" doc="" name="_sending" />
            <scope name="overlay" />
            <variable doc="" name="fileInput" />
            <scope name="fakeNodeHolder" />
          </scope>
          <scope doc="An extended version of dojox.form.FileInputAuto that does not display an input node, but rather only a button and otherwise behaves just like FileInputAuto" ilk="function" name="FileInputBlind">
            <scope doc="hide our fileInput input field" ilk="function" name="startup" />
            <scope attributes="private" doc="in this case, set the button under where the visible button is" ilk="function" name="_fixPosition" />
            <scope doc="onclick, we need to reposition our newly created input type=&amp;amp;quot;file&amp;amp;quot;" ilk="function" name="reset" signature="reset(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_off" />
            <scope name="inputNode" />
          </scope>
          <scope doc="A validating text box tied to a file picker popup" ilk="function" name="FilePickerTextBox">
            <scope doc="" name="baseClass" />
            <scope doc="" name="templatePath" />
            <scope citdl="Integer" doc="Delay in milliseconds between when user types something and we start searching based on that value   _stopClickEvent: boolean Set to false since we want to handle our own click events" name="searchDelay" />
            <scope attributes="private" doc="" name="_stopClickEvents" />
            <variable citdl="item" doc="The item, in our store, of the directory relating to our value" name="valueItem" />
            <scope citdl="number" doc="The number of panes to display in our box (if we don&apos;t have any minPaneWidth specified by our constraints)" name="numPanes" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="sets the value of this widget" ilk="function" name="_setValueAttr" signature="_setValueAttr(value,priorityChange,fromWidget)">
              <variable citdl="string" ilk="argument" name="value" />
              <variable ilk="argument" name="priorityChange" />
              <variable ilk="argument" name="fromWidget" />
            </scope>
            <scope attributes="private" doc="called when the path gets changed in the dropdown" ilk="function" name="_onWidgetChange" signature="_onWidgetChange(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="startup" />
            <scope doc="" ilk="function" name="openDropDown" />
            <scope doc="" ilk="function" name="toggleDropDown" />
            <scope attributes="private" doc="called when the focus node gets blurred" ilk="function" name="_focusBlur" signature="_focusBlur(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="called when the focus node gets focus" ilk="function" name="_focusFocus" signature="_focusFocus(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="called when focus is shifted away from this widget" ilk="function" name="_onBlur" />
            <scope attributes="private" doc="sets the value of the widget once focus has left" ilk="function" name="_setBlurValue" />
            <scope doc="Function to convert a formatted string to a value - we use it to verify that it *really* is a valid value" ilk="function" name="parse" signature="parse(value,constraints)">
              <variable citdl="String" ilk="argument" name="value" />
              <variable citdl="Object" ilk="argument" name="constraints" />
            </scope>
            <scope attributes="private" doc="kicks off a search based off the current text value of the widget" ilk="function" name="_startSearchFromInput" />
            <scope attributes="private" doc="callback when the user presses a key on menu popup node" ilk="function" name="_onKey" signature="_onKey(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <variable doc="" name="dropDown">
              <scope name="domNode" />
            </variable>
            <variable attributes="private" doc="" name="_skip" />
            <variable attributes="private" doc="" name="_hasValidPath" />
            <scope name="focusNode">
              <variable doc="" name="value" />
            </scope>
            <variable attributes="private" doc="" name="_menuFocus" />
            <variable attributes="private" doc="" name="_allowBlur" />
            <variable attributes="private" doc="" name="_settingBlurValue" />
            <variable attributes="private" doc="" name="_hasSelection" />
            <variable attributes="private" doc="" name="_searchInProgress" />
            <variable attributes="private" doc="" name="_searchTimer" />
          </scope>
          <scope doc="Calling init function instead of doing operations in constructor, to allow for patches and over-writes." ilk="function" name="FileUploader" signature="FileUploader(options)">
            <variable ilk="argument" name="options" />
            <scope citdl="Boolean" doc="If true, outputs traces from the SWF to console. What exactly gets passed is very relative, and depends upon what traces have been left in the DEFT SWF." name="isDebug" />
            <scope citdl="Boolean." doc="If true, gives a red overlay to the Flash button and the HTML fileInput button&apos;s opcaity is set to 1.0. Since this code uses some crazy CSS to get the uploaders to hover over the &apos;fake&apos; button, there is no garuantee that it will work in all cases. Set this param to true to see if the button is properly positioned. Methods may be called over over-written to help in this case." name="devMode" />
            <variable citdl="String" doc="The object id, just like any other widget in Dojo. However, this id is also used as a reference for the SWF" name="id" />
            <variable citdl="String" doc="REQUIRED: The Url to where the file will be uploaded" name="uploadUrl" />
            <scope citdl="dijit.form.Button" doc="or a domNode REQUIRED: The button that when clicked, launches the upload dialog" name="button">
              <variable doc="" name="id" />
            </scope>
            <scope citdl="Boolean" doc="If true, uploads imeediately after a file has been selected. If false, waits for upload() to be called." name="uploadOnChange" />
            <scope citdl="Boolean" doc="If true and flash mode, multiple files may be selected from the dialog. If html mode, files are not uploaded until upload() is called. The references to each file is incremented:uploadedfile0, uploadedfile1, uploadedfile2... etc." name="selectMultipleFiles" />
            <scope citdl="String" doc="The name of the field of the fileInput that the server is expecting" name="htmlFieldName" />
            <scope citdl="String" doc="The name of the field of the flash uploaded files that the server is expecting" name="flashFieldName" />
            <scope citdl="Array" doc="Array[Description, FileTypes], Array[...]...] (an array, or an array of arrays) Restrict file selection to certain file types Empty array defaults to &amp;amp;quot;All Files&amp;amp;quot;" name="fileMask" />
            <variable citdl="String" doc="options: &amp;amp;quot;flash&amp;amp;quot; forces Flash Uploader &amp;amp;quot;html&amp;amp;quot; forces HTML fileInput &amp;amp;quot;&amp;amp;quot; checks availability of the proper Flash player" name="force" />
            <variable citdl="Object" doc="FLASH ONLY - In HTML, append the vars to the uploadUrl Sends data via POST to the server along with the uploaded files. NEW: You can also pass postData in the upload method which can be different with each upload" name="postData" />
            <scope citdl="String" doc="optional: pass in a path to your own SWF file uploader. defaults to the one in dojox. CDN USERS NOTE: For the Flash Uploader to work via CDN, the SWF must be from the same server as the HTML page. Pass the link to that file here." name="swfPath" />
            <scope citdl="Number" doc="Internal. Version of Flash Player to check for. Thi may be over-written for testing." name="minFlashVersion" />
            <variable citdl="String" doc="Internal." name="uploaderType" />
            <variable citdl="dojox.embed.Flash" doc="The object that creates the SWF embed object. Mostly Internal." name="flashObject">
              <variable doc="" name="onError" />
              <variable doc="" name="onLoad" />
            </variable>
            <variable doc="The SWF. Mostly Internal." ilk="function" name="flashMovie" />
            <variable citdl="HTMLNode" doc="The div that holds the SWF. While mostly internal, ccould be accessed for advanced positioning." name="flashDiv" />
            <variable citdl="HTMLNode" doc="either flash div or fileInput, depending on type                onClick: function(){    }," name="domNode" />
            <scope doc="Due to the excessive logging necessary to make this code happen, It&apos;s easier to turn it on and off here in one place. Also helpful if there are multiple uploaders on one page." ilk="function" name="log" />
            <scope doc="Determine which uploader to use and initialize it." ilk="function" name="init" signature="init(options)">
              <variable ilk="argument" name="options" />
            </scope>
            <scope doc="Fired when upload button is down Stub to which user can connect" ilk="function" name="onMouseDown" signature="onMouseDown(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope doc="Fired when upload button is up Stub to which user can connect" ilk="function" name="onMouseUp" signature="onMouseUp(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope doc="Fired when upload button is over Can be connected to for manipulating hover state" ilk="function" name="onMouseOver" signature="onMouseOver(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope doc="Fired when upload button is off Can be connected to for manipulating hover state" ilk="function" name="onMouseOut" signature="onMouseOut(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope doc="stub to connect Fires when files are selected Event is an array of last files selected" ilk="function" name="onChange" signature="onChange(dataArray)">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope doc="Stub to connect Fires as progress returns from SWF Event is an array of all files uploading Can be connected to for HTML uploader, but will not return anything." ilk="function" name="onProgress" signature="onProgress(dataArray)">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope doc="" ilk="function" name="onComplete" signature="onComplete(dataArray)">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope doc="Stub to connect Fires when dialog box has been closed without a file selection" ilk="function" name="onCancel" />
            <scope doc="" ilk="function" name="onError" signature="onError(evtObject)">
              <variable ilk="argument" name="evtObject" />
            </scope>
            <scope doc="When called, begins file upload" ilk="function" name="upload" signature="upload(data)">
              <variable citdl="Object" doc="Object postData to be sent to server" ilk="argument" name="data" />
            </scope>
            <scope doc="Positions the upload button over the &apos;fake&apos; button. This method is called on init, and may be called for various other reasons, for example, when the browser window is resized. Also, this code detects if the upload button is within a Dijit Dialog, and calls this method when the Dialog is dragged. Whenever the DOM has been redrawn, you should call this method." ilk="function" name="setPosition" />
            <scope doc="Hides the upload button. This is called when within a dialog." ilk="function" name="hide" />
            <scope doc="Shows the upload button. This is called when within a dialog." ilk="function" name="show" />
            <scope doc="This method is connected to the &amp;amp;quot;fake&amp;amp;quot; dijit button, and hides and shows on the disabling. If the &amp;amp;quot;fake&amp;amp;quot; button is a dom node, this method would need to be called directly." ilk="function" name="disable" signature="disable(disabled)">
              <variable citdl="Boolean" ilk="argument" name="disabled" />
            </scope>
            <scope doc="Destroys everything including &apos;fake&apos; button" ilk="function" name="destroyAll" />
            <scope doc="Destroys flash TODO: This doesn&apos;t look complete. HTML?" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="createFlashUploader">
              <scope name="flashObject">
                <variable doc="" ilk="function" name="onError" signature="onError(msg)">
                  <variable ilk="argument" name="msg" />
                </variable>
              </scope>
            </scope>
            <scope doc="" ilk="function" name="setFlashVars" />
            <scope doc="Create the fileInput overlay" ilk="function" name="createHtmlUploader" />
            <scope doc="Get size and location of the &apos;fake&apos; node (the button) Resize, set position of the SWF" ilk="function" name="setFlashPosition" />
            <scope doc="Get size and location of the &apos;fake&apos; node (the button) Resize, set position, and clip the &apos;real&apos; button (the fileInput) setPosition will fire on browser resize. The button may wrap to a different position and sometimes it just shifts slightly in the html, maybe because of the scrollbar." ilk="function" name="setHtmlPosition" />
            <scope attributes="private" doc="Subscribing to published topics coming from the Flash uploader." ilk="function" name="_connectFlash" />
            <scope attributes="private" doc="" ilk="function" name="_doSub" signature="_doSub(subStr,funcStr)">
              <variable ilk="argument" name="subStr" />
              <variable ilk="argument" name="funcStr" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_connectInput" />
            <scope attributes="private" doc="" ilk="function" name="_connectCommon" />
            <scope attributes="private" doc="" ilk="function" name="_checkHtmlCancel" signature="_checkHtmlCancel(mouseType)">
              <variable ilk="argument" name="mouseType" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_error" signature="_error(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_change" signature="_change(dataArray)">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_complete" signature="_complete(dataArray)">
              <variable ilk="argument" name="dataArray" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_progress" signature="_progress(dataObject)">
              <variable ilk="argument" name="dataObject" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_dialogParent" />
            <scope attributes="private" doc="" ilk="function" name="_disconnect" />
            <scope attributes="private" doc="" ilk="function" name="_buildFileInput" signature="_buildFileInput(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_removeFileInput" />
            <scope attributes="private" doc="Build the form that holds the fileInput This form also holds the class that targets the input to change its size" ilk="function" name="_buildForm" signature="_buildForm(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setHtmlPostData" />
            <scope attributes="private" doc="Apply a dynamic style to the form and input" ilk="function" name="_setFormStyle" />
            <scope doc="Get the size and position of the Dijit Button or DOM node." ilk="function" name="getFakeButtonSize" />
            <variable doc="" name="fileList" />
            <variable attributes="private" doc="" name="_subs" />
            <variable attributes="private" doc="" name="_cons" />
            <variable doc="" name="fileInputs" />
            <variable doc="" name="fileCount" />
            <variable doc="" name="setvarTries" />
            <variable attributes="private" doc="" name="_fileInput" />
            <variable doc="" name="dialogIsOpen" />
            <variable attributes="private" doc="" name="_formNode">
              <variable doc="" name="encoding" />
              <variable doc="" name="id" />
            </variable>
          </scope>
          <scope doc="The widget to orchestrate dynamic forms." ilk="function" name="Manager">
            <scope doc="" name="widgetsInTemplate" />
            <scope doc="" ilk="function" name="buildRendering" />
            <scope doc="" ilk="function" name="startup" />
            <variable doc="" name="domNode" />
            <variable doc="" name="containerNode" />
          </scope>
          <scope doc="A ComboBox that accpets multiple inputs on a single line?" ilk="function" name="MultiComboBox">
            <scope citdl="String" doc="The character to use to separate items in the ComboBox input" name="delimiter" />
            <variable attributes="private" doc="" name="_previousMatches" />
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" signature="_setValueAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_addPreviousMatches" returns="String" signature="_addPreviousMatches(text)">
              <variable citdl="String" ilk="argument" name="text" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_cleanupDelimiters" signature="_cleanupDelimiters(text)">
              <variable citdl="String" ilk="argument" name="text" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_autoCompleteText" signature="_autoCompleteText(text)">
              <variable citdl="String" ilk="argument" name="text" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_startSearch" signature="_startSearch(text)">
              <variable citdl="String" ilk="argument" name="text" />
            </scope>
          </scope>
          <scope doc="A class that is shared between all our children - extends ValidationTextBox and provides some shared functionality" name="_ChildTextBox">
            <scope citdl="widget" doc="Our parent (the PasswordValidator)" name="containerWidget" />
            <scope doc="Force-set to empty string (we don&apos;t save passwords EVER)...and since _OldPWBox overrides _setValueAttr to check for empty string, call our parent class directly (not this.inherited())" ilk="function" name="reset" />
            <scope doc="We want to remove the &amp;amp;quot;name&amp;amp;quot; attribute from our focus node if we don&apos;t have one set - this prevents all our extra values from being posted on submit" ilk="function" name="postCreate" />
            <variable attributes="private" doc="" name="_hasBeenBlurred" />
          </scope>
          <scope doc="A class representing our &amp;amp;quot;old password&amp;amp;quot; box." ilk="function" name="_OldPWBox">
            <variable attributes="private" citdl="boolean" doc="Whether or not the password is valid" name="_isPWValid" />
            <scope attributes="private" doc="Updates _isPWValid if this isn&apos;t our initial update by calling our PasswordValidator&apos;s pwCheck function" ilk="function" name="_setValueAttr" signature="_setValueAttr(newVal,priority)">
              <variable citdl="anything" ilk="argument" name="newVal" />
              <variable citdl="boolean" ilk="argument" name="priority" />
            </scope>
            <scope doc="" ilk="function" name="isValid" signature="isValid(isFocused)">
              <variable citdl="boolean" ilk="argument" name="isFocused" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_update" signature="_update(e)">
              <variable citdl="event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getValueAttr" />
            <scope attributes="private" doc="" ilk="function" name="_setBlurValue" />
          </scope>
          <scope doc="A class representing our new password textbox" ilk="function" name="_NewPWBox">
            <scope citdl="boolean" doc="Whether or not this widget is required (default: true)" name="required" />
            <scope doc="Validates our verify box - to make sure that a change to me is reflected there" ilk="function" name="onChange" />
          </scope>
          <scope doc="A class representing our verify textbox" ilk="function" name="_VerifyPWBox">
            <scope doc="Validates that we match the &amp;amp;quot;real&amp;amp;quot; password" ilk="function" name="isValid" signature="isValid(isFocused)">
              <variable ilk="argument" name="isFocused" />
            </scope>
          </scope>
          <scope doc="A password validation widget that simplifies the &amp;amp;quot;old/new/verify&amp;amp;quot; style of requesting passwords. You will probably want to override this class and implement your own pwCheck function." ilk="function" name="PasswordValidator">
            <variable citdl="boolean" doc="Whether or not it is required for form submission" name="required" />
            <variable attributes="private" doc="" name="_inputWidgets" />
            <scope citdl="string" doc="The name to send our old password as (when form is posted)" name="oldName" />
            <scope doc="" name="templatePath" />
            <variable attributes="private" doc="" name="_hasBeenBlurred" />
            <scope doc="we are valid if ALL our children are valid" ilk="function" name="isValid" signature="isValid(isFocused)">
              <variable citdl="boolean" ilk="argument" name="isFocused" />
            </scope>
            <scope doc="Validating this widget validates all our children" ilk="function" name="validate" signature="validate(isFocused)">
              <variable citdl="boolean" ilk="argument" name="isFocused" />
            </scope>
            <scope doc="Resetting this widget resets all our children" ilk="function" name="reset" />
            <scope attributes="private" doc="Turns the inputs inside this widget into &amp;amp;quot;real&amp;amp;quot; validation widgets - and sets up the needed connections." ilk="function" name="_createSubWidgets" />
            <scope doc="Overridable function for validation of the old password box.  This function is called and passed the old password. Return true if it&apos;s OK to continue, and false if it is not.  IMPORTANT SECURITY NOTE: Do NOT EVER EVER EVER check this in HTML or JavaScript!!!  You will probably want to override this function to callback to a server to verify the password (the callback will need to be syncronous) - and it&apos;s probably a good idea to validate it again on form submission before actually doing anything destructive - that&apos;s why the &amp;amp;quot;oldName&amp;amp;quot; value is available.  And don&apos;t just fetch the password from the server either :) Send the test password (probably hashed, for security) and return from the server a status instead.  Again - DON&apos;T BE INSECURE!!! Security is left as an exercise for the reader :)" ilk="function" name="pwCheck" signature="pwCheck(password)">
              <variable citdl="string" ilk="argument" name="password" />
            </scope>
            <scope doc="Sets up the correct widgets. You *MUST* specify one child text box (a simple HTML &amp;amp;lt;input&amp;amp;gt; element) with pwType=&amp;amp;quot;new&amp;amp;quot; *and* one child text box with pwType=&amp;amp;quot;verify&amp;amp;quot;. You *MAY* specify a third child text box with pwType=&amp;amp;quot;old&amp;amp;quot; in order to prompt the user to enter in their old password before the widget returns that it is valid." ilk="function" name="postCreate" />
            <scope attributes="private" doc="" ilk="function" name="_childValueAttr" signature="_childValueAttr(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setDisabledAttr" signature="_setDisabledAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setRequiredAttribute" signature="_setRequiredAttribute(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" signature="_setValueAttr(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getValueAttr" />
            <scope doc="places focus on the first invalid input widget - if all input widgets are valid, the first widget is focused." ilk="function" name="focus" />
          </scope>
          <scope doc="A radio-based select stack." ilk="function" name="RadioStack" />
          <scope doc="" ilk="function" name="_RangeSliderMixin">
            <scope doc="" name="value" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="destroy" />
            <scope attributes="private" doc="" ilk="function" name="_onKeyPress" signature="_onKeyPress(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onHandleClickMax" signature="_onHandleClickMax(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onClkIncBumper" />
            <scope attributes="private" doc="" ilk="function" name="_bumpValue" signature="_bumpValue(signedChange,useMaxValue)">
              <variable ilk="argument" name="signedChange" />
              <variable ilk="argument" name="useMaxValue" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getBumpValue" signature="_getBumpValue(signedChange,useMaxValue)">
              <variable ilk="argument" name="signedChange" />
              <variable ilk="argument" name="useMaxValue" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onBarClick" signature="_onBarClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onRemainingBarClick" signature="_onRemainingBarClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setPixelValue" signature="_setPixelValue(pixelValue,maxPixels,priorityChange,isMaxVal)">
              <variable citdl="Number" ilk="argument" name="pixelValue" />
              <variable citdl="Number" ilk="argument" name="maxPixels" />
              <variable citdl="Boolean" ilk="argument" name="priorityChange" />
              <variable citdl="Boolean" ilk="argument" name="isMaxVal" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getValueByPixelValue" signature="_getValueByPixelValue(pixelValue,maxPixels)">
              <variable citdl="Number" ilk="argument" name="pixelValue" />
              <variable citdl="Number" ilk="argument" name="maxPixels" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" signature="_setValueAttr(value,priorityChange,isMaxVal)">
              <variable citdl="Array or Number" ilk="argument" name="value" />
              <variable citdl="Boolean, optional" ilk="argument" name="priorityChange" />
              <variable citdl="Boolean, optional" ilk="argument" name="isMaxVal" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_printSliderBar" signature="_printSliderBar(priorityChange,isMaxVal)">
              <variable ilk="argument" name="priorityChange" />
              <variable ilk="argument" name="isMaxVal" />
            </scope>
            <variable doc="" name="widget" />
            <variable attributes="private" doc="" name="_movableMax" />
            <variable attributes="private" doc="" name="_movableBar" />
            <variable attributes="private" doc="" name="_descending" />
            <variable attributes="private" doc="" name="_lastValueReported" />
            <scope name="valueNode">
              <variable doc="" name="value" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="HorizontalRangeSlider">
            <scope doc="" name="templatePath" />
          </scope>
          <scope doc="" ilk="function" name="VerticalRangeSlider">
            <scope doc="" name="templatePath" />
          </scope>
          <variable citdl="Object" doc="" name="RangeSlider" />
          <scope doc="A widget for rating using stars.  required: Boolean TODO: Can be true or false, default is false. required: false," ilk="function" name="Rating">
            <scope doc="" name="templateString" />
            <scope citdl="Integer/Float" doc="The number of stars to show, default is 3." name="numStars" />
            <scope citdl="Integer/Float" doc="The current value of the Rating" name="value" />
            <scope doc="" name="constructor" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="" ilk="function" name="_onMouse" signature="_onMouse(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="Render the stars depending on the value." ilk="function" name="_renderStars" signature="_renderStars(value,hover)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="hover" />
            </scope>
            <scope doc="" name="onStarClick" />
            <scope doc="Connect here, the value is passed to this function as the second parameter!" ilk="function" name="onMouseOver" />
            <scope doc="When calling setAttribute(&amp;amp;quot;value&amp;amp;quot;, 4), set the value and render the stars accordingly." ilk="function" name="setAttribute" signature="setAttribute(key,value)">
              <variable citdl="String" ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
            </scope>
          </scope>
          <scope doc="Time Spinner" ilk="function" name="TimeSpinner">
            <scope doc="" name="required" />
            <scope doc="" ilk="function" name="adjust" signature="adjust(val,delta)">
              <variable citdl="Object" ilk="argument" name="val" />
              <variable citdl="Number" ilk="argument" name="delta" />
            </scope>
            <scope doc="" ilk="function" name="isValid" />
            <scope doc="" name="smallDelta" />
            <scope doc="" name="largeDelta" />
            <scope doc="" name="timeoutChangeRate" />
            <scope doc="" ilk="function" name="parse" signature="parse(time,locale)">
              <variable ilk="argument" name="time" />
              <variable ilk="argument" name="locale" />
            </scope>
            <scope doc="" ilk="function" name="format" signature="format(time,locale)">
              <variable ilk="argument" name="time" />
              <variable ilk="argument" name="locale" />
            </scope>
            <scope doc="" name="serialize" />
            <scope doc="" name="value" />
          </scope>
          <scope doc="" ilk="function" name="_FormSelectWidget">
            <scope citdl="Boolean" doc="Matches the select&apos;s &amp;amp;quot;multiple=&amp;amp;quot; value" name="multiple" />
            <variable attributes="private" citdl="Boolean" doc="Whether or not we are multi-valued (for form)" name="_multiValue" />
            <variable citdl="dojox.form.__SelectOption[" doc="The set of options for our select item. Roughly corresponds to the html &amp;amp;lt;option&amp;amp;gt; tag." name="options" />
            <scope attributes="private" doc="Returns a given option (or options)." ilk="function" name="getOptions" returns="dojox.form.__SelectOption[]|dojox.form.__SelectOption|null" signature="getOptions(valueOrIdx)">
              <variable citdl="anything" doc="If passed in as a string, that string is used to look up the option in the array of options - based on the value property. (See dojox.form.__SelectOption).  If passed in a number, then the option with the given index (0-based) within this select will be returned.  If passed in a dojox.form.__SelectOption, the same option will be returned if and only if it exists within this select.  If passed an array, then an array will be returned with each element in the array being looked up.  If not passed a value, then all options will be returned" ilk="argument" name="valueOrIdx" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Adds an option or options to the end of the select. If value of the option is empty or missing, a separator is created instead. Passing in an array of options will yeild slightly better performance since the children are only loaded once." ilk="function" name="addOption" signature="addOption(option)">
              <variable citdl="dojox.form.__SelectOption, dojox.form.__SelectOption[]" ilk="argument" name="option" />
            </scope>
            <scope doc="Removes the given option or options. You can remove by string (in which case the value is removed), number (in which case the index in the options array is removed), or select option (in which case, the select option with a matching value is removed). You can also pass in an array of those values for a slightly better performance since the children are only loaded once." ilk="function" name="removeOption" signature="removeOption(valueOrIdx)">
              <variable citdl="string, dojox.form.__SelectOption, number, or array" ilk="argument" name="valueOrIdx" />
            </scope>
            <scope doc="Updates the values of the given option. The option to update is matched based on the value of the entered option. Passing in an array of new options will yeild better performance since the children will only be loaded once." ilk="function" name="updateOption" signature="updateOption(newOption)">
              <variable citdl="dojox.form.__SelectOption, dojox.form.__SelectOption[]" ilk="argument" name="newOption" />
            </scope>
            <scope attributes="private" doc="set the value of the widget. If a string is passed, then we set our value from looking it up." ilk="function" name="_setValueAttr" signature="_setValueAttr(newValue,priorityChange)">
              <variable citdl="anything" ilk="argument" name="newValue" />
              <variable citdl="Boolean, optional" ilk="argument" name="priorityChange" />
            </scope>
            <scope attributes="private" doc="returns the displayed value of the widget" ilk="function" name="_getDisplayedValueAttr" />
            <scope attributes="private" doc="" name="_getValueDeprecated" />
            <scope doc="get the value of the widget." ilk="function" name="getValue" />
            <scope doc="restore the value to the last value passed to onChange" ilk="function" name="undo" />
            <scope attributes="private" doc="Loads the children represented by this widget&apos;s optiosn. reset the menu to make it &amp;amp;quot;populatable on the next click" ilk="function" name="_loadChildren" />
            <scope attributes="private" doc="Sets the &amp;amp;quot;selected&amp;amp;quot; class on the item for styling purposes" ilk="function" name="_updateSelection" />
            <scope attributes="private" doc="Returns the value of the widget by reading the options for the selected flag" ilk="function" name="_getValueFromOpts" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope attributes="private" doc="Loads our options and sets up our dropdown correctly. We don&apos;t want any content, so we don&apos;t call any inherit chain function." ilk="function" name="_fillContent" />
            <scope doc="sets up our event handling that we need for functioning as a select" ilk="function" name="postCreate" />
            <scope attributes="private" doc="User-overridable function which, for the given option, adds an item to the select. If the option doesn&apos;t have a value, then a separator is added in that place. Make sure to store the option in the created option widget." ilk="function" name="_addOptionItem" signature="_addOptionItem(option)">
              <variable citdl="dojox.form.__SelectOption" ilk="argument" name="option" />
            </scope>
            <scope attributes="private" doc="User-overridable function which, for the given option, removes its item from the select." ilk="function" name="_removeOptionItem" signature="_removeOptionItem(option)">
              <variable citdl="dojox.form.__SelectOption" ilk="argument" name="option" />
            </scope>
            <scope attributes="private" doc="Overridable function which will set the display for the widget. newDisplay is either a string (in the case of single selects) or array of strings (in the case of multi- selects)" ilk="function" name="_setDisplay" signature="_setDisplay(newDisplay)">
              <variable citdl="String or String[]" ilk="argument" name="newDisplay" />
            </scope>
            <scope attributes="private" doc="Overridable function to return the children that this widget contains." ilk="function" name="_getChildren" />
            <scope attributes="private" doc="hooks into this.attr to provide a mechanism for getting the option items for the current value of the widget." ilk="function" name="_getSelectedOptionsAttr" />
            <variable doc="" name="value" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="__SelectOption">
            <variable citdl="String" doc="The value of the option. Setting to empty (or missing) will place a separator at that location" name="value" />
            <variable citdl="String" doc="The label for our option. It can contain html tags." name="label" />
            <variable citdl="Boolean" doc="Whether or not we are a selected option" name="selected" />
            <variable citdl="Boolean" doc="Whether or not this specific option is disabled" name="disabled" />
          </scope>
          <scope doc="Mixin for widgets that need drop down ability." ilk="function" name="_HasDropDown">
            <variable citdl="DomNode" doc="responds to click events. &amp;amp;quot;dropDownNode&amp;amp;quot; can be set via a dojoAttachPoint assignment. If missing, then either focusNode or domNode (if focusNode is also missing) will be used." name="dropDownNode" />
            <variable citdl="DomNode" doc="the node to set the popupActive class on. If missing, then focusNode or dropDownNode (if focusNode is missing) will be used." name="popupStateNode" />
            <variable citdl="DomNode" doc="the node to display the popup around. If missing, then domNode will be used." name="aroundNode" />
            <scope citdl="Widget" doc="the widget to display in the popup. This widget *must* be defined before the startup function is called." name="dropDown" />
            <scope citdl="Boolean" doc="Set to true to make the drop down at least as wide as this widget. Set to false if the drop down should just be its default width" name="autoWidth" />
            <scope attributes="private" citdl="Boolean" doc="When set to false, the click events will not be stopped, in case you want to use them in your subwidget" name="_stopClickEvents" />
            <scope attributes="private" doc="called with the mouseup event if the mouseup occurred over the menu. You can try and use this event in order to automatically execute your dropdown (as if it were clicked). You mightwant to close your menu as a part of this function." ilk="function" name="_onMenuMouseup" signature="_onMenuMouseup(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="callback when the user mouse clicks on menu popup node  We handle mouse events using onmousedown in order to allow for selecting via a drag. So, our click is already handled, unless we are executed via keypress - in which case, this._seenKeydown will be set to true." ilk="function" name="_onDropDownMouse" signature="_onDropDownMouse(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="callback when the user lifts their mouse - if we are over the menu, we execute it, otherwise, we focus our dropDown node. If the event is missing, then we are not a mouseup event." ilk="function" name="_onDropDownMouseup" signature="_onDropDownMouseup(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="set up nodes and connect our mouse and keypress events" ilk="function" name="_setupDropdown" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="startup" />
            <scope doc="" ilk="function" name="destroyDescendants" />
            <scope attributes="private" doc="" ilk="function" name="_onDropDownKeydown" signature="_onDropDownKeydown(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onKeyPress" signature="_onKeyPress(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onDropDownBlur" signature="_onDropDownBlur(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="callback when the user presses a key on menu popup node" ilk="function" name="_onKey" signature="_onKey(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="called magically when focus has shifted away from this widget and it&apos;s dropdown" ilk="function" name="_onBlur" />
            <scope doc="returns whether or not the dropdown is loaded. This can be overridden in order to force a call to loadDropDown()." ilk="function" name="isLoaded" />
            <scope doc="loads the data for the dropdown, and at some point, calls the given callback" ilk="function" name="loadDropDown" signature="loadDropDown(loadCallback)">
              <variable ilk="function" name="loadCallback" />
            </scope>
            <scope doc="toggle the drop-down widget; if it is up, close it, if not, open it" ilk="function" name="toggleDropDown" />
            <scope doc="opens the dropdown for this widget - it returns the return value of dijit.popup.open" ilk="function" name="openDropDown" />
            <scope doc="Closes the drop down on this widget" ilk="function" name="closeDropDown" signature="closeDropDown(focus)">
              <variable citdl="Boolean" ilk="argument" name="focus" />
            </scope>
            <variable attributes="private" doc="" name="_seenKeydown" />
            <variable attributes="private" doc="" name="_docHandler" />
            <variable attributes="private" doc="" name="_opened" />
            <variable doc="" name="state" />
          </scope>
          <scope doc="Mix this class in to a dojox.form._FormSelectWidget in order to provide support for &amp;amp;quot;selectable&amp;amp;quot; multiforms. The widget is pointed to a dijit.layout.StackContainer and will handle displaying and submitting the values of only the appropriate pane.  The options for this widget will be automatically set - based on the panes that are in the stack container. The &amp;amp;quot;title&amp;amp;quot; attribute of the pane will be used for the display of the option. The &amp;amp;quot;id&amp;amp;quot; attribute of the pane will be used as the value of the option. In order to avoid running into unique ID constraint issues, a stackPrefix mechanism is provided." ilk="function" name="_SelectStackMixin">
            <scope citdl="string" doc="The id of the stack that this widget is supposed to control" name="stackId" />
            <scope citdl="string" doc="A prefix to remove from our stack pane ids when setting our options. This exists so that we won&apos;t run into unique ID constraints. For example, if stackPrefix is set to &amp;amp;quot;foo_&amp;amp;quot;, and there are three panes in our stack with ids of &amp;amp;quot;foo_a&amp;amp;quot;, &amp;amp;quot;foo_b&amp;amp;quot;, and &amp;amp;quot;foo_c&amp;amp;quot;, then the values of the options created for the stack controller widget will be &amp;amp;quot;a&amp;amp;quot;, &amp;amp;quot;b&amp;amp;quot;, and &amp;amp;quot;c&amp;amp;quot;. This allows you to have multiple select stack widgets with the same values - without having to have the panes require the same ids." name="stackPrefix" />
            <scope attributes="private" doc="Gets the pane ID given an option value" ilk="function" name="_paneIdFromOption" returns="String" signature="_paneIdFromOption(oVal)">
              <variable citdl="String" ilk="argument" name="oVal" />
            </scope>
            <scope attributes="private" doc="Gets the option value given a pane ID" ilk="function" name="_optionValFromPane" returns="String" signature="_optionValFromPane(id)">
              <variable citdl="String" ilk="argument" name="id" />
            </scope>
            <scope attributes="private" doc="called when a pane is either shown or hidden (so that we can toggle the widgets on it)" ilk="function" name="_togglePane" signature="_togglePane(pane,shown)">
              <variable citdl="Widget" ilk="argument" name="pane" />
              <variable citdl="Boolean" ilk="argument" name="shown" />
            </scope>
            <scope doc="Called when the stack container adds a new pane" ilk="function" name="onAddChild" signature="onAddChild(pane,insertIndex)">
              <variable citdl="Widget" ilk="argument" name="pane" />
              <variable citdl="Integer" ilk="argument" name="insertIndex" />
            </scope>
            <scope doc="Called when the stack container removes a pane" ilk="function" name="onRemoveChild" signature="onRemoveChild(pane)">
              <variable citdl="Widget" ilk="argument" name="pane" />
            </scope>
            <scope doc="Called when the stack container selects a new pane" ilk="function" name="onSelectChild" signature="onSelectChild(pane)">
              <variable citdl="Widget" ilk="argument" name="pane" />
            </scope>
            <scope doc="Called when the stack container is started up" ilk="function" name="onStartup" signature="onStartup(info)">
              <variable citdl="Object" ilk="argument" name="info" />
            </scope>
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="destroy" />
            <scope attributes="private" doc="Called when form select widget&apos;s value has changed" ilk="function" name="_handleSelfOnChange" signature="_handleSelfOnChange(val)">
              <variable citdl="String" ilk="argument" name="val" />
            </scope>
            <variable attributes="private" doc="" name="_savedValue" />
            <variable attributes="private" doc="" name="_panes" />
            <variable attributes="private" doc="" name="_subscriptions" />
          </scope>
          <variable citdl="Object" doc="" name="manager">
            <scope doc="Form manager&apos;s mixin for testing/assigning/removing classes of controlled elements." ilk="function" name="_ClassMixin">
              <scope attributes="private" doc="Gather the presence of a certain class in all controlled elements." ilk="function" name="gatherClassState" returns="Object" signature="gatherClassState(className,names)">
                <variable citdl="String" doc="The class name to test for." ilk="argument" name="className" />
                <variable citdl="Object" doc="If it is an array, it is a list of names to be processed. If it is an object, dictionary keys are names to be processed. If it is omitted, all known form elements are to be processed." ilk="argument" name="names" />
              </scope>
              <scope attributes="private" doc="Add a class to nodes according to the supplied set of names" ilk="function" name="addClass" returns="self" signature="addClass(className,names)">
                <variable citdl="String" doc="Class name to add." ilk="argument" name="className" />
                <variable citdl="Object" doc="If it is an array, it is a list of names to be processed. If it is an object, dictionary keys are names to be processed. If it is omitted, all known form elements are to be processed." ilk="argument" name="names" />
              </scope>
              <scope attributes="private" doc="Remove a class from nodes according to the supplied set of names" ilk="function" name="removeClass" returns="self" signature="removeClass(className,names)">
                <variable citdl="String" doc="Class name to remove." ilk="argument" name="className" />
                <variable citdl="Object" doc="If it is an array, it is a list of names to be processed. If it is an object, dictionary keys are names to be processed. If it is omitted, all known form elements are to be processed." ilk="argument" name="names" />
              </scope>
            </scope>
            <scope doc="Form manager&apos;s mixin for controlling show/hide state of controlled elements (defined by dojoAttachPoint attributes)." ilk="function" name="_DisplayMixin">
              <scope attributes="private" doc="Gather display state of all attached elements and return as a dictionary." ilk="function" name="gatherDisplayState" returns="Object" signature="gatherDisplayState(names)">
                <variable citdl="Object" doc="If it is an array, it is a list of names to be processed. If it is an object, dictionary keys are names to be processed. If it is omitted, all known attach point nodes are to be processed." ilk="argument" name="names" />
              </scope>
              <scope attributes="private" doc="Show attached nodes according to the supplied state object." ilk="function" name="show" returns="self" signature="show(state,defaultState)">
                <variable citdl="Object" doc="Optional. If a name-value dictionary, the value is true to show and false to hide. If an array, all names in the array will be set to defaultState. If omitted, all form elements will be set to defaultState." ilk="argument" name="state" />
                <variable citdl="Boolean" doc="The default state (true, if omitted)." ilk="argument" name="defaultState" />
              </scope>
              <scope attributes="private" doc="Hide attached nodes according to the supplied state object." ilk="function" name="hide" returns="self" signature="hide(state)">
                <variable citdl="Object" doc="Optional. If a name-value dictionary, the value is true to show and false to hide. If an array, all names in the array will be hidden. If omitted, all form elements will be hidden." ilk="argument" name="state" />
              </scope>
            </scope>
            <scope doc="Form manager&apos;s mixin for controlling enable/disable state of form elements." ilk="function" name="_EnableMixin">
              <scope attributes="private" doc="Gather enable state of all form elements and return as a dictionary." ilk="function" name="gatherEnableState" returns="Object" signature="gatherEnableState(names)">
                <variable citdl="Object" doc="If it is an array, it is a list of names to be processed. If it is an object, dictionary keys are names to be processed. If it is omitted, all known form elements are to be processed." ilk="argument" name="names" />
              </scope>
              <scope attributes="private" doc="Enable form controls according to the supplied state object." ilk="function" name="enable" returns="self" signature="enable(state,defaultState)">
                <variable citdl="Object" doc="Optional. If a name-value dictionary, the value is true to enable and false to disable. If an array, all names in the array will be set to defaultState. If omitted, all form elements will be set to defaultState." ilk="argument" name="state" />
                <variable citdl="Boolean" doc="The default state (true, if omitted)." ilk="argument" name="defaultState" />
              </scope>
              <scope attributes="private" doc="Disable form controls according to the supplied state object returning the previous state." ilk="function" name="disable" returns="Object" signature="disable(state)">
                <variable citdl="Object" doc="Optional. If a name-value dictionary, the value is true to enable and false to disable. If an array, all names in the array will be disabled. If omitted, disables all." ilk="argument" name="state" />
              </scope>
            </scope>
            <scope doc="Form manager&apos;s mixin for form-specific functionality." ilk="function" name="_FormMixin">
              <scope doc="" name="name" />
              <scope doc="" name="action" />
              <scope doc="" name="method" />
              <scope doc="" name="encType" />
              <scope doc="" name="accept-charset" />
              <scope doc="" name="accept" />
              <scope doc="" name="target" />
              <scope doc="" ilk="function" name="startup" />
              <scope attributes="private" doc="" ilk="function" name="_onReset" returns="the IE way" signature="_onReset(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope attributes="private" doc="Callback when user resets the form. This method is intended to be over-ridden. When the `reset` method is called programmatically, the return value from `onReset` is used to compute whether or not resetting should proceed" ilk="function" name="onReset" returns="Boolean" />
              <scope doc="Resets form widget values." ilk="function" name="reset" />
              <scope attributes="private" doc="" ilk="function" name="_onSubmit" returns="the IE way|Boolean" signature="_onSubmit(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope attributes="private" doc="Callback when user submits the form. This method is intended to be over-ridden, but by default it checks and returns the validity of form elements. When the `submit` method is called programmatically, the return value from `onSubmit` is used to compute whether or not submission should proceed" ilk="function" name="onSubmit" returns="Boolean" />
              <scope doc="programmatically submit form if and only if the `onSubmit` returns true" ilk="function" name="submit" />
              <scope doc="Make sure that every widget that has a validator function returns true." ilk="function" name="isValid" />
              <variable doc="" name="isForm" />
              <variable doc="" name="returnValue" />
            </scope>
            <scope doc="Mixin to orchestrate dynamic forms." ilk="function" name="_Mixin">
              <scope doc="" name="watch" />
              <scope doc="Called after all the widgets have been instantiated and their dom nodes have been inserted somewhere under dojo.doc.body." ilk="function" name="startup" />
              <scope doc="Called when the widget is being destroyed" ilk="function" name="destroy" />
              <scope doc="Register a widget with the form manager" ilk="function" name="registerWidget" signature="registerWidget(widget)">
                <variable citdl="String|Node|dijit.form._FormWidget" doc="A widget, or its widgetId, or its DOM node" ilk="argument" name="widget" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Removes the widget by name from internal tables unregistering connected observers" ilk="function" name="unregisterWidget" signature="unregisterWidget(name)">
                <variable citdl="String" doc="Name of the to unregister" ilk="argument" name="name" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Register widget&apos;s descendants with the form manager" ilk="function" name="registerWidgetDescendants" signature="registerWidgetDescendants(widget)">
                <variable citdl="String|Node|dijit._Widget" doc="A widget, or its widgetId, or its DOM node" ilk="argument" name="widget" />
              </scope>
              <scope doc="Unregister widget&apos;s descendants with the form manager" ilk="function" name="unregisterWidgetDescendants" signature="unregisterWidgetDescendants(widget)">
                <variable citdl="String|Node|dijit._Widget" doc="A widget, or its widgetId, or its DOM node" ilk="argument" name="widget" />
              </scope>
              <scope attributes="private" doc="Set or get a form widget by name." ilk="function" name="formWidgetValue" returns="Object|self|String" signature="formWidgetValue(elem,value)">
                <variable citdl="String|Object|Array" doc="Form element&apos;s name, widget object, or array or radio widgets." ilk="argument" name="elem" />
                <variable citdl="Object" doc="Optional. The value to set." ilk="argument" name="value" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Set or get a node context by name (using dojoAttachPoint)." ilk="function" name="formPointValue" returns="Object|self|String" signature="formPointValue(elem,value)">
                <variable citdl="String|Object|Array" doc="A node." ilk="argument" name="elem" />
                <variable citdl="Object" doc="Optional. The value to set." ilk="argument" name="value" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Run an inspector function on controlled widgets returning a result object." ilk="function" name="inspectFormWidgets" returns="Object" signature="inspectFormWidgets(inspector,state,defaultValue)">
                <variable doc="A function to be called on a widget. Takes three arguments: a name, a widget object or an array of widget objects, and a supplied value. Runs in the context of the form manager. Returns a value that will be collected and returned as a state." ilk="function" name="inspector" />
                <variable citdl="Object" doc="Optional. If a name-value dictionary --- only listed names will be processed. If an array, all names in the array will be processed with defaultValue. If omitted or null, all widgets will be processed with defaultValue." ilk="argument" name="state" />
                <variable citdl="Object" doc="Optional. The default state (true, if omitted)." ilk="argument" name="defaultValue" />
              </scope>
              <scope attributes="private" doc="Run an inspector function on &amp;amp;quot;dojoAttachPoint&amp;amp;quot; nodes returning a result object." ilk="function" name="inspectAttachedPoints" returns="Object" signature="inspectAttachedPoints(inspector,state,defaultValue)">
                <variable doc="A function to be called on a node. Takes three arguments: a name, a node or an array of nodes, and a supplied value. Runs in the context of the form manager. Returns a value that will be collected and returned as a state." ilk="function" name="inspector" />
                <variable citdl="Object" doc="Optional. If a name-value dictionary --- only listed names will be processed. If an array, all names in the array will be processed with defaultValue. If omitted or null, all attached point nodes will be processed with defaultValue." ilk="argument" name="state" />
                <variable citdl="Object" doc="Optional. The default state (true, if omitted)." ilk="argument" name="defaultValue" />
              </scope>
              <scope attributes="private" doc="Run an inspector function on controlled elements returning a result object." ilk="function" name="inspect" returns="Object" signature="inspect(inspector,state,defaultValue)">
                <variable doc="A function to be called on a widget, form element, and an attached node. Takes three arguments: a name, a node (domNode in the case of widget) or an array of such objects, and a supplied value. Runs in the context of the form manager. Returns a value that will be collected and returned as a state." ilk="function" name="inspector" />
                <variable citdl="Object" doc="Optional. If a name-value dictionary --- only listed names will be processed. If an array, all names in the array will be processed with defaultValue. If omitted or null, all controlled elements will be processed with defaultValue." ilk="argument" name="state" />
                <variable citdl="Object" doc="Optional. The default state (true, if omitted)." ilk="argument" name="defaultValue" />
              </scope>
              <variable doc="" name="formWidgets" />
              <variable doc="" name="formNodes" />
            </scope>
            <scope doc="Mixin to orchestrate dynamic forms (works with DOM nodes)." ilk="function" name="_NodeMixin">
              <scope doc="Called when the widget is being destroyed" ilk="function" name="destroy" />
              <scope doc="Register a node with the form manager" ilk="function" name="registerNode" signature="registerNode(node)">
                <variable citdl="String|Node" doc="A node, or its id" ilk="argument" name="node" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Removes the node by name from internal tables unregistering connected observers" ilk="function" name="unregisterNode" signature="unregisterNode(name)">
                <variable citdl="String" doc="Name of the to unregister" ilk="argument" name="name" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Register node&apos;s descendants (form nodes) with the form manager" ilk="function" name="registerNodeDescendants" signature="registerNodeDescendants(node)">
                <variable citdl="String|Node" doc="A widget, or its widgetId, or its DOM node" ilk="argument" name="node" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Unregister node&apos;s descendants (form nodes) with the form manager" ilk="function" name="unregisterNodeDescendants" signature="unregisterNodeDescendants(node)">
                <variable citdl="String|Node" doc="A widget, or its widgetId, or its DOM node" ilk="argument" name="node" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Set or get a form element by name." ilk="function" name="formNodeValue" returns="Object|self|String" signature="formNodeValue(elem,value)">
                <variable citdl="String|Node|Array" doc="Form element&apos;s name, DOM node, or array or radio nodes." ilk="argument" name="elem" />
                <variable citdl="Object" doc="Optional. The value to set." ilk="argument" name="value" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Run an inspector function on controlled form elements returning a result object." ilk="function" name="inspectFormNodes" returns="Object" signature="inspectFormNodes(inspector,state,defaultValue)">
                <variable doc="A function to be called on a form element. Takes three arguments: a name, a node or an array of nodes, and a supplied value. Runs in the context of the form manager. Returns a value that will be collected and returned as a state." ilk="function" name="inspector" />
                <variable citdl="Object" doc="Optional. If a name-value dictionary --- only listed names will be processed. If an array, all names in the array will be processed with defaultValue. If omitted or null, all form elements will be processed with defaultValue." ilk="argument" name="state" />
                <variable citdl="Object" doc="Optional. The default state (true, if omitted)." ilk="argument" name="defaultValue" />
              </scope>
              <variable doc="" name="formNodes" />
            </scope>
            <scope doc="Form manager&apos;s mixin for getting/setting form values in the unified manner." ilk="function" name="_ValueMixin">
              <scope attributes="private" doc="Set or get a form widget/element or an attached point node by name." ilk="function" name="elementValue" returns="Object" signature="elementValue(name,value)">
                <variable citdl="String" doc="The name." ilk="argument" name="name" />
                <variable citdl="Object" doc="Optional. The value to set." ilk="argument" name="value" />
              </scope>
              <scope attributes="private" doc="Collect form values." ilk="function" name="gatherFormValues" returns="Object" signature="gatherFormValues(names)">
                <variable citdl="Object" doc="If it is an array, it is a list of names of form elements to be collected. If it is an object, dictionary keys are names to be collected. If it is omitted, all known form elements are to be collected." ilk="argument" name="names" />
              </scope>
              <scope doc="Set values to form elements" ilk="function" name="setFormValues" signature="setFormValues(values)">
                <variable citdl="Object" doc="A dictionary of key-value pairs." ilk="argument" name="values" />
              </scope>
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="Extension animations to the core dojo FX project" name="fx">
          <variable attributes="private" citdl="Object" doc="" name="_arg">
            <scope doc="The node and CSS class to use for style manipulations." ilk="function" name="StyleArgs" signature="StyleArgs(args)">
              <variable citdl="Object" ilk="argument" name="args" />
              <variable citdl="DOMNode" doc="The node to manipulate" name="node" />
              <variable citdl="String" doc="The class to use during the manipulation" name="cssClass" />
            </scope>
            <scope doc="The odd way to document object parameters." ilk="function" name="ShadowResizeArgs" signature="ShadowResizeArgs(args)">
              <variable citdl="Object" ilk="argument" name="args" />
              <variable citdl="Integer" doc="the width to set" name="x" />
              <variable citdl="Integer" doc="the height to set" name="y" />
            </scope>
          </variable>
          <scope attributes="private" doc="Creates an animation that will size a node" ilk="function" name="sizeTo" returns="dojo._Animation" signature="sizeTo(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Returns an animation to slide a node by a defined offset." ilk="function" name="slideBy" returns="dojo._Animation" signature="slideBy(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Returns an animation cross fading two element simultaneously" ilk="function" name="crossFade" returns="dojo._Animation|Boolean" signature="crossFade(args)">
            <variable citdl="Object" doc="args.nodes: Array - two element array of domNodes, or id&apos;s  all other standard animation args mixins apply. args.node ignored." ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Highlight a node" ilk="function" name="highlight" returns="dojo._Animation" signature="highlight(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Animate a node wiping to a specific width or height" ilk="function" name="wipeTo" returns="dojo._Animation" signature="wipeTo(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope doc="" name="anim" />
          <scope doc="" name="animateProperty" />
          <scope doc="" name="fadeTo" />
          <scope doc="" name="fadeIn" />
          <scope doc="" name="fadeOut" />
          <scope doc="" name="combine" />
          <scope doc="" name="chain" />
          <scope doc="" name="slideTo" />
          <scope doc="" name="wipeIn" />
          <scope doc="" name="wipeOut" />
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <scope attributes="private" doc="a custom _Line to accomodate multi-dimensional values" ilk="function" name="_Line" returns="Array|Decimal" signature="_Line(start,end)">
            <variable citdl="Integer|Array" doc="An Integer (or an Array of integers) to use as a starting point" ilk="argument" name="start" />
            <variable citdl="Integer|Array" doc="An Integer (or an Array of integers) to use as an ending point" ilk="argument" name="end" />
            <variable citdl="Integer|Array" doc="An Integer (or an Array of integers) to use as a starting point" name="start" />
            <variable citdl="Integer|Array" doc="An Integer (or an Array of integers) to use as an ending point" name="end" />
            <variable attributes="private" doc="Returns the point on the line, or an array of points" ilk="function" name="getValue" returns="Decimal" signature="getValue(n)">
              <variable citdl="float" doc="a floating point number greater than 0 and less than 1" ilk="argument" name="n" />
              <variable name="return_summary" />
            </variable>
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_core" />
          <variable citdl="Object" doc="An Alias to `dojo.fx.easing`. Moved to Core in Dojo 1.2." name="easing" />
          <variable citdl="Object" doc="" name="ext-dojo">
            <variable citdl="Object" doc="" name="NodeList" />
          </variable>
          <scope attributes="private" doc="Animate a node flipping following a specific direction" ilk="function" name="flip" returns="dojo._Animation" signature="flip(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope doc="An extension to `dojox.fx.flip` providing a more 3d-like rotation" ilk="function" name="flipCube" signature="flipCube(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope doc="An extension to `dojox.fx.flip` providing a page flip like animation." ilk="function" name="flipPage" signature="flipPage(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope doc="An extension to `dojox.fx.flip` providing a decomposition in rows * cols flipping elements" ilk="function" name="flipGrid" signature="flipGrid(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Returns an animation that will smooth-scroll to a node (specified in etup())" ilk="function" name="smoothScroll" returns="dojo._Animation" signature="smoothScroll(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <variable citdl="Object" doc="Module to provide scroll-related FX" name="scroll" />
          <scope attributes="private" doc="Split a node into rectangular pieces and animate them." ilk="function" name="_split" returns="dojo._Animation" signature="_split(args)">
            <variable citdl="Object" doc="args.crop: Boolean - If true, pieces will only be visible inside node&apos;s boundries args.rows: Integer - The number of horizontal pieces (default is 3) args.columns: Integer - The number of vertical pieces (default is 3) args.pieceAnimation: Function(piece, x, y, coords) - Returns either the dojo._Animation or an array of dojo._Animation objects for the piece at location (x, y) in the node&apos;s grid; coords is the result of dojo.coords(args.node, true);" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Explode a node into rectangular pieces" ilk="function" name="explode" returns="dojo._Animation" signature="explode(args)">
            <variable citdl="Object" doc="args.rows: Integer - The number of horizontal pieces (default is 3) args.columns: Integer - The number of vertical pieces (default is 3) args.random: Float - If set, pieces fly to random distances, for random durations, and in slightly random directions. The value defines how much randomness is introduced. args.distance: Float - Multiplier for the distance the pieces fly (even when random) args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.fadeEasing: Function - If args.fade is true, the fade animations use this easing function args.unhide: Boolean - If true, the animation is reversed args.sync: Boolean - If args.unhide is true, all the pieces converge at the same time (default is true)" ilk="argument" name="args" />
          </scope>
          <scope doc="" ilk="function" name="converge" signature="converge(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Split a node into rectangular pieces and let them fall" ilk="function" name="disintegrate" returns="dojo._Animation" signature="disintegrate(args)">
            <variable citdl="Object" doc="args.rows: Integer - The number of horizontal pieces (default is 5) args.columns: Integer - The number of vertical pieces (default is 5) args.interval: Float - The number of milliseconds between each piece&apos;s animation args.distance: Float - The number of the node&apos;s heights to drop (default is 1.5) args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.random: Float - If set, pieces fall in random order. The value defines how much randomness is introduced. args.reverseOrder: Boolean - If true, pieces animate in reversed order args.unhide: Boolean - If true, the peices fall from above and land in place" ilk="argument" name="args" />
          </scope>
          <scope doc="" ilk="function" name="build" signature="build(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Split a node into rectangular pieces and slide them in alternating directions" ilk="function" name="shear" returns="dojo._Animation" signature="shear(args)">
            <variable citdl="Object" doc="args.rows: Integer - The number of horizontal pieces (default is 6) args.columns: Integer - The number of vertical pieces (default is 6) args.interval: Float - The number of milliseconds between each piece&apos;s animation (default is 0) args.distance: Float - The multiple of the node&apos;s dimensions to slide (default is 1) args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.random: Float - If true, pieces have a random delay. The value defines how much randomness is introduced args.reverseOrder: Boolean - If true, pieces animate in reversed order args.unhide: Boolean - If true, the animation is reversed" ilk="argument" name="args" />
          </scope>
          <scope doc="" ilk="function" name="unShear" signature="unShear(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Split a node into rectangular pieces and wipe them in alternating directions" ilk="function" name="pinwheel" returns="dojo._Animation" signature="pinwheel(args)">
            <variable citdl="Object" doc="args.rows: Integer - The number of horizontal pieces (default is 4) args.columns: Integer - The number of vertical pieces (default is 4) args.interval: Float - The number of milliseconds between each piece&apos;s animation (default is 0) args.distance: Float - The percentage of the piece&apos;s dimensions the piece should wipe args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.random: Float - If true, pieces have a random delay. The value defines how much randomness is introduced. args.unhide: Boolean - If true, the animation is reversed" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="unPinwheel" returns="dojo._Animation" signature="unPinwheel(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Split a node into rectangular pieces and fade them" ilk="function" name="blockFadeOut" returns="dojo._Animation" signature="blockFadeOut(args)">
            <variable citdl="Object" doc="args.rows: Integer - The number of horizontal pieces (default is 5) args.columns: Integer - The number of vertical pieces (default is 5) args.interval: Float - The number of milliseconds between each piece&apos;s animation (default is 0) args.random: Float - If true, pieces have a random delay. The value defines how much randomness is introduced args.reverseOrder: Boolean - If true, pieces animate in reversed order args.unhide: Boolean - If true, the animation is reversed" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="blockFadeIn" returns="dojo._Animation" signature="blockFadeIn(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <variable citdl="Object" doc="" name="split" />
          <scope doc="" name="text">
            <scope attributes="private" doc="Split a block of text into words or letters" ilk="function" name="_split" returns="dojo._Animation" signature="_split(args)">
              <variable citdl="Object" doc="args.crop: Boolean - If true, pieces will be positioned relatively rather than absolutely args.text: String - Text to place inside the node (otherwise node.innerHTML is used) args.words: Boolean - If true, the text will be split into words rather than characters args.pieceAnimation: Function(piece, pieceCoords, nodeCoords, number, numPieces) - Returns either the dojo._Animation or an array of dojo._Animation objects for the piece; pieceCoords is the result of dojo.coords(piece, true); nodeCoords is the result of dojo.coords(args.node, true); number is the piece&apos;s position in the array of pieces, and numPieces is the array.length" ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="Explode a block of text into words or letters" ilk="function" name="explode" returns="dojo._Animation" signature="explode(args)">
              <variable citdl="Object" doc="args.crop: Boolean - If true, pieces will be positioned relatively rather than absolutely args.words: Boolean - If true, text will be split into words rather than characters args.random: Float - If set, pieces fly to random distances, for random durations, and in slightly random directions. The value defines how much randomness is introduced. args.distance: Float - Multiplier for the distance the pieces fly (even when random) args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.fadeEasing: Function - If args.fade is true, the fade animations use this easing function args.unhide: Boolean - If true, the animation is reversed args.sync: Boolean - If args.unhide is true, all the pieces converge at the same time (default is true)" ilk="argument" name="args" />
            </scope>
            <scope doc="" ilk="function" name="converge" signature="converge(args)">
              <variable citdl="Object" ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="Split a block of text into words or letters and let them fall" ilk="function" name="disintegrate" returns="dojo._Animation" signature="disintegrate(args)">
              <variable citdl="Object" doc="args.crop: Boolean - If true, pieces will be positioned relatively rather than absolutely args.words: Boolean - If true, text will be split into words rather than characters args.interval: Float - The number of milliseconds between each piece&apos;s animation args.distance: Float - The number of the node&apos;s heights to drop (default is 1.5) args.fade: Boolean - If true, pieces fade out while in motion (default is true) args.random: Float - If set, pieces fall in random order. The value defines how much randomness is introduced args.reverseOrder: Boolean - If true, pieces animate in reversed order args.unhide: Boolean - If true, the peices fall from above and land in place" ilk="argument" name="args" />
            </scope>
            <scope doc="" ilk="function" name="build" signature="build(args)">
              <variable citdl="Object" ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="Split a block of text into words or letters and fade them" ilk="function" name="blockFadeOut" returns="dojo._Animation" signature="blockFadeOut(args)">
              <variable citdl="Object" doc="args.words: Boolean - If true, text will be split into words rather than characters args.interval: Float - The number of milliseconds between each piece&apos;s animation (default is 0) args.random: Float - If true, pieces have a random delay. The value defines how much randomness is introduced args.reverseOrder: Boolean - If true, pieces animate in reversed order args.unhide: Boolean - If true, the animation is reversed" ilk="argument" name="args" />
            </scope>
            <scope doc="" ilk="function" name="blockFadeIn" signature="blockFadeIn(args)">
              <variable citdl="Object" ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="Split a block of text into words or letters and backspace them in sequence" ilk="function" name="backspace" returns="dojo._Animation" signature="backspace(args)">
              <variable citdl="Object" doc="args.interval: Float - The number of milliseconds between each piece&apos;s animation (default is determined by text length and args.duration); args.wordDelay: Integer - The number of milliseconds between each word (only effective when args.unhide = true) args.fixed: Boolean - If true, only style.opacity changes; otherwise, style.display changes between none and inline, adding realism (default = false) args.random: Float - If true, pieces have a random delay. The value defines how much randomness is introduced (only effective when args.unhide = true) args.unhide: Boolean - If true, the animation is reversed" ilk="argument" name="args" />
            </scope>
          </scope>
        </variable>
        <variable citdl="Object" doc="Cross-browser vector graphics API" name="gfx">
          <scope doc="an object, which makes a shape follow the mouse, used as a default mover, and as a base class for custom movers" ilk="function" name="Mover" signature="Mover(shape,e,host)">
            <variable citdl="dojox.gfx.Shape" doc="a shape object to be moved" ilk="argument" name="shape" />
            <variable citdl="Event" doc="a mouse event, which started the move; only clientX and clientY properties are used" ilk="argument" name="e" />
            <variable citdl="Object" doc="object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)" ilk="argument" name="host" />
            <scope doc="event processor for onmousemove" ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="it is meant to be called only once" ilk="function" name="onFirstMove" />
            <scope doc="stops the move, deletes all references, so the object can be garbage-collected" ilk="function" name="destroy" />
            <variable doc="" name="lastX" />
            <variable doc="" name="lastY" />
            <variable doc="" name="events" />
            <variable citdl="dojox.gfx.Shape" doc="a shape object to be moved" name="shape" />
            <variable citdl="Object?" doc="object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)" name="host" />
          </scope>
          <scope doc="Create this font object based on the SVG Font definition at url." ilk="function" name="VectorFont" signature="VectorFont(url)">
            <variable citdl="String|dojo._Url" ilk="argument" name="url" />
            <scope attributes="private" doc="" name="_entityRe" />
            <scope attributes="private" doc="" ilk="function" name="_decodeEntitySequence" returns="undefined|String" signature="_decodeEntitySequence(str)">
              <variable ilk="argument" name="str" />
            </scope>
            <scope attributes="private" doc="Take the loaded SVG Font definition file and convert the info into things we can use. The SVG Font definition must follow the SVG 1.1 Font specification." ilk="function" name="_parse" signature="_parse(svg,url)">
              <variable citdl="String" ilk="argument" name="svg" />
              <variable citdl="String" ilk="argument" name="url" />
            </scope>
            <scope attributes="private" doc="Clean off all of the given mixin parameters." ilk="function" name="_clean" />
            <scope attributes="private" doc="Load the passed SVG and send it to the parser for parsing." ilk="function" name="load" returns="dojox.gfx.VectorFont" signature="load(url)">
              <variable citdl="String|dojo._Url" ilk="argument" name="url" />
            </scope>
            <scope attributes="private" doc="Return if we&apos;ve loaded a font def, and the parsing was successful." ilk="function" name="initialized" returns="Boolean" />
            <scope attributes="private" doc="" ilk="function" name="_round" signature="_round(n)">
              <variable ilk="argument" name="n" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_leading" signature="_leading(unit)">
              <variable ilk="argument" name="unit" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_normalize" signature="_normalize(str)">
              <variable ilk="argument" name="str" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getWidth" signature="_getWidth(glyphs)">
              <variable ilk="argument" name="glyphs" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getLongestLine" signature="_getLongestLine(lines)">
              <variable ilk="argument" name="lines" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_trim" signature="_trim(lines)">
              <variable ilk="argument" name="lines" />
            </scope>
            <scope attributes="private" doc="split passed chars into nLines by finding the closest whitespace." ilk="function" name="_split" signature="_split(chars,nLines)">
              <variable ilk="argument" name="chars" />
              <variable ilk="argument" name="nLines" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getSizeFactor" returns="undefined|String|dojox.gfx.VectorFont|Boolean" signature="_getSizeFactor(size)">
              <variable ilk="argument" name="size" />
            </scope>
            <scope attributes="private" doc="Find the scaling factor for the given phrase set." ilk="function" name="_getFitFactor" signature="_getFitFactor(lines,w,h,l)">
              <variable ilk="argument" name="lines" />
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="l" />
            </scope>
            <scope attributes="private" doc="Get the best number of lines to return given w and h." ilk="function" name="_getBestFit" signature="_getBestFit(chars,w,h,ldng)">
              <variable ilk="argument" name="chars" />
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="ldng" />
            </scope>
            <scope attributes="private" doc="Based on the given scale, do the best line splitting possible." ilk="function" name="_getBestFlow" signature="_getBestFlow(chars,w,scale)">
              <variable ilk="argument" name="chars" />
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="scale" />
            </scope>
            <scope doc="Get the width of the rendered text without actually rendering it." ilk="function" name="getWidth" signature="getWidth(text,scale)">
              <variable citdl="String" ilk="argument" name="text" />
              <variable citdl="Float" ilk="argument" name="scale" />
            </scope>
            <scope attributes="private" doc="return the height of a single line, sans leading, based on scale." ilk="function" name="getLineHeight" returns="Float" signature="getLineHeight(scale)">
              <variable citdl="Float" ilk="argument" name="scale" />
            </scope>
            <scope doc="return the y coordinate that is the center of the viewbox." ilk="function" name="getCenterline" signature="getCenterline(scale)">
              <variable citdl="Float" ilk="argument" name="scale" />
            </scope>
            <scope attributes="private" doc="Find the baseline coord for alignment; adjust for scale if passed." ilk="function" name="getBaseline" returns="Float" signature="getBaseline(scale)">
              <variable citdl="Float" ilk="argument" name="scale" />
            </scope>
            <scope attributes="private" doc="based on the passed parameters, draw the given text using paths defined by this font." ilk="function" name="draw" returns="dojox.gfx.Group" signature="draw(group,textArgs,fontArgs,fillArgs,strokeArgs)">
              <variable citdl="dojox.gfx.Container" ilk="argument" name="group" />
              <variable citdl="dojox.gfx.__TextArgs" ilk="argument" name="textArgs" />
              <variable citdl="dojox.gfx.__FontArgs" ilk="argument" name="fontArgs" />
              <variable citdl="dojox.gfx.__FillArgs" ilk="argument" name="fillArgs" />
              <variable citdl="dojox.gfx.__StrokeArgs" ilk="argument" name="strokeArgs" />
            </scope>
            <scope doc="" ilk="function" name="onLoadBegin" signature="onLoadBegin(url)">
              <variable citdl="String" ilk="argument" name="url" />
            </scope>
            <scope doc="" ilk="function" name="onLoad" signature="onLoad(font)">
              <variable citdl="dojox.gfx.VectorFont" ilk="argument" name="font" />
            </scope>
            <variable attributes="private" doc="" name="_defaultLeading" />
          </scope>
          <variable citdl="Object" doc="" name="vectorFontFitting">
            <scope doc="" name="NONE" />
            <scope doc="" name="FLOW" />
            <scope doc="" name="FIT" />
          </variable>
          <scope doc="" name="defaultVectorText">
            <scope doc="" name="text" />
            <scope doc="" name="leading" />
          </scope>
          <scope doc="" name="defaultVectorFont" />
          <variable attributes="private" citdl="Object" doc="" name="_vectorFontCache" />
          <variable attributes="private" citdl="Object" doc="" name="_svgFontCache" />
          <scope doc="" ilk="function" name="getVectorFont" signature="getVectorFont(url)">
            <variable citdl="String" ilk="argument" name="url" />
          </scope>
          <variable citdl="Object" doc="" name="VectorText" />
          <scope doc="" name="defaultPath">
            <scope doc="" name="path" />
          </scope>
          <scope doc="" name="defaultPolyline">
            <scope doc="" name="points" />
          </scope>
          <scope doc="" name="defaultRect">
            <scope doc="" name="x" />
          </scope>
          <scope doc="" name="defaultEllipse">
            <scope doc="" name="cx" />
          </scope>
          <scope doc="" name="defaultCircle">
            <scope doc="" name="cx" />
          </scope>
          <scope doc="" name="defaultLine">
            <scope doc="" name="x1" />
          </scope>
          <scope doc="" name="defaultImage">
            <scope doc="" name="x" />
          </scope>
          <scope doc="" name="defaultText">
            <scope doc="" name="x" />
            <scope doc="" name="decoration" />
          </scope>
          <scope doc="" name="defaultTextPath">
            <scope doc="" name="text" />
            <scope doc="" name="decoration" />
          </scope>
          <scope doc="" name="defaultStroke">
            <scope doc="" name="color" />
            <scope doc="" name="cap" />
          </scope>
          <scope doc="" name="defaultLinearGradient">
            <scope doc="" name="colors" />
          </scope>
          <scope doc="" name="defaultRadialGradient">
            <scope doc="" name="colors" />
          </scope>
          <scope doc="" name="defaultPattern">
            <scope doc="" name="x" />
          </scope>
          <scope doc="" name="defaultFont">
            <scope doc="" name="weight" />
          </scope>
          <scope doc="" name="getDefault" />
          <scope attributes="private" doc="converts any legal color representation to normalized dojo.Color object" ilk="function" name="normalizeColor" returns="dojo.Color" signature="normalizeColor(color)">
            <variable citdl="Color" ilk="argument" name="color" />
          </scope>
          <scope attributes="private" doc="updates an existing object with properties from an &amp;amp;quot;update&amp;amp;quot; object" ilk="function" name="normalizeParameters" returns="Object" signature="normalizeParameters(existed,update)">
            <variable citdl="Object" doc="the &amp;amp;quot;target&amp;amp;quot; object to be updated" ilk="argument" name="existed" />
            <variable citdl="Object" doc="the &amp;amp;quot;update&amp;amp;quot; object, whose properties will be used to update the existed object" ilk="argument" name="update" />
          </scope>
          <scope attributes="private" doc="copies the original object, and all copied properties from the &amp;amp;quot;update&amp;amp;quot; object" ilk="function" name="makeParameters" returns="Object" signature="makeParameters(defaults,update)">
            <variable citdl="Object" doc="the object to be cloned before updating" ilk="argument" name="defaults" />
            <variable citdl="Object" doc="the object, which properties are to be cloned during updating" ilk="argument" name="update" />
          </scope>
          <scope attributes="private" doc="converts a number to a string using a fixed notation" ilk="function" name="formatNumber" returns="String" signature="formatNumber(x,addSpace)">
            <variable citdl="Number" doc="number to be converted" ilk="argument" name="x" />
            <variable citdl="Boolean" doc="if it is true, add a space before a positive number" ilk="argument" name="addSpace" />
          </scope>
          <scope attributes="private" doc="converts a font object to a CSS font string" ilk="function" name="makeFontString" returns="Object" signature="makeFontString(font)">
            <variable citdl="Object" doc="font object (see dojox.gfx.defaultFont)" ilk="argument" name="font" />
          </scope>
          <scope attributes="private" doc="converts a CSS font string to a font object" ilk="function" name="splitFontString" returns="Object" signature="splitFontString(str)">
            <variable citdl="String" doc="a CSS font string" ilk="argument" name="str" />
          </scope>
          <scope doc="" name="cm_in_pt" />
          <scope doc="" name="mm_in_pt" />
          <scope attributes="private" doc="returns a number of pixels per point" ilk="function" name="px_in_pt" returns="Number" />
          <scope attributes="private" doc="converts points to pixels" ilk="function" name="pt2px" returns="Number" signature="pt2px(len)">
            <variable citdl="Number" doc="a value in points" ilk="argument" name="len" />
          </scope>
          <scope attributes="private" doc="converts pixels to points" ilk="function" name="px2pt" returns="Number" signature="px2pt(len)">
            <variable citdl="Number" doc="a value in pixels" ilk="argument" name="len" />
          </scope>
          <scope attributes="private" doc="converts any length value to pixels" ilk="function" name="normalizedLength" returns="Number" signature="normalizedLength(len)">
            <variable citdl="String" doc="a length, e.g., &amp;amp;quot;12pc&amp;amp;quot;" ilk="argument" name="len" />
          </scope>
          <scope doc="" name="pathVmlRegExp" />
          <scope doc="" name="pathSvgRegExp" />
          <scope doc="" ilk="function" name="equalSources" signature="equalSources(a,b)">
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="b" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <variable citdl="Object" doc="" name="arc">
            <scope doc="" name="unitArcAsBezier" />
            <scope doc="" name="curvePI4" />
            <scope attributes="private" doc="calculates an arc as a series of Bezier curves given the last point and a standard set of SVG arc parameters, it returns an array of arrays of parameters to form a series of absolute Bezier curves." ilk="function" name="arcAsBezier" returns="Object" signature="arcAsBezier(last,rx,ry,xRotg,large,sweep,x,y)">
              <variable citdl="Object" doc="a point-like object as a start of the arc" ilk="argument" name="last" />
              <variable citdl="Number" doc="a horizontal radius for the virtual ellipse" ilk="argument" name="rx" />
              <variable citdl="Number" doc="a vertical radius for the virtual ellipse" ilk="argument" name="ry" />
              <variable citdl="Number" doc="a rotation of an x axis of the virtual ellipse in degrees" ilk="argument" name="xRotg" />
              <variable citdl="Boolean" doc="which part of the ellipse will be used (the larger arc if true)" ilk="argument" name="large" />
              <variable citdl="Boolean" doc="direction of the arc (CW if true)" ilk="argument" name="sweep" />
              <variable citdl="Number" doc="the x coordinate of the end point of the arc" ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="attach" />
          <scope doc="a group shape (VML), which can be used to logically group shapes (e.g, to propagate matricies)" ilk="function" name="Group">
            <scope attributes="private" doc="render the group" ilk="function" name="_render" signature="_render(ctx)">
              <variable citdl="Object" ilk="argument" name="ctx" />
            </scope>
            <scope doc="sets a raw SVG node to be used by this shape" ilk="function" name="setRawNode" signature="setRawNode(rawNode)">
              <variable citdl="Node" doc="an SVG node" ilk="argument" name="rawNode" />
              <scope citdl="Node" doc="an SVG node" name="rawNode" />
            </scope>
            <variable doc="" name="rawNode" />
            <scope doc="" name="nodeType" />
            <scope attributes="private" doc="applies a transformation matrix to a group" ilk="function" name="_applyTransform" returns="self" />
            <scope attributes="private" doc="sets the width and height of the rawNode, if the surface sixe has been changed" ilk="function" name="_setDimensions" returns="self" signature="_setDimensions(width,height)">
              <variable citdl="String" doc="width in pixels" ilk="argument" name="width" />
              <variable citdl="String" doc="height in pixels" ilk="argument" name="height" />
            </scope>
          </scope>
          <scope doc="a rectangle shape (VML)" ilk="function" name="Rect">
            <scope attributes="private" doc="" ilk="function" name="_renderShape" signature="_renderShape(ctx)">
              <variable citdl="Object" ilk="argument" name="ctx" />
            </scope>
            <scope attributes="private" doc="sets a rectangle shape object (VML)" ilk="function" name="setShape" returns="self" signature="setShape(newShape)">
              <variable citdl="Object" doc="a rectangle shape object" ilk="argument" name="newShape" />
            </scope>
            <scope attributes="private" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" ilk="function" name="_getAdjustedMatrix" returns="dojox.gfx.Matrix2D" />
            <variable doc="" name="shape" />
            <variable doc="" name="bbox" />
            <scope doc="" name="nodeType" />
            <variable doc="" name="rawNode">
              <variable doc="" name="arcsize" />
            </variable>
          </scope>
          <scope doc="an ellipse shape (VML)" ilk="function" name="Ellipse">
            <scope attributes="private" doc="sets an ellipse shape object (VML)" ilk="function" name="setShape" returns="self" signature="setShape(newShape)">
              <variable citdl="Object" doc="an ellipse shape object" ilk="argument" name="newShape" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_renderShape" signature="_renderShape(ctx)">
              <variable citdl="Object" ilk="argument" name="ctx" />
            </scope>
            <variable doc="" name="canvasEllipse" />
            <scope attributes="private" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" ilk="function" name="_getAdjustedMatrix" returns="dojox.gfx.Matrix2D" />
            <variable doc="" name="shape" />
            <variable doc="" name="bbox" />
            <scope doc="" name="nodeType" />
          </scope>
          <scope doc="a circle shape (VML)" ilk="function" name="Circle">
            <scope attributes="private" doc="" ilk="function" name="_renderShape" signature="_renderShape(ctx)">
              <variable citdl="Object" ilk="argument" name="ctx" />
            </scope>
            <scope attributes="private" doc="sets a circle shape object (VML)" ilk="function" name="setShape" returns="self" signature="setShape(newShape)">
              <variable citdl="Object" doc="a circle shape object" ilk="argument" name="newShape" />
            </scope>
            <scope attributes="private" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" ilk="function" name="_getAdjustedMatrix" returns="dojox.gfx.Matrix2D" />
            <variable doc="" name="shape" />
            <variable doc="" name="bbox" />
            <scope doc="" name="nodeType" />
          </scope>
          <scope doc="a line shape (VML)" ilk="function" name="Line" signature="Line(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope attributes="private" doc="" ilk="function" name="_renderShape" signature="_renderShape(ctx)">
              <variable citdl="Object" ilk="argument" name="ctx" />
            </scope>
            <scope attributes="private" doc="sets a line shape object (VML)" ilk="function" name="setShape" returns="self" signature="setShape(newShape)">
              <variable citdl="Object" doc="a line shape object" ilk="argument" name="newShape" />
            </scope>
            <variable doc="" name="shape" />
            <variable doc="" name="bbox" />
            <scope doc="" name="nodeType" />
            <scope name="rawNode">
              <scope name="path">
                <variable doc="" name="v" />
              </scope>
            </scope>
          </scope>
          <scope doc="a polyline/polygon shape (VML)" ilk="function" name="Polyline" signature="Polyline(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope attributes="private" doc="sets a polyline/polygon shape object (VML)" ilk="function" name="setShape" returns="self" signature="setShape(points,closed)">
              <variable citdl="Object" doc="a polyline/polygon shape object" ilk="argument" name="points" />
              <variable citdl="Boolean" doc="if true, close the polyline explicitely" ilk="argument" name="closed" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_renderShape" signature="_renderShape(ctx)">
              <variable citdl="Object" ilk="argument" name="ctx" />
            </scope>
            <variable doc="" name="canvasPolyline" />
            <variable doc="" name="shape" />
            <variable doc="" name="box" />
            <scope name="rawNode">
              <variable doc="" name="points" />
              <scope name="path">
                <variable doc="" name="v" />
              </scope>
            </scope>
            <scope doc="" name="nodeType" />
            <variable doc="" name="bbox" />
          </scope>
          <scope doc="an image (VML)" ilk="function" name="Image">
            <scope attributes="private" doc="sets an image shape object (VML)" ilk="function" name="setShape" returns="self" signature="setShape(newShape)">
              <variable citdl="Object" doc="an image shape object" ilk="argument" name="newShape" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_renderShape" signature="_renderShape(ctx)">
              <variable citdl="Object" ilk="argument" name="ctx" />
            </scope>
            <variable doc="" name="canvasImage" />
            <scope attributes="private" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" ilk="function" name="_getAdjustedMatrix" returns="dojox.gfx.Matrix2D" />
            <scope doc="assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp;amp;amp; stroke by default)" ilk="function" name="setRawNode" signature="setRawNode(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <variable doc="" name="shape" />
            <variable doc="" name="bbox" />
            <variable doc="" name="rawNode">
              <scope name="firstChild">
                <variable doc="" name="src" />
              </scope>
            </variable>
            <scope doc="" name="nodeType" />
            <scope attributes="private" doc="" ilk="function" name="_applyTransform" returns="self" />
            <scope attributes="private" doc="sets the width and height of the rawNode, if the surface sixe has been changed" ilk="function" name="_setDimensions" returns="self" signature="_setDimensions(width,height)">
              <variable citdl="String" doc="width in pixels" ilk="argument" name="width" />
              <variable citdl="String" doc="height in pixels" ilk="argument" name="height" />
            </scope>
          </scope>
          <scope doc="an anchored text (VML)" ilk="function" name="Text" signature="Text(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope attributes="private" doc="" ilk="function" name="_renderShape" signature="_renderShape(ctx)">
              <variable citdl="Object" ilk="argument" name="ctx" />
            </scope>
            <scope attributes="private" doc="sets a text shape object (VML)" ilk="function" name="setShape" returns="self" signature="setShape(newShape)">
              <variable citdl="Object" doc="a text shape object" ilk="argument" name="newShape" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_delayAlignment" returns="String|self|dojox.gfx.Matrix2D" />
            <scope attributes="private" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" ilk="function" name="_getAdjustedMatrix" />
            <scope attributes="private" doc="ignore setting a stroke style" ilk="function" name="setStroke" returns="self" />
            <scope attributes="private" doc="" ilk="function" name="_setFillAttr" signature="_setFillAttr(f)">
              <variable ilk="argument" name="f" />
            </scope>
            <scope doc="assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp;amp;amp; stroke by default)" ilk="function" name="setRawNode" signature="setRawNode(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope doc="get the text width, in px" ilk="function" name="getTextWidth" />
            <variable doc="" name="shape" />
            <variable doc="" name="bbox" />
            <variable attributes="private" doc="" name="_delay" />
            <variable attributes="private" doc="" name="_delta" />
            <variable doc="" name="rawNode">
              <variable doc="" name="foreground" />
            </variable>
            <scope doc="" name="nodeType" />
            <variable attributes="private" citdl="Object" doc="" name="_alignment">
              <scope doc="" name="start" />
              <scope doc="" name="middle" />
              <scope doc="" name="end" />
            </variable>
            <scope attributes="private" doc="sets a font object (VML)" ilk="function" name="_setFont" />
            <scope attributes="private" doc="returns the cumulative (&amp;amp;quot;real&amp;amp;quot;) transformation matrix by combining the shape&apos;s matrix with its parent&apos;s matrix; it makes a correction for a font size" ilk="function" name="_getRealMatrix" returns="dojox.gfx.Matrix2D" />
            <variable doc="" name="fontStyle" />
          </scope>
          <scope doc="a path shape (VML)" ilk="function" name="Path" signature="Path(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope doc="forms a path using a shape (VML)" ilk="function" name="setShape" signature="setShape(newShape)">
              <variable citdl="Object" doc="an VML path string or a path object (see dojox.gfx.defaultPath)" ilk="argument" name="newShape" />
            </scope>
            <scope attributes="private" doc="updates the bounding box of path with new segment" ilk="function" name="_updateWithSegment" signature="_updateWithSegment(segment)">
              <variable citdl="Object" doc="a segment" ilk="argument" name="segment" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_renderShape" signature="_renderShape(ctx)">
              <variable citdl="Object" ilk="argument" name="ctx" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_moveToA" signature="_moveToA(segment)">
              <variable ilk="argument" name="segment" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_moveToR" signature="_moveToR(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_lineToA" signature="_lineToA(segment)">
              <variable ilk="argument" name="segment" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_lineToR" signature="_lineToR(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_hLineToA" signature="_hLineToA(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_hLineToR" signature="_hLineToR(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_vLineToA" signature="_vLineToA(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_vLineToR" signature="_vLineToR(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_curveToA" signature="_curveToA(segment)">
              <variable ilk="argument" name="segment" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_curveToR" signature="_curveToR(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_smoothCurveToA" signature="_smoothCurveToA(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_smoothCurveToR" signature="_smoothCurveToR(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_qCurveToA" signature="_qCurveToA(segment)">
              <variable ilk="argument" name="segment" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_qCurveToR" signature="_qCurveToR(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_qSmoothCurveToA" signature="_qSmoothCurveToA(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_qSmoothCurveToR" signature="_qSmoothCurveToR(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_arcTo" signature="_arcTo(segment,last)">
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="last" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_closePath" />
            <variable doc="" name="canvasPath" />
            <variable doc="" name="last">
              <variable doc="" name="x" />
              <variable doc="" name="y" />
            </variable>
            <variable doc="" name="lastControl">
              <variable doc="" name="x" />
              <variable doc="" name="y" />
            </variable>
            <scope name="rawNode">
              <variable doc="" name="data" />
              <scope name="path">
                <variable doc="" name="v" />
              </scope>
            </scope>
            <scope doc="" name="nodeType" />
            <variable attributes="private" citdl="Object" doc="" name="_pathVmlToSvgMap">
              <scope doc="" name="m" />
              <scope doc="" name="l" />
              <scope doc="" name="t" />
              <scope doc="" name="r" />
              <scope doc="" name="c" />
              <scope doc="" name="v" />
              <scope doc="" name="qb" />
              <scope doc="" name="x" />
              <scope doc="" name="e" />
            </variable>
            <variable citdl="Object" doc="" name="renderers">
              <scope doc="" name="M" />
              <scope doc="" name="L" />
              <scope doc="" name="H" />
              <scope doc="" name="V" />
              <scope doc="" name="C" />
              <scope doc="" name="S" />
              <scope doc="" name="Q" />
              <scope doc="" name="T" />
              <scope doc="" name="A" />
              <scope doc="" name="Z" />
            </variable>
            <scope attributes="private" doc="" ilk="function" name="_addArgs" signature="_addArgs(path,segment,from,upto)">
              <variable ilk="argument" name="path" />
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="from" />
              <variable ilk="argument" name="upto" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_adjustRelCrd" signature="_adjustRelCrd(last,segment,step)">
              <variable ilk="argument" name="last" />
              <variable ilk="argument" name="segment" />
              <variable ilk="argument" name="step" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_adjustRelPos" signature="_adjustRelPos(last,segment)">
              <variable ilk="argument" name="last" />
              <variable ilk="argument" name="segment" />
            </scope>
            <variable doc="" name="vmlPath" />
          </scope>
          <scope doc="a textpath shape (VML)" ilk="function" name="TextPath" signature="TextPath(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope attributes="private" doc="" ilk="function" name="_renderShape" signature="_renderShape(ctx)">
              <variable citdl="Object" ilk="argument" name="ctx" />
            </scope>
            <scope attributes="private" doc="updates the bounding box of path with new segment" ilk="function" name="_updateWithSegment" signature="_updateWithSegment(segment)">
              <variable citdl="Object" doc="a segment" ilk="argument" name="segment" />
            </scope>
            <scope attributes="private" doc="forms a path using a shape (SVG)" ilk="function" name="setShape" returns="self" signature="setShape(newShape)">
              <variable citdl="Object" doc="an SVG path string or a path object (see dojox.gfx.defaultPath)" ilk="argument" name="newShape" />
            </scope>
            <scope attributes="private" doc="sets a text shape object (VML)" ilk="function" name="_setText" />
            <scope doc="" name="nodeType" />
            <scope attributes="private" doc="" ilk="function" name="_setTextPath" />
            <scope attributes="private" doc="sets a text to be drawn along the path" ilk="function" name="setText" returns="self" signature="setText(newText)">
              <variable ilk="argument" name="newText" />
            </scope>
            <scope attributes="private" doc="sets a font for text" ilk="function" name="setFont" returns="self" signature="setFont(newFont)">
              <variable ilk="argument" name="newFont" />
            </scope>
            <scope attributes="private" doc="sets a font object (VML)" ilk="function" name="_setFont" />
            <variable doc="" name="text" />
            <variable doc="" name="fontStyle" />
            <variable doc="" name="bbox" />
          </scope>
          <scope doc="a surface object to be used for drawings (VML)" ilk="function" name="Surface">
            <scope attributes="private" doc="sets the width and height of the rawNode" ilk="function" name="setDimensions" returns="self" signature="setDimensions(width,height)">
              <variable citdl="String" doc="width of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" ilk="argument" name="width" />
              <variable citdl="String" doc="height of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" ilk="argument" name="height" />
              <scope citdl="String" doc="width of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" name="width" />
              <scope citdl="String" doc="height of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" name="height" />
            </scope>
            <scope attributes="private" doc="returns an object with properties &amp;amp;quot;width&amp;amp;quot; and &amp;amp;quot;height&amp;amp;quot;" ilk="function" name="getDimensions" returns="Object" />
            <scope attributes="private" doc="render the all shapes" ilk="function" name="_render" />
            <scope doc="internal method, which is called when we may need to redraw" ilk="function" name="makeDirty" />
            <scope doc="internal method, which starts an image download and renders, when it is ready" ilk="function" name="downloadImage" signature="downloadImage(img,url)">
              <variable citdl="Image" doc="the image object" ilk="argument" name="img" />
              <variable citdl="String" doc="the url of the image" ilk="argument" name="url" />
            </scope>
            <scope doc="" ilk="function" name="onImageLoad" />
            <scope doc="" ilk="function" name="getEventSource" />
            <scope doc="" ilk="function" name="connect" />
            <scope doc="" ilk="function" name="disconnect" />
            <variable doc="" name="width" />
            <variable doc="" name="height" />
            <scope name="rawNode">
              <variable doc="" name="width" />
              <variable doc="" name="height" />
            </scope>
            <variable doc="" name="pendingRender" />
            <variable doc="" name="pendingImageCount" />
            <scope doc="" ilk="function" name="destroy" />
            <variable doc="" name="defNode" />
            <scope attributes="private" doc="" ilk="function" name="createViewport" returns="self|dojox.gfx3d.Edge|dojox.gfx3d.Polygon|dojox.gfx3d.Cube|dojox.gfx3d.Scene|dojox.gfx3d.Object" />
          </scope>
          <variable citdl="Object" doc="" name="canvas" />
          <scope attributes="private" doc="creates a shape from a Node" ilk="function" name="attachNode" returns="dojox.gfx.Shape" signature="attachNode(node)">
            <variable citdl="Node" doc="an VML node" ilk="argument" name="node" />
          </scope>
          <variable citdl="Object" doc="" name="canvas_attach" />
          <scope attributes="private" doc="decompose a 2D matrix into translation, scaling, and rotation components" ilk="function" name="decompose" returns="Object" signature="decompose(matrix)">
            <variable citdl="dojox.gfx.matrix.Matrix2D" doc="a 2D matrix-like object" ilk="argument" name="matrix" />
          </scope>
          <variable citdl="Object" doc="" name="fx" />
          <variable citdl="Object" doc="" name="matrix">
            <scope attributes="private" doc="" ilk="function" name="_degToRad" signature="_degToRad(degree)">
              <variable ilk="argument" name="degree" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_radToDeg" signature="_radToDeg(radian)">
              <variable ilk="argument" name="radian" />
            </scope>
            <scope doc="a 2D matrix object" ilk="function" name="Matrix2D" signature="Matrix2D(arg)">
              <variable citdl="Object" doc="a 2D matrix-like object, a number, or an array of such objects" ilk="argument" name="arg" />
              <variable doc="" name="xx" />
              <scope doc="" name="xy" />
              <scope doc="" name="yx" />
              <scope doc="" name="yy" />
              <scope doc="" name="dx" />
              <scope doc="" name="dy" />
            </scope>
          </variable>
          <scope doc="" name="Matrix2D" />
          <variable citdl="Object" doc="" name="move" />
          <variable citdl="Object" doc="" name="path">
            <scope doc="a path constructor" ilk="function" name="Path" signature="Path(rawNode)">
              <variable citdl="Node" doc="a DOM node to be used by this path object" ilk="argument" name="rawNode" />
              <scope attributes="private" doc="sets an absolute or relative mode for path points" ilk="function" name="setAbsoluteMode" returns="self" signature="setAbsoluteMode(mode)">
                <variable citdl="Boolean" doc="true/false or &amp;amp;quot;absolute&amp;amp;quot;/&amp;amp;quot;relative&amp;amp;quot; to specify the mode" ilk="argument" name="mode" />
              </scope>
              <scope attributes="private" doc="returns a current value of the absolute mode" ilk="function" name="getAbsoluteMode" returns="Boolean" />
              <scope attributes="private" doc="returns the bounding box {x, y, width, height} or null" ilk="function" name="getBoundingBox" returns="dojox.gfx.Rectangle" />
              <scope attributes="private" doc="returns the last point in the path, or null" ilk="function" name="getLastPosition" returns="Object" />
              <scope attributes="private" doc="updates the bounding box of path with new point" ilk="function" name="_updateBBox" returns="self|Boolean|dojox.gfx.Rectangle|Object" signature="_updateBBox(x,y)">
                <variable citdl="Number" doc="an x coordinate" ilk="argument" name="x" />
                <variable ilk="argument" name="y" />
              </scope>
              <scope attributes="private" doc="updates the bounding box of path with new segment" ilk="function" name="_updateWithSegment" signature="_updateWithSegment(segment)">
                <variable citdl="Object" doc="a segment" ilk="argument" name="segment" />
              </scope>
              <variable attributes="private" citdl="Object" doc="" name="_validSegments">
                <scope doc="" name="m" />
                <scope doc="" name="l" />
                <scope doc="" name="h" />
                <scope doc="" name="v" />
                <scope doc="" name="c" />
                <scope doc="" name="s" />
                <scope doc="" name="q" />
                <scope doc="" name="t" />
                <scope doc="" name="a" />
                <scope doc="" name="z" />
              </variable>
              <scope attributes="private" doc="adds a segment" ilk="function" name="_pushSegment" signature="_pushSegment(action,args)">
                <variable citdl="String" doc="valid SVG code for a segment&apos;s type" ilk="argument" name="action" />
                <variable citdl="Array" doc="a list of parameters for this segment" ilk="argument" name="args" />
              </scope>
              <scope attributes="private" doc="converts an array of arguments to plain numeric values" ilk="function" name="_collectArgs" signature="_collectArgs(array,args)">
                <variable citdl="Array" doc="an output argument (array of numbers)" ilk="argument" name="array" />
                <variable citdl="Array" doc="an input argument (can be values of Boolean, Number, dojox.gfx.Point, or an embedded array of them)" ilk="argument" name="args" />
              </scope>
              <scope attributes="private" doc="formes a move segment" ilk="function" name="moveTo" returns="self" />
              <scope attributes="private" doc="formes a line segment" ilk="function" name="lineTo" returns="self" />
              <scope attributes="private" doc="formes a horizontal line segment" ilk="function" name="hLineTo" returns="self" />
              <scope attributes="private" doc="formes a vertical line segment" ilk="function" name="vLineTo" returns="self" />
              <scope attributes="private" doc="formes a curve segment" ilk="function" name="curveTo" returns="self" />
              <scope attributes="private" doc="formes a smooth curve segment" ilk="function" name="smoothCurveTo" returns="self" />
              <scope attributes="private" doc="formes a quadratic curve segment" ilk="function" name="qCurveTo" returns="self" />
              <scope attributes="private" doc="formes a quadratic smooth curve segment" ilk="function" name="qSmoothCurveTo" returns="self" />
              <scope attributes="private" doc="formes an elliptic arc segment" ilk="function" name="arcTo" returns="self" />
              <scope attributes="private" doc="closes a path" ilk="function" name="closePath" returns="self" />
              <scope attributes="private" doc="forms a path using an SVG path string" ilk="function" name="_setPath" signature="_setPath(path)">
                <variable citdl="String" doc="an SVG path string" ilk="argument" name="path" />
              </scope>
              <scope attributes="private" doc="forms a path using a shape" ilk="function" name="setShape" returns="self" signature="setShape(newShape)">
                <variable citdl="Object" doc="an SVG path string or a path object (see dojox.gfx.defaultPath)" ilk="argument" name="newShape" />
              </scope>
              <scope attributes="private" doc="" name="_2PI" />
              <variable doc="" name="absolute" />
              <variable doc="" name="bbox">
                <variable doc="" name="l" />
                <variable doc="" name="r" />
                <variable doc="" name="t" />
                <variable doc="" name="b" />
              </variable>
              <variable doc="" name="last">
                <variable doc="" name="x" />
                <variable doc="" name="y" />
              </variable>
              <variable doc="" name="shape">
                <variable doc="" name="path" />
              </variable>
              <variable doc="" name="segments" />
              <variable citdl="Node" doc="a DOM node to be used by this path object" name="rawNode" />
            </scope>
            <scope doc="a TextPath shape constructor" ilk="function" name="TextPath" signature="TextPath(rawNode)">
              <variable citdl="Node" doc="a DOM node to be used by this TextPath object" ilk="argument" name="rawNode" />
              <scope attributes="private" doc="returns the current text object or null" ilk="function" name="getText" returns="Object" />
              <scope attributes="private" doc="sets a text to be drawn along the path" ilk="function" name="setText" returns="self" signature="setText(newText)">
                <variable ilk="argument" name="newText" />
              </scope>
              <scope attributes="private" doc="returns the current font object or null" ilk="function" name="getFont" returns="Object" />
              <scope attributes="private" doc="sets a font for text" ilk="function" name="setFont" returns="self" signature="setFont(newFont)">
                <variable ilk="argument" name="newFont" />
              </scope>
              <variable doc="" name="text" />
              <variable doc="" name="fontStyle" />
            </scope>
          </variable>
          <scope doc="" name="Shape">
            <scope attributes="private" doc="returns the current DOM Node or null" ilk="function" name="getNode" returns="Node" />
            <scope attributes="private" doc="returns the current shape object or null (see dojox.gfx.defaultPath, dojox.gfx.defaultPolyline, dojox.gfx.defaultRect, dojox.gfx.defaultEllipse, dojox.gfx.defaultCircle, dojox.gfx.defaultLine, or dojox.gfx.defaultImage)" ilk="function" name="getShape" returns="Object" />
            <scope attributes="private" doc="returns the current transformation matrix or null" ilk="function" name="getTransform" returns="dojox.gfx.Matrix2D" />
            <scope attributes="private" doc="returns the current fill object or null (see dojox.gfx.defaultLinearGradient, dojox.gfx.defaultRadialGradient, dojox.gfx.defaultPattern, or dojo.Color)" ilk="function" name="getFill" returns="Object" />
            <scope attributes="private" doc="returns the current stroke object or null (see dojox.gfx.defaultStroke)" ilk="function" name="getStroke" returns="Object" />
            <scope attributes="private" doc="returns the parent or null (see dojox.gfx.Surface, dojox.gfx.shape.VirtualGroup, or dojox.gfx.Group)" ilk="function" name="getParent" returns="Object" />
            <scope attributes="private" doc="returns the bounding box or null (see dojox.gfx.defaultRect)" ilk="function" name="getBoundingBox" returns="dojox.gfx.Rectangle" />
            <scope attributes="private" doc="returns an array of four points or null four points represent four corners of the untransformed bounding box" ilk="function" name="getTransformedBoundingBox" returns="null|Array" />
            <scope attributes="private" doc="" ilk="function" name="getEventSource" returns="Node|Object|dojox.gfx.Matrix2D|dojox.gfx.Rectangle|null|Array" />
            <scope attributes="private" doc="sets a shape object (SVG)" ilk="function" name="setShape" returns="self" signature="setShape(newShape)">
              <variable citdl="Object" doc="a shape object (see dojox.gfx.defaultPath, dojox.gfx.defaultPolyline, dojox.gfx.defaultRect, dojox.gfx.defaultEllipse, dojox.gfx.defaultCircle, dojox.gfx.defaultLine, or dojox.gfx.defaultImage)" ilk="argument" name="newShape" />
            </scope>
            <scope attributes="private" doc="sets a fill object (SVG)" ilk="function" name="setFill" returns="self" signature="setFill(fill)">
              <variable citdl="Object" doc="a fill object (see dojox.gfx.defaultLinearGradient, dojox.gfx.defaultRadialGradient, dojox.gfx.defaultPattern, or dojo.Color)" ilk="argument" name="fill" />
            </scope>
            <scope attributes="private" doc="sets a stroke object (SVG)" ilk="function" name="setStroke" returns="self" signature="setStroke(stroke)">
              <variable citdl="Object" doc="a stroke object (see dojox.gfx.defaultStroke)" ilk="argument" name="stroke" />
            </scope>
            <scope attributes="private" doc="sets a transformation matrix" ilk="function" name="setTransform" returns="Node|Object|dojox.gfx.Matrix2D|dojox.gfx.Rectangle|null|Array|self" signature="setTransform(matrix)">
              <variable ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_applyTransform" />
            <scope attributes="private" doc="moves a shape to front of its parent&apos;s list of shapes" ilk="function" name="moveToFront" returns="self" />
            <scope doc="moves a shape to back of its parent&apos;s list of shapes" ilk="function" name="moveToBack" />
            <scope attributes="private" doc="moves a shape to front of its parent&apos;s list of shapes (SVG)" ilk="function" name="_moveToFront" returns="self" />
            <scope attributes="private" doc="moves a shape to back of its parent&apos;s list of shapes (SVG)" ilk="function" name="_moveToBack" returns="self" />
            <scope attributes="private" doc="multiplies the existing matrix with an argument on right side (this.matrix * matrix)" ilk="function" name="applyRightTransform" returns="self" signature="applyRightTransform(matrix)">
              <variable citdl="dojox.gfx.Matrix2D" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="multiplies the existing matrix with an argument on left side (matrix * this.matrix)" ilk="function" name="applyLeftTransform" returns="self" signature="applyLeftTransform(matrix)">
              <variable citdl="dojox.gfx.Matrix2D" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="a shortcut for dojox.gfx.Shape.applyRightTransform" ilk="function" name="applyTransform" returns="self" signature="applyTransform(matrix)">
              <variable citdl="dojox.gfx.Matrix2D" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="removes the shape from its parent&apos;s list of shapes" ilk="function" name="removeShape" returns="self" signature="removeShape(silently)">
              <variable citdl="Boolean" doc="if true, do not redraw a picture yet" ilk="argument" name="silently" />
            </scope>
            <scope attributes="private" doc="sets a parent" ilk="function" name="_setParent" returns="self" signature="_setParent(parent,matrix)">
              <variable citdl="Object" doc="a parent or null (see dojox.gfx.Surface, dojox.gfx.shape.VirtualGroup, or dojox.gfx.Group)" ilk="argument" name="parent" />
              <variable citdl="dojox.gfx.Matrix2D" doc="a 2D matrix or a matrix-like object" ilk="argument" name="matrix" />
              <variable citdl="Object" doc="a parent or null (see dojox.gfx.Surface, dojox.gfx.shape.VirtualGroup, or dojox.gfx.Group)" name="parent" />
            </scope>
            <scope attributes="private" doc="updates the parent matrix with new matrix" ilk="function" name="_updateParentMatrix" returns="self" signature="_updateParentMatrix(matrix)">
              <variable citdl="dojox.gfx.Matrix2D" doc="a 2D matrix or a matrix-like object" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="returns the cumulative (&amp;amp;quot;real&amp;amp;quot;) transformation matrix by combining the shape&apos;s matrix with its parent&apos;s matrix" ilk="function" name="_getRealMatrix" returns="dojox.gfx.Matrix2D" />
            <variable doc="" name="shape" />
            <variable doc="" name="bbox" />
            <variable doc="" name="fillStyle" />
            <variable doc="" name="strokeStyle" />
            <variable doc="" name="matrix" />
            <variable doc="" name="parent" />
            <variable doc="" name="parentMatrix" />
            <variable doc="" name="rawNode">
              <variable doc="" name="fill" />
            </variable>
            <scope attributes="private" doc="" ilk="function" name="_setFillAttr" signature="_setFillAttr(f)">
              <variable ilk="argument" name="f" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getParentSurface" />
            <scope doc="assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp;amp;amp; stroke by default)" ilk="function" name="setRawNode" signature="setRawNode(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope attributes="private" doc="returns the adjusted (&amp;amp;quot;real&amp;amp;quot;) transformation matrix" ilk="function" name="_getAdjustedMatrix" returns="dojox.gfx.Matrix2D" />
            <scope attributes="private" doc="" ilk="function" name="_setFillObject" signature="_setFillObject(f,nodeType)">
              <variable ilk="argument" name="f" />
              <variable ilk="argument" name="nodeType" />
            </scope>
          </scope>
          <variable citdl="Object" doc="" name="shape">
            <scope attributes="private" doc="a surface object to be used for drawings" ilk="function" name="Surface" returns="Node|Object|dojox.gfx.Matrix2D|dojox.gfx.Rectangle|null|Array|self">
              <scope doc="destroy all relevant external resources and release all external references to make this object garbage-collectible" ilk="function" name="destroy" />
              <scope attributes="private" doc="returns a node, which can be used to attach event listeners" ilk="function" name="getEventSource" returns="Node" />
              <scope attributes="private" doc="always returns the identity matrix" ilk="function" name="_getRealMatrix" returns="dojox.gfx.Matrix2D" />
              <scope doc="" name="isLoaded" />
              <scope doc="local event, fired once when the surface is created asynchronously, used only when isLoaded is false, required only for Silverlight." ilk="function" name="onLoad" signature="onLoad(surface)">
                <variable citdl="dojox.gfx.Surface" ilk="argument" name="surface" />
              </scope>
              <scope doc="" ilk="function" name="whenLoaded" signature="whenLoaded(context,method)">
                <variable citdl="Object" ilk="argument" name="context" />
                <variable citdl="Function|String" ilk="argument" name="method" />
              </scope>
              <variable attributes="private" doc="" name="_nodes" />
              <variable attributes="private" doc="" name="_events" />
              <variable doc="" name="rawNode" />
              <variable attributes="private" doc="" name="_parent">
                <variable doc="" name="innerHTML" />
              </variable>
            </scope>
            <scope doc="a generic rectangle" ilk="function" name="Rect" signature="Rect(rawNode)">
              <variable citdl="Node" doc="a DOM Node" ilk="argument" name="rawNode" />
              <scope attributes="private" doc="returns the bounding box (its shape in this case)" ilk="function" name="getBoundingBox" returns="dojox.gfx.Rectangle" />
              <variable doc="" name="shape" />
              <variable citdl="Node" doc="a DOM Node" name="rawNode" />
            </scope>
            <scope doc="a generic ellipse" ilk="function" name="Ellipse" signature="Ellipse(rawNode)">
              <variable citdl="Node" doc="a DOM Node" ilk="argument" name="rawNode" />
              <scope attributes="private" doc="returns the bounding box" ilk="function" name="getBoundingBox" returns="dojox.gfx.Rectangle" />
              <variable doc="" name="bbox" />
              <variable doc="" name="shape" />
              <variable citdl="Node" doc="a DOM Node" name="rawNode" />
            </scope>
            <scope doc="a generic circle (this is a helper object, which is defined for convenience)" ilk="function" name="Circle" signature="Circle(rawNode)">
              <variable citdl="Node" doc="a DOM Node" ilk="argument" name="rawNode" />
              <scope attributes="private" doc="returns the bounding box" ilk="function" name="getBoundingBox" returns="dojox.gfx.Rectangle" />
              <variable doc="" name="bbox" />
              <variable doc="" name="shape" />
              <variable citdl="Node" doc="a DOM Node" name="rawNode" />
            </scope>
            <scope doc="a generic line (this is a helper object, which is defined for convenience)" ilk="function" name="Line" signature="Line(rawNode)">
              <variable citdl="Node" doc="a DOM Node" ilk="argument" name="rawNode" />
              <scope attributes="private" doc="returns the bounding box" ilk="function" name="getBoundingBox" returns="dojox.gfx.Rectangle" />
              <variable doc="" name="bbox" />
              <variable doc="" name="shape" />
              <variable citdl="Node" doc="a DOM Node" name="rawNode" />
            </scope>
            <scope doc="a generic polyline/polygon (this is a helper object, which is defined for convenience)" ilk="function" name="Polyline" signature="Polyline(rawNode)">
              <variable citdl="Node" doc="a DOM Node" ilk="argument" name="rawNode" />
              <scope attributes="private" doc="sets a polyline/polygon shape object" ilk="function" name="setShape" returns="self" signature="setShape(points,closed)">
                <variable citdl="Object" doc="a polyline/polygon shape object" ilk="argument" name="points" />
                <variable citdl="Boolean" doc="close the polyline to make a polygon" ilk="argument" name="closed" />
              </scope>
              <scope attributes="private" doc="returns the bounding box" ilk="function" name="getBoundingBox" returns="dojox.gfx.Rectangle" />
              <variable doc="" name="bbox" />
              <variable doc="" name="shape" />
              <variable citdl="Node" doc="a DOM Node" name="rawNode" />
            </scope>
            <scope doc="a generic image (this is a helper object, which is defined for convenience)" ilk="function" name="Image" signature="Image(rawNode)">
              <variable citdl="Node" doc="a DOM Node" ilk="argument" name="rawNode" />
              <scope attributes="private" doc="returns the bounding box (its shape in this case)" ilk="function" name="getBoundingBox" returns="dojox.gfx.Rectangle" />
              <scope attributes="private" doc="ignore setting a stroke style" ilk="function" name="setStroke" returns="self" />
              <scope attributes="private" doc="ignore setting a fill style" ilk="function" name="setFill" returns="self" />
              <variable doc="" name="shape" />
              <variable citdl="Node" doc="a DOM Node" name="rawNode" />
            </scope>
            <scope doc="a generic text" ilk="function" name="Text" signature="Text(rawNode)">
              <variable citdl="Node" doc="a DOM Node" ilk="argument" name="rawNode" />
              <scope attributes="private" doc="returns the current font object or null" ilk="function" name="getFont" returns="Object" />
              <scope attributes="private" doc="sets a font for text" ilk="function" name="setFont" returns="self" signature="setFont(newFont)">
                <variable citdl="Object" doc="a font object (see dojox.gfx.defaultFont) or a font string" ilk="argument" name="newFont" />
              </scope>
              <variable doc="" name="fontStyle" />
              <variable doc="" name="shape" />
              <variable citdl="Node" doc="a DOM Node" name="rawNode" />
            </scope>
            <variable attributes="private" citdl="Object" doc="" name="_eventsProcessing">
              <scope attributes="private" doc="" ilk="function" name="connect" returns="Node|Object|dojox.gfx.Matrix2D|dojox.gfx.Rectangle|null|Array|self" signature="connect(name,object,method)">
                <variable ilk="argument" name="name" />
                <variable ilk="argument" name="object" />
                <variable ilk="argument" name="method" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="disconnect" returns="Node|Object|dojox.gfx.Matrix2D|dojox.gfx.Rectangle|null|Array|self" signature="disconnect(token)">
                <variable ilk="argument" name="token" />
              </scope>
            </variable>
            <variable citdl="Object" doc="a container of shapes, which can be used as a foundation for renderer-specific groups, or as a way to logically group shapes (e.g, to propagate matricies)" name="Container">
              <scope attributes="private" doc="" ilk="function" name="_init">
                <variable citdl="Array" doc="a list of children" name="children" />
              </scope>
              <scope attributes="private" doc="adds a shape to the list" ilk="function" name="add" returns="self" signature="add(shape)">
                <variable citdl="dojox.gfx.Shape" doc="a shape" ilk="argument" name="shape" />
              </scope>
              <scope attributes="private" doc="removes a shape from the list" ilk="function" name="remove" returns="self" signature="remove(shape,silently)">
                <variable ilk="argument" name="shape" />
                <variable citdl="Boolean" doc="if true, do not redraw a picture yet" ilk="argument" name="silently" />
              </scope>
              <scope attributes="private" doc="removes all shapes from a group/surface" ilk="function" name="clear" returns="self">
                <variable doc="" name="children" />
              </scope>
              <scope attributes="private" doc="moves a shape to front of the list of shapes" ilk="function" name="_moveChildToFront" returns="self" signature="_moveChildToFront(shape)">
                <variable ilk="argument" name="shape" />
              </scope>
              <scope attributes="private" doc="moves a shape to back of the list of shapes" ilk="function" name="_moveChildToBack" returns="self" signature="_moveChildToBack(shape)">
                <variable ilk="argument" name="shape" />
              </scope>
            </variable>
            <variable citdl="Object" doc="shape creators" name="Creator">
              <scope doc="creates a shape object based on its type; it is meant to be used by group-like objects" ilk="function" name="createShape" signature="createShape(shape)">
                <variable citdl="Object" doc="a shape descriptor object" ilk="argument" name="shape" />
              </scope>
              <scope attributes="private" doc="creates a group shape" ilk="function" name="createGroup" returns="dojox.gfx.Group" />
              <scope attributes="private" doc="creates a rectangle shape" ilk="function" name="createRect" returns="dojox.gfx.Rect" signature="createRect(rect)">
                <variable citdl="Object" doc="a path object (see dojox.gfx.defaultRect)" ilk="argument" name="rect" />
              </scope>
              <scope attributes="private" doc="creates an ellipse shape" ilk="function" name="createEllipse" returns="dojox.gfx.Ellipse" signature="createEllipse(ellipse)">
                <variable citdl="Object" doc="an ellipse object (see dojox.gfx.defaultEllipse)" ilk="argument" name="ellipse" />
              </scope>
              <scope attributes="private" doc="creates a circle shape" ilk="function" name="createCircle" returns="dojox.gfx.Circle" signature="createCircle(circle)">
                <variable citdl="Object" doc="a circle object (see dojox.gfx.defaultCircle)" ilk="argument" name="circle" />
              </scope>
              <scope attributes="private" doc="creates a line shape" ilk="function" name="createLine" returns="dojox.gfx.Line" signature="createLine(line)">
                <variable citdl="Object" doc="a line object (see dojox.gfx.defaultLine)" ilk="argument" name="line" />
              </scope>
              <scope attributes="private" doc="creates a polyline/polygon shape" ilk="function" name="createPolyline" returns="dojox.gfx.Polyline" signature="createPolyline(points)">
                <variable citdl="Object" doc="a points object (see dojox.gfx.defaultPolyline) or an Array of points" ilk="argument" name="points" />
              </scope>
              <scope attributes="private" doc="creates a image shape" ilk="function" name="createImage" returns="dojox.gfx.Image" signature="createImage(image)">
                <variable citdl="Object" doc="an image object (see dojox.gfx.defaultImage)" ilk="argument" name="image" />
              </scope>
              <scope attributes="private" doc="creates a text shape" ilk="function" name="createText" returns="dojox.gfx.Text" signature="createText(text)">
                <variable citdl="Object" doc="a text object (see dojox.gfx.defaultText)" ilk="argument" name="text" />
              </scope>
              <scope attributes="private" doc="creates a path shape" ilk="function" name="createPath" returns="dojox.gfx.Path" signature="createPath(path)">
                <variable citdl="Object" doc="a path object (see dojox.gfx.defaultPath)" ilk="argument" name="path" />
              </scope>
              <scope attributes="private" doc="creates a text shape" ilk="function" name="createTextPath" returns="dojox.gfx.TextPath" signature="createTextPath(text)">
                <variable citdl="Object" doc="a textpath object (see dojox.gfx.defaultTextPath)" ilk="argument" name="text" />
              </scope>
              <scope attributes="private" doc="creates an instance of the passed shapeType class" ilk="function" name="createObject" returns="dojox.gfx.Shape" signature="createObject(shapeType,rawShape)">
                <variable doc="a class constructor to create an instance of" ilk="function" name="shapeType" />
                <variable citdl="Object" doc="properties to be passed in to the classes &amp;amp;quot;setShape&amp;amp;quot; method" ilk="argument" name="rawShape" />
              </scope>
            </variable>
          </variable>
          <scope doc="a hypothetical 2D point to be used for drawings - {x, y}" ilk="function" name="Point" />
          <scope doc="a hypothetical rectangle - {x, y, width, height}" ilk="function" name="Rectangle" />
          <variable citdl="Object" doc="" name="silverlight">
            <variable citdl="Object" doc="" name="dasharray">
              <scope doc="" name="solid" />
              <scope doc="" name="shortdash" />
              <scope doc="" name="shortdot" />
              <scope doc="" name="shortdashdot" />
              <scope doc="" name="shortdashdotdot" />
              <scope doc="" name="dot" />
              <scope doc="" name="dash" />
              <scope doc="" name="longdash" />
              <scope doc="" name="dashdot" />
              <scope doc="" name="longdashdot" />
              <scope doc="" name="longdashdotdot" />
            </variable>
            <variable citdl="Object" doc="" name="fontweight">
              <scope doc="" name="normal" />
              <scope doc="" name="bold" />
            </variable>
            <variable citdl="Object" doc="" name="caps">
              <scope doc="" name="butt" />
              <scope doc="" name="round" />
              <scope doc="" name="square" />
            </variable>
            <variable citdl="Object" doc="" name="joins">
              <scope doc="" name="bevel" />
              <scope doc="" name="round" />
            </variable>
            <variable citdl="Object" doc="" name="fonts">
              <scope doc="" name="serif" />
              <scope doc="" name="times" />
              <scope doc="" name="sans-serif" />
              <scope doc="" name="helvetica" />
              <scope doc="" name="monotone" />
              <scope doc="" name="courier" />
            </variable>
            <variable citdl="Object" doc="" name="surfaces" />
            <variable citdl="Object" doc="" name="Font">
              <scope attributes="private" doc="sets a font object (Silverlight)" ilk="function" name="_setFont">
                <variable attributes="private" doc="" name="_delay" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="Container">
              <scope attributes="private" doc="" ilk="function" name="_init" />
              <scope attributes="private" doc="adds a shape to a group/surface" ilk="function" name="add" returns="self" signature="add(shape)">
                <variable citdl="dojox.gfx.Shape" doc="a Silverlight shape object" ilk="argument" name="shape" />
              </scope>
              <scope attributes="private" doc="remove a shape from a group/surface" ilk="function" name="remove" returns="self" signature="remove(shape,silently)">
                <variable citdl="dojox.gfx.Shape" doc="a Silverlight shape object" ilk="argument" name="shape" />
                <variable citdl="Boolean" doc="if true, regenerate a picture" ilk="argument" name="silently" />
              </scope>
              <scope doc="removes all shapes from a group/surface" ilk="function" name="clear" />
              <scope attributes="private" doc="" name="_moveChildToFront" />
              <scope attributes="private" doc="" name="_moveChildToBack" />
            </variable>
            <scope attributes="private" doc="converts a color object to a Silverlight hex color string (#aarrggbb)" ilk="function" name="hexColor" returns="String" signature="hexColor(color)">
              <variable citdl="String|Array|dojo.Color" ilk="argument" name="color" />
            </scope>
            <scope doc="" ilk="function" name="nullFunc" />
          </variable>
          <scope attributes="private" doc="creates a surface (VML)" ilk="function" name="createSurface" returns="dojox.gfx.Surface" signature="createSurface(parentNode,width,height)">
            <variable citdl="Node" doc="a parent node" ilk="argument" name="parentNode" />
            <variable citdl="String" doc="width of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" ilk="argument" name="width" />
            <variable citdl="String" doc="height of surface, e.g., &amp;amp;quot;100px&amp;amp;quot;" ilk="argument" name="height" />
          </scope>
          <scope attributes="private" doc="creates a surface from a Node" ilk="function" name="attachSurface" returns="dojox.gfx.Surface" signature="attachSurface(node)">
            <variable citdl="Node" doc="an VML node" ilk="argument" name="node" />
          </scope>
          <variable citdl="Object" doc="" name="silverlight_attach" />
          <variable citdl="Object" doc="" name="svg">
            <variable citdl="Object" doc="" name="xmlns">
              <scope doc="" name="xlink" />
              <scope doc="" name="svg" />
            </variable>
            <variable citdl="Object" doc="" name="dasharray">
              <scope doc="" name="solid" />
              <scope doc="" name="shortdash" />
              <scope doc="" name="shortdot" />
              <scope doc="" name="shortdashdot" />
              <scope doc="" name="shortdashdotdot" />
              <scope doc="" name="dot" />
              <scope doc="" name="dash" />
              <scope doc="" name="longdash" />
              <scope doc="" name="dashdot" />
              <scope doc="" name="longdashdot" />
              <scope doc="" name="longdashdotdot" />
            </variable>
            <variable citdl="Object" doc="" name="Font">
              <scope attributes="private" doc="sets a font object (SVG)" ilk="function" name="_setFont" />
            </variable>
            <variable citdl="Object" doc="" name="Container">
              <scope attributes="private" doc="" ilk="function" name="_init" />
              <scope attributes="private" doc="adds a shape to a group/surface" ilk="function" name="add" returns="self" signature="add(shape)">
                <variable citdl="dojox.gfx.Shape" doc="an VML shape object" ilk="argument" name="shape" />
              </scope>
              <scope attributes="private" doc="remove a shape from a group/surface" ilk="function" name="remove" returns="self" signature="remove(shape,silently)">
                <variable citdl="dojox.gfx.Shape" doc="an VML shape object" ilk="argument" name="shape" />
                <variable citdl="Boolean" doc="if true, regenerate a picture" ilk="argument" name="silently" />
                <variable doc="" name="rawNode" />
              </scope>
              <scope doc="removes all shapes from a group/surface" ilk="function" name="clear" />
              <scope attributes="private" doc="" name="_moveChildToFront" />
              <scope attributes="private" doc="" name="_moveChildToBack" />
            </variable>
            <scope attributes="private" doc="returns a DOM Node specified by the name argument or null" ilk="function" name="getRef" returns="Node" signature="getRef(name)">
              <variable citdl="String" doc="an SVG external reference" ilk="argument" name="name" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="svg_attach" />
          <variable citdl="Object" doc="" name="utils" />
          <variable citdl="Object" doc="" name="vml" />
          <variable citdl="Object" doc="" name="vml_attach" />
          <scope doc="" name="renderer" />
        </variable>
        <variable citdl="Object" doc="A 3d API for dojox.gfx" name="gfx3d">
          <scope doc="calculate a cylindrical gradient" ilk="function" name="gradient" signature="gradient(model,material,center,radius,from,to,matrix)">
            <variable citdl="dojox.gfx3d.lighting.Model" doc="color model" ilk="argument" name="model" />
            <variable citdl="Object" doc="defines visual properties" ilk="argument" name="material" />
            <variable citdl="Object" doc="center of the cylinder&apos;s bottom" ilk="argument" name="center" />
            <variable citdl="Number" doc="radius of the cylinder" ilk="argument" name="radius" />
            <variable citdl="Number" doc="from position in radians" ilk="argument" name="from" />
            <variable citdl="Number" doc="from position in radians" ilk="argument" name="to" />
            <variable citdl="dojox.gfx3d.Matrix3D" doc="the cumulative transformation matrix tolerance: Number: tolerable diffirence in colors between gradient steps" ilk="argument" name="matrix" />
          </scope>
          <variable citdl="Object" doc="" name="lighting">
            <scope doc="" ilk="function" name="Model" signature="Model(incident,lights,ambient,specular)">
              <variable ilk="argument" name="incident" />
              <variable ilk="argument" name="lights" />
              <variable ilk="argument" name="ambient" />
              <variable ilk="argument" name="specular" />
              <scope doc="" ilk="function" name="constant" signature="constant(normal,finish,pigment)">
                <variable ilk="argument" name="normal" />
                <variable ilk="argument" name="finish" />
                <variable ilk="argument" name="pigment" />
              </scope>
              <scope doc="" ilk="function" name="matte" signature="matte(normal,finish,pigment)">
                <variable ilk="argument" name="normal" />
                <variable ilk="argument" name="finish" />
                <variable ilk="argument" name="pigment" />
              </scope>
              <scope doc="" ilk="function" name="metal" signature="metal(normal,finish,pigment)">
                <variable ilk="argument" name="normal" />
                <variable ilk="argument" name="finish" />
                <variable ilk="argument" name="pigment" />
              </scope>
              <scope doc="" ilk="function" name="plastic" signature="plastic(normal,finish,pigment)">
                <variable ilk="argument" name="normal" />
                <variable ilk="argument" name="finish" />
                <variable ilk="argument" name="pigment" />
              </scope>
              <scope doc="" ilk="function" name="npr" signature="npr(normal,finish,pigment)">
                <variable ilk="argument" name="normal" />
                <variable ilk="argument" name="finish" />
                <variable ilk="argument" name="pigment" />
              </scope>
              <variable doc="" name="incident" />
              <variable doc="" name="lights" />
              <variable doc="" name="ambient">
                <variable doc="" name="a" />
              </variable>
              <variable doc="" name="specular">
                <variable doc="" name="a" />
              </variable>
              <variable doc="" name="npr_cool" />
              <variable doc="" name="npr_warm" />
              <variable doc="" name="npr_alpha" />
              <variable doc="" name="npr_beta" />
              <variable doc="" name="npr_scale" />
            </scope>
            <variable citdl="Object" doc="" name="finish">
              <variable citdl="Object" doc="" name="defaults">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="roughness" />
              </variable>
              <variable citdl="Object" doc="" name="dull">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="roughness" />
              </variable>
              <variable citdl="Object" doc="" name="shiny">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="roughness" />
              </variable>
              <variable citdl="Object" doc="" name="glossy">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="roughness" />
              </variable>
              <variable citdl="Object" doc="" name="phong_dull">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="phong" />
                <scope doc="" name="phong_size" />
              </variable>
              <variable citdl="Object" doc="" name="phong_shiny">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="phong" />
                <scope doc="" name="phong_size" />
              </variable>
              <variable citdl="Object" doc="" name="phong_glossy">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="phong" />
                <scope doc="" name="phong_size" />
              </variable>
              <variable citdl="Object" doc="" name="luminous">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="roughness" />
              </variable>
              <variable citdl="Object" doc="" name="metalA">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="roughness" />
              </variable>
              <variable citdl="Object" doc="" name="metalB">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="roughness" />
              </variable>
              <variable citdl="Object" doc="" name="metalC">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="roughness" />
              </variable>
              <variable citdl="Object" doc="" name="metalD">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="roughness" />
              </variable>
              <variable citdl="Object" doc="" name="metalE">
                <scope doc="" name="Ka" />
                <scope doc="" name="Kd" />
                <scope doc="" name="Ks" />
                <scope doc="" name="roughness" />
              </variable>
            </variable>
            <scope doc="" ilk="function" name="black" />
            <scope doc="" ilk="function" name="white" />
            <scope doc="" ilk="function" name="toStdColor" signature="toStdColor(c)">
              <variable ilk="argument" name="c" />
            </scope>
            <scope doc="" ilk="function" name="fromStdColor" signature="fromStdColor(c)">
              <variable ilk="argument" name="c" />
            </scope>
            <scope doc="" ilk="function" name="scaleColor" signature="scaleColor(s,c)">
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="c" />
            </scope>
            <scope doc="" ilk="function" name="addColor" signature="addColor(a,b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope doc="" ilk="function" name="multiplyColor" signature="multiplyColor(a,b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope doc="" ilk="function" name="saturateColor" signature="saturateColor(c)">
              <variable ilk="argument" name="c" />
            </scope>
            <scope doc="" ilk="function" name="mixColor" signature="mixColor(c1,c2,s)">
              <variable ilk="argument" name="c1" />
              <variable ilk="argument" name="c2" />
              <variable ilk="argument" name="s" />
            </scope>
            <scope doc="" ilk="function" name="diff2Color" signature="diff2Color(c1,c2)">
              <variable ilk="argument" name="c1" />
              <variable ilk="argument" name="c2" />
            </scope>
            <scope doc="" ilk="function" name="length2Color" signature="length2Color(c)">
              <variable ilk="argument" name="c" />
            </scope>
            <scope doc="" ilk="function" name="dot" signature="dot(a,b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope doc="" ilk="function" name="scale" signature="scale(s,v)">
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="v" />
            </scope>
            <scope doc="" ilk="function" name="add" signature="add(a,b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope doc="" ilk="function" name="saturate" signature="saturate(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope doc="" ilk="function" name="length" signature="length(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope doc="" ilk="function" name="normalize" signature="normalize(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope doc="" ilk="function" name="faceforward" signature="faceforward(n,i)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="i" />
            </scope>
            <scope doc="" ilk="function" name="reflect" signature="reflect(i,n)">
              <variable ilk="argument" name="i" />
              <variable ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="diffuse" signature="diffuse(normal,lights)">
              <variable ilk="argument" name="normal" />
              <variable ilk="argument" name="lights" />
            </scope>
            <scope doc="" ilk="function" name="specular" signature="specular(normal,v,roughness,lights)">
              <variable ilk="argument" name="normal" />
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="roughness" />
              <variable ilk="argument" name="lights" />
            </scope>
            <scope doc="" ilk="function" name="phong" signature="phong(normal,v,size,lights)">
              <variable ilk="argument" name="normal" />
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="size" />
              <variable ilk="argument" name="lights" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="matrix">
            <scope attributes="private" doc="" ilk="function" name="_degToRad" signature="_degToRad(degree)">
              <variable ilk="argument" name="degree" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_radToDeg" signature="_radToDeg(radian)">
              <variable ilk="argument" name="radian" />
            </scope>
            <scope doc="a 3D matrix object" ilk="function" name="Matrix3D" signature="Matrix3D(arg)">
              <variable citdl="Object" doc="a 3D matrix-like object, a number, or an array of such objects" ilk="argument" name="arg" />
              <variable doc="" name="xx" />
              <scope doc="" name="xy" />
              <scope doc="" name="xz" />
              <scope doc="" name="yx" />
              <scope doc="" name="yy" />
              <scope doc="" name="yz" />
              <scope doc="" name="zx" />
              <scope doc="" name="zy" />
              <scope doc="" name="zz" />
              <scope doc="" name="dx" />
              <scope doc="" name="dy" />
              <scope doc="" name="dz" />
            </scope>
            <scope doc="" name="identity" />
            <scope attributes="private" doc="forms a translation matrix" ilk="function" name="translate" returns="dojox.gfx3d.matrix.Matrix3D" signature="translate(a,b,c)">
              <variable citdl="Number" doc="an x coordinate value" ilk="argument" name="a" />
              <variable citdl="Number" doc="a y coordinate value" ilk="argument" name="b" />
              <variable citdl="Number" doc="a z coordinate value" ilk="argument" name="c" />
            </scope>
            <scope attributes="private" doc="forms a scaling matrix" ilk="function" name="scale" returns="dojox.gfx3d.matrix.Matrix3D" signature="scale(a,b,c)">
              <variable citdl="Number" doc="a scaling factor used for the x coordinate" ilk="argument" name="a" />
              <variable citdl="Number" doc="a scaling factor used for the y coordinate" ilk="argument" name="b" />
              <variable citdl="Number" doc="a scaling factor used for the z coordinate" ilk="argument" name="c" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the x axis)" ilk="function" name="rotateX" returns="dojox.gfx3d.matrix.Matrix3D" signature="rotateX(angle)">
              <variable citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" ilk="argument" name="angle" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the x axis)" ilk="function" name="rotateXg" returns="dojox.gfx3d.matrix.Matrix3D" signature="rotateXg(degree)">
              <variable citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" ilk="argument" name="degree" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the y axis)" ilk="function" name="rotateY" returns="dojox.gfx3d.matrix.Matrix3D" signature="rotateY(angle)">
              <variable citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" ilk="argument" name="angle" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the y axis)" ilk="function" name="rotateYg" returns="dojox.gfx3d.matrix.Matrix3D" signature="rotateYg(degree)">
              <variable citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" ilk="argument" name="degree" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the z axis)" ilk="function" name="rotateZ" returns="dojox.gfx3d.matrix.Matrix3D" signature="rotateZ(angle)">
              <variable citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" ilk="argument" name="angle" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the z axis)" ilk="function" name="rotateZg" returns="dojox.gfx3d.matrix.Matrix3D" signature="rotateZg(degree)">
              <variable citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" ilk="argument" name="degree" />
            </scope>
            <scope attributes="private" doc="forms a translation matrix" ilk="function" name="cameraTranslate" returns="dojox.gfx3d.matrix.Matrix3D" signature="cameraTranslate(a,b,c)">
              <variable citdl="Number" doc="an x coordinate value" ilk="argument" name="a" />
              <variable citdl="Number" doc="a y coordinate value" ilk="argument" name="b" />
              <variable citdl="Number" doc="a z coordinate value" ilk="argument" name="c" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the x axis) in cameraTransform manner" ilk="function" name="cameraRotateX" returns="dojox.gfx3d.matrix.Matrix3D" signature="cameraRotateX(angle)">
              <variable citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" ilk="argument" name="angle" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the x axis)in cameraTransform manner" ilk="function" name="cameraRotateXg" returns="dojox.gfx3d.matrix.Matrix3D" signature="cameraRotateXg(degree)">
              <variable citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" ilk="argument" name="degree" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the y axis) in cameraTransform manner" ilk="function" name="cameraRotateY" returns="dojox.gfx3d.matrix.Matrix3D" signature="cameraRotateY(angle)">
              <variable citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" ilk="argument" name="angle" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the y axis) in cameraTransform manner" ilk="function" name="cameraRotateYg" returns="dojox.gfx3d.matrix.Matrix3D" signature="cameraRotateYg(degree)">
              <variable citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" ilk="argument" name="degree" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the z axis) in cameraTransform manner" ilk="function" name="cameraRotateZ" returns="dojox.gfx3d.matrix.Matrix3D" signature="cameraRotateZ(angle)">
              <variable citdl="Number" doc="an angle of rotation in radians (&amp;amp;gt;0 for CW)" ilk="argument" name="angle" />
            </scope>
            <scope attributes="private" doc="forms a rotating matrix (about the z axis) in cameraTransform manner" ilk="function" name="cameraRotateZg" returns="dojox.gfx3d.matrix.Matrix3D" signature="cameraRotateZg(degree)">
              <variable citdl="Number" doc="an angle of rotation in degrees (&amp;amp;gt;0 for CW)" ilk="argument" name="degree" />
            </scope>
            <scope attributes="private" doc="converts an object to a matrix, if necessary" ilk="function" name="normalize" returns="dojox.gfx3d.matrix.Matrix3D" signature="normalize(matrix)">
              <variable citdl="Object" doc="an object, which is converted to a matrix, if necessary" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="creates a copy of a 3D matrix" ilk="function" name="clone" returns="dojox.gfx3d.matrix.Matrix3D" signature="clone(matrix)">
              <variable citdl="dojox.gfx3d.matrix.Matrix3D" doc="a 3D matrix-like object to be cloned" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="inverts a 2D matrix" ilk="function" name="invert" returns="dojox.gfx3d.matrix.Matrix3D" signature="invert(matrix)">
              <variable citdl="dojox.gfx.matrix.Matrix3D" doc="a 2D matrix-like object to be inverted" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied" ilk="function" name="_multiplyPoint" returns="Object" signature="_multiplyPoint(m,x,y,z)">
              <variable ilk="argument" name="m" />
              <variable citdl="Number" doc="an x coordinate of a point" ilk="argument" name="x" />
              <variable citdl="Number" doc="a y coordinate of a point" ilk="argument" name="y" />
              <variable citdl="Number" doc="a z coordinate of a point" ilk="argument" name="z" />
            </scope>
            <scope attributes="private" doc="applies a matrix to a point" ilk="function" name="multiplyPoint" returns="Object" signature="multiplyPoint(matrix,a,b,c)">
              <variable citdl="dojox.gfx3d.matrix.Matrix3D" doc="a 3D matrix object to be applied" ilk="argument" name="matrix" />
              <variable citdl="Number||Point" doc="Number: an x coordinate of a point" ilk="argument" name="a" />
              <variable citdl="Number, optional" doc="Number: a y coordinate of a point" ilk="argument" name="b" />
              <variable citdl="Number, optional" doc="Number: a z coordinate of a point" ilk="argument" name="c" />
            </scope>
            <scope attributes="private" doc="combines matrices by multiplying them sequentially in the given order" ilk="function" name="multiply" returns="dojox.gfx3d.matrix.Matrix3D" signature="multiply(matrix)">
              <variable citdl="dojox.gfx3d.matrix.Matrix3D" doc="a 3D matrix-like object, all subsequent arguments are matrix-like objects too" ilk="argument" name="matrix">
                <scope name="repeating" />
              </variable>
            </scope>
            <scope attributes="private" doc="applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied" ilk="function" name="_project" returns="Object" signature="_project(m,x,y,z)">
              <variable ilk="argument" name="m" />
              <variable citdl="Number" doc="an x coordinate of a point" ilk="argument" name="x" />
              <variable citdl="Number" doc="a y coordinate of a point" ilk="argument" name="y" />
              <variable citdl="Number" doc="a z coordinate of a point" ilk="argument" name="z" />
            </scope>
            <scope attributes="private" doc="applies a matrix to a point" ilk="function" name="project" returns="Object" signature="project(matrix,a,b,c)">
              <variable citdl="dojox.gfx3d.matrix.Matrix3D" doc="a 3D matrix object to be applied" ilk="argument" name="matrix" />
              <variable citdl="Number||Point" doc="Number: an x coordinate of a point" ilk="argument" name="a" />
              <variable citdl="Number, optional" doc="Number: a y coordinate of a point" ilk="argument" name="b" />
              <variable citdl="Number, optional" doc="Number: a z coordinate of a point" ilk="argument" name="c" />
            </scope>
          </variable>
          <scope doc="" name="Matrix3D" />
          <scope doc="a Object object, which knows how to map 3D objects to 2D shapes." ilk="function" name="Object">
            <scope doc="sets a Object object" ilk="function" name="setObject" signature="setObject(newObject)">
              <variable ilk="argument" name="newObject" />
              <variable citdl="Object" doc="an abstract Object object (see dojox.gfx3d.defaultEdges, dojox.gfx3d.defaultTriangles, dojox.gfx3d.defaultQuads dojox.gfx3d.defaultOrbit dojox.gfx3d.defaultCube or dojox.gfx3d.defaultCylinder)" name="object" />
            </scope>
            <scope attributes="private" doc="sets a transformation matrix" ilk="function" name="setTransform" returns="self" signature="setTransform(matrix)">
              <variable citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
              <scope citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)" name="matrix" />
            </scope>
            <scope attributes="private" doc="multiplies the existing matrix with an argument on right side (this.matrix * matrix)" ilk="function" name="applyRightTransform" returns="self" signature="applyRightTransform(matrix)">
              <variable citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="multiplies the existing matrix with an argument on left side (matrix * this.matrix)" ilk="function" name="applyLeftTransform" returns="self" signature="applyLeftTransform(matrix)">
              <variable citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="a shortcut for dojox.gfx.Shape.applyRightTransform" ilk="function" name="applyTransform" returns="self" signature="applyTransform(matrix)">
              <variable citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
            </scope>
            <scope doc="sets a fill object (the default implementation is to delegate to the underlying 2D shape)." ilk="function" name="setFill" signature="setFill(fill)">
              <variable citdl="Object" doc="a fill object (see dojox.gfx.defaultLinearGradient, dojox.gfx.defaultRadialGradient, dojox.gfx.defaultPattern, dojo.Color or dojox.gfx.MODEL)" ilk="argument" name="fill" />
            </scope>
            <scope doc="sets a stroke object (the default implementation simply ignores it)" ilk="function" name="setStroke" signature="setStroke(stroke)">
              <variable citdl="Object" doc="a stroke object (see dojox.gfx.defaultStroke)" ilk="argument" name="stroke" />
            </scope>
            <scope doc="" ilk="function" name="toStdFill" signature="toStdFill(lighting,normal)">
              <variable ilk="argument" name="lighting" />
              <variable ilk="argument" name="normal" />
            </scope>
            <scope doc="" ilk="function" name="invalidate" />
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="render" signature="render(camera)">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope doc="" ilk="function" name="draw" signature="draw(lighting)">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope doc="" ilk="function" name="getZOrder" />
            <scope doc="" ilk="function" name="getOutline" />
            <variable citdl="Object" doc="an abstract Object object (see dojox.gfx3d.defaultEdges, dojox.gfx3d.defaultTriangles, dojox.gfx3d.defaultQuads dojox.gfx3d.defaultOrbit dojox.gfx3d.defaultCube or dojox.gfx3d.defaultCylinder)" name="object" />
            <variable doc="" name="matrix" />
            <variable doc="" name="fillStyle" />
            <variable doc="" name="strokeStyle" />
            <variable doc="" name="shape" />
            <variable doc="" name="cache" />
            <variable doc="" name="renderer" />
            <variable doc="" name="parent" />
          </scope>
          <scope doc="a containter of other 3D objects" ilk="function" name="Scene">
            <scope doc="" ilk="function" name="setFill" signature="setFill(fill)">
              <variable ilk="argument" name="fill" />
            </scope>
            <scope doc="" ilk="function" name="setStroke" signature="setStroke(stroke)">
              <variable ilk="argument" name="stroke" />
            </scope>
            <scope doc="" ilk="function" name="render" signature="render(camera,deep)">
              <variable ilk="argument" name="camera" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope doc="" ilk="function" name="draw" signature="draw(lighting)">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="addTodo" returns="self" signature="addTodo(newObject)">
              <variable ilk="argument" name="newObject" />
            </scope>
            <scope doc="" ilk="function" name="invalidate" />
            <scope doc="" ilk="function" name="getZOrder" />
            <variable doc="" name="fillStyle" />
            <variable doc="" name="strokeStyle" />
            <variable doc="" name="todos" />
            <variable doc="" name="objects" />
            <variable doc="" name="schedule" />
            <variable attributes="private" doc="" name="_draw" />
          </scope>
          <scope doc="a generic edge in 3D viewport" ilk="function" name="Edges">
            <scope doc="setup the object" ilk="function" name="setObject" signature="setObject(newObject,style)">
              <variable citdl="Array" doc="of points || Object" ilk="argument" name="newObject" />
              <variable citdl="String, optional" doc="String, optional" ilk="argument" name="style" />
            </scope>
            <scope doc="" ilk="function" name="getZOrder" />
            <scope doc="" ilk="function" name="render" signature="render(camera)">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope doc="" ilk="function" name="draw" />
            <variable doc="" name="object" />
            <variable doc="" name="cache" />
            <variable doc="" name="shape" />
          </scope>
          <scope doc="a generic edge in 3D viewport" ilk="function" name="Orbit">
            <scope doc="" ilk="function" name="render" signature="render(camera)">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope doc="" ilk="function" name="draw" signature="draw(lighting)">
              <variable ilk="argument" name="lighting" />
            </scope>
            <variable doc="" name="cache" />
            <variable doc="" name="shape" />
            <variable doc="" name="object" />
          </scope>
          <scope doc="a generic line (this is a helper object, which is defined for convenience)" ilk="function" name="Path3d">
            <scope attributes="private" doc="converts an array of arguments to plain numeric values" ilk="function" name="_collectArgs" signature="_collectArgs(array,args)">
              <variable citdl="Array" doc="an output argument (array of numbers)" ilk="argument" name="array" />
              <variable citdl="Array" doc="an input argument (can be values of Boolean, Number, dojox.gfx.Point, or an embedded array of them)" ilk="argument" name="args" />
            </scope>
            <variable attributes="private" citdl="Object" doc="" name="_validSegments">
              <scope doc="" name="m" />
              <scope doc="" name="l" />
              <scope doc="" name="z" />
            </variable>
            <scope attributes="private" doc="adds a segment" ilk="function" name="_pushSegment" signature="_pushSegment(action,args)">
              <variable citdl="String" doc="valid SVG code for a segment&apos;s type" ilk="argument" name="action" />
              <variable citdl="Array" doc="a list of parameters for this segment" ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="formes a move segment" ilk="function" name="moveTo" returns="self" />
            <scope attributes="private" doc="formes a line segment" ilk="function" name="lineTo" returns="self" />
            <scope attributes="private" doc="closes a path" ilk="function" name="closePath" returns="self" />
            <scope attributes="private" doc="" ilk="function" name="render" returns="self" signature="render(camera)">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_draw" />
            <variable doc="" name="cache" />
            <variable doc="" name="object" />
            <variable doc="" name="segments" />
            <variable doc="" name="absolute" />
            <variable doc="" name="last" />
            <variable doc="" name="path" />
          </scope>
          <scope doc="a generic triangle (this is a helper object, which is defined for convenience)" ilk="function" name="Triangles">
            <scope doc="setup the object" ilk="function" name="setObject" signature="setObject(newObject,style)">
              <variable citdl="Array" doc="of points || Object" ilk="argument" name="newObject" />
              <variable citdl="String, optional" doc="String, optional" ilk="argument" name="style" />
            </scope>
            <scope doc="" ilk="function" name="render" signature="render(camera)">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="draw" returns="self" signature="draw(lighting)">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope doc="" ilk="function" name="getZOrder" />
            <variable doc="" name="object" />
            <variable doc="" name="cache" />
            <variable doc="" name="shape" />
          </scope>
          <scope doc="a generic triangle (this is a helper object, which is defined for convenience)" ilk="function" name="Quads">
            <scope doc="setup the object" ilk="function" name="setObject" signature="setObject(newObject,style)">
              <variable citdl="Array" doc="of points || Object" ilk="argument" name="newObject" />
              <variable citdl="String, optional" doc="String, optional" ilk="argument" name="style" />
            </scope>
            <scope doc="" ilk="function" name="render" signature="render(camera)">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="draw" returns="self" signature="draw(lighting)">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope doc="" ilk="function" name="getZOrder" />
            <variable doc="" name="object" />
            <variable doc="" name="cache" />
            <variable doc="" name="shape" />
          </scope>
          <scope doc="a generic triangle (this is a helper object, which is defined for convenience)" ilk="function" name="Polygon">
            <scope doc="setup the object" ilk="function" name="setObject" signature="setObject(newObject)">
              <variable citdl="Array" doc="of points || Object" ilk="argument" name="newObject" />
            </scope>
            <scope doc="" ilk="function" name="render" signature="render(camera)">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope doc="" ilk="function" name="draw" signature="draw(lighting)">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope doc="" ilk="function" name="getZOrder" />
            <scope doc="" ilk="function" name="getOutline" />
            <variable doc="" name="object" />
            <variable doc="" name="cache" />
            <variable doc="" name="shape" />
          </scope>
          <scope doc="a generic triangle (this is a helper object, which is defined for convenience)" ilk="function" name="Cube">
            <scope doc="setup the object" ilk="function" name="setObject" signature="setObject(newObject)">
              <variable citdl="Array" doc="of points || Object" ilk="argument" name="newObject" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="render" returns="self" signature="render(camera)">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="draw" returns="self" signature="draw(lighting)">
              <variable ilk="argument" name="lighting" />
            </scope>
            <scope doc="" ilk="function" name="getZOrder" />
            <variable doc="" name="object" />
            <variable doc="" name="cache" />
            <variable doc="" name="shape" />
            <variable doc="" name="polygons" />
          </scope>
          <scope doc="" ilk="function" name="Cylinder">
            <scope attributes="private" doc="" ilk="function" name="render" returns="self" signature="render(camera)">
              <variable ilk="argument" name="camera" />
            </scope>
            <scope doc="" ilk="function" name="draw" />
            <scope name="fillStyle" />
            <variable doc="" name="cache" />
            <variable doc="" name="shape" />
            <variable doc="" name="object" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="Viewport" returns="self">
            <scope attributes="private" doc="sets a transformation matrix" ilk="function" name="setCameraTransform" returns="self" signature="setCameraTransform(matrix)">
              <variable citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="multiplies the existing matrix with an argument on right side (this.matrix * matrix)" ilk="function" name="applyCameraRightTransform" returns="self" signature="applyCameraRightTransform(matrix)">
              <variable citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="multiplies the existing matrix with an argument on left side (matrix * this.matrix)" ilk="function" name="applyCameraLeftTransform" returns="self" signature="applyCameraLeftTransform(matrix)">
              <variable citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
            </scope>
            <scope attributes="private" doc="a shortcut for dojox.gfx3d.Object.applyRightTransform" ilk="function" name="applyCameraTransform" returns="self" signature="applyCameraTransform(matrix)">
              <variable citdl="dojox.gfx3d.matrix.Matrix" doc="a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)" ilk="argument" name="matrix" />
            </scope>
            <scope doc="set the lights" ilk="function" name="setLights" signature="setLights(lights,ambient,specular)">
              <variable citdl="Array || Object" doc="Array: an array of light object or lights object" ilk="argument" name="lights" />
              <variable citdl="Color, optional" doc="Color: an ambient object" ilk="argument" name="ambient" />
              <variable citdl="Color, optional" doc="Color: an specular object" ilk="argument" name="specular" />
              <scope citdl="Array" doc="an array of light object or lights object" name="lights" />
            </scope>
            <scope doc="add new light/lights to the viewport." ilk="function" name="addLights" signature="addLights(lights)">
              <variable citdl="Array" doc="|| light object: light object(s)" ilk="argument" name="lights" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="addTodo" returns="self" signature="addTodo(newObject)">
              <variable ilk="argument" name="newObject" />
            </scope>
            <scope doc="" ilk="function" name="invalidate" />
            <scope doc="" ilk="function" name="setDimensions" signature="setDimensions(dim)">
              <variable ilk="argument" name="dim" />
            </scope>
            <scope doc="iterate all children and call their render callback function." ilk="function" name="render" />
            <variable doc="" name="camera" />
            <variable doc="" name="lights" />
            <variable doc="" name="lighting" />
            <variable doc="" name="deep" />
            <variable doc="" name="todos" />
            <variable doc="" name="dimension" />
            <variable doc="" name="objects" />
            <variable doc="" name="renderer" />
            <variable doc="" name="schedule" />
            <variable doc="" name="draw" />
            <scope doc="" name="nodeType" />
          </scope>
          <variable attributes="private" citdl="Object" doc="object creators" name="_creators">
            <scope attributes="private" doc="creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)" ilk="function" name="createEdges" returns="dojox.gfx3d.Edge" signature="createEdges(edges,style)">
              <variable ilk="argument" name="edges" />
              <variable ilk="argument" name="style" />
            </scope>
            <scope attributes="private" doc="creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)" ilk="function" name="createTriangles" returns="dojox.gfx3d.Edge" signature="createTriangles(tris,style)">
              <variable ilk="argument" name="tris" />
              <variable ilk="argument" name="style" />
            </scope>
            <scope attributes="private" doc="creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)" ilk="function" name="createQuads" returns="dojox.gfx3d.Edge" signature="createQuads(quads,style)">
              <variable ilk="argument" name="quads" />
              <variable ilk="argument" name="style" />
            </scope>
            <scope attributes="private" doc="creates an triangle object" ilk="function" name="createPolygon" returns="dojox.gfx3d.Polygon" signature="createPolygon(points)">
              <variable citdl="Array" doc="of points || Object" ilk="argument" name="points" />
            </scope>
            <scope attributes="private" doc="creates an triangle object points: Array of points || Object" ilk="function" name="createOrbit" returns="dojox.gfx3d.Cube" signature="createOrbit(orbit)">
              <variable ilk="argument" name="orbit" />
            </scope>
            <scope attributes="private" doc="creates an triangle object points: Array of points || Object" ilk="function" name="createCube" returns="dojox.gfx3d.Cube" signature="createCube(cube)">
              <variable ilk="argument" name="cube" />
            </scope>
            <scope attributes="private" doc="creates an triangle object points: Array of points || Object" ilk="function" name="createCylinder" returns="dojox.gfx3d.Cube" signature="createCylinder(cylinder)">
              <variable ilk="argument" name="cylinder" />
            </scope>
            <scope attributes="private" doc="creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)" ilk="function" name="createPath3d" returns="dojox.gfx3d.Edge" signature="createPath3d(path)">
              <variable ilk="argument" name="path" />
            </scope>
            <scope attributes="private" doc="creates an triangle object line: Object: a triangle object (see dojox.gfx3d.defaultPath)" ilk="function" name="createScene" returns="dojox.gfx3d.Scene" />
            <scope attributes="private" doc="creates an instance of the passed shapeType class shapeType: Function: a class constructor to create an instance of rawShape: Object: properties to be passed in to the classes &amp;amp;quot;setShape&amp;amp;quot; method" ilk="function" name="create3DObject" returns="dojox.gfx3d.Object" signature="create3DObject(objectType,rawObject,style)">
              <variable ilk="argument" name="objectType" />
              <variable ilk="argument" name="rawObject" />
              <variable ilk="argument" name="style" />
            </scope>
            <scope doc="adds a shape to the list shape: dojox.gfx.Shape: a shape" ilk="function" name="adopt" signature="adopt(obj)">
              <variable ilk="argument" name="obj" />
            </scope>
            <scope attributes="private" doc="removes a shape from the list" ilk="function" name="abandon" returns="self" signature="abandon(obj,silently)">
              <variable ilk="argument" name="obj" />
              <variable citdl="Boolean" doc="if true, do not redraw a picture yet" ilk="argument" name="silently" />
            </scope>
            <scope doc="" ilk="function" name="setScheduler" signature="setScheduler(scheduler)">
              <variable ilk="argument" name="scheduler" />
              <variable doc="" name="schedule" />
            </scope>
            <scope doc="" ilk="function" name="setDrawer" signature="setDrawer(drawer)">
              <variable ilk="argument" name="drawer" />
              <variable doc="" name="draw" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="object" />
          <variable citdl="Object" doc="" name="scheduler">
            <scope doc="build the binary search tree, using binary space partition algorithm. The idea is for any polygon, for example, (a, b, c), the space is divided by the plane into two space: plus and minus.  for any arbitary vertex p, if(p - a) dotProduct n = 0, p is inside the plane, &amp;amp;gt; 0, p is in the plus space, vice versa for minus space. n is the normal vector that is perpendicular the plate, defined as: n = ( b - a) crossProduct ( c - a )  in this implementation, n is declared as normal, ,a is declared as orient." ilk="function" name="BinarySearchTree" signature="BinarySearchTree(obj,outline)">
              <variable citdl="object" doc="dojox.gfx3d.Object" ilk="argument" name="obj" />
              <variable ilk="argument" name="outline" />
              <scope doc="" ilk="function" name="add" signature="add(obj,outline)">
                <variable ilk="argument" name="obj" />
                <variable ilk="argument" name="outline" />
              </scope>
              <scope doc="" ilk="function" name="iterate" signature="iterate(outline)">
                <variable ilk="argument" name="outline" />
              </scope>
              <variable doc="" name="minus" />
              <variable doc="" name="plus" />
              <variable doc="" name="object" />
              <variable doc="" name="orient" />
              <variable doc="" name="normal" />
            </scope>
            <scope doc="" ilk="function" name="zOrder" signature="zOrder(buffer,order)">
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="order" />
            </scope>
            <scope doc="" ilk="function" name="bsp" signature="bsp(buffer,outline)">
              <variable ilk="argument" name="buffer" />
              <variable ilk="argument" name="outline" />
            </scope>
            <scope doc="" ilk="function" name="order" signature="order(it)">
              <variable ilk="argument" name="it" />
            </scope>
            <scope doc="" ilk="function" name="outline" signature="outline(it)">
              <variable ilk="argument" name="it" />
            </scope>
          </variable>
          <scope name="drawer">
            <scope doc="" ilk="function" name="conservative" signature="conservative(todos,objects,viewport)">
              <variable ilk="argument" name="todos" />
              <variable ilk="argument" name="objects" />
              <variable ilk="argument" name="viewport" />
            </scope>
            <scope doc="" ilk="function" name="chart" signature="chart(todos,objects,viewport)">
              <variable ilk="argument" name="todos" />
              <variable ilk="argument" name="objects" />
              <variable ilk="argument" name="viewport" />
            </scope>
          </scope>
          <variable citdl="Object" doc="" name="vector">
            <scope doc="sum of the vectors" ilk="function" name="sum" />
            <scope doc="center of the vectors" ilk="function" name="center" />
            <scope doc="" ilk="function" name="substract" signature="substract(a,b)">
              <variable citdl="Pointer" ilk="argument" name="a" />
              <variable citdl="Pointer" ilk="argument" name="b" />
            </scope>
            <scope attributes="private" doc="applies a cross product of two vectorss, (x, y, z) and (u, v, w)" ilk="function" name="_crossProduct" returns="Object" signature="_crossProduct(x,y,z,u,v,w)">
              <variable citdl="Number" doc="an x coordinate of a point" ilk="argument" name="x" />
              <variable citdl="Number" doc="a y coordinate of a point" ilk="argument" name="y" />
              <variable citdl="Number" doc="a z coordinate of a point" ilk="argument" name="z" />
              <variable citdl="Number" doc="an x coordinate of a point" ilk="argument" name="u" />
              <variable citdl="Number" doc="a y coordinate of a point" ilk="argument" name="v" />
              <variable citdl="Number" doc="a z coordinate of a point" ilk="argument" name="w" />
            </scope>
            <scope attributes="private" doc="applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied" ilk="function" name="crossProduct" returns="Object" signature="crossProduct(a,b,c,d,e,f)">
              <variable citdl="Number||Point" doc="Number: an x coordinate of a point" ilk="argument" name="a" />
              <variable citdl="Number||Point" doc="Number: a y coordinate of a point" ilk="argument" name="b" />
              <variable citdl="Number, optional" doc="Number: a z coordinate of a point" ilk="argument" name="c" />
              <variable citdl="Number, optional" doc="Number: an x coordinate of a point" ilk="argument" name="d" />
              <variable citdl="Number, optional" doc="Number: a y coordinate of a point" ilk="argument" name="e" />
              <variable citdl="Number, optional" doc="Number: a z coordinate of a point" ilk="argument" name="f" />
            </scope>
            <scope attributes="private" doc="applies a cross product of two vectorss, (x, y, z) and (u, v, w)" ilk="function" name="_dotProduct" returns="Number" signature="_dotProduct(x,y,z,u,v,w)">
              <variable citdl="Number" doc="an x coordinate of a point" ilk="argument" name="x" />
              <variable citdl="Number" doc="a y coordinate of a point" ilk="argument" name="y" />
              <variable citdl="Number" doc="a z coordinate of a point" ilk="argument" name="z" />
              <variable citdl="Number" doc="an x coordinate of a point" ilk="argument" name="u" />
              <variable citdl="Number" doc="a y coordinate of a point" ilk="argument" name="v" />
              <variable citdl="Number" doc="a z coordinate of a point" ilk="argument" name="w" />
            </scope>
            <scope attributes="private" doc="applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied" ilk="function" name="dotProduct" returns="Object" signature="dotProduct(a,b,c,d,e,f)">
              <variable citdl="Number||Point" doc="Number: an x coordinate of a point" ilk="argument" name="a" />
              <variable citdl="Number||Point" doc="Number: a y coordinate of a point" ilk="argument" name="b" />
              <variable citdl="Number, optional" doc="Number: a z coordinate of a point" ilk="argument" name="c" />
              <variable citdl="Number, optional" doc="Number: an x coordinate of a point" ilk="argument" name="d" />
              <variable citdl="Number, optional" doc="Number: a y coordinate of a point" ilk="argument" name="e" />
              <variable citdl="Number, optional" doc="Number: a z coordinate of a point" ilk="argument" name="f" />
            </scope>
            <scope doc="find the normal of the implicit surface" ilk="function" name="normalize" signature="normalize(a,b,c)">
              <variable citdl="Point||Array" doc="Object: a point" ilk="argument" name="a" />
              <variable citdl="Point" doc="Object: a point" ilk="argument" name="b" />
              <variable citdl="Point" doc="Object: a point" ilk="argument" name="c" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="An advanced Grid widget with virtual scrolling, cell editing, and much more" name="grid">
          <scope doc="" ilk="function" name="DataSelection">
            <scope doc="" ilk="function" name="getFirstSelected" />
            <scope doc="" ilk="function" name="getNextSelected" signature="getNextSelected(inPrev)">
              <variable ilk="argument" name="inPrev" />
            </scope>
            <scope doc="" ilk="function" name="getSelected" />
            <scope doc="" ilk="function" name="addToSelection" signature="addToSelection(inItemOrIndex)">
              <variable ilk="argument" name="inItemOrIndex" />
            </scope>
            <scope doc="" ilk="function" name="deselect" signature="deselect(inItemOrIndex)">
              <variable ilk="argument" name="inItemOrIndex" />
            </scope>
            <scope doc="" ilk="function" name="deselectAll" signature="deselectAll(inItemOrIndex)">
              <variable ilk="argument" name="inItemOrIndex" />
            </scope>
            <variable doc="" name="mode" />
          </scope>
          <scope doc="" name="Grid" />
          <scope doc="Manages row selection for grid. Owned by grid and used internally for selection. Override to implement custom selection." ilk="function" name="Selection" signature="Selection(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <variable doc="" name="mode" />
            <variable doc="" name="selected" />
            <variable doc="" name="updating" />
            <variable doc="" name="selectedIndex" />
            <scope doc="" ilk="function" name="setMode" signature="setMode(mode)">
              <variable ilk="argument" name="mode" />
            </scope>
            <scope doc="" ilk="function" name="onCanSelect" signature="onCanSelect(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="onCanDeselect" signature="onCanDeselect(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="onSelected" signature="onSelected(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="onDeselected" signature="onDeselected(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="onChanging" />
            <scope doc="" ilk="function" name="onChanged" />
            <scope doc="" ilk="function" name="isSelected" signature="isSelected(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="getFirstSelected" />
            <scope doc="" ilk="function" name="getNextSelected" signature="getNextSelected(inPrev)">
              <variable ilk="argument" name="inPrev" />
            </scope>
            <scope doc="" ilk="function" name="getSelected" />
            <scope doc="" ilk="function" name="getSelectedCount" />
            <scope attributes="private" doc="" ilk="function" name="_beginUpdate" />
            <scope attributes="private" doc="" ilk="function" name="_endUpdate" />
            <scope doc="" ilk="function" name="select" signature="select(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="addToSelection" signature="addToSelection(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="deselect" signature="deselect(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="setSelected" signature="setSelected(inIndex,inSelect)">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inSelect" />
            </scope>
            <scope doc="" ilk="function" name="toggleSelect" signature="toggleSelect(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_range" signature="_range(inFrom,inTo,func)">
              <variable ilk="argument" name="inFrom" />
              <variable ilk="argument" name="inTo" />
              <variable ilk="argument" name="func" />
            </scope>
            <scope doc="" ilk="function" name="selectRange" signature="selectRange(inFrom,inTo)">
              <variable ilk="argument" name="inFrom" />
              <variable ilk="argument" name="inTo" />
            </scope>
            <scope doc="" ilk="function" name="deselectRange" signature="deselectRange(inFrom,inTo)">
              <variable ilk="argument" name="inFrom" />
              <variable ilk="argument" name="inTo" />
            </scope>
            <scope doc="" ilk="function" name="insert" signature="insert(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="remove" signature="remove(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="deselectAll" signature="deselectAll(inExcept)">
              <variable ilk="argument" name="inExcept" />
            </scope>
            <scope doc="" ilk="function" name="clickSelect" signature="clickSelect(inIndex,inCtrlKey,inShiftKey)">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inCtrlKey" />
              <variable ilk="argument" name="inShiftKey" />
            </scope>
            <scope doc="" ilk="function" name="clickSelectEvent" signature="clickSelectEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="clear" />
            <variable doc="" name="grid" />
          </scope>
          <variable citdl="Object" doc="" name="VirtualGrid" />
          <scope doc="" ilk="function" name="_Builder" signature="_Builder(view)">
            <variable ilk="argument" name="view" />
            <variable doc="" name="view" />
            <variable doc="" name="grid" />
            <scope attributes="private" doc="" name="_table" />
            <scope doc="" ilk="function" name="getTableArray" />
            <scope attributes="private" doc="" ilk="function" name="generateCellMarkup" returns="Array" signature="generateCellMarkup(inCell,inMoreStyles,inMoreClasses,isHeader)">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inMoreStyles" />
              <variable ilk="argument" name="inMoreClasses" />
              <variable ilk="argument" name="isHeader" />
            </scope>
            <scope doc="" ilk="function" name="isCellNode" signature="isCellNode(inNode)">
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope doc="" ilk="function" name="getCellNodeIndex" signature="getCellNodeIndex(inCellNode)">
              <variable ilk="argument" name="inCellNode" />
            </scope>
            <scope doc="" ilk="function" name="getCellNode" signature="getCellNode(inRowNode,inCellIndex)">
              <variable ilk="argument" name="inRowNode" />
              <variable ilk="argument" name="inCellIndex" />
            </scope>
            <scope doc="" ilk="function" name="findCellTarget" signature="findCellTarget(inSourceNode,inTopNode)">
              <variable ilk="argument" name="inSourceNode" />
              <variable ilk="argument" name="inTopNode" />
            </scope>
            <scope doc="" ilk="function" name="baseDecorateEvent" signature="baseDecorateEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="findTarget" signature="findTarget(inSource,inTag)">
              <variable ilk="argument" name="inSource" />
              <variable ilk="argument" name="inTag" />
            </scope>
            <scope doc="" ilk="function" name="findRowTarget" signature="findRowTarget(inSource)">
              <variable ilk="argument" name="inSource" />
            </scope>
            <scope doc="" ilk="function" name="isIntraNodeEvent" signature="isIntraNodeEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="isIntraRowEvent" signature="isIntraRowEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="dispatchEvent" signature="dispatchEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="domouseover" signature="domouseover(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable doc="" name="lastOverCellNode" />
            <scope doc="" ilk="function" name="domouseout" signature="domouseout(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="domousedown" signature="domousedown(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="_ContentBuilder" signature="_ContentBuilder(view)">
            <variable ilk="argument" name="view" />
            <scope doc="" ilk="function" name="update" />
            <scope doc="" ilk="function" name="prepareHtml" />
            <scope attributes="private" doc="" ilk="function" name="generateHtml" returns="String" signature="generateHtml(inDataIndex,inRowIndex)">
              <variable ilk="argument" name="inDataIndex" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="decorateEvent" returns="Boolean" signature="decorateEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="_HeaderBuilder" signature="_HeaderBuilder(view)">
            <variable ilk="argument" name="view" />
            <variable doc="" name="moveable" />
            <variable attributes="private" doc="" name="_skipBogusClicks" />
            <scope doc="" name="overResizeWidth" />
            <scope doc="" name="minColWidth" />
            <scope doc="" ilk="function" name="update" />
            <variable doc="" name="tableMap" />
            <scope doc="" ilk="function" name="generateHtml" signature="generateHtml(inGetValue,inValue)">
              <variable ilk="argument" name="inGetValue" />
              <variable ilk="argument" name="inValue" />
            </scope>
            <scope doc="" ilk="function" name="getCellX" signature="getCellX(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="decorateEvent" signature="decorateEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="prepareResize" signature="prepareResize(e,mod)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="mod" />
            </scope>
            <scope doc="" ilk="function" name="canResize" signature="canResize(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="overLeftResizeArea" returns="Array|String|Boolean" signature="overLeftResizeArea(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="overRightResizeArea" returns="Array|String|Boolean" signature="overRightResizeArea(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="domousemove" returns="Array|String|Boolean" signature="domousemove(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="domousedown" signature="domousedown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doclick" signature="doclick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="beginColumnResize" signature="beginColumnResize(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable doc="" name="moverDiv" />
            <scope doc="" ilk="function" name="doResizeColumn" signature="doResizeColumn(inDrag,mover,leftTop)">
              <variable ilk="argument" name="inDrag" />
              <variable ilk="argument" name="mover" />
              <variable ilk="argument" name="leftTop" />
            </scope>
            <scope doc="" ilk="function" name="endResizeColumn" signature="endResizeColumn(inDrag)">
              <variable ilk="argument" name="inDrag" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="_TableMap" signature="_TableMap(rows)">
            <variable ilk="argument" name="rows" />
            <variable doc="" name="map" />
            <scope attributes="private" doc="" ilk="function" name="mapRows" returns="Array|String|Boolean" signature="mapRows(inRows)">
              <variable ilk="argument" name="inRows" />
            </scope>
            <scope doc="" ilk="function" name="dumpMap" />
            <scope doc="Find node&apos;s map coords by it&apos;s structure coords" ilk="function" name="getMapCoords" signature="getMapCoords(inRow,inCol)">
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inCol" />
            </scope>
            <scope doc="Find a node in inNode&apos;s table with the given structure coords" ilk="function" name="getNode" signature="getNode(inTable,inRow,inCol)">
              <variable ilk="argument" name="inTable" />
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inCol" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_findOverlappingNodes" signature="_findOverlappingNodes(inTable,inRow,inCol)">
              <variable ilk="argument" name="inTable" />
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inCol" />
            </scope>
            <scope doc="" ilk="function" name="findOverlappingNodes" signature="findOverlappingNodes(inNode)">
              <variable ilk="argument" name="inNode" />
            </scope>
          </scope>
          <scope doc="Controls grid cell editing process. Owned by grid and used internally for editing." ilk="function" name="_EditManager" signature="_EditManager(inGrid)">
            <variable citdl="dojox.Grid" doc="The dojox.Grid this editor should be attached to" ilk="argument" name="inGrid" />
            <variable citdl="Object" doc="" name="info">
              <variable doc="" name="rowIndex" />
            </variable>
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="Invoke editing when cell is focused" ilk="function" name="cellFocus" signature="cellFocus(inCell,inRowIndex)">
              <variable citdl="cell" doc="object Grid cell object" ilk="argument" name="inCell" />
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="rowClick" signature="rowClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="styleRow" signature="styleRow(inRow)">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope doc="" ilk="function" name="dispatchEvent" signature="dispatchEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Indicates editing state of the grid." ilk="function" name="isEditing">
              <variable name="return_summary" />
            </scope>
            <scope doc="Indicates if the given cell is being edited." ilk="function" name="isEditCell" signature="isEditCell(inRowIndex,inCellIndex)">
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
              <variable citdl="Integer" doc="Grid cell index" ilk="argument" name="inCellIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Indicates if the given row is being edited." ilk="function" name="isEditRow" signature="isEditRow(inRowIndex)">
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Set the given cell to be edited" ilk="function" name="setEditCell" signature="setEditCell(inCell,inRowIndex)">
              <variable citdl="Object" doc="Grid cell object" ilk="argument" name="inCell" />
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_focusEditor" signature="_focusEditor(inCell,inRowIndex)">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="focusEditor" />
            <scope attributes="private" doc="" name="_boomerangWindow" />
            <scope attributes="private" doc="" ilk="function" name="_shouldCatchBoomerang" />
            <scope attributes="private" doc="" ilk="function" name="_boomerangFocus" />
            <scope attributes="private" doc="" ilk="function" name="_doCatchBoomerang" />
            <scope doc="" ilk="function" name="start" signature="start(inCell,inRowIndex,inEditing)">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inEditing" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_editorDo" signature="_editorDo(inMethod)">
              <variable ilk="argument" name="inMethod" />
            </scope>
            <scope doc="" ilk="function" name="editorApply" />
            <scope doc="" ilk="function" name="editorCancel" />
            <scope doc="" ilk="function" name="applyCellEdit" signature="applyCellEdit(inValue,inCell,inRowIndex)">
              <variable ilk="argument" name="inValue" />
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="applyRowEdit" />
            <scope doc="Apply a grid edit" ilk="function" name="apply" />
            <scope doc="Cancel a grid edit" ilk="function" name="cancel" />
            <scope doc="Save the grid editing state" ilk="function" name="save" signature="save(inRowIndex,inView)">
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
              <variable citdl="Object" doc="Grid view" ilk="argument" name="inView" />
            </scope>
            <scope doc="Restores the grid editing state" ilk="function" name="restore" signature="restore(inView,inRowIndex)">
              <variable citdl="Object" doc="Grid view" ilk="argument" name="inView" />
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
            </scope>
            <variable attributes="private" doc="" name="_catchBoomerang" />
            <variable doc="" name="grid" />
            <variable doc="" name="connections" />
          </scope>
          <scope doc="_Grid mixin that provides default implementations for grid events." ilk="function" name="_Events">
            <scope citdl="String" doc="css class to apply to grid cells over which the cursor is placed." name="cellOverClass" />
            <scope doc="top level handler for Key Events" ilk="function" name="onKeyEvent" signature="onKeyEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Top level handler for Content events" ilk="function" name="onContentEvent" signature="onContentEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Top level handler for header events" ilk="function" name="onHeaderEvent" signature="onHeaderEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Perform row styling on a given row. Called whenever row styling is updated." ilk="function" name="onStyleRow" signature="onStyleRow(inRow)">
              <variable citdl="Object" doc="Object containing row state information: selected, true if the row is selcted; over: true of the mouse is over the row; odd: true if the row is odd. Use customClasses and customStyles to control row css classes and styles; both properties are strings." ilk="argument" name="inRow" />
            </scope>
            <scope doc="Grid key event handler. By default enter begins editing and applies edits, escape cancels an edit, tab, shift-tab, and arrow keys move grid cell focus." ilk="function" name="onKeyDown" signature="onKeyDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is over the grid." ilk="function" name="onMouseOver" signature="onMouseOver(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of the grid." ilk="function" name="onMouseOut" signature="onMouseOut(e)">
              <variable citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is down inside grid." ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is over any row (data or header)." ilk="function" name="onMouseOverRow" signature="onMouseOverRow(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of any row (data or header)." ilk="function" name="onMouseOutRow" signature="onMouseOutRow(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is down inside grid row" ilk="function" name="onMouseDownRow" signature="onMouseDownRow(e)">
              <variable citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is over a cell." ilk="function" name="onCellMouseOver" signature="onCellMouseOver(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of a cell." ilk="function" name="onCellMouseOut" signature="onCellMouseOut(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is down in a header cell." ilk="function" name="onCellMouseDown" signature="onCellMouseDown(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a cell is clicked." ilk="function" name="onCellClick" signature="onCellClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a cell is double-clicked." ilk="function" name="onCellDblClick" signature="onCellDblClick(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a cell context menu is accessed via mouse right click." ilk="function" name="onCellContextMenu" signature="onCellContextMenu(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a cell receives focus." ilk="function" name="onCellFocus" signature="onCellFocus(inCell,inRowIndex)">
              <variable citdl="Object" doc="Cell object containing properties of the grid column." ilk="argument" name="inCell" />
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Event fired when a row is clicked." ilk="function" name="onRowClick" signature="onRowClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a row is double clicked." ilk="function" name="onRowDblClick" signature="onRowDblClick(e)">
              <variable citdl="Event" doc="decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves over a data row." ilk="function" name="onRowMouseOver" signature="onRowMouseOver(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of a data row." ilk="function" name="onRowMouseOut" signature="onRowMouseOut(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is down in a row." ilk="function" name="onRowMouseDown" signature="onRowMouseDown(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a row context menu is accessed via mouse right click." ilk="function" name="onRowContextMenu" signature="onRowContextMenu(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves over the grid header." ilk="function" name="onHeaderMouseOver" signature="onHeaderMouseOver(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of the grid header." ilk="function" name="onHeaderMouseOut" signature="onHeaderMouseOut(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves over a header cell." ilk="function" name="onHeaderCellMouseOver" signature="onHeaderCellMouseOver(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of a header cell." ilk="function" name="onHeaderCellMouseOut" signature="onHeaderCellMouseOut(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is down in a header cell." ilk="function" name="onHeaderCellMouseDown" signature="onHeaderCellMouseDown(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when the grid header is clicked." ilk="function" name="onHeaderClick" signature="onHeaderClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a header cell is clicked." ilk="function" name="onHeaderCellClick" signature="onHeaderCellClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when the grid header is double clicked." ilk="function" name="onHeaderDblClick" signature="onHeaderDblClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a header cell is double clicked." ilk="function" name="onHeaderCellDblClick" signature="onHeaderCellDblClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a header cell context menu is accessed via mouse right click." ilk="function" name="onHeaderCellContextMenu" signature="onHeaderCellContextMenu(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when the grid header context menu is accessed via mouse right click." ilk="function" name="onHeaderContextMenu" signature="onHeaderContextMenu(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when editing is started for a given grid cell" ilk="function" name="onStartEdit" signature="onStartEdit(inCell,inRowIndex)">
              <variable citdl="Object" doc="Cell object containing properties of the grid column." ilk="argument" name="inCell" />
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Event fired when editing is applied for a given grid cell" ilk="function" name="onApplyCellEdit" signature="onApplyCellEdit(inValue,inRowIndex,inFieldIndex)">
              <variable citdl="String" doc="Value from cell editor" ilk="argument" name="inValue" />
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
              <variable citdl="Integer" doc="Index in the grid&apos;s data store" ilk="argument" name="inFieldIndex" />
            </scope>
            <scope doc="Event fired when editing is cancelled for a given grid cell" ilk="function" name="onCancelEdit" signature="onCancelEdit(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Event fired when editing is applied for a given grid row" ilk="function" name="onApplyEdit" signature="onApplyEdit(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Event to determine if a grid row may be selected" ilk="function" name="onCanSelect" signature="onCanSelect(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Event to determine if a grid row may be deselected" ilk="function" name="onCanDeselect" signature="onCanDeselect(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Event fired when a grid row is selected" ilk="function" name="onSelected" signature="onSelected(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Event fired when a grid row is deselected" ilk="function" name="onDeselected" signature="onDeselected(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="onSelectionChanged" />
          </scope>
          <scope doc="Controls grid cell focus. Owned by grid and used internally for focusing. Note: grid cell actually receives keyboard input only when cell is being edited." ilk="function" name="_FocusManager" signature="_FocusManager(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <scope doc="" ilk="function" name="destroy" />
            <variable attributes="private" doc="" name="_colHeadNode" />
            <variable attributes="private" doc="" name="_colHeadFocusIdx" />
            <variable doc="" name="tabbingOut" />
            <scope doc="" name="focusClass" />
            <variable doc="" name="focusView" />
            <scope doc="" ilk="function" name="initFocusView" />
            <scope doc="states if the given cell is focused" ilk="function" name="isFocusCell" signature="isFocusCell(inCell,inRowIndex)">
              <variable citdl="object" doc="grid cell object" ilk="argument" name="inCell" />
              <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="" ilk="function" name="isLastFocusCell" />
            <scope doc="" ilk="function" name="isFirstFocusCell" />
            <scope doc="" ilk="function" name="isNoFocusCell" />
            <scope doc="states whether currently navigating among column headers." ilk="function" name="isNavHeader">
              <variable name="return_summary" />
            </scope>
            <scope doc="if one of the column headers currently has focus, return its index." ilk="function" name="getHeaderIndex">
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_focusifyCellNode" signature="_focusifyCellNode(inBork)">
              <variable ilk="argument" name="inBork" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_delayedCellFocus" />
            <scope attributes="private" doc="" ilk="function" name="_delayedHeaderFocus" />
            <scope attributes="private" doc="" ilk="function" name="_initColumnHeaders" />
            <scope attributes="private" doc="" ilk="function" name="_findHeaderCells" />
            <scope doc="" ilk="function" name="scrollIntoView" />
            <scope attributes="private" doc="" ilk="function" name="_scrollInfo" signature="_scrollInfo(cell,domNode)">
              <variable ilk="argument" name="cell" />
              <variable ilk="argument" name="domNode" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_scrollHeader" signature="_scrollHeader(currentIdx)">
              <variable ilk="argument" name="currentIdx" />
            </scope>
            <scope doc="" ilk="function" name="styleRow" signature="styleRow(inRow)">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope doc="focuses the given grid cell" ilk="function" name="setFocusIndex" signature="setFocusIndex(inRowIndex,inCellIndex)">
              <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              <variable citdl="int" doc="grid cell index" ilk="argument" name="inCellIndex" />
            </scope>
            <scope doc="focuses the given grid cell" ilk="function" name="setFocusCell" signature="setFocusCell(inCell,inRowIndex)">
              <variable citdl="object" doc="grid cell object" ilk="argument" name="inCell" />
              <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="focus next grid cell" ilk="function" name="next" />
            <scope doc="focus previous grid cell" ilk="function" name="previous" />
            <scope doc="focus grid cell or column header based on position relative to current focus" ilk="function" name="move" signature="move(inRowDelta,inColDelta)">
              <variable citdl="int" doc="vertical distance from current focus" ilk="argument" name="inRowDelta" />
              <variable ilk="argument" name="inColDelta" />
            </scope>
            <scope doc="" ilk="function" name="previousKey" signature="previousKey(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="nextKey" signature="nextKey(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="tabOut" signature="tabOut(inFocusNode)">
              <variable ilk="argument" name="inFocusNode" />
            </scope>
            <scope doc="" ilk="function" name="focusGridView" />
            <scope doc="" ilk="function" name="focusGrid" signature="focusGrid(inSkipFocusCell)">
              <variable ilk="argument" name="inSkipFocusCell" />
            </scope>
            <scope doc="" ilk="function" name="focusHeader" />
            <scope doc="" ilk="function" name="doFocus" signature="doFocus(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doBlur" signature="doBlur(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doBlurHeader" signature="doBlurHeader(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doLastNodeFocus" signature="doLastNodeFocus(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doLastNodeBlur" signature="doLastNodeBlur(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doColHeaderFocus" signature="doColHeaderFocus(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doColHeaderBlur" signature="doColHeaderBlur(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable doc="" name="cell">
              <scope name="view">
                <scope name="scrollboxNode">
                  <variable doc="" name="scrollLeft" />
                </scope>
              </scope>
            </variable>
            <variable doc="" name="rowIndex" />
            <variable doc="" name="grid">
              <variable doc="" name="rowCount" />
            </variable>
            <variable attributes="private" doc="" name="_connects" />
          </scope>
          <scope doc="A grid widget with virtual scrolling, cell editing, complex rows, sorting, fixed columns, sizeable columns, etc." ilk="function" name="_Grid">
            <scope doc="" name="templatePath" />
            <scope citdl="String" doc="CSS class applied to the grid&apos;s domNode" name="classTag" />
            <variable doc="Default data getter." ilk="function" name="get" signature="get(inRowIndex)">
              <variable citdl="Integer" doc="Row for which to provide data" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </variable>
            <variable citdl="Integer" doc="Number of rows to display." name="rowCount" />
            <variable citdl="Integer" doc="Number of rows to keep in the rendering cache." name="keepRows" />
            <scope citdl="Integer" doc="Number of rows to render at a time." name="rowsPerPage" />
            <scope citdl="Boolean" doc="If autoWidth is true, grid width is automatically set to fit the data." name="autoWidth" />
            <variable citdl="Boolean|Integer" doc="If autoHeight is true, grid height is automatically set to fit the data. If it is an integer, the height will be automatically set to fit the data if there are fewer than that many rows - and the height will be set to show that many rows if there are more" name="autoHeight" />
            <scope citdl="Boolean" doc="If autoRender is true, grid will render itself after initialization." name="autoRender" />
            <scope citdl="String" doc="default height of the grid, measured in any valid css unit." name="defaultHeight" />
            <variable citdl="String" doc="explicit height of the grid, measured in any valid css unit. This will be populated (and overridden) if the height: css attribute exists on the source node." name="height" />
            <variable citdl="dojox.grid.__ViewDef|dojox.grid.__ViewDef[]|dojox.grid.__CellDef[]|Array[dojox.grid.__CellDef[]" doc="View layout defintion." name="structure" />
            <scope citdl="Integer" doc="Override defaults and make the indexed grid view elastic, thus filling available horizontal space." name="elasticView" />
            <scope citdl="boolean" doc="Single-click starts editing. Default is double-click" name="singleClickEdit" />
            <scope citdl="String" doc="Set the selection mode of grid&apos;s Selection. Value must be &apos;single&apos;, &apos;multiple&apos;, or &apos;extended&apos;. Default is &apos;extended&apos;." name="selectionMode" />
            <scope citdl="Boolean|String" doc="If set to true, will add a row selector view to this grid. If set to a CSS width, will add a row selector of that width to this grid." name="rowSelector" />
            <scope citdl="Boolean" doc="If set to true, will add drag and drop reordering to views with one row of columns." name="columnReordering" />
            <variable citdl="dijit.Menu" doc="If set to a dijit.Menu, will use this as a context menu for the grid headers." name="headerMenu" />
            <scope citdl="String" doc="Label of placeholders to search for in the header menu to replace with column toggling menu items." name="placeholderLabel" />
            <scope citdl="Boolean" doc="Set to true if you want to be able to select the text within the grid.   Used to store the last two clicks, to ensure double-clicking occurs based on the intended row" name="selectable" />
            <variable attributes="private" doc="" name="_click" />
            <variable citdl="String" doc="Message that shows while the grid is loading" name="loadingMessage" />
            <variable citdl="String" doc="Message that shows when the grid encounters an error loading" name="errorMessage" />
            <scope citdl="String" doc="Message that shows if the grid has no data - wrap it in a span with class &apos;dojoxGridNoData&apos; if you want it to be styled similar to the loading and error messages" name="noDataMessage" />
            <variable doc="" name="sortInfo" />
            <scope doc="" name="themeable" />
            <variable attributes="private" doc="" name="_placeholders" />
            <scope doc="" ilk="function" name="buildRendering" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="destroy" />
            <scope attributes="private" doc="" ilk="function" name="_setAutoHeightAttr" signature="_setAutoHeightAttr(ah,skipRender)">
              <variable ilk="argument" name="ah" />
              <variable ilk="argument" name="skipRender" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getRowCountAttr" />
            <variable doc="" ilk="function" name="styleChanged" />
            <scope attributes="private" doc="" ilk="function" name="_styleChanged" />
            <scope doc="" ilk="function" name="textSizeChanged" />
            <scope attributes="private" doc="" ilk="function" name="_textSizeChanged" />
            <scope doc="" ilk="function" name="sizeChange" />
            <scope doc="" ilk="function" name="renderOnIdle" />
            <scope doc="" ilk="function" name="createManagers" />
            <scope doc="" ilk="function" name="createSelection" />
            <scope doc="Creates a new virtual scroller" ilk="function" name="createScroller" />
            <scope doc="Creates a new Grid layout" ilk="function" name="createLayout" />
            <scope doc="" ilk="function" name="onMoveColumn" />
            <scope doc="" ilk="function" name="createViews" />
            <scope doc="" ilk="function" name="createView" signature="createView(inClass,idx)">
              <variable ilk="argument" name="inClass" />
              <variable ilk="argument" name="idx" />
            </scope>
            <scope doc="" ilk="function" name="buildViews" />
            <scope attributes="private" doc="" ilk="function" name="_setStructureAttr" signature="_setStructureAttr(structure)">
              <variable ilk="argument" name="structure" />
            </scope>
            <scope doc="Install a new structure and rebuild the grid." ilk="function" name="setStructure" signature="setStructure(inStructure)">
              <variable citdl="dojox.grid.__ViewDef|dojox.grid.__ViewDef[]|dojox.grid.__CellDef[]|Array[dojox.grid.__CellDef[]]" ilk="argument" name="inStructure" />
            </scope>
            <scope doc="" ilk="function" name="getColumnTogglingItems" />
            <scope attributes="private" doc="" ilk="function" name="_setHeaderMenuAttr" signature="_setHeaderMenuAttr(menu)">
              <variable ilk="argument" name="menu" />
            </scope>
            <scope doc="" ilk="function" name="setHeaderMenu" signature="setHeaderMenu(menu)">
              <variable citdl="dijit.Menu" ilk="argument" name="menu" />
            </scope>
            <scope doc="" ilk="function" name="setupHeaderMenu" />
            <scope attributes="private" doc="" ilk="function" name="_fetch" signature="_fetch(start)">
              <variable ilk="argument" name="start" />
            </scope>
            <scope doc="" ilk="function" name="getItem" signature="getItem(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="showMessage" signature="showMessage(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_structureChanged" />
            <scope doc="" ilk="function" name="hasLayout" />
            <scope doc="Update the grid&apos;s rendering dimensions and resize it" ilk="function" name="resize" signature="resize(changeSize,resultSize)">
              <variable ilk="argument" name="changeSize" />
              <variable ilk="argument" name="resultSize" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getPadBorder" />
            <scope attributes="private" doc="" ilk="function" name="_getHeaderHeight" />
            <scope attributes="private" doc="" ilk="function" name="_resize" signature="_resize(changeSize,resultSize)">
              <variable ilk="argument" name="changeSize" />
              <variable ilk="argument" name="resultSize" />
            </scope>
            <scope doc="" ilk="function" name="adaptWidth" />
            <scope doc="" ilk="function" name="adaptHeight" signature="adaptHeight(inHeaderHeight)">
              <variable ilk="argument" name="inHeaderHeight" />
            </scope>
            <scope doc="" ilk="function" name="startup" />
            <scope doc="Render the grid, headers, and views. Edit and scrolling states are reset. To retain edit and scrolling states, see Update." ilk="function" name="render" />
            <scope attributes="private" doc="" ilk="function" name="_render" />
            <scope doc="" ilk="function" name="prerender" />
            <scope doc="" ilk="function" name="postrender" />
            <scope doc="" ilk="function" name="postresize" />
            <scope doc="private, used internally to render rows" ilk="function" name="renderRow" signature="renderRow(inRowIndex,inNodes)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="private, used internally to remove rows" ilk="function" name="rowRemoved" signature="rowRemoved(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <variable doc="" name="invalidated">
              <variable doc="" name="all" />
              <variable doc="" name="rowCount" />
            </variable>
            <variable doc="" name="updating" />
            <scope doc="Use to make multiple changes to rows while queueing row updating. NOTE: not currently supporting nested begin/endUpdate calls" ilk="function" name="beginUpdate" />
            <scope doc="Use after calling beginUpdate to render any changes made to rows." ilk="function" name="endUpdate" />
            <scope doc="" ilk="function" name="defaultUpdate" />
            <variable doc="Update the grid, retaining edit and scrolling states." ilk="function" name="update" />
            <scope doc="Render a single row." ilk="function" name="updateRow" signature="updateRow(inRowIndex)">
              <variable citdl="Integer" doc="Index of the row to render" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Render consecutive rows at once." ilk="function" name="updateRows" signature="updateRows(startIndex,howMany)">
              <variable citdl="Integer" doc="Index of the starting row to render" ilk="argument" name="startIndex" />
              <variable citdl="Integer" doc="How many rows to update." ilk="argument" name="howMany" />
            </scope>
            <scope doc="Change the number of rows." ilk="function" name="updateRowCount" signature="updateRowCount(inRowCount)">
              <variable citdl="int" doc="Number of rows in the grid." ilk="argument" name="inRowCount" />
            </scope>
            <scope doc="Update the styles for a row after it&apos;s state has changed." ilk="function" name="updateRowStyles" signature="updateRowStyles(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Update grid when the height of a row has changed. Row height is handled automatically as rows are rendered. Use this function only to update a row&apos;s height outside the normal rendering process." ilk="function" name="rowHeightChanged" signature="rowHeightChanged(inRowIndex)">
              <variable citdl="Integer" doc="index of the row that has changed height" ilk="argument" name="inRowIndex" />
            </scope>
            <scope citdl="Boolean" doc="flag modifies vertical scrolling behavior. Defaults to true but set to false for slower scroll performance but more immediate scrolling feedback" name="fastScroll" />
            <variable doc="" name="delayScroll" />
            <scope citdl="int" doc="pixel distance a user must scroll vertically to trigger grid scrolling." name="scrollRedrawThreshold" />
            <scope doc="Vertically scroll the grid to a given pixel position" ilk="function" name="scrollTo" signature="scrollTo(inTop)">
              <variable citdl="Integer" doc="vertical position of the grid in pixels" ilk="argument" name="inTop" />
            </scope>
            <scope doc="" ilk="function" name="finishScrollJob" />
            <scope doc="" ilk="function" name="setScrollTop" signature="setScrollTop(inTop)">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope doc="Scroll the grid to a specific row." ilk="function" name="scrollToRow" signature="scrollToRow(inRowIndex)">
              <variable citdl="Integer" doc="grid row index" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="styleRowNode" signature="styleRowNode(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_mouseOut" signature="_mouseOut(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Retrieves the cell object for a given grid column." ilk="function" name="getCell" signature="getCell(inIndex)">
              <variable citdl="Integer" doc="Grid column index of cell to retrieve" ilk="argument" name="inIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="" ilk="function" name="setCellWidth" signature="setCellWidth(inIndex,inUnitWidth)">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inUnitWidth" />
            </scope>
            <scope attributes="private" doc="Returns the cell name of a passed cell" ilk="function" name="getCellName" returns="String" signature="getCellName(inCell)">
              <variable ilk="argument" name="inCell" />
            </scope>
            <scope doc="Determines if the grid can be sorted" ilk="function" name="canSort" signature="canSort(inSortInfo)">
              <variable citdl="Integer" doc="Sort information, 1-based index of column on which to sort, positive for an ascending sort and negative for a descending sort" ilk="argument" name="inSortInfo" />
              <variable name="return_summary" />
            </scope>
            <scope doc="" ilk="function" name="sort" />
            <scope attributes="private" doc="Returns true if grid is sorted in an ascending direction." ilk="function" name="getSortAsc" returns="Boolean" signature="getSortAsc(inSortInfo)">
              <variable ilk="argument" name="inSortInfo" />
            </scope>
            <scope attributes="private" doc="Returns the index of the column on which the grid is sorted" ilk="function" name="getSortIndex" returns="Integer" signature="getSortIndex(inSortInfo)">
              <variable ilk="argument" name="inSortInfo" />
            </scope>
            <scope doc="Sort the grid on a column in a specified direction" ilk="function" name="setSortIndex" signature="setSortIndex(inIndex,inAsc)">
              <variable citdl="Integer" doc="Column index on which to sort." ilk="argument" name="inIndex" />
              <variable citdl="Boolean" doc="If true, sort the grid in ascending order, otherwise in descending order" ilk="argument" name="inAsc" />
            </scope>
            <scope doc="" ilk="function" name="setSortInfo" signature="setSortInfo(inSortInfo)">
              <variable ilk="argument" name="inSortInfo" />
            </scope>
            <scope doc="" ilk="function" name="doKeyEvent" signature="doKeyEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_dispatch" signature="_dispatch(m,e)">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="dispatchKeyEvent" signature="dispatchKeyEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="dispatchContentEvent" signature="dispatchContentEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="dispatchHeaderEvent" signature="dispatchHeaderEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="dokeydown" signature="dokeydown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doclick" signature="doclick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="dodblclick" signature="dodblclick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="docontextmenu" signature="docontextmenu(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doheaderclick" signature="doheaderclick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doheaderdblclick" signature="doheaderdblclick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doheadercontextmenu" signature="doheadercontextmenu(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doStartEdit" signature="doStartEdit(inCell,inRowIndex)">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="doApplyCellEdit" signature="doApplyCellEdit(inValue,inRowIndex,inFieldIndex)">
              <variable ilk="argument" name="inValue" />
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inFieldIndex" />
            </scope>
            <scope doc="" ilk="function" name="doCancelEdit" signature="doCancelEdit(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="doApplyEdit" signature="doApplyEdit(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Add a row to the grid." ilk="function" name="addRow" />
            <scope doc="Remove the selected rows from the grid." ilk="function" name="removeSelectedRows" />
            <scope name="domNode">
              <variable doc="" name="tabIndex" />
              <variable doc="" name="onReveal" />
              <variable doc="" name="onSizeChange" />
            </scope>
            <variable attributes="private" doc="" name="_autoHeight" />
            <variable doc="" name="rows" />
            <variable doc="" name="focus" />
            <variable doc="" name="edit" />
            <variable doc="" name="selection" />
            <variable doc="" name="scroller">
              <variable doc="" name="grid" />
              <variable attributes="private" doc="" name="_pageIdPrefix" />
              <variable doc="" name="renderRow" />
              <variable doc="" name="removeRow" />
              <variable doc="" name="windowHeight" />
            </variable>
            <variable doc="" name="layout" />
            <variable doc="" name="views">
              <variable doc="" name="createView" />
            </variable>
            <scope name="messagesNode">
              <variable doc="" name="innerHTML" />
            </scope>
            <variable attributes="private" doc="" name="_padBorder" />
            <scope name="viewsNode" />
            <variable doc="" name="fitTo" />
            <scope name="viewsHeaderNode" />
            <variable doc="" name="lastScrollTop" />
            <variable doc="" name="scrollTop" />
            <scope attributes="private" doc="" ilk="function" name="markupFactory" returns="for vendetta" signature="markupFactory(props,node,ctor,cellFunc)">
              <variable ilk="argument" name="props" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="ctor" />
              <variable ilk="argument" name="cellFunc" />
            </scope>
          </scope>
          <scope attributes="private" doc="" name="__CellDef">
            <variable citdl="String?" doc="The text to use in the header of the grid for this cell." name="name" />
            <variable citdl="String?" doc="If &amp;amp;quot;get&amp;amp;quot; is not specified, this is used as the data for the cell. defaultValue: String? If &amp;amp;quot;get&amp;amp;quot; and &amp;amp;quot;value&amp;amp;quot; aren&apos;t specified or if &amp;amp;quot;get&amp;amp;quot; returns an undefined value, this is used as the data for the cell. &amp;amp;quot;formatter&amp;amp;quot; is not run on this if &amp;amp;quot;get&amp;amp;quot; returns an undefined value." name="value" />
            <variable citdl="Function?" doc="function(rowIndex){} rowIndex is of type Integer. This function will be called when a cell requests data. Returns the unformatted data for the cell." name="get" />
            <variable citdl="Function?" doc="function(data, rowIndex){} data is of type anything, rowIndex is of type Integer. This function will be called after the cell has its data but before it passes it back to the grid to render. Returns the formatted version of the cell&apos;s data." name="formatter" />
            <variable citdl="Boolean?" doc="Whether this cell should be editable or not." name="editable" />
            <variable citdl="Boolean?" doc="If true, the cell will not be displayed. noresize: Boolean? If true, the cell will not be able to be resized." name="hidden" />
            <variable citdl="Integer|String?" doc="A CSS size. If it&apos;s an Integer, the width will be in em&apos;s." name="width" />
            <variable citdl="Integer?" doc="How many columns to span this cell. Will not work in the first sub-row of cells." name="colSpan" />
            <variable citdl="Integer?" doc="How many sub-rows to span this cell." name="rowSpan" />
            <variable citdl="String?" doc="A string of styles to apply to both the header cell and main grid cells. Must end in a &apos;;&apos;." name="styles" />
            <variable citdl="String?" doc="A string of styles to apply to just the header cell. Must end in a &apos;;&apos;" name="headerStyles" />
            <variable citdl="String?" doc="A string of styles to apply to just the main grid cells. Must end in a &apos;;&apos;" name="cellStyles" />
            <variable citdl="String?" doc="A space separated list of classes to apply to both the header cell and the main grid cells." name="classes" />
            <variable citdl="String?" doc="A space separated list of classes to apply to just the header cell." name="headerClasses" />
            <variable citdl="String?" doc="A space separated list of classes to apply to just the main grid cells." name="cellClasses" />
            <variable citdl="String?" doc="A space separated string of attribute=&apos;value&apos; pairs to add to the header cell element and main grid cell elements." name="attrs" />
          </scope>
          <scope attributes="private" doc="" name="__ViewDef">
            <variable citdl="Boolean?" doc="If true, no scrollbars will be rendered without scrollbars." name="noscroll" />
            <variable citdl="Integer|String?" doc="A CSS size. If it&apos;s an Integer, the width will be in em&apos;s. If &amp;amp;quot;noscroll&amp;amp;quot; is true, this value is ignored." name="width" />
            <variable citdl="dojox.grid.__CellDef[]|Array[dojox.grid.__CellDef[]]?" doc="The structure of the cells within this grid." name="cells" />
            <variable citdl="dojox.grid.__CellDef?" doc="A cell definition with default values for all cells in this view. If a property is defined in a cell definition in the &amp;amp;quot;cells&amp;amp;quot; array and this property, the cell definition&apos;s property will override this property&apos;s property." name="defaultCell" />
            <variable citdl="Function?" doc="function(rowIndex, cells){} rowIndex is of type Integer, cells is of type Array[dojox.grid.__CellDef[]]. This function is called before each row of data is rendered. Before the header is rendered, rowIndex will be -1. &amp;amp;quot;cells&amp;amp;quot; is a reference to the internal structure of this view&apos;s cells so any changes you make to it will persist between calls." name="onBeforeRow" />
            <variable citdl="Function?" doc="function(rowIndex, cells, rowNode){} rowIndex is of type Integer, cells is of type Array[dojox.grid.__CellDef[]], rowNode is of type DOMNode. This function is called after each row of data is rendered. After the header is rendered, rowIndex will be -1. &amp;amp;quot;cells&amp;amp;quot; is a reference to the internal structure of this view&apos;s cells so any changes you make to it will persist between calls." name="onAfterRow" />
          </scope>
          <scope doc="Controls grid cell layout. Owned by grid and used internally." ilk="function" name="_Layout" signature="_Layout(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <variable doc="" name="cells" />
            <variable doc="" name="structure" />
            <scope doc="" name="defaultWidth" />
            <scope doc="" ilk="function" name="moveColumn" signature="moveColumn(sourceViewIndex,destViewIndex,cellIndex,targetIndex,before)">
              <variable ilk="argument" name="sourceViewIndex" />
              <variable ilk="argument" name="destViewIndex" />
              <variable ilk="argument" name="cellIndex" />
              <variable ilk="argument" name="targetIndex" />
              <variable ilk="argument" name="before" />
            </scope>
            <scope doc="" ilk="function" name="setColumnVisibility" signature="setColumnVisibility(columnIndex,visible)">
              <variable ilk="argument" name="columnIndex" />
              <variable ilk="argument" name="visible" />
            </scope>
            <scope doc="" ilk="function" name="addCellDef" signature="addCellDef(inRowIndex,inCellIndex,inDef)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inCellIndex" />
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope doc="" ilk="function" name="addRowDef" signature="addRowDef(inRowIndex,inDef)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope doc="" ilk="function" name="addRowsDef" signature="addRowsDef(inDef)">
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope doc="" ilk="function" name="addViewDef" signature="addViewDef(inDef)">
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope doc="" ilk="function" name="setStructure" signature="setStructure(inStructure)">
              <variable ilk="argument" name="inStructure" />
            </scope>
            <variable doc="" name="grid">
              <variable doc="" name="sortInfo" />
            </variable>
            <variable attributes="private" doc="" name="_defaultCellProps" />
            <variable doc="" name="fieldIndex" />
            <variable doc="" name="cellCount" />
          </scope>
          <scope doc="" ilk="function" name="_RowManager" signature="_RowManager(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <scope doc="" name="linesToEms" />
            <variable doc="" name="overRow" />
            <scope doc="" ilk="function" name="prepareStylingRow" signature="prepareStylingRow(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" ilk="function" name="styleRowNode" signature="styleRowNode(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" ilk="function" name="applyStyles" signature="applyStyles(inRow)">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope doc="" ilk="function" name="updateStyles" signature="updateStyles(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="setOverRow" signature="setOverRow(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="isOver" signature="isOver(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <variable doc="" name="grid" />
          </scope>
          <scope doc="Custom grid view. If used in a grid structure, provides a small selectable region for grid rows." ilk="function" name="_RowSelector">
            <scope doc="" name="defaultWidth" />
            <scope doc="" name="noscroll" />
            <scope doc="" name="padBorderWidth" />
            <scope doc="" ilk="function" name="buildRendering" />
            <scope doc="" ilk="function" name="getWidth" />
            <scope doc="" ilk="function" name="buildRowContent" signature="buildRowContent(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" ilk="function" name="renderHeader" />
            <scope doc="" ilk="function" name="resize" />
            <scope doc="" ilk="function" name="adaptWidth" />
            <scope doc="" ilk="function" name="doStyleRowNode" signature="doStyleRowNode(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" ilk="function" name="domouseover" signature="domouseover(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="domouseout" signature="domouseout(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope name="scrollboxNode" />
            <scope name="headerNode" />
          </scope>
          <scope doc="" ilk="function" name="_Scroller" signature="_Scroller(inContentNodes)">
            <variable ilk="argument" name="inContentNodes" />
            <variable doc="" name="rowCount" />
            <scope doc="" name="defaultRowHeight" />
            <variable doc="" name="keepRows" />
            <scope doc="" name="contentNode" />
            <scope doc="" name="scrollboxNode">
              <variable doc="" name="scrollTop" />
              <variable doc="" name="onscroll" />
            </scope>
            <variable doc="" name="defaultPageHeight" />
            <variable doc="" name="keepPages" />
            <variable doc="" name="pageCount" />
            <variable doc="" name="windowHeight" />
            <variable doc="" name="firstVisibleRow" />
            <variable doc="" name="lastVisibleRow" />
            <variable doc="" name="averageRowHeight" />
            <variable doc="" name="page" />
            <variable doc="" name="pageTop" />
            <scope doc="" ilk="function" name="init" signature="init(inRowCount,inKeepRows,inRowsPerPage)">
              <variable ilk="argument" name="inRowCount" />
              <variable ilk="argument" name="inKeepRows" />
              <variable ilk="argument" name="inRowsPerPage" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getPageCount" signature="_getPageCount(rowCount,rowsPerPage)">
              <variable ilk="argument" name="rowCount" />
              <variable ilk="argument" name="rowsPerPage" />
            </scope>
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="setKeepInfo" signature="setKeepInfo(inKeepRows)">
              <variable ilk="argument" name="inKeepRows" />
            </scope>
            <scope doc="" ilk="function" name="setContentNodes" signature="setContentNodes(inNodes)">
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="getDefaultNodes" />
            <scope doc="" ilk="function" name="invalidate" />
            <scope doc="" ilk="function" name="updateRowCount" signature="updateRowCount(inRowCount)">
              <variable ilk="argument" name="inRowCount" />
            </scope>
            <scope doc="" ilk="function" name="pageExists" signature="pageExists(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="measurePage" signature="measurePage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="positionPage" signature="positionPage(inPageIndex,inPos)">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope doc="" ilk="function" name="repositionPages" signature="repositionPages(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="installPage" signature="installPage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="preparePage" signature="preparePage(inPageIndex,inReuseNode)">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inReuseNode" />
            </scope>
            <scope doc="" ilk="function" name="renderPage" signature="renderPage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="removePage" signature="removePage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="destroyPage" signature="destroyPage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="pacify" signature="pacify(inShouldPacify)">
              <variable ilk="argument" name="inShouldPacify" />
            </scope>
            <variable doc="" name="pacifying" />
            <scope doc="" name="pacifyTicks" />
            <scope doc="" ilk="function" name="setPacifying" signature="setPacifying(inPacifying)">
              <variable ilk="argument" name="inPacifying" />
            </scope>
            <scope doc="" ilk="function" name="startPacify" />
            <scope doc="" ilk="function" name="doPacify" />
            <scope doc="" ilk="function" name="endPacify" />
            <scope doc="" ilk="function" name="resize" />
            <scope doc="" ilk="function" name="calcLastPageHeight" />
            <scope doc="" ilk="function" name="updateContentHeight" signature="updateContentHeight(inDh)">
              <variable ilk="argument" name="inDh" />
            </scope>
            <scope doc="" ilk="function" name="updatePageHeight" signature="updatePageHeight(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="rowHeightChanged" signature="rowHeightChanged(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="invalidateNodes" />
            <scope doc="" ilk="function" name="createPageNode" />
            <scope doc="" ilk="function" name="getPageHeight" signature="getPageHeight(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="pushPage" signature="pushPage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="popPage" />
            <scope doc="" ilk="function" name="findPage" signature="findPage(inTop)">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope doc="" ilk="function" name="buildPage" signature="buildPage(inPageIndex,inReuseNode,inPos)">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inReuseNode" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope doc="" ilk="function" name="needPage" signature="needPage(inPageIndex,inPos)">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope doc="" ilk="function" name="onscroll" />
            <scope doc="" ilk="function" name="scroll" signature="scroll(inTop)">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope doc="" ilk="function" name="getScrollBottom" signature="getScrollBottom(inTop)">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope doc="" ilk="function" name="processNodeEvent" signature="processNodeEvent(e,inNode)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope doc="" ilk="function" name="processEvent" signature="processEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="renderRow" signature="renderRow(inRowIndex,inPageNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inPageNode" />
            </scope>
            <scope doc="" ilk="function" name="removeRow" signature="removeRow(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="getDefaultPageNode" signature="getDefaultPageNode(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="positionPageNode" signature="positionPageNode(inNode,inPos)">
              <variable ilk="argument" name="inNode" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope doc="" ilk="function" name="getPageNodePosition" signature="getPageNodePosition(inNode)">
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope doc="" ilk="function" name="invalidatePageNode" signature="invalidatePageNode(inPageIndex,inNodes)">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="getPageRow" signature="getPageRow(inPage)">
              <variable ilk="argument" name="inPage" />
            </scope>
            <scope doc="" ilk="function" name="getLastPageRow" signature="getLastPageRow(inPage)">
              <variable ilk="argument" name="inPage" />
            </scope>
            <scope doc="" ilk="function" name="getFirstVisibleRow" signature="getFirstVisibleRow(inPage,inPageTop,inScrollTop)">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inPageTop" />
              <variable ilk="argument" name="inScrollTop" />
            </scope>
            <scope doc="" ilk="function" name="getLastVisibleRow" signature="getLastVisibleRow(inPage,inBottom,inScrollBottom)">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inBottom" />
              <variable ilk="argument" name="inScrollBottom" />
            </scope>
            <scope doc="" ilk="function" name="findTopRow" signature="findTopRow(inScrollTop)">
              <variable ilk="argument" name="inScrollTop" />
            </scope>
            <scope doc="" ilk="function" name="findScrollTop" signature="findScrollTop(inRow)">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope doc="" name="dummy" />
            <variable doc="" name="rowsPerPage" />
            <variable doc="" name="contentNodes" />
            <variable doc="" name="colCount" />
            <variable doc="" name="pageNodes" />
            <variable doc="" name="pageHeights" />
            <variable doc="" name="height" />
            <variable doc="" name="startPacifyTicks" />
            <scope name="grid">
              <variable doc="" name="scrollTop" />
            </scope>
            <variable doc="" name="offset" />
            <variable doc="" name="stack" />
          </scope>
          <scope doc="A collection of grid columns. A grid is comprised of a set of views that stack horizontally. Grid creates views automatically based on grid&apos;s layout structure. Users should typically not need to access individual views directly." ilk="function" name="_View">
            <scope citdl="String" doc="Default width of the view" name="defaultWidth" />
            <variable citdl="String" doc="Width for the view, in valid css unit" name="viewWidth" />
            <scope doc="" name="templatePath" />
            <scope doc="" name="themeable" />
            <scope doc="" name="classTag" />
            <scope doc="" name="marginBottom" />
            <scope doc="" name="rowPad" />
            <variable attributes="private" citdl="int" doc="Width of the column being toggled (-1 for none)" name="_togglingColumn" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="focus" />
            <scope doc="" ilk="function" name="setStructure" signature="setStructure(inStructure)">
              <variable ilk="argument" name="inStructure" />
            </scope>
            <scope doc="" ilk="function" name="testFlexCells" />
            <scope doc="" ilk="function" name="updateStructure" />
            <scope attributes="private" doc="" ilk="function" name="getScrollbarWidth" returns="Integer" />
            <scope attributes="private" doc="" ilk="function" name="getColumnsWidth" returns="Integer" />
            <scope doc="" ilk="function" name="setColumnsWidth" signature="setColumnsWidth(width)">
              <variable ilk="argument" name="width" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="getWidth" returns="String" />
            <scope attributes="private" doc="" ilk="function" name="getContentWidth" returns="String" />
            <scope doc="" ilk="function" name="render" />
            <scope attributes="private" doc="" ilk="function" name="_onDndDropBefore" signature="_onDndDropBefore(source,nodes,copy)">
              <variable ilk="argument" name="source" />
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="copy" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onDndDrop" signature="_onDndDrop(source,nodes,copy)">
              <variable ilk="argument" name="source" />
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="copy" />
            </scope>
            <scope doc="" ilk="function" name="renderHeader" />
            <scope attributes="private" doc="" ilk="function" name="_getHeaderContent" signature="_getHeaderContent(inCell)">
              <variable ilk="argument" name="inCell" />
            </scope>
            <scope doc="" ilk="function" name="resize" />
            <scope attributes="private" doc="" ilk="function" name="hasHScrollbar" returns="Boolean" signature="hasHScrollbar(reset)">
              <variable ilk="argument" name="reset" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="hasVScrollbar" returns="Boolean" signature="hasVScrollbar(reset)">
              <variable ilk="argument" name="reset" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="convertColPctToFixed" returns="Integer|String|Boolean" />
            <scope doc="" ilk="function" name="adaptHeight" signature="adaptHeight(minusScroll)">
              <variable ilk="argument" name="minusScroll" />
            </scope>
            <scope doc="" ilk="function" name="adaptWidth" />
            <scope doc="" ilk="function" name="setSize" signature="setSize(w,h)">
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
            </scope>
            <scope doc="" ilk="function" name="renderRow" signature="renderRow(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="createRowNode" signature="createRowNode(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="buildRow" signature="buildRow(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" ilk="function" name="buildRowContent" signature="buildRowContent(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" name="rowRemoved" />
            <scope doc="" ilk="function" name="getRowNode" signature="getRowNode(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="getCellNode" signature="getCellNode(inRowIndex,inCellIndex)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inCellIndex" />
            </scope>
            <scope doc="" ilk="function" name="getHeaderCellNode" signature="getHeaderCellNode(inCellIndex)">
              <variable ilk="argument" name="inCellIndex" />
            </scope>
            <scope doc="" ilk="function" name="styleRow" signature="styleRow(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" ilk="function" name="styleRowNode" signature="styleRowNode(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" ilk="function" name="doStyleRowNode" signature="doStyleRowNode(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" ilk="function" name="updateRow" signature="updateRow(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="updateRowStyles" signature="updateRowStyles(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <variable doc="" name="lastTop" />
            <variable doc="" name="firstScroll" />
            <scope attributes="private" doc="" ilk="function" name="doscroll" returns="Integer|String|Boolean" signature="doscroll(inEvent)">
              <variable ilk="argument" name="inEvent" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="setScrollTop" returns="Integer|String|Boolean" signature="setScrollTop(inTop)">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope doc="" ilk="function" name="doContentEvent" signature="doContentEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doHeaderEvent" signature="doHeaderEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="dispatchContentEvent" signature="dispatchContentEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="dispatchHeaderEvent" signature="dispatchHeaderEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="setColWidth" signature="setColWidth(inIndex,inWidth)">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inWidth" />
            </scope>
            <scope doc="" ilk="function" name="update" />
            <variable doc="" name="rowNodes" />
            <variable doc="" name="content" />
            <variable doc="" name="header" />
            <scope name="headerNodeContainer" />
            <variable doc="" name="structure" />
            <variable doc="" name="onBeforeRow" />
            <variable doc="" name="onAfterRow" />
            <variable doc="" name="noscroll" />
            <scope name="scrollboxNode">
              <variable doc="" name="scrollLeft" />
              <variable doc="" name="scrollTop" />
            </scope>
            <variable doc="" name="simpleStructure" />
            <variable doc="" name="flexCells" />
            <scope name="headerContentNode">
              <scope name="firstChild" />
              <variable doc="" name="innerHTML" />
            </scope>
            <variable attributes="private" doc="" name="_source_conn" />
            <variable attributes="private" doc="" name="_source_sub" />
            <variable attributes="private" doc="" name="_removingColumn" />
            <variable doc="" name="contentWidth" />
            <variable attributes="private" doc="" name="_hasHScroll" />
            <variable attributes="private" doc="" name="_hasVScroll" />
            <variable attributes="private" doc="" name="_pendingUpdate" />
            <scope name="headerNode">
              <variable doc="" name="scrollLeft" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="_GridAvatar">
            <scope doc="" ilk="function" name="construct" />
            <scope doc="" ilk="function" name="destroy" />
            <variable doc="" name="node" />
            <variable doc="" name="oldOffsetY" />
          </scope>
          <scope doc="A collection of grid views. Owned by grid and used internally for managing grid views." ilk="function" name="_ViewManager" signature="_ViewManager(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <scope doc="" name="defaultWidth" />
            <variable doc="" name="views" />
            <scope doc="" ilk="function" name="resize" />
            <scope doc="" ilk="function" name="render" />
            <scope doc="" ilk="function" name="addView" signature="addView(inView)">
              <variable ilk="argument" name="inView" />
            </scope>
            <scope doc="" ilk="function" name="destroyViews" />
            <scope doc="" ilk="function" name="getContentNodes" />
            <scope doc="" ilk="function" name="forEach" signature="forEach(inCallback)">
              <variable ilk="argument" name="inCallback" />
            </scope>
            <scope doc="" ilk="function" name="onEach" signature="onEach(inMethod,inArgs)">
              <variable ilk="argument" name="inMethod" />
              <variable ilk="argument" name="inArgs" />
            </scope>
            <scope doc="" ilk="function" name="normalizeHeaderNodeHeight" />
            <scope doc="" ilk="function" name="normalizeRowNodeHeights" signature="normalizeRowNodeHeights(inRowNodes)">
              <variable ilk="argument" name="inRowNodes" />
            </scope>
            <scope doc="" ilk="function" name="resetHeaderNodeHeight" />
            <scope doc="" ilk="function" name="renormalizeRow" signature="renormalizeRow(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="getViewWidth" signature="getViewWidth(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="measureHeader" />
            <scope doc="" ilk="function" name="measureContent" />
            <scope doc="" ilk="function" name="findClient" signature="findClient(inAutoWidth)">
              <variable ilk="argument" name="inAutoWidth" />
            </scope>
            <scope doc="" ilk="function" name="arrange" signature="arrange(l,w)">
              <variable ilk="argument" name="l" />
              <variable ilk="argument" name="w" />
            </scope>
            <scope doc="" ilk="function" name="renderRow" signature="renderRow(inRowIndex,inNodes)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="rowRemoved" signature="rowRemoved(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="updateRow" signature="updateRow(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="updateRowStyles" signature="updateRowStyles(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="setScrollTop" signature="setScrollTop(inTop)">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope doc="Returns the first grid view with a scroll bar" ilk="function" name="getFirstScrollingView" />
            <variable doc="" name="grid" />
          </scope>
          <variable citdl="Object" doc="" name="cells">
            <scope doc="Respresents a grid cell and contains information about column options and methods for retrieving cell related information. Each column in a grid layout has a cell object and most events and many methods provide access to these objects." ilk="function" name="_Base" signature="_Base(inProps)">
              <variable ilk="argument" name="inProps" />
              <scope doc="" name="styles" />
              <scope doc="" name="classes" />
              <scope doc="" name="editable" />
              <scope doc="" name="alwaysEditing" />
              <scope doc="" name="formatter" />
              <scope doc="" name="defaultValue" />
              <variable doc="" name="value" />
              <scope doc="" name="hidden" />
              <scope doc="" name="noresize" />
              <scope attributes="private" doc="" name="_valueProp" />
              <variable attributes="private" doc="" name="_formatPending" />
              <scope doc="provides the html for a given grid cell." ilk="function" name="format" signature="format(inRowIndex,inItem)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inItem" />
                <variable name="return_summary" />
              </scope>
              <scope doc="formats the cell for editing" ilk="function" name="formatEditing" signature="formatEditing(inDatum,inRowIndex)">
                <variable citdl="anything" doc="cell data to edit" ilk="argument" name="inDatum" />
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
                <variable name="return_summary" />
              </scope>
              <scope doc="gets the dom node for a given grid cell." ilk="function" name="getNode" signature="getNode(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
                <variable name="return_summary" />
              </scope>
              <scope doc="" ilk="function" name="getHeaderNode" />
              <scope doc="" ilk="function" name="getEditNode" signature="getEditNode(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="canResize" />
              <scope doc="" ilk="function" name="isFlex" />
              <scope doc="" ilk="function" name="applyEdit" signature="applyEdit(inValue,inRowIndex)">
                <variable ilk="argument" name="inValue" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="cancelEdit" signature="cancelEdit(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_onEditBlur" signature="_onEditBlur(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="registerOnBlur" signature="registerOnBlur(inNode,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="needFormatNode" signature="needFormatNode(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="cancelFormatNode" />
              <scope attributes="private" doc="" ilk="function" name="_formatNode" signature="_formatNode(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="format the editing dom node. Use when editor is a widget." ilk="function" name="formatNode" signature="formatNode(inNode,inDatum,inRowIndex)">
                <variable citdl="dom" doc="node dom node for the editor" ilk="argument" name="inNode" />
                <variable citdl="anything" doc="cell data to edit" ilk="argument" name="inDatum" />
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="dispatchEvent" signature="dispatchEvent(m,e)">
                <variable ilk="argument" name="m" />
                <variable ilk="argument" name="e" />
              </scope>
              <scope doc="returns value entered into editor" ilk="function" name="getValue" signature="getValue(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
                <variable name="return_summary" />
              </scope>
              <scope doc="set the value of the grid editor" ilk="function" name="setValue" signature="setValue(inRowIndex,inValue)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
                <variable citdl="anything" doc="value of editor" ilk="argument" name="inValue" />
              </scope>
              <scope doc="focus the grid editor" ilk="function" name="focus" signature="focus(inRowIndex,inNode)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
                <variable citdl="dom" doc="node editor node" ilk="argument" name="inNode" />
              </scope>
              <scope doc="save editor state" ilk="function" name="save" signature="save(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="restore editor state" ilk="function" name="restore" signature="restore(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <scope attributes="private" doc="called when editing is completed to clean up editor" ilk="function" name="_finish" signature="_finish(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="apply edit from cell editor" ilk="function" name="apply" signature="apply(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="cancel cell edit" ilk="function" name="cancel" signature="cancel(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <variable attributes="private" doc="" name="_props" />
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cellDef)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cellDef" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="Cell">
              <variable citdl="RegExp" doc="optional regex for disallowing keypresses" name="keyFilter" />
              <scope doc="" ilk="function" name="formatEditing" signature="formatEditing(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="formatNode" signature="formatNode(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="doKey" signature="doKey(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_finish" signature="_finish(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cellDef)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cellDef" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="RowIndex">
              <scope doc="" name="name" />
              <scope doc="" ilk="function" name="postscript" />
              <scope doc="" ilk="function" name="get" signature="get(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <variable doc="" name="editable" />
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cellDef)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cellDef" />
              </scope>
            </scope>
            <scope doc="grid cell that provides a standard select for editing" ilk="function" name="Select" signature="Select(inCell)">
              <variable ilk="argument" name="inCell" />
              <scope citdl="Array" doc="text of each item" name="options" />
              <variable citdl="Array" doc="value for each item" name="values" />
              <scope citdl="Integer" doc="editor returns only the index of the selected option and not the value" name="returnIndex" />
              <scope doc="" ilk="function" name="formatEditing" signature="formatEditing(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="getValue" signature="getValue(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cell)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope doc="grid cell that is always in an editable state, regardless of grid editing state" ilk="function" name="AlwaysEdit">
              <scope doc="" name="alwaysEditing" />
              <scope attributes="private" doc="" ilk="function" name="_formatNode" signature="_formatNode(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="applyStaticValue" signature="applyStaticValue(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cell)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope doc="grid cell that provides a standard checkbox that is always on for editing" ilk="function" name="Bool">
              <scope attributes="private" doc="" name="_valueProp" />
              <scope doc="" ilk="function" name="formatEditing" signature="formatEditing(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="doclick" signature="doclick(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cell)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <variable attributes="private" citdl="Object" doc="" name="_base" />
            <scope doc="" ilk="function" name="_Widget" signature="_Widget(inCell)">
              <variable ilk="argument" name="inCell" />
              <variable doc="" name="widgetClass" />
              <scope doc="" ilk="function" name="formatEditing" signature="formatEditing(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="getValue" signature="getValue(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="setValue" signature="setValue(inRowIndex,inValue)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope doc="" ilk="function" name="getWidgetProps" signature="getWidgetProps(inDatum)">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope doc="" ilk="function" name="createWidget" signature="createWidget(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="attachWidget" signature="attachWidget(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="formatNode" signature="formatNode(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="sizeWidget" signature="sizeWidget(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="focus" signature="focus(inRowIndex,inNode)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inNode" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_finish" signature="_finish(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <variable doc="" name="widget" />
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cell)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="ComboBox">
              <scope doc="" name="widgetClass" />
              <scope doc="" ilk="function" name="getWidgetProps" signature="getWidgetProps(inDatum)">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope doc="" ilk="function" name="getValue" />
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cell)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="DateTextBox">
              <scope doc="" name="widgetClass" />
              <scope doc="" ilk="function" name="setValue" signature="setValue(inRowIndex,inValue)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope doc="" ilk="function" name="getWidgetProps" signature="getWidgetProps(inDatum)">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cell)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="CheckBox">
              <scope doc="" name="widgetClass" />
              <scope doc="" ilk="function" name="getValue" />
              <scope doc="" ilk="function" name="setValue" signature="setValue(inRowIndex,inValue)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope doc="" ilk="function" name="sizeWidget" signature="sizeWidget(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cell)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="Editor">
              <scope doc="" name="widgetClass" />
              <scope doc="" ilk="function" name="getWidgetProps" signature="getWidgetProps(inDatum)">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope doc="" ilk="function" name="createWidget" signature="createWidget(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="formatNode" signature="formatNode(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="populateEditor" />
              <variable doc="" name="content" />
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(node,cell)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="cell" />
              </scope>
            </scope>
            <variable citdl="Object" doc="" name="dijit" />
          </variable>
          <variable citdl="Object" doc="" name="compat">
            <variable citdl="Object" doc="" name="Grid" />
            <variable citdl="Object" doc="" name="VirtualGrid" />
            <variable attributes="private" citdl="Object" doc="" name="_data">
              <variable citdl="Object" doc="" name="dijitEditors" />
              <variable citdl="Object" doc="" name="editors" />
              <variable citdl="Object" doc="" name="fields" />
              <variable citdl="Object" doc="" name="model" />
            </variable>
            <variable attributes="private" citdl="Object" doc="" name="_grid">
              <variable citdl="Object" doc="" name="builder" />
              <variable citdl="Object" doc="" name="cell" />
              <variable citdl="Object" doc="" name="drag" />
              <variable citdl="Object" doc="" name="edit" />
              <variable citdl="Object" doc="" name="focus" />
              <variable citdl="Object" doc="" name="layout" />
              <variable citdl="Object" doc="" name="lib" />
              <variable citdl="Object" doc="" name="publicEvents" />
              <variable citdl="Object" doc="" name="rowbar" />
              <variable citdl="Object" doc="" name="rows" />
              <variable citdl="Object" doc="" name="scroller" />
              <variable citdl="Object" doc="" name="selection" />
              <variable citdl="Object" doc="" name="view" />
              <variable citdl="Object" doc="" name="views" />
            </variable>
          </variable>
          <scope name="editors">
            <scope doc="" ilk="function" name="Dijit" signature="Dijit(inCell)">
              <variable ilk="argument" name="inCell" />
              <variable doc="" name="editorClass" />
              <scope doc="" ilk="function" name="format" signature="format(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="getValue" signature="getValue(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="setValue" signature="setValue(inRowIndex,inValue)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope doc="" ilk="function" name="getEditorProps" signature="getEditorProps(inDatum)">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope doc="" ilk="function" name="createEditor" signature="createEditor(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="attachEditor" signature="attachEditor(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="formatNode" signature="formatNode(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="sizeEditor" signature="sizeEditor(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="focus" signature="focus(inRowIndex,inNode)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inNode" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_finish" signature="_finish(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <variable doc="" name="editor" />
            </scope>
            <scope doc="" ilk="function" name="ComboBox">
              <scope doc="" name="editorClass" />
              <scope doc="" ilk="function" name="getEditorProps" signature="getEditorProps(inDatum)">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope doc="" ilk="function" name="getValue" />
            </scope>
            <scope doc="" ilk="function" name="DateTextBox">
              <scope doc="" name="editorClass" />
              <scope doc="" ilk="function" name="setValue" signature="setValue(inRowIndex,inValue)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope doc="" ilk="function" name="getEditorProps" signature="getEditorProps(inDatum)">
                <variable ilk="argument" name="inDatum" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="CheckBox">
              <scope doc="" name="editorClass" />
              <scope doc="" ilk="function" name="getValue" />
              <scope doc="" ilk="function" name="setValue" signature="setValue(inRowIndex,inValue)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inValue" />
              </scope>
              <scope doc="" ilk="function" name="sizeEditor" signature="sizeEditor(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
            </scope>
            <scope doc="" ilk="function" name="Editor">
              <scope doc="" name="editorClass" />
              <scope doc="" ilk="function" name="getEditorProps" signature="getEditorProps(inDatum)">
                <variable ilk="argument" name="inDatum" />
              </scope>
              <scope doc="" ilk="function" name="createEditor" signature="createEditor(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="formatNode" signature="formatNode(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="populateEditor" />
              <variable doc="" name="content" />
            </scope>
            <scope doc="base grid editor class. Other grid editors should inherited from this class." ilk="function" name="Base" signature="Base(inCell)">
              <variable ilk="argument" name="inCell" />
              <scope attributes="private" doc="" name="_valueProp" />
              <variable attributes="private" doc="" name="_formatPending" />
              <scope doc="formats the cell for editing" ilk="function" name="format" signature="format(inDatum,inRowIndex)">
                <variable citdl="anything" doc="cell data to edit" ilk="argument" name="inDatum" />
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
                <variable name="return_summary" />
              </scope>
              <scope doc="" ilk="function" name="needFormatNode" signature="needFormatNode(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="cancelFormatNode" />
              <scope attributes="private" doc="" ilk="function" name="_formatNode" signature="_formatNode(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="getNode" signature="getNode(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="format the editing dom node. Use when editor is a widget." ilk="function" name="formatNode" signature="formatNode(inNode,inDatum,inRowIndex)">
                <variable citdl="dom" doc="node dom node for the editor" ilk="argument" name="inNode" />
                <variable citdl="anything" doc="cell data to edit" ilk="argument" name="inDatum" />
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="dispatchEvent" signature="dispatchEvent(m,e)">
                <variable ilk="argument" name="m" />
                <variable ilk="argument" name="e" />
              </scope>
              <scope doc="returns value entered into editor" ilk="function" name="getValue" signature="getValue(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
                <variable name="return_summary" />
              </scope>
              <scope doc="set the value of the grid editor" ilk="function" name="setValue" signature="setValue(inRowIndex,inValue)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
                <variable citdl="anything" doc="value of editor" ilk="argument" name="inValue" />
              </scope>
              <scope doc="focus the grid editor" ilk="function" name="focus" signature="focus(inRowIndex,inNode)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
                <variable citdl="dom" doc="node editor node" ilk="argument" name="inNode" />
              </scope>
              <scope doc="save editor state" ilk="function" name="save" signature="save(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="restore editor state" ilk="function" name="restore" signature="restore(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <scope attributes="private" doc="called when editing is completed to clean up editor" ilk="function" name="_finish" signature="_finish(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="apply edit from cell editor" ilk="function" name="apply" signature="apply(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="cancel cell edit" ilk="function" name="cancel" signature="cancel(inRowIndex)">
                <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              </scope>
              <variable doc="" name="value" />
              <variable doc="" name="cell" />
            </scope>
            <scope doc="" ilk="function" name="Input" signature="Input(inCell)">
              <variable ilk="argument" name="inCell" />
              <variable citdl="object" doc="optional regex for disallowing keypresses" name="keyFilter" />
              <scope doc="" ilk="function" name="format" signature="format(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="formatNode" signature="formatNode(inNode,inDatum,inRowIndex)">
                <variable ilk="argument" name="inNode" />
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="doKey" signature="doKey(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_finish" signature="_finish(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
            </scope>
            <scope doc="grid cell editor that provides a standard select options: text of each item values: value for each item returnIndex: editor returns only the index of the selected option and not the value" ilk="function" name="Select" signature="Select(inCell)">
              <variable ilk="argument" name="inCell" />
              <scope doc="" ilk="function" name="format" signature="format(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="getValue" signature="getValue(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <variable doc="" name="options" />
              <variable doc="" name="values" />
            </scope>
            <scope doc="grid cell editor that is always on, regardless of grid editing state" ilk="function" name="AlwaysOn">
              <scope citdl="boolean" doc="flag to use editor to format grid cell regardless of editing state." name="alwaysOn" />
              <scope attributes="private" doc="" ilk="function" name="_formatNode" signature="_formatNode(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="applyStaticValue" signature="applyStaticValue(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
            </scope>
            <scope doc="grid cell editor that provides a standard checkbox that is always on" ilk="function" name="Bool">
              <scope attributes="private" doc="" name="_valueProp" />
              <scope doc="" ilk="function" name="format" signature="format(inDatum,inRowIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="doclick" signature="doclick(e)">
                <variable ilk="argument" name="e" />
              </scope>
            </scope>
            <scope doc="" name="base" />
            <scope doc="" name="input" />
            <scope doc="" name="select" />
            <scope doc="" name="alwaysOn" />
            <scope doc="" name="bool" />
          </scope>
          <scope name="data">
            <scope doc="basic collection class that provides a default value for items" ilk="function" name="Mixer">
              <scope doc="" ilk="function" name="count" />
              <scope doc="" ilk="function" name="clear" />
              <scope doc="" ilk="function" name="build" signature="build(inIndex)">
                <variable ilk="argument" name="inIndex" />
              </scope>
              <scope doc="" ilk="function" name="getDefault" />
              <scope doc="" ilk="function" name="setDefault" signature="setDefault(inField)">
                <variable citdl="[, inField2, ... inFiel" ilk="argument" name="inField">
                  <scope name="repeating" />
                </variable>
              </scope>
              <scope doc="" ilk="function" name="get" signature="get(inIndex)">
                <variable ilk="argument" name="inIndex" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_set" signature="_set(inIndex,inField)">
                <variable ilk="argument" name="inIndex" />
                <variable citdl="[, inField2, ... inFiel" ilk="argument" name="inField">
                  <scope name="repeating" />
                </variable>
              </scope>
              <scope doc="" ilk="function" name="set" />
              <scope doc="" ilk="function" name="insert" signature="insert(inIndex,inProps)">
                <variable ilk="argument" name="inIndex" />
                <variable ilk="argument" name="inProps" />
              </scope>
              <scope doc="" ilk="function" name="remove" signature="remove(inIndex)">
                <variable ilk="argument" name="inIndex" />
              </scope>
              <scope doc="" ilk="function" name="swap" signature="swap(inIndexA,inIndexB)">
                <variable ilk="argument" name="inIndexA" />
                <variable ilk="argument" name="inIndexB" />
              </scope>
              <scope doc="" ilk="function" name="move" signature="move(inFromIndex,inToIndex)">
                <variable ilk="argument" name="inFromIndex" />
                <variable ilk="argument" name="inToIndex" />
              </scope>
              <variable doc="" name="values" />
              <variable doc="" name="defaultValue" />
            </scope>
            <scope doc="" ilk="function" name="Field" signature="Field(inName)">
              <variable ilk="argument" name="inName" />
              <scope doc="" name="na" />
              <variable doc="" name="name" />
              <variable doc="" name="compare" />
            </scope>
            <scope doc="" ilk="function" name="Fields" signature="Fields(inFieldClass)">
              <variable ilk="argument" name="inFieldClass" />
              <scope doc="" ilk="function" name="indexOf" signature="indexOf(inKey)">
                <variable ilk="argument" name="inKey" />
              </scope>
              <variable doc="" name="defaultValue" />
            </scope>
            <scope doc="" ilk="function" name="compare" signature="compare(a,b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope doc="Base abstract grid data model. Makes no assumptions about the structure of grid data." ilk="function" name="Model" signature="Model(inFields,inData)">
              <variable ilk="argument" name="inFields" />
              <variable ilk="argument" name="inData" />
              <scope doc="" name="count" />
              <scope doc="" name="updating" />
              <scope doc="" ilk="function" name="observer" signature="observer(inObserver,inPrefix)">
                <variable ilk="argument" name="inObserver" />
                <variable ilk="argument" name="inPrefix" />
              </scope>
              <scope doc="" ilk="function" name="notObserver" signature="notObserver(inObserver)">
                <variable ilk="argument" name="inObserver" />
              </scope>
              <scope doc="" ilk="function" name="notify" signature="notify(inMsg,inArgs)">
                <variable ilk="argument" name="inMsg" />
                <variable ilk="argument" name="inArgs" />
              </scope>
              <scope doc="" ilk="function" name="clear" />
              <scope doc="" ilk="function" name="beginUpdate" />
              <scope doc="" ilk="function" name="endUpdate" />
              <scope doc="" ilk="function" name="clearData" />
              <scope doc="" ilk="function" name="change" />
              <scope doc="" ilk="function" name="insertion" />
              <scope doc="" ilk="function" name="removal" />
              <scope doc="" ilk="function" name="insert" signature="insert(inData)">
                <variable citdl=", index" ilk="argument" name="inData" />
              </scope>
              <scope doc="" ilk="function" name="remove" signature="remove(inData)">
                <variable citdl=", index" ilk="argument" name="inData" />
              </scope>
              <scope doc="" ilk="function" name="canSort" />
              <scope doc="" ilk="function" name="generateComparator" signature="generateComparator(inCompare,inField,inTrueForAscend,inSubCompare)">
                <variable ilk="argument" name="inCompare" />
                <variable ilk="argument" name="inField" />
                <variable ilk="argument" name="inTrueForAscend" />
                <variable ilk="argument" name="inSubCompare" />
              </scope>
              <scope doc="" ilk="function" name="makeComparator" signature="makeComparator(inIndices)">
                <variable ilk="argument" name="inIndices" />
              </scope>
              <scope doc="" name="sort" />
              <scope doc="" name="dummy" />
              <variable doc="" name="observers" />
              <variable doc="" name="fields" />
            </scope>
            <scope doc="" ilk="function" name="Rows">
              <scope doc="" ilk="function" name="allChange" />
              <scope doc="" ilk="function" name="rowChange" />
              <scope doc="" ilk="function" name="datumChange" />
              <scope doc="" ilk="function" name="beginModifyRow" signature="beginModifyRow(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="endModifyRow" signature="endModifyRow(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="cancelModifyRow" signature="cancelModifyRow(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
            </scope>
            <scope doc="Basic grid data model for static data in the form of an array of rows that are arrays of cell data" ilk="function" name="Table">
              <variable doc="" name="colCount" />
              <variable doc="" name="data" />
              <variable doc="" name="cache" />
              <scope doc="" ilk="function" name="measure" />
              <scope doc="" ilk="function" name="getRowCount" />
              <scope doc="" ilk="function" name="getColCount" />
              <scope doc="" ilk="function" name="badIndex" signature="badIndex(inCaller,inDescriptor)">
                <variable ilk="argument" name="inCaller" />
                <variable ilk="argument" name="inDescriptor" />
              </scope>
              <scope doc="" ilk="function" name="isGoodIndex" signature="isGoodIndex(inRowIndex,inColIndex)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope doc="" ilk="function" name="getRow" signature="getRow(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="copyRow" signature="copyRow(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="getDatum" signature="getDatum(inRowIndex,inColIndex)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope doc="" ilk="function" name="get" />
              <scope doc="" ilk="function" name="setData" signature="setData(inData)">
                <variable ilk="argument" name="inData" />
              </scope>
              <scope doc="" ilk="function" name="setRow" signature="setRow(inData,inRowIndex)">
                <variable ilk="argument" name="inData" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="setDatum" signature="setDatum(inDatum,inRowIndex,inColIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope doc="" ilk="function" name="set" />
              <scope doc="" ilk="function" name="setRows" signature="setRows(inData,inRowIndex)">
                <variable ilk="argument" name="inData" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="update" signature="update(inOldData,inNewData,inRowIndex)">
                <variable ilk="argument" name="inOldData" />
                <variable ilk="argument" name="inNewData" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_insert" signature="_insert(inData,inRowIndex)">
                <variable ilk="argument" name="inData" />
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_remove" signature="_remove(inKeys)">
                <variable ilk="argument" name="inKeys" />
              </scope>
              <scope doc="" ilk="function" name="sort" />
              <scope doc="" ilk="function" name="swap" signature="swap(inIndexA,inIndexB)">
                <variable ilk="argument" name="inIndexA" />
                <variable ilk="argument" name="inIndexB" />
              </scope>
              <scope doc="" name="dummy" />
              <variable doc="" name="count" />
            </scope>
            <scope doc="" ilk="function" name="Objects" signature="Objects(inFields,inData,inKey)">
              <variable ilk="argument" name="inFields" />
              <variable ilk="argument" name="inData" />
              <variable ilk="argument" name="inKey" />
              <scope doc="" ilk="function" name="allChange" />
              <scope doc="" ilk="function" name="autoAssignFields" />
              <scope doc="" ilk="function" name="setData" signature="setData(inData)">
                <variable ilk="argument" name="inData" />
              </scope>
              <scope doc="" ilk="function" name="getDatum" signature="getDatum(inRowIndex,inColIndex)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <variable doc="" name="data" />
            </scope>
            <scope doc="Grid data model for dynamic data such as data retrieved from a server. Retrieves data automatically when requested and provides notification when data is received" ilk="function" name="Dynamic">
              <variable doc="" name="page" />
              <variable doc="" name="pages" />
              <scope doc="" name="rowsPerPage" />
              <variable doc="" name="requests" />
              <variable doc="" name="bop" />
              <variable doc="" name="eop" />
              <scope doc="" ilk="function" name="clearData" />
              <scope doc="" ilk="function" name="getRowCount" />
              <scope doc="" ilk="function" name="getColCount" />
              <scope doc="" ilk="function" name="setRowCount" signature="setRowCount(inCount)">
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope doc="" ilk="function" name="requestsPending" signature="requestsPending(inBoolean)">
                <variable ilk="argument" name="inBoolean" />
              </scope>
              <scope doc="" ilk="function" name="rowToPage" signature="rowToPage(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="pageToRow" signature="pageToRow(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="stub. Fill in to perform actual data row fetching logic. The returning logic must provide the data back to the system via setRow" ilk="function" name="requestRows" signature="requestRows(inRowIndex,inCount)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope doc="" ilk="function" name="rowsProvided" signature="rowsProvided(inRowIndex,inCount)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope doc="" ilk="function" name="requestPage" signature="requestPage(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="needPage" signature="needPage(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="preparePage" signature="preparePage(inRowIndex,inColIndex)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope doc="" ilk="function" name="isRowLoaded" signature="isRowLoaded(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="removePages" signature="removePages(inRowIndexes)">
                <variable ilk="argument" name="inRowIndexes" />
              </scope>
              <scope doc="" ilk="function" name="remove" signature="remove(inRowIndexes)">
                <variable ilk="argument" name="inRowIndexes" />
              </scope>
              <scope doc="" ilk="function" name="getRow" signature="getRow(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="getDatum" signature="getDatum(inRowIndex,inColIndex)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope doc="" ilk="function" name="setDatum" signature="setDatum(inDatum,inRowIndex,inColIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope doc="" ilk="function" name="canSort" />
              <variable doc="" name="count" />
            </scope>
            <scope doc="A grid data model for dynamic data retreived from a store which implements the dojo.data API set. Retrieves data automatically when requested and provides notification when data is received" ilk="function" name="DojoData" signature="DojoData(inFields,inData,args)">
              <variable ilk="argument" name="inFields" />
              <variable ilk="argument" name="inData" />
              <variable ilk="argument" name="args" />
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(args,node)">
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="node" />
              </scope>
              <variable citdl="Object" doc="" name="query">
                <scope doc="" name="name" />
              </variable>
              <variable doc="" name="store" />
              <variable attributes="private" doc="" name="_currentlyProcessing" />
              <variable attributes="private" doc="" name="_canNotify" />
              <variable attributes="private" doc="" name="_canWrite" />
              <variable attributes="private" doc="" name="_canIdentify" />
              <variable attributes="private" citdl="Object" doc="" name="_rowIdentities" />
              <scope doc="" name="clientSort" />
              <variable doc="" name="sortFields" />
              <scope doc="" name="queryOptions" />
              <scope doc="" ilk="function" name="setData" signature="setData(inData)">
                <variable ilk="argument" name="inData" />
              </scope>
              <scope doc="" ilk="function" name="setRowCount" signature="setRowCount(inCount)">
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope doc="" ilk="function" name="beginReturn" signature="beginReturn(inCount)">
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_setupFields" signature="_setupFields(dataItem)">
                <variable ilk="argument" name="dataItem" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_getRowFromItem" signature="_getRowFromItem(item)">
                <variable ilk="argument" name="item" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_createRow" signature="_createRow(item)">
                <variable ilk="argument" name="item" />
              </scope>
              <scope doc="" ilk="function" name="processRows" signature="processRows(items,request)">
                <variable ilk="argument" name="items" />
                <variable ilk="argument" name="request" />
              </scope>
              <scope doc="" ilk="function" name="requestRows" signature="requestRows(inRowIndex,inCount)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inCount" />
              </scope>
              <scope doc="" ilk="function" name="getDatum" signature="getDatum(inRowIndex,inColIndex)">
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope doc="" ilk="function" name="setDatum" signature="setDatum(inDatum,inRowIndex,inColIndex)">
                <variable ilk="argument" name="inDatum" />
                <variable ilk="argument" name="inRowIndex" />
                <variable ilk="argument" name="inColIndex" />
              </scope>
              <scope doc="" ilk="function" name="copyRow" signature="copyRow(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_attrCompare" signature="_attrCompare(cache,data)">
                <variable ilk="argument" name="cache" />
                <variable ilk="argument" name="data" />
              </scope>
              <scope doc="" ilk="function" name="endModifyRow" signature="endModifyRow(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="cancelModifyRow" signature="cancelModifyRow(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_setRowId" signature="_setRowId(item,offset,idx)">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="offset" />
                <variable ilk="argument" name="idx" />
              </scope>
              <scope attributes="private" doc="Function determine the row index for a particular item" ilk="function" name="_getRowId" signature="_getRowId(item,isNotItem)">
                <variable citdl="The" doc="store item to examine to determine row index." ilk="argument" name="item" />
                <variable citdl="Boolean" doc="flag to indicate if the item passed is a store item or not." ilk="argument" name="isNotItem" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_storeDatumChange" signature="_storeDatumChange(item,attr,oldVal,newVal)">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="attr" />
                <variable ilk="argument" name="oldVal" />
                <variable ilk="argument" name="newVal" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_storeDatumDelete" signature="_storeDatumDelete(item)">
                <variable ilk="argument" name="item" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_storeDatumNew" signature="_storeDatumNew(item)">
                <variable ilk="argument" name="item" />
              </scope>
              <scope doc="" ilk="function" name="insert" signature="insert(item,index)">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="index" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_insertItem" signature="_insertItem(storeItem,index)">
                <variable ilk="argument" name="storeItem" />
                <variable ilk="argument" name="index" />
              </scope>
              <scope doc="" ilk="function" name="datumChange" signature="datumChange(value,rowIdx,colIdx)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="rowIdx" />
                <variable ilk="argument" name="colIdx" />
              </scope>
              <scope doc="" ilk="function" name="insertion" />
              <scope doc="" ilk="function" name="removal" />
              <scope doc="Function to remove a set of items from the store based on the row index." ilk="function" name="remove" signature="remove(inRowIndexes)">
                <variable citdl="An" doc="array of row indexes from the grid to remove from the store. Call delete on the store" ilk="argument" name="inRowIndexes" />
              </scope>
              <scope attributes="private" doc="Function to remove a set of items from the store based on the row index." ilk="function" name="_removeItems" signature="_removeItems(inRowIndexes)">
                <variable citdl="array" doc="An array of row indexes from the grid to remove from the store." ilk="argument" name="inRowIndexes" />
              </scope>
              <scope doc="" ilk="function" name="canSort" />
              <scope doc="" ilk="function" name="sort" signature="sort(colIndex)">
                <variable ilk="argument" name="colIndex" />
              </scope>
              <scope doc="Function to cause the model to re-query the store and rebuild the current viewport." ilk="function" name="refresh" />
              <scope doc="" ilk="function" name="clearData" signature="clearData(keepStore)">
                <variable citdl="boolean" ilk="argument" name="keepStore" />
              </scope>
              <scope doc="Hook function to trap error messages from the store and emit them. Intended for connecting to and handling the error object or at least reporting it." ilk="function" name="processError" signature="processError(error,request)">
                <variable citdl="The" doc="error object returned by the store when a problem occurred." ilk="argument" name="error" />
                <variable citdl="The" doc="request object that caused the error." ilk="argument" name="request" />
              </scope>
              <variable doc="" name="data" />
              <variable doc="" name="count" />
              <scope name="fields">
                <variable attributes="private" doc="" name="_nameMaps" />
              </scope>
              <variable attributes="private" doc="" name="_disableNew" />
              <variable doc="" name="pages" />
              <variable doc="" name="bop" />
            </scope>
            <scope doc="" name="table" />
            <scope doc="" name="dynamic" />
          </scope>
          <scope doc="Base class to produce html for grid content. Also provide event decoration, providing grid related information inside the event object passed to grid events." ilk="function" name="Builder" signature="Builder(inView)">
            <variable ilk="argument" name="inView" />
            <variable doc="" name="view" />
            <scope attributes="private" doc="" name="_table" />
            <scope attributes="private" doc="" ilk="function" name="generateCellMarkup" returns="Array" signature="generateCellMarkup(inCell,inMoreStyles,inMoreClasses,isHeader)">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inMoreStyles" />
              <variable ilk="argument" name="inMoreClasses" />
              <variable ilk="argument" name="isHeader" />
            </scope>
            <scope doc="" ilk="function" name="isCellNode" signature="isCellNode(inNode)">
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope doc="" ilk="function" name="getCellNodeIndex" signature="getCellNodeIndex(inCellNode)">
              <variable ilk="argument" name="inCellNode" />
            </scope>
            <scope doc="" ilk="function" name="getCellNode" signature="getCellNode(inRowNode,inCellIndex)">
              <variable ilk="argument" name="inRowNode" />
              <variable ilk="argument" name="inCellIndex" />
            </scope>
            <scope doc="" ilk="function" name="findCellTarget" signature="findCellTarget(inSourceNode,inTopNode)">
              <variable ilk="argument" name="inSourceNode" />
              <variable ilk="argument" name="inTopNode" />
            </scope>
            <scope doc="" ilk="function" name="baseDecorateEvent" signature="baseDecorateEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="findTarget" signature="findTarget(inSource,inTag)">
              <variable ilk="argument" name="inSource" />
              <variable ilk="argument" name="inTag" />
            </scope>
            <scope doc="" ilk="function" name="findRowTarget" signature="findRowTarget(inSource)">
              <variable ilk="argument" name="inSource" />
            </scope>
            <scope doc="" ilk="function" name="isIntraNodeEvent" signature="isIntraNodeEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="isIntraRowEvent" signature="isIntraRowEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="dispatchEvent" signature="dispatchEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="domouseover" signature="domouseover(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="domouseout" signature="domouseout(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="domousedown" signature="domousedown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable doc="" name="lastOverCellNode" />
            <variable doc="" name="grid" />
          </scope>
          <scope doc="Produces html for grid data content. Owned by grid and used internally for rendering data. Override to implement custom rendering." ilk="function" name="contentBuilder">
            <scope doc="" ilk="function" name="update" />
            <scope doc="" ilk="function" name="prepareHtml" />
            <scope attributes="private" doc="" ilk="function" name="generateHtml" returns="String" signature="generateHtml(inDataIndex,inRowIndex)">
              <variable ilk="argument" name="inDataIndex" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="decorateEvent" returns="Boolean" signature="decorateEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope doc="Produces html for grid header content. Owned by grid and used internally for rendering data. Override to implement custom rendering." ilk="function" name="headerBuilder">
            <variable doc="" name="bogusClickTime" />
            <scope doc="" name="overResizeWidth" />
            <scope doc="" name="minColWidth" />
            <scope attributes="private" doc="" name="_table" />
            <scope doc="" ilk="function" name="update" />
            <scope doc="" ilk="function" name="generateHtml" signature="generateHtml(inGetValue,inValue)">
              <variable ilk="argument" name="inGetValue" />
              <variable ilk="argument" name="inValue" />
            </scope>
            <scope doc="" ilk="function" name="getCellX" signature="getCellX(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="decorateEvent" signature="decorateEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="prepareResize" signature="prepareResize(e,mod)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="mod" />
            </scope>
            <scope doc="" ilk="function" name="canResize" signature="canResize(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="overLeftResizeArea" signature="overLeftResizeArea(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="overRightResizeArea" signature="overRightResizeArea(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="domousemove" returns="Array|String|Boolean" signature="domousemove(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="domousedown" signature="domousedown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doclick" signature="doclick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="beginColumnResize" signature="beginColumnResize(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="doResizeColumn" signature="doResizeColumn(inDrag,inEvent)">
              <variable ilk="argument" name="inDrag" />
              <variable ilk="argument" name="inEvent" />
            </scope>
            <scope doc="" ilk="function" name="endResizeColumn" signature="endResizeColumn(inDrag)">
              <variable ilk="argument" name="inDrag" />
            </scope>
            <variable doc="" name="tableMap" />
          </scope>
          <scope doc="Maps an html table into a structure parsable for information about cell row and col spanning. Used by headerBuilder" ilk="function" name="tableMap" signature="tableMap(inRows)">
            <variable ilk="argument" name="inRows" />
            <variable doc="" name="map" />
            <scope attributes="private" doc="" ilk="function" name="mapRows" returns="Array|String|Boolean" signature="mapRows(inRows)">
              <variable ilk="argument" name="inRows" />
            </scope>
            <scope doc="" ilk="function" name="dumpMap" />
            <scope doc="Find node&apos;s map coords by it&apos;s structure coords" ilk="function" name="getMapCoords" signature="getMapCoords(inRow,inCol)">
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inCol" />
            </scope>
            <scope doc="Find a node in inNode&apos;s table with the given structure coords" ilk="function" name="getNode" signature="getNode(inTable,inRow,inCol)">
              <variable ilk="argument" name="inTable" />
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inCol" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_findOverlappingNodes" signature="_findOverlappingNodes(inTable,inRow,inCol)">
              <variable ilk="argument" name="inTable" />
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inCol" />
            </scope>
            <scope doc="" ilk="function" name="findOverlappingNodes" signature="findOverlappingNodes(inNode)">
              <variable ilk="argument" name="inNode" />
            </scope>
          </scope>
          <scope doc="" name="rowIndexTag" />
          <scope doc="" name="gridViewTag" />
          <scope doc="Respresents a grid cell and contains information about column options and methods for retrieving cell related information. Each column in a grid layout has a cell object and most events and many methods provide access to these objects." ilk="function" name="cell" signature="cell(inProps)">
            <variable ilk="argument" name="inProps" />
            <scope doc="" name="styles" />
            <scope doc="provides the html for a given grid cell." ilk="function" name="format" signature="format(inRowIndex)">
              <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="gets the dom node for a given grid cell." ilk="function" name="getNode" signature="getNode(inRowIndex)">
              <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="" ilk="function" name="isFlex" />
            <scope doc="" ilk="function" name="applyEdit" signature="applyEdit(inValue,inRowIndex)">
              <variable ilk="argument" name="inValue" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="cancelEdit" signature="cancelEdit(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onEditBlur" signature="_onEditBlur(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="registerOnBlur" signature="registerOnBlur(inNode,inRowIndex)">
              <variable ilk="argument" name="inNode" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <variable doc="" name="editor" />
          </scope>
          <variable citdl="Object" doc="" name="drag" />
          <scope doc="Controls grid cell editing process. Owned by grid and used internally for editing." ilk="function" name="edit" signature="edit(inGrid)">
            <variable citdl="dojox.Grid" doc="The dojox.Grid this editor should be attached to" ilk="argument" name="inGrid" />
            <variable citdl="Object" doc="" name="info">
              <variable doc="" name="rowIndex" />
            </variable>
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="Invoke editing when cell is focused" ilk="function" name="cellFocus" signature="cellFocus(inCell,inRowIndex)">
              <variable citdl="cell" doc="object Grid cell object" ilk="argument" name="inCell" />
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="rowClick" signature="rowClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="styleRow" signature="styleRow(inRow)">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope doc="" ilk="function" name="dispatchEvent" signature="dispatchEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Indicates editing state of the grid." ilk="function" name="isEditing">
              <variable name="return_summary" />
            </scope>
            <scope doc="Indicates if the given cell is being edited." ilk="function" name="isEditCell" signature="isEditCell(inRowIndex,inCellIndex)">
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
              <variable citdl="Integer" doc="Grid cell index" ilk="argument" name="inCellIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Indicates if the given row is being edited." ilk="function" name="isEditRow" signature="isEditRow(inRowIndex)">
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Set the given cell to be edited" ilk="function" name="setEditCell" signature="setEditCell(inCell,inRowIndex)">
              <variable citdl="Object" doc="Grid cell object" ilk="argument" name="inCell" />
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_focusEditor" signature="_focusEditor(inCell,inRowIndex)">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="focusEditor" />
            <scope attributes="private" doc="" name="_boomerangWindow" />
            <scope attributes="private" doc="" ilk="function" name="_shouldCatchBoomerang" />
            <scope attributes="private" doc="" ilk="function" name="_boomerangFocus" />
            <scope attributes="private" doc="" ilk="function" name="_doCatchBoomerang" />
            <scope doc="" ilk="function" name="start" signature="start(inCell,inRowIndex,inEditing)">
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inEditing" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_editorDo" signature="_editorDo(inMethod)">
              <variable ilk="argument" name="inMethod" />
            </scope>
            <scope doc="" ilk="function" name="editorApply" />
            <scope doc="" ilk="function" name="editorCancel" />
            <scope doc="" ilk="function" name="applyCellEdit" signature="applyCellEdit(inValue,inCell,inRowIndex)">
              <variable ilk="argument" name="inValue" />
              <variable ilk="argument" name="inCell" />
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="applyRowEdit" />
            <scope doc="Apply a grid edit" ilk="function" name="apply" />
            <scope doc="Cancel a grid edit" ilk="function" name="cancel" />
            <scope doc="Save the grid editing state" ilk="function" name="save" signature="save(inRowIndex,inView)">
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
              <variable citdl="Object" doc="Grid view" ilk="argument" name="inView" />
            </scope>
            <scope doc="Restores the grid editing state" ilk="function" name="restore" signature="restore(inView,inRowIndex)">
              <variable citdl="Object" doc="Grid view" ilk="argument" name="inView" />
              <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
            </scope>
            <variable attributes="private" doc="" name="_catchBoomerang" />
            <variable doc="" name="grid" />
            <variable doc="" name="connections" />
          </scope>
          <scope doc="Controls grid cell focus. Owned by grid and used internally for focusing. Note: grid cell actually receives keyboard input only when cell is being edited." ilk="function" name="focus" signature="focus(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <variable doc="" name="tabbingOut" />
            <scope doc="" name="focusClass" />
            <variable doc="" name="focusView" />
            <scope doc="" ilk="function" name="initFocusView" />
            <scope doc="states if the given cell is focused" ilk="function" name="isFocusCell" signature="isFocusCell(inCell,inRowIndex)">
              <variable citdl="object" doc="grid cell object" ilk="argument" name="inCell" />
              <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="" ilk="function" name="isLastFocusCell" />
            <scope doc="" ilk="function" name="isFirstFocusCell" />
            <scope doc="" ilk="function" name="isNoFocusCell" />
            <scope attributes="private" doc="" ilk="function" name="_focusifyCellNode" signature="_focusifyCellNode(inBork)">
              <variable ilk="argument" name="inBork" />
            </scope>
            <scope doc="" ilk="function" name="scrollIntoView" />
            <scope doc="" ilk="function" name="styleRow" signature="styleRow(inRow)">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope doc="focuses the given grid cell" ilk="function" name="setFocusIndex" signature="setFocusIndex(inRowIndex,inCellIndex)">
              <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
              <variable citdl="int" doc="grid cell index" ilk="argument" name="inCellIndex" />
            </scope>
            <scope doc="focuses the given grid cell" ilk="function" name="setFocusCell" signature="setFocusCell(inCell,inRowIndex)">
              <variable citdl="object" doc="grid cell object" ilk="argument" name="inCell" />
              <variable citdl="int" doc="grid row index" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="focus next grid cell" ilk="function" name="next" />
            <scope doc="focus previous grid cell" ilk="function" name="previous" />
            <scope doc="focus grid cell based on position relative to current focus" ilk="function" name="move" signature="move(inRowDelta,inColDelta)">
              <variable citdl="int" doc="vertical distance from current focus" ilk="argument" name="inRowDelta" />
              <variable citdl="int" doc="horizontal distance from current focus" ilk="argument" name="inColDelta" />
            </scope>
            <scope doc="" ilk="function" name="previousKey" signature="previousKey(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="nextKey" signature="nextKey(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="tabOut" signature="tabOut(inFocusNode)">
              <variable ilk="argument" name="inFocusNode" />
            </scope>
            <scope doc="" ilk="function" name="focusGridView" />
            <scope doc="" ilk="function" name="focusGrid" signature="focusGrid(inSkipFocusCell)">
              <variable ilk="argument" name="inSkipFocusCell" />
            </scope>
            <scope doc="" ilk="function" name="doFocus" signature="doFocus(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable doc="" name="cell" />
            <variable doc="" name="rowIndex" />
            <variable doc="" name="grid" />
          </scope>
          <scope doc="Controls grid cell layout. Owned by grid and used internally." ilk="function" name="layout" signature="layout(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <variable doc="" name="cells" />
            <variable doc="" name="structure" />
            <scope doc="" name="defaultWidth" />
            <scope doc="" ilk="function" name="setStructure" signature="setStructure(inStructure)">
              <variable ilk="argument" name="inStructure" />
            </scope>
            <scope doc="" ilk="function" name="addViewDef" signature="addViewDef(inDef)">
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope doc="" ilk="function" name="addRowsDef" signature="addRowsDef(inDef)">
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope doc="" ilk="function" name="addRowDef" signature="addRowDef(inRowIndex,inDef)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inDef" />
            </scope>
            <scope doc="" ilk="function" name="addCellDef" signature="addCellDef(inRowIndex,inCellIndex,inDef)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inCellIndex" />
              <variable ilk="argument" name="inDef" />
            </scope>
            <variable doc="" name="fieldIndex" />
            <variable doc="" name="cellCount" />
            <variable attributes="private" doc="" name="_defaultCellProps" />
            <variable doc="" name="grid" />
          </scope>
          <variable citdl="Object" doc="" name="jobs">
            <scope doc="" ilk="function" name="cancel" signature="cancel(inHandle)">
              <variable ilk="argument" name="inHandle" />
            </scope>
            <scope doc="" name="jobs" />
            <scope doc="" ilk="function" name="job" signature="job(inName,inDelay,inJob)">
              <variable ilk="argument" name="inName" />
              <variable ilk="argument" name="inDelay" />
              <variable ilk="argument" name="inJob" />
            </scope>
            <scope doc="" ilk="function" name="cancelJob" signature="cancelJob(inName)">
              <variable ilk="argument" name="inName" />
            </scope>
          </variable>
          <scope doc="" name="na" />
          <scope doc="a null function?" ilk="function" name="nop" />
          <scope doc="" ilk="function" name="getTdIndex" signature="getTdIndex(td)">
            <variable ilk="argument" name="td" />
          </scope>
          <scope doc="" ilk="function" name="getTrIndex" signature="getTrIndex(tr)">
            <variable ilk="argument" name="tr" />
          </scope>
          <scope doc="" ilk="function" name="getTr" signature="getTr(rowOwner,index)">
            <variable ilk="argument" name="rowOwner" />
            <variable ilk="argument" name="index" />
          </scope>
          <scope doc="" ilk="function" name="getTd" signature="getTd(rowOwner,rowIndex,cellIndex)">
            <variable ilk="argument" name="rowOwner" />
            <variable ilk="argument" name="rowIndex" />
            <variable ilk="argument" name="cellIndex" />
          </scope>
          <scope doc="" ilk="function" name="findTable" signature="findTable(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope doc="" ilk="function" name="ascendDom" signature="ascendDom(inNode,inWhile)">
            <variable ilk="argument" name="inNode" />
            <variable ilk="argument" name="inWhile" />
          </scope>
          <scope doc="" ilk="function" name="makeNotTagName" signature="makeNotTagName(inTagName)">
            <variable ilk="argument" name="inTagName" />
          </scope>
          <scope doc="" ilk="function" name="fire" signature="fire(ob,ev,args)">
            <variable ilk="argument" name="ob" />
            <variable ilk="argument" name="ev" />
            <variable ilk="argument" name="args" />
          </scope>
          <scope doc="" ilk="function" name="setStyleText" signature="setStyleText(inNode,inStyleText)">
            <variable ilk="argument" name="inNode" />
            <variable ilk="argument" name="inStyleText" />
          </scope>
          <scope doc="" ilk="function" name="getStyleText" signature="getStyleText(inNode,inStyleText)">
            <variable ilk="argument" name="inNode" />
            <variable ilk="argument" name="inStyleText" />
          </scope>
          <scope doc="" ilk="function" name="setStyle" signature="setStyle(inElement,inStyle,inValue)">
            <variable ilk="argument" name="inElement" />
            <variable ilk="argument" name="inStyle" />
            <variable ilk="argument" name="inValue" />
          </scope>
          <scope doc="" ilk="function" name="setStyleHeightPx" signature="setStyleHeightPx(inElement,inHeight)">
            <variable ilk="argument" name="inElement" />
            <variable ilk="argument" name="inHeight" />
          </scope>
          <scope doc="" name="mouseEvents" />
          <scope doc="" name="keyEvents" />
          <scope doc="" ilk="function" name="funnelEvents" signature="funnelEvents(inNode,inObject,inMethod,inEvents)">
            <variable ilk="argument" name="inNode" />
            <variable ilk="argument" name="inObject" />
            <variable ilk="argument" name="inMethod" />
            <variable ilk="argument" name="inEvents" />
          </scope>
          <scope doc="" ilk="function" name="removeNode" signature="removeNode(inNode)">
            <variable ilk="argument" name="inNode" />
          </scope>
          <scope doc="" ilk="function" name="getScrollbarWidth">
            <variable attributes="private" doc="" name="_scrollBarWidth" />
          </scope>
          <scope doc="" ilk="function" name="getRef" signature="getRef(name,create,context)">
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="create" />
            <variable ilk="argument" name="context" />
          </scope>
          <scope doc="" ilk="function" name="getProp" signature="getProp(name,create,context)">
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="create" />
            <variable ilk="argument" name="context" />
          </scope>
          <scope doc="" ilk="function" name="indexInParent" signature="indexInParent(inNode)">
            <variable ilk="argument" name="inNode" />
          </scope>
          <scope doc="" ilk="function" name="cleanNode" signature="cleanNode(inNode)">
            <variable ilk="argument" name="inNode" />
          </scope>
          <scope doc="" ilk="function" name="getTagName" signature="getTagName(inNodeOrId)">
            <variable ilk="argument" name="inNodeOrId" />
          </scope>
          <scope doc="" ilk="function" name="nodeKids" signature="nodeKids(inNode,inTag)">
            <variable ilk="argument" name="inNode" />
            <variable ilk="argument" name="inTag" />
          </scope>
          <scope doc="" ilk="function" name="divkids" signature="divkids(inNode)">
            <variable ilk="argument" name="inNode" />
          </scope>
          <scope doc="" ilk="function" name="focusSelectNode" signature="focusSelectNode(inNode)">
            <variable ilk="argument" name="inNode" />
          </scope>
          <scope doc="" ilk="function" name="whenIdle" />
          <scope doc="" ilk="function" name="arrayCompare" signature="arrayCompare(inA,inB)">
            <variable ilk="argument" name="inA" />
            <variable ilk="argument" name="inB" />
          </scope>
          <scope doc="" ilk="function" name="arrayInsert" signature="arrayInsert(inArray,inIndex,inValue)">
            <variable ilk="argument" name="inArray" />
            <variable ilk="argument" name="inIndex" />
            <variable ilk="argument" name="inValue" />
          </scope>
          <scope doc="" ilk="function" name="arrayRemove" signature="arrayRemove(inArray,inIndex)">
            <variable ilk="argument" name="inArray" />
            <variable ilk="argument" name="inIndex" />
          </scope>
          <scope doc="" ilk="function" name="arraySwap" signature="arraySwap(inArray,inI,inJ)">
            <variable ilk="argument" name="inArray" />
            <variable ilk="argument" name="inI" />
            <variable ilk="argument" name="inJ" />
          </scope>
          <scope doc="" ilk="function" name="initTextSizePoll" signature="initTextSizePoll(inInterval)">
            <variable ilk="argument" name="inInterval" />
          </scope>
          <scope doc="" ilk="function" name="textSizeChanged" />
          <variable citdl="Object" doc="VirtualGrid mixin that provides default implementations for grid events." name="publicEvents">
            <scope citdl="String" doc="css class to apply to grid cells over which the cursor is placed." name="cellOverClass" />
            <scope doc="top level handler for Key Events" ilk="function" name="onKeyEvent" signature="onKeyEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Top level handler for Content events" ilk="function" name="onContentEvent" signature="onContentEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Top level handler for header events" ilk="function" name="onHeaderEvent" signature="onHeaderEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Perform row styling on a given row. Called whenever row styling is updated." ilk="function" name="onStyleRow" signature="onStyleRow(inRow)">
              <variable citdl="Object" doc="Object containing row state information: selected, true if the row is selcted; over: true of the mouse is over the row; odd: true if the row is odd. Use customClasses and customStyles to control row css classes and styles; both properties are strings." ilk="argument" name="inRow" />
            </scope>
            <scope doc="Grid key event handler. By default enter begins editing and applies edits, escape cancels and edit, tab, shift-tab, and arrow keys move grid cell focus." ilk="function" name="onKeyDown" signature="onKeyDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is over the grid." ilk="function" name="onMouseOver" signature="onMouseOver(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of the grid." ilk="function" name="onMouseOut" signature="onMouseOut(e)">
              <variable citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is down inside grid." ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is over any row (data or header)." ilk="function" name="onMouseOverRow" signature="onMouseOverRow(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of any row (data or header)." ilk="function" name="onMouseOutRow" signature="onMouseOutRow(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is down inside grid row" ilk="function" name="onMouseDownRow" signature="onMouseDownRow(e)">
              <variable citdl="Event" doc="Decorated event object that contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is over a cell." ilk="function" name="onCellMouseOver" signature="onCellMouseOver(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of a cell." ilk="function" name="onCellMouseOut" signature="onCellMouseOut(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is down in a header cell." ilk="function" name="onCellMouseDown" signature="onCellMouseDown(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a cell is clicked." ilk="function" name="onCellClick" signature="onCellClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a cell is double-clicked." ilk="function" name="onCellDblClick" signature="onCellDblClick(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a cell context menu is accessed via mouse right click." ilk="function" name="onCellContextMenu" signature="onCellContextMenu(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a cell receives focus." ilk="function" name="onCellFocus" signature="onCellFocus(inCell,inRowIndex)">
              <variable citdl="Object" doc="Cell object containing properties of the grid column." ilk="argument" name="inCell" />
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Event fired when a row is clicked." ilk="function" name="onRowClick" signature="onRowClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a row is double clicked." ilk="function" name="onRowDblClick" signature="onRowDblClick(e)">
              <variable citdl="Event" doc="decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves over a data row." ilk="function" name="onRowMouseOver" signature="onRowMouseOver(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of a data row." ilk="function" name="onRowMouseOut" signature="onRowMouseOut(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is down in a row." ilk="function" name="onRowMouseDown" signature="onRowMouseDown(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a row context menu is accessed via mouse right click." ilk="function" name="onRowContextMenu" signature="onRowContextMenu(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves over the grid header." ilk="function" name="onHeaderMouseOver" signature="onHeaderMouseOver(e)">
              <variable citdl="Event" doc="Decorated event object contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of the grid header." ilk="function" name="onHeaderMouseOut" signature="onHeaderMouseOut(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves over a header cell." ilk="function" name="onHeaderCellMouseOver" signature="onHeaderCellMouseOver(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse moves out of a header cell." ilk="function" name="onHeaderCellMouseOut" signature="onHeaderCellMouseOut(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when mouse is down in a header cell." ilk="function" name="onHeaderCellMouseDown" signature="onHeaderCellMouseDown(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when the grid header is clicked." ilk="function" name="onHeaderClick" signature="onHeaderClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a header cell is clicked." ilk="function" name="onHeaderCellClick" signature="onHeaderCellClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when the grid header is double clicked." ilk="function" name="onHeaderDblClick" signature="onHeaderDblClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a header cell is double clicked." ilk="function" name="onHeaderCellDblClick" signature="onHeaderCellDblClick(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when a header cell context menu is accessed via mouse right click." ilk="function" name="onHeaderCellContextMenu" signature="onHeaderCellContextMenu(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when the grid header context menu is accessed via mouse right click." ilk="function" name="onHeaderContextMenu" signature="onHeaderContextMenu(e)">
              <variable citdl="Event" doc="Decorated event object which contains reference to grid, cell, and rowIndex" ilk="argument" name="e" />
            </scope>
            <scope doc="Event fired when editing is started for a given grid cell" ilk="function" name="onStartEdit" signature="onStartEdit(inCell,inRowIndex)">
              <variable citdl="Object" doc="Cell object containing properties of the grid column." ilk="argument" name="inCell" />
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Event fired when editing is applied for a given grid cell" ilk="function" name="onApplyCellEdit" signature="onApplyCellEdit(inValue,inRowIndex,inFieldIndex)">
              <variable citdl="String" doc="Value from cell editor" ilk="argument" name="inValue" />
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
              <variable citdl="Integer" doc="Index in the grid&apos;s data model" ilk="argument" name="inFieldIndex" />
            </scope>
            <scope doc="Event fired when editing is cancelled for a given grid cell" ilk="function" name="onCancelEdit" signature="onCancelEdit(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Event fired when editing is applied for a given grid row" ilk="function" name="onApplyEdit" signature="onApplyEdit(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Event to determine if a grid row may be selected" ilk="function" name="onCanSelect" signature="onCanSelect(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Event to determine if a grid row may be deselected" ilk="function" name="onCanDeselect" signature="onCanDeselect(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Event fired when a grid row is selected" ilk="function" name="onSelected" signature="onSelected(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="Event fired when a grid row is deselected" ilk="function" name="onDeselected" signature="onDeselected(inRowIndex)">
              <variable citdl="Integer" doc="Index of the grid row" ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="onSelectionChanged" />
          </variable>
          <scope doc="" ilk="function" name="rows" signature="rows(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <scope doc="" name="linesToEms" />
            <scope doc="" name="defaultRowHeight" />
            <variable doc="" name="overRow" />
            <scope doc="" ilk="function" name="getHeight" signature="getHeight(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="getDefaultHeightPx" />
            <scope doc="" ilk="function" name="prepareStylingRow" signature="prepareStylingRow(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" ilk="function" name="styleRowNode" signature="styleRowNode(inRowIndex,inRowNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inRowNode" />
            </scope>
            <scope doc="" ilk="function" name="applyStyles" signature="applyStyles(inRow)">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope doc="" ilk="function" name="updateStyles" signature="updateStyles(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="setOverRow" signature="setOverRow(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="isOver" signature="isOver(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <variable doc="" name="grid" />
          </scope>
          <scope doc="virtual scroller class, makes no assumption about shape of items being scrolled" ilk="function" name="scroller">
            <scope doc="virtual scrollbox, abstract class Content must in /rows/ Rows are managed in contiguous sets called /pages/ There are a fixed # of rows per page The minimum rendered unit is a page" ilk="function" name="base">
              <variable doc="" name="rowCount" />
              <scope doc="" name="defaultRowHeight" />
              <variable doc="" name="keepRows" />
              <scope doc="" name="contentNode" />
              <scope doc="" name="scrollboxNode">
                <variable doc="" name="scrollTop" />
                <variable doc="" name="onscroll" />
              </scope>
              <variable doc="" name="defaultPageHeight" />
              <variable doc="" name="keepPages" />
              <variable doc="" name="pageCount" />
              <variable doc="" name="windowHeight" />
              <variable doc="" name="firstVisibleRow" />
              <variable doc="" name="lastVisibleRow" />
              <variable doc="" name="page" />
              <variable doc="" name="pageTop" />
              <scope doc="" ilk="function" name="init" signature="init(inRowCount,inKeepRows,inRowsPerPage)">
                <variable ilk="argument" name="inRowCount" />
                <variable ilk="argument" name="inKeepRows" />
                <variable ilk="argument" name="inRowsPerPage" />
              </scope>
              <scope doc="" ilk="function" name="setKeepInfo" signature="setKeepInfo(inKeepRows)">
                <variable ilk="argument" name="inKeepRows" />
              </scope>
              <scope doc="" ilk="function" name="invalidate" />
              <scope doc="" ilk="function" name="updateRowCount" signature="updateRowCount(inRowCount)">
                <variable ilk="argument" name="inRowCount" />
              </scope>
              <scope doc="" ilk="function" name="pageExists" signature="pageExists(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="measurePage" signature="measurePage(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="positionPage" signature="positionPage(inPageIndex,inPos)">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inPos" />
              </scope>
              <scope doc="" ilk="function" name="repositionPages" signature="repositionPages(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="installPage" signature="installPage(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="preparePage" signature="preparePage(inPageIndex,inPos,inReuseNode)">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inPos" />
                <variable ilk="argument" name="inReuseNode" />
              </scope>
              <scope doc="" ilk="function" name="renderPage" signature="renderPage(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="removePage" signature="removePage(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="pacify" signature="pacify(inShouldPacify)">
                <variable ilk="argument" name="inShouldPacify" />
              </scope>
              <variable doc="" name="pacifying" />
              <scope doc="" name="pacifyTicks" />
              <scope doc="" ilk="function" name="setPacifying" signature="setPacifying(inPacifying)">
                <variable ilk="argument" name="inPacifying" />
              </scope>
              <scope doc="" ilk="function" name="startPacify" />
              <scope doc="" ilk="function" name="doPacify" />
              <scope doc="" ilk="function" name="endPacify" />
              <scope doc="" ilk="function" name="resize" />
              <scope doc="" ilk="function" name="calcLastPageHeight" />
              <scope doc="" ilk="function" name="updateContentHeight" signature="updateContentHeight(inDh)">
                <variable ilk="argument" name="inDh" />
              </scope>
              <scope doc="" ilk="function" name="updatePageHeight" signature="updatePageHeight(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="rowHeightChanged" signature="rowHeightChanged(inRowIndex)">
                <variable ilk="argument" name="inRowIndex" />
              </scope>
              <scope doc="" ilk="function" name="invalidateNodes" />
              <scope doc="" ilk="function" name="createPageNode" />
              <scope doc="" ilk="function" name="getPageHeight" signature="getPageHeight(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="pushPage" signature="pushPage(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="popPage" />
              <scope doc="" ilk="function" name="findPage" signature="findPage(inTop)">
                <variable ilk="argument" name="inTop" />
              </scope>
              <scope doc="" ilk="function" name="buildPage" signature="buildPage(inPageIndex,inReuseNode,inPos)">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inReuseNode" />
                <variable ilk="argument" name="inPos" />
              </scope>
              <scope doc="" ilk="function" name="needPage" signature="needPage(inPageIndex,inPos)">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inPos" />
              </scope>
              <scope doc="" ilk="function" name="onscroll" />
              <scope doc="" ilk="function" name="scroll" signature="scroll(inTop)">
                <variable ilk="argument" name="inTop" />
              </scope>
              <scope doc="" ilk="function" name="getScrollBottom" signature="getScrollBottom(inTop)">
                <variable ilk="argument" name="inTop" />
              </scope>
              <scope doc="" ilk="function" name="processNodeEvent" signature="processNodeEvent(e,inNode)">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="inNode" />
              </scope>
              <scope doc="" ilk="function" name="processEvent" signature="processEvent(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope doc="" name="dummy" />
              <variable doc="" name="rowsPerPage" />
              <variable doc="" name="pageHeights" />
              <variable doc="" name="height" />
              <variable doc="" name="startPacifyTicks" />
              <variable doc="" name="stack" />
            </scope>
            <scope doc="" ilk="function" name="renderRow" signature="renderRow(inRowIndex,inPageNode)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inPageNode" />
            </scope>
            <scope doc="" ilk="function" name="removeRow" signature="removeRow(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="getDefaultNodes" />
            <scope doc="" ilk="function" name="getDefaultPageNode" signature="getDefaultPageNode(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="positionPageNode" signature="positionPageNode(inNode,inPos)">
              <variable ilk="argument" name="inNode" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope doc="" ilk="function" name="getPageNodePosition" signature="getPageNodePosition(inNode)">
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope doc="" ilk="function" name="repositionPageNodes" signature="repositionPageNodes(inPageIndex,inNodes)">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="invalidatePageNode" signature="invalidatePageNode(inPageIndex,inNodes)">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="preparePageNode" signature="preparePageNode(inPageIndex,inReusePageIndex,inNodes)">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inReusePageIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="pageExists" signature="pageExists(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="measurePage" signature="measurePage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="positionPage" signature="positionPage(inPageIndex,inPos)">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inPos" />
            </scope>
            <scope doc="" ilk="function" name="repositionPages" signature="repositionPages(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="preparePage" signature="preparePage(inPageIndex,inReuseNode)">
              <variable ilk="argument" name="inPageIndex" />
              <variable ilk="argument" name="inReuseNode" />
            </scope>
            <scope doc="" ilk="function" name="installPage" signature="installPage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="destroyPage" signature="destroyPage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="renderPage" signature="renderPage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="removePage" signature="removePage(inPageIndex)">
              <variable ilk="argument" name="inPageIndex" />
            </scope>
            <scope doc="" ilk="function" name="getPageRow" signature="getPageRow(inPage)">
              <variable ilk="argument" name="inPage" />
            </scope>
            <scope doc="" ilk="function" name="getLastPageRow" signature="getLastPageRow(inPage)">
              <variable ilk="argument" name="inPage" />
            </scope>
            <scope doc="" ilk="function" name="getFirstVisibleRowNodes" signature="getFirstVisibleRowNodes(inPage,inPageTop,inScrollTop,inNodes)">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inPageTop" />
              <variable ilk="argument" name="inScrollTop" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="getFirstVisibleRow" signature="getFirstVisibleRow(inPage,inPageTop,inScrollTop)">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inPageTop" />
              <variable ilk="argument" name="inScrollTop" />
            </scope>
            <scope doc="" ilk="function" name="getLastVisibleRowNodes" signature="getLastVisibleRowNodes(inPage,inBottom,inScrollBottom,inNodes)">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inBottom" />
              <variable ilk="argument" name="inScrollBottom" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="getLastVisibleRow" signature="getLastVisibleRow(inPage,inBottom,inScrollBottom)">
              <variable ilk="argument" name="inPage" />
              <variable ilk="argument" name="inBottom" />
              <variable ilk="argument" name="inScrollBottom" />
            </scope>
            <scope doc="" ilk="function" name="findTopRowForNodes" signature="findTopRowForNodes(inScrollTop,inNodes)">
              <variable ilk="argument" name="inScrollTop" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="findScrollTopForNodes" signature="findScrollTopForNodes(inRow,inNodes)">
              <variable ilk="argument" name="inRow" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="findTopRow" signature="findTopRow(inScrollTop)">
              <variable ilk="argument" name="inScrollTop" />
            </scope>
            <scope doc="" ilk="function" name="findScrollTop" signature="findScrollTop(inRow)">
              <variable ilk="argument" name="inRow" />
            </scope>
            <scope doc="" name="dummy" />
            <variable attributes="private" doc="" name="_defaultRowHeight" />
            <variable doc="" name="rowsPerPage" />
            <variable doc="" name="offset" />
            <variable doc="" name="pageTop" />
            <variable doc="" name="pageNodes" />
            <scope doc="Virtual scroller class that scrolls list of columns. Owned by grid and used internally for virtual scrolling." ilk="function" name="columns" signature="columns(inContentNodes)">
              <variable ilk="argument" name="inContentNodes" />
              <scope doc="" ilk="function" name="setContentNodes" signature="setContentNodes(inNodes)">
                <variable ilk="argument" name="inNodes" />
              </scope>
              <scope doc="" ilk="function" name="getDefaultNodes" />
              <scope doc="" ilk="function" name="scroll" signature="scroll(inTop)">
                <variable ilk="argument" name="inTop" />
              </scope>
              <scope doc="" ilk="function" name="resize" />
              <scope doc="" ilk="function" name="positionPage" signature="positionPage(inPageIndex,inPos)">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inPos" />
              </scope>
              <scope doc="" ilk="function" name="preparePage" signature="preparePage(inPageIndex,inReuseNode)">
                <variable ilk="argument" name="inPageIndex" />
                <variable ilk="argument" name="inReuseNode" />
              </scope>
              <scope doc="" ilk="function" name="installPage" signature="installPage(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="destroyPage" signature="destroyPage(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <scope doc="" ilk="function" name="renderPage" signature="renderPage(inPageIndex)">
                <variable ilk="argument" name="inPageIndex" />
              </scope>
              <variable doc="" name="contentNodes" />
              <variable doc="" name="colCount" />
              <variable doc="" name="pageNodes" />
              <variable doc="" name="windowHeight" />
            </scope>
          </scope>
          <scope doc="Manages row selection for grid. Owned by grid and used internally for selection. Override to implement custom selection." ilk="function" name="selection" signature="selection(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <scope doc="" name="multiSelect" />
            <variable doc="" name="selected" />
            <variable doc="" name="updating" />
            <variable doc="" name="selectedIndex" />
            <scope doc="" ilk="function" name="onCanSelect" signature="onCanSelect(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="onCanDeselect" signature="onCanDeselect(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="onSelected" signature="onSelected(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="onDeselected" signature="onDeselected(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="onChanging" />
            <scope doc="" ilk="function" name="onChanged" />
            <scope doc="" ilk="function" name="isSelected" signature="isSelected(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="getFirstSelected" />
            <scope doc="" ilk="function" name="getNextSelected" signature="getNextSelected(inPrev)">
              <variable ilk="argument" name="inPrev" />
            </scope>
            <scope doc="" ilk="function" name="getSelected" />
            <scope doc="" ilk="function" name="getSelectedCount" />
            <scope doc="" ilk="function" name="beginUpdate" />
            <scope doc="" ilk="function" name="endUpdate" />
            <scope doc="" ilk="function" name="select" signature="select(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="addToSelection" signature="addToSelection(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="deselect" signature="deselect(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="setSelected" signature="setSelected(inIndex,inSelect)">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inSelect" />
            </scope>
            <scope doc="" ilk="function" name="toggleSelect" signature="toggleSelect(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="insert" signature="insert(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="remove" signature="remove(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="unselectAll" signature="unselectAll(inExcept)">
              <variable ilk="argument" name="inExcept" />
            </scope>
            <scope doc="" ilk="function" name="shiftSelect" signature="shiftSelect(inFrom,inTo)">
              <variable ilk="argument" name="inFrom" />
              <variable ilk="argument" name="inTo" />
            </scope>
            <scope doc="" ilk="function" name="clickSelect" signature="clickSelect(inIndex,inCtrlKey,inShiftKey)">
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inCtrlKey" />
              <variable ilk="argument" name="inShiftKey" />
            </scope>
            <scope doc="" ilk="function" name="clickSelectEvent" signature="clickSelectEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="clear" />
            <variable doc="" name="grid" />
          </scope>
          <scope doc="A collection of grid views. Owned by grid and used internally for managing grid views." ilk="function" name="views" signature="views(inGrid)">
            <variable ilk="argument" name="inGrid" />
            <scope doc="" name="defaultWidth" />
            <variable doc="" name="views" />
            <scope doc="" ilk="function" name="resize" />
            <scope doc="" ilk="function" name="render" />
            <scope doc="" ilk="function" name="addView" signature="addView(inView)">
              <variable ilk="argument" name="inView" />
            </scope>
            <scope doc="" ilk="function" name="destroyViews" />
            <scope doc="" ilk="function" name="getContentNodes" />
            <scope doc="" ilk="function" name="forEach" signature="forEach(inCallback)">
              <variable ilk="argument" name="inCallback" />
            </scope>
            <scope doc="" ilk="function" name="onEach" signature="onEach(inMethod,inArgs)">
              <variable ilk="argument" name="inMethod" />
              <variable ilk="argument" name="inArgs" />
            </scope>
            <scope doc="" ilk="function" name="normalizeHeaderNodeHeight" />
            <scope doc="" ilk="function" name="normalizeRowNodeHeights" signature="normalizeRowNodeHeights(inRowNodes)">
              <variable ilk="argument" name="inRowNodes" />
            </scope>
            <scope doc="" ilk="function" name="resetHeaderNodeHeight" />
            <scope doc="" ilk="function" name="renormalizeRow" signature="renormalizeRow(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="getViewWidth" signature="getViewWidth(inIndex)">
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="measureHeader" />
            <scope doc="" ilk="function" name="measureContent" />
            <scope doc="" ilk="function" name="findClient" signature="findClient(inAutoWidth)">
              <variable ilk="argument" name="inAutoWidth" />
            </scope>
            <scope doc="" ilk="function" name="arrange" signature="arrange(l,w)">
              <variable ilk="argument" name="l" />
              <variable ilk="argument" name="w" />
            </scope>
            <scope doc="" ilk="function" name="renderRow" signature="renderRow(inRowIndex,inNodes)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inNodes" />
            </scope>
            <scope doc="" ilk="function" name="rowRemoved" signature="rowRemoved(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="updateRow" signature="updateRow(inRowIndex,inHeight)">
              <variable ilk="argument" name="inRowIndex" />
              <variable ilk="argument" name="inHeight" />
            </scope>
            <scope doc="" ilk="function" name="updateRowStyles" signature="updateRowStyles(inRowIndex)">
              <variable ilk="argument" name="inRowIndex" />
            </scope>
            <scope doc="" ilk="function" name="setScrollTop" signature="setScrollTop(inTop)">
              <variable ilk="argument" name="inTop" />
            </scope>
            <scope doc="Returns the first grid view with a scroll bar" ilk="function" name="getFirstScrollingView" />
            <variable doc="" name="grid" />
          </scope>
          <variable citdl="Object" doc="" name="util">
            <scope doc="" name="na" />
            <scope doc="" name="rowIndexTag" />
            <scope doc="" name="gridViewTag" />
            <scope doc="" name="mouseEvents" />
            <scope doc="" name="keyEvents" />
            <scope doc="" ilk="function" name="fire" signature="fire(ob,ev,args)">
              <variable ilk="argument" name="ob" />
              <variable ilk="argument" name="ev" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope doc="" ilk="function" name="setStyleHeightPx" signature="setStyleHeightPx(inElement,inHeight)">
              <variable ilk="argument" name="inElement" />
              <variable ilk="argument" name="inHeight" />
            </scope>
            <scope doc="" ilk="function" name="funnelEvents" signature="funnelEvents(inNode,inObject,inMethod,inEvents)">
              <variable ilk="argument" name="inNode" />
              <variable ilk="argument" name="inObject" />
              <variable ilk="argument" name="inMethod" />
              <variable ilk="argument" name="inEvents" />
            </scope>
            <scope doc="" ilk="function" name="removeNode" signature="removeNode(inNode)">
              <variable ilk="argument" name="inNode" />
            </scope>
            <scope doc="" ilk="function" name="arrayCompare" signature="arrayCompare(inA,inB)">
              <variable ilk="argument" name="inA" />
              <variable ilk="argument" name="inB" />
            </scope>
            <scope doc="" ilk="function" name="arrayInsert" signature="arrayInsert(inArray,inIndex,inValue)">
              <variable ilk="argument" name="inArray" />
              <variable ilk="argument" name="inIndex" />
              <variable ilk="argument" name="inValue" />
            </scope>
            <scope doc="" ilk="function" name="arrayRemove" signature="arrayRemove(inArray,inIndex)">
              <variable ilk="argument" name="inArray" />
              <variable ilk="argument" name="inIndex" />
            </scope>
            <scope doc="" ilk="function" name="arraySwap" signature="arraySwap(inArray,inI,inJ)">
              <variable ilk="argument" name="inArray" />
              <variable ilk="argument" name="inI" />
              <variable ilk="argument" name="inJ" />
            </scope>
          </variable>
        </variable>
        <scope doc="A grid widget with virtual scrolling, cell editing, complex rows, sorting, fixed columns, sizeable columns, etc." ilk="function" name="Grid">
          <variable citdl="string" doc="or object grid data model" name="model" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="" ilk="function" name="destroy" />
          <scope attributes="private" doc="" ilk="function" name="_structureChanged" />
          <scope attributes="private" doc="" ilk="function" name="_setModel" signature="_setModel(inModel)">
            <variable ilk="argument" name="inModel" />
          </scope>
          <scope doc="Set the grid&apos;s data model" ilk="function" name="setModel" signature="setModel(inModel)">
            <variable citdl="Object" doc="Model object, usually an instance of a dojox.grid.data.Model subclass" ilk="argument" name="inModel" />
          </scope>
          <scope doc="data socket (called in cell&apos;s context)" ilk="function" name="get" signature="get(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="" ilk="function" name="modelAllChange" />
          <scope doc="" ilk="function" name="modelBeginUpdate" />
          <scope doc="" ilk="function" name="modelEndUpdate" />
          <scope doc="" ilk="function" name="modelRowChange" signature="modelRowChange(inData,inRowIndex)">
            <variable ilk="argument" name="inData" />
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="" ilk="function" name="modelDatumChange" signature="modelDatumChange(inDatum,inRowIndex,inFieldIndex)">
            <variable ilk="argument" name="inDatum" />
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inFieldIndex" />
          </scope>
          <scope doc="" ilk="function" name="modelFieldsChange" />
          <scope doc="" ilk="function" name="modelInsertion" signature="modelInsertion(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="" ilk="function" name="modelRemoval" signature="modelRemoval(inKeys)">
            <variable ilk="argument" name="inKeys" />
          </scope>
          <scope doc="" ilk="function" name="getCellName" signature="getCellName(inCell)">
            <variable ilk="argument" name="inCell" />
          </scope>
          <scope doc="" ilk="function" name="indexCellFields" />
          <scope doc="Re-render the grid, getting new data from the model" ilk="function" name="refresh" />
          <scope doc="" ilk="function" name="canSort" signature="canSort(inSortInfo)">
            <variable ilk="argument" name="inSortInfo" />
          </scope>
          <scope doc="Retrieves the model field on which to sort data." ilk="function" name="getSortField" signature="getSortField(inSortInfo)">
            <variable citdl="Integer" doc="1-based grid column index; positive if sort is ascending, otherwise negative" ilk="argument" name="inSortInfo" />
          </scope>
          <scope doc="" ilk="function" name="sort" />
          <scope doc="" ilk="function" name="addRow" signature="addRow(inRowData,inIndex)">
            <variable ilk="argument" name="inRowData" />
            <variable ilk="argument" name="inIndex" />
          </scope>
          <scope doc="" ilk="function" name="removeSelectedRows" />
          <scope doc="Determines if a given cell may be edited" ilk="function" name="canEdit" signature="canEdit(inCell,inRowIndex)">
            <variable citdl="Object" doc="A grid cell" ilk="argument" name="inCell" />
            <variable citdl="Integer" doc="Grid row index" ilk="argument" name="inRowIndex" />
            <variable name="return_summary" />
          </scope>
          <scope doc="" ilk="function" name="doStartEdit" signature="doStartEdit(inCell,inRowIndex)">
            <variable ilk="argument" name="inCell" />
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="" ilk="function" name="doApplyCellEdit" signature="doApplyCellEdit(inValue,inRowIndex,inFieldIndex)">
            <variable ilk="argument" name="inValue" />
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inFieldIndex" />
          </scope>
          <scope doc="" ilk="function" name="doCancelEdit" signature="doCancelEdit(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="" ilk="function" name="doApplyEdit" signature="doApplyEdit(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="Perform row styling" ilk="function" name="styleRowState" signature="styleRowState(inRow)">
            <variable ilk="argument" name="inRow" />
          </scope>
          <scope doc="" ilk="function" name="onStyleRow" signature="onStyleRow(inRow)">
            <variable ilk="argument" name="inRow" />
          </scope>
          <variable doc="" name="rowCount" />
          <scope attributes="private" doc="" ilk="function" name="markupFactory" returns="for vendetta" signature="markupFactory(props,node,ctor)">
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="ctor" />
          </scope>
        </scope>
        <scope doc="A grid widget with virtual scrolling, cell editing, complex rows, sorting, fixed columns, sizeable columns, etc." ilk="function" name="VirtualGrid">
          <scope doc="" name="templatePath" />
          <scope citdl="String" doc="CSS class applied to the grid&apos;s domNode" name="classTag" />
          <variable doc="Default data getter." ilk="function" name="get" signature="get(inRowIndex)">
            <variable citdl="Integer" doc="Row for which to provide data" ilk="argument" name="inRowIndex" />
            <variable name="return_summary" />
          </variable>
          <variable citdl="Integer" doc="Number of rows to display." name="rowCount" />
          <variable citdl="Integer" doc="Number of rows to keep in the rendering cache." name="keepRows" />
          <scope citdl="Integer" doc="Number of rows to render at a time." name="rowsPerPage" />
          <scope citdl="Boolean" doc="If autoWidth is true, grid width is automatically set to fit the data." name="autoWidth" />
          <scope citdl="Boolean" doc="If autoHeight is true, grid height is automatically set to fit the data." name="autoHeight" />
          <scope citdl="Boolean" doc="If autoRender is true, grid will render itself after initialization." name="autoRender" />
          <scope citdl="String" doc="default height of the grid, measured in any valid css unit." name="defaultHeight" />
          <variable citdl="Object|String" doc="View layout defintion. Can be set to a layout object, or to the (string) name of a layout object." name="structure" />
          <scope citdl="Integer" doc="Override defaults and make the indexed grid view elastic, thus filling available horizontal space." name="elasticView" />
          <scope citdl="boolean" doc="Single-click starts editing. Default is double-click" name="singleClickEdit" />
          <variable attributes="private" doc="" name="_click" />
          <variable doc="" name="sortInfo" />
          <scope doc="" name="themeable" />
          <scope doc="" ilk="function" name="buildRendering" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="" ilk="function" name="destroy" />
          <variable doc="" ilk="function" name="styleChanged" />
          <scope attributes="private" doc="" ilk="function" name="_styleChanged" />
          <scope doc="" ilk="function" name="textSizeChanged" />
          <scope attributes="private" doc="" ilk="function" name="_textSizeChanged" />
          <scope doc="" ilk="function" name="sizeChange" />
          <scope doc="" ilk="function" name="renderOnIdle" />
          <scope doc="create grid managers for various tasks including rows, focus, selection, editing  row manager" ilk="function" name="createManagers" />
          <scope doc="Creates a new virtual scroller" ilk="function" name="createScroller" />
          <scope doc="Creates a new Grid layout" ilk="function" name="createLayout" />
          <scope doc="" ilk="function" name="createViews" />
          <scope doc="" ilk="function" name="createView" signature="createView(inClass)">
            <variable ilk="argument" name="inClass" />
          </scope>
          <scope doc="" ilk="function" name="buildViews" />
          <scope doc="Install a new structure and rebuild the grid." ilk="function" name="setStructure" signature="setStructure(inStructure)">
            <variable citdl="Object" doc="Structure object defines the grid layout and provides various options for grid views and columns" ilk="argument" name="inStructure" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_structureChanged" />
          <scope doc="" ilk="function" name="hasLayout" />
          <scope doc="Update the grid&apos;s rendering dimensions and resize it" ilk="function" name="resize" signature="resize(sizeBox)">
            <variable citdl="Object" doc="{w: int, h: int, l: int, t: int}  FIXME: If grid is not sized explicitly, sometimes bogus scrollbars can appear in our container, which may require an extra call to &apos;resize&apos; to sort out." ilk="argument" name="sizeBox" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_getPadBorder" />
          <scope attributes="private" doc="" ilk="function" name="_resize" />
          <scope doc="" ilk="function" name="adaptWidth" />
          <scope doc="" ilk="function" name="adaptHeight" />
          <scope doc="Render the grid, headers, and views. Edit and scrolling states are reset. To retain edit and scrolling states, see Update." ilk="function" name="render" />
          <scope doc="" ilk="function" name="prerender" />
          <scope doc="" ilk="function" name="postrender" />
          <scope doc="" ilk="function" name="postresize" />
          <scope doc="private, used internally to render rows" ilk="function" name="renderRow" signature="renderRow(inRowIndex,inNodes)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inNodes" />
          </scope>
          <scope doc="private, used internally to remove rows" ilk="function" name="rowRemoved" signature="rowRemoved(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <variable doc="" name="invalidated">
            <variable doc="" name="rows" />
            <variable doc="" name="all" />
            <variable doc="" name="rowCount" />
          </variable>
          <variable doc="" name="updating" />
          <scope doc="Use to make multiple changes to rows while queueing row updating." ilk="function" name="beginUpdate" />
          <scope doc="Use after calling beginUpdate to render any changes made to rows." ilk="function" name="endUpdate" />
          <scope doc="" ilk="function" name="defaultUpdate" />
          <variable doc="Update the grid, retaining edit and scrolling states." ilk="function" name="update" />
          <scope doc="Render a single row." ilk="function" name="updateRow" signature="updateRow(inRowIndex)">
            <variable citdl="Integer" doc="Index of the row to render" ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="Change the number of rows." ilk="function" name="updateRowCount" signature="updateRowCount(inRowCount)">
            <variable citdl="int" doc="Number of rows in the grid." ilk="argument" name="inRowCount" />
          </scope>
          <scope doc="Update the styles for a row after it&apos;s state has changed." ilk="function" name="updateRowStyles" signature="updateRowStyles(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="Update grid when the height of a row has changed. Row height is handled automatically as rows are rendered. Use this function only to update a row&apos;s height outside the normal rendering process." ilk="function" name="rowHeightChanged" signature="rowHeightChanged(inRowIndex)">
            <variable citdl="Integer" doc="index of the row that has changed height" ilk="argument" name="inRowIndex" />
          </scope>
          <scope citdl="Boolean" doc="flag modifies vertical scrolling behavior. Defaults to true but set to false for slower scroll performance but more immediate scrolling feedback" name="fastScroll" />
          <variable doc="" name="delayScroll" />
          <scope citdl="int" doc="pixel distance a user must scroll vertically to trigger grid scrolling." name="scrollRedrawThreshold" />
          <scope doc="Vertically scroll the grid to a given pixel position" ilk="function" name="scrollTo" signature="scrollTo(inTop)">
            <variable citdl="Integer" doc="vertical position of the grid in pixels" ilk="argument" name="inTop" />
          </scope>
          <scope doc="" ilk="function" name="finishScrollJob" />
          <scope doc="" ilk="function" name="setScrollTop" signature="setScrollTop(inTop)">
            <variable ilk="argument" name="inTop" />
          </scope>
          <scope doc="Scroll the grid to a specific row." ilk="function" name="scrollToRow" signature="scrollToRow(inRowIndex)">
            <variable citdl="Integer" doc="grid row index" ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="" ilk="function" name="styleRowNode" signature="styleRowNode(inRowIndex,inRowNode)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope doc="Retrieves the cell object for a given grid column." ilk="function" name="getCell" signature="getCell(inIndex)">
            <variable citdl="Integer" doc="Grid column index of cell to retrieve" ilk="argument" name="inIndex" />
            <variable name="return_summary" />
          </scope>
          <scope doc="" ilk="function" name="setCellWidth" signature="setCellWidth(inIndex,inUnitWidth)">
            <variable ilk="argument" name="inIndex" />
            <variable ilk="argument" name="inUnitWidth" />
          </scope>
          <scope attributes="private" doc="Returns the cell name of a passed cell" ilk="function" name="getCellName" returns="String" signature="getCellName(inCell)">
            <variable ilk="argument" name="inCell" />
          </scope>
          <scope doc="Determines if the grid can be sorted" ilk="function" name="canSort" signature="canSort(inSortInfo)">
            <variable citdl="Integer" doc="Sort information, 1-based index of column on which to sort, positive for an ascending sort and negative for a descending sort" ilk="argument" name="inSortInfo" />
            <variable name="return_summary" />
          </scope>
          <scope doc="" ilk="function" name="sort" />
          <scope attributes="private" doc="Returns true if grid is sorted in an ascending direction." ilk="function" name="getSortAsc" returns="Boolean" signature="getSortAsc(inSortInfo)">
            <variable ilk="argument" name="inSortInfo" />
          </scope>
          <scope attributes="private" doc="Returns the index of the column on which the grid is sorted" ilk="function" name="getSortIndex" returns="Integer" signature="getSortIndex(inSortInfo)">
            <variable ilk="argument" name="inSortInfo" />
          </scope>
          <scope doc="Sort the grid on a column in a specified direction" ilk="function" name="setSortIndex" signature="setSortIndex(inIndex,inAsc)">
            <variable citdl="Integer" doc="Column index on which to sort." ilk="argument" name="inIndex" />
            <variable citdl="Boolean" doc="If true, sort the grid in ascending order, otherwise in descending order" ilk="argument" name="inAsc" />
          </scope>
          <scope doc="" ilk="function" name="setSortInfo" signature="setSortInfo(inSortInfo)">
            <variable ilk="argument" name="inSortInfo" />
          </scope>
          <scope doc="" ilk="function" name="doKeyEvent" signature="doKeyEvent(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_dispatch" signature="_dispatch(m,e)">
            <variable ilk="argument" name="m" />
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="dispatchKeyEvent" signature="dispatchKeyEvent(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="dispatchContentEvent" signature="dispatchContentEvent(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="dispatchHeaderEvent" signature="dispatchHeaderEvent(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="dokeydown" signature="dokeydown(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="doclick" signature="doclick(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="dodblclick" signature="dodblclick(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="docontextmenu" signature="docontextmenu(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="doheaderclick" signature="doheaderclick(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="doheaderdblclick" signature="doheaderdblclick(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="doheadercontextmenu" signature="doheadercontextmenu(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="doStartEdit" signature="doStartEdit(inCell,inRowIndex)">
            <variable ilk="argument" name="inCell" />
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="" ilk="function" name="doApplyCellEdit" signature="doApplyCellEdit(inValue,inRowIndex,inFieldIndex)">
            <variable ilk="argument" name="inValue" />
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inFieldIndex" />
          </scope>
          <scope doc="" ilk="function" name="doCancelEdit" signature="doCancelEdit(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="" ilk="function" name="doApplyEdit" signature="doApplyEdit(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="Add a row to the grid." ilk="function" name="addRow" />
          <scope doc="Remove the selected rows from the grid." ilk="function" name="removeSelectedRows" />
          <scope name="domNode">
            <variable doc="" name="tabIndex" />
            <variable doc="" name="onReveal" />
            <variable doc="" name="onSizeChange" />
            <variable doc="" name="parentNode" />
          </scope>
          <variable doc="" name="rows" />
          <variable doc="" name="focus" />
          <variable doc="" name="selection" />
          <variable doc="" name="edit" />
          <variable doc="" name="scroller">
            <variable attributes="private" doc="" name="_pageIdPrefix" />
            <variable doc="" name="renderRow" />
            <variable doc="" name="removeRow" />
            <variable doc="" name="defaultRowHeight" />
            <variable doc="" name="windowHeight" />
          </variable>
          <variable doc="" name="layout" />
          <variable doc="" name="views">
            <variable doc="" name="createView" />
          </variable>
          <variable attributes="private" doc="" name="_sizeBox" />
          <variable attributes="private" doc="" name="_padBorder" />
          <scope name="viewsNode" />
          <variable doc="" name="fitTo" />
          <scope name="viewsHeaderNode" />
          <variable doc="" name="lastScrollTop" />
          <variable doc="" name="scrollTop" />
        </scope>
        <scope doc="Custom grid view. If used in a grid structure, provides a small selectable region for grid rows." ilk="function" name="GridRowView">
          <scope doc="" name="defaultWidth" />
          <scope doc="" name="noscroll" />
          <scope doc="" name="padBorderWidth" />
          <scope doc="" ilk="function" name="buildRendering" />
          <scope doc="" ilk="function" name="getWidth" />
          <scope doc="" ilk="function" name="buildRowContent" signature="buildRowContent(inRowIndex,inRowNode)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope doc="" ilk="function" name="renderHeader" />
          <scope doc="" ilk="function" name="resize" />
          <scope doc="" ilk="function" name="adaptWidth" />
          <scope doc="" ilk="function" name="doStyleRowNode" signature="doStyleRowNode(inRowIndex,inRowNode)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope doc="" ilk="function" name="domouseover" signature="domouseover(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="domouseout" signature="domouseout(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope name="scrollboxNode" />
          <scope name="headerNode" />
        </scope>
        <scope doc="A collection of grid columns. A grid is comprised of a set of views that stack horizontally. Grid creates views automatically based on grid&apos;s layout structure. Users should typically not need to access individual views directly." ilk="function" name="GridView">
          <scope citdl="String" doc="Default widget of the view" name="defaultWidth" />
          <variable citdl="String" doc="Width for the view, in valid css unit" name="viewWidth" />
          <scope doc="" name="templatePath" />
          <scope doc="" name="themeable" />
          <scope doc="" name="classTag" />
          <scope doc="" name="marginBottom" />
          <scope doc="" name="rowPad" />
          <scope doc="" ilk="function" name="postMixInProperties" />
          <scope doc="" ilk="function" name="postCreate" />
          <scope doc="" ilk="function" name="destroy" />
          <scope doc="" ilk="function" name="focus" />
          <scope doc="" ilk="function" name="setStructure" signature="setStructure(inStructure)">
            <variable ilk="argument" name="inStructure" />
          </scope>
          <scope doc="" ilk="function" name="testFlexCells" />
          <scope doc="" ilk="function" name="updateStructure" />
          <scope attributes="private" doc="" ilk="function" name="getScrollbarWidth" returns="Integer" />
          <scope attributes="private" doc="" ilk="function" name="getColumnsWidth" returns="Integer" />
          <scope attributes="private" doc="" ilk="function" name="getWidth" returns="String" />
          <scope attributes="private" doc="" ilk="function" name="getContentWidth" returns="String" />
          <scope doc="" ilk="function" name="render" />
          <scope doc="" ilk="function" name="renderHeader" />
          <scope attributes="private" doc="" ilk="function" name="_getHeaderContent" signature="_getHeaderContent(inCell)">
            <variable ilk="argument" name="inCell" />
          </scope>
          <scope doc="" ilk="function" name="resize" />
          <scope attributes="private" doc="" ilk="function" name="hasScrollbar" returns="Boolean" />
          <scope doc="" ilk="function" name="adaptHeight" />
          <scope doc="" ilk="function" name="adaptWidth" />
          <scope doc="" ilk="function" name="setSize" signature="setSize(w,h)">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
          </scope>
          <scope doc="" ilk="function" name="renderRow" signature="renderRow(inRowIndex,inHeightPx)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inHeightPx" />
          </scope>
          <scope doc="" ilk="function" name="createRowNode" signature="createRowNode(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="" ilk="function" name="buildRow" signature="buildRow(inRowIndex,inRowNode)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope doc="" ilk="function" name="buildRowContent" signature="buildRowContent(inRowIndex,inRowNode)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope doc="" name="rowRemoved" />
          <scope doc="" ilk="function" name="getRowNode" signature="getRowNode(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <scope doc="" ilk="function" name="getCellNode" signature="getCellNode(inRowIndex,inCellIndex)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inCellIndex" />
          </scope>
          <scope doc="" ilk="function" name="styleRow" signature="styleRow(inRowIndex,inRowNode)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope doc="" ilk="function" name="styleRowNode" signature="styleRowNode(inRowIndex,inRowNode)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope doc="" ilk="function" name="doStyleRowNode" signature="doStyleRowNode(inRowIndex,inRowNode)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inRowNode" />
          </scope>
          <scope doc="" ilk="function" name="updateRow" signature="updateRow(inRowIndex,inHeightPx,inPageNode)">
            <variable ilk="argument" name="inRowIndex" />
            <variable ilk="argument" name="inHeightPx" />
            <variable ilk="argument" name="inPageNode" />
          </scope>
          <scope doc="" ilk="function" name="updateRowStyles" signature="updateRowStyles(inRowIndex)">
            <variable ilk="argument" name="inRowIndex" />
          </scope>
          <variable doc="" name="lastTop" />
          <variable doc="" name="firstScroll" />
          <scope attributes="private" doc="" ilk="function" name="doscroll" returns="Integer|String|Boolean" signature="doscroll(inEvent)">
            <variable ilk="argument" name="inEvent" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="setScrollTop" returns="Integer|String|Boolean" signature="setScrollTop(inTop)">
            <variable ilk="argument" name="inTop" />
          </scope>
          <scope doc="" ilk="function" name="doContentEvent" signature="doContentEvent(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="doHeaderEvent" signature="doHeaderEvent(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="dispatchContentEvent" signature="dispatchContentEvent(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="dispatchHeaderEvent" signature="dispatchHeaderEvent(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" ilk="function" name="setColWidth" signature="setColWidth(inIndex,inWidth)">
            <variable ilk="argument" name="inIndex" />
            <variable ilk="argument" name="inWidth" />
          </scope>
          <scope doc="" ilk="function" name="update" />
          <variable doc="" name="rowNodes" />
          <variable doc="" name="content" />
          <variable doc="" name="header" />
          <scope name="headerNodeContainer" />
          <variable doc="" name="structure" />
          <variable doc="" name="onBeforeRow" />
          <variable doc="" name="noscroll" />
          <scope name="scrollboxNode">
            <variable doc="" name="scrollLeft" />
            <variable doc="" name="scrollTop" />
          </scope>
          <variable doc="" name="flexCells" />
          <scope name="headerContentNode">
            <variable doc="" name="innerHTML" />
            <scope name="firstChild" />
          </scope>
          <variable doc="" name="contentWidth" />
          <scope name="headerNode">
            <variable doc="" name="scrollLeft" />
          </scope>
        </scope>
        <variable citdl="Object" doc="" name="help">
          <scope doc="Search for dojo functionality that has something to do with the given string." ilk="function" name="locate" signature="locate(searchFor,searchIn,maxResults)">
            <variable citdl="String" ilk="argument" name="searchFor" />
            <variable citdl="String|Object|String[]|Object[]" doc="The namespaces to search in. Defaults to dojox.help._namespaces" ilk="argument" name="searchIn" />
            <variable citdl="Number" doc="The maximum number of results." ilk="argument" name="maxResults" />
          </scope>
          <scope doc="Useful if you reset some values, and want to restore their help function" ilk="function" name="refresh" signature="refresh(namespace,recursive)">
            <variable citdl="String" doc="The string-representation of a namespace." ilk="argument" name="namespace" />
            <variable citdl="Boolean" doc="Whether to recurse through the namespace." ilk="argument" name="recursive" />
          </scope>
          <scope doc="Use this function when you want to resolve the problems created by including a dojox.help package." ilk="function" name="noConflict" signature="noConflict(item)">
            <variable citdl="Object" doc="If you pass an item, only that item will be cleaned" ilk="argument" name="item" />
          </scope>
          <scope doc="Should be called by one of the implementations. Runs startup code" ilk="function" name="init" signature="init(namespaces,noConflict)">
            <variable citdl="String[]" doc="Any namespaces to add to the default (dojox.help._namespaces)" ilk="argument" name="namespaces" />
            <variable citdl="Boolen" doc="Whether to start in noConflict mode" ilk="argument" name="noConflict" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_noConflict" signature="_noConflict(item)">
            <variable ilk="argument" name="item" />
          </scope>
          <scope attributes="private" doc="" name="_namespaces" />
          <scope attributes="private" doc="" name="_rpc" />
          <scope attributes="private" doc="" name="_attributes" />
          <scope attributes="private" doc="" ilk="function" name="_clean" signature="_clean(self)">
            <variable ilk="argument" name="self" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_displayLocated" signature="_displayLocated(located)">
            <variable ilk="argument" name="located" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_displayHelp" signature="_displayHelp(loading,obj)">
            <variable ilk="argument" name="loading" />
            <variable ilk="argument" name="obj" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_addVersion" signature="_addVersion(obj)">
            <variable ilk="argument" name="obj" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_stripPrototype" signature="_stripPrototype(original)">
            <variable ilk="argument" name="original" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_help">
            <variable attributes="private" doc="" name="__searched__" />
            <variable doc="" name="toString" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_parse" signature="_parse(data)">
            <variable ilk="argument" name="data" />
            <variable attributes="private" doc="" name="__parameters__" />
            <variable attributes="private" doc="" name="__source__" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_toStrings" />
          <scope attributes="private" doc="" ilk="function" name="_toString" signature="_toString(data)">
            <variable ilk="argument" name="data" />
            <variable attributes="private" doc="" name="__parameters__" />
            <variable attributes="private" doc="" name="__searching__" />
            <variable attributes="private" doc="" name="__output__" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="__toString" />
          <scope attributes="private" doc="" name="_overrides" />
          <scope attributes="private" doc="" name="_recursions" />
          <variable attributes="private" citdl="Object" doc="" name="_names" />
          <scope attributes="private" doc="" ilk="function" name="_recurse" signature="_recurse(namespace,recursive)">
            <variable citdl="String" ilk="argument" name="namespace" />
            <variable citdl="Boolean" ilk="argument" name="recursive" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="__recurse" signature="__recurse(namespace,root,name,items,recursive)">
            <variable ilk="argument" name="namespace" />
            <variable ilk="argument" name="root" />
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="items" />
            <variable ilk="argument" name="recursive" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <scope attributes="private" doc="" ilk="function" name="_plainText" signature="_plainText(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <variable citdl="Object" doc="" name="console" />
        </variable>
        <variable citdl="Object" doc="A client-side syntax highlighting engine." name="highlight">
          <scope doc="highlight a string of text" ilk="function" name="processString" signature="processString(str,lang)">
            <variable citdl="String" ilk="argument" name="str" />
            <variable citdl="String" ilk="argument" name="lang" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="Highlight a passed node" ilk="function" name="init" returns="stop iterations|continue iterations" signature="init(node)">
            <variable citdl="String|DomNode" ilk="argument" name="node" />
          </scope>
          <scope doc="A Class object to allow for dojoType usage with the highlight engine. This is NOT a Widget in the conventional sense, and does not have any member functions for the instance. This is provided as a convenience. You likely should be calling `dojox.highlight.init` directly." ilk="function" name="Code" signature="Code(props,node)">
            <variable citdl="Object" doc="Unused. Pass &apos;null&apos; or {}. Positional usage to allow `dojo.parser` to instantiate this class as other Widgets would be." ilk="argument" name="props" />
            <variable citdl="String|DomNode" doc="A String ID or DomNode reference to use as the root node of this instance." ilk="argument" name="node" />
            <variable citdl="String|DomNode" doc="A String ID or DomNode reference to use as the root node of this instance." name="node" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <variable citdl="Object" doc="" name="languages">
            <variable attributes="private" citdl="Object" doc="" name="_all" />
            <variable attributes="private" citdl="Object" doc="" name="_dynamic" />
            <variable attributes="private" citdl="Object" doc="" name="_static" />
            <variable attributes="private" citdl="Object" doc="" name="_www" />
            <variable citdl="Object" doc="" name="cpp" />
            <variable citdl="Object" doc="" name="css" />
            <variable citdl="Object" doc="" name="delphi" />
            <variable citdl="Object" doc="" name="django" />
            <variable citdl="Object" doc="" name="html" />
            <variable citdl="Object" doc="" name="javascript" />
            <variable citdl="Object" doc="" name="pygments">
              <variable attributes="private" citdl="Object" doc="" name="_html">
                <variable citdl="Object" doc="" name="tags">
                  <scope doc="" name="code" />
                  <scope doc="" name="title" />
                  <scope doc="" name="th" />
                  <scope doc="" name="big" />
                  <scope doc="" name="isindex" />
                  <scope doc="" name="meta" />
                  <scope doc="" name="body" />
                  <scope doc="" name="strong" />
                  <scope doc="" name="col" />
                  <scope doc="" name="select" />
                  <scope doc="" name="cite" />
                  <scope doc="" name="var" />
                  <scope doc="" name="iframe" />
                  <scope doc="" name="samp" />
                  <scope doc="" name="textarea" />
                </variable>
              </variable>
              <variable attributes="private" citdl="Object" doc="" name="_www" />
              <variable citdl="Object" doc="" name="css" />
              <variable citdl="Object" doc="" name="html" />
              <variable citdl="Object" doc="" name="javascript" />
              <variable citdl="Object" doc="" name="xml">
                <scope doc="" name="a" />
              </variable>
            </variable>
            <variable citdl="Object" doc="" name="xml">
              <variable citdl="Object" doc="" name="defaultMode">
                <scope doc="" name="contains" />
              </variable>
              <scope doc="" name="modes" />
            </variable>
            <variable citdl="Object" doc="" name="python" />
            <variable citdl="Object" doc="" name="sql" />
          </variable>
        </variable>
        <variable citdl="Object" doc="" name="html">
          <variable citdl="Object" doc="" name="metrics">
            <scope attributes="private" doc="" name="_fontResizeNode" />
            <scope attributes="private" doc="" ilk="function" name="getFontMeasurements" returns="object" />
            <scope doc="" ilk="function" name="getCachedFontMeasurements" signature="getCachedFontMeasurements(recalculate)">
              <variable ilk="argument" name="recalculate" />
            </scope>
            <scope doc="" ilk="function" name="getTextBox" signature="getTextBox(text,style,className)">
              <variable citdl="String" ilk="argument" name="text" />
              <variable citdl="Object" ilk="argument" name="style" />
              <variable citdl="String" ilk="argument" name="className" />
            </scope>
            <scope doc="" ilk="function" name="getScrollbar" />
            <scope doc="" ilk="function" name="initOnFontResize" signature="initOnFontResize(interval)">
              <variable ilk="argument" name="interval" />
            </scope>
            <scope doc="" ilk="function" name="onFontResize" />
            <scope attributes="private" doc="" ilk="function" name="_fontresize" />
          </variable>
          <scope attributes="private" doc="Creates a style and attaches it to a dynamically created stylesheet arguments:" ilk="function" name="insertCssRule" returns="String" signature="insertCssRule(selector,declaration,styleSheetName)">
            <variable citdl="String" doc="A fully qualified class name, as it would appear in a CSS dojo.doc. Start classes with periods, target nodes with &apos;#&apos;. Large selectors can also be created like:   &amp;amp;quot;#myDiv.myClass span input&amp;amp;quot;" ilk="argument" name="selector" />
            <variable citdl="String" doc="A single string that would make up a style block, not including the curly braces. Include semi-colons between statements. Do not use JavaScript style declarations in camel case, use as you would in a CSS dojo.doc:   &amp;amp;quot;color:#ffoooo;font-size:12px;margin-left:5px;&amp;amp;quot;" ilk="argument" name="declaration" />
            <variable citdl="String" doc="optional ) Name of the dynamic style sheet this rule should be inserted into. If is not found by that name, it is created. If no name is passed, the name &amp;amp;quot;default&amp;amp;quot; is used." ilk="argument" name="styleSheetName" />
          </scope>
          <scope attributes="private" doc="Removes a cssRule base on the selector and declaration passed The declaration is needed for cases of dupe selectors" ilk="function" name="removeCssRule" returns="Boolean" signature="removeCssRule(selector,declaration,styleSheetName)">
            <variable citdl="String" ilk="argument" name="selector" />
            <variable citdl="String" ilk="argument" name="declaration" />
            <variable citdl="String" ilk="argument" name="styleSheetName" />
          </scope>
          <scope attributes="private" doc="Returns a style sheet based on the argument. Searches dynamic style sheets first. If no matches, searches document style sheets.  argument: (optional) A title or an href to a style sheet. Title can be an attribute in a tag, or a dynamic style sheet reference. Href can be the name of the file. If no argument, the assumed created dynamic style sheet is used.  try dynamic sheets first" ilk="function" name="getStyleSheet" returns="StyleSheet or false" signature="getStyleSheet(styleSheetName)">
            <variable citdl="String" ilk="argument" name="styleSheetName" />
          </scope>
          <scope attributes="private" doc="Creates and returns a dynamically created style sheet used for dynamic styles  argument: styleSheetName /* optional String */ The name given the style sheet so that multiple style sheets can be created and referenced. If no argument is given, the name &amp;amp;quot;default&amp;amp;quot; is used." ilk="function" name="getDynamicStyleSheet" returns="StyleSheet" signature="getDynamicStyleSheet(styleSheetName)">
            <variable citdl="String" ilk="argument" name="styleSheetName" />
          </scope>
          <scope doc="Enables the style sheet with the name passed in the argument. Deafults to the default style sheet." ilk="function" name="enableStyleSheet" signature="enableStyleSheet(styleSheetName)">
            <variable citdl="String" ilk="argument" name="styleSheetName" />
          </scope>
          <scope doc="Disables the dynamic style sheet with the name passed in the argument. If no arg is passed, defaults to the default style sheet." ilk="function" name="disableStyleSheet" signature="disableStyleSheet(styleSheetName)">
            <variable ilk="argument" name="styleSheetName" />
          </scope>
          <scope attributes="private" doc="Getter/Setter" ilk="function" name="activeStyleSheet" returns="StyleSheet or Boolean - FIXME - doesn&apos;t make a lot of sense" signature="activeStyleSheet(title)">
            <variable citdl="?String" ilk="argument" name="title" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="getPreferredStyleSheet" returns="String|Boolean|StyleSheet or false|StyleSheet|StyleSheet or Boolean - FIXME - doesn&apos;t make a lot of sense" />
          <scope attributes="private" doc="Searches HTML for style sheets that are &amp;amp;quot;toggle-able&amp;amp;quot; - can be enabled and disabled. These would include sheets with the title attribute, as well as the REL attribute." ilk="function" name="getToggledStyleSheets" returns="Array">
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="Collects all the style sheets referenced in the HTML page, including any incuded via @import." ilk="function" name="getStyleSheets" returns="Object">
            <variable name="return_summary" />
          </scope>
          <variable citdl="Object" doc="" name="styles" />
        </variable>
        <variable citdl="Object" doc="A collection of image related widgets" name="image">
          <scope doc="" ilk="function" name="FlickrBadge">
            <scope doc="" name="children" />
            <variable citdl="String" doc="If you know your Flickr userid, you can set it to prevent a call to fetch the id" name="userid" />
            <scope citdl="String" doc="Your Flickr username" name="username" />
            <scope citdl="String" doc="The id of the set to display" name="setid" />
            <scope citdl="String|Array" doc="A comma separated list of tags or an array of tags to grab from Flickr" name="tags" />
            <scope citdl="String" doc="Free text search. Photos who&apos;s title, description, or tags contain the text will be displayed" name="searchText" />
            <scope citdl="String" doc="Where to display the pictures when clicked on. Valid values are the same as the target attribute of the A tag." name="target" />
            <scope doc="" name="apikey" />
            <variable attributes="private" doc="" name="_store" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="startup" />
          </scope>
          <scope doc="Gallery widget that wraps a dojox.image.ThumbnailPicker and dojox.image.SlideShow widget" ilk="function" name="Gallery">
            <scope citdl="Number" doc="Maximum height of an image in the SlideShow widget" name="imageHeight" />
            <scope citdl="Number" doc="Maximum width of an image in the SlideShow widget" name="imageWidth" />
            <scope citdl="Number" doc="The number of records to retrieve from the data store per request." name="pageSize" />
            <scope citdl="Boolean" doc="If true, images are loaded before the user views them. If false, an image is loaded when the user displays it." name="autoLoad" />
            <scope citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the URL to link to from an image, if any." name="linkAttr" />
            <scope citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the URL to the thumbnail image." name="imageThumbAttr" />
            <scope citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the URL to the image." name="imageLargeAttr" />
            <scope citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the title of the picture, if any." name="titleAttr" />
            <scope citdl="Integer" doc="time in seconds, between image changes in the slide show." name="slideshowInterval" />
            <scope doc="" name="templatePath" />
            <scope doc="Initializes the widget, creates the ThumbnailPicker and SlideShow widgets" ilk="function" name="postCreate" />
            <scope doc="Sets the data store and request objects to read data from." ilk="function" name="setDataStore" signature="setDataStore(dataStore,request,paramNames)">
              <variable citdl="An" doc="implementation of the dojo.data.api.Read API. This accesses the image data." ilk="argument" name="dataStore" />
              <variable citdl="An" doc="implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store" ilk="argument" name="request" />
              <variable citdl="optional" doc="An object defining the names of the item attributes to fetch from the data store. The four attributes allowed are &apos;linkAttr&apos;, &apos;imageLargeAttr&apos;, &apos;imageThumbAttr&apos; and &apos;titleAttr&apos;" ilk="argument" name="paramNames" />
            </scope>
            <scope doc="Resets the widget to its initial state" ilk="function" name="reset" />
            <scope doc="Changes the image being displayed in the SlideShow to the next image in the data store" ilk="function" name="showNextImage" signature="showNextImage(inTimer)">
              <variable citdl="Boolean" doc="If true, a slideshow is active, otherwise the slideshow is inactive." ilk="argument" name="inTimer" />
            </scope>
            <scope doc="Switches the slideshow mode on and off." ilk="function" name="toggleSlideshow" />
            <scope doc="Shows the image at index &apos;idx&apos;. idx: Number The position of the image in the data store to display" ilk="function" name="showImage" signature="showImage(index,callback)">
              <variable ilk="argument" name="index" />
              <variable citdl="optional" doc="Function Optional callback function to call when the image has finished displaying." ilk="argument" name="callback" />
            </scope>
            <scope attributes="private" doc="Ensures that the ThumbnailPicker and the SlideShow widgets are centered." ilk="function" name="_centerChildren" />
            <variable doc="" name="widgetid" />
            <variable doc="" name="thumbPicker" />
            <variable doc="" name="slideShow" />
          </scope>
          <scope doc="A dojo-based Lightbox implementation." ilk="function" name="Lightbox">
            <scope citdl="String" doc="Grouping images in a page with similar tags will provide a &apos;slideshow&apos; like grouping of images" name="group" />
            <scope citdl="String" doc="A string of text to be shown in the Lightbox beneath the image (empty if using a store)" name="title" />
            <scope doc="" name="href" />
            <scope citdl="Integer" doc="Generic time in MS to adjust the feel of widget. could possibly add various durations for the various actions (dialog fadein, sizeing, img fadein ...)" name="duration" />
            <variable attributes="private" citdl="Boolean" doc="Privately set this to disable/enable natural link of anchor tags   _attachedDialg: dojox.image._LightboxDialog The pointer to the global lightbox dialog for this widget" name="_allowPassthru" />
            <variable attributes="private" doc="" name="_attachedDialog" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="Add this instance to the master LightBoxDialog" ilk="function" name="_addSelf" />
            <scope attributes="private" doc="Handle the click on the link" ilk="function" name="_handleClick" signature="_handleClick(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="Show the Lightbox with this instance as the starting point" ilk="function" name="show" />
            <scope doc="Disables event clobbering and dialog, and follows natural link" ilk="function" name="disable" />
            <scope doc="Enables the dialog (prevents default link)" ilk="function" name="enable" />
          </scope>
          <scope doc="The &amp;amp;quot;dialog&amp;amp;quot; shared between any Lightbox instances on the page, publically available for programatic manipulation." ilk="function" name="LightboxDialog">
            <scope citdl="String" doc="The current title, read from object passed to show()" name="title" />
            <variable citdl="Array" doc="Array of objects. this is populated by from the JSON object _groups, and should not be populate manually. it is a placeholder for the currently showing group of images in this master dialog" name="inGroup" />
            <scope citdl="String" doc="The src=&amp;amp;quot;&amp;amp;quot; attribute of our imageNode (can be null at statup)" name="imgUrl" />
            <scope citdl="String" doc="The text to display when an unreachable image is linked" name="errorMessage" />
            <scope citdl="Boolean" doc="If true, ensure the image always stays within the viewport more difficult than necessary to disable, but enabled by default seems sane in most use cases." name="adjust" />
            <variable attributes="private" citdl="Object" doc="" name="_groups">
              <scope doc="" name="XnoGroupX" />
            </variable>
            <scope citdl="Url" doc="Path to the image used when a 404 is encountered" name="errorImg" />
            <scope attributes="private" doc="" name="_fixSizes" />
            <scope doc="" name="templatePath" />
            <scope doc="Add some extra event handlers, and startup our superclass." ilk="function" name="startup" />
            <scope doc="Show the Master Dialog. Starts the chain of events to show an image in the dialog, including showing the dialog if it is not already visible" ilk="function" name="show" signature="show(groupData)">
              <variable citdl="Object" doc="needs href and title attributes. the values for this image." ilk="argument" name="groupData" />
            </scope>
            <scope attributes="private" doc="Load next image in group" ilk="function" name="_nextImage" />
            <scope attributes="private" doc="Load previous image in group" ilk="function" name="_prevImage" />
            <scope attributes="private" doc="Do the prep work before we can show another image" ilk="function" name="_loadImage" />
            <scope attributes="private" doc="A localized hook to accompany _loadImage" ilk="function" name="_prepNodes" />
            <scope doc="Resize our dialog container, and fire _showImage  22 == current styled margins or paddings, can calculate programatically if needed" ilk="function" name="resizeTo" signature="resizeTo(size)">
              <variable citdl="Object" ilk="argument" name="size" />
            </scope>
            <scope attributes="private" doc="Fade in the image, and fire showNav" ilk="function" name="_showImage" />
            <scope attributes="private" doc="Fade in the footer, and setup our connections." ilk="function" name="_showNav" />
            <scope doc="Hide the Master Lightbox" ilk="function" name="hide" />
            <scope doc="Add an image to this Master Lightbox" ilk="function" name="addImage" signature="addImage(child,group)">
              <variable citdl="Object" doc="The image information to add. href: String - link to image (required) title: String - title to display" ilk="argument" name="child" />
              <variable citdl="String" doc="attach to group of similar tag or null for individual image instance" ilk="argument" name="group" />
            </scope>
            <scope attributes="private" doc="Handle keyboard navigation internally" ilk="function" name="_handleKey" signature="_handleKey(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="resize an image to fit within the bounds of the viewport" ilk="function" name="_scaleToFit" returns="Object" signature="_scaleToFit(size)">
              <variable citdl="Object" doc="The &apos;size&apos; object passed around for this image" ilk="argument" name="size" />
            </scope>
            <scope attributes="private" doc="we want to know the viewport size any time it changes" ilk="function" name="_position" signature="_position(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="make and cleanup animation and animation connections" ilk="function" name="_makeAnims" />
            <variable attributes="private" doc="" name="_animConnects" />
            <variable attributes="private" doc="" name="_clone" />
            <variable attributes="private" doc="" name="_vp" />
            <variable attributes="private" doc="" name="_positionIndex" />
            <variable attributes="private" doc="" name="_imageReady" />
            <scope name="imgNode">
              <variable doc="" name="src" />
            </scope>
            <variable attributes="private" doc="" name="_wasStyled" />
            <variable attributes="private" doc="" name="_showImageAnim" />
            <variable attributes="private" doc="" name="_loadingAnim" />
            <variable attributes="private" doc="" name="_showNavAnim" />
          </scope>
          <scope doc="Initializes the DOM node and connect onload event" ilk="function" name="LightboxNano" signature="LightboxNano(p,n)">
            <variable ilk="argument" name="p" />
            <variable ilk="argument" name="n" />
            <scope citdl="string" doc="URL to the large image to show in the lightbox." name="href" />
            <scope citdl="int" doc="The delay in milliseconds of the LightboxNano open and close animation." name="duration" />
            <scope citdl="int" doc="The delay in milliseconds after the LightboxNano is created before preloading the larger image." name="preloadDelay" />
            <scope doc="Destroys the LightboxNano and it&apos;s DOM node" ilk="function" name="destroy" />
            <scope attributes="private" doc="Creates a div for the enlarge icon and loading indicator layers" ilk="function" name="_createDiv" returns="DomNode" signature="_createDiv(cssClass,refNode,display)">
              <variable citdl="String" ilk="argument" name="cssClass" />
              <variable citdl="DomNode" ilk="argument" name="refNode" />
              <variable citdl="boolean" ilk="argument" name="display" />
            </scope>
            <scope attributes="private" doc="Creates the large image and begins to show it" ilk="function" name="_load" signature="_load(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Hides the animated loading indicator" ilk="function" name="_hideLoading" />
            <scope attributes="private" doc="The image is now loaded, calculate size and display" ilk="function" name="_show" />
            <scope attributes="private" doc="Resize the background to fill the page" ilk="function" name="_sizeBg" />
            <scope attributes="private" doc="A key was pressed, so hide the lightbox" ilk="function" name="_key" signature="_key(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Returns animation parameters with the start and end coords" ilk="function" name="_coords" signature="_coords(s,e)">
              <variable citdl="Object" ilk="argument" name="s" />
              <variable citdl="Object" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Closes the lightbox" ilk="function" name="_hide" />
            <scope attributes="private" doc="Destroys the lightbox" ilk="function" name="_reset" />
            <scope attributes="private" doc="Creates the lightbox open/close and background fadein/out animations" ilk="function" name="_anim" signature="_anim(node,args,onEnd)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="onEnd" />
            </scope>
            <variable attributes="private" doc="" name="_loadingNode" />
          </scope>
          <scope doc="Adds magnification on a portion of an image element, using dojox.gfx" ilk="function" name="Magnifier">
            <scope attributes="private" doc="" ilk="function" name="_createGlass" />
            <scope attributes="private" doc="position the overlay centered under the cursor" ilk="function" name="_placeGlass" signature="_placeGlass(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="set the image&apos;s offset in the clipping window relative to the mouse position" ilk="function" name="_setImage" signature="_setImage(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable doc="" name="glassNode" />
            <variable doc="" name="surfaceNode" />
            <variable doc="" name="surface" />
            <variable doc="" name="img" />
          </scope>
          <scope doc="Adds magnification on a portion of an image element" ilk="function" name="MagnifierLite">
            <scope citdl="Int" doc="the width and height of the bounding box" name="glassSize" />
            <scope citdl="Decimal" doc="the multiplier of the Mangification." name="scale" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="make img and glassNode elements as children of the body" ilk="function" name="_createGlass" />
            <scope attributes="private" doc="update the calculations should this.scale change" ilk="function" name="_adjustScale" />
            <scope attributes="private" doc="show the overlay" ilk="function" name="_showGlass" signature="_showGlass(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="hide the overlay" ilk="function" name="_hideGlass" signature="_hideGlass(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="position the overlay centered under the cursor" ilk="function" name="_placeGlass" signature="_placeGlass(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="set the image&apos;s offset in the clipping window relative to the mouse position" ilk="function" name="_setImage" signature="_setImage(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="destroy" signature="destroy(finalize)">
              <variable ilk="argument" name="finalize" />
            </scope>
            <variable doc="" name="glassNode" />
            <variable doc="" name="surfaceNode" />
            <variable doc="" name="img" />
            <variable doc="" name="offset" />
            <variable attributes="private" doc="" name="_imageSize" />
            <variable attributes="private" doc="" name="_zoomSize" />
          </scope>
          <scope doc="A Slideshow Widget" ilk="function" name="SlideShow">
            <scope citdl="Number" doc="The maximum height of an image" name="imageHeight" />
            <scope citdl="Number" doc="The maximum width of an image." name="imageWidth" />
            <scope citdl="String" doc="the initial title of the SlideShow" name="title" />
            <scope citdl="String" doc="a way to customize the wording in the title. supported parameters to be populated are: ${title} = the passed title of the image ${current} = the current index of the image ${total} = the total number of images in the SlideShow  should add more?" name="titleTemplate" />
            <scope citdl="Boolean" doc="Prevents the slideshow from putting an anchor link around the displayed image enables if true, though still will not link in absence of a url to link to" name="noLink" />
            <scope citdl="Boolean" doc="true/false - make the slideshow loop" name="loop" />
            <scope citdl="Boolean" doc="toggle to enable/disable the visual navigation controls" name="hasNav" />
            <variable citdl="Array" doc="Contains the DOM nodes that individual images are stored in when loaded or loading." name="images" />
            <scope citdl="Number" doc="The number of images to request each time." name="pageSize" />
            <scope citdl="Boolean" doc="If true, then images are preloaded, before the user navigates to view them. If false, an image is not loaded until the user views it." name="autoLoad" />
            <scope citdl="Boolean" doc="If true, the SlideShow begins playing immediately" name="autoStart" />
            <scope citdl="Boolean" doc="If true, the widget does not resize itself to fix the displayed image." name="fixedHeight" />
            <variable citdl="Object" doc="Implementation of the dojo.data.api.Read API, which provides data on the images to be displayed." name="imageStore" />
            <scope citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the URL to link to from an image, if any." name="linkAttr" />
            <scope citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the URL to the image." name="imageLargeAttr" />
            <scope citdl="String" doc="Defines the name of the attribute to request from the store to retrieve the title of the picture, if any." name="titleAttr" />
            <scope citdl="Number" doc="Time, in seconds, between image transitions during a slideshow." name="slideshowInterval" />
            <scope doc="" name="templatePath" />
            <variable attributes="private" citdl="Number" doc="A counter to keep track of which index image is to be loaded next" name="_imageCounter" />
            <variable attributes="private" citdl="DomNode" doc="The temporary image to show when a picture is loading." name="_tmpImage" />
            <variable attributes="private" citdl="Object" doc="Implementation of the dojo.data.api.Request API, which defines the query parameters for accessing the store." name="_request">
              <variable doc="" name="onComplete" />
              <variable doc="" name="start" />
            </variable>
            <scope doc="Initilizes the widget, sets up listeners and shows the first image" ilk="function" name="postCreate" />
            <scope doc="Sets the data store and request objects to read data from." ilk="function" name="setDataStore" signature="setDataStore(dataStore,request,paramNames)">
              <variable citdl="An" doc="implementation of the dojo.data.api.Read API. This accesses the image data." ilk="argument" name="dataStore" />
              <variable citdl="An" doc="implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store" ilk="argument" name="request" />
              <variable citdl="optional" doc="An object defining the names of the item attributes to fetch from the data store. The three attributes allowed are &apos;linkAttr&apos;, &apos;imageLargeAttr&apos; and &apos;titleAttr&apos;" ilk="argument" name="paramNames" />
            </scope>
            <scope doc="Resets the widget to its initial state" ilk="function" name="reset" />
            <scope doc="Returns true if image at the specified index is loaded, false otherwise." ilk="function" name="isImageLoaded" signature="isImageLoaded(index)">
              <variable citdl="The" doc="number index in the data store to check if it is loaded." ilk="argument" name="index" />
            </scope>
            <scope doc="If &apos;autoload&apos; is true, this tells the widget to start loading images from the specified pointer." ilk="function" name="moveImageLoadingPointer" signature="moveImageLoadingPointer(index)">
              <variable citdl="The" doc="number index in the data store to start loading images from." ilk="argument" name="index" />
            </scope>
            <scope doc="Cleans up the widget when it is being destroyed" ilk="function" name="destroy" />
            <scope doc="Changes the image being displayed to the next image in the data store" ilk="function" name="showNextImage" signature="showNextImage(inTimer,forceLoop)">
              <variable citdl="Boolean" doc="If true, a slideshow is active, otherwise the slideshow is inactive." ilk="argument" name="inTimer" />
              <variable ilk="argument" name="forceLoop" />
            </scope>
            <scope doc="Switches the slideshow mode on and off." ilk="function" name="toggleSlideShow" />
            <scope doc="Returns the topic id published to when an image is shown" ilk="function" name="getShowTopicName" />
            <scope doc="Returns the topic id published to when an image finishes loading." ilk="function" name="getLoadTopicName" />
            <scope doc="Shows the image at index &apos;index&apos;." ilk="function" name="showImage" signature="showImage(index,callback)">
              <variable citdl="Number" doc="The position of the image in the data store to display" ilk="argument" name="index" />
              <variable doc="Optional callback function to call when the image has finished displaying." ilk="function" name="callback" />
            </scope>
            <scope attributes="private" doc="Fits the widget size to the size of the image being shown, or centers the image, depending on the value of &apos;fixedHeight&apos;" ilk="function" name="_fitSize" signature="_fitSize(force)">
              <variable citdl="Boolean" doc="If true, the widget is always resized, regardless of the value of &apos;fixedHeight&apos;" ilk="argument" name="force" />
            </scope>
            <scope attributes="private" doc="Returns the padding to place at the top of the image to center it vertically." ilk="function" name="_getTopPadding" />
            <scope attributes="private" doc="Load the next unloaded image." ilk="function" name="_loadNextImage" />
            <scope attributes="private" doc="Load image at specified index" ilk="function" name="_loadImage" signature="_loadImage(index,callbackFn)">
              <variable citdl="The" doc="position in the data store to load an image from." ilk="argument" name="index" />
              <variable citdl="An" doc="optional function to execute when the image has finished loading." ilk="argument" name="callbackFn" />
              <scope name="_request">
                <variable doc="" ilk="function" name="onComplete" signature="onComplete(items)">
                  <variable ilk="argument" name="items" />
                </variable>
              </scope>
            </scope>
            <scope attributes="private" doc="Stops a running slide show." ilk="function" name="_stop" />
            <scope attributes="private" doc="Show the previous image. FIXME: either pull code from showNext/prev, or call it here" ilk="function" name="_prev" />
            <scope attributes="private" doc="Show the next image" ilk="function" name="_next" />
            <scope attributes="private" doc="Starts a timeout to show the next image when a slide show is active" ilk="function" name="_startTimer" />
            <scope attributes="private" doc="Calculates the dimensions of the navigation controls" ilk="function" name="_calcNavDimensions" />
            <scope attributes="private" doc="Sets the title to the image being displayed" ilk="function" name="_setTitle" signature="_setTitle(title)">
              <variable citdl="String" doc="The String title of the image" ilk="argument" name="title" />
            </scope>
            <scope attributes="private" doc="Ensures that the image width and height do not exceed the maximum." ilk="function" name="_fitImage" signature="_fitImage(img)">
              <variable citdl="Node" doc="The image DOM node to optionally resize" ilk="argument" name="img" />
            </scope>
            <scope attributes="private" doc="Performs navigation on the images based on users mouse clicks" ilk="function" name="_handleClick" signature="_handleClick(e)">
              <variable citdl="Event" doc="An Event object" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Shows the navigation controls" ilk="function" name="_showNav" signature="_showNav(force)">
              <variable citdl="Boolean" doc="If true, the navigation controls are repositioned even if they are currently visible." ilk="argument" name="force" />
            </scope>
            <scope attributes="private" doc="Hides the navigation controls" ilk="function" name="_hideNav" signature="_hideNav(e)">
              <variable citdl="Event" doc="The DOM Event that triggered this function" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Returns whether the mouse is over the passed element. Element must be display:block (ie, not a &amp;amp;lt;span&amp;amp;gt;)  When the page is unloading, if this method runs it will throw an exception." ilk="function" name="_overElement" signature="_overElement(element,e)">
              <variable citdl="DomNode" ilk="argument" name="element" />
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope name="outerNode" />
            <variable doc="" name="isInitialized" />
            <variable doc="" name="imageIndex" />
            <variable attributes="private" doc="" name="_timerCancelled" />
            <variable attributes="private" doc="" name="_slideId" />
            <scope name="navPlay">
              <variable attributes="private" doc="" name="_size" />
            </scope>
            <scope name="navPrev">
              <variable attributes="private" doc="" name="_size" />
            </scope>
            <scope name="navNext">
              <variable attributes="private" doc="" name="_size" />
            </scope>
            <scope name="titleNode">
              <variable doc="" name="innerHTML" />
            </scope>
            <variable attributes="private" doc="" name="_navAnim" />
            <variable attributes="private" doc="" name="_navShowing" />
          </scope>
          <scope doc="A scrolling Thumbnail Picker widget" ilk="function" name="ThumbnailPicker">
            <variable citdl="Object" doc="A data store that implements the dojo.data Read API." name="imageStore" />
            <variable citdl="Object" doc="A dojo.data Read API Request object." name="request">
              <variable doc="" name="start" />
              <variable doc="" name="count" />
              <variable doc="" name="onComplete" />
              <variable doc="" name="onError" />
            </variable>
            <scope citdl="Number" doc="Width or height in pixels, depending if horizontal or vertical." name="size" />
            <scope citdl="Number" doc="Default height of a thumbnail image" name="thumbHeight" />
            <scope citdl="Number" doc="Default width of an image" name="thumbWidth" />
            <scope citdl="Boolean" doc="Setting useLoadNotifier to true makes a colored DIV appear under each thumbnail image, which is used to display the loading status of each image in the data store." name="useLoadNotifier" />
            <scope citdl="boolean" doc="Setting useHyperlink to true causes a click on a thumbnail to open a link." name="useHyperlink" />
            <variable citdl="String" doc="If hyperlinkTarget is set to &amp;amp;quot;new&amp;amp;quot;, clicking on a thumb will open a new window If it is set to anything else, clicking a thumbnail will open the url in the current window." name="hyperlinkTarget" />
            <scope citdl="Boolean" doc="When set to true, the cursor over a thumbnail changes." name="isClickable" />
            <scope citdl="Boolean" doc="When true, uses smoothScroll to move between pages" name="isScrollable" />
            <scope citdl="Boolean" doc="If true, the thumbnails are displayed horizontally. Otherwise they are displayed vertically" name="isHorizontal" />
            <scope citdl="Boolean" doc="" name="autoLoad" />
            <scope citdl="String" doc="The attribute name for accessing the url from the data store" name="linkAttr" />
            <scope citdl="String" doc="The attribute name for accessing the thumbnail image url from the data store" name="imageThumbAttr" />
            <scope citdl="String" doc="The attribute name for accessing the large image url from the data store" name="imageLargeAttr" />
            <variable citdl="Number" doc="The number of images to request each time." name="pageSize" />
            <scope citdl="String" doc="The attribute name for accessing the title from the data store     thumbs: Array Stores the image nodes for the thumbnails." name="titleAttr" />
            <scope doc="" name="templatePath" />
            <variable attributes="private" doc="" name="_thumbs" />
            <variable attributes="private" citdl="Number" doc="The index of the first thumbnail shown" name="_thumbIndex" />
            <variable attributes="private" citdl="Number" doc="The total number of photos in the image store" name="_maxPhotos" />
            <variable attributes="private" citdl="Object" doc="" name="_loadedImages" />
            <scope doc="Initializes styles and listeners" ilk="function" name="postCreate" />
            <scope doc="Creates DOM nodes for thumbnail images and initializes their listeners" ilk="function" name="init" />
            <scope attributes="private" doc="Returns the name of the dojo topic that can be subscribed to in order to receive notifications on which thumbnail was selected." ilk="function" name="getClickTopicName" returns="String" />
            <scope attributes="private" doc="Returns the name of the dojo topic that can be subscribed to in order to receive notifications on which thumbnail is now visible" ilk="function" name="getShowTopicName" returns="String" />
            <scope doc="Sets the data store and request objects to read data from." ilk="function" name="setDataStore" signature="setDataStore(dataStore,request,paramNames)">
              <variable citdl="An" doc="implementation of the dojo.data.api.Read API. This accesses the image data." ilk="argument" name="dataStore" />
              <variable citdl="An" doc="implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store" ilk="argument" name="request" />
              <variable citdl="optional" doc="An object defining the names of the item attributes to fetch from the data store. The four attributes allowed are &apos;linkAttr&apos;, &apos;imageLargeAttr&apos;, &apos;imageThumbAttr&apos; and &apos;titleAttr&apos;" ilk="argument" name="paramNames" />
              <scope citdl="An" doc="implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store" name="request" />
            </scope>
            <scope doc="Resets the widget back to its original state." ilk="function" name="reset" />
            <scope doc="Returns true if the image at the specified index is currently visible. False otherwise." ilk="function" name="isVisible" signature="isVisible(index)">
              <variable ilk="argument" name="index" />
            </scope>
            <scope attributes="private" doc="Displays the next page of images" ilk="function" name="_next" />
            <scope attributes="private" doc="Displays the next page of images" ilk="function" name="_prev" />
            <scope attributes="private" doc="" ilk="function" name="_checkLoad" signature="_checkLoad(img,index)">
              <variable ilk="argument" name="img" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope attributes="private" doc="Displays thumbnail images, starting at position &apos;index&apos;" ilk="function" name="_showThumbs" returns="String" signature="_showThumbs(index)">
              <variable ilk="argument" name="index" />
            </scope>
            <scope doc="Changes a visual cue to show the image is loaded" ilk="function" name="markImageLoaded" signature="markImageLoaded(index)">
              <variable ilk="argument" name="index" />
            </scope>
            <scope attributes="private" doc="Adds a CSS class to a thumbnail, only if &apos;autoLoad&apos; is true" ilk="function" name="_setThumbClass" signature="_setThumbClass(thumb,className)">
              <variable citdl="DomNode" doc="The thumbnail DOM node to set the class on" ilk="argument" name="thumb" />
              <variable citdl="String" doc="The CSS class to add to the DOM node." ilk="argument" name="className" />
            </scope>
            <scope attributes="private" doc="Loads the next page of thumbnail images" ilk="function" name="_loadNextPage" />
            <scope attributes="private" doc="" ilk="function" name="_loadImage" signature="_loadImage(data,index,callback)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope attributes="private" doc="Updates the navigation controls to hide/show them when at the first or last images." ilk="function" name="_updateNavControls" />
            <variable doc="" name="widgetid" />
            <variable attributes="private" doc="" name="_scrollerSize" />
            <variable attributes="private" doc="" name="_sizeProperty" />
            <variable attributes="private" doc="" name="_totalSize" />
            <variable doc="" name="isInitialized" />
            <variable attributes="private" doc="" name="_offsetAttr" />
            <variable attributes="private" doc="" name="_sizeAttr" />
            <variable attributes="private" doc="" name="_scrollAttr" />
            <variable attributes="private" doc="" name="_noImages" />
            <variable attributes="private" doc="" name="_loadingImages" />
            <scope name="thumbScroller">
              <variable doc="" name="scrollLeft" />
              <variable doc="" name="scrollTop" />
            </scope>
            <variable attributes="private" doc="" name="_loadInProgress" />
          </scope>
          <scope doc="Preload a list of images in the dom." ilk="function" name="preload" signature="preload(urls)">
            <variable citdl="Array" doc="The list of urls to load. Can be any valid .src attribute." ilk="argument" name="urls" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_base" />
        </variable>
        <variable citdl="Object" doc="Extensions to the Core dojo.io transports" name="io">
          <scope attributes="private" doc="Parses an HTTP stream for a message." ilk="function" name="httpParse" returns="the content is not finished" signature="httpParse(httpStream,topHeaders,partial)">
            <variable citdl="String" doc="HTTP stream to parse" ilk="argument" name="httpStream" />
            <variable citdl="String" doc="Extra header information to add to each HTTP request (kind of HTTP inheritance)" ilk="argument" name="topHeaders" />
            <variable citdl="Boolean" doc="A true value indicates that the stream may not be finished, it may end arbitrarily in mid stream. The last XHR object will have a special property _lastIndex that indicates the how far along the httpStream could be successfully parsed into HTTP messages. return: Returns an array of XHR-like object for reading the headers for each message" ilk="argument" name="partial" />
          </scope>
          <variable citdl="Object" doc="" name="proxy">
            <variable citdl="Object" doc="Object that implements the iframe handling for XMLHttpRequest IFrame Proxying." name="xip">
              <scope doc="" name="xipClientUrl" />
              <scope doc="" name="urlLimit" />
              <scope attributes="private" doc="" name="_callbackName" />
              <variable attributes="private" citdl="Object" doc="" name="_state" />
              <scope attributes="private" doc="" name="_stateIdCounter" />
              <scope attributes="private" doc="" name="_isWebKit" />
              <scope attributes="private" doc="starts the xdomain request using the provided facade. This method first does some init work, then delegates to _realSend." ilk="function" name="send" returns="Object" signature="send(facade)">
                <variable citdl="Object" ilk="argument" name="facade" />
                <variable doc="" name="fullXipClientUrl" />
                <variable doc="" name="send" />
              </scope>
              <scope attributes="private" doc="starts the actual xdomain request using the provided facade." ilk="function" name="_realSend" returns="Object" signature="_realSend(facade)">
                <variable ilk="argument" name="facade" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="receive" returns="Object" signature="receive(stateId,urlEncodedData)">
                <variable citdl="String" ilk="argument" name="stateId" />
                <variable citdl="String" ilk="argument" name="urlEncodedData" />
              </scope>
              <scope doc="" ilk="function" name="frameLoaded" signature="frameLoaded(stateId)">
                <variable citdl="String" ilk="argument" name="stateId" />
              </scope>
              <scope doc="" ilk="function" name="destroyState" signature="destroyState(stateId)">
                <variable citdl="String" ilk="argument" name="stateId" />
              </scope>
              <scope doc="" ilk="function" name="createFacade" />
              <scope doc="" ilk="function" name="sendRequest" signature="sendRequest(stateId,encodedData)">
                <variable ilk="argument" name="stateId" />
                <variable ilk="argument" name="encodedData" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="sendRequestStart" returns="Object" signature="sendRequestStart(stateId)">
                <variable ilk="argument" name="stateId" />
              </scope>
              <scope doc="" ilk="function" name="sendRequestPart" signature="sendRequestPart(stateId)">
                <variable ilk="argument" name="stateId" />
              </scope>
              <scope doc="" ilk="function" name="setServerUrl" signature="setServerUrl(stateId,cmd,message)">
                <variable ilk="argument" name="stateId" />
                <variable ilk="argument" name="cmd" />
                <variable ilk="argument" name="message" />
              </scope>
              <scope doc="" ilk="function" name="makeServerUrl" signature="makeServerUrl(stateId,cmd,message)">
                <variable ilk="argument" name="stateId" />
                <variable ilk="argument" name="cmd" />
                <variable ilk="argument" name="message" />
              </scope>
              <scope doc="HTML5 document messaging endpoint. Unpack the event to see if we want to use it." ilk="function" name="fragmentReceivedEvent" signature="fragmentReceivedEvent(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope doc="" ilk="function" name="fragmentReceived" signature="fragmentReceived(frag)">
                <variable ilk="argument" name="frag" />
              </scope>
              <scope doc="" ilk="function" name="unpackMessage" signature="unpackMessage(encodedMessage)">
                <variable ilk="argument" name="encodedMessage" />
              </scope>
              <scope doc="XMLHttpRequest facade object used by dojox.io.proxy.xip." ilk="function" name="XhrIframeFacade" signature="XhrIframeFacade(ifpServerUrl)">
                <variable ilk="argument" name="ifpServerUrl" />
                <variable attributes="private" doc="" name="_requestHeaders" />
                <variable attributes="private" doc="" name="_allResponseHeaders" />
                <variable attributes="private" doc="" name="_responseHeaders" />
                <variable attributes="private" doc="" name="_method" />
                <variable attributes="private" doc="" name="_uri" />
                <variable attributes="private" doc="" name="_bodyData" />
                <variable doc="" name="responseText" />
                <variable doc="" name="responseXML" />
                <variable doc="" name="status" />
                <variable doc="" name="statusText" />
                <variable doc="" name="readyState" />
                <variable attributes="private" doc="" name="_ifpServerUrl" />
                <variable attributes="private" doc="" name="_stateId" />
                <scope doc="" ilk="function" name="open" signature="open(method,uri)">
                  <variable citdl="String" ilk="argument" name="method" />
                  <variable citdl="String" ilk="argument" name="uri" />
                </scope>
                <scope doc="" ilk="function" name="setRequestHeader" signature="setRequestHeader(header,value)">
                  <variable citdl="String" ilk="argument" name="header" />
                  <variable citdl="String" ilk="argument" name="value" />
                </scope>
                <scope doc="" ilk="function" name="send" signature="send(stringData)">
                  <variable citdl="String" ilk="argument" name="stringData" />
                </scope>
                <scope doc="" ilk="function" name="abort" />
                <scope attributes="private" doc="" ilk="function" name="getAllResponseHeaders" returns="String" />
                <scope attributes="private" doc="" ilk="function" name="getResponseHeader" returns="String" signature="getResponseHeader(header)">
                  <variable citdl="String" ilk="argument" name="header" />
                </scope>
                <scope attributes="private" doc="" ilk="function" name="_setResponseHeaders" signature="_setResponseHeaders(allHeaders)">
                  <variable citdl="String" ilk="argument" name="allHeaders" />
                </scope>
              </scope>
              <scope attributes="private" doc="" name="_xhrObjOld" />
            </variable>
          </variable>
          <variable citdl="Object" doc="" name="scriptFrame">
            <variable attributes="private" citdl="Object" doc="" name="_waiters" />
            <variable attributes="private" citdl="Object" doc="" name="_loadedIds" />
            <scope attributes="private" doc="" ilk="function" name="_getWaiters" signature="_getWaiters(frameId)">
              <variable citdl="String" ilk="argument" name="frameId" />
            </scope>
            <scope attributes="private" doc="fixes the URL so that" ilk="function" name="_fixAttachUrl" signature="_fixAttachUrl(url)">
              <variable citdl="String" ilk="argument" name="url" />
            </scope>
            <scope attributes="private" doc="callback used when waiting for a frame to load (related to the usage of the frameId argument to dojo.io.script.get()." ilk="function" name="_loaded" signature="_loaded(frameId)">
              <variable citdl="String" ilk="argument" name="frameId" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="windowName">
            <scope doc="Provides secure cross-domain request capability. Sends a request using an iframe (POST or GET) and reads the response through the frame&apos;s window.name." ilk="function" name="send" signature="send(method,args)">
              <variable citdl="String" doc="The method to use to send the request, GET or POST" ilk="argument" name="method" />
              <variable citdl="dojo.__IoArgs" doc="See dojo.xhr  args.authElement: DOMNode? By providing an authElement, this indicates that windowName should use the authorized window.name protocol, relying on the loaded XD resource to return to the provided return URL on completion of authorization/authentication. The provided authElement will be used to place the iframe in, so the user can interact with the server resource for authentication and/or authorization to access the resource.  args.onAuthLoad: Function? When using authorized access to resources, this function will be called when the authorization page has been loaded. (When authorization is actually completed, the deferred callback function is called with the result). The primary use for this is to make the authElement visible to the user once the resource has loaded (this can be preferable to showing the iframe while the resource is loading since it may not require authorization, it may simply return the resource)." ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_send" signature="_send(dfd,method,authTarget,onAuthLoad)">
              <variable ilk="argument" name="dfd" />
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="authTarget" />
              <variable ilk="argument" name="onAuthLoad" />
            </scope>
            <scope attributes="private" doc="" name="_frameNum" />
          </variable>
          <scope attributes="private" doc="" ilk="function" name="__xhrContentArgs">
            <variable citdl="String" doc="Name of the form value." name="name" />
            <variable citdl="String" doc="The contents of the value." name="content" />
            <variable citdl="String?" doc="An optional filename to pass to the server, as defined by the boundary." name="filename" />
            <variable citdl="String?" doc="An optional content-type (MIME) to pass to the server, if value is being treated as a file." name="contentType" />
            <variable citdl="String?" doc="Optional charset to pass, for the server to interpret the file correctly." name="charset" />
            <variable citdl="String?" doc="Optional transfer encoding header value." name="contentTransferEncoding" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="__xhrMultiArgs">
            <variable citdl="String" doc="URL to server endpoint." name="url" />
            <variable citdl="Object?" doc="Contains properties with string values. These properties will be serialized using multi-part boundaries." name="content" />
            <variable citdl="Object?" doc="Alias for &amp;amp;quot;content&amp;amp;quot;. Provided for backwards compatibility." name="file" />
            <variable citdl="Integer?" doc="Milliseconds to wait for the response. If this time passes, the then error callbacks are called." name="timeout" />
            <variable citdl="DOMNode?" doc="DOM node for a form. Used to extract the form values and send to the server; each form value will be serialized using multi-part boundaries." name="form" />
            <variable citdl="Boolean?" doc="Default is false. If true, then a &amp;amp;quot;dojo.preventCache&amp;amp;quot; parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests." name="preventCache" />
            <variable citdl="String?" doc="Acceptable values depend on the type of IO transport (see specific IO calls for more information)." name="handleAs" />
            <variable citdl="Function?" doc="function(response, ioArgs){}. response is an Object, ioArgs is of type dojo.__IoCallbackArgs. The load function will be called on a successful response." name="load" />
            <variable citdl="Function?" doc="function(response, ioArgs){}. response is an Object, ioArgs is of type dojo.__IoCallbackArgs. The error function will be called in an error case." name="error" />
            <variable citdl="Function?" doc="function(response, ioArgs){}. response is an Object, ioArgs is of type dojo.__IoCallbackArgs. The handle function will be called in either the successful or error case." name="handle" />
          </scope>
          <scope doc="" ilk="function" name="xhrMultiPart" signature="xhrMultiPart(args)">
            <variable citdl="dojox.io.__xhrMultiArgs" ilk="argument" name="args" />
          </scope>
          <variable citdl="Object" doc="" name="xhrPlugins">
            <scope attributes="private" doc="overrides the default xhr handler to implement a registry of xhr handlers" ilk="function" name="register" returns="or check to see if we have the same path" />
            <scope doc="adds a server side proxy xhr handler for cross-site URLs" ilk="function" name="addProxy" signature="addProxy(proxyUrl)">
              <variable citdl="This" doc="is URL to send the requests to." ilk="argument" name="proxyUrl" />
            </scope>
            <scope doc="Adds W3C Cross site XHR or XDomainRequest handling for the given URL prefix" ilk="function" name="addCrossSiteXhr" signature="addCrossSiteXhr(url,httpAdapter)">
              <variable citdl="Requests" doc="that start with this URL will be considered for using cross-site XHR." ilk="argument" name="url" />
              <variable citdl="This" doc="allows for adapting HTTP requests that could not otherwise be sent with XDR, so you can use a convention for headers and PUT/DELETE methods." ilk="argument" name="httpAdapter" />
            </scope>
            <scope doc="Provides a HTTP adaption." ilk="function" name="fullHttpAdapter" signature="fullHttpAdapter(plainXhr,noRawBody)">
              <variable ilk="argument" name="plainXhr" />
              <variable ilk="argument" name="noRawBody" />
            </scope>
          </variable>
          <scope attributes="private" doc="Adds the script transport (JSONP) as an XHR plugin for the given site. See dojox.io.script for more information on the transport. Note, that JSONP is *not* a secure transport, by loading data from a third-party site using JSONP the site has full access to your JavaScript environment." ilk="function" name="xhrScriptPlugin" returns="use the JSONP transport" signature="xhrScriptPlugin(url,callbackParamName,httpAdapter)">
            <variable citdl="String" doc="Url prefix of the site which can handle JSONP requests." ilk="argument" name="url" />
            <variable citdl="String" ilk="argument" name="callbackParamName" />
            <variable doc="This allows for adapting HTTP requests that could not otherwise be sent with JSONP, so you can use a convention for headers and PUT/DELETE methods." ilk="function" name="httpAdapter" />
          </scope>
          <scope doc="Adds the windowName transport as an XHR plugin for the given site. See dojox.io.windowName for more information on the transport." ilk="function" name="xhrWindowNamePlugin" signature="xhrWindowNamePlugin(url,httpAdapter,trusted)">
            <variable citdl="String" doc="Url prefix of the site which can handle windowName requests." ilk="argument" name="url" />
            <variable doc="This allows for adapting HTTP requests that could not otherwise be sent with window.name, so you can use a convention for headers and PUT/DELETE methods." ilk="function" name="httpAdapter" />
            <variable citdl="Boolean" ilk="argument" name="trusted" />
          </scope>
        </variable>
        <variable citdl="Object" doc="A query system for JavaScript objects" name="jsonPath" />
        <variable citdl="Object" doc="Language specific extensions" name="lang">
          <scope name="aspect">
            <scope attributes="private" doc="Returns an object, which can be used to count calls to methods." ilk="function" name="counter" returns="Object" />
            <scope attributes="private" doc="Returns an object, which can be used to count calls to methods." ilk="function" name="memoizer" returns="Object" signature="memoizer(keyMaker)">
              <variable doc="the function, which takes method&apos;s arguments and returns a key, which can be used to index the result." ilk="function" name="keyMaker" />
            </scope>
            <variable citdl="Object" doc="" name="memoizerGuard" />
            <variable citdl="Object" doc="" name="profiler" />
            <variable citdl="Object" doc="" name="timer" />
            <scope attributes="private" doc="Returns an object, which can be used to trace calls with Firebug&apos;s console. Prints argument, a return value, or an exception." ilk="function" name="tracer" returns="Object" signature="tracer(grouping)">
              <variable citdl="Boolean" doc="The flag to group output. If true, indents embedded console messages." ilk="argument" name="grouping" />
            </scope>
          </scope>
          <variable citdl="Object" doc="Functional language constructs, including currying and lambda." name="functional">
            <variable citdl="Object" doc="" name="array" />
            <variable citdl="Object" doc="" name="binrec" />
            <variable citdl="Object" doc="" name="curry" />
            <variable citdl="Object" doc="" name="fold" />
            <variable citdl="Object" doc="" name="lambda" />
            <variable citdl="Object" doc="" name="linrec" />
            <scope attributes="private" doc="builds a function from a text snippet, which represents a valid JS 1.7 list comprehension, returns a string, which represents the function." ilk="function" name="buildListcomp" returns="String" signature="buildListcomp(s)">
              <variable citdl="String" ilk="argument" name="s" />
            </scope>
            <scope attributes="private" doc="builds a function from a text snippet, which represents a valid JS 1.7 list comprehension, returns a function object." ilk="function" name="compileListcomp" returns="Function" signature="compileListcomp(s)">
              <variable citdl="String" ilk="argument" name="s" />
            </scope>
            <scope attributes="private" doc="executes the list comprehension building an array." ilk="function" name="listcomp" returns="Array" signature="listcomp(s)">
              <variable citdl="String" ilk="argument" name="s" />
            </scope>
            <variable citdl="Object" doc="" name="multirec" />
            <variable citdl="Object" doc="" name="numrec" />
            <variable citdl="Object" doc="" name="object" />
            <variable citdl="Object" doc="" name="reversed" />
            <variable citdl="Object" doc="" name="scan" />
            <variable citdl="Object" doc="" name="sequence" />
            <variable citdl="Object" doc="" name="tailrec" />
            <variable citdl="Object" doc="" name="util" />
            <variable citdl="Object" doc="" name="zip" />
          </variable>
          <scope doc="Creates a wrapper object, which can be observed. The wrapper object is a proxy to the wrapped object. If you will be making multiple wrapper objects with the same set of listeners, it is recommended that you use makeObservable, as it is more memory efficient." ilk="function" name="observable" signature="observable(wrapped,onRead,onWrite,onInvoke)">
            <variable citdl="Object" doc="The object to be wrapped and monitored for property access and modification" ilk="argument" name="wrapped" />
            <variable citdl="function" doc="See dojox.lang.makeObservable.onRead" ilk="argument" name="onRead" />
            <variable citdl="function" doc="See dojox.lang.makeObservable.onWrite" ilk="argument" name="onWrite" />
            <variable citdl="function" doc="See dojox.lang.makeObservable.onInvoke" ilk="argument" name="onInvoke" />
          </scope>
          <scope attributes="private" doc="Creates and returns an observable creator function. All the objects that are created with the returned constructor will use the provided onRead and onWrite listeners. The created constructor should be called with a single argument, the object that will be wrapped to be observed. The constructor will return the wrapper object." ilk="function" name="makeObservable" returns="the class can&apos;t be accessed, only called, so we have to wrap it with a function|do it with getters and setters" signature="makeObservable(onRead,onWrite,onInvoke,hiddenFunctions)">
            <variable citdl="function" doc="This is called whenever one of the wrapper objects created from the constructor has a property that is accessed. onRead will be called with two arguments, the first being the wrapped object, and the second is the name of property that is being accessed. The value that onRead returns will be used as the value returned by the property access" ilk="argument" name="onRead" />
            <variable citdl="function" doc="This is called whenever one of the wrapper objects created from the constructor has a property that is modified. onWrite will be called with three arguments, the first being the wrapped object, the second is the name of property that is being modified, and the third is the value that is being set on the property." ilk="argument" name="onWrite" />
            <variable citdl="function" doc="This is called when a method on the object is invoked. The first argument is the wrapper object, the second is the original wrapped object, the third is the method name, and the fourth is the arguments." ilk="argument" name="onInvoke" />
            <variable citdl="Object" doc="allows you to define functions that should be delegated but may not be enumerable on the wrapped objects, so they must be explicitly included" ilk="argument" name="hiddenFunctions" />
          </scope>
          <scope doc="" name="lettableWin" />
          <scope doc="" name="ReadOnlyProxy" />
          <variable citdl="Object" doc="" name="oo">
            <variable citdl="Object" doc="" name="Decorator" />
            <variable citdl="Object" doc="" name="Filter" />
            <variable citdl="Object" doc="" name="aop" />
            <variable citdl="Object" doc="" name="declare" />
            <variable citdl="Object" doc="" name="general" />
            <scope attributes="private" doc="a dict of default parameters for dojox.lang.oo._mixin" ilk="function" name="__MixinDefaults">
              <variable doc="a decorator function to be used in absence of other decorators" ilk="function" name="decorator" />
              <variable doc="a filter function to be used in absence of other filters" ilk="function" name="filter" />
              <variable doc="a mixer function to be used to mix in new properties" ilk="function" name="mixer" />
            </scope>
            <variable citdl="Object" doc="" name="mixin" />
            <scope attributes="private" doc="Process properties in place by removing and renaming them." ilk="function" name="rearrange" returns="Object" signature="rearrange(bag,map)">
              <variable citdl="Object" doc="the object to be processed" ilk="argument" name="bag" />
              <variable citdl="Object" doc="the dictionary for renaming (false value indicates removal of the named property)" ilk="argument" name="map" />
              <variable name="return_summary" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="utils" />
        </variable>
        <variable citdl="Object" doc="A collection of layout related Widgets" name="layout">
          <scope attributes="private" doc="cleans content to make it less likely to generate DOM/JS errors." ilk="function" name="ContentPane" returns="dojox.layout.ContentPane.DeferredHandle">
            <scope citdl="Boolean" doc="Adjust relative paths in html string content to point to this page. Only useful if you grab content from a another folder then the current one" name="adjustPaths" />
            <scope citdl="Boolean" doc="" name="cleanContent" />
            <scope citdl="Boolean" doc="trigger/load styles in the content" name="renderStyles" />
            <scope citdl="Boolean" doc="Execute (eval) scripts that is found in the content" name="executeScripts" />
            <scope citdl="Boolean" doc="replace keyword &apos;_container_&apos; in scripts with &apos;dijit.byId(this.id)&apos; NOTE this name might change in the near future" name="scriptHasHooks" />
            <variable citdl="dojo.xhrGet|dojo.xhrPost" doc="reference to the method that should grab the content" name="ioMethod" />
            <variable citdl="Object" doc="" name="ioArgs" />
            <variable citdl="dojo.Deferred" doc="callbackchain will start when onLoad occurs" name="onLoadDeferred" />
            <variable citdl="dojo.Deferred" doc="callbackchain will start when onUnload occurs" name="onUnloadDeferred" />
            <scope attributes="private" doc="replace current content with url&apos;s content" ilk="function" name="setHref" returns="dojox.layout.ContentPane.DeferredHandle" signature="setHref(url)">
              <variable ilk="argument" name="url" />
            </scope>
            <scope attributes="private" doc="Sets up for a xhrLoad, load is deferred until widget is showing" ilk="function" name="refresh" returns="dojox.layout.ContentPane.DeferredHandle" />
            <scope attributes="private" doc="" ilk="function" name="postCreate" returns="dojox.layout.ContentPane.DeferredHandle" />
            <scope attributes="private" doc="" ilk="function" name="onExecError" returns="dojox.layout.ContentPane.DeferredHandle" signature="onExecError(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setContentAttr" returns="dojox.layout.ContentPane.DeferredHandle" signature="_setContentAttr(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="cancels a inflight download" ilk="function" name="cancel" />
            <scope attributes="private" doc="" ilk="function" name="_setUpDeferreds" />
            <scope attributes="private" doc="" ilk="function" name="_onLoadHandler" />
            <scope attributes="private" doc="" ilk="function" name="_onUnloadHandler" />
            <scope attributes="private" doc="" ilk="function" name="_onError" signature="_onError(type,err)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="err" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setContent" returns="dojox.layout.ContentPane.DeferredHandle" signature="_setContent(cont)">
              <variable ilk="argument" name="cont" />
            </scope>
            <scope name="_xhrDfd">
              <variable doc="" name="fired" />
            </scope>
            <variable doc="" name="isLoaded" />
            <variable attributes="private" doc="" name="_contentSetter" />
            <scope name="containerNode">
              <variable doc="" name="innerHTML" />
            </scope>
            <variable attributes="private" doc="" name="_contentSetterParams" />
            <variable citdl="Object" doc="" name="DeferredHandle">
              <scope doc="cancel a in flight download" ilk="function" name="cancel" />
              <scope doc="add a callback to the onLoad chain" ilk="function" name="addOnLoad" signature="addOnLoad(func)">
                <variable doc="" ilk="function" name="func" />
              </scope>
              <scope doc="add a callback to the onUnload chain" ilk="function" name="addOnUnload" signature="addOnUnload(func)">
                <variable doc="" ilk="function" name="func" />
              </scope>
            </variable>
          </scope>
          <scope doc="Makes a pane&apos;s content dragable by/within it&apos;s surface" ilk="function" name="DragPane">
            <scope citdl="Boolean" doc="Naturally, the behavior is to invert the axis of the drag. Setting invert:false will make the pane drag in the same direction as the mouse." name="invert" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="mousedown handler, start the dragging" ilk="function" name="_down" signature="_down(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="mouseup handler, stop the dragging" ilk="function" name="_up" signature="_up(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="mousemove listener, offset the scroll amount by the delta since our last call." ilk="function" name="_move" signature="_move(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_x" />
            <variable attributes="private" doc="" name="_y" />
            <variable attributes="private" doc="" name="_mover" />
          </scope>
          <scope doc="An experimental collapsing-pane for dijit.layout.BorderContainer" ilk="function" name="ExpandoPane">
            <scope doc="" name="maxHeight" />
            <scope doc="" name="maxWidth" />
            <scope doc="" name="splitter" />
            <scope doc="" name="templatePath" />
            <variable citdl="String|Function" doc="easing function used to hide pane" name="easeOut" />
            <variable citdl="String|Function" doc="easing function use to show pane" name="easeIn" />
            <scope citdl="Integer" doc="duration to run show/hide animations" name="duration" />
            <scope citdl="Boolean" doc="Does this widget start in an open (true) or closed (false) state" name="startExpanded" />
            <scope doc="" name="baseClass" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="" ilk="function" name="_startupSizes" />
            <scope attributes="private" doc="" ilk="function" name="_afterResize" signature="_afterResize(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Create the show and hide animations" ilk="function" name="_setupAnims" />
            <scope doc="Toggle this pane&apos;s visibility" ilk="function" name="toggle" />
            <scope attributes="private" doc="Set the Expando state to &amp;amp;quot;closed&amp;amp;quot;" ilk="function" name="_hideWrapper" />
            <scope attributes="private" doc="Common animation onEnd code - &amp;amp;quot;unclose&amp;amp;quot;" ilk="function" name="_showEnd" />
            <scope attributes="private" doc="Callback for the hide animation - &amp;amp;quot;close&amp;amp;quot;" ilk="function" name="_hideEnd" />
            <scope doc="we aren&apos;t a layout widget, but need to act like one:" ilk="function" name="resize" signature="resize(psize)">
              <variable citdl="Object" doc="The size object optionally passed to us by our parent." ilk="argument" name="psize" />
            </scope>
            <scope attributes="private" doc="Trap stray events" ilk="function" name="_trap" signature="_trap(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_animConnects" />
            <variable attributes="private" doc="" name="_isHorizontal" />
            <variable attributes="private" doc="" name="_container" />
            <variable attributes="private" doc="" name="_closedSize" />
            <variable attributes="private" doc="" name="_currentSize" />
            <variable attributes="private" doc="" name="_showSize" />
            <variable attributes="private" doc="" name="_showing" />
            <variable attributes="private" doc="" name="_hasSizes" />
            <variable attributes="private" doc="" name="_showAnim" />
            <variable attributes="private" doc="" name="_hideAnim" />
            <variable attributes="private" doc="" name="_contentBox" />
          </scope>
          <scope doc="A non-modal Floating window." ilk="function" name="FloatingPane">
            <scope citdl="Boolean" doc="Allow closure of this Node" name="closable" />
            <scope citdl="Boolean" doc="Allow minimizing of pane if true" name="dockable" />
            <scope citdl="Boolean" doc="Allow resizing of pane true if true" name="resizable" />
            <scope citdl="Boolean" doc="Horrible param name for &amp;amp;quot;Can you maximize this floating pane?&amp;amp;quot;" name="maxable" />
            <scope citdl="String" doc="One of: x | xy | y to limit pane&apos;s sizing direction" name="resizeAxis" />
            <variable citdl="String" doc="Title to use in the header" name="title" />
            <variable citdl="DomNode" doc="if empty, will create private layout.Dock that scrolls with viewport on bottom span of viewport." name="dockTo" />
            <scope citdl="Integer" doc="Time is MS to spend toggling in/out node" name="duration" />
            <scope citdl="String" doc="[not implemented yet] will be either icon in titlepane to left of Title, and/or icon show when docked in a fisheye-like dock or maybe dockIcon would be better?" name="iconSrc" />
            <scope citdl="String" doc="The className to give to the inner node which has the content" name="contentClass" />
            <scope attributes="private" doc="" name="_showAnim" />
            <scope attributes="private" doc="" name="_hideAnim" />
            <variable attributes="private" doc="" name="_dockNode" />
            <variable attributes="private" citdl="Object" doc="" name="_restoreState" />
            <scope attributes="private" doc="" name="_allFPs" />
            <scope attributes="private" doc="" name="_startZ" />
            <scope doc="" name="templateString" />
            <scope doc="" name="templatePath" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="startup" />
            <scope doc="Update the Title bar with a new string" ilk="function" name="setTitle" signature="setTitle(title)">
              <variable citdl="String" ilk="argument" name="title" />
            </scope>
            <scope doc="Close and destroy this widget" ilk="function" name="close" />
            <scope doc="Close, but do not destroy this FloatingPane" ilk="function" name="hide" signature="hide(callback)">
              <variable ilk="function" name="callback" />
            </scope>
            <scope doc="Show the FloatingPane" ilk="function" name="show" signature="show(callback)">
              <variable ilk="function" name="callback" />
            </scope>
            <scope doc="Hide and dock the FloatingPane" ilk="function" name="minimize" />
            <scope doc="Make this FloatingPane full-screen (viewport)" ilk="function" name="maximize" />
            <scope attributes="private" doc="" ilk="function" name="_restore" />
            <scope attributes="private" doc="" ilk="function" name="_dock" />
            <scope doc="Size the FloatingPane and place accordingly" ilk="function" name="resize" signature="resize(dim)">
              <variable citdl="Object" ilk="argument" name="dim" />
            </scope>
            <scope doc="bring this FloatingPane above all other panes" ilk="function" name="bringToTop" />
            <scope doc="Destroy this FloatingPane completely" ilk="function" name="destroy" />
            <scope name="dockNode" />
            <scope name="closeNode" />
            <scope name="maxNode" />
            <scope name="restoreNode" />
            <scope name="resizeHandle" />
            <scope name="domNode" />
            <variable doc="" name="bgIframe" />
            <scope name="canvas" />
            <scope name="containerNode" />
            <variable attributes="private" doc="" name="_resizeHandle" />
            <variable attributes="private" doc="" name="_started" />
            <scope name="titleNode">
              <variable doc="" name="innerHTML" />
            </scope>
            <variable attributes="private" doc="" name="_isDocked" />
            <variable attributes="private" doc="" name="_naturalState" />
            <variable attributes="private" doc="" name="_maximized" />
            <variable attributes="private" doc="" name="_currentState" />
          </scope>
          <scope doc="A widget that attaches to a node and keeps track of incoming / outgoing FloatingPanes and handles layout" ilk="function" name="Dock">
            <scope doc="" name="templateString" />
            <scope attributes="private" doc="" name="_docked" />
            <variable attributes="private" doc="" name="_inPositioning" />
            <variable doc="" name="autoPosition" />
            <scope doc="Instert a dockNode refernce into the dock" ilk="function" name="addNode" signature="addNode(refNode)">
              <variable ilk="argument" name="refNode" />
            </scope>
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_positionDock" signature="_positionDock(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <variable doc="" name="id" />
            <variable attributes="private" doc="" name="_inPositiononing" />
          </scope>
          <scope doc="dojox.layout._DockNode is a private widget used to keep track of which pane is docked." ilk="function" name="_DockNode">
            <scope citdl="String" doc="Shown in dock icon. should read parent iconSrc?" name="title" />
            <scope citdl="Widget" doc="reference to the FloatingPane we reprasent in any given dock" name="paneRef" />
            <scope doc="" name="templateString" />
            <scope doc="remove this dock item from parent dock, and call show() on reffed floatingpane" ilk="function" name="restore" />
          </scope>
          <scope doc="The Grid Container is a container of child elements that are placed in a kind of grid." ilk="function" name="GridContainer" signature="GridContainer(props,node)">
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="node" />
            <scope doc="" name="templatePath" />
            <scope doc="" name="isContainer" />
            <variable citdl="Object" doc="Contain i18n ressources." name="i18n" />
            <scope citdl="Boolean" doc="Define auto organisation of children into the grid container." name="isAutoOrganized" />
            <scope citdl="Boolean" doc="Define if the right border has a fixed size." name="isRightFixed" />
            <scope citdl="Boolean" doc="Define if the left border has a fixed size." name="isLeftFixed" />
            <scope citdl="Boolean" doc="Allow or not resizing of columns by a grip handle." name="hasResizableColumns" />
            <variable citdl="Integer" doc="The number of dropped zones." name="nbZones" />
            <scope citdl="Integer" doc="Define the opacity of the DnD Avatar." name="opacity" />
            <scope citdl="Integer" doc="Minimum column width in percentage." name="minColWidth" />
            <scope citdl="Integer" doc="Minimun children with in pixel (only used for IE6 that doesn&apos;t handle min-width css property */" name="minChildWidth" />
            <variable citdl="Array" doc="The gridcontainer will only accept the children that fit to the types. In order to do that, the child must have a widgetType or a dndType attribute corresponding to the accepted type.*/" name="acceptTypes" />
            <variable citdl="String" doc="location to add columns, must be set to left or right(default)" name="mode" />
            <scope citdl="Boolean" doc="auto-scrolling enable inside the GridContainer" name="allowAutoScroll" />
            <scope citdl="Integer" doc="display time of popup in miliseconds" name="timeDisplayPopup" />
            <scope citdl="Boolean" doc="if true : Let the mouse to its original location when moving (allow to specify it proper offset) if false : Current behavior, mouse in the upper left corner of the widget" name="isOffset" />
            <variable citdl="Object" doc="" name="offsetDrag" />
            <scope citdl="Boolean" doc="Specify if there is a specific drag handle on widgets" name="withHandles" />
            <scope citdl="Array" doc="Array of classes of nodes that will act as drag handles   Contains the DnD widget" name="handleClasses" />
            <scope attributes="private" doc="" name="_draggedWidget" />
            <variable attributes="private" citdl="Boolean" doc="Determine if user can resizing the widget with the mouse." name="_isResized" />
            <variable attributes="private" doc="" name="_activeGrip" />
            <variable attributes="private" citdl="Integer" doc="Save the old width size." name="_oldwidth" />
            <variable attributes="private" citdl="Integer" doc="Save the old height size." name="_oldheight" />
            <variable attributes="private" doc="" name="_a11yOn" />
            <variable attributes="private" doc="" name="_canDisplayPopup" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope attributes="private" doc="" ilk="function" name="_createCells" />
            <scope doc="" name="startup" />
            <scope doc="Initialization of the GridContainer widget" ilk="function" name="init" />
            <scope doc="destroy GridContainer Component." ilk="function" name="destroy" />
            <scope doc="Callback method to resize the GridContainer widget and columns" ilk="function" name="onResized" />
            <scope attributes="private" doc="List all zones and insert service into columns." ilk="function" name="_organizeServices" />
            <scope attributes="private" doc="Organize Services by column property of widget." ilk="function" name="_organizeServicesManually" />
            <scope attributes="private" doc="Insert a service in a specific column of the GridContainer widget." ilk="function" name="_insertService" returns="String" signature="_insertService(z,p,i,first)">
              <variable citdl="Integer" ilk="argument" name="z" />
              <variable citdl="Integer" ilk="argument" name="p" />
              <variable citdl="Integer" ilk="argument" name="i" />
              <variable citdl="Boolean" ilk="argument" name="first" />
            </scope>
            <scope attributes="private" doc="Add a service (child widget) in a specific column of the GridContainer widget." ilk="function" name="addService" returns="Object" signature="addService(service,z,p)">
              <variable citdl="Object" doc="widget to insert" ilk="argument" name="service" />
              <variable citdl="Integer" doc="zone number (column)" ilk="argument" name="z" />
              <variable citdl="Integer" doc="place in the zone (first = 0)" ilk="argument" name="p" />
            </scope>
            <scope attributes="private" doc="Create all grid (zones and grip)" ilk="function" name="_createGrid" returns="Object" />
            <scope attributes="private" doc="disconnect all events on insertNodes" ilk="function" name="_disconnectDnd" />
            <scope attributes="private" doc="Create a DnD column." ilk="function" name="_createZone" returns="plottedDnd Object" signature="_createZone(zone)">
              <variable citdl="Object" ilk="argument" name="zone" />
            </scope>
            <scope attributes="private" doc="Create a grip for a specific zone" ilk="function" name="_createGrip" signature="_createGrip(dz)">
              <variable citdl="Object" ilk="argument" name="dz" />
            </scope>
            <scope attributes="private" doc="Initialize the position of a grip which will not change (top)" ilk="function" name="_initPlaceGrips" />
            <scope attributes="private" doc="Define the position of a grip and place it on page." ilk="function" name="_placeGrips" />
            <scope attributes="private" doc="Return a DOM node containing a zone by given a index." ilk="function" name="_getZoneByIndex" returns="number" signature="_getZoneByIndex(n)">
              <variable citdl="Integer" ilk="argument" name="n" />
            </scope>
            <scope attributes="private" doc="Return an integer by given a zone" ilk="function" name="getIndexZone" returns="number" signature="getIndexZone(zone)">
              <variable citdl="Node" ilk="argument" name="zone" />
            </scope>
            <scope doc="Connect events to listen the resize action. Change the type of width columns (% to px) Calculate the minwidth according to the children" ilk="function" name="resizeColumnOn" signature="resizeColumnOn(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="Change columns size." ilk="function" name="resizeColumnMove" signature="resizeColumnMove(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="Disconnect resize events. Change the type of width columns (px to %)" ilk="function" name="resizeColumnOff" signature="resizeColumnOff(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="Set the number of columns" ilk="function" name="setColumns" signature="setColumns(nbColumns)">
              <variable citdl="Integer" ilk="argument" name="nbColumns" />
            </scope>
            <scope attributes="private" doc="Add some columns" ilk="function" name="_addColumn" signature="_addColumn(nbColumns)">
              <variable citdl="Integer" ilk="argument" name="nbColumns" />
            </scope>
            <scope attributes="private" doc="Remove some columns with indices passed as an array" ilk="function" name="_deleteColumn" signature="_deleteColumn(indices)">
              <variable citdl="Array" ilk="argument" name="indices" />
            </scope>
            <scope attributes="private" doc="Update the columns width." ilk="function" name="_updateColumnsWidth" />
            <scope attributes="private" doc="Enable a11y into the GridContainer : - Possibility to move focus into the GridContainer (TAB, LEFT ARROW, RIGHT ARROW, UP ARROW, DOWN ARROW). - Possibility to move GridContainer&apos;s children (Drag and Drop) with keyboard. (SHIFT + ARROW). If the type of widget is not draggable, a popup is displayed." ilk="function" name="_selectFocus" signature="_selectFocus(event)">
              <variable citdl="Event" ilk="argument" name="event" />
            </scope>
            <scope attributes="private" doc="display a popup when a widget type can not move" ilk="function" name="_displayPopup" />
            <variable doc="" name="cell" />
            <variable doc="" name="grid">
              <variable doc="" name="length" />
            </variable>
            <variable doc="" name="dropHandler" />
            <variable doc="" name="tabDZ" />
            <variable doc="" name="handleDndStart" />
            <variable doc="" name="onMouseOver" />
            <variable attributes="private" doc="" name="_x" />
            <variable attributes="private" doc="" name="_topGrip" />
            <variable doc="" name="initX" />
            <variable doc="" name="oldTabSize" />
            <variable doc="" name="currentColumn" />
            <variable doc="" name="currentColumnWidth" />
            <variable doc="" name="nextColumn" />
            <variable doc="" name="nextColumnWidth" />
            <variable doc="" name="currentMinCol" />
            <variable doc="" name="nextMinCol" />
            <variable doc="" name="connectResizeColumnMove" />
            <variable doc="" name="connectResizeColumnOff" />
            <variable doc="" name="dragOffset" />
          </scope>
          <scope doc="A Container that turns its Layout Children into a single Pane and transitions between states onHover of the button" ilk="function" name="RadioGroup">
            <scope citdl="Integer" doc="used for Fade and Slide RadioGroup&apos;s, the duration to run the transition animation. does not affect anything in default RadioGroup" name="duration" />
            <scope citdl="Boolean" doc="toggles internal button making on or off" name="hasButtons" />
            <scope citdl="String" doc="The full declared className of the Button widget to use for hasButtons" name="buttonClass" />
            <scope citdl="String" doc="the template for our container" name="templateString" />
            <scope doc="scan the container for children, and make &amp;amp;quot;tab buttons&amp;amp;quot; for them" ilk="function" name="startup" />
            <scope attributes="private" doc="Creates a hover button for a child node of the RadioGroup" ilk="function" name="_setupChild" signature="_setupChild(child)">
              <variable citdl="dijit._Widget" ilk="argument" name="child" />
            </scope>
            <scope doc="" ilk="function" name="removeChild" signature="removeChild(child)">
              <variable ilk="argument" name="child" />
            </scope>
            <scope attributes="private" doc="called when StackContainer receives a selectChild call, used to transition the panes." ilk="function" name="_transition" signature="_transition(newWidget,oldWidget)">
              <variable citdl="Widget" ilk="argument" name="newWidget" />
              <variable citdl="Widget" ilk="argument" name="oldWidget" />
            </scope>
            <scope attributes="private" doc="show the selected child widget" ilk="function" name="_showChild" signature="_showChild(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
            </scope>
            <scope attributes="private" doc="hide the specified child widget" ilk="function" name="_hideChild" signature="_hideChild(page)">
              <variable citdl="Widget" ilk="argument" name="page" />
            </scope>
            <variable attributes="private" doc="" name="_children" />
            <variable attributes="private" doc="" name="_buttons" />
            <variable attributes="private" doc="" name="_size" />
          </scope>
          <scope doc="An extension on a stock RadioGroup, that fades the panes." ilk="function" name="RadioGroupFade">
            <scope attributes="private" doc="hide the specified child widget" ilk="function" name="_hideChild" signature="_hideChild(page)">
              <variable ilk="argument" name="page" />
            </scope>
            <scope attributes="private" doc="show the specified child widget" ilk="function" name="_showChild" signature="_showChild(page)">
              <variable ilk="argument" name="page" />
            </scope>
          </scope>
          <scope doc="A Sliding Radio Group" ilk="function" name="RadioGroupSlide">
            <variable doc="A hook to override the default easing of the pane slides." ilk="function" name="easing" />
            <scope citdl="Integer" doc="A z-index to apply to the incoming pane" name="zTop" />
            <scope attributes="private" doc="set the child out of view immediately after being hidden" ilk="function" name="_positionChild" returns="FIXME: is there a real &amp;quot;size&amp;quot; floating around always?" signature="_positionChild(page)">
              <variable ilk="argument" name="page" />
            </scope>
            <scope attributes="private" doc="Slide in the selected child widget" ilk="function" name="_showChild" signature="_showChild(page)">
              <variable ilk="argument" name="page" />
            </scope>
            <scope attributes="private" doc="reset the position of the hidden pane out of sight" ilk="function" name="_hideChild" signature="_hideChild(page)">
              <variable ilk="argument" name="page" />
            </scope>
            <variable attributes="private" doc="" name="_anim" />
          </scope>
          <scope doc="The Buttons for a RadioGroup" ilk="function" name="_RadioButton">
            <scope citdl="String" doc="the Text Label of the button" name="label" />
            <scope doc="" name="page" />
            <scope doc="" name="templateString" />
            <scope doc="start listening to mouseOver" ilk="function" name="startup" />
            <scope attributes="private" doc="set the selected child on hover, and set our hover state class" ilk="function" name="_onMouse" signature="_onMouse(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="remove hover state class from sibling Buttons. This is easier (and more reliable) than setting up an additional connection to onMouseOut  FIXME: this relies on the template being [div][span]node[/span][/div]" ilk="function" name="_clearSelected" />
          </scope>
          <scope doc="A dragable handle used to resize an attached node." ilk="function" name="ResizeHandle">
            <scope citdl="String" doc="id of the Widget OR DomNode that I will size" name="targetId" />
            <scope citdl="DomNode" doc="over-ride targetId and attch this handle directly to a reference of a DomNode" name="targetContainer" />
            <scope citdl="String" doc="one of: x|y|xy limit resizing to a single axis, default to xy ..." name="resizeAxis" />
            <scope citdl="Boolean" doc="if true, node will size realtime with mouse movement, if false, node will create virtual node, and only resize target on mouseUp" name="activeResize" />
            <scope citdl="String" doc="css class applied to virtual resize node." name="activeResizeClass" />
            <variable citdl="Boolean" doc="only applicable if activeResize = false. onMouseup, animate the node to the new size" name="animateSizing" />
            <scope citdl="String" doc="one of &amp;amp;quot;chain&amp;amp;quot; or &amp;amp;quot;combine&amp;amp;quot; ... visual effect only. combine will &amp;amp;quot;scale&amp;amp;quot; node to size, &amp;amp;quot;chain&amp;amp;quot; will alter width, then height" name="animateMethod" />
            <scope citdl="Integer" doc="time in MS to run sizing animation. if animateMethod=&amp;amp;quot;chain&amp;amp;quot;, total animation playtime is 2*animateDuration" name="animateDuration" />
            <scope citdl="Integer" doc="smallest height in px resized node can be" name="minHeight" />
            <scope citdl="Integer" doc="smallest width in px resize node can be" name="minWidth" />
            <scope citdl="Boolean" doc="Toggle if this widget cares about the maxHeight and maxWidth parameters." name="constrainMax" />
            <scope citdl="Integer" doc="Largest height size in px the resize node can become." name="maxHeight" />
            <scope citdl="Integer" doc="Largest width size in px the reize node can become." name="maxWidth" />
            <scope citdl="Boolean" doc="Toggle to enable this widget to maintain the aspect ratio of the attached node." name="fixedAspect" />
            <scope citdl="Boolean" doc="Toggle to enable/disable this widget from firing onResize events at every step of a resize. If `activeResize` is true, and this is false, onResize only fires _after_ the drop operation. Animated resizing is not affected by this setting." name="intermediateChanges" />
            <scope doc="" name="templateString" />
            <scope doc="setup our one major listener upon creation" ilk="function" name="postCreate" />
            <scope attributes="private" doc="setup movement listeners and calculate initial size" ilk="function" name="_beginSizing" signature="_beginSizing(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="called when moving the ResizeHandle ... determines new size based on settings/position and sets styles." ilk="function" name="_updateSizing" signature="_updateSizing(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getNewCoords" returns="Object" signature="_getNewCoords(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="filter through the various possible constaint possibilities.  minimum size check" ilk="function" name="_checkConstraints" returns="Object" signature="_checkConstraints(newW,newH)">
              <variable ilk="argument" name="newW" />
              <variable ilk="argument" name="newH" />
            </scope>
            <scope attributes="private" doc="apply sizing information based on information in (e) to attached node" ilk="function" name="_changeSizing" signature="_changeSizing(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="disconnect listenrs and cleanup sizing" ilk="function" name="_endSizing" signature="_endSizing(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="Stub fired when sizing is done. Fired once after resize, or often when `intermediateChanges` is set to true." ilk="function" name="onResize" signature="onResize(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_resizeHelper" />
            <variable doc="" name="minSize" />
            <variable doc="" name="maxSize" />
            <variable attributes="private" doc="" name="_resizeX" />
            <variable attributes="private" doc="" name="_resizeY" />
            <variable doc="" name="targetWidget" />
            <variable doc="" name="targetDomNode" />
            <variable attributes="private" doc="" name="_isSizing" />
            <variable doc="" name="startPoint" />
            <variable doc="" name="startSize" />
            <variable attributes="private" doc="" name="_aspect" />
            <variable attributes="private" doc="" name="_pconnects" />
            <variable attributes="private" doc="" name="_activeResizeLastEvent" />
          </scope>
          <scope doc="A global private resize helper shared between any `dojox.layout.ResizeHandle` with activeSizing off." ilk="function" name="_ResizeHelper">
            <scope doc="show helper to start resizing" ilk="function" name="show" />
            <scope doc="hide helper after resizing is complete" ilk="function" name="hide" />
            <scope doc="size the widget and place accordingly  FIXME: this is off when padding present" ilk="function" name="resize" signature="resize(dim)">
              <variable citdl="Object" ilk="argument" name="dim" />
            </scope>
          </scope>
          <scope doc="Extends a StackContainer to automatically transition between children and display navigation in the form of tabs or a pager." ilk="function" name="RotatorContainer">
            <scope doc="" name="templateString" />
            <variable citdl="Boolean" doc="Sets the display of the tabs. The tabs are actually a StackController. The child&apos;s title is used for the tab&apos;s label." name="showTabs" />
            <scope citdl="int" doc="The delay in milliseconds before transitioning to the next child." name="transitionDelay" />
            <scope citdl="String" doc="The type of transition to perform when switching children. A null transition will transition instantly." name="transition" />
            <variable citdl="int" doc="The duration of the transition in milliseconds." name="transitionDuration" />
            <scope citdl="Boolean" doc="Starts the timer to transition children upon creation." name="autoStart" />
            <scope citdl="Boolean" doc="Pause the rotator when the mouse hovers over it." name="suspendOnHover" />
            <variable citdl="Boolean" doc="Pause the rotator when the tab is changed or the pager&apos;s next/previous buttons are clicked." name="pauseOnManualChange" />
            <scope citdl="Boolean" doc="Causes the rotator to rotate in reverse order." name="reverse" />
            <scope citdl="String" doc="ID the pager widget." name="pagerId" />
            <variable citdl="int" doc="Number of cycles before pausing." name="cycles" />
            <variable attributes="private" citdl="int" doc="The timer used for controlling the transitions." name="_timer" />
            <variable attributes="private" citdl="Boolean" doc="Flag to quick check if the mouse is over the rotator." name="_over" />
            <variable attributes="private" citdl="Boolean" doc="Flag to track transition state." name="_playing" />
            <scope citdl="String" doc="The declared Class of the Pager used for this Widget" name="pagerClass" />
            <scope doc="Initializes the DOM nodes, tabs, and transition stuff." ilk="function" name="postCreate" />
            <scope doc="Initializes the pagers." ilk="function" name="startup" />
            <scope doc="Unsubscribe to all of our topics" ilk="function" name="destroy" />
            <scope doc="Exposes attributes to be changed." ilk="function" name="setAttribute" signature="setAttribute(attr,value)">
              <variable citdl="String" ilk="argument" name="attr" />
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Notify the pager&apos;s current and total numbers." ilk="function" name="_updatePager" />
            <scope attributes="private" doc="" ilk="function" name="_onMouseOver" />
            <scope attributes="private" doc="Triggered when the mouse is moved off the rotator container." ilk="function" name="_onMouseOut" />
            <scope attributes="private" doc="Resets the timer used to start the next transition." ilk="function" name="_resetTimer" />
            <scope attributes="private" doc="" ilk="function" name="_cycle" signature="_cycle(next)">
              <variable citdl="boolean or int" ilk="argument" name="next" />
            </scope>
            <scope attributes="private" doc="This function is only called when a manual change occurs in which case we may need to stop playing and we need to reset the cycle counter" ilk="function" name="_manualChange" />
            <scope attributes="private" doc="Schedules the next transition." ilk="function" name="_play" signature="_play(skip)">
              <variable ilk="argument" name="skip" />
            </scope>
            <scope attributes="private" doc="Clears the transition timer and pauses the rotator." ilk="function" name="_pause" />
            <scope attributes="private" doc="Fired when the play/pause pager button is toggled." ilk="function" name="_state" signature="_state(playing)">
              <variable ilk="argument" name="playing" />
            </scope>
            <scope attributes="private" doc="Dispatches the appropriate transition." ilk="function" name="_transition" signature="_transition(next,prev)">
              <variable citdl="Widget" ilk="argument" name="next" />
              <variable citdl="Widget" ilk="argument" name="prev" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_transitionEnd" />
            <scope attributes="private" doc="Crossfades two children." ilk="function" name="_fade" signature="_fade(next,prev)">
              <variable citdl="Widget" ilk="argument" name="next" />
              <variable citdl="Widget" ilk="argument" name="prev" />
            </scope>
            <scope attributes="private" doc="Helper function to style the children." ilk="function" name="_styleNode" signature="_styleNode(node,opacity,zIndex)">
              <variable citdl="DOMnode" ilk="argument" name="node" />
              <variable citdl="number" ilk="argument" name="opacity" />
              <variable citdl="int" ilk="argument" name="zIndex" />
            </scope>
            <variable doc="" name="tabNode" />
            <variable attributes="private" doc="" name="_stackController" />
            <variable attributes="private" doc="" name="_subscriptions" />
          </scope>
          <scope doc="Defines controls used to manipulate a RotatorContainer" ilk="function" name="RotatorPager">
            <scope doc="" name="widgetsInTemplate" />
            <scope citdl="int" doc="The ID of the rotator this pager is tied to. Only required if defined outside of the RotatorContainer&apos;s container." name="rotatorId" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="Unsubscribe to all of our topics" ilk="function" name="destroy" />
            <scope attributes="private" doc="Updates the display of the play/pause button" ilk="function" name="_state" signature="_state(playing)">
              <variable citdl="boolean" ilk="argument" name="playing" />
            </scope>
            <scope attributes="private" doc="Updates the pager&apos;s play/pause button, current child, and total number of children." ilk="function" name="_update" signature="_update(playing,current,total)">
              <variable citdl="boolean" ilk="argument" name="playing" />
              <variable citdl="int" ilk="argument" name="current" />
              <variable citdl="int" ilk="argument" name="total" />
            </scope>
            <variable doc="" name="templateString" />
            <variable attributes="private" doc="" name="_subscriptions" />
            <scope name="current">
              <variable doc="" name="innerHTML" />
            </scope>
            <scope name="total">
              <variable doc="" name="innerHTML" />
            </scope>
          </scope>
          <scope doc="A pane that &amp;amp;quot;scrolls&amp;amp;quot; its content based on the mouse poisition inside" ilk="function" name="ScrollPane">
            <variable attributes="private" citdl="dojo._Line" doc="storage for our top and bottom most scrollpoints" name="_line" />
            <variable attributes="private" citdl="the" doc="height of the visible pane" name="_lo" />
            <scope attributes="private" doc="" name="_offset" />
            <scope citdl="String" doc="either &amp;amp;quot;horizontal&amp;amp;quot; or &amp;amp;quot;vertical&amp;amp;quot; for scroll orientation.   alwaysShow: Boolean whether the scroll helper should hide when mouseleave" name="orientation" />
            <scope doc="" name="autoHide" />
            <scope doc="" name="templatePath" />
            <scope doc="calculates required sizes. Call this if you add/remove content manually, or reload the content.  if size is passed, it means we need to take care of sizing ourself (this is for IE&amp;amp;lt;8)" ilk="function" name="resize" signature="resize(size)">
              <variable ilk="argument" name="size" />
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="" ilk="function" name="_set" signature="_set(n)">
              <variable citdl="Float" ilk="argument" name="n" />
            </scope>
            <scope attributes="private" doc="calculate the relative offset of the cursor over the node, and call _set" ilk="function" name="_calc" signature="_calc(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_enter" signature="_enter(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_leave" signature="_leave(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_size" />
            <scope name="helper" />
            <variable attributes="private" doc="" name="_helpLine" />
            <variable attributes="private" doc="" name="_showAnim" />
            <variable attributes="private" doc="" name="_hideAnim" />
            <variable attributes="private" doc="" name="_vertical" />
            <variable attributes="private" doc="" name="_dir" />
            <variable attributes="private" doc="" name="_edge" />
            <variable attributes="private" doc="" name="_scroll" />
          </scope>
          <scope doc="A draggable and toggle-to-close/open spacer between two items in a BorderContainer" ilk="function" name="ToggleSplitter">
            <scope doc="" name="container" />
            <scope doc="" name="child" />
            <scope doc="" name="region" />
            <variable citdl="Boolean" doc="the initial and current state of the splitter (and its attached pane)" name="open" />
            <scope citdl="Integer" doc="how small the attached pane can be before its considered closed" name="closedThreshold" />
            <variable citdl="String" doc="the css height/width value to apply by default when the attached pane is open" name="openSize" />
            <scope attributes="private" citdl="String" doc="the css height/width value to apply by default when the attached pane is closed" name="_closedSize" />
            <scope doc="" name="templateString" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_onMouseUp" signature="_onMouseUp(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onPrelimMouseMove" signature="_onPrelimMouseMove(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="handle mousedown events from the domNode" ilk="function" name="_onMouseDown" signature="_onMouseDown(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_handleOnChange" />
            <scope attributes="private" doc="create an object with the style property name: values that will need to be applied to the child pane render the given state" ilk="function" name="_getStyleProps" signature="_getStyleProps(paneNode,open,paneStyle)">
              <variable ilk="argument" name="paneNode" />
              <variable ilk="argument" name="open" />
              <variable ilk="argument" name="paneStyle" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setStateClass" />
            <scope attributes="private" doc="setter for the open property" ilk="function" name="_setOpenAttr" signature="_setOpenAttr(value)">
              <variable citdl="Boolean" ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="onOpen" />
            <scope doc="" ilk="function" name="onClose" />
            <scope attributes="private" doc="event handle, toggle the open state" ilk="function" name="_toggleMe" signature="_toggleMe(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onKeyPress" signature="_onKeyPress(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_started" />
            <variable attributes="private" doc="" name="_openStyleProps" />
            <variable attributes="private" doc="" name="_onUpHandle" />
            <variable attributes="private" doc="" name="_startPosn" />
            <variable attributes="private" doc="" name="_onMoveHandle" />
          </scope>
          <variable citdl="Object" doc="" name="dnd">
            <scope doc="An Object, which represents the object being moved in a GridContainer" ilk="function" name="Avatar" signature="Avatar(manager,opacity)">
              <variable ilk="argument" name="manager" />
              <variable ilk="argument" name="opacity" />
              <variable doc="" name="manager" />
              <scope doc="A constructor function. it is separate so it can be (dynamically) overwritten in case of need." ilk="function" name="construct" signature="construct(opacity)">
                <variable citdl="int" ilk="argument" name="opacity" />
              </scope>
              <variable doc="" name="node" />
              <scope doc="Destroy this avatar instance" ilk="function" name="destroy" />
              <scope doc="" ilk="function" name="update" />
              <scope attributes="private" doc="" ilk="function" name="_generateText" />
            </scope>
            <scope doc="dnd source handling plotted zone to show the dropping area" ilk="function" name="PlottedDnd" signature="PlottedDnd(node,params)">
              <variable citdl="Node" ilk="argument" name="node" />
              <variable citdl="Object" ilk="argument" name="params" />
              <scope doc="" name="GC_OFFSET_X" />
              <scope doc="" name="GC_OFFSET_Y" />
              <scope attributes="private" doc="Calculate each position of children" ilk="function" name="_calculateCoords" signature="_calculateCoords(height)">
                <variable citdl="Boolean" ilk="argument" name="height" />
              </scope>
              <scope attributes="private" doc="Checks if user clicked on &amp;amp;quot;approved&amp;amp;quot; items." ilk="function" name="_legalMouseDown" returns="Boolean" signature="_legalMouseDown(e)">
                <variable citdl="Event" ilk="argument" name="e" />
              </scope>
              <scope doc="set an item as selectable" ilk="function" name="setDndItemSelectable" signature="setDndItemSelectable(node,isSelectable)">
                <variable citdl="Node" ilk="argument" name="node" />
                <variable citdl="Boolean" ilk="argument" name="isSelectable" />
              </scope>
              <scope doc="Return one or more widget selected during the drag." ilk="function" name="getDraggedWidget" signature="getDraggedWidget(node)">
                <variable citdl="Node" ilk="argument" name="node" />
              </scope>
              <scope doc="test if this node can be accepted" ilk="function" name="isAccepted" signature="isAccepted(node)">
                <variable citdl="Node" ilk="argument" name="node" />
              </scope>
              <scope doc="" name="onDndStart" />
              <scope doc="" name="onDndCancel" />
              <scope doc="Called to finish the DnD operation" ilk="function" name="onDndDrop" signature="onDndDrop(source,nodes,copy,target)">
                <variable ilk="argument" name="source" />
                <variable ilk="argument" name="nodes" />
                <variable ilk="argument" name="copy" />
                <variable ilk="argument" name="target" />
              </scope>
              <scope doc="Event processor for onmousedown." ilk="function" name="onMouseDown" signature="onMouseDown(e)">
                <variable citdl="Event" ilk="argument" name="e" />
              </scope>
              <scope doc="Event processor for onmouseup." ilk="function" name="onMouseUp" signature="onMouseUp(e)">
                <variable citdl="Event" ilk="argument" name="e" />
              </scope>
              <scope doc="Event processor for onmousemove" ilk="function" name="onMouseMove" signature="onMouseMove(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope attributes="private" doc="Assigns a class to the current target anchor based on &amp;amp;quot;before&amp;amp;quot; status" ilk="function" name="_markTargetAnchor" signature="_markTargetAnchor(before)">
                <variable citdl="Boolean" ilk="argument" name="before" />
              </scope>
              <scope attributes="private" doc="Removes a class of the current target anchor based on &amp;amp;quot;before&amp;amp;quot; status." ilk="function" name="_unmarkTargetAnchor" />
              <scope doc="set the position of the drop indicator" ilk="function" name="setIndicatorPosition" signature="setIndicatorPosition(e)">
                <variable citdl="Event" ilk="argument" name="e" />
              </scope>
              <scope doc="" name="onOverEvent" />
              <scope doc="" ilk="function" name="onOutEvent" />
              <scope doc="hide the dashed zone" ilk="function" name="deleteDashedZone" />
              <scope doc="Insert the dashed zone at the right place" ilk="function" name="insertDashedZone" signature="insertDashedZone(before)">
                <variable citdl="Boolean" ilk="argument" name="before" />
              </scope>
              <scope doc="Inserts new data items (see Dojo Container&apos;s insertNodes method for details)." ilk="function" name="insertNodes" signature="insertNodes(addSelected,data,before,anchor)">
                <variable citdl="Boolean" ilk="argument" name="addSelected" />
                <variable citdl="Array" ilk="argument" name="data" />
                <variable citdl="Boolean" ilk="argument" name="before" />
                <variable citdl="Node" ilk="argument" name="anchor" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_checkAutoScroll" signature="_checkAutoScroll(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_autoScrollUp" signature="_autoScrollUp(node)">
                <variable ilk="argument" name="node" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_autoScrollDown" signature="_autoScrollDown(node)">
                <variable ilk="argument" name="node" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_stopAutoScroll" />
              <scope attributes="private" doc="" ilk="function" name="_sumAncestorProperties" returns="Boolean|integer" signature="_sumAncestorProperties(node,prop)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="prop" />
              </scope>
              <variable doc="" name="current">
                <variable doc="" name="coords" />
              </variable>
              <variable doc="" name="selection" />
              <variable doc="" name="anchor" />
              <variable attributes="private" doc="" name="_drop" />
              <variable doc="" name="offsetDrag">
                <variable doc="" name="x" />
                <variable doc="" name="y" />
              </variable>
              <variable doc="" name="containerSource" />
              <variable doc="" name="targetAnchor" />
              <variable doc="" name="targetBox" />
              <variable doc="" name="before" />
              <variable attributes="private" doc="" name="_over" />
              <variable doc="" name="dropObject">
                <variable doc="" name="c" />
              </variable>
              <variable doc="" name="firstIndicator" />
              <variable doc="" name="autoScrollActive" />
              <variable attributes="private" doc="" name="_timer" />
              <variable doc="" name="childBoxes" />
              <variable doc="" name="dropIndicator" />
              <variable doc="" name="withHandles" />
              <variable doc="" name="handleClasses" />
              <variable doc="" name="opacity" />
              <variable doc="" name="allowAutoScroll" />
              <variable doc="" name="dom" />
              <variable doc="" name="singular" />
              <variable doc="" name="skipForm" />
              <variable doc="" name="defaultHandleClass" />
              <variable doc="" name="isDropped" />
              <variable doc="" name="isOffset" />
              <variable doc="" name="hideSource" />
            </scope>
            <scope doc="An empty widget to show at the user the drop zone of the widget." ilk="function" name="DropIndicator" signature="DropIndicator(cn,tag)">
              <variable citdl="String" ilk="argument" name="cn" />
              <variable citdl="String" ilk="argument" name="tag" />
              <scope doc="" ilk="function" name="isInserted" />
              <scope doc="" ilk="function" name="create" signature="create(/*nodeRef*/){   if(this.node &amp;&amp; this.isInserted()){ return this.node; }   var h = &quot;90px&quot;,el = dojo.doc.createElement(this.tag);       if(this.style){    el.className = this.style;    el.style.height = h;   }else{    // FIXME: allow this to be done mostly in CSS?    dojo.style(el, {     position:&quot;relative&quot;,     border:&quot;1px dashed #F60&quot;,     margin:&quot;2px&quot;,     height: h    })   }   this.node = el;   return el;  },    destroy : function()">
                <variable citdl="NodenodeRef" ilk="argument" name="/*nodeRef*/){   if(this.node &amp;&amp; this.isInserted()){ return this.node; }   var h = &quot;90px&quot;" />
                <variable citdl="FIXME: allow this to be done mostly in CSS" ilk="argument" name="el = dojo.doc.createElement(this.tag);       if(this.style){    el.className = this.style;    el.style.height = h;   }else{    // FIXME: allow this to be done mostly in CSS?    dojo.style(el, {     position:&quot;relative&quot;,     border:&quot;1px dashed #F60&quot;,     margin:&quot;2px&quot;,     height: h    })   }   this.node = el;   return el;  },    destroy : function(" />
              </scope>
              <scope doc="" ilk="function" name="destroy" />
              <variable doc="" name="node">
                <scope name="parentNode">
                  <variable doc="" name="nodeType" />
                </scope>
              </variable>
              <variable doc="" name="tag" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setGcDndHandle" signature="_setGcDndHandle(service,withHandles,handleClasses,first)">
              <variable ilk="argument" name="service" />
              <variable ilk="argument" name="withHandles" />
              <variable ilk="argument" name="handleClasses" />
              <variable ilk="argument" name="first" />
            </scope>
            <scope doc="" name="handdleIE" />
          </variable>
          <variable citdl="Object" doc="" name="ext-dijit">
            <variable citdl="Object" doc="" name="layout">
              <variable citdl="Object" doc="" name="StackContainer-touch" />
            </variable>
          </variable>
        </variable>
        <variable citdl="Object" doc="A collection of various advanced math functions." name="math">
          <variable citdl="Object" doc="" name="curves">
            <scope doc="" name="Line" />
            <scope doc="" name="Bezier" />
            <scope doc="" name="CatmullRom" />
            <scope doc="" name="Arc" />
            <scope doc="" name="CenteredArc" />
            <scope doc="" name="Circle" />
            <scope doc="" name="Path" />
          </variable>
          <variable citdl="Object" doc="" name="matrix">
            <scope doc="" name="iDF" />
            <scope doc="" name="ALMOST_ZERO" />
            <scope attributes="private" doc="" ilk="function" name="multiply" returns="Array" signature="multiply(a,b)">
              <variable citdl="Array" ilk="argument" name="a" />
              <variable citdl="Array" ilk="argument" name="b" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="product" returns="Array" />
            <scope attributes="private" doc="" ilk="function" name="sum" returns="Array|Number" />
            <scope attributes="private" doc="" ilk="function" name="inverse" returns="Array|Number" signature="inverse(a)">
              <variable citdl="Array" ilk="argument" name="a" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="determinant" returns="Array|Number" signature="determinant(a)">
              <variable citdl="Array" ilk="argument" name="a" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="upperTriangle" returns="Array|Number" signature="upperTriangle(m)">
              <variable citdl="Array" ilk="argument" name="m" />
              <variable doc="" name="iDF" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="create" returns="Array|Number" signature="create(a,b,value)">
              <variable citdl="Number" ilk="argument" name="a" />
              <variable citdl="Number" ilk="argument" name="b" />
              <variable citdl="Number" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="ones" returns="Array|Number" signature="ones(a,b)">
              <variable citdl="Number" ilk="argument" name="a" />
              <variable citdl="Number" ilk="argument" name="b" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="zeros" returns="Array|Number" signature="zeros(a,b)">
              <variable citdl="Number" ilk="argument" name="a" />
              <variable citdl="Number" ilk="argument" name="b" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="identity" returns="Array|Number" signature="identity(size,scale)">
              <variable citdl="Number" ilk="argument" name="size" />
              <variable citdl="Number" ilk="argument" name="scale" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="adjoint" returns="Array|Number" signature="adjoint(a)">
              <variable citdl="Array" ilk="argument" name="a" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="transpose" returns="Array|Number" signature="transpose(a)">
              <variable citdl="Array" ilk="argument" name="a" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="format" returns="Array|Number|string" signature="format(a,points)">
              <variable citdl="Array" ilk="argument" name="a" />
              <variable citdl="Number" ilk="argument" name="points" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="copy" returns="Array|Number|string" signature="copy(a)">
              <variable citdl="Array" ilk="argument" name="a" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="scale" returns="Array|Number|string" signature="scale(a,factor)">
              <variable citdl="Array" ilk="argument" name="a" />
              <variable citdl="Number" ilk="argument" name="factor" />
            </scope>
          </variable>
          <scope attributes="private" doc="Similar to dojo.number.round, but compensates for binary floating point artifacts" ilk="function" name="round" returns="Number" signature="round(value,places,increment,v,p,m)">
            <variable citdl="Number" doc="The number to round" ilk="argument" name="value" />
            <variable citdl="Number" doc="The number of decimal places where rounding takes place. Defaults to 0 for whole rounding. Must be non-negative." ilk="argument" name="places" />
            <variable citdl="Number" doc="Rounds next place to nearest value of increment/10. 10 by default." ilk="argument" name="increment" />
            <variable ilk="argument" name="v" />
            <variable ilk="argument" name="p" />
            <variable ilk="argument" name="m" />
          </scope>
        </variable>
        <variable citdl="Object" doc="the Dojo Offline project" name="off">
          <variable citdl="Object" doc="" name="files">
            <scope citdl="String" doc="An optional file, that if present, records the version of our bundle of files to make available offline. If this file is present, and we are not currently debugging, then we only refresh our offline files if the version has changed." name="versionURL" />
            <scope citdl="Array" doc="For advanced usage; most developers can ignore this. Our list of URLs that will be cached and made available offline." name="listOfURLs" />
            <scope citdl="boolean" doc="For advanced usage; most developers can ignore this. Whether we are currently in the middle of refreshing our list of offline files." name="refreshing" />
            <scope attributes="private" doc="" name="_cancelID" />
            <scope attributes="private" doc="" name="_error" />
            <scope attributes="private" doc="" name="_errorMessages" />
            <scope attributes="private" doc="" name="_currentFileIndex" />
            <scope attributes="private" doc="" name="_store" />
            <scope attributes="private" doc="" name="_doSlurp" />
            <scope doc="Autoscans the page to find all resources to cache. This includes scripts, images, CSS, and hyperlinks to pages that are in the same scheme/port/host as this page. We also scan the embedded CSS of any stylesheets to find @import statements and url()&apos;s. You should call this method from the top-level, outside of any functions and before the page loads:  &amp;amp;lt;script&amp;amp;gt; dojo.require(&amp;amp;quot;dojox.sql&amp;amp;quot;); dojo.require(&amp;amp;quot;dojox.off&amp;amp;quot;); dojo.require(&amp;amp;quot;dojox.off.ui&amp;amp;quot;); dojo.require(&amp;amp;quot;dojox.off.sync&amp;amp;quot;);  // configure how we should work offline  // set our application name dojox.off.ui.appName = &amp;amp;quot;Moxie&amp;amp;quot;;  // automatically &amp;amp;quot;slurp&amp;amp;quot; the page and // capture the resources we need offline dojox.off.files.slurp();  // tell Dojo Offline we are ready for it to initialize itself now // that we have finished configuring it for our application dojox.off.initialize(); &amp;amp;lt;/script&amp;amp;gt;  Note that inline styles on elements are not handled (i.e. if you somehow have an inline style that uses a URL); object and embed tags are not scanned since their format differs based on type; and elements created by JavaScript after page load are not found. For these you must manually add them with a dojox.off.files.cache() method call.  just schedule the slurp once the page is loaded and Dojo Offline is ready to slurp; dojox.off will call our _slurp() method before indicating it is finished loading" ilk="function" name="slurp">
              <variable attributes="private" doc="" name="_doSlurp" />
            </scope>
            <scope doc="" ilk="function" name="cache" signature="cache(urlOrList)">
              <variable ilk="argument" name="urlOrList" />
            </scope>
            <scope doc="A helper function that will dump and print out all of the URLs that are cached for offline availability. This can help with debugging if you are trying to make sure that all of your URLs are available offline" ilk="function" name="printURLs" />
            <scope doc="" ilk="function" name="remove" signature="remove(url)">
              <variable ilk="argument" name="url" />
              <variable doc="" name="listOfURLs" />
            </scope>
            <scope doc="" ilk="function" name="isAvailable" signature="isAvailable(url)">
              <variable ilk="argument" name="url" />
            </scope>
            <scope doc="" ilk="function" name="refresh" signature="refresh(callback)">
              <variable ilk="argument" name="callback" />
              <variable doc="" name="refreshing" />
            </scope>
            <scope doc="For advanced usage; most developers can ignore this. Aborts and cancels a refresh." ilk="function" name="abortRefresh">
              <variable doc="" name="refreshing" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_slurp" />
            <scope attributes="private" doc="" ilk="function" name="_sameLocation" signature="_sameLocation(url)">
              <variable ilk="argument" name="url" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_trimAnchor" signature="_trimAnchor(url)">
              <variable ilk="argument" name="url" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_doRefresh" signature="_doRefresh(callback,newVersion)">
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="newVersion" />
              <variable attributes="private" doc="" name="_store" />
              <variable attributes="private" doc="" name="_currentFileIndex" />
              <variable attributes="private" doc="" name="_cancelID" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getVersionInfo" signature="_getVersionInfo(callback)">
              <variable ilk="argument" name="callback" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="offline" />
          <variable citdl="Object" doc="" name="resources">
            <variable citdl="Object" doc="" name="learnhow" />
          </variable>
          <variable citdl="Object" doc="" name="sync">
            <scope doc="" ilk="function" name="ActionLog">
              <variable citdl="Array" doc="An array of our action entries, where each one is simply a custom object literal that were passed to add() when this action entry was added." name="entries" />
              <variable citdl="String" doc="If we halted, the reason why" name="reasonHalted" />
              <variable citdl="boolean" doc="If true, we are in the middle of replaying a command log; if false, then we are not" name="isReplaying" />
              <scope citdl="boolean" doc="Whether we automatically save the action log after each call to add(); defaults to true. For applications that are rapidly adding many action log entries in a short period of time, it can be useful to set this to false and simply call save() yourself when you are ready to persist your command log -- otherwise performance could be slow as the default action is to attempt to persist the actions log constantly with calls to add()." name="autoSave" />
              <scope doc="" ilk="function" name="add" signature="add(action)">
                <variable citdl="Object" ilk="argument" name="action" />
              </scope>
              <scope doc="" ilk="function" name="onReplay" signature="onReplay(action,actionLog)">
                <variable citdl="Object" ilk="argument" name="action" />
                <variable citdl="dojox.off.sync.ActionLog" ilk="argument" name="actionLog" />
              </scope>
              <scope doc="" ilk="function" name="length" />
              <scope doc="" ilk="function" name="haltReplay" signature="haltReplay(reason)">
                <variable citdl="String" ilk="argument" name="reason" />
              </scope>
              <scope doc="" ilk="function" name="continueReplay" />
              <scope doc="" ilk="function" name="clear" />
              <scope doc="" ilk="function" name="replay" />
              <scope doc="" ilk="function" name="onReplayFinished" />
              <scope doc="" ilk="function" name="toString" />
              <scope attributes="private" doc="" ilk="function" name="_save" signature="_save(callback)">
                <variable ilk="argument" name="callback" />
              </scope>
              <scope attributes="private" doc="" ilk="function" name="_load" signature="_load(callback)">
                <variable ilk="argument" name="callback" />
              </scope>
            </scope>
            <scope doc="" name="isSyncing" />
            <scope doc="" name="cancelled" />
            <scope doc="" name="successful" />
            <scope doc="" name="details" />
            <scope doc="" name="error" />
            <scope doc="" name="actions" />
            <scope doc="" name="autoSync" />
            <scope doc="" ilk="function" name="onSync" signature="onSync(type)">
              <variable citdl="String" ilk="argument" name="type" />
            </scope>
            <scope doc="" ilk="function" name="synchronize">
              <variable doc="" name="isSyncing" />
              <variable doc="" name="successful" />
              <variable doc="" name="details" />
              <variable doc="" name="cancelled" />
            </scope>
            <scope doc="" ilk="function" name="cancel">
              <variable doc="" name="cancelled" />
            </scope>
            <scope doc="Applications call this method from their after getting a &amp;amp;quot;download&amp;amp;quot; event in dojox.off.sync.onSync to signal that they are finished downloading any data that should be available offline" ilk="function" name="finishedDownloading" signature="finishedDownloading(successful,errorMessage)">
              <variable citdl="boolean" doc="Whether our downloading was successful or not. If not present, defaults to true." ilk="argument" name="successful" />
              <variable citdl="String" doc="If unsuccessful, a message explaining why" ilk="argument" name="errorMessage" />
              <variable citdl="boolean?" doc="Whether our downloading was successful or not. If not present, defaults to true." name="successful" />
              <variable doc="" name="error" />
            </scope>
            <scope doc="" ilk="function" name="start" />
            <scope doc="" ilk="function" name="refreshFiles">
              <variable doc="" name="error" />
              <variable doc="" name="successful" />
            </scope>
            <scope doc="" ilk="function" name="upload" />
            <scope doc="" ilk="function" name="download" />
            <scope doc="" ilk="function" name="finished">
              <variable doc="" name="isSyncing" />
              <variable doc="" name="successful" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_save" signature="_save(callback)">
              <variable ilk="argument" name="callback" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_load" signature="_load(callback)">
              <variable ilk="argument" name="callback" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="ui">
            <scope doc="" name="appName" />
            <scope doc="" name="autoEmbed" />
            <scope doc="" name="autoEmbedID" />
            <scope doc="" name="runLink" />
            <scope doc="" name="runLinkTitle" />
            <scope doc="" name="learnHowPath" />
            <scope doc="" name="customLearnHowPath" />
            <scope doc="" name="htmlTemplatePath" />
            <scope doc="" name="cssTemplatePath" />
            <scope doc="" name="onlineImagePath" />
            <scope doc="" name="offlineImagePath" />
            <scope doc="" name="rollerImagePath" />
            <scope doc="" name="checkmarkImagePath" />
            <scope doc="" name="learnHowJSPath" />
            <scope attributes="private" doc="" name="_initialized" />
            <scope doc="A function that should be connected to allow your application to know when Dojo Offline, the page, and the Offline Widget are all initialized and ready to be used:  dojo.connect(dojox.off.ui, &amp;amp;quot;onLoad&amp;amp;quot;, someFunc)" ilk="function" name="onLoad" />
            <scope attributes="private" doc="" ilk="function" name="_initialize">
              <variable doc="" name="runLinkText" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_doAutoEmbed" />
            <scope attributes="private" doc="" ilk="function" name="_templateLoaded" signature="_templateLoaded(data)">
              <variable ilk="argument" name="data" />
              <variable attributes="private" doc="" name="_initialized" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_testNet" />
            <scope attributes="private" doc="" ilk="function" name="_updateNetIndicator" />
            <scope attributes="private" doc="" ilk="function" name="_initLearnHow" />
            <scope attributes="private" doc="" ilk="function" name="_validateAppName" signature="_validateAppName(appName)">
              <variable ilk="argument" name="appName" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_updateSyncUI" />
            <scope attributes="private" doc="" ilk="function" name="_setSyncMessage" signature="_setSyncMessage(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_clearSyncMessage" />
            <scope attributes="private" doc="" ilk="function" name="_initImages" />
            <scope attributes="private" doc="" ilk="function" name="_showDetails" signature="_showDetails(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_cancel" signature="_cancel(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_needsBrowserRestart" />
            <scope attributes="private" doc="" ilk="function" name="_showNeedsOfflineCache" />
            <scope attributes="private" doc="" ilk="function" name="_hideNeedsOfflineCache" />
            <scope attributes="private" doc="" ilk="function" name="_initMainEvtHandlers" />
            <scope attributes="private" doc="" ilk="function" name="_setOfflineEnabled" signature="_setOfflineEnabled(enabled)">
              <variable ilk="argument" name="enabled" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_syncFinished" />
            <scope attributes="private" doc="" ilk="function" name="_onFrameworkEvent" signature="_onFrameworkEvent(type,saveData)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="saveData" />
              <variable attributes="private" doc="" name="_userInformed" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onSync" signature="_onSync(type)">
              <variable ilk="argument" name="type" />
            </scope>
            <scope attributes="private" doc="Called when we go on- or off-line" ilk="function" name="_onNetwork" signature="_onNetwork(type)">
              <variable citdl="String" doc="&amp;amp;quot;online&amp;amp;quot; if we just moved online, and &amp;amp;quot;offline&amp;amp;quot; if we just moved offline." ilk="argument" name="type" />
            </scope>
          </variable>
        </variable>
        <variable attributes="private" citdl="Object" doc="objects to support Dojo Offline (dojox.off)" name="_sql" />
        <variable citdl="Object" doc="Cryptography in JS. DEPRECATED: use dojox.encoding instead." name="crypto" />
        <variable citdl="Object" doc="A simple, experimental PowerPoint-like presentation project" name="presentation" />
        <variable citdl="Object" doc="Additional pre-made regular expressions for use" name="regexp">
          <variable citdl="Object" doc="" name="ca">
            <scope doc="" ilk="function" name="postalCode" />
            <scope doc="a regular expression to match Canadian Province Abbreviations" ilk="function" name="province" />
          </variable>
          <scope attributes="private" doc="" ilk="function" name="emailAddress" returns="String" signature="emailAddress(flags)">
            <variable citdl="Object" ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Builds a regular expression that matches a list of email addresses." ilk="function" name="emailAddressList" returns="String" signature="emailAddressList(flags)">
            <variable citdl="Object" doc="An object. flags.listSeparator The character used to separate email addresses. Default is &amp;amp;quot;;&amp;amp;quot;, &amp;amp;quot;,&amp;amp;quot;, &amp;amp;quot;\n&amp;amp;quot; or &amp;amp;quot; &amp;amp;quot;. flags in regexp.emailAddress can be applied. flags in regexp.host can be applied. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Builds a RE that matches a host" ilk="function" name="host" returns="String" signature="host(flags)">
            <variable citdl="Object" doc="An object. flags.allowNamed Allow a named host for local networks. Default is false. flags.allowIP Allow an IP address for hostname. Default is true. flags.allowLocal Allow the host to be &amp;amp;quot;localhost&amp;amp;quot;. Default is false. flags.allowPort Allow a port number to be present. Default is true. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Builds a RE that matches an IP Address" ilk="function" name="ipAddress" returns="String" signature="ipAddress(flags)">
            <variable citdl="Object" ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Builds a regular expression to match any sort of number based format" ilk="function" name="numberFormat" returns="String" signature="numberFormat(flags)">
            <variable citdl="Object" doc="An object flags.format A string or an Array of strings for multiple formats." ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Builds a RE that matches a top-level domain" ilk="function" name="tld" returns="String" signature="tld(flags)">
            <variable citdl="Object" doc="flags.allowCC Include 2 letter country code domains. Default is true. flags.allowGeneric Include the generic domains. Default is true. flags.allowInfra Include infrastructure domains. Default is true." ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Builds a regular expression that matches a URL" ilk="function" name="url" returns="&amp;quot;; } return &amp;quot;&amp;quot;; }" signature="url(flags)">
            <variable citdl="Object" doc="An object flags.scheme Can be true, false, or [true, false]. This means: required, not allowed, or match either one. flags in regexp.host can be applied. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." ilk="argument" name="flags" />
          </scope>
          <variable citdl="Object" doc="" name="us">
            <scope attributes="private" doc="A regular expression to match US state and territory abbreviations  flags An object. flags.allowTerritories Allow Guam, Puerto Rico, etc. Default is true. flags.allowMilitary Allow military &apos;states&apos;, e.g. Armed Forces Europe (AE). Default is true." ilk="function" name="state" returns="String" signature="state(flags)">
              <variable citdl="Object" ilk="argument" name="flags" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="" name="storage">
          <scope doc="" ilk="function" name="AirDBStorageProvider">
            <scope doc="" name="DATABASE_FILE" />
            <scope doc="" name="TABLE_NAME" />
            <variable doc="" name="initialized" />
            <variable attributes="private" doc="" name="_db" />
            <scope doc="" ilk="function" name="initialize" />
            <scope attributes="private" doc="" ilk="function" name="_sql" signature="_sql(query,params)">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="params" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_beginTransaction" />
            <scope attributes="private" doc="" ilk="function" name="_commitTransaction" />
            <scope doc="" ilk="function" name="isAvailable" />
            <scope doc="" ilk="function" name="put" signature="put(key,value,resultsHandler,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="get" signature="get(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getNamespaces" />
            <scope doc="" ilk="function" name="getKeys" signature="getKeys(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="clear" signature="clear(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="remove" signature="remove(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="putMultiple" signature="putMultiple(keys,values,resultsHandler,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getMultiple" signature="getMultiple(keys,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="removeMultiple" signature="removeMultiple(keys,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="isPermanent" />
            <scope doc="" ilk="function" name="getMaximumSize" />
            <scope doc="" ilk="function" name="hasSettingsUI" />
            <scope doc="" ilk="function" name="showSettingsUI" />
            <scope doc="" ilk="function" name="hideSettingsUI" />
            <variable attributes="private" doc="" name="_statusHandler" />
          </scope>
          <scope doc="" ilk="function" name="AirEncryptedLocalStorageProvider">
            <scope doc="" ilk="function" name="initialize" />
            <scope doc="" ilk="function" name="isAvailable" />
            <scope attributes="private" doc="" ilk="function" name="_getItem" signature="_getItem(key)">
              <variable ilk="argument" name="key" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setItem" signature="_setItem(key,value)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_removeItem" signature="_removeItem(key)">
              <variable ilk="argument" name="key" />
            </scope>
            <scope doc="" ilk="function" name="put" signature="put(key,value,resultsHandler,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="get" signature="get(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getNamespaces" />
            <scope doc="" ilk="function" name="getKeys" signature="getKeys(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="clear" signature="clear(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="remove" signature="remove(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="putMultiple" signature="putMultiple(keys,values,resultsHandler,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getMultiple" signature="getMultiple(keys,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="removeMultiple" signature="removeMultiple(keys,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="isPermanent" />
            <scope doc="" ilk="function" name="getMaximumSize" />
            <scope doc="" ilk="function" name="hasSettingsUI" />
            <scope doc="" ilk="function" name="showSettingsUI" />
            <scope doc="" ilk="function" name="hideSettingsUI" />
            <variable attributes="private" doc="" name="_statusHandler" />
          </scope>
          <scope doc="" ilk="function" name="AirFileStorageProvider">
            <variable doc="" name="initialized" />
            <scope attributes="private" doc="" name="_storagePath" />
            <scope doc="" ilk="function" name="initialize" />
            <scope doc="" ilk="function" name="isAvailable" />
            <scope doc="" ilk="function" name="put" signature="put(key,value,resultsHandler,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="get" signature="get(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getNamespaces" />
            <scope doc="" ilk="function" name="getKeys" signature="getKeys(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="clear" signature="clear(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="remove" signature="remove(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="putMultiple" signature="putMultiple(keys,values,resultsHandler,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getMultiple" signature="getMultiple(keys,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="removeMultiple" signature="removeMultiple(keys,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="isPermanent" />
            <scope doc="" ilk="function" name="getMaximumSize" />
            <scope doc="" ilk="function" name="hasSettingsUI" />
            <scope doc="" ilk="function" name="showSettingsUI" />
            <scope doc="" ilk="function" name="hideSettingsUI" />
            <variable attributes="private" doc="" name="_statusHandler" />
          </scope>
          <scope doc="" ilk="function" name="FlashStorageProvider">
            <variable doc="" name="initialized" />
            <variable attributes="private" doc="" name="_available" />
            <variable attributes="private" doc="" name="_statusHandler" />
            <variable attributes="private" doc="" name="_flashReady" />
            <variable attributes="private" doc="" name="_pageReady" />
            <scope doc="" ilk="function" name="initialize" />
            <scope doc="" ilk="function" name="setFlushDelay" signature="setFlushDelay(newDelay)">
              <variable ilk="argument" name="newDelay" />
            </scope>
            <scope doc="" ilk="function" name="getFlushDelay" />
            <scope doc="" ilk="function" name="flush" signature="flush(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="isAvailable" />
            <scope doc="" ilk="function" name="put" signature="put(key,value,resultsHandler,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="putMultiple" signature="putMultiple(keys,values,resultsHandler,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="get" signature="get(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getMultiple" signature="getMultiple(keys,namespace)">
              <variable citdl="array" ilk="argument" name="keys" />
              <variable citdl="string" ilk="argument" name="namespace" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_destringify" signature="_destringify(results)">
              <variable ilk="argument" name="results" />
            </scope>
            <scope doc="" ilk="function" name="getKeys" signature="getKeys(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getNamespaces" />
            <scope doc="" ilk="function" name="clear" signature="clear(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="remove" signature="remove(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="removeMultiple" signature="removeMultiple(keys,namespace)">
              <variable citdl="array" ilk="argument" name="keys" />
              <variable citdl="string" ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="isPermanent" />
            <scope doc="" ilk="function" name="getMaximumSize" />
            <scope doc="" ilk="function" name="hasSettingsUI" />
            <scope doc="" ilk="function" name="showSettingsUI" />
            <scope doc="" ilk="function" name="hideSettingsUI" />
            <scope doc="" ilk="function" name="getResourceList" />
            <scope attributes="private" doc="" ilk="function" name="_loaded" />
            <scope attributes="private" doc="" ilk="function" name="_onStatus" signature="_onStatus(statusResult,key,namespace)">
              <variable ilk="argument" name="statusResult" />
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <variable attributes="private" doc="" name="_allNamespaces" />
          </scope>
          <scope doc="Storage provider that uses the features of Google Gears to store data (it is saved into the local SQL database provided by Gears, using dojox.sql)" ilk="function" name="GearsStorageProvider">
            <variable doc="" name="TABLE_NAME" />
            <variable doc="" name="initialized" />
            <variable attributes="private" doc="" name="_available" />
            <variable attributes="private" doc="" name="_storageReady" />
            <scope doc="" ilk="function" name="initialize" />
            <scope doc="" ilk="function" name="isAvailable" />
            <scope doc="" ilk="function" name="put" signature="put(key,value,resultsHandler,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="get" signature="get(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getNamespaces" />
            <scope doc="" ilk="function" name="getKeys" signature="getKeys(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="clear" signature="clear(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="remove" signature="remove(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="putMultiple" signature="putMultiple(keys,values,resultsHandler,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getMultiple" signature="getMultiple(keys,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="removeMultiple" signature="removeMultiple(keys,namespace)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="isPermanent" />
            <scope doc="" ilk="function" name="getMaximumSize" />
            <scope doc="" ilk="function" name="hasSettingsUI" />
            <scope doc="" ilk="function" name="showSettingsUI" />
            <scope doc="" ilk="function" name="hideSettingsUI" />
            <scope attributes="private" doc="" ilk="function" name="_initStorage" />
            <variable attributes="private" doc="" name="_statusHandler" />
          </scope>
          <scope doc="A singleton for working with dojox.storage." ilk="function" name="Provider">
            <scope citdl="String" doc="Flag that indicates a put() call to a storage provider was succesful." name="SUCCESS" />
            <scope citdl="String" doc="Flag that indicates a put() call to a storage provider failed." name="FAILED" />
            <scope citdl="String" doc="Flag that indicates a put() call to a storage provider is pending user approval." name="PENDING" />
            <scope citdl="String" doc="Returned by getMaximumSize() if this storage provider can not determine the maximum amount of data it can support." name="SIZE_NOT_AVAILABLE" />
            <scope citdl="String" doc="Returned by getMaximumSize() if this storage provider has no theoretical limit on the amount of data it can store." name="SIZE_NO_LIMIT" />
            <scope citdl="String" doc="The namespace for all storage operations. This is useful if several applications want access to the storage system from the same domain but want different storage silos." name="DEFAULT_NAMESPACE" />
            <scope doc="If a function is assigned to this property, then when the settings provider&apos;s UI is closed this function is called. Useful, for example, if the user has just cleared out all storage for this provider using the settings UI, and you want to update your UI." ilk="function" name="onHideSettingsUI" />
            <scope doc="Allows this storage provider to initialize itself. This is called after the page has finished loading, so you can not do document.writes(). Storage Provider subclasses should initialize themselves inside of here rather than in their function constructor." ilk="function" name="initialize" />
            <scope doc="" ilk="function" name="isAvailable" />
            <scope doc="Puts a key and value into this storage system." ilk="function" name="put" signature="put(key,value,resultsHandler,namespace)">
              <variable citdl="string" doc="A string key to use when retrieving this value in the future." ilk="argument" name="key" />
              <variable citdl="object" doc="A value to store; this can be any JavaScript type." ilk="argument" name="value" />
              <variable citdl="function" doc="A callback function that will receive three arguments. The first argument is one of three values: dojox.storage.SUCCESS, dojox.storage.FAILED, or dojox.storage.PENDING; these values determine how the put request went. In some storage systems users can deny a storage request, resulting in a dojox.storage.FAILED, while in other storage systems a storage request must wait for user approval, resulting in a dojox.storage.PENDING status until the request is either approved or denied, resulting in another call back with dojox.storage.SUCCESS. The second argument in the call back is the key name that was being stored. The third argument in the call back is an optional message that details possible error messages that might have occurred during the storage process." ilk="argument" name="resultsHandler" />
              <variable citdl="string" doc="Optional string namespace that this value will be placed into; if left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE" ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="get" signature="get(key,namespace)">
              <variable citdl="string" ilk="argument" name="key" />
              <variable citdl="string" ilk="argument" name="namespace" />
            </scope>
            <scope attributes="private" doc="Determines whether the storage has the given key." ilk="function" name="hasKey" returns="Boolean" signature="hasKey(key,namespace)">
              <variable citdl="string" ilk="argument" name="key" />
              <variable citdl="string" ilk="argument" name="namespace" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="getKeys" returns="Boolean" signature="getKeys(namespace)">
              <variable citdl="string" ilk="argument" name="namespace" />
            </scope>
            <scope doc="Completely clears this storage system of all of it&apos;s values and keys. If &apos;namespace&apos; is provided just clears the keys in that namespace." ilk="function" name="clear" signature="clear(namespace)">
              <variable citdl="string" ilk="argument" name="namespace" />
            </scope>
            <scope doc="Removes the given key from this storage system." ilk="function" name="remove" signature="remove(key,namespace)">
              <variable citdl="string" ilk="argument" name="key" />
              <variable citdl="string" ilk="argument" name="namespace" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="getNamespaces" returns="Boolean" />
            <scope attributes="private" doc="" ilk="function" name="isPermanent" returns="Boolean" />
            <scope attributes="private" doc="" ilk="function" name="getMaximumSize" returns="Boolean" />
            <scope doc="Puts multiple keys and values into this storage system." ilk="function" name="putMultiple" signature="putMultiple(keys,values,resultsHandler,namespace)">
              <variable citdl="array" doc="An array of string keys to use when retrieving this value in the future, one per value to be stored" ilk="argument" name="keys" />
              <variable citdl="array" doc="An array of values to store; this can be any JavaScript type, though the performance of plain strings is considerably better" ilk="argument" name="values" />
              <variable citdl="function" doc="A callback function that will receive three arguments. The first argument is one of three values: dojox.storage.SUCCESS, dojox.storage.FAILED, or dojox.storage.PENDING; these values determine how the put request went. In some storage systems users can deny a storage request, resulting in a dojox.storage.FAILED, while in other storage systems a storage request must wait for user approval, resulting in a dojox.storage.PENDING status until the request is either approved or denied, resulting in another call back with dojox.storage.SUCCESS. The second argument in the call back is the key name that was being stored. The third argument in the call back is an optional message that details possible error messages that might have occurred during the storage process." ilk="argument" name="resultsHandler" />
              <variable citdl="string" doc="Optional string namespace that this value will be placed into; if left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE" ilk="argument" name="namespace" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="getMultiple" returns="Boolean" signature="getMultiple(keys,namespace)">
              <variable citdl="array" ilk="argument" name="keys" />
              <variable citdl="string" ilk="argument" name="namespace" />
            </scope>
            <scope doc="Removes the given keys from this storage system." ilk="function" name="removeMultiple" signature="removeMultiple(keys,namespace)">
              <variable citdl="array" ilk="argument" name="keys" />
              <variable citdl="string" ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="isValidKeyArray" signature="isValidKeyArray(keys)">
              <variable ilk="argument" name="keys" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="hasSettingsUI" returns="Boolean" />
            <scope doc="If this provider has a settings UI, determined by calling hasSettingsUI(), it is shown." ilk="function" name="showSettingsUI" />
            <scope doc="If this provider has a settings UI, hides it." ilk="function" name="hideSettingsUI" />
            <scope attributes="private" doc="" ilk="function" name="isValidKey" returns="Boolean" signature="isValidKey(keyName)">
              <variable citdl="string" ilk="argument" name="keyName" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="getResourceList" returns="Boolean" />
          </scope>
          <scope doc="Storage provider that uses WHAT Working Group features in Firefox 2 to achieve permanent storage." ilk="function" name="WhatWGStorageProvider">
            <variable doc="" name="initialized" />
            <variable attributes="private" doc="" name="_domain" />
            <variable attributes="private" doc="" name="_available" />
            <variable attributes="private" doc="" name="_statusHandler" />
            <scope attributes="private" doc="" name="_allNamespaces" />
            <scope attributes="private" doc="" name="_storageEventListener" />
            <scope doc="" ilk="function" name="initialize" />
            <scope doc="" ilk="function" name="isAvailable" />
            <scope doc="" ilk="function" name="put" signature="put(key,value,resultsHandler,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="resultsHandler" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="get" signature="get(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="getNamespaces" />
            <scope doc="" ilk="function" name="getKeys" signature="getKeys(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="clear" signature="clear(namespace)">
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="remove" signature="remove(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope doc="" ilk="function" name="isPermanent" />
            <scope doc="" ilk="function" name="getMaximumSize" />
            <scope doc="" ilk="function" name="hasSettingsUI" />
            <scope doc="" ilk="function" name="showSettingsUI" />
            <scope doc="" ilk="function" name="hideSettingsUI" />
            <scope doc="" ilk="function" name="getFullKey" signature="getFullKey(key,namespace)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="namespace" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getDomain" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_common" />
          <scope doc="A singleton class in charge of the dojox.storage system" ilk="function" name="manager">
            <scope name="initialized" />
            <variable citdl="Object" doc="The storage provider that was automagically chosen to do storage on this platform, such as dojox.storage.FlashStorageProvider." name="currentProvider">
              <variable doc="" name="declaredClass" />
            </variable>
            <variable doc="" name="available" />
            <variable doc="" name="providers" />
            <variable attributes="private" doc="" name="_initialized" />
            <variable attributes="private" doc="" name="_onLoadListeners" />
            <variable doc="Initializes the storage system and autodetects the best storage provider we can provide on this platform" ilk="function" name="initialize" />
            <variable doc="Registers the existence of a new storage provider; used by subclasses to inform the manager of their existence. The storage manager will select storage providers based on their ordering, so the order in which you call this method matters." ilk="function" name="register" signature="register(name,instance)">
              <variable citdl="string" doc="The full class name of this provider, such as &amp;amp;quot;dojox.storage.FlashStorageProvider&amp;amp;quot;." ilk="argument" name="name" />
              <variable citdl="Object" doc="An instance of this provider, which we will use to call isAvailable() on.  keep list of providers as a list so that we can know what order storage providers are preferred; also, store the providers hashed by name in case someone wants to get a provider that uses a particular storage backend" ilk="argument" name="instance" />
            </variable>
            <variable doc="Instructs the storageManager to use the given storage class for all storage requests." ilk="function" name="setProvider" signature="setProvider(storageClass)">
              <variable ilk="argument" name="storageClass" />
            </variable>
            <variable doc="Autodetects the best possible persistent storage provider available on this platform.  console.debug(&amp;amp;quot;dojox.storage.manager.autodetect&amp;amp;quot;);" ilk="function" name="autodetect" />
            <variable doc="" ilk="function" name="isAvailable" />
            <variable doc="" ilk="function" name="addOnLoad" signature="addOnLoad(func)">
              <variable ilk="argument" name="func" />
            </variable>
            <variable doc="" ilk="function" name="removeOnLoad" signature="removeOnLoad(func)">
              <variable ilk="argument" name="func" />
            </variable>
            <variable doc="" ilk="function" name="isInitialized" />
            <variable doc="" ilk="function" name="supportsProvider" signature="supportsProvider(storageClass)">
              <variable citdl="string" ilk="argument" name="storageClass" />
            </variable>
            <variable doc="" ilk="function" name="getProvider" />
            <variable doc="The storage provider should call this method when it is loaded and ready to be used. Clients who will use the provider will connect to this method to know when they can use the storage system. You can either use dojo.connect to connect to this function, or can use dojox.storage.manager.addOnLoad() to add a listener that does not depend on the dojo.event package." ilk="function" name="loaded" />
            <variable attributes="private" doc="" ilk="function" name="_fireLoaded" />
            <variable doc="Returns a list of whatever resources are necessary for storage providers to work." ilk="function" name="getResourceList" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="string">
          <variable citdl="Object" doc="" name="BidiComplex">
            <scope doc="Attach key listeners to the INPUT field to accomodate dynamic complex BiDi expressions" ilk="function" name="attachInput" signature="attachInput(field,pattern)">
              <variable citdl="DOMNode" doc="INPUT DOM node" ilk="argument" name="field" />
              <variable citdl="String" doc="Complex Expression Pattern type. One of &amp;amp;quot;FILE_PATH&amp;amp;quot;, &amp;amp;quot;URL&amp;amp;quot;, &amp;amp;quot;EMAIL&amp;amp;quot;, &amp;amp;quot;XPATH&amp;amp;quot;" ilk="argument" name="pattern" />
            </scope>
            <scope doc="Create the display string by adding the Unicode direction Markers" ilk="function" name="createDisplayString" signature="createDisplayString(str,pattern)">
              <variable citdl="String" ilk="argument" name="str" />
              <variable citdl="String" doc="Complex Expression Pattern type. One of &amp;amp;quot;FILE_PATH&amp;amp;quot;, &amp;amp;quot;URL&amp;amp;quot;, &amp;amp;quot;EMAIL&amp;amp;quot;, &amp;amp;quot;XPATH&amp;amp;quot;" ilk="argument" name="pattern" />
            </scope>
            <scope attributes="private" doc="removes all Unicode directional markers from the string" ilk="function" name="stripSpecialCharacters" returns="String" signature="stripSpecialCharacters(str)">
              <variable ilk="argument" name="str" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_ceKeyDown" signature="_ceKeyDown(event)">
              <variable ilk="argument" name="event" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_ceKeyUp" signature="_ceKeyUp(event)">
              <variable ilk="argument" name="event" />
            </scope>
            <scope attributes="private" doc="This function strips the unicode directional controls when the text copied to the Clipboard" ilk="function" name="_processCopy" signature="_processCopy(elem,text,isReverse)">
              <variable ilk="argument" name="elem" />
              <variable ilk="argument" name="text" />
              <variable ilk="argument" name="isReverse" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_ceCopyText" signature="_ceCopyText(elem)">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_ceCutText" signature="_ceCutText(elem)">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getCaretPos" signature="_getCaretPos(event,elem)">
              <variable ilk="argument" name="event" />
              <variable ilk="argument" name="elem" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setSelectedRange" signature="_setSelectedRange(elem,selectionStart,selectionEnd)">
              <variable ilk="argument" name="elem" />
              <variable ilk="argument" name="selectionStart" />
              <variable ilk="argument" name="selectionEnd" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_parse" signature="_parse(str,pattern)">
              <variable citdl="String" ilk="argument" name="str" />
              <variable citdl="String" ilk="argument" name="pattern" />
            </scope>
          </variable>
          <scope attributes="private" doc="A fast buffer for creating large strings." ilk="function" name="Builder" returns="dojox.string.Builder|String" signature="Builder(str)">
            <variable citdl="String" ilk="argument" name="str" />
            <variable doc="" name="length" />
            <variable attributes="private" doc="Append all arguments to the end of the buffer" ilk="function" name="append" returns="dojox.string.Builder" signature="append(s)">
              <variable citdl="String" ilk="argument" name="s">
                <scope name="repeating" />
              </variable>
            </variable>
            <variable attributes="private" doc="Alias for append." ilk="function" name="concat" returns="dojox.string.Builder" signature="concat(s)">
              <variable citdl="String" ilk="argument" name="s">
                <scope name="repeating" />
              </variable>
            </variable>
            <variable attributes="private" doc="" ilk="function" name="appendArray" returns="dojox.string.Builder" signature="appendArray(strings)">
              <variable citdl="Array" ilk="argument" name="strings" />
            </variable>
            <variable attributes="private" doc="Remove all characters from the buffer." ilk="function" name="clear" returns="dojox.string.Builder" />
            <variable attributes="private" doc="Replace instances of one string with another in the buffer." ilk="function" name="replace" returns="dojox.string.Builder" signature="replace(oldStr,newStr)">
              <variable citdl="String" ilk="argument" name="oldStr" />
              <variable citdl="String" ilk="argument" name="newStr" />
            </variable>
            <variable attributes="private" doc="Remove len characters starting at index start. If len is not provided, the end of the string is assumed." ilk="function" name="remove" returns="dojox.string.Builder" signature="remove(start,len)">
              <variable citdl="Number" ilk="argument" name="start" />
              <variable citdl="Number" ilk="argument" name="len" />
            </variable>
            <variable attributes="private" doc="Insert string str starting at index." ilk="function" name="insert" returns="dojox.string.Builder" signature="insert(index,str)">
              <variable citdl="Number" ilk="argument" name="index" />
              <variable citdl="String" ilk="argument" name="str" />
            </variable>
            <variable attributes="private" doc="Return the string representation of the internal buffer." ilk="function" name="toString" returns="String" />
          </scope>
          <scope doc="" ilk="function" name="sprintf" signature="sprintf(format,filler)">
            <variable citdl="String" ilk="argument" name="format" />
            <variable citdl="mixed" ilk="argument" name="filler">
              <scope name="repeating" />
            </variable>
            <scope doc="" ilk="function" name="Formatter" signature="Formatter(format)">
              <variable citdl="String" ilk="argument" name="format" />
              <variable attributes="private" doc="" name="_mapped" />
              <variable attributes="private" doc="" name="_format" />
              <variable attributes="private" doc="" name="_tokens" />
              <scope attributes="private" doc="" name="_re" />
              <scope attributes="private" doc="" ilk="function" name="_parseDelim" signature="_parseDelim(mapping,intmapping,flags,minWidth,period,precision,specifier)">
                <variable ilk="argument" name="mapping" />
                <variable ilk="argument" name="intmapping" />
                <variable ilk="argument" name="flags" />
                <variable ilk="argument" name="minWidth" />
                <variable ilk="argument" name="period" />
                <variable ilk="argument" name="precision" />
                <variable ilk="argument" name="specifier" />
              </scope>
              <variable attributes="private" citdl="Object" doc="" name="_specifiers">
                <variable citdl="Object" doc="" name="b">
                  <scope doc="" name="base" />
                  <scope doc="" name="isInt" />
                </variable>
                <variable citdl="Object" doc="" name="o">
                  <scope doc="" name="base" />
                  <scope doc="" name="isInt" />
                </variable>
                <variable citdl="Object" doc="" name="x">
                  <scope doc="" name="base" />
                  <scope doc="" name="isInt" />
                </variable>
                <variable citdl="Object" doc="" name="X">
                  <scope doc="" name="extend" />
                  <scope doc="" name="toUpper" />
                </variable>
                <variable citdl="Object" doc="" name="d">
                  <scope doc="" name="base" />
                  <scope doc="" name="isInt" />
                </variable>
                <variable citdl="Object" doc="" name="i">
                  <scope doc="" name="extend" />
                </variable>
                <variable citdl="Object" doc="" name="u">
                  <scope doc="" name="extend" />
                  <scope doc="" name="isUnsigned" />
                </variable>
                <variable citdl="Object" doc="" name="c">
                  <scope doc="" ilk="function" name="setArg" signature="setArg(token)">
                    <variable ilk="argument" name="token" />
                  </scope>
                </variable>
                <variable citdl="Object" doc="" name="s">
                  <scope doc="" ilk="function" name="setMaxWidth" signature="setMaxWidth(token)">
                    <variable ilk="argument" name="token" />
                  </scope>
                </variable>
                <variable citdl="Object" doc="" name="e">
                  <scope doc="" name="isDouble" />
                  <scope doc="" name="doubleNotation" />
                </variable>
                <variable citdl="Object" doc="" name="E">
                  <scope doc="" name="extend" />
                  <scope doc="" name="toUpper" />
                </variable>
                <variable citdl="Object" doc="" name="f">
                  <scope doc="" name="isDouble" />
                  <scope doc="" name="doubleNotation" />
                </variable>
                <variable citdl="Object" doc="" name="F">
                  <scope doc="" name="extend" />
                </variable>
                <variable citdl="Object" doc="" name="g">
                  <scope doc="" name="isDouble" />
                  <scope doc="" name="doubleNotation" />
                </variable>
                <variable citdl="Object" doc="" name="G">
                  <scope doc="" name="extend" />
                  <scope doc="" name="toUpper" />
                </variable>
              </variable>
              <scope doc="" ilk="function" name="format" signature="format(filler)">
                <variable citdl="mixed" ilk="argument" name="filler">
                  <scope name="repeating" />
                </variable>
              </scope>
              <scope attributes="private" doc="" name="_zeros10" />
              <scope attributes="private" doc="" name="_spaces10" />
              <scope doc="" ilk="function" name="formatInt" signature="formatInt(token)">
                <variable ilk="argument" name="token" />
              </scope>
              <scope doc="" ilk="function" name="formatDouble" signature="formatDouble(token)">
                <variable ilk="argument" name="token" />
              </scope>
              <scope doc="" ilk="function" name="zeroPad" signature="zeroPad(token,length)">
                <variable ilk="argument" name="token" />
                <variable citdl="Int" ilk="argument" name="length" />
              </scope>
              <scope doc="" ilk="function" name="fitField" signature="fitField(token)">
                <variable ilk="argument" name="token" />
              </scope>
              <scope doc="" ilk="function" name="spacePad" signature="spacePad(token,length)">
                <variable ilk="argument" name="token" />
                <variable citdl="Int" ilk="argument" name="length" />
              </scope>
            </scope>
          </scope>
          <scope doc="Split a string by a regular expression with the ability to capture the delimeters" ilk="function" name="tokenize" signature="tokenize(str,re,parseDelim,instance)">
            <variable citdl="String" ilk="argument" name="str" />
            <variable citdl="RegExp" ilk="argument" name="re" />
            <variable doc="Each group (excluding the 0 group) is passed as a parameter. If the function returns a value, it&apos;s added to the list of tokens." ilk="function" name="parseDelim" />
            <variable citdl="Object" doc="Used as the &amp;amp;quot;this&amp;amp;quot; instance when calling parseDelim" ilk="argument" name="instance" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="timing">
          <scope doc="This class provides functionality to really sequentialize function calls. You need to provide a list of functions and some parameters for each (like: pauseBefore) and they will be run one after another. This can be very useful for slideshows or alike things." ilk="function" name="Sequence">
            <variable attributes="private" citdl="Array" doc="The resolved sequence, for easier handling." name="_defsResolved" />
            <variable attributes="private" citdl="Integer" doc="The pause to wait before really going on." name="_goOnPause" />
            <variable attributes="private" doc="" name="_running" />
            <scope doc="Run the passed sequence definition" ilk="function" name="go" signature="go(defs,doneFunction)">
              <variable citdl="Array" doc="The sequence of actions" ilk="argument" name="defs" />
              <variable citdl="Function|Array" doc="The function to call when done" ilk="argument" name="doneFunction" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_go" />
            <scope doc="This method just provides a hook from the outside, so that an interrupted sequence can be continued." ilk="function" name="goOn" />
            <scope doc="Stop the currently running sequence." ilk="function" name="stop" />
            <variable attributes="private" doc="" name="_curId" />
          </scope>
          <scope doc="" ilk="function" name="Streamer" signature="Streamer(input,output,interval,minimum,initialData)">
            <variable citdl="function" ilk="argument" name="input" />
            <variable citdl="function" ilk="argument" name="output" />
            <variable citdl="int" ilk="argument" name="interval" />
            <variable citdl="int" ilk="argument" name="minimum" />
            <variable citdl="array" ilk="argument" name="initialData" />
            <variable doc="" name="interval" />
            <variable doc="" name="minimumSize" />
            <variable doc="" name="inputFunction" />
            <variable doc="" name="outputFunction" />
            <variable doc="" ilk="function" name="setInterval" signature="setInterval(ms)">
              <variable citdl="int" ilk="argument" name="ms" />
            </variable>
            <variable doc="" ilk="function" name="onTick" signature="onTick(obj)">
              <variable citdl="dojox.timing.Streamer" ilk="argument" name="obj" />
            </variable>
            <variable doc="" ilk="function" name="start" />
            <variable doc="" ilk="function" name="onStart" />
            <variable doc="" ilk="function" name="stop" />
            <variable doc="" ilk="function" name="onStop" />
          </scope>
          <variable citdl="Object" doc="" name="threadStates">
            <scope doc="" name="UNSTARTED" />
            <scope doc="" name="STOPPED" />
            <scope doc="" name="PENDING" />
            <scope doc="" name="RUNNING" />
            <scope doc="" name="SUSPENDED" />
            <scope doc="" name="WAITING" />
            <scope doc="" name="COMPLETE" />
            <scope doc="" name="ERROR" />
          </variable>
          <variable citdl="Object" doc="" name="threadPriorities">
            <scope doc="" name="LOWEST" />
            <scope doc="" name="BELOWNORMAL" />
            <scope doc="" name="NORMAL" />
            <scope doc="" name="ABOVENORMAL" />
            <scope doc="" name="HIGHEST" />
          </variable>
          <scope doc="" name="ThreadPool" />
          <scope doc="" ilk="function" name="Thread" signature="Thread(fn,priority)">
            <variable ilk="function" name="fn" />
            <variable citdl="dojox.timing.threadPriorities" ilk="argument" name="priority" />
            <variable doc="" name="state" />
            <variable doc="" name="priority" />
            <variable doc="" name="lastError" />
            <variable doc="" name="func" />
            <variable doc="" ilk="function" name="invoke" />
          </scope>
          <scope doc="Timer object executes an &amp;amp;quot;onTick()&amp;amp;quot; method repeatedly at a specified interval. repeatedly at a given interval." ilk="function" name="Timer" signature="Timer(interval)">
            <variable citdl="int" doc="Interval between function calls, in milliseconds." ilk="argument" name="interval" />
            <variable doc="" name="timer" />
            <variable doc="" name="isRunning" />
            <variable citdl="Interval" doc="between function calls, in milliseconds." name="interval" />
            <variable doc="" name="onStart" />
            <variable doc="" name="onStop" />
            <scope doc="Method called every time the interval passes. Override to do something useful." ilk="function" name="onTick" />
            <scope doc="Reset the interval of a timer, whether running or not." ilk="function" name="setInterval" signature="setInterval(interval)">
              <variable citdl="New" doc="interval, in milliseconds." ilk="argument" name="interval" />
              <scope citdl="New" doc="interval, in milliseconds." name="interval" />
            </scope>
            <scope doc="Start the timer ticking." ilk="function" name="start" />
            <scope doc="Stop the timer." ilk="function" name="stop" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <scope attributes="private" doc="Check if a parameter is ready, and if not, &amp;amp;quot;do later&amp;amp;quot;. doLater will ping the parameter until it evaluates to something (truthy). It thens calls the caller with original arguments, using the supplied context or window." ilk="function" name="doLater" returns="Boolean" signature="doLater(conditional,context,interval)">
            <variable citdl="anything" doc="Can be a property that eventually gets set, or an expression, method... anything that can be evaluated." ilk="argument" name="conditional" />
            <variable citdl="Object" doc="Object The namespace where the call originated. Defaults to global and anonymous functions" ilk="argument" name="context" />
            <variable citdl="Number" doc="Number Poll time to check conditional in Milliseconds" ilk="argument" name="interval" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="uuid">
          <scope doc="This is the constructor for the Uuid class. The Uuid class offers methods for inspecting existing UUIDs." ilk="function" name="Uuid" signature="Uuid(input)">
            <variable citdl="String" doc="A 36-character string that conforms to the UUID spec. examples: var uuid; uuid = new dojox.uuid.Uuid(&amp;amp;quot;3b12f1df-5232-4804-897e-917bf397618a&amp;amp;quot;); uuid = new dojox.uuid.Uuid(); // &amp;amp;quot;00000000-0000-0000-0000-000000000000&amp;amp;quot; uuid = new dojox.uuid.Uuid(dojox.uuid.generateRandomUuid()); uuid = new dojox.uuid.Uuid(dojox.uuid.generateTimeBasedUuid()); dojox.uuid.Uuid.setGenerator(dojox.uuid.generateRandomUuid); uuid = new dojox.uuid.Uuid(); dojox.uuid.assert(!uuid.isEqual(dojox.uuid.NIL_UUID));" ilk="argument" name="input" />
            <variable attributes="private" doc="" name="_uuidString" />
            <scope attributes="private" doc="Compares this UUID to another UUID, and returns 0, 1, or -1." ilk="function" name="compare" returns="integer (either 0, 1, or -1)" signature="compare(uuidOne,uuidTwo,otherUuid)">
              <variable citdl="dojox.uuid.Uuid" doc="Any object that has toString() method that returns a 36-character string that conforms to the UUID spec." ilk="argument" name="uuidOne" />
              <variable citdl="dojox.uuid.Uuid" ilk="argument" name="uuidTwo" />
              <variable citdl="dojox.uuid.Uuid" doc="Any object that has toString() method that returns a 36-character string that conforms to the UUID spec." ilk="argument" name="otherUuid" />
            </scope>
            <scope doc="Sets the default generator, which will be used by the &amp;amp;quot;new dojox.uuid.Uuid()&amp;amp;quot; constructor if no parameters are passed in." ilk="function" name="setGenerator" signature="setGenerator(generator)">
              <variable doc="A UUID generator function, such as dojox.uuid.generateTimeBasedUuid." ilk="function" name="generator" />
            </scope>
            <scope attributes="private" doc="Returns the default generator. See setGenerator()." ilk="function" name="getGenerator" returns="generator (A UUID generator, such as dojox.uuid.TimeBasedGenerator)." />
            <scope attributes="private" doc="This method returns a standard 36-character string representing the UUID, such as &amp;amp;quot;3b12f1df-5232-4804-897e-917bf397618a&amp;amp;quot;." ilk="function" name="toString" returns="string" />
            <scope attributes="private" doc="Returns true if this UUID is equal to the otherUuid, or false otherwise." ilk="function" name="isEqual" returns="boolean" signature="isEqual(otherUuid)">
              <variable citdl="dojox.uuid.Uuid" doc="Any object that has toString() method that returns a 36-character string that conforms to the UUID spec." ilk="argument" name="otherUuid" />
            </scope>
            <scope doc="Returns true if the UUID was initialized with a valid value." ilk="function" name="isValid" />
            <scope doc="Returns a variant code that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.variant values." ilk="function" name="getVariant" />
            <scope attributes="private" doc="Returns a version number that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.version values." ilk="function" name="getVersion" returns="dojox.uuid.version">
              <variable name="exceptions" />
            </scope>
            <variable attributes="private" doc="" name="_versionNumber" />
            <scope attributes="private" doc="If this is a version 1 UUID (a time-based UUID), getNode() returns a 12-character string with the &amp;amp;quot;node&amp;amp;quot; or &amp;amp;quot;pseudonode&amp;amp;quot; portion of the UUID, which is the rightmost 12 characters." ilk="function" name="getNode" returns="String (a 12-character string, which will look something like &amp;quot;917bf397618a&amp;quot;)">
              <variable name="exceptions" />
            </scope>
            <variable attributes="private" doc="" name="_nodeString" />
            <scope attributes="private" doc="If this is a version 1 UUID (a time-based UUID), this method returns the timestamp value encoded in the UUID. The caller can ask for the timestamp to be returned either as a JavaScript Date object or as a 15-character string of hex digits." ilk="function" name="getTimestamp" returns="String (e.g. &amp;quot;Mon, 16 Jan 2006 20:21:41 GMT&amp;quot;)|String (e.g. &amp;quot;1da86cdb4308fb0&amp;quot;)|no returnType was specified, so default to Date|Date" signature="getTimestamp(returnType)">
              <variable citdl="String" doc="Any of these five values: &amp;amp;quot;string&amp;amp;quot;, String, &amp;amp;quot;hex&amp;amp;quot;, &amp;amp;quot;date&amp;amp;quot;, Date" ilk="argument" name="returnType" />
              <variable name="return_summary" />
              <variable name="exceptions" />
            </scope>
            <variable attributes="private" doc="" name="_timestampAsHexString" />
            <variable attributes="private" doc="" name="_timestampAsDate" />
          </scope>
          <variable citdl="Object" doc="" name="version">
            <scope doc="" name="UNKNOWN" />
            <scope doc="" name="TIME_BASED" />
            <scope doc="" name="DCE_SECURITY" />
            <scope doc="" name="NAME_BASED_MD5" />
            <scope doc="" name="RANDOM" />
            <scope doc="" name="NAME_BASED_SHA1" />
          </variable>
          <variable citdl="Object" doc="" name="variant">
            <scope doc="" name="NCS" />
            <scope doc="" name="DCE" />
            <scope doc="" name="MICROSOFT" />
            <scope doc="" name="UNKNOWN" />
          </variable>
          <scope doc="Throws an exception if the assertion fails." ilk="function" name="assert" signature="assert(booleanValue,message)">
            <variable citdl="Boolean" doc="Must be true for the assertion to succeed." ilk="argument" name="booleanValue" />
            <variable citdl="String" doc="A string describing the assertion. throws: Throws an Error if &apos;booleanValue&apos; is false." ilk="argument" name="message" />
          </scope>
          <scope attributes="private" doc="This function returns the Nil UUID: &amp;amp;quot;00000000-0000-0000-0000-000000000000&amp;amp;quot;." ilk="function" name="generateNilUuid" returns="String" />
          <scope attributes="private" doc="Returns true if the UUID was initialized with a valid value." ilk="function" name="isValid" returns="boolean" signature="isValid(uuidString)">
            <variable citdl="String" ilk="argument" name="uuidString" />
          </scope>
          <scope attributes="private" doc="Returns a variant code that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.variant values." ilk="function" name="getVariant" returns="dojox.uuid.variant" signature="getVariant(uuidString)">
            <variable citdl="String" ilk="argument" name="uuidString" />
          </scope>
          <scope attributes="private" doc="Returns a version number that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.version values." ilk="function" name="getVersion" returns="dojox.uuid.version" signature="getVersion(uuidString)">
            <variable citdl="String" ilk="argument" name="uuidString" />
            <variable name="exceptions" />
          </scope>
          <scope attributes="private" doc="If this is a version 1 UUID (a time-based UUID), getNode() returns a 12-character string with the &amp;amp;quot;node&amp;amp;quot; or &amp;amp;quot;pseudonode&amp;amp;quot; portion of the UUID, which is the rightmost 12 characters." ilk="function" name="getNode" returns="String (a 12-character string, which will look something like &amp;quot;917bf397618a&amp;quot;)" signature="getNode(uuidString)">
            <variable citdl="String" ilk="argument" name="uuidString" />
            <variable name="exceptions" />
          </scope>
          <scope attributes="private" doc="If this is a version 1 UUID (a time-based UUID), this method returns the timestamp value encoded in the UUID. The caller can ask for the timestamp to be returned either as a JavaScript Date object or as a 15-character string of hex digits." ilk="function" name="getTimestamp" returns="String (e.g. &amp;quot;Mon, 16 Jan 2006 20:21:41 GMT&amp;quot;)|String (e.g. &amp;quot;1da86cdb4308fb0&amp;quot;)|no returnType was specified, so default to Date|Date" signature="getTimestamp(uuidString,returnType)">
            <variable citdl="String" ilk="argument" name="uuidString" />
            <variable citdl="String" doc="Any of these five values: &amp;amp;quot;string&amp;amp;quot;, String, &amp;amp;quot;hex&amp;amp;quot;, &amp;amp;quot;date&amp;amp;quot;, Date" ilk="argument" name="returnType" />
            <variable name="return_summary" />
            <variable name="exceptions" />
          </scope>
          <scope doc="" name="NIL_UUID" />
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <scope attributes="private" doc="This function generates random UUIDs, meaning &amp;amp;quot;version 4&amp;amp;quot; UUIDs." ilk="function" name="generateRandomUuid" returns="for example: &amp;quot;3B12F1DF&amp;quot;|String" />
          <scope attributes="private" doc="This function generates time-based UUIDs, meaning &amp;amp;quot;version 1&amp;amp;quot; UUIDs." ilk="function" name="generateTimeBasedUuid" returns="String" signature="generateTimeBasedUuid(node)">
            <variable citdl="String" doc="A 12-character hex string representing either a pseudo-node or hardware-node (an IEEE 802.3 network node). A hardware-node will be something like &amp;amp;quot;017bf397618a&amp;amp;quot;, always with the first bit being 0. A pseudo-node will be something like &amp;amp;quot;f17bf397618a&amp;amp;quot;, always with the first bit being 1. examples: string = dojox.uuid.generateTimeBasedUuid(); string = dojox.uuid.generateTimeBasedUuid(&amp;amp;quot;017bf397618a&amp;amp;quot;); dojox.uuid.generateTimeBasedUuid.setNode(&amp;amp;quot;017bf397618a&amp;amp;quot;); string = dojox.uuid.generateTimeBasedUuid(); // the generated UUID has node == &amp;amp;quot;017bf397618a&amp;amp;quot;" ilk="argument" name="node" />
            <scope attributes="private" doc="" ilk="function" name="isValidNode" returns="Boolean" signature="isValidNode(node)">
              <variable citdl="String" ilk="argument" name="node" />
            </scope>
            <scope doc="Sets the &apos;node&apos; value that will be included in generated UUIDs." ilk="function" name="setNode" signature="setNode(node)">
              <variable citdl="String" doc="A 12-character hex string representing a pseudoNode or hardwareNode." ilk="argument" name="node" />
              <variable attributes="private" doc="" name="_uniformNode" />
            </scope>
            <scope attributes="private" doc="Returns the &apos;node&apos; value that will be included in generated UUIDs." ilk="function" name="getNode" returns="String (a 12-character hex string representing a pseudoNode or hardwareNode)" />
            <scope attributes="private" doc="" ilk="function" name="_generator" returns="String|Boolean|String (a 12-character hex string representing a pseudoNode or hardwareNode)|Array with 4 elements, each of which is a 16-bit number.|string|String (an 8-character hex string)|String (a 36 character string, which will look something like &amp;quot;b4308fb0-86cd-11da-a72b-0800200c9a66&amp;quot;)">
              <scope name="initialized" />
              <variable doc="" name="GREGORIAN_CHANGE_OFFSET_IN_HOURS" />
              <variable attributes="private" doc="Generates a time-based UUID, meaning a version 1 UUID." ilk="function" name="generateUuidString" returns="String (a 36 character string, which will look something like &amp;quot;b4308fb0-86cd-11da-a72b-0800200c9a66&amp;quot;)" signature="generateUuidString(node)">
                <variable citdl="String" doc="An optional 12-character string to use as the node in the new UUID." ilk="argument" name="node" />
              </variable>
            </scope>
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="validate">
          <variable citdl="Object" doc="Module which includes Canadian-specific methods for dojox.validate" name="ca">
            <scope attributes="private" doc="Validates Canadian 10-digit phone number for several common formats" ilk="function" name="isPhoneNumber" returns="Boolean" signature="isPhoneNumber(value)">
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Validates Canadian province abbreviations (2 characters)" ilk="function" name="isProvince" returns="Boolean" signature="isProvince(value)">
              <variable citdl="String[2]" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Validates Canadian 9 digit social insurance number for several common formats" ilk="function" name="isSocialInsuranceNumber" returns="Boolean" signature="isSocialInsuranceNumber(value)">
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Validates Canadian 6 digit postal code" ilk="function" name="isPostalCode" returns="Boolean" signature="isPostalCode(value)">
              <variable ilk="argument" name="value" />
            </scope>
          </variable>
          <variable citdl="Object" doc="Module provides validation functions for Credit Cards, using account number rules in conjunction with the Luhn algorigthm, with a plugable card info database." name="creditCard" />
          <variable attributes="private" citdl="Object" doc="" name="_isInRangeCache" />
          <scope attributes="private" doc="Checks if a string has non whitespace characters. Parameters allow you to constrain the length." ilk="function" name="isText" returns="Boolean" signature="isText(value,flags)">
            <variable citdl="String" doc="A string" ilk="argument" name="value" />
            <variable citdl="Object" doc="length: Number, minlength: Number, maxlength: Number} flags.length If set, checks if there are exactly flags.length number of characters. flags.minlength If set, checks if there are at least flags.minlength number of characters. flags.maxlength If set, checks if there are at most flags.maxlength number of characters." ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Validates whether a string denoting a number is between a max and min." ilk="function" name="isInRange" returns="Boolean" signature="isInRange(value,flags)">
            <variable citdl="String" doc="A string" ilk="argument" name="value" />
            <variable citdl="Object" doc="max:Number, min:Number, decimal:String} flags.max A number, which the value must be less than or equal to for the validation to be true. flags.min A number, which the value must be greater than or equal to for the validation to be true. flags.decimal The character used for the decimal point. Default is &amp;amp;quot;.&amp;amp;quot;." ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Validates any sort of number based format" ilk="function" name="isNumberFormat" returns="Boolean" signature="isNumberFormat(value,flags)">
            <variable citdl="String" doc="A string" ilk="argument" name="value" />
            <variable citdl="Object" doc="FIXME: make pseudo-object for this format: String  flags.format A string or an Array of strings for multiple formats." ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Validate a String value against the Luhn algorithm." ilk="function" name="isValidLuhn" returns="Boolean" signature="isValidLuhn(value)">
            <variable citdl="String" ilk="argument" name="value" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <scope attributes="private" doc="validates user input of an HTML form based on input profile" ilk="function" name="check" returns="Object" signature="check(form,profile)">
            <variable citdl="HTMLFormElement" doc="form to be validated" ilk="argument" name="form" />
            <variable citdl="Object" ilk="argument" name="profile" />
          </scope>
          <scope attributes="private" doc="Evaluates dojo.validate.check() constraints that are specified as array arguments" ilk="function" name="evaluateConstraint" returns="Boolean" signature="evaluateConstraint(profile,constraint,fieldName,elem)">
            <variable citdl="The" doc="dojo.validate.check() profile that this evaluation is against." ilk="argument" name="profile" />
            <variable citdl="Array" doc="The single [] array of function and arguments for the function." ilk="argument" name="constraint" />
            <variable citdl="The" doc="form dom name of the field being validated." ilk="argument" name="fieldName" />
            <variable citdl="The" doc="form element field." ilk="argument" name="elem" />
          </scope>
          <variable attributes="private" citdl="Object" doc="A dictionary list of credit card abbreviations" name="_cardInfo" />
          <scope doc="Validate a credit card number by type with Luhn checking." ilk="function" name="isValidCreditCard" signature="isValidCreditCard(value,ccType)">
            <variable citdl="String|Int" doc="A Value (credit card number) to validate" ilk="argument" name="value" />
            <variable citdl="String" doc="A credit-card abbreviation." ilk="argument" name="ccType" />
          </scope>
          <scope attributes="private" doc="Checks if value matches the pattern for that card or any card types if none is specified" ilk="function" name="isValidCreditCardNumber" returns="boolean|String | boolean" signature="isValidCreditCardNumber(value,ccType)">
            <variable citdl="String|Int" doc="CC #, white spaces and dashes are ignored" ilk="argument" name="value" />
            <variable citdl="String" doc="One of the abbreviation values in `dojox.validate._cardInfo` -- if Omitted, function returns a `|` delimited string of matching card types, or false if no matches found." ilk="argument" name="ccType" />
          </scope>
          <scope attributes="private" doc="Validate the security code (CCV) for a passed credit-card type." ilk="function" name="isValidCvv" returns="Boolean" signature="isValidCvv(value,ccType)">
            <variable citdl="String|Int" ilk="argument" name="value" />
            <variable citdl="String" ilk="argument" name="ccType" />
          </scope>
          <scope attributes="private" doc="Validate ISBN-10 or ISBN-13 based on the length of value" ilk="function" name="isValidIsbn" returns="Boolean" signature="isValidIsbn(value)">
            <variable citdl="String" doc="An ISBN to validate" ilk="argument" name="value" />
            <variable name="return_summary" />
          </scope>
          <variable citdl="Object" doc="" name="isbn" />
          <variable citdl="Object" doc="" name="regexp">
            <variable citdl="Object" doc="" name="ca">
              <scope doc="String regular Express to match Canadain Postal Codes" ilk="function" name="postalCode" />
              <scope doc="a regular expression to match Canadian Province Abbreviations" ilk="function" name="province" />
            </variable>
            <variable citdl="Object" doc="" name="us">
              <scope attributes="private" doc="" ilk="function" name="state" returns="String|&amp;quot;; } return &amp;quot;&amp;quot;; }" signature="state(flags)">
                <variable citdl="Object" ilk="argument" name="flags" />
              </scope>
            </variable>
            <scope attributes="private" doc="Builds a RE that matches an IP Address" ilk="function" name="ipAddress" returns="String" signature="ipAddress(flags)">
              <variable citdl="Object" ilk="argument" name="flags" />
            </scope>
            <scope attributes="private" doc="Builds a RE that matches a host" ilk="function" name="host" returns="String" signature="host(flags)">
              <variable citdl="Object" ilk="argument" name="flags" />
            </scope>
            <scope attributes="private" doc="Builds a regular expression that matches a URL" ilk="function" name="url" returns="String|&amp;quot;; } return &amp;quot;&amp;quot;; }" signature="url(flags)">
              <variable citdl="Object" ilk="argument" name="flags" />
            </scope>
            <scope attributes="private" doc="Builds a regular expression that matches an email address" ilk="function" name="emailAddress" returns="String|&amp;quot;; } return &amp;quot;&amp;quot;; }" signature="emailAddress(flags)">
              <variable citdl="Object" ilk="argument" name="flags" />
            </scope>
            <scope attributes="private" doc="Builds a regular expression that matches a list of email addresses." ilk="function" name="emailAddressList" returns="String|&amp;quot;; } return &amp;quot;&amp;quot;; }" signature="emailAddressList(flags)">
              <variable citdl="Object" ilk="argument" name="flags" />
            </scope>
            <scope attributes="private" doc="Builds a regular expression to match any sort of number based format" ilk="function" name="numberFormat" returns="String|&amp;quot;; } return &amp;quot;&amp;quot;; }" signature="numberFormat(flags)">
              <variable citdl="Object" ilk="argument" name="flags" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="us">
            <scope attributes="private" doc="Validates US state and territory abbreviations." ilk="function" name="isState" returns="Boolean" signature="isState(value,flags)">
              <variable citdl="String" doc="A two character string" ilk="argument" name="value" />
              <variable citdl="Object" doc="An object flags.allowTerritories Allow Guam, Puerto Rico, etc. Default is true. flags.allowMilitary Allow military &apos;states&apos;, e.g. Armed Forces Europe (AE). Default is true." ilk="argument" name="flags" />
            </scope>
            <scope attributes="private" doc="Validates 10 US digit phone number for several common formats" ilk="function" name="isPhoneNumber" returns="Boolean" signature="isPhoneNumber(value)">
              <variable citdl="String" doc="The telephone number string" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Validates social security number" ilk="function" name="isSocialSecurityNumber" returns="Boolean" signature="isSocialSecurityNumber(value)">
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Validates U.S. zip-code" ilk="function" name="isZipCode" returns="Boolean" signature="isZipCode(value)">
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
          </variable>
          <scope attributes="private" doc="Validates an IP address" ilk="function" name="isIpAddress" returns="Boolean" signature="isIpAddress(value,flags)">
            <variable citdl="String" ilk="argument" name="value" />
            <variable citdl="Object" ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Checks if a string could be a valid URL" ilk="function" name="isUrl" returns="Boolean" signature="isUrl(value,flags)">
            <variable citdl="String" doc="A string" ilk="argument" name="value" />
            <variable citdl="Object" doc="An object flags.scheme Can be true, false, or [true, false]. This means: required, not allowed, or either. flags in regexp.host can be applied. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Checks if a string could be a valid email address" ilk="function" name="isEmailAddress" returns="Boolean" signature="isEmailAddress(value,flags)">
            <variable citdl="String" doc="A string" ilk="argument" name="value" />
            <variable citdl="Object" doc="An object flags.allowCruft Allow address like &amp;amp;lt;mailto:foo@yahoo.com&amp;amp;gt;. Default is false. flags in regexp.host can be applied. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Checks if a string could be a valid email address list.  value A string. flags An object. flags.listSeparator The character used to separate email addresses. Default is &amp;amp;quot;;&amp;amp;quot;, &amp;amp;quot;,&amp;amp;quot;, &amp;amp;quot;\n&amp;amp;quot; or &amp;amp;quot; &amp;amp;quot;. flags in regexp.emailAddress can be applied. flags in regexp.host can be applied. flags in regexp.ipAddress can be applied. flags in regexp.tld can be applied." ilk="function" name="isEmailAddressList" returns="Boolean" signature="isEmailAddressList(value,flags)">
            <variable citdl="String" ilk="argument" name="value" />
            <variable citdl="Object" ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="Check if value is an email address list. If an empty list is returned, the value didn&apos;t pass the test or it was empty." ilk="function" name="getEmailAddressList" returns="Array" signature="getEmailAddressList(value,flags)">
            <variable citdl="String" doc="A string" ilk="argument" name="value" />
            <variable citdl="Object" doc="An object (same as dojo.validate.isEmailAddressList)" ilk="argument" name="flags" />
          </scope>
          <variable citdl="Object" doc="" name="web" />
        </variable>
        <variable citdl="Object" doc="" name="widget">
          <variable citdl="Object" doc="" name="gauge">
            <scope doc="" ilk="function" name="AnalogLineIndicator">
              <scope attributes="private" doc="Private function for generating the shapes for this indicator. An indicator that behaves the same might override this one and simply replace the shapes (such as ArrowIndicator)." ilk="function" name="_getShapes" />
              <scope doc="Override of dojox.widget.gauge._Indicator.draw" ilk="function" name="draw" signature="draw(dontAnimate)">
                <variable citdl="Boolean" doc="Indicates if the drawing should not be animated (vs. the default of doing an animation)" ilk="argument" name="dontAnimate" />
              </scope>
              <scope attributes="private" doc="Moves this indicator (since it&apos;s already been drawn once)" ilk="function" name="_move" signature="_move(dontAnimate)">
                <variable citdl="Boolean" doc="Indicates if the drawing should not be animated (vs. the default of doing an animation)" ilk="argument" name="dontAnimate" />
              </scope>
              <variable doc="" name="text" />
              <variable doc="" name="color" />
              <variable doc="" name="length" />
              <variable doc="" name="width" />
              <variable doc="" name="offset" />
              <variable doc="" name="highlight" />
              <variable doc="" name="shapes" />
              <variable doc="" name="currentValue" />
            </scope>
            <scope doc="" ilk="function" name="BarLineIndicator">
              <variable doc="" name="width" />
              <scope attributes="private" doc="Private function for generating the shapes for this indicator. An indicator that behaves the same might override this one and simply replace the shapes (such as BarIndicator)." ilk="function" name="_getShapes" />
              <scope doc="Override of dojox.widget.gauge._Indicator.draw" ilk="function" name="draw" signature="draw(dontAnimate)">
                <variable citdl="Boolean" doc="Indicates if the drawing should not be animated (vs. the default of doing an animation)" ilk="argument" name="dontAnimate" />
              </scope>
              <scope attributes="private" doc="Moves this indicator (since it&apos;s already been drawn once)" ilk="function" name="_move" signature="_move(dontAnimate)">
                <variable citdl="Boolean" doc="Indicates if the drawing should not be animated (vs. the default of doing an animation)" ilk="argument" name="dontAnimate" />
              </scope>
              <variable doc="" name="shapes" />
              <variable doc="" name="text" />
              <variable doc="" name="color" />
              <variable doc="" name="length" />
              <variable doc="" name="offset" />
              <variable doc="" name="highlight" />
              <variable doc="" name="highlight2" />
              <variable doc="" name="currentValue" />
            </scope>
            <scope doc="" ilk="function" name="AnalogArcIndicator">
              <scope attributes="private" doc="" ilk="function" name="_createArc" signature="_createArc(val)">
                <variable ilk="argument" name="val" />
              </scope>
              <scope doc="Override of dojox.widget._Indicator.draw" ilk="function" name="draw" signature="draw(dontAnimate)">
                <variable citdl="Boolean" ilk="argument" name="dontAnimate" />
              </scope>
              <variable doc="" name="currentValue" />
              <variable doc="" name="shapes" />
            </scope>
            <scope doc="" ilk="function" name="AnalogArrowIndicator">
              <scope attributes="private" doc="Override of dojox.widget.AnalogLineIndicator._getShapes" ilk="function" name="_getShapes" />
            </scope>
            <scope doc="" ilk="function" name="AnalogNeedleIndicator">
              <scope attributes="private" doc="Override of dojox.widget.AnalogLineIndicator._getShapes" ilk="function" name="_getShapes" />
            </scope>
            <scope doc="" ilk="function" name="BarIndicator">
              <scope attributes="private" doc="Override of dojox.widget.BarLineIndicator._getShapes" ilk="function" name="_getShapes" />
              <scope attributes="private" doc="Creates a shallow copy of the current shapes while adjusting for the new value" ilk="function" name="_createShapes" signature="_createShapes(val)">
                <variable ilk="argument" name="val" />
              </scope>
              <scope attributes="private" doc="Override of dojox.widget.BarLineIndicator._move to resize the bar (rather than moving it)" ilk="function" name="_move" signature="_move(dontAnimate)">
                <variable citdl="Boolean" ilk="argument" name="dontAnimate" />
              </scope>
              <variable doc="" name="currentValue" />
            </scope>
            <scope doc="a gauge built using the dojox.gfx package." ilk="function" name="_Gauge">
              <scope citdl="The" doc="width of the mark length: The length of the mark interval: The interval the ticks should be added on color: The color of the mark and text font: an object with any/all of the following parameters: {family: &amp;amp;quot;Helvetica&amp;amp;quot;, style: &amp;amp;quot;italic&amp;amp;quot;, variant: &apos;small-caps&apos;, weight: &apos;bold&apos;, size: &amp;amp;quot;18pt&amp;amp;quot;}" name="width" />
              <scope citdl="Number" doc="the height of the gauge (default is 200)" name="height" />
              <variable citdl="Object" doc="the color of the background. This must be an object of one of two forms: {&apos;color&apos;: &apos;color-name&apos;} OR (for a gradient:) {&apos;type&apos;: &apos;linear&apos;, &apos;x1&apos;: 0, &apos;x2&apos;: 0, &apos;y1&apos;: 0, &apos;y2&apos;: 200, &apos;colors&apos;: [{offset: 0, color:&apos;#C0C0C0&apos;}, {offset: 1, color: &apos;#E0E0E0&apos;}] }" name="background" />
              <variable citdl="Number" doc="The minimum value of the gauge. Normally not set explicitly, as it will be determined by the ranges that are added." name="min" />
              <variable citdl="Number" doc="The maximum value of the gauge. Normally not set explicitly, as it will be determined by the ranges that are added." name="max" />
              <variable citdl="String" doc="background image for gauge (default is no image)" name="image" />
              <scope citdl="Number" doc="indicates whether to use given css classes (dojoxGaugeRangeXX) to determine the color (and other style attributes?) of the ranges this value should be the number of dojoxGaugeRange classes that are defined, starting at dojoxGaugeRange1 (0 indicates falling to default hardcoded colors)" name="useRangeStyles" />
              <scope citdl="Boolean" doc="indicates whether tooltips should be displayed for ranges, indicators, etc." name="useTooltip" />
              <variable citdl="Object" doc="An object representing the tick marks that should be added to the gauge. Major tick marks have a text label indicating the value. The object can have the following attributes (required are marked with a *): offset: the distance from the &apos;center&apos; of the gauge. Used differently for Analog vs. Bar" name="majorTicks" />
              <variable citdl="Object" doc="An object of the same format as majorTicks, indicating where the minor (label-less) marks should be placed The font parameter is ignored if provided since minor tick marks have no text label." name="minorTicks" />
              <scope attributes="private" citdl="Objection" doc="Should be overridden by any extending classes and used to indicate what the &apos;default&apos; indicator is. This object is used as the indicator when creating tick marks or when an anonmyous object is passed into addIndicator." name="_defaultIndicator" />
              <scope citdl="Array" doc="Set of default colors to color ranges with." name="defaultColors" />
              <variable citdl="Object" doc="The SVG/VML surface that the shapes are drawn on. Can be accessed/used by indicators to draw themselves" name="surface" />
              <scope citdl="Boolean" doc="indicates whether the text boxes showing the value of the indicator (as text content) should be hidden or shown. Default is not hidden, aka shown." name="hideValues" />
              <scope doc="" name="gaugeContent" />
              <scope doc="" name="templatePath" />
              <variable attributes="private" citdl="Object" doc="" name="_backgroundDefault">
                <scope doc="" name="color" />
              </variable>
              <variable attributes="private" doc="" name="_rangeData" />
              <variable attributes="private" doc="" name="_indicatorData" />
              <variable attributes="private" doc="" name="_drag" />
              <variable attributes="private" doc="" name="_img" />
              <variable attributes="private" doc="" name="_overOverlay" />
              <variable attributes="private" doc="" name="_lastHover" />
              <scope doc="" ilk="function" name="startup" />
              <scope attributes="private" doc="internal method used to clear existing tick marks, then add new ones" ilk="function" name="_setTicks" signature="_setTicks(oldTicks,newTicks,label)">
                <variable citdl="Object" ilk="argument" name="oldTicks" />
                <variable citdl="Object" ilk="argument" name="newTicks" />
                <variable citdl="Boolean" ilk="argument" name="label" />
              </scope>
              <scope doc="Creates and draws the minor tick marks based on the passed object (expecting the same format as the minorTicks object documented above)" ilk="function" name="setMinorTicks" signature="setMinorTicks(ticks)">
                <variable citdl="Object" ilk="argument" name="ticks" />
              </scope>
              <scope doc="Creates and draws the major tick marks based on the passed object (expecting the same format as the majorTicks object documented above)" ilk="function" name="setMajorTicks" signature="setMajorTicks(ticks)">
                <variable citdl="Object" ilk="argument" name="ticks" />
              </scope>
              <scope doc="" ilk="function" name="postCreate" />
              <scope doc="internal method used by the gauge to create the graphics surface area" ilk="function" name="createSurface" />
              <scope doc="This method is used to set the background of the gauge after it is created." ilk="function" name="setBackground" signature="setBackground(background)">
                <variable citdl="An" doc="object in one of the two forms: {&apos;color&apos;: &apos;color-name&apos;} OR (for a gradient:) {&apos;type&apos;: &apos;linear&apos;, &apos;colors&apos;: [{offset: 0, color:&apos;#C0C0C0&apos;}, {offset: 1, color: &apos;#E0E0E0&apos;}] } If background is null or undefined, this will set the fill to this._backgroundDefault" ilk="argument" name="background" />
                <scope citdl="An" doc="object in one of the two forms: {&apos;color&apos;: &apos;color-name&apos;} OR (for a gradient:) {&apos;type&apos;: &apos;linear&apos;, &apos;colors&apos;: [{offset: 0, color:&apos;#C0C0C0&apos;}, {offset: 1, color: &apos;#E0E0E0&apos;}] } If background is null or undefined, this will set the fill to this._backgroundDefault" name="background" />
              </scope>
              <scope doc="This method is used to add a range to the gauge." ilk="function" name="addRange" signature="addRange(range)">
                <variable citdl="Object" doc="A range is either a dojox.widget.gauge.Range object, or a object with similar parameters (low, high, hover, etc.)." ilk="argument" name="range" />
              </scope>
              <scope doc="This method is used to add ranges to the gauge." ilk="function" name="addRanges" signature="addRanges(ranges)">
                <variable citdl="Array" ilk="argument" name="ranges" />
              </scope>
              <scope doc="This method is used to add an indicator to the bar graph." ilk="function" name="addIndicator" signature="addIndicator(indicator)">
                <variable citdl="Object" doc="A dojox.widget.gauge._Indicator or an object with similar parameters (value, color, offset, etc.)." ilk="argument" name="indicator" />
              </scope>
              <scope doc="Removes the given indicator from the gauge by calling it&apos;s remove function and removing it from the local cache." ilk="function" name="removeIndicator" signature="removeIndicator(indicator)">
                <variable citdl="Object" ilk="argument" name="indicator" />
              </scope>
              <scope doc="This function is used to move an indicator the the front (top) of the gauge" ilk="function" name="moveIndicatorToFront" signature="moveIndicatorToFront(indicator)">
                <variable citdl="Object" doc="A dojox.widget.gauge._Indicator or an object with similar parameters (value, color, offset, etc.)." ilk="argument" name="indicator" />
              </scope>
              <scope doc="This function is used draw text onto the gauge. The text object is also returned by the function so that may be removed later by calling removeText" ilk="function" name="drawText" signature="drawText(txt,x,y,align,vAlign,color,font)">
                <variable citdl="String" doc="The text to be drawn" ilk="argument" name="txt" />
                <variable citdl="Number" doc="The x coordinate at which to place the text" ilk="argument" name="x" />
                <variable citdl="Number" doc="The y coordinate at which to place the text align?: String Indicates how to align the text Valid value is &apos;right&apos;, otherwise text is left-aligned vAlign?: String Indicates how to align the text vertically. Valid value is &apos;top&apos;, otherwise text is bottom-aligned color?: String Indicates the color of the text font?: Object A font object, generally of the following format: {family: &amp;amp;quot;Helvetica&amp;amp;quot;, style: &amp;amp;quot;italic&amp;amp;quot;, variant: &apos;small-caps&apos;, weight: &apos;bold&apos;, size: &amp;amp;quot;18pt&amp;amp;quot;}" ilk="argument" name="y" />
                <variable citdl="String" ilk="argument" name="align" />
                <variable citdl="String" ilk="argument" name="vAlign" />
                <variable citdl="String" ilk="argument" name="color" />
                <variable citdl="Object" ilk="argument" name="font" />
              </scope>
              <scope doc="" name="removeText" />
              <scope doc="Updates the tooltip for the gauge to display the given text." ilk="function" name="updateTooltip" signature="updateTooltip(txt,e)">
                <variable citdl="String" doc="The text to put in the tooltip." ilk="argument" name="txt" />
                <variable citdl="Event" ilk="argument" name="e" />
              </scope>
              <scope doc="This is an internal handler used by the gauge to support hover text" ilk="function" name="handleMouseOver" signature="handleMouseOver(event)">
                <variable citdl="Object" doc="The event object" ilk="argument" name="event" />
              </scope>
              <scope doc="This is an internal handler used by the gauge to support hover text" ilk="function" name="handleMouseOut" signature="handleMouseOut(event)">
                <variable citdl="Object" doc="The event object" ilk="argument" name="event" />
              </scope>
              <scope doc="This is an internal handler used by the gauge to support using the mouse to drag an indicator to modify it&apos;s value" ilk="function" name="handleMouseDown" signature="handleMouseDown(event)">
                <variable citdl="Object" ilk="argument" name="event" />
              </scope>
              <scope doc="This is an internal handler used by the gauge to support using the mouse to drag an indicator to modify it&apos;s value" ilk="function" name="handleMouseUp" signature="handleMouseUp(event)">
                <variable citdl="Object" doc="The event object" ilk="argument" name="event" />
              </scope>
              <scope doc="This is an internal handler used by the gauge to support using the mouse to drag an indicator to modify it&apos;s value" ilk="function" name="handleMouseMove" signature="handleMouseMove(event)">
                <variable citdl="Object" doc="The event object" ilk="argument" name="event" />
              </scope>
              <variable doc="" name="ranges" />
              <variable doc="" name="indicators" />
              <variable attributes="private" doc="" name="_background" />
            </scope>
            <scope doc="a range to be used in a _Gauge" ilk="function" name="Range">
              <scope citdl="Number" doc="the low value of the range" name="low" />
              <scope citdl="Numbe" doc="the high value of the range" name="high" />
              <scope citdl="String" doc="the text to put in the tooltip for the gauge" name="hover" />
              <variable citdl="Object" doc="the color of the range. This must be an object of one of two forms: {&apos;color&apos;: &apos;color-name&apos;} OR (for a gradient:) {&apos;type&apos;: &apos;linear&apos;, &apos;colors&apos;: [{offset: 0, color:&apos;#C0C0C0&apos;}, {offset: 1, color: &apos;#E0E0E0&apos;}] }" name="color" />
              <scope citdl="Number" doc="for a circular gauge (such as an AnalogGauge), this dictates the size of the arc" name="size" />
              <scope doc="" ilk="function" name="startup" />
            </scope>
            <scope doc="a indicator to be used in a gauge" name="_Indicator">
              <variable citdl="Number" doc="The value (on the gauge) that this indicator should be placed at" name="value" />
              <scope citdl="String" doc="The color of the indicator." name="color" />
              <scope citdl="String" doc="The text label for the indicator." name="label" />
              <variable citdl="Object" doc="" name="font">
                <scope doc="" name="family" />
                <scope doc="" name="size" />
              </variable>
              <scope citdl="Number" doc="The length of the indicator. In the above example, the radius of the AnalogGauge is 125, but the length of the indicator is 135, meaning it would project beyond the edge of the AnalogGauge" name="length" />
              <scope citdl="Number" doc="The width of the indicator." name="width" />
              <scope citdl="Number" doc="The offset of the indicator" name="offset" />
              <variable citdl="String" doc="The string to put in the tooltip when this indicator is hovered over." name="hover" />
              <scope citdl="boolean" doc="Keep this indicator at the front" name="front" />
              <variable citdl="String|Object" doc="indicates the easing function to be used when animating the of an indicator." name="easing" />
              <scope citdl="Number" doc="indicates how long an animation of the indicator should take" name="duration" />
              <scope doc="" name="hideValue" />
              <scope citdl="Boolean" doc="indicates whether the indicator&apos;s value can be changed. Useful for a static target indicator. Default is false (that the value can be changed)." name="noChange" />
              <scope attributes="private" doc="" name="_gauge" />
              <variable citdl="String" doc="The title of the indicator, to be displayed next to it&apos;s input box for the text-representation." name="title" />
              <scope doc="" name="templatePath" />
              <scope doc="" ilk="function" name="startup" />
              <scope doc="" ilk="function" name="postCreate" />
              <scope attributes="private" doc="A private function, handling the updating of the gauge" ilk="function" name="_update" signature="_update(event)">
                <variable ilk="argument" name="event" />
              </scope>
              <scope doc="Updates the value of the indicator, including moving/re-drawing at it&apos;s new location and updating the text box" ilk="function" name="update" signature="update(value)">
                <variable ilk="argument" name="value" />
              </scope>
              <variable doc="Handles updating the text box and the hover text while dragging an indicator" ilk="function" name="onDragMove" />
              <scope doc="Performs the initial drawing of the indicator." ilk="function" name="draw" signature="draw(dontAnimate)">
                <variable citdl="Boolean" doc="Indicates if the drawing should not be animated (rather than teh default, to animate)" ilk="argument" name="dontAnimate" />
              </scope>
              <scope doc="Removes the indicator&apos;s shapes from the gauge surface." ilk="function" name="remove" />
              <scope name="valueNode">
                <variable doc="" name="value" />
              </scope>
            </scope>
          </variable>
          <scope doc="a gauge built using the dojox.gfx package." ilk="function" name="AnalogGauge">
            <variable citdl="Number" doc="angle (in degrees) for start of gauge (default is -90)" name="startAngle" />
            <variable citdl="Number" doc="angle (in degrees) for end of gauge (default is 90)" name="endAngle" />
            <variable citdl="Number" doc="center of gauge x coordinate (default is gauge width / 2)" name="cx" />
            <variable citdl="Number" doc="center of gauge x coordinate (default is gauge height / 2)" name="cy" />
            <variable citdl="Number" doc="radius of gauge (default is smaller of cx-25 or cy-25)" name="radius" />
            <scope attributes="private" citdl="override" doc="of dojox.widget._Gauge._defaultIndicator" name="_defaultIndicator" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="This is a helper function used to determine the angle that represents a given value on the gauge" ilk="function" name="_getAngle" signature="_getAngle(value)">
              <variable citdl="Number" doc="A value to be converted to an angle for this gauage." ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="This is a helper function used to determie the value represented by a given angle on the gauge" ilk="function" name="_getValueForAngle" signature="_getValueForAngle(angle)">
              <variable citdl="Number" doc="A angle to be converted to a value for this gauge." ilk="argument" name="angle" />
            </scope>
            <scope attributes="private" doc="This is a helper function than converts degrees to radians" ilk="function" name="_getRadians" signature="_getRadians(angle)">
              <variable citdl="Number" doc="An angle, in degrees, to be converted to radians." ilk="argument" name="angle" />
            </scope>
            <scope attributes="private" doc="This is a helper function that converts radians to degrees" ilk="function" name="_getDegrees" signature="_getDegrees(radians)">
              <variable citdl="Number" doc="An angle, in radians, to be converted to degrees." ilk="argument" name="radians" />
            </scope>
            <scope doc="This function is used to draw (or redraw) the gauge." ilk="function" name="draw" />
            <scope doc="This function is used to draw (or redraw) a range" ilk="function" name="drawRange" signature="drawRange(range)">
              <variable citdl="Object" doc="A range is a dojox.widget.gauge.Range or an object with similar parameters (low, high, hover, etc.)." ilk="argument" name="range" />
            </scope>
            <scope doc="Determines which range the mouse is currently over" ilk="function" name="getRangeUnderMouse" signature="getRangeUnderMouse(event)">
              <variable citdl="Object" doc="The event object as received by the mouse handling functions below." ilk="argument" name="event" />
            </scope>
            <scope attributes="private" doc="Handles the dragging of an indicator, including moving/re-drawing get angle for mouse position" ilk="function" name="_dragIndicator" signature="_dragIndicator(widget,event)">
              <variable citdl="Object" ilk="argument" name="widget" />
              <variable citdl="Object" ilk="argument" name="event" />
            </scope>
            <variable attributes="private" doc="" name="_oppositeMiddle" />
          </scope>
          <scope doc="a bar graph built using the dojox.gfx package." ilk="function" name="BarGauge">
            <scope citdl="Number" doc="x position of data area (default 5)" name="dataX" />
            <scope citdl="Number" doc="y position of data area (default 5)" name="dataY" />
            <variable citdl="Number" doc="width of data area (default is bar graph width - 10)" name="dataWidth" />
            <variable citdl="Number" doc="height of data area (default is bar graph width - 10)" name="dataHeight" />
            <scope attributes="private" citdl="override" doc="of dojox.widget._Gauge._defaultIndicator" name="_defaultIndicator" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="This is a helper function used to determine the position that represents a given value on the bar graph" ilk="function" name="_getPosition" signature="_getPosition(value)">
              <variable citdl="Number" doc="A value to be converted to a position for this bar graph." ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="This is a helper function used to determine the value represented by a position on the bar graph" ilk="function" name="_getValueForPosition" signature="_getValueForPosition(pos)">
              <variable citdl="Number" doc="A position to be converted to a value." ilk="argument" name="pos" />
            </scope>
            <scope doc="This function is used to draw (or redraw) the bar graph" ilk="function" name="draw" />
            <scope doc="This function is used to draw (or redraw) a range" ilk="function" name="drawRange" signature="drawRange(range)">
              <variable citdl="Object" doc="A range is either a dojox.widget.gauge.Range or an object with similar parameters (low, high, hover, etc.)." ilk="argument" name="range" />
            </scope>
            <scope doc="Determines which range the mouse is currently over" ilk="function" name="getRangeUnderMouse" signature="getRangeUnderMouse(event)">
              <variable citdl="Object" doc="The event object as received by the mouse handling functions below." ilk="argument" name="event" />
            </scope>
            <scope attributes="private" doc="Handles the dragging of an indicator, including moving/re-drawing get new value based on mouse position" ilk="function" name="_dragIndicator" signature="_dragIndicator(widget,event)">
              <variable citdl="Object" ilk="argument" name="widget" />
              <variable citdl="Object" ilk="argument" name="event" />
            </scope>
          </scope>
          <scope doc="constructor for the widget" ilk="function" name="_CalendarBase">
            <scope citdl="URL" doc="the path to the template to be used to construct the widget." name="templatePath" />
            <variable attributes="private" citdl="Array" doc="The list of mixin views available on this calendar." name="_views" />
            <scope citdl="Boolean" doc="Specifies if visual effects should be applied to the widget. The default behavior of the widget does not contain any effects. The dojox.widget.CalendarFx package is needed for these." name="useFx" />
            <scope citdl="Boolean" doc="This widget is a container of other widgets, so this is true." name="widgetsInTemplate" />
            <variable citdl="Date" doc="the currently selected Date" name="value" />
            <scope doc="" name="constraints" />
            <scope citdl="String" doc="The date format of the date displayed in the footer. Can be &apos;short&apos;, &apos;medium&apos;, and &apos;long&apos;" name="footerFormat" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="Instantiates the mixin views" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="addFx" signature="addFx(query,fromNode)">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="fromNode" />
            </scope>
            <scope attributes="private" doc="set the current date and update the UI. If the date is disabled, the selection will not change, but the display will change to the corresponding month." ilk="function" name="_setValueAttr" signature="_setValueAttr(value)">
              <variable citdl="Date" ilk="argument" name="value" />
            </scope>
            <scope doc="May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`" ilk="function" name="isDisabledDate" signature="isDisabledDate(date,locale)">
              <variable citdl="Date" ilk="argument" name="date" />
              <variable citdl="String" ilk="argument" name="locale" />
            </scope>
            <scope doc="a date cell was selected. It may be the same as the previous value." ilk="function" name="onValueSelected" signature="onValueSelected(date)">
              <variable citdl="Date" ilk="argument" name="date" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onDateSelected" signature="_onDateSelected(date,formattedValue,force)">
              <variable ilk="argument" name="date" />
              <variable ilk="argument" name="formattedValue" />
              <variable ilk="argument" name="force" />
            </scope>
            <scope doc="called only when the selected date has changed" ilk="function" name="onChange" signature="onChange(date)">
              <variable citdl="Date" ilk="argument" name="date" />
            </scope>
            <scope doc="Transitions to the next view." ilk="function" name="onHeaderClick" signature="onHeaderClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="goToToday" />
            <scope attributes="private" doc="Animates the views to show one and hide another, in a vertical direction. If &apos;direction&apos; is 1, then the views slide upwards. If &apos;direction&apos; is -1, the views slide downwards." ilk="function" name="_transitionVert" signature="_transitionVert(direction)">
              <variable citdl="Number" ilk="argument" name="direction" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_updateTitleStyle" />
            <scope attributes="private" doc="Animates the horizontal sliding of a table." ilk="function" name="_slideTable" signature="_slideTable(widget,direction,callback)">
              <variable citdl="String" ilk="argument" name="widget" />
              <variable citdl="Number" ilk="argument" name="direction" />
              <variable ilk="function" name="callback" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_addView" signature="_addView(view)">
              <variable ilk="argument" name="view" />
            </scope>
            <scope attributes="private" doc="May be overridden to return CSS classes to associate with the date entry for the given dateObject, for example to indicate a holiday in specified locale." ilk="function" name="getClassForDate" returns="String" signature="getClassForDate(dateObject,locale)">
              <variable citdl="Date" ilk="argument" name="dateObject" />
              <variable citdl="String" ilk="argument" name="locale" />
            </scope>
            <scope attributes="private" doc="This function overrides the base function defined in dijit._Calendar. It changes the displayed years, months and days depending on the inputs." ilk="function" name="_adjustDisplay" signature="_adjustDisplay(part,amount,noSlide)">
              <variable citdl="String" ilk="argument" name="part" />
              <variable citdl="int" ilk="argument" name="amount" />
              <variable ilk="argument" name="noSlide" />
            </scope>
            <variable attributes="private" doc="" name="_height" />
            <variable doc="" name="displayMonth" />
            <variable attributes="private" doc="" name="_children" />
            <variable attributes="private" doc="" name="_currentChild" />
            <scope name="footer">
              <variable doc="" name="innerHTML" />
            </scope>
          </scope>
          <scope doc="Base implementation for all view mixins. All calendar views should extend this widget." ilk="function" name="_CalendarView">
            <scope doc="" name="headerClass" />
            <scope doc="" name="useHeader" />
            <scope doc="Clones all nodes with the class &apos;clazz&apos; in a widget" ilk="function" name="cloneClass" signature="cloneClass(clazz,n,before)">
              <variable ilk="argument" name="clazz" />
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="before" />
            </scope>
            <scope attributes="private" doc="sets the text inside a node" ilk="function" name="_setText" signature="_setText(node,text)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="text" />
            </scope>
            <scope doc="Returns the header node of a view. If none exists, an empty DIV is created and returned." ilk="function" name="getHeader" />
            <scope attributes="private" doc="" ilk="function" name="onValueSelected" returns="String" signature="onValueSelected(date)">
              <variable ilk="argument" name="date" />
            </scope>
            <scope doc="Adds or subtracts values from a date. The unit, e.g. &amp;amp;quot;day&amp;amp;quot;, &amp;amp;quot;month&amp;amp;quot; or &amp;amp;quot;year&amp;amp;quot;, is specified in the &amp;amp;quot;datePart&amp;amp;quot; property of the calendar view mixin." ilk="function" name="adjustDate" signature="adjustDate(date,amount)">
              <variable ilk="argument" name="date" />
              <variable ilk="argument" name="amount" />
            </scope>
            <scope doc="Stub function that can be used to tell a view when it is shown." ilk="function" name="onDisplay" />
            <scope doc="Stub function that can be used to tell a view it is about to be shown." ilk="function" name="onBeforeDisplay" />
            <scope doc="Stub function that can be used to tell a view when it is no longer shown." ilk="function" name="onBeforeUnDisplay" />
            <variable doc="" name="header" />
          </scope>
          <scope doc="Mixin for the dojox.widget.Calendar which provides the standard day-view. A single month is shown at a time." ilk="function" name="_CalendarDay">
            <scope doc="" name="parent" />
          </scope>
          <scope doc="View class for the dojox.widget.Calendar. Adds a view showing every day of a single month to the calendar. This should not be mixed in directly with dojox.widget._CalendarBase. Instead, use dojox.widget._CalendarDay" ilk="function" name="_CalendarDayView">
            <scope citdl="URL" doc="the path to the template to be used to construct the widget." name="templatePath" />
            <scope citdl="String" doc="Specifies how much to increment the displayed date when the user clicks the array button to increment of decrement the view." name="datePart" />
            <scope citdl="String" doc="Specifies the type of day name to display. &amp;amp;quot;narrow&amp;amp;quot; causes just one letter to be shown." name="dayWidth" />
            <scope doc="Constructs the calendar view." ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="onDisplay" />
            <scope attributes="private" doc="executed when a day value is clicked." ilk="function" name="_onDayClick" signature="_onDayClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" returns="String" signature="_setValueAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Fills the days of the current month." ilk="function" name="_populateDays" />
            <variable attributes="private" doc="" name="_addedFx" />
          </scope>
          <scope doc="Adds a dojox.widget._CalendarMonthView view to the calendar widget." ilk="function" name="_CalendarMonthYear" />
          <scope doc="A Calendar view listing the 12 months of the year" ilk="function" name="_CalendarMonthYearView">
            <scope citdl="URL" doc="the path to the template to be used to construct the widget." name="templatePath" />
            <scope citdl="String" doc="Specifies how much to increment the displayed date when the user clicks the array button to increment of decrement the view." name="datePart" />
            <scope doc="" name="displayedYears" />
            <scope doc="" name="useHeader" />
            <scope doc="Constructs the view" ilk="function" name="postCreate" />
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" signature="_setValueAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="getHeader" />
            <scope attributes="private" doc="Returns localized month names" ilk="function" name="_getMonthNames" signature="_getMonthNames(format)">
              <variable ilk="argument" name="format" />
            </scope>
            <scope attributes="private" doc="Populate the month names using the localized values." ilk="function" name="_populateMonths" />
            <scope attributes="private" doc="Fills the list of years with a range of 12 numbers, with the current year being the 6th number." ilk="function" name="_populateYears" signature="_populateYears(year)">
              <variable ilk="argument" name="year" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_updateSelectedYear" />
            <scope attributes="private" doc="" ilk="function" name="_updateSelectedMonth" />
            <scope attributes="private" doc="" ilk="function" name="_updateSelectedNode" signature="_updateSelectedNode(query,filter)">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="filter" />
            </scope>
            <scope doc="" ilk="function" name="onClick" signature="onClick(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope doc="" ilk="function" name="onOk" signature="onOk(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope doc="" ilk="function" name="onCancel" signature="onCancel(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <variable doc="" name="monthContainer" />
            <variable attributes="private" doc="" name="_decBtn" />
            <variable attributes="private" doc="" name="_incBtn" />
            <variable attributes="private" doc="" name="_cachedDate" />
            <variable attributes="private" doc="" name="_monthNames" />
            <variable attributes="private" doc="" name="_displayedYear" />
            <variable attributes="private" doc="" name="_year" />
            <variable attributes="private" doc="" name="_month" />
          </scope>
          <scope doc="A Calendar with two panes, the second one containing both month and year" ilk="function" name="Calendar2Pane" />
          <scope doc="The standard Calendar. It includes day and month/year views. No visual effects are included." ilk="function" name="Calendar" />
          <scope doc="A calendar with only a daily view." ilk="function" name="DailyCalendar" />
          <scope doc="A calendar with only a daily view." ilk="function" name="MonthAndYearlyCalendar" />
          <scope doc="" ilk="function" name="_FisheyeFX">
            <scope doc="" ilk="function" name="addFx" signature="addFx(query,fromNode)">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="fromNode" />
            </scope>
          </scope>
          <scope doc="The standard Calendar. It includes day, month and year views. FisheyeLite effects are included." ilk="function" name="CalendarFisheye" />
          <variable citdl="Object" doc="" name="CalendarFx" />
          <scope doc="Adds a dojox.widget._CalendarMonthView view to the calendar widget." ilk="function" name="_CalendarMonth" />
          <scope doc="A Calendar view listing the 12 months of the year" ilk="function" name="_CalendarMonthView">
            <scope citdl="URL" doc="the path to the template to be used to construct the widget." name="templatePath" />
            <scope citdl="String" doc="Specifies how much to increment the displayed date when the user clicks the array button to increment of decrement the view." name="datePart" />
            <scope citdl="String" doc="Specifies the CSS class to apply to the header node for this view." name="headerClass" />
            <scope doc="Constructs the view" ilk="function" name="postCreate" />
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" signature="_setValueAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" name="_getMonthNames" />
            <scope attributes="private" doc="" name="_populateMonths" />
            <scope doc="Handles clicks on month names" ilk="function" name="onClick" signature="onClick(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope name="header">
              <variable doc="" name="innerHTML" />
            </scope>
          </scope>
          <scope doc="Adds a dojox.widget._CalendarYearView view to the dojo.widget._CalendarBase widget." ilk="function" name="_CalendarYear">
            <scope doc="" name="parent" />
          </scope>
          <scope doc="A Calendar view listing 12 years" ilk="function" name="_CalendarYearView">
            <scope citdl="URL" doc="the path to the template to be used to construct the widget." name="templatePath" />
            <scope doc="" name="displayedYears" />
            <scope doc="Constructs the view" ilk="function" name="postCreate" />
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" signature="_setValueAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="" name="_populateYears" />
            <scope doc="Adjusts the value of a date. It moves it by 12 years each time." ilk="function" name="adjustDate" signature="adjustDate(date,amount)">
              <variable ilk="argument" name="date" />
              <variable ilk="argument" name="amount" />
            </scope>
            <scope doc="Handles clicks on year values." ilk="function" name="onClick" signature="onClick(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
          </scope>
          <scope doc="The Calendar includes day, month and year views. No visual effects are included." ilk="function" name="Calendar3Pane" />
          <scope doc="A calendar with only a month view." ilk="function" name="MonthlyCalendar" />
          <scope doc="A calendar with only a year view." ilk="function" name="YearlyCalendar" />
          <variable citdl="Object" doc="" name="CalendarViews" />
          <scope doc="a HSV color picker - similar to Photoshop picker" ilk="function" name="ColorPicker">
            <scope citdl="Boolean" doc="show/update RGB input nodes" name="showRgb" />
            <scope citdl="Boolean" doc="show/update HSV input nodes" name="showHsv" />
            <scope citdl="Boolean" doc="show/update Hex value field" name="showHex" />
            <scope citdl="Boolean" doc="deprecated? or just use a toggle to show/hide that node, too?" name="webSafe" />
            <scope citdl="Boolean" doc="toggle to use slideTo (true) or just place the cursor (false) on click" name="animatePoint" />
            <scope citdl="Integer" doc="time in ms picker node will slide to next location (non-dragging) when animatePoint=true" name="slideDuration" />
            <scope citdl="Boolean" doc="Set to true to fire onChange in an indeterminate way" name="liveUpdate" />
            <variable citdl="int" doc="Height of the hue picker, used to calculate positions" name="PICKER_HUE_H" />
            <variable citdl="int" doc="Height of the 2d picker, used to calculate positions" name="PICKER_SAT_VAL_H" />
            <variable citdl="int" doc="Width of the 2d picker, used to calculate positions" name="PICKER_SAT_VAL_W" />
            <variable citdl="String" doc="Default color for this component. Only hex values are accepted as incoming/returned values. Adjust this value with `.attr`, eg: dijit.byId(&amp;amp;quot;myPicker&amp;amp;quot;).attr(&amp;amp;quot;value&amp;amp;quot;, &amp;amp;quot;#ededed&amp;amp;quot;); to cause the points to adjust and the values to reflect the current color.    don&apos;t change to d.moduleUrl, build won&apos;t intern it." name="value" />
            <scope attributes="private" doc="" name="_underlay" />
            <scope doc="" name="templatePath" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_setValueAttr" signature="_setValueAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="Set a color on a picker. Usually used to set initial color as an alternative to passing defaultColor option to the constructor." ilk="function" name="setColor" signature="setColor(color,force)">
              <variable citdl="String" ilk="argument" name="color" />
              <variable ilk="argument" name="force" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setTimer" signature="_setTimer(mover)">
              <variable citdl="d.dnd.Mover" ilk="argument" name="mover" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_clearTimer" signature="_clearTimer(mover)">
              <variable citdl="d.dnd.Mover" ilk="argument" name="mover" />
            </scope>
            <scope attributes="private" doc="sets a natural color background for the underlay image against closest hue value (full saturation)" ilk="function" name="_setHue" signature="_setHue(h)">
              <variable citdl="Decimal" doc="0..360" ilk="argument" name="h" />
            </scope>
            <scope attributes="private" doc="update the previewNode color, and input values [optional]" ilk="function" name="_updateColor" />
            <scope attributes="private" doc="updates picker position and inputs according to rgb, hex or hsv input changes" ilk="function" name="_colorInputChange" signature="_colorInputChange(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="updates the value of the widget can cancel reverse onChange by specifying second param" ilk="function" name="_updateValue" signature="_updateValue(col,fireChange)">
              <variable citdl="dojox.color.Color" ilk="argument" name="col" />
              <variable citdl="Boolean" ilk="argument" name="fireChange" />
            </scope>
            <scope attributes="private" doc="update handles on the pickers acording to color values" ilk="function" name="_updatePickerLocations" signature="_updatePickerLocations(col)">
              <variable citdl="dojox.color.Color" ilk="argument" name="col" />
            </scope>
            <scope attributes="private" doc="updates color inputs that were changed through other inputs or by clicking on the picker" ilk="function" name="_updateColorInputs" signature="_updateColorInputs(col)">
              <variable citdl="dojox.color.Color" ilk="argument" name="col" />
            </scope>
            <scope attributes="private" doc="set the hue picker handle on relative y coordinates" ilk="function" name="_setHuePoint" signature="_setHuePoint(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="set our picker point based on relative x/y coordinates evt.preventDefault();" ilk="function" name="_setPoint" signature="_setPoint(evt)">
              <variable citdl="Event" ilk="argument" name="evt" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_handleKey" signature="_handleKey(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope name="colorUnderlay">
              <variable doc="" name="src" />
            </scope>
            <scope name="rgbNode" />
            <scope name="hsvNode" />
            <scope name="hexNode" />
            <scope name="safePreviewNode" />
            <variable attributes="private" doc="" name="_offset" />
            <variable attributes="private" doc="" name="_shift" />
            <variable attributes="private" doc="" name="_mover" />
            <variable attributes="private" doc="" name="_hueMover" />
            <variable attributes="private" doc="" name="_started" />
            <variable attributes="private" doc="" name="_timer" />
            <scope name="Rval">
              <variable doc="" name="value" />
            </scope>
            <scope name="Gval">
              <variable doc="" name="value" />
            </scope>
            <scope name="Bval">
              <variable doc="" name="value" />
            </scope>
            <scope name="Hval">
              <variable doc="" name="value" />
            </scope>
            <scope name="Sval">
              <variable doc="" name="value" />
            </scope>
            <scope name="Vval">
              <variable doc="" name="value" />
            </scope>
            <scope name="hexCode">
              <variable doc="" name="value" />
            </scope>
            <scope name="previewNode" />
          </scope>
          <scope doc="A Lightbox-like Modal-dialog for HTML Content" ilk="function" name="Dialog" signature="Dialog(props,node)">
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="node" />
            <scope doc="" name="templatePath" />
            <scope citdl="Boolean" doc="If true, fix the size of the dialog to the Viewport based on viewportPadding value rather than the calculated or natural stlye. If false, base the size on a passed dimension attribute. Eitherway, the viewportPadding value is used if the the content extends beyond the viewport size for whatever reason." name="sizeToViewport" />
            <scope citdl="Integer" doc="If sizeToViewport=&amp;amp;quot;true&amp;amp;quot;, this is the amount of padding in pixels to leave between the dialog border and the viewport edge. This value is also used when sizeToViewport=&amp;amp;quot;false&amp;amp;quot; and dimensions exceeded by dialog content to ensure dialog does not go outside viewport boundary" name="viewportPadding" />
            <variable citdl="Array" doc="A two-element array of [widht,height] to animate the Dialog to if sizeToViewport=&amp;amp;quot;false&amp;amp;quot; Defaults to [300,300]" name="dimensions" />
            <variable citdl="Function?|String" doc="An easing function to apply to the sizing animation." name="easing" />
            <scope citdl="Integer" doc="Time (in ms) to use in the Animation for sizing." name="sizeDuration" />
            <scope citdl="String" doc="To be passed to dojox.fx.sizeTo, one of &amp;amp;quot;chain&amp;amp;quot; or &amp;amp;quot;combine&amp;amp;quot; to effect the animation sequence." name="sizeMethod" />
            <scope citdl="Boolean" doc="Toogle to show or hide the Title area. Can only be set at startup." name="showTitle" />
            <scope citdl="Boolean" doc="Make the pane draggable. Differs from dijit.Dialog by setting default to false" name="draggable" />
            <scope citdl="Boolean" doc="If true, this Dialog instance will be truly modal and prevent closing until explicitly told to by calling hide() - Defaults to false to preserve previous behaviors.               an experiment in a quicksilver-like hide. too choppy for me.                                   }," name="modal" />
            <scope attributes="private" doc="Piggyback on dijit.Dialog&apos;s _setup for load-time options, deferred to" ilk="function" name="_setup" />
            <scope doc="" ilk="function" name="layout" signature="layout(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="cache and set our desired end position" ilk="function" name="_setSize" />
            <scope doc="" ilk="function" name="show" />
            <scope attributes="private" doc="Handle&apos;s showing or hiding the close icon" ilk="function" name="_handleNav" signature="_handleNav(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_position" returns="prevent content: from firing this anim #8914" />
            <scope attributes="private" doc="Show the inner container after sizing animation" ilk="function" name="_showContent" signature="_showContent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_navIn" />
            <variable attributes="private" doc="" name="_navOut" />
            <variable attributes="private" doc="" name="_vp" />
            <variable attributes="private" doc="" name="_displaysize" />
            <variable attributes="private" doc="" name="_sizing" />
            <variable attributes="private" doc="" name="_sizingConnect" />
          </scope>
          <scope doc="A widget to run DocTests inside an HTML page." ilk="function" name="DocTester">
            <scope doc="" name="templatePath" />
            <scope doc="" name="widgetsInTemplate" />
            <scope attributes="private" doc="" name="_fillContent" />
            <scope doc="" name="postCreate" />
            <scope doc="" name="runTests" />
            <scope doc="" name="reset" />
            <scope attributes="private" doc="" name="_unescapeHtml" />
          </scope>
          <scope doc="a pane to display the information for the currently-selected file" ilk="function" name="_FileInfoPane">
            <scope citdl="string" doc="delete our template string" name="templateString" />
            <scope citdl="string" doc="Our template path" name="templatePath" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="called after a fetch or load - at this point, this.items should be set and loaded." ilk="function" name="onItems" />
            <variable attributes="private" doc="" name="_messages" />
            <scope name="nameNode">
              <variable doc="" name="innerHTML" />
            </scope>
            <scope name="pathNode">
              <variable doc="" name="innerHTML" />
            </scope>
            <scope name="sizeNode">
              <variable doc="" name="innerHTML" />
            </scope>
          </scope>
          <scope doc="a specialized version of RollingList that handles file information in a store" ilk="function" name="FilePicker">
            <scope doc="" name="className" />
            <variable citdl="string" doc="Our file separator - it will be guessed if not set" name="pathSeparator" />
            <variable citdl="string" doc="The top directory string - it will be guessed if not set" name="topDir" />
            <scope citdl="string" doc="the attribute to read for finding our parent directory" name="parentAttr" />
            <scope citdl="string" doc="the attribute to read for getting the full path of our file" name="pathAttr" />
            <scope citdl="boolean" doc="or int Set this to a sane number - since we expect to mostly be using the dojox.data.FileStore - which doesn&apos;t like loading lots of items all at once." name="preloadItems" />
            <scope citdl="boolean" doc="whether or not we allow selection of directories - that is, whether or our value can be set to a directory." name="selectDirectories" />
            <scope citdl="boolean" doc="whether or not we allow selection of files - that is, we will disable the file entries." name="selectFiles" />
            <scope attributes="private" doc="" ilk="function" name="_itemsMatch" signature="_itemsMatch(item1,item2)">
              <variable citdl="item" ilk="argument" name="item1" />
              <variable citdl="item" ilk="argument" name="item2" />
            </scope>
            <scope doc="" ilk="function" name="startup" />
            <scope doc="" ilk="function" name="getChildItems" signature="getChildItems(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="getMenuItemForItem" signature="getMenuItemForItem(item,parentPane,children)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="dijit._Contained" ilk="argument" name="parentPane" />
              <variable citdl="item[]" ilk="argument" name="children" />
            </scope>
            <scope doc="" ilk="function" name="getPaneForItem" signature="getPaneForItem(item,parentPane,children)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="dijit._Contained" ilk="argument" name="parentPane" />
              <variable citdl="item[]" ilk="argument" name="children" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setPathValueAttr" signature="_setPathValueAttr(path,resetLastExec,onSet)">
              <variable citdl="string" ilk="argument" name="path" />
              <variable citdl="boolean" ilk="argument" name="resetLastExec" />
              <variable citdl="function" ilk="argument" name="onSet" />
            </scope>
            <scope attributes="private" doc="returns the path value of the given value (or current value if not passed a value)" ilk="function" name="_getPathValueAttr" signature="_getPathValueAttr(val)">
              <variable citdl="item" ilk="argument" name="val" />
            </scope>
            <scope attributes="private" doc="internally sets the value and fires onchange" ilk="function" name="_setValue" signature="_setValue(value)">
              <variable citdl="item" ilk="argument" name="value" />
            </scope>
            <variable attributes="private" doc="" name="_lastExecutedValue" />
            <variable doc="" name="value" />
          </scope>
          <scope doc="Menu similar to the fish eye menu on the Mac OS" ilk="function" name="FisheyeList">
            <variable citdl="Object" doc="" name="EDGE">
              <scope doc="" name="CENTER" />
              <scope doc="" name="LEFT" />
              <scope doc="" name="RIGHT" />
              <scope doc="" name="TOP" />
              <scope doc="" name="BOTTOM" />
            </variable>
            <scope doc="" name="templateString" />
            <scope doc="" name="snarfChildDomOutput" />
            <scope citdl="Integer" doc="width of menu item (in pixels) in it&apos;s dormant state (when the mouse is far away)" name="itemWidth" />
            <scope citdl="Integer" doc="height of menu item (in pixels) in it&apos;s dormant state (when the mouse is far away)" name="itemHeight" />
            <scope citdl="Integer" doc="width of menu item (in pixels) in it&apos;s fully enlarged state (when the mouse is directly over it)" name="itemMaxWidth" />
            <scope citdl="Integer" doc="height of menu item (in pixels) in it&apos;s fully enlarged state (when the mouse is directly over it)" name="itemMaxHeight" />
            <scope doc="" name="imgNode" />
            <scope citdl="String" doc="orientation of the menu, either &amp;amp;quot;horizontal&amp;amp;quot; or &amp;amp;quot;vertical&amp;amp;quot;" name="orientation" />
            <scope citdl="Boolean" doc="toggle to enable additional listener (window scroll) if FisheyeList is in a fixed postion" name="isFixed" />
            <scope citdl="Boolean" doc="if true, don&apos;t start enlarging menu items until mouse is over an image; if false, start enlarging menu items as the mouse moves near them." name="conservativeTrigger" />
            <scope citdl="Number" doc="controls how much reaction the menu makes, relative to the distance of the mouse from the menu" name="effectUnits" />
            <scope citdl="Integer" doc="padding (in pixels) betweeen each menu item" name="itemPadding" />
            <scope citdl="String" doc="controls the border that the menu items don&apos;t expand past; for example, if set to &amp;amp;quot;top&amp;amp;quot;, then the menu items will drop downwards as they expand. values &amp;amp;quot;center&amp;amp;quot;, &amp;amp;quot;left&amp;amp;quot;, &amp;amp;quot;right&amp;amp;quot;, &amp;amp;quot;top&amp;amp;quot;, &amp;amp;quot;bottom&amp;amp;quot;." name="attachEdge" />
            <variable citdl="String" doc="controls were the labels show up in relation to the menu item icons values &amp;amp;quot;center&amp;amp;quot;, &amp;amp;quot;left&amp;amp;quot;, &amp;amp;quot;right&amp;amp;quot;, &amp;amp;quot;top&amp;amp;quot;, &amp;amp;quot;bottom&amp;amp;quot;." name="labelEdge" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="create our connections and setup our FisheyeList" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_initializePositioning" />
            <scope attributes="private" doc="Returns whether the mouse is over the passed element. Node: Must must be display:block (ie, not a &amp;amp;lt;span&amp;amp;gt;)" ilk="function" name="_overElement" signature="_overElement(node,e)">
              <variable citdl="DomNode|String" ilk="argument" name="node" />
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onBodyOut" signature="_onBodyOut(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="called when mouse moves out of menu&apos;s range" ilk="function" name="_setDormant" returns="already dormant?" signature="_setDormant(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="called when mouse is moved into menu&apos;s range" ilk="function" name="_setActive" returns="already activated?" signature="_setActive(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="called when mouse is moved" ilk="function" name="_onMouseMove" signature="_onMouseMove(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onScroll" />
            <scope doc="" ilk="function" name="onResized" />
            <scope attributes="private" doc="called when mouse is moved in the vicinity of the menu" ilk="function" name="_onGridMouseMove" signature="_onGridMouseMove(x,y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_paint" />
            <scope attributes="private" doc="" ilk="function" name="_weighAt" returns="Integer" signature="_weighAt(cen,i)">
              <variable citdl="Integer" ilk="argument" name="cen" />
              <variable citdl="Integer" ilk="argument" name="i" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setItemSize" signature="_setItemSize(p,scale)">
              <variable ilk="argument" name="p" />
              <variable ilk="argument" name="scale" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_positionElementsFrom" signature="_positionElementsFrom(p,offset)">
              <variable ilk="argument" name="p" />
              <variable ilk="argument" name="offset" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_positionLabel" signature="_positionLabel(itm)">
              <variable ilk="argument" name="itm" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_calcHitGrid" />
            <scope attributes="private" doc="" ilk="function" name="_toEdge" signature="_toEdge(inp,def)">
              <variable ilk="argument" name="inp" />
              <variable ilk="argument" name="def" />
            </scope>
            <scope attributes="private" doc="slowly expand the image to user specified max size" ilk="function" name="_expandSlowly" />
            <scope attributes="private" doc="" ilk="function" name="destroyRecursive" returns="already dormant?|already activated?|Integer" />
            <variable doc="" name="isHorizontal" />
            <variable doc="" name="selectedNode" />
            <variable doc="" name="isOver" />
            <variable doc="" name="hitX1" />
            <variable doc="" name="hitY1" />
            <variable doc="" name="hitX2" />
            <variable doc="" name="hitY2" />
            <variable doc="" name="anchorEdge" />
            <variable doc="" name="proximityLeft" />
            <variable doc="" name="proximityRight" />
            <variable doc="" name="proximityTop" />
            <variable doc="" name="proximityBottom" />
            <variable doc="" name="children" />
            <variable attributes="private" doc="" name="_onMouseMoveHandle" />
            <variable attributes="private" doc="" name="_onScrollHandle" />
            <variable attributes="private" doc="" name="_onMouseOutHandle" />
            <variable attributes="private" doc="" name="_addChildHandle" />
            <variable attributes="private" doc="" name="_onResizeHandle" />
            <variable doc="" name="itemCount" />
            <variable doc="" name="barWidth" />
            <variable doc="" name="barHeight" />
            <variable doc="" name="totalWidth" />
            <variable doc="" name="totalHeight" />
            <scope name="domNode" />
            <variable doc="" name="timerScale" />
            <variable doc="" name="pos" />
          </scope>
          <scope doc="" ilk="function" name="FisheyeListItem">
            <scope citdl="String" doc="pathname to image file (jpg, gif, png, etc.) of icon for this menu item" name="iconSrc" />
            <scope citdl="String" doc="label to print next to the icon, when it is moused-over" name="label" />
            <scope citdl="String" doc="will be set to the id of the orginal div element" name="id" />
            <scope doc="" name="templateString" />
            <scope attributes="private" doc="checks to see if wh is actually a node." ilk="function" name="_isNode" returns="boolean" signature="_isNode(wh)">
              <variable citdl="object" ilk="argument" name="wh" />
            </scope>
            <scope attributes="private" doc="returns whether or not node is a child of another node." ilk="function" name="_hasParent" returns="boolean" signature="_hasParent(node)">
              <variable citdl="Node" ilk="argument" name="node" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="postCreate" returns="already dormant?|already activated?|Integer|boolean" />
            <scope doc="" ilk="function" name="startup" />
            <scope doc="callback when user moves mouse over this menu item in conservative mode, don&apos;t activate the menu until user mouses over an icon" ilk="function" name="onMouseOver" signature="onMouseOver(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="callback when user moves mouse off of this menu item" ilk="function" name="onMouseOut" signature="onMouseOut(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="user overridable callback when user clicks this menu item" ilk="function" name="onClick" signature="onClick(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope name="imgNode">
              <variable doc="" name="src" />
            </scope>
            <variable doc="" name="parent" />
          </scope>
          <scope doc="A Light-weight Fisheye Component, or an exhanced version of dojo.fx.Toggler ..." ilk="function" name="FisheyeLite" signature="FisheyeLite(props,node)">
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="node" />
            <scope doc="" name="durationIn" />
            <scope doc="An easing function to use for the show animation" ilk="function" name="easeIn" />
            <scope citdl="Integer" doc="The Time (in ms) to run the hide animation" name="durationOut" />
            <scope doc="An easing function to use for the hide animation" ilk="function" name="easeOut" />
            <variable citdl="Object" doc="An object of &amp;amp;quot;property&amp;amp;quot;:scale pairs, or &amp;amp;quot;property&amp;amp;quot;:{} pairs. defaults to font-size with a scale of 2.75 If a named property is an integer or float, the &amp;amp;quot;scale multiplier&amp;amp;quot; is used. If the named property is an object, that object is mixed into the animation directly. eg: height:{ end:20, unit:&amp;amp;quot;em&amp;amp;quot; }" name="properties" />
            <scope citdl="String" doc="Sometimes, you need to specify a unit. Should be part of properties attrib, but was trying to shorthand the logic there" name="unit" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="Show this Fisheye item." ilk="function" name="show" />
            <scope doc="Hide this fisheye item on mouse leave" ilk="function" name="hide" />
            <scope attributes="private" doc="" ilk="function" name="_makeAnims" />
            <scope doc="stub function fired when target is clicked connect or override to use." ilk="function" name="onClick" signature="onClick(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="stub function fired when Fisheye Item is fully visible and hovered. connect or override use." ilk="function" name="onSelected" signature="onSelected(e)">
              <variable citdl="Object" ilk="argument" name="e" />
            </scope>
            <variable attributes="private" doc="" name="_target" />
            <variable attributes="private" doc="" name="_runningIn" />
            <variable attributes="private" doc="" name="_runningOut" />
          </scope>
          <scope doc="" ilk="function" name="Iterator">
            <scope doc="" name="constructor" />
            <scope doc="" name="start" />
            <scope doc="" name="fetchMax" />
            <variable citdl="Object" doc="" name="query">
              <scope doc="" name="name" />
            </variable>
            <variable doc="" name="attrs" />
            <scope doc="" name="defaultValue" />
            <variable doc="" name="widgetCtor" />
            <scope doc="" name="dataValues" />
            <scope doc="" name="data" />
            <scope doc="" name="store" />
            <variable attributes="private" doc="" name="_srcIndex" />
            <variable attributes="private" doc="" name="_srcParent" />
            <scope attributes="private" doc="" ilk="function" name="_setSrcIndex" signature="_setSrcIndex(s)">
              <variable ilk="argument" name="s" />
            </scope>
            <scope doc="" ilk="function" name="postscript" signature="postscript(p,s)">
              <variable ilk="argument" name="p" />
              <variable ilk="argument" name="s" />
            </scope>
            <scope doc="" ilk="function" name="clear" />
            <scope doc="" ilk="function" name="update" />
            <scope attributes="private" doc="" ilk="function" name="_addItem" signature="_addItem(config,idx)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable ilk="argument" name="idx" />
            </scope>
            <scope doc="" ilk="function" name="getAttrValuesObj" signature="getAttrValuesObj(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="onDataAvailable" signature="onDataAvailable(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope doc="" ilk="function" name="fetch" signature="fetch(query,start,end)">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="end" />
            </scope>
            <variable doc="" name="children" />
            <variable attributes="private" citdl="Object" doc="" name="_classes" />
          </scope>
          <scope doc="a configurable global xhr-listener to display a loading message during running xhr&apos;s or to simply provide base-level topic to subscribe to for custom loading messages" ilk="function" name="Loader">
            <scope citdl="String" doc="location to the icon used." name="loadIcon" />
            <scope citdl="String" doc="string to use for progress loading" name="loadMessage" />
            <scope citdl="Boolean" doc="true to display a fixed loading message in TR cornder, false to unly provide &amp;amp;quot;Loader&amp;amp;quot; topic to subscribe to for your own custom loading message." name="hasVisuals" />
            <scope doc="" name="attachToPointer" />
            <scope citdl="Integer" doc="time in ms to toggle in/out the visual load indicator" name="duration" />
            <scope attributes="private" citdl="Integer" doc="distance in px from the mouse pointer to show attachToPointer avatar" name="_offset" />
            <variable attributes="private" doc="" name="_pointerConnect" />
            <variable attributes="private" doc="" name="_xhrStart" />
            <variable attributes="private" doc="" name="_xhrEnd" />
            <scope doc="" name="templateString" />
            <scope doc="setup the loader" ilk="function" name="postCreate" />
            <scope attributes="private" doc="set&apos;s the message in the loader" ilk="function" name="_setMessage" signature="_setMessage(message)">
              <variable citdl="String" ilk="argument" name="message" />
            </scope>
            <scope attributes="private" doc="place the floating loading element based on mousemove connection position" ilk="function" name="_putLoader" signature="_putLoader(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="publish and show progress indicator" ilk="function" name="_show" />
            <scope attributes="private" doc="publish &amp;amp;quot;xhr ended&amp;amp;quot; and hide progress indicator" ilk="function" name="_hide" />
            <scope name="loadNode" />
            <scope name="loadMessageNode">
              <variable doc="" name="innerHTML" />
            </scope>
          </scope>
          <scope doc="A Pager, displaying a list of sized nodes" ilk="function" name="Pager">
            <scope doc="" name="templatePath" />
            <scope citdl="String" doc="The url of the previous page icon" name="iconPrevious" />
            <scope citdl="String" doc="The url of the next page icon" name="iconNext" />
            <scope doc="" name="iconPage" />
            <scope doc="" name="iconPageActive" />
            <variable citdl="Object" doc="A dojo.data Data store" name="store" />
            <variable citdl="String" doc="Either &amp;amp;quot;horizontal or &amp;amp;quot;vertical&amp;amp;quot; to define the direction the pages will slide" name="orientation" />
            <variable citdl="String" doc="A string describing where to put the Pager &amp;amp;quot;current page&amp;amp;quot; indicator. Options are &amp;amp;quot;leading&amp;amp;quot; or &amp;amp;quot;trailing&amp;amp;quot;. In the case of horiztonal orientation, &amp;amp;quot;leading&amp;amp;quot; indicates positioned above the PageItems. In the case of vertical, &amp;amp;quot;leading&amp;amp;quot; indicates &amp;amp;quot;before&amp;amp;quot;." name="statusPos" />
            <variable citdl="String" doc="TODOC" name="pagerPos" />
            <scope citdl="Integer" doc="Time in milliseconds to transition the pages" name="duration" />
            <scope citdl="Integer" doc="Spacing between items? TODOC" name="itemSpace" />
            <scope citdl="Boolean" doc="TODOC" name="resizeChildren" />
            <scope citdl="String" doc="The full dotted named of a Class to use for the internal Pager Items." name="itemClass" />
            <scope citdl="Integer" doc="The numbers of items to display in each &amp;amp;quot;Page&amp;amp;quot;" name="itemsPage" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="top level onfocus/onblur listen to set a class &amp;amp;quot;pagerFocus&amp;amp;quot; on some node and remove it onblur" ilk="function" name="_a11yStyle" signature="_a11yStyle(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="Handle keyboard navigation internally" ilk="function" name="_handleKey" signature="_handleKey(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_init" signature="_init(items)">
              <variable ilk="argument" name="items" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_renderPages" />
            <scope attributes="private" doc="" ilk="function" name="_renderPager" />
            <scope attributes="private" doc="" ilk="function" name="_renderStatus" />
            <scope attributes="private" doc="" ilk="function" name="_pagerSkip" signature="_pagerSkip(page)">
              <variable ilk="argument" name="page" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_pagerNext" />
            <scope attributes="private" doc="" ilk="function" name="_pagerPrevious" />
            <scope doc="Stub Function. Fired after the slide is complete. Override or connect." ilk="function" name="onScrollEnd" />
            <variable doc="" name="items" />
            <variable attributes="private" doc="" name="_totalPages" />
            <variable doc="" name="iconWidth" />
            <variable doc="" name="iconHeight" />
            <variable doc="" name="iconsLoaded" />
            <variable attributes="private" doc="" name="_iconConnects" />
            <variable attributes="private" doc="" name="_currentPage" />
            <variable attributes="private" doc="" name="_toScroll" />
            <variable attributes="private" doc="" name="_anim" />
          </scope>
          <scope doc="" ilk="function" name="_PagerItem">
            <scope doc="" name="templateString" />
            <scope doc="" ilk="function" name="resizeChildren" />
            <scope doc="" ilk="function" name="parseChildren" />
          </scope>
          <scope doc="A menu item that can be used as a placeholder. Set the label of this item to a unique key and you can then use it to add new items at that location. This item is not displayed." ilk="function" name="PlaceholderMenuItem">
            <variable attributes="private" doc="" name="_replaced" />
            <variable attributes="private" doc="" name="_replacedWith" />
            <scope attributes="private" doc="" name="_isPlaceholder" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="replaces this menu item with the given menuItems. The original menu item is not actually removed from the menu - so if you want it removed, you must do that explicitly." ilk="function" name="replace" signature="replace(menuItems)">
              <variable citdl="dijit.MenuItem[]" ilk="argument" name="menuItems" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Removes menu items added by calling replace(). It returns the array of items that were actually removed (in case you want to clean them up later)" ilk="function" name="unReplace" returns="dijit.MenuItem[]" signature="unReplace(destroy)">
              <variable citdl="Boolean" doc="Also call destroy on any removed items." ilk="argument" name="destroy" />
              <variable name="return_summary" />
            </scope>
            <scope name="domNode" />
            <variable doc="" name="label" />
          </scope>
          <scope doc="A simple widget to take an unordered-list of Text and roll through them" ilk="function" name="Roller">
            <scope citdl="Integer" doc="Interval between rolls" name="delay" />
            <scope citdl="Boolean" doc="Toggle to control starup behavior. Call .start() manually if set to `false`" name="autoStart" />
            <scope citdl="String" doc="A CSS selector to be used by `dojo.query` to find the children items in this widget. Defaults to &amp;amp;quot;&amp;amp;gt; li&amp;amp;quot;, finding only first-children list-items in the list, allowing for embedded lists to occur." name="itemSelector" />
            <scope citdl="Integer" doc="Speed (in ms) to apply to the &amp;amp;quot;in&amp;amp;quot; animation (show the node)" name="durationIn" />
            <scope citdl="Integer" doc="Speed (in ms) to apply to the &amp;amp;quot;out&amp;amp;quot; animation (hide the showing node)" name="durationOut" />
            <variable citdl="Array" doc="If populated prior to instantiation, is used as the Items over the children" name="items" />
            <variable attributes="private" citdl="Integer" doc="Index of the the currently visible item in the list of items[]" name="_idx" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="Animation creator function. Need to create an &apos;in&apos; and &apos;out&apos; _Animation stored in _anim Object, which the rest of the widget will reuse." ilk="function" name="makeAnims" />
            <scope attributes="private" doc="setup the loop connection logic" ilk="function" name="_setupConnects" />
            <scope doc="Starts to Roller looping" ilk="function" name="start" />
            <scope attributes="private" doc="" ilk="function" name="_run" />
            <scope doc="Stops the Roller from looping anymore." ilk="function" name="stop" />
            <scope attributes="private" doc="Set the Roller to some passed index. If beyond range, go to first." ilk="function" name="_set" signature="_set(i)">
              <variable ilk="argument" name="i" />
            </scope>
            <variable attributes="private" doc="" name="_roller">
              <variable doc="" name="innerHTML" />
            </variable>
            <variable attributes="private" doc="" name="_timeout" />
            <variable doc="" name="rolling" />
          </scope>
          <scope doc="An add-on to the Roller to modify animations. This produces a slide-from-bottom like effect. See `dojox.widget.Roller` for full API information." ilk="function" name="RollerSlide">
            <scope doc="" name="durationOut" />
            <scope doc="Animation creator function. Need to create an &apos;in&apos; and &apos;out&apos; _Animation stored in _anim Object, which the rest of the widget will reuse." ilk="function" name="makeAnims" />
          </scope>
          <scope doc="A mixin class to provide a way to automate the &amp;amp;quot;stop on hover&amp;amp;quot; functionality." ilk="function" name="_RollerHover">
            <scope doc="" ilk="function" name="postCreate" />
          </scope>
          <scope doc="a core pane that can be attached to a RollingList. All panes should extend this one" ilk="function" name="_RollingListPane">
            <scope citdl="string" doc="our template" name="templateString" />
            <scope citdl="dojox.widget.RollingList" doc="Our rolling list widget" name="parentWidget">
              <variable attributes="private" doc="" name="_focusedPane" />
            </scope>
            <scope citdl="dojox.widget._RollingListPane" doc="The pane that immediately precedes ours" name="parentPane" />
            <scope citdl="store" doc="the store we must use" name="store" />
            <variable citdl="item[" doc="an array of (possibly not-yet-loaded) items to display in this. If this array is null, then the query and query options are used to get the top-level items to use. This array is also used to watch and see if the pane needs to be reloaded (store notifications are handled) by the pane" name="items" />
            <scope citdl="object" doc="a query to pass to the datastore. This is only used if items are null" name="query" />
            <scope citdl="object" doc="query options to be passed to the datastore   focusByNode: boolean set to false if the subclass will handle its own node focusing" name="queryOptions" />
            <scope attributes="private" doc="" name="_focusByNode" />
            <variable citdl="integer" doc="the width (in px) for this pane" name="minWidth" />
            <scope attributes="private" doc="sets the value of the content and scrolls it into view" ilk="function" name="_setContentAndScroll" signature="_setContentAndScroll(cont,isFakeContent)">
              <variable citdl="String|DomNode|Nodelist" ilk="argument" name="cont" />
              <variable ilk="argument" name="isFakeContent" />
            </scope>
            <scope attributes="private" doc="updates the min width of the pane to be minPaneWidth" ilk="function" name="_updateNodeWidth" signature="_updateNodeWidth(n,min)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="min" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onMinWidthChange" signature="_onMinWidthChange(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setMinWidthAttr" signature="_setMinWidthAttr(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="called when a keypress happens on the widget" ilk="function" name="_focusKey" signature="_focusKey(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="sets the focus to this current widget" ilk="function" name="focus" signature="focus(force)">
              <variable citdl="boolean" ilk="argument" name="force" />
            </scope>
            <scope attributes="private" doc="checks that the store is loaded" ilk="function" name="_loadCheck" />
            <scope attributes="private" doc="sets the &amp;amp;quot;loading&amp;amp;quot; message and then kicks off a query asyncronously" ilk="function" name="_loadQuery" />
            <scope attributes="private" doc="loads the given items, and then calls the callback when they are finished." ilk="function" name="_doLoadItems" signature="_doLoadItems(items,callback)">
              <variable citdl="item[]" ilk="argument" name="items" />
              <variable citdl="function" ilk="argument" name="callback" />
            </scope>
            <scope attributes="private" doc="either runs the query or loads potentially not-yet-loaded items." ilk="function" name="_doQuery" />
            <scope attributes="private" doc="returns whether or not the given item is handled by this pane" ilk="function" name="_hasItem" signature="_hasItem(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onSetItem" signature="_onSetItem(item,attribute,oldValue,newValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="object | array" ilk="argument" name="oldValue" />
              <variable citdl="object | array" ilk="argument" name="newValue" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onNewItem" signature="_onNewItem(newItem,parentInfo)">
              <variable citdl="item" ilk="argument" name="newItem" />
              <variable citdl="object" ilk="argument" name="parentInfo" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onDeleteItem" signature="_onDeleteItem(deletedItem)">
              <variable citdl="item" ilk="argument" name="deletedItem" />
            </scope>
            <scope doc="called before a fetch starts" ilk="function" name="onFetchStart" />
            <scope doc="called when a fetch error occurs." ilk="function" name="onFetchError" signature="onFetchError(error)">
              <variable citdl="Error" ilk="argument" name="error" />
            </scope>
            <scope doc="called before a load starts" ilk="function" name="onLoadStart" />
            <scope doc="called when a load error occurs." ilk="function" name="onLoadError" signature="onLoadError(error)">
              <variable citdl="Error" ilk="argument" name="error" />
            </scope>
            <scope doc="called after a fetch or load - at this point, this.items should be set and loaded. Override this function to &amp;amp;quot;do your stuff&amp;amp;quot;" ilk="function" name="onItems" />
            <variable doc="" name="isLoaded" />
          </scope>
          <scope doc="a pane that will handle groups (treats them as menu items)" ilk="function" name="_RollingListGroupPane">
            <scope citdl="string" doc="our template" name="templateString" />
            <variable attributes="private" citdl="dijit.Menu" doc="The menu that we will call addChild() on for adding items" name="_menu" />
            <scope attributes="private" doc="checks that the store is loaded" ilk="function" name="_loadCheck" />
            <scope attributes="private" doc="" ilk="function" name="_setContent" signature="_setContent(cont)">
              <variable citdl="String|DomNode|Nodelist" ilk="argument" name="cont" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onMinWidthChange" signature="_onMinWidthChange(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope doc="called after a fetch or load" ilk="function" name="onItems" />
            <scope attributes="private" doc="checks whether or not we need to connect to our onscroll function" ilk="function" name="_checkScrollConnection" signature="_checkScrollConnection(doLoad)">
              <variable ilk="argument" name="doLoad" />
            </scope>
            <scope doc="" ilk="function" name="startup" />
            <scope doc="sets the focus to this current widget" ilk="function" name="focus" signature="focus(force)">
              <variable citdl="boolean" ilk="argument" name="force" />
            </scope>
            <scope attributes="private" doc="returns a widget to be used for the container widget." ilk="function" name="_getMenu" />
            <scope attributes="private" doc="called when the pane has been scrolled - it sets a timeout so that we don&apos;t try and load our visible items too often during a scroll" ilk="function" name="_onScrollPane" />
            <scope attributes="private" doc="work around table sizing bugs on FF2 by forcing redraw note - this function is taken from dijit.form._FormWidget" ilk="function" name="_layoutHack" />
            <scope attributes="private" doc="loads the items that are currently visible in the pane" ilk="function" name="_loadVisibleItems" />
            <scope attributes="private" doc="returns the selected menu item - or null if none are selected" ilk="function" name="_getSelected" signature="_getSelected(menu)">
              <variable citdl="dijit.Menu" ilk="argument" name="menu" />
            </scope>
            <scope attributes="private" doc="selectes the given item in the given menu (defaults to pane&apos;s menu)" ilk="function" name="_setSelected" signature="_setSelected(item,menu)">
              <variable citdl="dijit.MenuItem" ilk="argument" name="item" />
              <variable citdl="dijit.Menu" ilk="argument" name="menu" />
            </scope>
            <scope doc="" ilk="function" name="destroy" />
            <scope name="containerNode">
              <variable doc="" name="innerHTML" />
            </scope>
            <variable attributes="private" doc="" name="_scrollConn" />
            <variable attributes="private" doc="" name="_focusByNode" />
            <variable attributes="private" doc="" name="_pendingFocus" />
            <variable attributes="private" doc="" name="_visibleLoadPending" />
            <variable attributes="private" doc="" name="_layoutHackHandle" />
          </scope>
          <scope doc="a rolling list that can be tied to a data store with children" ilk="function" name="RollingList">
            <scope citdl="string" doc="our template to use" name="templatePath" />
            <scope doc="" name="widgetsInTemplate" />
            <scope citdl="string" doc="an additional class (or space-separated classes) to add for our widget" name="className" />
            <variable citdl="store" doc="the store we must use" name="store" />
            <scope citdl="object" doc="a query to pass to the datastore. This is only used if items are null" name="query" />
            <scope citdl="object" doc="query options to be passed to the datastore" name="queryOptions" />
            <scope citdl="String[" doc="one ore more attributes that holds children of a node" name="childrenAttrs" />
            <scope citdl="string" doc="the attribute to read for finding our parent item (if any)" name="parentAttr" />
            <variable citdl="item" doc="The value that has been selected" name="value" />
            <scope citdl="boolean" doc="Set to true if you want to call onExecute when an item is double-clicked, false if you want to call onExecute yourself. (mainly used for popups to control how they want to be handled)" name="executeOnDblClick" />
            <scope citdl="boolean" doc="or int if set to true, then onItems will be called only *after* all items have been loaded (ie store.isLoaded will return true for all of them). If false, then no preloading will occur. If set to an integer, preloading will occur if the number of items is less than or equal to the value of the integer. The onItems function will need to be aware of handling items that may not be loaded" name="preloadItems" />
            <variable citdl="boolean" doc="if set to true, then buttons for &amp;amp;quot;OK&amp;amp;quot; and &amp;amp;quot;Cancel&amp;amp;quot; will be provided" name="showButtons" />
            <variable citdl="string" doc="The string to use for the OK button - will use dijit&apos;s common &amp;amp;quot;OK&amp;amp;quot; string if not set" name="okButtonLabel" />
            <variable citdl="string" doc="The string to use for the Cancel button - will use dijit&apos;s common &amp;amp;quot;Cancel&amp;amp;quot; string if not set" name="cancelButtonLabel" />
            <variable citdl="integer" doc="the minimum pane width (in px) for all child panes. If they are narrower, the width will be increased to this value." name="minPaneWidth" />
            <scope doc="Mix in our labels, if they are not set" ilk="function" name="postMixInProperties" />
            <scope attributes="private" doc="Sets the visibility of the buttons for the widget" ilk="function" name="_setShowButtonsAttr" signature="_setShowButtonsAttr(doShow)">
              <variable ilk="argument" name="doShow" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_itemsMatch" signature="_itemsMatch(item1,item2)">
              <variable citdl="item" ilk="argument" name="item1" />
              <variable citdl="item" ilk="argument" name="item2" />
            </scope>
            <scope attributes="private" doc="removes all widgets after the given widget (or index)" ilk="function" name="_removeAfter" signature="_removeAfter(idx)">
              <variable citdl="Widget or int" ilk="argument" name="idx" />
            </scope>
            <scope doc="adds a child to this rolling list - if passed an insertIndex, then all children from that index on will be removed and destroyed before adding the child." ilk="function" name="addChild" signature="addChild(widget,insertIndex)">
              <variable citdl="Widget" ilk="argument" name="widget" />
              <variable citdl="int" ilk="argument" name="insertIndex" />
            </scope>
            <scope attributes="private" doc="Sets the min pane width of all children" ilk="function" name="_setMinPaneWidthAttr" signature="_setMinPaneWidthAttr(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="sets the state of the given node with the given type and options" ilk="function" name="_updateClass" signature="_updateClass(node,type,options)">
              <variable citdl="Node" ilk="argument" name="node" />
              <variable citdl="String" ilk="argument" name="type" />
              <variable citdl="Object" doc="an object with key-value-pairs. The values are boolean, if true, the key is added as a class, if false, it is removed." ilk="argument" name="options" />
            </scope>
            <scope doc="scrolls the given widget into view" ilk="function" name="scrollIntoView" signature="scrollIntoView(childWidget)">
              <variable citdl="Widget" ilk="argument" name="childWidget" />
            </scope>
            <scope doc="" ilk="function" name="resize" signature="resize(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope doc="" ilk="function" name="layout" />
            <scope attributes="private" doc="" ilk="function" name="_onChange" signature="_onChange(value)">
              <variable citdl="item" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="internally sets the value and fires onchange" ilk="function" name="_setValue" signature="_setValue(value)">
              <variable citdl="item" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="sets the value of this widget to the given store item" ilk="function" name="_setValueAttr" signature="_setValueAttr(value)">
              <variable citdl="item" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="internally called when a widget should pop up its child" ilk="function" name="_onItemClick" signature="_onItemClick(evt,pane,item,children)">
              <variable citdl="Event" ilk="argument" name="evt" />
              <variable citdl="dijit._Contained" ilk="argument" name="pane" />
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="item[]" ilk="argument" name="children" />
            </scope>
            <scope attributes="private" doc="gets the pane for the given item, and mixes in our needed parts Returns the pane for the given item (null if the root pane) - after mixing in its stuff." ilk="function" name="_getPaneForItem" signature="_getPaneForItem(item,parentPane,children)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="dijit._Contained" ilk="argument" name="parentPane" />
              <variable citdl="item[]" ilk="argument" name="children" />
            </scope>
            <scope attributes="private" doc="returns a widget for the given store item. The returned item will be added to this widget&apos;s container widget. null will be passed in for an &amp;amp;quot;empty&amp;amp;quot; item." ilk="function" name="_getMenuItemForItem" signature="_getMenuItemForItem(item,parentPane)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="dijit._Contained" ilk="argument" name="parentPane" />
            </scope>
            <scope attributes="private" doc="sets the store for this widget */" ilk="function" name="_setStore" signature="_setStore(store)">
              <variable citdl="dojo.data.api.Read" ilk="argument" name="store" />
            </scope>
            <scope attributes="private" doc="called when a keypress event happens on this widget" ilk="function" name="_onKey" signature="_onKey(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_resetValue" />
            <scope attributes="private" doc="" ilk="function" name="_onCancel" />
            <scope attributes="private" doc="" ilk="function" name="_onExecute" />
            <scope doc="sets the focus state of this widget" ilk="function" name="focus" />
            <scope doc="" name="handleKey" />
            <scope attributes="private" doc="Called when a child is added or removed - so that we can update the classes for styling the &amp;amp;quot;current&amp;amp;quot; one differently than the others" ilk="function" name="_updateChildClasses" />
            <scope doc="" ilk="function" name="startup" />
            <scope doc="Returns the child items for the given store item" ilk="function" name="getChildItems" signature="getChildItems(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="user overridable function to return a widget for the given item and its children." ilk="function" name="getMenuItemForItem" signature="getMenuItemForItem(item,parentPane,children)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="dijit._Contained" ilk="argument" name="parentPane" />
              <variable citdl="item[]" ilk="argument" name="children" />
            </scope>
            <scope doc="user-overridable function to return a pane that corresponds to the given item in the store. It can return null to not add a new pane (ie, you are planning on doing something else with it in onItemClick)  Item is undefined for the root pane, children is undefined for non-group panes" ilk="function" name="getPaneForItem" signature="getPaneForItem(item,parentPane,children)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="dijit._Contained" ilk="argument" name="parentPane" />
              <variable citdl="item[]" ilk="argument" name="children" />
            </scope>
            <scope doc="called when an item is clicked - it receives the store item" ilk="function" name="onItemClick" signature="onItemClick(item,pane,children)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="dijit._Contained" ilk="argument" name="pane" />
              <variable citdl="item[]" ilk="argument" name="children" />
            </scope>
            <scope doc="exists so that popups don&apos;t disappear too soon" ilk="function" name="onExecute" />
            <scope doc="exists so that we can close ourselves if we wish" ilk="function" name="onCancel" />
            <scope doc="called when the value of this widget has changed" ilk="function" name="onChange" signature="onChange(value)">
              <variable citdl="item" ilk="argument" name="value" />
            </scope>
            <variable attributes="private" doc="" name="_declaredClasses" />
            <variable attributes="private" doc="" name="_scrollingTimeout" />
            <variable attributes="private" doc="" name="_setInProgress" />
            <variable attributes="private" doc="" name="_visibleItem" />
            <variable attributes="private" doc="" name="_isIdentity" />
            <variable attributes="private" doc="" name="_lastExecutedValue" />
            <variable attributes="private" doc="" name="_savedFocus" />
          </scope>
          <scope doc="A sortable unordered-list with a fixed header for use in dijit.demos.chat for demonstration purposes only for now. feel free to make API suggestions or fixes." ilk="function" name="SortList">
            <variable citdl="String" doc="The title in the header" name="title" />
            <scope citdl="String" doc="In the event a parent container is expecting a title=&amp;amp;quot;&amp;amp;quot; attribute, set it for the parent via title, and the title of this widget via heading=&amp;amp;quot;&amp;amp;quot; ... assuming you want different titles for each. eg: TabContainer, AccordionContainer, etc." name="heading" />
            <variable citdl="Boolean" doc="Toggle sort order based on this value." name="descending" />
            <variable citdl="Array" doc="A list of the selected &amp;amp;lt;li&amp;amp;gt; nodes at any given time." name="selected" />
            <scope citdl="Boolean" doc="toggle to enable/disable sorting" name="sortable" />
            <variable doc="" name="store" />
            <scope doc="" name="key" />
            <scope doc="" name="baseClass" />
            <scope doc="" name="templatePath" />
            <scope attributes="private" doc="" ilk="function" name="_addItem" signature="_addItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="startup" />
            <scope doc="do our additional calculations when resize() is called by or in a parent" ilk="function" name="resize" />
            <scope doc="sort the data, and style the nodes." ilk="function" name="onSort" signature="onSort(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="set hover state" ilk="function" name="_set" signature="_set(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="remove hover state (FIXME: combine with _set?)" ilk="function" name="_unset" signature="_unset(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="click listener for data portion of widget. toggle selected state of node, and update this.selected array accordingly" ilk="function" name="_handleClick" signature="_handleClick(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_updateValues" />
            <scope attributes="private" doc="a basic sort function, use query sort, or keep this?" ilk="function" name="_sorter" signature="_sorter(a,b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope doc="Sets the widget title to a String" ilk="function" name="setTitle" signature="setTitle(title)">
              <variable citdl="String" ilk="argument" name="title" />
            </scope>
            <scope doc="stub function, passes the last changed item, and is fired after current state" ilk="function" name="onChanged" />
            <scope name="bodyWrapper" />
            <variable attributes="private" doc="" name="_selected" />
            <scope name="focusNode">
              <variable doc="" name="innerHTML" />
            </scope>
          </scope>
          <scope doc="A widget designed to act as a Standby/Busy/Disable/Blocking widget to indicate a particular DOM node is processing and cannot be clicked on at this time. This widget uses absolute positioning to apply the overlay and image." ilk="function" name="Standby">
            <scope doc="" name="templatePath" />
            <scope attributes="private" doc="" name="_underlayNode" />
            <scope attributes="private" doc="" name="_imageNode" />
            <scope citdl="A" doc="URL to an image to center within the blocking overlay. The default is a basic spinner." name="image" />
            <scope citdl="Text" doc="to set on the ALT tag of the image. The default is &apos;Please wait...&apos;" name="imageText" />
            <variable attributes="private" doc="" name="_displayed" />
            <variable attributes="private" doc="" name="_resizeCheck" />
            <variable doc="" name="target" />
            <scope citdl="The" doc="color to use for the translucent overlay. Text string such as: darkblue, #FE02FD, etc." name="color" />
            <scope doc="Over-ride of the basic widget startup function. Configures the target node and sets the image to use." ilk="function" name="startup" signature="startup(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope doc="Function to display the blocking overlay and busy/status icon" ilk="function" name="show" />
            <scope doc="Function to hide the blocking overlay and status icon." ilk="function" name="hide" />
            <scope attributes="private" doc="Internal function that handles resizing the overlay and centering of the image on window resizing." ilk="function" name="_size" />
            <scope attributes="private" doc="Internal function that does the opacity style fade in animation." ilk="function" name="_fadeIn" />
            <scope attributes="private" doc="Internal function that does the opacity style fade out animation." ilk="function" name="_fadeOut" />
            <scope attributes="private" doc="" ilk="function" name="_ignore" signature="_ignore(event)">
              <variable ilk="argument" name="event" />
            </scope>
            <scope doc="Over-ride to hide the widget, which clears intervals, before cleanup." ilk="function" name="uninitialize" />
          </scope>
          <scope doc="Message that slides in from the corner of the screen, used for notifications like &amp;amp;quot;new email&amp;amp;quot;." ilk="function" name="Toaster">
            <scope doc="" name="templateString" />
            <scope citdl="String" doc="Name of topic; anything published to this topic will be displayed as a message. Message format is either String or an object like {message: &amp;amp;quot;hello word&amp;amp;quot;, type: &amp;amp;quot;error&amp;amp;quot;, duration: 500}" name="messageTopic" />
            <variable citdl="Object" doc="" name="messageTypes">
              <scope doc="" name="MESSAGE" />
              <scope doc="" name="WARNING" />
              <scope doc="" name="ERROR" />
              <scope doc="" name="FATAL" />
            </variable>
            <scope citdl="String" doc="If message type isn&apos;t specified (see &amp;amp;quot;messageTopic&amp;amp;quot; parameter), then display message as this type. Possible values in messageTypes enumeration (&amp;amp;quot;message&amp;amp;quot;, &amp;amp;quot;warning&amp;amp;quot;, &amp;amp;quot;error&amp;amp;quot;, &amp;amp;quot;fatal&amp;amp;quot;)" name="defaultType" />
            <scope citdl="String" doc="Position from which message slides into screen, one of [&amp;amp;quot;br-up&amp;amp;quot;, &amp;amp;quot;br-left&amp;amp;quot;, &amp;amp;quot;bl-up&amp;amp;quot;, &amp;amp;quot;bl-right&amp;amp;quot;, &amp;amp;quot;tr-down&amp;amp;quot;, &amp;amp;quot;tr-left&amp;amp;quot;, &amp;amp;quot;tl-down&amp;amp;quot;, &amp;amp;quot;tl-right&amp;amp;quot;]" name="positionDirection" />
            <scope citdl="Array" doc="Possible values for positionDirection parameter" name="positionDirectionTypes" />
            <scope citdl="Integer" doc="Number of milliseconds to show message" name="duration" />
            <scope citdl="Integer" doc="Number of milliseconds for the slide animation, increasing will cause the Toaster to slide in more slowly." name="slideDuration" />
            <scope citdl="String" doc="String used to separate messages if consecutive calls are made to setContent before previous messages go away" name="separator" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope attributes="private" doc="" ilk="function" name="_handleMessage" signature="_handleMessage(message)">
              <variable citdl="String|Object" ilk="argument" name="message" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_capitalize" signature="_capitalize(w)">
              <variable citdl="String" ilk="argument" name="w" />
            </scope>
            <scope doc="sets and displays the given message and show duration" ilk="function" name="setContent" signature="setContent(message,messageType,duration)">
              <variable citdl="String|Function" doc="the message. If this is a function, it will be called with this toaster widget as the only argument." ilk="argument" name="message" />
              <variable citdl="String" doc="type of message; possible values in messageTypes enumeration (&amp;amp;quot;message&amp;amp;quot;, &amp;amp;quot;warning&amp;amp;quot;, &amp;amp;quot;error&amp;amp;quot;, &amp;amp;quot;fatal&amp;amp;quot;)" ilk="argument" name="messageType" />
              <variable citdl="int" doc="duration in milliseconds to display message before removing it. Widget has default value." ilk="argument" name="duration" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setContent" signature="_setContent(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope attributes="private" doc="" name="_cancelHideTimer" />
            <scope attributes="private" doc="" name="_setHideTimer" />
            <scope attributes="private" doc="" ilk="function" name="_placeClip" />
            <scope doc="callback for when user clicks the message" ilk="function" name="onSelect" signature="onSelect(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="show the Toaster" ilk="function" name="show" />
            <scope doc="hide the Toaster" ilk="function" name="hide" />
            <scope name="clipNode">
              <variable doc="" name="className" />
              <variable doc="" name="id" />
            </scope>
            <scope name="contentNode">
              <variable doc="" name="className" />
              <variable doc="" name="innerHTML" />
            </scope>
            <variable doc="" name="slideAnim" />
            <variable doc="" name="fadeAnim" />
            <variable doc="" name="isVisible" />
            <variable attributes="private" doc="" name="_stickyMessage" />
            <variable doc="" name="bgIframe" />
            <variable attributes="private" doc="" name="_scrollConnected" />
          </scope>
          <scope doc="A set of panels that display sequentially, typically notating a step-by-step procedure like an install" ilk="function" name="Wizard">
            <scope doc="" name="widgetsInTemplate" />
            <scope doc="" name="templatePath" />
            <scope citdl="String" doc="Label override for the &amp;amp;quot;Next&amp;amp;quot; button." name="nextButtonLabel" />
            <scope citdl="String" doc="Label override for the &amp;amp;quot;Previous&amp;amp;quot; button." name="previousButtonLabel" />
            <scope citdl="String" doc="Label override for the &amp;amp;quot;Cancel&amp;amp;quot; button." name="cancelButtonLabel" />
            <scope citdl="String" doc="Label override for the &amp;amp;quot;Done&amp;amp;quot; button." name="doneButtonLabel" />
            <variable citdl="Function|String" doc="Name of function to call if user presses cancel button. Cancel button is not displayed if function is not specified." name="cancelFunction" />
            <scope citdl="Boolean" doc="If true, disabled buttons are hidden; otherwise, they are assigned the &amp;amp;quot;WizardButtonDisabled&amp;amp;quot; CSS class" name="hideDisabled" />
            <scope doc="" ilk="function" name="postMixInProperties" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_checkButtons" />
            <scope attributes="private" doc="" ilk="function" name="_setButtonClass" signature="_setButtonClass(button)">
              <variable ilk="argument" name="button" />
            </scope>
            <scope attributes="private" doc="callback when next button is clicked" ilk="function" name="_forward" />
            <scope doc="Finish the wizard&apos;s operation" ilk="function" name="done" />
            <scope doc="" ilk="function" name="destroy" />
            <scope name="cancelButton">
              <scope name="domNode" />
            </scope>
            <variable attributes="private" doc="" name="_subscription" />
            <variable attributes="private" doc="" name="_started" />
            <scope name="doneButton">
              <scope name="domNode" />
            </scope>
            <scope name="nextButton">
              <scope name="domNode" />
            </scope>
          </scope>
          <scope doc="A panel in a `dojox.widget.Wizard`" ilk="function" name="WizardPane">
            <variable citdl="Boolean" doc="If true, then can move back to a previous panel (by clicking the &amp;amp;quot;Previous&amp;amp;quot; button)" name="canGoBack" />
            <variable citdl="String" doc="Name of function that checks if it&apos;s OK to advance to the next panel. If it&apos;s not OK (for example, mandatory field hasn&apos;t been entered), then returns an error message (String) explaining the reason." name="passFunction" />
            <variable citdl="String" doc="Name of function that is run if you press the &amp;amp;quot;Done&amp;amp;quot; button from this panel" name="doneFunction" />
            <scope doc="" ilk="function" name="startup" />
            <scope attributes="private" doc="" ilk="function" name="_onShow" />
            <scope attributes="private" doc="Called when the user presses the &amp;amp;quot;next&amp;amp;quot; button. Calls passFunction to see if it&apos;s OK to advance to next panel, and if it isn&apos;t, then display error. Returns true to advance, false to not advance. If passFunction returns a string, it is assumed to be a custom error message, and is alert()&apos;ed" ilk="function" name="_checkPass" returns="Boolean" />
            <scope doc="" ilk="function" name="done" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="wire">
          <scope doc="Initialize properties" ilk="function" name="CompositeWire" signature="CompositeWire(args)">
            <variable citdl="Object" doc="Arguments to initialize properties children: An object or array containing child Wires" ilk="argument" name="args" />
            <scope attributes="private" doc="" name="_wireClass" />
            <scope attributes="private" doc="Return an object with property values or an array with element values" ilk="function" name="_getValue" returns="Object||Array" signature="_getValue(object)">
              <variable citdl="Object||Array" doc="A root object" ilk="argument" name="object" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Set an object properties or an array elements to an object desription: This method calls setValues() method of the child Wires with a corresponding property or element in &apos;value&apos; argument and &apos;object&apos; argument." ilk="function" name="_setValue" returns="Object||Array" signature="_setValue(object,value)">
              <variable citdl="Object||Array" doc="A root object" ilk="argument" name="object" />
              <variable citdl="Object||Array" doc="An object or array with values to set" ilk="argument" name="value" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Initialize child Wires" ilk="function" name="_initializeChildren" returns="undefined" signature="_initializeChildren(children)">
              <variable citdl="Object||Array" doc="An object or array containing child Wires" ilk="argument" name="children" />
            </scope>
          </scope>
          <scope doc="Initialize properties" ilk="function" name="DataWire" signature="DataWire(args)">
            <variable citdl="Object" doc="Arguments to initialize properties" ilk="argument" name="args" />
            <scope attributes="private" doc="" name="_wireClass" />
            <scope attributes="private" doc="Return an attribute value of an item" ilk="function" name="_getValue" returns="Object|undefined|anything" signature="_getValue(object)">
              <variable citdl="Object" doc="A root item" ilk="argument" name="object" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Set an attribute value to an item" ilk="function" name="_setValue" returns="Object|undefined" signature="_setValue(object,value)">
              <variable citdl="Object" doc="A root item" ilk="argument" name="object" />
              <variable citdl="anything" doc="A value to set" ilk="argument" name="value" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Return an attribute value of an item" ilk="function" name="_getAttributeValue" returns="return array for &amp;quot;attribute[]&amp;quot;|anything" signature="_getAttributeValue(item,attribute)">
              <variable citdl="Object" doc="An item attribute An attribute name" ilk="argument" name="item" />
              <variable citdl="String" ilk="argument" name="attribute" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Set an attribute value to an item" ilk="function" name="_setAttributeValue" signature="_setAttributeValue(item,attribute,value)">
              <variable citdl="Object" doc="An item" ilk="argument" name="item" />
              <variable citdl="String" doc="An attribute name" ilk="argument" name="attribute" />
              <variable citdl="anything" doc="A value to set" ilk="argument" name="value" />
            </scope>
            <variable citdl="A" doc="data store attribute: A dotted notation to a descendant attribute" name="dataStore" />
          </scope>
          <scope doc="Initialize properties" ilk="function" name="TableAdapter" signature="TableAdapter(args)">
            <variable citdl="Object" doc="Arguments to initialize properties columns: An object or array containing child Wires for column values" ilk="argument" name="args" />
            <scope attributes="private" doc="" name="_wireClass" />
            <scope attributes="private" doc="Return an array of table row value (object or array)" ilk="function" name="_getValue" returns="Array" signature="_getValue(object)">
              <variable citdl="Array" doc="A root array" ilk="argument" name="object" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Not supported" ilk="function" name="_setValue" signature="_setValue(object,value)">
              <variable citdl="Array" ilk="argument" name="object" />
              <variable citdl="Array" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Return an array or object for a table row" ilk="function" name="_getRow" returns="Array||Object" signature="_getRow(object)">
              <variable citdl="Object||Array" ilk="argument" name="object" />
              <variable name="return_summary" />
            </scope>
          </scope>
          <scope doc="Initialize properties" ilk="function" name="TextAdapter" signature="TextAdapter(args)">
            <variable citdl="Object" doc="Arguments to initialize properties segments: An array containing child Wires for text segment values" ilk="argument" name="args" />
            <scope attributes="private" doc="" name="_wireClass" />
            <scope attributes="private" doc="Return a concatenated text" ilk="function" name="_getValue" returns="Object||Array|String" signature="_getValue(object)">
              <variable citdl="Object||Array" ilk="argument" name="object" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Not supported" ilk="function" name="_setValue" signature="_setValue(object,value)">
              <variable citdl="Object||Array" ilk="argument" name="object" />
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Return a concatenated text" ilk="function" name="_addSegment" returns="String" signature="_addSegment(text,segment)">
              <variable citdl="String" doc="A base text" ilk="argument" name="text" />
              <variable citdl="String" doc="A text segment to add" ilk="argument" name="segment" />
              <variable name="return_summary" />
            </scope>
            <variable citdl="A" doc="delimiter string" name="delimiter" />
          </scope>
          <scope doc="Initialize properties" ilk="function" name="TreeAdapter" signature="TreeAdapter(args)">
            <variable citdl="Object" doc="Arguments to initialize properties nodes: An array containing objects for child Wires for node values" ilk="argument" name="args" />
            <scope attributes="private" doc="" name="_wireClass" />
            <scope attributes="private" doc="Return an array of tree node values" ilk="function" name="_getValue" returns="Array" signature="_getValue(object)">
              <variable citdl="Array" doc="A root array" ilk="argument" name="object" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Not supported" ilk="function" name="_setValue" signature="_setValue(object,value)">
              <variable citdl="Array" ilk="argument" name="object" />
              <variable citdl="Array" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Initialize child Wires" ilk="function" name="_initializeChildren" returns="undefined" signature="_initializeChildren(children)">
              <variable citdl="Array" doc="An array of objects containing child Wires" ilk="argument" name="children" />
            </scope>
            <scope attributes="private" doc="Return an array of tree node values" ilk="function" name="_getNodes" returns="Array" signature="_getNodes(object,child)">
              <variable citdl="Object" doc="An object" ilk="argument" name="object" />
              <variable citdl="Object" doc="An object with child Wires" ilk="argument" name="child" />
              <scope name="return_summary" />
            </scope>
          </scope>
          <scope doc="Initialize properties" name="Wire" signature="Wire(args)">
            <variable citdl="Object" doc="Arguments to initialize properties object: A root object (or another Wire to access a root object) property: A dotted notation to a descendant property type: A type of the return value (for the source Wire)" ilk="argument" name="args" />
            <scope attributes="private" doc="" name="_wireClass" />
            <scope attributes="private" doc="Return a value of an object" ilk="function" name="getValue" returns="anything (null, undefined, etc)|anything" signature="getValue(defaultObject)">
              <variable citdl="Object||Array" doc="A default root object" ilk="argument" name="defaultObject" />
              <variable name="return_summary" />
            </scope>
            <scope doc="Set a value to an object" ilk="function" name="setValue" signature="setValue(value,defaultObject)">
              <variable citdl="anything" doc="A value to set" ilk="argument" name="value" />
              <variable citdl="Object||Array" doc="A default root object" ilk="argument" name="defaultObject" />
            </scope>
            <scope attributes="private" doc="Return a property value of an object" ilk="function" name="_getPropertyValue" returns="anything" signature="_getPropertyValue(object,property)">
              <variable citdl="Object||Array" doc="A default root object" ilk="argument" name="object" />
              <variable citdl="String" doc="A property name" ilk="argument" name="property" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Set a property value to an object" ilk="function" name="_setPropertyValue" signature="_setPropertyValue(object,property,value)">
              <variable citdl="Object||Array" doc="An object" ilk="argument" name="object" />
              <variable citdl="String" doc="A property name" ilk="argument" name="property" />
              <variable citdl="anything" doc="A value to set" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Function to detect if dijit.attr support exists on the target" ilk="function" name="_useAttr" signature="_useAttr(object)">
              <variable citdl="The" doc="target object to set the property of." ilk="argument" name="object" />
            </scope>
            <variable citdl="A" doc="converter object (or class name) to convert the return value (for the source Wire)" name="converter" />
          </scope>
          <scope doc="Initialize properties" ilk="function" name="XmlWire" signature="XmlWire(args)">
            <variable citdl="Object" doc="Arguments to initialize properties path: A simplified XPath to an attribute, a text or elements" ilk="argument" name="args" />
            <scope attributes="private" doc="" name="_wireClass" />
            <scope attributes="private" doc="Return an attribute value, a text value or an array of elements" ilk="function" name="_getValue" returns="Node|undefined|String||Array" signature="_getValue(object)">
              <variable citdl="Node" doc="A root node" ilk="argument" name="object" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Set an attribute value or a child text value to an element" ilk="function" name="_setValue" returns="Node|to be returned as a new object|undefined" signature="_setValue(object,value)">
              <variable citdl="Node" doc="A root node" ilk="argument" name="object" />
              <variable citdl="String" doc="A value to set" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Return an attribute value, a text value or an array of elements" ilk="function" name="_getNodeValue" returns="String||Array" signature="_getNodeValue(node,exp)">
              <variable citdl="Node" doc="A node" ilk="argument" name="node" />
              <variable citdl="String" doc="An expression for attribute, text or elements" ilk="argument" name="exp" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Set an attribute value or a child text value to an element" ilk="function" name="_setNodeValue" signature="_setNodeValue(node,exp,value)">
              <variable citdl="Node" doc="A node" ilk="argument" name="node" />
              <variable citdl="String" doc="An expression for attribute or text" ilk="argument" name="exp" />
              <variable citdl="String" doc="A value to set" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Return a child node" ilk="function" name="_getChildNode" returns="Node|null" signature="_getChildNode(node,name)">
              <variable citdl="Node" doc="A parent node" ilk="argument" name="node" />
              <variable citdl="String" doc="A tag name" ilk="argument" name="name" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Return a DOM document" ilk="function" name="_getDocument" returns="Document" signature="_getDocument(node)">
              <variable citdl="Node" ilk="argument" name="node" />
              <variable name="return_summary" />
            </scope>
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_wireClasses">
            <scope doc="" name="attribute" />
            <scope doc="" name="path" />
            <scope doc="" name="children" />
            <scope doc="" name="columns" />
            <scope doc="" name="nodes" />
            <scope doc="" name="segments" />
          </variable>
          <scope attributes="private" doc="Register a Wire class desription: The specified Wire class or a class name is registered with a key property of arguments to create a Wire" ilk="function" name="register" returns="undefined" signature="register(wireClass,key)">
            <variable citdl="Function||String" doc="A class or full qualified class name" ilk="argument" name="wireClass" />
            <variable citdl="String" doc="A key property of arguments to create a Wire" ilk="argument" name="key" />
          </scope>
          <scope attributes="private" doc="Returns a class" ilk="function" name="_getClass" returns="Function" signature="_getClass(name)">
            <variable citdl="String" doc="A class name" ilk="argument" name="name" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="Create a Wire from arguments" ilk="function" name="create" returns="Object" signature="create(args)">
            <variable citdl="Object" doc="Arguments to create a Wire" ilk="argument" name="args" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="Check if an object is a Wire" ilk="function" name="isWire" returns="Boolean" signature="isWire(wire)">
            <variable citdl="Object" doc="An object to check" ilk="argument" name="wire" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="Transfer a source value to a target value" ilk="function" name="transfer" returns="undefined" signature="transfer(source,target,defaultObject,defaultTargetObject)">
            <variable citdl="Wire||Object" doc="A Wire or arguments to create a Wire for a source value" ilk="argument" name="source" />
            <variable citdl="Wire||Object" doc="A Wire or arguments to create a Wire for a target value" ilk="argument" name="target" />
            <variable citdl="Object" doc="defaultTargetObject; Optional default root objects passed to Wires" ilk="argument" name="defaultObject" />
            <variable citdl="Object" ilk="argument" name="defaultTargetObject" />
          </scope>
          <scope attributes="private" doc="Transfer a source value to a target value on a trigger event or topic" ilk="function" name="connect" returns="undefined|Object" signature="connect(trigger,source,target)">
            <variable citdl="Object" doc="An event or topic to trigger a transfer" ilk="argument" name="trigger" />
            <variable citdl="Wire||Object" doc="A Wire or arguments to create a Wire for a source value" ilk="argument" name="source" />
            <variable citdl="Wire||Object" doc="A Wire or arguments to create a Wire for a target value" ilk="argument" name="target" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="Remove a connection or subscription for transfer" ilk="function" name="disconnect" returns="undefined" signature="disconnect(connection)">
            <variable citdl="Object" doc="A connection handle returned by connect()" ilk="argument" name="connection" />
          </scope>
          <scope attributes="private" doc="" name="_defaultWireClass" />
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <variable citdl="Object" doc="" name="ml">
            <scope doc="A base widget to &amp;amp;quot;run&amp;amp;quot; a task on an event or a topic" ilk="function" name="Action">
              <scope citdl="An" doc="event scope" name="trigger" />
              <scope citdl="An" doc="event (function) name" name="triggerEvent" />
              <scope citdl="A" doc="topic name" name="triggerTopic" />
              <scope doc="Call _connect()" ilk="function" name="postCreate" />
              <scope attributes="private" doc="Connect run() method to an event or a topic" ilk="function" name="_connect" />
              <scope attributes="private" doc="Disconnect run() method from an event or a topic" ilk="function" name="_disconnect" />
              <scope doc="Run a task" ilk="function" name="run" />
              <scope attributes="private" doc="Call run() methods of child Action widgets" ilk="function" name="_run" />
              <scope doc="Over-ride of base widget unitialize function to do some connection cleanup." ilk="function" name="uninitialize" />
              <variable attributes="private" doc="" name="_triggerHandle" />
            </scope>
            <scope doc="A widget to define a filter for the parent Action to run" name="ActionFilter">
              <variable citdl="A" doc="property required" name="required" />
              <variable citdl="Optional." doc="A specific value the property is required to have. If this isn&apos;t provided than any non-false/non-null value of the required propery will cause this filter to pass." name="requiredValue" />
              <scope citdl="An" doc="error message to emit if the filter doesn&apos;t execute due to property mismatch." name="message" />
              <scope citdl="A" doc="property to store an error due to property mismatch." name="error" />
              <scope attributes="private" doc="Check if a required property is specified. Also, if provided, check to see if the required property contains a specific value." ilk="function" name="filter" returns="Boolean|boolean">
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope doc="A widget for a data object" ilk="function" name="Data">
              <scope doc="Call _initializeProperties()" ilk="function" name="startup" />
              <scope attributes="private" doc="Initialize a data object" ilk="function" name="_initializeProperties" signature="_initializeProperties(reset)">
                <variable citdl="Boolean" doc="A boolean to reset current properties" ilk="argument" name="reset" />
              </scope>
              <scope attributes="private" doc="Return a property value" ilk="function" name="getPropertyValue" returns="anything" signature="getPropertyValue(property)">
                <variable citdl="String" doc="A property name" ilk="argument" name="property" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Store a property value" ilk="function" name="setPropertyValue" signature="setPropertyValue(property,value)">
                <variable citdl="String" doc="A property name" ilk="argument" name="property" />
                <variable citdl="anything" doc="A property value" ilk="argument" name="value" />
              </scope>
              <variable attributes="private" doc="" name="_properties" />
            </scope>
            <scope doc="A widget to define a data property" name="DataProperty">
              <scope citdl="A" doc="property name" name="name" />
              <scope citdl="A" doc="property value" name="value" />
              <scope attributes="private" doc="" ilk="function" name="_getValueAttr" />
              <scope attributes="private" doc="Returns a property value" ilk="function" name="getValue" returns="anything">
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope doc="A widget for a data store" ilk="function" name="DataStore">
              <scope citdl="A" doc="class name of a data store" name="storeClass" />
              <scope doc="Call _createStore()" ilk="function" name="postCreate" />
              <scope attributes="private" doc="Create a data store desription: A data store of &apos;storeClass&apos; is created with arguments specified with attributes." ilk="function" name="_createStore" returns="null|Object">
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Call getFeatures() method of a data store" ilk="function" name="getFeatures" returns="Object">
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Call fetch() method of a data store" ilk="function" name="fetch" returns="Object" signature="fetch(request)">
                <variable citdl="Object" doc="A request object" ilk="argument" name="request" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Call save() method of a data store" ilk="function" name="save" signature="save(args)">
                <variable citdl="Object" doc="A save arguments object" ilk="argument" name="args" />
              </scope>
              <scope attributes="private" doc="Call newItem() method of a data store" ilk="function" name="newItem" returns="Object" signature="newItem(args)">
                <variable citdl="Object" doc="A new item arguments object" ilk="argument" name="args" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Call deleteItem() method of a data store" ilk="function" name="deleteItem" returns="Boolean" signature="deleteItem(item)">
                <variable citdl="Object" ilk="argument" name="item" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Call revert() method of a data store" ilk="function" name="revert" returns="Boolean">
                <variable name="return_summary" />
              </scope>
              <variable doc="" name="store" />
            </scope>
            <scope doc="A widget to invoke a method or publish a topic" ilk="function" name="Invocation" signature="Invocation(prototype,type,summary)">
              <scope citdl="A" doc="scope of a method to invoke" name="object" />
              <variable citdl="A" doc="name of a method to invoke" name="method" />
              <scope citdl="A" doc="name of a topic to publish" name="topic" />
              <variable ilk="argument" name="prototype" />
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="summary" />
              <scope citdl="A" doc="property to store a return value of the method call" name="result" />
              <scope citdl="A" doc="property to store an error on the method call" name="error" />
              <scope attributes="private" doc="Invoke a method or publish a topic" ilk="function" name="_run" returns="undefined" />
              <scope doc="A function called when the method or the topic publish completed" ilk="function" name="onComplete" signature="onComplete(result)">
                <variable citdl="anything" doc="The return value of a method or undefined for a topic" ilk="argument" name="result" />
              </scope>
              <scope doc="A function called on an error occurs" ilk="function" name="onError" signature="onError(error)">
                <variable citdl="anything" doc="The exception or error occurred" ilk="argument" name="error" />
              </scope>
              <scope attributes="private" doc="Returns arguments to a method or topic to invoke" ilk="function" name="_getParameters" returns="Array" signature="_getParameters(args)">
                <variable citdl="Array" doc="Arguments to a trigger event or topic" ilk="argument" name="args" />
              </scope>
            </scope>
            <scope doc="A widget for a service" ilk="function" name="Service">
              <scope citdl="A" doc="URL to a service description" name="url" />
              <variable citdl="A" doc="URL to a service" name="serviceUrl" />
              <scope citdl="A" doc="service type" name="serviceType" />
              <scope citdl="A" doc="service handler class name" name="handlerClass" />
              <scope doc="" name="preventCache" />
              <scope doc="Call _createHandler()" ilk="function" name="postCreate" />
              <variable attributes="private" citdl="Object" doc="" name="_handlerClasses">
                <scope doc="" name="TEXT" />
                <scope doc="" name="XML" />
                <scope doc="" name="JSON" />
                <scope doc="" name="JSON-RPC" />
              </variable>
              <scope attributes="private" doc="Create a service handler desription: A service handler class is determined by: 1. &apos;handlerClass&apos; attribute 2. &apos;serviceType&apos; attribute 3. &apos;serviceType&apos; property in a service description" ilk="function" name="_createHandler" returns="null|Object">
                <variable name="return_summary" />
              </scope>
              <scope doc="Call a service method with parameters" ilk="function" name="callMethod" signature="callMethod(method,parameters)">
                <variable citdl="A" doc="method name" ilk="argument" name="method" />
                <variable citdl="An" doc="array parameters" ilk="argument" name="parameters" />
              </scope>
              <variable doc="" name="handler" />
            </scope>
            <scope doc="A REST service handler" ilk="function" name="RestHandler">
              <scope doc="" name="contentType" />
              <scope doc="" name="handleAs" />
              <scope doc="Call a service method with parameters." ilk="function" name="bind" signature="bind(method,parameters,deferred,url)">
                <variable citdl="A" doc="method name" ilk="argument" name="method" />
                <variable citdl="An" doc="array of parameters" ilk="argument" name="parameters" />
                <variable citdl="Deferred" doc="" ilk="argument" name="deferred" />
                <variable citdl="A" doc="URL for the method" ilk="argument" name="url" />
              </scope>
              <scope attributes="private" doc="Generate a URL" ilk="function" name="_getUrl" returns="String" signature="_getUrl(method,parameters,url)">
                <variable citdl="String" doc="A method name" ilk="argument" name="method" />
                <variable citdl="Array" doc="An array of parameters" ilk="argument" name="parameters" />
                <variable citdl="String" doc="A base URL" ilk="argument" name="url" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Generate a request content" ilk="function" name="_getContent" returns="anything|null" signature="_getContent(method,parameters)">
                <variable citdl="String" doc="A method name" ilk="argument" name="method" />
                <variable citdl="Array" doc="An array of parameters" ilk="argument" name="parameters" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Extract a result" ilk="function" name="_getResult" returns="anything" signature="_getResult(data)">
                <variable citdl="anything" doc="A response data returned by a service" ilk="argument" name="data" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope doc="A REST service handler for XML" ilk="function" name="XmlHandler">
              <scope doc="" name="contentType" />
              <scope doc="" name="handleAs" />
              <scope attributes="private" doc="" ilk="function" name="_getContent" signature="_getContent(method,parameters)">
                <variable citdl="String" doc="A method name" ilk="argument" name="method" />
                <variable citdl="Array" doc="An array of parameters" ilk="argument" name="parameters" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Extract a result" ilk="function" name="_getResult" signature="_getResult(data)">
                <variable citdl="Document" doc="A response data returned by a service" ilk="argument" name="data" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope doc="A REST service handler for JSON" ilk="function" name="JsonHandler">
              <scope doc="" name="contentType" />
              <scope doc="" name="handleAs" />
              <variable citdl="Object" doc="" name="headers">
                <scope doc="" name="Accept" />
              </variable>
              <scope attributes="private" doc="Generate a request content" ilk="function" name="_getContent" returns="String" signature="_getContent(method,parameters)">
                <variable citdl="String" doc="A method name" ilk="argument" name="method" />
                <variable citdl="Array" doc="An array of parameters" ilk="argument" name="parameters" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope doc="A widget to transfer values through source and target Wires" name="Transfer">
              <scope citdl="A" doc="data store for a source data item" name="sourceStore" />
              <scope citdl="An" doc="attribute of a source data item" name="sourceAttribute" />
              <scope citdl="A" doc="simplified XPath to a source property of an XML element" name="sourcePath" />
              <scope citdl="A" doc="class name of a converter for the value to be transferred" name="converter" />
              <scope doc="" name="delimiter" />
              <scope citdl="A" doc="target object and/or property" name="target" />
              <scope citdl="A" doc="data store for a target data item" name="targetStore" />
              <scope citdl="An" doc="attribute of a target data item" name="targetAttribute" />
              <scope citdl="A" doc="simplified XPath to a target property of an XML element" name="targetPath" />
              <scope attributes="private" doc="Transfer a value from a source to a target" ilk="function" name="_run" />
              <scope attributes="private" doc="Build Wire arguments from attributes" ilk="function" name="_getWire" returns="Object" signature="_getWire(which)">
                <variable citdl="String" doc="Which Wire arguments to build, &amp;amp;quot;source&amp;amp;quot; or &amp;amp;quot;target&amp;amp;quot;" ilk="argument" name="which" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope doc="A widget to add a child wire" name="ChildWire">
              <scope citdl="Which" doc="Wire to add a child Wire, &amp;amp;quot;source&amp;amp;quot; or &amp;amp;quot;target&amp;amp;quot;, default to &amp;amp;quot;source&amp;amp;quot;" name="which" />
              <scope citdl="A" doc="root object for the value" name="object" />
              <scope citdl="A" doc="property for the value" name="property" />
              <scope citdl="A" doc="class name of a converter for the value" name="converter" />
              <scope citdl="A" doc="data item attribute for the value" name="attribute" />
              <scope citdl="A" doc="simplified XPath for the value" name="path" />
              <scope citdl="A" doc="composite property name" name="name" />
              <scope attributes="private" doc="Add a child Wire to Wire arguments" ilk="function" name="_addWire" signature="_addWire(parent,args)">
                <variable citdl="Transfer" doc="A parent Transfer widget" ilk="argument" name="parent" />
                <variable citdl="Object" doc="Wire arguments" ilk="argument" name="args" />
              </scope>
              <scope attributes="private" doc="Build child Wire arguments from attributes" ilk="function" name="_getWire" signature="_getWire(parent)">
                <variable citdl="Transfer" doc="A parent Transfer widget" ilk="argument" name="parent" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope doc="A widget to add a column wire" ilk="function" name="ColumnWire">
              <scope citdl="A" doc="column name" name="column" />
              <scope attributes="private" doc="Add a column Wire to Wire arguments" ilk="function" name="_addWire" signature="_addWire(parent,args)">
                <variable citdl="Transfer" doc="A parent Transfer widget" ilk="argument" name="parent" />
                <variable citdl="Object" doc="Wire arguments" ilk="argument" name="args" />
              </scope>
            </scope>
            <scope doc="A widget to add node wires" ilk="function" name="NodeWire">
              <scope citdl="A" doc="property for the node title" name="titleProperty" />
              <scope citdl="A" doc="data item attribute for the node title" name="titleAttribute" />
              <scope citdl="A" doc="simplified XPath for the node title" name="titlePath" />
              <scope attributes="private" doc="Add node Wires to Wire arguments" ilk="function" name="_addWire" signature="_addWire(parent,args)">
                <variable citdl="Transfer" doc="A parent Transfer widget" ilk="argument" name="parent" />
                <variable citdl="Object" doc="Wire arguments" ilk="argument" name="args" />
              </scope>
              <scope attributes="private" doc="Build node Wires arguments from attributes" ilk="function" name="_getWires" returns="Object" signature="_getWires(parent)">
                <variable citdl="Transfer" doc="A parent Transfer widget" ilk="argument" name="parent" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope doc="A widget to add a segment wire" ilk="function" name="SegmentWire">
              <scope attributes="private" doc="Add a segument Wire to Wire arguments" ilk="function" name="_addWire" signature="_addWire(parent,args)">
                <variable citdl="Transfer" doc="A parent Transfer widget" ilk="argument" name="parent" />
                <variable citdl="Object" doc="Wire arguments" ilk="argument" name="args" />
              </scope>
            </scope>
            <scope doc="Initialize with an XML element or a tag name" ilk="function" name="XmlElement" signature="XmlElement(element)">
              <variable citdl="Element||String" doc="An XML element or a tag name" ilk="argument" name="element" />
              <scope attributes="private" doc="Return a property value" ilk="function" name="getPropertyValue" returns="undefined|String||Array||XmlElement" signature="getPropertyValue(property)">
                <variable citdl="String" doc="A property name" ilk="argument" name="property" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Store a property value" ilk="function" name="setPropertyValue" returns="undefined" signature="setPropertyValue(property,value)">
                <variable citdl="String" doc="A property name" ilk="argument" name="property" />
                <variable citdl="String||Array||XmlElement" doc="A property value" ilk="argument" name="value" />
              </scope>
              <scope attributes="private" doc="Return a value of the first text child of the element" ilk="function" name="toString" returns="String">
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Return an object representation of the element" ilk="function" name="toObject" returns="null|String|Object">
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Return a DOM document" ilk="function" name="_getDocument" returns="Document">
                <variable name="return_summary" />
              </scope>
              <variable citdl="An" doc="XML element or a tag name" name="element">
                <variable doc="" name="nodeType" />
              </variable>
            </scope>
            <scope attributes="private" doc="Return a value" ilk="function" name="_getValue" returns="undefined|Object|anything" signature="_getValue(source,args)">
              <variable citdl="String" doc="A string to specify an object and its property" ilk="argument" name="source" />
              <variable citdl="Array" doc="An optional arguments array" ilk="argument" name="args" />
              <variable name="return_summary" />
            </scope>
            <scope attributes="private" doc="Store a value" ilk="function" name="_setValue" returns="undefined" signature="_setValue(target,value)">
              <variable citdl="String" doc="A string to specify an object and its property" ilk="argument" name="target" />
              <variable citdl="anything" doc="A value" ilk="argument" name="value" />
            </scope>
            <variable citdl="Object" doc="" name="util" />
          </variable>
        </variable>
        <variable citdl="Object" doc="" name="xml">
          <scope doc="" ilk="function" name="DomParser">
            <scope name="initialized" />
            <variable doc="" name="nodeType" />
            <variable doc="" name="nodeName" />
            <variable doc="" name="namespaces" />
            <variable attributes="private" doc="" name="_nsPaths" />
            <variable doc="" name="childNodes" />
            <variable doc="" name="documentElement" />
            <variable doc="" name="byId" />
            <variable doc="" name="byName" />
            <variable doc="" name="byNameNS" />
            <variable doc="" name="childrenByName" />
            <variable doc="" name="childrenByNameNS" />
            <variable attributes="private" doc="" ilk="function" name="_add" signature="_add(obj)">
              <variable ilk="argument" name="obj" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_remove" signature="_remove(id)">
              <variable ilk="argument" name="id" />
            </variable>
            <variable doc="" ilk="function" name="getElementById" signature="getElementById(id)">
              <variable ilk="argument" name="id" />
            </variable>
            <variable doc="" ilk="function" name="parse" signature="parse(str)">
              <variable citdl="String" ilk="argument" name="str" />
            </variable>
          </scope>
          <scope doc="" ilk="function" name="Script" signature="Script(props,node)">
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="node" />
          </scope>
          <variable citdl="Object" doc="" name="parser">
            <scope attributes="private" doc="cross-browser implementation of creating an XML document object from null, empty string, and XML text.." ilk="function" name="parse" returns="DOMDocument|null" signature="parse(str,mimetype)">
              <variable citdl="String" doc="Optional text to create the document from. If not provided, an empty XML document will be created. If str is empty string &amp;amp;quot;&amp;amp;quot;, then a new empty document will be created." ilk="argument" name="str" />
              <variable citdl="String" doc="Optional mimetype of the text. Typically, this is text/xml. Will be defaulted to text/xml if not provided." ilk="argument" name="mimetype" />
            </scope>
            <scope attributes="private" doc="Implementation of the DOM Level 3 attribute; scan node for text" ilk="function" name="textContent" returns="String" signature="textContent(node,text)">
              <variable citdl="Node" doc="The node to get the text off of or set the text on." ilk="argument" name="node" />
              <variable citdl="String" doc="Optional argument of the text to apply to the node." ilk="argument" name="text" />
            </scope>
            <scope doc="Removes all children of node and appends newChild. All the existing children will be destroyed." ilk="function" name="replaceChildren" signature="replaceChildren(node,newChildren)">
              <variable citdl="Element" doc="The node to modify the children on" ilk="argument" name="node" />
              <variable citdl="Node || Array" doc="The children to add to the node. It can either be a single Node or an array of Nodes." ilk="argument" name="newChildren" />
            </scope>
            <scope attributes="private" doc="removes all children from node and returns the count of children removed. The children nodes are not destroyed. Be sure to call dojo.destroy on them after they are not used anymore." ilk="function" name="removeChildren" returns="int" signature="removeChildren(node)">
              <variable citdl="Element" doc="The node to remove all the children from." ilk="argument" name="node" />
            </scope>
            <scope attributes="private" doc="Implementation of MS&apos;s innerXML function." ilk="function" name="innerXML" returns="String" signature="innerXML(node)">
              <variable citdl="Node" doc="The node from which to generate the XML text representation." ilk="argument" name="node" />
            </scope>
          </variable>
          <scope doc="" ilk="function" name="widgetParser">
            <scope name="initialized" />
            <variable doc="" ilk="function" name="parseNode" signature="parseNode(node)">
              <variable ilk="argument" name="node" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_processScript" signature="_processScript(script)">
              <variable ilk="argument" name="script" />
            </variable>
            <variable doc="" ilk="function" name="toHTML" signature="toHTML(node)">
              <variable citdl="XmlNode" ilk="argument" name="node" />
            </variable>
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="resources" />
        <variable citdl="Object" doc="" name="robot" />
        <variable citdl="Object" doc="" name="rpc">
          <variable citdl="Object" doc="" name="JsonRPC" />
          <variable citdl="Object" doc="" name="JsonRest">
            <scope doc="" name="conflictDateHeader" />
            <scope doc="Saves the dirty data using REST Ajax methods" ilk="function" name="commit" signature="commit(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope doc="" ilk="function" name="sendToServer" signature="sendToServer(actions,kwArgs)">
              <variable ilk="argument" name="actions" />
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope doc="" ilk="function" name="getDirtyObjects" />
            <scope doc="Reverts all the changes made to JSON/REST data" ilk="function" name="revert" signature="revert(service)">
              <variable ilk="argument" name="service" />
            </scope>
            <scope doc="adds an object to the list of dirty objects. This object contains a reference to the object itself as well as a cloned and trimmed version of old object for use with revert." ilk="function" name="changing" signature="changing(object,_deleting)">
              <variable ilk="argument" name="object" />
              <variable ilk="argument" name="_deleting" />
            </scope>
            <scope doc="deletes an object" ilk="function" name="deleteObject" signature="deleteObject(object)">
              <variable citdl="object" doc="to delete" ilk="argument" name="object" />
            </scope>
            <scope doc="Creates or gets a constructor for objects from this service" ilk="function" name="getConstructor" signature="getConstructor(service,schema)">
              <variable citdl="Function|String" ilk="argument" name="service" />
              <variable ilk="argument" name="schema" />
              <variable attributes="private" doc="" name="__id" />
            </scope>
            <scope doc="Fetches a resource by an absolute path/id and returns a dojo.Deferred." ilk="function" name="fetch" signature="fetch(absoluteId)">
              <variable ilk="argument" name="absoluteId" />
            </scope>
            <scope doc="Return the ids attribute used by this service (based on it&apos;s schema). Defaults to &amp;amp;quot;id&amp;amp;quot;, if not other id is defined" ilk="function" name="getIdAttribute" signature="getIdAttribute(service)">
              <variable ilk="argument" name="service" />
            </scope>
            <scope doc="Returns the REST service and the local id for the given absolute id. The result is returned as an object with a service property and an id property" ilk="function" name="getServiceAndId" signature="getServiceAndId(absoluteId)">
              <variable citdl="String" doc="This is the absolute id of the object" ilk="argument" name="absoluteId" />
            </scope>
            <scope doc="" name="services" />
          </variable>
          <scope attributes="private" doc="Creates a REST service using the provided path." ilk="function" name="Rest" returns="the last parameter is to let the OfflineRest know where to store the item" signature="Rest(path,isJson,schema,getRequest)">
            <variable citdl="String" ilk="argument" name="path" />
            <variable citdl="Boolean" ilk="argument" name="isJson" />
            <variable citdl="Object" ilk="argument" name="schema" />
            <variable ilk="function" name="getRequest" />
            <scope attributes="private" doc="" ilk="function" name="_get" returns="TODO: Make the right error determination|if it is not found we have to just return the error|server error, let the error propagate" signature="_get(service,id)">
              <variable ilk="argument" name="service" />
              <variable ilk="argument" name="id" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_change" signature="_change(method,service,id,serializedContent)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="service" />
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="serializedContent" />
            </scope>
          </scope>
          <variable citdl="Object" doc="" name="OfflineRest">
            <scope doc="" ilk="function" name="turnOffAutoSync" />
            <scope doc="" name="sync" />
            <scope doc="" name="sendChanges" />
            <scope doc="" ilk="function" name="downloadChanges" />
            <scope doc="Adds a store to the monitored store for local storage" ilk="function" name="addStore" signature="addStore(store,baseQuery)">
              <variable citdl="data-store" doc="Store to add" ilk="argument" name="store" />
              <variable citdl="query" doc="This is the base query to should be used to load the items for the store. Generally you want to load all the items that should be available when offline." ilk="argument" name="baseQuery" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="ProxiedPath" />
          <scope doc="Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use as a definition for the service" ilk="function" name="Service" signature="Service(smd,options)">
            <variable citdl="object" doc="Takes a number of properties as kwArgs for defining the service. It also accepts a string. When passed a string, it is treated as a url from which it should synchronously retrieve an smd file. Otherwise it is a kwArgs object. It accepts serviceUrl, to manually define a url for the rpc service allowing the rpc system to be used without an smd definition. strictArgChecks forces the system to verify that the # of arguments provided in a call matches those defined in the smd. smdString allows a developer to pass a jsonString directly, which will be converted into an object or alternatively smdObject is accepts an smdObject directly." ilk="argument" name="smd" />
            <variable ilk="argument" name="options" />
            <scope attributes="private" doc="" ilk="function" name="_generateService" returns="define the schema" signature="_generateService(serviceName,method)">
              <variable ilk="argument" name="serviceName" />
              <variable ilk="argument" name="method" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getRequest" returns="serialize with the right schema for the context;" signature="_getRequest(method,args)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_executeMethod" signature="_executeMethod(method)">
              <variable ilk="argument" name="method" />
            </scope>
            <variable attributes="private" doc="" name="_options" />
            <variable attributes="private" doc="" name="_requestId" />
            <scope attributes="private" doc="" name="_nextId" />
          </scope>
          <scope doc="" ilk="function" name="getTarget" signature="getTarget(smd,method)">
            <variable ilk="argument" name="smd" />
            <variable ilk="argument" name="method" />
          </scope>
          <scope doc="" ilk="function" name="toOrdered" signature="toOrdered(method,args)">
            <variable ilk="argument" name="method" />
            <variable ilk="argument" name="args" />
          </scope>
          <scope doc="" name="transportRegistry" />
          <scope doc="" name="envelopeRegistry" />
        </variable>
        <variable citdl="Object" doc="" name="secure">
          <variable citdl="Object" doc="" name="capability">
            <scope doc="" name="keywords" />
            <scope attributes="private" doc="pass in the text of a script. If it passes and it can be eval&apos;ed, it should be safe. Note that this does not do full syntax checking, it relies on eval to reject invalid scripts. There are also known false rejections: Nesting vars inside blocks will not declare the variable for the outer block Named functions are not treated as declaration so they are generally not allowed unless the name is declared with a var. Var declaration that involve multiple comma delimited variable assignments are not accepted" ilk="function" name="validate" returns="comments are replaced with a space, strings and regex are replaced with a single safe token (0)|replace literal keys with 0: and replace properties with the innocuous ~|check for illegal operator usages|the whitelist for [ operator for array initializer context or [+num] syntax|turn into a known safe call|return a block reference so the outer block can fetch it" signature="validate(script,safeLibraries,safeGlobals)">
              <variable citdl="string" doc="the script to execute" ilk="argument" name="script" />
              <variable citdl="Array" doc="The safe libraries that can be called (the functions can not be access/modified by the untrusted code, only called)" ilk="argument" name="safeLibraries" />
              <variable citdl="Object" doc="These globals can be freely interacted with by the untrusted code" ilk="argument" name="safeGlobals" />
            </scope>
          </variable>
          <scope doc="" name="badProps" />
          <scope attributes="private" doc="" ilk="function" name="__Sandbox">
            <scope doc="Loads the script from the given URL using XHR (assuming a plugin system is in place for cross-site requests) within the sandbox" ilk="function" name="loadJS" signature="loadJS(url)">
              <variable citdl="The" doc="url of the script to load" ilk="argument" name="url" />
            </scope>
            <scope doc="Loads the web page from the provided URL using XHR (assuming the plugin system is in place) within the sandbox. All scripts within the web page will also be sandboxed." ilk="function" name="loadHTML" signature="loadHTML(url)">
              <variable citdl="The" doc="url of the web page to load" ilk="argument" name="url" />
            </scope>
            <scope doc="Evaluates the given script within the sandbox" ilk="function" name="evaluate" signature="evaluate(script)">
              <variable citdl="The" doc="JavaScript text to evaluate" ilk="argument" name="script" />
            </scope>
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_safeDojoFunctions" returns="dojox.secure.__Sandbox|wrap the NodeList|use the safe document" signature="_safeDojoFunctions(element,wrap)">
            <variable ilk="argument" name="element" />
            <variable ilk="argument" name="wrap" />
          </scope>
          <scope attributes="private" doc="Creates a secure sandbox from which scripts and HTML can be loaded that will only be able to access the provided element and it&apos;s descendants, the rest of the DOM and JS environment will not be accessible to the sandboxed scripts and HTML." ilk="function" name="sandbox" returns="dojox.secure.__Sandbox" signature="sandbox(element)">
            <variable citdl="The" doc="DOM element to use as the container for the sandbox" ilk="argument" name="element" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="sketch">
          <scope doc="" ilk="function" name="AnnotationTool">
            <scope doc="" ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="onMouseMove" signature="onMouseMove(e,rect)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="rect" />
            </scope>
            <scope doc="" ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_create" signature="_create(start,end)">
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="end" />
            </scope>
            <variable attributes="private" doc="" name="_omd" />
            <variable attributes="private" doc="" name="_cshape" />
          </scope>
          <scope doc="" ilk="function" name="Annotation" signature="Annotation(figure,id)">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable citdl="Object" doc="" name="Modes">
              <scope doc="" name="View" />
              <scope doc="" name="Edit" />
            </variable>
            <variable doc="" name="id" />
            <variable doc="" name="figure" />
            <variable doc="" name="mode" />
            <variable doc="" name="shape" />
            <variable doc="" name="boundingBox" />
            <variable doc="" name="hasAnchors" />
            <variable doc="" name="anchors" />
            <variable attributes="private" doc="" name="_properties" />
            <scope doc="" ilk="function" name="register" signature="register(name,toolclass)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="toolclass" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="DoubleArrowAnnotation" signature="DoubleArrowAnnotation(figure,id)">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable doc="" name="transform" />
            <variable doc="" name="start" />
            <variable doc="" name="control" />
            <variable doc="" name="end" />
            <variable doc="" name="textPosition" />
            <variable doc="" name="textOffset" />
            <variable doc="" name="textYOffset" />
            <variable doc="" name="textAlign" />
            <variable doc="" name="startRotation" />
            <variable doc="" name="endRotation" />
            <variable doc="" name="labelShape" />
            <variable doc="" name="pathShape" />
            <variable doc="" name="startArrow" />
            <variable doc="" name="startArrowGroup" />
            <variable doc="" name="endArrow" />
            <variable doc="" name="endArrowGroup" />
            <scope name="anchors">
              <variable doc="" name="start" />
              <variable doc="" name="control" />
              <variable doc="" name="end" />
            </scope>
          </scope>
          <variable citdl="Object" doc="" name="tools" />
          <scope doc="" ilk="function" name="registerTool" signature="registerTool(type,fn)">
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="fn" />
          </scope>
          <scope doc="" ilk="function" name="Figure" signature="Figure(mixin)">
            <variable ilk="argument" name="mixin" />
            <variable doc="" name="annCounter" />
            <variable doc="" name="shapes" />
            <variable doc="" name="image" />
            <variable doc="" name="imageSrc" />
            <variable doc="" name="size" />
            <variable doc="" name="surface" />
            <variable doc="" name="group" />
            <variable doc="" name="node" />
            <variable doc="" name="zoomFactor" />
            <variable doc="" name="tools" />
            <variable doc="" name="obj" />
            <variable doc="" name="selected" />
            <variable attributes="private" doc="" name="_c" />
            <variable attributes="private" doc="" name="_ctr" />
            <variable attributes="private" doc="" name="_lp" />
            <variable attributes="private" doc="" name="_action" />
            <variable attributes="private" doc="" name="_prevState" />
            <variable attributes="private" doc="" name="_startPoint" />
            <variable attributes="private" doc="" name="_ctool" />
            <variable attributes="private" doc="" name="_start" />
            <variable attributes="private" doc="" name="_end" />
            <variable attributes="private" doc="" name="_absEnd" />
            <variable attributes="private" doc="" name="_cshape" />
            <variable doc="" ilk="function" name="hasSelections" />
            <variable doc="" ilk="function" name="isSelected" signature="isSelected(obj)">
              <variable ilk="argument" name="obj" />
            </variable>
            <variable doc="" ilk="function" name="select" signature="select(obj)">
              <variable ilk="argument" name="obj" />
            </variable>
            <variable doc="" ilk="function" name="deselect" signature="deselect(obj)">
              <variable ilk="argument" name="obj" />
            </variable>
            <variable doc="" ilk="function" name="clearSelections" />
            <variable doc="" ilk="function" name="replaceSelection" signature="replaceSelection(n,o)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="o" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_dblclick" signature="_dblclick(e)">
              <variable ilk="argument" name="e" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_keydown" signature="_keydown(e)">
              <variable ilk="argument" name="e" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_md" signature="_md(e)">
              <variable ilk="argument" name="e" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_mm" signature="_mm(e)">
              <variable ilk="argument" name="e" />
            </variable>
            <variable attributes="private" doc="" ilk="function" name="_mu" signature="_mu(e)">
              <variable ilk="argument" name="e" />
            </variable>
          </scope>
          <scope doc="" ilk="function" name="LeadAnnotation" signature="LeadAnnotation(figure,id)">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable doc="" name="transform" />
            <variable doc="" name="start" />
            <variable doc="" name="control" />
            <variable doc="" name="end" />
            <variable doc="" name="textPosition" />
            <variable doc="" name="textOffset" />
            <variable doc="" name="textAlign" />
            <variable doc="" name="textYOffset" />
            <variable doc="" name="pathShape" />
            <variable doc="" name="labelShape" />
            <scope name="anchors">
              <variable doc="" name="start" />
              <variable doc="" name="control" />
              <variable doc="" name="end" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="PreexistingAnnotation" signature="PreexistingAnnotation(figure,id)">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable doc="" name="transform" />
            <variable doc="" name="start" />
            <variable doc="" name="end" />
            <variable doc="" name="radius" />
            <variable doc="" name="textPosition" />
            <variable doc="" name="textOffset" />
            <variable doc="" name="textAlign" />
            <variable doc="" name="rectShape" />
            <variable doc="" name="labelShape" />
            <scope name="anchors">
              <variable doc="" name="start" />
              <variable doc="" name="end" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="SingleArrowAnnotation" signature="SingleArrowAnnotation(figure,id)">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable doc="" name="transform" />
            <variable doc="" name="start" />
            <variable doc="" name="control" />
            <variable doc="" name="end" />
            <variable doc="" name="textPosition" />
            <variable doc="" name="textOffset" />
            <variable doc="" name="textAlign" />
            <variable doc="" name="textYOffset" />
            <variable doc="" name="rotation" />
            <variable doc="" name="pathShape" />
            <variable doc="" name="arrowhead" />
            <variable doc="" name="arrowheadGroup" />
            <variable doc="" name="labelShape" />
            <scope name="anchors">
              <variable doc="" name="start" />
              <variable doc="" name="control" />
              <variable doc="" name="end" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="Slider">
            <scope attributes="private" doc="" ilk="function" name="_initButton" />
            <scope attributes="private" doc="" ilk="function" name="_zoomToFit" />
            <scope attributes="private" doc="" ilk="function" name="_setZoom" signature="_setZoom(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope doc="" ilk="function" name="setToolbar" signature="setToolbar(t)">
              <variable ilk="argument" name="t" />
            </scope>
            <variable doc="" name="slider">
              <scope name="_movable">
                <scope name="node">
                  <variable doc="" name="title" />
                </scope>
              </scope>
            </variable>
          </scope>
          <scope doc="" ilk="function" name="ButtonGroup">
            <scope doc="" ilk="function" name="add" signature="add(plugin)">
              <variable citdl="_Plugin" ilk="argument" name="plugin" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_resetGroup" signature="_resetGroup(p)">
              <variable ilk="argument" name="p" />
            </scope>
            <variable attributes="private" doc="" name="_childMaps" />
            <variable attributes="private" doc="" name="_children" />
          </scope>
          <scope doc="" ilk="function" name="Toolbar">
            <scope doc="" name="figure" />
            <variable doc="" name="plugins" />
            <scope doc="" ilk="function" name="postCreate" />
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="addGroupItem" signature="addGroupItem(item,group)">
              <variable citdl="_Plugin" ilk="argument" name="item" />
              <variable ilk="argument" name="group" />
            </scope>
            <scope doc="" ilk="function" name="reset" />
            <scope attributes="private" doc="" ilk="function" name="_setShape" signature="_setShape(s)">
              <variable ilk="argument" name="s" />
            </scope>
            <variable doc="" name="shapeGroup" />
            <variable attributes="private" doc="" name="_plugins" />
            <variable attributes="private" doc="" name="_defaultTool" />
          </scope>
          <scope doc="" ilk="function" name="makeToolbar" signature="makeToolbar(node,figure)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="figure" />
          </scope>
          <scope doc="" ilk="function" name="UnderlineAnnotation" signature="UnderlineAnnotation(figure,id)">
            <variable ilk="argument" name="figure" />
            <variable ilk="argument" name="id" />
            <variable doc="" name="transform" />
            <variable doc="" name="start" />
            <variable doc="" name="labelShape" />
            <variable doc="" name="lineShape" />
          </scope>
          <scope doc="" ilk="function" name="UndoStack" signature="UndoStack(figure)">
            <variable ilk="argument" name="figure" />
            <scope doc="" ilk="function" name="apply" signature="apply(state,from,to)">
              <variable ilk="argument" name="state" />
              <variable ilk="argument" name="from" />
              <variable ilk="argument" name="to" />
            </scope>
            <scope doc="" ilk="function" name="add" signature="add(cmd,ann,before)">
              <variable citdl="String" ilk="argument" name="cmd" />
              <variable citdl="ta.Annotation" ilk="argument" name="ann" />
              <variable citdl="String" ilk="argument" name="before" />
            </scope>
            <scope doc="" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="undo" />
            <scope doc="" ilk="function" name="redo" />
            <variable attributes="private" doc="" name="_undoedSteps" />
            <variable doc="" name="figure" />
            <variable attributes="private" doc="" name="_steps" />
          </scope>
          <variable citdl="Object" doc="" name="CommandTypes">
            <scope doc="" name="Create" />
            <scope doc="" name="Move" />
            <scope doc="" name="Modify" />
            <scope doc="" name="Delete" />
            <scope doc="" name="Convert" />
          </variable>
          <scope doc="" ilk="function" name="_Plugin" signature="_Plugin(args)">
            <variable citdl="Object" ilk="argument" name="args" />
            <variable doc="" name="figure" />
            <scope doc="" name="iconClassPrefix" />
            <scope doc="" name="itemGroup" />
            <variable doc="" name="button" />
            <scope doc="" name="queryCommand" />
            <scope doc="" name="shape" />
            <scope doc="" name="useDefaultCommand" />
            <scope doc="" name="buttonClass" />
            <scope attributes="private" doc="" ilk="function" name="_initButton" />
            <scope doc="" ilk="function" name="attr" signature="attr(name,value)">
              <variable ilk="argument" name="name" />
              <variable citdl="?" ilk="argument" name="value" />
            </scope>
            <scope doc="" ilk="function" name="onActivate" />
            <scope doc="" ilk="function" name="activate" signature="activate(e)">
              <variable citdl="?" ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="destroy" signature="destroy(f)">
              <variable ilk="argument" name="f" />
            </scope>
            <scope doc="" ilk="function" name="connect" signature="connect(o,f,tf)">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="f" />
              <variable ilk="argument" name="tf" />
            </scope>
            <scope doc="" ilk="function" name="setFigure" signature="setFigure(figure)">
              <variable citdl="Widget" ilk="argument" name="figure" />
            </scope>
            <scope doc="" ilk="function" name="setToolbar" signature="setToolbar(toolbar)">
              <variable citdl="Widget" ilk="argument" name="toolbar" />
            </scope>
            <variable attributes="private" doc="" name="_connects" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="sql">
          <scope doc="" name="dbName" />
          <scope doc="" name="debug" />
          <scope doc="" ilk="function" name="open" signature="open(dbName)">
            <variable ilk="argument" name="dbName" />
            <variable doc="" name="dbName" />
            <variable attributes="private" doc="" name="_dbOpen" />
          </scope>
          <scope doc="" ilk="function" name="close" signature="close(dbName)">
            <variable ilk="argument" name="dbName" />
            <variable attributes="private" doc="" name="_dbOpen" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_exec" returns="encrypted results will arrive asynchronously|decrypted results will arrive asynchronously" signature="_exec(params)">
            <variable ilk="argument" name="params" />
            <variable attributes="private" doc="" name="_autoClose" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_initDb">
            <variable doc="" name="db" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_printDebugSQL" signature="_printDebugSQL(sql,args)">
            <variable ilk="argument" name="sql" />
            <variable ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_normalizeResults" signature="_normalizeResults(rs)">
            <variable ilk="argument" name="rs" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_needsEncrypt" signature="_needsEncrypt(sql)">
            <variable ilk="argument" name="sql" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_needsDecrypt" signature="_needsDecrypt(sql)">
            <variable ilk="argument" name="sql" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_base" />
          <variable attributes="private" citdl="Object" doc="" name="_crypto">
            <scope attributes="private" doc="" name="_POOL_SIZE" />
            <scope doc="Use Corrected Block TEA to encrypt plaintext using password (note plaintext &amp;amp;amp; password must be strings not string objects). Results will be returned to the &apos;callback&apos; asychronously." ilk="function" name="encrypt" signature="encrypt(plaintext,password,callback)">
              <variable ilk="argument" name="plaintext" />
              <variable ilk="argument" name="password" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope doc="Use Corrected Block TEA to decrypt ciphertext using password (note ciphertext &amp;amp;amp; password must be strings not string objects). Results will be returned to the &apos;callback&apos; asychronously." ilk="function" name="decrypt" signature="decrypt(ciphertext,password,callback)">
              <variable ilk="argument" name="ciphertext" />
              <variable ilk="argument" name="password" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_initWorkerPool">
              <variable attributes="private" doc="" name="_manager">
                <variable doc="" ilk="function" name="onmessage" signature="onmessage(msg,sender)">
                  <variable ilk="argument" name="msg" />
                  <variable ilk="argument" name="sender" />
                </variable>
              </variable>
              <variable attributes="private" doc="" name="_unemployed" />
              <variable attributes="private" doc="" name="_employed" />
              <variable attributes="private" doc="" name="_handleMessage" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_assignWork" signature="_assignWork(msg,callback)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="callback" />
              <variable attributes="private" doc="" name="_handleMessage" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_workerHandler" returns="convert state to 1-d array before returning [&amp;Acirc;&amp;sect;3.4]|see fp.gladman.plus.com/cryptography_technology/rijndael/aes.spec.311.pdf|standard allows 128/192/256 bit keys" signature="_workerHandler(msg,sender)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="sender" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="" name="testing" />
        <variable citdl="Object" doc="" name="xmpp">
          <scope doc="" ilk="function" name="PresenceService" signature="PresenceService(xmppService)">
            <variable ilk="argument" name="xmppService" />
            <scope doc="" ilk="function" name="publish" signature="publish(presence)">
              <variable ilk="argument" name="presence" />
            </scope>
            <scope doc="" ilk="function" name="sendAvatarHash" signature="sendAvatarHash(avatarHash)">
              <variable ilk="argument" name="avatarHash" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setPresence" />
            <scope doc="" ilk="function" name="toggleBlockContact" signature="toggleBlockContact(jid)">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope doc="" ilk="function" name="toggleContactInvisiblity" signature="toggleContactInvisiblity(jid)">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_createRestrictedJid" />
            <scope attributes="private" doc="" ilk="function" name="_updateRestricted" />
            <scope attributes="private" doc="" ilk="function" name="_setVisible" />
            <scope attributes="private" doc="" ilk="function" name="_setInvisible" />
            <scope attributes="private" doc="" ilk="function" name="_manageSubscriptions" signature="_manageSubscriptions(contact,type)">
              <variable ilk="argument" name="contact" />
              <variable ilk="argument" name="type" />
            </scope>
            <scope doc="" ilk="function" name="subscribe" signature="subscribe(contact)">
              <variable ilk="argument" name="contact" />
            </scope>
            <scope doc="" ilk="function" name="approveSubscription" signature="approveSubscription(contact)">
              <variable ilk="argument" name="contact" />
            </scope>
            <scope doc="" ilk="function" name="unsubscribe" signature="unsubscribe(contact)">
              <variable ilk="argument" name="contact" />
            </scope>
            <scope doc="" ilk="function" name="declineSubscription" signature="declineSubscription(contact)">
              <variable ilk="argument" name="contact" />
            </scope>
            <scope doc="" ilk="function" name="cancelSubscription" signature="cancelSubscription(contact)">
              <variable ilk="argument" name="contact" />
            </scope>
            <variable doc="" name="presence" />
            <variable doc="" name="avatarHash" />
            <variable doc="" name="isInvisible" />
            <variable doc="" name="session" />
            <variable doc="" name="restrictedContactjids" />
          </scope>
          <variable citdl="Object" doc="" name="presence">
            <scope doc="" name="UPDATE" />
            <scope doc="" name="SUBSCRIPTION_REQUEST" />
            <scope doc="" name="SUBSCRIPTION_SUBSTATUS_NONE" />
            <scope doc="" name="SUBSCRIPTION_NONE" />
            <scope doc="" name="SUBSCRIPTION_FROM" />
            <scope doc="" name="SUBSCRIPTION_TO" />
            <scope doc="" name="SUBSCRIPTION_BOTH" />
            <scope doc="" name="SUBSCRIPTION_REQUEST_PENDING" />
            <scope doc="" name="STATUS_ONLINE" />
            <scope doc="" name="STATUS_AWAY" />
            <scope doc="" name="STATUS_CHAT" />
            <scope doc="" name="STATUS_DND" />
            <scope doc="" name="STATUS_EXTENDED_AWAY" />
            <scope doc="" name="STATUS_OFFLINE" />
            <scope doc="" name="STATUS_INVISIBLE" />
          </variable>
          <scope doc="" ilk="function" name="RosterService" signature="RosterService(xmppSession)">
            <variable ilk="argument" name="xmppSession" />
            <scope doc="" ilk="function" name="addRosterItem" signature="addRosterItem(jid,name,groups)">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="groups" />
            </scope>
            <scope doc="" ilk="function" name="updateRosterItem" signature="updateRosterItem(jid,name,groups)">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="groups" />
            </scope>
            <scope doc="" ilk="function" name="verifyRoster" signature="verifyRoster(res)">
              <variable ilk="argument" name="res" />
            </scope>
            <scope doc="" ilk="function" name="addRosterItemToGroup" signature="addRosterItemToGroup(jid,group)">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="group" />
            </scope>
            <scope doc="" ilk="function" name="removeRosterGroup" signature="removeRosterGroup(group)">
              <variable ilk="argument" name="group" />
            </scope>
            <scope doc="" ilk="function" name="renameRosterGroup" signature="renameRosterGroup(group,newGroup)">
              <variable ilk="argument" name="group" />
              <variable ilk="argument" name="newGroup" />
            </scope>
            <scope doc="" ilk="function" name="removeRosterItemFromGroup" signature="removeRosterItemFromGroup(jid,group)">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="group" />
            </scope>
            <scope doc="" ilk="function" name="rosterItemRenameGroup" signature="rosterItemRenameGroup(jid,oldGroup,newGroup)">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="oldGroup" />
              <variable ilk="argument" name="newGroup" />
            </scope>
            <scope doc="" ilk="function" name="renameRosterItem" signature="renameRosterItem(jid,newName)">
              <variable ilk="argument" name="jid" />
              <variable ilk="argument" name="newName" />
            </scope>
            <scope doc="" ilk="function" name="removeRosterItem" signature="removeRosterItem(jid)">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope doc="" ilk="function" name="getAvatar" signature="getAvatar(jid)">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope doc="" ilk="function" name="publishAvatar" signature="publishAvatar(type,binval)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="binval" />
            </scope>
            <scope doc="" ilk="function" name="onVerifyRoster" signature="onVerifyRoster(id)">
              <variable ilk="argument" name="id" />
            </scope>
            <scope doc="" ilk="function" name="onVerifyRosterFailed" signature="onVerifyRosterFailed(err)">
              <variable ilk="argument" name="err" />
            </scope>
            <variable doc="" name="session" />
          </scope>
          <variable citdl="Object" doc="" name="roster">
            <scope doc="" name="ADDED" />
            <scope doc="" name="CHANGED" />
            <scope doc="" name="REMOVED" />
          </variable>
          <scope doc="" ilk="function" name="TransportSession" signature="TransportSession(props)">
            <variable ilk="argument" name="props" />
            <variable doc="" name="transportIframes" />
            <scope attributes="private" doc="" ilk="function" name="_iframeOnload" signature="_iframeOnload(index)">
              <variable ilk="argument" name="index" />
            </scope>
            <scope doc="" ilk="function" name="handleBOSH" signature="handleBOSH(msg,rid)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="rid" />
            </scope>
            <variable doc="" name="rid" />
            <scope doc="" name="hold" />
            <variable doc="" name="polling" />
            <scope doc="" name="secure" />
            <variable doc="" name="wait" />
            <scope doc="" name="lang" />
            <scope doc="" name="submitContentType" />
            <scope doc="" name="serviceUrl" />
            <scope doc="" name="defaultResource" />
            <scope doc="" name="domain" />
            <scope doc="" name="sendTimeout" />
            <scope doc="" name="useScriptSrcTransport" />
            <variable doc="" name="keepAliveTimer" />
            <variable doc="" name="state" />
            <variable doc="" name="transmitState" />
            <variable doc="" name="protocolPacketQueue">
              <variable doc="" name="length" />
            </variable>
            <variable doc="" name="outboundQueue" />
            <variable citdl="Object" doc="" name="outboundRequests" />
            <variable doc="" name="inboundQueue" />
            <variable citdl="Object" doc="" name="deferredRequests" />
            <variable citdl="Object" doc="" name="matchTypeIdAttribute" />
            <scope doc="" ilk="function" name="open" />
            <variable doc="" name="status" />
            <scope attributes="private" doc="" ilk="function" name="_sendLogin" />
            <scope doc="" ilk="function" name="processScriptSrc" signature="processScriptSrc(msg,rid)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_keepAlive" />
            <scope doc="" ilk="function" name="close" signature="close(protocolMsg)">
              <variable ilk="argument" name="protocolMsg" />
            </scope>
            <scope doc="" ilk="function" name="dispatchPacket" signature="dispatchPacket(msg,protocolMatchType,matchId,matchProperty)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="protocolMatchType" />
              <variable ilk="argument" name="matchId" />
              <variable ilk="argument" name="matchProperty" />
            </scope>
            <variable doc="" name="dispatchTimer" />
            <scope attributes="private" doc="" ilk="function" name="_dispatchPacket" />
            <variable doc="" name="lastPollTime" />
            <scope doc="" ilk="function" name="redispatchPacket" signature="redispatchPacket(rid)">
              <variable ilk="argument" name="rid" />
            </scope>
            <scope doc="" ilk="function" name="addToOutboundQueue" signature="addToOutboundQueue(msg,rid)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope doc="" ilk="function" name="removeFromOutboundQueue" signature="removeFromOutboundQueue(rid)">
              <variable ilk="argument" name="rid" />
            </scope>
            <scope doc="" ilk="function" name="processProtocolPacketQueue" />
            <scope doc="" ilk="function" name="findOpenIframe" />
            <scope doc="" ilk="function" name="sendXml" signature="sendXml(message,rid)">
              <variable ilk="argument" name="message" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope doc="" ilk="function" name="processDocument" signature="processDocument(doc,rid)">
              <variable ilk="argument" name="doc" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope doc="" ilk="function" name="processInboundQueue" />
            <scope doc="" ilk="function" name="addToInboundQueue" signature="addToInboundQueue(doc,rid)">
              <variable ilk="argument" name="doc" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope doc="" ilk="function" name="processResponse" signature="processResponse(body,rid)">
              <variable ilk="argument" name="body" />
              <variable ilk="argument" name="rid" />
            </scope>
            <variable doc="" name="sid" />
            <variable doc="" name="authId" />
            <variable doc="" name="inactivity" />
            <scope doc="" ilk="function" name="processProtocolResponse" signature="processProtocolResponse(msg,rid)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope doc="" ilk="function" name="setState" signature="setState(state,message)">
              <variable ilk="argument" name="state" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope doc="" ilk="function" name="isTerminated" />
            <scope doc="" ilk="function" name="processError" signature="processError(err,httpStatusCode,rid)">
              <variable ilk="argument" name="err" />
              <variable ilk="argument" name="httpStatusCode" />
              <variable ilk="argument" name="rid" />
            </scope>
            <scope doc="" ilk="function" name="onTerminate" signature="onTerminate(newState,oldState,message)">
              <variable ilk="argument" name="newState" />
              <variable ilk="argument" name="oldState" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope doc="" ilk="function" name="onProcessProtocolResponse" signature="onProcessProtocolResponse(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="onReady" signature="onReady(newState,oldState)">
              <variable ilk="argument" name="newState" />
              <variable ilk="argument" name="oldState" />
            </scope>
          </scope>
          <scope doc="" ilk="function" name="UserService" signature="UserService(xmppService)">
            <variable ilk="argument" name="xmppService" />
            <scope doc="" ilk="function" name="getPersonalProfile" />
            <scope doc="" ilk="function" name="setPersonalProfile" signature="setPersonalProfile(props)">
              <variable ilk="argument" name="props" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onSetPersonalProfile" signature="_onSetPersonalProfile(response)">
              <variable ilk="argument" name="response" />
            </scope>
            <scope doc="" ilk="function" name="onSetPersonalProfile" signature="onSetPersonalProfile(id)">
              <variable ilk="argument" name="id" />
            </scope>
            <scope doc="" ilk="function" name="onSetPersonalProfileFailure" signature="onSetPersonalProfileFailure(err)">
              <variable ilk="argument" name="err" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onGetPersonalProfile" signature="_onGetPersonalProfile(profile)">
              <variable ilk="argument" name="profile" />
            </scope>
            <scope doc="" ilk="function" name="onGetPersonalProfile" signature="onGetPersonalProfile(profile)">
              <variable ilk="argument" name="profile" />
            </scope>
            <scope doc="" ilk="function" name="onGetPersonalProfileFailure" signature="onGetPersonalProfileFailure(err)">
              <variable ilk="argument" name="err" />
            </scope>
            <variable doc="" name="session" />
          </scope>
          <variable citdl="Object" doc="" name="sasl">
            <scope doc="" ilk="function" name="SunWebClientAuth" signature="SunWebClientAuth(session)">
              <variable ilk="argument" name="session" />
            </scope>
            <scope doc="" ilk="function" name="SaslPlain" signature="SaslPlain(session)">
              <variable ilk="argument" name="session" />
            </scope>
            <scope doc="" name="saslNS" />
          </variable>
          <variable citdl="Object" doc="" name="util">
            <variable citdl="Object" doc="" name="Base64">
              <scope doc="" ilk="function" name="encode" signature="encode(input)">
                <variable ilk="argument" name="input" />
              </scope>
              <scope doc="" ilk="function" name="decode" signature="decode(input)">
                <variable ilk="argument" name="input" />
              </scope>
              <scope doc="" name="keylist" />
            </variable>
            <scope doc="" ilk="function" name="xmlEncode" signature="xmlEncode(str)">
              <variable ilk="argument" name="str" />
            </scope>
            <scope doc="" ilk="function" name="encodeJid" signature="encodeJid(jid)">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope doc="" ilk="function" name="decodeJid" signature="decodeJid(jid)">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope doc="" ilk="function" name="createElement" signature="createElement(tag,attributes,terminal)">
              <variable ilk="argument" name="tag" />
              <variable ilk="argument" name="attributes" />
              <variable ilk="argument" name="terminal" />
            </scope>
            <scope doc="" ilk="function" name="stripHtml" signature="stripHtml(str)">
              <variable ilk="argument" name="str" />
            </scope>
            <scope doc="" ilk="function" name="decodeHtmlEntities" signature="decodeHtmlEntities(str)">
              <variable ilk="argument" name="str" />
            </scope>
            <scope doc="" ilk="function" name="htmlToPlain" signature="htmlToPlain(str)">
              <variable ilk="argument" name="str" />
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="widget">
            <variable doc="" ilk="function" name="ChatSession">
              <scope doc="" name="templatePath" />
              <scope doc="" name="enableSubWidgets" />
              <scope doc="" name="widgetsInTemplate" />
              <scope doc="" name="widgetType" />
              <scope doc="" name="chatWith" />
              <scope doc="" ilk="function" name="postCreate" />
              <scope doc="" ilk="function" name="displayMessage" signature="displayMessage(message,type)">
                <variable ilk="argument" name="message" />
                <variable ilk="argument" name="type" />
              </scope>
              <scope doc="" ilk="function" name="goToLastMessage" />
              <scope doc="" ilk="function" name="onKeyPress" signature="onKeyPress(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope name="messages">
                <scope name="domNode">
                  <variable doc="" name="scrollTop" />
                </scope>
              </scope>
              <scope name="chatInput">
                <variable doc="" name="value" />
              </scope>
            </variable>
          </variable>
          <variable citdl="Object" doc="" name="xmpp">
            <scope doc="" name="STREAM_NS" />
            <scope doc="" name="CLIENT_NS" />
            <scope doc="" name="STANZA_NS" />
            <scope doc="" name="SASL_NS" />
            <scope doc="" name="BIND_NS" />
            <scope doc="" name="BODY_NS" />
            <scope doc="" name="XHTML_BODY_NS" />
            <scope doc="" name="XHTML_IM_NS" />
            <scope doc="" name="INACTIVE" />
            <scope doc="" name="CONNECTED" />
            <scope doc="" name="ACTIVE" />
            <scope doc="" name="TERMINATE" />
            <scope doc="" name="LOGIN_FAILURE" />
            <scope doc="" name="INVALID_ID" />
            <scope doc="" name="NO_ID" />
            <scope doc="" name="error" />
            <scope doc="" name="CONFLICT" />
            <scope doc="" name="FEATURE_NOT_IMPLEMENTED" />
            <scope doc="" name="FORBIDDEN" />
            <scope doc="" name="GONE" />
            <scope doc="" name="INTERNAL_SERVER_ERROR" />
            <scope doc="" name="ITEM_NOT_FOUND" />
            <scope doc="" name="ID_MALFORMED" />
            <scope doc="" name="NOT_ACCEPTABLE" />
            <scope doc="" name="NOT_ALLOWED" />
            <scope doc="" name="NOT_AUTHORIZED" />
            <scope doc="" name="SERVICE_UNAVAILABLE" />
            <scope doc="" name="SUBSCRIPTION_REQUIRED" />
            <scope doc="" name="UNEXPECTED_REQUEST" />
          </variable>
          <scope doc="" ilk="function" name="xmppSession" signature="xmppSession(props)">
            <variable ilk="argument" name="props" />
            <variable doc="" name="session" />
            <scope doc="" name="roster" />
            <scope doc="" name="chatRegister" />
            <scope attributes="private" doc="" name="_iqId" />
            <scope doc="" ilk="function" name="open" signature="open(user,password,resource)">
              <variable ilk="argument" name="user" />
              <variable ilk="argument" name="password" />
              <variable ilk="argument" name="resource" />
            </scope>
            <variable doc="" name="jid" />
            <variable doc="" name="password" />
            <variable doc="" name="resource" />
            <scope doc="" ilk="function" name="close" />
            <variable doc="" name="state" />
            <scope doc="" ilk="function" name="processProtocolResponse" signature="processProtocolResponse(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="messageHandler" signature="messageHandler(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="iqHandler" signature="iqHandler(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="presenceHandler" signature="presenceHandler(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="featuresHandler" signature="featuresHandler(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="saslHandler" signature="saslHandler(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="chatHandler" signature="chatHandler(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <variable doc="" name="useChatState" />
            <scope doc="" ilk="function" name="simpleMessageHandler" signature="simpleMessageHandler(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="registerChatInstance" signature="registerChatInstance(chatInstance,message)">
              <variable ilk="argument" name="chatInstance" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope doc="" ilk="function" name="iqSetHandler" signature="iqSetHandler(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="sendIqResult" signature="sendIqResult(iqId,to)">
              <variable ilk="argument" name="iqId" />
              <variable ilk="argument" name="to" />
            </scope>
            <scope doc="" ilk="function" name="rosterSetHandler" signature="rosterSetHandler(elem)">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope doc="" ilk="function" name="presenceUpdate" signature="presenceUpdate(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="retrieveRoster" />
            <scope doc="" ilk="function" name="getRosterIndex" signature="getRosterIndex(jid)">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope doc="" ilk="function" name="createRosterEntry" signature="createRosterEntry(elem)">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope doc="" ilk="function" name="bindResource" />
            <scope doc="" ilk="function" name="getNextIqId" />
            <scope doc="" ilk="function" name="presenceSubscriptionRequest" signature="presenceSubscriptionRequest(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="dispatchPacket" signature="dispatchPacket(msg,type,matchId)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="matchId" />
            </scope>
            <scope doc="" ilk="function" name="setState" signature="setState(state,message)">
              <variable ilk="argument" name="state" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope doc="" ilk="function" name="search" signature="search(searchString,service,searchAttribute)">
              <variable ilk="argument" name="searchString" />
              <variable ilk="argument" name="service" />
              <variable ilk="argument" name="searchAttribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_onSearchResults" signature="_onSearchResults(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="onLogin" />
            <scope doc="" ilk="function" name="onLoginFailure" signature="onLoginFailure(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="onBindResource" signature="onBindResource(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="onSearchResults" signature="onSearchResults(results)">
              <variable ilk="argument" name="results" />
            </scope>
            <scope doc="" ilk="function" name="onRetrieveRoster" signature="onRetrieveRoster(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="onRosterUpdated" />
            <scope doc="" ilk="function" name="onSubscriptionRequest" signature="onSubscriptionRequest(req)">
              <variable ilk="argument" name="req" />
            </scope>
            <scope doc="" ilk="function" name="onPresenceUpdate" signature="onPresenceUpdate(p)">
              <variable ilk="argument" name="p" />
            </scope>
            <scope doc="" ilk="function" name="onTransportReady" />
            <variable doc="" name="rosterService" />
            <variable doc="" name="presenceService" />
            <variable doc="" name="userService" />
            <scope doc="" ilk="function" name="onTransportTerminate" signature="onTransportTerminate(newState,oldState,message)">
              <variable ilk="argument" name="newState" />
              <variable ilk="argument" name="oldState" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope doc="" ilk="function" name="onConnected" />
            <scope doc="" ilk="function" name="onTerminate" signature="onTerminate(newState,oldState,message)">
              <variable ilk="argument" name="newState" />
              <variable ilk="argument" name="oldState" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope doc="" ilk="function" name="onActive" />
            <scope doc="" ilk="function" name="onRegisterChatInstance" signature="onRegisterChatInstance(chatInstance,message)">
              <variable ilk="argument" name="chatInstance" />
              <variable ilk="argument" name="message" />
            </scope>
            <scope doc="" ilk="function" name="onRosterAdded" signature="onRosterAdded(ri)">
              <variable ilk="argument" name="ri" />
            </scope>
            <scope doc="" ilk="function" name="onRosterRemoved" signature="onRosterRemoved(ri)">
              <variable ilk="argument" name="ri" />
            </scope>
            <scope doc="" ilk="function" name="onRosterChanged" signature="onRosterChanged(ri,previousCopy)">
              <variable ilk="argument" name="ri" />
              <variable ilk="argument" name="previousCopy" />
            </scope>
            <scope doc="" ilk="function" name="processXmppError" signature="processXmppError(msg)">
              <variable ilk="argument" name="msg" />
            </scope>
            <scope doc="" ilk="function" name="sendStanzaError" signature="sendStanzaError(stanzaType,to,id,errorType,condition,text)">
              <variable ilk="argument" name="stanzaType" />
              <variable ilk="argument" name="to" />
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="errorType" />
              <variable ilk="argument" name="condition" />
              <variable ilk="argument" name="text" />
            </scope>
            <scope doc="" ilk="function" name="getBareJid" signature="getBareJid(jid)">
              <variable ilk="argument" name="jid" />
            </scope>
            <scope doc="" ilk="function" name="getResourceFromJid" signature="getResourceFromJid(jid)">
              <variable ilk="argument" name="jid" />
            </scope>
          </scope>
        </variable>
      </scope>
      <scope ilk="class" name="dojo">
        <scope attributes="private" doc="A registry to make contextual calling/searching easier." ilk="function" name="AdapterRegistry" returns="Boolean" signature="AdapterRegistry(returnWrappers)">
          <variable citdl="Boolean" ilk="argument" name="returnWrappers" />
          <variable doc="" name="pairs" />
          <variable doc="" name="returnWrappers" />
          <scope doc="register a check function to determine if the wrap function or object gets selected" ilk="function" name="register" signature="register(name,check,wrap,directReturn,override)">
            <variable citdl="String" doc="a way to identify this matcher." ilk="argument" name="name" />
            <variable doc="a function that arguments are passed to from the adapter&apos;s match() function. The check function should return true if the given arguments are appropriate for the wrap function." ilk="function" name="check" />
            <variable ilk="function" name="wrap" />
            <variable citdl="Boolean" doc="If directReturn is true, the value passed in for wrap will be returned instead of being called. Alternately, the AdapterRegistry can be set globally to &amp;amp;quot;return not call&amp;amp;quot; using the returnWrappers property. Either way, this behavior allows the registry to act as a &amp;amp;quot;search&amp;amp;quot; function instead of a function interception library." ilk="argument" name="directReturn" />
            <variable citdl="Boolean" doc="If override is given and true, the check function will be given highest priority. Otherwise, it will be the lowest priority adapter." ilk="argument" name="override" />
          </scope>
          <scope doc="Find an adapter for the given arguments. If no suitable adapter is found, throws an exception. match() accepts any number of arguments, all of which are passed to all matching functions from the registered pairs." ilk="function" name="match" />
          <scope attributes="private" doc="" ilk="function" name="unregister" returns="Boolean" signature="unregister(name)">
            <variable ilk="argument" name="name" />
          </scope>
        </scope>
        <scope doc="Provides event handling for a group of Deferred objects." ilk="function" name="DeferredList" signature="DeferredList(list,fireOnOneCallback,fireOnOneErrback,consumeErrors,canceller)">
          <variable citdl="Array" doc="The list of deferreds to be synchronizied with this DeferredList" ilk="argument" name="list" />
          <variable citdl="Boolean" doc="Will cause the DeferredLists callback to be fired as soon as any of the deferreds in its list have been fired instead of waiting until the entire list has finished fireonOneErrback: Will cause the errback to fire upon any of the deferreds errback" ilk="argument" name="fireOnOneCallback" />
          <variable citdl="Boolean" ilk="argument" name="fireOnOneErrback" />
          <variable citdl="Boolean" ilk="argument" name="consumeErrors" />
          <variable doc="A deferred canceller function, see dojo.Deferred" ilk="function" name="canceller" />
          <scope attributes="private" doc="The DeferredLists&apos; callback handler" ilk="function" name="_cbDeferred" signature="_cbDeferred(index,succeeded,result)">
            <variable ilk="argument" name="index" />
            <variable ilk="argument" name="succeeded" />
            <variable ilk="argument" name="result" />
          </scope>
          <scope doc="Gathers the results of the deferreds for packaging as the parameters to the Deferred Lists&apos; callback" ilk="function" name="gatherResults" signature="gatherResults(deferredList)">
            <variable ilk="argument" name="deferredList" />
          </scope>
          <variable doc="" name="finishedCount" />
          <variable citdl="The" doc="list of deferreds to be synchronizied with this DeferredList" name="list">
            <variable doc="" name="length" />
          </variable>
          <variable doc="" name="resultList" />
          <variable doc="" name="chain" />
          <variable doc="" name="id" />
          <variable doc="" name="fired" />
          <variable doc="" name="paused" />
          <variable doc="" name="results" />
          <variable citdl="A" doc="deferred canceller function, see dojo.Deferred" name="canceller" />
          <variable doc="" name="silentlyCancelled" />
          <variable citdl="Will" doc="cause the DeferredLists callback to be fired as soon as any of the deferreds in its list have been fired instead of waiting until the entire list has finished fireonOneErrback: Will cause the errback to fire upon any of the deferreds errback" name="fireOnOneCallback" />
          <variable doc="" name="fireOnOneErrback" />
          <variable doc="" name="consumeErrors" />
        </scope>
        <scope doc="dojo.NodeList is an of Array subclass which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of dojo.query() calls." ilk="function" name="NodeList">
          <scope doc="Returns a new NodeList, maintaining this one in place" ilk="function" name="slice" signature="slice(begin,end)">
            <variable citdl="Integer" doc="Can be a positive or negative integer, with positive integers noting the offset to begin at, and negative integers denoting an offset from the end (i.e., to the left of the end)" ilk="argument" name="begin" />
            <variable citdl="Integer" doc="Optional parameter to describe what position relative to the NodeList&apos;s zero index to end the slice at. Like begin, can be positive or negative." ilk="argument" name="end" />
          </scope>
          <scope doc="Returns a new NodeList, manipulating this NodeList based on the arguments passed, potentially splicing in new elements at an offset, optionally deleting elements" ilk="function" name="splice" signature="splice(index,howmany,item)">
            <variable citdl="Integer" doc="begin can be a positive or negative integer, with positive integers noting the offset to begin at, and negative integers denoting an offset from the end (i.e., to the left of the end)" ilk="argument" name="index" />
            <variable citdl="Integer" doc="Optional parameter to describe what position relative to the NodeList&apos;s zero index to end the slice at. Like begin, can be positive or negative." ilk="argument" name="howmany" />
            <variable citdl="Object" doc="Any number of optional parameters may be passed in to be spliced into the NodeList" ilk="argument" name="item">
              <scope name="repeating" />
            </variable>
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="see dojo.indexOf(). The primary difference is that the acted-on array is implicitly this NodeList" ilk="function" name="indexOf" returns="Integer" signature="indexOf(value,fromIndex)">
            <variable citdl="Object" doc="The value to search for." ilk="argument" name="value" />
            <variable citdl="Integer" doc="The loction to start searching from. Optional. Defaults to 0." ilk="argument" name="fromIndex" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="see dojo.lastIndexOf(). The primary difference is that the acted-on array is implicitly this NodeList" ilk="function" name="lastIndexOf" returns="Integer" signature="lastIndexOf(value,fromIndex)">
            <variable citdl="Object" doc="The value to search for." ilk="argument" name="value" />
            <variable citdl="Integer" doc="The loction to start searching from. Optional. Defaults to 0." ilk="argument" name="fromIndex" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="see `dojo.every()` and the (Array.every docs)[http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every]. Takes the same structure of arguments and returns as dojo.every() with the caveat that the passed array is implicitly this NodeList" ilk="function" name="every" returns="Boolean" signature="every(callback,thisObject)">
            <variable doc="the callback" ilk="function" name="callback" />
            <variable citdl="Object" doc="the context" ilk="argument" name="thisObject" />
          </scope>
          <scope attributes="private" doc="Takes the same structure of arguments and returns as `dojo.some()` with the caveat that the passed array is implicitly this NodeList. See `dojo.some()` and Mozilla&apos;s (Array.some documentation)[http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some]." ilk="function" name="some" returns="Boolean" signature="some(callback,thisObject)">
            <variable doc="the callback" ilk="function" name="callback" />
            <variable citdl="Object" doc="the context" ilk="argument" name="thisObject" />
          </scope>
          <scope attributes="private" doc="Returns a new NodeList comprised of items in this NodeList as well as items passed in as parameters" ilk="function" name="concat" returns="dojo.NodeList" signature="concat(item)">
            <variable citdl="Object" doc="Any number of optional parameters may be passed in to be spliced into the NodeList" ilk="argument" name="item" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="see dojo.map(). The primary difference is that the acted-on array is implicitly this NodeList and the return is a dojo.NodeList (a subclass of Array) /return d.map(this, func, obj, d.NodeList); // dojo.NodeList" ilk="function" name="map" returns="dojo.NodeList" signature="map(func,obj)">
            <variable ilk="function" name="func" />
            <variable ilk="function" name="obj" />
          </scope>
          <scope attributes="private" doc="see `dojo.forEach()`. The primary difference is that the acted-on array is implicitly this NodeList" ilk="function" name="forEach" returns="dojo.NodeList" signature="forEach(callback,thisObj)">
            <variable ilk="argument" name="callback" />
            <variable ilk="argument" name="thisObj" />
          </scope>
          <scope attributes="private" doc="Returns the box objects all elements in a node list as an Array (*not* a NodeList)" ilk="function" name="coords" returns="Array" />
          <scope attributes="private" doc="gets or sets the DOM attribute for every element in the NodeList" ilk="function" name="attr" returns="dojo.NodeList|Array" signature="attr(property,value)">
            <variable citdl="String" doc="the attribute to get/set" ilk="argument" name="property" />
            <variable citdl="String" doc="optional. The value to set the property to" ilk="argument" name="value" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="adds the specified class to every node in the list" ilk="function" name="addClass" returns="dojo.NodeList" signature="addClass(className)">
            <variable citdl="String" doc="the CSS class to add" ilk="argument" name="className" />
          </scope>
          <scope attributes="private" doc="removes the specified class from every node in the list" ilk="function" name="removeClass" returns="dojo.NodeList" signature="removeClass(className)">
            <variable citdl="String" doc="the CSS class to add" ilk="argument" name="className" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="Adds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove." ilk="function" name="toggleClass" returns="dojo.NodeList" signature="toggleClass(className,condition)">
            <variable citdl="String" doc="the CSS class to add" ilk="argument" name="className" />
            <variable citdl="Boolean" doc="If passed, true means to add the class, false means to remove." ilk="argument" name="condition" />
          </scope>
          <scope doc="attach event handlers to every item of the NodeList. Uses dojo.connect() so event properties are normalized" ilk="function" name="connect" signature="connect(methodName,objOrFunc,funcName)">
            <variable citdl="String" doc="the name of the method to attach to. For DOM events, this should be the lower-case name of the event" ilk="argument" name="methodName" />
            <variable citdl="Object|Function|String" doc="if 2 arguments are passed (methodName, objOrFunc), objOrFunc should reference a function or be the name of the function in the global namespace to attach. If 3 arguments are provided (methodName, objOrFunc, funcName), objOrFunc must be the scope to locate the bound function in" ilk="argument" name="objOrFunc" />
            <variable citdl="String" doc="optional. A string naming the function in objOrFunc to bind to the event. May also be a function reference." ilk="argument" name="funcName" />
          </scope>
          <scope attributes="private" doc="clears all content from each node in the list. Effectively equivalent to removing all child nodes from every item in the list." ilk="function" name="empty" returns="dojo.NodeList" />
          <scope attributes="private" doc="places elements of this node list relative to the first element matched by queryOrNode. Returns the original NodeList. See: `dojo.place`" ilk="function" name="place" returns="dojo.NodeList" signature="place(queryOrNode,position)">
            <variable citdl="String||Node" doc="may be a string representing any valid CSS3 selector or a DOM node. In the selector case, only the first matching element will be used for relative positioning." ilk="argument" name="queryOrNode" />
            <variable citdl="String" doc="can be one of:   &amp;amp;quot;last&amp;amp;quot; (default)  &amp;amp;quot;first&amp;amp;quot;  &amp;amp;quot;before&amp;amp;quot;  &amp;amp;quot;after&amp;amp;quot;  &amp;amp;quot;only&amp;amp;quot;  &amp;amp;quot;replace&amp;amp;quot; or an offset in the childNodes property" ilk="argument" name="position" />
          </scope>
          <scope attributes="private" doc="removes elements in this list that match the simple filter from their parents and returns them as a new NodeList." ilk="function" name="orphan" returns="dojo.NodeList" signature="orphan(simpleFilter)">
            <variable citdl="String" doc="single-expression CSS rule. For example, &amp;amp;quot;.thinger&amp;amp;quot; or &amp;amp;quot;#someId[attrName=&apos;value&apos;]&amp;amp;quot; but not &amp;amp;quot;div &amp;amp;gt; span&amp;amp;quot;. In short, anything which does not invoke a descent to evaluate but can instead be used to test a single node is acceptable." ilk="argument" name="simpleFilter" />
            <variable name="return_summary" />
          </scope>
          <scope attributes="private" doc="places any/all elements in queryOrListOrNode at a position relative to the first element in this list. Returns a dojo.NodeList of the adopted elements." ilk="function" name="adopt" returns="dojo.NodeList" signature="adopt(queryOrListOrNode,position)">
            <variable citdl="String||Array||DomNode" doc="a DOM node or a query string or a query result. Represents the nodes to be adopted relative to the first element of this NodeList." ilk="argument" name="queryOrListOrNode" />
            <variable citdl="String" doc="can be one of:   &amp;amp;quot;last&amp;amp;quot; (default)  &amp;amp;quot;first&amp;amp;quot;  &amp;amp;quot;before&amp;amp;quot;  &amp;amp;quot;after&amp;amp;quot;  &amp;amp;quot;only&amp;amp;quot;  &amp;amp;quot;replace&amp;amp;quot; or an offset in the childNodes property" ilk="argument" name="position" />
          </scope>
          <scope attributes="private" doc="Returns a new list whose memebers match the passed query, assuming elements of the current NodeList as the root for each search." ilk="function" name="query" returns="Object|self|Integer|Boolean|dojo.NodeList|Array" signature="query(queryStr)">
            <variable citdl="String" ilk="argument" name="queryStr" />
          </scope>
          <scope attributes="private" doc="&amp;amp;quot;masks&amp;amp;quot; the built-in javascript filter() method (supported in Dojo via `dojo.filter`) to support passing a simple string filter in addition to supporting filtering function objects." ilk="function" name="filter" returns="dojo.NodeList" signature="filter(simpleFilter)">
            <variable citdl="String|Function" doc="If a string, a single-expression CSS rule. For example, &amp;amp;quot;.thinger&amp;amp;quot; or &amp;amp;quot;#someId[attrName=&apos;value&apos;]&amp;amp;quot; but not &amp;amp;quot;div &amp;amp;gt; span&amp;amp;quot;. In short, anything which does not invoke a descent to evaluate but can instead be used to test a single node is acceptable." ilk="argument" name="simpleFilter" />
          </scope>
          <scope attributes="private" doc="add a node or some HTML as a string to every item in the list. Returns the original list." ilk="function" name="addContent" returns="dojo.NodeList" signature="addContent(content,position)">
            <variable citdl="String|DomNode" doc="DOM node or HTML in string format to add at position to every item" ilk="argument" name="content" />
            <variable citdl="String||Integer" doc="can be one of:   &amp;amp;quot;last&amp;amp;quot;||&amp;amp;quot;end&amp;amp;quot; (default)  &amp;amp;quot;first||&amp;amp;quot;start&amp;amp;quot;  &amp;amp;quot;before&amp;amp;quot;  &amp;amp;quot;after&amp;amp;quot; or an offset in the childNodes property" ilk="argument" name="position" />
          </scope>
          <scope attributes="private" doc="Create a new instance of a specified class, using the specified properties and each node in the nodeList as a srcNodeRef" ilk="function" name="instantiate" returns="dojo.NodeList" signature="instantiate(declaredClass,properties)">
            <variable citdl="String|Object" ilk="argument" name="declaredClass" />
            <variable citdl="Object" ilk="argument" name="properties" />
          </scope>
          <scope attributes="private" doc="Returns a new NodeList comprised of items in this NodeList at the given index or indices." ilk="function" name="at" returns="dojo.NodeList" signature="at(index)">
            <variable citdl="Integer" doc="One or more 0-based indices of items in the current NodeList." ilk="argument" name="index">
              <scope name="repeating" />
            </variable>
            <variable name="return_summary" />
          </scope>
        </scope>
        <variable citdl="Object" doc="" name="NodeList-fx" />
        <variable citdl="Object" doc="" name="NodeList-html" />
        <variable citdl="Object" doc="" name="OpenAjax" />
        <scope doc="Takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `dojo.Color` object and creates a new Color instance to work from." ilk="function" name="Color" signature="Color(color)">
          <variable citdl="Array|String|Object" ilk="argument" name="color" />
          <scope name="named">
            <scope doc="" name="black" />
            <scope doc="" name="silver" />
            <scope doc="" name="gray" />
            <scope doc="" name="white" />
            <scope doc="" name="maroon" />
            <scope doc="" name="red" />
            <scope doc="" name="purple" />
            <scope doc="" name="fuchsia" />
            <scope doc="" name="green" />
            <scope doc="" name="lime" />
            <scope doc="" name="olive" />
            <scope doc="" name="yellow" />
            <scope doc="" name="navy" />
            <scope doc="" name="blue" />
            <scope doc="" name="teal" />
            <scope doc="" name="aqua" />
            <scope doc="" name="aliceblue" />
            <scope doc="" name="antiquewhite" />
            <scope doc="" name="aquamarine" />
            <scope doc="" name="azure" />
            <scope doc="" name="beige" />
            <scope doc="" name="bisque" />
            <scope doc="" name="blanchedalmond" />
            <scope doc="" name="blueviolet" />
            <scope doc="" name="brown" />
            <scope doc="" name="burlywood" />
            <scope doc="" name="cadetblue" />
            <scope doc="" name="chartreuse" />
            <scope doc="" name="chocolate" />
            <scope doc="" name="coral" />
            <scope doc="" name="cornflowerblue" />
            <scope doc="" name="cornsilk" />
            <scope doc="" name="crimson" />
            <scope doc="" name="cyan" />
            <scope doc="" name="darkblue" />
            <scope doc="" name="darkcyan" />
            <scope doc="" name="darkgoldenrod" />
            <scope doc="" name="darkgray" />
            <scope doc="" name="darkgreen" />
            <scope doc="" name="darkgrey" />
            <scope doc="" name="darkkhaki" />
            <scope doc="" name="darkmagenta" />
            <scope doc="" name="darkolivegreen" />
            <scope doc="" name="darkorange" />
            <scope doc="" name="darkorchid" />
            <scope doc="" name="darkred" />
            <scope doc="" name="darksalmon" />
            <scope doc="" name="darkseagreen" />
            <scope doc="" name="darkslateblue" />
            <scope doc="" name="darkslategray" />
            <scope doc="" name="darkslategrey" />
            <scope doc="" name="darkturquoise" />
            <scope doc="" name="darkviolet" />
            <scope doc="" name="deeppink" />
            <scope doc="" name="deepskyblue" />
            <scope doc="" name="dimgray" />
            <scope doc="" name="dimgrey" />
            <scope doc="" name="dodgerblue" />
            <scope doc="" name="firebrick" />
            <scope doc="" name="floralwhite" />
            <scope doc="" name="forestgreen" />
            <scope doc="" name="gainsboro" />
            <scope doc="" name="ghostwhite" />
            <scope doc="" name="gold" />
            <scope doc="" name="goldenrod" />
            <scope doc="" name="greenyellow" />
            <scope doc="" name="grey" />
            <scope doc="" name="honeydew" />
            <scope doc="" name="hotpink" />
            <scope doc="" name="indianred" />
            <scope doc="" name="indigo" />
            <scope doc="" name="ivory" />
            <scope doc="" name="khaki" />
            <scope doc="" name="lavender" />
            <scope doc="" name="lavenderblush" />
            <scope doc="" name="lawngreen" />
            <scope doc="" name="lemonchiffon" />
            <scope doc="" name="lightblue" />
            <scope doc="" name="lightcoral" />
            <scope doc="" name="lightcyan" />
            <scope doc="" name="lightgoldenrodyellow" />
            <scope doc="" name="lightgray" />
            <scope doc="" name="lightgreen" />
            <scope doc="" name="lightgrey" />
            <scope doc="" name="lightpink" />
            <scope doc="" name="lightsalmon" />
            <scope doc="" name="lightseagreen" />
            <scope doc="" name="lightskyblue" />
            <scope doc="" name="lightslategray" />
            <scope doc="" name="lightslategrey" />
            <scope doc="" name="lightsteelblue" />
            <scope doc="" name="lightyellow" />
            <scope doc="" name="limegreen" />
            <scope doc="" name="linen" />
            <scope doc="" name="magenta" />
            <scope doc="" name="mediumaquamarine" />
            <scope doc="" name="mediumblue" />
            <scope doc="" name="mediumorchid" />
            <scope doc="" name="mediumpurple" />
            <scope doc="" name="mediumseagreen" />
            <scope doc="" name="mediumslateblue" />
            <scope doc="" name="mediumspringgreen" />
            <scope doc="" name="mediumturquoise" />
            <scope doc="" name="mediumvioletred" />
            <scope doc="" name="midnightblue" />
            <scope doc="" name="mintcream" />
            <scope doc="" name="mistyrose" />
            <scope doc="" name="moccasin" />
            <scope doc="" name="navajowhite" />
            <scope doc="" name="oldlace" />
            <scope doc="" name="olivedrab" />
            <scope doc="" name="orange" />
            <scope doc="" name="orangered" />
            <scope doc="" name="orchid" />
            <scope doc="" name="palegoldenrod" />
            <scope doc="" name="palegreen" />
            <scope doc="" name="paleturquoise" />
            <scope doc="" name="palevioletred" />
            <scope doc="" name="papayawhip" />
            <scope doc="" name="peachpuff" />
            <scope doc="" name="peru" />
            <scope doc="" name="pink" />
            <scope doc="" name="plum" />
            <scope doc="" name="powderblue" />
            <scope doc="" name="rosybrown" />
            <scope doc="" name="royalblue" />
            <scope doc="" name="saddlebrown" />
            <scope doc="" name="salmon" />
            <scope doc="" name="sandybrown" />
            <scope doc="" name="seagreen" />
            <scope doc="" name="seashell" />
            <scope doc="" name="sienna" />
            <scope doc="" name="skyblue" />
            <scope doc="" name="slateblue" />
            <scope doc="" name="slategray" />
            <scope doc="" name="slategrey" />
            <scope doc="" name="snow" />
            <scope doc="" name="springgreen" />
            <scope doc="" name="steelblue" />
            <scope doc="" name="tan" />
            <scope doc="" name="thistle" />
            <scope doc="" name="tomato" />
            <scope doc="" name="transparent" />
            <scope doc="" name="turquoise" />
            <scope doc="" name="violet" />
            <scope doc="" name="wheat" />
            <scope doc="" name="whitesmoke" />
            <scope doc="" name="yellowgreen" />
          </scope>
          <scope doc="" name="r" />
          <scope attributes="private" doc="" ilk="function" name="_set" signature="_set(r,g,b,a)">
            <variable ilk="argument" name="r" />
            <variable ilk="argument" name="g" />
            <variable ilk="argument" name="b" />
            <variable ilk="argument" name="a" />
          </scope>
          <scope attributes="private" doc="Takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `dojo.Color` object and sets this color instance to that value." ilk="function" name="setColor" returns="dojo.Color" signature="setColor(color)">
            <variable citdl="Array|String|Object" ilk="argument" name="color" />
          </scope>
          <scope attributes="private" doc="makes sure that the object has correct attributes" ilk="function" name="sanitize" returns="dojo.Color" />
          <scope attributes="private" doc="Returns 3 component array of rgb values" ilk="function" name="toRgb" returns="Array" />
          <scope attributes="private" doc="Returns a 4 component array of rgba values" ilk="function" name="toRgba" returns="Array" />
          <scope attributes="private" doc="Returns a css color string in hexadecimal representation" ilk="function" name="toHex" returns="String" />
          <scope attributes="private" doc="Returns a css color string in rgb(a) representation" ilk="function" name="toCss" returns="String" signature="toCss(includeAlpha)">
            <variable citdl="Boolean" ilk="argument" name="includeAlpha" />
          </scope>
          <scope attributes="private" doc="Returns a visual representation of the color" ilk="function" name="toString" returns="String" />
        </scope>
        <scope doc="Blend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend, can reuse a previously allocated dojo.Color object for the result" ilk="function" name="blendColors" returns="dojo.Color" signature="blendColors(start,end,weight,obj)">
          <variable citdl="dojo.Color" ilk="argument" name="start" />
          <variable citdl="dojo.Color" ilk="argument" name="end" />
          <variable citdl="Number" ilk="argument" name="weight" />
          <variable citdl="dojo.Color" ilk="argument" name="obj" />
        </scope>
        <scope doc="get rgb(a) array from css-style color declarations" ilk="function" name="colorFromRgb" returns="dojo.Color" signature="colorFromRgb(color,obj)">
          <variable citdl="String" ilk="argument" name="color" />
          <variable citdl="dojo.Color" ilk="argument" name="obj" />
        </scope>
        <scope doc="converts a hex string with a &apos;#&apos; prefix to a color object. Supports 12-bit #rgb shorthand." ilk="function" name="colorFromHex" returns="dojo.Color" signature="colorFromHex(color,obj)">
          <variable citdl="String" ilk="argument" name="color" />
          <variable citdl="dojo.Color" ilk="argument" name="obj" />
        </scope>
        <scope doc="builds a color from 1, 2, 3, or 4 element array" ilk="function" name="colorFromArray" returns="dojo.Color" signature="colorFromArray(a,obj)">
          <variable citdl="Array" ilk="argument" name="a" />
          <variable citdl="dojo.Color" ilk="argument" name="obj" />
        </scope>
        <scope doc="parses str for a color value." ilk="function" name="colorFromString" signature="colorFromString(str,obj)">
          <variable citdl="String" ilk="argument" name="str" />
          <variable citdl="dojo.Color" ilk="argument" name="obj" />
        </scope>
        <scope doc="Encapsulates a sequence of callbacks in response to a value that may not yet be available. This is modeled after the Deferred class from Twisted &amp;amp;lt;http://twistedmatrix.com&amp;amp;gt;." ilk="function" name="Deferred" signature="Deferred(canceller)">
          <variable ilk="function" name="canceller" />
          <variable doc="" name="chain" />
          <variable doc="" name="id" />
          <variable doc="" name="fired" />
          <variable doc="" name="paused" />
          <variable doc="" name="results" />
          <variable doc="" name="canceller" />
          <variable doc="" name="silentlyCancelled" />
          <scope attributes="private" doc="" name="_nextId" />
          <scope doc="Cancels a Deferred that has not yet received a value, or is waiting on another Deferred as its value." ilk="function" name="cancel" />
          <scope attributes="private" doc="The private primitive that means either callback or errback" ilk="function" name="_resback" signature="_resback(res)">
            <variable ilk="argument" name="res" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_check" />
          <scope doc="Begin the callback sequence with a non-error value." ilk="function" name="callback" signature="callback(res)">
            <variable ilk="argument" name="res" />
          </scope>
          <scope doc="Begin the callback sequence with an error result." ilk="function" name="errback" signature="errback(res)">
            <variable citdl="Error" ilk="argument" name="res" />
          </scope>
          <scope attributes="private" doc="Add the same function as both a callback and an errback as the next element on the callback sequence.This is useful for code that you want to guarantee to run, e.g. a finalizer." ilk="function" name="addBoth" returns="dojo.Deferred" signature="addBoth(cb,cbfn)">
            <variable citdl="Function|Object" ilk="argument" name="cb" />
            <variable citdl="String" ilk="argument" name="cbfn" />
          </scope>
          <scope attributes="private" doc="Add a single callback to the end of the callback sequence." ilk="function" name="addCallback" returns="dojo.Deferred" signature="addCallback(cb,cbfn)">
            <variable citdl="Function|Object" ilk="argument" name="cb" />
            <variable citdl="String? .." ilk="argument" name="cbfn" />
          </scope>
          <scope attributes="private" doc="Add a single callback to the end of the callback sequence." ilk="function" name="addErrback" returns="dojo.Deferred" signature="addErrback(cb,cbfn)">
            <variable ilk="argument" name="cb" />
            <variable ilk="argument" name="cbfn" />
          </scope>
          <scope attributes="private" doc="Add separate callback and errback to the end of the callback sequence." ilk="function" name="addCallbacks" returns="dojo.Deferred" signature="addCallbacks(cb,eb)">
            <variable ilk="argument" name="cb" />
            <variable ilk="argument" name="eb" />
          </scope>
          <scope attributes="private" doc="Used internally to exhaust the callback sequence when a result is available." ilk="function" name="_fire" />
        </scope>
        <variable citdl="Object" doc="Alias for the global scope (e.g. the window object in a browser)." name="global" />
        <variable citdl="Object" doc="version number of dojo" name="version">
          <scope citdl="Integer" doc="Major version. If total version is &amp;amp;quot;1.2.0beta1&amp;amp;quot;, will be 1 minor: Integer Minor version. If total version is &amp;amp;quot;1.2.0beta1&amp;amp;quot;, will be 2 patch: Integer Patch version. If total version is &amp;amp;quot;1.2.0beta1&amp;amp;quot;, will be 0 flag: String Descriptor flag. If total version is &amp;amp;quot;1.2.0beta1&amp;amp;quot;, will be &amp;amp;quot;beta1&amp;amp;quot;" name="major" />
          <scope citdl="Number" doc="The SVN rev from which dojo was pulled" name="revision" />
          <scope attributes="private" doc="" ilk="function" name="toString" returns="String" />
        </variable>
        <scope doc="Log a debug message to indicate that a behavior has been deprecated." ilk="function" name="deprecated" signature="deprecated(behaviour,extra,removal)">
          <variable citdl="String" ilk="argument" name="behaviour" />
          <variable citdl="String" doc="Text to append to the message." ilk="argument" name="extra" />
          <variable citdl="String" doc="Text to indicate when in the future the behavior will be removed." ilk="argument" name="removal" />
        </scope>
        <scope doc="Adds all properties and methods of props to obj. This addition is &amp;amp;quot;prototype extension safe&amp;amp;quot;, so that instances of objects will not pass along prototype defaults." ilk="function" name="_mixin" returns="Object" signature="_mixin(obj,props)">
          <variable citdl="Object" ilk="argument" name="obj" />
          <variable citdl="Object" ilk="argument" name="props" />
        </scope>
        <scope doc="Adds all properties and methods of props to obj and returns the (now modified) obj." ilk="function" name="mixin" returns="Object" signature="mixin(obj,props)">
          <variable citdl="Object" doc="The object to mix properties into. Also the return value." ilk="argument" name="obj" />
          <variable citdl="Object" doc="One or more objects whose values are successively copied into obj. If more than one of these objects contain the same value, the one specified last in the function call will &amp;amp;quot;win&amp;amp;quot;." ilk="argument" name="props" />
        </scope>
        <scope ilk="function" name="_getProp" returns="mixed" signature="_getProp(parts,create,context)">
          <variable citdl="Array" ilk="argument" name="parts" />
          <variable citdl="Boolean" ilk="argument" name="create" />
          <variable citdl="Object" ilk="argument" name="context" />
        </scope>
        <scope doc="Set a property from a dot-separated string, such as &amp;amp;quot;A.B.C&amp;amp;quot;" ilk="function" name="setObject" returns="Object" signature="setObject(name,value,context)">
          <variable citdl="String" doc="Path to a property, in the form &amp;amp;quot;A.B.C&amp;amp;quot;." ilk="argument" name="name" />
          <variable citdl="Object" ilk="argument" name="value" />
          <variable citdl="Object" doc="Optional. Object to use as root of path. Defaults to `dojo.global`." ilk="argument" name="context" />
        </scope>
        <scope doc="Get a property from a dot-separated string, such as &amp;amp;quot;A.B.C&amp;amp;quot;" ilk="function" name="getObject" returns="Object" signature="getObject(name,create,context)">
          <variable citdl="String" doc="Path to an property, in the form &amp;amp;quot;A.B.C&amp;amp;quot;." ilk="argument" name="name" />
          <variable citdl="Boolean" doc="Optional. Defaults to `false`. If `true`, Objects will be created at any point along the &apos;path&apos; that is undefined." ilk="argument" name="create" />
          <variable citdl="Object" doc="Optional. Object to use as root of path. Defaults to &apos;dojo.global&apos;. Null may be passed." ilk="argument" name="context" />
        </scope>
        <scope doc="determine if an object supports a given method" ilk="function" name="exists" returns="Boolean" signature="exists(name,obj)">
          <variable citdl="String" doc="Path to an object, in the form &amp;amp;quot;A.B.C&amp;amp;quot;." ilk="argument" name="name" />
          <variable citdl="Object" doc="to use as root of path. Defaults to &apos;dojo.global&apos;. Null may be passed." ilk="argument" name="obj" />
        </scope>
        <scope doc="Perform an evaluation in the global scope. Use this rather than calling &apos;eval()&apos; directly." ilk="function" name="eval" returns="String|Object|mixed|Boolean" signature="eval(scriptFragment)">
          <variable citdl="String" ilk="argument" name="scriptFragment" />
        </scope>
        <scope doc="Marks code as experimental." ilk="function" name="experimental" signature="experimental(moduleName,extra)">
          <variable citdl="String" doc="The name of a module, or the name of a module file or a specific function" ilk="argument" name="moduleName" />
          <variable citdl="String" doc="some additional message for the user" ilk="argument" name="extra" />
        </scope>
        <scope ilk="function" name="_loadInit" signature="_loadInit(e)">
          <variable ilk="argument" name="e" />
        </scope>
        <variable citdl="Object" doc="The root relative path to dojo.js (as a string)" name="baseUrl" />
        <scope ilk="function" name="_xhrObj" />
        <scope ilk="function" name="_isDocumentOk" returns="Boolean" signature="_isDocumentOk(http)">
          <variable ilk="argument" name="http" />
        </scope>
        <scope doc="Read the contents of the specified uri and return those contents." ilk="function" name="_getText" returns="Boolean|null|String" signature="_getText(uri,fail_ok)">
          <variable citdl="URI" doc="A relative or absolute uri. If absolute, it still must be in the same &amp;amp;quot;domain&amp;amp;quot; as we are." ilk="argument" name="uri" />
          <variable citdl="Boolean" doc="Default false. If fail_ok and loading fails, return null instead of throwing." ilk="argument" name="fail_ok" />
        </scope>
        <scope doc="signal fired by impending window destruction. You may use dojo.addOnWIndowUnload() or dojo.connect() to this method to perform page/application cleanup methods. See dojo.addOnWindowUnload for more info." ilk="function" name="windowUnloaded" />
        <scope doc="registers a function to be triggered when window.onunload fires. Be careful trying to modify the DOM or access JavaScript properties during this phase of page unloading: they may not always be available. Consider dojo.addOnUnload() if you need to modify the DOM or do heavy JavaScript work." ilk="function" name="addOnWindowUnload" signature="addOnWindowUnload(obj)">
          <variable citdl="Object" ilk="argument" name="obj" />
        </scope>
        <scope doc="registers a function to be triggered when the page unloads." ilk="function" name="addOnUnload" signature="addOnUnload(obj)">
          <variable citdl="Object?|Function" ilk="argument" name="obj" />
        </scope>
        <scope doc="Internal xd loader function. Overrides loadUri() from loader.js. xd loading requires slightly different behavior from loadPath()." ilk="function" name="_loadUri" returns="Boolean" signature="_loadUri(uri,cb,currentIsXDomain,module)">
          <variable citdl="String" ilk="argument" name="uri" />
          <variable citdl="Function" ilk="argument" name="cb" />
          <variable citdl="boolean" ilk="argument" name="currentIsXDomain" />
          <variable citdl="String" ilk="argument" name="module" />
        </scope>
        <scope doc="causes subsequent calls to Dojo methods to assume the passed object and, optionally, document as the default scopes to use. A 2-element array of the previous global and document are returned." ilk="function" name="pushContext" returns="Array" signature="pushContext(g,d)">
          <variable citdl="Object|String" doc="The global context. If a string, the id of the frame to search for a context and document." ilk="argument" name="g" />
          <variable citdl="MDocumentElement" doc="The document element to execute subsequent code with." ilk="argument" name="d" />
        </scope>
        <scope doc="If the context stack contains elements, ensure that subsequent code executes in the *previous* context to the current context. The current context set ([global, document]) is returned." ilk="function" name="popContext" />
        <scope ilk="function" name="_inContext" signature="_inContext(g,d,f)">
          <variable ilk="argument" name="g" />
          <variable ilk="argument" name="d" />
          <variable ilk="argument" name="f" />
        </scope>
        <scope doc="Returns DOM node with matching `id` attribute or `null` if not found, similar to &amp;amp;quot;$&amp;amp;quot; function in another library. If `id` is a DomNode, this function is a no-op." ilk="function" name="byId" returns="DomNode" signature="byId(id,doc)">
          <variable citdl="String|DOMNode" doc="A string to match an HTML id attribute or a reference to a DOM Node" ilk="argument" name="id" />
          <variable citdl="Document" doc="Document to work in. Defaults to the current value of dojo.doc. Can be used to retrieve node references from other documents." ilk="argument" name="doc" />
        </scope>
        <scope ilk="function" name="exit" signature="exit(exitcode)">
          <variable ilk="argument" name="exitcode" />
        </scope>
        <scope ilk="function" name="_rhinoCurrentScriptViaJava" signature="_rhinoCurrentScriptViaJava(depth)">
          <variable ilk="argument" name="depth" />
        </scope>
        <scope doc="Return the body element of the document return the body object associated with dojo.doc" ilk="function" name="body" returns="Node" />
        <variable citdl="Object" doc="Alias for the current document. &apos;dojo.doc&apos; can be modified for temporary context shifting. Also see dojo.withDoc()." name="doc" />
        <variable citdl="Object" doc="Detect spidermonkey" name="isSpidermonkey" />
        <scope ilk="function" name="_spidermonkeyCurrentFile" signature="_spidermonkeyCurrentFile(depth)">
          <variable ilk="argument" name="depth" />
        </scope>
        <scope doc="Internal xd loader function. Overrides loadPath() from loader.js. xd loading requires slightly different behavior from loadPath()." ilk="function" name="_loadPath" returns="Boolean" signature="_loadPath(relpath,module,cb)">
          <variable citdl="String" ilk="argument" name="relpath" />
          <variable citdl="String" ilk="argument" name="module" />
          <variable citdl="Function" ilk="argument" name="cb" />
        </scope>
        <scope doc="calls loadUri then findModule and returns true if both succeed" ilk="function" name="_loadUriAndCheck" returns="Boolean" signature="_loadUriAndCheck(uri,moduleName,cb)">
          <variable citdl="String" ilk="argument" name="uri" />
          <variable citdl="String" ilk="argument" name="moduleName" />
          <variable citdl="Function" ilk="argument" name="cb" />
        </scope>
        <scope doc="signal fired when initial environment and package loading is complete. You should use dojo.addOnLoad() instead of doing a direct dojo.connect() to this method in order to handle initialization tasks that require the environment to be initialized. In a browser host, declarative widgets will be constructed when this function finishes runing." ilk="function" name="loaded" />
        <scope doc="signal fired by impending environment destruction. You should use dojo.addOnUnload() instead of doing a direct dojo.connect() to this method to perform page/application cleanup methods. See dojo.addOnUnload for more info." ilk="function" name="unloaded" />
        <scope ilk="function" name="_onto" signature="_onto(arr,obj,fn)">
          <variable ilk="argument" name="arr" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="fn" />
        </scope>
        <scope doc="Registers a function to be triggered after the DOM has finished loading and widgets declared in markup have been instantiated. Images and CSS files may or may not have finished downloading when the specified function is called. (Note that widgets&apos; CSS and HTML code is guaranteed to be downloaded before said widgets are instantiated.)" ilk="function" name="addOnLoad" signature="addOnLoad(obj)">
          <variable citdl="Object" ilk="argument" name="obj" />
        </scope>
        <scope ilk="function" name="_modulesLoaded" />
        <scope ilk="function" name="_callLoaded" returns="Boolean|String" />
        <scope doc="Converts a module name in dotted JS notation to an array representing the path in the source tree" ilk="function" name="_getModuleSymbols" returns="Array" signature="_getModuleSymbols(modulename)">
          <variable citdl="String" ilk="argument" name="modulename" />
        </scope>
        <scope doc="Executes a function that needs to be executed for the loader&apos;s dojo.requireIf resolutions to work. This is needed mostly for the xdomain loader case where a function needs to be executed to set up the possible values for a dojo.requireIf call." ilk="function" name="loadInit" signature="loadInit(init)">
          <variable citdl="Function" doc="a function reference. Executed immediately." ilk="argument" name="init" />
        </scope>
        <scope doc="loads a Javascript module from the appropriate URI" ilk="function" name="require" signature="require(moduleName,omitModuleCheck)">
          <variable citdl="String" doc="module name to load, using periods for separators, e.g. &amp;amp;quot;dojo.date.locale&amp;amp;quot;. Module paths are de-referenced by dojo&apos;s internal mapping of locations to names and are disambiguated by longest prefix. See `dojo.registerModulePath()` for details on registering new modules." ilk="argument" name="moduleName" />
          <variable citdl="Boolean" doc="if `true`, omitModuleCheck skips the step of ensuring that the loaded file actually defines the symbol it is referenced by. For example if it called as `dojo.require(&amp;amp;quot;a.b.c&amp;amp;quot;)` and the file located at `a/b/c.js` does not define an object `a.b.c`, and exception will be throws whereas no exception is raised when called as `dojo.require(&amp;amp;quot;a.b.c&amp;amp;quot;, true)`" ilk="argument" name="omitModuleCheck" />
        </scope>
        <scope ilk="function" name="provide" signature="provide(resourceName)">
          <variable ilk="argument" name="resourceName" />
        </scope>
        <scope doc="require one or more modules based on which host environment Dojo is currently operating in" ilk="function" name="platformRequire" signature="platformRequire(modMap)">
          <variable citdl="Object" ilk="argument" name="modMap" />
        </scope>
        <scope doc="If the condition is true then call dojo.require() for the specified resource" ilk="function" name="requireIf" signature="requireIf(condition,resourceName)">
          <variable citdl="Boolean" ilk="argument" name="condition" />
          <variable citdl="String" ilk="argument" name="resourceName" />
        </scope>
        <scope doc="maps a module name to a path" ilk="function" name="registerModulePath" signature="registerModulePath(module,prefix)">
          <variable citdl="String" ilk="argument" name="module" />
          <variable citdl="String" ilk="argument" name="prefix" />
        </scope>
        <scope doc="loads a bundle intelligently based on whether the module is local or xd. Overrides the local-case implementation." ilk="function" name="requireLocalization" signature="requireLocalization(moduleName,bundleName,locale,availableFlatLocales)">
          <variable citdl="String" ilk="argument" name="moduleName" />
          <variable citdl="String" ilk="argument" name="bundleName" />
          <variable citdl="String" ilk="argument" name="locale" />
          <variable citdl="String" ilk="argument" name="availableFlatLocales" />
        </scope>
        <scope doc="Constructor to create an object representing a URL. It is marked as private, since we might consider removing or simplifying it." ilk="function" name="_Url">
          <variable doc="" name="uri" />
          <variable doc="" name="scheme" />
          <variable doc="" name="authority" />
          <variable doc="" name="path" />
          <variable doc="" name="query" />
          <variable doc="" name="fragment" />
          <variable doc="" name="user" />
          <variable doc="" name="password" />
          <variable doc="" name="host" />
          <variable doc="" name="port" />
          <scope doc="" ilk="function" name="toString" />
        </scope>
        <scope doc="Returns a `dojo._Url` object relative to a module." ilk="function" name="moduleUrl" returns="String" signature="moduleUrl(module,url)">
          <variable citdl="String" ilk="argument" name="module" />
          <variable citdl="dojo._Url||String" ilk="argument" name="url" />
        </scope>
        <scope ilk="function" name="_xdDebugFileLoaded" signature="_xdDebugFileLoaded(resourceName)">
          <variable ilk="argument" name="resourceName" />
        </scope>
        <variable attributes="private" citdl="Object" doc="" name="_xdBundleMap" />
        <scope ilk="function" name="_xdReset" />
        <scope ilk="function" name="_xdCreateResource" returns="String" signature="_xdCreateResource(contents,resourceName,resourcePath)">
          <variable citdl="String" ilk="argument" name="contents" />
          <variable citdl="String" ilk="argument" name="resourceName" />
          <variable citdl="String" ilk="argument" name="resourcePath" />
        </scope>
        <scope ilk="function" name="_xdExtractLoadInits" returns="String" signature="_xdExtractLoadInits(fileContents)">
          <variable citdl="String" ilk="argument" name="fileContents" />
        </scope>
        <scope doc="Figure out whether the path is local or x-domain If there is a colon before the first / then, we have a URL with a protocol." ilk="function" name="_xdIsXDomainPath" signature="_xdIsXDomainPath(relpath)">
          <variable citdl="string" ilk="argument" name="relpath" />
        </scope>
        <scope doc="Internal xd loader function. Called by an xd module resource when it has been loaded via a script tag.  Evaluate the function with scopeArgs for multiversion support." ilk="function" name="_xdResourceLoaded" signature="_xdResourceLoaded(res)">
          <variable citdl="Object" ilk="argument" name="res" />
        </scope>
        <scope doc="Internal xd loader function. Used when loading a flattened localized bundle via a script tag." ilk="function" name="_xdLoadFlattenedBundle" signature="_xdLoadFlattenedBundle(moduleName,bundleName,locale,bundleData)">
          <variable citdl="String" ilk="argument" name="moduleName" />
          <variable citdl="String" ilk="argument" name="bundleName" />
          <variable citdl="String" ilk="argument" name="locale" />
          <variable citdl="Object" ilk="argument" name="bundleData" />
        </scope>
        <scope ilk="function" name="_xdInitExtraLocales" returns="String|Boolean" />
        <scope ilk="function" name="xdRequireLocalization" returns="String|Boolean" signature="xdRequireLocalization(moduleName,bundleName,locale,availableFlatLocales)">
          <variable citdl="String" ilk="argument" name="moduleName" />
          <variable citdl="String" ilk="argument" name="bundleName" />
          <variable citdl="String" ilk="argument" name="locale" />
          <variable citdl="String" ilk="argument" name="availableFlatLocales" />
        </scope>
        <scope ilk="function" name="_xdUnpackDependency" returns="String|Boolean|Object" signature="_xdUnpackDependency(dep)">
          <variable citdl="Array" ilk="argument" name="dep" />
        </scope>
        <scope doc="Internal xd loader function. Walks the requires and evaluates module resource contents in the right order." ilk="function" name="_xdWalkReqs" />
        <scope doc="Internal xd loader function. Does a depth first, breadth second search and eval of required modules." ilk="function" name="_xdEvalReqs" signature="_xdEvalReqs(reqChain)">
          <variable citdl="Array" ilk="argument" name="reqChain" />
        </scope>
        <scope doc="Internal xd loader function. Clears the interval timer used to check on the status of in-flight xd module resource requests." ilk="function" name="_xdClearInterval" />
        <scope doc="Internal xd loader function. Monitors in-flight requests for xd module resources." ilk="function" name="_xdWatchInFlight" />
        <scope ilk="function" name="_xdNotifyLoaded" returns="String|Boolean|Object" />
        <scope doc="locates the first index of the provided value in the passed array. If the value is not found, -1 is returned." ilk="function" name="indexOf" returns="Number" signature="indexOf(array,value,fromIndex,findLast)">
          <variable citdl="Array" ilk="argument" name="array" />
          <variable citdl="Object" ilk="argument" name="value" />
          <variable citdl="Integer" ilk="argument" name="fromIndex" />
          <variable citdl="Boolean" ilk="argument" name="findLast" />
        </scope>
        <scope doc="locates the last index of the provided value in the passed array. If the value is not found, -1 is returned." ilk="function" name="lastIndexOf" returns="Number" signature="lastIndexOf(array,value,fromIndex)">
          <variable citdl="Array" ilk="argument" name="array" />
          <variable citdl="Object" ilk="argument" name="value" />
          <variable citdl="Integer" ilk="argument" name="fromIndex" />
        </scope>
        <scope doc="for every item in arr, callback is invoked. Return values are ignored." ilk="function" name="forEach" returns="Number" signature="forEach(arr,callback,thisObject)">
          <variable citdl="Array|String" doc="the array to iterate over. If a string, operates on individual characters." ilk="argument" name="arr" />
          <variable citdl="Function|String" doc="a function is invoked with three arguments: item, index, and array" ilk="argument" name="callback" />
          <variable citdl="Object" doc="may be used to scope the call to callback" ilk="argument" name="thisObject" />
        </scope>
        <scope ilk="function" name="_everyOrSome" returns="Boolean" signature="_everyOrSome(every,arr,callback,thisObject)">
          <variable citdl="Boolean" ilk="argument" name="every" />
          <variable citdl="Array|String" ilk="argument" name="arr" />
          <variable citdl="Function|String" ilk="argument" name="callback" />
          <variable citdl="Object" ilk="argument" name="thisObject" />
        </scope>
        <scope doc="Determines whether or not every item in arr satisfies the condition implemented by callback." ilk="function" name="every" returns="Boolean" signature="every(arr,callback,thisObject)">
          <variable citdl="Array|String" doc="the array to iterate on. If a string, operates on individual characters." ilk="argument" name="arr" />
          <variable citdl="Function|String" doc="a function is invoked with three arguments: item, index, and array and returns true if the condition is met." ilk="argument" name="callback" />
          <variable citdl="Object" doc="may be used to scope the call to callback" ilk="argument" name="thisObject" />
        </scope>
        <scope doc="Determines whether or not any item in arr satisfies the condition implemented by callback." ilk="function" name="some" returns="Boolean" signature="some(arr,callback,thisObject)">
          <variable citdl="Array|String" doc="the array to iterate over. If a string, operates on individual characters." ilk="argument" name="arr" />
          <variable citdl="Function|String" doc="a function is invoked with three arguments: item, index, and array and returns true if the condition is met." ilk="argument" name="callback" />
          <variable citdl="Object" doc="may be used to scope the call to callback" ilk="argument" name="thisObject" />
        </scope>
        <scope doc="applies callback to each element of arr and returns an Array with the results" ilk="function" name="map" returns="Array" signature="map(arr,callback,thisObject)">
          <variable citdl="Array|String" doc="the array to iterate on. If a string, operates on individual characters." ilk="argument" name="arr" />
          <variable citdl="Function|String" doc="a function is invoked with three arguments, (item, index, array), and returns a value" ilk="argument" name="callback" />
          <variable citdl="Function" doc="may be used to scope the call to callback" ilk="argument" name="thisObject" />
        </scope>
        <scope doc="Returns a new Array with those items from arr that match the condition implemented by callback." ilk="function" name="filter" returns="Array" signature="filter(arr,callback,thisObject)">
          <variable citdl="Array" doc="the array to iterate over." ilk="argument" name="arr" />
          <variable citdl="Function|String" doc="a function that is invoked with three arguments (item, index, array). The return of this function is expected to be a boolean which determines whether the passed-in item will be included in the returned array." ilk="argument" name="callback" />
          <variable citdl="Object" doc="may be used to scope the call to callback" ilk="argument" name="thisObject" />
        </scope>
        <variable attributes="private" citdl="Object" doc="" name="_listener">
          <scope doc="" ilk="function" name="getDispatcher" />
          <scope attributes="private" doc="" ilk="function" name="add" returns="Handle" signature="add(source,method,listener)">
            <variable citdl="Object" ilk="argument" name="source" />
            <variable citdl="String" ilk="argument" name="method" />
            <variable ilk="function" name="listener" />
          </scope>
          <scope doc="" ilk="function" name="remove" signature="remove(source,method,handle)">
            <variable citdl="Object" ilk="argument" name="source" />
            <variable citdl="String" ilk="argument" name="method" />
            <variable citdl="Handle" ilk="argument" name="handle" />
          </scope>
        </variable>
        <variable attributes="private" citdl="Object" doc="" name="_topics" />
        <scope doc="Create a link that calls one function when another executes." ilk="function" name="connect" returns="Handle" signature="connect(obj,event,context,method,dontFix)">
          <variable citdl="Object|null" doc="The source object for the event function. Defaults to dojo.global if null. If obj is a DOM node, the connection is delegated to the DOM event manager (unless dontFix is true)." ilk="argument" name="obj" />
          <variable citdl="String" doc="name of the event function in obj. I.e. identifies a property obj[event]." ilk="argument" name="event" />
          <variable citdl="Object|null" doc="The object that method will receive as &amp;amp;quot;this&amp;amp;quot;.  If context is null and method is a function, then method inherits the context of event.  If method is a string then context must be the source object object for method (context[method]). If context is null, dojo.global is used." ilk="argument" name="context" />
          <variable citdl="String|Function" doc="A function reference, or name of a function in context. The function identified by method fires after event does. method receives the same arguments as the event. See context argument comments for information on method&apos;s scope." ilk="argument" name="method" />
          <variable citdl="Boolean" doc="If obj is a DOM node, set dontFix to true to prevent delegation of this connection to the DOM event manager." ilk="argument" name="dontFix" />
        </scope>
        <scope ilk="function" name="_connect" returns="Handle" signature="_connect(obj,event,context,method,dontFix)">
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="event" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="method" />
          <variable ilk="argument" name="dontFix" />
        </scope>
        <scope doc="Remove a link created by dojo.connect." ilk="function" name="disconnect" signature="disconnect(handle)">
          <variable citdl="Handle" doc="the return value of the dojo.connect call that created the connection." ilk="argument" name="handle" />
        </scope>
        <scope ilk="function" name="_disconnect" signature="_disconnect(obj,event,handle,listener)">
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="event" />
          <variable ilk="argument" name="handle" />
          <variable ilk="argument" name="listener" />
        </scope>
        <scope doc="Attach a listener to a named topic. The listener function is invoked whenever the named topic is published (see: dojo.publish). Returns a handle which is needed to unsubscribe this listener." ilk="function" name="subscribe" returns="Handle" signature="subscribe(topic,context,method)">
          <variable citdl="String" ilk="argument" name="topic" />
          <variable citdl="Object|null" doc="Scope in which method will be invoked, or null for default scope." ilk="argument" name="context" />
          <variable citdl="String|Function" doc="The name of a function in context, or a function reference. This is the function that is invoked when topic is published." ilk="argument" name="method" />
        </scope>
        <scope doc="Remove a topic listener." ilk="function" name="unsubscribe" signature="unsubscribe(handle)">
          <variable citdl="Handle" doc="The handle returned from a call to subscribe." ilk="argument" name="handle" />
        </scope>
        <scope doc="Invoke all listener method subscribed to topic." ilk="function" name="publish" returns="Handle" signature="publish(topic,args)">
          <variable citdl="String" doc="The name of the topic to publish." ilk="argument" name="topic" />
          <variable citdl="Array" doc="An array of arguments. The arguments will be applied to each topic subscriber (as first class parameters, via apply)." ilk="argument" name="args" />
        </scope>
        <scope doc="Ensure that everytime obj.event() is called, a message is published on the topic. Returns a handle which can be passed to dojo.disconnect() to disable subsequent automatic publication on the topic." ilk="function" name="connectPublisher" returns="Handle" signature="connectPublisher(topic,obj,event)">
          <variable citdl="String" doc="The name of the topic to publish." ilk="argument" name="topic" />
          <variable citdl="Object|null" doc="The source object for the event function. Defaults to dojo.global if null." ilk="argument" name="obj" />
          <variable citdl="String" doc="The name of the event function in obj. I.e. identifies a property obj[event]." ilk="argument" name="event" />
        </scope>
        <scope doc="Create a feature-rich constructor from compact notation" ilk="function" name="declare" returns="Function" signature="declare(className,superclass,props)">
          <variable citdl="String" doc="The name of the constructor (loosely, a &amp;amp;quot;class&amp;amp;quot;) stored in the &amp;amp;quot;declaredClass&amp;amp;quot; property in the created prototype" ilk="argument" name="className" />
          <variable citdl="Function|Function[]" doc="May be null, a Function, or an Array of Functions. If an array, the first element is used as the prototypical ancestor and any following Functions become mixin ancestors." ilk="argument" name="superclass" />
          <variable citdl="Object" doc="An object whose properties are copied to the created prototype. Add an instance-initialization function by making it a property named &amp;amp;quot;constructor&amp;amp;quot;." ilk="argument" name="props" />
        </scope>
        <scope ilk="function" name="_ieDispatcher" signature="_ieDispatcher(args,sender)">
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="sender" />
        </scope>
        <scope ilk="function" name="_getIeDispatcher" returns="Handle|undefined|IE will post CTRL-BREAK, CTRL-ENTER as keypress natively|function" />
        <variable attributes="private" citdl="Object" doc="" name="_event_listener" />
        <variable citdl="Object" doc="definitions for common key values" name="keys">
          <scope doc="" name="BACKSPACE" />
          <scope doc="" name="TAB" />
          <scope doc="" name="CLEAR" />
          <scope doc="" name="ENTER" />
          <scope doc="" name="SHIFT" />
          <scope doc="" name="CTRL" />
          <scope doc="" name="ALT" />
          <scope doc="" name="PAUSE" />
          <scope doc="" name="CAPS_LOCK" />
          <scope doc="" name="ESCAPE" />
          <scope doc="" name="SPACE" />
          <scope doc="" name="PAGE_UP" />
          <scope doc="" name="PAGE_DOWN" />
          <scope doc="" name="END" />
          <scope doc="" name="HOME" />
          <scope doc="" name="LEFT_ARROW" />
          <scope doc="" name="UP_ARROW" />
          <scope doc="" name="RIGHT_ARROW" />
          <scope doc="" name="DOWN_ARROW" />
          <scope doc="" name="INSERT" />
          <scope doc="" name="DELETE" />
          <scope doc="" name="HELP" />
          <scope doc="" name="LEFT_WINDOW" />
          <scope doc="" name="RIGHT_WINDOW" />
          <scope doc="" name="SELECT" />
          <scope doc="" name="NUMPAD_0" />
          <scope doc="" name="NUMPAD_1" />
          <scope doc="" name="NUMPAD_2" />
          <scope doc="" name="NUMPAD_3" />
          <scope doc="" name="NUMPAD_4" />
          <scope doc="" name="NUMPAD_5" />
          <scope doc="" name="NUMPAD_6" />
          <scope doc="" name="NUMPAD_7" />
          <scope doc="" name="NUMPAD_8" />
          <scope doc="" name="NUMPAD_9" />
          <scope doc="" name="NUMPAD_MULTIPLY" />
          <scope doc="" name="NUMPAD_PLUS" />
          <scope doc="" name="NUMPAD_ENTER" />
          <scope doc="" name="NUMPAD_MINUS" />
          <scope doc="" name="NUMPAD_PERIOD" />
          <scope doc="" name="NUMPAD_DIVIDE" />
          <scope doc="" name="F1" />
          <scope doc="" name="F2" />
          <scope doc="" name="F3" />
          <scope doc="" name="F4" />
          <scope doc="" name="F5" />
          <scope doc="" name="F6" />
          <scope doc="" name="F7" />
          <scope doc="" name="F8" />
          <scope doc="" name="F9" />
          <scope doc="" name="F10" />
          <scope doc="" name="F11" />
          <scope doc="" name="F12" />
          <scope doc="" name="F13" />
          <scope doc="" name="F14" />
          <scope doc="" name="F15" />
          <scope doc="" name="NUM_LOCK" />
          <scope doc="" name="SCROLL_LOCK" />
        </variable>
        <scope doc="normalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions" ilk="function" name="fixEvent" signature="fixEvent(evt,sender)">
          <variable citdl="Event" doc="native event object" ilk="argument" name="evt" />
          <variable citdl="DOMNode" doc="node to treat as &amp;amp;quot;currentTarget&amp;amp;quot;" ilk="argument" name="sender" />
        </scope>
        <scope doc="prevents propagation and clobbers the default action of the passed event" ilk="function" name="stopEvent" signature="stopEvent(evt)">
          <variable citdl="Event" doc="The event object. If omitted, window.event is used on IE." ilk="argument" name="evt" />
        </scope>
        <variable attributes="private" citdl="Object" doc="" name="_ie_listener" />
        <scope attributes="private" doc="" ilk="function" name="__AnimArgs">
          <variable citdl="Object" doc="" name="properties" />
        </scope>
        <scope doc="" ilk="function" name="_Animation" signature="_Animation(args)">
          <variable citdl="Object" ilk="argument" name="args" />
          <scope citdl="Integer" doc="The time in milliseonds the animation will take to run" name="duration" />
          <variable citdl="dojo._Line||Array" doc="A two element array of start and end values, or a dojo._Line instance to be used in the Animation." name="curve" />
          <scope doc="A Function to adjust the acceleration (or deceleration) of the progress across a dojo._Line" ilk="function" name="easing" />
          <scope citdl="Integer" doc="The number of times to loop the animation" name="repeat" />
          <scope citdl="Integer" doc="the time in milliseconds to wait before advancing to next frame (used as a fps timer: rate/1000 = fps)" name="rate" />
          <scope citdl="Integer" doc="The time in milliseconds to wait before starting animation after it has been .play()&apos;ed   events" name="delay" />
          <scope citdl="Event" doc="Synthetic event fired before a dojo._Animation begins playing (synchronous)" name="beforeBegin" />
          <scope citdl="Event" doc="Synthetic event fired as a dojo._Animation begins playing (useful?)" name="onBegin" />
          <scope citdl="Event" doc="Synthetic event fired at each interval of a dojo._Animation" name="onAnimate" />
          <scope citdl="Event" doc="Synthetic event fired after the final frame of a dojo._Animation" name="onEnd" />
          <scope citdl="Event" doc="Synthetic event fired any time a dojo._Animation is play()&apos;ed" name="onPlay" />
          <scope citdl="Event" doc="Synthetic event fired when a dojo._Animation is paused" name="onPause" />
          <scope citdl="Event" doc="Synthetic event fires when a dojo._Animation is stopped" name="onStop" />
          <scope attributes="private" doc="" name="_percent" />
          <scope attributes="private" doc="" name="_startRepeatCount" />
          <scope attributes="private" doc="Convenience function. Fire event &amp;amp;quot;evt&amp;amp;quot; and pass it the arguments specified in &amp;amp;quot;args&amp;amp;quot;." ilk="function" name="_fire" returns="dojo._Animation" signature="_fire(evt,args)">
            <variable citdl="Event" doc="The event to fire." ilk="argument" name="evt" />
            <variable citdl="Array" doc="The arguments to pass to the event." ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Start the animation." ilk="function" name="play" returns="dojo._Animation" signature="play(delay,gotoStart)">
            <variable citdl="int" doc="How many milliseconds to delay before starting." ilk="argument" name="delay" />
            <variable citdl="Boolean" doc="If true, starts the animation from the beginning; otherwise, starts it from its current position." ilk="argument" name="gotoStart" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_play" returns="dojo._Animation" signature="_play(gotoStart)">
            <variable ilk="argument" name="gotoStart" />
          </scope>
          <scope attributes="private" doc="Pauses a running animation." ilk="function" name="pause" returns="dojo._Animation" />
          <scope attributes="private" doc="Sets the progress of the animation." ilk="function" name="gotoPercent" returns="dojo._Animation" signature="gotoPercent(percent,andPlay)">
            <variable citdl="Decimal" doc="A percentage in decimal notation (between and including 0.0 and 1.0)." ilk="argument" name="percent" />
            <variable citdl="Boolean" doc="If true, play the animation after setting the progress." ilk="argument" name="andPlay" />
          </scope>
          <scope attributes="private" doc="Stops a running animation." ilk="function" name="stop" returns="dojo._Animation" signature="stop(gotoEnd)">
            <variable citdl="boolean" doc="If true, the animation will end." ilk="argument" name="gotoEnd" />
          </scope>
          <scope attributes="private" doc="Returns a string token representation of the status of the animation, one of: &amp;amp;quot;paused&amp;amp;quot;, &amp;amp;quot;playing&amp;amp;quot;, &amp;amp;quot;stopped&amp;amp;quot;" ilk="function" name="status" returns="String" />
          <scope attributes="private" doc="" ilk="function" name="_cycle" returns="dojo._Animation" />
          <scope attributes="private" doc="Clear the play delay timer" ilk="function" name="_clearTimer" />
          <scope attributes="private" doc="" ilk="function" name="_startTimer" returns="Decimal|dojo._Animation|String" />
          <variable attributes="private" doc="" name="_timer" />
          <scope attributes="private" doc="" ilk="function" name="_stopTimer" />
        </scope>
        <scope doc="dojo._Line is the object used to generate values from a start value to an end value" ilk="function" name="_Line" signature="_Line(start,end)">
          <variable citdl="int" doc="Beginning value for range" ilk="argument" name="start" />
          <variable citdl="int" doc="Ending value for range" ilk="argument" name="end" />
          <variable citdl="int" doc="Beginning value for range" name="start" />
          <variable citdl="int" doc="Ending value for range" name="end" />
          <scope attributes="private" doc="Returns the point on the line" ilk="function" name="getValue" returns="Decimal" signature="getValue(n)">
            <variable citdl="float" doc="a floating point number greater than 0 and less than 1" ilk="argument" name="n" />
          </scope>
        </scope>
        <scope doc="Returns an animation that will fade the node defined by args.node from the start to end values passed (args.start args.end) (end is mandatory, start is optional)" ilk="function" name="_fade" returns="dojo._Animation" signature="_fade(args)">
          <variable citdl="Object" ilk="argument" name="args" />
        </scope>
        <scope attributes="private" doc="" ilk="function" name="__FadeArgs" signature="__FadeArgs(node,duration,easing)">
          <variable citdl="DOMNode|String" doc="The node referenced in the animation" ilk="argument" name="node" />
          <variable citdl="Integer" doc="Duration of the animation in milliseconds." ilk="argument" name="duration" />
          <variable doc="An easing function." ilk="function" name="easing" />
          <variable citdl="DOMNode|String" doc="The node referenced in the animation" name="node" />
          <variable citdl="Integer?" doc="Duration of the animation in milliseconds." name="duration" />
          <variable citdl="Function?" doc="An easing function." name="easing" />
        </scope>
        <scope doc="Returns an animation that will fade node defined in &apos;args&apos; from its current opacity to fully opaque." ilk="function" name="fadeIn" returns="dojo._Animation" signature="fadeIn(args)">
          <variable citdl="dojo.__FadeArgs" ilk="argument" name="args" />
        </scope>
        <scope doc="Returns an animation that will fade node defined in &apos;args&apos; from its current opacity to fully transparent." ilk="function" name="fadeOut" returns="dojo._Animation" signature="fadeOut(args)">
          <variable citdl="dojo.__FadeArgs" ilk="argument" name="args" />
        </scope>
        <scope doc="The default easing function for dojo._Animation(s)" ilk="function" name="_defaultEasing" signature="_defaultEasing(n)">
          <variable citdl="Decimal" ilk="argument" name="n" />
        </scope>
        <scope doc="Returns an animation that will transition the properties of node defined in &apos;args&apos; depending how they are defined in &apos;args.properties&apos;" ilk="function" name="animateProperty" returns="dojo._Animation" signature="animateProperty(args)">
          <variable citdl="dojo.__AnimArgs" ilk="argument" name="args" />
        </scope>
        <scope doc="A simpler interface to `dojo.animateProperty()`, also returns an instance of `dojo._Animation` but begins the animation immediately, unlike nearly every other Dojo animation API." ilk="function" name="anim" signature="anim(node,properties,duration,easing,onEnd,delay)">
          <variable citdl="DOMNode|String" doc="a DOM node or the id of a node to animate CSS properties on" ilk="argument" name="node" />
          <variable citdl="Object" ilk="argument" name="properties" />
          <variable citdl="Integer" doc="The number of milliseconds over which the animation should run. Defaults to the global animation default duration (350ms)." ilk="argument" name="duration" />
          <variable citdl="Function" doc="An easing function over which to calculate acceleration and deceleration of the animation through its duration. A default easing algorithm is provided, but you may plug in any you wish. A large selection of easing algorithms are available in `dojo.fx.easing`." ilk="argument" name="easing" />
          <variable citdl="Function" doc="A function to be called when the animation finishes running." ilk="argument" name="onEnd" />
          <variable citdl="Integer" doc="The number of milliseconds to delay beginning the animation by. The default is 0." ilk="argument" name="delay" />
        </scope>
        <scope doc="Existing alias for `dojo.destroy`. Deprecated, will be removed in 2.0" ilk="function" name="_destroyElement" signature="_destroyElement(node)">
          <variable ilk="argument" name="node" />
        </scope>
        <scope doc="Returns a &amp;amp;quot;computed style&amp;amp;quot; object." ilk="function" name="getComputedStyle" returns="CSS2Properties" signature="getComputedStyle(node)">
          <variable citdl="DOMNode" doc="A reference to a DOM node. Does NOT support taking an ID string for speed reasons." ilk="argument" name="node" />
        </scope>
        <scope doc="Returns the current opacity of the passed node as a floating-point value between 0 and 1." ilk="function" name="_getOpacity" returns="Number" signature="_getOpacity(node)">
          <variable citdl="DomNode" doc="a reference to a DOM node. Does NOT support taking an ID string for speed reasons." ilk="argument" name="node" />
        </scope>
        <scope doc="set the opacity of the passed node portably. Returns the new opacity of the node." ilk="function" name="_setOpacity" returns="Number" signature="_setOpacity(node,opacity)">
          <variable citdl="DOMNode" doc="a reference to a DOM node. Does NOT support taking an ID string for performance reasons." ilk="argument" name="node" />
          <variable citdl="Number" doc="A Number between 0 and 1. 0 specifies transparent." ilk="argument" name="opacity" />
        </scope>
        <scope doc="safely removes all children of the node." ilk="function" name="empty" signature="empty(node)">
          <variable citdl="DOMNode|String" doc="a reference to a DOM node or an id." ilk="argument" name="node" />
        </scope>
        <scope doc="Removes a node from its parent, clobbering it and all of its children." ilk="function" name="destroy" signature="destroy(node)">
          <variable citdl="String|DomNode" doc="A String ID or DomNode reference of the element to be destroyed" ilk="argument" name="node" />
        </scope>
        <scope doc="Returns true if node is a descendant of ancestor" ilk="function" name="isDescendant" returns="Boolean" signature="isDescendant(node,ancestor)">
          <variable citdl="DomNode|String" doc="string id or node reference to test" ilk="argument" name="node" />
          <variable citdl="DomNode|String" doc="string id or node reference of potential parent to test against" ilk="argument" name="ancestor" />
        </scope>
        <scope doc="enable or disable selection on a node" ilk="function" name="setSelectable" signature="setSelectable(node,selectable)">
          <variable citdl="DomNode|String" doc="id or reference to node" ilk="argument" name="node" />
          <variable citdl="Boolean" doc="state to put the node in. false indicates unselectable, true allows selection." ilk="argument" name="selectable" />
        </scope>
        <scope doc="Attempt to insert node into the DOM, choosing from various positioning options. Returns true if successful, false otherwise." ilk="function" name="place" returns="DomNode" signature="place(node,refNode,position)">
          <variable citdl="String|DomNode" doc="id or node reference, or HTML fragment starting with &amp;amp;quot;&amp;amp;lt;&amp;amp;quot; to place relative to refNode" ilk="argument" name="node" />
          <variable citdl="String|DomNode" doc="id or node reference to use as basis for placement" ilk="argument" name="refNode" />
          <variable citdl="String|Number" doc="string noting the position of node relative to refNode or a number indicating the location in the childNodes collection of refNode. Accepted string values are:   * before  * after  * replace  * only  * first  * last &amp;amp;quot;first&amp;amp;quot; and &amp;amp;quot;last&amp;amp;quot; indicate positions as children of refNode, &amp;amp;quot;replace&amp;amp;quot; replaces refNode, &amp;amp;quot;only&amp;amp;quot; replaces all children. position defaults to &amp;amp;quot;last&amp;amp;quot; if not specified" ilk="argument" name="position" />
        </scope>
        <scope ilk="function" name="_toPixelValue" returns="DomNode|Boolean|CSS2Properties" signature="_toPixelValue(element,value,avalue)">
          <variable ilk="argument" name="element" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="avalue" />
        </scope>
        <scope doc="Accesses styles on a node. If 2 arguments are passed, acts as a getter. If 3 arguments are passed, acts as a setter." ilk="function" name="style" returns="Number|CSS2Properties||String||Number" signature="style(node,style,value)">
          <variable citdl="DomNode|String" doc="id or reference to node to get/set style for" ilk="argument" name="node" />
          <variable citdl="String?|Object" doc="the style property to set in DOM-accessor format (&amp;amp;quot;borderWidth&amp;amp;quot;, not &amp;amp;quot;border-width&amp;amp;quot;) or an object with key/value pairs suitable for setting each property." ilk="argument" name="style" />
          <variable citdl="String" doc="If passed, sets value on the node for style, handling cross-browser concerns. When setting a pixel value, be sure to include &amp;amp;quot;px&amp;amp;quot; in the value. For instance, top: &amp;amp;quot;200px&amp;amp;quot;. Otherwise, in some cases, some browsers will not apply the style." ilk="argument" name="value" />
        </scope>
        <scope doc="Returns object with special values specifically useful for node fitting.  * l/t = left/top padding (respectively) * w = the total of the left and right padding * h = the total of the top and bottom padding  If &apos;node&apos; has position, l/t forms the origin for child nodes. The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead." ilk="function" name="_getPadExtents" signature="_getPadExtents(n,computedStyle)">
          <variable citdl="DomNode" ilk="argument" name="n" />
          <variable citdl="Object" ilk="argument" name="computedStyle" />
        </scope>
        <scope doc="returns an object with properties useful for noting the border dimensions.  * l/t = the sum of left/top border (respectively) * w = the sum of the left and right border * h = the sum of the top and bottom border  The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead." ilk="function" name="_getBorderExtents" signature="_getBorderExtents(n,computedStyle)">
          <variable citdl="DomNode" ilk="argument" name="n" />
          <variable citdl="Object" ilk="argument" name="computedStyle" />
        </scope>
        <scope doc="Returns object with properties useful for box fitting with regards to padding.  * l/t = the sum of left/top padding and left/top border (respectively) * w = the sum of the left and right padding and border * h = the sum of the top and bottom padding and border  The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead." ilk="function" name="_getPadBorderExtents" signature="_getPadBorderExtents(n,computedStyle)">
          <variable citdl="DomNode" ilk="argument" name="n" />
          <variable citdl="Object" ilk="argument" name="computedStyle" />
        </scope>
        <scope doc="returns object with properties useful for box fitting with regards to box margins (i.e., the outer-box).  * l/t = marginLeft, marginTop, respectively * w = total width, margin inclusive * h = total height, margin inclusive  The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead." ilk="function" name="_getMarginExtents" signature="_getMarginExtents(n,computedStyle)">
          <variable ilk="argument" name="n" />
          <variable ilk="argument" name="computedStyle" />
        </scope>
        <scope doc="returns an object that encodes the width, height, left and top positions of the node&apos;s margin box." ilk="function" name="_getMarginBox" signature="_getMarginBox(node,computedStyle)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable citdl="Object" ilk="argument" name="computedStyle" />
        </scope>
        <scope ilk="function" name="_getContentBox" returns="DomNode|Boolean|CSS2Properties|Number|CSS2Properties||String||Number" signature="_getContentBox(node,computedStyle)">
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="computedStyle" />
        </scope>
        <scope ilk="function" name="_getBorderBox" signature="_getBorderBox(node,computedStyle)">
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="computedStyle" />
        </scope>
        <scope doc="sets width/height/left/top in the current (native) box-model dimentions. Uses the unit passed in u." ilk="function" name="_setBox" signature="_setBox(node,l,t,w,h,u)">
          <variable citdl="DomNode" doc="DOM Node reference. Id string not supported for performance reasons." ilk="argument" name="node" />
          <variable citdl="Number" doc="optional. left offset from parent." ilk="argument" name="l" />
          <variable citdl="Number" doc="optional. top offset from parent." ilk="argument" name="t" />
          <variable citdl="Number" doc="optional. width in current box model." ilk="argument" name="w" />
          <variable citdl="Number" doc="optional. width in current box model." ilk="argument" name="h" />
          <variable citdl="String" doc="optional. unit measure to use for other measures. Defaults to &amp;amp;quot;px&amp;amp;quot;." ilk="argument" name="u" />
        </scope>
        <scope doc="True if the node is BUTTON or INPUT.type=&amp;amp;quot;button&amp;amp;quot;." ilk="function" name="_isButtonTag" signature="_isButtonTag(node)">
          <variable citdl="DomNode" ilk="argument" name="node" />
        </scope>
        <scope ilk="function" name="_usesBorderBox" returns="DomNode|Boolean|CSS2Properties|Number|CSS2Properties||String||Number|boolean" signature="_usesBorderBox(node)">
          <variable citdl="DomNode" ilk="argument" name="node" />
        </scope>
        <scope doc="Sets the size of the node&apos;s contents, irrespective of margins, padding, or borders." ilk="function" name="_setContentSize" signature="_setContentSize(node,widthPx,heightPx,computedStyle)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable citdl="Number" ilk="argument" name="widthPx" />
          <variable citdl="Number" ilk="argument" name="heightPx" />
          <variable citdl="Object" ilk="argument" name="computedStyle" />
        </scope>
        <scope doc="sets the size of the node&apos;s margin box and placement (left/top), irrespective of box model. Think of it as a passthrough to dojo._setBox that handles box-model vagaries for you." ilk="function" name="_setMarginBox" signature="_setMarginBox(node,leftPx,topPx,widthPx,heightPx,computedStyle)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable citdl="Number" ilk="argument" name="leftPx" />
          <variable citdl="Number" ilk="argument" name="topPx" />
          <variable citdl="Number" ilk="argument" name="widthPx" />
          <variable citdl="Number" ilk="argument" name="heightPx" />
          <variable citdl="Object" ilk="argument" name="computedStyle" />
        </scope>
        <scope doc="Getter/setter for the margin-box of node." ilk="function" name="marginBox" returns="Object" signature="marginBox(node,box)">
          <variable citdl="DomNode|String" doc="id or reference to DOM Node to get/set box for" ilk="argument" name="node" />
          <variable citdl="Object" doc="If passed, denotes that dojo.marginBox() should update/set the margin box for node. Box is an object in the above format. All properties are optional if passed." ilk="argument" name="box" />
        </scope>
        <scope doc="Getter/setter for the content-box of node." ilk="function" name="contentBox" returns="Object" signature="contentBox(node,box)">
          <variable citdl="DomNode|String" doc="id or reference to DOM Node to get/set box for" ilk="argument" name="node" />
          <variable citdl="Object" doc="If passed, denotes that dojo.contentBox() should update/set the content box for node. Box is an object in the above format. All properties are optional if passed." ilk="argument" name="box" />
        </scope>
        <scope ilk="function" name="_docScroll" />
        <scope ilk="function" name="_isBodyLtr" returns="DomNode|Boolean|CSS2Properties|Number|CSS2Properties||String||Number|boolean|Object|integer" />
        <scope ilk="function" name="_getIeDocumentElementOffset" returns="DomNode|Boolean|CSS2Properties|Number|CSS2Properties||String||Number|boolean|Object|integer" />
        <scope ilk="function" name="_fixIeBiDiScrollLeft" returns="DomNode|Boolean|CSS2Properties|Number|CSS2Properties||String||Number|boolean|Object|integer|Integer" signature="_fixIeBiDiScrollLeft(scrollLeft)">
          <variable citdl="Integer" ilk="argument" name="scrollLeft" />
        </scope>
        <scope ilk="function" name="_abs" returns="DomNode|Boolean|CSS2Properties|Number|CSS2Properties||String||Number|boolean|Object|integer|Integer" signature="_abs(node,includeScroll)">
          <variable citdl="DomNode" ilk="argument" name="node" />
          <variable citdl="Boolean" ilk="argument" name="includeScroll" />
        </scope>
        <scope doc="Returns an object that measures margin box width/height and absolute positioning data from dojo._abs()." ilk="function" name="coords" signature="coords(node,includeScroll)">
          <variable citdl="DomNode|String" ilk="argument" name="node" />
          <variable citdl="Boolean" ilk="argument" name="includeScroll" />
        </scope>
        <scope doc="Returns true if the requested attribute is specified on the given element, and false otherwise." ilk="function" name="hasAttr" returns="Boolean" signature="hasAttr(node,name)">
          <variable citdl="DomNode|String" doc="id or reference to the element to check" ilk="argument" name="node" />
          <variable citdl="String" doc="the name of the attribute" ilk="argument" name="name" />
        </scope>
        <scope doc="Gets or sets an attribute on an HTML element." ilk="function" name="attr" signature="attr(node,name,value)">
          <variable citdl="DomNode|String" doc="id or reference to the element to get or set the attribute on" ilk="argument" name="node" />
          <variable citdl="String|Object" doc="the name of the attribute to get or set." ilk="argument" name="name" />
          <variable citdl="String" doc="The value to set for the attribute" ilk="argument" name="value" />
        </scope>
        <scope doc="Removes an attribute from an HTML element." ilk="function" name="removeAttr" signature="removeAttr(node,name)">
          <variable citdl="DomNode|String" doc="id or reference to the element to remove the attribute from" ilk="argument" name="node" />
          <variable citdl="String" doc="the name of the attribute to remove" ilk="argument" name="name" />
        </scope>
        <scope doc="Create an element, allowing for optional attribute decoration and placement." ilk="function" name="create" returns="DomNode" signature="create(tag,attrs,refNode,pos)">
          <variable citdl="String|DomNode" doc="A string of the element to create (eg: &amp;amp;quot;div&amp;amp;quot;, &amp;amp;quot;a&amp;amp;quot;, &amp;amp;quot;p&amp;amp;quot;, &amp;amp;quot;li&amp;amp;quot;, &amp;amp;quot;script&amp;amp;quot;, &amp;amp;quot;br&amp;amp;quot;), or an existing DOM node to process." ilk="argument" name="tag" />
          <variable citdl="Object" doc="An object-hash of attributes to set on the newly created node. Can be null, if you don&apos;t want to set any attributes/styles. See: `dojo.attr` for a description of available attributes." ilk="argument" name="attrs" />
          <variable citdl="String?|DomNode" doc="Optional reference node. Used by `dojo.place` to place the newly created node somewhere in the dom relative to refNode. Can be a DomNode reference or String ID of a node." ilk="argument" name="refNode" />
          <variable citdl="String" doc="Optional positional reference. Defaults to &amp;amp;quot;last&amp;amp;quot; by way of `dojo.place`, though can be set to &amp;amp;quot;first&amp;amp;quot;,&amp;amp;quot;after&amp;amp;quot;,&amp;amp;quot;before&amp;amp;quot;,&amp;amp;quot;last&amp;amp;quot;, &amp;amp;quot;replace&amp;amp;quot; or &amp;amp;quot;only&amp;amp;quot; to further control the placement of the new node relative to the refNode. &apos;refNode&apos; is required if a &apos;pos&apos; is specified." ilk="argument" name="pos" />
        </scope>
        <scope doc="instantiates an HTML fragment returning the corresponding DOM." ilk="function" name="_toDom" returns="DomNode|Boolean|CSS2Properties|Number|CSS2Properties||String||Number|boolean|Object|integer|Integer|DOMNode" signature="_toDom(frag,doc)">
          <variable citdl="String" doc="the HTML fragment" ilk="argument" name="frag" />
          <variable citdl="DocumentNode" doc="optional document to use when creating DOM nodes, defaults to dojo.doc if not specified." ilk="argument" name="doc" />
        </scope>
        <scope doc="Returns whether or not the specified classes are a portion of the class list currently applied to the node." ilk="function" name="hasClass" returns="Boolean" signature="hasClass(node,classStr)">
          <variable citdl="DomNode|String" doc="String ID or DomNode reference to check the class for." ilk="argument" name="node" />
          <variable citdl="String" doc="A string class name to look for." ilk="argument" name="classStr" />
        </scope>
        <scope doc="Adds the specified classes to the end of the class list on the passed node. Will not re-apply duplicate classes, except in edge cases when adding multiple classes at once." ilk="function" name="addClass" signature="addClass(node,classStr)">
          <variable citdl="DomNode|String" doc="String ID or DomNode reference to add a class string too" ilk="argument" name="node" />
          <variable citdl="String" doc="A String class name to add" ilk="argument" name="classStr" />
        </scope>
        <scope doc="Removes the specified classes from node. No `dojo.hasClass` check is required." ilk="function" name="removeClass" signature="removeClass(node,classStr)">
          <variable citdl="DomNode|String" doc="String ID or DomNode reference to remove the class from.  classString: String class name to remove" ilk="argument" name="node" />
          <variable citdl="String" ilk="argument" name="classStr" />
        </scope>
        <scope doc="Adds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove." ilk="function" name="toggleClass" signature="toggleClass(node,classStr,condition)">
          <variable citdl="DomNode|String" ilk="argument" name="node" />
          <variable citdl="String" ilk="argument" name="classStr" />
          <variable citdl="Boolean" doc="If passed, true means to add the class, false means to remove." ilk="argument" name="condition" />
        </scope>
        <scope doc="Parses a [JSON](http://json.org) string to return a JavaScript object. Throws for invalid JSON strings." ilk="function" name="fromJson" returns="Object" signature="fromJson(json)">
          <variable citdl="String" doc="a string literal of a JSON item, for instance: `&apos;{ &amp;amp;quot;foo&amp;amp;quot;: [ &amp;amp;quot;bar&amp;amp;quot;, 1, { &amp;amp;quot;baz&amp;amp;quot;: &amp;amp;quot;thud&amp;amp;quot; } ] }&apos;`" ilk="argument" name="json" />
        </scope>
        <scope doc="Adds escape sequences for non-visual characters, double quote and backslash and surrounds with double quotes to form a valid string literal." ilk="function" name="_escapeString" signature="_escapeString(str)">
          <variable citdl="String" ilk="argument" name="str" />
        </scope>
        <scope doc="Returns a [JSON](http://json.org) serialization of an object." ilk="function" name="toJson" returns="null|String" signature="toJson(it,prettyPrint,_indentStr)">
          <variable citdl="Object" doc="an object to be serialized. Objects may define their own serialization via a special &amp;amp;quot;__json__&amp;amp;quot; or &amp;amp;quot;json&amp;amp;quot; function property. If a specialized serializer has been defined, it will be used as a fallback." ilk="argument" name="it" />
          <variable citdl="Boolean" doc="if true, we indent objects and arrays to make the output prettier. The variable dojo.toJsonIndentStr is used as the indent string -- to use something other than the default (tab), change that variable before calling dojo.toJson()." ilk="argument" name="prettyPrint" />
          <variable citdl="String" doc="private variable for recursive calls when pretty printing, do not use." ilk="argument" name="_indentStr" />
        </scope>
        <scope doc="Return true if it is a String" ilk="function" name="isString" returns="Boolean" signature="isString(it)">
          <variable citdl="anything" ilk="argument" name="it" />
        </scope>
        <scope doc="Return true if it is an Array" ilk="function" name="isArray" returns="Boolean" signature="isArray(it)">
          <variable citdl="anything" ilk="argument" name="it" />
        </scope>
        <scope doc="Return true if it is a Function" ilk="function" name="isFunction" returns="Boolean" signature="isFunction(it)">
          <variable citdl="anything" ilk="argument" name="it" />
        </scope>
        <scope doc="Returns true if it is a JavaScript object (or an Array, a Function or null)" ilk="function" name="isObject" signature="isObject(it)">
          <variable citdl="anything" ilk="argument" name="it" />
        </scope>
        <scope doc="similar to dojo.isArray() but more permissive" ilk="function" name="isArrayLike" returns="Boolean" signature="isArrayLike(it)">
          <variable citdl="anything" ilk="argument" name="it" />
        </scope>
        <scope doc="Returns true if it is a built-in function or some other kind of oddball that *should* report as a function but doesn&apos;t" ilk="function" name="isAlien" returns="Boolean" signature="isAlien(it)">
          <variable citdl="anything" ilk="argument" name="it" />
        </scope>
        <scope doc="Adds all properties and methods of props to constructor&apos;s prototype, making them available to all instances created with constructor." ilk="function" name="extend" returns="Object" signature="extend(constructor,props)">
          <variable citdl="Object" ilk="argument" name="constructor" />
          <variable citdl="Object" ilk="argument" name="props" />
        </scope>
        <scope ilk="function" name="_hitchArgs" returns="mixed" signature="_hitchArgs(scope,method)">
          <variable ilk="argument" name="scope" />
          <variable citdl="," ilk="argument" name="method" />
        </scope>
        <scope doc="Returns a function that will only ever execute in the a given scope. This allows for easy use of object member functions in callbacks and other places in which the &amp;amp;quot;this&amp;amp;quot; keyword may otherwise not reference the expected scope. Any number of default positional arguments may be passed as parameters beyond &amp;amp;quot;method&amp;amp;quot;. Each of these values will be used to &amp;amp;quot;placehold&amp;amp;quot; (similar to curry) for the hitched function." ilk="function" name="hitch" returns="Function" signature="hitch(scope,method)">
          <variable citdl="Object" doc="The scope to use when method executes. If method is a string, scope is also the object containing method." ilk="argument" name="scope" />
          <variable citdl="Function|String ," doc="A function to be hitched to scope, or the name of the method in scope to be hitched." ilk="argument" name="method" />
        </scope>
        <scope doc="Returns a new object which &amp;amp;quot;looks&amp;amp;quot; to obj for properties which it does not have a value for. Optionally takes a bag of properties to seed the returned object with initially." ilk="function" name="delegate" signature="delegate(obj,props)">
          <variable citdl="The" doc="object to delegate to for properties not found directly on the return object or in props." ilk="argument" name="obj" />
          <variable citdl="an" doc="object containing properties to assign to the returned object" ilk="argument" name="props" />
        </scope>
        <scope doc="Converts an array-like object (i.e. arguments, DOMCollection) to an array. Returns a new Array with the elements of obj." ilk="function" name="_toArray" signature="_toArray(obj,offset,startWith)">
          <variable citdl="Object" doc="the object to &amp;amp;quot;arrayify&amp;amp;quot;. We expect the object to have, at a minimum, a length property which corresponds to integer-indexed properties." ilk="argument" name="obj" />
          <variable citdl="Number" doc="the location in obj to start iterating from. Defaults to 0. Optional." ilk="argument" name="offset" />
          <variable citdl="Array" doc="An array to pack with the properties of obj. If provided, properties in obj are appended at the end of startWith and startWith is the returned array." ilk="argument" name="startWith" />
        </scope>
        <scope doc="similar to hitch() except that the scope object is left to be whatever the execution context eventually becomes." ilk="function" name="partial" returns="Function" signature="partial(method)">
          <variable citdl="Function|String ," ilk="argument" name="method" />
        </scope>
        <scope doc="Clones objects (including DOM nodes) and all children. Warning: do not clone cyclic structures." ilk="function" name="clone" returns="Array|anything|Node|Date|Object" signature="clone(o)">
          <variable citdl="anything" ilk="argument" name="o" />
        </scope>
        <scope doc="Trims whitespace from both sides of the string" ilk="function" name="trim" returns="String" signature="trim(str)">
          <variable citdl="String" doc="String to be trimmed" ilk="argument" name="str" />
        </scope>
        <scope ilk="function" name="_delegate" returns="Boolean|Object|mixed|Function" />
        <scope doc="Returns nodes which match the given CSS3 selector, searching the entire document by default but optionally taking a node to scope the search by. Returns an instance of dojo.NodeList." ilk="function" name="query" returns="String|DomNode|Boolean|if root&apos;s a doc, we just return directly|dojo.NodeList" signature="query(query,root)">
          <variable citdl="String" doc="The CSS3 expression to match against. For details on the syntax of CSS3 selectors, see &amp;amp;lt;http://www.w3.org/TR/css3-selectors/#selectors&amp;amp;gt;" ilk="argument" name="query" />
          <variable citdl="String|DOMNode" doc="A DOMNode (or node id) to scope the search from. Optional." ilk="argument" name="root" />
        </scope>
        <scope ilk="function" name="_filterQueryResult" signature="_filterQueryResult(nodeList,simpleFilter)">
          <variable ilk="argument" name="nodeList" />
          <variable ilk="argument" name="simpleFilter" />
        </scope>
        <scope doc="changes the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe). The varibles dojo.global and dojo.doc are modified as a result of calling this function and the result of `dojo.body()` likewise differs." ilk="function" name="setContext" signature="setContext(globalObject,globalDocument)">
          <variable citdl="Object" ilk="argument" name="globalObject" />
          <variable citdl="DocumentElement" ilk="argument" name="globalDocument" />
        </scope>
        <scope doc="Invoke callback with globalObject as dojo.global and globalObject.document as dojo.doc." ilk="function" name="withGlobal" signature="withGlobal(globalObject,callback,thisObject,cbArguments)">
          <variable citdl="Object" ilk="argument" name="globalObject" />
          <variable citdl="Function" ilk="argument" name="callback" />
          <variable citdl="Object" ilk="argument" name="thisObject" />
          <variable citdl="Array" ilk="argument" name="cbArguments" />
        </scope>
        <scope doc="Invoke callback with documentObject as dojo.doc." ilk="function" name="withDoc" signature="withDoc(documentObject,callback,thisObject,cbArguments)">
          <variable citdl="DocumentElement" ilk="argument" name="documentObject" />
          <variable citdl="Function" ilk="argument" name="callback" />
          <variable citdl="Object" ilk="argument" name="thisObject" />
          <variable citdl="Array" ilk="argument" name="cbArguments" />
        </scope>
        <scope attributes="private" doc="In addition to the properties listed for the dojo._IoArgs type, the following properties are allowed for dojo.xhr* methods." ilk="function" name="__XhrArgs">
          <variable citdl="String?" doc="Acceptable values are: text (default), json, json-comment-optional, json-comment-filtered, javascript, xml" name="handleAs" />
          <variable citdl="Boolean?" doc="false is default. Indicates whether the request should be a synchronous (blocking) request." name="sync" />
          <variable citdl="Object?" doc="Additional HTTP headers to send in the request." name="headers" />
        </scope>
        <variable attributes="private" citdl="Object" doc="" name="_contentHandlers">
          <scope doc="" ilk="function" name="json-comment-optional" signature="json-comment-optional(xhr)">
            <variable ilk="argument" name="xhr" />
          </scope>
          <scope doc="" ilk="function" name="text" signature="text(xhr)">
            <variable ilk="argument" name="xhr" />
          </scope>
          <scope doc="" ilk="function" name="json" signature="json(xhr)">
            <variable ilk="argument" name="xhr" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="json-comment-filtered" returns="Object|String" signature="json-comment-filtered(xhr)">
            <variable ilk="argument" name="xhr" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="javascript" returns="Object|String" signature="javascript(xhr)">
            <variable ilk="argument" name="xhr" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="xml" returns="DOMDocument" signature="xml(xhr)">
            <variable ilk="argument" name="xhr" />
          </scope>
        </variable>
        <scope doc="dojo.formToObject returns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values." ilk="function" name="formToObject" returns="Object" signature="formToObject(formNode)">
          <variable citdl="DOMNode||String" ilk="argument" name="formNode" />
        </scope>
        <scope doc="takes a name/value mapping object and returns a string representing a URL-encoded version of that object." ilk="function" name="objectToQuery" returns="Object|String" signature="objectToQuery(map)">
          <variable citdl="Object" ilk="argument" name="map" />
        </scope>
        <scope doc="Returns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize" ilk="function" name="formToQuery" returns="String" signature="formToQuery(formNode)">
          <variable citdl="DOMNode||String" ilk="argument" name="formNode" />
        </scope>
        <scope doc="return a serialized JSON string from a form node or string ID identifying the form to serialize" ilk="function" name="formToJson" returns="String" signature="formToJson(formNode,prettyPrint)">
          <variable citdl="DOMNode||String" ilk="argument" name="formNode" />
          <variable citdl="Boolean" ilk="argument" name="prettyPrint" />
        </scope>
        <scope doc="returns an object representing a de-serialized query section of a URL. Query keys with multiple values are returned in an array." ilk="function" name="queryToObject" returns="Object|String" signature="queryToObject(str)">
          <variable citdl="String" ilk="argument" name="str" />
        </scope>
        <scope attributes="private" doc="" ilk="function" name="__IoArgs">
          <variable citdl="String" doc="URL to server endpoint." name="url" />
          <variable citdl="Object?" doc="Contains properties with string values. These properties will be serialized as name1=value2 and passed in the request." name="content" />
          <variable citdl="Integer?" doc="Milliseconds to wait for the response. If this time passes, the then error callbacks are called." name="timeout" />
          <variable citdl="DOMNode?" doc="DOM node for a form. Used to extract the form values and send to the server." name="form" />
          <variable citdl="Boolean?" doc="Default is false. If true, then a &amp;amp;quot;dojo.preventCache&amp;amp;quot; parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests." name="preventCache" />
          <variable citdl="String?" doc="Acceptable values depend on the type of IO transport (see specific IO calls for more information)." name="handleAs" />
          <variable citdl="Function?" doc="function(response, ioArgs){} response is of type Object, ioArgs is of type dojo.__IoCallbackArgs. This function will be called on a successful HTTP response code." name="load" />
          <variable citdl="Function?" doc="function(response, ioArgs){} response is of type Object, ioArgs is of type dojo.__IoCallbackArgs. This function will be called when the request fails due to a network or server error, the url is invalid, etc. It will also be called if the load or handle callback throws an exception, unless djConfig.debugAtAllCosts is true. This allows deployed applications to continue to run even when a logic error happens in the callback, while making it easier to troubleshoot while in debug mode." name="error" />
          <variable citdl="Function?" doc="function(response, ioArgs){} response is of type Object, ioArgs is of type dojo.__IoCallbackArgs. This function will be called at the end of every request, whether or not an error occurs." name="handle" />
        </scope>
        <scope attributes="private" doc="" ilk="function" name="__IoCallbackArgs" signature="__IoCallbackArgs(args,xhr,url,query,handleAs,id,canDelete,json)">
          <variable citdl="Object" doc="the original object argument to the IO call." ilk="argument" name="args" />
          <variable citdl="XMLHttpRequest" doc="For XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request." ilk="argument" name="xhr" />
          <variable citdl="String" doc="The final URL used for the call. Many times it will be different than the original args.url value." ilk="argument" name="url" />
          <variable citdl="String" doc="For non-GET requests, the name1=value1&amp;amp;amp;name2=value2 parameters sent up in the request." ilk="argument" name="query" />
          <variable citdl="String" doc="The final indicator on how the response will be handled." ilk="argument" name="handleAs" />
          <variable citdl="String" doc="For dojo.io.script calls only, the internal script ID used for the request." ilk="argument" name="id" />
          <variable citdl="Boolean" doc="For dojo.io.script calls only, indicates whether the script tag that represents the request can be deleted after callbacks have been called. Used internally to know when cleanup can happen on JSONP-type requests." ilk="argument" name="canDelete" />
          <variable citdl="Object" doc="For dojo.io.script calls only: holds the JSON response for JSONP-type requests. Used internally to hold on to the JSON responses. You should not need to access it directly -- the same object should be passed to the success callbacks directly." ilk="argument" name="json" />
          <variable citdl="Object" doc="the original object argument to the IO call." name="args" />
          <variable citdl="XMLHttpRequest" doc="For XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request." name="xhr" />
          <variable citdl="String" doc="The final URL used for the call. Many times it will be different than the original args.url value." name="url" />
          <variable citdl="String" doc="For non-GET requests, the name1=value1&amp;amp;amp;name2=value2 parameters sent up in the request." name="query" />
          <variable citdl="String" doc="The final indicator on how the response will be handled." name="handleAs" />
          <variable citdl="String" doc="For dojo.io.script calls only, the internal script ID used for the request." name="id" />
          <variable citdl="Boolean" doc="For dojo.io.script calls only, indicates whether the script tag that represents the request can be deleted after callbacks have been called. Used internally to know when cleanup can happen on JSONP-type requests." name="canDelete" />
          <variable citdl="Object" doc="For dojo.io.script calls only: holds the JSON response for JSONP-type requests. Used internally to hold on to the JSON responses. You should not need to access it directly -- the same object should be passed to the success callbacks directly." name="json" />
        </scope>
        <scope doc="sets up the Deferred and ioArgs property on the Deferred so it can be used in an io call." ilk="function" name="_ioSetArgs" signature="_ioSetArgs(args,canceller,okHandler,errHandler)">
          <variable citdl="dojo.__IoArgs" doc="The args object passed into the public io call. Recognized properties on the args object are:" ilk="argument" name="args" />
          <variable citdl="Function" doc="The canceller function used for the Deferred object. The function will receive one argument, the Deferred object that is related to the canceller." ilk="argument" name="canceller" />
          <variable citdl="Function" doc="The first OK callback to be registered with Deferred. It has the opportunity to transform the OK response. It will receive one argument -- the Deferred object returned from this function." ilk="argument" name="okHandler" />
          <variable citdl="Function" doc="The first error callback to be registered with Deferred. It has the opportunity to do cleanup on an error. It will receive two arguments: error (the Error object) and dfd, the Deferred object returned from this function." ilk="argument" name="errHandler" />
        </scope>
        <scope doc="Cancels all pending IO requests, regardless of IO type (xhr, script, iframe)." ilk="function" name="_ioCancelAll" />
        <scope doc="watches the io request represented by dfd to see if it completes." ilk="function" name="_ioWatch" signature="_ioWatch(dfd,validCheck,ioCheck,resHandle)">
          <variable citdl="Deferred" doc="The Deferred object to watch." ilk="argument" name="dfd" />
          <variable citdl="Function" doc="used to check if the IO request is still valid. Gets the dfd object as its only argument." ilk="argument" name="validCheck" />
          <variable citdl="Function" doc="used to check if basic IO call worked. Gets the dfd object as its only argument." ilk="argument" name="ioCheck" />
          <variable citdl="Function" doc="used to process response. Gets the dfd object as its only argument." ilk="argument" name="resHandle" />
        </scope>
        <scope doc="Adds query params discovered by the io deferred construction to the URL. Only use this for operations which are fundamentally GET-type operations." ilk="function" name="_ioAddQueryToUrl" signature="_ioAddQueryToUrl(ioArgs)">
          <variable citdl="dojo.__IoCallbackArgs" ilk="argument" name="ioArgs" />
        </scope>
        <scope doc="Sends an HTTP request with the given method." ilk="function" name="xhr" returns="Object|String|DOMDocument|boolean|dojo.Deferred" signature="xhr(method,args,hasBody)">
          <variable citdl="String" doc="HTTP method to be used, such as GET, POST, PUT, DELETE. Should be uppercase." ilk="argument" name="method" />
          <variable citdl="dojo.__XhrArgs" ilk="argument" name="args" />
          <variable citdl="Boolean" ilk="argument" name="hasBody" />
        </scope>
        <scope doc="Sends an HTTP GET request to the server." ilk="function" name="xhrGet" returns="dojo.Deferred" signature="xhrGet(args)">
          <variable citdl="dojo.__XhrArgs" ilk="argument" name="args" />
        </scope>
        <scope doc="Sends an HTTP POST request to the server. In addtion to the properties listed for the dojo.__XhrArgs type, the following property is allowed: postData: String. Send raw data in the body of the POST request." ilk="function" name="xhrPost" returns="dojo.Deferred" signature="xhrPost(args)">
          <variable citdl="dojo.__XhrArgs" ilk="argument" name="args" />
        </scope>
        <scope doc="Sends an HTTP PUT request to the server. In addtion to the properties listed for the dojo.__XhrArgs type, the following property is allowed: putData: String. Send raw data in the body of the PUT request." ilk="function" name="xhrPut" returns="dojo.Deferred" signature="xhrPut(args)">
          <variable citdl="dojo.__XhrArgs" ilk="argument" name="args" />
        </scope>
        <scope doc="Sends an HTTP DELETE request to the server." ilk="function" name="xhrDelete" returns="dojo.Deferred" signature="xhrDelete(args)">
          <variable citdl="dojo.__XhrArgs" ilk="argument" name="args" />
        </scope>
        <variable attributes="private" citdl="Object" doc="" name="_base" />
        <variable attributes="private" citdl="Object" doc="" name="_firebug" />
        <variable citdl="Object" doc="Browser history management resources" name="back">
          <scope doc="" name="getHash" />
          <scope doc="" name="setHash" />
          <scope doc="" name="goBack" />
          <scope doc="" name="goForward" />
          <scope attributes="private" doc="Initializes the undo stack. This must be called from a &amp;amp;lt;script&amp;amp;gt; block that lives inside the &amp;amp;lt;body&amp;amp;gt; tag to prevent bugs on IE." ilk="function" name="init" returns="prevent reinit" />
          <scope doc="Sets the state object and back callback for the very first page that is loaded." ilk="function" name="setInitialState" signature="setInitialState(args)">
            <variable citdl="Object" doc="See the addToHistory() function for the list of valid args properties." ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="adds a state object (args) to the history list." ilk="function" name="addToHistory" returns="Object|null|String|prevent reinit" signature="addToHistory(args)">
            <variable citdl="dojo.__backArgs" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="private method. Do not call this directly." ilk="function" name="_iframeLoaded" signature="_iframeLoaded(evt,ifrLoc)">
            <variable ilk="argument" name="evt" />
            <variable ilk="argument" name="ifrLoc" />
          </scope>
        </variable>
        <scope ilk="function" name="__backArgs" returns="Object|null|String|prevent reinit" signature="__backArgs(kwArgs)">
          <variable ilk="argument" name="kwArgs" />
        </scope>
        <scope doc="Utility for unobtrusive/progressive event binding, DOM traversal, and manipulation." ilk="function" name="behavior">
          <scope name="initialized" />
          <variable attributes="private" doc="" name="_behaviors" />
          <variable doc="Add the specified behavior to the list of behaviors, ignoring existing matches." ilk="function" name="add" signature="add(behaviorObj)">
            <variable citdl="Object" ilk="argument" name="behaviorObj" />
          </variable>
          <variable doc="Applies all currently registered behaviors to the document." ilk="function" name="apply" />
        </scope>
        <variable citdl="Object" doc="transformation of relevant pieces of the Unicode.org Common Locale Data Repository (see http://unicode.org/cldr) to JSON from the original XML with associated utility classes" name="cldr">
          <variable citdl="Object" doc="" name="supplemental">
            <scope attributes="private" doc="Returns a zero-based index for first day of the week" ilk="function" name="getFirstDayOfWeek" returns="Number" signature="getFirstDayOfWeek(locale)">
              <variable citdl="String" ilk="argument" name="locale" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_region" signature="_region(locale)">
              <variable citdl="String" ilk="argument" name="locale" />
            </scope>
            <scope attributes="private" doc="Returns a hash containing the start and end days of the weekend" ilk="function" name="getWeekend" returns="Number|Object {start,end}" signature="getWeekend(locale)">
              <variable citdl="String" ilk="argument" name="locale" />
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="Color utilities" name="colors">
          <scope doc="creates a greyscale color with an optional alpha" ilk="function" name="makeGrey" signature="makeGrey(g,a)">
            <variable citdl="Number" ilk="argument" name="g" />
            <variable citdl="Number" ilk="argument" name="a" />
          </scope>
        </variable>
        <scope ilk="function" name="__cookieProps" />
        <scope doc="Get or set a cookie." ilk="function" name="cookie" returns="String or undefined" signature="cookie(name,value,props)">
          <variable citdl="String" doc="Name of the cookie" ilk="argument" name="name" />
          <variable citdl="String" doc="Value for the cookie" ilk="argument" name="value" />
          <variable citdl="dojo.__cookieProps" doc="Properties for the cookie" ilk="argument" name="props" />
        </scope>
        <variable citdl="Object" doc="localized formatting and parsing routines for currencies" name="currency">
          <scope attributes="private" doc="" ilk="function" name="_mixInDefaults" signature="_mixInDefaults(options)">
            <variable ilk="argument" name="options" />
          </scope>
          <scope doc="Format a Number as a currency, using locale-specific settings" ilk="function" name="format" signature="format(value,options)">
            <variable citdl="Number" doc="the number to be formatted." ilk="argument" name="value" />
            <variable citdl="dojo.number.__FormatOptions" ilk="argument" name="options" />
          </scope>
          <scope attributes="private" doc="Builds the regular needed to parse a currency value" ilk="function" name="regexp" returns="String" signature="regexp(options)">
            <variable citdl="dojo.number.__RegexpOptions" ilk="argument" name="options" />
          </scope>
          <scope doc="Convert a properly formatted currency string to a primitive Number, using locale-specific settings." ilk="function" name="parse" signature="parse(expression,options)">
            <variable citdl="String" doc="A string representation of a Number" ilk="argument" name="expression" />
            <variable citdl="dojo.currency.__ParseOptions" ilk="argument" name="options" />
          </scope>
        </variable>
        <variable citdl="Object" doc="A uniform data access layer" name="data">
          <scope doc="" ilk="function" name="ItemFileWriteStore" signature="ItemFileWriteStore(keywordParameters)">
            <variable citdl="object" ilk="argument" name="keywordParameters" />
            <variable doc="" name="referenceIntegrity" />
            <scope attributes="private" doc="" ilk="function" name="_assert" signature="_assert(condition)">
              <variable citdl="boolean" ilk="argument" name="condition" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_getIdentifierAttribute" />
            <scope attributes="private" doc="See dojo.data.api.Write.newItem()" ilk="function" name="newItem" returns="item" signature="newItem(keywordArgs,parentInfo)">
              <variable citdl="Object" ilk="argument" name="keywordArgs" />
              <variable citdl="Object" ilk="argument" name="parentInfo" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_removeArrayElement" signature="_removeArrayElement(array,element)">
              <variable citdl="Array" ilk="argument" name="array" />
              <variable citdl="anything" ilk="argument" name="element" />
            </scope>
            <scope doc="See dojo.data.api.Write.deleteItem()" ilk="function" name="deleteItem" signature="deleteItem(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Write.set()" ilk="function" name="setValue" returns="boolean" signature="setValue(item,attribute,value)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="almost anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Write.setValues()" ilk="function" name="setValues" returns="boolean" signature="setValues(item,attribute,values)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="array" ilk="argument" name="values" />
            </scope>
            <scope doc="See dojo.data.api.Write.unsetAttribute()" ilk="function" name="unsetAttribute" signature="unsetAttribute(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_setValueOrValues" returns="boolean" signature="_setValueOrValues(item,attribute,newValueOrValues,callOnSet)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="anything" ilk="argument" name="newValueOrValues" />
              <variable citdl="boolean" ilk="argument" name="callOnSet" />
            </scope>
            <scope attributes="private" doc="Method to add an reference map entry for an item and attribute." ilk="function" name="_addReferenceToMap" signature="_addReferenceToMap(refItem,parentItem,attribute)">
              <variable citdl="item" doc="The item that is referenced." ilk="argument" name="refItem" />
              <variable citdl="item" doc="The item that holds the new reference to refItem." ilk="argument" name="parentItem" />
              <variable citdl="string" doc="The attribute on parentItem that contains the new reference." ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="Method to remove an reference map entry for an item and attribute." ilk="function" name="_removeReferenceFromMap" signature="_removeReferenceFromMap(refItem,parentItem,attribute)">
              <variable citdl="item" doc="The item that is referenced." ilk="argument" name="refItem" />
              <variable citdl="item" doc="The item holding a reference to refItem." ilk="argument" name="parentItem" />
              <variable citdl="strin" doc="The attribute on parentItem that contains the reference." ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="Function to dump the reverse reference map of all items in the store for debug purposes." ilk="function" name="_dumpReferenceMap" />
            <scope attributes="private" doc="" ilk="function" name="_getValueOrValues" signature="_getValueOrValues(item,attribute)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_flatten" signature="_flatten(value)">
              <variable citdl="anything" ilk="argument" name="value" />
            </scope>
            <scope attributes="private" doc="Generate a string that can be saved to a file. The result should look similar to: http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json" ilk="function" name="_getNewFileContentString" />
            <scope attributes="private" doc="Function to determine if an array or object has no properties or values." ilk="function" name="_isEmpty" returns="boolean" signature="_isEmpty(something)">
              <variable citdl="The" doc="array or object to examine." ilk="argument" name="something" />
            </scope>
            <scope doc="See dojo.data.api.Write.save()" ilk="function" name="save" signature="save(keywordArgs)">
              <variable citdl="object" ilk="argument" name="keywordArgs" />
            </scope>
            <scope attributes="private" doc="See dojo.data.api.Write.revert()" ilk="function" name="revert" returns="boolean" />
            <scope attributes="private" doc="See dojo.data.api.Write.isDirty()" ilk="function" name="isDirty" returns="boolean" signature="isDirty(item)">
              <variable citdl="item" ilk="argument" name="item" />
            </scope>
            <scope doc="See dojo.data.api.Notification.onSet()  No need to do anything. This method is here just so that the client code can connect observers to it." ilk="function" name="onSet" signature="onSet(item,attribute,oldValue,newValue)">
              <variable citdl="item" ilk="argument" name="item" />
              <variable citdl="attribute-name-string" ilk="argument" name="attribute" />
              <variable citdl="object | array" ilk="argument" name="oldValue" />
              <variable citdl="object | array" ilk="argument" name="newValue" />
            </scope>
            <scope doc="See dojo.data.api.Notification.onNew()  No need to do anything. This method is here just so that the client code can connect observers to it." ilk="function" name="onNew" signature="onNew(newItem,parentInfo)">
              <variable citdl="item" ilk="argument" name="newItem" />
              <variable citdl="object" ilk="argument" name="parentInfo" />
            </scope>
            <scope doc="See dojo.data.api.Notification.onDelete()  No need to do anything. This method is here just so that the client code can connect observers to it." ilk="function" name="onDelete" signature="onDelete(deletedItem)">
              <variable citdl="item" ilk="argument" name="deletedItem" />
            </scope>
            <scope attributes="private" doc="Over-ride of base close function of ItemFileReadStore to add in check for store state." ilk="function" name="close" returns="item|boolean" signature="close(request)">
              <variable citdl="object" ilk="argument" name="request" />
            </scope>
            <variable attributes="private" doc="" name="_saveInProgress" />
            <variable attributes="private" doc="" name="_pending" />
          </scope>
          <variable citdl="Object" doc="" name="api">
            <scope doc="This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented." ilk="function" name="Identity">
              <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
              <scope attributes="private" doc="Returns a unique identifier for an item. The return value will be either a string or something that has a toString() method (such as, for example, a dojox.uuid.Uuid object)." ilk="function" name="getIdentity" returns="string" signature="getIdentity(item)">
                <variable citdl="item" doc="The item from the store from which to obtain its identifier." ilk="argument" name="item" />
                <variable name="exceptions" />
              </scope>
              <scope attributes="private" doc="Returns an array of attribute names that are used to generate the identity. For most stores, this is a single attribute, but for some complex stores such as RDB backed stores that use compound (multi-attribute) identifiers it can be more than one. If the identity is not composed of attributes on the item, it will return null. This function is intended to identify the attributes that comprise the identity so that so that during a render of all attributes, the UI can hide the the identity information if it chooses." ilk="function" name="getIdentityAttributes" returns="string" signature="getIdentityAttributes(item)">
                <variable citdl="item" doc="The item from the store from which to obtain the array of public attributes that compose the identifier, if any." ilk="argument" name="item" />
              </scope>
              <scope doc="Given the identity of an item, this method returns the item that has that identity through the onItem callback. Conforming implementations should return null if there is no item with the given identity. Implementations of fetchItemByIdentity() may sometimes return an item from a local cache and may sometimes fetch an item from a remote server," ilk="function" name="fetchItemByIdentity" signature="fetchItemByIdentity(keywordArgs)">
                <variable citdl="object" doc="An anonymous object that defines the item to locate and callbacks to invoke when the item has been located and load has completed. The format of the object is as follows: { identity: string|object, onItem: Function, onError: Function, scope: object } The *identity* parameter. The identity parameter is the identity of the item you wish to locate and load This attribute is required. It should be a string or an object that toString() can be called on.  The *onItem* parameter. Function(item) The onItem parameter is the callback to invoke when the item has been loaded. It takes only one parameter, the item located, or null if none found.  The *onError* parameter. Function(error) The onError parameter is the callback to invoke when the item load encountered an error. It takes only one parameter, the error object  The *scope* parameter. If a scope object is provided, all of the callback functions (onItem, onError, etc) will be invoked in the context of the scope object. In the body of the callback function, the value of the &amp;amp;quot;this&amp;amp;quot; keyword will be the scope object. If no scope object is provided, the callback functions will be called in the context of dojo.global. For example, onItem.call(scope, item, request) vs. onItem.call(dojo.global, item, request)" ilk="argument" name="keywordArgs" />
              </scope>
            </scope>
            <scope doc="This is an abstract API that data provider implementations conform to. This file defines functions signatures and intentionally leaves all the functions unimplemented." ilk="function" name="Notification">
              <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
              <scope doc="This function is called any time an item is modified via setValue, setValues, unsetAttribute, etc." ilk="function" name="onSet" signature="onSet(item,attribute,oldValue,newValue)">
                <variable citdl="item" doc="The item being modified." ilk="argument" name="item" />
                <variable citdl="attribute-name-string" doc="The attribute being changed represented as a string name." ilk="argument" name="attribute" />
                <variable citdl="object | array" doc="The old value of the attribute. In the case of single value calls, such as setValue, unsetAttribute, etc, this value will be generally be an atomic value of some sort (string, int, etc, object). In the case of multi-valued attributes, it will be an array." ilk="argument" name="oldValue" />
                <variable citdl="object | array" doc="The new value of the attribute. In the case of single value calls, such as setValue, this value will be generally be an atomic value of some sort (string, int, etc, object). In the case of multi-valued attributes, it will be an array. In the case of unsetAttribute, the new value will be &apos;undefined&apos;." ilk="argument" name="newValue" />
                <variable name="return_summary" />
              </scope>
              <scope doc="This function is called any time a new item is created in the store. It is called immediately after the store newItem processing has completed." ilk="function" name="onNew" signature="onNew(newItem,parentInfo)">
                <variable citdl="item" doc="The item created." ilk="argument" name="newItem" />
                <variable citdl="object" doc="An optional javascript object that is passed when the item created was placed in the store hierarchy as a value f another item&apos;s attribute, instead of a root level item. Note that if this function is invoked with a value for parentInfo, then onSet is not invoked stating the attribute of the parent item was modified. This is to avoid getting two notification events occurring when a new item with a parent is created. The structure passed in is as follows: { item: someItem,       //The parent item attribute: &amp;amp;quot;attribute-name-string&amp;amp;quot;, //The attribute the new item was assigned to. oldValue: something //Whatever was the previous value for the attribute. //If it is a single-value attribute only, then this value will be a single value. //If it was a multi-valued attribute, then this will be an array of all the values minues the new one. newValue: something //The new value of the attribute. In the case of single value calls, such as setValue, this value will be //generally be an atomic value of some sort (string, int, etc, object). In the case of multi-valued attributes, //it will be an array. }" ilk="argument" name="parentInfo" />
                <variable name="return_summary" />
              </scope>
              <scope doc="This function is called any time an item is deleted from the store. It is called immediately after the store deleteItem processing has completed." ilk="function" name="onDelete" signature="onDelete(deletedItem)">
                <variable citdl="item" doc="The item deleted." ilk="argument" name="deletedItem" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope doc="This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented. For more information on the dojo.data APIs, please visit: http://www.dojotoolkit.org/node/98" ilk="function" name="Read">
              <scope attributes="private" doc="Returns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute)." ilk="function" name="getValue" returns="a literal, an item, null, or undefined (never an array)" signature="getValue(item,attribute,defaultValue)">
                <variable citdl="item" doc="The item to access values on." ilk="argument" name="item" />
                <variable citdl="attribute-name-string" doc="The attribute to access represented as a string." ilk="argument" name="attribute" />
                <variable citdl="value" doc="Optional. A default value to use for the getValue return in the attribute does not exist or has no value." ilk="argument" name="defaultValue" />
                <variable name="exceptions" />
              </scope>
              <scope attributes="private" doc="This getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: []. (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return [].)" ilk="function" name="getValues" returns="an array that may contain literals and items" signature="getValues(item,attribute)">
                <variable citdl="item" doc="The item to access values on." ilk="argument" name="item" />
                <variable citdl="attribute-name-string" doc="The attribute to access represented as a string." ilk="argument" name="attribute" />
                <variable name="exceptions" />
              </scope>
              <scope attributes="private" doc="Returns an array with all the attributes that this item has. This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: []." ilk="function" name="getAttributes" returns="array" signature="getAttributes(item)">
                <variable citdl="item" doc="The item to access attributes on." ilk="argument" name="item" />
                <variable name="exceptions" />
              </scope>
              <scope attributes="private" doc="Returns true if the given *item* has a value for the given *attribute*." ilk="function" name="hasAttribute" returns="boolean" signature="hasAttribute(item,attribute)">
                <variable citdl="item" doc="The item to access attributes on." ilk="argument" name="item" />
                <variable citdl="attribute-name-string" doc="The attribute to access represented as a string." ilk="argument" name="attribute" />
                <variable name="exceptions" />
              </scope>
              <scope attributes="private" doc="Returns true if the given *value* is one of the values that getValues() would return." ilk="function" name="containsValue" returns="boolean" signature="containsValue(item,attribute,value)">
                <variable citdl="item" doc="The item to access values on." ilk="argument" name="item" />
                <variable citdl="attribute-name-string" doc="The attribute to access represented as a string." ilk="argument" name="attribute" />
                <variable citdl="anything" doc="The value to match as a value for the attribute." ilk="argument" name="value" />
                <variable name="exceptions" />
              </scope>
              <scope attributes="private" doc="Returns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item." ilk="function" name="isItem" returns="boolean" signature="isItem(something)">
                <variable citdl="anything" doc="Can be anything." ilk="argument" name="something" />
              </scope>
              <scope attributes="private" doc="Returns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server)." ilk="function" name="isItemLoaded" returns="boolean" signature="isItemLoaded(something)">
                <variable citdl="anything" doc="Can be anything." ilk="argument" name="something" />
              </scope>
              <scope doc="Given an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded." ilk="function" name="loadItem" signature="loadItem(keywordArgs)">
                <variable citdl="object" doc="An anonymous object that defines the item to load and callbacks to invoke when the load has completed. The format of the object is as follows: { item: object, onItem: Function, onError: Function, scope: object } The *item* parameter. The item parameter is an object that represents the item in question that should be contained by the store. This attribute is required.  The *onItem* parameter. Function(item) The onItem parameter is the callback to invoke when the item has been loaded. It takes only one parameter, the fully loaded item.  The *onError* parameter. Function(error) The onError parameter is the callback to invoke when the item load encountered an error. It takes only one parameter, the error object  The *scope* parameter. If a scope object is provided, all of the callback functions (onItem, onError, etc) will be invoked in the context of the scope object. In the body of the callback function, the value of the &amp;amp;quot;this&amp;amp;quot; keyword will be the scope object. If no scope object is provided, the callback functions will be called in the context of dojo.global(). For example, onItem.call(scope, item, request) vs. onItem.call(dojo.global(), item, request)" ilk="argument" name="keywordArgs" />
              </scope>
              <scope attributes="private" doc="Given a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. The format and expectations of stores is that they operate in a generally asynchronous manner, therefore callbacks are always used to return items located by the fetch parameters." ilk="function" name="fetch" returns="an object conforming to the dojo.data.api.Request API" signature="fetch(keywordArgs)">
                <variable citdl="Object" doc="The keywordArgs parameter may either be an instance of conforming to dojo.data.api.Request or may be a simple anonymous object that may contain any of the following: { query: query-object or query-string, queryOptions: object, onBegin: Function, onItem: Function, onComplete: Function, onError: Function, scope: object, start: int count: int sort: array } All implementations should accept keywordArgs objects with any of the 9 standard properties: query, onBegin, onItem, onComplete, onError scope, sort, start, and count. Some implementations may accept additional properties in the keywordArgs object as valid parameters, such as {includeOutliers:true}.  The *query* parameter. The query may be optional in some data store implementations. The dojo.data.api.Read API does not specify the syntax or semantics of the query itself -- each different data store implementation may have its own notion of what a query should look like. However, as of dojo 0.9, 1.0, and 1.1, all the provided datastores in dojo.data and dojox.data support an object structure query, where the object is a set of name/value parameters such as { attrFoo: valueBar, attrFoo1: valueBar1}. Most of the dijit widgets, such as ComboBox assume this to be the case when working with a datastore when they dynamically update the query. Therefore, for maximum compatibility with dijit widgets the recommended query parameter is a key/value object. That does not mean that the the datastore may not take alternative query forms, such as a simple string, a Date, a number, or a mix of such. Ultimately, The dojo.data.api.Read API is agnostic about what the query format. Further note: In general for query objects that accept strings as attribute value matches, the store should also support basic filtering capability, such as * (match any character) and ? (match single character). An example query that is a query object would be like: { attrFoo: &amp;amp;quot;value*&amp;amp;quot;}. Which generally means match all items where they have an attribute named attrFoo, with a value that starts with &apos;value&apos;.  The *queryOptions* parameter The queryOptions parameter is an optional parameter used to specify optiosn that may modify the query in some fashion, such as doing a case insensitive search, or doing a deep search where all items in a hierarchical representation of data are scanned instead of just the root items. It currently defines two options that all datastores should attempt to honor if possible: { ignoreCase: boolean, //Whether or not the query should match case sensitively or not. Default behaviour is false. deep: boolean  //Whether or not a fetch should do a deep search of items and all child //items instead of just root-level items in a datastore. Default is false. }  The *onBegin* parameter. function(size, request); If an onBegin callback function is provided, the callback function will be called just once, before the first onItem callback is called. The onBegin callback function will be passed two arguments, the the total number of items identified and the Request object. If the total number is unknown, then size will be -1. Note that size is not necessarily the size of the collection of items returned from the query, as the request may have specified to return only a subset of the total set of items through the use of the start and count parameters.  The *onItem* parameter. function(item, request); If an onItem callback function is provided, the callback function will be called as each item in the result is received. The callback function will be passed two arguments: the item itself, and the Request object.  The *onComplete* parameter. function(items, request);  If an onComplete callback function is provided, the callback function will be called just once, after the last onItem callback is called. Note that if the onItem callback is not present, then onComplete will be passed an array containing all items which matched the query and the request object. If the onItem callback is present, then onComplete is called as: onComplete(null, request).  The *onError* parameter. function(errorData, request); If an onError callback function is provided, the callback function will be called if there is any sort of error while attempting to execute the query. The onError callback function will be passed two arguments: an Error object and the Request object.  The *scope* parameter. If a scope object is provided, all of the callback functions (onItem, onComplete, onError, etc) will be invoked in the context of the scope object. In the body of the callback function, the value of the &amp;amp;quot;this&amp;amp;quot; keyword will be the scope object. If no scope object is provided, the callback functions will be called in the context of dojo.global(). For example, onItem.call(scope, item, request) vs. onItem.call(dojo.global(), item, request)  The *start* parameter. If a start parameter is specified, this is a indication to the datastore to only start returning items once the start number of items have been located and skipped. When this parameter is paired withh &apos;count&apos;, the store should be able to page across queries with millions of hits by only returning subsets of the hits for each query  The *count* parameter. If a count parameter is specified, this is a indication to the datastore to only return up to that many items. This allows a fetch call that may have millions of item matches to be paired down to something reasonable.  The *sort* parameter. If a sort parameter is specified, this is a indication to the datastore to sort the items in some manner before returning the items. The array is an array of javascript objects that must conform to the following format to be applied to the fetching of items: { attribute: attribute || attribute-name-string, descending: true|false; // Optional. Default is false. } Note that when comparing attributes, if an item contains no value for the attribute (undefined), then it the default ascending sort logic should push it to the bottom of the list. In the descending order case, it such items should appear at the top of the list." ilk="argument" name="keywordArgs" />
                <variable name="return_summary" />
                <variable name="exceptions" />
              </scope>
              <scope doc="The getFeatures() method returns an simple keyword values object that specifies what interface features the datastore implements. A simple CsvStore may be read-only, and the only feature it implements will be the &apos;dojo.data.api.Read&apos; interface, so the getFeatures() method will return an object like this one: {&apos;dojo.data.api.Read&apos;: true}. A more sophisticated datastore might implement a variety of interface features, like &apos;dojo.data.api.Read&apos;, &apos;dojo.data.api.Write&apos;, &apos;dojo.data.api.Identity&apos;, and &apos;dojo.data.api.Attribution&apos;." ilk="function" name="getFeatures" />
              <scope doc="The close() method is intended for instructing the store to &apos;close&apos; out any information associated with a particular request." ilk="function" name="close" signature="close(request)">
                <variable citdl="dojo.data.api.Request || keywordArgs || null" doc="An instance of a request for the store to use to identify what to close out. If no request is passed, then the store should clear all internal caches (if any) and close out all &apos;open&apos; connections. It does not render the store unusable from there on, it merely cleans out any current data and resets the store to initial state." ilk="argument" name="request" />
              </scope>
              <scope doc="Method to inspect the item and return a user-readable &apos;label&apos; for the item that provides a general/adequate description of what the item is." ilk="function" name="getLabel" signature="getLabel(item)">
                <variable citdl="item" doc="The item to return the label for." ilk="argument" name="item" />
                <variable name="return_summary" />
              </scope>
              <scope doc="Method to inspect the item and return an array of what attributes of the item were used to generate its label, if any." ilk="function" name="getLabelAttributes" signature="getLabelAttributes(item)">
                <variable citdl="item" doc="The item to return the list of label attributes for." ilk="argument" name="item" />
                <variable name="return_summary" />
              </scope>
            </scope>
            <scope doc="This class defines out the semantics of what a &apos;Request&apos; object looks like when returned from a fetch() method. In general, a request object is nothing more than the original keywordArgs from fetch with an abort function attached to it to allow users to abort a particular request if they so choose. No other functions are required on a general Request object return. That does not inhibit other store implementations from adding extentions to it, of course.  This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.  For more details on fetch, see dojo.data.api.Read.fetch()." ilk="function" name="Request">
              <scope doc="This function is a hook point for stores to provide as a way for a fetch to be halted mid-processing." ilk="function" name="abort" />
            </scope>
            <scope doc="This is an abstract API that data provider implementations conform to. This file defines function signatures and intentionally leaves all the functionss unimplemented." ilk="function" name="Write">
              <scope doc="See dojo.data.api.Read.getFeatures()" ilk="function" name="getFeatures" />
              <scope attributes="private" doc="Returns a newly created item. Sets the attributes of the new item based on the *keywordArgs* provided. In general, the attribute names in the keywords become the attributes in the new item and as for the attribute values in keywordArgs, they become the values of the attributes in the new item. In addition, for stores that support hierarchical item creation, an optional second parameter is accepted that defines what item is the parent of the new item and what attribute of that item should the new item be assigned to. In general, this will assume that the attribute targetted is multi-valued and a new item is appended onto the list of values for that attribute." ilk="function" name="newItem" returns="item" signature="newItem(keywordArgs,parentInfo)">
                <variable citdl="Object" doc="A javascript object defining the initial content of the item as a set of JavaScript &apos;property name: value&apos; pairs." ilk="argument" name="keywordArgs" />
                <variable citdl="Object" doc="An optional javascript object defining what item is the parent of this item (in a hierarchical store. Not all stores do hierarchical items), and what attribute of that parent to assign the new item to. If this is present, and the attribute specified is a multi-valued attribute, it will append this item into the array of values for that attribute. The structure of the object is as follows: { parent: someItem, attribute: &amp;amp;quot;attribute-name-string&amp;amp;quot; }" ilk="argument" name="parentInfo" />
                <variable name="exceptions" />
              </scope>
              <scope attributes="private" doc="Deletes an item from the store." ilk="function" name="deleteItem" returns="boolean" signature="deleteItem(item)">
                <variable citdl="item" doc="The item to delete." ilk="argument" name="item" />
                <variable name="exceptions" />
              </scope>
              <scope attributes="private" doc="Sets the value of an attribute on an item. Replaces any previous value or values." ilk="function" name="setValue" returns="boolean" signature="setValue(item,attribute,value)">
                <variable citdl="item" doc="The item to modify." ilk="argument" name="item" />
                <variable citdl="string" doc="The attribute of the item to change represented as a string name." ilk="argument" name="attribute" />
                <variable citdl="almost anything" doc="The value to assign to the item." ilk="argument" name="value" />
                <variable name="exceptions" />
              </scope>
              <scope attributes="private" doc="Adds each value in the *values* array as a value of the given attribute on the given item. Replaces any previous value or values. Calling store.setValues(x, y, []) (with *values* as an empty array) has the same effect as calling store.unsetAttribute(x, y)." ilk="function" name="setValues" returns="boolean" signature="setValues(item,attribute,values)">
                <variable citdl="item" doc="The item to modify." ilk="argument" name="item" />
                <variable citdl="string" doc="The attribute of the item to change represented as a string name." ilk="argument" name="attribute" />
                <variable citdl="array" doc="An array of values to assign to the attribute.." ilk="argument" name="values" />
                <variable name="exceptions" />
              </scope>
              <scope attributes="private" doc="Deletes all the values of an attribute on an item." ilk="function" name="unsetAttribute" returns="boolean" signature="unsetAttribute(item,attribute)">
                <variable citdl="item" doc="The item to modify." ilk="argument" name="item" />
                <variable citdl="string" doc="The attribute of the item to unset represented as a string." ilk="argument" name="attribute" />
                <variable name="exceptions" />
              </scope>
              <scope doc="Saves to the server all the changes that have been made locally. The save operation may take some time and is generally performed in an asynchronous fashion. The outcome of the save action is is passed into the set of supported callbacks for the save." ilk="function" name="save" signature="save(keywordArgs)">
                <variable citdl="object" doc="{ onComplete: function onError: function scope: object }  The *onComplete* parameter. function();  If an onComplete callback function is provided, the callback function will be called just once, after the save has completed. No parameters are generally passed to the onComplete.  The *onError* parameter. function(errorData);  If an onError callback function is provided, the callback function will be called if there is any sort of error while attempting to execute the save. The onError function will be based one parameter, the error.  The *scope* parameter. If a scope object is provided, all of the callback function ( onComplete, onError, etc) will be invoked in the context of the scope object. In the body of the callback function, the value of the &amp;amp;quot;this&amp;amp;quot; keyword will be the scope object. If no scope object is provided, the callback functions will be called in the context of dojo.global. For example, onComplete.call(scope) vs. onComplete.call(dojo.global)" ilk="argument" name="keywordArgs" />
                <variable name="return_summary" />
              </scope>
              <scope attributes="private" doc="Discards any unsaved changes." ilk="function" name="revert" returns="boolean" />
              <scope attributes="private" doc="Given an item, isDirty() returns true if the item has been modified since the last save(). If isDirty() is called with no *item* argument, then this function returns true if any item has been modified since the last save()." ilk="function" name="isDirty" returns="boolean" signature="isDirty(item)">
                <variable citdl="item" doc="The item to check." ilk="argument" name="item" />
                <variable name="exceptions" />
              </scope>
            </scope>
          </variable>
          <variable citdl="Object" doc="" name="util">
            <variable citdl="Object" doc="" name="filter">
              <scope attributes="private" doc="Helper function to convert a simple pattern to a regular expression for matching." ilk="function" name="patternToRegExp" returns="RegExp" signature="patternToRegExp(pattern,ignoreCase)">
                <variable citdl="String" doc="string A simple matching pattern to convert that follows basic rules: * Means match anything, so ca* means match anything starting with ca ? Means match single character. So, b?b will match to bob and bab, and so on. \ is an escape character. So for example, \* means do not treat * as a match, but literal character *. To use a \ as a character in the string, it must be escaped. So in the pattern it should be represented by \\ to be treated as an ordinary \ character instead of an escape." ilk="argument" name="pattern" />
                <variable citdl="boolean" doc="An optional flag to indicate if the pattern matching should be treated as case-sensitive or not when comparing By default, it is assumed case sensitive." ilk="argument" name="ignoreCase" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="simpleFetch">
              <scope attributes="private" doc="The simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development. The simpleFetch mixin should work well for any datastore that can respond to a _fetchItems() call by returning an array of all the found items that matched the query. The simpleFetch mixin is not designed to work for datastores that respond to a fetch() call by incrementally loading items, or sequentially loading partial batches of the result set. For datastores that mixin simpleFetch, simpleFetch implements a fetch method that automatically handles eight of the fetch() arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope The class mixing in simpleFetch should not implement fetch(), but should instead implement a _fetchItems() method. The _fetchItems() method takes three arguments, the keywordArgs object that was passed to fetch(), a callback function to be called when the result array is available, and an error callback to be called if something goes wrong. The _fetchItems() method should ignore any keywordArgs parameters for start, count, onBegin, onItem, onComplete, onError, sort, and scope. The _fetchItems() method needs to correctly handle any other keywordArgs parameters, including the query parameter and any optional parameters (such as includeChildren). The _fetchItems() method should create an array of result items and pass it to the fetchHandler along with the original request object -- or, the _fetchItems() method may, if it wants to, create an new request object with other specifics about the request that are specific to the datastore and pass that as the request object to the handler.  For more information on this specific function, see dojo.data.api.Read.fetch()" ilk="function" name="fetch" returns="Object" signature="fetch(request)">
                <variable citdl="Object" ilk="argument" name="request" />
              </scope>
            </variable>
            <variable citdl="Object" doc="" name="sorter">
              <scope attributes="private" doc="Basic comparision function that compares if an item is greater or less than another item" ilk="function" name="basicComparator" returns="int {-1,0,1}" signature="basicComparator(a,b)">
                <variable citdl="anything" ilk="argument" name="a" />
                <variable citdl="anything" ilk="argument" name="b" />
              </scope>
              <scope attributes="private" doc="Helper function to generate the sorting function based off the list of sort attributes." ilk="function" name="createSortFunction" returns="int" signature="createSortFunction(sortSpec,store)">
                <variable citdl="attributes array" doc="array A JS object that array that defines out what attribute names to sort on and whether it should be descenting or asending. The objects should be formatted as follows: { attribute: &amp;amp;quot;attributeName-string&amp;amp;quot; || attribute, descending: true|false; // Default is false. }" ilk="argument" name="sortSpec" />
                <variable citdl="dojo.data.core.Read" doc="object The datastore object to look up item values from." ilk="argument" name="store" />
              </scope>
            </variable>
          </variable>
        </variable>
        <variable citdl="Object" doc="Date manipulation utilities" name="date">
          <variable citdl="Object" doc="" name="stamp">
            <scope attributes="private" doc="Returns a Date object given a string formatted according to a subset of the ISO-8601 standard." ilk="function" name="fromISOString" returns="Date or null" signature="fromISOString(formattedString,defaultTime)">
              <variable citdl="String" doc="A string such as 2005-06-30T08:05:00-07:00 or 2005-06-30 or T08:05:00" ilk="argument" name="formattedString" />
              <variable citdl="Number" doc="Used for defaults for fields omitted in the formattedString. Uses 1970-01-01T00:00:00.0Z by default." ilk="argument" name="defaultTime" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="__Options">
              <variable citdl="String" doc="&amp;amp;quot;date&amp;amp;quot; or &amp;amp;quot;time&amp;amp;quot; for partial formatting of the Date object. Both date and time will be formatted by default." name="selector" />
              <variable citdl="Boolean" doc="if true, UTC/GMT is used for a timezone" name="zulu" />
              <variable citdl="Boolean" doc="if true, output milliseconds" name="milliseconds" />
            </scope>
            <scope attributes="private" doc="Format a Date object as a string according a subset of the ISO-8601 standard" ilk="function" name="toISOString" returns="String" signature="toISOString(dateObject,options)">
              <variable citdl="Date" doc="A Date object" ilk="argument" name="dateObject" />
              <variable citdl="dojo.date.stamp.__Options" ilk="argument" name="options" />
            </scope>
          </variable>
          <scope attributes="private" doc="Returns the number of days in the month used by dateObject" ilk="function" name="getDaysInMonth" returns="Number" signature="getDaysInMonth(dateObject)">
            <variable citdl="Date" ilk="argument" name="dateObject" />
          </scope>
          <scope attributes="private" doc="Determines if the year of the dateObject is a leap year" ilk="function" name="isLeapYear" returns="Boolean" signature="isLeapYear(dateObject)">
            <variable citdl="Date" ilk="argument" name="dateObject" />
          </scope>
          <scope attributes="private" doc="Get the user&apos;s time zone as provided by the browser" ilk="function" name="getTimezoneName" returns="The result -- return empty string if nothing found|String" signature="getTimezoneName(dateObject)">
            <variable citdl="Date" doc="Needed because the timezone may vary with time (daylight savings)" ilk="argument" name="dateObject" />
          </scope>
          <scope attributes="private" doc="Compare two date objects by date, time, or both." ilk="function" name="compare" returns="Number|Boolean|The result -- return empty string if nothing found|String|int" signature="compare(date1,date2,portion)">
            <variable citdl="Date" doc="object" ilk="argument" name="date1" />
            <variable citdl="Date" doc="object. If not specified, the current Date is used." ilk="argument" name="date2" />
            <variable citdl="String" ilk="argument" name="portion" />
          </scope>
          <scope attributes="private" doc="Add to a Date in intervals of different size, from milliseconds to years" ilk="function" name="add" returns="Date" signature="add(date,interval,amount)">
            <variable citdl="Date" doc="Date object to start with" ilk="argument" name="date" />
            <variable citdl="String" doc="A string representing the interval. One of the following: &amp;amp;quot;year&amp;amp;quot;, &amp;amp;quot;month&amp;amp;quot;, &amp;amp;quot;day&amp;amp;quot;, &amp;amp;quot;hour&amp;amp;quot;, &amp;amp;quot;minute&amp;amp;quot;, &amp;amp;quot;second&amp;amp;quot;, &amp;amp;quot;millisecond&amp;amp;quot;, &amp;amp;quot;quarter&amp;amp;quot;, &amp;amp;quot;week&amp;amp;quot;, &amp;amp;quot;weekday&amp;amp;quot;" ilk="argument" name="interval" />
            <variable citdl="int" doc="How much to add to the date." ilk="argument" name="amount" />
          </scope>
          <scope attributes="private" doc="Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer." ilk="function" name="difference" returns="Integer return value|Number (integer)" signature="difference(date1,date2,interval)">
            <variable citdl="Date" doc="object" ilk="argument" name="date1" />
            <variable citdl="Date" doc="object. If not specified, the current Date is used." ilk="argument" name="date2" />
            <variable citdl="String" doc="A string representing the interval. One of the following: &amp;amp;quot;year&amp;amp;quot;, &amp;amp;quot;month&amp;amp;quot;, &amp;amp;quot;day&amp;amp;quot;, &amp;amp;quot;hour&amp;amp;quot;, &amp;amp;quot;minute&amp;amp;quot;, &amp;amp;quot;second&amp;amp;quot;, &amp;amp;quot;millisecond&amp;amp;quot;, &amp;amp;quot;quarter&amp;amp;quot;, &amp;amp;quot;week&amp;amp;quot;, &amp;amp;quot;weekday&amp;amp;quot; Defaults to &amp;amp;quot;day&amp;amp;quot;." ilk="argument" name="interval" />
          </scope>
        </variable>
        <variable citdl="Object" doc="Drag and Drop resources" name="dnd">
          <scope doc="a constructor of the Container" ilk="function" name="Container" signature="Container(node,params)">
            <variable citdl="Node" doc="node or node&apos;s id to build the container on" ilk="argument" name="node" />
            <variable citdl="Object" doc="a dict of parameters, recognized parameters are:" ilk="argument" name="params" />
            <variable citdl="Boolean" doc="don&apos;t start the drag operation, if clicked on form elements dropParent: Node: node or node&apos;s id to use as the parent node for dropped items (must be underneath the &apos;node&apos; parameter in the DOM) _skipStartup: Boolean: skip startup(), which collects children, for deferred initialization (this is used in the markup mode)" name="skipForm" />
            <variable doc="a creator function, which takes a data item, and returns an object like that: {node: newNode, data: usedData, type: arrayOfStrings}" ilk="function" name="creator" />
            <scope attributes="private" doc="returns a data item by its key (id)" ilk="function" name="getItem" returns="Object" signature="getItem(key)">
              <variable citdl="String" ilk="argument" name="key" />
            </scope>
            <scope doc="associates a data item with its key (id)" ilk="function" name="setItem" signature="setItem(key,data)">
              <variable citdl="String" ilk="argument" name="key" />
              <variable citdl="Object" ilk="argument" name="data" />
            </scope>
            <scope doc="removes a data item from the map by its key (id)" ilk="function" name="delItem" signature="delItem(key)">
              <variable citdl="String" ilk="argument" name="key" />
            </scope>
            <scope attributes="private" doc="iterates over a data map skipping members, which are present in the empty object (IE and/or 3rd-party libraries)." ilk="function" name="forInItems" returns="Object" signature="forInItems(f,o)">
              <variable ilk="function" name="f" />
              <variable citdl="Object" ilk="argument" name="o" />
            </scope>
            <scope doc="removes all data items from the map" ilk="function" name="clearItems" />
            <scope attributes="private" doc="returns a list (an array) of all valid child nodes" ilk="function" name="getAllNodes" returns="NodeList" />
            <scope attributes="private" doc="synch up the node list with the data map" ilk="function" name="sync" returns="self" />
            <scope attributes="private" doc="inserts an array of new nodes before/after an anchor node" ilk="function" name="insertNodes" returns="self" signature="insertNodes(data,before,anchor)">
              <variable citdl="Array" doc="a list of data items, which should be processed by the creator function" ilk="argument" name="data" />
              <variable citdl="Boolean" doc="insert before the anchor, if true, and after the anchor otherwise" ilk="argument" name="before" />
              <variable citdl="Node" doc="the anchor node to be used as a point of insertion" ilk="argument" name="anchor" />
            </scope>
            <scope doc="prepares the object to be garbage-collected" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(params,node)">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="collects valid child items and populate the map  set up the real parent node" ilk="function" name="startup" />
            <scope doc="event processor for onmouseover" ilk="function" name="onMouseOver" signature="onMouseOver(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onmouseout" ilk="function" name="onMouseOut" signature="onMouseOut(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onselectevent and ondragevent" ilk="function" name="onSelectStart" signature="onSelectStart(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="this function is called once, when mouse is over our container" ilk="function" name="onOverEvent" />
            <scope doc="this function is called once, when mouse is out of our container" ilk="function" name="onOutEvent" />
            <scope attributes="private" doc="changes a named state to new state value" ilk="function" name="_changeState" signature="_changeState(type,newState)">
              <variable citdl="String" doc="a name of the state to change" ilk="argument" name="type" />
              <variable citdl="String" doc="new state" ilk="argument" name="newState" />
            </scope>
            <scope attributes="private" doc="adds a class with prefix &amp;amp;quot;dojoDndItem&amp;amp;quot;" ilk="function" name="_addItemClass" signature="_addItemClass(node,type)">
              <variable citdl="Node" doc="a node" ilk="argument" name="node" />
              <variable citdl="String" doc="a variable suffix for a class name" ilk="argument" name="type" />
            </scope>
            <scope attributes="private" doc="removes a class with prefix &amp;amp;quot;dojoDndItem&amp;amp;quot;" ilk="function" name="_removeItemClass" signature="_removeItemClass(node,type)">
              <variable citdl="Node" doc="a node" ilk="argument" name="node" />
              <variable citdl="String" doc="a variable suffix for a class name" ilk="argument" name="type" />
            </scope>
            <scope attributes="private" doc="gets a child, which is under the mouse at the moment, or null" ilk="function" name="_getChildByEvent" signature="_getChildByEvent(e)">
              <variable citdl="Event" doc="a mouse event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="adds all necessary data to the output of the user-supplied creator function" ilk="function" name="_normalizedCreator" signature="_normalizedCreator(item,hint)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="hint" />
            </scope>
            <variable doc="" name="map" />
            <variable citdl="Node" doc="node or node&apos;s id to build the container on" name="node" />
            <variable doc="" name="parent" />
            <variable doc="" name="defaultCreator" />
            <variable doc="" name="current" />
            <variable doc="" name="containerState" />
            <variable doc="" name="events" />
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_defaultCreatorNodes">
            <scope doc="" name="ul" />
            <scope doc="" name="ol" />
            <scope doc="" name="div" />
            <scope doc="" name="p" />
          </variable>
          <scope attributes="private" doc="returns a function, which creates an element of given tag (SPAN by default) and sets its innerHTML to given text" ilk="function" name="_createNode" returns="Function|Node" signature="_createNode(tag)">
            <variable citdl="String" doc="a tag name or empty for SPAN" ilk="argument" name="tag" />
          </scope>
          <scope attributes="private" doc="creates a TR/TD structure with given text as an innerHTML of TD" ilk="function" name="_createTrTd" returns="Node" signature="_createTrTd(text)">
            <variable citdl="String" doc="a text for TD" ilk="argument" name="text" />
          </scope>
          <scope attributes="private" doc="creates a SPAN element with given text as its innerHTML" ilk="function" name="_createSpan" returns="Node" signature="_createSpan(text)">
            <variable citdl="String" doc="a text for SPAN" ilk="argument" name="text" />
          </scope>
          <scope attributes="private" doc="takes a parent node, and returns an appropriate creator function" ilk="function" name="_defaultCreator" returns="Function" signature="_defaultCreator(node)">
            <variable citdl="Node" doc="a container node" ilk="argument" name="node" />
          </scope>
          <scope doc="the manager of DnD operations (usually a singleton)" ilk="function" name="Manager">
            <scope doc="" name="OFFSET_X" />
            <scope doc="" name="OFFSET_Y" />
            <scope doc="called when a source detected a mouse-over conditiion" ilk="function" name="overSource" signature="overSource(source)">
              <variable citdl="Object" doc="the reporter" ilk="argument" name="source" />
            </scope>
            <scope doc="called when a source detected a mouse-out conditiion" ilk="function" name="outSource" signature="outSource(source)">
              <variable citdl="Object" doc="the reporter" ilk="argument" name="source" />
            </scope>
            <scope doc="called to initiate the DnD operation" ilk="function" name="startDrag" signature="startDrag(source,nodes,copy)">
              <variable citdl="Object" doc="the source which provides items" ilk="argument" name="source" />
              <variable citdl="Array" doc="the list of transferred items" ilk="argument" name="nodes" />
              <variable citdl="Boolean" doc="copy items, if true, move items otherwise" ilk="argument" name="copy" />
              <scope citdl="Array" doc="the list of transferred items" name="nodes" />
              <scope citdl="Boolean" doc="copy items, if true, move items otherwise" name="copy" />
            </scope>
            <scope doc="called to notify if the current target can accept items" ilk="function" name="canDrop" signature="canDrop(flag)">
              <variable ilk="argument" name="flag" />
            </scope>
            <scope doc="stop the DnD in progress" ilk="function" name="stopDrag" />
            <scope doc="makes the avatar, it is separate to be overwritten dynamically, if needed" ilk="function" name="makeAvatar" />
            <scope doc="updates the avatar, it is separate to be overwritten dynamically, if needed" ilk="function" name="updateAvatar" />
            <scope doc="event processor for onmousemove" ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onmouseup" ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onkeydown: watching for CTRL for copy/move status, watching for ESCAPE to cancel the drag" ilk="function" name="onKeyDown" signature="onKeyDown(e)">
              <variable citdl="Event" doc="keyboard event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onkeyup, watching for CTRL for copy/move status" ilk="function" name="onKeyUp" signature="onKeyUp(e)">
              <variable citdl="Event" doc="keyboard event" ilk="argument" name="e" />
            </scope>
            <scope attributes="private" doc="changes the copy status" ilk="function" name="_setCopyStatus" signature="_setCopyStatus(copy)">
              <variable citdl="Boolean" doc="the copy status" ilk="argument" name="copy" />
              <scope citdl="Boolean" doc="the copy status" name="copy" />
            </scope>
            <variable doc="" name="target" />
            <variable doc="" name="canDropFlag" />
            <variable doc="" name="nodes" />
            <variable doc="" name="copy" />
            <variable doc="" name="avatar" />
            <variable doc="" name="events" />
          </scope>
          <scope attributes="private" doc="returns the current DnD manager, creates one if it is not created yet" ilk="function" name="manager" returns="Object" />
          <scope attributes="private" doc="" name="_manager" />
          <scope doc="an object, which makes a node moveable" ilk="function" name="Moveable" signature="Moveable(node,params)">
            <variable citdl="Node" doc="a node (or node&apos;s id) to be moved" ilk="argument" name="node" />
            <variable citdl="Object" doc="an optional object with additional parameters; following parameters are recognized:" ilk="argument" name="params" />
            <variable citdl="Node" doc="a node (or node&apos;s id), which is used as a mouse handle if omitted, the node itself is used as a handle" name="handle" />
            <variable citdl="Number" doc="delay move by this number of pixels" name="delay" />
            <variable citdl="Boolean" doc="skip move of form elements" name="skip" />
            <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(params,node)">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="stops watching for possible move, deletes all references, so the object can be garbage-collected" ilk="function" name="destroy" />
            <scope doc="event processor for onmousedown, creates a Mover for the node" ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onmousemove, used only for delayed drags" ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onmouseup, used only for delayed drags" ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onselectevent and ondragevent" ilk="function" name="onSelectStart" signature="onSelectStart(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="called when the drag is detected, responsible for creation of the mover" ilk="function" name="onDragDetected" signature="onDragDetected(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="called before every move operation" ilk="function" name="onMoveStart" signature="onMoveStart(mover)">
              <variable citdl="dojo.dnd.Mover" ilk="argument" name="mover" />
            </scope>
            <scope doc="called after every move operation" ilk="function" name="onMoveStop" signature="onMoveStop(mover)">
              <variable citdl="dojo.dnd.Mover" ilk="argument" name="mover" />
            </scope>
            <scope doc="called during the very first move notification, can be used to initialize coordinates, can be overwritten.  default implementation does nothing" ilk="function" name="onFirstMove" signature="onFirstMove(mover)">
              <variable citdl="dojo.dnd.Mover" ilk="argument" name="mover" />
            </scope>
            <scope doc="called during every move notification, should actually move the node, can be overwritten." ilk="function" name="onMove" signature="onMove(mover,leftTop)">
              <variable citdl="dojo.dnd.Mover" ilk="argument" name="mover" />
              <variable citdl="Object" ilk="argument" name="leftTop" />
            </scope>
            <scope doc="called before every incremental move, can be overwritten.  default implementation does nothing" ilk="function" name="onMoving" signature="onMoving(mover,leftTop)">
              <variable citdl="dojo.dnd.Mover" ilk="argument" name="mover" />
              <variable citdl="Object" ilk="argument" name="leftTop" />
            </scope>
            <scope doc="called after every incremental move, can be overwritten.  default implementation does nothing" ilk="function" name="onMoved" signature="onMoved(mover,leftTop)">
              <variable citdl="dojo.dnd.Mover" ilk="argument" name="mover" />
              <variable citdl="Object" ilk="argument" name="leftTop" />
            </scope>
            <variable doc="" name="events" />
            <variable attributes="private" doc="" name="_lastX" />
            <variable attributes="private" doc="" name="_lastY" />
            <variable citdl="Node" doc="a node (or node&apos;s id) to be moved" name="node" />
            <variable citdl="Object" doc="a constructor of custom Mover" name="mover" />
          </scope>
          <scope doc="an object, which makes a node follow the mouse, used as a default mover, and as a base class for custom movers" ilk="function" name="Mover" signature="Mover(node,e,host)">
            <variable citdl="Node" doc="a node (or node&apos;s id) to be moved" ilk="argument" name="node" />
            <variable citdl="Event" doc="a mouse event, which started the move; only pageX and pageY properties are used" ilk="argument" name="e" />
            <variable citdl="Object" doc="object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)" ilk="argument" name="host" />
            <scope doc="event processor for onmousemove" ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="makes the node absolute; it is meant to be called only once. relative and absolutely positioned nodes are assumed to use pixel units" ilk="function" name="onFirstMove" />
            <scope doc="stops the move, deletes all references, so the object can be garbage-collected" ilk="function" name="destroy" />
            <variable doc="" name="mouseButton" />
            <variable doc="" name="marginBox">
              <variable doc="" name="l" />
              <variable doc="" name="t" />
            </variable>
            <variable doc="" name="events" />
            <variable citdl="Node" doc="a node (or node&apos;s id) to be moved" name="node" />
            <variable citdl="Object?" doc="object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)" name="host" />
          </scope>
          <scope doc="a constructor of the Selector" ilk="function" name="Selector" signature="Selector(node,params)">
            <variable citdl="Node" doc="node or node&apos;s id to build the selector on" ilk="argument" name="node" />
            <variable citdl="Object" doc="a dict of parameters, recognized parameters are:" ilk="argument" name="params" />
            <variable citdl="Boolean" doc="allows selection of only one element, if true the rest of parameters are passed to the container" name="singular" />
            <scope attributes="private" doc="returns a list (an array) of selected nodes" ilk="function" name="getSelectedNodes" returns="Array" />
            <scope attributes="private" doc="unselects all items" ilk="function" name="selectNone" returns="self" />
            <scope attributes="private" doc="selects all items" ilk="function" name="selectAll" returns="self" />
            <scope attributes="private" doc="deletes all selected items" ilk="function" name="deleteSelectedNodes" returns="self" />
            <scope doc="iterates over selected items, see dojo.dnd.Container.forInItems() for details" ilk="function" name="forInSelectedItems" signature="forInSelectedItems(f,o)">
              <variable ilk="function" name="f" />
              <variable citdl="Object" ilk="argument" name="o" />
            </scope>
            <scope attributes="private" doc="synch up the node list with the data map" ilk="function" name="sync" returns="self" />
            <scope attributes="private" doc="inserts new data items (see Container&apos;s insertNodes method for details)" ilk="function" name="insertNodes" returns="self" signature="insertNodes(addSelected,data,before,anchor)">
              <variable citdl="Boolean" doc="all new nodes will be added to selected items, if true, no selection change otherwise" ilk="argument" name="addSelected" />
              <variable citdl="Array" doc="a list of data items, which should be processed by the creator function" ilk="argument" name="data" />
              <variable citdl="Boolean" doc="insert before the anchor, if true, and after the anchor otherwise" ilk="argument" name="before" />
              <variable citdl="Node" doc="the anchor node to be used as a point of insertion" ilk="argument" name="anchor" />
              <variable attributes="private" doc="" ilk="function" name="_normalizedCreator" signature="_normalizedCreator(item,hint)">
                <variable ilk="argument" name="item" />
                <variable ilk="argument" name="hint" />
              </variable>
              <variable citdl="Node" doc="the anchor node to be used as a point of insertion" name="anchor" />
            </scope>
            <scope doc="prepares the object to be garbage-collected" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(params,node)">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="event processor for onmousedown" ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onmouseup" ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onmousemove" ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="this function is called once, when mouse is over our container" ilk="function" name="onOverEvent" />
            <scope doc="this function is called once, when mouse is out of our container" ilk="function" name="onOutEvent" />
            <scope attributes="private" doc="unselects all items" ilk="function" name="_removeSelection" returns="self" />
            <scope attributes="private" doc="" ilk="function" name="_removeAnchor" returns="self" />
            <variable doc="" name="anchor" />
            <variable doc="" name="selection" />
            <variable attributes="private" doc="" name="_normalizedCreator" />
            <variable doc="" name="simpleSelection" />
            <variable doc="" name="onmousemoveEvent" />
            <variable citdl="Boolean" doc="autosynchronizes the source with its list of DnD nodes, false by default" name="autoSync" />
          </scope>
          <scope doc="a constructor of the Source" ilk="function" name="Source" signature="Source(node,params)">
            <variable citdl="DOMNode|String" doc="node or node&apos;s id to build the source on" ilk="argument" name="node" />
            <variable citdl="dojo.dnd.__SourceArgs" doc="any property of this class may be configured via the params object which is mixed-in to the `dojo.dnd.Source` instance" ilk="argument" name="params" />
            <scope doc="" name="isSource" />
            <scope doc="" name="horizontal" />
            <scope doc="" name="copyOnly" />
            <scope doc="" name="selfCopy" />
            <scope doc="" name="selfAccept" />
            <scope doc="" name="skipForm" />
            <scope doc="" name="withHandles" />
            <scope doc="" name="autoSync" />
            <scope doc="" name="delay" />
            <variable doc="" name="accept" />
            <scope attributes="private" doc="checks, if the target can accept nodes from this source" ilk="function" name="checkAcceptance" returns="Boolean" signature="checkAcceptance(source,nodes)">
              <variable citdl="Object" doc="the source which provides items" ilk="argument" name="source" />
              <variable citdl="Array" doc="the list of transferred items" ilk="argument" name="nodes" />
            </scope>
            <scope attributes="private" doc="Returns true, if we need to copy items, false to move. It is separated to be overwritten dynamically, if needed." ilk="function" name="copyState" returns="Boolean" signature="copyState(keyPressed,self)">
              <variable citdl="Boolean" doc="the &amp;amp;quot;copy&amp;amp;quot; was pressed" ilk="argument" name="keyPressed" />
              <variable citdl="Boolean" doc="optional flag, which means that we are about to drop on itself" ilk="argument" name="self" />
            </scope>
            <scope doc="prepares the object to be garbage-collected" ilk="function" name="destroy" />
            <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(params,node)">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="event processor for onmousemove" ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onmousedown" ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="event processor for onmouseup" ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
            </scope>
            <scope doc="topic event processor for /dnd/source/over, called when detected a current source" ilk="function" name="onDndSourceOver" signature="onDndSourceOver(source)">
              <variable citdl="Object" doc="the source which has the mouse over it" ilk="argument" name="source" />
            </scope>
            <scope doc="topic event processor for /dnd/start, called to initiate the DnD operation" ilk="function" name="onDndStart" signature="onDndStart(source,nodes,copy)">
              <variable citdl="Object" doc="the source which provides items" ilk="argument" name="source" />
              <variable citdl="Array" doc="the list of transferred items" ilk="argument" name="nodes" />
              <variable citdl="Boolean" doc="copy items, if true, move items otherwise" ilk="argument" name="copy" />
            </scope>
            <scope doc="topic event processor for /dnd/drop, called to finish the DnD operation" ilk="function" name="onDndDrop" signature="onDndDrop(source,nodes,copy,target)">
              <variable citdl="Object" doc="the source which provides items" ilk="argument" name="source" />
              <variable citdl="Array" doc="the list of transferred items" ilk="argument" name="nodes" />
              <variable citdl="Boolean" doc="copy items, if true, move items otherwise" ilk="argument" name="copy" />
              <variable citdl="Object" doc="the target which accepts items" ilk="argument" name="target" />
            </scope>
            <scope doc="topic event processor for /dnd/cancel, called to cancel the DnD operation" ilk="function" name="onDndCancel" />
            <scope doc="called only on the current target, when drop is performed" ilk="function" name="onDrop" signature="onDrop(source,nodes,copy)">
              <variable citdl="Object" doc="the source which provides items" ilk="argument" name="source" />
              <variable citdl="Array" doc="the list of transferred items" ilk="argument" name="nodes" />
              <variable citdl="Boolean" doc="copy items, if true, move items otherwise" ilk="argument" name="copy" />
            </scope>
            <scope doc="called only on the current target, when drop is performed from an external source" ilk="function" name="onDropExternal" signature="onDropExternal(source,nodes,copy)">
              <variable citdl="Object" doc="the source which provides items" ilk="argument" name="source" />
              <variable citdl="Array" doc="the list of transferred items" ilk="argument" name="nodes" />
              <variable citdl="Boolean" doc="copy items, if true, move items otherwise" ilk="argument" name="copy" />
              <variable attributes="private" doc="" ilk="function" name="_normalizedCreator" signature="_normalizedCreator(node,hint)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="hint" />
              </variable>
            </scope>
            <scope doc="called only on the current target, when drop is performed from the same target/source" ilk="function" name="onDropInternal" signature="onDropInternal(nodes,copy)">
              <variable citdl="Array" doc="the list of transferred items" ilk="argument" name="nodes" />
              <variable citdl="Boolean" doc="copy items, if true, move items otherwise" ilk="argument" name="copy" />
              <variable attributes="private" doc="" ilk="function" name="_normalizedCreator" signature="_normalizedCreator(node,hint)">
                <variable ilk="argument" name="node" />
                <variable ilk="argument" name="hint" />
              </variable>
            </scope>
            <scope doc="called during the active DnD operation, when items are dragged over this target, and it is not disabled" ilk="function" name="onDraggingOver" />
            <scope doc="called during the active DnD operation, when items are dragged away from this target, and it is not disabled" ilk="function" name="onDraggingOut" />
            <scope doc="this function is called once, when mouse is over our container" ilk="function" name="onOverEvent" />
            <scope doc="this function is called once, when mouse is out of our container" ilk="function" name="onOutEvent" />
            <scope attributes="private" doc="assigns a class to the current target anchor based on &amp;amp;quot;before&amp;amp;quot; status" ilk="function" name="_markTargetAnchor" signature="_markTargetAnchor(before)">
              <variable citdl="Boolean" doc="insert before, if true, after otherwise" ilk="argument" name="before" />
              <scope citdl="Boolean" doc="insert before, if true, after otherwise" name="before" />
            </scope>
            <scope attributes="private" doc="removes a class of the current target anchor based on &amp;amp;quot;before&amp;amp;quot; status" ilk="function" name="_unmarkTargetAnchor" />
            <scope attributes="private" doc="changes source&apos;s state based on &amp;amp;quot;copy&amp;amp;quot; status" ilk="function" name="_markDndStatus" signature="_markDndStatus(copy)">
              <variable ilk="argument" name="copy" />
            </scope>
            <scope attributes="private" doc="checks if user clicked on &amp;amp;quot;approved&amp;amp;quot; items" ilk="function" name="_legalMouseDown" returns="Boolean" signature="_legalMouseDown(e)">
              <variable citdl="Event" doc="mouse event  accept only the left mouse button" ilk="argument" name="e" />
            </scope>
            <variable doc="" name="targetAnchor" />
            <variable doc="" name="targetState" />
            <variable doc="" name="targetBox" />
            <variable doc="" name="mouseDown" />
            <variable attributes="private" doc="" name="_lastX" />
            <variable attributes="private" doc="" name="_lastY" />
            <variable doc="" name="isDragging" />
            <variable doc="" name="before" />
            <variable attributes="private" doc="" name="_normalizedCreator" />
            <variable doc="" name="current" />
            <variable doc="" name="sourceState" />
            <variable doc="" name="topics" />
          </scope>
          <scope doc="a constructor of the Target --- see the Source constructor for details" ilk="function" name="Target" signature="Target(node,params)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="params" />
            <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(params,node)">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <variable doc="" name="isSource" />
          </scope>
          <scope doc="a constructor of the AutoSource --- see the Source constructor for details" ilk="function" name="AutoSource" signature="AutoSource(node,params)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="params" />
            <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(params,node)">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <variable doc="" name="autoSync" />
          </scope>
          <scope attributes="private" doc="a dict of parameters for DnD Source configuration. Note that any property on Source elements may be configured, but this is the short-list" ilk="function" name="__SourceArgs">
            <variable citdl="Boolean?" doc="can be used as a DnD source. Defaults to true." name="isSource" />
            <variable citdl="Array?" doc="list of accepted types (text strings) for a target; defaults to [&amp;amp;quot;text&amp;amp;quot;]" name="accept" />
            <variable citdl="Boolean" doc="if true refreshes the node list on every operation; false by default" name="autoSync" />
            <variable citdl="Boolean?" doc="copy items, if true, use a state of Ctrl key otherwise, see selfCopy and selfAccept for more details" name="copyOnly" />
            <variable citdl="Number" doc="the move delay in pixels before detecting a drag; 0 by default" name="delay" />
            <variable citdl="Boolean?" doc="a horizontal container, if true, vertical otherwise or when omitted" name="horizontal" />
            <variable citdl="Boolean?" doc="copy items by default when dropping on itself, false by default, works only if copyOnly is true" name="selfCopy" />
            <variable citdl="Boolean?" doc="accept its own items when copyOnly is true, true by default, works only if copyOnly is true" name="selfAccept" />
            <variable citdl="Boolean?" doc="allows dragging only by handles, false by default" name="withHandles" />
          </scope>
          <scope doc="an object, which makes a node moveable with a timer" ilk="function" name="TimedMoveable" signature="TimedMoveable(node,params)">
            <variable citdl="Node" doc="a node (or node&apos;s id) to be moved" ilk="argument" name="node" />
            <variable citdl="Object" doc="an optional object with additional parameters. See dojo.dnd.Moveable for details on general parameters. Following parameters are specific for this class:" ilk="argument" name="params" />
            <variable citdl="Number" doc="delay move by this number of ms accumulating position changes during the timeout  sanitize parameters" name="timeout" />
            <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(params,node)">
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="" ilk="function" name="onMoveStop" signature="onMoveStop(mover)">
              <variable citdl="dojo.dnd.Mover" ilk="argument" name="mover" />
            </scope>
            <scope doc="" ilk="function" name="onMove" signature="onMove(mover,leftTop)">
              <variable citdl="dojo.dnd.Mover" ilk="argument" name="mover" />
              <variable citdl="Object" ilk="argument" name="leftTop" />
            </scope>
          </scope>
          <variable attributes="private" citdl="Object" doc="" name="_validNodes">
            <scope doc="" name="div" />
            <scope doc="" name="p" />
            <scope doc="" name="td" />
          </variable>
          <variable attributes="private" citdl="Object" doc="" name="_validOverflow">
            <scope doc="" name="auto" />
            <scope doc="" name="scroll" />
          </variable>
          <scope attributes="private" doc="" ilk="function" name="getViewport" returns="Object" />
          <scope attributes="private" doc="a handler for onmousemove event, which scrolls the window, if necesary" ilk="function" name="autoScroll" returns="Object" signature="autoScroll(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope attributes="private" doc="a handler for onmousemove event, which scrolls the first avaialble Dom element, it falls back to dojo.dnd.autoScroll()" ilk="function" name="autoScrollNodes" returns="Object" signature="autoScrollNodes(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope doc="" name="V_TRIGGER_AUTOSCROLL" />
          <scope doc="" name="H_TRIGGER_AUTOSCROLL" />
          <scope doc="" name="V_AUTOSCROLL_VALUE" />
          <scope doc="" name="H_AUTOSCROLL_VALUE" />
          <variable citdl="Object" doc="" name="autoscroll" />
          <variable attributes="private" citdl="Object" doc="" name="_empty" />
          <scope attributes="private" doc="abstracts away the difference between selection on Mac and PC, and returns the state of the &amp;amp;quot;copy&amp;amp;quot; key to be pressed." ilk="function" name="getCopyKeyState" returns="Boolean" signature="getCopyKeyState(e)">
            <variable citdl="Event" doc="mouse event" ilk="argument" name="e" />
          </scope>
          <scope doc="returns a unique string for use with any DOM element" ilk="function" name="getUniqueId" />
          <scope attributes="private" doc="returns true, if user clicked on a form element" ilk="function" name="isFormElement" returns="Boolean" signature="isFormElement(e)">
            <variable citdl="Event" ilk="argument" name="e" />
          </scope>
          <scope attributes="private" doc="" name="_isMac" />
          <scope attributes="private" doc="" name="_copyKey" />
          <scope attributes="private" doc="" name="_uniqueId" />
          <scope attributes="private" doc="" name="_lmb" />
          <scope attributes="private" doc="" name="_isLmbPressed" />
          <variable citdl="Object" doc="" name="common" />
          <variable citdl="Object" doc="" name="move">
            <scope doc="an object, which makes a node moveable" ilk="function" name="constrainedMoveable" signature="constrainedMoveable(node,params)">
              <variable citdl="Node" doc="a node (or node&apos;s id) to be moved" ilk="argument" name="node" />
              <variable citdl="Object" doc="an optional object with additional parameters; following parameters are recognized:" ilk="argument" name="params" />
              <variable doc="a function, which calculates a constraint box, it is called in a context of the moveable object." ilk="function" name="constraints" />
              <variable citdl="Boolean" doc="restrict move within boundaries. the rest is passed to the base class" name="within" />
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(params,node)">
                <variable ilk="argument" name="params" />
                <variable ilk="argument" name="node" />
              </scope>
              <scope doc="called during the very first move notification, can be used to initialize coordinates, can be overwritten." ilk="function" name="onFirstMove" signature="onFirstMove(mover)">
                <variable citdl="dojo.dnd.Mover" ilk="argument" name="mover" />
              </scope>
              <scope doc="called during every move notification, should actually move the node, can be overwritten." ilk="function" name="onMove" signature="onMove(mover,leftTop)">
                <variable citdl="dojo.dnd.Mover" ilk="argument" name="mover" />
                <variable citdl="Object" ilk="argument" name="leftTop" />
              </scope>
              <variable doc="" name="constraintBox" />
            </scope>
            <scope doc="an object, which makes a node moveable" ilk="function" name="boxConstrainedMoveable" signature="boxConstrainedMoveable(node,params)">
              <variable citdl="Node" doc="a node (or node&apos;s id) to be moved" ilk="argument" name="node" />
              <variable citdl="Object" doc="an optional object with additional parameters; following parameters are recognized: box: Object: a constraint box the rest is passed to the base class" ilk="argument" name="params" />
              <variable citdl="Object" doc="" name="box" />
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(params,node)">
                <variable ilk="argument" name="params" />
                <variable ilk="argument" name="node" />
              </scope>
              <variable doc="" ilk="function" name="constraints" />
            </scope>
            <scope attributes="private" doc="an object, which makes a node moveable" ilk="function" name="parentConstrainedMoveable" returns="Object" signature="parentConstrainedMoveable(node,params)">
              <variable citdl="Node" doc="a node (or node&apos;s id) to be moved" ilk="argument" name="node" />
              <variable citdl="Object" doc="an optional object with additional parameters; following parameters are recognized: area: String: a parent&apos;s area to restrict the move, can be &amp;amp;quot;margin&amp;amp;quot;, &amp;amp;quot;border&amp;amp;quot;, &amp;amp;quot;padding&amp;amp;quot;, or &amp;amp;quot;content&amp;amp;quot;. the rest is passed to the base class" ilk="argument" name="params" />
              <scope doc="" name="area" />
              <scope doc="" ilk="function" name="markupFactory" signature="markupFactory(params,node)">
                <variable ilk="argument" name="params" />
                <variable ilk="argument" name="node" />
              </scope>
              <variable attributes="private" doc="" ilk="function" name="constraints" returns="Object" />
            </scope>
            <scope attributes="private" doc="returns a constrained version of dojo.dnd.Mover" ilk="function" name="constrainedMover" returns="Object" signature="constrainedMover(fun,within)">
              <variable doc="called on drag, and returns a constraint box" ilk="function" name="fun" />
              <variable citdl="Boolean" doc="if true, constraints the whole dragged object withtin the rectangle, otherwise the constraint is applied to the left-top corner" ilk="argument" name="within" />
              <variable doc="" name="constraintBox" />
            </scope>
            <scope attributes="private" doc="a specialization of dojo.dnd.constrainedMover, which constrains to the specified box" ilk="function" name="boxConstrainedMover" returns="Object" signature="boxConstrainedMover(box,within)">
              <variable citdl="Object" doc="a constraint box (l, t, w, h)" ilk="argument" name="box" />
              <variable citdl="Boolean" doc="if true, constraints the whole dragged object withtin the rectangle, otherwise the constraint is applied to the left-top corner" ilk="argument" name="within" />
            </scope>
            <scope attributes="private" doc="a specialization of dojo.dnd.constrainedMover, which constrains to the parent node" ilk="function" name="parentConstrainedMover" returns="Object" signature="parentConstrainedMover(area,within)">
              <variable citdl="String" doc="&amp;amp;quot;margin&amp;amp;quot; to constrain within the parent&apos;s margin box, &amp;amp;quot;border&amp;amp;quot; for the border box, &amp;amp;quot;padding&amp;amp;quot; for the padding box, and &amp;amp;quot;content&amp;amp;quot; for the content box; &amp;amp;quot;content&amp;amp;quot; is the default value." ilk="argument" name="area" />
              <variable citdl="Boolean" doc="if true, constraints the whole dragged object withtin the rectangle, otherwise the constraint is applied to the left-top corner" ilk="argument" name="within" />
            </scope>
          </variable>
          <scope doc="" name="constrainedMover" />
          <scope doc="" name="boxConstrainedMover" />
          <scope doc="" name="parentConstrainedMover" />
        </variable>
        <variable citdl="Object" doc="" name="dojo" />
        <variable citdl="Object" doc="Effects library on top of Base animations" name="fx">
          <variable citdl="Object" doc="Collection of easing functions to use beyond the default dojo._defaultEasing" name="easing">
            <scope doc="A linear easing function" ilk="function" name="linear" signature="linear(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="quadIn" signature="quadIn(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="quadOut" signature="quadOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="quadInOut" signature="quadInOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="cubicIn" signature="cubicIn(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="cubicOut" signature="cubicOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="cubicInOut" signature="cubicInOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="quartIn" signature="quartIn(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="quartOut" signature="quartOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="quartInOut" signature="quartInOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="quintIn" signature="quintIn(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="quintOut" signature="quintOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="quintInOut" signature="quintInOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="sineIn" signature="sineIn(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="sineOut" signature="sineOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="sineInOut" signature="sineInOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="expoIn" signature="expoIn(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="expoOut" signature="expoOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="expoInOut" signature="expoInOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="circIn" signature="circIn(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="circOut" signature="circOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="" ilk="function" name="circInOut" signature="circInOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="An easing function that starts away from the target, and quickly accelerates towards the end value" ilk="function" name="backIn" signature="backIn(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="An easing function that pops past the range briefly, and slowly comes back." ilk="function" name="backOut" signature="backOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="An easing function combining the effects of backIn and backOut" ilk="function" name="backInOut" signature="backInOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="An easing function the elastically snaps from the start value" ilk="function" name="elasticIn" signature="elasticIn(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="An easing function that elasticly snaps around the target value, near the end of the Animation" ilk="function" name="elasticOut" signature="elasticOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="An easing function that elasticly snaps around the value, near the beginning and end of the Animation" ilk="function" name="elasticInOut" signature="elasticInOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope attributes="private" doc="An easing function that &amp;amp;quot;bounces&amp;amp;quot; near the beginning of an Animation" ilk="function" name="bounceIn" returns="Decimal" signature="bounceIn(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope doc="An easing function that &amp;amp;quot;bounces&amp;amp;quot; near the end of an Animation" ilk="function" name="bounceOut" signature="bounceOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
            <scope attributes="private" doc="An easing function that &amp;amp;quot;bounces&amp;amp;quot; at the beginning and end of the Animation" ilk="function" name="bounceInOut" returns="Decimal" signature="bounceInOut(n)">
              <variable citdl="Decimal" ilk="argument" name="n" />
            </scope>
          </variable>
          <scope attributes="private" doc="Chain a list of dojo._Animation s to run in sequence" ilk="function" name="chain" returns="dojo._Animation" signature="chain(animations)">
            <variable citdl="dojo._Animation[]" ilk="argument" name="animations" />
          </scope>
          <scope attributes="private" doc="Combine an array of `dojo._Animation`s to run in parallel" ilk="function" name="combine" returns="dojo._Animation" signature="combine(animations)">
            <variable citdl="dojo._Animation[]" ilk="argument" name="animations" />
          </scope>
          <scope attributes="private" doc="Returns an animation that will expand the node defined in &apos;args&apos; object from it&apos;s current height to it&apos;s natural height (with no scrollbar). Node must have no margin/border/padding." ilk="function" name="wipeIn" returns="dojo._Animation" signature="wipeIn(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Returns an animation that will shrink node defined in &amp;amp;quot;args&amp;amp;quot; from it&apos;s current height to 1px, and then hide it." ilk="function" name="wipeOut" returns="dojo._Animation" signature="wipeOut(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
          <scope attributes="private" doc="Returns an animation that will slide &amp;amp;quot;node&amp;amp;quot; defined in args Object from its current position to the position defined by (args.left, args.top)." ilk="function" name="slideTo" returns="dojo._Animation" signature="slideTo(args)">
            <variable citdl="Object" ilk="argument" name="args" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="gears" />
        <variable citdl="Object" doc="" name="html" />
        <variable citdl="Object" doc="Utility classes to enable loading of resources for internationalization (i18n)" name="i18n">
          <scope attributes="private" doc="Returns an Object containing the localization for a given resource bundle in a package, matching the specified locale." ilk="function" name="getLocalization" returns="Object" signature="getLocalization(packageName,bundleName,locale)">
            <variable citdl="String" doc="package which is associated with this resource" ilk="argument" name="packageName" />
            <variable citdl="String" doc="the base filename of the resource bundle (without the &amp;amp;quot;.js&amp;amp;quot; suffix)" ilk="argument" name="bundleName" />
            <variable citdl="String" doc="the variant to load (optional). By default, the locale defined by the host environment: dojo.locale" ilk="argument" name="locale" />
          </scope>
          <scope attributes="private" doc="Returns canonical form of locale, as used by Dojo." ilk="function" name="normalizeLocale" returns="String" signature="normalizeLocale(locale)">
            <variable citdl="String" ilk="argument" name="locale" />
          </scope>
          <scope attributes="private" doc="See dojo.requireLocalization()" ilk="function" name="_requireLocalization" signature="_requireLocalization(moduleName,bundleName,locale,availableFlatLocales,m,b)">
            <variable citdl="String" ilk="argument" name="moduleName" />
            <variable citdl="String" ilk="argument" name="bundleName" />
            <variable citdl="String" ilk="argument" name="locale" />
            <variable citdl="String" ilk="argument" name="availableFlatLocales" />
            <variable ilk="argument" name="m" />
            <variable ilk="argument" name="b" />
          </scope>
          <scope attributes="private" doc="A helper method to assist in searching for locale-based resources. Will iterate through the variants of a particular locale, either up or down, executing a callback function. For example, &amp;amp;quot;en-us&amp;amp;quot; and true will try &amp;amp;quot;en-us&amp;amp;quot; followed by &amp;amp;quot;en&amp;amp;quot; and finally &amp;amp;quot;ROOT&amp;amp;quot;." ilk="function" name="_searchLocalePath" signature="_searchLocalePath(locale,down,searchFunc)">
            <variable citdl="String" ilk="argument" name="locale" />
            <variable citdl="Boolean" ilk="argument" name="down" />
            <variable ilk="function" name="searchFunc" />
          </scope>
          <scope attributes="private" doc="Load built, flattened resource bundles, if available for all locales used in the page. Only called by built layer files." ilk="function" name="_preloadLocalizations" returns="Boolean" signature="_preloadLocalizations(bundlePrefix,localesGenerated)">
            <variable citdl="String" ilk="argument" name="bundlePrefix" />
            <variable citdl="Array" ilk="argument" name="localesGenerated" />
          </scope>
        </variable>
        <variable citdl="Object" doc="Additional I/O transports (Ajax)" name="io">
          <variable citdl="Object" doc="" name="script">
            <scope attributes="private" doc="All the properties described in the dojo.__ioArgs type, apply to this type as well, EXCEPT &amp;amp;quot;handleAs&amp;amp;quot;. It is not applicable to dojo.io.script.get() calls, since it is implied by the usage of &amp;amp;quot;callbackParamName&amp;amp;quot; (response will be a JSONP call returning JSON) or &amp;amp;quot;checkString&amp;amp;quot; (response is pure JavaScript defined in the body of the script that was attached)." ilk="function" name="__ioArgs">
              <variable citdl="c&quot;." doc="" name="callbackParamName" />
              <variable citdl="String" doc="A string of JavaScript that when evaluated like so: &amp;amp;quot;typeof(&amp;amp;quot; + checkString + &amp;amp;quot;) != &apos;undefined&apos;&amp;amp;quot; being true means that the script fetched has been loaded. Do not use this if doing a JSONP type of call (use callbackParamName instead)." name="checkString" />
              <variable citdl="Document" doc="The Document object for a child iframe. If this is passed in, the script will be attached to that document. This can be helpful in some comet long-polling scenarios with Firefox and Opera." name="frameDoc" />
            </scope>
            <scope doc="sends a get request using a dynamically created script tag." ilk="function" name="get" signature="get(args)">
              <variable citdl="dojo.io.script.__ioArgs" ilk="argument" name="args" />
            </scope>
            <scope doc="creates a new &amp;amp;lt;script&amp;amp;gt; tag pointing to the specified URL and adds it to the document." ilk="function" name="attach" signature="attach(id,url,frameDocument)">
              <variable citdl="String" ilk="argument" name="id" />
              <variable citdl="String" ilk="argument" name="url" />
              <variable citdl="Document" ilk="argument" name="frameDocument" />
            </scope>
            <scope doc="removes the script element with the given id, from the given frameDocument. If no frameDocument is passed, the current document is used." ilk="function" name="remove" signature="remove(id,frameDocument)">
              <variable citdl="String" ilk="argument" name="id" />
              <variable citdl="Document" ilk="argument" name="frameDocument" />
            </scope>
            <scope attributes="private" doc="sets up a Deferred object for an IO request." ilk="function" name="_makeScriptDeferred" returns="dojo.Deferred" signature="_makeScriptDeferred(args)">
              <variable citdl="Object" ilk="argument" name="args" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_deferredCancel" returns="dojo.Deferred" signature="_deferredCancel(dfd)">
              <variable citdl="Deferred" ilk="argument" name="dfd" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_deferredOk" returns="dojo.Deferred" signature="_deferredOk(dfd)">
              <variable citdl="Deferred" ilk="argument" name="dfd" />
            </scope>
            <scope attributes="private" doc="errHandler function for dojo._ioSetArgs call." ilk="function" name="_deferredError" signature="_deferredError(error,dfd)">
              <variable citdl="Error" ilk="argument" name="error" />
              <variable citdl="Deferred" ilk="argument" name="dfd" />
            </scope>
            <scope attributes="private" doc="" name="_deadScripts" />
            <scope attributes="private" doc="" name="_counter" />
            <scope attributes="private" doc="sets up an entry in the deadScripts array." ilk="function" name="_addDeadScript" signature="_addDeadScript(ioArgs)">
              <variable citdl="Object" ilk="argument" name="ioArgs" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_validCheck" returns="dojo.Deferred" signature="_validCheck(dfd)">
              <variable citdl="Deferred" ilk="argument" name="dfd" />
            </scope>
            <scope attributes="private" doc="" ilk="function" name="_ioCheck" returns="dojo.Deferred" signature="_ioCheck(dfd)">
              <variable citdl="Deferred" ilk="argument" name="dfd" />
            </scope>
            <scope attributes="private" doc="inflight function to handle a completed response." ilk="function" name="_resHandle" signature="_resHandle(dfd)">
              <variable citdl="Deferred" ilk="argument" name="dfd" />
            </scope>
            <scope attributes="private" doc="A method that can be overridden by other modules to control when the script attachment occurs." ilk="function" name="_canAttach" signature="_canAttach(ioArgs)">
              <variable citdl="Object" ilk="argument" name="ioArgs" />
            </scope>
            <scope attributes="private" doc="generic handler for jsonp callback. A pointer to this function is used for all jsonp callbacks. NOTE: the &amp;amp;quot;this&amp;amp;quot; in this function will be the Deferred object that represents the script request." ilk="function" name="_jsonpCallback" signature="_jsonpCallback(json)">
              <variable citdl="JSON Object" ilk="argument" name="json" />
              <scope name="ioArgs">
                <variable doc="" name="json" />
              </scope>
            </scope>
          </variable>
        </variable>
        <variable citdl="Object" doc="" name="jaxer" />
        <variable citdl="Object" doc="localized formatting and parsing routines for Number" name="number">
          <scope attributes="private" doc="" name="__FormatOptions">
            <variable citdl="String?" doc="override [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) with this string" name="pattern" />
            <variable citdl="Number?" doc="fixed number of decimal places to show. This overrides any information in the provided pattern." name="places" />
            <variable citdl="Number?" doc="5 rounds to nearest .5; 0 rounds to nearest whole (default). -1 means do not round." name="round" />
            <variable citdl="String?" doc="an [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like &amp;amp;quot;USD&amp;amp;quot;" name="currency" />
            <variable citdl="String?" doc="localized currency symbol" name="symbol" />
            <variable citdl="String?" doc="override the locale used to determine formatting rules" name="locale" />
          </scope>
          <scope attributes="private" doc="Format a Number as a String, using locale-specific settings" ilk="function" name="format" returns="null|String" signature="format(value,options)">
            <variable citdl="Number" doc="the number to be formatted" ilk="argument" name="value" />
            <variable citdl="dojo.number.__FormatOptions" ilk="argument" name="options" />
          </scope>
          <scope attributes="private" doc="Apply pattern to format value as a string using options. Gives no consideration to local customs." ilk="function" name="_applyPattern" returns="null|String" signature="_applyPattern(value,pattern,options)">
            <variable citdl="Number" doc="the number to be formatted." ilk="argument" name="value" />
            <variable citdl="String" doc="a pattern string as described by [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)" ilk="argument" name="pattern" />
            <variable citdl="dojo.number.__FormatOptions" ilk="argument" name="options" />
          </scope>
          <scope attributes="private" doc="Rounds to the nearest value with the given number of decimal places, away from zero" ilk="function" name="round" returns="Number" signature="round(value,places,increment,v,p,m)">
            <variable citdl="Number" doc="The number to round" ilk="argument" name="value" />
            <variable citdl="Number" doc="The number of decimal places where rounding takes place. Defaults to 0 for whole rounding. Must be non-negative." ilk="argument" name="places" />
            <variable citdl="Number" doc="Rounds next place to nearest value of increment/10. 10 by default." ilk="argument" name="increment" />
            <variable ilk="argument" name="v" />
            <variable ilk="argument" name="p" />
            <variable ilk="argument" name="m" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="__FormatAbsoluteOptions">
            <variable citdl="String?" doc="the decimal separator" name="decimal" />
            <variable citdl="String?" doc="the group separator" name="group" />
            <variable citdl="Integer?|String?" doc="number of decimal places. the range &amp;amp;quot;n,m&amp;amp;quot; will format to m places." name="places" />
            <variable citdl="Number?" doc="5 rounds to nearest .5; 0 rounds to nearest whole (default). -1 means don&apos;t round." name="round" />
          </scope>
          <scope attributes="private" doc="Apply numeric pattern to absolute value using options. Gives no consideration to local customs." ilk="function" name="_formatAbsolute" signature="_formatAbsolute(value,pattern,options)">
            <variable citdl="Number" doc="the number to be formatted, ignores sign" ilk="argument" name="value" />
            <variable citdl="String" doc="the number portion of a pattern (e.g. `#,##0.00`)" ilk="argument" name="pattern" />
            <variable citdl="dojo.number.__FormatAbsoluteOptions" ilk="argument" name="options" />
          </scope>
          <scope attributes="private" doc="" name="__RegexpOptions">
            <variable citdl="String?" doc="override pattern with this string. Default is provided based on locale." name="pattern" />
            <variable citdl="String?" doc="override the locale used to determine formatting rules" name="locale" />
            <variable citdl="Boolean?" doc="strict parsing, false by default" name="strict" />
            <variable citdl="Number|String?" doc="number of decimal places to accept: Infinity, a positive number, or a range &amp;amp;quot;n,m&amp;amp;quot;. Defined by pattern or Infinity if pattern not provided." name="places" />
          </scope>
          <scope attributes="private" doc="Builds the regular needed to parse a number" ilk="function" name="regexp" returns="String" signature="regexp(options)">
            <variable citdl="dojo.number.__RegexpOptions" ilk="argument" name="options" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_parseInfo" returns="Object" signature="_parseInfo(options)">
            <variable citdl="Object" ilk="argument" name="options" />
          </scope>
          <scope attributes="private" doc="" name="__ParseOptions">
            <variable citdl="String" doc="override pattern with this string. Default is provided based on locale." name="pattern" />
            <variable citdl="String" doc="override the locale used to determine formatting rules" name="locale" />
            <variable citdl="Boolean?" doc="strict parsing, false by default" name="strict" />
            <variable citdl="Object" doc="object with currency information" name="currency" />
          </scope>
          <scope attributes="private" doc="Convert a properly formatted string to a primitive Number, using locale-specific settings." ilk="function" name="parse" returns="NaN|Number" signature="parse(expression,options)">
            <variable citdl="String" doc="A string representation of a Number" ilk="argument" name="expression" />
            <variable citdl="dojo.number.__ParseOptions" ilk="argument" name="options" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="__RealNumberRegexpFlags">
            <variable citdl="Number?" doc="The integer number of decimal places or a range given as &amp;amp;quot;n,m&amp;amp;quot;. If not given, the decimal part is optional and the number of places is unlimited." name="places" />
            <variable citdl="String?" doc="A string for the character used as the decimal point. Default is &amp;amp;quot;.&amp;amp;quot;." name="decimal" />
            <variable citdl="Boolean|Array?" doc="Whether decimal places are allowed. Can be true, false, or [true, false]. Default is [true, false]" name="fractional" />
            <variable citdl="Boolean|Array?" doc="Express in exponential notation. Can be true, false, or [true, false]. Default is [true, false], (i.e. will match if the exponential part is present are not)." name="exponent" />
            <variable citdl="Boolean|Array?" doc="The leading plus-or-minus sign on the exponent. Can be true, false, or [true, false]. Default is [true, false], (i.e. will match if it is signed or unsigned). flags in regexp.integer can be applied." name="eSigned" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_realNumberRegexp" returns="null|String|Number|Object|NaN" signature="_realNumberRegexp(flags)">
            <variable citdl="dojo.number.__RealNumberRegexpFlags" ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="__IntegerRegexpFlags">
            <variable citdl="Boolean?" doc="The leading plus-or-minus sign. Can be true, false, or `[true,false]`. Default is `[true, false]`, (i.e. will match if it is signed or unsigned)." name="signed" />
            <variable citdl="String?" doc="The character used as the thousands separator. Default is no separator. For more than one symbol use an array, e.g. `[&amp;amp;quot;,&amp;amp;quot;, &amp;amp;quot;&amp;amp;quot;]`, makes &apos;,&apos; optional." name="separator" />
            <variable citdl="Number?" doc="group size between separators" name="groupSize" />
            <variable citdl="Number?" doc="second grouping, where separators 2..n have a different interval than the first separator (for India)" name="groupSize2" />
          </scope>
          <scope attributes="private" doc="" ilk="function" name="_integerRegexp" returns="null|String|Number|Object|NaN" signature="_integerRegexp(flags)">
            <variable citdl="dojo.number.__IntegerRegexpFlags" ilk="argument" name="flags" />
          </scope>
          <scope attributes="private" doc="" name="_numberPatternRE" />
        </variable>
        <scope attributes="private" doc="The Dom/Widget parsing package" ilk="function" name="parser" returns="String|typeof [] == &amp;quot;object&amp;quot;|assume timestamp|the NaN of dates|current date">
          <scope name="initialized" />
          <variable attributes="private" doc="" ilk="function" name="_functionFromScript" signature="_functionFromScript(script)">
            <variable ilk="argument" name="script" />
          </variable>
          <variable doc="Takes array of nodes, and turns them into class instances and potentially calls a layout method to allow them to connect with any children" ilk="function" name="instantiate" signature="instantiate(nodes,mixin)">
            <variable citdl="Array" ilk="argument" name="nodes" />
            <variable citdl="Object" doc="An object that will be mixed in with each node in the array. Values in the mixin will override values in the node, if they exist." ilk="argument" name="mixin" />
          </variable>
          <variable doc="Search specified node (or root node) recursively for class instances, and instantiate them Searches for dojoType=&amp;amp;quot;qualified.class.name&amp;amp;quot;" ilk="function" name="parse" signature="parse(rootNode)">
            <variable citdl="DomNode" ilk="argument" name="rootNode" />
          </variable>
        </scope>
        <variable citdl="Object" doc="Regular expressions and Builder resources" name="regexp">
          <scope doc="Adds escape sequences for special characters in regular expressions" ilk="function" name="escapeString" signature="escapeString(str,except)">
            <variable citdl="String" ilk="argument" name="str" />
            <variable citdl="String" doc="a String with special characters to be left unescaped" ilk="argument" name="except" />
          </scope>
          <scope attributes="private" doc="Builds a regular expression that groups subexpressions" ilk="function" name="buildGroupRE" returns="String" signature="buildGroupRE(arr,re,nonCapture)">
            <variable citdl="Object|Array" doc="A single value or an array of values." ilk="argument" name="arr" />
            <variable doc="A function. Takes one parameter and converts it to a regular expression." ilk="function" name="re" />
            <variable citdl="Boolean" ilk="argument" name="nonCapture" />
          </scope>
          <scope attributes="private" doc="adds group match to expression" ilk="function" name="group" returns="String" signature="group(expression,nonCapture)">
            <variable citdl="String" ilk="argument" name="expression" />
            <variable citdl="Boolean" doc="If true, uses non-capturing match, otherwise matches are retained by regular expression." ilk="argument" name="nonCapture" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="rpc">
          <scope doc="" ilk="function" name="JsonService">
            <scope doc="" name="bustCache" />
            <scope doc="" name="contentType" />
            <scope doc="" name="lastSubmissionId" />
            <scope doc="call an arbitrary remote method without requiring it to be predefined with SMD" ilk="function" name="callRemote" signature="callRemote(method,params)">
              <variable citdl="string" doc="the name of the remote method you want to call." ilk="argument" name="method" />
              <variable citdl="array" doc="array of parameters to pass to method" ilk="argument" name="params" />
            </scope>
            <scope doc="JSON-RPC bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind." ilk="function" name="bind" signature="bind(method,parameters,deferredRequestHandler,url)">
              <variable citdl="string" doc="The name of the method we are calling" ilk="argument" name="method" />
              <variable citdl="array" doc="The parameters we are passing off to the method" ilk="argument" name="parameters" />
              <variable citdl="deferred" doc="The Deferred object for this particular request" ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope doc="create a JSON-RPC envelope for the request" ilk="function" name="createRequest" signature="createRequest(method,params)">
              <variable citdl="string" doc="The name of the method we are creating the requst for" ilk="argument" name="method" />
              <variable citdl="array" doc="The array of parameters for this request;" ilk="argument" name="params" />
            </scope>
            <scope doc="parse the result envelope and pass the results back to the callback function" ilk="function" name="parseResults" signature="parseResults(obj)">
              <variable citdl="anything" doc="Object Object containing envelope of data we recieve from the server" ilk="argument" name="obj" />
            </scope>
          </scope>
          <scope doc="Generic JSONP service. Minimally extends RpcService to allow easy definition of nearly any JSONP style service. Example SMD files exist in dojox.data" ilk="function" name="JsonpService" signature="JsonpService(args,requiredArgs)">
            <variable ilk="argument" name="args" />
            <variable ilk="argument" name="requiredArgs" />
            <scope doc="" name="strictArgChecks" />
            <scope doc="JSONP bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind." ilk="function" name="bind" signature="bind(method,parameters,deferredRequestHandler,url)">
              <variable citdl="string" doc="The name of the method we are calling" ilk="argument" name="method" />
              <variable citdl="array" doc="The parameters we are passing off to the method" ilk="argument" name="parameters" />
              <variable citdl="deferred" doc="The Deferred object for this particular request" ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope doc="create a JSONP req params: array The array of parameters for this request;" ilk="function" name="createRequest" signature="createRequest(parameters)">
              <variable ilk="argument" name="parameters" />
            </scope>
          </scope>
          <scope doc="Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use as a definition for the service" ilk="function" name="RpcService" signature="RpcService(args)">
            <variable citdl="object" doc="Takes a number of properties as kwArgs for defining the service. It also accepts a string. When passed a string, it is treated as a url from which it should synchronously retrieve an smd file. Otherwise it is a kwArgs object. It accepts serviceUrl, to manually define a url for the rpc service allowing the rpc system to be used without an smd definition. strictArgChecks forces the system to verify that the # of arguments provided in a call matches those defined in the smd. smdString allows a developer to pass a jsonString directly, which will be converted into an object or alternatively smdObject is accepts an smdObject directly." ilk="argument" name="args" />
            <variable doc="" name="strictArgChecks" />
            <variable doc="" name="serviceUrl" />
            <scope doc="" ilk="function" name="parseResults" signature="parseResults(obj)">
              <variable ilk="argument" name="obj" />
            </scope>
            <scope doc="create callback that calls the Deferres errback method" ilk="function" name="errorCallback" signature="errorCallback(deferredRequestHandler)">
              <variable citdl="dojo.Deferred" doc="Deferred The deferred object handling a request." ilk="argument" name="deferredRequestHandler" />
            </scope>
            <scope doc="create callback that calls the Deferred&apos;s callback method" ilk="function" name="resultCallback" signature="resultCallback(deferredRequestHandler)">
              <variable citdl="dojo.Deferred" doc="Deferred The deferred object handling a request." ilk="argument" name="deferredRequestHandler" />
            </scope>
            <scope doc="generate the local bind methods for the remote object" ilk="function" name="generateMethod" signature="generateMethod(method,parameters,url)">
              <variable citdl="string" doc="The name of the method we are generating" ilk="argument" name="method" />
              <variable citdl="array" doc="the array of parameters for this call." ilk="argument" name="parameters" />
              <variable citdl="string" doc="the service url for this call" ilk="argument" name="url" />
            </scope>
            <scope doc="callback method for reciept of a smd object. Parse the smd and generate functions based on the description" ilk="function" name="processSmd" signature="processSmd(object)">
              <variable citdl="smd" doc="object defining this service." ilk="argument" name="object" />
            </scope>
            <variable doc="" name="required" />
            <variable doc="" name="smd" />
            <variable doc="" name="timeout" />
          </scope>
        </variable>
        <variable citdl="Object" doc="" name="resources" />
        <variable citdl="Object" doc="" name="robot" />
        <variable citdl="Object" doc="" name="robotx" />
        <variable citdl="Object" doc="String utilities for Dojo" name="string">
          <scope attributes="private" doc="Efficiently replicate a string `n` times." ilk="function" name="rep" returns="String" signature="rep(str,num)">
            <variable citdl="String" doc="the string to replicate" ilk="argument" name="str" />
            <variable citdl="Integer" doc="number of times to replicate the string" ilk="argument" name="num" />
          </scope>
          <scope attributes="private" doc="Pad a string to guarantee that it is at least `size` length by filling with the character `ch` at either the start or end of the string. Pads at the start, by default." ilk="function" name="pad" returns="String" signature="pad(text,size,ch,end)">
            <variable citdl="String" doc="the string to pad" ilk="argument" name="text" />
            <variable citdl="Integer" doc="length to provide padding" ilk="argument" name="size" />
            <variable citdl="String" doc="character to pad, defaults to &apos;0&apos;" ilk="argument" name="ch" />
            <variable citdl="Boolean" doc="adds padding at the end if true, otherwise pads at start" ilk="argument" name="end" />
          </scope>
          <scope doc="Performs parameterized substitutions on a string. Throws an exception if any parameter is unmatched." ilk="function" name="substitute" signature="substitute(template,map,transform,thisObject)">
            <variable citdl="String" doc="a string with expressions in the form `${key}` to be replaced or `${key:format}` which specifies a format function. keys are case-sensitive." ilk="argument" name="template" />
            <variable citdl="Object|Array" doc="hash to search for substitutions" ilk="argument" name="map" />
            <variable doc="a function to process all parameters before substitution takes place, e.g. dojo.string.encodeXML" ilk="function" name="transform" />
            <variable citdl="Object" doc="where to look for optional format function; default to the global namespace" ilk="argument" name="thisObject" />
          </scope>
          <scope attributes="private" doc="Trims whitespace from both sides of the string" ilk="function" name="trim" returns="String" signature="trim(str)">
            <variable citdl="String" doc="String to be trimmed" ilk="argument" name="str" />
            <variable name="return_summary" />
          </scope>
        </variable>
        <variable citdl="Object" doc="D.O.H. Test files for Dojo unit testing." name="tests" />
      </scope>
    </scope>
  </file>
</codeintel>
