<?xml version="1.0" encoding="UTF-8"?>
<codeintel description="Open Source Javascript web development toolkit" name="Dojo" version="2.0">
  <file lang="JavaScript" path="dojo.js">
    <scope ilk="blob" lang="JavaScript" name="dojo">
      <variable citdl="Object" classrefs="dojo.Error" name="dojo">
        <scope ilk="class" name="hostenv_browser" />
        <variable citdl="Object" name="hostenv">
          <scope ilk="function" name="getXmlhttpObject" signature="getXmlhttpObject()">
            <scope attributes="__ctor__" doc="Returns the appropriate transfer object for the call type" ilk="function" name="getXmlhttpObject" returns="XMLHttpRequest" signature="getXmlhttpObject(kwArgs)">
              <variable citdl="Object" ilk="argument" name="kwArgs" />
            </scope>
          </scope>
          <scope attributes="__ctor__" ilk="function" name="getText" signature="getText(uri, async_cb, fail_ok)">
            <variable ilk="argument" name="uri" />
            <variable ilk="argument" name="async_cb" />
            <variable ilk="argument" name="fail_ok" />
            <variable name="_blockAsync" />
            <scope attributes="__ctor__" ilk="function" name="getText" signature="getText(uri, cb, data)">
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="getText" signature="getText(uri)">
              <variable ilk="argument" name="uri" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="getText" signature="getText(fpath)">
              <variable ilk="argument" name="fpath" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="getText" signature="getText(uri, async_cb, fail_ok)">
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="async_cb" />
              <variable ilk="argument" name="fail_ok" />
            </scope>
          </scope>
          <scope ilk="function" name="println" signature="println(line)">
            <variable ilk="argument" name="line" />
            <scope attributes="__ctor__" doc="Prints a message to the OS X console null" ilk="function" name="println" signature="println(message)">
              <variable citdl="String" ilk="argument" name="message" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="println" signature="println(s)">
              <variable ilk="argument" name="s" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="println" signature="println(line)">
              <variable ilk="argument" name="line" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="println" signature="println(s)">
              <variable ilk="argument" name="s" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="println" signature="println(s)">
              <variable ilk="argument" name="s" />
            </scope>
          </scope>
          <scope ilk="function" name="makeWidgets" signature="makeWidgets()" />
          <scope ilk="function" name="writeIncludes" signature="writeIncludes()">
            <scope attributes="__ctor__" ilk="function" name="writeIncludes" signature="writeIncludes(willCallAgain)">
              <variable ilk="argument" name="willCallAgain" />
            </scope>
          </scope>
          <scope attributes="__ctor__" doc="Emulates the XMLHttpRequest Object" ilk="function" name="CurlRequest" signature="CurlRequest()">
            <variable name="onreadystatechange" />
            <variable name="readyState" />
            <variable name="responseText" />
            <variable name="responseXML" />
            <variable name="status" />
            <variable name="statusText" />
            <variable name="_method" />
            <variable name="_url" />
            <variable name="_async" />
            <variable name="_referrer" />
            <variable name="_headers" />
            <variable name="_save" />
            <variable name="_responseHeader" />
            <variable name="_responseHeaders" />
            <variable name="_fileName" />
            <variable name="_username" />
            <variable name="_password" />
            <variable name="_method" />
            <variable name="_url" />
            <variable name="_async" />
            <variable name="_username" />
            <variable name="_password" />
            <variable name="_referrer" />
            <variable name="readyState" />
            <variable name="responseText" />
            <variable name="status" />
            <variable name="_responseHeader" />
            <variable name="statusText" />
            <variable name="_fileName" />
            <scope ilk="function" name="open" signature="open(method, url, [async], [username], [password])">
              <variable citdl="String" ilk="argument" name="method" />
              <variable ilk="argument" name="url" />
              <variable citdl="Boolean" ilk="argument" name="async" />
              <variable citdl="String" ilk="argument" name="username" />
              <variable citdl="String" ilk="argument" name="password" />
            </scope>
            <scope ilk="function" name="setRequestHeader" signature="setRequestHeader(label, value)">
              <variable citdl="String" ilk="argument" name="label" />
              <variable citdl="String" ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="getAllResponseHeaders" returns="String" signature="getAllResponseHeaders()" />
            <scope ilk="function" name="getResponseHeader" returns="String" signature="getResponseHeader(headerLabel)">
              <variable citdl="String" ilk="argument" name="headerLabel" />
            </scope>
            <scope ilk="function" name="send" signature="send(content)">
              <variable citdl="String" ilk="argument" name="content" />
            </scope>
            <scope ilk="function" name="_formatCall" signature="_formatCall(query, url)">
              <variable ilk="argument" name="query" />
              <variable ilk="argument" name="url" />
            </scope>
          </scope>
          <scope ilk="function" name="exit" signature="exit()">
            <scope attributes="__ctor__" ilk="function" name="exit" signature="exit(exitcode)">
              <variable ilk="argument" name="exitcode" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="exit" signature="exit(exitcode)">
              <variable ilk="argument" name="exitcode" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="exit" signature="exit(exitcode)">
              <variable ilk="argument" name="exitcode" />
            </scope>
          </scope>
          <scope ilk="function" name="setModulePrefix" signature="setModulePrefix(module, prefix)">
            <variable ilk="argument" name="module" />
            <variable ilk="argument" name="prefix" />
          </scope>
          <scope ilk="function" name="getModulePrefix" signature="getModulePrefix(module)">
            <variable ilk="argument" name="module" />
          </scope>
          <scope ilk="function" name="getLibaryScriptUri" signature="getLibaryScriptUri()" />
          <scope ilk="function" name="loadUri" signature="loadUri(uri)">
            <variable ilk="argument" name="uri" />
            <scope attributes="__ctor__" ilk="function" name="loadUri" signature="loadUri(uri, cb)">
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="cb" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="loadUri" signature="loadUri(uri)">
              <variable ilk="argument" name="uri" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="loadUri" signature="loadUri(uri, cb)">
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="cb" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="loadUri" signature="loadUri(uri, cb, currentIsXDomain, module)">
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="currentIsXDomain" />
              <variable ilk="argument" name="module" />
              <variable name="xdTimer" />
              <variable name="xdStartTime" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="loadUri" signature="loadUri(uri, cb)">
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="cb" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="loadUri" signature="loadUri(uri, cb)">
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="cb" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="loadUri" signature="loadUri(uri)">
              <variable ilk="argument" name="uri" />
            </scope>
          </scope>
          <scope ilk="function" name="loadUriAndCheck" signature="loadUriAndCheck(uri, module)">
            <variable ilk="argument" name="uri" />
            <variable ilk="argument" name="module" />
            <scope attributes="__ctor__" ilk="function" name="loadUriAndCheck" signature="loadUriAndCheck(uri, module, cb)">
              <variable ilk="argument" name="uri" />
              <variable ilk="argument" name="module" />
              <variable ilk="argument" name="cb" />
            </scope>
          </scope>
          <scope ilk="function" name="loadModule" signature="loadModule(moduleName)">
            <variable ilk="argument" name="moduleName" />
            <scope attributes="__ctor__" ilk="function" name="loadModule" signature="loadModule(modulename, exact_only, omit_module_check)">
              <variable ilk="argument" name="modulename" />
              <variable ilk="argument" name="exact_only" />
              <variable ilk="argument" name="omit_module_check" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="loadModule" signature="loadModule(modulename, exact_only, omit_module_check)">
              <variable ilk="argument" name="modulename" />
              <variable ilk="argument" name="exact_only" />
              <variable ilk="argument" name="omit_module_check" />
            </scope>
          </scope>
          <scope ilk="function" name="startPackage" signature="startPackage(moduleName)">
            <variable ilk="argument" name="moduleName" />
            <scope attributes="__ctor__" ilk="function" name="startPackage" signature="startPackage(packname)">
              <variable ilk="argument" name="packname" />
            </scope>
          </scope>
          <scope ilk="function" name="getVersion" signature="getVersion()">
            <scope attributes="__ctor__" ilk="function" name="getVersion" signature="getVersion()" />
          </scope>
          <scope ilk="function" name="getLibraryScriptUri" signature="getLibraryScriptUri()" />
          <scope ilk="function" name="getRequiresAndProvides" signature="getRequiresAndProvides(contents)">
            <variable ilk="argument" name="contents" />
          </scope>
          <scope ilk="function" name="getDelayRequiresAndProvides" signature="getDelayRequiresAndProvides(contents)">
            <variable ilk="argument" name="contents" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="resetXd" signature="resetXd()">
            <variable name="isXDomain" />
            <variable name="xdTimer" />
            <variable name="xdInFlight" />
            <variable name="xdOrderedReqs" />
            <variable name="xdDepMap" />
            <variable name="xdContents" />
          </scope>
          <scope ilk="function" name="createXdPackage" signature="createXdPackage(contents)">
            <variable ilk="argument" name="contents" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="loadPath" signature="loadPath(relpath, module, cb)">
            <variable ilk="argument" name="relpath" />
            <variable ilk="argument" name="module" />
            <variable ilk="argument" name="cb" />
            <variable name="isXDomain" />
            <scope attributes="__ctor__" ilk="function" name="loadPath" signature="loadPath(relpath, module, cb)">
              <variable ilk="argument" name="relpath" />
              <variable ilk="argument" name="module" />
              <variable ilk="argument" name="cb" />
            </scope>
          </scope>
          <scope ilk="function" name="packageLoaded" signature="packageLoaded(pkg)">
            <variable ilk="argument" name="pkg" />
          </scope>
          <scope ilk="function" name="unpackXdDependency" signature="unpackXdDependency(dep)">
            <variable ilk="argument" name="dep" />
          </scope>
          <scope ilk="function" name="xdWalkReqs" signature="xdWalkReqs()" />
          <scope ilk="function" name="xdTraceReqs" signature="xdTraceReqs(reqs, reqChain)">
            <variable ilk="argument" name="reqs" />
            <variable ilk="argument" name="reqChain" />
          </scope>
          <scope ilk="function" name="xdEvalReqs" signature="xdEvalReqs(reqChain)">
            <variable ilk="argument" name="reqChain" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="clearXdInterval" signature="clearXdInterval()">
            <variable name="xdTimer" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="watchInFlightXDomain" signature="watchInFlightXDomain()">
            <variable name="inFlightCount" />
          </scope>
          <scope ilk="function" name="flattenRequireArray" signature="flattenRequireArray(target)">
            <variable ilk="argument" name="target" />
          </scope>
          <scope doc="Return the base script uri that other scripts are found&#xA;relative to. TODOC: HUH?  This comment means nothing to me." ilk="function" name="getBaseScriptUri" returns="String" signature="getBaseScriptUri()" />
          <scope attributes="__ctor__" ilk="function" name="loaded" signature="loaded()">
            <variable name="loadNotifying" />
            <variable name="post_load_" />
            <variable name="modulesLoadedListeners" />
          </scope>
          <scope ilk="function" name="unloaded" signature="unloaded()" />
          <scope attributes="__ctor__" ilk="function" name="modulesLoaded" signature="modulesLoaded()">
            <variable name="loadUriStack.length" />
            <scope attributes="__ctor__" ilk="function" name="modulesLoaded" signature="modulesLoaded()">
              <variable name="modulesLoadedFired" />
            </scope>
          </scope>
          <scope ilk="function" name="callLoaded" signature="callLoaded()" />
          <scope ilk="function" name="getModuleSymbols" signature="getModuleSymbols(modulename)">
            <variable ilk="argument" name="modulename" />
          </scope>
          <scope ilk="function" name="findModule" signature="findModule(modulename, must_exist)">
            <variable ilk="argument" name="modulename" />
            <variable ilk="argument" name="must_exist" />
          </scope>
          <scope ilk="function" name="getCurrentScriptUri" signature="getCurrentScriptUri()" />
          <scope ilk="function" name="nameAnonFunc" signature="nameAnonFunc(anonFuncPtr, namespaceObj)">
            <variable ilk="argument" name="anonFuncPtr" />
            <variable ilk="argument" name="namespaceObj" />
          </scope>
          <scope ilk="function" name="getNewAnonFunc" signature="getNewAnonFunc()" />
          <scope ilk="function" name="displayStack" signature="displayStack()" />
          <scope ilk="function" name="unwindUriStack" signature="unwindUriStack()" />
          <scope ilk="function" name="unWindGetTextStack" signature="unWindGetTextStack()" />
          <scope ilk="function" name="postText" signature="postText(uri, async_cb, text, fail_ok, mime_type, encoding)">
            <variable ilk="argument" name="uri" />
            <variable ilk="argument" name="async_cb" />
            <variable ilk="argument" name="text" />
            <variable ilk="argument" name="fail_ok" />
            <variable ilk="argument" name="mime_type" />
            <variable ilk="argument" name="encoding" />
          </scope>
          <scope ilk="function" name="setBaseScriptUri" signature="setBaseScriptUri(uri)">
            <variable ilk="argument" name="uri" />
          </scope>
          <scope ilk="function" name="moduleLoaded" signature="moduleLoaded()" />
          <scope ilk="function" name="conditionalLoadModule" signature="conditionalLoadModule()" />
        </variable>
        <scope doc="return the document object associated with the dojo.global()" ilk="function" name="doc" signature="doc()">
          <scope attributes="__ctor__" doc="return the document object associated with the dojo.global()" ilk="function" name="doc" signature="doc()" />
        </scope>
        <scope doc="return the body object associated with dojo.doc() Note:&#xA;document.body is not defined for a strict xhtml document" ilk="function" name="body" signature="body()" />
        <scope ilk="function" name="byId" signature="byId(id, doc)">
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="doc" />
        </scope>
        <scope ilk="function" name="setContext" signature="setContext(globalObject, globalDocument)">
          <variable citdl="Object" ilk="argument" name="globalObject" />
          <variable citdl="Object" ilk="argument" name="globalDocument" />
        </scope>
        <scope ilk="function" name="_fireCallback" signature="_fireCallback(callback, context, cbArguments)">
          <variable ilk="argument" name="callback" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="cbArguments" />
        </scope>
        <scope doc="Call callback with globalObject as dojo.global() and&#xA;globalObject.document as dojo.doc()." ilk="function" name="withGlobal" signature="withGlobal(globalObject, callback, [thisObject], [cbArguments])">
          <variable citdl="Object" ilk="argument" name="globalObject" />
          <variable citdl="Function" ilk="argument" name="callback" />
          <variable citdl="Object" ilk="argument" name="thisObject" />
          <variable citdl="Array" ilk="argument" name="cbArguments" />
        </scope>
        <scope doc="Call callback with documentObject as dojo.doc()." ilk="function" name="withDoc" signature="withDoc(documentObject, callback, [thisObject], [cbArguments])">
          <variable citdl="Object" ilk="argument" name="documentObject" />
          <variable citdl="Function" ilk="argument" name="callback" />
          <variable citdl="Object" ilk="argument" name="thisObject" />
          <variable citdl="Array" ilk="argument" name="cbArguments" />
        </scope>
        <variable citdl="Object" name="selection">
          <scope ilk="class" name="Selection">
            <scope attributes="__ctor__" ilk="function" name="Selection" signature="Selection(items, isCollection)">
              <variable ilk="argument" name="items" />
              <variable ilk="argument" name="isCollection" />
              <variable name="items.length" />
              <variable name="_pivotItems.length" />
            </scope>
            <variable name="items" />
            <variable name="selection" />
            <variable name="lastSelected" />
            <variable name="allowImplicit" />
            <variable name="length" />
            <variable name="isGrowable" />
            <variable name="_pivotItems" />
            <variable name="_pivotItem" />
            <scope ilk="function" name="onSelect" signature="onSelect(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="onDeselect" signature="onDeselect(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="onSelectChange" signature="onSelectChange(item, selected)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="selected" />
            </scope>
            <scope ilk="function" name="_find" signature="_find(item, inSelection)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="inSelection" />
            </scope>
            <scope ilk="function" name="isSelectable" signature="isSelectable(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="setItems" signature="setItems()" />
            <scope ilk="function" name="setItemsCollection" signature="setItemsCollection(collection)">
              <variable ilk="argument" name="collection" />
            </scope>
            <scope ilk="function" name="addItems" signature="addItems()" />
            <scope ilk="function" name="addItemsAt" signature="addItemsAt(item, before)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="before" />
            </scope>
            <scope ilk="function" name="removeItem" signature="removeItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="clearItems" signature="clearItems()" />
            <scope ilk="function" name="isItem" signature="isItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="isSelected" signature="isSelected(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="selectFilter" signature="selectFilter(item, selection, add, grow)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="selection" />
              <variable ilk="argument" name="add" />
              <variable ilk="argument" name="grow" />
            </scope>
            <scope ilk="function" name="update" signature="update(item, add, grow, noToggle)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="add" />
              <variable ilk="argument" name="grow" />
              <variable ilk="argument" name="noToggle" />
            </scope>
            <scope ilk="function" name="grow" signature="grow(toItem, fromItem)">
              <variable ilk="argument" name="toItem" />
              <variable ilk="argument" name="fromItem" />
            </scope>
            <scope ilk="function" name="growUp" signature="growUp()" />
            <scope ilk="function" name="growDown" signature="growDown()" />
            <scope ilk="function" name="toggleSelected" signature="toggleSelected(item, noPivot)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="noPivot" />
            </scope>
            <scope ilk="function" name="select" signature="select(item, noPivot)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="noPivot" />
            </scope>
            <scope ilk="function" name="deselect" signature="deselect(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="selectAll" signature="selectAll()" />
            <scope ilk="function" name="deselectAll" signature="deselectAll()" />
            <scope ilk="function" name="selectNext" signature="selectNext()" />
            <scope ilk="function" name="selectPrevious" signature="selectPrevious()" />
            <scope ilk="function" name="selectFirst" signature="selectFirst()" />
            <scope ilk="function" name="selectLast" signature="selectLast()" />
            <scope ilk="function" name="_addPivot" signature="_addPivot(item, andClear)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="andClear" />
            </scope>
            <scope ilk="function" name="_removePivot" signature="_removePivot(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="_updatePivot" signature="_updatePivot()" />
            <scope ilk="function" name="sorted" signature="sorted()" />
            <scope ilk="function" name="updateSelected" signature="updateSelected()" />
          </scope>
        </variable>
        <variable citdl="Object" name="logging">
          <scope ilk="class" name="Logger">
            <scope attributes="__ctor__" ilk="function" name="Logger" signature="Logger()">
              <variable name="cutOffLevel" />
              <variable name="propagate" />
              <variable name="parent" />
              <variable name="data" />
              <variable name="filters" />
              <variable name="handlers" />
            </scope>
          </scope>
          <scope attributes="__ctor__" ilk="function" name="Record" signature="Record(lvl, msg)">
            <variable ilk="argument" name="lvl" />
            <variable ilk="argument" name="msg" />
            <variable name="level" />
            <variable name="message" />
            <variable name="time" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="LogFilter" signature="LogFilter(loggerChain)">
            <variable ilk="argument" name="loggerChain" />
            <variable name="passChain" />
            <variable name="filter">
              <scope attributes="__ctor__" ilk="function" name="filter" signature="filter(record)">
                <variable ilk="argument" name="record" />
              </scope>
            </variable>
          </scope>
          <scope attributes="__ctor__" ilk="function" name="LogHandler" signature="LogHandler(level)">
            <variable ilk="argument" name="level" />
            <variable name="cutOffLevel" />
            <variable name="formatter" />
            <variable name="data" />
            <variable name="filters" />
            <variable name="numRecords" />
            <variable name="postType" />
            <variable name="postInterval" />
            <scope ilk="function" name="setFormatter" signature="setFormatter(fmtr)">
              <variable ilk="argument" name="fmtr" />
            </scope>
            <scope ilk="function" name="flush" signature="flush()" />
            <scope ilk="function" name="close" signature="close()" />
            <scope ilk="function" name="handleError" signature="handleError()" />
            <scope ilk="function" name="handle" signature="handle(record)">
              <variable ilk="argument" name="record" />
            </scope>
            <scope ilk="function" name="emit" signature="emit(record)">
              <variable ilk="argument" name="record" />
            </scope>
          </scope>
          <variable citdl="Object" name="log">
            <scope ilk="function" name="getLogger" signature="getLogger(name)">
              <variable ilk="argument" name="name" />
            </scope>
            <scope ilk="function" name="getLevelName" signature="getLevelName(lvl)">
              <variable ilk="argument" name="lvl" />
            </scope>
            <scope ilk="function" name="addLevelName" signature="addLevelName(name, lvl)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="lvl" />
            </scope>
            <scope ilk="function" name="getLevel" signature="getLevel(name)">
              <variable ilk="argument" name="name" />
            </scope>
          </variable>
          <scope ilk="function" name="MemoryLogHandler" signature="MemoryLogHandler(level, recordsToKeep, postType, postInterval)">
            <variable ilk="argument" name="level" />
            <variable ilk="argument" name="recordsToKeep" />
            <variable ilk="argument" name="postType" />
            <variable ilk="argument" name="postInterval" />
            <scope ilk="function" name="emit" signature="emit(record)">
              <variable ilk="argument" name="record" />
            </scope>
          </scope>
          <variable citdl="Object" name="logQueueHandler">
            <scope ilk="function" name="emit" signature="emit(record)">
              <variable ilk="argument" name="record" />
            </scope>
          </variable>
        </variable>
        <scope ilk="class" name="behavior">
          <scope ilk="function" name="add" signature="add(behaviorObj)">
            <variable ilk="argument" name="behaviorObj" />
          </scope>
          <scope ilk="function" name="apply" signature="apply()" />
          <scope ilk="function" name="elementsById" signature="elementsById(id, handleRemoved)">
            <variable ilk="argument" name="id" />
            <variable ilk="argument" name="handleRemoved" />
          </scope>
          <scope ilk="function" name="applyToNode" signature="applyToNode(node, action, ruleSetName)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="action" />
            <variable ilk="argument" name="ruleSetName" />
          </scope>
          <scope ilk="function" name="applyFast" signature="applyFast()" />
          <scope ilk="function" name="applySlow" signature="applySlow()" />
        </scope>
        <scope ilk="class" name="regexp">
          <scope ilk="function" name="tld" signature="tld(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="ipAddress" signature="ipAddress(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="host" signature="host(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="url" signature="url(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="emailAddress" signature="emailAddress(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="emailAddressList" signature="emailAddressList(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="integer" signature="integer(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="realNumber" signature="realNumber(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="currency" signature="currency(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <variable citdl="Object" name="us">
            <scope ilk="function" name="state" signature="state(flags)">
              <variable ilk="argument" name="flags" />
            </scope>
          </variable>
          <scope ilk="function" name="time" signature="time(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="numberFormat" signature="numberFormat(flags)">
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="buildGroupRE" signature="buildGroupRE(a, re)">
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="re" />
          </scope>
        </scope>
        <scope ilk="class" name="flash">
          <scope ilk="function" name="Info" signature="Info()" />
          <scope attributes="__ctor__" ilk="function" name="Embed" signature="Embed(visible)">
            <variable ilk="argument" name="visible" />
            <variable name="_visible" />
          </scope>
          <scope ilk="function" name="Communicator" signature="Communicator()" />
          <scope ilk="function" name="Install" signature="Install()" />
        </scope>
        <scope ilk="class" name="hostenv_dashboard" />
        <scope ilk="class" name="experimental">
          <scope attributes="__ctor__" ilk="function" name="experimental" signature="experimental(packageName, extra)">
            <variable ilk="argument" name="packageName" />
            <variable ilk="argument" name="extra" />
          </scope>
        </scope>
        <variable citdl="Object" name="graphics">
          <scope ilk="class" name="Colorspace" />
          <variable citdl="Object" name="color">
            <scope ilk="class" name="hsl" />
            <scope ilk="function" name="rgb2hsl" signature="rgb2hsl(r, g, b)">
              <variable ilk="argument" name="r" />
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope ilk="function" name="hsl2rgb" signature="hsl2rgb(h, s, l)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="l" />
            </scope>
            <scope ilk="function" name="hsl2hex" signature="hsl2hex(h, s, l)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="l" />
            </scope>
            <scope ilk="function" name="hex2hsl" signature="hex2hsl(hex)">
              <variable ilk="argument" name="hex" />
            </scope>
            <scope ilk="class" name="hsv" />
            <scope ilk="function" name="rgb2hsv" signature="rgb2hsv(r, g, b)">
              <variable ilk="argument" name="r" />
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope ilk="function" name="hsv2rgb" signature="hsv2rgb(h, s, v)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="v" />
            </scope>
            <scope ilk="function" name="blend" signature="blend(a, b, weight)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="weight" />
            </scope>
            <scope ilk="function" name="blendHex" signature="blendHex(a, b, weight)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="weight" />
            </scope>
            <scope ilk="function" name="extractRGB" signature="extractRGB(color)">
              <variable ilk="argument" name="color" />
            </scope>
            <scope ilk="function" name="hex2rgb" signature="hex2rgb(hex)">
              <variable ilk="argument" name="hex" />
            </scope>
            <scope ilk="function" name="rgb2hex" signature="rgb2hex(r, g, b)">
              <variable ilk="argument" name="r" />
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="b" />
            </scope>
          </variable>
        </variable>
        <scope ilk="class" name="profile">
          <scope ilk="function" name="start" signature="start(name)">
            <variable ilk="argument" name="name" />
          </scope>
          <scope ilk="function" name="end" signature="end(name)">
            <variable ilk="argument" name="name" />
          </scope>
          <scope ilk="function" name="dump" signature="dump(appendToDoc)">
            <variable ilk="argument" name="appendToDoc" />
          </scope>
        </scope>
        <variable citdl="Object" name="xml">
          <scope ilk="class" name="Parse">
            <scope attributes="__ctor__" ilk="function" name="Parse" signature="Parse()">
              <variable name="parseElement" />
              <variable name="parseAttributes" />
            </scope>
            <scope ilk="function" name="parseElement" signature="parseElement(node, hasParentNodeSet, optimizeForDojoML, thisIdx)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="hasParentNodeSet" />
              <variable ilk="argument" name="optimizeForDojoML" />
              <variable ilk="argument" name="thisIdx" />
            </scope>
            <scope ilk="function" name="parseAttributes" signature="parseAttributes(node)">
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <scope ilk="class" name="svgUtil">
            <scope ilk="function" name="getInnerWidth" signature="getInnerWidth(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="getOuterWidth" signature="getOuterWidth(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="getInnerHeight" signature="getInnerHeight(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="getOuterHeight" signature="getOuterHeight(node)">
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
        </variable>
        <scope ilk="class" name="hostenv_svg" />
        <scope ilk="function" name="debug" signature="debug()">
          <scope attributes="__ctor__" ilk="function" name="debug" signature="debug()" />
          <scope attributes="__ctor__" ilk="function" name="debug" signature="debug()" />
          <scope attributes="__ctor__" ilk="function" name="debug" signature="debug()" />
        </scope>
        <variable citdl="Object" classrefs="dojo.dnd.DragSource dojo.dnd.DragObject dojo.dnd.DropTarget dojo.dnd.HtmlDragSource dojo.dnd.HtmlDragObject dojo.dnd.HtmlDropTarget" name="dnd">
          <scope ilk="class" name="DragAndDrop" />
          <scope ilk="function" name="DragSource" signature="DragSource()">
            <scope ilk="function" name="onDragEnd" signature="onDragEnd()" />
            <scope ilk="function" name="onDragStart" signature="onDragStart()" />
            <scope ilk="function" name="onSelected" signature="onSelected()" />
            <scope ilk="function" name="unregister" signature="unregister()" />
            <scope ilk="function" name="reregister" signature="reregister()" />
            <scope attributes="__ctor__" ilk="function" name="DragSource" signature="DragSource()">
              <variable name="domNode" />
              <variable name="dragObject" />
              <variable name="constrainToContainer" />
              <variable name="constrainingContainer" />
            </scope>
          </scope>
          <variable name="type" />
          <scope ilk="function" name="DragObject" signature="DragObject()">
            <scope ilk="function" name="onDragStart" signature="onDragStart()" />
            <scope ilk="function" name="onDragMove" signature="onDragMove()" />
            <scope ilk="function" name="onDragOver" signature="onDragOver()" />
            <scope ilk="function" name="onDragOut" signature="onDragOut()" />
            <scope ilk="function" name="onDragEnd" signature="onDragEnd()" />
            <scope attributes="__ctor__" ilk="function" name="DragObject" signature="DragObject()">
              <variable name="bgIframe" />
              <variable name="scrollOffset" />
              <variable name="dragStartPosition" />
              <variable name="dragOffset" />
              <variable name="dragClone" />
              <variable name="containingBlockPosition" />
              <variable name="constraints" />
              <variable name="scrollOffset" />
              <variable name="dragStartPosition" />
              <variable name="dragOffset" />
              <variable name="dragClone" />
              <variable name="containingBlockPosition" />
              <variable name="constraints" />
              <variable name="scrollOffset" />
              <variable name="dragStartPosition" />
              <variable name="dragOffset" />
              <variable name="dragClone" />
              <variable name="containingBlockPosition" />
              <variable name="constraints" />
              <variable name="dragClone" />
              <variable name="scrollOffset.y" />
              <variable name="scrollOffset.x" />
              <variable name="dragClone.style.top" />
              <variable name="dragClone.style.left" />
              <variable name="dragClone" />
              <variable name="dragClone" />
              <variable name="dragClone" />
              <variable name="constrainToContainer" />
              <variable name="constrainingContainer" />
            </scope>
          </scope>
          <variable name="type" />
          <variable name="onDragLeave" />
          <variable name="onDragEnter" />
          <variable name="ondragout" />
          <variable name="ondragover" />
          <scope ilk="function" name="DropTarget" signature="DropTarget()">
            <scope ilk="function" name="acceptsType" signature="acceptsType(type)">
              <variable ilk="argument" name="type" />
            </scope>
            <scope ilk="function" name="accepts" signature="accepts(dragObjects)">
              <variable ilk="argument" name="dragObjects" />
            </scope>
            <scope ilk="function" name="unregister" signature="unregister()" />
            <scope ilk="function" name="onDragOver" signature="onDragOver()" />
            <scope ilk="function" name="onDragOut" signature="onDragOut()" />
            <scope ilk="function" name="onDragMove" signature="onDragMove()" />
            <scope ilk="function" name="onDropStart" signature="onDropStart()" />
            <scope ilk="function" name="onDrop" signature="onDrop()" />
            <scope ilk="function" name="onDropEnd" signature="onDropEnd()" />
            <scope attributes="__ctor__" ilk="function" name="DropTarget" signature="DropTarget()">
              <variable name="childBoxes" />
              <variable name="childBoxes" />
              <variable name="childBoxes" />
              <variable name="childBoxes" />
              <variable name="dropIndicator" />
              <variable name="dropIndicator.style.display" />
              <variable name="dropIndicator.style.height" />
              <variable name="dropIndicator.style.top" />
              <variable name="dropIndicator.style.width" />
              <variable name="dropIndicator.style.left" />
            </scope>
          </scope>
          <scope ilk="function" name="DragManager" signature="DragManager()">
            <scope ilk="function" name="registerDragSource" signature="registerDragSource()" />
            <scope ilk="function" name="registerDropTarget" signature="registerDropTarget()" />
            <scope ilk="function" name="onKeyDown" signature="onKeyDown()" />
            <scope ilk="function" name="onMouseOut" signature="onMouseOut()" />
            <scope ilk="function" name="onMouseMove" signature="onMouseMove()" />
            <scope ilk="function" name="onMouseUp" signature="onMouseUp()" />
            <scope attributes="__ctor__" ilk="function" name="DragManager" signature="DragManager()">
              <variable name="mouseDownX" />
              <variable name="mouseDownY" />
              <variable name="mouseDownX" />
              <variable name="mouseDownY" />
              <variable name="_dragTriggered" />
              <variable name="selectedSources" />
              <variable name="dragObjects" />
              <variable name="dragSource" />
              <variable name="currentDropTarget" />
              <variable name="dropTargetDimensions" />
              <variable name="currentDropTarget" />
              <variable name="_dragTriggered" />
              <variable name="dragSource" />
              <variable name="previousDropTarget" />
              <variable name="dropAcceptable" />
            </scope>
          </scope>
          <variable name="selectedSources" />
          <variable name="dragObjects" />
          <variable name="dragSources" />
          <variable name="dropTargets" />
          <variable name="lastDragTarget" />
          <variable name="currentDragTarget" />
          <scope attributes="__ctor__" ilk="function" name="DragEvent" signature="DragEvent()">
            <variable name="dragSource" />
            <variable name="dragObject" />
            <variable name="target" />
            <variable name="eventStatus" />
          </scope>
          <scope ilk="class" name="HtmlDragAndDrop" />
          <scope ilk="function" name="HtmlDragSource" signature="HtmlDragSource()">
            <scope ilk="function" name="onDragStart" signature="onDragStart()" />
            <scope ilk="function" name="setDragHandle" signature="setDragHandle(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="setDragTarget" signature="setDragTarget(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="constrainTo" signature="constrainTo(container)">
              <variable ilk="argument" name="container" />
            </scope>
            <scope ilk="function" name="onSelected" signature="onSelected()" />
            <scope ilk="function" name="addDragObjects" signature="addDragObjects(el)">
              <variable citdl="DOMNode" ilk="argument" name="el" />
            </scope>
          </scope>
          <variable name="dragClass" />
          <scope ilk="function" name="HtmlDragObject" signature="HtmlDragObject()">
            <scope ilk="function" name="createDragNode" signature="createDragNode()" />
            <scope ilk="function" name="onDragStart" signature="onDragStart(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="y" signature="y(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="x" signature="x(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="source" signature="source(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="getConstraints" signature="getConstraints()" />
            <scope ilk="function" name="minX" signature="minX()" />
            <scope ilk="function" name="minY" signature="minY()" />
            <scope ilk="function" name="maxX" signature="maxX()" />
            <scope ilk="function" name="maxY" signature="maxY()" />
            <scope ilk="function" name="updateDragOffset" signature="updateDragOffset()" />
            <scope ilk="function" name="onDragMove" signature="onDragMove(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="setAbsolutePosition" signature="setAbsolutePosition(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope ilk="function" name="onDragEnd" signature="onDragEnd(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="left" signature="left(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="top" signature="top(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="squelchOnClick" signature="squelchOnClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="constrainTo" signature="constrainTo(container)">
              <variable ilk="argument" name="container" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlDragObject" signature="HtmlDragObject()">
              <variable name="dragClone" />
              <variable name="scrollOffset" />
              <variable name="dragStartPosition" />
              <variable name="dragOffset" />
              <variable name="containingBlockPosition" />
              <variable name="dragClone.style.position" />
              <variable name="constraints" />
              <variable name="dragClone" />
              <variable name="scrollOffset" />
              <variable name="dragStartPosition" />
              <variable name="dragOffset" />
              <variable name="containingBlockPosition" />
              <variable name="dragClone.style.position" />
              <variable name="constraints" />
              <variable name="dragClone" />
              <variable name="scrollOffset" />
              <variable name="dragStartPosition" />
              <variable name="dragOffset" />
              <variable name="containingBlockPosition" />
              <variable name="dragClone.style.position" />
              <variable name="constraints" />
              <variable name="domNode.style.top" />
              <variable name="domNode.style.left" />
            </scope>
          </scope>
          <variable name="dragClass" />
          <variable name="opacity" />
          <variable name="createIframe" />
          <variable name="disableX" />
          <variable name="disableY" />
          <scope ilk="function" name="HtmlDropTarget" signature="HtmlDropTarget()">
            <scope ilk="function" name="onDragOver" signature="onDragOver(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="top" signature="top(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="left" signature="left(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="width" signature="width(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="_getNodeUnderMouse" signature="_getNodeUnderMouse(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="createDropIndicator" signature="createDropIndicator()" />
            <scope ilk="function" name="onDragMove" signature="onDragMove(e, dragObjects)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="dragObjects" />
            </scope>
            <scope ilk="function" name="placeIndicator" signature="placeIndicator(e, dragObjects, boxIndex, before)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="dragObjects" />
              <variable ilk="argument" name="boxIndex" />
              <variable ilk="argument" name="before" />
            </scope>
            <scope ilk="function" name="onDragOut" signature="onDragOut(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onDrop" signature="onDrop(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="insert" signature="insert(e, refNode, position)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="refNode" />
              <variable ilk="argument" name="position" />
            </scope>
          </scope>
          <variable name="vertical" />
          <scope classrefs="dojo.dnd.DragManager" ilk="class" name="HtmlDragManager">
            <scope attributes="__ctor__" ilk="function" name="HtmlDragManager" signature="HtmlDragManager()" />
            <variable name="disabled" />
            <variable name="nestedTargets" />
            <variable name="mouseDownTimer" />
            <variable name="dsCounter" />
            <variable name="dsPrefix" />
            <variable name="dropTargetDimensions" />
            <variable name="currentDropTarget" />
            <variable name="previousDropTarget" />
            <variable name="_dragTriggered" />
            <variable name="selectedSources" />
            <variable name="dragObjects" />
            <variable name="currentX" />
            <variable name="currentY" />
            <variable name="lastX" />
            <variable name="lastY" />
            <variable name="mouseDownX" />
            <variable name="mouseDownY" />
            <variable name="threshold" />
            <variable name="dropAcceptable" />
            <scope ilk="function" name="cancelEvent" signature="cancelEvent(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="registerDragSource" signature="registerDragSource(ds)">
              <variable ilk="argument" name="ds" />
            </scope>
            <scope ilk="function" name="unregisterDragSource" signature="unregisterDragSource(ds)">
              <variable ilk="argument" name="ds" />
            </scope>
            <scope ilk="function" name="registerDropTarget" signature="registerDropTarget(dt)">
              <variable ilk="argument" name="dt" />
            </scope>
            <scope ilk="function" name="unregisterDropTarget" signature="unregisterDropTarget(dt)">
              <variable ilk="argument" name="dt" />
            </scope>
            <scope ilk="function" name="getDragSource" signature="getDragSource(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onKeyDown" signature="onKeyDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onMouseUp" signature="onMouseUp(e, cancel)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="cancel" />
            </scope>
            <scope ilk="function" name="onScroll" signature="onScroll()" />
            <scope ilk="function" name="_dragStartDistance" signature="_dragStartDistance(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope ilk="function" name="cacheTargetLocations" signature="cacheTargetLocations()" />
            <scope ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="findBestTarget" signature="findBestTarget(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="isInsideBox" signature="isInsideBox(e, coords)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="coords" />
            </scope>
            <scope ilk="function" name="onMouseOver" signature="onMouseOver(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onMouseOut" signature="onMouseOut(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope ilk="class" name="HtmlDragMove" />
          <scope ilk="function" name="HtmlDragMoveSource" signature="HtmlDragMoveSource()">
            <scope ilk="function" name="onDragStart" signature="onDragStart()" />
            <scope ilk="function" name="onSelected" signature="onSelected()" />
          </scope>
          <scope ilk="function" name="HtmlDragMoveObject" signature="HtmlDragMoveObject()">
            <scope ilk="function" name="onDragEnd" signature="onDragEnd(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onDragStart" signature="onDragStart(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="y" signature="y(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="x" signature="x(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="setAbsolutePosition" signature="setAbsolutePosition(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
          </scope>
          <scope ilk="class" name="Sortable">
            <scope attributes="__ctor__" ilk="function" name="Sortable" signature="Sortable()" />
            <scope ilk="function" name="ondragstart" signature="ondragstart(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope ilk="class" name="TreeDragAndDrop" />
          <scope attributes="__ctor__" ilk="function" name="TreeDragSource" signature="TreeDragSource(node, syncController, type, treeNode)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="syncController" />
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="treeNode" />
            <variable name="controller" />
            <variable name="treeNode" />
            <variable name="savedSelectedNode" />
            <scope ilk="function" name="onDragStart" signature="onDragStart()" />
            <scope ilk="function" name="onDragEnd" signature="onDragEnd(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope attributes="__ctor__" ilk="function" name="TreeDropTarget" signature="TreeDropTarget(domNode, controller, type, treeNode)">
            <variable ilk="argument" name="domNode" />
            <variable ilk="argument" name="controller" />
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="treeNode" />
            <variable name="treeNode" />
            <variable name="controller" />
            <variable name="treeNode.labelNode.style.borderTop" />
            <variable name="treeNode.labelNode.style.borderBottom" />
            <variable name="treeNode.labelNode.style.borderBottom" />
            <variable name="treeNode.labelNode.style.borderTop" />
            <variable name="treeNode.parent" />
            <scope ilk="function" name="showIndicator" signature="showIndicator(position)">
              <variable ilk="argument" name="position" />
            </scope>
            <scope ilk="function" name="hideIndicator" signature="hideIndicator()" />
            <scope ilk="function" name="onDragOver" signature="onDragOver(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="accepts" signature="accepts(dragObjects)">
              <variable ilk="argument" name="dragObjects" />
            </scope>
            <scope ilk="function" name="setAutoExpandTimer" signature="setAutoExpandTimer()" />
            <scope ilk="function" name="getDNDMode" signature="getDNDMode()" />
            <scope ilk="function" name="getAcceptPosition" signature="getAcceptPosition(e, sourceTreeNode)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="sourceTreeNode" />
            </scope>
            <scope ilk="function" name="onDragOut" signature="onDragOut(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="clearAutoExpandTimer" signature="clearAutoExpandTimer()" />
            <scope ilk="function" name="onDragMove" signature="onDragMove(e, dragObjects)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="dragObjects" />
            </scope>
            <scope ilk="function" name="isAdjacentNode" signature="isAdjacentNode(sourceNode, position)">
              <variable ilk="argument" name="sourceNode" />
              <variable ilk="argument" name="position" />
            </scope>
            <scope ilk="function" name="getPosition" signature="getPosition(e, DNDMode)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="DNDMode" />
            </scope>
            <scope ilk="function" name="getTargetParentIndex" signature="getTargetParentIndex(sourceTreeNode, position)">
              <variable ilk="argument" name="sourceTreeNode" />
              <variable ilk="argument" name="position" />
            </scope>
            <scope ilk="function" name="onDrop" signature="onDrop(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <variable name="autoExpandDelay" />
          <variable name="autoExpandTimer" />
          <variable name="position" />
          <variable name="indicatorStyle" />
          <scope attributes="__ctor__" ilk="function" name="TreeDNDController" signature="TreeDNDController(treeController)">
            <variable ilk="argument" name="treeController" />
            <variable name="treeController" />
            <variable name="dragSources" />
            <variable name="dropTargets" />
            <scope ilk="function" name="listenTree" signature="listenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" name="unlistenTree" signature="unlistenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" name="onTreeDestroy" signature="onTreeDestroy(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onCreateDOMNode" signature="onCreateDOMNode(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onAddChild" signature="onAddChild(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onMoveFrom" signature="onMoveFrom(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onMoveTo" signature="onMoveTo(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="registerDNDNode" signature="registerDNDNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="unregisterDNDNode" signature="unregisterDNDNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <scope ilk="class" name="TreeDragAndDropV3" />
          <scope attributes="__ctor__" ilk="function" name="TreeDragSourceV3" signature="TreeDragSourceV3(node, syncController, type, treeNode)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="syncController" />
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="treeNode" />
            <variable name="controller" />
            <variable name="treeNode" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="TreeDropTargetV3" signature="TreeDropTargetV3(domNode, controller, type, treeNode)">
            <variable ilk="argument" name="domNode" />
            <variable ilk="argument" name="controller" />
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="treeNode" />
            <variable name="treeNode" />
            <variable name="controller" />
            <variable name="treeNode.contentNode.style.borderBottom" />
            <variable name="treeNode.contentNode.style.borderTop" />
            <variable name="treeNode.contentNode.style.border" />
            <variable name="treeNode.contentNode.style.width" />
            <variable name="cachedNodeY" />
            <variable name="cachedNodeHeight" />
            <variable name="treeNode.parent" />
            <scope ilk="function" name="showIndicator" signature="showIndicator(position)">
              <variable ilk="argument" name="position" />
            </scope>
            <scope ilk="function" name="hideIndicator" signature="hideIndicator()" />
            <scope ilk="function" name="onDragOver" signature="onDragOver(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="accepts" signature="accepts(dragObjects)">
              <variable ilk="argument" name="dragObjects" />
            </scope>
            <scope ilk="function" name="setAutoExpandTimer" signature="setAutoExpandTimer()" />
            <scope ilk="function" name="getAcceptPosition" signature="getAcceptPosition(e, dragObjects)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="dragObjects" />
            </scope>
            <scope ilk="function" name="onDropEnd" signature="onDropEnd(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onDragOut" signature="onDragOut(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="clearAutoExpandTimer" signature="clearAutoExpandTimer()" />
            <scope ilk="function" name="onDragMove" signature="onDragMove(e, dragObjects)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="dragObjects" />
            </scope>
            <scope ilk="function" name="isAdjacentNode" signature="isAdjacentNode(sourceNode, position)">
              <variable ilk="argument" name="sourceNode" />
              <variable ilk="argument" name="position" />
            </scope>
            <scope ilk="function" name="cacheNodeCoords" signature="cacheNodeCoords()" />
            <scope ilk="function" name="getPosition" signature="getPosition(e, DndMode)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="DndMode" />
            </scope>
            <scope ilk="function" name="getTargetParentIndex" signature="getTargetParentIndex(source, position)">
              <variable ilk="argument" name="source" />
              <variable ilk="argument" name="position" />
            </scope>
            <scope ilk="function" name="onDrop" signature="onDrop(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="getDropHandler" signature="getDropHandler(e, source, targetParent, targetIndex)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="source" />
              <variable ilk="argument" name="targetParent" />
              <variable ilk="argument" name="targetIndex" />
            </scope>
          </scope>
          <variable name="autoExpandDelay" />
          <variable name="autoExpandTimer" />
          <variable name="position" />
          <variable name="indicatorStyle" />
        </variable>
        <variable citdl="Object" name="string">
          <scope ilk="class" name="Builder">
            <scope attributes="__ctor__" ilk="function" name="Builder" signature="Builder(str)">
              <variable ilk="argument" name="str" />
              <variable name="arrConcat" />
              <variable name="length" />
              <variable name="toString" />
              <variable name="append" />
              <variable name="clear" />
              <variable name="remove" />
              <variable name="replace" />
              <variable name="insert" />
            </scope>
            <scope ilk="function" name="valueOf" signature="valueOf()" />
            <scope attributes="__ctor__" ilk="function" name="append" signature="append()">
              <variable name="length" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="clear" signature="clear()">
              <variable name="length" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="remove" signature="remove(f, )">
              <variable ilk="argument" name="f" />
              <variable ilk="argument" name="" />
              <variable name="length" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="replace" signature="replace(o, )">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="" />
              <variable name="length" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="insert" signature="insert(idx, )">
              <variable ilk="argument" name="idx" />
              <variable ilk="argument" name="" />
              <variable name="length" />
            </scope>
          </scope>
          <scope ilk="class" name="common" />
          <scope ilk="function" name="trim" signature="trim(str, wh)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="wh" />
          </scope>
          <scope ilk="function" name="trimStart" signature="trimStart(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="trimEnd" signature="trimEnd(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="repeat" signature="repeat(str, count, separator)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="count" />
            <variable ilk="argument" name="separator" />
          </scope>
          <scope ilk="function" name="pad" signature="pad(str, len, c, dir)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="len" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="dir" />
          </scope>
          <scope ilk="function" name="padLeft" signature="padLeft(str, len, c)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="len" />
            <variable ilk="argument" name="c" />
          </scope>
          <scope ilk="function" name="padRight" signature="padRight(str, len, c)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="len" />
            <variable ilk="argument" name="c" />
          </scope>
          <scope ilk="class" name="extras" />
          <scope ilk="function" name="substituteParams" signature="substituteParams(template, hash)">
            <variable citdl="String" ilk="argument" name="template" />
            <variable ilk="argument" name="hash" />
          </scope>
          <scope ilk="function" name="capitalize" signature="capitalize(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="isBlank" signature="isBlank(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="encodeAscii" signature="encodeAscii(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="escape" signature="escape(type, str)">
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="escapeXml" signature="escapeXml(str, noSingleQuotes)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="noSingleQuotes" />
          </scope>
          <scope ilk="function" name="escapeSql" signature="escapeSql(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="escapeRegExp" signature="escapeRegExp(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="escapeJavaScript" signature="escapeJavaScript(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="escapeString" signature="escapeString(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="summary" signature="summary(str, len)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="len" />
          </scope>
          <scope ilk="function" name="endsWith" signature="endsWith(str, end, ignoreCase)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="end" />
            <variable ilk="argument" name="ignoreCase" />
          </scope>
          <scope ilk="function" name="endsWithAny" signature="endsWithAny(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="startsWith" signature="startsWith(str, start, ignoreCase)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="start" />
            <variable ilk="argument" name="ignoreCase" />
          </scope>
          <scope ilk="function" name="startsWithAny" signature="startsWithAny(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="has" signature="has(str)">
            <variable ilk="argument" name="str" />
          </scope>
          <scope ilk="function" name="normalizeNewlines" signature="normalizeNewlines(text, ewlineChar)">
            <variable ilk="argument" name="text" />
            <variable ilk="argument" name="ewlineChar" />
          </scope>
          <scope ilk="function" name="splitEscaped" signature="splitEscaped(str, harac)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="harac" />
          </scope>
        </variable>
        <variable citdl="Object" name="uuid">
          <scope ilk="class" name="LightweightGenerator">
            <scope ilk="function" name="generate" signature="generate(returnType)">
              <variable ilk="argument" name="returnType" />
            </scope>
          </scope>
          <scope ilk="class" name="NameBasedGenerator">
            <scope ilk="function" name="generate" signature="generate(returnType)">
              <variable ilk="argument" name="returnType" />
            </scope>
          </scope>
          <scope ilk="class" name="NilGenerator">
            <scope ilk="function" name="generate" signature="generate(returnType)">
              <variable ilk="argument" name="returnType" />
            </scope>
          </scope>
          <scope ilk="class" name="RandomGenerator">
            <scope ilk="function" name="generate" signature="generate(returnType)">
              <variable ilk="argument" name="returnType" />
            </scope>
          </scope>
          <scope ilk="class" name="TimeBasedGenerator">
            <scope ilk="function" name="setNode" signature="setNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="getNode" signature="getNode()" />
            <scope ilk="function" name="generate" signature="generate(input)">
              <variable ilk="argument" name="input" />
            </scope>
          </scope>
          <scope ilk="class" name="Uuid">
            <scope attributes="__ctor__" ilk="function" name="Uuid" signature="Uuid(input)">
              <variable ilk="argument" name="input" />
              <variable name="_uuidString" />
              <variable name="_uuidString" />
              <variable name="_versionNumber" />
              <variable name="_nodeString" />
              <variable name="_timestampAsHexString" />
              <variable name="_timestampAsDate" />
            </scope>
            <scope ilk="function" name="compare" signature="compare(uuidOne, uuidTwo, otherUuid)">
              <variable ilk="argument" name="uuidOne" />
              <variable ilk="argument" name="uuidTwo" />
              <variable ilk="argument" name="otherUuid" />
            </scope>
            <scope ilk="function" name="setGenerator" signature="setGenerator(generator)">
              <variable ilk="argument" name="generator" />
            </scope>
            <scope ilk="function" name="getGenerator" signature="getGenerator(generator)">
              <variable ilk="argument" name="generator" />
            </scope>
            <scope ilk="function" name="toString" signature="toString(format)">
              <variable ilk="argument" name="format" />
            </scope>
            <scope ilk="function" name="isEqual" signature="isEqual(otherUuid)">
              <variable ilk="argument" name="otherUuid" />
            </scope>
            <scope ilk="function" name="isValid" signature="isValid()" />
            <scope ilk="function" name="getVariant" signature="getVariant()" />
            <scope ilk="function" name="getVersion" signature="getVersion()" />
            <scope ilk="function" name="getNode" signature="getNode()" />
            <scope ilk="function" name="getTimestamp" signature="getTimestamp(returnType)">
              <variable ilk="argument" name="returnType" />
            </scope>
          </scope>
        </variable>
        <variable citdl="Object" name="io">
          <scope ilk="class" name="BrowserIO" />
          <scope ilk="function" name="checkChildrenForFile" signature="checkChildrenForFile(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="formHasFile" signature="formHasFile(formNode)">
            <variable ilk="argument" name="formNode" />
          </scope>
          <scope ilk="function" name="updateNode" signature="updateNode(node, urlOrArgs)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="urlOrArgs" />
          </scope>
          <scope ilk="function" name="formFilter" signature="formFilter(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="encodeForm" signature="encodeForm(formNode, encoding, formFilter)">
            <variable ilk="argument" name="formNode" />
            <variable ilk="argument" name="encoding" />
            <variable ilk="argument" name="formFilter" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="FormBind" signature="FormBind(args)">
            <variable ilk="argument" name="args" />
            <scope ilk="function" name="init" signature="init(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="onSubmit" signature="onSubmit(form)">
              <variable ilk="argument" name="form" />
            </scope>
            <scope ilk="function" name="submit" signature="submit(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="click" signature="click(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="formFilter" signature="formFilter(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="connect" signature="connect(srcObj, srcFcn, targetFcn)">
              <variable ilk="argument" name="srcObj" />
              <variable ilk="argument" name="srcFcn" />
              <variable ilk="argument" name="targetFcn" />
            </scope>
          </scope>
          <variable name="form" />
          <variable name="bindArgs" />
          <variable name="clickedButton" />
          <variable citdl="Object" name="XMLHTTPTransport">
            <scope ilk="function" name="clearCache" signature="clearCache()" />
            <scope attributes="__ctor__" ilk="function" name="startWatchingInFlight" signature="startWatchingInFlight()">
              <variable name="inFlightTimer" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="watchInFlight" signature="watchInFlight()">
              <variable name="inFlightTimer" />
            </scope>
            <scope ilk="function" name="canHandle" signature="canHandle(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope ilk="function" name="bind" signature="bind(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
          </variable>
          <scope ilk="class" name="IframeIO" />
          <scope ilk="function" name="createIFrame" signature="createIFrame(fname, onloadstr, uri)">
            <variable ilk="argument" name="fname" />
            <variable ilk="argument" name="onloadstr" />
            <variable ilk="argument" name="uri" />
          </scope>
          <variable citdl="Object" name="IframeTransport">
            <scope attributes="__ctor__" ilk="function" name="fireNextRequest" signature="fireNextRequest()">
              <variable name="currentRequest" />
            </scope>
            <scope ilk="function" name="canHandle" signature="canHandle(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope ilk="function" name="bind" signature="bind(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="setUpIframe" signature="setUpIframe()">
              <variable name="iframe" />
            </scope>
            <scope ilk="function" name="iframeOnload" signature="iframeOnload()" />
          </variable>
          <scope ilk="class" name="RepubsubIO" />
          <variable citdl="Object" name="repubsubTranport">
            <scope ilk="function" name="canHandle" signature="canHandle(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope ilk="function" name="bind" signature="bind(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
          </variable>
          <variable citdl="Object" name="repubsub">
            <scope ilk="function" name="getRandStr" signature="getRandStr()" />
            <scope ilk="function" name="parseGetStr" signature="parseGetStr()" />
            <scope ilk="function" name="tunnelCloseCallback" signature="tunnelCloseCallback()" />
            <scope ilk="function" name="receiveEventFromTunnel" signature="receiveEventFromTunnel(evt, srcWindow)">
              <variable ilk="argument" name="evt" />
              <variable ilk="argument" name="srcWindow" />
            </scope>
            <scope ilk="function" name="widenDomain" signature="widenDomain(domainStr)">
              <variable ilk="argument" name="domainStr" />
            </scope>
            <scope ilk="function" name="parseCookie" signature="parseCookie()" />
            <scope ilk="function" name="setCookie" signature="setCookie(keypairs, clobber)">
              <variable ilk="argument" name="keypairs" />
              <variable ilk="argument" name="clobber" />
            </scope>
            <scope ilk="function" name="log" signature="log(str, lvl)">
              <variable ilk="argument" name="str" />
              <variable ilk="argument" name="lvl" />
            </scope>
            <scope ilk="function" name="writeLog" signature="writeLog(str, lvl)">
              <variable ilk="argument" name="str" />
              <variable ilk="argument" name="lvl" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="init" signature="init()">
              <variable name="isInitialized" />
            </scope>
            <scope ilk="function" name="clobber" signature="clobber()" />
            <scope attributes="__ctor__" ilk="function" name="openTunnel" signature="openTunnel()">
              <variable name="rcvNodeName" />
              <variable name="rcvNode" />
              <variable name="sndNodeName" />
              <variable name="sndNode" />
            </scope>
            <scope ilk="function" name="rcvNodeReady" signature="rcvNodeReady()" />
            <scope attributes="__ctor__" ilk="function" name="sndNodeReady" signature="sndNodeReady()">
              <variable name="canSnd" />
            </scope>
            <scope ilk="function" name="statusListener" signature="statusListener(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="dispatch" signature="dispatch(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="subscribe" signature="subscribe(topic, toObj, toFunc, dontTellServer)">
              <variable ilk="argument" name="topic" />
              <variable ilk="argument" name="toObj" />
              <variable ilk="argument" name="toFunc" />
              <variable ilk="argument" name="dontTellServer" />
            </scope>
            <scope ilk="function" name="sendTopicSubToServer" signature="sendTopicSubToServer(topic, str)">
              <variable ilk="argument" name="topic" />
              <variable ilk="argument" name="str" />
            </scope>
            <scope ilk="function" name="unSubscribe" signature="unSubscribe(topic, toObj, toFunc)">
              <variable ilk="argument" name="topic" />
              <variable ilk="argument" name="toObj" />
              <variable ilk="argument" name="toFunc" />
            </scope>
            <scope ilk="function" name="publish" signature="publish(topic, event)">
              <variable ilk="argument" name="topic" />
              <variable ilk="argument" name="event" />
            </scope>
            <scope ilk="function" name="enqueueEventStr" signature="enqueueEventStr(evtStr)">
              <variable ilk="argument" name="evtStr" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="dequeueEvent" signature="dequeueEvent(force)">
              <variable ilk="argument" name="force" />
              <variable name="canSnd" />
            </scope>
          </variable>
          <variable citdl="Object" name="repubsubEvent">
            <scope ilk="function" name="initFromProperties" signature="initFromProperties(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="toGetString" signature="toGetString(noQmark)">
              <variable ilk="argument" name="noQmark" />
            </scope>
          </variable>
          <scope ilk="class" name="RhinoIO" />
          <variable citdl="Object" name="RhinoHTTPTransport">
            <scope ilk="function" name="canHandle" signature="canHandle(req)">
              <variable ilk="argument" name="req" />
            </scope>
            <scope ilk="function" name="bind" signature="bind(req)">
              <variable ilk="argument" name="req" />
            </scope>
          </variable>
          <scope ilk="class" name="ScriptSrcIO" />
          <variable citdl="Object" name="ScriptSrcTransport">
            <scope attributes="__ctor__" ilk="function" name="startWatchingInFlight" signature="startWatchingInFlight()">
              <variable name="inFlightTimer" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="watchInFlight" signature="watchInFlight()">
              <variable name="inFlightTimer" />
            </scope>
            <scope ilk="function" name="canHandle" signature="canHandle(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope ilk="function" name="removeScripts" signature="removeScripts()" />
            <scope ilk="function" name="bind" signature="bind(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
            <scope ilk="function" name="_buildUrl" signature="_buildUrl(url, nameValueArray)">
              <variable ilk="argument" name="url" />
              <variable ilk="argument" name="nameValueArray" />
            </scope>
            <scope ilk="function" name="_attach" signature="_attach(id, url)">
              <variable ilk="argument" name="id" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="_multiAttach" signature="_multiAttach(state, part)">
              <variable ilk="argument" name="state" />
              <variable ilk="argument" name="part" />
            </scope>
            <scope ilk="function" name="_finish" signature="_finish(state, callback, event)">
              <variable ilk="argument" name="state" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="event" />
            </scope>
          </variable>
          <scope ilk="class" name="XhrIframeProxy">
            <scope ilk="function" name="send" signature="send(facade)">
              <variable ilk="argument" name="facade" />
            </scope>
            <scope ilk="function" name="receive" signature="receive(stateId, urlEncodedData)">
              <variable ilk="argument" name="stateId" />
              <variable ilk="argument" name="urlEncodedData" />
            </scope>
            <scope ilk="function" name="clientFrameLoaded" signature="clientFrameLoaded(stateId)">
              <variable ilk="argument" name="stateId" />
            </scope>
            <scope ilk="function" name="destroyState" signature="destroyState(stateId)">
              <variable ilk="argument" name="stateId" />
            </scope>
            <scope ilk="function" name="createFacade" signature="createFacade()" />
          </scope>
          <variable citdl="Object" name="XhrIframeFacade">
            <scope ilk="function" name="open" signature="open(method, uri)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="uri" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="XhrIframeFacade" signature="XhrIframeFacade()">
              <variable name="_method" />
              <variable name="_uri" />
              <variable name="readyState" />
              <variable name="_bodyData" />
              <variable name="readyState" />
              <variable name="_allResponseHeaders" />
            </scope>
            <scope ilk="function" name="setRequestHeader" signature="setRequestHeader(header, value)">
              <variable ilk="argument" name="header" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="send" signature="send(stringData)">
              <variable ilk="argument" name="stringData" />
            </scope>
            <scope ilk="function" name="abort" signature="abort()" />
            <scope ilk="function" name="getAllResponseHeaders" signature="getAllResponseHeaders()" />
            <scope ilk="function" name="getResponseHeader" signature="getResponseHeader(header)">
              <variable ilk="argument" name="header" />
            </scope>
            <scope ilk="function" name="_setResponseHeaders" signature="_setResponseHeaders(allHeaders)">
              <variable ilk="argument" name="allHeaders" />
            </scope>
          </variable>
          <scope ilk="class" name="cometd" />
          <scope ilk="class" name="cookie">
            <scope ilk="function" name="setCookie" signature="setCookie(name, value, days, path, domain, secure)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="days" />
              <variable ilk="argument" name="path" />
              <variable ilk="argument" name="domain" />
              <variable ilk="argument" name="secure" />
            </scope>
            <scope ilk="function" name="getCookie" signature="getCookie(name)">
              <variable ilk="argument" name="name" />
            </scope>
            <scope ilk="function" name="deleteCookie" signature="deleteCookie(name)">
              <variable ilk="argument" name="name" />
            </scope>
            <scope ilk="function" name="setObjectCookie" signature="setObjectCookie(name, obj, days, path, domain, secure, clearCurrent)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="days" />
              <variable ilk="argument" name="path" />
              <variable ilk="argument" name="domain" />
              <variable ilk="argument" name="secure" />
              <variable ilk="argument" name="clearCurrent" />
            </scope>
            <scope ilk="function" name="getObjectCookie" signature="getObjectCookie(name)">
              <variable ilk="argument" name="name" />
            </scope>
            <scope ilk="function" name="isSupported" signature="isSupported()" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="Request" signature="Request(url, mimetype, transport, changeUrl)">
            <variable ilk="argument" name="url" />
            <variable ilk="argument" name="mimetype" />
            <variable ilk="argument" name="transport" />
            <variable ilk="argument" name="changeUrl" />
            <scope ilk="function" name="load" signature="load(type, data, evt)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="error" signature="error(type, error)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="error" />
            </scope>
            <scope ilk="function" name="timeout" signature="timeout(type)">
              <variable ilk="argument" name="type" />
            </scope>
            <scope ilk="function" name="handle" signature="handle()" />
            <scope ilk="function" name="abort" signature="abort()" />
            <scope ilk="function" name="fromKwArgs" signature="fromKwArgs(kwArgs)">
              <variable ilk="argument" name="kwArgs" />
            </scope>
          </scope>
          <variable name="url" />
          <variable name="mimetype" />
          <variable name="method" />
          <variable name="content" />
          <variable name="transport" />
          <variable name="changeUrl" />
          <variable name="formNode" />
          <variable name="sync" />
          <variable name="bindSuccess" />
          <variable name="useCache" />
          <variable name="preventCache" />
          <variable name="timeoutSeconds" />
          <scope attributes="__ctor__" ilk="function" name="Error" signature="Error(msg, type, num)">
            <variable ilk="argument" name="msg" />
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="num" />
            <variable name="message" />
            <variable name="type" />
            <variable name="number" />
          </scope>
          <variable citdl="Object" name="transports">
            <scope ilk="function" name="addTransport" signature="addTransport(name)">
              <variable ilk="argument" name="name" />
            </scope>
          </variable>
          <scope ilk="function" name="bind" signature="bind(request)">
            <variable ilk="argument" name="request" />
          </scope>
          <scope ilk="function" name="queueBind" signature="queueBind(request)">
            <variable ilk="argument" name="request" />
          </scope>
          <scope ilk="function" name="_dispatchNextQueueBind" signature="_dispatchNextQueueBind()" />
          <scope ilk="function" name="argsFromMap" signature="argsFromMap(map, encoding, last)">
            <variable ilk="argument" name="map" />
            <variable ilk="argument" name="encoding" />
            <variable ilk="argument" name="last" />
          </scope>
          <scope ilk="function" name="setIFrameSrc" signature="setIFrameSrc(iframe, src, replace)">
            <variable ilk="argument" name="iframe" />
            <variable ilk="argument" name="src" />
            <variable ilk="argument" name="replace" />
          </scope>
        </variable>
        <scope ilk="class" name="AdapterRegistry">
          <scope attributes="__ctor__" doc="A registry to make contextual calling/searching easier." ilk="function" name="AdapterRegistry" signature="AdapterRegistry(returnWrappers)">
            <variable ilk="argument" name="returnWrappers" />
            <variable name="pairs" />
            <variable name="returnWrappers" />
          </scope>
          <scope doc="register a check function to determine if the wrap function&#xA;or object gets selected" ilk="function" name="register" signature="register(name, check, wrap, directReturn, override)">
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="check" />
            <variable citdl="Function" ilk="argument" name="wrap" />
            <variable ilk="argument" name="directReturn" />
            <variable ilk="argument" name="override" />
          </scope>
          <scope doc="Find an adapter for the given arguments. If no suitable&#xA;adapter is found, throws an exception." ilk="function" name="match" signature="match()" />
          <scope doc="Remove a named adapter from the registry FIXME: this is kind&#xA;of a dumb way to handle this. On a large registry this will&#xA;be slow-ish and we can use the name as a lookup should we&#xA;choose to trade memory for speed." ilk="function" name="unregister" signature="unregister(name)">
            <variable ilk="argument" name="name" />
          </scope>
        </scope>
        <scope ilk="class" name="a11y" />
        <scope classrefs="dojo.Deferred" ilk="class" name="DeferredList">
          <scope attributes="__ctor__" ilk="function" name="DeferredList" signature="DeferredList(list, [fireOnOneCallback], [fireOnOneErrback], [consumeErrors], [canceller])">
            <variable ilk="argument" name="list" />
            <variable citdl="Boolean" ilk="argument" name="fireOnOneCallback" />
            <variable citdl="Boolean" ilk="argument" name="fireOnOneErrback" />
            <variable citdl="Boolean" ilk="argument" name="consumeErrors" />
            <variable citdl="Function" ilk="argument" name="canceller" />
            <variable name="list" />
            <variable name="resultList" />
            <variable name="chain" />
            <variable name="id" />
            <variable name="fired" />
            <variable name="paused" />
            <variable name="results" />
            <variable name="canceller" />
            <variable name="silentlyCancelled" />
            <variable name="finishedCount" />
            <variable name="fireOnOneCallback" />
            <variable name="fireOnOneErrback" />
            <variable name="consumeErrors" />
            <variable name="finishedCount" />
          </scope>
          <scope ilk="function" name="_cbDeferred" signature="_cbDeferred(index, succeeded, result)">
            <variable ilk="argument" name="index" />
            <variable ilk="argument" name="succeeded" />
            <variable ilk="argument" name="result" />
          </scope>
          <scope ilk="function" name="gatherResults" signature="gatherResults(deferredList)">
            <variable ilk="argument" name="deferredList" />
          </scope>
        </scope>
        <variable citdl="Object" name="collections">
          <scope ilk="class" name="ArrayList">
            <scope attributes="__ctor__" doc="Returns a new object of type dojo.collections.ArrayList" ilk="function" name="ArrayList" signature="ArrayList([arr])">
              <variable citdl="Array" ilk="argument" name="arr" />
              <variable name="count" />
              <variable name="add" />
              <variable name="addRange" />
              <variable name="clear" />
              <variable name="clone" />
              <variable name="contains" />
              <variable name="forEach" />
              <variable name="getIterator" />
              <variable name="indexOf" />
              <variable name="insert" />
              <variable name="item" />
              <variable name="remove" />
              <variable name="removeAt" />
              <variable name="reverse" />
              <variable name="sort" />
              <variable name="setByIndex" />
              <variable name="toArray" />
              <variable name="toString" />
            </scope>
            <scope attributes="__ctor__" doc="Add an element to the collection." ilk="function" name="add" signature="add(obj)">
              <variable citdl="Object" ilk="argument" name="obj" />
              <variable name="count" />
            </scope>
            <scope attributes="__ctor__" doc="Add a range of objects to the ArrayList" ilk="function" name="addRange" signature="addRange(a)">
              <variable citdl="Array" ilk="argument" name="a" />
              <variable name="count" />
            </scope>
            <scope attributes="__ctor__" doc="Clear all elements out of the collection, and reset the&#xA;count." ilk="function" name="clear" signature="clear()">
              <variable name="count" />
            </scope>
            <scope doc="Clone the array list dojo.collections.ArrayList" ilk="function" name="clone" returns="dojo.collections.arraylist" signature="clone()" />
            <scope doc="Check to see if the passed object is a member in the&#xA;ArrayList" ilk="function" name="contains" returns="Boolean" signature="contains(obj)">
              <variable citdl="Object" ilk="argument" name="obj" />
            </scope>
            <scope doc="functional iterator, following the mozilla spec." ilk="function" name="forEach" signature="forEach(fn, [scope])">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" ilk="argument" name="scope" />
            </scope>
            <scope doc="Get an Iterator for this object dojo.collections.Iterator" ilk="function" name="getIterator" returns="dojo.collections.iterator" signature="getIterator()" />
            <scope doc="Return the numeric index of the passed object; will return&#xA;-1 if not found." ilk="function" name="indexOf" returns="Number" signature="indexOf(obj)">
              <variable citdl="Object" ilk="argument" name="obj" />
            </scope>
            <scope attributes="__ctor__" doc="Insert the passed object at index i" ilk="function" name="insert" signature="insert(i, obj)">
              <variable citdl="Number" ilk="argument" name="i" />
              <variable citdl="Object" ilk="argument" name="obj" />
              <variable name="count" />
            </scope>
            <scope doc="return the element at index i object" ilk="function" name="item" returns="Object" signature="item(i)">
              <variable citdl="Number" ilk="argument" name="i" />
            </scope>
            <scope attributes="__ctor__" doc="Look for the passed object, and if found, remove it from the&#xA;internal array." ilk="function" name="remove" signature="remove(obj)">
              <variable citdl="Object" ilk="argument" name="obj" />
              <variable name="count" />
            </scope>
            <scope attributes="__ctor__" doc="return an array with function applied to all elements" ilk="function" name="removeAt" signature="removeAt(i)">
              <variable citdl="Number" ilk="argument" name="i" />
              <variable name="count" />
            </scope>
            <scope doc="Reverse the internal array" ilk="function" name="reverse" signature="reverse()" />
            <scope doc="sort the internal array" ilk="function" name="sort" signature="sort([fn])">
              <variable citdl="Function" ilk="argument" name="fn" />
            </scope>
            <scope attributes="__ctor__" doc="Set an element in the array by the passed index." ilk="function" name="setByIndex" signature="setByIndex(i, obj)">
              <variable citdl="Number" ilk="argument" name="i" />
              <variable citdl="Object" ilk="argument" name="obj" />
              <variable name="count" />
            </scope>
            <scope doc="Return a new array with all of the items of the internal&#xA;array concatenated." ilk="function" name="toArray" signature="toArray()" />
            <scope doc="implementation of toString, follows [].toString();" ilk="function" name="toString" signature="toString(delim)">
              <variable citdl="String" ilk="argument" name="delim" />
            </scope>
          </scope>
          <scope ilk="class" name="BinaryTree">
            <scope attributes="__ctor__" ilk="function" name="BinaryTree" signature="BinaryTree(data)">
              <variable ilk="argument" name="data" />
              <variable name="value" />
              <variable name="right" />
              <variable name="left" />
              <variable name="clone" />
              <variable name="compare" />
              <variable name="compareData" />
              <variable name="add" />
              <variable name="clear" />
              <variable name="count" />
              <variable name="contains" />
              <variable name="deleteData" />
              <variable name="getIterator" />
              <variable name="search" />
              <variable name="toString" />
              <variable name="root" />
            </scope>
            <scope ilk="function" name="clone" signature="clone()" />
            <scope ilk="function" name="compare" signature="compare(n)">
              <variable ilk="argument" name="n" />
            </scope>
            <scope ilk="function" name="compareData" signature="compareData(d)">
              <variable ilk="argument" name="d" />
            </scope>
            <scope ilk="function" name="add" signature="add(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="clear" signature="clear()">
              <variable name="count" />
            </scope>
            <scope ilk="function" name="contains" signature="contains(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" name="deleteData" signature="deleteData(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" name="getIterator" signature="getIterator()" />
            <scope ilk="function" name="search" signature="search(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" name="toString" signature="toString(order, sep)">
              <variable ilk="argument" name="order" />
              <variable ilk="argument" name="sep" />
            </scope>
          </scope>
          <scope ilk="class" name="Collections" />
          <scope attributes="__ctor__" doc="return an object of type dojo.collections.DictionaryEntry" ilk="function" name="DictionaryEntry" signature="DictionaryEntry(k, v)">
            <variable citdl="String" ilk="argument" name="k" />
            <variable citdl="Object" ilk="argument" name="v" />
            <variable name="key" />
            <variable name="value" />
            <variable name="valueOf">
              <scope attributes="__ctor__" ilk="function" name="valueOf" returns="Object" signature="valueOf()" />
            </variable>
            <variable name="toString">
              <scope attributes="__ctor__" ilk="function" name="toString" returns="String" signature="toString()" />
            </variable>
          </scope>
          <scope attributes="__ctor__" doc="return an object of type dojo.collections.Iterator" ilk="function" name="Iterator" signature="Iterator(arr)">
            <variable citdl="Array" ilk="argument" name="arr" />
            <variable name="element" />
            <variable name="atEnd">
              <scope attributes="__ctor__" doc="Test to see if the internal cursor has reached the end of&#xA;the internal collection." ilk="function" name="atEnd" returns="Boolean" signature="atEnd()" />
            </variable>
            <variable name="get">
              <scope attributes="__ctor__" doc="Test to see if the internal cursor has reached the end of&#xA;the internal collection." ilk="function" name="get" returns="Object" signature="get()">
                <variable name="element" />
              </scope>
            </variable>
            <variable name="map">
              <scope attributes="__ctor__" doc="Functional iteration with optional scope." ilk="function" name="map" returns="Array" signature="map(fn, [scope])">
                <variable citdl="Function" ilk="argument" name="fn" />
                <variable citdl="Object" ilk="argument" name="scope" />
              </scope>
            </variable>
            <variable name="reset">
              <scope attributes="__ctor__" doc="reset the internal cursor." ilk="function" name="reset" signature="reset()">
                <variable name="element" />
              </scope>
            </variable>
          </scope>
          <scope attributes="__ctor__" doc="return an object of type dojo.collections.DictionaryIterator&#xA;Create an indexing array" ilk="function" name="DictionaryIterator" signature="DictionaryIterator(obj)">
            <variable citdl="Object" ilk="argument" name="obj" />
            <variable name="element" />
            <variable name="atEnd">
              <scope attributes="__ctor__" doc="Test to see if the internal cursor has reached the end of&#xA;the internal collection." ilk="function" name="atEnd" returns="Boolean" signature="atEnd()" />
            </variable>
            <variable name="get">
              <scope attributes="__ctor__" doc="Test to see if the internal cursor has reached the end of&#xA;the internal collection." ilk="function" name="get" returns="Object" signature="get()">
                <variable name="element" />
              </scope>
            </variable>
            <variable name="map">
              <scope attributes="__ctor__" doc="Functional iteration with optional scope." ilk="function" name="map" returns="Array" signature="map(fn, [scope])">
                <variable citdl="Function" ilk="argument" name="fn" />
                <variable citdl="Object" ilk="argument" name="scope" />
              </scope>
            </variable>
            <variable name="reset">
              <scope attributes="__ctor__" doc="reset the internal cursor." ilk="function" name="reset" signature="reset()">
                <variable name="element" />
              </scope>
            </variable>
          </scope>
          <scope ilk="class" name="Dictionary">
            <scope attributes="__ctor__" doc="Returns an object of type dojo.collections.Dictionary" ilk="function" name="Dictionary" signature="Dictionary([dictionary])">
              <variable citdl="dojo.collections.dictionary" ilk="argument" name="dictionary" />
              <variable name="count" />
              <variable name="add" />
              <variable name="clear" />
              <variable name="clone" />
              <variable name="contains" />
              <variable name="containsValue" />
              <variable name="entry" />
              <variable name="forEach" />
              <variable name="getKeyList" />
              <variable name="getValueList" />
              <variable name="item" />
              <variable name="getIterator" />
              <variable name="remove" />
            </scope>
            <scope doc="Add a new item to the Dictionary." ilk="function" name="add" signature="add(k, v)">
              <variable citdl="String" ilk="argument" name="k" />
              <variable citdl="Object" ilk="argument" name="v" />
            </scope>
            <scope attributes="__ctor__" doc="Clears the internal dictionary." ilk="function" name="clear" signature="clear()">
              <variable name="count" />
            </scope>
            <scope doc="Returns a new instance of dojo.collections.Dictionary; note&#xA;the the dictionary is a clone but items might not be." ilk="function" name="clone" returns="dojo.collections.dictionary" signature="clone()" />
            <scope doc="Check to see if the dictionary has an entry at key &quot;k&quot;." ilk="function" name="containsKey" returns="Boolean" signature="containsKey(k)">
              <variable citdl="String" ilk="argument" name="k" />
            </scope>
            <scope doc="Check to see if the dictionary has an entry with value &quot;v&quot;." ilk="function" name="containsValue" returns="Boolean" signature="containsValue(v)">
              <variable citdl="Object" ilk="argument" name="v" />
            </scope>
            <scope doc="Accessor method; similar to dojo.collections.Dictionary.item&#xA;but returns the actual Entry object." ilk="function" name="entry" returns="dojo.collections.dictionaryentry" signature="entry(k)">
              <variable citdl="String" ilk="argument" name="k" />
            </scope>
            <scope doc="functional iterator, following the mozilla spec." ilk="function" name="forEach" signature="forEach(fn, [scope])">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" ilk="argument" name="scope" />
            </scope>
            <scope doc="Returns an array of the keys in the dictionary." ilk="function" name="getKeyList" signature="getKeyList()" />
            <scope doc="Returns an array of the values in the dictionary." ilk="function" name="getValueList" signature="getValueList()" />
            <scope doc="Accessor method." ilk="function" name="item" returns="Object" signature="item(k)">
              <variable citdl="String" ilk="argument" name="k" />
            </scope>
            <scope doc="Gets a dojo.collections.DictionaryIterator for iteration&#xA;purposes." ilk="function" name="getIterator" returns="dojo.collections.dictionaryiterator" signature="getIterator()" />
            <scope doc="Removes the item at k from the internal collection." ilk="function" name="remove" returns="Boolean" signature="remove(k)">
              <variable citdl="String" ilk="argument" name="k" />
            </scope>
          </scope>
          <scope ilk="class" name="Graph">
            <scope attributes="__ctor__" ilk="function" name="Graph" signature="Graph(nodes)">
              <variable ilk="argument" name="nodes" />
              <variable name="key" />
              <variable name="data" />
              <variable name="neighbors" />
              <variable name="addDirected" />
              <variable name="element" />
              <variable name="atEnd" />
              <variable name="get" />
              <variable name="map" />
              <variable name="reset" />
              <variable name="add" />
              <variable name="clear" />
              <variable name="containsKey" />
              <variable name="getIterator" />
              <variable name="item" />
              <variable name="remove" />
              <variable name="neighbor" />
              <variable name="cost" />
              <variable name="nodes" />
              <variable name="count" />
              <variable name="addNode" />
              <variable name="addDirectedEdge" />
              <variable name="addUndirectedEdge" />
              <variable name="contains" />
            </scope>
            <scope ilk="function" name="addDirected" signature="addDirected()" />
            <scope ilk="function" name="atEnd" signature="atEnd()" />
            <scope attributes="__ctor__" ilk="function" name="get" returns="Object" signature="get()">
              <variable name="element" />
            </scope>
            <scope ilk="function" name="map" returns="Array" signature="map(fn, [scope])">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" ilk="argument" name="scope" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="reset" signature="reset()">
              <variable name="element" />
            </scope>
            <scope ilk="function" name="add" signature="add(node, o)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="o" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="clear" signature="clear()">
              <variable name="count" />
            </scope>
            <scope ilk="function" name="containsKey" signature="containsKey(key, k)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="k" />
            </scope>
            <scope ilk="function" name="getIterator" signature="getIterator()" />
            <scope ilk="function" name="item" signature="item(key, i)">
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="i" />
            </scope>
            <scope ilk="function" name="remove" signature="remove(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="addNode" signature="addNode()" />
            <scope ilk="function" name="addDirectedEdge" signature="addDirectedEdge(uKey, vKey, cost)">
              <variable ilk="argument" name="uKey" />
              <variable ilk="argument" name="vKey" />
              <variable ilk="argument" name="cost" />
            </scope>
            <scope ilk="function" name="addUndirectedEdge" signature="addUndirectedEdge(uKey, vKey, cost)">
              <variable ilk="argument" name="uKey" />
              <variable ilk="argument" name="vKey" />
              <variable ilk="argument" name="cost" />
            </scope>
            <scope ilk="function" name="contains" signature="contains(n)">
              <variable ilk="argument" name="n" />
            </scope>
          </scope>
          <scope ilk="class" name="Queue">
            <scope attributes="__ctor__" doc="return an object of type dojo.collections.Queue" ilk="function" name="Queue" signature="Queue([arr])">
              <variable citdl="Array" ilk="argument" name="arr" />
              <variable name="count" />
              <variable name="clear" />
              <variable name="clone" />
              <variable name="contains" />
              <variable name="copyTo" />
              <variable name="dequeue" />
              <variable name="enqueue" />
              <variable name="forEach" />
              <variable name="getIterator" />
              <variable name="peek" />
              <variable name="toArray" />
            </scope>
            <scope attributes="__ctor__" doc="clears the internal collection" ilk="function" name="clear" signature="clear()">
              <variable name="count" />
            </scope>
            <scope doc="creates a new Queue based on this one dojo.collections.Queue" ilk="function" name="clone" returns="dojo.collections.queue" signature="clone()" />
            <scope doc="Check to see if the passed object is an element in this&#xA;queue" ilk="function" name="contains" returns="Boolean" signature="contains(o)">
              <variable citdl="Object" ilk="argument" name="o" />
            </scope>
            <scope doc="Copy the contents of this queue into the passed array at&#xA;index i." ilk="function" name="copyTo" signature="copyTo(arr, i)">
              <variable citdl="Array" ilk="argument" name="arr" />
              <variable citdl="Number" ilk="argument" name="i" />
            </scope>
            <scope attributes="__ctor__" doc="shift the first element off the queue and return it" ilk="function" name="dequeue" returns="Object" signature="dequeue()">
              <variable name="count" />
            </scope>
            <scope attributes="__ctor__" doc="put the passed object at the end of the queue" ilk="function" name="enqueue" signature="enqueue(o)">
              <variable citdl="Object" ilk="argument" name="o" />
              <variable name="count" />
            </scope>
            <scope doc="functional iterator, following the mozilla spec." ilk="function" name="forEach" signature="forEach(fn, [scope])">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" ilk="argument" name="scope" />
            </scope>
            <scope doc="get an Iterator based on this queue." ilk="function" name="getIterator" returns="dojo.collections.iterator" signature="getIterator()" />
            <scope doc="get the next element in the queue without altering the&#xA;queue." ilk="function" name="peek" signature="peek()" />
            <scope doc="return an array based on the internal array of the queue." ilk="function" name="toArray" signature="toArray()" />
          </scope>
          <scope ilk="class" name="Set">
            <scope doc="Return the union of the two passed sets." ilk="function" name="union" returns="dojo.collections.arraylist" signature="union(setA, setB)">
              <variable citdl="Array" ilk="argument" name="setA" />
              <variable citdl="Array" ilk="argument" name="setB" />
            </scope>
            <scope doc="Return the intersection of the two passed sets." ilk="function" name="intersection" returns="dojo.collections.arraylist" signature="intersection(setA, setB)">
              <variable citdl="Array" ilk="argument" name="setA" />
              <variable citdl="Array" ilk="argument" name="setB" />
            </scope>
            <scope doc="Returns everything in setA that is not in setB." ilk="function" name="difference" returns="dojo.collections.arraylist" signature="difference(setA, setB)">
              <variable citdl="Array" ilk="argument" name="setA" />
              <variable citdl="Array" ilk="argument" name="setB" />
            </scope>
            <scope doc="Returns if set B is a subset of set A." ilk="function" name="isSubSet" returns="Boolean" signature="isSubSet(setA, setB)">
              <variable citdl="Array" ilk="argument" name="setA" />
              <variable citdl="Array" ilk="argument" name="setB" />
            </scope>
            <scope doc="Returns if set B is a superset of set A." ilk="function" name="isSuperSet" returns="Boolean" signature="isSuperSet(setA, setB)">
              <variable citdl="Array" ilk="argument" name="setA" />
              <variable citdl="Array" ilk="argument" name="setB" />
            </scope>
          </scope>
          <scope ilk="class" name="SkipList">
            <scope attributes="__ctor__" ilk="function" name="SkipList" signature="SkipList()">
              <variable name="value" />
              <variable name="height" />
              <variable name="nodes" />
              <variable name="compare" />
              <variable name="incrementHeight" />
              <variable name="decrementHeight" />
              <variable name="item" />
              <variable name="element" />
              <variable name="atEnd" />
              <variable name="get" />
              <variable name="reset" />
              <variable name="head" />
              <variable name="count" />
              <variable name="add" />
              <variable name="contains" />
              <variable name="getIterator" />
              <variable name="remove" />
              <variable name="resetComparisons" />
            </scope>
            <scope ilk="function" name="compare" signature="compare(val)">
              <variable ilk="argument" name="val" />
            </scope>
            <scope ilk="function" name="incrementHeight" signature="incrementHeight()" />
            <scope ilk="function" name="decrementHeight" signature="decrementHeight()" />
            <scope ilk="function" name="item" signature="item(i)">
              <variable ilk="argument" name="i" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="atEnd" signature="atEnd()">
              <variable name="element" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="get" signature="get()">
              <variable name="element" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="reset" signature="reset()">
              <variable name="element" />
            </scope>
            <scope ilk="function" name="add" signature="add(val)">
              <variable ilk="argument" name="val" />
            </scope>
            <scope ilk="function" name="contains" signature="contains(val)">
              <variable ilk="argument" name="val" />
            </scope>
            <scope ilk="function" name="getIterator" signature="getIterator()" />
            <scope ilk="function" name="remove" signature="remove(val)">
              <variable ilk="argument" name="val" />
            </scope>
            <scope ilk="function" name="resetComparisons" signature="resetComparisons()" />
          </scope>
          <scope ilk="class" name="SortedList">
            <scope attributes="__ctor__" doc="creates a collection that acts like a dictionary but is also&#xA;internally sorted. Note that the act of adding any elements&#xA;forces an internal resort, making this object potentially&#xA;slow." ilk="function" name="SortedList" signature="SortedList([dictionary])">
              <variable citdl="Object" ilk="argument" name="dictionary" />
              <variable name="count" />
              <variable name="add" />
              <variable name="clear" />
              <variable name="clone" />
              <variable name="contains" />
              <variable name="containsValue" />
              <variable name="copyTo" />
              <variable name="entry" />
              <variable name="forEach" />
              <variable name="getByIndex" />
              <variable name="getIterator" />
              <variable name="getKey" />
              <variable name="getKeyList" />
              <variable name="getValueList" />
              <variable name="indexOfKey" />
              <variable name="indexOfValue" />
              <variable name="item" />
              <variable name="remove" />
              <variable name="removeAt" />
              <variable name="replace" />
              <variable name="setByIndex" />
            </scope>
            <scope attributes="__ctor__" doc="add the passed value to the dictionary at location k" ilk="function" name="add" signature="add(k, * object */v)">
              <variable citdl="String" ilk="argument" name="k" />
              <variable ilk="argument" name="* object */v" />
              <variable name="count" />
            </scope>
            <scope attributes="__ctor__" doc="clear the internal collections" ilk="function" name="clear" signature="clear()">
              <variable name="count" />
            </scope>
            <scope doc="create a clone of this sorted list&#xA;dojo.collections.SortedList" ilk="function" name="clone" returns="dojo.collections.sortedlist" signature="clone()" />
            <scope doc="Check to see if the list has a location k" ilk="function" name="containsKey" returns="Boolean" signature="containsKey(k)">
              <variable citdl="String" ilk="argument" name="k" />
            </scope>
            <scope doc="Check to see if this list contains the passed object" ilk="function" name="containsValue" returns="Boolean" signature="containsValue(o)">
              <variable citdl="Object" ilk="argument" name="o" />
            </scope>
            <scope doc="copy the contents of the list into array arr at index i" ilk="function" name="copyTo" signature="copyTo(arr, i)">
              <variable citdl="Array" ilk="argument" name="arr" />
              <variable citdl="Number" ilk="argument" name="i" />
            </scope>
            <scope doc="return the object at location k&#xA;dojo.collections.DictionaryEntry" ilk="function" name="entry" returns="dojo.collections.dictionaryentry" signature="entry(k)">
              <variable citdl="String" ilk="argument" name="k" />
            </scope>
            <scope doc="functional iterator, following the mozilla spec." ilk="function" name="forEach" signature="forEach(fn, [scope])">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" ilk="argument" name="scope" />
            </scope>
            <scope doc="return the item at index i object" ilk="function" name="getByIndex" returns="Object" signature="getByIndex(i)">
              <variable citdl="Number" ilk="argument" name="i" />
            </scope>
            <scope doc="get an iterator for this object&#xA;dojo.collections.DictionaryIterator" ilk="function" name="getIterator" returns="dojo.collections.dictionaryiterator" signature="getIterator()" />
            <scope doc="return the key of the item at index i" ilk="function" name="getKey" signature="getKey(i)">
              <variable citdl="Number" ilk="argument" name="i" />
            </scope>
            <scope doc="return an array of the keys set in this list" ilk="function" name="getKeyList" returns="Array" signature="getKeyList()" />
            <scope doc="return an array of values in this list" ilk="function" name="getValueList" returns="Array" signature="getValueList()" />
            <scope doc="return the index of the passed key." ilk="function" name="indexOfKey" returns="Number" signature="indexOfKey(k)">
              <variable citdl="String" ilk="argument" name="k" />
            </scope>
            <scope doc="return the first index of object o" ilk="function" name="indexOfValue" returns="Number" signature="indexOfValue(o)">
              <variable citdl="Object" ilk="argument" name="o" />
            </scope>
            <scope doc="return the value of the object at location k." ilk="function" name="item" returns="Object" signature="item(k)">
              <variable citdl="String" ilk="argument" name="k" />
            </scope>
            <scope attributes="__ctor__" doc="remove the item at location k and rebuild the internal&#xA;collections." ilk="function" name="remove" signature="remove(k)">
              <variable citdl="String" ilk="argument" name="k" />
              <variable name="count" />
            </scope>
            <scope attributes="__ctor__" doc="remove the item at index i, and rebuild the internal&#xA;collections." ilk="function" name="removeAt" signature="removeAt(i)">
              <variable citdl="Number" ilk="argument" name="i" />
              <variable name="count" />
            </scope>
            <scope doc="Replace an existing item if it&apos;s there, and add a new one if&#xA;not." ilk="function" name="replace" returns="Boolean" signature="replace(k, v)">
              <variable citdl="String" ilk="argument" name="k" />
              <variable citdl="Object" ilk="argument" name="v" />
            </scope>
            <scope attributes="__ctor__" doc="set an item by index" ilk="function" name="setByIndex" signature="setByIndex(i, o)">
              <variable citdl="Number" ilk="argument" name="i" />
              <variable citdl="Object" ilk="argument" name="o" />
              <variable name="count" />
            </scope>
          </scope>
          <scope ilk="class" name="Stack">
            <scope attributes="__ctor__" doc="returns an object of type dojo.collections.Stack" ilk="function" name="Stack" signature="Stack([arr])">
              <variable citdl="Array" ilk="argument" name="arr" />
              <variable name="count" />
              <variable name="clear" />
              <variable name="clone" />
              <variable name="contains" />
              <variable name="copyTo" />
              <variable name="forEach" />
              <variable name="getIterator" />
              <variable name="peek" />
              <variable name="pop" />
              <variable name="push" />
              <variable name="toArray" />
            </scope>
            <scope attributes="__ctor__" doc="Clear the internal array and reset the count" ilk="function" name="clear" signature="clear()">
              <variable name="count" />
            </scope>
            <scope doc="Create and return a clone of this Stack" ilk="function" name="clone" signature="clone()" />
            <scope doc="check to see if the stack contains object o" ilk="function" name="contains" returns="Boolean" signature="contains(o)">
              <variable citdl="Object" ilk="argument" name="o" />
            </scope>
            <scope doc="copy the stack into array arr at index i" ilk="function" name="copyTo" signature="copyTo(arr, i)">
              <variable citdl="Array" ilk="argument" name="arr" />
              <variable citdl="Number" ilk="argument" name="i" />
            </scope>
            <scope doc="functional iterator, following the mozilla spec." ilk="function" name="forEach" signature="forEach(fn, [scope])">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" ilk="argument" name="scope" />
            </scope>
            <scope doc="get an iterator for this collection&#xA;dojo.collections.Iterator" ilk="function" name="getIterator" returns="dojo.collections.iterator" signature="getIterator()" />
            <scope doc="Return the next item without altering the stack itself." ilk="function" name="peek" returns="Object" signature="peek()" />
            <scope attributes="__ctor__" doc="pop and return the next item on the stack" ilk="function" name="pop" returns="Object" signature="pop()">
              <variable name="count" />
            </scope>
            <scope attributes="__ctor__" doc="Push object o onto the stack" ilk="function" name="push" signature="push(o)">
              <variable citdl="Object" ilk="argument" name="o" />
              <variable name="count" />
            </scope>
            <scope doc="create and return an array based on the internal collection&#xA;array" ilk="function" name="toArray" returns="Array" signature="toArray()" />
          </scope>
        </variable>
        <variable citdl="Object" name="animation">
          <scope ilk="class" name="Animation">
            <scope attributes="__ctor__" doc="Animation object iterates a set of numbers over a curve for&#xA;a given amount of time, calling &apos;onAnimate&apos; at each step." ilk="function" name="Animation" signature="Animation(curve, duration, [accel], [repeatCount], [rate])">
              <variable citdl="dojo.math.curves.*" ilk="argument" name="curve" />
              <variable citdl="Number" ilk="argument" name="duration" />
              <variable citdl="Number" ilk="argument" name="accel" />
              <variable citdl="Number" ilk="argument" name="repeatCount" />
              <variable citdl="Number" ilk="argument" name="rate" />
              <variable name="rate" />
            </scope>
            <variable name="curve" />
            <variable name="duration" />
            <variable name="repeatCount" />
            <variable name="accel" />
            <variable name="onBegin" />
            <variable name="onAnimate" />
            <variable name="onEnd" />
            <variable name="onPlay" />
            <variable name="onPause" />
            <variable name="onStop" />
            <variable name="handler" />
            <variable name="_animSequence" />
            <variable name="_startTime" />
            <variable name="_endTime" />
            <variable name="_lastFrame" />
            <variable name="_timer" />
            <variable name="_percent" />
            <variable name="_active" />
            <variable name="_paused" />
            <variable name="_startRepeatCount" />
            <scope doc="Play the animation. goToStart: If true, will restart the&#xA;animation from the beginning." ilk="function" name="play" signature="play([gotoStart])">
              <variable citdl="Boolean" ilk="argument" name="gotoStart" />
            </scope>
            <scope doc="Temporarily stop the animation, leaving the play counter at&#xA;the current location." ilk="function" name="pause" signature="pause()" />
            <scope doc="Toggle between play and paused states." ilk="function" name="playPause" signature="playPause()" />
            <scope doc="Set the play counter at a certain point in the animation." ilk="function" name="gotoPercent" signature="gotoPercent(pct, andPlay)">
              <variable citdl="Number" ilk="argument" name="pct" />
              <variable citdl="Boolean" ilk="argument" name="andPlay" />
            </scope>
            <scope doc="Stop the animation." ilk="function" name="stop" signature="stop([gotoEnd])">
              <variable citdl="Boolean" ilk="argument" name="gotoEnd" />
            </scope>
            <scope doc="Return the status of the animation." ilk="function" name="status" returns="String" signature="status()" />
            <scope doc="Perform once &apos;cycle&apos; or step of the animation." ilk="function" name="_cycle" signature="_cycle()" />
          </scope>
          <scope ilk="class" name="AnimationEvent">
            <scope attributes="__ctor__" doc="Event sent at various points during an Animation." ilk="function" name="AnimationEvent" signature="AnimationEvent(animation, type, coords[], startTime, currentTime, endTime, duration, percent, [fps])">
              <variable citdl="dojo.animation.animation" ilk="argument" name="animation" />
              <variable citdl="String" ilk="argument" name="type" />
              <variable citdl="Array" ilk="argument" name="coords" />
              <variable citdl="Number" ilk="argument" name="startTime" />
              <variable citdl="Number" ilk="argument" name="currentTime" />
              <variable citdl="Number" ilk="argument" name="endTime" />
              <variable citdl="Number" ilk="argument" name="duration" />
              <variable citdl="Number" ilk="argument" name="percent" />
              <variable citdl="Number" ilk="argument" name="fps" />
              <variable name="type" />
              <variable name="animation" />
              <variable name="coords" />
              <variable name="x" />
              <variable name="y" />
              <variable name="z" />
              <variable name="startTime" />
              <variable name="currentTime" />
              <variable name="endTime" />
              <variable name="duration" />
              <variable name="percent" />
              <variable name="fps" />
            </scope>
          </scope>
          <scope ilk="class" name="AnimationSequence">
            <scope attributes="__ctor__" doc="Sequence of Animations, played one after the other." ilk="function" name="AnimationSequence" signature="AnimationSequence([repeatCount])">
              <variable citdl="Number" ilk="argument" name="repeatCount" />
            </scope>
            <variable name="repeatCount" />
            <variable name="_anims" />
            <variable name="_currAnim" />
            <variable name="onBegin" />
            <variable name="onEnd" />
            <variable name="onNext" />
            <variable name="handler" />
            <scope doc="Add one or more Animations to the sequence." ilk="function" name="add" signature="add()" />
            <scope doc="Remove one particular animation from the sequence. amim:&#xA;Animation to remove." ilk="function" name="remove" signature="remove(anim)">
              <variable citdl="dojo.animation.animation" ilk="argument" name="anim" />
            </scope>
            <scope doc="Remove all animations from the sequence." ilk="function" name="removeAll" signature="removeAll()" />
            <scope doc="Remove all animations from the sequence." ilk="function" name="clear" signature="clear()" />
            <scope doc="Play the animation sequence." ilk="function" name="play" signature="play([gotoStart])">
              <variable citdl="Boolean" ilk="argument" name="gotoStart" />
            </scope>
            <scope doc="Play the next animation in the sequence." ilk="function" name="type" signature="type()" />
            <scope doc="temporarily stop the current animation." ilk="function" name="pause" signature="pause()" />
            <scope doc="Toggle between play and paused states." ilk="function" name="playPause" signature="playPause()" />
            <scope doc="Stop the current animation." ilk="function" name="stop" signature="stop()" />
            <scope doc="Return the status of the current animation." ilk="function" name="status" signature="status()" />
            <scope doc="Set the current animation." ilk="function" name="_setCurrent" signature="_setCurrent(anim)">
              <variable citdl="dojo.animation.animation" ilk="argument" name="anim" />
            </scope>
            <scope doc="Play the next animation in the sequence." ilk="function" name="_playNext" signature="_playNext()" />
          </scope>
          <scope ilk="class" name="Timer" />
        </variable>
        <scope ilk="class" name="Deferred">
          <scope attributes="__ctor__" ilk="function" name="Deferred" signature="Deferred(canceller)">
            <variable ilk="argument" name="canceller" />
            <variable name="chain" />
            <variable name="id" />
            <variable name="fired" />
            <variable name="paused" />
            <variable name="results" />
            <variable name="canceller" />
            <variable name="silentlyCancelled" />
            <variable name="fired" />
            <variable name="fired" />
            <variable name="silentlyCancelled" />
            <variable name="paused" />
            <variable name="fired" />
            <variable name="silentlyCancelled" />
            <variable name="fired" />
          </scope>
          <variable name="toString" />
          <variable name="_nextId" />
          <scope ilk="function" name="getFunctionFromArgs" signature="getFunctionFromArgs()" />
          <scope ilk="function" name="makeCalled" signature="makeCalled()" />
          <scope ilk="function" name="repr" signature="repr()" />
          <scope ilk="function" name="cancel" signature="cancel()" />
          <scope ilk="function" name="_pause" signature="_pause()" />
          <scope ilk="function" name="_unpause" signature="_unpause()" />
          <scope ilk="function" name="_continue" signature="_continue(res)">
            <variable ilk="argument" name="res" />
          </scope>
          <scope ilk="function" name="_resback" signature="_resback(res)">
            <variable ilk="argument" name="res" />
          </scope>
          <scope ilk="function" name="_check" signature="_check()" />
          <scope ilk="function" name="callback" signature="callback(res)">
            <variable ilk="argument" name="res" />
          </scope>
          <scope ilk="function" name="errback" signature="errback(res)">
            <variable ilk="argument" name="res" />
          </scope>
          <scope ilk="function" name="addBoth" signature="addBoth(cb, cbfn)">
            <variable ilk="argument" name="cb" />
            <variable ilk="argument" name="cbfn" />
          </scope>
          <scope ilk="function" name="addCallback" signature="addCallback(cb, cbfn)">
            <variable ilk="argument" name="cb" />
            <variable ilk="argument" name="cbfn" />
          </scope>
          <scope ilk="function" name="addErrback" signature="addErrback(cb, cbfn)">
            <variable ilk="argument" name="cb" />
            <variable ilk="argument" name="cbfn" />
          </scope>
          <scope ilk="function" name="addCallbacks" signature="addCallbacks(cb, eb)">
            <variable ilk="argument" name="cb" />
            <variable ilk="argument" name="eb" />
          </scope>
          <scope ilk="function" name="_fire" signature="_fire()" />
        </scope>
        <scope classrefs="dojo.iCalendar.Component" ilk="class" name="iCalendar">
          <scope doc="Parse text of an iCalendar and return an array of iCalendar&#xA;objects" ilk="function" name="fromText" signature="fromText(text)">
            <variable citdl="String" ilk="argument" name="text" />
          </scope>
          <scope attributes="__ctor__" doc="A component is the basic container of all this stuff." ilk="function" name="Component" signature="Component(body)">
            <variable citdl="String" ilk="argument" name="body" />
            <variable name="name" />
            <variable name="properties" />
            <variable name="components" />
          </scope>
          <scope attributes="__ctor__" doc="A single property of a component." ilk="function" name="Property" signature="Property(prop)">
            <variable ilk="argument" name="prop" />
            <variable name="name" />
            <variable name="group" />
            <variable name="params" />
            <variable name="value" />
          </scope>
          <scope attributes="__ctor__" doc="VCALENDAR Component" ilk="function" name="VCalendar" signature="VCalendar(calbody)">
            <variable citdl="String" ilk="argument" name="calbody" />
            <variable name="name" />
            <variable name="recurring" />
            <variable name="nonRecurringEvents">
              <scope attributes="__ctor__" ilk="function" name="nonRecurringEvents" signature="nonRecurringEvents()" />
            </variable>
          </scope>
          <scope attributes="__ctor__" doc="STANDARD Component" ilk="function" name="Standard" signature="Standard(body)">
            <variable citdl="String" ilk="argument" name="body" />
            <variable name="name" />
            <variable name="_ValidProperties" />
          </scope>
          <scope attributes="__ctor__" doc="Daylight Component" ilk="function" name="Daylight" signature="Daylight(body)">
            <variable citdl="String" ilk="argument" name="body" />
            <variable name="name" />
            <variable name="_ValidProperties" />
          </scope>
          <scope attributes="__ctor__" doc="VEVENT Component" ilk="function" name="VEvent" signature="VEvent(body)">
            <variable citdl="String" ilk="argument" name="body" />
            <variable name="_ValidProperties" />
            <variable name="name" />
            <variable name="recurring" />
            <variable name="startDate" />
          </scope>
          <scope attributes="__ctor__" doc="VTIMEZONE Component" ilk="function" name="VTimeZone" signature="VTimeZone(body)">
            <variable citdl="String" ilk="argument" name="body" />
            <variable name="name" />
            <variable name="_ValidProperties" />
          </scope>
          <scope attributes="__ctor__" doc="VTODO Componenet" ilk="function" name="VTodo" signature="VTodo(body)">
            <variable citdl="String" ilk="argument" name="body" />
            <variable name="name" />
            <variable name="_ValidProperties" />
          </scope>
          <scope attributes="__ctor__" doc="VJOURNAL Component" ilk="function" name="VJournal" signature="VJournal(body)">
            <variable citdl="String" ilk="argument" name="body" />
            <variable name="name" />
            <variable name="_ValidProperties" />
          </scope>
          <scope attributes="__ctor__" doc="VFREEBUSY Component" ilk="function" name="VFreeBusy" signature="VFreeBusy(body)">
            <variable citdl="String" ilk="argument" name="body" />
            <variable name="name" />
            <variable name="_ValidProperties" />
          </scope>
          <scope attributes="__ctor__" doc="VALARM Component" ilk="function" name="VAlarm" signature="VAlarm(body)">
            <variable citdl="String" ilk="argument" name="body" />
            <variable name="name" />
            <variable name="_ValidProperties" />
          </scope>
        </scope>
        <variable citdl="Object" classrefs="dojo.widget.Button dojo.widget.HtmlWidget dojo.widget.ToolbarDialog dojo.widget.FloatingPaneBase dojo.widget.ModalDialogBase dojo.widget.MenuItem2 dojo.widget.Editor2DialogContent dojo.widget.Editor2ToolbarButton dojo.widget.Editor2ToolbarDropDownButton dojo.widget.Editor2ToolbarComboItem dojo.widget.Editor2ToolbarFontSizeSelect dojo.widget.FloatingPane dojo.widget.PopupContainerBase dojo.widget.PopupContainer dojo.widget.PopupMenu2 dojo.dnd.HtmlDragMoveSource dojo.dnd.HtmlDragMoveObject dojo.widget.Slider dojo.widget.validate.IntegerTextbox dojo.widget.Spinner dojo.widget.validate.RealNumberTextbox dojo.widget.validate.TimeTextbox dojo.widget.ContentPane dojo.widget.ToolbarItem dojo.widget.ToolbarButton dojo.widget.ToolbarSeparator dojo.widget.TreeCommon dojo.widget.LayoutContainer" name="widget">
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="AccordionContainer">
            <scope attributes="__ctor__" ilk="function" name="AccordionContainer" signature="AccordionContainer(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <variable name="isContainer" />
            <variable name="labelNodeClass" />
            <variable name="containerNodeClass" />
            <variable name="allowCollapse" />
            <scope ilk="function" name="addChild" signature="addChild(widget, overrideContainerNode, pos, ref, insertIndex)">
              <variable ilk="argument" name="widget" />
              <variable ilk="argument" name="overrideContainerNode" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="ref" />
              <variable ilk="argument" name="insertIndex" />
            </scope>
            <scope ilk="function" name="label" signature="label(widget, overrideContainerNode, pos, ref, insertIndex)">
              <variable ilk="argument" name="widget" />
              <variable ilk="argument" name="overrideContainerNode" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="ref" />
              <variable ilk="argument" name="insertIndex" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="removeChild" signature="removeChild(widget)">
              <variable ilk="argument" name="widget" />
            </scope>
            <scope ilk="function" name="onResized" signature="onResized()" />
          </scope>
          <scope attributes="__ctor__" classrefs="dojo.widget.DomWidget" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
            <variable name="children" />
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="cellWidth" />
              <variable name="cellHeight" />
              <variable name="domNode.src" />
              <variable name="domNode.width" />
              <variable name="domNode.height" />
              <variable name="domNode.style.backgroundImage" />
              <variable name="domNode.style.backgroundRepeat" />
              <variable name="aniCols" />
              <variable name="aniRows" />
              <variable name="aniCells" />
              <variable name="aniFrame" />
              <variable name="domNode.style.backgroundPosition" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="height" />
              <variable name="containerWidth" />
              <variable name="containerNode.style.left" />
              <variable name="leftImage.height" />
              <variable name="leftImage.width" />
              <variable name="centerImage.width" />
              <variable name="centerImage.style.left" />
              <variable name="domNode.style.height" />
              <variable name="domNode.style.width" />
              <variable name="leftImage.src" />
              <variable name="centerImage.src" />
              <variable name="rightImage.src" />
              <variable name="caption" />
              <variable name="containerNode.innerHTML" />
              <variable name="disabled" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="disabledStr" />
              <variable name="checkedStr" />
              <variable name="tabIndex" />
              <variable name="checked" />
              <variable name="disabled" />
              <variable name="inputNode.checked" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="comboBoxValue.value" />
              <variable name="textInputNode.value" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="_prev_key_backspace" />
              <variable name="_prev_key_esc" />
              <variable name="searchTimer" />
              <variable name="comboBoxSelectionValue.value" />
              <variable name="_highlighted_option" />
              <variable name="_highlighted_option" />
              <variable name="_highlighted_option" />
              <variable name="initialButtonSize" />
              <variable name="comboBoxValue.name" />
              <variable name="comboBoxSelectionValue.name" />
              <variable name="mode" />
              <variable name="dataProviderClass" />
              <variable name="dataProvider" />
              <variable name="popupWidget" />
              <variable name="optionsListNode" />
              <variable name="comboBoxValue.name" />
              <variable name="comboBoxSelectionValue.name" />
              <variable name="mode" />
              <variable name="dataProviderClass" />
              <variable name="dataProvider" />
              <variable name="popupWidget" />
              <variable name="optionsListNode" />
              <variable name="_hasFocus" />
              <variable name="_hasFocus" />
              <variable name="blurTimer" />
              <variable name="_mouseover_list" />
              <variable name="_mouseover_list" />
              <variable name="textInputNode.value" />
              <variable name="selectedResult" />
              <variable name="textInputNode.value" />
              <variable name="selectedResult" />
              <variable name="optionsListNode.innerHTML" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="requires" />
              <variable name="rRow.style.display" />
              <variable name="rRow2.style.display" />
              <variable name="methods" />
              <variable name="mRow.style.display" />
              <variable name="homeSave" />
              <variable name="detailSave" />
              <variable name="resultSave" />
              <variable name="packageSave" />
              <variable name="results" />
              <variable name="rowParent" />
              <variable name="rowSave" />
              <variable name="vParent" />
              <variable name="vSave" />
              <variable name="pParent" />
              <variable name="pSave" />
              <variable name="sPTypeSave" />
              <variable name="sPNameSave" />
              <variable name="navSave" />
              <variable name="_isLoggedIn" />
              <variable name="pkgEditor" />
              <variable name="_isLoggedIn" />
              <variable name="pkgEditor" />
              <variable name="fn.innerHTML" />
              <variable name="variables.style.display" />
              <variable name="vLink.innerHTML" />
              <variable name="vDesc.parentNode.style.display" />
              <variable name="sParams.innerHTML" />
              <variable name="parameters.style.display" />
              <variable name="pLink.innerHTML" />
              <variable name="pOpt.style.display" />
              <variable name="pType.parentNode.style.display" />
              <variable name="pType.innerHTML" />
              <variable name="pDesc.parentNode.style.display" />
              <variable name="pDesc.innerHTML" />
              <variable name="sPTypeSave.innerHTML" />
              <variable name="sPNameSave.innerHTML" />
              <variable name="sType.innerHTML" />
              <variable name="sName.innerHTML" />
              <variable name="_pkgPath" />
              <variable name="pkg.innerHTML" />
              <variable name="rH3.style.display" />
              <variable name="rH3.innerHTML" />
              <variable name="rLink.innerHTML" />
              <variable name="rLink.href" />
              <variable name="mLink.innerHTML" />
              <variable name="mLink.href" />
              <variable name="mDesc.parentNode.style.display" />
              <variable name="mDesc.innerHTML" />
              <variable name="pkgDescription.innerHTML" />
              <variable name="_pkgPath" />
              <variable name="pkg.innerHTML" />
              <variable name="rH3.style.display" />
              <variable name="rH3.innerHTML" />
              <variable name="rLink.innerHTML" />
              <variable name="rLink.href" />
              <variable name="mLink.innerHTML" />
              <variable name="mLink.href" />
              <variable name="mDesc.parentNode.style.display" />
              <variable name="mDesc.innerHTML" />
              <variable name="pkgDescription.innerHTML" />
              <variable name="count.innerHTML" />
              <variable name="fnLink.innerHTML" />
              <variable name="fnLink.href" />
              <variable name="summary.parentNode.style.display" />
              <variable name="summary.innerHTML" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="popup" />
              <variable name="containerNode" />
              <variable name="inputNode.id" />
              <variable name="inputNode.name" />
              <variable name="inputNode.style.width" />
              <variable name="popup" />
              <variable name="containerNode" />
              <variable name="inputNode.id" />
              <variable name="inputNode.name" />
              <variable name="inputNode.style.width" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="items" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()" />
            <variable name="widgetType" />
            <variable name="templateCssPath" />
            <variable name="templatePath" />
            <variable name="lang" />
            <variable name="toggle" />
            <variable name="toggleDuration" />
            <variable name="animationInProgress" />
            <scope ilk="function" name="initialize" signature="initialize(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="postMixInProperties" signature="postMixInProperties(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="getContainerHeight" signature="getContainerHeight()" />
            <scope ilk="function" name="getContainerWidth" signature="getContainerWidth()" />
            <scope ilk="function" name="setNativeHeight" signature="setNativeHeight(height)">
              <variable ilk="argument" name="height" />
            </scope>
            <scope ilk="function" name="createNodesFromText" signature="createNodesFromText(txt, wrap)">
              <variable ilk="argument" name="txt" />
              <variable ilk="argument" name="wrap" />
            </scope>
            <scope ilk="function" name="destroyRendering" signature="destroyRendering(finalize)">
              <variable ilk="argument" name="finalize" />
            </scope>
            <scope ilk="function" name="isShowing" signature="isShowing()" />
            <scope ilk="function" name="toggleShowing" signature="toggleShowing()" />
            <scope ilk="function" name="show" signature="show()" />
            <scope ilk="function" name="onShow" signature="onShow()" />
            <scope ilk="function" name="hide" signature="hide()" />
            <scope ilk="function" name="onHide" signature="onHide()" />
            <scope ilk="function" name="_isResized" signature="_isResized(w, h)">
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
            </scope>
            <scope ilk="function" name="checkSize" signature="checkSize()" />
            <scope ilk="function" name="resizeTo" signature="resizeTo(w, h)">
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
            </scope>
            <scope ilk="function" name="width" signature="width(w, h)">
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
            </scope>
            <scope ilk="function" name="resizeSoon" signature="resizeSoon()" />
            <scope ilk="function" name="onResized" signature="onResized()" />
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="urlsIdx" />
              <variable name="preventCache" />
              <variable name="img2.src" />
              <variable name="img1.src" />
              <variable name="stopped" />
              <variable name="startStopButton.value" />
              <variable name="fadeAnim" />
              <variable name="foreground" />
              <variable name="background" />
              <variable name="urlsIdx" />
              <variable name="urlsIdx" />
              <variable name="urlsIdx" />
              <variable name="urlsIdx" />
              <variable name="urlsIdx" />
              <variable name="urlsIdx" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="_typamaticTimer" />
              <variable name="_currentTimeout" />
              <variable name="_typamaticTimer" />
              <variable name="_currentTimeout" />
              <variable name="_typamaticTimer" />
              <variable name="_currentTimeout" />
              <variable name="_typamaticTimer" />
              <variable name="_currentTimeout" />
              <variable name="_typamaticTimer" />
              <variable name="_currentTimeout" />
              <variable name="_typamaticNode" />
              <variable name="_typamaticTimer" />
              <variable name="_currentTimeout" />
              <variable name="topBorderNode.style.padding" />
              <variable name="bottomBorderNode.style.padding" />
              <variable name="topBorderNode.style.paddingBottom" />
              <variable name="bottomBorderNode.style.paddingTop" />
              <variable name="rightBorderNode.style.paddingRight" />
              <variable name="leftBorderNode.style.paddingLeft" />
              <variable name="domNode.style.padding" />
              <variable name="topBorderNode.style.borderStyle" />
              <variable name="rightBorderNode.style.borderStyle" />
              <variable name="bottomBorderNode.style.borderStyle" />
              <variable name="leftBorderNode.style.borderStyle" />
              <variable name="topBorderNode.style.borderColor" />
              <variable name="rightBorderNode.style.borderColor" />
              <variable name="bottomBorderNode.style.borderColor" />
              <variable name="leftBorderNode.style.borderColor" />
              <variable name="topBorderNode.style.borderWidth" />
              <variable name="bottomBorderNode.style.borderWidth" />
              <variable name="topBorderNode.style.borderBottomWidth" />
              <variable name="bottomBorderNode.style.borderTopWidth" />
              <variable name="rightBorderNode.style.borderRightWidth" />
              <variable name="leftBorderNode.style.borderLeftWidth" />
              <variable name="domNode.style.borderWidth" />
              <variable name="_handleMove" />
              <variable name="rightButtonNode.style.width" />
              <variable name="rightButtonNode.style.visibility" />
              <variable name="leftButtonNode.style.width" />
              <variable name="leftButtonNode.style.visibility" />
              <variable name="bottomButtonNode.style.width" />
              <variable name="bottomButtonNode.style.visibility" />
              <variable name="topButtonNode.style.width" />
              <variable name="topButtonNode.style.visibility" />
              <variable name="sliderHandleNode.style.left" />
              <variable name="_clipLeft" />
              <variable name="_clipRight" />
              <variable name="progressBackgroundNode.style.clip" />
              <variable name="_constraintWidth" />
              <variable name="_clipLeft" />
              <variable name="_clipXdelta" />
              <variable name="_clipTop" />
              <variable name="_clipBottom" />
              <variable name="snapValuesX" />
              <variable name="_valueSizeX" />
              <variable name="sliderHandleNode.style.top" />
              <variable name="_clipTop" />
              <variable name="_clipBottom" />
              <variable name="progressBackgroundNode.style.clip" />
              <variable name="_constraintHeight" />
              <variable name="_clipTop" />
              <variable name="_clipYdelta" />
              <variable name="_clipLeft" />
              <variable name="_clipRight" />
              <variable name="snapValuesY" />
              <variable name="_valueSizeY" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="labelPosition" />
              <variable name="closeButton" />
              <variable name="selectedTabWidget" />
              <variable name="selectedTabWidget" />
              <variable name="selectedTabWidget" />
              <variable name="closeButton" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="positionDirection" />
              <variable name="contentNode.innerHTML" />
              <variable name="containerNode.style.left" />
              <variable name="containerNode.style.top" />
              <variable name="slideAnim" />
              <variable name="fadeAnim" />
              <variable name="contentNode.innerHTML" />
              <variable name="containerNode.style.left" />
              <variable name="containerNode.style.top" />
              <variable name="slideAnim" />
              <variable name="fadeAnim" />
              <variable name="contentNode.innerHTML" />
              <variable name="containerNode.style.left" />
              <variable name="containerNode.style.top" />
              <variable name="slideAnim" />
              <variable name="fadeAnim" />
              <variable name="contentNode.innerHTML" />
              <variable name="containerNode.style.left" />
              <variable name="containerNode.style.top" />
              <variable name="slideAnim" />
              <variable name="fadeAnim" />
              <variable name="contentNode.innerHTML" />
              <variable name="containerNode.style.left" />
              <variable name="containerNode.style.top" />
              <variable name="slideAnim" />
              <variable name="fadeAnim" />
              <variable name="contentNode.innerHTML" />
              <variable name="containerNode.style.left" />
              <variable name="containerNode.style.top" />
              <variable name="slideAnim" />
              <variable name="fadeAnim" />
              <variable name="contentNode.innerHTML" />
              <variable name="containerNode.style.left" />
              <variable name="containerNode.style.top" />
              <variable name="slideAnim" />
              <variable name="fadeAnim" />
              <variable name="clipNode.style.height" />
              <variable name="clipNode.style.width" />
              <variable name="clipNode.style.top" />
              <variable name="clipNode.style.left" />
              <variable name="clipNode.style.clip" />
              <variable name="bgIframe" />
              <variable name="_scrollConnected" />
              <variable name="_scrollConnected" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="returnImageNode.src" />
              <variable name="tabContainer" />
              <variable name="demoTab" />
              <variable name="sourceTab" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="thumbnailImageNode.src" />
              <variable name="thumbnailImageNode.name" />
              <variable name="viewDemoImageNode.src" />
              <variable name="viewDemoImageNode.name" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="demoContainer" />
              <variable name="demoContainer" />
              <variable name="registry" />
              <variable name="registry.categories" />
              <variable name="registry.categories" />
              <variable name="demoListChildren" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="demoNode.src" />
              <variable name="href" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="sourceNode.value" />
              <variable name="href" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="HtmlWidget" signature="HtmlWidget()">
              <variable name="textbox.value" />
            </scope>
          </scope>
          <scope ilk="function" name="Widget" signature="Widget()">
            <scope attributes="__ctor__" ilk="function" name="Widget" signature="Widget()" />
            <variable name="layoutAlign" />
            <scope attributes="__ctor__" ilk="function" name="Widget" signature="Widget()" />
            <variable name="sizeMin" />
            <variable name="sizeShare" />
            <scope attributes="__ctor__" ilk="function" name="Widget" signature="Widget()" />
            <variable name="label" />
            <variable name="selected" />
            <variable name="tabCloseButton" />
            <scope attributes="__ctor__" ilk="function" name="Widget" signature="Widget()" />
          </scope>
          <variable name="label" />
          <variable name="open" />
          <scope classrefs="dojo.widget.TitlePane" ilk="class" name="AccordionPane">
            <scope attributes="__ctor__" ilk="function" name="AccordionPane" signature="AccordionPane(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="AnimatedPng">
            <scope attributes="__ctor__" ilk="function" name="AnimatedPng" signature="AnimatedPng(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <variable name="isContainer" />
            <variable name="domNode" />
            <variable name="width" />
            <variable name="height" />
            <variable name="aniSrc" />
            <variable name="interval" />
            <variable name="cellWidth" />
            <variable name="cellHeight" />
            <variable name="aniCols" />
            <variable name="aniRows" />
            <variable name="aniCells" />
            <variable name="blankSrc" />
            <variable name="templateString" />
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="initAni" signature="initAni(w, h)">
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
            </scope>
            <scope ilk="function" name="tick" signature="tick()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="Button">
            <scope attributes="__ctor__" ilk="function" name="Button" signature="Button(rawNode)">
              <variable ilk="argument" name="rawNode" />
              <variable name="arrow" />
              <variable name="arrow.src" />
              <variable name="height" />
              <variable name="containerWidth" />
              <variable name="leftImage.height" />
              <variable name="arrowBackgroundImage.height" />
              <variable name="leftImage.width" />
              <variable name="centerImage.width" />
              <variable name="leftPart.style.height" />
              <variable name="leftPart.style.width" />
              <variable name="arrowBackgroundImage.width" />
              <variable name="rightImage.width" />
              <variable name="rightPart.style.height" />
              <variable name="rightPart.style.width" />
              <variable name="domNode.style.height" />
              <variable name="domNode.style.width" />
              <variable name="leftImage.src" />
              <variable name="centerImage.src" />
              <variable name="arrowBackgroundImage.src" />
              <variable name="rightImage.src" />
            </scope>
            <variable name="isContainer" />
            <variable name="caption" />
            <variable name="disabled" />
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <variable name="inactiveImg" />
            <variable name="activeImg" />
            <variable name="pressedImg" />
            <variable name="disabledImg" />
            <variable name="width2height" />
            <variable name="containerNode" />
            <variable name="leftImage" />
            <variable name="centerImage" />
            <variable name="rightImage" />
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="sizeMyself" signature="sizeMyself()" />
            <scope ilk="function" name="sizeMyselfHelper" signature="sizeMyselfHelper()" />
            <scope ilk="function" name="onMouseOver" signature="onMouseOver(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onMouseOut" signature="onMouseOut(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="buttonClick" signature="buttonClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="_setImage" signature="_setImage(prefix)">
              <variable ilk="argument" name="prefix" />
            </scope>
            <scope ilk="function" name="_toggleMenu" signature="_toggleMenu(menuId)">
              <variable ilk="argument" name="menuId" />
            </scope>
            <scope ilk="function" name="setCaption" signature="setCaption(content)">
              <variable ilk="argument" name="content" />
            </scope>
            <scope ilk="function" name="setDisabled" signature="setDisabled(disabled)">
              <variable ilk="argument" name="disabled" />
            </scope>
          </scope>
          <scope ilk="function" name="DropDownButton" signature="DropDownButton(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="sizeMyselfHelper" signature="sizeMyselfHelper()" />
            <scope ilk="function" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <variable name="menuId" />
          <variable name="arrow" />
          <variable name="downArrow" />
          <variable name="disabledDownArrow" />
          <scope ilk="function" name="ComboButton" signature="ComboButton(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope ilk="function" name="sizeMyselfHelper" signature="sizeMyselfHelper(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="leftOver" signature="leftOver(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="leftDown" signature="leftDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="leftUp" signature="leftUp(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="leftOut" signature="leftOut(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="leftClick" signature="leftClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="_setImageL" signature="_setImageL(prefix)">
              <variable ilk="argument" name="prefix" />
            </scope>
            <scope ilk="function" name="rightOver" signature="rightOver(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="rightDown" signature="rightDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="rightUp" signature="rightUp(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="rightOut" signature="rightOut(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="rightClick" signature="rightClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="_setImageR" signature="_setImageR(prefix)">
              <variable ilk="argument" name="prefix" />
            </scope>
          </scope>
          <variable name="menuId" />
          <variable name="templatePath" />
          <variable name="leftPart" />
          <variable name="rightPart" />
          <variable name="arrowBackgroundImage" />
          <variable name="splitWidth" />
          <variable name="arrowWidth" />
          <scope ilk="class" name="Chart">
            <scope attributes="__ctor__" ilk="function" name="Chart" signature="Chart()" />
            <scope ilk="function" name="DataSeries" signature="DataSeries()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="Checkbox">
            <scope attributes="__ctor__" ilk="function" name="Checkbox" signature="Checkbox()" />
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <variable name="disabled" />
            <variable name="name" />
            <variable name="checked" />
            <variable name="tabIndex" />
            <variable name="id" />
            <variable name="value" />
            <scope ilk="function" name="postMixInProperties" signature="postMixInProperties()" />
            <scope ilk="function" name="postCreate" signature="postCreate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate()" />
            <scope ilk="function" name="_onClick" signature="_onClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onClick" signature="onClick()" />
            <scope ilk="function" name="onKey" signature="onKey(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="mouseOver" signature="mouseOver(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="mouseOut" signature="mouseOut(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="hover" signature="hover(e, isOver)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="isOver" />
            </scope>
            <scope ilk="function" name="_setInfo" signature="_setInfo()" />
          </scope>
          <variable citdl="Object" classrefs="dojo.widget.Checkbox dojo.widget.TabContainer" name="a11y">
            <scope ilk="function" name="Checkbox" signature="Checkbox()">
              <scope ilk="function" name="postCreate" signature="postCreate(args, frag)">
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="fillInTemplate" signature="fillInTemplate()" />
              <scope ilk="function" name="_onClick" signature="_onClick()" />
            </scope>
            <variable name="templatePath" />
            <scope ilk="function" name="TabContainer" signature="TabContainer()">
              <scope ilk="function" name="_setupCloseButton" signature="_setupCloseButton(type)">
                <variable ilk="argument" name="type" />
              </scope>
            </scope>
            <variable name="templateCssPath" />
            <variable name="imgPath" />
          </variable>
          <scope ilk="class" name="CiviCrmDatePicker" />
          <scope attributes="__ctor__" ilk="function" name="HtmlCiviCrmDatePicker" signature="HtmlCiviCrmDatePicker()">
            <variable name="widgetType" />
            <variable name="idPrefix" />
            <variable name="mode" />
            <variable name="datePicker" />
            <variable name="timePicker" />
            <variable name="dateHolderTd" />
            <variable name="timeHolderTd" />
            <variable name="formItemsTd" />
            <variable name="formItemsTr" />
            <variable name="monthSelect" />
            <variable name="daySelect" />
            <variable name="yearSelect" />
            <variable name="hourSelect" />
            <variable name="minSelect" />
            <variable name="apSelect" />
            <variable name="templatePath" />
            <variable name="modeFormats" />
            <variable name="formatMappings" />
            <variable name="setDateSelects">
              <scope attributes="__ctor__" ilk="function" name="setDateSelects" signature="setDateSelects()">
                <variable name="monthSelect.value" />
                <variable name="daySelect.value" />
                <variable name="yearSelect.value" />
              </scope>
            </variable>
            <variable name="monthSelect.value" />
            <variable name="daySelect.value" />
            <variable name="yearSelect.value" />
            <variable name="setTimeSelects">
              <scope attributes="__ctor__" ilk="function" name="setTimeSelects" signature="setTimeSelects()">
                <variable name="hourSelect.value" />
                <variable name="minSelect.value" />
                <variable name="apSelect.value" />
              </scope>
            </variable>
            <variable name="hourSelect.value" />
            <variable name="minSelect.value" />
            <variable name="apSelect.value" />
            <variable name="fillInTemplate">
              <scope attributes="__ctor__" ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="frag" />
                <variable name="datePicker" />
                <variable name="timePicker" />
              </scope>
            </variable>
            <variable name="unhide">
              <scope attributes="__ctor__" ilk="function" name="unhide" signature="unhide()">
                <variable name="formItemsTr.style.display" />
              </scope>
            </variable>
            <variable name="formItemsTr.style.display" />
            <variable name="postCreate">
              <scope attributes="__ctor__" ilk="function" name="postCreate" signature="postCreate()" />
            </variable>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="ColorPalette">
            <scope attributes="__ctor__" ilk="function" name="ColorPalette" signature="ColorPalette()" />
          </scope>
          <scope ilk="function" name="ToolbarColorDialog" signature="ToolbarColorDialog()" />
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="ComboBox">
            <scope attributes="__ctor__" ilk="function" name="ComboBox" signature="ComboBox()" />
            <variable name="isContainer" />
            <variable name="forceValidOption" />
            <variable name="searchType" />
            <variable name="dataProvider" />
            <variable name="autoComplete" />
            <variable name="formInputName" />
            <variable name="name" />
            <variable name="textInputNode" />
            <variable name="comboBoxValue" />
            <variable name="comboBoxSelectionValue" />
            <variable name="optionsListWrapper" />
            <variable name="optionsListNode" />
            <variable name="downArrowNode" />
            <variable name="cbTableNode" />
            <variable name="searchTimer" />
            <variable name="searchDelay" />
            <variable name="dataUrl" />
            <variable name="fadeTime" />
            <variable name="maxListLength" />
            <variable name="mode" />
            <variable name="selectedResult" />
            <variable name="_highlighted_option" />
            <variable name="_prev_key_backspace" />
            <variable name="_prev_key_esc" />
            <variable name="_gotFocus" />
            <variable name="_mouseover_list" />
            <variable name="dataProviderClass" />
            <variable name="buttonSrc" />
            <variable name="dropdownToggle" />
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <scope ilk="function" name="startSearch" signature="startSearch(searchString)">
              <variable ilk="argument" name="searchString" />
            </scope>
            <scope ilk="function" name="selectNextResult" signature="selectNextResult()" />
            <scope ilk="function" name="selectPrevResult" signature="selectPrevResult()" />
            <scope ilk="function" name="setSelectedResult" signature="setSelectedResult()" />
            <scope ilk="function" name="setValue" signature="setValue(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="onValueChanged" signature="onValueChanged()" />
            <scope ilk="function" name="getValue" signature="getValue()" />
            <scope ilk="function" name="getState" signature="getState()" />
            <scope ilk="function" name="value" signature="value()" />
            <scope ilk="function" name="setState" signature="setState(state)">
              <variable ilk="argument" name="state" />
            </scope>
            <scope ilk="function" name="getCaretPos" signature="getCaretPos(element)">
              <variable ilk="argument" name="element" />
            </scope>
            <scope ilk="function" name="setCaretPos" signature="setCaretPos(element, location)">
              <variable ilk="argument" name="element" />
              <variable ilk="argument" name="location" />
            </scope>
            <scope ilk="function" name="setSelectedRange" signature="setSelectedRange(element, start, end)">
              <variable ilk="argument" name="element" />
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="end" />
            </scope>
            <scope ilk="function" name="_handleKeyEvents" signature="_handleKeyEvents(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="63232" signature="63232(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="63233" signature="63233(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <variable citdl="Object" name="k">
              <scope ilk="function" name="KEY_DOWN_ARROW" signature="KEY_DOWN_ARROW(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_UP_ARROW" signature="KEY_UP_ARROW(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_ENTER" signature="KEY_ENTER(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_TAB" signature="KEY_TAB(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_SPACE" signature="KEY_SPACE(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_ESCAPE" signature="KEY_ESCAPE(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_BACKSPACE" signature="KEY_BACKSPACE(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_RIGHT_ARROW" signature="KEY_RIGHT_ARROW(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_LEFT_ARROW" signature="KEY_LEFT_ARROW(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_SHIFT" signature="KEY_SHIFT(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
            </variable>
            <scope ilk="function" name="default" signature="default(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="onKeyDown" signature="onKeyDown(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="onKeyPress" signature="onKeyPress(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="compositionEnd" signature="compositionEnd(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="onKeyUp" signature="onKeyUp(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="setSelectedValue" signature="setSelectedValue(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="setAllValues" signature="setAllValues(value1, value2)">
              <variable ilk="argument" name="value1" />
              <variable ilk="argument" name="value2" />
            </scope>
            <scope ilk="function" name="focusOptionNode" signature="focusOptionNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="blurOptionNode" signature="blurOptionNode()" />
            <scope ilk="function" name="highlightNextOption" signature="highlightNextOption()" />
            <scope ilk="function" name="highlightPrevOption" signature="highlightPrevOption()" />
            <scope ilk="function" name="itemMouseOver" signature="itemMouseOver(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="itemMouseOut" signature="itemMouseOut(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="onResize" signature="onResize()" />
            <scope ilk="function" name="width" signature="width()" />
            <scope ilk="function" name="postMixInProperties" signature="postMixInProperties(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="toggle" signature="toggle(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope doc="set focus to input node from code" ilk="function" name="focus" signature="focus()" />
            <scope ilk="function" name="openResultList" signature="openResultList(results)">
              <variable ilk="argument" name="results" />
            </scope>
            <scope ilk="function" name="onFocusInput" signature="onFocusInput()" />
            <scope ilk="function" name="onBlurInput" signature="onBlurInput()" />
            <scope ilk="function" name="_handleBlurTimer" signature="_handleBlurTimer(clear, millisec)">
              <variable citdl="Boolean" ilk="argument" name="clear" />
              <variable citdl="Number" ilk="argument" name="millisec" />
            </scope>
            <scope ilk="function" name="_onMouseOver" signature="_onMouseOver(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_onMouseOut" signature="_onMouseOut(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_isInputEqualToResult" signature="_isInputEqualToResult(result)">
              <variable ilk="argument" name="result" />
            </scope>
            <scope ilk="function" name="_isValidOption" signature="_isValidOption()" />
            <scope ilk="function" name="checkBlurred" signature="checkBlurred()" />
            <scope ilk="function" name="sizeBackgroundIframe" signature="sizeBackgroundIframe()" />
            <scope ilk="function" name="selectOption" signature="selectOption(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="target" signature="target(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="clearResultList" signature="clearResultList()" />
            <scope ilk="function" name="hideResultList" signature="hideResultList()" />
            <scope ilk="function" name="showResultList" signature="showResultList()" />
            <scope ilk="function" name="handleArrowClick" signature="handleArrowClick()" />
            <scope ilk="function" name="tryFocus" signature="tryFocus()" />
            <scope ilk="function" name="startSearchFromInput" signature="startSearchFromInput()" />
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope attributes="__ctor__" ilk="function" name="ComboBox" signature="ComboBox()">
              <variable name="comboBoxValue.value" />
              <variable name="comboBoxSelectionValue.value" />
              <variable name="textInputNode.value" />
            </scope>
          </scope>
          <scope attributes="__ctor__" ilk="function" name="incrementalComboBoxDataProvider" signature="incrementalComboBoxDataProvider(url, limit, timeout)">
            <variable ilk="argument" name="url" />
            <variable ilk="argument" name="limit" />
            <variable ilk="argument" name="timeout" />
            <variable name="searchUrl" />
            <variable name="inFlight" />
            <variable name="activeRequest" />
            <variable name="allowCache" />
            <variable name="cache" />
            <variable name="init">
              <scope attributes="__ctor__" ilk="function" name="init" signature="init(cbox)">
                <variable ilk="argument" name="cbox" />
                <variable name="searchUrl" />
              </scope>
            </variable>
            <variable name="addToCache">
              <scope attributes="__ctor__" ilk="function" name="addToCache" signature="addToCache(keyword, data)">
                <variable ilk="argument" name="keyword" />
                <variable ilk="argument" name="data" />
              </scope>
            </variable>
            <variable name="startSearch">
              <scope attributes="__ctor__" ilk="function" name="startSearch" signature="startSearch(searchStr, type, ignoreLimit)">
                <variable ilk="argument" name="searchStr" />
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="ignoreLimit" />
                <variable name="inFlight" />
              </scope>
            </variable>
          </scope>
          <scope attributes="__ctor__" ilk="function" name="ComboBoxDataProvider" signature="ComboBoxDataProvider(dataPairs, limit, timeout)">
            <variable ilk="argument" name="dataPairs" />
            <variable ilk="argument" name="limit" />
            <variable ilk="argument" name="timeout" />
            <variable name="data" />
            <variable name="searchTimeout" />
            <variable name="searchLimit" />
            <variable name="searchType" />
            <variable name="caseSensitive" />
            <variable name="_lastSearch" />
            <variable name="_lastSearchResults" />
            <variable name="init">
              <scope attributes="__ctor__" ilk="function" name="init" signature="init(cbox, node)">
                <variable ilk="argument" name="cbox" />
                <variable ilk="argument" name="node" />
              </scope>
            </variable>
            <variable name="getData">
              <scope attributes="__ctor__" ilk="function" name="getData" signature="getData(url)">
                <variable ilk="argument" name="url" />
              </scope>
            </variable>
            <variable name="startSearch">
              <scope attributes="__ctor__" ilk="function" name="startSearch" signature="startSearch(searchStr, type, ignoreLimit)">
                <variable ilk="argument" name="searchStr" />
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="ignoreLimit" />
              </scope>
            </variable>
            <variable name="_preformSearch">
              <scope attributes="__ctor__" ilk="function" name="_preformSearch" signature="_preformSearch(searchStr, type, ignoreLimit)">
                <variable ilk="argument" name="searchStr" />
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="ignoreLimit" />
              </scope>
            </variable>
            <variable name="provideSearchResults">
              <scope attributes="__ctor__" ilk="function" name="provideSearchResults" signature="provideSearchResults(resultsDataPairs)">
                <variable ilk="argument" name="resultsDataPairs" />
              </scope>
            </variable>
            <variable name="addData">
              <scope attributes="__ctor__" ilk="function" name="addData" signature="addData(pairs)">
                <variable ilk="argument" name="pairs" />
                <variable name="data" />
              </scope>
            </variable>
            <variable name="setData">
              <scope attributes="__ctor__" ilk="function" name="setData" signature="setData(pdata)">
                <variable ilk="argument" name="pdata" />
                <variable name="data" />
              </scope>
            </variable>
          </scope>
          <scope ilk="class" name="Console">
            <scope attributes="__ctor__" ilk="function" name="Console" signature="Console()" />
            <variable name="debug" />
            <scope doc="To be implemented by subclass" ilk="function" name="runCommand" signature="runCommand(command)">
              <variable citdl="String" ilk="argument" name="command" />
            </scope>
            <scope doc="Writes the debug statement to the screen." ilk="function" name="printDebug" signature="printDebug(line)">
              <variable citdl="String" ilk="argument" name="line" />
            </scope>
            <scope doc="Writes the command to the screen" ilk="function" name="printCommand" signature="printCommand(command)">
              <variable citdl="String" ilk="argument" name="command" />
            </scope>
            <scope doc="Writes the result to the screen" ilk="function" name="printResult" signature="printResult(result)">
              <variable citdl="String" ilk="argument" name="result" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="ContentPane">
            <scope attributes="__ctor__" ilk="function" name="ContentPane" signature="ContentPane()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="DatePicker">
            <scope attributes="__ctor__" ilk="function" name="DatePicker" signature="DatePicker()" />
            <variable citdl="Object" name="util">
              <scope ilk="function" name="toRfcDate" signature="toRfcDate(jsDate)">
                <variable ilk="argument" name="jsDate" />
              </scope>
              <scope ilk="function" name="fromRfcDate" signature="fromRfcDate(rfcDate)">
                <variable ilk="argument" name="rfcDate" />
              </scope>
              <scope ilk="function" name="initFirstSaturday" signature="initFirstSaturday(month, year)">
                <variable ilk="argument" name="month" />
                <variable ilk="argument" name="year" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="dojo.widget.FloatingPane" ilk="class" name="DebugConsole">
            <scope attributes="__ctor__" ilk="function" name="DebugConsole" signature="DebugConsole()" />
          </scope>
          <scope classrefs="dojo.widget.ContentPane dojo.widget.ModalDialogBase" ilk="class" name="Dialog">
            <scope attributes="__ctor__" ilk="function" name="Dialog" signature="Dialog()" />
            <variable name="templatePath" />
            <variable name="anim" />
            <variable name="blockDuration" />
            <variable name="lifetime" />
            <scope ilk="function" name="show" signature="show()" />
            <scope ilk="function" name="onLoad" signature="onLoad()" />
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate()" />
            <scope ilk="function" name="hide" signature="hide()" />
            <scope ilk="function" name="setTimerNode" signature="setTimerNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="setCloseControl" signature="setCloseControl(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="setShowControl" signature="setShowControl(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="onTick" signature="onTick()" />
            <scope ilk="function" name="onScroll" signature="onScroll()" />
            <scope ilk="function" name="killEvent" signature="killEvent(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
          </scope>
          <scope ilk="function" name="ModalDialogBase" signature="ModalDialogBase()">
            <scope ilk="function" name="trapTabs" signature="trapTabs(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="clearTrap" signature="clearTrap(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="setBackgroundColor" signature="setBackgroundColor(color)">
              <variable ilk="argument" name="color" />
            </scope>
            <scope ilk="function" name="setBackgroundOpacity" signature="setBackgroundOpacity(op)">
              <variable ilk="argument" name="op" />
            </scope>
            <scope ilk="function" name="sizeBackground" signature="sizeBackground()" />
            <scope ilk="function" name="showBackground" signature="showBackground()" />
            <scope ilk="function" name="placeModalDialog" signature="placeModalDialog()" />
            <scope ilk="function" name="showModalDialog" signature="showModalDialog()" />
            <scope ilk="function" name="checkSize" signature="checkSize()" />
            <scope ilk="function" name="hideModalDialog" signature="hideModalDialog()" />
          </scope>
          <variable name="isContainer" />
          <variable name="_scrollConnected" />
          <variable name="focusElement" />
          <variable name="shared" />
          <variable name="bgColor" />
          <variable name="bgOpacity" />
          <variable name="followScroll" />
          <variable name="_fromTrap" />
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="DocPane">
            <scope attributes="__ctor__" ilk="function" name="DocPane" signature="DocPane()" />
            <variable name="dialog" />
            <variable name="dialogBg" />
            <variable name="dialogFg" />
            <variable name="logIn" />
            <variable name="edit" />
            <variable name="save" />
            <variable name="cancel" />
            <variable name="detail" />
            <variable name="result" />
            <variable name="packag" />
            <variable name="fn" />
            <variable name="fnLink" />
            <variable name="count" />
            <variable name="row" />
            <variable name="summary" />
            <variable name="variables" />
            <variable name="vRow" />
            <variable name="vLink" />
            <variable name="vDesc" />
            <variable name="methods" />
            <variable name="mRow" />
            <variable name="mLink" />
            <variable name="mDesc" />
            <variable name="requires" />
            <variable name="rRow" />
            <variable name="rRow2" />
            <variable name="rH3" />
            <variable name="rLink" />
            <variable name="parameters" />
            <variable name="pRow" />
            <variable name="pLink" />
            <variable name="pDesc" />
            <variable name="pOpt" />
            <variable name="pType" />
            <variable name="sType" />
            <variable name="sName" />
            <variable name="sParams" />
            <variable name="sPType" />
            <variable name="sPTypeSave" />
            <variable name="sPName" />
            <variable name="sPNameSave" />
            <variable name="pkgDescription" />
            <variable name="_appends" />
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <variable name="isContainer" />
            <scope ilk="function" name="description" signature="description()" />
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate()" />
            <scope ilk="function" name="_logIn" signature="_logIn()" />
            <scope ilk="function" name="_loggedIn" signature="_loggedIn()" />
            <scope ilk="function" name="toolbarAlwaysVisible" signature="toolbarAlwaysVisible()" />
            <scope ilk="function" name="_save" signature="_save()" />
            <scope ilk="function" name="onDocSelectFunction" signature="onDocSelectFunction(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onPkgResult" signature="onPkgResult(results)">
              <variable citdl="Object" ilk="argument" name="results" />
            </scope>
            <scope ilk="function" name="name" signature="name(results)">
              <variable citdl="Object" ilk="argument" name="results" />
            </scope>
            <scope ilk="function" name="onDocResults" signature="onDocResults(message)">
              <variable ilk="argument" name="message" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.Widget" ilk="class" name="DomWidget">
            <scope attributes="__ctor__" ilk="function" name="DomWidget" signature="DomWidget()" />
            <scope attributes="__ctor__" ilk="function" name="DomWidget" signature="DomWidget()">
              <variable name="toggleObj" />
              <variable name="animationInProgress" />
              <variable name="isHidden" />
              <variable name="animationInProgress" />
              <variable name="animationInProgress" />
              <variable name="isHidden" />
              <variable name="animationInProgress" />
              <variable name="width" />
              <variable name="height" />
            </scope>
          </scope>
          <scope doc="deprecated, use dojo.widget.fillFromTemplateCache" ilk="function" name="buildFromTemplate" signature="buildFromTemplate()" />
          <scope doc="static method to build from a template w/ or w/o a real&#xA;widget in place" ilk="function" name="fillFromTemplateCache" signature="fillFromTemplateCache(obj, templatePath, templateString, avoidCache)">
            <variable citdl="DOMWidget" ilk="argument" name="obj" />
            <variable citdl="String" ilk="argument" name="templatePath" />
            <variable ilk="argument" name="templateString" />
            <variable ilk="argument" name="avoidCache" />
          </scope>
          <scope doc="map widget properties and functions to the handlers&#xA;specified in the dom node and it&apos;s descendants." ilk="function" name="attachTemplateNodes" signature="attachTemplateNodes(rootNode, targetObj, events)">
            <variable citdl="DOMNode" ilk="argument" name="rootNode" />
            <variable citdl="Widget" ilk="argument" name="targetObj" />
            <variable citdl="Array" ilk="argument" name="events" />
          </scope>
          <scope doc="generates a list of properties with names that match the&#xA;form dojoOn*" ilk="function" name="getDojoEventsFromStr" returns="Array" signature="getDojoEventsFromStr(str)">
            <variable citdl="String" ilk="argument" name="str" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="DropdownContainer">
            <scope attributes="__ctor__" ilk="function" name="DropdownContainer" signature="DropdownContainer()" />
            <variable name="inputWidth" />
            <variable name="inputId" />
            <variable name="inputName" />
            <variable name="iconURL" />
            <variable name="iconAlt" />
            <variable name="inputNode" />
            <variable name="buttonNode" />
            <variable name="containerNode" />
            <variable name="containerToggle" />
            <variable name="containerToggleDuration" />
            <variable name="containerAnimInProgress" />
            <variable name="templateString" />
            <variable name="templateCssPath" />
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="toggle" signature="toggle(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="onIconClick" signature="onIconClick(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="hideContainer" signature="hideContainer()" />
            <scope ilk="function" name="onInputChange" signature="onInputChange()" />
            <scope attributes="__ctor__" ilk="function" name="DropdownContainer" signature="DropdownContainer()">
              <variable name="iconAlt" />
              <variable name="date" />
              <variable name="inputNode.value" />
              <variable name="datePicker" />
              <variable name="containerNode.style.zIndex" />
              <variable name="containerNode.style.backgroundColor" />
              <variable name="date" />
              <variable name="inputNode.value" />
              <variable name="datePicker" />
              <variable name="containerNode.style.zIndex" />
              <variable name="containerNode.style.backgroundColor" />
              <variable name="inputNode.value" />
              <variable name="datePicker.date" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.DropdownContainer" ilk="class" name="DropdownDatePicker">
            <scope attributes="__ctor__" ilk="function" name="DropdownDatePicker" signature="DropdownDatePicker()" />
            <variable name="iconURL" />
            <variable name="zIndex" />
            <variable name="datePicker" />
            <variable name="dateFormat" />
            <variable name="date" />
            <scope ilk="function" name="postMixInProperties" signature="postMixInProperties(localProperties, frag)">
              <variable ilk="argument" name="localProperties" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="widgetContainerId" signature="widgetContainerId(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="onSetDate" signature="onSetDate()" />
            <scope ilk="function" name="onInputChange" signature="onInputChange()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="Editor">
            <scope attributes="__ctor__" ilk="function" name="Editor" signature="Editor()">
              <variable name="contentFilters" />
              <variable name="_toolbarContainer.domNode.style.display" />
              <variable name="_toolbarContainer.domNode.style.display" />
              <variable name="_richText.contentFilters" />
            </scope>
            <variable name="widgetType" />
            <variable name="saveUrl" />
            <variable name="saveMethod" />
            <variable name="saveArgName" />
            <variable name="closeOnSave" />
            <variable name="items" />
            <variable name="formatBlockItems" />
            <variable name="fontNameItems" />
            <variable name="fontSizeItems" />
            <variable name="validateItems" />
            <variable name="_richText" />
            <variable name="_richTextType" />
            <variable name="_toolbarContainer" />
            <variable name="_toolbarContainerType" />
            <variable name="_toolbars" />
            <variable name="_toolbarType" />
            <variable name="_toolbarItemType" />
            <variable name="_updateToolbarLastRan" />
            <variable name="_updateToolbarTimer" />
            <variable name="_updateToolbarFrequency" />
            <variable name="supportedCommands" />
            <scope ilk="function" name="getItemProperties" signature="getItemProperties(name)">
              <variable ilk="argument" name="name" />
            </scope>
            <scope ilk="function" name="focusOnLoad" signature="focusOnLoad(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="minHeight" signature="minHeight(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="buildRendering" signature="buildRendering(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="setRichText" signature="setRichText(richText)">
              <variable ilk="argument" name="richText" />
            </scope>
            <scope ilk="function" name="initToolbar" signature="initToolbar()" />
            <scope ilk="function" name="insertToolbar" signature="insertToolbar(tbNode, richTextNode)">
              <variable ilk="argument" name="tbNode" />
              <variable ilk="argument" name="richTextNode" />
            </scope>
            <scope ilk="function" name="addToolbar" signature="addToolbar(toolbar)">
              <variable ilk="argument" name="toolbar" />
            </scope>
            <scope ilk="function" name="addItem" signature="addItem(item, tb, dontValidate)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="tb" />
              <variable ilk="argument" name="dontValidate" />
            </scope>
            <scope ilk="function" name="name" signature="name(item, tb, dontValidate)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="tb" />
              <variable ilk="argument" name="dontValidate" />
            </scope>
            <scope ilk="function" name="values" signature="values(item, tb, dontValidate)">
              <variable ilk="argument" name="item" />
              <variable ilk="argument" name="tb" />
              <variable ilk="argument" name="dontValidate" />
            </scope>
            <scope ilk="function" name="enableToolbar" signature="enableToolbar()" />
            <scope ilk="function" name="disableToolbar" signature="disableToolbar(hide)">
              <variable ilk="argument" name="hide" />
            </scope>
            <scope ilk="function" name="updateToolbar" signature="updateToolbar(force)">
              <variable ilk="argument" name="force" />
            </scope>
            <scope ilk="function" name="updateItem" signature="updateItem(item)">
              <variable ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="isSupportedCommand" signature="isSupportedCommand(cmd)">
              <variable ilk="argument" name="cmd" />
            </scope>
            <scope ilk="function" name="getCommandImage" signature="getCommandImage(cmd)">
              <variable ilk="argument" name="cmd" />
            </scope>
            <scope ilk="function" name="_action" signature="_action(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="_setValue" signature="_setValue(a, b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope ilk="function" name="_save" signature="_save(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="method" signature="method(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="url" signature="url(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="content" signature="content(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="_close" signature="_close(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onAction" signature="onAction(cmd, value)">
              <variable ilk="argument" name="cmd" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="_fire" signature="_fire(eventName)">
              <variable ilk="argument" name="eventName" />
            </scope>
            <scope ilk="function" name="getHtml" signature="getHtml()" />
            <scope ilk="function" name="getEditorContent" signature="getEditorContent()" />
            <scope ilk="function" name="onClose" signature="onClose(save, hide)">
              <variable ilk="argument" name="save" />
              <variable ilk="argument" name="hide" />
            </scope>
            <scope ilk="function" name="onLoad" signature="onLoad()" />
            <scope ilk="function" name="onSave" signature="onSave()" />
            <scope ilk="function" name="onCancel" signature="onCancel()" />
          </scope>
          <scope classrefs="dojo.widget.RichText" ilk="class" name="Editor2">
            <scope attributes="__ctor__" ilk="function" name="Editor2" signature="Editor2()" />
            <variable name="saveUrl" />
            <variable name="saveMethod" />
            <variable name="saveArgName" />
            <variable name="closeOnSave" />
            <variable name="shareToolbar" />
            <variable name="toolbarAlwaysVisible" />
            <variable name="htmlEditing" />
            <variable name="_inSourceMode" />
            <variable name="_htmlEditNode" />
            <variable name="toolbarWidget" />
            <variable name="scrollInterval" />
            <variable name="toolbarTemplatePath" />
            <variable name="plugins" />
            <variable name="_updateToolbarLastRan" />
            <variable name="_updateToolbarTimer" />
            <variable name="_updateToolbarFrequency" />
            <scope ilk="function" name="editorOnLoad" signature="editorOnLoad()" />
            <scope ilk="function" name="toolbarLoaded" signature="toolbarLoaded()" />
            <scope ilk="function" name="registerLoadedPlugin" signature="registerLoadedPlugin(obj)">
              <variable citdl="Object" ilk="argument" name="obj" />
            </scope>
            <scope ilk="function" name="unregisterLoadedPlugin" signature="unregisterLoadedPlugin(obj)">
              <variable citdl="Object" ilk="argument" name="obj" />
            </scope>
            <scope ilk="function" name="execCommand" signature="execCommand(command, argument)">
              <variable ilk="argument" name="command" />
              <variable ilk="argument" name="argument" />
            </scope>
            <scope ilk="function" name="default" signature="default(command, argument)">
              <variable ilk="argument" name="command" />
              <variable ilk="argument" name="argument" />
            </scope>
            <scope ilk="function" name="queryCommandEnabled" signature="queryCommandEnabled(command, argument)">
              <variable ilk="argument" name="command" />
              <variable ilk="argument" name="argument" />
            </scope>
            <scope ilk="function" name="queryCommandState" signature="queryCommandState(command, argument)">
              <variable ilk="argument" name="command" />
              <variable ilk="argument" name="argument" />
            </scope>
            <scope ilk="function" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="clobberFocus" signature="clobberFocus()" />
            <scope ilk="function" name="save" signature="save()" />
            <scope ilk="function" name="insertImage" signature="insertImage()" />
            <scope ilk="function" name="toggleHtmlEditing" signature="toggleHtmlEditing()" />
            <scope ilk="function" name="setFocus" signature="setFocus()" />
            <scope ilk="function" name="setBlur" signature="setBlur()" />
            <scope ilk="function" name="updateToolbar" signature="updateToolbar(force)">
              <variable ilk="argument" name="force" />
            </scope>
            <scope ilk="function" name="destroy" signature="destroy(finalize)">
              <variable ilk="argument" name="finalize" />
            </scope>
            <scope ilk="function" name="onDisplayChanged" signature="onDisplayChanged(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onLoad" signature="onLoad()" />
            <scope ilk="function" name="onFocus" signature="onFocus()" />
            <scope ilk="function" name="_save" signature="_save(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="method" signature="method(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="url" signature="url(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="content" signature="content(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope ilk="function" name="Editor2Dialog" signature="Editor2Dialog()">
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="createContent" signature="createContent()" />
            <scope ilk="function" name="parent" signature="parent()" />
            <scope ilk="function" name="show" signature="show()" />
            <scope ilk="function" name="onShow" signature="onShow()" />
            <scope ilk="function" name="closeWindow" signature="closeWindow()" />
            <scope ilk="function" name="hide" signature="hide()" />
          </scope>
          <variable name="modal" />
          <variable name="templatePath" />
          <variable name="executeScripts" />
          <variable name="refreshOnShow" />
          <variable name="width" />
          <variable name="height" />
          <variable name="windowState" />
          <variable name="displayCloseAction" />
          <variable name="contentFile" />
          <variable name="contentClass" />
          <scope ilk="function" name="Editor2DialogContent" signature="Editor2DialogContent()" />
          <scope attributes="__ctor__" classrefs="dojo.widget.HtmlWidget" ilk="function" name="RichText" signature="RichText()">
            <variable name="toolbarWidget" />
            <variable name="loadedPlugins" />
            <variable name="_inSourceMode" />
            <variable name="_htmlEditNode" />
            <variable name="_htmlEditNode.style.display" />
            <variable name="_htmlEditNode.style.width" />
            <variable name="_htmlEditNode.style.height" />
            <variable name="_htmlEditNode.value" />
            <variable name="_updateToolbarTimer" />
            <variable name="_updateToolbarLastRan" />
            <variable name="_htmlEditNode" />
            <scope attributes="__ctor__" ilk="function" name="RichText" signature="RichText()" />
            <variable name="inheritWidth" />
            <variable name="focusOnLoad" />
            <variable name="saveName" />
            <variable name="_content" />
            <variable name="height" />
            <variable name="minHeight" />
            <variable name="isClosed" />
            <variable name="isLoaded" />
            <variable name="useActiveX" />
            <variable name="relativeImageUrls" />
            <variable name="_SEPARATOR" />
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate()" />
          </scope>
          <variable citdl="Object" classrefs="dojo.widget.Editor2Plugin.SimpleContextMenu dojo.widget.Editor2DialogCommand" name="Editor2Plugin">
            <scope ilk="class" name="AlwaysShowToolbar">
              <scope attributes="__ctor__" ilk="function" name="AlwaysShowToolbar" signature="AlwaysShowToolbar()" />
            </scope>
            <scope ilk="class" name="ContextMenu">
              <scope attributes="__ctor__" ilk="function" name="ContextMenu" signature="ContextMenu()" />
            </scope>
            <scope ilk="function" name="SimpleContextMenu" signature="SimpleContextMenu()" />
            <scope ilk="function" name="GenericContextMenu" signature="GenericContextMenu()" />
            <scope ilk="function" name="LinkContextMenu" signature="LinkContextMenu()" />
            <scope ilk="function" name="ImageContextMenu" signature="ImageContextMenu()" />
            <scope ilk="class" name="CreateLinkDialog" />
            <scope ilk="class" name="FindReplace">
              <scope attributes="__ctor__" ilk="function" name="FindReplace" signature="FindReplace(name)">
                <variable ilk="argument" name="name" />
              </scope>
            </scope>
            <scope ilk="function" name="FindCommand" signature="FindCommand()" />
            <scope ilk="class" name="FindReplaceDialog" />
            <scope ilk="class" name="InsertImageDialog" />
            <scope ilk="class" name="InsertTableDialog" />
            <scope ilk="class" name="TableOperation" />
            <scope ilk="function" name="TableContextMenu" signature="TableContextMenu()">
              <scope ilk="function" name="createItems" signature="createItems()" />
              <scope ilk="function" name="caption" signature="caption()" />
              <scope ilk="function" name="checkVisibility" signature="checkVisibility()" />
            </scope>
            <scope ilk="class" name="ToolbarDndSupport">
              <scope attributes="__ctor__" ilk="function" name="ToolbarDndSupport" signature="ToolbarDndSupport()" />
            </scope>
          </variable>
          <scope ilk="function" name="Editor2ContextMenuItem" signature="Editor2ContextMenuItem()">
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="setup" signature="setup()" />
            <scope ilk="function" name="onClick" signature="onClick()" />
            <scope ilk="function" name="refresh" signature="refresh()" />
            <scope ilk="function" name="hide" signature="hide()" />
            <scope ilk="function" name="show" signature="show()" />
          </scope>
          <variable name="command" />
          <scope attributes="__ctor__" classrefs="dojo.widget.HtmlWidget" ilk="function" name="MenuItem2" signature="MenuItem2()">
            <variable name="command" />
            <variable name="cmd" />
            <variable name="domNode.style.display" />
            <variable name="domNode.style.display" />
            <scope attributes="__ctor__" ilk="function" name="MenuItem2" signature="MenuItem2()" />
          </scope>
          <scope ilk="function" name="Editor2CreateLinkDialog" signature="Editor2CreateLinkDialog()" />
          <variable name="templatePath" />
          <variable name="editableAttributes" />
          <variable name="loadContent" />
          <variable name="ok" />
          <scope ilk="function" name="Editor2FindDialog" signature="Editor2FindDialog()" />
          <scope ilk="function" name="Editor2ReplaceDialog" signature="Editor2ReplaceDialog()" />
          <scope ilk="function" name="Editor2InsertImageDialog" signature="Editor2InsertImageDialog()" />
          <scope ilk="function" name="Editor2InsertTableDialog" signature="Editor2InsertTableDialog()" />
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="Editor2Toolbar">
            <scope attributes="__ctor__" ilk="function" name="Editor2Toolbar" signature="Editor2Toolbar()" />
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <variable name="saveButton" />
            <variable name="ToolbarLatchedItemStyle" />
            <variable name="ToolbarEnabledItemStyle" />
            <variable name="ToolbarDisabledItemStyle" />
            <variable name="ToolbarHighlightedItemStyle" />
            <variable name="ToolbarHighlightedSelectStyle" />
            <variable name="ToolbarHighlightedSelectItemStyle" />
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="wikiwordClick" signature="wikiwordClick()" />
            <scope ilk="function" name="saveClick" signature="saveClick()" />
            <scope ilk="function" name="update" signature="update()" />
            <scope ilk="function" name="destroy" signature="destroy()" />
          </scope>
          <scope ilk="function" name="Editor2ToolbarButton" signature="Editor2ToolbarButton()" />
          <scope ilk="function" name="Editor2ToolbarDropDownButton" signature="Editor2ToolbarDropDownButton()" />
          <scope ilk="function" name="Editor2ToolbarColorPaletteButton" signature="Editor2ToolbarColorPaletteButton()" />
          <scope ilk="function" name="Editor2ToolbarFormatBlockPlainSelect" signature="Editor2ToolbarFormatBlockPlainSelect()" />
          <scope ilk="function" name="Editor2ToolbarComboItem" signature="Editor2ToolbarComboItem()" />
          <scope ilk="function" name="Editor2ToolbarFormatBlockSelect" signature="Editor2ToolbarFormatBlockSelect()" />
          <scope ilk="function" name="Editor2ToolbarFontSizeSelect" signature="Editor2ToolbarFontSizeSelect()" />
          <scope ilk="function" name="Editor2ToolbarFontNameSelect" signature="Editor2ToolbarFontNameSelect()" />
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="FilteringTable">
            <scope attributes="__ctor__" ilk="function" name="FilteringTable" signature="FilteringTable()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="FisheyeList">
            <scope attributes="__ctor__" ilk="function" name="FisheyeList" signature="FisheyeList()" />
          </scope>
          <scope ilk="function" name="FisheyeListItem" signature="FisheyeListItem()" />
          <scope classrefs="dojo.widget.ContentPane dojo.widget.FloatingPaneBase" ilk="class" name="FloatingPane">
            <scope attributes="__ctor__" ilk="function" name="FloatingPane" signature="FloatingPane()" />
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="show" signature="show(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="onShow" signature="onShow(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
          </scope>
          <scope ilk="function" name="FloatingPaneBase" signature="FloatingPaneBase()">
            <scope ilk="function" name="fillInFloatingPaneTemplate" signature="fillInFloatingPaneTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="source" signature="source(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="targetElmId" signature="targetElmId(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="maximizeWindow" signature="maximizeWindow(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="width" signature="width(w, h)">
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
            </scope>
            <scope ilk="function" name="height" signature="height(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="left" signature="left(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="top" signature="top(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="bottom" signature="bottom(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="right" signature="right(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="overflow" signature="overflow(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="minimizeWindow" signature="minimizeWindow(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="restoreWindow" signature="restoreWindow(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="toggleDisplay" signature="toggleDisplay()" />
            <scope ilk="function" name="closeWindow" signature="closeWindow(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="onMouseDown" signature="onMouseDown(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="bringToTop" signature="bringToTop()" />
            <scope ilk="function" name="setInitialWindowState" signature="setInitialWindowState()" />
            <scope ilk="function" name="taskBarSetup" signature="taskBarSetup()" />
            <scope ilk="function" name="showFloatingPane" signature="showFloatingPane()" />
            <scope ilk="function" name="onFloatingPaneShow" signature="onFloatingPaneShow()" />
            <scope ilk="function" name="resizeTo" signature="resizeTo(w, h)">
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
            </scope>
            <scope ilk="function" name="domNode" signature="domNode(w, h)">
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="h" />
            </scope>
            <scope ilk="function" name="checkSize" signature="checkSize()" />
          </scope>
          <variable name="title" />
          <variable name="iconSrc" />
          <variable name="hasShadow" />
          <variable name="constrainToContainer" />
          <variable name="taskBarId" />
          <variable name="resizable" />
          <variable name="titleBarDisplay" />
          <variable name="windowState" />
          <variable name="displayCloseAction" />
          <variable name="displayMinimizeAction" />
          <variable name="displayMaximizeAction" />
          <variable name="maxTaskBarConnectAttempts" />
          <variable name="taskBarConnectAttempts" />
          <variable name="templatePath" />
          <variable name="templateCssPath" />
          <variable name="drag" />
          <scope ilk="function" name="ModalFloatingPane" signature="ModalFloatingPane()">
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="show" signature="show()" />
            <scope ilk="function" name="hide" signature="hide()" />
            <scope ilk="function" name="closeWindow" signature="closeWindow()" />
          </scope>
          <variable name="windowState" />
          <variable name="displayCloseAction" />
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="GoogleMap">
            <scope attributes="__ctor__" ilk="function" name="GoogleMap" signature="GoogleMap()" />
          </scope>
          <scope ilk="class" name="HslColorPicker" />
          <variable citdl="Object" classrefs="dojo.widget.HtmlWidget" name="svg">
            <scope ilk="function" name="HslColorPicker" signature="HslColorPicker()" />
            <scope classrefs="dojo.widget.HtmlWidget dojo.widget.Chart" ilk="class" name="Chart">
              <scope attributes="__ctor__" ilk="function" name="Chart" signature="Chart()" />
              <variable citdl="Object" name="Plotter">
                <scope ilk="function" name="getX" signature="getX(value, chart)">
                  <variable ilk="argument" name="value" />
                  <variable ilk="argument" name="chart" />
                </scope>
                <scope ilk="function" name="getY" signature="getY(value, chart)">
                  <variable ilk="argument" name="value" />
                  <variable ilk="argument" name="chart" />
                </scope>
                <scope ilk="function" name="addPlotter" signature="addPlotter(name, func)">
                  <variable ilk="argument" name="name" />
                  <variable ilk="argument" name="func" />
                </scope>
                <scope ilk="function" name="plot" signature="plot(series, chart)">
                  <variable ilk="argument" name="series" />
                  <variable ilk="argument" name="chart" />
                </scope>
              </variable>
            </scope>
          </variable>
          <scope classrefs="dojo.widget.Widget" ilk="class" name="IButton">
            <scope attributes="__ctor__" ilk="function" name="IButton" signature="IButton()">
              <variable name="widgetType" />
              <variable name="color" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="InlineEditBox">
            <scope attributes="__ctor__" ilk="function" name="InlineEditBox" signature="InlineEditBox()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="LayoutContainer">
            <scope attributes="__ctor__" ilk="function" name="LayoutContainer" signature="LayoutContainer()" />
          </scope>
          <scope classrefs="dojo.widget.ContentPane" ilk="class" name="LinkPane">
            <scope attributes="__ctor__" ilk="function" name="LinkPane" signature="LinkPane()" />
          </scope>
          <scope ilk="class" name="Manager" />
          <variable citdl="Object" name="manager">
            <scope ilk="function" name="getUniqueId" signature="getUniqueId(widgetType)">
              <variable ilk="argument" name="widgetType" />
            </scope>
            <scope ilk="function" name="add" signature="add(widget)">
              <variable ilk="argument" name="widget" />
            </scope>
            <scope ilk="function" name="destroyAll" signature="destroyAll()" />
            <scope ilk="function" name="remove" signature="remove(widgetIndex)">
              <variable ilk="argument" name="widgetIndex" />
            </scope>
            <scope ilk="function" name="removeById" signature="removeById(id)">
              <variable ilk="argument" name="id" />
            </scope>
            <scope ilk="function" name="getWidgetById" signature="getWidgetById(id)">
              <variable ilk="argument" name="id" />
            </scope>
            <scope ilk="function" name="getWidgetsByType" signature="getWidgetsByType(type)">
              <variable ilk="argument" name="type" />
            </scope>
            <scope ilk="function" name="getWidgetsByFilter" signature="getWidgetsByFilter(unaryFunc, onlyOne)">
              <variable ilk="argument" name="unaryFunc" />
              <variable ilk="argument" name="onlyOne" />
            </scope>
            <scope ilk="function" name="getAllWidgets" signature="getAllWidgets()" />
            <scope ilk="function" name="getWidgetByNode" signature="getWidgetByNode(node)">
              <variable citdl="DOMNode" ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="registerWidgetPackage" signature="registerWidgetPackage(pname)">
              <variable ilk="argument" name="pname" />
            </scope>
            <scope ilk="function" name="getWidgetPackageList" signature="getWidgetPackageList()" />
            <scope ilk="function" name="getImplementation" signature="getImplementation(widgetName, ctorObject, mixins, ns)">
              <variable ilk="argument" name="widgetName" />
              <variable ilk="argument" name="ctorObject" />
              <variable ilk="argument" name="mixins" />
              <variable ilk="argument" name="ns" />
            </scope>
            <scope ilk="function" name="getImplementationName" signature="getImplementationName(widgetName, ns)">
              <variable ilk="argument" name="widgetName" />
              <variable ilk="argument" name="ns" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="onWindowResized" signature="onWindowResized()">
              <variable name="resizing" />
            </scope>
            <scope ilk="function" name="startShell" signature="startShell()" />
          </variable>
          <scope ilk="class" name="Menu2">
            <variable citdl="Object" name="OperaAndKonqFixer">
              <scope ilk="function" name="fixNode" signature="fixNode(node)">
                <variable ilk="argument" name="node" />
              </scope>
              <scope ilk="function" name="cleanNode" signature="cleanNode(node)">
                <variable ilk="argument" name="node" />
              </scope>
            </variable>
          </scope>
          <scope ilk="function" name="PopupContainerBase" signature="PopupContainerBase()" />
          <scope ilk="function" name="PopupContainer" signature="PopupContainer()" />
          <scope ilk="function" name="PopupMenu2" signature="PopupMenu2()" />
          <scope ilk="function" name="MenuSeparator2" signature="MenuSeparator2()" />
          <scope ilk="function" name="MenuBar2" signature="MenuBar2()" />
          <scope ilk="function" name="MenuBarItem2" signature="MenuBarItem2()" />
          <variable citdl="Object" name="PopupManager">
            <scope ilk="function" name="registerWin" signature="registerWin(win)">
              <variable ilk="argument" name="win" />
            </scope>
            <scope ilk="function" name="registerAllWindows" signature="registerAllWindows(targetWindow)">
              <variable ilk="argument" name="targetWindow" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="closed" signature="closed(menu)">
              <variable ilk="argument" name="menu" />
              <variable name="currentMenu" />
              <variable name="currentButton" />
              <variable name="currentFocusMenu" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="opened" signature="opened(menu, button)">
              <variable ilk="argument" name="menu" />
              <variable ilk="argument" name="button" />
              <variable name="currentMenu" />
              <variable name="currentFocusMenu" />
              <variable name="currentButton" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="setFocusedMenu" signature="setFocusedMenu(menu)">
              <variable ilk="argument" name="menu" />
              <variable name="currentFocusMenu" />
            </scope>
            <scope ilk="function" name="onKeyPress" signature="onKeyPress(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </variable>
          <scope classrefs="dojo.widget.DatePicker" ilk="class" name="MonthlyCalendar">
            <scope attributes="__ctor__" ilk="function" name="MonthlyCalendar" signature="MonthlyCalendar()" />
            <variable citdl="Object" name="util">
              <scope ilk="function" name="toRfcDate" signature="toRfcDate(jsDate)">
                <variable ilk="argument" name="jsDate" />
              </scope>
              <scope ilk="function" name="fromRfcDate" signature="fromRfcDate(rfcDate)">
                <variable ilk="argument" name="rfcDate" />
              </scope>
              <scope ilk="function" name="initFirstSaturday" signature="initFirstSaturday(month, year)">
                <variable ilk="argument" name="month" />
                <variable ilk="argument" name="year" />
              </scope>
            </variable>
          </scope>
          <scope ilk="class" name="Parse">
            <scope attributes="__ctor__" ilk="function" name="Parse" signature="Parse(fragment)">
              <variable ilk="argument" name="fragment" />
              <variable name="propertySetsList" />
              <variable name="fragment" />
              <variable name="createComponents" />
              <variable name="createSubComponents" />
              <variable name="parsePropertySets" />
              <variable name="parseProperties" />
              <variable name="getDataProvider" />
              <variable name="getPropertySetById" />
              <variable name="getPropertySetsByType" />
              <variable name="getPropertySets" />
              <variable name="createComponentFromScript" />
            </scope>
            <scope ilk="function" name="createComponents" signature="createComponents(frag, parentComp)">
              <variable ilk="argument" name="frag" />
              <variable ilk="argument" name="parentComp" />
            </scope>
            <scope ilk="function" name="createSubComponents" signature="createSubComponents(fragment, parentComp)">
              <variable ilk="argument" name="fragment" />
              <variable ilk="argument" name="parentComp" />
            </scope>
            <scope ilk="function" name="parsePropertySets" signature="parsePropertySets(fragment)">
              <variable ilk="argument" name="fragment" />
            </scope>
            <scope ilk="function" name="parseProperties" signature="parseProperties(fragment)">
              <variable ilk="argument" name="fragment" />
            </scope>
            <scope ilk="function" name="getDataProvider" signature="getDataProvider(objRef, dataUrl)">
              <variable ilk="argument" name="objRef" />
              <variable ilk="argument" name="dataUrl" />
            </scope>
            <scope ilk="function" name="getPropertySetById" signature="getPropertySetById(propertySetId)">
              <variable ilk="argument" name="propertySetId" />
            </scope>
            <scope ilk="function" name="getPropertySetsByType" signature="getPropertySetsByType(componentType)">
              <variable ilk="argument" name="componentType" />
            </scope>
            <scope ilk="function" name="getPropertySets" signature="getPropertySets(fragment)">
              <variable ilk="argument" name="fragment" />
            </scope>
            <scope ilk="function" name="createComponentFromScript" signature="createComponentFromScript(nodeRef, componentName, properties, ns)">
              <variable ilk="argument" name="nodeRef" />
              <variable ilk="argument" name="componentName" />
              <variable ilk="argument" name="properties" />
              <variable ilk="argument" name="ns" />
            </scope>
          </scope>
          <scope ilk="function" name="getParser" signature="getParser(name)">
            <variable ilk="argument" name="name" />
          </scope>
          <scope ilk="function" name="createWidget" signature="createWidget(name, props, refNode, position)">
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="props" />
            <variable ilk="argument" name="refNode" />
            <variable ilk="argument" name="position" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="RemoteTabController">
            <scope attributes="__ctor__" ilk="function" name="RemoteTabController" signature="RemoteTabController()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="ResizableTextarea">
            <scope attributes="__ctor__" ilk="function" name="ResizableTextarea" signature="ResizableTextarea()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="ResizeHandle">
            <scope attributes="__ctor__" ilk="function" name="ResizeHandle" signature="ResizeHandle()" />
          </scope>
          <scope classrefs="dojo.widget.ContentPane" ilk="class" name="Rounded">
            <scope attributes="__ctor__" ilk="function" name="Rounded" signature="Rounded()" />
          </scope>
          <scope classrefs="dojo.widget.ComboBox" ilk="class" name="Select">
            <scope attributes="__ctor__" ilk="function" name="Select" signature="Select()" />
            <variable name="forceValidOption" />
            <scope ilk="function" name="setValue" signature="setValue(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="setLabel" signature="setLabel(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="getLabel" signature="getLabel()" />
            <scope ilk="function" name="getState" signature="getState()" />
            <scope ilk="function" name="value" signature="value()" />
            <scope ilk="function" name="label" signature="label()" />
            <scope ilk="function" name="onKeyUp" signature="onKeyUp(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="setState" signature="setState(state)">
              <variable ilk="argument" name="state" />
            </scope>
            <scope ilk="function" name="setAllValues" signature="setAllValues(value1, value2)">
              <variable ilk="argument" name="value1" />
              <variable ilk="argument" name="value2" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="Show">
            <scope attributes="__ctor__" ilk="function" name="Show" signature="Show()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="ShowAction">
            <scope attributes="__ctor__" ilk="function" name="ShowAction" signature="ShowAction()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="ShowSlide">
            <scope attributes="__ctor__" ilk="function" name="ShowSlide" signature="ShowSlide()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="SlideShow">
            <scope attributes="__ctor__" ilk="function" name="SlideShow" signature="SlideShow()" />
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <variable name="imgUrls" />
            <variable name="imgUrlBase" />
            <variable name="urlsIdx" />
            <variable name="transitionInterval" />
            <variable name="imgWidth" />
            <variable name="imgHeight" />
            <variable name="background" />
            <variable name="foreground" />
            <variable name="stopped" />
            <variable name="fadeAnim" />
            <variable name="imagesContainer" />
            <variable name="startStopButton" />
            <variable name="controlsContainer" />
            <variable name="img1" />
            <variable name="img2" />
            <variable name="preventCache" />
            <scope ilk="function" name="delay" signature="delay()" />
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate()" />
            <scope ilk="function" name="getUrlSuffix" signature="getUrlSuffix()" />
            <scope ilk="function" name="togglePaused" signature="togglePaused()" />
            <scope ilk="function" name="backgroundImageLoaded" signature="backgroundImageLoaded()" />
            <scope ilk="function" name="endTransition" signature="endTransition()" />
            <scope ilk="function" name="loadNextImage" signature="loadNextImage()" />
            <scope ilk="function" name="srcObj" signature="srcObj()" />
            <scope ilk="function" name="srcFunc" signature="srcFunc()" />
            <scope ilk="function" name="adviceObj" signature="adviceObj()" />
            <scope ilk="function" name="adviceFunc" signature="adviceFunc()" />
            <scope ilk="function" name="once" signature="once()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="Slider">
            <scope attributes="__ctor__" ilk="function" name="Slider" signature="Slider()" />
            <variable name="minimumX" />
            <variable name="minimumY" />
            <variable name="maximumX" />
            <variable name="maximumY" />
            <variable name="snapValuesX" />
            <variable name="snapValuesY" />
            <variable name="_snapToGrid" />
            <variable name="isEnableX" />
            <variable name="isEnableY" />
            <variable name="_valueSizeX" />
            <variable name="_valueSizeY" />
            <variable name="_minX" />
            <variable name="_minY" />
            <variable name="_constraintWidth" />
            <variable name="_constraintHeight" />
            <variable name="_clipLeft" />
            <variable name="_clipRight" />
            <variable name="_clipTop" />
            <variable name="_clipBottom" />
            <variable name="_clipXdelta" />
            <variable name="_clipYdelta" />
            <variable name="initialValueX" />
            <variable name="initialValueY" />
            <variable name="flipX" />
            <variable name="flipY" />
            <variable name="clickSelect" />
            <variable name="activeDrag" />
            <variable name="templateCssPath" />
            <variable name="templatePath" />
            <variable name="sliderHandleNode" />
            <variable name="constrainingContainerNode" />
            <variable name="sliderBackgroundNode" />
            <variable name="progressBackgroundNode" />
            <variable name="topButtonNode" />
            <variable name="leftButtonNode" />
            <variable name="rightButtonNode" />
            <variable name="bottomButtonNode" />
            <variable name="focusNode" />
            <variable name="isDragInProgress" />
            <variable name="widgetStyle" />
            <variable name="buttonStyleX" />
            <variable name="buttonStyleY" />
            <variable name="bottomButtonSrc" />
            <variable name="topButtonSrc" />
            <variable name="leftButtonSrc" />
            <variable name="rightButtonSrc" />
            <variable name="backgroundSrc" />
            <variable name="progressBackgroundSrc" />
            <variable name="backgroundSize" />
            <variable name="backgroundStyle" />
            <variable name="handleStyle" />
            <variable name="handleSrc" />
            <variable name="showButtons" />
            <variable name="_eventCount" />
            <variable name="_typamaticTimer" />
            <variable name="_typamaticFunction" />
            <variable name="defaultTimeout" />
            <variable name="timeoutChangeRate" />
            <variable name="_currentTimeout" />
            <scope ilk="function" name="_handleKeyEvents" signature="_handleKeyEvents(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <variable citdl="Object" name="k">
              <scope ilk="function" name="KEY_LEFT_ARROW" signature="KEY_LEFT_ARROW(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_RIGHT_ARROW" signature="KEY_RIGHT_ARROW(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_DOWN_ARROW" signature="KEY_DOWN_ARROW(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_UP_ARROW" signature="KEY_UP_ARROW(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
            </variable>
            <scope ilk="function" name="_onKeyDown" signature="_onKeyDown(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_onKeyPress" signature="_onKeyPress(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_pressButton" signature="_pressButton(buttonNode)">
              <variable ilk="argument" name="buttonNode" />
            </scope>
            <scope ilk="function" name="_releaseButton" signature="_releaseButton(buttonNode)">
              <variable ilk="argument" name="buttonNode" />
            </scope>
            <scope ilk="function" name="_buttonPressed" signature="_buttonPressed(evt, buttonNode)">
              <variable ilk="argument" name="evt" />
              <variable ilk="argument" name="buttonNode" />
            </scope>
            <scope ilk="function" name="_bottomButtonPressed" signature="_bottomButtonPressed(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_bottomButtonDoubleClicked" signature="_bottomButtonDoubleClicked(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_topButtonPressed" signature="_topButtonPressed(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_topButtonDoubleClicked" signature="_topButtonDoubleClicked(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_leftButtonPressed" signature="_leftButtonPressed(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_leftButtonDoubleClicked" signature="_leftButtonDoubleClicked(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_rightButtonPressed" signature="_rightButtonPressed(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_rightButtonDoubleClicked" signature="_rightButtonDoubleClicked(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_buttonReleased" signature="_buttonReleased(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_mouseWheeled" signature="_mouseWheeled(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_discardEvent" signature="_discardEvent(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_setFocus" signature="_setFocus()" />
            <scope ilk="function" name="_removeComments" signature="_removeComments(parent)">
              <variable ilk="argument" name="parent" />
            </scope>
            <scope ilk="function" name="1" signature="1(parent)">
              <variable ilk="argument" name="parent" />
            </scope>
            <scope ilk="function" name="8" signature="8(parent)">
              <variable ilk="argument" name="parent" />
            </scope>
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="_snapX" signature="_snapX(x, handleMove)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="handleMove" />
            </scope>
            <scope ilk="function" name="_calc_valueSizeX" signature="_calc_valueSizeX()" />
            <scope ilk="function" name="setValueX" signature="setValueX(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="getValueX" signature="getValueX()" />
            <scope ilk="function" name="_snapY" signature="_snapY(y, handleMove)">
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="handleMove" />
            </scope>
            <scope ilk="function" name="_calc_valueSizeY" signature="_calc_valueSizeY()" />
            <scope ilk="function" name="setValueY" signature="setValueY(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="getValueY" signature="getValueY()" />
            <scope ilk="function" name="onClick" signature="onClick(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="notifyListeners" signature="notifyListeners()" />
            <scope ilk="function" name="onValueChanged" signature="onValueChanged(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
          </scope>
          <scope ilk="function" name="_SliderDragMoveSource" signature="_SliderDragMoveSource()" />
          <scope ilk="function" name="_SliderDragMoveObject" signature="_SliderDragMoveObject()" />
          <scope ilk="function" name="SliderHorizontal" signature="SliderHorizontal()">
            <scope ilk="function" name="postMixInProperties" signature="postMixInProperties()" />
            <scope ilk="function" name="notifyListeners" signature="notifyListeners()" />
            <scope ilk="function" name="getValue" signature="getValue()" />
            <scope ilk="function" name="setValue" signature="setValue(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="onValueChanged" signature="onValueChanged(value)">
              <variable ilk="argument" name="value" />
            </scope>
          </scope>
          <variable name="widgetType" />
          <variable name="isEnableX" />
          <variable name="isEnableY" />
          <variable name="initialValue" />
          <variable name="snapValues" />
          <variable name="minimum" />
          <variable name="maximum" />
          <variable name="buttonStyle" />
          <variable name="backgroundSize" />
          <variable name="backgroundSrc" />
          <variable name="flip" />
          <scope ilk="function" name="SliderVertical" signature="SliderVertical()">
            <scope ilk="function" name="postMixInProperties" signature="postMixInProperties()" />
            <scope ilk="function" name="notifyListeners" signature="notifyListeners()" />
            <scope ilk="function" name="getValue" signature="getValue()" />
            <scope ilk="function" name="setValue" signature="setValue(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="onValueChanged" signature="onValueChanged(value)">
              <variable ilk="argument" name="value" />
            </scope>
          </scope>
          <variable name="widgetType" />
          <variable name="isEnableX" />
          <variable name="isEnableY" />
          <variable name="initialValue" />
          <variable name="snapValues" />
          <variable name="minimum" />
          <variable name="maximum" />
          <variable name="buttonStyle" />
          <variable name="backgroundSize" />
          <variable name="backgroundSrc" />
          <variable name="flip" />
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="SortableTable">
            <scope attributes="__ctor__" ilk="function" name="SortableTable" signature="SortableTable()" />
          </scope>
          <scope ilk="class" name="Spinner">
            <scope attributes="__ctor__" ilk="function" name="Spinner" signature="Spinner()" />
            <variable name="upArrowNode" />
            <variable name="downArrowNode" />
            <variable name="_inputWidget" />
            <variable name="_typamaticTimer" />
            <variable name="_typamaticFunction" />
            <variable name="defaultTimeout" />
            <variable name="timeoutChangeRate" />
            <variable name="_currentTimeout" />
            <variable name="_eventCount" />
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <variable name="incrementSrc" />
            <variable name="decrementSrc" />
            <scope ilk="function" name="_handleKeyEvents" signature="_handleKeyEvents(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <variable citdl="Object" name="k">
              <scope ilk="function" name="KEY_DOWN_ARROW" signature="KEY_DOWN_ARROW(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
              <scope ilk="function" name="KEY_UP_ARROW" signature="KEY_UP_ARROW(evt)">
                <variable ilk="argument" name="evt" />
              </scope>
            </variable>
            <scope ilk="function" name="onSpinnerKeyDown" signature="onSpinnerKeyDown(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="onSpinnerKeyPress" signature="onSpinnerKeyPress(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="onSpinnerKeyUp" signature="onSpinnerKeyUp(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="resize" signature="resize()" />
            <scope ilk="function" name="width" signature="width(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="_pressButton" signature="_pressButton(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="_releaseButton" signature="_releaseButton(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="_arrowPressed" signature="_arrowPressed(evt, direction)">
              <variable ilk="argument" name="evt" />
              <variable ilk="argument" name="direction" />
            </scope>
            <scope ilk="function" name="_downArrowPressed" signature="_downArrowPressed(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_downArrowDoubleClicked" signature="_downArrowDoubleClicked(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_upArrowPressed" signature="_upArrowPressed(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_upArrowDoubleClicked" signature="_upArrowDoubleClicked(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_arrowReleased" signature="_arrowReleased(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_mouseWheeled" signature="_mouseWheeled(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="_discardEvent" signature="_discardEvent(evt)">
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="getCursorX" signature="getCursorX()" />
            <scope ilk="function" name="setCursorX" signature="setCursorX(x)">
              <variable ilk="argument" name="x" />
            </scope>
            <scope ilk="function" name="postMixInProperties" signature="postMixInProperties(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate()" />
          </scope>
          <scope ilk="function" name="SpinnerIntegerTextbox" signature="SpinnerIntegerTextbox()" />
          <scope ilk="function" name="SpinnerRealNumberTextbox" signature="SpinnerRealNumberTextbox()" />
          <scope ilk="function" name="SpinnerTimeTextbox" signature="SpinnerTimeTextbox()" />
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="SplitContainer">
            <scope attributes="__ctor__" ilk="function" name="SplitContainer" signature="SplitContainer()" />
          </scope>
          <scope ilk="function" name="SplitContainerPanel" signature="SplitContainerPanel()" />
          <scope classrefs="dojo.widget.DomButton" ilk="class" name="SvgButton">
            <scope attributes="__ctor__" ilk="function" name="SvgButton" signature="SvgButton()">
              <variable name="onFoo" />
              <variable name="label" />
              <variable name="setLabel" />
              <variable name="fillInTemplate" />
              <variable name="textSize" />
            </scope>
            <scope ilk="function" name="onFoo" signature="onFoo()" />
            <scope ilk="function" name="setLabel" signature="setLabel(x, y, textSize, label, shape)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="textSize" />
              <variable ilk="argument" name="label" />
              <variable ilk="argument" name="shape" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="fillInTemplate" signature="fillInTemplate(x, y, textSize, label, shape)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="textSize" />
              <variable ilk="argument" name="label" />
              <variable ilk="argument" name="shape" />
              <variable name="textSize" />
              <variable name="label" />
            </scope>
            <scope ilk="function" name="shapeString" signature="shapeString(x, y, textSize, label, shape)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="textSize" />
              <variable ilk="argument" name="label" />
              <variable ilk="argument" name="shape" />
            </scope>
            <scope ilk="function" name="coordinates" signature="coordinates(x, y, textSize, label, shape)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="textSize" />
              <variable ilk="argument" name="label" />
              <variable ilk="argument" name="shape" />
            </scope>
            <scope ilk="function" name="labelString" signature="labelString(x, y, textSize, label, shape)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="textSize" />
              <variable ilk="argument" name="label" />
              <variable ilk="argument" name="shape" />
            </scope>
            <scope ilk="function" name="templateString" signature="templateString(x, y, textSize, label, shape)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="textSize" />
              <variable ilk="argument" name="label" />
              <variable ilk="argument" name="shape" />
            </scope>
          </scope>
          <scope ilk="class" name="SvgWidget" />
          <scope classrefs="dojo.widget.Widget" ilk="class" name="SwtWidget">
            <scope attributes="__ctor__" ilk="function" name="SwtWidget" signature="SwtWidget()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TabContainer">
            <scope attributes="__ctor__" ilk="function" name="TabContainer" signature="TabContainer()" />
            <variable name="isContainer" />
            <variable name="labelPosition" />
            <variable name="closeButton" />
            <variable name="useVisibility" />
            <variable name="doLayout" />
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <variable name="selectedTab" />
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="addChild" signature="addChild(child, overrideContainerNode, pos, ref, insertIndex)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="overrideContainerNode" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="ref" />
              <variable ilk="argument" name="insertIndex" />
            </scope>
            <scope ilk="function" name="_setupTab" signature="_setupTab(tab)">
              <variable ilk="argument" name="tab" />
            </scope>
            <scope ilk="function" name="_doSizing" signature="_doSizing()" />
            <scope ilk="function" name="domNode" signature="domNode()" />
            <scope ilk="function" name="removeChild" signature="removeChild(tab)">
              <variable ilk="argument" name="tab" />
            </scope>
            <scope ilk="function" name="selectTab" signature="selectTab(tab, _noRefresh)">
              <variable ilk="argument" name="tab" />
              <variable ilk="argument" name="_noRefresh" />
            </scope>
            <scope ilk="function" name="_setupCloseButton" signature="_setupCloseButton(type)">
              <variable ilk="argument" name="type" />
            </scope>
            <scope ilk="function" name="tabNavigation" signature="tabNavigation(evt, tab)">
              <variable ilk="argument" name="evt" />
              <variable ilk="argument" name="tab" />
            </scope>
            <scope ilk="function" name="keyDown" signature="keyDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="_showTab" signature="_showTab(tab, _noRefresh)">
              <variable ilk="argument" name="tab" />
              <variable ilk="argument" name="_noRefresh" />
            </scope>
            <scope ilk="function" name="_hideTab" signature="_hideTab(tab)">
              <variable ilk="argument" name="tab" />
            </scope>
            <scope ilk="function" name="_runOnCloseTab" signature="_runOnCloseTab(tab)">
              <variable ilk="argument" name="tab" />
            </scope>
            <scope ilk="function" name="onResized" signature="onResized()" />
          </scope>
          <scope classrefs="dojo.widget.FloatingPane" ilk="class" name="TaskBar">
            <scope attributes="__ctor__" ilk="function" name="TaskBar" signature="TaskBar()" />
          </scope>
          <scope ilk="function" name="TaskBarItem" signature="TaskBarItem()" />
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TimePicker">
            <scope attributes="__ctor__" ilk="function" name="TimePicker" signature="TimePicker()" />
            <variable citdl="Object" name="util">
              <scope ilk="function" name="toRfcDateTime" signature="toRfcDateTime(jsDate)">
                <variable ilk="argument" name="jsDate" />
              </scope>
              <scope ilk="function" name="fromRfcDateTime" signature="fromRfcDateTime(rfcDate, useDefaultMinutes, isAnyTime)">
                <variable ilk="argument" name="rfcDate" />
                <variable ilk="argument" name="useDefaultMinutes" />
                <variable ilk="argument" name="isAnyTime" />
              </scope>
              <scope ilk="function" name="toAmPmHour" signature="toAmPmHour(hour)">
                <variable ilk="argument" name="hour" />
              </scope>
              <scope ilk="function" name="fromAmPmHour" signature="fromAmPmHour(amPmHour, isAm)">
                <variable ilk="argument" name="amPmHour" />
                <variable ilk="argument" name="isAm" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TitlePane">
            <scope attributes="__ctor__" ilk="function" name="TitlePane" signature="TitlePane()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="Toaster">
            <scope attributes="__ctor__" ilk="function" name="Toaster" signature="Toaster()" />
            <variable name="templateString" />
            <variable name="templateCssPath" />
            <variable name="clipNode" />
            <variable name="messageTopic" />
            <variable name="contentNode" />
            <variable name="_scrollConnected" />
            <variable name="messageTypes" />
            <variable name="clipCssClass" />
            <variable name="containerCssClass" />
            <variable name="contentCssClass" />
            <variable name="messageCssClass" />
            <variable name="warningCssClass" />
            <variable name="errorCssClass" />
            <variable name="fatalCssClass" />
            <variable name="positionDirection" />
            <variable name="positionDirectionTypes" />
            <variable name="showDelay" />
            <variable name="slideAnim" />
            <variable name="fadeAnim" />
            <variable name="bgIframe" />
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="setContent" signature="setContent(msg, messageType)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="messageType" />
            </scope>
            <variable citdl="Object" name="this">
              <variable citdl="Object" name="messageTypes">
                <scope ilk="function" name="WARNING" signature="WARNING(msg, messageType)">
                  <variable ilk="argument" name="msg" />
                  <variable ilk="argument" name="messageType" />
                </scope>
                <scope ilk="function" name="ERROR" signature="ERROR(msg, messageType)">
                  <variable ilk="argument" name="msg" />
                  <variable ilk="argument" name="messageType" />
                </scope>
                <scope ilk="function" name="FATAL" signature="FATAL(msg, messageType)">
                  <variable ilk="argument" name="msg" />
                  <variable ilk="argument" name="messageType" />
                </scope>
                <scope ilk="function" name="MESSAGE" signature="MESSAGE(msg, messageType)">
                  <variable ilk="argument" name="msg" />
                  <variable ilk="argument" name="messageType" />
                </scope>
              </variable>
            </variable>
            <scope ilk="function" name="default" signature="default(msg, messageType)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="messageType" />
            </scope>
            <scope ilk="function" name="top" signature="top(msg, messageType)">
              <variable ilk="argument" name="msg" />
              <variable ilk="argument" name="messageType" />
            </scope>
            <scope ilk="function" name="placeClip" signature="placeClip()" />
            <scope ilk="function" name="onSelect" signature="onSelect(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onScroll" signature="onScroll()" />
            <scope ilk="function" name="show" signature="show()" />
            <scope ilk="function" name="hide" signature="hide()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="Toggler">
            <scope attributes="__ctor__" ilk="function" name="Toggler" signature="Toggler()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="Toolbar">
            <scope attributes="__ctor__" ilk="function" name="Toolbar" signature="Toolbar()" />
          </scope>
          <scope ilk="function" name="ToolbarContainer" signature="ToolbarContainer()" />
          <scope ilk="function" name="ToolbarItem" signature="ToolbarItem()">
            <scope ilk="function" name="make" signature="make(wh, whIsType, props)">
              <variable ilk="argument" name="wh" />
              <variable ilk="argument" name="whIsType" />
              <variable ilk="argument" name="props" />
            </scope>
          </scope>
          <scope ilk="function" name="ToolbarButtonGroup" signature="ToolbarButtonGroup()" />
          <scope ilk="function" name="ToolbarButton" signature="ToolbarButton()" />
          <scope ilk="function" name="ToolbarDialog" signature="ToolbarDialog()" />
          <scope ilk="function" name="ToolbarMenu" signature="ToolbarMenu()" />
          <scope ilk="function" name="ToolbarSeparator" signature="ToolbarSeparator()" />
          <scope ilk="function" name="ToolbarSpace" signature="ToolbarSpace()" />
          <scope ilk="function" name="ToolbarSelect" signature="ToolbarSelect()" />
          <scope ilk="function" name="ToolbarMenuItem" signature="ToolbarMenuItem()" />
          <scope attributes="__ctor__" ilk="function" name="Icon" signature="Icon(enabled, disabled, hovered, selected)">
            <variable ilk="argument" name="enabled" />
            <variable ilk="argument" name="disabled" />
            <variable ilk="argument" name="hovered" />
            <variable ilk="argument" name="selected" />
            <variable name="getState">
              <scope attributes="__ctor__" ilk="function" name="getState" signature="getState()" />
            </variable>
            <variable name="setState">
              <scope attributes="__ctor__" ilk="function" name="setState" signature="setState(value)">
                <variable ilk="argument" name="value" />
              </scope>
            </variable>
            <variable name="setSrc">
              <scope attributes="__ctor__" ilk="function" name="setSrc" signature="setSrc(state, value)">
                <variable ilk="argument" name="state" />
                <variable ilk="argument" name="value" />
              </scope>
            </variable>
            <variable name="setIcon">
              <scope attributes="__ctor__" ilk="function" name="setIcon" signature="setIcon(icon)">
                <variable ilk="argument" name="icon" />
              </scope>
            </variable>
            <variable name="enable">
              <scope attributes="__ctor__" ilk="function" name="enable" signature="enable()" />
            </variable>
            <variable name="disable">
              <scope attributes="__ctor__" ilk="function" name="disable" signature="disable()" />
            </variable>
            <variable name="hover">
              <scope attributes="__ctor__" ilk="function" name="hover" signature="hover()" />
            </variable>
            <variable name="select">
              <scope attributes="__ctor__" ilk="function" name="select" signature="select()" />
            </variable>
            <variable name="getSize">
              <scope attributes="__ctor__" ilk="function" name="getSize" signature="getSize()" />
            </variable>
            <variable name="setSize">
              <scope attributes="__ctor__" ilk="function" name="setSize" signature="setSize(w, h)">
                <variable ilk="argument" name="w" />
                <variable ilk="argument" name="h" />
              </scope>
            </variable>
            <variable name="getNode">
              <scope attributes="__ctor__" ilk="function" name="getNode" signature="getNode()" />
            </variable>
            <variable name="getSrc">
              <scope attributes="__ctor__" ilk="function" name="getSrc" signature="getSrc(state)">
                <variable ilk="argument" name="state" />
              </scope>
            </variable>
            <variable name="update">
              <scope attributes="__ctor__" ilk="function" name="update" signature="update()" />
            </variable>
            <scope ilk="function" name="make" signature="make(a, )">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.ContentPane dojo.widget.PopupContainerBase" ilk="class" name="Tooltip">
            <scope attributes="__ctor__" ilk="function" name="Tooltip" signature="Tooltip()" />
            <variable name="isContainer" />
            <variable name="caption" />
            <variable name="showDelay" />
            <variable name="hideDelay" />
            <variable name="connectId" />
            <variable name="templateCssPath" />
            <variable name="connectNode" />
            <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="onMouseOver" signature="onMouseOver(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="x" signature="x(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onMouseMove" signature="onMouseMove(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="open" signature="open()" />
            <scope ilk="function" name="close" signature="close()" />
            <scope ilk="function" name="position" signature="position()" />
            <scope ilk="function" name="_LoadedContent" signature="_LoadedContent()" />
            <scope ilk="function" name="checkSize" signature="checkSize()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="Tree">
            <scope attributes="__ctor__" ilk="function" name="Tree" signature="Tree()">
              <variable name="eventNames" />
              <variable name="tree" />
              <variable name="actionsDisabled" />
              <variable name="containerNode" />
              <variable name="state" />
            </scope>
            <variable name="widgetType" />
            <variable name="eventNamesDefault" />
            <variable name="isContainer" />
            <variable name="DNDMode" />
            <variable name="lockLevel" />
            <variable name="strictFolders" />
            <variable name="DNDModes" />
            <variable name="BETWEEN" />
            <variable name="ONTO" />
            <variable name="DNDAcceptTypes" />
            <variable name="templateCssPath" />
            <variable name="templateString" />
            <variable name="isExpanded" />
            <variable name="isTree" />
            <variable name="controller" />
            <variable name="selector" />
            <variable name="menu" />
            <variable name="expandLevel" />
            <variable name="blankIconSrc" />
            <variable name="gridIconSrcT" />
            <variable name="gridIconSrcL" />
            <variable name="gridIconSrcV" />
            <variable name="gridIconSrcP" />
            <variable name="gridIconSrcC" />
            <variable name="gridIconSrcX" />
            <variable name="gridIconSrcY" />
            <variable name="gridIconSrcZ" />
            <variable name="expandIconSrcPlus" />
            <variable name="expandIconSrcMinus" />
            <variable name="expandIconSrcLoading" />
            <variable name="iconWidth" />
            <variable name="iconHeight" />
            <variable name="showGrid" />
            <variable name="showRootGrid" />
            <variable name="actions" />
            <scope ilk="function" name="objectId" signature="objectId()" />
            <scope ilk="function" name="actionIsDisabled" signature="actionIsDisabled(action)">
              <variable ilk="argument" name="action" />
            </scope>
            <scope ilk="function" name="getInfo" signature="getInfo()" />
            <scope ilk="function" name="widgetId" signature="widgetId()" />
            <scope ilk="function" name="initializeController" signature="initializeController()" />
            <scope ilk="function" name="DNDController" signature="DNDController()" />
            <scope ilk="function" name="initializeSelector" signature="initializeSelector()" />
            <scope ilk="function" name="dieWithTree" signature="dieWithTree()" />
            <scope ilk="function" name="initialize" signature="initialize(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="createDOMNode" signature="createDOMNode()" />
            <scope ilk="function" name="source" signature="source()" />
            <scope ilk="function" name="destroy" signature="destroy()" />
            <scope ilk="function" name="addChild" signature="addChild(child, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="child" signature="child(child)">
              <variable ilk="argument" name="child" />
            </scope>
            <scope ilk="function" name="index" signature="index(child, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="parent" signature="parent(child, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="domNodeInitialized" signature="domNodeInitialized(child, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="doAddChild" signature="doAddChild(child, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="makeBlankImg" signature="makeBlankImg()" />
            <scope ilk="function" name="updateIconTree" signature="updateIconTree()" />
            <scope ilk="function" name="toString" signature="toString()" />
            <scope ilk="function" name="move" signature="move(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="oldParent" signature="oldParent(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="newParent" signature="newParent(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="doMove" signature="doMove(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="removeNode" signature="removeNode(child)">
              <variable ilk="argument" name="child" />
            </scope>
            <scope ilk="function" name="doRemoveNode" signature="doRemoveNode(child)">
              <variable ilk="argument" name="child" />
            </scope>
            <scope ilk="function" name="markLoading" signature="markLoading()" />
            <scope ilk="function" name="unMarkLoading" signature="unMarkLoading()" />
            <scope ilk="function" name="lock" signature="lock()" />
            <scope ilk="function" name="unlock" signature="unlock()" />
            <scope ilk="function" name="isLocked" signature="isLocked()" />
            <scope ilk="function" name="flushLock" signature="flushLock()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TreeBasicController">
            <scope attributes="__ctor__" ilk="function" name="TreeBasicController" signature="TreeBasicController()">
              <variable name="node" />
              <variable name="expandLevel" />
              <variable name="process" />
            </scope>
            <variable name="widgetType" />
            <variable name="DNDController" />
            <variable name="dieWithTree" />
            <scope ilk="function" name="initialize" signature="initialize(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="listenTree" signature="listenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" name="unlistenTree" signature="unlistenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" name="onTreeDestroy" signature="onTreeDestroy(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onCreateDOMNode" signature="onCreateDOMNode(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onTreeCreate" signature="onTreeCreate(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="expandToLevel" signature="expandToLevel(node, level)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="level" />
            </scope>
            <scope ilk="function" name="onTreeClick" signature="onTreeClick(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="expand" signature="expand(node, sync, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="collapse" signature="collapse(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="canMove" signature="canMove(child, newParent)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
            </scope>
            <scope ilk="function" name="move" signature="move(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="doMove" signature="doMove(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="canRemoveNode" signature="canRemoveNode(child)">
              <variable ilk="argument" name="child" />
            </scope>
            <scope ilk="function" name="removeNode" signature="removeNode(node, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="doRemoveNode" signature="doRemoveNode(node, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="canCreateChild" signature="canCreateChild(parent, index, data)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" name="createChild" signature="createChild(parent, index, data, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="doCreateChild" signature="doCreateChild(parent, index, data, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget dojo.widget.TreeCommon" ilk="class" name="TreeBasicControllerV3">
            <scope attributes="__ctor__" ilk="function" name="TreeBasicControllerV3" signature="TreeBasicControllerV3()">
              <variable name="listenedTrees" />
              <variable name="editor.controller" />
              <variable name="onExpandClickHandler" />
            </scope>
            <variable name="widgetType" />
            <variable name="listenTreeEvents" />
            <variable name="editor" />
            <variable name="batchExpandTimeout" />
            <scope ilk="function" name="listenNodeFilter" signature="listenNodeFilter(elem)">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope ilk="function" name="listenNode" signature="listenNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="unlistenNode" signature="unlistenNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="onAfterSetFolder" signature="onAfterSetFolder(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onAfterUnsetFolder" signature="onAfterUnsetFolder(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="initialize" signature="initialize(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="getInfo" signature="getInfo(elem)">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope ilk="function" name="onAfterChangeTree" signature="onAfterChangeTree(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="_getNextSibling" signature="_getNextSibling(nodeWidget)">
              <variable ilk="argument" name="nodeWidget" />
            </scope>
            <scope ilk="function" name="_getPreviousSibling" signature="_getPreviousSibling(nodeWidget)">
              <variable ilk="argument" name="nodeWidget" />
            </scope>
            <scope ilk="function" name="_focusNextVisible" signature="_focusNextVisible(treeWidget, nodeWidget)">
              <variable ilk="argument" name="treeWidget" />
              <variable ilk="argument" name="nodeWidget" />
            </scope>
            <scope ilk="function" name="_focusPreviousVisible" signature="_focusPreviousVisible(treeWidget, nodeWidget)">
              <variable ilk="argument" name="treeWidget" />
              <variable ilk="argument" name="nodeWidget" />
            </scope>
            <scope ilk="function" name="_focusZoomIn" signature="_focusZoomIn(treeWidget, nodeWidget)">
              <variable ilk="argument" name="treeWidget" />
              <variable ilk="argument" name="nodeWidget" />
            </scope>
            <scope ilk="function" name="_focusZoomOut" signature="_focusZoomOut(treeWidget, nodeWidget)">
              <variable ilk="argument" name="treeWidget" />
              <variable ilk="argument" name="nodeWidget" />
            </scope>
            <scope ilk="function" name="onFocusNode" signature="onFocusNode(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onBlurNode" signature="onBlurNode(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="_focusLabel" signature="_focusLabel(treeWidget, nodeWidget)">
              <variable ilk="argument" name="treeWidget" />
              <variable ilk="argument" name="nodeWidget" />
            </scope>
            <scope ilk="function" name="onKey" signature="onKey(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable citdl="Object" name="e">
              <scope ilk="function" name="KEY_TAB" signature="KEY_TAB(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope ilk="function" name="KEY_RIGHT_ARROW" signature="KEY_RIGHT_ARROW(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope ilk="function" name="KEY_LEFT_ARROW" signature="KEY_LEFT_ARROW(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope ilk="function" name="KEY_UP_ARROW" signature="KEY_UP_ARROW(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope ilk="function" name="KEY_DOWN_ARROW" signature="KEY_DOWN_ARROW(e)">
                <variable ilk="argument" name="e" />
              </scope>
            </variable>
            <scope ilk="function" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onFocusTree" signature="onFocusTree(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onAfterTreeCreate" signature="onAfterTreeCreate(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="expandAll" signature="expandAll(nodeOrTree)">
              <variable ilk="argument" name="nodeOrTree" />
            </scope>
            <scope ilk="function" name="collapseAll" signature="collapseAll(nodeOrTree)">
              <variable ilk="argument" name="nodeOrTree" />
            </scope>
            <scope ilk="function" name="expandToLevel" signature="expandToLevel(nodeOrTree, level)">
              <variable ilk="argument" name="nodeOrTree" />
              <variable ilk="argument" name="level" />
            </scope>
            <scope ilk="function" name="getWidgetByNode" signature="getWidgetByNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="onExpandClick" signature="onExpandClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="expand" signature="expand(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="collapse" signature="collapse(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="canEditLabel" signature="canEditLabel(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="editLabelStart" signature="editLabelStart(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="editLabelFinish" signature="editLabelFinish(save)">
              <variable ilk="argument" name="save" />
            </scope>
            <scope ilk="function" name="doEditLabelStart" signature="doEditLabelStart(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="doEditLabelFinish" signature="doEditLabelFinish(save, server_data)">
              <variable ilk="argument" name="save" />
              <variable ilk="argument" name="server_data" />
            </scope>
            <scope ilk="function" name="title" signature="title(parent, index)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="makeDefaultNode" signature="makeDefaultNode(parent, index)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="runStages" signature="runStages(check, prepare, make, finalize, expose, args)">
              <variable ilk="argument" name="check" />
              <variable ilk="argument" name="prepare" />
              <variable ilk="argument" name="make" />
              <variable ilk="argument" name="finalize" />
              <variable ilk="argument" name="expose" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="createAndEdit" signature="createAndEdit(parent, index)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="canClone" signature="canClone(child, newParent, index, deep)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope ilk="function" name="clone" signature="clone(child, newParent, index, deep)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope ilk="function" name="exposeClone" signature="exposeClone(child, newParent)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
            </scope>
            <scope ilk="function" name="doClone" signature="doClone(child, newParent, index, deep)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope ilk="function" name="canDetach" signature="canDetach(child)">
              <variable ilk="argument" name="child" />
            </scope>
            <scope ilk="function" name="detach" signature="detach(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="doDetach" signature="doDetach(node, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="canDestroy" signature="canDestroy(child)">
              <variable ilk="argument" name="child" />
            </scope>
            <scope ilk="function" name="destroy" signature="destroy(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="doDestroy" signature="doDestroy(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="canMoveNotANode" signature="canMoveNotANode(child, parent)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="parent" />
            </scope>
            <scope ilk="function" name="canMove" signature="canMove(child, newParent)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
            </scope>
            <scope ilk="function" name="move" signature="move(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="doMove" signature="doMove(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="exposeMove" signature="exposeMove(child, newParent)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
            </scope>
            <scope ilk="function" name="canCreateChild" signature="canCreateChild(parent, index, data)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" name="createChild" signature="createChild(parent, index, data)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" name="doCreateChild" signature="doCreateChild(parent, index, data)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" name="exposeCreateChild" signature="exposeCreateChild(parent)">
              <variable ilk="argument" name="parent" />
            </scope>
          </scope>
          <scope ilk="class" name="TreeCommon">
            <scope attributes="__ctor__" ilk="function" name="TreeCommon" signature="TreeCommon()" />
            <variable name="listenTreeEvents" />
            <variable name="listenedTrees" />
            <variable name="listenNodeFilter" />
            <scope ilk="function" name="listenTree" signature="listenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" name="listenNode" signature="listenNode()" />
            <scope ilk="function" name="unlistenNode" signature="unlistenNode()" />
            <scope ilk="function" name="unlistenTree" signature="unlistenTree(tree, nodeFilter)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="nodeFilter" />
            </scope>
            <scope ilk="function" name="domElement2TreeNode" signature="domElement2TreeNode(domElement)">
              <variable ilk="argument" name="domElement" />
            </scope>
            <scope ilk="function" name="processDescendants" signature="processDescendants(elem, filter, func, skipFirst)">
              <variable ilk="argument" name="elem" />
              <variable ilk="argument" name="filter" />
              <variable ilk="argument" name="func" />
              <variable ilk="argument" name="skipFirst" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.PopupMenu2" ilk="class" name="TreeContextMenu">
            <scope attributes="__ctor__" ilk="function" name="TreeContextMenu" signature="TreeContextMenu()">
              <variable name="listenedTrees" />
            </scope>
            <variable name="widgetType" />
            <scope ilk="function" name="open" signature="open(x, y, parentMenu, explodeSrc)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="parentMenu" />
              <variable ilk="argument" name="explodeSrc" />
            </scope>
            <scope ilk="function" name="menu" signature="menu(x, y, parentMenu, explodeSrc)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="parentMenu" />
              <variable ilk="argument" name="explodeSrc" />
            </scope>
            <scope ilk="function" name="listenTree" signature="listenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" name="unlistenTree" signature="unlistenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" name="onTreeDestroy" signature="onTreeDestroy(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="bindTreeNode" signature="bindTreeNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="unBindTreeNode" signature="unBindTreeNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="onCreateDOMNode" signature="onCreateDOMNode(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onMoveFrom" signature="onMoveFrom(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onMoveTo" signature="onMoveTo(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onRemoveNode" signature="onRemoveNode(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onAddChild" signature="onAddChild(message)">
              <variable ilk="argument" name="message" />
            </scope>
          </scope>
          <scope attributes="__ctor__" ilk="function" name="TreeMenuItem" signature="TreeMenuItem()">
            <scope ilk="function" name="initialize" signature="initialize(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="getTreeNode" signature="getTreeNode()" />
            <scope ilk="function" name="menuOpen" signature="menuOpen(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="toString" signature="toString()" />
          </scope>
          <variable name="widgetType" />
          <variable name="treeActions" />
          <scope classrefs="dojo.widget.PopupMenu2 dojo.widget.TreeCommon" ilk="class" name="TreeContextMenuV3">
            <scope attributes="__ctor__" ilk="function" name="TreeContextMenuV3" signature="TreeContextMenuV3()">
              <variable name="listenedTrees" />
            </scope>
            <variable name="widgetType" />
            <variable name="listenTreeEvents" />
            <scope ilk="function" name="open" signature="open(x, y, parentMenu, explodeSrc)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="parentMenu" />
              <variable ilk="argument" name="explodeSrc" />
            </scope>
            <scope ilk="function" name="menu" signature="menu(x, y, parentMenu, explodeSrc)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="parentMenu" />
              <variable ilk="argument" name="explodeSrc" />
            </scope>
            <scope ilk="function" name="listenNodeFilter" signature="listenNodeFilter(elem)">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope ilk="function" name="onBeforeTreeDestroy" signature="onBeforeTreeDestroy(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onAfterChangeTree" signature="onAfterChangeTree(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="listenNode" signature="listenNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="unlistenNode" signature="unlistenNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <scope attributes="__ctor__" ilk="function" name="TreeMenuItemV3" signature="TreeMenuItemV3()">
            <scope ilk="function" name="initialize" signature="initialize(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="getTreeNode" signature="getTreeNode()" />
            <scope ilk="function" name="menuOpen" signature="menuOpen(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="toString" signature="toString()" />
          </scope>
          <variable name="widgetType" />
          <variable name="treeActions" />
          <scope ilk="class" name="TreeControllerExtension">
            <scope attributes="__ctor__" ilk="function" name="TreeControllerExtension" signature="TreeControllerExtension()">
              <variable name="node" />
              <variable name="savedIndices" />
              <variable name="process" />
            </scope>
            <scope ilk="function" name="saveExpandedIndices" signature="saveExpandedIndices(node, field)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="field" />
            </scope>
            <scope ilk="function" name="restoreExpandedIndices" signature="restoreExpandedIndices(node, savedIndices, field)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="savedIndices" />
              <variable ilk="argument" name="field" />
            </scope>
          </scope>
          <scope ilk="class" name="TreeDemo" />
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TreeDeselectOnDblselect">
            <scope attributes="__ctor__" ilk="function" name="TreeDeselectOnDblselect" signature="TreeDeselectOnDblselect()" />
            <variable name="widgetType" />
            <variable name="selector" />
            <scope ilk="function" name="initialize" signature="initialize()" />
            <scope ilk="function" name="onDblselect" signature="onDblselect(message)">
              <variable ilk="argument" name="message" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.TreeExtension" ilk="class" name="TreeDisableWrapExtension">
            <scope attributes="__ctor__" ilk="function" name="TreeDisableWrapExtension" signature="TreeDisableWrapExtension()" />
            <variable name="widgetType" />
            <variable name="templateCssPath" />
            <scope ilk="function" name="listenTree" signature="listenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget dojo.widget.TreeCommon" ilk="class" name="TreeDndControllerV3">
            <scope attributes="__ctor__" ilk="function" name="TreeDndControllerV3" signature="TreeDndControllerV3()">
              <variable name="dragSources" />
              <variable name="dropTargets" />
              <variable name="listenedTrees" />
              <variable name="treeController" />
            </scope>
            <variable name="widgetType" />
            <variable name="listenTreeEvents" />
            <scope ilk="function" name="listenNodeFilter" signature="listenNodeFilter(elem)">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope ilk="function" name="initialize" signature="initialize(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="onBeforeTreeDestroy" signature="onBeforeTreeDestroy(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onAfterAddChild" signature="onAfterAddChild(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onAfterChangeTree" signature="onAfterChangeTree(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="listenNode" signature="listenNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="makeDragSource" signature="makeDragSource(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="makeDropTarget" signature="makeDropTarget(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="unlistenNode" signature="unlistenNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.TreeExtension" ilk="class" name="TreeDocIconExtension">
            <scope attributes="__ctor__" ilk="function" name="TreeDocIconExtension" signature="TreeDocIconExtension()" />
            <variable name="widgetType" />
            <variable name="templateCssPath" />
            <variable name="listenTreeEvents" />
            <scope ilk="function" name="listenNodeFilter" signature="listenNodeFilter(elem)">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope ilk="function" name="getNodeType" signature="getNodeType(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="setNodeTypeClass" signature="setNodeTypeClass(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="onAfterSetFolder" signature="onAfterSetFolder(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onAfterUnsetFolder" signature="onAfterUnsetFolder(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="listenNode" signature="listenNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="onAfterChangeTree" signature="onAfterChangeTree(message)">
              <variable ilk="argument" name="message" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TreeEditor">
            <scope attributes="__ctor__" ilk="function" name="TreeEditor" signature="TreeEditor()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TreeEmphaseOnSelect">
            <scope attributes="__ctor__" ilk="function" name="TreeEmphaseOnSelect" signature="TreeEmphaseOnSelect()">
              <variable name="saveSelected" />
            </scope>
            <variable name="widgetType" />
            <variable name="selector" />
            <scope ilk="function" name="initialize" signature="initialize()" />
            <scope ilk="function" name="onSelect" signature="onSelect(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onDeselect" signature="onDeselect(message)">
              <variable ilk="argument" name="message" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget dojo.widget.TreeCommon" ilk="class" name="TreeExtension">
            <scope attributes="__ctor__" ilk="function" name="TreeExtension" signature="TreeExtension()">
              <variable name="listenedTrees" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.TreeExtension" ilk="class" name="TreeLinkExtension">
            <scope attributes="__ctor__" ilk="function" name="TreeLinkExtension" signature="TreeLinkExtension()">
              <variable name="params" />
            </scope>
            <variable name="widgetType" />
            <variable name="listenTreeEvents" />
            <scope ilk="function" name="listenTree" signature="listenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" name="makeALabel" signature="makeALabel()" />
            <scope ilk="function" name="onAfterChangeTree" signature="onAfterChangeTree(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="listenNode" signature="listenNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.TreeBasicController" ilk="class" name="TreeLoadingController">
            <scope attributes="__ctor__" ilk="function" name="TreeLoadingController" signature="TreeLoadingController()" />
            <variable name="widgetType" />
            <variable name="RPCUrl" />
            <variable name="RPCActionParam" />
            <scope ilk="function" name="RPCErrorHandler" signature="RPCErrorHandler(type, obj, evt)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="evt" />
            </scope>
            <scope ilk="function" name="preventCache" signature="preventCache(kw)">
              <variable ilk="argument" name="kw" />
            </scope>
            <scope ilk="function" name="getRPCUrl" signature="getRPCUrl(action)">
              <variable ilk="argument" name="action" />
            </scope>
            <scope ilk="function" name="loadProcessResponse" signature="loadProcessResponse(node, result, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="result" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="getInfo" signature="getInfo(obj)">
              <variable ilk="argument" name="obj" />
            </scope>
            <scope ilk="function" name="runRPC" signature="runRPC(kw)">
              <variable ilk="argument" name="kw" />
            </scope>
            <scope ilk="function" name="url" signature="url(node, sync, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="handle" signature="handle(kw)">
              <variable ilk="argument" name="kw" />
            </scope>
            <scope ilk="function" name="mimetype" signature="mimetype(kw)">
              <variable ilk="argument" name="kw" />
            </scope>
            <scope ilk="function" name="sync" signature="sync(node, sync, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="content" signature="content(kw)">
              <variable ilk="argument" name="kw" />
            </scope>
            <scope ilk="function" name="loadRemote" signature="loadRemote(node, sync, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="node" signature="node(node, sync, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="tree" signature="tree(node, sync, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="load" signature="load(node, sync, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="lock" signature="lock(node, sync, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="params" signature="params(node, sync, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="expand" signature="expand(node, sync, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="doMove" signature="doMove(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="doCreateChild" signature="doCreateChild(parent, index, data, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.TreeBasicControllerV3" ilk="class" name="TreeLoadingControllerV3">
            <scope attributes="__ctor__" ilk="function" name="TreeLoadingControllerV3" signature="TreeLoadingControllerV3()" />
            <variable name="widgetType" />
            <variable name="RpcUrl" />
            <variable name="RpcActionParam" />
            <variable name="batchExpandTimeout" />
            <scope ilk="function" name="preventCache" signature="preventCache(kw)">
              <variable ilk="argument" name="kw" />
            </scope>
            <scope ilk="function" name="checkValidRpcResponse" signature="checkValidRpcResponse(type, obj)">
              <variable ilk="argument" name="type" />
              <variable ilk="argument" name="obj" />
            </scope>
            <scope doc="create callback that calls the Deferred&apos;s callback method" ilk="function" name="getDeferredBindHandler" signature="getDeferredBindHandler(deferred)">
              <variable citdl="dojo.rpc.deferred" ilk="argument" name="deferred" />
            </scope>
            <scope ilk="function" name="getRpcUrl" signature="getRpcUrl(action)">
              <variable ilk="argument" name="action" />
            </scope>
            <scope ilk="function" name="loadProcessResponse" signature="loadProcessResponse(node, result)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="result" />
            </scope>
            <scope ilk="function" name="runRpc" signature="runRpc(kw)">
              <variable ilk="argument" name="kw" />
            </scope>
            <scope ilk="function" name="url" signature="url(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="handle" signature="handle(kw)">
              <variable ilk="argument" name="kw" />
            </scope>
            <scope ilk="function" name="mimetype" signature="mimetype(kw)">
              <variable ilk="argument" name="kw" />
            </scope>
            <scope ilk="function" name="sync" signature="sync(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="content" signature="content(kw)">
              <variable ilk="argument" name="kw" />
            </scope>
            <scope ilk="function" name="loadRemote" signature="loadRemote(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="node" signature="node(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="tree" signature="tree(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="params" signature="params(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="recurseToLevel" signature="recurseToLevel(widget, level, callFunc, callObj, skipFirst, sync)">
              <variable ilk="argument" name="widget" />
              <variable ilk="argument" name="level" />
              <variable ilk="argument" name="callFunc" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="skipFirst" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="expandToLevel" signature="expandToLevel(nodeOrTree, level, sync)">
              <variable ilk="argument" name="nodeOrTree" />
              <variable ilk="argument" name="level" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="loadToLevel" signature="loadToLevel(nodeOrTree, level, sync)">
              <variable ilk="argument" name="nodeOrTree" />
              <variable ilk="argument" name="level" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="loadAll" signature="loadAll(nodeOrTree, sync)">
              <variable ilk="argument" name="nodeOrTree" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="expand" signature="expand(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="loadIfNeeded" signature="loadIfNeeded(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="runStages" signature="runStages(check, prepare, make, finalize, expose, args)">
              <variable ilk="argument" name="check" />
              <variable ilk="argument" name="prepare" />
              <variable ilk="argument" name="make" />
              <variable ilk="argument" name="finalize" />
              <variable ilk="argument" name="expose" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="startProcessing" signature="startProcessing(nodesArray)">
              <variable ilk="argument" name="nodesArray" />
            </scope>
            <scope ilk="function" name="finishProcessing" signature="finishProcessing(nodesArray)">
              <variable ilk="argument" name="nodesArray" />
            </scope>
            <scope ilk="function" name="refresh" signature="refresh(nodeOrTree, sync)">
              <variable ilk="argument" name="nodeOrTree" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="prepareMove" signature="prepareMove(child, newParent, index, sync)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="finalizeMove" signature="finalizeMove(child, newParent)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
            </scope>
            <scope ilk="function" name="prepareCreateChild" signature="prepareCreateChild(parent, index, data, sync)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="finalizeCreateChild" signature="finalizeCreateChild(parent)">
              <variable ilk="argument" name="parent" />
            </scope>
            <scope ilk="function" name="prepareClone" signature="prepareClone(child, newParent, index, deep, sync)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="deep" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="finalizeClone" signature="finalizeClone(child, newParent)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TreeNode">
            <scope attributes="__ctor__" ilk="function" name="TreeNode" signature="TreeNode()">
              <variable name="actionsDisabled" />
              <variable name="_markLoadingSavedIcon" />
              <variable name="expandIcon.src" />
              <variable name="expandIcon.src" />
              <variable name="_markLoadingSavedIcon" />
              <variable name="expandIcon.src" />
              <variable name="isFolder" />
              <variable name="expandIcon.src" />
              <variable name="childIcon.src" />
              <variable name="childIcon.style.display" />
              <variable name="titleNode.innerHTML" />
              <variable name="afterLabelNode.innerHTML" />
            </scope>
            <variable name="widgetType" />
            <variable name="loadStates" />
            <variable name="actions" />
            <variable name="isContainer" />
            <variable name="lockLevel" />
            <variable name="templateString" />
            <variable name="childIconSrc" />
            <variable name="childIconFolderSrc" />
            <variable name="childIconDocumentSrc" />
            <variable name="childIcon" />
            <variable name="isTreeNode" />
            <variable name="afterLabel" />
            <variable name="afterLabelNode" />
            <variable name="expandIcon" />
            <variable name="title" />
            <variable name="object" />
            <variable name="labelNode" />
            <variable name="titleNode" />
            <variable name="imgs" />
            <variable name="expandLevel" />
            <variable name="tree" />
            <variable name="depth" />
            <variable name="isExpanded" />
            <variable name="state" />
            <variable name="domNodeInitialized" />
            <scope ilk="function" name="objectId" signature="objectId()" />
            <scope ilk="function" name="isFolder" signature="isFolder()" />
            <scope ilk="function" name="isFirstChild" signature="isFirstChild()" />
            <scope ilk="function" name="true" signature="true()" />
            <scope ilk="function" name="isLastChild" signature="isLastChild()" />
            <scope ilk="function" name="lock" signature="lock()" />
            <scope ilk="function" name="unlock" signature="unlock()" />
            <scope ilk="function" name="isLocked" signature="isLocked()" />
            <scope ilk="function" name="cleanLock" signature="cleanLock()" />
            <scope ilk="function" name="actionIsDisabled" signature="actionIsDisabled(action)">
              <variable ilk="argument" name="action" />
            </scope>
            <scope ilk="function" name="getInfo" signature="getInfo()" />
            <scope ilk="function" name="widgetId" signature="widgetId()" />
            <scope ilk="function" name="index" signature="index()" />
            <scope ilk="function" name="initialize" signature="initialize(args, frag)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
            </scope>
            <scope ilk="function" name="adjustDepth" signature="adjustDepth(depthDiff)">
              <variable ilk="argument" name="depthDiff" />
            </scope>
            <scope ilk="function" name="markLoading" signature="markLoading()" />
            <scope ilk="function" name="unMarkLoading" signature="unMarkLoading()" />
            <scope ilk="function" name="setFolder" signature="setFolder()" />
            <scope ilk="function" name="createDOMNode" signature="createDOMNode(tree, depth)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="depth" />
            </scope>
            <scope ilk="function" name="source" signature="source()" />
            <scope ilk="function" name="onTreeClick" signature="onTreeClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onIconClick" signature="onIconClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="onTitleClick" signature="onTitleClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" name="markSelected" signature="markSelected()" />
            <scope ilk="function" name="unMarkSelected" signature="unMarkSelected()" />
            <scope ilk="function" name="updateExpandIcon" signature="updateExpandIcon()" />
            <scope ilk="function" name="updateExpandGrid" signature="updateExpandGrid()" />
            <scope ilk="function" name="updateChildGrid" signature="updateChildGrid()" />
            <scope ilk="function" name="updateParentGrid" signature="updateParentGrid()" />
            <scope ilk="function" name="updateExpandGridColumn" signature="updateExpandGridColumn()" />
            <scope ilk="function" name="updateIcons" signature="updateIcons()" />
            <scope ilk="function" name="buildChildIcon" signature="buildChildIcon()" />
            <scope ilk="function" name="setGridImage" signature="setGridImage(idx, src)">
              <variable ilk="argument" name="idx" />
              <variable ilk="argument" name="src" />
            </scope>
            <scope ilk="function" name="updateIconTree" signature="updateIconTree()" />
            <scope ilk="function" name="expand" signature="expand()" />
            <scope ilk="function" name="collapse" signature="collapse()" />
            <scope ilk="function" name="hideChildren" signature="hideChildren()" />
            <scope ilk="function" name="showChildren" signature="showChildren()" />
            <scope ilk="function" name="addChild" signature="addChild()" />
            <scope ilk="function" name="doAddChild" signature="doAddChild()" />
            <scope ilk="function" name="edit" signature="edit(props)">
              <variable ilk="argument" name="props" />
            </scope>
            <scope ilk="function" name="removeNode" signature="removeNode()" />
            <scope ilk="function" name="doRemoveNode" signature="doRemoveNode()" />
            <scope ilk="function" name="toString" signature="toString()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TreeNodeV3">
            <scope attributes="__ctor__" ilk="function" name="TreeNodeV3" signature="TreeNodeV3()">
              <variable name="actionsDisabled" />
              <variable name="markProcessingSavedClass" />
              <variable name="tree" />
              <variable name="domNode" />
              <variable name="domNode.widgetId" />
              <variable name="labelNode.innerHTML" />
              <variable name="labelNode.innerHTML" />
              <variable name="tree" />
              <variable name="tree" />
              <variable name="parent" />
              <variable name="labelNode.innerHTML" />
            </scope>
            <variable name="widgetType" />
            <variable name="tryLazyInit" />
            <variable name="actions" />
            <variable name="labelStyle" />
            <variable name="contentStyle" />
            <variable name="expandNode" />
            <variable name="labelNode" />
            <variable name="nodeType" />
            <variable name="cloneProperties" />
            <variable name="isTreeNode" />
            <variable name="object" />
            <variable name="title" />
            <variable name="isFolder" />
            <variable name="contentNode" />
            <variable name="expandClass" />
            <variable name="isExpanded" />
            <variable name="containerNode" />
            <scope ilk="function" name="getNodeType" signature="getNodeType()" />
            <scope ilk="function" name="clone" signature="clone(deep)">
              <variable ilk="argument" name="deep" />
            </scope>
            <scope ilk="function" name="markProcessing" signature="markProcessing()" />
            <scope ilk="function" name="unmarkProcessing" signature="unmarkProcessing()" />
            <scope ilk="function" name="buildRendering" signature="buildRendering(args, fragment, parent)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="fragment" />
              <variable ilk="argument" name="parent" />
            </scope>
            <scope ilk="function" name="getInfo" signature="getInfo()" />
            <scope ilk="function" name="widgetId" signature="widgetId()" />
            <scope ilk="function" name="objectId" signature="objectId()" />
            <scope ilk="function" name="index" signature="index(parent, index, dontPublishEvent)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="dontPublishEvent" />
            </scope>
            <scope ilk="function" name="setFolder" signature="setFolder()" />
            <scope ilk="function" name="source" signature="source(title)">
              <variable ilk="argument" name="title" />
            </scope>
            <scope ilk="function" name="initialize" signature="initialize(args, frag, parent)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="frag" />
              <variable ilk="argument" name="parent" />
            </scope>
            <scope ilk="function" name="oldTree" signature="oldTree(newTree)">
              <variable ilk="argument" name="newTree" />
            </scope>
            <scope ilk="function" name="unsetFolder" signature="unsetFolder()" />
            <scope ilk="function" name="insertNode" signature="insertNode(parent, index)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="updateTree" signature="updateTree(newTree)">
              <variable ilk="argument" name="newTree" />
            </scope>
            <scope ilk="function" name="addedTo" signature="addedTo(parent, index, dontPublishEvent)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="dontPublishEvent" />
            </scope>
            <scope ilk="function" name="child" signature="child()" />
            <scope ilk="function" name="parent" signature="parent(parent, index, dontPublishEvent)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="dontPublishEvent" />
            </scope>
            <scope ilk="function" name="createSimple" signature="createSimple(args, parent)">
              <variable ilk="argument" name="args" />
              <variable ilk="argument" name="parent" />
            </scope>
            <scope ilk="function" name="viewUpdateLayout" signature="viewUpdateLayout()" />
            <scope ilk="function" name="viewAddContainer" signature="viewAddContainer()" />
            <scope ilk="function" name="viewAddLayout" signature="viewAddLayout()" />
            <scope ilk="function" name="viewRemoveLayout" signature="viewRemoveLayout()" />
            <scope ilk="function" name="viewGetExpandClass" signature="viewGetExpandClass()" />
            <scope ilk="function" name="viewSetExpand" signature="viewSetExpand()" />
            <scope ilk="function" name="viewGetChildrenClass" signature="viewGetChildrenClass()" />
            <scope ilk="function" name="viewSetHasChildren" signature="viewSetHasChildren()" />
            <scope ilk="function" name="viewSetHasChildrenAndExpand" signature="viewSetHasChildrenAndExpand()" />
            <scope ilk="function" name="detach" signature="detach()" />
            <scope ilk="function" name="doDetach" signature="doDetach()" />
            <scope ilk="function" name="destroy" signature="destroy()" />
            <scope ilk="function" name="expand" signature="expand()" />
            <scope ilk="function" name="collapse" signature="collapse()" />
            <scope ilk="function" name="hideChildren" signature="hideChildren()" />
            <scope ilk="function" name="showChildren" signature="showChildren()" />
            <scope ilk="function" name="onShowChildren" signature="onShowChildren()" />
            <scope ilk="function" name="onHideChildren" signature="onHideChildren()" />
            <scope ilk="function" name="setTitle" signature="setTitle(title)">
              <variable ilk="argument" name="title" />
            </scope>
            <scope ilk="function" name="toString" signature="toString()" />
          </scope>
          <scope classrefs="dojo.widget.TreeLoadingController" ilk="class" name="TreeRPCController">
            <scope attributes="__ctor__" ilk="function" name="TreeRPCController" signature="TreeRPCController()" />
            <variable name="widgetType" />
            <scope ilk="function" name="doMove" signature="doMove(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="child" signature="child(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="childTree" signature="childTree(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="newParent" signature="newParent(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="newParentTree" signature="newParentTree(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="newIndex" signature="newIndex(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="url" signature="url(parent, index, output, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="output" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="load" signature="load(parent, index, output, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="output" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="sync" signature="sync(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="lock" signature="lock(parent, index, output, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="output" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="params" signature="params(parent, index, output, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="output" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="doMoveProcessResponse" signature="doMoveProcessResponse(response, child, newParent, index)">
              <variable ilk="argument" name="response" />
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="doRemoveNode" signature="doRemoveNode(node, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="node" signature="node(node, callObj, callFunc)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="tree" signature="tree(parent, index, output, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="output" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="doRemoveNodeProcessResponse" signature="doRemoveNodeProcessResponse(response, node, callObj, callFunc)">
              <variable ilk="argument" name="response" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="doCreateChild" signature="doCreateChild(parent, index, output, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="output" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="parent" signature="parent(parent, index, output, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="output" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="index" signature="index(parent, index, output, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="output" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="data" signature="data(parent, index, output, callObj, callFunc)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="output" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
            <scope ilk="function" name="doCreateChildProcessResponse" signature="doCreateChildProcessResponse(response, parent, index, callObj, callFunc)">
              <variable ilk="argument" name="response" />
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="callObj" />
              <variable ilk="argument" name="callFunc" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.TreeLoadingControllerV3" ilk="class" name="TreeRpcControllerV3">
            <scope attributes="__ctor__" ilk="function" name="TreeRpcControllerV3" signature="TreeRpcControllerV3()" />
            <variable name="widgetType" />
            <variable name="extraRpcOnEdit" />
            <scope ilk="function" name="doMove" signature="doMove(child, newParent, index, sync)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="child" signature="child(child, newParent, index, sync, deep)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope ilk="function" name="childTree" signature="childTree(child, newParent, index, sync)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="newParent" signature="newParent(child, newParent, index, sync, deep)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope ilk="function" name="newParentTree" signature="newParentTree(child, newParent, index, sync)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="newIndex" signature="newIndex(child, newParent, index, sync)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="url" signature="url(child, newParent, index, sync, node, newContent, deep)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="newContent" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope ilk="function" name="sync" signature="sync(child, newParent, index, sync, node, newContent, deep)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="newContent" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope ilk="function" name="params" signature="params(child, newParent, index, sync, node, newContent, deep)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="newContent" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope ilk="function" name="prepareDetach" signature="prepareDetach(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="finalizeDetach" signature="finalizeDetach(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="doDetach" signature="doDetach(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="node" signature="node(node, sync, newContent)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="newContent" />
            </scope>
            <scope ilk="function" name="tree" signature="tree(node, sync, newContent, child, newParent, index, deep)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
              <variable ilk="argument" name="newContent" />
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="deep" />
            </scope>
            <scope ilk="function" name="requestEditConfirmation" signature="requestEditConfirmation(node, action, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="editLabelSave" signature="editLabelSave(node, newContent, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="newContent" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="newContent" signature="newContent(node, newContent, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="newContent" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="editLabelStart" signature="editLabelStart(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="editLabelFinish" signature="editLabelFinish(save, sync)">
              <variable ilk="argument" name="save" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="title" signature="title(parent, index, sync)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="createAndEdit" signature="createAndEdit(parent, index, sync)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="prepareDestroy" signature="prepareDestroy(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="finalizeDestroy" signature="finalizeDestroy(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="doDestroy" signature="doDestroy(node, sync)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="sendCreateChildRequest" signature="sendCreateChildRequest(parent, index, data, sync)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="parent" signature="parent(parent, index, data, sync)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="index" signature="index(child, newParent, index, deep, sync)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="deep" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="data" signature="data(parent, index, data, sync)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="doCreateChild" signature="doCreateChild(parent, index, data, sync)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="doClone" signature="doClone(child, newParent, index, deep, sync)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="deep" />
              <variable ilk="argument" name="sync" />
            </scope>
            <scope ilk="function" name="deep" signature="deep(child, newParent, index, deep, sync)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="deep" />
              <variable ilk="argument" name="sync" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TreeSelector">
            <scope attributes="__ctor__" ilk="function" name="TreeSelector" signature="TreeSelector()">
              <variable name="eventNames" />
              <variable name="listenedTrees" />
            </scope>
            <variable name="widgetType" />
            <variable name="selectedNode" />
            <variable name="dieWithTree" />
            <variable name="eventNamesDefault" />
            <scope ilk="function" name="initialize" signature="initialize()" />
            <scope ilk="function" name="destroy" signature="destroy()" />
            <scope ilk="function" name="source" signature="source()" />
            <scope ilk="function" name="listenTree" signature="listenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" name="unlistenTree" signature="unlistenTree(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" name="onTreeDestroy" signature="onTreeDestroy(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onCollapse" signature="onCollapse(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="select" signature="select(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="node" signature="node()" />
            <scope ilk="function" name="onMoveFrom" signature="onMoveFrom(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onRemoveNode" signature="onRemoveNode(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="doSelect" signature="doSelect(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="deselect" signature="deselect()" />
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget dojo.widget.TreeCommon" ilk="class" name="TreeSelectorV3">
            <scope attributes="__ctor__" ilk="function" name="TreeSelectorV3" signature="TreeSelectorV3()">
              <variable name="eventNames" />
              <variable name="listenedTrees" />
              <variable name="selectedNodes" />
              <variable name="onLabelClickHandler" />
              <variable name="onLabelDblClickHandler" />
            </scope>
            <variable name="widgetType" />
            <variable name="listenTreeEvents" />
            <variable name="allowedMulti" />
            <variable name="eventNamesDefault" />
            <scope ilk="function" name="listenNodeFilter" signature="listenNodeFilter(elem)">
              <variable ilk="argument" name="elem" />
            </scope>
            <scope ilk="function" name="initialize" signature="initialize(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="listenNode" signature="listenNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="node" signature="node(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="unlistenNode" signature="unlistenNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="onAfterAddChild" signature="onAfterAddChild(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onBeforeTreeDestroy" signature="onBeforeTreeDestroy(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onAfterCollapse" signature="onAfterCollapse(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onLabelDblClick" signature="onLabelDblClick(event)">
              <variable ilk="argument" name="event" />
            </scope>
            <scope ilk="function" name="checkSpecialEvent" signature="checkSpecialEvent(event)">
              <variable ilk="argument" name="event" />
            </scope>
            <scope ilk="function" name="onLabelClick" signature="onLabelClick(event)">
              <variable ilk="argument" name="event" />
            </scope>
            <scope ilk="function" name="deselectIfAncestorMatch" signature="deselectIfAncestorMatch(ancestor)">
              <variable ilk="argument" name="ancestor" />
            </scope>
            <scope ilk="function" name="onAfterChangeTree" signature="onAfterChangeTree(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="onAfterDetach" signature="onAfterDetach(message)">
              <variable ilk="argument" name="message" />
            </scope>
            <scope ilk="function" name="select" signature="select(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="deselect" signature="deselect(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="deselectAll" signature="deselectAll()" />
          </scope>
          <scope ilk="class" name="TreeTimeoutIterator">
            <scope attributes="__ctor__" ilk="function" name="TreeTimeoutIterator" signature="TreeTimeoutIterator(elem, callFunc, callObj)">
              <variable ilk="argument" name="elem" />
              <variable ilk="argument" name="callFunc" />
              <variable ilk="argument" name="callObj" />
              <variable name="callFunc" />
              <variable name="callObj" />
              <variable name="filterFunc" />
              <variable name="filterObj" />
              <variable name="finishFunc" />
              <variable name="finishObj" />
            </scope>
            <variable name="maxStackDepth" />
            <variable name="stack" />
            <variable name="currentParent" />
            <variable name="currentIndex" />
            <scope ilk="function" name="filterFunc" signature="filterFunc()" />
            <scope ilk="function" name="finishFunc" signature="finishFunc()" />
            <scope ilk="function" name="setFilter" signature="setFilter(func, obj)">
              <variable ilk="argument" name="func" />
              <variable ilk="argument" name="obj" />
            </scope>
            <scope ilk="function" name="setMaxLevel" signature="setMaxLevel(level)">
              <variable ilk="argument" name="level" />
            </scope>
            <scope ilk="function" name="forward" signature="forward(timeout)">
              <variable ilk="argument" name="timeout" />
            </scope>
            <scope ilk="function" name="start" signature="start(processFirst)">
              <variable ilk="argument" name="processFirst" />
            </scope>
            <scope ilk="function" name="processNext" signature="processNext()" />
            <scope ilk="function" name="setFinish" signature="setFinish(func, obj)">
              <variable ilk="argument" name="func" />
              <variable ilk="argument" name="obj" />
            </scope>
            <scope ilk="function" name="popParent" signature="popParent()" />
            <scope ilk="function" name="moveParent" signature="moveParent(nextParent, nextIndex)">
              <variable ilk="argument" name="nextParent" />
              <variable ilk="argument" name="nextIndex" />
            </scope>
          </scope>
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="TreeV3">
            <scope attributes="__ctor__" ilk="function" name="TreeV3" signature="TreeV3()">
              <variable name="eventNames" />
              <variable name="actionsDisabled" />
              <variable name="listeners" />
              <variable name="tree" />
              <variable name="nodeTemplate" />
              <variable name="expandNodeTemplate" />
              <variable name="labelNodeTemplate" />
              <variable name="contentNodeTemplate" />
              <variable name="containerNodeTemplate" />
              <variable name="containerNode" />
            </scope>
            <variable name="widgetType" />
            <variable name="DndMode" />
            <variable name="defaultChildWidget" />
            <variable name="defaultChildTitle" />
            <variable name="eagerWidgetInstantiation" />
            <variable name="eventNamesDefault" />
            <variable name="classPrefix" />
            <variable name="style" />
            <variable name="allowAddChildToLeaf" />
            <variable name="unsetFolderOnEmpty" />
            <variable name="DndModes" />
            <variable name="BETWEEN" />
            <variable name="ONTO" />
            <variable name="DndAcceptTypes" />
            <variable name="templateCssPath" />
            <variable name="templateString" />
            <variable name="isExpanded" />
            <variable name="isTree" />
            <variable name="actions" />
            <scope ilk="function" name="createNode" signature="createNode(data)">
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" name="makeNodeTemplate" signature="makeNodeTemplate()" />
            <scope ilk="function" name="makeContainerNodeTemplate" signature="makeContainerNodeTemplate()" />
            <scope ilk="function" name="getInfo" signature="getInfo()" />
            <scope ilk="function" name="widgetId" signature="widgetId()" />
            <scope ilk="function" name="objectId" signature="objectId()" />
            <scope ilk="function" name="adjustEventNames" signature="adjustEventNames()" />
            <scope ilk="function" name="adjustDndMode" signature="adjustDndMode()" />
            <scope ilk="function" name="destroy" signature="destroy()" />
            <scope ilk="function" name="source" signature="source()" />
            <scope ilk="function" name="initialize" signature="initialize(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="postCreate" signature="postCreate()" />
            <scope ilk="function" name="move" signature="move(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="oldParent" signature="oldParent(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="newParent" signature="newParent(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="child" signature="child(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="doMove" signature="doMove(child, newParent, index)">
              <variable ilk="argument" name="child" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="toString" signature="toString()" />
          </scope>
          <variable citdl="Object" name="tags">
            <scope doc="deprecated!" ilk="function" name="addParseTreeHandler" signature="addParseTreeHandler(type)">
              <variable citdl="String" ilk="argument" name="type" />
            </scope>
          </variable>
          <scope doc="creates a tree of widgets from the data structure produced&#xA;by the first-pass parser (frag) test for accessibility mode" ilk="function" name="buildWidgetFromParseTree" signature="buildWidgetFromParseTree(type, frag, parser, parentComp, insertionIndex, localProps)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="frag" />
            <variable citdl="dojo.widget.parse" ilk="argument" name="parser" />
            <variable ilk="argument" name="parentComp" />
            <variable ilk="argument" name="insertionIndex" />
            <variable citdl="Object" ilk="argument" name="localProps" />
          </scope>
          <scope doc="Create a widget constructor function (aka widgetClass)" ilk="function" name="defineWidget" signature="defineWidget(widgetClass, renderer, superclasses, init, props)">
            <variable citdl="String" ilk="argument" name="widgetClass" />
            <variable citdl="String" ilk="argument" name="renderer" />
            <variable citdl="Function" ilk="argument" name="superclasses" />
            <variable citdl="Function" ilk="argument" name="init" />
            <variable citdl="Object" ilk="argument" name="props" />
          </scope>
          <scope ilk="function" name="_defineWidget" signature="_defineWidget(widgetClass, renderer, superclasses, init, props)">
            <variable citdl="String" ilk="argument" name="widgetClass" />
            <variable citdl="String" ilk="argument" name="renderer" />
            <variable citdl="Function" ilk="argument" name="superclasses" />
            <variable citdl="Function" ilk="argument" name="init" />
            <variable citdl="Object" ilk="argument" name="props" />
          </scope>
          <scope ilk="class" name="Wizard" />
          <scope ilk="function" name="WizardContainer" signature="WizardContainer()" />
          <scope ilk="function" name="WizardPane" signature="WizardPane()" />
          <scope classrefs="dojo.widget.HtmlWidget" ilk="class" name="YahooMap">
            <scope attributes="__ctor__" ilk="function" name="YahooMap" signature="YahooMap()" />
          </scope>
          <variable citdl="Object" name="demoEngine">
            <scope ilk="class" name="DemoContainer" />
            <scope ilk="class" name="DemoItem" />
            <scope ilk="class" name="DemoNavigator" />
            <scope ilk="class" name="DemoPane" />
            <scope ilk="class" name="SourcePane" />
          </variable>
          <variable citdl="Object" name="html">
            <scope classrefs="dojo.widget.HtmlWidget dojo.widget.Console" ilk="class" name="Console">
              <scope attributes="__ctor__" ilk="function" name="Console" signature="Console()">
                <variable name="domNode.style.height" />
                <variable name="domNode.style.width" />
                <variable name="domNode.style.height" />
              </scope>
              <variable name="tabs" />
              <variable name="debugTab" />
              <variable name="input" />
              <variable name="templatePath" />
              <variable name="templateCssPath" />
              <scope ilk="function" name="fillInTemplate" signature="fillInTemplate(args, frag)">
                <variable ilk="argument" name="args" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="resizeTo" signature="resizeTo(w, h)">
                <variable ilk="argument" name="w" />
                <variable ilk="argument" name="h" />
              </scope>
              <scope ilk="function" name="runCommand" signature="runCommand(event)">
                <variable ilk="argument" name="event" />
              </scope>
              <scope ilk="function" name="printDebug" signature="printDebug(line)">
                <variable citdl="String" ilk="argument" name="line" />
              </scope>
              <scope ilk="function" name="printCommand" signature="printCommand(command)">
                <variable citdl="String" ilk="argument" name="command" />
              </scope>
              <scope ilk="function" name="printResult" signature="printResult(result)">
                <variable citdl="String" ilk="argument" name="result" />
              </scope>
            </scope>
            <scope ilk="class" name="DocPane">
              <scope attributes="__ctor__" ilk="function" name="DocPane" signature="DocPane()" />
            </scope>
            <scope ilk="class" name="layout">
              <scope attributes="__ctor__" ilk="function" name="layout" signature="layout(container, children, layoutPriority)">
                <variable ilk="argument" name="container" />
                <variable ilk="argument" name="children" />
                <variable ilk="argument" name="layoutPriority" />
              </scope>
            </scope>
            <scope ilk="class" name="loader" />
            <scope ilk="class" name="stabile">
              <scope ilk="function" name="getState" signature="getState(id)">
                <variable ilk="argument" name="id" />
              </scope>
              <scope ilk="function" name="setState" signature="setState(id, state, isCommit)">
                <variable ilk="argument" name="id" />
                <variable ilk="argument" name="state" />
                <variable ilk="argument" name="isCommit" />
              </scope>
              <scope ilk="function" name="setup" signature="setup()" />
              <scope ilk="function" name="commit" signature="commit(state)">
                <variable ilk="argument" name="state" />
              </scope>
              <scope ilk="function" name="description" signature="description(v, showAll)">
                <variable ilk="argument" name="v" />
                <variable ilk="argument" name="showAll" />
              </scope>
              <scope ilk="function" name="getStorage" signature="getStorage()" />
            </scope>
          </variable>
          <scope classrefs="dojo.widget.HtmlWidget dojo.widget.validate.Textbox dojo.widget.validate.ValidationTextbox dojo.widget.validate.IntegerTextbox dojo.widget.validate.IpAddressTextbox dojo.widget.validate.UrlTextbox dojo.widget.validate.EmailTextbox" ilk="class" name="validate">
            <scope ilk="function" name="Textbox" signature="Textbox()">
              <scope ilk="function" name="filter" signature="filter()" />
              <scope ilk="function" name="onfocus" signature="onfocus()" />
              <scope ilk="function" name="onblur" signature="onblur()" />
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
            </scope>
            <variable name="className" />
            <variable name="name" />
            <variable name="value" />
            <variable name="type" />
            <variable name="trim" />
            <variable name="uppercase" />
            <variable name="lowercase" />
            <variable name="ucFirst" />
            <variable name="digit" />
            <variable name="htmlfloat" />
            <variable name="templatePath" />
            <variable name="textbox" />
            <scope attributes="__ctor__" ilk="function" name="ValidationTextbox" signature="ValidationTextbox()">
              <variable name="flags.signed" />
              <variable name="flags.min" />
              <variable name="flags.separator" />
              <variable name="flags.max" />
              <variable name="flags.allowDottedDecimal" />
              <variable name="flags.allowDottedHex" />
              <variable name="flags.allowDottedOctal" />
              <variable name="flags.allowDecimal" />
              <variable name="flags.allowHex" />
              <variable name="flags.allowIPv6" />
              <variable name="flags.allowHybrid" />
              <variable name="flags.format" />
              <variable name="flags.format" />
              <variable name="flags.amSymbol" />
              <variable name="flags.pmSymbol" />
              <variable name="flags.allowTerritories" />
              <variable name="flags.allowMilitary" />
              <variable name="flags.regexp" />
              <variable name="flags.flags" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="IntegerTextbox" signature="IntegerTextbox()">
              <variable name="flags.places" />
              <variable name="flags.exponent" />
              <variable name="flags.eSigned" />
              <variable name="flags.min" />
              <variable name="flags.max" />
              <variable name="flags.fractional" />
              <variable name="flags.symbol" />
              <variable name="flags.min" />
              <variable name="flags.max" />
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
              <scope ilk="function" name="isInRange" signature="isInRange()" />
            </scope>
            <scope ilk="function" name="RealNumberTextbox" signature="RealNumberTextbox()">
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
              <scope ilk="function" name="isInRange" signature="isInRange()" />
            </scope>
            <scope ilk="function" name="CurrencyTextbox" signature="CurrencyTextbox()">
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
              <scope ilk="function" name="isInRange" signature="isInRange()" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="IpAddressTextbox" signature="IpAddressTextbox()">
              <variable name="flags.scheme" />
              <variable name="flags.allowIP" />
              <variable name="flags.allowLocal" />
              <variable name="flags.allowCC" />
              <variable name="flags.allowGeneric" />
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="UrlTextbox" signature="UrlTextbox()">
              <variable name="flags.allowCruft" />
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="EmailTextbox" signature="EmailTextbox()">
              <variable name="flags.listSeparator" />
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
            <scope ilk="function" name="EmailListTextbox" signature="EmailListTextbox()">
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
            <scope ilk="function" name="DateTextbox" signature="DateTextbox()">
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
            <scope ilk="function" name="TimeTextbox" signature="TimeTextbox()">
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
            <scope ilk="function" name="UsStateTextbox" signature="UsStateTextbox()">
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
            <scope ilk="function" name="UsZipTextbox" signature="UsZipTextbox()">
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
            <scope ilk="function" name="UsSocialSecurityNumberTextbox" signature="UsSocialSecurityNumberTextbox()">
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
            <scope ilk="function" name="UsPhoneNumberTextbox" signature="UsPhoneNumberTextbox()">
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
            <scope ilk="function" name="RegexpTextbox" signature="RegexpTextbox()">
              <scope ilk="function" name="mixInProperties" signature="mixInProperties(localProperties, frag)">
                <variable ilk="argument" name="localProperties" />
                <variable ilk="argument" name="frag" />
              </scope>
              <scope ilk="function" name="isValid" signature="isValid()" />
            </scope>
          </scope>
          <variable citdl="Object" name="vml">
            <scope classrefs="dojo.widget.HtmlWidget dojo.widget.Chart" ilk="class" name="Chart">
              <scope attributes="__ctor__" ilk="function" name="Chart" signature="Chart()" />
              <variable citdl="Object" name="Plotter">
                <scope ilk="function" name="getX" signature="getX(value, chart)">
                  <variable ilk="argument" name="value" />
                  <variable ilk="argument" name="chart" />
                </scope>
                <scope ilk="function" name="getY" signature="getY(value, chart)">
                  <variable ilk="argument" name="value" />
                  <variable ilk="argument" name="chart" />
                </scope>
                <scope ilk="function" name="addPlotter" signature="addPlotter(name, func)">
                  <variable ilk="argument" name="name" />
                  <variable ilk="argument" name="func" />
                </scope>
                <scope ilk="function" name="plot" signature="plot(series, chart)">
                  <variable ilk="argument" name="series" />
                  <variable ilk="argument" name="chart" />
                </scope>
              </variable>
            </scope>
          </variable>
        </variable>
        <scope attributes="__ctor__" ilk="function" name="Error" signature="Error(message, extra)">
          <variable ilk="argument" name="message" />
          <variable ilk="argument" name="extra" />
          <variable name="message" />
          <variable name="extra" />
          <variable name="stack" />
        </scope>
        <scope attributes="__ctor__" ilk="function" name="CommunicationError" signature="CommunicationError()">
          <variable name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" name="LockedError" signature="LockedError()">
          <variable name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" name="FormatError" signature="FormatError()">
          <variable name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" name="RpcError" signature="RpcError()">
          <variable name="name" />
        </scope>
        <variable citdl="Object" classrefs="dojo.gfx.Shape" name="gfx">
          <scope ilk="class" name="Colorspace">
            <scope attributes="__ctor__" doc="An object for dealing with colorspace conversions." ilk="function" name="Colorspace" signature="Colorspace()">
              <variable name="whitePoint" />
              <variable name="stdObserver" />
              <variable name="chromaticAdaptationAlg" />
              <variable name="RGBWorkingSpace" />
              <variable name="useApproxCIELabMapping" />
              <variable name="chainMaps" />
              <variable name="RGBWorkingSpace" />
              <variable name="RGBWorkingSpace" />
              <variable name="whitePoint" />
            </scope>
            <scope ilk="function" name="convert" signature="convert(col, model_from, model_to)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="model_from" />
              <variable ilk="argument" name="model_to" />
            </scope>
            <scope ilk="function" name="munge" signature="munge(keys, args)">
              <variable ilk="argument" name="keys" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="getWhitePoint" signature="getWhitePoint()" />
            <scope ilk="function" name="getPrimaries" signature="getPrimaries()" />
            <scope ilk="function" name="epsilon" signature="epsilon()" />
            <scope ilk="function" name="kappa" signature="kappa()" />
            <scope ilk="function" name="XYZ_to_xyY" signature="XYZ_to_xyY()" />
            <scope ilk="function" name="xyY_to_XYZ" signature="xyY_to_XYZ()" />
            <scope ilk="function" name="RGB_to_XYZ" signature="RGB_to_XYZ()" />
            <scope ilk="function" name="XYZ_to_RGB" signature="XYZ_to_RGB()" />
            <scope ilk="function" name="XYZ_to_Lab" signature="XYZ_to_Lab()" />
            <scope ilk="function" name="Lab_to_XYZ" signature="Lab_to_XYZ()" />
            <scope ilk="function" name="Lab_to_LCHab" signature="Lab_to_LCHab()" />
            <scope ilk="function" name="LCHab_to_Lab" signature="LCHab_to_Lab()" />
            <scope ilk="function" name="chromaticAdaptation" signature="chromaticAdaptation(col, src_w, dst_w)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="src_w" />
              <variable ilk="argument" name="dst_w" />
            </scope>
            <scope ilk="function" name="getRGB_XYZ_Matrix" signature="getRGB_XYZ_Matrix()" />
            <scope ilk="function" name="getXYZ_RGB_Matrix" signature="getXYZ_RGB_Matrix()" />
            <scope ilk="function" name="XYZ_to_Luv" signature="XYZ_to_Luv()" />
            <scope ilk="function" name="Luv_to_XYZ" signature="Luv_to_XYZ()" />
            <scope ilk="function" name="Luv_to_LCHuv" signature="Luv_to_LCHuv()" />
            <scope ilk="function" name="LCHuv_to_Luv" signature="LCHuv_to_Luv()" />
            <scope ilk="function" name="colorTemp_to_whitePoint" signature="colorTemp_to_whitePoint(T)">
              <variable ilk="argument" name="T" />
            </scope>
            <scope ilk="function" name="RGB_to_CMY" signature="RGB_to_CMY()" />
            <scope ilk="function" name="CMY_to_RGB" signature="CMY_to_RGB()" />
            <scope ilk="function" name="RGB_to_CMYK" signature="RGB_to_CMYK()" />
            <scope ilk="function" name="CMYK_to_RGB" signature="CMYK_to_RGB()" />
            <scope ilk="function" name="CMY_to_CMYK" signature="CMY_to_CMYK()" />
            <scope ilk="function" name="CMYK_to_CMY" signature="CMYK_to_CMY()" />
            <scope ilk="function" name="RGB_to_HSV" signature="RGB_to_HSV()" />
            <scope ilk="function" name="HSV_to_RGB" signature="HSV_to_RGB()" />
            <scope ilk="function" name="RGB_to_HSL" signature="RGB_to_HSL()" />
            <scope ilk="function" name="HSL_to_RGB" signature="HSL_to_RGB()" />
          </scope>
          <variable citdl="Object" name="color">
            <scope ilk="class" name="hsl" />
            <scope ilk="function" name="rgb2hsl" signature="rgb2hsl(r, g, b)">
              <variable ilk="argument" name="r" />
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope ilk="function" name="hsl2rgb" signature="hsl2rgb(h, s, l)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="l" />
            </scope>
            <scope ilk="function" name="hsl2hex" signature="hsl2hex(h, s, l)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="l" />
            </scope>
            <scope ilk="function" name="hex2hsl" signature="hex2hsl(hex)">
              <variable ilk="argument" name="hex" />
            </scope>
            <variable citdl="Object" name="Color">
              <scope ilk="function" name="toHsl" signature="toHsl()" />
              <scope ilk="function" name="toHsv" signature="toHsv()" />
              <scope attributes="__ctor__" ilk="function" name="Color" signature="Color(r, g, b, a)">
                <variable ilk="argument" name="r" />
                <variable ilk="argument" name="g" />
                <variable ilk="argument" name="b" />
                <variable ilk="argument" name="a" />
                <variable name="r" />
                <variable name="g" />
                <variable name="b" />
                <variable name="a" />
              </scope>
              <scope ilk="function" name="fromArray" signature="fromArray(arr)">
                <variable ilk="argument" name="arr" />
              </scope>
            </variable>
            <scope ilk="class" name="hsv" />
            <scope ilk="function" name="rgb2hsv" signature="rgb2hsv(r, g, b)">
              <variable ilk="argument" name="r" />
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope ilk="function" name="hsv2rgb" signature="hsv2rgb(h, s, v)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="v" />
            </scope>
            <scope doc="blend colors a and b (both as RGB array or hex strings) with&#xA;weight from -1 to +1, 0 being a 50/50 blend" ilk="function" name="blend" signature="blend(a, b, weight)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="weight" />
            </scope>
            <scope ilk="function" name="blendHex" signature="blendHex(a, b, weight)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="weight" />
            </scope>
            <scope ilk="function" name="extractRGB" signature="extractRGB(color)">
              <variable ilk="argument" name="color" />
            </scope>
            <scope ilk="function" name="hex2rgb" signature="hex2rgb(hex)">
              <variable ilk="argument" name="hex" />
            </scope>
            <scope ilk="function" name="rgb2hex" signature="rgb2hex(r, g, b)">
              <variable ilk="argument" name="r" />
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="b" />
            </scope>
          </variable>
          <scope ilk="class" name="common" />
          <scope ilk="function" name="VirtualGroup" signature="VirtualGroup()">
            <scope ilk="function" name="add" signature="add(shape)">
              <variable ilk="argument" name="shape" />
            </scope>
            <scope ilk="function" name="remove" signature="remove(shape, silently)">
              <variable ilk="argument" name="shape" />
              <variable ilk="argument" name="silently" />
            </scope>
            <scope ilk="function" name="_applyTransform" signature="_applyTransform()" />
            <scope attributes="__ctor__" ilk="function" name="VirtualGroup" signature="VirtualGroup()">
              <variable name="rawNode" />
              <variable name="shape" />
              <variable name="fillStyle" />
              <variable name="strokeStyle" />
              <variable name="matrix" />
              <variable name="rawNode" />
            </scope>
          </scope>
          <variable name="children" />
          <scope attributes="__ctor__" ilk="function" name="Shape" signature="Shape()">
            <variable name="rawNode" />
            <variable name="shape" />
            <variable name="matrix" />
            <variable name="fillStyle" />
            <variable name="strokeStyle" />
            <variable name="parent" />
            <variable name="parentMatrix" />
            <variable name="matrix" />
            <variable name="parent" />
            <variable name="parentMatrix" />
            <scope ilk="function" name="getNode" signature="getNode()" />
            <scope ilk="function" name="getShape" signature="getShape()" />
            <scope ilk="function" name="getTransform" signature="getTransform()" />
            <scope ilk="function" name="getFill" signature="getFill()" />
            <scope ilk="function" name="getStroke" signature="getStroke()" />
            <scope ilk="function" name="getParent" signature="getParent()" />
            <scope ilk="function" name="setShape" signature="setShape(shape)">
              <variable ilk="argument" name="shape" />
              <scope attributes="__ctor__" ilk="function" name="setShape" signature="setShape(newShape)">
                <variable ilk="argument" name="newShape" />
              </scope>
            </scope>
            <scope ilk="function" name="setStroke" signature="setStroke(stroke)">
              <variable ilk="argument" name="stroke" />
              <scope attributes="__ctor__" ilk="function" name="setStroke" signature="setStroke(stroke)">
                <variable ilk="argument" name="stroke" />
              </scope>
              <scope attributes="__ctor__" ilk="function" name="setStroke" signature="setStroke(stroke)">
                <variable ilk="argument" name="stroke" />
              </scope>
            </scope>
            <scope ilk="function" name="setFill" signature="setFill(fill)">
              <variable ilk="argument" name="fill" />
              <scope attributes="__ctor__" ilk="function" name="setFill" signature="setFill(fill)">
                <variable ilk="argument" name="fill" />
              </scope>
              <scope attributes="__ctor__" ilk="function" name="setFill" signature="setFill(fill)">
                <variable ilk="argument" name="fill" />
              </scope>
            </scope>
            <scope ilk="function" name="moveToFront" signature="moveToFront()">
              <scope attributes="__ctor__" ilk="function" name="moveToFront" signature="moveToFront()" />
            </scope>
            <scope ilk="function" name="moveToBack" signature="moveToBack()">
              <scope attributes="__ctor__" ilk="function" name="moveToBack" signature="moveToBack()" />
            </scope>
            <scope ilk="function" name="setTransform" signature="setTransform(matrix)">
              <variable ilk="argument" name="matrix" />
            </scope>
            <scope ilk="function" name="applyRightTransform" signature="applyRightTransform(matrix)">
              <variable ilk="argument" name="matrix" />
            </scope>
            <scope ilk="function" name="applyLeftTransform" signature="applyLeftTransform(matrix)">
              <variable ilk="argument" name="matrix" />
            </scope>
            <scope ilk="function" name="applyTransform" signature="applyTransform(matrix)">
              <variable ilk="argument" name="matrix" />
            </scope>
            <scope ilk="function" name="remove" signature="remove(silently)">
              <variable ilk="argument" name="silently" />
            </scope>
            <scope ilk="function" name="_setParent" signature="_setParent(parent, matrix)">
              <variable ilk="argument" name="parent" />
              <variable ilk="argument" name="matrix" />
            </scope>
            <scope ilk="function" name="_updateParentMatrix" signature="_updateParentMatrix(matrix)">
              <variable ilk="argument" name="matrix" />
            </scope>
            <scope ilk="function" name="_getRealMatrix" signature="_getRealMatrix()" />
            <scope attributes="__ctor__" ilk="function" name="Shape" signature="Shape()">
              <variable name="rawNode" />
              <variable name="shape" />
              <variable name="shape" />
              <variable name="shape" />
              <variable name="shape" />
              <variable name="shape." />
              <variable name="lastPos" />
              <variable name="strokeStyle" />
              <variable name="strokeStyle.color" />
              <variable name="fillStyle" />
              <variable name="fillStyle" />
              <variable name="rawNode" />
              <variable name="shape" />
              <variable name="rawNode" />
              <variable name="fillStyle" />
              <variable name="strokeStyle" />
              <variable name="matrix" />
            </scope>
            <scope ilk="function" name="_setGradient" signature="_setGradient(f, nodeType)">
              <variable citdl="Object" ilk="argument" name="f" />
              <variable citdl="String" ilk="argument" name="nodeType" />
            </scope>
            <scope ilk="function" name="_applyTransform" signature="_applyTransform()">
              <scope attributes="__ctor__" ilk="function" name="_applyTransform" signature="_applyTransform()" />
            </scope>
            <scope doc="assigns and clears the underlying node that will represent&#xA;this shape. Once set, transforms, gradients, etc, can be&#xA;applied." ilk="function" name="setRawNode" signature="setRawNode(rawNode)">
              <variable ilk="argument" name="rawNode" />
              <scope attributes="__ctor__" ilk="function" name="setRawNode" signature="setRawNode(rawNode)">
                <variable ilk="argument" name="rawNode" />
              </scope>
            </scope>
            <scope ilk="function" name="attachFill" signature="attachFill(rawNode)">
              <variable ilk="argument" name="rawNode" />
              <scope attributes="__ctor__" ilk="function" name="attachFill" signature="attachFill(rawNode)">
                <variable ilk="argument" name="rawNode" />
              </scope>
            </scope>
            <scope ilk="function" name="_getGradient" signature="_getGradient(defaultGradient, gradient)">
              <variable ilk="argument" name="defaultGradient" />
              <variable ilk="argument" name="gradient" />
            </scope>
            <scope ilk="function" name="color" signature="color(defaultGradient, gradient)">
              <variable ilk="argument" name="defaultGradient" />
              <variable ilk="argument" name="gradient" />
            </scope>
            <scope ilk="function" name="attachStroke" signature="attachStroke(rawNode)">
              <variable ilk="argument" name="rawNode" />
              <scope attributes="__ctor__" ilk="function" name="attachStroke" signature="attachStroke(rawNode)">
                <variable ilk="argument" name="rawNode" />
              </scope>
            </scope>
            <scope ilk="function" name="attachTransform" signature="attachTransform(rawNode)">
              <variable ilk="argument" name="rawNode" />
              <scope attributes="__ctor__" ilk="function" name="attachTransform" signature="attachTransform(rawNode)">
                <variable ilk="argument" name="rawNode" />
              </scope>
            </scope>
            <scope ilk="function" name="xx" signature="xx(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="yx" signature="yx(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="dx" signature="dx(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="attach" signature="attach(rawNode)">
              <variable ilk="argument" name="rawNode" />
              <scope attributes="__ctor__" ilk="function" name="attach" signature="attach(rawNode)">
                <variable ilk="argument" name="rawNode" />
              </scope>
            </scope>
            <scope attributes="__ctor__" ilk="function" name="Shape" signature="Shape()">
              <variable name="shape" />
              <variable name="shape" />
              <variable name="shape" />
              <variable name="rawNode.style.left" />
              <variable name="rawNode.style.top" />
              <variable name="rawNode.style.width" />
              <variable name="rawNode.style.height" />
              <variable name="shape" />
              <variable name="rawNode.from" />
              <variable name="rawNode.to" />
              <variable name="shape" />
              <variable name="rawNode.points.value" />
              <variable name="shape" />
              <variable name="rawNode.points.value" />
              <variable name="shape" />
              <variable name="rawNode.path.v" />
              <variable name="shape" />
              <variable name="rawNode.path.v" />
              <variable name="shape." />
              <variable name="lastAction" />
              <variable name="lastPos.x" />
              <variable name="lastPos.y" />
              <variable name="lastControl.x" />
              <variable name="lastControl.y" />
              <variable name="strokeStyle" />
              <variable name="rawNode.stroked" />
              <variable name="strokeStyle.color" />
              <variable name="rawNode.strokecolor" />
              <variable name="rawNode.strokeweight" />
              <variable name="rawNode.stroke.opacity" />
              <variable name="rawNode.stroke.endcap" />
              <variable name="rawNode.stroke.joinstyle" />
              <variable name="rawNode.stroke.miterlimit" />
              <variable name="fillStyle" />
              <variable name="rawNode.filled" />
              <variable name="rawNode.fill.colors.value" />
              <variable name="rawNode.fill.method" />
              <variable name="rawNode.fill.type" />
              <variable name="rawNode.fill.angle" />
              <variable name="rawNode.fill.on" />
              <variable name="rawNode.fill.focusposition" />
              <variable name="rawNode.fill.focussize" />
              <variable name="rawNode.fill.opacity" />
              <variable name="rawNode.fillcolor" />
              <variable name="rawNode" />
              <variable name="rawNode" />
              <variable name="shape" />
              <variable name="fillStyle" />
              <variable name="strokeStyle" />
              <variable name="matrix" />
            </scope>
            <variable name="_capMap" />
            <variable name="_capMapReversed" />
            <scope ilk="function" name="_translate" signature="_translate(dict, value)">
              <variable ilk="argument" name="dict" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="offset" signature="offset(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
          </scope>
          <scope attributes="__ctor__" ilk="function" name="Surface" signature="Surface()">
            <variable name="rawNode" />
            <scope doc="sets the width and height of the rawNode" ilk="function" name="setDimensions" returns="dojo.gfx.surface" signature="setDimensions(width, height)">
              <variable citdl="String" ilk="argument" name="width" />
              <variable citdl="String" ilk="argument" name="height" />
              <scope attributes="__ctor__" ilk="function" name="setDimensions" signature="setDimensions(width, height)">
                <variable ilk="argument" name="width" />
                <variable ilk="argument" name="height" />
              </scope>
            </scope>
            <scope doc="returns an object with properties &quot;width&quot; and &quot;height&quot;&#xA;Object" ilk="function" name="getDimensions" returns="Object" signature="getDimensions()">
              <scope attributes="__ctor__" ilk="function" name="getDimensions" signature="getDimensions()" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="Surface" signature="Surface()" />
            <scope attributes="__ctor__" ilk="function" name="Surface" signature="Surface()">
              <variable name="rawNode.style.width" />
              <variable name="rawNode.style.height" />
              <variable name="rawNode.coordsize" />
              <variable name="rawNode" />
            </scope>
            <scope ilk="function" name="width" signature="width()" />
            <scope ilk="function" name="add" signature="add(shape)">
              <variable ilk="argument" name="shape" />
            </scope>
            <scope ilk="function" name="remove" signature="remove(shape, silently)">
              <variable ilk="argument" name="shape" />
              <variable ilk="argument" name="silently" />
            </scope>
          </scope>
          <scope ilk="class" name="matrix">
            <scope ilk="function" name="Matrix2D" signature="Matrix2D(arg)">
              <variable ilk="argument" name="arg" />
            </scope>
          </scope>
          <scope ilk="class" name="svg">
            <scope attributes="__ctor__" ilk="function" name="Defines" signature="Defines()">
              <variable name="rawNode" />
              <variable name="rawNode" />
              <scope ilk="function" name="setRawNode" signature="setRawNode(rawNode)">
                <variable ilk="argument" name="rawNode" />
              </scope>
            </scope>
          </scope>
          <scope classrefs="dojo.gfx.VirtualGroup" ilk="function" name="Group" signature="Group()">
            <scope ilk="function" name="setRawNode" signature="setRawNode(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="Group" signature="Group(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="attach" signature="attach(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="add" signature="add(shape)">
              <variable ilk="argument" name="shape" />
            </scope>
            <scope ilk="function" name="remove" signature="remove(shape, silently)">
              <variable ilk="argument" name="shape" />
              <variable ilk="argument" name="silently" />
            </scope>
          </scope>
          <scope classrefs="dojo.gfx.Shape" ilk="function" name="Rect" signature="Rect(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope attributes="__ctor__" ilk="function" name="Rect" signature="Rect(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="setShape" signature="setShape(newShape)">
              <variable ilk="argument" name="newShape" />
            </scope>
            <scope ilk="function" name="setRawNode" signature="setRawNode(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="attachShape" signature="attachShape(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="x" signature="x(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="y" signature="y(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="width" signature="width(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="height" signature="height(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
          </scope>
          <scope classrefs="dojo.gfx.Shape" ilk="function" name="Ellipse" signature="Ellipse(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope attributes="__ctor__" ilk="function" name="Ellipse" signature="Ellipse(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="setShape" signature="setShape(newShape)">
              <variable ilk="argument" name="newShape" />
            </scope>
            <scope ilk="function" name="attachShape" signature="attachShape(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="cx" signature="cx(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="cy" signature="cy(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="rx" signature="rx(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="ry" signature="ry(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
          </scope>
          <scope classrefs="dojo.gfx.Shape" ilk="function" name="Circle" signature="Circle(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope attributes="__ctor__" ilk="function" name="Circle" signature="Circle(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="setShape" signature="setShape(newShape)">
              <variable ilk="argument" name="newShape" />
            </scope>
            <scope ilk="function" name="attachShape" signature="attachShape(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="cx" signature="cx(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="cy" signature="cy(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="r" signature="r(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
          </scope>
          <scope classrefs="dojo.gfx.Shape" ilk="function" name="Line" signature="Line(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope attributes="__ctor__" ilk="function" name="Line" signature="Line(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="setShape" signature="setShape(newShape)">
              <variable ilk="argument" name="newShape" />
            </scope>
            <scope ilk="function" name="attachShape" signature="attachShape(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="x1" signature="x1(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="y1" signature="y1(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="x2" signature="x2(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="y2" signature="y2(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
          </scope>
          <scope classrefs="dojo.gfx.Shape" ilk="function" name="Polyline" signature="Polyline(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope ilk="function" name="setShape" signature="setShape(points)">
              <variable ilk="argument" name="points" />
              <scope attributes="__ctor__" ilk="function" name="setShape" signature="setShape(points, closed)">
                <variable ilk="argument" name="points" />
                <variable ilk="argument" name="closed" />
              </scope>
            </scope>
            <scope ilk="function" name="points" signature="points(points)">
              <variable ilk="argument" name="points" />
              <scope attributes="__ctor__" ilk="function" name="points" signature="points(points, closed)">
                <variable ilk="argument" name="points" />
                <variable ilk="argument" name="closed" />
              </scope>
            </scope>
            <scope attributes="__ctor__" ilk="function" name="Polyline" signature="Polyline(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="attachShape" signature="attachShape(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <scope ilk="function" name="x" signature="x(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
          </scope>
          <scope classrefs="dojo.gfx.Shape" ilk="function" name="Path" signature="Path(rawNode)">
            <variable ilk="argument" name="rawNode" />
            <scope ilk="function" name="x" signature="x(endAngle, cx, cy, rx, ry, xRotate, isCCW)">
              <variable ilk="argument" name="endAngle" />
              <variable ilk="argument" name="cx" />
              <variable ilk="argument" name="cy" />
              <variable ilk="argument" name="rx" />
              <variable ilk="argument" name="ry" />
              <variable ilk="argument" name="xRotate" />
              <variable ilk="argument" name="isCCW" />
              <scope attributes="__ctor__" ilk="function" name="x" signature="x(top, right, bottom, left, isCCW, x, y)">
                <variable ilk="argument" name="top" />
                <variable ilk="argument" name="right" />
                <variable ilk="argument" name="bottom" />
                <variable ilk="argument" name="left" />
                <variable ilk="argument" name="isCCW" />
                <variable ilk="argument" name="x" />
                <variable ilk="argument" name="y" />
              </scope>
            </scope>
            <scope ilk="function" name="setShape" signature="setShape(newShape)">
              <variable ilk="argument" name="newShape" />
              <scope attributes="__ctor__" ilk="function" name="setShape" signature="setShape(newShape)">
                <variable ilk="argument" name="newShape" />
              </scope>
            </scope>
            <scope ilk="function" name="path" signature="path(newShape)">
              <variable ilk="argument" name="newShape" />
              <scope attributes="__ctor__" ilk="function" name="path" signature="path(newShape)">
                <variable ilk="argument" name="newShape" />
              </scope>
            </scope>
            <scope ilk="function" name="setAbsoluteMode" signature="setAbsoluteMode(mode)">
              <variable ilk="argument" name="mode" />
              <scope attributes="__ctor__" ilk="function" name="setAbsoluteMode" signature="setAbsoluteMode(mode)">
                <variable ilk="argument" name="mode" />
              </scope>
            </scope>
            <scope ilk="function" name="getAbsoluteMode" signature="getAbsoluteMode()">
              <scope attributes="__ctor__" ilk="function" name="getAbsoluteMode" signature="getAbsoluteMode()" />
            </scope>
            <scope ilk="function" name="drawTo" signature="drawTo(action, args)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="update" signature="update(x, )">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="" />
            </scope>
            <scope ilk="function" name="closePath" signature="closePath()">
              <scope attributes="__ctor__" ilk="function" name="closePath" signature="closePath()" />
            </scope>
            <scope ilk="function" name="moveTo" signature="moveTo(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <scope attributes="__ctor__" ilk="function" name="moveTo" signature="moveTo(x, y)">
                <variable ilk="argument" name="x" />
                <variable ilk="argument" name="y" />
              </scope>
            </scope>
            <scope ilk="function" name="lineTo" signature="lineTo(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <scope attributes="__ctor__" ilk="function" name="lineTo" signature="lineTo(x, y)">
                <variable ilk="argument" name="x" />
                <variable ilk="argument" name="y" />
              </scope>
            </scope>
            <scope ilk="function" name="hLineTo" signature="hLineTo(x)">
              <variable ilk="argument" name="x" />
              <scope attributes="__ctor__" ilk="function" name="hLineTo" signature="hLineTo(x)">
                <variable ilk="argument" name="x" />
              </scope>
            </scope>
            <scope ilk="function" name="vLineTo" signature="vLineTo(y)">
              <variable ilk="argument" name="y" />
              <scope attributes="__ctor__" ilk="function" name="vLineTo" signature="vLineTo(y)">
                <variable ilk="argument" name="y" />
              </scope>
            </scope>
            <scope ilk="function" name="curveTo" signature="curveTo(x1, y1, x2, y2, x, y)">
              <variable ilk="argument" name="x1" />
              <variable ilk="argument" name="y1" />
              <variable ilk="argument" name="x2" />
              <variable ilk="argument" name="y2" />
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <scope attributes="__ctor__" ilk="function" name="curveTo" signature="curveTo(x1, y1, x2, y2, x, y)">
                <variable ilk="argument" name="x1" />
                <variable ilk="argument" name="y1" />
                <variable ilk="argument" name="x2" />
                <variable ilk="argument" name="y2" />
                <variable ilk="argument" name="x" />
                <variable ilk="argument" name="y" />
              </scope>
            </scope>
            <scope ilk="function" name="smoothCurveTo" signature="smoothCurveTo(x2, y2, x, y)">
              <variable ilk="argument" name="x2" />
              <variable ilk="argument" name="y2" />
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <scope attributes="__ctor__" ilk="function" name="smoothCurveTo" signature="smoothCurveTo(x2, y2, x, y)">
                <variable ilk="argument" name="x2" />
                <variable ilk="argument" name="y2" />
                <variable ilk="argument" name="x" />
                <variable ilk="argument" name="y" />
              </scope>
            </scope>
            <scope ilk="function" name="qbCurveTo" signature="qbCurveTo(x1, y1, x, y)">
              <variable ilk="argument" name="x1" />
              <variable ilk="argument" name="y1" />
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <scope attributes="__ctor__" ilk="function" name="qbCurveTo" signature="qbCurveTo(x1, y1, x, y)">
                <variable ilk="argument" name="x1" />
                <variable ilk="argument" name="y1" />
                <variable ilk="argument" name="x" />
                <variable ilk="argument" name="y" />
              </scope>
            </scope>
            <scope ilk="function" name="smoothQBCurveTo" signature="smoothQBCurveTo(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <scope attributes="__ctor__" ilk="function" name="smoothQBCurveTo" signature="smoothQBCurveTo(x, y)">
                <variable ilk="argument" name="x" />
                <variable ilk="argument" name="y" />
              </scope>
            </scope>
            <scope ilk="function" name="arcTo2" signature="arcTo2(endAngle, cx, cy, rx, ry, xRotate, isCCW)">
              <variable ilk="argument" name="endAngle" />
              <variable ilk="argument" name="cx" />
              <variable ilk="argument" name="cy" />
              <variable ilk="argument" name="rx" />
              <variable ilk="argument" name="ry" />
              <variable ilk="argument" name="xRotate" />
              <variable ilk="argument" name="isCCW" />
              <scope attributes="__ctor__" ilk="function" name="arcTo2" signature="arcTo2(endAngle, cx, cy, rx, ry, xRotate, isCCW)">
                <variable ilk="argument" name="endAngle" />
                <variable ilk="argument" name="cx" />
                <variable ilk="argument" name="cy" />
                <variable ilk="argument" name="rx" />
                <variable ilk="argument" name="ry" />
                <variable ilk="argument" name="xRotate" />
                <variable ilk="argument" name="isCCW" />
              </scope>
            </scope>
            <scope ilk="function" name="arcTo" signature="arcTo(endAngle, cx, cy, rx, ry, xRotate, isCCW)">
              <variable ilk="argument" name="endAngle" />
              <variable ilk="argument" name="cx" />
              <variable ilk="argument" name="cy" />
              <variable ilk="argument" name="rx" />
              <variable ilk="argument" name="ry" />
              <variable ilk="argument" name="xRotate" />
              <variable ilk="argument" name="isCCW" />
              <scope attributes="__ctor__" ilk="function" name="arcTo" signature="arcTo(top, right, bottom, left, isCCW, x, y)">
                <variable ilk="argument" name="top" />
                <variable ilk="argument" name="right" />
                <variable ilk="argument" name="bottom" />
                <variable ilk="argument" name="left" />
                <variable ilk="argument" name="isCCW" />
                <variable ilk="argument" name="x" />
                <variable ilk="argument" name="y" />
              </scope>
            </scope>
            <scope attributes="__ctor__" ilk="function" name="Path" signature="Path(rawNode)">
              <variable ilk="argument" name="rawNode" />
            </scope>
            <variable name="ap" />
            <variable name="Map" />
            <scope ilk="function" name="_drawTo" signature="_drawTo(action, raction, args)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="raction" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="_update" signature="_update(x, y, x2, y2)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable ilk="argument" name="x2" />
              <variable ilk="argument" name="y2" />
            </scope>
            <scope ilk="function" name="_mirror" signature="_mirror(action)">
              <variable ilk="argument" name="action" />
            </scope>
          </scope>
          <scope ilk="function" name="attachNode" signature="attachNode(node)">
            <variable ilk="argument" name="node" />
            <scope attributes="__ctor__" ilk="function" name="attachNode" signature="attachNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <scope ilk="function" name="createSurface" signature="createSurface(parentNode, width, height)">
            <variable ilk="argument" name="parentNode" />
            <variable ilk="argument" name="width" />
            <variable ilk="argument" name="height" />
            <scope attributes="__ctor__" ilk="function" name="createSurface" signature="createSurface(parentNode, width, height)">
              <variable ilk="argument" name="parentNode" />
              <variable ilk="argument" name="width" />
              <variable ilk="argument" name="height" />
            </scope>
          </scope>
          <scope ilk="function" name="attachSurface" signature="attachSurface(node)">
            <variable ilk="argument" name="node" />
            <scope attributes="__ctor__" ilk="function" name="attachSurface" signature="attachSurface(node)">
              <variable ilk="argument" name="node" />
            </scope>
          </scope>
          <scope ilk="class" name="vml">
            <scope ilk="function" name="_parseFloat" signature="_parseFloat(str)">
              <variable ilk="argument" name="str" />
            </scope>
            <scope ilk="function" name="normalizedLength" signature="normalizedLength(len)">
              <variable ilk="argument" name="len" />
            </scope>
          </scope>
        </variable>
        <variable citdl="Object" name="rpc">
          <scope ilk="class" name="Deferred" />
          <scope classrefs="dojo.rpc.JsonService" ilk="class" name="JotService">
            <scope attributes="__ctor__" ilk="function" name="JotService" signature="JotService()">
              <variable name="serviceUrl" />
            </scope>
            <scope ilk="function" name="bind" signature="bind(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="url" signature="url(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="content" signature="content(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="json" signature="json(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="method" signature="method(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="mimetype" signature="mimetype(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="load" signature="load(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="error" signature="error(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="preventCache" signature="preventCache(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="createRequest" signature="createRequest(method, params)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="params" />
            </scope>
          </scope>
          <scope classrefs="dojo.rpc.RpcService" ilk="class" name="JsonService">
            <scope attributes="__ctor__" ilk="function" name="JsonService" signature="JsonService(args)">
              <variable ilk="argument" name="args" />
              <variable name="serviceUrl" />
              <variable name="strictArgChecks" />
            </scope>
          </scope>
          <scope ilk="class" name="RpcService">
            <scope attributes="__ctor__" doc="constructor for rpc base class" ilk="function" name="RpcService" signature="RpcService(url)">
              <variable ilk="argument" name="url" />
            </scope>
            <variable name="strictArgChecks" />
            <variable name="serviceUrl" />
            <scope doc="parse the results coming back from an rpc request." ilk="function" name="parseResults" signature="parseResults(obj)">
              <variable ilk="argument" name="obj" />
            </scope>
            <scope doc="create callback that calls the Deferres errback method" ilk="function" name="errorCallback" signature="errorCallback(deferredRequestHandler)">
              <variable citdl="dojo.rpc.deferred" ilk="argument" name="deferredRequestHandler" />
            </scope>
            <scope doc="create callback that calls the Deferred&apos;s callback method" ilk="function" name="resultCallback" signature="resultCallback(deferredRequestHandler)">
              <variable citdl="dojo.rpc.deferred" ilk="argument" name="deferredRequestHandler" />
            </scope>
            <scope doc="generate the local bind methods for the remote object" ilk="function" name="generateMethod" signature="generateMethod(method, parameters, url)">
              <variable citdl="String" ilk="argument" name="method" />
              <variable citdl="Array" ilk="argument" name="parameters" />
              <variable citdl="String" ilk="argument" name="url" />
            </scope>
            <scope doc="callback method for reciept of a smd object." ilk="function" name="processSmd" signature="processSmd(object)">
              <variable ilk="argument" name="object" />
            </scope>
            <scope doc="connect to a remote url and retrieve a smd object" ilk="function" name="connect" signature="connect(smdUrl)">
              <variable citdl="String" ilk="argument" name="smdUrl" />
            </scope>
            <scope doc="connect to a remote url and retrieve a smd object" ilk="function" name="url" signature="url(smdUrl)">
              <variable citdl="String" ilk="argument" name="smdUrl" />
            </scope>
            <scope doc="connect to a remote url and retrieve a smd object" ilk="function" name="mimetype" signature="mimetype(smdUrl)">
              <variable citdl="String" ilk="argument" name="smdUrl" />
            </scope>
            <scope doc="connect to a remote url and retrieve a smd object" ilk="function" name="load" signature="load(smdUrl)">
              <variable citdl="String" ilk="argument" name="smdUrl" />
            </scope>
            <scope doc="connect to a remote url and retrieve a smd object" ilk="function" name="sync" signature="sync(smdUrl)">
              <variable citdl="String" ilk="argument" name="smdUrl" />
            </scope>
          </scope>
          <scope classrefs="dojo.rpc.JsonService" ilk="class" name="YahooService">
            <scope attributes="__ctor__" ilk="function" name="YahooService" signature="YahooService(appId)">
              <variable ilk="argument" name="appId" />
              <variable name="appId" />
            </scope>
            <variable name="strictArgChecks" />
            <scope ilk="function" name="bind" signature="bind(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="url" signature="url(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="transport" signature="transport(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="content" signature="content(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="jsonParamName" signature="jsonParamName(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="mimetype" signature="mimetype(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="load" signature="load(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="error" signature="error(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
            <scope ilk="function" name="preventCache" signature="preventCache(method, parameters, deferredRequestHandler, url)">
              <variable ilk="argument" name="method" />
              <variable ilk="argument" name="parameters" />
              <variable ilk="argument" name="deferredRequestHandler" />
              <variable ilk="argument" name="url" />
            </scope>
          </scope>
        </variable>
        <variable citdl="Object" name="text">
          <scope ilk="class" name="textDirectory" />
        </variable>
        <scope ilk="function" name="textDirectoryTokeniser" signature="textDirectoryTokeniser()">
          <scope attributes="__ctor__" ilk="function" name="Property" signature="Property(line)">
            <variable ilk="argument" name="line" />
            <variable name="name" />
            <variable name="params" />
            <variable name="group" />
            <variable name="value" />
          </scope>
          <scope ilk="function" name="tokenise" signature="tokenise(text)">
            <variable ilk="argument" name="text" />
          </scope>
        </scope>
        <scope ilk="class" name="hostenv_rhino" />
        <scope ilk="class" name="hostenv_jsc" />
        <scope ilk="function" name="debugShallow" signature="debugShallow(obj)">
          <variable ilk="argument" name="obj" />
          <scope attributes="__ctor__" ilk="function" name="debugShallow" signature="debugShallow(obj)">
            <variable ilk="argument" name="obj" />
          </scope>
        </scope>
        <scope ilk="function" name="debugDeep" signature="debugDeep(obj)">
          <variable ilk="argument" name="obj" />
        </scope>
        <scope ilk="class" name="docs">
          <scope attributes="__ctor__" ilk="function" name="docs" signature="docs()" />
          <variable name="_count" />
          <variable name="_callbacks" />
          <variable name="_cache" />
          <scope ilk="function" name="require" signature="require(require, sync)">
            <variable citdl="String" ilk="argument" name="require" />
            <variable citdl="Boolean" ilk="argument" name="sync" />
          </scope>
          <scope ilk="function" name="mimetype" signature="mimetype()" />
          <scope ilk="function" name="load" signature="load()" />
          <scope ilk="function" name="error" signature="error()" />
          <scope ilk="function" name="getFunctionNames" returns="dojo.deferred" signature="getFunctionNames()" />
          <scope ilk="function" name="unFormat" signature="unFormat(string)">
            <variable citdl="String" ilk="argument" name="string" />
          </scope>
          <scope doc="Gets information about a function in regards to its meta&#xA;data" ilk="function" name="getMeta" signature="getMeta(selectKey, pkg, name, callback, [id])">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="pkg" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
            <variable citdl="String" ilk="argument" name="id" />
          </scope>
          <scope ilk="function" name="type" signature="type(selectKey, name, callback)">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
          </scope>
          <scope ilk="function" name="callbacks" signature="callbacks(selectKey, name, callback)">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
          </scope>
          <scope ilk="function" name="pkg" signature="pkg(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="name" signature="name(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="id" signature="id(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="selectKey" signature="selectKey(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="input" signature="input(input)">
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="_withPkg" signature="_withPkg(type, data, evt, input, newType)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
            <variable citdl="String" ilk="argument" name="newType" />
          </scope>
          <scope ilk="function" name="_gotMeta" signature="_gotMeta(type, data, evt)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
          </scope>
          <scope doc="Gets src file (created by the doc parser)" ilk="function" name="getSrc" signature="getSrc(selectKey, name, callback, [id])">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
            <variable citdl="String" ilk="argument" name="id" />
          </scope>
          <scope doc="Gets external documentation stored on Jot for a given&#xA;function" ilk="function" name="getDoc" signature="getDoc(selectKey, name, callback, [id])">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
            <variable citdl="String" ilk="argument" name="id" />
          </scope>
          <scope ilk="function" name="_gotDoc" signature="_gotDoc(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Array" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="returns" signature="returns(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Array" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="variables" signature="variables(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Array" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope doc="Gets external documentation stored on Jot for a given&#xA;package" ilk="function" name="getPkgDoc" signature="getPkgDoc(selectKey, name, callback)">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
          </scope>
          <scope doc="Gets a combination of the metadata and external&#xA;documentation for a given package" ilk="function" name="getPkgInfo" signature="getPkgInfo(selectKey, name, callback)">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
          </scope>
          <scope ilk="function" name="expects" signature="expects(selectKey, name, callback)">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
          </scope>
          <scope doc="Gets a combination of the metadata and external&#xA;documentation for a given package" ilk="function" name="pkginfo" signature="pkginfo(selectKey, name, callback)">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
          </scope>
          <scope ilk="function" name="callback" signature="callback(selectKey, name, callback)">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
          </scope>
          <scope ilk="function" name="_getPkgInfo" signature="_getPkgInfo(type, data, evt)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
          </scope>
          <scope ilk="function" name="getInfo" signature="getInfo(selectKey, name, callback)">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
          </scope>
          <scope ilk="function" name="_getInfo" signature="_getInfo(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="String" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope doc="Grabs the innerHTML from a Jot Rech Text node" ilk="function" name="_getMainText" signature="_getMainText(text)">
            <variable citdl="String" ilk="argument" name="text" />
          </scope>
          <scope ilk="function" name="getPackageMeta" signature="getPackageMeta(input)">
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="OLDgetPkgMeta" signature="OLDgetPkgMeta(selectKey, name, callback)">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
          </scope>
          <scope ilk="function" name="OLD_getPkgMeta" signature="OLD_getPkgMeta(input)">
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="_onDocSearch" signature="_onDocSearch(input)">
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="pkgLoop" signature="pkgLoop(input)">
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="_onDocSearchFn" signature="_onDocSearchFn(type, data, evt)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Array" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
          </scope>
          <scope ilk="function" name="_onPkgResults" signature="_onPkgResults(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="path" signature="path(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="description" signature="description(input)">
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="size" signature="size(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="methods" signature="methods(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="requires" signature="requires(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="summary" signature="summary(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="_onDocResults" signature="_onDocResults(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="_printFunctionResults" signature="_printFunctionResults(results)">
            <variable ilk="argument" name="results" />
          </scope>
          <scope ilk="function" name="_printPkgResult" signature="_printPkgResult(results)">
            <variable ilk="argument" name="results" />
          </scope>
          <scope doc="Get doc, meta, and src" ilk="function" name="_onDocSelectFunction" signature="_onDocSelectFunction(input)">
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="_onDocSelectPackage" signature="_onDocSelectPackage(input)">
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="_onDocSelectResults" signature="_onDocSelectResults(type, data, evt, input)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Object" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope doc="Call this function to send the /docs/function/detail topic&#xA;event" ilk="function" name="_printFunctionDetail" signature="_printFunctionDetail(results)">
            <variable ilk="argument" name="results" />
          </scope>
          <scope ilk="function" name="_buildCache" signature="_buildCache(input)">
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="loading" signature="loading(input)">
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="url" signature="url()" />
          <scope doc="The combined information" ilk="function" name="selectFunction" signature="selectFunction(name, [id])">
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="String" ilk="argument" name="id" />
          </scope>
          <scope ilk="function" name="savePackage" signature="savePackage(callbackObject, callback, parameters)">
            <variable citdl="Object" ilk="argument" name="callbackObject" />
            <variable citdl="String" ilk="argument" name="callback" />
            <variable citdl="Object" ilk="argument" name="parameters" />
          </scope>
          <scope ilk="function" name="srcObj" signature="srcObj(callbackObject, callback, parameters)">
            <variable citdl="Object" ilk="argument" name="callbackObject" />
            <variable citdl="String" ilk="argument" name="callback" />
            <variable citdl="Object" ilk="argument" name="parameters" />
          </scope>
          <scope ilk="function" name="srcFunc" signature="srcFunc(callbackObject, callback, parameters)">
            <variable citdl="Object" ilk="argument" name="callbackObject" />
            <variable citdl="String" ilk="argument" name="callback" />
            <variable citdl="Object" ilk="argument" name="parameters" />
          </scope>
          <scope ilk="function" name="targetObj" signature="targetObj(callbackObject, callback, parameters)">
            <variable citdl="Object" ilk="argument" name="callbackObject" />
            <variable citdl="String" ilk="argument" name="callback" />
            <variable citdl="Object" ilk="argument" name="parameters" />
          </scope>
          <scope ilk="function" name="targetFunc" signature="targetFunc(callbackObject, callback, parameters)">
            <variable citdl="Object" ilk="argument" name="callbackObject" />
            <variable citdl="String" ilk="argument" name="callback" />
            <variable citdl="Object" ilk="argument" name="parameters" />
          </scope>
          <scope ilk="function" name="once" signature="once(callbackObject, callback, parameters)">
            <variable citdl="Object" ilk="argument" name="callbackObject" />
            <variable citdl="String" ilk="argument" name="callback" />
            <variable citdl="Object" ilk="argument" name="parameters" />
          </scope>
          <scope ilk="function" name="_pkgRpc" signature="_pkgRpc(data)">
            <variable ilk="argument" name="data" />
          </scope>
          <scope ilk="function" name="_savedPkgRpc" signature="_savedPkgRpc(type)">
            <variable ilk="argument" name="type" />
          </scope>
          <scope doc="Gets the package associated with a function and stores it in&#xA;the .pkg value of input" ilk="function" name="functionPackages" signature="functionPackages(selectKey, name, callback, input)">
            <variable ilk="argument" name="selectKey" />
            <variable citdl="String" ilk="argument" name="name" />
            <variable citdl="Function" ilk="argument" name="callback" />
            <variable citdl="Object" ilk="argument" name="input" />
          </scope>
          <scope ilk="function" name="_functionPackages" signature="_functionPackages(type, data, evt)">
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="Array" ilk="argument" name="data" />
            <variable citdl="Object" ilk="argument" name="evt" />
          </scope>
          <scope ilk="function" name="setUserName" signature="setUserName(name)">
            <variable citdl="String" ilk="argument" name="name" />
          </scope>
          <scope ilk="function" name="setPassword" signature="setPassword(password)">
            <variable citdl="String" ilk="argument" name="password" />
          </scope>
          <scope ilk="function" name="_logIn" signature="_logIn()" />
          <scope ilk="function" name="method" signature="method()" />
          <scope ilk="function" name="content" signature="content()" />
          <scope ilk="function" name="username" signature="username()" />
          <scope ilk="function" name="password" signature="password()" />
          <scope ilk="function" name="logInSuccess" signature="logInSuccess()" />
          <scope ilk="function" name="logInFailure" signature="logInFailure()" />
          <scope ilk="function" name="_set" signature="_set(base, keys, value)">
            <variable citdl="Object" ilk="argument" name="base" />
            <variable ilk="argument" name="keys" />
            <variable citdl="String" ilk="argument" name="value" />
          </scope>
          <scope ilk="function" name="_getCache" signature="_getCache(keys)">
            <variable ilk="argument" name="keys" />
          </scope>
        </scope>
        <scope ilk="class" name="browser_debug" />
        <scope ilk="function" name="clobberLastObject" signature="clobberLastObject(objpath)">
          <variable ilk="argument" name="objpath" />
        </scope>
        <variable citdl="Object" classrefs="dojo.lfx.IAnimation" name="lfx">
          <scope classrefs="dojo.lfx.IAnimation" ilk="class" name="Animation">
            <scope attributes="__ctor__" doc="a generic animation object that fires callbacks into it&apos;s&#xA;handlers object at various states" ilk="function" name="Animation" signature="Animation(handlers, duration, curve, easing, repeatCount, rate)">
              <variable citdl="Object" ilk="argument" name="handlers" />
              <variable citdl="Number" ilk="argument" name="duration" />
              <variable citdl="Array" ilk="argument" name="curve" />
              <variable citdl="Function" ilk="argument" name="easing" />
              <variable citdl="Number" ilk="argument" name="repeatCount" />
              <variable citdl="Number" ilk="argument" name="rate" />
              <variable name="curve" />
              <variable name="duration" />
              <variable name="repeatCount" />
              <variable name="rate" />
              <variable name="easing" />
              <variable name="_active" />
              <variable name="_paused" />
              <variable name="_paused" />
              <variable name="_active" />
              <variable name="_paused" />
              <variable name="_active" />
              <variable name="_paused" />
              <variable name="_active" />
              <variable name="repeatCount" />
            </scope>
            <variable name="_startTime" />
            <variable name="_endTime" />
            <variable name="_timer" />
            <variable name="_percent" />
            <variable name="_startRepeatCount" />
            <scope ilk="function" name="play" signature="play(delay, gotoStart)">
              <variable ilk="argument" name="delay" />
              <variable ilk="argument" name="gotoStart" />
            </scope>
            <scope ilk="function" name="pause" signature="pause()" />
            <scope ilk="function" name="gotoPercent" signature="gotoPercent(pct, andPlay)">
              <variable ilk="argument" name="pct" />
              <variable ilk="argument" name="andPlay" />
            </scope>
            <scope ilk="function" name="stop" signature="stop(gotoEnd)">
              <variable ilk="argument" name="gotoEnd" />
            </scope>
            <scope ilk="function" name="status" signature="status()" />
            <scope ilk="function" name="_cycle" signature="_cycle()" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="Line" signature="Line(start, end)">
            <variable ilk="argument" name="start" />
            <variable ilk="argument" name="end" />
            <variable name="start" />
            <variable name="end" />
            <variable name="getValue">
              <scope attributes="__ctor__" doc="returns the point on the line" ilk="function" name="getValue" signature="getValue(n)">
                <variable citdl="Number" ilk="argument" name="n" />
              </scope>
            </variable>
          </scope>
          <scope ilk="function" name="easeDefault" signature="easeDefault(n)">
            <variable ilk="argument" name="n" />
          </scope>
          <scope doc="returns the point on an easing curve" ilk="function" name="easeIn" signature="easeIn(n)">
            <variable ilk="argument" name="n" />
          </scope>
          <scope doc="returns the point on the line" ilk="function" name="easeOut" signature="easeOut(n)">
            <variable ilk="argument" name="n" />
          </scope>
          <scope doc="returns the point on the line" ilk="function" name="easeInOut" signature="easeInOut(n)">
            <variable ilk="argument" name="n" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="IAnimation" signature="IAnimation()">
            <scope ilk="function" name="connect" signature="connect(evt, scope, newFunc)">
              <variable ilk="argument" name="evt" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="newFunc" />
            </scope>
            <scope ilk="function" name="fire" signature="fire(evt, args)">
              <variable ilk="argument" name="evt" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="repeat" signature="repeat(count)">
              <variable ilk="argument" name="count" />
            </scope>
          </scope>
          <variable name="curve" />
          <variable name="duration" />
          <variable name="easing" />
          <variable name="repeatCount" />
          <variable name="rate" />
          <variable name="handler" />
          <variable name="beforeBegin" />
          <variable name="onBegin" />
          <variable name="onAnimate" />
          <variable name="onEnd" />
          <variable name="onPlay" />
          <variable name="onPause" />
          <variable name="onStop" />
          <variable name="play" />
          <variable name="pause" />
          <variable name="stop" />
          <variable name="_active" />
          <variable name="_paused" />
          <scope attributes="__ctor__" ilk="function" name="Combine" signature="Combine()">
            <variable name="_anims" />
            <scope ilk="function" name="play" signature="play(delay, gotoStart)">
              <variable ilk="argument" name="delay" />
              <variable ilk="argument" name="gotoStart" />
            </scope>
            <scope ilk="function" name="pause" signature="pause()" />
            <scope ilk="function" name="stop" signature="stop(gotoEnd)">
              <variable ilk="argument" name="gotoEnd" />
            </scope>
            <scope ilk="function" name="_onAnimsEnded" signature="_onAnimsEnded()" />
            <scope ilk="function" name="_animsCall" signature="_animsCall(funcName)">
              <variable ilk="argument" name="funcName" />
            </scope>
          </scope>
          <variable name="_animsEnded" />
          <scope attributes="__ctor__" ilk="function" name="Chain" signature="Chain()">
            <variable name="_anims" />
            <scope ilk="function" name="play" signature="play(delay, gotoStart)">
              <variable ilk="argument" name="delay" />
              <variable ilk="argument" name="gotoStart" />
            </scope>
            <scope ilk="function" name="pause" signature="pause()" />
            <scope ilk="function" name="playPause" signature="playPause()" />
            <scope ilk="function" name="stop" signature="stop()" />
            <scope ilk="function" name="_playNext" signature="_playNext()" />
          </scope>
          <variable name="_currAnim" />
          <scope ilk="function" name="combine" signature="combine()" />
          <scope ilk="function" name="chain" signature="chain()" />
          <scope ilk="class" name="extras" />
          <variable citdl="Object" name="html">
            <scope ilk="function" name="fadeWipeIn" signature="fadeWipeIn(nodes, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="fadeWipeOut" signature="fadeWipeOut(nodes, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="scale" signature="scale(nodes, percentage, scaleContent, fromCenter, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="percentage" />
              <variable ilk="argument" name="scaleContent" />
              <variable ilk="argument" name="fromCenter" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="_byId" signature="_byId(nodes)">
              <variable ilk="argument" name="nodes" />
            </scope>
            <scope attributes="__ctor__" ilk="function" name="propertyAnimation" signature="propertyAnimation(nodes, propertyMap, duration, easing, handlers)">
              <variable citdl="DOMNode" ilk="argument" name="nodes" />
              <variable citdl="Array" ilk="argument" name="propertyMap" />
              <variable citdl="Number" ilk="argument" name="duration" />
              <variable citdl="Function" ilk="argument" name="easing" />
              <variable citdl="Object" ilk="argument" name="handlers" />
              <variable name="_properties" />
              <variable name="diffs" />
              <variable name="getValue">
                <scope attributes="__ctor__" ilk="function" name="getValue" signature="getValue(n)">
                  <variable ilk="argument" name="n" />
                </scope>
              </variable>
            </scope>
            <scope ilk="function" name="_makeFadeable" signature="_makeFadeable(nodes)">
              <variable ilk="argument" name="nodes" />
            </scope>
            <scope ilk="function" name="fade" signature="fade(nodes, values, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="values" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="fadeIn" signature="fadeIn(nodes, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="fadeOut" signature="fadeOut(nodes, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="fadeShow" signature="fadeShow(nodes, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="fadeHide" signature="fadeHide(nodes, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="wipeIn" signature="wipeIn(nodes, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="wipeOut" signature="wipeOut(nodes, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="slideTo" signature="slideTo(nodes, coords, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="coords" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="slideBy" signature="slideBy(nodes, coords, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="coords" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="explode" signature="explode(start, endNode, duration, easing, callback)">
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="endNode" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="implode" signature="implode(startNode, end, duration, easing, callback)">
              <variable ilk="argument" name="startNode" />
              <variable ilk="argument" name="end" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="highlight" signature="highlight(nodes, startColor, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="startColor" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
            <scope ilk="function" name="unhighlight" signature="unhighlight(nodes, endColor, duration, easing, callback)">
              <variable ilk="argument" name="nodes" />
              <variable ilk="argument" name="endColor" />
              <variable ilk="argument" name="duration" />
              <variable ilk="argument" name="easing" />
              <variable ilk="argument" name="callback" />
            </scope>
          </variable>
          <scope ilk="class" name="toggle" />
        </variable>
        <variable citdl="Object" name="math">
          <scope ilk="class" name="curves" />
          <scope ilk="class" name="matrix">
            <scope ilk="function" name="multiply" signature="multiply(a, b)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
            </scope>
            <scope ilk="function" name="product" signature="product()" />
            <scope ilk="function" name="sum" signature="sum()" />
            <scope ilk="function" name="inverse" signature="inverse(a)">
              <variable ilk="argument" name="a" />
            </scope>
            <scope ilk="function" name="determinant" signature="determinant(a)">
              <variable ilk="argument" name="a" />
            </scope>
            <scope ilk="function" name="upperTriangle" signature="upperTriangle(m)">
              <variable ilk="argument" name="m" />
            </scope>
            <scope ilk="function" name="create" signature="create(a, b, value)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="ones" signature="ones(a, )">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="" />
            </scope>
            <scope ilk="function" name="zeros" signature="zeros(a, )">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="" />
            </scope>
            <scope ilk="function" name="identity" signature="identity(size, scale)">
              <variable ilk="argument" name="size" />
              <variable ilk="argument" name="scale" />
            </scope>
            <scope ilk="function" name="adjoint" signature="adjoint(a)">
              <variable ilk="argument" name="a" />
            </scope>
            <scope ilk="function" name="transpose" signature="transpose(a)">
              <variable ilk="argument" name="a" />
            </scope>
            <scope ilk="function" name="format" signature="format(a, decimal_points)">
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="decimal_points" />
            </scope>
            <scope ilk="function" name="copy" signature="copy(a)">
              <variable ilk="argument" name="a" />
            </scope>
            <scope ilk="function" name="scale" signature="scale(k, a)">
              <variable ilk="argument" name="k" />
              <variable ilk="argument" name="a" />
            </scope>
          </scope>
          <scope ilk="class" name="points" />
          <scope ilk="class" name="transform" />
          <scope attributes="__ctor__" ilk="function" name="Matrix" signature="Matrix()">
            <variable name="a" />
            <variable name="b" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="Transform" signature="Transform(matrix)">
            <variable ilk="argument" name="matrix" />
            <variable name="transformations" />
          </scope>
          <scope ilk="function" name="degToRad" signature="degToRad(x)">
            <variable ilk="argument" name="x" />
          </scope>
          <scope ilk="function" name="radToDeg" signature="radToDeg(x)">
            <variable ilk="argument" name="x" />
          </scope>
          <scope ilk="function" name="factorial" signature="factorial(n)">
            <variable ilk="argument" name="n" />
          </scope>
          <scope ilk="function" name="permutations" signature="permutations(n, )">
            <variable ilk="argument" name="n" />
            <variable ilk="argument" name="" />
          </scope>
          <scope ilk="function" name="combinations" signature="combinations(n, )">
            <variable ilk="argument" name="n" />
            <variable ilk="argument" name="" />
          </scope>
          <scope ilk="function" name="bernstein" signature="bernstein(t, )">
            <variable ilk="argument" name="t" />
            <variable ilk="argument" name="" />
          </scope>
          <scope ilk="function" name="gaussianRandom" signature="gaussianRandom()" />
          <scope ilk="function" name="mean" signature="mean()" />
          <scope ilk="function" name="round" signature="round(number, places)">
            <variable ilk="argument" name="number" />
            <variable ilk="argument" name="places" />
          </scope>
          <scope ilk="function" name="sd" signature="sd()" />
          <scope ilk="function" name="variance" signature="variance()" />
          <scope ilk="function" name="range" signature="range(a, b, step)">
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="b" />
            <variable ilk="argument" name="step" />
          </scope>
        </variable>
        <variable citdl="Object" name="validate">
          <scope ilk="class" name="check">
            <scope attributes="__ctor__" ilk="function" name="check" signature="check(form, profile)">
              <variable ilk="argument" name="form" />
              <variable ilk="argument" name="profile" />
            </scope>
          </scope>
          <scope ilk="function" name="evaluateConstraint" signature="evaluateConstraint(profile, constraint, fieldName, elem)">
            <variable ilk="argument" name="profile" />
            <variable ilk="argument" name="constraint" />
            <variable ilk="argument" name="fieldName" />
            <variable ilk="argument" name="elem" />
          </scope>
          <scope ilk="class" name="common" />
          <scope ilk="function" name="isText" signature="isText(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="isInteger" signature="isInteger(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="isRealNumber" signature="isRealNumber(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="isCurrency" signature="isCurrency(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="isInRange" signature="isInRange(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="isNumberFormat" signature="isNumberFormat(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="class" name="datetime" />
          <scope ilk="function" name="isValidTime" signature="isValidTime(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="is12HourTime" signature="is12HourTime(value)">
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="function" name="is24HourTime" signature="is24HourTime(value)">
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="function" name="isValidDate" signature="isValidDate(dateValue, format)">
            <variable ilk="argument" name="dateValue" />
            <variable ilk="argument" name="format" />
          </scope>
          <scope ilk="class" name="de" />
          <scope ilk="function" name="isGermanCurrency" signature="isGermanCurrency(value)">
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="class" name="jp" />
          <scope ilk="function" name="isJapaneseCurrency" signature="isJapaneseCurrency(value)">
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="class" name="us">
            <scope ilk="function" name="isCurrency" signature="isCurrency(value, flags)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="flags" />
            </scope>
            <scope ilk="function" name="isState" signature="isState(value, flags)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="flags" />
            </scope>
            <scope ilk="function" name="isPhoneNumber" signature="isPhoneNumber(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="isSocialSecurityNumber" signature="isSocialSecurityNumber(value)">
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="isZipCode" signature="isZipCode(value)">
              <variable ilk="argument" name="value" />
            </scope>
          </scope>
          <scope ilk="class" name="web" />
          <scope ilk="function" name="isIpAddress" signature="isIpAddress(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="isUrl" signature="isUrl(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="isEmailAddress" signature="isEmailAddress(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="isEmailAddressList" signature="isEmailAddressList(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
          <scope ilk="function" name="getEmailAddressList" signature="getEmailAddressList(value, flags)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="flags" />
          </scope>
        </variable>
        <scope ilk="class" name="namespace" />
        <scope ilk="function" name="registerNamespace" signature="registerNamespace(name, module, resolver)">
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="module" />
          <variable ilk="argument" name="resolver" />
        </scope>
        <scope ilk="function" name="registerNamespaceResolver" signature="registerNamespaceResolver(name, resolver)">
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="resolver" />
        </scope>
        <scope ilk="function" name="registerNamespaceManifest" signature="registerNamespaceManifest(module, path, name, widgetModule, resolver)">
          <variable ilk="argument" name="module" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="widgetModule" />
          <variable ilk="argument" name="resolver" />
        </scope>
        <scope ilk="function" name="defineNamespace" signature="defineNamespace(objRoot, location, nsPrefix, resolver, widgetPackage)">
          <variable ilk="argument" name="objRoot" />
          <variable ilk="argument" name="location" />
          <variable ilk="argument" name="nsPrefix" />
          <variable ilk="argument" name="resolver" />
          <variable ilk="argument" name="widgetPackage" />
        </scope>
        <scope ilk="class" name="loader_xd" />
        <scope ilk="class" name="plugin" />
        <scope ilk="class" name="svg">
          <variable citdl="Object" name="g">
            <scope doc="Suspend the rendering engine" ilk="function" name="suspend" signature="suspend()" />
            <scope doc="Resume the rendering engine" ilk="function" name="resume" signature="resume()" />
            <scope doc="Force the render engine to redraw" ilk="function" name="force" signature="force()" />
          </variable>
          <variable citdl="Object" name="anim">
            <scope doc="check to see if all animations are paused" ilk="function" name="arePaused" returns="Boolean" signature="arePaused()" />
            <scope doc="pause all animations" ilk="function" name="pause" signature="pause()" />
            <scope doc="resume all animations" ilk="function" name="resume" signature="resume()" />
          </variable>
        </scope>
        <variable citdl="Object" name="uri">
          <scope ilk="class" name="Uri">
            <scope attributes="__ctor__" ilk="function" name="Uri" signature="Uri()">
              <variable name="uri" />
              <variable name="scheme" />
              <variable name="authority" />
              <variable name="path" />
              <variable name="query" />
              <variable name="fragment" />
              <variable name="user" />
              <variable name="password" />
              <variable name="host" />
              <variable name="port" />
              <variable name="toString" />
            </scope>
            <scope ilk="function" name="toString" signature="toString()" />
          </scope>
          <scope ilk="function" name="dojoUri" signature="dojoUri(uri)">
            <variable ilk="argument" name="uri" />
          </scope>
          <scope ilk="function" name="moduleUri" signature="moduleUri(module, uri)">
            <variable ilk="argument" name="module" />
            <variable ilk="argument" name="uri" />
          </scope>
          <scope ilk="function" name="nsUri" signature="nsUri(ns, ri)">
            <variable ilk="argument" name="ns" />
            <variable ilk="argument" name="ri" />
          </scope>
        </variable>
        <scope doc="return the current global context object (e.g., the window&#xA;object in a browser)." ilk="function" name="global" signature="global()" />
        <scope doc="Returns &apos;object[name]&apos;. If not defined and &apos;create&apos; is true,&#xA;will return a new Object." ilk="function" name="evalProp" signature="evalProp(name, object, [create])">
          <variable citdl="String" ilk="argument" name="name" />
          <variable citdl="Object" ilk="argument" name="object" />
          <variable citdl="Boolean" ilk="argument" name="create" />
        </scope>
        <scope doc="Parse string path to an object, and return corresponding&#xA;object reference and property name." ilk="function" name="parseObjPath" signature="parseObjPath(path, [context], [create])">
          <variable citdl="String" ilk="argument" name="path" />
          <variable citdl="Object" ilk="argument" name="context" />
          <variable citdl="Boolean" ilk="argument" name="create" />
        </scope>
        <scope doc="Return the value of object at &apos;path&apos; in the global scope,&#xA;without using &apos;eval()&apos;." ilk="function" name="evalObjPath" signature="evalObjPath(path, [create])">
          <variable citdl="String" ilk="argument" name="path" />
          <variable citdl="Boolean" ilk="argument" name="create" />
        </scope>
        <scope doc="Return an exception&apos;s &apos;message&apos;, &apos;description&apos; or text.&#xA;TODO: overriding Error.prototype.toString won&apos;t accomplish&#xA;this? ..." ilk="function" name="errorToString" signature="errorToString(exception)">
          <variable ilk="argument" name="exception" />
        </scope>
        <scope doc="Throw an error message, appending text of &apos;exception&apos; if&#xA;provided. note: Also prints a message to the user using&#xA;&apos;dojo.hostenv.println&apos;." ilk="function" name="raise" signature="raise(message, [exception])">
          <variable citdl="String" ilk="argument" name="message" />
          <variable ilk="argument" name="exception" />
        </scope>
        <scope doc="Throw an exception because some function is not implemented." ilk="function" name="unimplemented" signature="unimplemented(funcname, [extra])">
          <variable citdl="String" ilk="argument" name="funcname" />
          <variable citdl="String" ilk="argument" name="extra" />
        </scope>
        <scope doc="Log a debug message to indicate that a behavior has been&#xA;deprecated." ilk="function" name="deprecated" signature="deprecated(behaviour, [extra], [removal])">
          <variable citdl="String" ilk="argument" name="behaviour" />
          <variable citdl="String" ilk="argument" name="extra" />
          <variable citdl="String" ilk="argument" name="removal" />
        </scope>
        <scope ilk="function" name="normalizeLocale" signature="normalizeLocale(locale)">
          <variable ilk="argument" name="locale" />
        </scope>
        <scope ilk="function" name="searchLocalePath" signature="searchLocalePath(locale, down, searchFunc)">
          <variable ilk="argument" name="locale" />
          <variable ilk="argument" name="down" />
          <variable ilk="argument" name="searchFunc" />
        </scope>
        <scope ilk="function" name="requireLocalization" signature="requireLocalization(modulename, bundlename, locale, m, b)">
          <variable ilk="argument" name="modulename" />
          <variable ilk="argument" name="bundlename" />
          <variable ilk="argument" name="locale" />
          <variable ilk="argument" name="m" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope ilk="function" name="loaded" signature="loaded()" />
        <scope ilk="function" name="unloaded" signature="unloaded()" />
        <scope ilk="function" name="addOnLoad" signature="addOnLoad(obj, fcnName)">
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="fcnName" />
        </scope>
        <scope ilk="function" name="addOnUnload" signature="addOnUnload(obj, fcnName)">
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="fcnName" />
        </scope>
        <scope ilk="function" name="kwCompoundRequire" signature="kwCompoundRequire(modMap)">
          <variable ilk="argument" name="modMap" />
        </scope>
        <scope ilk="function" name="require" signature="require()" />
        <scope ilk="function" name="requireIf" signature="requireIf()" />
        <scope ilk="function" name="provide" signature="provide()" />
        <scope ilk="function" name="registerModulePath" signature="registerModulePath(module, prefix)">
          <variable ilk="argument" name="module" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <scope ilk="function" name="setModulePrefix" signature="setModulePrefix(module, prefix)">
          <variable ilk="argument" name="module" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <scope ilk="function" name="exists" signature="exists(obj, name)">
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="class" name="hostenv_wsh" />
        <scope ilk="class" name="hostenv_adobesvg" />
        <variable citdl="Object" name="html">
          <scope ilk="class" name="color" />
          <scope ilk="function" name="getBackgroundColor" signature="getBackgroundColor(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="class" name="common" />
          <scope ilk="function" name="body" signature="body()" />
          <scope ilk="function" name="getEventTarget" signature="getEventTarget(evt)">
            <variable ilk="argument" name="evt" />
          </scope>
          <scope ilk="function" name="getViewport" signature="getViewport()" />
          <scope ilk="function" name="getScroll" signature="getScroll()" />
          <scope ilk="function" name="getParentByType" signature="getParentByType(node, type)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="type" />
          </scope>
          <scope ilk="function" name="getAttribute" signature="getAttribute(node, attr)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="attr" />
          </scope>
          <scope ilk="function" name="hasAttribute" signature="hasAttribute(node, attr)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="attr" />
          </scope>
          <scope ilk="function" name="getCursorPosition" signature="getCursorPosition(e)">
            <variable ilk="argument" name="e" />
          </scope>
          <scope ilk="function" name="isTag" signature="isTag(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="createExternalElement" signature="createExternalElement(doc, tag)">
            <variable ilk="argument" name="doc" />
            <variable ilk="argument" name="tag" />
          </scope>
          <scope ilk="function" name="_callDeprecated" signature="_callDeprecated(inFunc, replFunc, args, argName, retValue)">
            <variable ilk="argument" name="inFunc" />
            <variable ilk="argument" name="replFunc" />
            <variable ilk="argument" name="args" />
            <variable ilk="argument" name="argName" />
            <variable ilk="argument" name="retValue" />
          </scope>
          <scope ilk="function" name="getViewportWidth" signature="getViewportWidth()" />
          <scope ilk="function" name="getViewportHeight" signature="getViewportHeight()" />
          <scope ilk="function" name="getViewportSize" signature="getViewportSize()" />
          <scope ilk="function" name="getScrollTop" signature="getScrollTop()" />
          <scope ilk="function" name="getScrollLeft" signature="getScrollLeft()" />
          <scope ilk="function" name="getScrollOffset" signature="getScrollOffset()" />
          <scope ilk="class" name="display" />
          <scope ilk="function" name="_toggle" signature="_toggle(node, tester, setter)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="tester" />
            <variable ilk="argument" name="setter" />
          </scope>
          <scope ilk="function" name="show" signature="show(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="hide" signature="hide(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="setShowing" signature="setShowing(node, showing)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="showing" />
          </scope>
          <scope ilk="function" name="isShowing" signature="isShowing(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="toggleShowing" signature="toggleShowing(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="suggestDisplayByTagName" signature="suggestDisplayByTagName(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="setDisplay" signature="setDisplay(node, display)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="display" />
          </scope>
          <scope ilk="function" name="isDisplayed" signature="isDisplayed(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="toggleDisplay" signature="toggleDisplay(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="setVisibility" signature="setVisibility(node, visibility)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="visibility" />
          </scope>
          <scope ilk="function" name="isVisible" signature="isVisible(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="toggleVisibility" signature="toggleVisibility(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="setOpacity" signature="setOpacity(node, opacity, dontFixOpacity)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="opacity" />
            <variable ilk="argument" name="dontFixOpacity" />
          </scope>
          <scope ilk="class" name="iframe" />
          <scope ilk="function" name="iframeContentWindow" signature="iframeContentWindow(iframe_el)">
            <variable ilk="argument" name="iframe_el" />
          </scope>
          <scope ilk="function" name="iframeContentDocument" signature="iframeContentDocument(iframe_el)">
            <variable ilk="argument" name="iframe_el" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="BackgroundIframe" signature="BackgroundIframe(node)">
            <variable ilk="argument" name="node" />
            <variable name="iframe.tabIndex" />
            <variable name="domNode" />
            <variable name="iframe.style.display" />
            <variable name="iframe.style.zIndex" />
            <variable name="iframe.style.display" />
            <variable name="iframe.style.display" />
            <scope ilk="function" name="onResized" signature="onResized()" />
            <scope ilk="function" name="size" signature="size(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="setZIndex" signature="setZIndex(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="show" signature="show()" />
            <scope ilk="function" name="hide" signature="hide()" />
            <scope ilk="function" name="remove" signature="remove()" />
          </scope>
          <variable name="iframe" />
          <scope ilk="class" name="layout" />
          <scope ilk="function" name="sumAncestorProperties" signature="sumAncestorProperties(node, prop)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="prop" />
          </scope>
          <scope ilk="function" name="setStyleAttributes" signature="setStyleAttributes(node, attributes)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="attributes" />
          </scope>
          <scope ilk="function" name="abs" signature="abs(node, includeScroll, boxType)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="includeScroll" />
            <variable ilk="argument" name="boxType" />
          </scope>
          <scope ilk="function" name="isPositionAbsolute" signature="isPositionAbsolute(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="_sumPixelValues" signature="_sumPixelValues(node, selectors, autoIsZero)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="selectors" />
            <variable ilk="argument" name="autoIsZero" />
          </scope>
          <scope ilk="function" name="getMargin" signature="getMargin(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getBorder" signature="getBorder(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getBorderExtent" signature="getBorderExtent(node, side)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="side" />
          </scope>
          <scope ilk="function" name="getMarginExtent" signature="getMarginExtent(node, side)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="side" />
          </scope>
          <scope ilk="function" name="getPaddingExtent" signature="getPaddingExtent(node, side)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="side" />
          </scope>
          <scope ilk="function" name="getPadding" signature="getPadding(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getPadBorder" signature="getPadBorder(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getBoxSizing" signature="getBoxSizing(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="isBorderBox" signature="isBorderBox(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getBorderBox" signature="getBorderBox(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getPaddingBox" signature="getPaddingBox(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getContentBox" signature="getContentBox(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="setContentBox" signature="setContentBox(node, args)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="args" />
          </scope>
          <scope ilk="function" name="getMarginBox" signature="getMarginBox(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="setMarginBox" signature="setMarginBox(node, args)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="args" />
          </scope>
          <scope ilk="function" name="getElementBox" signature="getElementBox(node, type)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="type" />
          </scope>
          <scope ilk="function" name="toCoordinateArray" signature="toCoordinateArray(coords, includeScroll, boxtype)">
            <variable ilk="argument" name="coords" />
            <variable ilk="argument" name="includeScroll" />
            <variable ilk="argument" name="boxtype" />
          </scope>
          <scope ilk="function" name="setOuterWidth" signature="setOuterWidth(node, width)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="width" />
          </scope>
          <scope ilk="function" name="setOuterHeight" signature="setOuterHeight()" />
          <scope ilk="function" name="getOuterWidth" signature="getOuterWidth()" />
          <scope ilk="function" name="getOuterHeight" signature="getOuterHeight()" />
          <scope ilk="function" name="getTotalOffset" signature="getTotalOffset(node, type, includeScroll)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="includeScroll" />
          </scope>
          <scope ilk="function" name="getAbsoluteX" signature="getAbsoluteX(node, includeScroll)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="includeScroll" />
          </scope>
          <scope ilk="function" name="getAbsoluteY" signature="getAbsoluteY(node, includeScroll)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="includeScroll" />
          </scope>
          <scope ilk="function" name="totalOffsetLeft" signature="totalOffsetLeft(node, includeScroll)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="includeScroll" />
          </scope>
          <scope ilk="function" name="totalOffsetTop" signature="totalOffsetTop(node, includeScroll)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="includeScroll" />
          </scope>
          <scope ilk="function" name="getMarginWidth" signature="getMarginWidth(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getMarginHeight" signature="getMarginHeight(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getBorderWidth" signature="getBorderWidth(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getBorderHeight" signature="getBorderHeight(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getPaddingWidth" signature="getPaddingWidth(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getPaddingHeight" signature="getPaddingHeight(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getPadBorderWidth" signature="getPadBorderWidth(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getPadBorderHeight" signature="getPadBorderHeight(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getInnerWidth" signature="getInnerWidth()" />
          <scope ilk="function" name="getInnerHeight" signature="getInnerHeight()" />
          <scope ilk="function" name="getContentWidth" signature="getContentWidth()" />
          <scope ilk="function" name="getContentHeight" signature="getContentHeight()" />
          <scope ilk="function" name="setContentWidth" signature="setContentWidth(node, width)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="width" />
          </scope>
          <scope ilk="function" name="setContentHeight" signature="setContentHeight(node, height)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="height" />
          </scope>
          <scope ilk="class" name="selection">
            <scope doc="Get the selection type (like document.select.type in IE)." ilk="function" name="getType" signature="getType()" />
            <scope doc="Retrieves the selected element (if any), just in the case&#xA;that a single element (object like and image or a table) is&#xA;selected." ilk="function" name="getSelectedElement" signature="getSelectedElement()" />
            <scope doc="Get the parent element of the current selection" ilk="function" name="getParentElement" signature="getParentElement()" />
            <scope doc="Return the text (no html tags) included in the current&#xA;selection or null if no text is selected IE" ilk="function" name="getSelectedText" signature="getSelectedText()" />
            <scope doc="Return the html of the current selection or null if&#xA;unavailable IE" ilk="function" name="getSelectedHtml" signature="getSelectedHtml()" />
            <scope ilk="function" name="hasAncestorElement" signature="hasAncestorElement(tagName)">
              <variable ilk="argument" name="tagName" />
            </scope>
            <scope doc="Return the parent element of the current selection which is&#xA;of type tagName (or one of the other specified tagName)" ilk="function" name="getAncestorElement" signature="getAncestorElement(tagName)">
              <variable ilk="argument" name="tagName" />
            </scope>
            <scope ilk="function" name="isTag" signature="isTag(node, tags)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="tags" />
            </scope>
            <scope doc="clear previous selection and select element" ilk="function" name="selectElement" signature="selectElement(element)">
              <variable ilk="argument" name="element" />
            </scope>
            <scope doc="clear previous selection and select the content of the node" ilk="function" name="selectElementChildren" signature="selectElementChildren(element)">
              <variable ilk="argument" name="element" />
            </scope>
            <scope doc="clear selection" ilk="function" name="collapse" signature="collapse(beginning)">
              <variable ilk="argument" name="beginning" />
            </scope>
            <scope doc="delete selection IE" ilk="function" name="remove" signature="remove()" />
          </scope>
          <scope ilk="function" name="clearSelection" signature="clearSelection()" />
          <scope ilk="function" name="disableSelection" signature="disableSelection(element)">
            <variable ilk="argument" name="element" />
          </scope>
          <scope ilk="function" name="enableSelection" signature="enableSelection(element)">
            <variable ilk="argument" name="element" />
          </scope>
          <scope ilk="function" name="selectElement" signature="selectElement(element)">
            <variable ilk="argument" name="element" />
          </scope>
          <scope ilk="function" name="selectInputText" signature="selectInputText(element)">
            <variable ilk="argument" name="element" />
          </scope>
          <scope ilk="function" name="isSelectionCollapsed" signature="isSelectionCollapsed()" />
          <scope ilk="class" name="shadow">
            <scope attributes="__ctor__" ilk="function" name="shadow" signature="shadow(node)">
              <variable ilk="argument" name="node" />
              <variable name="node" />
              <variable name="pieces" />
            </scope>
            <variable name="shadowPng" />
            <variable name="shadowThickness" />
            <variable name="shadowOffset" />
            <scope ilk="function" name="init" signature="init(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="_makePiece" signature="_makePiece(name, vertAttach, vertCoord, horzAttach, horzCoord, sizing)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="vertAttach" />
              <variable ilk="argument" name="vertCoord" />
              <variable ilk="argument" name="horzAttach" />
              <variable ilk="argument" name="horzCoord" />
              <variable ilk="argument" name="sizing" />
            </scope>
            <scope ilk="function" name="size" signature="size(width, height)">
              <variable ilk="argument" name="width" />
              <variable ilk="argument" name="height" />
            </scope>
          </scope>
          <scope ilk="class" name="style" />
          <scope ilk="function" name="getClass" signature="getClass(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getClasses" signature="getClasses(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="hasClass" signature="hasClass(node, classname)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="classname" />
          </scope>
          <scope ilk="function" name="prependClass" signature="prependClass(node, classStr)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="classStr" />
          </scope>
          <scope ilk="function" name="addClass" signature="addClass(node, classStr)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="classStr" />
          </scope>
          <scope ilk="function" name="setClass" signature="setClass(node, classStr)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="classStr" />
          </scope>
          <scope ilk="function" name="removeClass" signature="removeClass(node, classStr, allowPartialMatches)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="classStr" />
            <variable ilk="argument" name="allowPartialMatches" />
          </scope>
          <scope ilk="function" name="replaceClass" signature="replaceClass(node, newClass, oldClass)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="newClass" />
            <variable ilk="argument" name="oldClass" />
          </scope>
          <scope ilk="function" name="getElementsByClass" signature="getElementsByClass(classStr, parent, nodeType, classMatchType, useNonXpath)">
            <variable ilk="argument" name="classStr" />
            <variable ilk="argument" name="parent" />
            <variable ilk="argument" name="nodeType" />
            <variable ilk="argument" name="classMatchType" />
            <variable ilk="argument" name="useNonXpath" />
          </scope>
          <scope ilk="function" name="toCamelCase" signature="toCamelCase(selector)">
            <variable ilk="argument" name="selector" />
          </scope>
          <scope ilk="function" name="toSelectorCase" signature="toSelectorCase(selector)">
            <variable ilk="argument" name="selector" />
          </scope>
          <scope ilk="function" name="getComputedStyle" signature="getComputedStyle(node, cssSelector, inValue)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="cssSelector" />
            <variable ilk="argument" name="inValue" />
          </scope>
          <scope ilk="function" name="getStyleProperty" signature="getStyleProperty(node, cssSelector)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="cssSelector" />
          </scope>
          <scope ilk="function" name="getStyle" signature="getStyle(node, cssSelector)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="cssSelector" />
          </scope>
          <scope ilk="function" name="setStyle" signature="setStyle(node, cssSelector, value)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="cssSelector" />
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="function" name="setStyleText" signature="setStyleText(target, text)">
            <variable ilk="argument" name="target" />
            <variable ilk="argument" name="text" />
          </scope>
          <scope ilk="function" name="copyStyle" signature="copyStyle(target, source)">
            <variable ilk="argument" name="target" />
            <variable ilk="argument" name="source" />
          </scope>
          <scope ilk="function" name="getUnitValue" signature="getUnitValue(node, cssSelector, autoIsZero)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="cssSelector" />
            <variable ilk="argument" name="autoIsZero" />
          </scope>
          <scope ilk="function" name="getPixelValue" signature="getPixelValue(node, cssSelector, autoIsZero)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="cssSelector" />
            <variable ilk="argument" name="autoIsZero" />
          </scope>
          <scope ilk="function" name="setPositivePixelValue" signature="setPositivePixelValue(node, selector, value)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="selector" />
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="function" name="insertCssRule" signature="insertCssRule(selector, declaration, index)">
            <variable ilk="argument" name="selector" />
            <variable ilk="argument" name="declaration" />
            <variable ilk="argument" name="index" />
          </scope>
          <scope ilk="function" name="removeCssRule" signature="removeCssRule(index)">
            <variable ilk="argument" name="index" />
          </scope>
          <scope ilk="function" name="insertCssFile" signature="insertCssFile(URI, doc, checkDuplicates)">
            <variable ilk="argument" name="URI" />
            <variable ilk="argument" name="doc" />
            <variable ilk="argument" name="checkDuplicates" />
          </scope>
          <scope ilk="function" name="insertCssText" signature="insertCssText(cssStr, doc, URI)">
            <variable ilk="argument" name="cssStr" />
            <variable ilk="argument" name="doc" />
            <variable ilk="argument" name="URI" />
          </scope>
          <scope ilk="function" name="fixPathsInCssText" signature="fixPathsInCssText(cssStr, URI)">
            <variable ilk="argument" name="cssStr" />
            <variable ilk="argument" name="URI" />
          </scope>
          <scope ilk="function" name="setActiveStyleSheet" signature="setActiveStyleSheet(title)">
            <variable ilk="argument" name="title" />
          </scope>
          <scope ilk="function" name="getActiveStyleSheet" signature="getActiveStyleSheet()" />
          <scope ilk="function" name="getPreferredStyleSheet" signature="getPreferredStyleSheet()" />
          <scope ilk="function" name="applyBrowserClass" signature="applyBrowserClass(node)">
            <variable citdl="HTMLElement" ilk="argument" name="node" />
          </scope>
          <scope ilk="class" name="util" />
          <scope ilk="function" name="getElementWindow" signature="getElementWindow(element)">
            <variable ilk="argument" name="element" />
          </scope>
          <scope ilk="function" name="getDocumentWindow" signature="getDocumentWindow(doc)">
            <variable ilk="argument" name="doc" />
          </scope>
          <scope ilk="function" name="gravity" signature="gravity(node, e)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="e" />
          </scope>
          <scope ilk="function" name="overElement" signature="overElement(element, e)">
            <variable ilk="argument" name="element" />
            <variable ilk="argument" name="e" />
          </scope>
          <scope ilk="function" name="renderedTextContent" signature="renderedTextContent(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="createNodesFromText" signature="createNodesFromText(txt, trim)">
            <variable ilk="argument" name="txt" />
            <variable ilk="argument" name="trim" />
          </scope>
          <scope ilk="function" name="placeOnScreen" signature="placeOnScreen(node, desiredX, desiredY, padding, hasScroll, corners, tryOnly)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="desiredX" />
            <variable ilk="argument" name="desiredY" />
            <variable ilk="argument" name="padding" />
            <variable ilk="argument" name="hasScroll" />
            <variable ilk="argument" name="corners" />
            <variable ilk="argument" name="tryOnly" />
          </scope>
          <scope ilk="function" name="placeOnScreenPoint" signature="placeOnScreenPoint(node, desiredX, desiredY, padding, hasScroll)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="desiredX" />
            <variable ilk="argument" name="desiredY" />
            <variable ilk="argument" name="padding" />
            <variable ilk="argument" name="hasScroll" />
          </scope>
          <scope ilk="function" name="placeOnScreenAroundElement" signature="placeOnScreenAroundElement(node, aroundNode, padding, aroundType, aroundCorners, tryOnly)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="aroundNode" />
            <variable ilk="argument" name="padding" />
            <variable ilk="argument" name="aroundType" />
            <variable ilk="argument" name="aroundCorners" />
            <variable ilk="argument" name="tryOnly" />
          </scope>
          <scope ilk="function" name="scrollIntoView" signature="scrollIntoView(node)">
            <variable ilk="argument" name="node" />
          </scope>
        </variable>
        <variable citdl="Object" name="storage">
          <scope classrefs="dojo.storage" ilk="class" name="browser">
            <scope attributes="__ctor__" ilk="function" name="FlashStorageProvider" signature="FlashStorageProvider()">
              <scope ilk="function" name="initialize" signature="initialize()" />
              <scope ilk="function" name="flash6" signature="flash6()" />
              <scope ilk="function" name="isAvailable" signature="isAvailable()" />
              <scope ilk="function" name="setNamespace" signature="setNamespace(ns)">
                <variable ilk="argument" name="ns" />
              </scope>
              <scope ilk="function" name="put" signature="put(key, value, resultsHandler)">
                <variable ilk="argument" name="key" />
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="resultsHandler" />
              </scope>
              <scope ilk="function" name="get" signature="get(key)">
                <variable ilk="argument" name="key" />
              </scope>
              <scope ilk="function" name="string" signature="string(key)">
                <variable ilk="argument" name="key" />
              </scope>
              <scope ilk="function" name="getKeys" signature="getKeys()" />
              <scope ilk="function" name="clear" signature="clear()" />
              <scope ilk="function" name="remove" signature="remove(key)">
                <variable ilk="argument" name="key" />
              </scope>
              <scope ilk="function" name="isPermanent" signature="isPermanent()" />
              <scope ilk="function" name="getMaximumSize" signature="getMaximumSize()" />
              <scope ilk="function" name="hasSettingsUI" signature="hasSettingsUI()" />
              <scope ilk="function" name="showSettingsUI" signature="showSettingsUI()" />
              <scope ilk="function" name="hideSettingsUI" signature="hideSettingsUI()" />
              <scope ilk="function" name="getType" signature="getType()" />
              <scope ilk="function" name="_flashLoaded" signature="_flashLoaded()" />
              <scope ilk="function" name="_onStatus" signature="_onStatus(statusResult, key)">
                <variable ilk="argument" name="statusResult" />
                <variable ilk="argument" name="key" />
              </scope>
            </scope>
            <variable name="initialized" />
            <variable name="_available" />
            <variable name="_statusHandler" />
          </scope>
          <scope classrefs="dojo.storage.StorageProvider" ilk="class" name="dashboard">
            <scope attributes="__ctor__" ilk="function" name="StorageProvider" signature="StorageProvider()">
              <variable name="initialized" />
              <variable name="initialized" />
              <scope ilk="function" name="storageOnLoad" signature="storageOnLoad()" />
              <scope ilk="function" name="set" signature="set(key, value, ns)">
                <variable ilk="argument" name="key" />
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="ns" />
              </scope>
              <scope ilk="function" name="get" signature="get(key, ns)">
                <variable ilk="argument" name="key" />
                <variable ilk="argument" name="ns" />
              </scope>
            </scope>
          </scope>
          <scope attributes="__ctor__" ilk="function" name="storage" signature="storage(rawNode)">
            <variable ilk="argument" name="rawNode" />
          </scope>
          <variable name="SUCCESS" />
          <variable name="FAILED" />
          <variable name="PENDING" />
          <variable name="SIZE_NOT_AVAILABLE" />
          <variable name="SIZE_NO_LIMIT" />
          <variable name="onHideSettingsUI" />
          <scope doc="Allows this storage provider to initialize itself. This is&#xA;called after the page has finished loading, so you can not&#xA;do document.writes()." ilk="function" name="initialize" signature="initialize()" />
          <scope doc="Returns whether this storage provider is available on this&#xA;platform." ilk="function" name="isAvailable" signature="isAvailable()" />
          <scope doc="Puts a key and value into this storage system." ilk="function" name="put" signature="put(key, value, resultsHandler)">
            <variable citdl="String" ilk="argument" name="key" />
            <variable citdl="Object" ilk="argument" name="value" />
            <variable citdl="Function" ilk="argument" name="resultsHandler" />
          </scope>
          <scope doc="Gets the value with the given key. Returns null if this key&#xA;is not in the storage system." ilk="function" name="get" signature="get(key)">
            <variable citdl="String" ilk="argument" name="key" />
          </scope>
          <scope doc="Determines whether the storage has the given key." ilk="function" name="hasKey" signature="hasKey(key)">
            <variable citdl="String" ilk="argument" name="key" />
          </scope>
          <scope doc="Completely clears this storage system of all of it&apos;s values&#xA;and keys." ilk="function" name="clear" signature="clear()" />
          <scope ilk="function" name="remove" signature="remove(key)">
            <variable ilk="argument" name="key" />
          </scope>
          <scope doc="Returns whether this storage provider&apos;s values are persisted&#xA;when this platform is shutdown." ilk="function" name="isPermanent" signature="isPermanent()" />
          <scope ilk="function" name="getMaximumSize" signature="getMaximumSize()" />
          <scope doc="Determines whether this provider has a settings UI." ilk="function" name="hasSettingsUI" signature="hasSettingsUI()" />
          <scope doc="If this provider has a settings UI, it is shown." ilk="function" name="showSettingsUI" signature="showSettingsUI()" />
          <scope doc="If this provider has a settings UI, hides it." ilk="function" name="hideSettingsUI" signature="hideSettingsUI()" />
          <scope doc="The provider name as a string, such as&#xA;&quot;dojo.storage.FlashStorageProvider&quot;." ilk="function" name="getType" signature="getType()" />
          <scope doc="Subclasses can call this to ensure that the key given is&#xA;valid in a consistent way across different storage&#xA;providers. We use the lowest common denominator for key&#xA;values allowed: only letters, numbers, and underscores are&#xA;allowed." ilk="function" name="isValidKey" signature="isValidKey(keyName)">
            <variable citdl="String" ilk="argument" name="keyName" />
          </scope>
          <variable citdl="Object" name="manager">
            <scope doc="Initializes the storage system and autodetects the best&#xA;storage provider we can provide on this platform" ilk="function" name="initialize" signature="initialize()" />
            <scope doc="Registers the existence of a new storage provider; used by&#xA;subclasses to inform the manager of their existence." ilk="function" name="register" signature="register(name, instance)">
              <variable citdl="String" ilk="argument" name="name" />
              <variable citdl="Object" ilk="argument" name="instance" />
            </scope>
            <scope doc="Instructs the storageManager to use the given storage class&#xA;for all storage requests." ilk="function" name="setProvider" signature="setProvider(storageClass)">
              <variable ilk="argument" name="storageClass" />
            </scope>
            <scope attributes="__ctor__" doc="Autodetects the best possible persistent storage provider&#xA;available on this platform." ilk="function" name="autodetect" signature="autodetect()">
              <variable name="initialized" />
              <variable name="available" />
              <variable name="currentProvider" />
            </scope>
            <scope doc="Returns whether any storage options are available." ilk="function" name="isAvailable" signature="isAvailable()" />
            <scope doc="Returns whether the storage system is initialized and ready&#xA;to be used." ilk="function" name="isInitialized" signature="isInitialized()" />
            <scope doc="Determines if this platform supports the given storage&#xA;provider." ilk="function" name="supportsProvider" signature="supportsProvider(storageClass)">
              <variable citdl="String" ilk="argument" name="storageClass" />
            </scope>
            <scope ilk="function" name="getProvider" signature="getProvider()" />
            <scope doc="The storage provider should call this method when it is&#xA;loaded and ready to be used." ilk="function" name="loaded" signature="loaded()" />
          </variable>
        </variable>
        <variable citdl="Object" name="undo">
          <scope ilk="class" name="Manager">
            <scope attributes="__ctor__" ilk="function" name="Manager" signature="Manager(parent)">
              <variable ilk="argument" name="parent" />
              <variable name="_parent" />
            </scope>
          </scope>
          <scope ilk="class" name="browser" />
        </variable>
        <variable citdl="Object" name="namespaces">
          <scope ilk="class" name="dojo" />
        </variable>
        <scope ilk="function" name="addDojoNamespaceMapping" signature="addDojoNamespaceMapping(shortName, fullName)">
          <variable ilk="argument" name="shortName" />
          <variable ilk="argument" name="fullName" />
        </scope>
        <variable citdl="Object" name="data">
          <scope classrefs="dojo.data.Item" ilk="class" name="Attribute">
            <scope attributes="__ctor__" doc="An Attribute object represents something like a column in a&#xA;relational database." ilk="function" name="Attribute" signature="Attribute(dataProvider, attributeId)">
              <variable citdl="dojo.data.provider.base" ilk="argument" name="dataProvider" />
              <variable citdl="String" ilk="argument" name="attributeId" />
              <variable name="_attributeId" />
            </scope>
            <scope ilk="function" name="toString" returns="String" signature="toString()" />
            <scope doc="Returns the string token that uniquely identifies this&#xA;attribute within the context of a data provider. For a data&#xA;provider that accesses relational databases, typical&#xA;attributeIds might be tokens like &quot;name&quot;, &quot;age&quot;, &quot;ssn&quot;, or&#xA;&quot;dept_key&quot;." ilk="function" name="getAttributeId" returns="String" signature="getAttributeId()" />
            <scope doc="Returns the data type of the values of this attribute." ilk="function" name="getType" returns="dojo.data.type or null" signature="getType()" />
            <scope doc="Sets the data type for this attribute." ilk="function" name="setType" signature="setType(type)">
              <variable citdl="dojo.data.type or null" ilk="argument" name="type" />
            </scope>
          </scope>
          <scope classrefs="dojo.data.Observable" ilk="class" name="Item">
            <scope attributes="__ctor__" doc="An Item has attributes and attribute values, sort of like a&#xA;record in a database, or a &apos;struct&apos; in C. Instances of the&#xA;Item class know how to store and retrieve their attribute&#xA;values." ilk="function" name="Item" signature="Item(dataProvider)">
              <variable citdl="dojo.data.provider.base" ilk="argument" name="dataProvider" />
              <variable name="_dataProvider" />
              <variable name="_dictionaryOfAttributeValues" />
            </scope>
            <scope doc="Compares this Item to another Item, and returns 0, 1, or -1." ilk="function" name="compare" signature="compare(itemOne, itemTwo, otherItem)">
              <variable citdl="dojo.data.item" ilk="argument" name="itemOne" />
              <variable citdl="dojo.data.item" ilk="argument" name="itemTwo" />
              <variable citdl="dojo.data.item" ilk="argument" name="otherItem" />
            </scope>
            <scope ilk="function" name="toString" returns="String" signature="toString()" />
            <scope doc="Returns true if this Item is equal to the otherItem, or&#xA;false otherwise." ilk="function" name="isEqual" returns="Boolean" signature="isEqual(otherItem)">
              <variable citdl="dojo.data.item" ilk="argument" name="otherItem" />
            </scope>
            <scope ilk="function" name="getName" signature="getName()" />
            <scope doc="Returns a single literal value, like &quot;foo&quot; or 33." ilk="function" name="get" signature="get(attributeId)">
              <variable ilk="argument" name="attributeId" />
            </scope>
            <scope doc="Returns a single instance of dojo.data.Value." ilk="function" name="getValue" signature="getValue(attributeId)">
              <variable ilk="argument" name="attributeId" />
            </scope>
            <scope doc="Returns an array of dojo.data.Value objects." ilk="function" name="getValues" signature="getValues(attributeId)">
              <variable ilk="argument" name="attributeId" />
            </scope>
            <scope doc="Used for loading an attribute value into an item when the&#xA;item is first being loaded into memory from some data store&#xA;(such as a file)." ilk="function" name="load" signature="load(attributeId, value)">
              <variable ilk="argument" name="attributeId" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="Used for setting an attribute value as a result of a user&#xA;action." ilk="function" name="set" signature="set(attributeId, value)">
              <variable ilk="argument" name="attributeId" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" name="setValue" signature="setValue(attributeId, value)">
              <variable ilk="argument" name="attributeId" />
              <variable citdl="dojo.data.value" ilk="argument" name="value" />
            </scope>
            <scope doc="Used for adding an attribute value as a result of a user&#xA;action." ilk="function" name="addValue" signature="addValue(attributeId, value)">
              <variable ilk="argument" name="attributeId" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope doc="Used for setting an array of attribute values as a result of&#xA;a user action." ilk="function" name="setValues" signature="setValues(attributeId, arrayOfValues)">
              <variable ilk="argument" name="attributeId" />
              <variable citdl="Array" ilk="argument" name="arrayOfValues" />
            </scope>
            <scope doc="Returns an array containing all of the attributes for which&#xA;this item has attribute values." ilk="function" name="getAttributes" returns="Array" signature="getAttributes()" />
            <scope doc="Returns true if the given attribute of the item has been&#xA;assigned any value." ilk="function" name="hasAttribute" returns="Boolean" signature="hasAttribute(attributeId)">
              <variable ilk="argument" name="attributeId" />
            </scope>
            <scope doc="Returns true if the given attribute of the item has been&#xA;assigned the given value." ilk="function" name="hasAttributeValue" returns="Boolean" signature="hasAttributeValue(attributeId, value)">
              <variable ilk="argument" name="attributeId" />
              <variable ilk="argument" name="value" />
            </scope>
          </scope>
          <scope classrefs="dojo.data.Item" ilk="class" name="Kind">
            <scope attributes="__ctor__" doc="A Kind represents a kind of item. In the dojo data model the&#xA;item Snoopy might belong to the &apos;kind&apos; Dog, where in a Java&#xA;program the object Snoopy would belong to the &apos;class&apos; Dog,&#xA;and in MySQL the record for Snoopy would be in the table&#xA;Dog." ilk="function" name="Kind" signature="Kind(dataProvider)">
              <variable citdl="dojo.data.provider.base" ilk="argument" name="dataProvider" />
            </scope>
          </scope>
          <scope ilk="class" name="Observable">
            <scope attributes="__ctor__" ilk="function" name="Observable" signature="Observable()">
              <variable name="_arrayOfObservers" />
            </scope>
            <scope doc="Registers an object as an observer of this item, so that the&#xA;object will be notified when the item changes." ilk="function" name="addObserver" signature="addObserver(observer)">
              <variable citdl="Object" ilk="argument" name="observer" />
            </scope>
            <scope doc="Removes the observer registration for a previously&#xA;registered object." ilk="function" name="removeObserver" signature="removeObserver(observer)">
              <variable citdl="Object" ilk="argument" name="observer" />
            </scope>
            <scope doc="Returns an array with all the observers of this item." ilk="function" name="getObservers" signature="getObservers()" />
          </scope>
          <scope classrefs="dojo.data.Observable" ilk="class" name="ResultSet">
            <scope attributes="__ctor__" doc="A ResultSet holds a collection of Items. A data provider&#xA;returns a ResultSet in reponse to a query." ilk="function" name="ResultSet" signature="ResultSet(dataProvider, arrayOfItems)">
              <variable citdl="dojo.data.provider.base" ilk="argument" name="dataProvider" />
              <variable citdl="Array" ilk="argument" name="arrayOfItems" />
              <variable name="_dataProvider" />
              <variable name="_arrayOfItems" />
            </scope>
            <scope ilk="function" name="toString" returns="String" signature="toString()" />
            <scope ilk="function" name="toArray" returns="Array" signature="toArray()" />
            <scope ilk="function" name="getIterator" signature="getIterator()" />
            <scope ilk="function" name="getLength" returns="Number" signature="getLength()" />
            <scope ilk="function" name="getItemAt" signature="getItemAt(index)">
              <variable citdl="Number" ilk="argument" name="index" />
            </scope>
            <scope ilk="function" name="indexOf" returns="Number" signature="indexOf(item)">
              <variable citdl="dojo.data.item" ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="contains" returns="Boolean" signature="contains(item)">
              <variable citdl="dojo.data.item" ilk="argument" name="item" />
            </scope>
            <scope ilk="function" name="getDataProvider" returns="dojo.data.provider.base" signature="getDataProvider()" />
          </scope>
          <scope ilk="class" name="SimpleStore">
            <scope attributes="__ctor__" doc="Data Store with accessor methods." ilk="function" name="SimpleStore" signature="SimpleStore([jsonArray])">
              <variable citdl="Array" ilk="argument" name="jsonArray" />
              <variable name="keyField" />
              <variable name="get" />
              <variable name="getByKey" />
              <variable name="getByIndex" />
              <variable name="getData" />
              <variable name="getDataByKey" />
              <variable name="getDataByIndex" />
              <variable name="update" />
              <variable name="forEach" />
              <variable name="forEachData" />
              <variable name="setData" />
              <variable name="clearData" />
              <variable name="addData" />
              <variable name="addDataRange" />
              <variable name="removeData" />
              <variable name="removeDataByKey" />
              <variable name="removeDataByIndex" />
            </scope>
            <scope doc="Get the internal data array, should not be used." ilk="function" name="get" returns="Array" signature="get()" />
            <scope doc="Find the internal data object by key." ilk="function" name="getByKey" signature="getByKey(key)">
              <variable citdl="String" ilk="argument" name="key" />
            </scope>
            <scope doc="Get the internal data object by index." ilk="function" name="getByIndex" returns="Object" signature="getByIndex(idx)">
              <variable citdl="Number" ilk="argument" name="idx" />
            </scope>
            <scope doc="Get an array of source objects." ilk="function" name="getData" returns="Array" signature="getData()" />
            <scope doc="Get the source object by key." ilk="function" name="getDataByKey" signature="getDataByKey(key)">
              <variable citdl="String" ilk="argument" name="key" />
            </scope>
            <scope doc="Get the source object at index idx." ilk="function" name="getDataByIndex" returns="Object" signature="getDataByIndex(idx)">
              <variable citdl="Number" ilk="argument" name="idx" />
            </scope>
            <scope ilk="function" name="update" signature="update(obj, fieldPath, val)">
              <variable citdl="Object" ilk="argument" name="obj" />
              <variable citdl="String" ilk="argument" name="fieldPath" />
              <variable citdl="Object" ilk="argument" name="val" />
            </scope>
            <scope doc="Functional iteration directly on the internal data array." ilk="function" name="forEach" signature="forEach(fn)">
              <variable citdl="Function" ilk="argument" name="fn" />
            </scope>
            <scope doc="Functional iteration on source objects in internal data&#xA;array." ilk="function" name="forEachData" signature="forEachData(fn)">
              <variable citdl="Function" ilk="argument" name="fn" />
            </scope>
            <scope doc="Set up the internal data." ilk="function" name="setData" signature="setData(arr)">
              <variable citdl="Array" ilk="argument" name="arr" />
            </scope>
            <scope doc="Clears the internal data array." ilk="function" name="clearData" signature="clearData()" />
            <scope doc="Add an object with optional key to the internal data array." ilk="function" name="addData" signature="addData(obj, *string?*/key)">
              <variable citdl="Object" ilk="argument" name="obj" />
              <variable ilk="argument" name="*string?*/key" />
            </scope>
            <scope doc="Add a range of objects to the internal data array." ilk="function" name="addDataRange" signature="addDataRange(arr)">
              <variable citdl="Array" ilk="argument" name="arr" />
            </scope>
            <scope doc="remove the passed object from the internal data array." ilk="function" name="removeData" signature="removeData(obj)">
              <variable citdl="Object" ilk="argument" name="obj" />
            </scope>
            <scope doc="remove the object at key from the internal data array." ilk="function" name="removeDataByKey" signature="removeDataByKey(key)">
              <variable citdl="String" ilk="argument" name="key" />
            </scope>
            <scope doc="remove the object at idx from the internal data array." ilk="function" name="removeDataByIndex" signature="removeDataByIndex(idx)">
              <variable citdl="Number" ilk="argument" name="idx" />
            </scope>
          </scope>
          <scope classrefs="dojo.data.Item" ilk="class" name="Type">
            <scope attributes="__ctor__" doc="A Type represents a type of value, like Text, Number,&#xA;Picture, or Varchar." ilk="function" name="Type" signature="Type(dataProvider)">
              <variable citdl="dojo.data.provider.base" ilk="argument" name="dataProvider" />
            </scope>
          </scope>
          <scope ilk="class" name="Value">
            <scope attributes="__ctor__" doc="A Value represents a simple literal value (like &quot;foo&quot; or&#xA;334), or a reference value (a pointer to an Item)." ilk="function" name="Value" signature="Value(value)">
              <variable ilk="argument" name="value" />
              <variable name="_value" />
              <variable name="_type" />
            </scope>
            <scope ilk="function" name="toString" returns="String" signature="toString()" />
            <scope doc="Returns the value itself." ilk="function" name="getValue" signature="getValue()" />
            <scope doc="Returns the data type of the value." ilk="function" name="getType" returns="dojo.data.type" signature="getType()" />
            <scope ilk="function" name="compare" signature="compare()" />
            <scope ilk="function" name="isEqual" signature="isEqual()" />
          </scope>
          <variable citdl="Object" name="format">
            <scope ilk="class" name="Csv">
              <scope ilk="function" name="getArrayStructureFromCsvFileContents" returns="Array" signature="getArrayStructureFromCsvFileContents(csvFileContents)">
                <variable citdl="String" ilk="argument" name="csvFileContents" />
              </scope>
              <scope ilk="function" name="loadDataProviderFromFileContents" signature="loadDataProviderFromFileContents(dataProvider, csvFileContents)">
                <variable citdl="dojo.data.provider.base" ilk="argument" name="dataProvider" />
                <variable citdl="String" ilk="argument" name="csvFileContents" />
              </scope>
              <scope ilk="function" name="getCsvStringFromResultSet" returns="String" signature="getCsvStringFromResultSet(resultSet)">
                <variable citdl="dojo.data.resultset" ilk="argument" name="resultSet" />
              </scope>
            </scope>
            <scope ilk="class" name="Json">
              <scope ilk="function" name="loadDataProviderFromFileContents" signature="loadDataProviderFromFileContents(dataProvider, jsonFileContents)">
                <variable citdl="dojo.data.provider.base" ilk="argument" name="dataProvider" />
                <variable citdl="String" ilk="argument" name="jsonFileContents" />
              </scope>
              <scope ilk="function" name="loadDataProviderFromArrayOfJsonData" signature="loadDataProviderFromArrayOfJsonData(dataProvider, arrayOfJsonData)">
                <variable citdl="dojo.data.provider.base" ilk="argument" name="dataProvider" />
                <variable citdl="Array" ilk="argument" name="arrayOfJsonData" />
              </scope>
              <scope ilk="function" name="getJsonStringFromResultSet" returns="String" signature="getJsonStringFromResultSet(resultSet)">
                <variable citdl="dojo.data.resultset" ilk="argument" name="resultSet" />
              </scope>
            </scope>
          </variable>
          <variable citdl="Object" name="provider">
            <scope ilk="class" name="Base">
              <scope attributes="__ctor__" doc="A Data Provider serves as a connection to some data source,&#xA;like a relational database. This data provider Base class&#xA;serves as an abstract superclass for other data provider&#xA;classes." ilk="function" name="Base" signature="Base()">
                <variable name="_countOfNestedTransactions" />
                <variable name="_changesInCurrentTransaction" />
                <variable name="_changesInCurrentTransaction" />
                <variable name="_changesInCurrentTransaction" />
                <variable name="_countOfNestedTransactions" />
              </scope>
              <scope ilk="function" name="beginTransaction" signature="beginTransaction()" />
              <scope ilk="function" name="endTransaction" signature="endTransaction()" />
              <scope ilk="function" name="getNewItemToLoad" returns="dojo.data.item" signature="getNewItemToLoad()" />
              <scope ilk="function" name="newItem" returns="dojo.data.item" signature="newItem(itemName)">
                <variable citdl="String" ilk="argument" name="itemName" />
              </scope>
              <scope ilk="function" name="newAttribute" returns="dojo.data.attribute" signature="newAttribute(attributeId)">
                <variable citdl="String" ilk="argument" name="attributeId" />
              </scope>
              <scope ilk="function" name="getAttribute" returns="dojo.data.attribute" signature="getAttribute(attributeId)">
                <variable citdl="String" ilk="argument" name="attributeId" />
              </scope>
              <scope ilk="function" name="getAttributes" returns="Array" signature="getAttributes()" />
              <scope ilk="function" name="fetchArray" returns="Array" signature="fetchArray()" />
              <scope ilk="function" name="fetchResultSet" returns="dojo.data.resultset" signature="fetchResultSet()" />
              <scope ilk="function" name="noteChange" signature="noteChange(item, attribute, value)">
                <variable citdl="dojo.data.item" ilk="argument" name="item" />
                <variable ilk="argument" name="attribute" />
                <variable ilk="argument" name="value" />
              </scope>
              <scope doc="Registers an object as an observer of an item, so that the&#xA;object will be notified when the item changes." ilk="function" name="addItemObserver" signature="addItemObserver(item, observer)">
                <variable citdl="dojo.data.item" ilk="argument" name="item" />
                <variable citdl="Object" ilk="argument" name="observer" />
              </scope>
              <scope doc="Removes the observer registration for a previously&#xA;registered object." ilk="function" name="removeItemObserver" signature="removeItemObserver(item, observer)">
                <variable citdl="dojo.data.item" ilk="argument" name="item" />
                <variable citdl="Object" ilk="argument" name="observer" />
              </scope>
              <scope ilk="function" name="_newItem" returns="dojo.data.item" signature="_newItem()" />
              <scope ilk="function" name="_newAttribute" returns="dojo.data.attribute" signature="_newAttribute(attributeId)">
                <variable citdl="String" ilk="argument" name="attributeId" />
              </scope>
              <scope ilk="function" name="_saveChanges" returns="Array" signature="_saveChanges()" />
              <scope ilk="function" name="_notifyObserversOfChanges" signature="_notifyObserversOfChanges(arrayOfChanges)">
                <variable citdl="Array" ilk="argument" name="arrayOfChanges" />
              </scope>
              <scope ilk="function" name="_getResultSets" returns="Array" signature="_getResultSets()">
                <scope attributes="__ctor__" ilk="function" name="_getResultSets" returns="Array" signature="_getResultSets()" />
              </scope>
            </scope>
            <scope classrefs="dojo.data.provider.FlatFile" ilk="class" name="Delicious">
              <scope attributes="__ctor__" doc="The Delicious Data Provider can be used to take data from&#xA;del.icio.us and make it available as dojo.data.Items In&#xA;order to use the Delicious Data Provider, you need to have&#xA;loaded a script tag that looks like this: &lt;script&#xA;type=&quot;text/javascript&quot; src=&quot;http://del.icio.us/feeds/json/gu&#xA;mption?count=8&quot;&gt;&lt;/script&gt;" ilk="function" name="Delicious" signature="Delicious()" />
            </scope>
            <scope classrefs="dojo.data.provider.Base" ilk="class" name="FlatFile">
              <scope attributes="__ctor__" doc="A Json Data Provider knows how to read in simple JSON data&#xA;tables and make their contents accessable as Items." ilk="function" name="FlatFile" signature="FlatFile(keywordParameters)">
                <variable ilk="argument" name="keywordParameters" />
                <variable name="_arrayOfItems" />
                <variable name="_resultSet" />
                <variable name="_dictionaryOfAttributes" />
                <variable name="_ourCapabilities" />
                <variable name="_resultSet" />
              </scope>
              <scope ilk="function" name="getProviderCapabilities" signature="getProviderCapabilities(keyword)">
                <variable citdl="String" ilk="argument" name="keyword" />
              </scope>
              <scope ilk="function" name="registerAttribute" returns="dojo.data.attribute" signature="registerAttribute(attributeId)">
                <variable ilk="argument" name="attributeId" />
              </scope>
              <scope ilk="function" name="getAttribute" returns="dojo.data.attribute or null" signature="getAttribute(attributeId)">
                <variable ilk="argument" name="attributeId" />
              </scope>
              <scope ilk="function" name="getAttributes" returns="Array" signature="getAttributes()" />
              <scope doc="Returns an Array containing all of the Items." ilk="function" name="fetchArray" returns="Array" signature="fetchArray(query)">
                <variable ilk="argument" name="query" />
              </scope>
              <scope doc="Returns a ResultSet containing all of the Items." ilk="function" name="fetchResultSet" returns="dojo.data.resultset" signature="fetchResultSet(query)">
                <variable ilk="argument" name="query" />
              </scope>
              <scope ilk="function" name="_newItem" returns="dojo.data.item" signature="_newItem()" />
              <scope ilk="function" name="_newAttribute" returns="dojo.data.attribute" signature="_newAttribute(attributeId)">
                <variable citdl="String" ilk="argument" name="attributeId" />
              </scope>
            </scope>
            <scope classrefs="dojo.data.provider.Base" ilk="class" name="JotSpot">
              <scope attributes="__ctor__" doc="A JotSpot Data Provider knows how to read data from a&#xA;JotSpot data store and make the contents accessable as&#xA;dojo.data.Items." ilk="function" name="JotSpot" signature="JotSpot()" />
            </scope>
            <scope classrefs="dojo.data.provider.Base" ilk="class" name="MySql">
              <scope attributes="__ctor__" doc="A MySql Data Provider knows how to connect to a MySQL&#xA;database on a server and and make the content records&#xA;available as dojo.data.Items." ilk="function" name="MySql" signature="MySql()" />
            </scope>
          </variable>
        </variable>
        <scope ilk="class" name="json" />
        <variable citdl="Object" name="date">
          <scope ilk="class" name="common" />
          <scope ilk="function" name="setDayOfYear" returns="Date" signature="setDayOfYear(dateObject, dayOfYear)">
            <variable citdl="Date" ilk="argument" name="dateObject" />
            <variable citdl="Number" ilk="argument" name="dayOfYear" />
          </scope>
          <scope ilk="function" name="getDayOfYear" signature="getDayOfYear(dateObject)">
            <variable citdl="Date" ilk="argument" name="dateObject" />
          </scope>
          <scope ilk="function" name="setWeekOfYear" signature="setWeekOfYear(dateObject, week, firstDay)">
            <variable ilk="argument" name="dateObject" />
            <variable ilk="argument" name="week" />
            <variable ilk="argument" name="firstDay" />
          </scope>
          <scope ilk="function" name="getWeekOfYear" signature="getWeekOfYear(dateObject, firstDay)">
            <variable ilk="argument" name="dateObject" />
            <variable ilk="argument" name="firstDay" />
          </scope>
          <scope ilk="function" name="setIsoWeekOfYear" signature="setIsoWeekOfYear(dateObject, week, firstDay)">
            <variable ilk="argument" name="dateObject" />
            <variable ilk="argument" name="week" />
            <variable ilk="argument" name="firstDay" />
          </scope>
          <scope ilk="function" name="getIsoWeekOfYear" signature="getIsoWeekOfYear(dateObject, firstDay)">
            <variable ilk="argument" name="dateObject" />
            <variable ilk="argument" name="firstDay" />
          </scope>
          <scope ilk="function" name="getDaysInMonth" signature="getDaysInMonth(dateObject)">
            <variable ilk="argument" name="dateObject" />
          </scope>
          <scope ilk="function" name="isLeapYear" signature="isLeapYear(dateObject)">
            <variable ilk="argument" name="dateObject" />
          </scope>
          <scope ilk="function" name="getTimezoneName" signature="getTimezoneName(dateObject)">
            <variable ilk="argument" name="dateObject" />
          </scope>
          <scope ilk="function" name="getOrdinal" signature="getOrdinal(dateObject)">
            <variable ilk="argument" name="dateObject" />
          </scope>
          <scope doc="Compare two date objects by date, time, or both." ilk="function" name="compare" returns="Number" signature="compare(dateA, dateB, options)">
            <variable citdl="Date" ilk="argument" name="dateA" />
            <variable citdl="Date" ilk="argument" name="dateB" />
            <variable citdl="Number" ilk="argument" name="options" />
          </scope>
          <scope doc="Add to a Date in intervals of different size, from&#xA;milliseconds to years" ilk="function" name="add" returns="Date" signature="add(dt, interv, incr)">
            <variable citdl="Date" ilk="argument" name="dt" />
            <variable citdl="dojo.date.dateparts" ilk="argument" name="interv" />
            <variable citdl="Number" ilk="argument" name="incr" />
          </scope>
          <scope doc="Get the difference in a specific unit of time (e.g., number&#xA;of months, weeks, days, etc.) between two dates." ilk="function" name="diff" signature="diff(dtA, dtB, interv)">
            <variable citdl="Date" ilk="argument" name="dtA" />
            <variable citdl="Date" ilk="argument" name="dtB" />
            <variable citdl="dojo.date.dateparts" ilk="argument" name="interv" />
          </scope>
          <scope ilk="class" name="format">
            <scope attributes="__ctor__" doc="Format a Date object as a String, using locale-specific&#xA;settings." ilk="function" name="format" returns="String" signature="format(dateObject, [options])">
              <variable citdl="Date" ilk="argument" name="dateObject" />
              <variable citdl="Object" ilk="argument" name="options" />
            </scope>
          </scope>
          <scope doc="Convert a properly formatted string to a primitive Date&#xA;object, using locale-specific settings." ilk="function" name="parse" signature="parse(value, [options])">
            <variable citdl="String" ilk="argument" name="value" />
            <variable citdl="Object" ilk="argument" name="options" />
          </scope>
          <scope doc="Formats the date object using the specifications of the&#xA;POSIX strftime function" ilk="function" name="strftime" signature="strftime(dateObject, format, [locale])">
            <variable citdl="Date" ilk="argument" name="dateObject" />
            <variable citdl="String" ilk="argument" name="format" />
            <variable citdl="String" ilk="argument" name="locale" />
          </scope>
          <scope doc="Add a reference to a bundle containing localized custom&#xA;formats to be used by date/time formatting and parsing&#xA;routines." ilk="function" name="addCustomFormats" signature="addCustomFormats(packageName, bundleName)">
            <variable ilk="argument" name="packageName" />
            <variable ilk="argument" name="bundleName" />
          </scope>
          <scope ilk="function" name="_getGregorianBundle" signature="_getGregorianBundle(locale)">
            <variable ilk="argument" name="locale" />
          </scope>
          <scope doc="Used to get localized strings for day or month names." ilk="function" name="getNames" returns="Array" signature="getNames(item, type, [use], [locale])">
            <variable citdl="String" ilk="argument" name="item" />
            <variable citdl="String" ilk="argument" name="type" />
            <variable citdl="String" ilk="argument" name="use" />
            <variable citdl="String" ilk="argument" name="locale" />
          </scope>
          <scope ilk="function" name="getDayName" returns="String" signature="getDayName(dateObject, [locale])">
            <variable citdl="Date" ilk="argument" name="dateObject" />
            <variable citdl="String" ilk="argument" name="locale" />
          </scope>
          <scope ilk="function" name="getDayShortName" returns="String" signature="getDayShortName(dateObject, [locale])">
            <variable citdl="Date" ilk="argument" name="dateObject" />
            <variable citdl="String" ilk="argument" name="locale" />
          </scope>
          <scope ilk="function" name="getMonthName" returns="String" signature="getMonthName(dateObject, [locale])">
            <variable citdl="Date" ilk="argument" name="dateObject" />
            <variable citdl="String" ilk="argument" name="locale" />
          </scope>
          <scope ilk="function" name="getMonthShortName" returns="String" signature="getMonthShortName(dateObject, [locale])">
            <variable citdl="Date" ilk="argument" name="dateObject" />
            <variable citdl="String" ilk="argument" name="locale" />
          </scope>
          <scope doc="Returns a zero-based index for first day of the week, as&#xA;used by the local (Gregorian) calendar. e.g." ilk="function" name="getFirstDayOfWeek" signature="getFirstDayOfWeek([locale])">
            <variable citdl="String" ilk="argument" name="locale" />
          </scope>
          <scope ilk="function" name="toRelativeString" signature="toRelativeString(date)">
            <variable ilk="argument" name="date" />
          </scope>
          <scope ilk="function" name="toSql" signature="toSql(date, noTime)">
            <variable ilk="argument" name="date" />
            <variable ilk="argument" name="noTime" />
          </scope>
          <scope ilk="function" name="fromSql" signature="fromSql(sqlDate)">
            <variable ilk="argument" name="sqlDate" />
          </scope>
          <scope ilk="class" name="serialize" />
          <scope ilk="function" name="setIso8601" signature="setIso8601(dateObject, formattedString)">
            <variable ilk="argument" name="dateObject" />
            <variable ilk="argument" name="formattedString" />
          </scope>
          <scope ilk="function" name="fromIso8601" signature="fromIso8601(formattedString)">
            <variable ilk="argument" name="formattedString" />
          </scope>
          <scope ilk="function" name="setIso8601Date" signature="setIso8601Date(dateObject, formattedString)">
            <variable ilk="argument" name="dateObject" />
            <variable ilk="argument" name="formattedString" />
          </scope>
          <scope ilk="function" name="fromIso8601Date" signature="fromIso8601Date(formattedString)">
            <variable ilk="argument" name="formattedString" />
          </scope>
          <scope ilk="function" name="setIso8601Time" signature="setIso8601Time(dateObject, formattedString)">
            <variable ilk="argument" name="dateObject" />
            <variable ilk="argument" name="formattedString" />
          </scope>
          <scope ilk="function" name="fromIso8601Time" signature="fromIso8601Time(formattedString)">
            <variable ilk="argument" name="formattedString" />
          </scope>
          <scope doc="Format a JavaScript Date object as a string according to RFC&#xA;3339" ilk="function" name="toRfc3339" returns="String" signature="toRfc3339([dateObject], [selector])">
            <variable citdl="Date" ilk="argument" name="dateObject" />
            <variable citdl="String" ilk="argument" name="selector" />
          </scope>
          <scope doc="Create a JavaScript Date object from a string formatted&#xA;according to RFC 3339" ilk="function" name="fromRfc3339" signature="fromRfc3339(rfcDate)">
            <variable citdl="String" ilk="argument" name="rfcDate" />
          </scope>
        </variable>
        <variable citdl="Object" name="i18n">
          <scope ilk="class" name="common" />
          <scope ilk="function" name="getLocalization" signature="getLocalization(modulename, bundlename, locale)">
            <variable ilk="argument" name="modulename" />
            <variable ilk="argument" name="bundlename" />
            <variable ilk="argument" name="locale" />
          </scope>
          <scope ilk="function" name="isLTR" signature="isLTR(locale)">
            <variable ilk="argument" name="locale" />
          </scope>
          <variable citdl="Object" name="currency">
            <scope ilk="class" name="common" />
            <scope ilk="function" name="format" signature="format(value, iso, flags, locale)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="iso" />
              <variable ilk="argument" name="flags" />
              <variable ilk="argument" name="locale" />
              <scope attributes="__ctor__" ilk="function" name="format" signature="format(value, iso, flags, locale)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="iso" />
                <variable ilk="argument" name="flags" />
                <variable ilk="argument" name="locale" />
              </scope>
            </scope>
            <scope ilk="function" name="parse" signature="parse(value, iso, locale)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="iso" />
              <variable ilk="argument" name="locale" />
              <scope attributes="__ctor__" ilk="function" name="parse" signature="parse(value, iso, locale)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="iso" />
                <variable ilk="argument" name="locale" />
              </scope>
            </scope>
            <scope ilk="function" name="isCurrency" signature="isCurrency(value, iso, locale, flags)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="iso" />
              <variable ilk="argument" name="locale" />
              <variable ilk="argument" name="flags" />
              <scope attributes="__ctor__" ilk="function" name="isCurrency" signature="isCurrency(value, iso, locale, flags)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="iso" />
                <variable ilk="argument" name="locale" />
                <variable ilk="argument" name="flags" />
              </scope>
            </scope>
            <scope ilk="function" name="_mapToLocalizedFormatData" signature="_mapToLocalizedFormatData(table, iso, locale)">
              <variable ilk="argument" name="table" />
              <variable ilk="argument" name="iso" />
              <variable ilk="argument" name="locale" />
              <scope attributes="__ctor__" ilk="function" name="_mapToLocalizedFormatData" signature="_mapToLocalizedFormatData(table, iso, locale)">
                <variable ilk="argument" name="table" />
                <variable ilk="argument" name="iso" />
                <variable ilk="argument" name="locale" />
              </scope>
            </scope>
          </variable>
          <scope ilk="class" name="number">
            <scope ilk="function" name="format" signature="format(value, flags, locale)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="flags" />
              <variable ilk="argument" name="locale" />
            </scope>
            <scope ilk="function" name="parse" signature="parse(value, locale, flags)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="locale" />
              <variable ilk="argument" name="flags" />
            </scope>
            <scope ilk="function" name="isInteger" signature="isInteger(value, locale, flags)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="locale" />
              <variable ilk="argument" name="flags" />
            </scope>
            <scope ilk="function" name="isReal" signature="isReal(value, locale, flags)">
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="locale" />
              <variable ilk="argument" name="flags" />
            </scope>
            <scope ilk="function" name="_mapToLocalizedFormatData" signature="_mapToLocalizedFormatData(table, locale)">
              <variable ilk="argument" name="table" />
              <variable ilk="argument" name="locale" />
            </scope>
          </scope>
        </variable>
        <scope ilk="class" name="dom">
          <scope ilk="function" name="isNode" signature="isNode(wh)">
            <variable ilk="argument" name="wh" />
          </scope>
          <scope ilk="function" name="getUniqueId" signature="getUniqueId()" />
          <scope ilk="function" name="getFirstChildElement" signature="getFirstChildElement(parentNode, tagName)">
            <variable ilk="argument" name="parentNode" />
            <variable ilk="argument" name="tagName" />
          </scope>
          <scope ilk="function" name="getLastChildElement" signature="getLastChildElement(parentNode, tagName)">
            <variable ilk="argument" name="parentNode" />
            <variable ilk="argument" name="tagName" />
          </scope>
          <scope ilk="function" name="getNextSiblingElement" signature="getNextSiblingElement(node, tagName)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="tagName" />
          </scope>
          <scope ilk="function" name="getPreviousSiblingElement" signature="getPreviousSiblingElement(node, tagName)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="tagName" />
          </scope>
          <scope ilk="function" name="moveChildren" signature="moveChildren(srcNode, destNode, trim)">
            <variable ilk="argument" name="srcNode" />
            <variable ilk="argument" name="destNode" />
            <variable ilk="argument" name="trim" />
          </scope>
          <scope ilk="function" name="copyChildren" signature="copyChildren(srcNode, destNode, trim)">
            <variable ilk="argument" name="srcNode" />
            <variable ilk="argument" name="destNode" />
            <variable ilk="argument" name="trim" />
          </scope>
          <scope ilk="function" name="removeChildren" signature="removeChildren(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="replaceChildren" signature="replaceChildren(node, newChild)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="newChild" />
          </scope>
          <scope ilk="function" name="removeNode" signature="removeNode(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="getAncestors" signature="getAncestors(node, filterFunction, returnFirstHit)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="filterFunction" />
            <variable ilk="argument" name="returnFirstHit" />
          </scope>
          <scope ilk="function" name="getAncestorsByTag" signature="getAncestorsByTag(node, tag, returnFirstHit)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="tag" />
            <variable ilk="argument" name="returnFirstHit" />
          </scope>
          <scope ilk="function" name="getFirstAncestorByTag" signature="getFirstAncestorByTag(node, tag)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="tag" />
          </scope>
          <scope ilk="function" name="isDescendantOf" signature="isDescendantOf(node, ancestor, guaranteeDescendant)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="ancestor" />
            <variable ilk="argument" name="guaranteeDescendant" />
          </scope>
          <scope ilk="function" name="innerXML" signature="innerXML(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="createDocument" signature="createDocument()" />
          <scope ilk="function" name="createDocumentFromText" signature="createDocumentFromText(str, mimetype)">
            <variable ilk="argument" name="str" />
            <variable ilk="argument" name="mimetype" />
          </scope>
          <scope ilk="function" name="prependChild" signature="prependChild(node, parent)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="parent" />
          </scope>
          <scope ilk="function" name="insertBefore" signature="insertBefore(node, ref, force)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="ref" />
            <variable ilk="argument" name="force" />
          </scope>
          <scope ilk="function" name="insertAfter" signature="insertAfter(node, ref, force)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="ref" />
            <variable ilk="argument" name="force" />
          </scope>
          <scope ilk="function" name="insertAtPosition" signature="insertAtPosition(node, ref, position)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="ref" />
            <variable ilk="argument" name="position" />
          </scope>
          <scope ilk="function" name="insertAtIndex" signature="insertAtIndex(node, containingNode, insertionIndex)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="containingNode" />
            <variable ilk="argument" name="insertionIndex" />
          </scope>
          <scope ilk="function" name="textContent" signature="textContent(node, text)">
            <variable ilk="argument" name="node" />
            <variable ilk="argument" name="text" />
          </scope>
          <scope ilk="function" name="hasParent" signature="hasParent(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="isTag" signature="isTag(node)">
            <variable ilk="argument" name="node" />
          </scope>
          <scope ilk="function" name="setAttributeNS" signature="setAttributeNS(elem, namespaceURI, attrName, attrValue)">
            <variable ilk="argument" name="elem" />
            <variable ilk="argument" name="namespaceURI" />
            <variable ilk="argument" name="attrName" />
            <variable ilk="argument" name="attrValue" />
          </scope>
        </scope>
        <scope ilk="class" name="hostenv_spidermonkey" />
        <variable citdl="Object" name="crypto">
          <scope ilk="class" name="Blowfish">
            <scope ilk="function" name="getIV" signature="getIV(outputType)">
              <variable ilk="argument" name="outputType" />
            </scope>
            <scope ilk="function" name="setIV" signature="setIV(data, inputType)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="inputType" />
            </scope>
            <scope ilk="function" name="encrypt" signature="encrypt(plaintext, key, ao)">
              <variable ilk="argument" name="plaintext" />
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="ao" />
            </scope>
            <scope ilk="function" name="decrypt" signature="decrypt(ciphertext, key, ao)">
              <variable ilk="argument" name="ciphertext" />
              <variable ilk="argument" name="key" />
              <variable ilk="argument" name="ao" />
            </scope>
          </scope>
          <scope ilk="class" name="MD5">
            <scope ilk="function" name="compute" signature="compute(data, utputType)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="utputType" />
            </scope>
            <scope ilk="function" name="getHMAC" signature="getHMAC(data, ey, utputType)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="ey" />
              <variable ilk="argument" name="utputType" />
            </scope>
          </scope>
          <scope ilk="class" name="Rijndael">
            <scope ilk="function" name="encrypt" signature="encrypt(plaintext, key)">
              <variable ilk="argument" name="plaintext" />
              <variable ilk="argument" name="key" />
            </scope>
            <scope ilk="function" name="decrypt" signature="decrypt(ciphertext, key)">
              <variable ilk="argument" name="ciphertext" />
              <variable ilk="argument" name="key" />
            </scope>
          </scope>
          <scope ilk="class" name="SHA1">
            <scope ilk="function" name="compute" signature="compute(data, utputType)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="utputType" />
            </scope>
            <scope ilk="function" name="getHMAC" signature="getHMAC(data, ey, utputType)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="ey" />
              <variable ilk="argument" name="utputType" />
            </scope>
          </scope>
          <scope ilk="class" name="SHA256">
            <scope ilk="function" name="compute" signature="compute(s)">
              <variable ilk="argument" name="s" />
            </scope>
          </scope>
        </variable>
        <variable citdl="Object" name="event">
          <scope ilk="class" name="browser">
            <scope ilk="function" name="clean" signature="clean(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="addClobberNode" signature="addClobberNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" name="addClobberNodeAttrs" signature="addClobberNodeAttrs(node, props)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="props" />
            </scope>
            <scope ilk="function" name="removeListener" signature="removeListener(node, evtName, fp, capture)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="evtName" />
              <variable ilk="argument" name="fp" />
              <variable ilk="argument" name="capture" />
            </scope>
            <scope ilk="function" name="addListener" signature="addListener(node, evtName, fp, capture, dontFix)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="evtName" />
              <variable ilk="argument" name="fp" />
              <variable ilk="argument" name="capture" />
              <variable ilk="argument" name="dontFix" />
            </scope>
            <scope ilk="function" name="isEvent" signature="isEvent(obj)">
              <variable ilk="argument" name="obj" />
            </scope>
            <scope ilk="function" name="callListener" signature="callListener(listener, curTarget)">
              <variable ilk="argument" name="listener" />
              <variable ilk="argument" name="curTarget" />
            </scope>
            <scope ilk="function" name="stopPropagation" signature="stopPropagation()" />
            <scope ilk="function" name="preventDefault" signature="preventDefault()" />
            <scope attributes="__ctor__" ilk="function" name="fixEvent" signature="fixEvent(evt, sender)">
              <variable ilk="argument" name="evt" />
              <variable ilk="argument" name="sender" />
              <variable name="currentEvent" />
            </scope>
            <scope ilk="function" name="stopEvent" signature="stopEvent(ev)">
              <variable ilk="argument" name="ev" />
            </scope>
          </scope>
          <scope ilk="class" name="common" />
          <scope doc="dojo.event.connect is the glue that holds most Dojo-based&#xA;applications together." ilk="function" name="connect" signature="connect()" />
          <scope ilk="function" name="log" signature="log(a1, a2)">
            <variable ilk="argument" name="a1" />
            <variable ilk="argument" name="a2" />
          </scope>
          <scope ilk="function" name="connectBefore" signature="connectBefore()" />
          <scope ilk="function" name="connectAround" signature="connectAround()" />
          <scope ilk="function" name="connectOnce" signature="connectOnce()" />
          <scope ilk="function" name="_kwConnectImpl" signature="_kwConnectImpl(kwArgs, disconnect)">
            <variable ilk="argument" name="kwArgs" />
            <variable ilk="argument" name="disconnect" />
          </scope>
          <scope ilk="function" name="kwConnect" signature="kwConnect(kwArgs)">
            <variable ilk="argument" name="kwArgs" />
          </scope>
          <scope ilk="function" name="disconnect" signature="disconnect()" />
          <scope ilk="function" name="kwDisconnect" signature="kwDisconnect(kwArgs)">
            <variable ilk="argument" name="kwArgs" />
          </scope>
          <variable citdl="Object" name="MethodJoinPoint">
            <scope ilk="function" name="unintercept" signature="unintercept()" />
            <scope attributes="__ctor__" ilk="function" name="MethodJoinPoint" signature="MethodJoinPoint()">
              <variable name="before" />
              <variable name="after" />
              <variable name="around" />
            </scope>
            <variable name="disconnect" />
            <scope ilk="function" name="run" signature="run()" />
            <scope ilk="function" name="args" signature="args()" />
            <scope ilk="function" name="jp_" signature="jp_()" />
            <scope ilk="function" name="object" signature="object()" />
            <scope ilk="function" name="proceed" signature="proceed()" />
            <scope ilk="function" name="getArr" signature="getArr(kind)">
              <variable ilk="argument" name="kind" />
            </scope>
            <scope ilk="function" name="kwAddAdvice" signature="kwAddAdvice(args)">
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="addAdvice" signature="addAdvice(thisAdviceObj, thisAdvice, thisAroundObj, thisAround, advice_kind, precedence, once, delay, rate, asMessage)">
              <variable ilk="argument" name="thisAdviceObj" />
              <variable ilk="argument" name="thisAdvice" />
              <variable ilk="argument" name="thisAroundObj" />
              <variable ilk="argument" name="thisAround" />
              <variable ilk="argument" name="advice_kind" />
              <variable ilk="argument" name="precedence" />
              <variable ilk="argument" name="once" />
              <variable ilk="argument" name="delay" />
              <variable ilk="argument" name="rate" />
              <variable ilk="argument" name="asMessage" />
            </scope>
            <scope ilk="function" name="hasAdvice" signature="hasAdvice(thisAdviceObj, thisAdvice, advice_kind, arr)">
              <variable ilk="argument" name="thisAdviceObj" />
              <variable ilk="argument" name="thisAdvice" />
              <variable ilk="argument" name="advice_kind" />
              <variable ilk="argument" name="arr" />
            </scope>
            <scope ilk="function" name="removeAdvice" signature="removeAdvice(thisAdviceObj, thisAdvice, advice_kind, once)">
              <variable ilk="argument" name="thisAdviceObj" />
              <variable ilk="argument" name="thisAdvice" />
              <variable ilk="argument" name="advice_kind" />
              <variable ilk="argument" name="once" />
            </scope>
          </variable>
          <scope ilk="class" name="topic">
            <scope ilk="function" name="getTopic" signature="getTopic(topicName)">
              <variable ilk="argument" name="topicName" />
            </scope>
            <scope ilk="function" name="registerPublisher" signature="registerPublisher(topic, obj, funcName)">
              <variable ilk="argument" name="topic" />
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="funcName" />
            </scope>
            <scope ilk="function" name="subscribe" signature="subscribe(topic, obj, funcName)">
              <variable ilk="argument" name="topic" />
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="funcName" />
            </scope>
            <scope ilk="function" name="unsubscribe" signature="unsubscribe(topic, obj, funcName)">
              <variable ilk="argument" name="topic" />
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="funcName" />
            </scope>
            <scope ilk="function" name="destroy" signature="destroy(topic)">
              <variable ilk="argument" name="topic" />
            </scope>
            <scope ilk="function" name="publishApply" signature="publishApply(topic, args)">
              <variable ilk="argument" name="topic" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" name="publish" signature="publish(topic, message)">
              <variable ilk="argument" name="topic" />
              <variable ilk="argument" name="message" />
            </scope>
            <variable citdl="Object" name="TopicImpl">
              <scope ilk="function" name="subscribe" signature="subscribe(listenerObject, listenerMethod)">
                <variable ilk="argument" name="listenerObject" />
                <variable ilk="argument" name="listenerMethod" />
              </scope>
              <scope ilk="function" name="unsubscribe" signature="unsubscribe(listenerObject, listenerMethod)">
                <variable ilk="argument" name="listenerObject" />
                <variable ilk="argument" name="listenerMethod" />
              </scope>
              <scope ilk="function" name="destroy" signature="destroy()" />
              <scope ilk="function" name="registerPublisher" signature="registerPublisher(publisherObject, publisherMethod)">
                <variable ilk="argument" name="publisherObject" />
                <variable ilk="argument" name="publisherMethod" />
              </scope>
              <scope ilk="function" name="sendMessage" signature="sendMessage(message)">
                <variable ilk="argument" name="message" />
              </scope>
            </variable>
          </scope>
        </variable>
        <variable citdl="Object" name="_ie_clobber">
          <scope ilk="function" name="clobber" signature="clobber(nodeRef)">
            <variable ilk="argument" name="nodeRef" />
          </scope>
        </variable>
        <variable citdl="Object" name="lang">
          <scope ilk="class" name="array" />
          <scope ilk="function" name="has" signature="has(obj, name)">
            <variable ilk="argument" name="obj" />
            <variable ilk="argument" name="name" />
          </scope>
          <scope ilk="function" name="isEmpty" signature="isEmpty(obj)">
            <variable ilk="argument" name="obj" />
          </scope>
          <scope ilk="function" name="map" signature="map(arr, obj, unary_func)">
            <variable ilk="argument" name="arr" />
            <variable ilk="argument" name="obj" />
            <variable ilk="argument" name="unary_func" />
          </scope>
          <scope ilk="function" name="reduce" signature="reduce(arr, initialValue, obj, binary_func)">
            <variable ilk="argument" name="arr" />
            <variable ilk="argument" name="initialValue" />
            <variable ilk="argument" name="obj" />
            <variable ilk="argument" name="binary_func" />
          </scope>
          <scope ilk="function" name="forEach" signature="forEach(anArray, callback, thisObject)">
            <variable citdl="Array" ilk="argument" name="anArray" />
            <variable citdl="Function" ilk="argument" name="callback" />
            <variable citdl="Object" ilk="argument" name="thisObject" />
          </scope>
          <scope ilk="function" name="_everyOrSome" signature="_everyOrSome(every, arr, callback, thisObject)">
            <variable ilk="argument" name="every" />
            <variable ilk="argument" name="arr" />
            <variable ilk="argument" name="callback" />
            <variable ilk="argument" name="thisObject" />
          </scope>
          <scope ilk="function" name="every" signature="every(arr, callback, thisObject)">
            <variable ilk="argument" name="arr" />
            <variable ilk="argument" name="callback" />
            <variable ilk="argument" name="thisObject" />
          </scope>
          <scope ilk="function" name="some" signature="some(arr, callback, thisObject)">
            <variable ilk="argument" name="arr" />
            <variable ilk="argument" name="callback" />
            <variable ilk="argument" name="thisObject" />
          </scope>
          <scope ilk="function" name="filter" signature="filter(arr, callback, thisObject)">
            <variable ilk="argument" name="arr" />
            <variable ilk="argument" name="callback" />
            <variable ilk="argument" name="thisObject" />
          </scope>
          <scope ilk="function" name="unnest" signature="unnest()" />
          <scope ilk="function" name="toArray" signature="toArray(arrayLike, startOffset)">
            <variable ilk="argument" name="arrayLike" />
            <variable ilk="argument" name="startOffset" />
          </scope>
          <scope ilk="class" name="assert">
            <scope attributes="__ctor__" ilk="function" name="assert" signature="assert(booleanValue, message)">
              <variable ilk="argument" name="booleanValue" />
              <variable ilk="argument" name="message" />
            </scope>
          </scope>
          <scope ilk="function" name="assertType" signature="assertType(value, type, keywordParameters)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="keywordParameters" />
          </scope>
          <scope ilk="function" name="assertValidKeywords" signature="assertValidKeywords(object, expectedProperties, message)">
            <variable ilk="argument" name="object" />
            <variable ilk="argument" name="expectedProperties" />
            <variable ilk="argument" name="message" />
          </scope>
          <scope ilk="class" name="common" />
          <scope doc="Set up inheritance between two classes." ilk="function" name="inherits" signature="inherits(subclass, superclass)">
            <variable citdl="Function" ilk="argument" name="subclass" />
            <variable citdl="Function" ilk="argument" name="superclass" />
          </scope>
          <scope doc="Adds all properties and methods of props to obj." ilk="function" name="_mixin" signature="_mixin(obj, props)">
            <variable citdl="Object" ilk="argument" name="obj" />
            <variable citdl="Object" ilk="argument" name="props" />
          </scope>
          <scope doc="Adds all properties and methods of props to obj." ilk="function" name="mixin" returns="Object" signature="mixin(obj, props)">
            <variable citdl="Object" ilk="argument" name="obj" />
            <variable ilk="argument" name="props" />
          </scope>
          <scope doc="Adds all properties and methods of props to constructor&apos;s&#xA;prototype, making them available to all instances created&#xA;with constructor." ilk="function" name="extend" signature="extend(constructor, props)">
            <variable citdl="Object" ilk="argument" name="constructor" />
            <variable ilk="argument" name="props" />
          </scope>
          <scope doc="Return the index of value in array, returning -1 if not&#xA;found. param: identity:  If true, matches with identity&#xA;comparison (===)." ilk="function" name="find" returns="Number" signature="find(array, value, [identity], [findLast])">
            <variable citdl="Array" ilk="argument" name="array" />
            <variable citdl="Object" ilk="argument" name="value" />
            <variable citdl="Boolean" ilk="argument" name="identity" />
            <variable citdl="Boolean" ilk="argument" name="findLast" />
          </scope>
          <scope doc="Return index of last occurance of value in array, returning&#xA;-1 if not found. param: identity:  If true, matches with&#xA;identity comparison (===)." ilk="function" name="findLast" signature="findLast(array, value, [identity])">
            <variable citdl="Array" ilk="argument" name="array" />
            <variable citdl="Object" ilk="argument" name="value" />
            <variable citdl="Boolean" ilk="argument" name="identity" />
          </scope>
          <scope doc="Return true if value is present in array." ilk="function" name="inArray" signature="inArray(array, value)">
            <variable citdl="Array" ilk="argument" name="array" />
            <variable citdl="Object" ilk="argument" name="value" />
          </scope>
          <scope doc="Return true if it is an Object, Array or Function." ilk="function" name="isObject" signature="isObject(it)">
            <variable ilk="argument" name="it" />
          </scope>
          <scope doc="Return true if it is an Array." ilk="function" name="isArray" signature="isArray(it)">
            <variable ilk="argument" name="it" />
          </scope>
          <scope doc="Return true if it can be used as an array (i.e. is an object&#xA;with an integer length property)." ilk="function" name="isArrayLike" signature="isArrayLike(it)">
            <variable ilk="argument" name="it" />
          </scope>
          <scope doc="Return true if it is a Function." ilk="function" name="isFunction" signature="isFunction(it)">
            <variable ilk="argument" name="it" />
          </scope>
          <scope doc="Return true if it is a String." ilk="function" name="isString" signature="isString(it)">
            <variable ilk="argument" name="it" />
          </scope>
          <scope doc="Return true if it is not a built-in function." ilk="function" name="isAlien" signature="isAlien(it)">
            <variable ilk="argument" name="it" />
          </scope>
          <scope doc="Return true if it is a Boolean." ilk="function" name="isBoolean" signature="isBoolean(it)">
            <variable ilk="argument" name="it" />
          </scope>
          <scope doc="Return true if it is a number. warning: In most cases,&#xA;isNaN(it) is sufficient to determine whether or not&#xA;something is a number or can be used as such." ilk="function" name="isNumber" signature="isNumber(it)">
            <variable ilk="argument" name="it" />
          </scope>
          <scope doc="Return true if it is not defined. warning: In some cases,&#xA;isUndefined will not behave as you might expect." ilk="function" name="isUndefined" signature="isUndefined(it)">
            <variable ilk="argument" name="it" />
          </scope>
          <scope ilk="class" name="declare">
            <scope attributes="__ctor__" ilk="function" name="declare" signature="declare(className, superclass, init, props)">
              <variable citdl="String" ilk="argument" name="className" />
              <variable citdl="Function" ilk="argument" name="superclass" />
              <variable citdl="Function" ilk="argument" name="init" />
              <variable citdl="Object" ilk="argument" name="props" />
            </scope>
            <scope ilk="function" name="_makeConstructor" signature="_makeConstructor()" />
          </scope>
          <scope ilk="class" name="extras" />
          <scope ilk="function" name="setTimeout" signature="setTimeout(func, delay)">
            <variable ilk="argument" name="func" />
            <variable ilk="argument" name="delay" />
          </scope>
          <scope ilk="function" name="clearTimeout" signature="clearTimeout(timer)">
            <variable ilk="argument" name="timer" />
          </scope>
          <scope ilk="function" name="getNameInObj" signature="getNameInObj(ns, item)">
            <variable ilk="argument" name="ns" />
            <variable ilk="argument" name="item" />
          </scope>
          <scope ilk="function" name="shallowCopy" signature="shallowCopy(obj, deep)">
            <variable ilk="argument" name="obj" />
            <variable ilk="argument" name="deep" />
          </scope>
          <scope ilk="function" name="firstValued" signature="firstValued()" />
          <scope ilk="function" name="getObjPathValue" signature="getObjPathValue(objpath, context, create)">
            <variable ilk="argument" name="objpath" />
            <variable ilk="argument" name="context" />
            <variable ilk="argument" name="create" />
          </scope>
          <scope ilk="function" name="setObjPathValue" signature="setObjPathValue(objpath, value, context, create)">
            <variable ilk="argument" name="objpath" />
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="context" />
            <variable ilk="argument" name="create" />
          </scope>
          <scope ilk="class" name="func" />
          <scope ilk="function" name="hitch" signature="hitch(thisObject, method)">
            <variable ilk="argument" name="thisObject" />
            <variable ilk="argument" name="method" />
          </scope>
          <scope ilk="function" name="nameAnonFunc" signature="nameAnonFunc(anonFuncPtr, namespaceObj, searchForNames)">
            <variable ilk="argument" name="anonFuncPtr" />
            <variable ilk="argument" name="namespaceObj" />
            <variable ilk="argument" name="searchForNames" />
          </scope>
          <scope ilk="function" name="forward" signature="forward(funcName)">
            <variable ilk="argument" name="funcName" />
          </scope>
          <scope ilk="function" name="curry" signature="curry(ns, func)">
            <variable ilk="argument" name="ns" />
            <variable ilk="argument" name="func" />
          </scope>
          <scope ilk="function" name="curryArguments" signature="curryArguments(ns, func, args, offset)">
            <variable ilk="argument" name="ns" />
            <variable ilk="argument" name="func" />
            <variable ilk="argument" name="args" />
            <variable ilk="argument" name="offset" />
          </scope>
          <scope ilk="function" name="tryThese" signature="tryThese()" />
          <scope ilk="function" name="delayThese" signature="delayThese(farr, cb, delay, onend)">
            <variable ilk="argument" name="farr" />
            <variable ilk="argument" name="cb" />
            <variable ilk="argument" name="delay" />
            <variable ilk="argument" name="onend" />
          </scope>
          <scope ilk="class" name="repr">
            <scope attributes="__ctor__" ilk="function" name="repr" signature="repr(obj)">
              <variable ilk="argument" name="obj" />
            </scope>
          </scope>
          <scope ilk="function" name="registerRepr" signature="registerRepr(name, check, wrap, override)">
            <variable ilk="argument" name="name" />
            <variable ilk="argument" name="check" />
            <variable ilk="argument" name="wrap" />
            <variable ilk="argument" name="override" />
          </scope>
          <scope ilk="function" name="reprArrayLike" signature="reprArrayLike(arr)">
            <variable ilk="argument" name="arr" />
          </scope>
          <variable citdl="Object" name="timing">
            <scope ilk="class" name="Streamer">
              <scope attributes="__ctor__" doc="Streamer will take an input function that pushes N&#xA;datapoints into a queue, and will pass the next point in&#xA;that queue out to an" ilk="function" name="Streamer" signature="Streamer(input, output, interval, minimum, initialData)">
                <variable citdl="Function" ilk="argument" name="input" />
                <variable citdl="Function" ilk="argument" name="output" />
                <variable citdl="Number" ilk="argument" name="interval" />
                <variable citdl="Number" ilk="argument" name="minimum" />
                <variable citdl="Array" ilk="argument" name="initialData" />
                <variable name="interval" />
                <variable name="minimumSize" />
                <variable name="inputFunction" />
                <variable name="outputFunction" />
                <variable name="setInterval" />
                <variable name="onTick" />
                <variable name="start" />
                <variable name="onStart" />
                <variable name="stop" />
                <variable name="onStop" />
              </scope>
              <scope attributes="__ctor__" doc="sets the interval in milliseconds of the internal timer" ilk="function" name="setInterval" signature="setInterval(ms)">
                <variable citdl="Number" ilk="argument" name="ms" />
                <variable name="interval" />
              </scope>
              <scope ilk="function" name="onTick" signature="onTick(obj)">
                <variable citdl="dojo.lang.timing.streamer" ilk="argument" name="obj" />
              </scope>
              <scope doc="starts the Streamer" ilk="function" name="start" signature="start()" />
              <scope ilk="function" name="onStart" signature="onStart()" />
              <scope doc="stops the Streamer" ilk="function" name="stop" signature="stop()" />
              <scope ilk="function" name="onStop" signature="onStop()" />
            </scope>
            <scope ilk="class" name="Timer">
              <scope attributes="__ctor__" doc="Timer object executes an &quot;onTick()&quot; method repeatedly at a&#xA;specified interval. repeatedly at a given interval." ilk="function" name="Timer" signature="Timer(interval)">
                <variable citdl="Number" ilk="argument" name="interval" />
                <variable name="timer" />
                <variable name="isRunning" />
                <variable name="interval" />
                <variable name="onStart" />
                <variable name="onStop" />
              </scope>
            </scope>
          </variable>
          <scope ilk="class" name="type" />
          <scope ilk="function" name="whatAmI" signature="whatAmI(value)">
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="function" name="getType" signature="getType(value)">
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="function" name="isNumeric" signature="isNumeric(value)">
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="function" name="isBuiltIn" signature="isBuiltIn(value)">
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="function" name="isPureObject" signature="isPureObject(value)">
            <variable ilk="argument" name="value" />
          </scope>
          <scope ilk="function" name="isOfType" signature="isOfType(value, type, keywordParameters)">
            <variable ilk="argument" name="value" />
            <variable ilk="argument" name="type" />
            <variable ilk="argument" name="keywordParameters" />
          </scope>
          <scope doc="Will return an object, if it exists, based on the name in&#xA;the passed string." ilk="function" name="getObject" returns="Object" signature="getObject(str)">
            <variable citdl="String" ilk="argument" name="str" />
          </scope>
          <scope doc="Check to see if object [str] exists, based on the passed&#xA;string." ilk="function" name="doesObjectExist" returns="Boolean" signature="doesObjectExist(str)">
            <variable citdl="String" ilk="argument" name="str" />
          </scope>
        </variable>
        <variable citdl="Object" name="compat">
          <variable citdl="Object" name="0">
            <variable citdl="Object" name="2">
              <scope ilk="class" name="2" />
            </variable>
          </variable>
        </variable>
        <scope ilk="function" name="requireAll" signature="requireAll()" />
        <scope ilk="function" name="byIdArray" signature="byIdArray()" />
      </variable>
      <scope ilk="function" name="dj_addNodeEvtHdlr" signature="dj_addNodeEvtHdlr(node, evtName, fp, capture)">
        <variable ilk="argument" name="node" />
        <variable ilk="argument" name="evtName" />
        <variable ilk="argument" name="fp" />
        <variable ilk="argument" name="capture" />
      </scope>
      <scope ilk="function" name="dj_load_init" signature="dj_load_init()" />
      <variable citdl="Object" name="script">
        <scope attributes="__ctor__" ilk="function" name="onreadystatechange" signature="onreadystatechange()">
          <variable name="readyState" />
        </scope>
      </variable>
      <scope ilk="function" name="callFunc" signature="callFunc()">
        <scope attributes="__ctor__" ilk="function" name="callFunc" signature="callFunc(node, iterator)">
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="iterator" />
        </scope>
      </scope>
      <scope ilk="function" name="wrapperCall" signature="wrapperCall()" />
      <variable citdl="Object" name="window">
        <scope attributes="__ctor__" ilk="function" name="XMLSerialzer" signature="XMLSerialzer()">
          <variable name="serializeToString">
            <scope attributes="__ctor__" ilk="function" name="serializeToString" signature="serializeToString(node)">
              <variable ilk="argument" name="node" />
            </scope>
          </variable>
        </scope>
        <scope attributes="__ctor__" ilk="function" name="DOMParser" signature="DOMParser()">
          <variable name="parseFromString">
            <scope attributes="__ctor__" ilk="function" name="parseFromString" signature="parseFromString(s)">
              <variable ilk="argument" name="s" />
            </scope>
          </variable>
        </scope>
        <scope attributes="__ctor__" ilk="function" name="XMLHttpRequest" signature="XMLHttpRequest()">
          <variable name="responseText" />
          <variable name="responseXML" />
          <variable name="status" />
          <variable name="statusText" />
          <variable name="onload">
            <scope attributes="__ctor__" ilk="function" name="onload" signature="onload()" />
          </variable>
          <variable name="readyState" />
          <variable name="onreadystatechange">
            <scope attributes="__ctor__" ilk="function" name="onreadystatechange" signature="onreadystatechange()" />
          </variable>
          <variable name="responseBody" />
          <variable name="responseStream" />
          <variable name="abort">
            <scope attributes="__ctor__" ilk="function" name="abort" signature="abort()" />
          </variable>
          <variable name="getAllResponseHeaders">
            <scope attributes="__ctor__" ilk="function" name="getAllResponseHeaders" signature="getAllResponseHeaders()" />
          </variable>
          <variable name="getResponseHeader">
            <scope attributes="__ctor__" ilk="function" name="getResponseHeader" signature="getResponseHeader(n)">
              <variable ilk="argument" name="n" />
            </scope>
          </variable>
          <variable name="setRequestHeader">
            <scope attributes="__ctor__" ilk="function" name="setRequestHeader" signature="setRequestHeader(nm, val)">
              <variable ilk="argument" name="nm" />
              <variable ilk="argument" name="val" />
            </scope>
          </variable>
          <variable name="open">
            <scope attributes="__ctor__" ilk="function" name="open" signature="open(meth, url, async)">
              <variable ilk="argument" name="meth" />
              <variable ilk="argument" name="url" />
              <variable ilk="argument" name="async" />
            </scope>
          </variable>
          <variable name="send">
            <scope attributes="__ctor__" ilk="function" name="send" signature="send(data)">
              <variable ilk="argument" name="data" />
            </scope>
          </variable>
        </scope>
      </variable>
      <variable citdl="Object" name="dragObject">
        <scope ilk="function" name="onDragEnd" signature="onDragEnd(e)">
          <variable ilk="argument" name="e" />
        </scope>
      </variable>
      <scope ilk="function" name="autoExpand" signature="autoExpand()">
        <scope attributes="__ctor__" ilk="function" name="autoExpand" signature="autoExpand()" />
      </scope>
      <scope ilk="function" name="handler" signature="handler()">
        <scope attributes="__ctor__" ilk="function" name="handler" signature="handler(node, expandLevel)">
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="expandLevel" />
          <variable name="node" />
          <variable name="expandLevel" />
          <variable name="process" />
        </scope>
        <scope ilk="function" name="process" signature="process()">
          <scope attributes="__ctor__" ilk="function" name="process" signature="process()" />
        </scope>
        <scope attributes="__ctor__" ilk="function" name="handler" signature="handler(node, savedIndices)">
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="savedIndices" />
          <variable name="node" />
          <variable name="savedIndices" />
          <variable name="process" />
        </scope>
      </scope>
      <variable citdl="Object" name="e">
        <scope ilk="function" name="preventDefault" signature="preventDefault(!e.preventDefault)">
          <variable ilk="argument" name="!e.preventDefault" />
        </scope>
      </variable>
      <variable citdl="Object" name="cometd">
        <scope ilk="function" name="tunnelInit" signature="tunnelInit(childLocation, childDomain)">
          <variable ilk="argument" name="childLocation" />
          <variable ilk="argument" name="childDomain" />
        </scope>
        <scope ilk="function" name="tunnelCollapse" signature="tunnelCollapse()" />
        <scope attributes="__ctor__" ilk="function" name="init" signature="init(props, root, bargs)">
          <variable ilk="argument" name="props" />
          <variable ilk="argument" name="root" />
          <variable ilk="argument" name="bargs" />
          <variable name="url" />
          <variable name="isXD" />
        </scope>
        <scope attributes="__ctor__" ilk="function" name="finishInit" signature="finishInit(type, data, evt, request)">
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="data" />
          <variable ilk="argument" name="evt" />
          <variable ilk="argument" name="request" />
          <variable name="handshakeReturn" />
          <variable name="currentTransport" />
          <variable name="currentTransport.version" />
          <variable name="clientId" />
          <variable name="initialized" />
        </scope>
        <scope ilk="function" name="getRandStr" signature="getRandStr()" />
        <scope ilk="function" name="deliver" signature="deliver(messages)">
          <variable ilk="argument" name="messages" />
        </scope>
        <scope attributes="__ctor__" ilk="function" name="_deliver" signature="_deliver(message)">
          <variable ilk="argument" name="message" />
          <variable name="lastMessage" />
        </scope>
        <scope ilk="function" name="disconnect" signature="disconnect()" />
        <scope doc="publishes the passed message to the cometd server for&#xA;delivery on the specified topic" ilk="function" name="publish" signature="publish(channel, data, properties)">
          <variable citdl="String" ilk="argument" name="channel" />
          <variable citdl="Object" ilk="argument" name="data" />
          <variable citdl="Object" ilk="argument" name="properties" />
        </scope>
        <scope doc="inform the server of this client&apos;s interest in channel" ilk="function" name="subscribe" signature="subscribe(channel, useLocalTopics, objOrFunc, funcName)">
          <variable citdl="String" ilk="argument" name="channel" />
          <variable ilk="argument" name="useLocalTopics" />
          <variable ilk="argument" name="objOrFunc" />
          <variable ilk="argument" name="funcName" />
        </scope>
        <scope ilk="function" name="subscribed" signature="subscribed(channel, message)">
          <variable citdl="String" ilk="argument" name="channel" />
          <variable citdl="Object" ilk="argument" name="message" />
        </scope>
        <scope doc="inform the server of this client&apos;s disinterest in channel" ilk="function" name="unsubscribe" signature="unsubscribe(channel, useLocalTopics, objOrFunc, funcName)">
          <variable citdl="String" ilk="argument" name="channel" />
          <variable ilk="argument" name="useLocalTopics" />
          <variable ilk="argument" name="objOrFunc" />
          <variable ilk="argument" name="funcName" />
        </scope>
        <scope ilk="function" name="unsubscribed" signature="unsubscribed(channel, message)">
          <variable citdl="String" ilk="argument" name="channel" />
          <variable citdl="Object" ilk="argument" name="message" />
        </scope>
        <variable citdl="Object" name="iframeTransport">
          <scope ilk="function" name="check" signature="check(types, version, xdomain)">
            <variable ilk="argument" name="types" />
            <variable ilk="argument" name="version" />
            <variable ilk="argument" name="xdomain" />
          </scope>
          <scope ilk="function" name="tunnelInit" signature="tunnelInit()" />
          <scope attributes="__ctor__" ilk="function" name="tunnelCollapse" signature="tunnelCollapse()">
            <variable name="connected" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="deliver" signature="deliver(message)">
            <variable ilk="argument" name="message" />
            <variable name="lastTimestamp" />
            <variable name="lastId" />
            <variable name="connectionId" />
            <variable name="connected" />
          </scope>
          <scope ilk="function" name="widenDomain" signature="widenDomain(domainStr)">
            <variable ilk="argument" name="domainStr" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="postToIframe" signature="postToIframe(content, url)">
            <variable ilk="argument" name="content" />
            <variable ilk="argument" name="url" />
            <variable name="phonyForm" />
            <variable name="phonyForm.style.display" />
            <variable name="phonyForm.enctype" />
            <variable name="phonyForm.method" />
            <variable name="phonyForm.action" />
            <variable name="phonyForm.target" />
          </scope>
          <scope ilk="function" name="processBacklog" signature="processBacklog()" />
          <scope ilk="function" name="sendMessage" signature="sendMessage(message, bypassBacklog)">
            <variable ilk="argument" name="message" />
            <variable ilk="argument" name="bypassBacklog" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="startup" signature="startup(handshakeData)">
            <variable ilk="argument" name="handshakeData" />
            <variable name="rcvNodeName" />
            <variable name="rcvNode" />
            <variable name="rcvNode.parentWindow.dojo" />
          </scope>
        </variable>
        <variable citdl="Object" name="mimeReplaceTransport">
          <scope ilk="function" name="check" signature="check(types, version, xdomain)">
            <variable ilk="argument" name="types" />
            <variable ilk="argument" name="version" />
            <variable ilk="argument" name="xdomain" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="tunnelInit" signature="tunnelInit()">
            <variable name="connected" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="tunnelCollapse" signature="tunnelCollapse()">
            <variable name="connected" />
          </scope>
          <scope ilk="function" name="handleOnLoad" signature="handleOnLoad(resp)">
            <variable ilk="argument" name="resp" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="openTunnelWith" signature="openTunnelWith(content, url)">
            <variable ilk="argument" name="content" />
            <variable ilk="argument" name="url" />
            <variable name="xhr" />
            <variable name="xhr.multipart" />
            <variable name="xhr.onreadystatechange" />
            <variable name="xhr.onload" />
          </scope>
          <scope ilk="function" name="processBacklog" signature="processBacklog()" />
          <scope ilk="function" name="sendMessage" signature="sendMessage(message, bypassBacklog)">
            <variable ilk="argument" name="message" />
            <variable ilk="argument" name="bypassBacklog" />
          </scope>
          <scope ilk="function" name="startup" signature="startup(handshakeData)">
            <variable ilk="argument" name="handshakeData" />
          </scope>
        </variable>
        <variable citdl="Object" name="longPollTransport">
          <scope ilk="function" name="check" signature="check(types, version, xdomain)">
            <variable ilk="argument" name="types" />
            <variable ilk="argument" name="version" />
            <variable ilk="argument" name="xdomain" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="tunnelInit" signature="tunnelInit()">
            <variable name="connected" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="tunnelCollapse" signature="tunnelCollapse()">
            <variable name="connected" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="openTunnelWith" signature="openTunnelWith(content, url)">
            <variable ilk="argument" name="content" />
            <variable ilk="argument" name="url" />
            <variable name="connected" />
          </scope>
          <scope ilk="function" name="processBacklog" signature="processBacklog()" />
          <scope ilk="function" name="sendMessage" signature="sendMessage(message, bypassBacklog)">
            <variable ilk="argument" name="message" />
            <variable ilk="argument" name="bypassBacklog" />
          </scope>
          <scope ilk="function" name="startup" signature="startup(handshakeData)">
            <variable ilk="argument" name="handshakeData" />
          </scope>
        </variable>
        <variable citdl="Object" name="callbackPollTransport">
          <scope ilk="function" name="check" signature="check(types, version, xdomain)">
            <variable ilk="argument" name="types" />
            <variable ilk="argument" name="version" />
            <variable ilk="argument" name="xdomain" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="tunnelInit" signature="tunnelInit()">
            <variable name="connected" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="tunnelCollapse" signature="tunnelCollapse()">
            <variable name="connected" />
          </scope>
          <scope attributes="__ctor__" ilk="function" name="openTunnelWith" signature="openTunnelWith(content, url)">
            <variable ilk="argument" name="content" />
            <variable ilk="argument" name="url" />
            <variable name="connected" />
          </scope>
          <scope ilk="function" name="processBacklog" signature="processBacklog()" />
          <scope ilk="function" name="sendMessage" signature="sendMessage(message, bypassBacklog)">
            <variable ilk="argument" name="message" />
            <variable ilk="argument" name="bypassBacklog" />
          </scope>
          <scope ilk="function" name="startup" signature="startup(handshakeData)">
            <variable ilk="argument" name="handshakeData" />
          </scope>
        </variable>
      </variable>
      <scope ilk="function" name="cb" signature="cb(res)">
        <variable ilk="argument" name="res" />
      </scope>
      <scope ilk="function" name="cache" signature="cache()" />
      <scope ilk="function" name="_P" signature="_P(n, oc, req)">
        <variable ilk="argument" name="n" />
        <variable ilk="argument" name="oc" />
        <variable ilk="argument" name="req" />
      </scope>
      <scope ilk="function" name="calculatedEvents" signature="calculatedEvents()" />
      <scope ilk="function" name="expandingRules" signature="expandingRules()" />
      <scope ilk="function" name="cullingRules" signature="cullingRules()" />
      <scope attributes="__ctor__" ilk="function" name="null" signature="null()">
        <variable name="_fromTrap" />
        <variable name="shared.bg" />
        <variable name="shared.bg.className" />
        <variable name="shared.bgIframe" />
        <variable name="shared.bg.style.backgroundColor" />
        <variable name="bgColor" />
        <variable name="bgOpacity" />
        <variable name="shared.bg.style.width" />
        <variable name="shared.bg.style.height" />
        <variable name="shared.bg.style.display" />
        <variable name="domNode.style.display" />
        <variable name="shared.bg.style.display" />
        <variable name="shared.bg.style.width" />
        <scope attributes="__ctor__" ilk="function" name="null" signature="null()">
          <variable name="windowState" />
          <variable name="titleBarIcon.src" />
          <variable name="titleBar.style.display" />
          <variable name="titleBarIcon.style.display" />
          <variable name="minimizeAction.style.display" />
          <variable name="maximizeAction.style.display" />
          <variable name="restoreAction.style.display" />
          <variable name="closeAction.style.display" />
          <variable name="drag" />
          <variable name="resizeBar.style.display" />
          <variable name="resizeHandle" />
          <variable name="shadow" />
          <variable name="bgIframe" />
          <variable name="windowState" />
          <variable name="titleBarIcon.src" />
          <variable name="titleBar.style.display" />
          <variable name="titleBarIcon.style.display" />
          <variable name="minimizeAction.style.display" />
          <variable name="maximizeAction.style.display" />
          <variable name="restoreAction.style.display" />
          <variable name="closeAction.style.display" />
          <variable name="drag" />
          <variable name="resizeBar.style.display" />
          <variable name="resizeHandle" />
          <variable name="shadow" />
          <variable name="bgIframe" />
          <variable name="windowState" />
          <variable name="titleBarIcon.src" />
          <variable name="titleBar.style.display" />
          <variable name="titleBarIcon.style.display" />
          <variable name="minimizeAction.style.display" />
          <variable name="maximizeAction.style.display" />
          <variable name="restoreAction.style.display" />
          <variable name="closeAction.style.display" />
          <variable name="drag" />
          <variable name="resizeBar.style.display" />
          <variable name="resizeHandle" />
          <variable name="shadow" />
          <variable name="bgIframe" />
          <variable name="previous" />
          <variable name="parentPrevious" />
          <variable name="domNode.parentNode.style.overflow" />
          <variable name="domNode.style.top" />
          <variable name="maximizeAction.style.display" />
          <variable name="restoreAction.style.display" />
          <variable name="resizeHandle.domNode.style.display" />
          <variable name="windowState" />
          <variable name="previous" />
          <variable name="parentPrevious" />
          <variable name="domNode.parentNode.style.overflow" />
          <variable name="domNode.style.top" />
          <variable name="maximizeAction.style.display" />
          <variable name="restoreAction.style.display" />
          <variable name="resizeHandle.domNode.style.display" />
          <variable name="windowState" />
          <variable name="previous" />
          <variable name="parentPrevious" />
          <variable name="domNode.parentNode.style.overflow" />
          <variable name="domNode.style.top" />
          <variable name="maximizeAction.style.display" />
          <variable name="restoreAction.style.display" />
          <variable name="resizeHandle.domNode.style.display" />
          <variable name="windowState" />
          <variable name="previous" />
          <variable name="parentPrevious" />
          <variable name="domNode.parentNode.style.overflow" />
          <variable name="domNode.style.top" />
          <variable name="maximizeAction.style.display" />
          <variable name="restoreAction.style.display" />
          <variable name="resizeHandle.domNode.style.display" />
          <variable name="windowState" />
          <variable name="previous" />
          <variable name="parentPrevious" />
          <variable name="domNode.parentNode.style.overflow" />
          <variable name="domNode.style.top" />
          <variable name="maximizeAction.style.display" />
          <variable name="restoreAction.style.display" />
          <variable name="resizeHandle.domNode.style.display" />
          <variable name="windowState" />
          <variable name="previous" />
          <variable name="parentPrevious" />
          <variable name="domNode.parentNode.style.overflow" />
          <variable name="domNode.style.top" />
          <variable name="maximizeAction.style.display" />
          <variable name="restoreAction.style.display" />
          <variable name="resizeHandle.domNode.style.display" />
          <variable name="windowState" />
          <variable name="previous" />
          <variable name="parentPrevious" />
          <variable name="domNode.parentNode.style.overflow" />
          <variable name="domNode.style.top" />
          <variable name="maximizeAction.style.display" />
          <variable name="restoreAction.style.display" />
          <variable name="resizeHandle.domNode.style.display" />
          <variable name="windowState" />
          <variable name="lastWindowState" />
          <variable name="windowState" />
          <variable name="domNode.parentNode.style.overflow" />
          <variable name="windowState" />
          <variable name="previous" />
          <variable name="parentPrevious" />
          <variable name="restoreAction.style.display" />
          <variable name="maximizeAction.style.display" />
          <variable name="resizeHandle.domNode.style.display" />
          <variable name="windowState" />
          <variable name="width" />
          <variable name="windowState" />
        </scope>
        <scope attributes="__ctor__" ilk="function" name="null" signature="null()">
          <variable name="_typamaticTimer" />
          <variable name="_currentTimeout" />
          <variable name="_typamaticTimer" />
          <variable name="_currentTimeout" />
          <variable name="buttonSize" />
          <variable name="buttonSize" />
          <variable name="_typamaticTimer" />
          <variable name="_currentTimeout" />
          <variable name="_typamaticNode" />
          <variable name="_typamaticTimer" />
          <variable name="_currentTimeout" />
          <variable name="textbox.selectionEnd" />
          <variable name="textbox.selectionEnd" />
          <variable name="buttonSize" />
        </scope>
      </scope>
      <variable citdl="Object" name="[dojo">
        <variable citdl="Object" name="widget">
          <variable citdl="Object" name="ContentPane, dojo">
            <variable citdl="Object" name="widget">
              <scope attributes="__ctor__" ilk="function" name="ModalDialogBase]" signature="ModalDialogBase]()">
                <variable name="_scrollConnected" />
                <variable name="timeRemaining" />
                <variable name="timerNode.innerHTML" />
                <variable name="closeNode.style.visibility" />
                <variable name="closeNode.style.display" />
                <variable name="timer" />
                <variable name="_scrollConnected" />
                <variable name="timerNode" />
                <variable name="closeNode" />
                <variable name="closeNode.style.visibility" />
                <variable name="timerNode.innerHTML" />
                <variable name="domNode.style.display" />
              </scope>
              <scope attributes="__ctor__" ilk="function" name="PopupContainerBase]" signature="PopupContainerBase]()">
                <variable name="connectNode" />
                <variable name="mouse" />
                <variable name="showTimer" />
                <variable name="mouse" />
                <variable name="hideTimer" />
                <variable name="mouse" />
                <variable name="hideTimer" />
              </scope>
            </variable>
          </variable>
          <variable citdl="Object" name="HtmlWidget, dojo">
            <variable citdl="Object" name="widget">
              <variable citdl="Object" name="FloatingPaneBase, dojo">
                <variable citdl="Object" name="widget">
                  <scope attributes="__ctor__" ilk="function" name="ModalDialogBase]" signature="ModalDialogBase]()">
                    <variable name="contentWidget" />
                    <variable name="contentWidget" />
                    <variable name="shared.bg.style.zIndex" />
                  </scope>
                </variable>
              </variable>
            </variable>
          </variable>
          <variable citdl="Object" name="FloatingPane, dojo">
            <variable citdl="Object" name="widget">
              <scope attributes="__ctor__" ilk="function" name="ModalDialogBase]" signature="ModalDialogBase]()">
                <variable name="shared.bg.style.zIndex" />
              </scope>
            </variable>
          </variable>
        </variable>
      </variable>
      <scope ilk="function" name="isSignificantNode" signature="isSignificantNode(element)">
        <variable ilk="argument" name="element" />
      </scope>
      <variable citdl="Object" name="this">
        <variable citdl="Object" name="iframe">
          <scope ilk="function" name="onload" signature="onload()" />
        </variable>
        <scope ilk="function" name="toString" signature="toString()" />
        <scope ilk="function" name="_log" signature="_log(widget, data)">
          <variable ilk="argument" name="widget" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="strips out &lt;style, &lt;link rel=stylesheet and &lt;title tags&#xA;intended to take out tags that might cause DOM faults" ilk="function" name="htmlContentBasicFix" returns="Object" signature="htmlContentBasicFix(s, url)">
          <variable citdl="String" ilk="argument" name="s" />
          <variable citdl="String" ilk="argument" name="url" />
        </scope>
        <scope doc="adjusts relative paths in content to be relative to current&#xA;page" ilk="function" name="htmlContentAdjustPaths" returns="String" signature="htmlContentAdjustPaths(s, url)">
          <variable citdl="String" ilk="argument" name="s" />
          <variable citdl="String" ilk="argument" name="url" />
        </scope>
        <scope doc="handles scripts and dojo .require(...) etc calls NOTE: we&#xA;need to go through here even if we have executeScripts=false&#xA;and if we have parseWidgets true" ilk="function" name="htmlContentScripts" signature="htmlContentScripts(s, collectScripts)">
          <variable citdl="String" ilk="argument" name="s" />
          <variable citdl="Boolean" ilk="argument" name="collectScripts" />
        </scope>
        <scope doc="pathfixes, require calls, css stuff and neccesary content&#xA;clean" ilk="function" name="splitAndFixPaths" returns="Object" signature="splitAndFixPaths(args)">
          <variable citdl="Object" ilk="argument" name="args" />
        </scope>
        <scope doc="mixin or extend loader into a widget" ilk="function" name="hookUp" signature="hookUp(args)">
          <variable citdl="Object" ilk="argument" name="args" />
          <scope ilk="function" name="handler" signature="handler()" />
        </scope>
        <scope ilk="function" name="getValue" signature="getValue(n, step)">
          <variable ilk="argument" name="n" />
          <variable ilk="argument" name="step" />
        </scope>
        <scope ilk="function" name="add" signature="add(curve, weight)">
          <variable ilk="argument" name="curve" />
          <variable ilk="argument" name="weight" />
        </scope>
        <scope ilk="function" name="remove" signature="remove(curve)">
          <variable ilk="argument" name="curve" />
        </scope>
        <scope ilk="function" name="removeAll" signature="removeAll()" />
      </variable>
      <scope ilk="function" name="isSupportedBy" signature="isSupportedBy(browsers)">
        <variable ilk="argument" name="browsers" />
      </scope>
      <scope attributes="__ctor__" ilk="function" name="tf" signature="tf()">
        <variable name="buildRendering">
          <scope attributes="__ctor__" ilk="function" name="buildRendering" signature="buildRendering()" />
        </variable>
        <variable name="destroyRendering">
          <scope attributes="__ctor__" ilk="function" name="destroyRendering" signature="destroyRendering()" />
        </variable>
        <variable name="postInitialize">
          <scope attributes="__ctor__" ilk="function" name="postInitialize" signature="postInitialize()" />
        </variable>
        <variable name="cleanUp">
          <scope attributes="__ctor__" ilk="function" name="cleanUp" signature="cleanUp()" />
        </variable>
        <variable name="widgetType" />
        <variable name="domNode" />
      </scope>
      <scope ilk="function" name="filter" signature="filter(elem)">
        <variable ilk="argument" name="elem" />
      </scope>
      <scope ilk="function" name="filterFunc" signature="filterFunc(elem)">
        <variable ilk="argument" name="elem" />
      </scope>
      <scope ilk="function" name="handle" signature="handle(type, data, evt)">
        <variable ilk="argument" name="type" />
        <variable ilk="argument" name="data" />
        <variable ilk="argument" name="evt" />
      </scope>
      <scope ilk="function" name="recurseOnExpand" signature="recurseOnExpand()" />
      <variable citdl="Object" name="my">
        <variable citdl="Object" name="widget">
          <variable citdl="Object" classrefs="dojo.widget.HtmlWidget" name="demoEngine">
            <scope ilk="function" name="DemoContainer" signature="DemoContainer()">
              <scope ilk="function" name="postCreate" signature="postCreate()" />
              <scope ilk="function" name="loadDemo" signature="loadDemo(url)">
                <variable ilk="argument" name="url" />
              </scope>
              <scope ilk="function" name="setName" signature="setName(name)">
                <variable ilk="argument" name="name" />
              </scope>
              <scope ilk="function" name="setSummary" signature="setSummary(summary)">
                <variable ilk="argument" name="summary" />
              </scope>
              <scope ilk="function" name="showSource" signature="showSource()" />
              <scope ilk="function" name="showDemo" signature="showDemo()" />
              <scope ilk="function" name="returnToDemos" signature="returnToDemos()" />
              <scope ilk="function" name="show" signature="show()" />
            </scope>
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <scope ilk="function" name="DemoItem" signature="DemoItem()">
              <scope ilk="function" name="postCreate" signature="postCreate()" />
              <scope ilk="function" name="onSelectDemo" signature="onSelectDemo()" />
            </scope>
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <scope ilk="function" name="DemoNavigator" signature="DemoNavigator()">
              <scope ilk="function" name="postCreate" signature="postCreate()" />
              <scope ilk="function" name="returnImage" signature="returnImage()" />
              <scope ilk="function" name="returnToDemos" signature="returnToDemos()" />
              <scope ilk="function" name="show" signature="show()" />
              <scope ilk="function" name="getRegistry" signature="getRegistry(url)">
                <variable ilk="argument" name="url" />
              </scope>
              <scope ilk="function" name="url" signature="url(url)">
                <variable ilk="argument" name="url" />
              </scope>
              <scope ilk="function" name="load" signature="load(url)">
                <variable ilk="argument" name="url" />
              </scope>
              <scope ilk="function" name="mimetype" signature="mimetype(url)">
                <variable ilk="argument" name="url" />
              </scope>
              <scope ilk="function" name="processRegistry" signature="processRegistry(type, egistry, )">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="egistry" />
                <variable ilk="argument" name="" />
              </scope>
              <scope ilk="function" name="addCategory" signature="addCategory(category)">
                <variable ilk="argument" name="category" />
              </scope>
              <scope ilk="function" name="caption" signature="caption(category)">
                <variable ilk="argument" name="category" />
              </scope>
              <scope ilk="function" name="addDemo" signature="addDemo(demoName)">
                <variable ilk="argument" name="demoName" />
              </scope>
              <scope ilk="function" name="viewDemoImage" signature="viewDemoImage(demoName)">
                <variable ilk="argument" name="demoName" />
              </scope>
              <scope ilk="function" name="onSelectCategory" signature="onSelectCategory(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope ilk="function" name="onSelectDemo" signature="onSelectDemo(e)">
                <variable ilk="argument" name="e" />
              </scope>
            </scope>
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <scope ilk="function" name="DemoPane" signature="DemoPane()">
              <scope ilk="function" name="postCreate" signature="postCreate()" />
              <scope ilk="function" name="_launchDemo" signature="_launchDemo()" />
              <scope ilk="function" name="setHref" signature="setHref(url)">
                <variable ilk="argument" name="url" />
              </scope>
            </scope>
            <variable name="templatePath" />
            <variable name="templateCssPath" />
            <scope ilk="function" name="SourcePane" signature="SourcePane()">
              <scope ilk="function" name="postCreate" signature="postCreate()" />
              <scope ilk="function" name="getSource" signature="getSource()" />
              <scope ilk="function" name="url" signature="url()" />
              <scope ilk="function" name="load" signature="load()" />
              <scope ilk="function" name="mimetype" signature="mimetype()" />
              <scope ilk="function" name="fillInSource" signature="fillInSource(type, source, e)">
                <variable ilk="argument" name="type" />
                <variable ilk="argument" name="source" />
                <variable ilk="argument" name="e" />
              </scope>
              <scope ilk="function" name="setHref" signature="setHref(url)">
                <variable ilk="argument" name="url" />
              </scope>
            </scope>
            <variable name="templatePath" />
            <variable name="templateCssPath" />
          </variable>
        </variable>
      </variable>
      <scope attributes="__ctor__" ilk="function" name="trackerObj" signature="trackerObj(id, data)">
        <variable ilk="argument" name="id" />
        <variable ilk="argument" name="data" />
        <variable name="id" />
        <variable name="data" />
        <variable name="returnValue" />
        <variable name="loader.bindObj" />
        <variable name="isLoaded" />
        <variable name="loader.isLoaded" />
        <variable name="loader.bindObj" />
        <variable name="loader._onSetContent_err" />
        <variable name="href" />
        <variable name="url" />
        <variable name="scriptScope" />
        <variable name="handler" />
        <scope ilk="function" name="handle" signature="handle(type)">
          <variable ilk="argument" name="type" />
        </scope>
      </scope>
      <scope ilk="function" name="handleDefaults" signature="handleDefaults(e, handler, useAlert)">
        <variable ilk="argument" name="e" />
        <variable ilk="argument" name="handler" />
        <variable ilk="argument" name="useAlert" />
      </scope>
      <scope ilk="function" name="downloader" signature="downloader(bindArgs)">
        <variable ilk="argument" name="bindArgs" />
      </scope>
      <scope ilk="function" name="stackRunner" signature="stackRunner(st)">
        <variable ilk="argument" name="st" />
      </scope>
      <scope ilk="function" name="stackPusher" signature="stackPusher(st, obj, func)">
        <variable ilk="argument" name="st" />
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="func" />
      </scope>
      <scope ilk="function" name="refreshed" signature="refreshed()" />
      <scope ilk="function" name="asyncParse" signature="asyncParse(data)">
        <variable ilk="argument" name="data" />
      </scope>
      <scope ilk="function" name="runHandler" signature="runHandler()" />
      <scope ilk="function" name="dj_rhino_current_script_via_java" signature="dj_rhino_current_script_via_java(depth)">
        <variable ilk="argument" name="depth" />
      </scope>
      <scope ilk="function" name="readText" signature="readText(path, encoding)">
        <variable ilk="argument" name="path" />
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope ilk="function" name="readUri" signature="readUri(uri, encoding)">
        <variable ilk="argument" name="uri" />
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope ilk="function" name="dj_readInputStream" signature="dj_readInputStream(is, encoding)">
        <variable ilk="argument" name="is" />
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope attributes="__ctor__" ilk="function" name="setTimeout" signature="setTimeout(func, delay)">
        <variable ilk="argument" name="func" />
        <variable ilk="argument" name="delay" />
        <variable name="hasSlept" />
      </scope>
      <scope ilk="function" name="removeComments" signature="removeComments(contents)">
        <variable ilk="argument" name="contents" />
      </scope>
      <scope ilk="function" name="zip" signature="zip(arr)">
        <variable ilk="argument" name="arr" />
      </scope>
      <scope ilk="function" name="dj_eval" signature="dj_eval()">
        <scope attributes="__ctor__" doc="Perform an evaluation in the global scope. Use this rather&#xA;than calling &apos;eval()&apos; directly." ilk="function" name="dj_eval" signature="dj_eval(scriptFragment)">
          <variable citdl="String" ilk="argument" name="scriptFragment" />
        </scope>
      </scope>
      <scope ilk="function" name="computeRanges" signature="computeRanges()" />
      <scope attributes="__ctor__" ilk="function" name="Namespace" signature="Namespace(name, module, resolver)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="module" />
        <variable ilk="argument" name="resolver" />
        <variable name="name" />
        <variable name="module" />
        <variable name="resolver" />
        <scope ilk="function" name="resolve" signature="resolve(name, domain, omit_module_check)">
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="domain" />
          <variable ilk="argument" name="omit_module_check" />
        </scope>
      </scope>
      <scope doc="Returns true if &apos;name&apos; is defined on &apos;object&apos; (or globally&#xA;if &apos;object&apos; is null)." ilk="function" name="dj_undef" returns="Boolean" signature="dj_undef(name, [object])">
        <variable citdl="String" ilk="argument" name="name" />
        <variable citdl="Object" ilk="argument" name="object" />
      </scope>
      <scope ilk="function" name="vscaffold" signature="vscaffold(prefs, names)">
        <variable ilk="argument" name="prefs" />
        <variable ilk="argument" name="names" />
      </scope>
      <scope ilk="function" name="preload" signature="preload(locale)">
        <variable ilk="argument" name="locale" />
      </scope>
      <scope ilk="function" name="dj_last_script_src" signature="dj_last_script_src()" />
      <scope ilk="function" name="clearOpacity" signature="clearOpacity(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <scope ilk="function" name="getOpacity" signature="getOpacity(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <scope ilk="function" name="loadedListener" signature="loadedListener()" />
      <scope ilk="function" name="tcb" signature="tcb(handleName)">
        <variable ilk="argument" name="handleName" />
      </scope>
      <scope ilk="function" name="tfw" signature="tfw(handleName)">
        <variable ilk="argument" name="handleName" />
      </scope>
      <scope ilk="function" name="dojoNamespaceResolver" signature="dojoNamespaceResolver(name, domain)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="domain" />
      </scope>
      <scope ilk="function" name="_processPattern" signature="_processPattern(pattern, applyPattern, applyLiteral, applyAll)">
        <variable ilk="argument" name="pattern" />
        <variable ilk="argument" name="applyPattern" />
        <variable ilk="argument" name="applyLiteral" />
        <variable ilk="argument" name="applyAll" />
      </scope>
      <scope ilk="function" name="_buildDateTimeRE" signature="_buildDateTimeRE(groups, pattern)">
        <variable ilk="argument" name="groups" />
        <variable ilk="argument" name="pattern" />
      </scope>
      <scope ilk="function" name="dj_spidermonkey_current_file" signature="dj_spidermonkey_current_file(depth)">
        <variable ilk="argument" name="depth" />
      </scope>
      <scope ilk="function" name="dj_rethrow" signature="dj_rethrow(m, e)">
        <variable ilk="argument" name="m" />
        <variable ilk="argument" name="e" />
      </scope>
      <scope ilk="function" name="dj_inherits" signature="dj_inherits(subclass, superclass)">
        <variable ilk="argument" name="subclass" />
        <variable ilk="argument" name="superclass" />
      </scope>
    </scope>
  </file>
</codeintel>
