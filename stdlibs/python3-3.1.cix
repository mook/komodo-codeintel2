<?xml version="1.0" encoding="UTF-8"?>
<codeintel version="2.0">
  <file lang="Python3" mtime="0" path="python-3.1.cix">
    <scope doc="Utilities for comparing files and directories.  Classes:" ilk="blob" lang="Python3" name="filecmp">
      <variable citdl="int" name="BUFSIZE" />
      <variable citdl="list" name="__all__" />
      <scope doc="Compare two files." ilk="function" name="cmp" signature="cmp(f1, f2, shallow=True)" />
      <scope doc="Compare common files in two directories." ilk="function" name="cmpfiles" signature="cmpfiles(a, b, common, shallow=True)" />
      <scope doc="# Demonstration and testing." ilk="function" name="demo" signature="demo()" />
      <scope classrefs="object" doc="A class that manages the comparison of 2 directories.  dircmp(a, b, ignore=None, hide=None)" ilk="class" name="dircmp" />
      <scope classrefs="object" doc="filterfalse(function or None, sequence) --&gt; filterfalse object  Return those items of sequence for which function(item) is false." ilk="class" name="filterfalse" />
      <import module="os" />
      <import module="stat" />
    </scope>
    <scope doc="Refactoring framework.  Used as a main program, this can refactor any number of files and/or" ilk="blob" lang="Python3" name="lib2to3.refactor">
      <scope classrefs="Exception" doc="A fixer could not be loaded." ilk="class" line="165" name="FixerError" />
      <scope classrefs="RefactoringTool" ilk="class" line="603" lineend="653" name="MultiprocessRefactoringTool">
        <variable attributes="__instancevar__" citdl="multiprocessing.JoinableQueue()" line="607" name="queue" />
        <scope attributes="protected" ilk="function" line="637" lineend="646" name="_child" signature="_child()">
          <variable citdl="MultiprocessRefactoringTool" ilk="argument" name="self" />
          <variable citdl="self.queue.get()" line="638" name="task" />
        </scope>
        <scope ilk="function" line="648" lineend="653" name="refactor_file" signature="refactor_file(*args, **kwargs)">
          <variable citdl="MultiprocessRefactoringTool" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope ilk="function" line="609" lineend="635" name="refactor" signature="refactor(items, write=False, doctests_only=False, num_processes=1)">
          <import line="615" module="multiprocessing" />
          <variable citdl="MultiprocessRefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="items" />
          <variable citdl="False" ilk="argument" name="write" />
          <variable citdl="False" ilk="argument" name="doctests_only" />
          <variable citdl="int" ilk="argument" name="num_processes" />
          <variable citdl="list" line="621" name="processes" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="605" lineend="607" name="__init__" signature="MultiprocessRefactoringTool(*args, **kwargs)">
          <variable citdl="MultiprocessRefactoringTool" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
      </scope>
      <scope classrefs="Exception" ilk="class" line="599" lineend="600" name="MultiprocessingUnsupported" />
      <scope classrefs="object" ilk="class" line="169" lineend="596" name="RefactoringTool">
        <scope doc="Refactors a docstring, looking for doctests." ilk="function" line="462" lineend="503" name="refactor_docstring" returns="str.join()" signature="refactor_docstring(input, filename)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable ilk="argument" name="filename" />
          <variable citdl="list" line="474" name="result" />
          <variable citdl="list" line="475" name="block" />
          <variable citdl="int" line="476" name="block_lineno" />
          <variable citdl="list" line="477" name="indent" />
          <variable citdl="int" line="478" name="lineno" />
          <variable citdl="line.find()" line="487" name="i" />
        </scope>
        <scope doc="Called when a file has been refactored, and there are changes." ilk="function" line="418" lineend="436" name="processed_file" signature="processed_file(new_text, filename, old_text=None, write=False, encoding=None)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="new_text" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="old_text" />
          <variable citdl="False" ilk="argument" name="write" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="bool" line="428" name="equal" />
        </scope>
        <scope doc="Refactors a parse tree (modifying the tree in place)." ilk="function" line="374" lineend="393" name="refactor_tree" returns="tree.was_changed" signature="refactor_tree(tree, name)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="tree" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Refactor a given input string." ilk="function" line="333" lineend="356" name="refactor_string" returns="self.driver.parse_string()" signature="refactor_string(data, name)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable ilk="argument" name="name" />
          <variable citdl="self.driver.parse_string()" line="347" name="tree" />
        </scope>
        <scope doc="Inspects the options to load the requested patterns and handlers." ilk="function" line="207" lineend="245" name="get_fixers" returns="tuple" signature="get_fixers()">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable citdl="list" line="215" name="pre_order_fixers" />
          <variable citdl="list" line="216" name="post_order_fixers" />
          <variable citdl="__import__()" line="218" name="mod" />
          <variable citdl="list" line="219" name="fix_name" />
          <variable citdl="fix_name.split()" line="222" name="parts" />
          <variable citdl="str.join()" line="223" name="class_name" />
          <variable citdl="getattr()" line="225" name="fix_class" />
          <variable citdl="fix_class()" line="228" name="fixer" />
          <variable citdl="operator.attrgetter()" line="242" name="key_func" />
        </scope>
        <scope doc="Parses a block into a tree." ilk="function" line="557" lineend="563" name="parse_block" returns="self.driver.parse_tokens()" signature="parse_block(block, lineno, indent)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="block" />
          <variable ilk="argument" name="lineno" />
          <variable ilk="argument" name="indent" />
        </scope>
        <scope doc="Traverse an AST, applying a set of fixers to each node." ilk="function" line="395" lineend="416" name="traverse_by" signature="traverse_by(fixers, traversal)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="fixers" />
          <variable ilk="argument" name="traversal" />
          <variable citdl="fixer.match()" line="411" name="results" />
          <variable citdl="fixer.transform()" line="413" name="new" />
          <variable citdl="fixer.transform()" line="416" name="node" />
        </scope>
        <scope doc="Writes a string to a file." ilk="function" line="438" lineend="457" name="write_file" signature="write_file(new_text, filename, old_text, encoding=None)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="new_text" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="old_text" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="_open_with_encoding()" line="446" name="f" />
        </scope>
        <scope ilk="function" line="257" lineend="260" name="log_debug" signature="log_debug(msg, *args)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope attributes="__ctor__" doc="Initializer." ilk="function" line="176" lineend="205" name="__init__" signature="RefactoringTool(fixer_names, options=None, explicit=None)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="fixer_names" />
          <variable ilk="argument" name="options" />
          <variable ilk="argument" name="explicit" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="193" name="errors" />
        <variable attributes="__instancevar__" citdl="_get_headnode_dict()" line="203" name="post_order_heads" />
        <variable attributes="__instancevar__" citdl="_get_headnode_dict()" line="202" name="pre_order_heads" />
        <scope doc="Wraps a tokenize stream to systematically modify start/end." ilk="function" line="565" lineend="576" name="wrap_toks" signature="wrap_toks(block, lineno, indent)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="block" />
          <variable ilk="argument" name="lineno" />
          <variable ilk="argument" name="indent" />
          <variable citdl="tokenize.generate_tokens()" line="567" name="tokens" />
        </scope>
        <scope doc="Refactors one doctest." ilk="function" line="505" lineend="532" name="refactor_doctest" returns="list" signature="refactor_doctest(block, lineno, indent, filename)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="block" />
          <variable ilk="argument" name="lineno" />
          <variable ilk="argument" name="indent" />
          <variable ilk="argument" name="filename" />
          <variable citdl="self.parse_block()" line="514" name="tree" />
          <variable citdl="list" line="523" name="new" />
          <variable citdl="list" line="525" name="clipped" />
        </scope>
        <scope doc="Refactor a list of files and directories." ilk="function" line="267" lineend="273" name="refactor" signature="refactor(items, write=False, doctests_only=False)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="items" />
          <variable citdl="False" ilk="argument" name="write" />
          <variable citdl="False" ilk="argument" name="doctests_only" />
        </scope>
        <variable citdl="str" line="173" name="CLASS_PREFIX" />
        <scope doc="Called when an error occurs." ilk="function" line="247" lineend="249" name="log_error" signature="log_error(msg, *args, **kwds)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
        <scope doc="Generates lines as expected by tokenize from a list of lines." ilk="function" line="579" lineend="596" name="gen_lines" signature="gen_lines(block, indent)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="block" />
          <variable ilk="argument" name="indent" />
          <variable citdl="str" line="584" name="prefix1" />
          <variable citdl="str" line="585" name="prefix2" />
          <variable citdl="str" line="586" name="prefix" />
        </scope>
        <variable attributes="__instancevar__" citdl="logging.getLogger()" line="194" name="logger" />
        <scope doc="Descends down a directory and refactor every Python file found." ilk="function" line="275" lineend="292" name="refactor_dir" signature="refactor_dir(dir_name, write=False, doctests_only=False)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="dir_name" />
          <variable citdl="False" ilk="argument" name="write" />
          <variable citdl="False" ilk="argument" name="doctests_only" />
          <variable citdl="os.path.join()" line="289" name="fullname" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="205" name="files" />
        <variable attributes="__instancevar__" citdl="list" line="195" name="fixer_log" />
        <variable attributes="protected" citdl="dict" line="171" name="_default_options" />
        <variable attributes="__instancevar__" citdl="driver.Driver()" line="197" name="driver" />
        <variable attributes="__instancevar__" line="184" name="fixers" />
        <variable citdl="str" line="174" name="FILE_PREFIX" />
        <scope attributes="protected" doc="Do our best to decode a Python source file correctly." ilk="function" line="294" lineend="308" name="_read_python_source" returns="tuple" signature="_read_python_source(filename)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="open()" line="299" name="f" />
          <variable line="304" name="encoding" />
        </scope>
        <variable citdl="str" line="459" name="PS1" />
        <scope ilk="function" line="358" lineend="372" name="refactor_stdin" signature="refactor_stdin(doctests_only=False)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable citdl="False" ilk="argument" name="doctests_only" />
          <variable citdl="sys.stdin.read()" line="359" name="input" />
          <variable citdl="self.refactor_docstring()" line="362" name="output" />
          <variable citdl="refactor_string()" line="368" name="tree" />
        </scope>
        <scope doc="Hook to log a message." ilk="function" line="251" lineend="255" name="log_message" signature="log_message(msg, *args)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="534" lineend="555" name="summarize" signature="summarize()">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable citdl="str" line="536" name="were" />
        </scope>
        <scope doc="Called with the old version, new version, and filename of a refactored file." ilk="function" line="262" lineend="265" name="print_output" signature="print_output(old_text, new_text, filename, equal)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="old_text" />
          <variable ilk="argument" name="new_text" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="equal" />
        </scope>
        <variable attributes="__instancevar__" citdl="pygram.python_grammar_no_print_statement" line="190" name="grammar" />
        <variable attributes="__instancevar__" citdl="list" line="185" name="explicit" />
        <scope doc="Refactors a file." ilk="function" line="310" lineend="331" name="refactor_file" signature="refactor_file(filename, write=False, doctests_only=False)">
          <variable citdl="RefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="False" ilk="argument" name="write" />
          <variable citdl="False" ilk="argument" name="doctests_only" />
          <variable citdl="self.refactor_docstring()" line="319" name="output" />
          <variable citdl="self.refactor_string()" line="325" name="tree" />
        </scope>
        <variable citdl="str" line="460" name="PS2" />
        <variable attributes="__instancevar__" citdl="self._default_options.copy()" line="186" name="options" />
        <variable attributes="__instancevar__" citdl="False" line="196" name="wrote" />
      </scope>
      <variable citdl="str" line="11" name="__author__" />
      <scope classrefs="object" doc="chain(*iterables) --&gt; chain object  Return a chain object whose .__next__() method returns elements from the" ilk="class" name="chain" />
      <import module="collections" />
      <import module="driver" />
      <scope doc="Return a sorted list of all available fix names in the given package." ilk="function" line="28" lineend="38" name="get_all_fix_names" returns="list" signature="get_all_fix_names(fixer_pkg, remove_prefix=True)">
        <variable ilk="argument" name="fixer_pkg" />
        <variable citdl="list" line="36" name="name" />
        <variable citdl="__import__()" line="30" name="pkg" />
        <variable citdl="list" line="32" name="fix_names" />
        <variable citdl="True" ilk="argument" name="remove_prefix" />
        <variable citdl="os.path.dirname()" line="31" name="fixer_dir" />
      </scope>
      <scope doc="Return the fully qualified names for fixers in the package pkg_name." ilk="function" line="98" lineend="103" name="get_fixers_from_package" returns="list" signature="get_fixers_from_package(pkg_name)">
        <variable ilk="argument" name="pkg_name" />
      </scope>
      <import module="io" />
      <import module="logging" />
      <import module="operator" />
      <import module="os" />
      <import module="pygram" />
      <import module="pytree" />
      <import module="sys" />
      <import module="token" />
      <import module="tokenize" />
      <scope attributes="protected __hidden__" classrefs="Exception" ilk="class" line="41" lineend="42" name="_EveryNode" />
      <scope attributes="protected __hidden__" doc="Accepts a pytree Pattern Node and returns a set of the pattern types which will match first." ilk="function" line="45" lineend="70" name="_get_head_types" returns="set()" signature="_get_head_types(pat)">
        <variable ilk="argument" name="pat" />
        <variable citdl="set()" line="64" name="r" />
      </scope>
      <variable attributes="protected __hidden__" citdl="function" line="114" name="_to_system_newlines" />
      <variable attributes="protected __hidden__" citdl="codecs.open" line="110" name="_open_with_encoding" />
      <scope attributes="protected __hidden__" doc="Accepts a list of fixers and returns a dictionary of head node type --&gt; fixer list." ilk="function" line="73" lineend="95" name="_get_headnode_dict" returns="dict()" signature="_get_headnode_dict(fixer_list)">
        <variable ilk="argument" name="fixer_list" />
        <variable citdl="collections.defaultdict()" line="76" name="head_nodes" />
        <variable citdl="list" line="77" name="every" />
        <variable citdl="_get_head_types()" line="81" name="heads" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="105" lineend="106" name="_identity" signature="_identity(obj)">
        <variable ilk="argument" name="obj" />
      </scope>
      <variable attributes="protected __hidden__" citdl="function" line="112" name="_from_system_newlines" />
      <scope attributes="protected __hidden__" ilk="function" line="125" lineend="162" name="_detect_future_print" returns="bool" signature="_detect_future_print(source)">
        <variable ilk="argument" name="source" />
        <variable citdl="False" line="126" name="have_docstring" />
        <variable citdl="tokenize.generate_tokens()" line="127" name="gen" />
        <scope ilk="function" line="128" lineend="130" name="advance" returns="tuple" signature="advance()">
          <variable citdl="next()" line="129" name="tok" />
        </scope>
        <variable citdl="frozenset()" line="131" name="ignore" />
      </scope>
    </scope>
    <scope doc="Generic (shallow and deep) copying operations.  Interface summary:" ilk="blob" lang="Python3" name="copy">
      <scope classrefs="Exception" ilk="class" line="55" lineend="56" name="Error" />
      <variable citdl="NoneType" line="62" name="PyStringMap" />
      <variable citdl="list" line="64" name="__all__" />
      <scope doc="Shallow copy operation on arbitrary Python objects." ilk="function" line="66" lineend="96" name="copy" returns="copy.copier()" signature="copy(x)">
        <variable citdl="getattr()" line="82" name="reductor" />
        <variable ilk="argument" name="x" />
        <variable citdl="reductor()" line="84" name="rv" />
        <variable citdl="_copy_dispatch.get()" line="74" name="copier" />
        <variable citdl="type()" line="72" name="cls" />
      </scope>
      <scope doc="Deep copy operation on arbitrary Python objects." ilk="function" line="128" lineend="177" name="deepcopy" returns="_deepcopy_atomic()" signature="deepcopy(x, memo=None, _nil=[])">
        <variable citdl="getattr()" line="159" name="reductor" />
        <variable citdl="reductor()" line="161" name="rv" />
        <variable citdl="id()" line="137" name="d" />
        <variable citdl="int" line="149" name="issc" />
        <variable citdl="dict" ilk="argument" name="memo" />
        <variable citdl="_deepcopy_dispatch.get()" line="144" name="copier" />
        <variable citdl="copier()" line="138" name="y" />
        <variable citdl="list" ilk="argument" name="_nil" />
        <variable ilk="argument" name="x" />
        <variable citdl="type()" line="142" name="cls" />
      </scope>
      <variable citdl="dict" name="dispatch_table" />
      <scope classrefs="Exception" ilk="class" line="57" name="error" />
      <variable citdl="str" name="name" />
      <scope classrefs="object" doc="set() -&gt; new empty set object set(iterable) -&gt; new set object " ilk="class" line="108" name="t" />
      <import module="weakref" />
      <scope attributes="protected __hidden__" ilk="function" line="121" lineend="122" name="_copy_with_copy_method" returns="x.copy()" signature="_copy_with_copy_method(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="116" lineend="117" name="_copy_with_constructor" returns="type()()" signature="_copy_with_constructor(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="101" lineend="102" name="_copy_immutable" signature="_copy_immutable(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="179" name="_deepcopy_dispatch" />
      <scope attributes="protected __hidden__" ilk="function" line="181" lineend="182" name="_deepcopy_atomic" signature="_deepcopy_atomic(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="99" name="_copy_dispatch" />
      <scope attributes="protected __hidden__" ilk="function" line="204" lineend="209" name="_deepcopy_list" returns="list" signature="_deepcopy_list(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
        <variable citdl="list" line="205" name="y" />
      </scope>
      <scope attributes="protected __hidden__" doc="Keeps a reference to the object x in the memo." ilk="function" line="241" lineend="255" name="_keep_alive" signature="_keep_alive(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="257" lineend="308" name="_reconstruct" returns="callable()" signature="_reconstruct(x, info, deep, memo=None)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="info" />
        <variable ilk="argument" name="deep" />
        <variable citdl="dict" ilk="argument" name="memo" />
        <variable citdl="len()" line="263" name="n" />
        <variable citdl="deepcopy()" line="267" name="state" />
        <variable line="271" name="listiter" />
        <variable line="275" name="dictiter" />
        <variable citdl="deepcopy()" line="279" name="args" />
        <variable citdl="callable()" line="280" name="y" />
        <variable citdl="deepcopy()" line="285" name="item" />
        <variable citdl="deepcopy()" line="290" name="key" />
        <variable citdl="deepcopy()" line="291" name="value" />
        <variable line="302" name="slotstate" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="212" lineend="228" name="_deepcopy_tuple" returns="list" signature="_deepcopy_tuple(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
        <variable citdl="list" line="213" name="y" />
        <variable citdl="id()" line="216" name="d" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="231" lineend="236" name="_deepcopy_dict" returns="dict" signature="_deepcopy_dict(x, memo)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="memo" />
        <variable citdl="dict" line="232" name="y" />
      </scope>
      <scope attributes="protected __hidden__" ilk="class" line="315" lineend="316" name="_EmptyClass" />
      <scope attributes="protected __hidden__" ilk="function" line="318" lineend="368" name="_test" signature="_test()">
        <import line="359" module="reprlib" />
        <variable citdl="list" line="319" name="l" />
        <variable citdl="copy()" line="321" name="l1" />
        <scope ilk="class" line="327" lineend="346" name="C">
          <scope attributes="__ctor__" ilk="function" line="328" lineend="337" name="__init__" signature="C(arg=None)">
            <import line="332" module="sys" />
            <variable citdl="C" ilk="argument" name="self" />
            <variable ilk="argument" name="arg" />
            <variable citdl="__file__" line="333" name="file" />
          </scope>
          <variable attributes="__instancevar__" citdl="int" line="329" name="a" />
          <variable attributes="__instancevar__" line="330" name="arg" />
          <variable attributes="__instancevar__" citdl="open()" line="336" name="fp" />
          <scope ilk="function" line="338" lineend="339" name="__getstate__" returns="dict" signature="__getstate__()">
            <variable citdl="C" ilk="argument" name="self" />
          </scope>
          <scope ilk="function" line="340" lineend="342" name="__setstate__" signature="__setstate__(state)">
            <variable citdl="C" ilk="argument" name="self" />
            <variable ilk="argument" name="state" />
          </scope>
          <scope ilk="function" line="343" lineend="346" name="__deepcopy__" returns="self.__class__()" signature="__deepcopy__(memo=None)">
            <variable citdl="C" ilk="argument" name="self" />
            <variable ilk="argument" name="memo" />
            <variable citdl="self.__class__()" line="344" name="new" />
          </scope>
        </scope>
        <variable citdl="C" line="347" name="c" />
        <variable citdl="copy()" line="349" name="l2" />
        <variable citdl="copy()" line="358" name="l3" />
      </scope>
    </scope>
    <scope doc="SAX driver for the pyexpat C module.  This driver works with pyexpat.__version__ == &apos;2.22&apos;." ilk="blob" lang="Python3" name="xml.sax.expatreader">
      <scope classrefs="object" ilk="class" line="30" name="AttributesImpl" />
      <scope classrefs="AttributesImpl" ilk="class" line="31" name="AttributesNSImpl" />
      <scope classrefs="Locator" doc="Locator for use with the ExpatParser class.  This uses a weak reference to the parser object to avoid creating" ilk="class" line="48" lineend="79" name="ExpatLocator">
        <scope ilk="function" line="69" lineend="73" name="getPublicId" returns="parser._source.getPublicId()" signature="getPublicId()">
          <variable citdl="ExpatLocator" ilk="argument" name="self" />
          <variable citdl="_mkproxy()" line="70" name="parser" />
        </scope>
        <scope ilk="function" line="57" lineend="61" name="getColumnNumber" returns="parser._parser.ErrorColumnNumber" signature="getColumnNumber()">
          <variable citdl="ExpatLocator" ilk="argument" name="self" />
          <variable citdl="_mkproxy()" line="58" name="parser" />
        </scope>
        <scope ilk="function" line="75" lineend="79" name="getSystemId" returns="parser._source.getSystemId()" signature="getSystemId()">
          <variable citdl="ExpatLocator" ilk="argument" name="self" />
          <variable citdl="_mkproxy()" line="76" name="parser" />
        </scope>
        <scope ilk="function" line="63" lineend="67" name="getLineNumber" returns="parser._parser.ErrorLineNumber" signature="getLineNumber()">
          <variable citdl="ExpatLocator" ilk="argument" name="self" />
          <variable citdl="_mkproxy()" line="64" name="parser" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_mkproxy()" line="55" name="_ref" />
        <scope attributes="__ctor__" ilk="function" line="54" lineend="55" name="__init__" signature="ExpatLocator(parser)">
          <variable citdl="ExpatLocator" ilk="argument" name="self" />
          <variable ilk="argument" name="parser" />
        </scope>
      </scope>
      <scope classrefs="IncrementalParser Locator" doc="SAX driver for the pyexpat C module." ilk="class" line="84" lineend="400" name="ExpatParser">
        <scope ilk="function" line="196" lineend="211" name="feed" signature="feed(data, isFinal=0)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="int" ilk="argument" name="isFinal" />
          <variable citdl="SAXParseException()" line="209" name="exc" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="expat.ParserCreate()" line="90" name="_parser" />
        <scope ilk="function" line="283" lineend="286" name="getColumnNumber" returns="self._parser.ErrorColumnNumber" signature="getColumnNumber()">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
        </scope>
        <scope doc="Parse an XML document from a URL or an InputSource." ilk="function" line="100" lineend="107" name="parse" signature="parse(source)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable citdl="saxutils.prepare_input_source()" ilk="argument" name="source" />
        </scope>
        <scope ilk="function" line="396" lineend="400" name="skipped_entity_handler" signature="skipped_entity_handler(name, is_pe)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="name" />
          <variable ilk="argument" name="is_pe" />
        </scope>
        <variable attributes="protected __instancevar__" line="92" name="_lex_handler_prop" />
        <scope ilk="function" line="213" lineend="221" name="close" signature="close()">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="87" lineend="96" name="__init__" signature="ExpatParser(namespaceHandling=0, bufsize=2**16-20)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="namespaceHandling" />
          <variable citdl="int" ilk="argument" name="bufsize" />
        </scope>
        <scope attributes="protected" ilk="function" line="223" lineend="226" name="_reset_cont_handler" signature="_reset_cont_handler()">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="120" lineend="130" name="getFeature" returns="bool" signature="getFeature(name)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._ent_handler.resolveEntity()" line="89" name="_source" />
        <scope ilk="function" line="303" lineend="304" name="end_element" signature="end_element(name)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="296" lineend="297" name="getSystemId" returns="self._source.getSystemId()" signature="getSystemId()">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="94" name="_entity_stack" />
        <scope ilk="function" line="368" lineend="369" name="unparsed_entity_decl" signature="unparsed_entity_decl(name, base, sysid, pubid, notation_name)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="base" />
          <variable ilk="argument" name="sysid" />
          <variable ilk="argument" name="pubid" />
          <variable ilk="argument" name="notation_name" />
        </scope>
        <scope ilk="function" line="115" lineend="118" name="setContentHandler" signature="setContentHandler(handler)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="handler" />
        </scope>
        <scope ilk="function" line="340" lineend="349" name="end_element_ns" signature="end_element_ns(name)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="tuple" line="341" name="pair" />
        </scope>
        <scope ilk="function" line="371" lineend="372" name="notation_decl" signature="notation_decl(name, base, sysid, pubid)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="base" />
          <variable ilk="argument" name="sysid" />
          <variable ilk="argument" name="pubid" />
        </scope>
        <scope ilk="function" line="244" lineend="279" name="reset" signature="reset()">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="293" lineend="294" name="getPublicId" returns="self._source.getPublicId()" signature="getPublicId()">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="362" lineend="363" name="end_namespace_decl" signature="end_namespace_decl(prefix)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <scope ilk="function" line="109" lineend="111" name="prepareParser" signature="prepareParser(source)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
        </scope>
        <scope attributes="protected" ilk="function" line="228" lineend="242" name="_reset_lex_handler_prop" signature="_reset_lex_handler_prop()">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable line="229" name="lex" />
          <variable line="230" name="parser" />
        </scope>
        <scope ilk="function" line="374" lineend="394" name="external_entity_ref" returns="int" signature="external_entity_ref(context, base, sysid, pubid)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="base" />
          <variable ilk="argument" name="sysid" />
          <variable ilk="argument" name="pubid" />
          <variable citdl="self._ent_handler.resolveEntity()" line="378" name="source" />
        </scope>
        <scope ilk="function" line="288" lineend="291" name="getLineNumber" returns="self._parser.ErrorLineNumber" signature="getLineNumber()">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="93" name="_parsing" />
        <scope ilk="function" line="132" lineend="160" name="setFeature" signature="setFeature(name, state)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="state" />
        </scope>
        <scope ilk="function" line="359" lineend="360" name="start_namespace_decl" signature="start_namespace_decl(prefix, uri)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
          <variable ilk="argument" name="uri" />
        </scope>
        <scope ilk="function" line="180" lineend="192" name="setProperty" signature="setProperty(name, value)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="365" lineend="366" name="start_doctype_decl" signature="start_doctype_decl(name, sysid, pubid, has_internal_subset)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="sysid" />
          <variable ilk="argument" name="pubid" />
          <variable ilk="argument" name="has_internal_subset" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="91" name="_namespaces" />
        <variable attributes="protected __instancevar__" citdl="int" line="95" name="_external_ges" />
        <scope ilk="function" line="162" lineend="178" name="getProperty" returns="self._parser.GetInputContext()" signature="getProperty(name)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="356" lineend="357" name="character_data" signature="character_data(data)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" line="263" name="_decl_handler_prop" />
        <scope ilk="function" line="352" lineend="353" name="processing_instruction" signature="processing_instruction(target, data)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="300" lineend="301" name="start_element" signature="start_element(name, attrs)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="96" name="_interning" />
        <scope ilk="function" line="306" lineend="338" name="start_element_ns" signature="start_element_ns(name, attrs)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="attrs" />
          <variable citdl="tuple" line="307" name="pair" />
          <variable citdl="dict" line="317" name="newattrs" />
          <variable citdl="dict" line="318" name="qnames" />
          <variable citdl="aname.split()" line="320" name="parts" />
          <variable citdl="len()" line="321" name="length" />
          <variable citdl="aname" line="324" name="qname" />
          <variable citdl="tuple" line="325" name="apair" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="Encapsulate an XML error or warning. This class can contain basic error or warning information from either the XML parser or the application: you can subclass it to provide additional" ilk="class" name="SAXException" />
      <scope classrefs="SAXException" doc="Exception class for an unrecognized identifier.  An XMLReader will raise this exception when it is confronted with an" ilk="class" name="SAXNotRecognizedException" />
      <scope classrefs="SAXException" doc="Exception class for an unsupported operation.  An XMLReader will raise this exception when a service it cannot" ilk="class" name="SAXNotSupportedException" />
      <scope classrefs="SAXException" doc="Encapsulate an XML parse error or warning.  This exception will include information for locating the error in" ilk="class" name="SAXParseException" />
      <scope classrefs="SAXNotSupportedException" doc="Exception class for a missing driver.  An XMLReader module (driver) should raise this exception when it" ilk="class" name="SAXReaderNotAvailable" />
      <scope ilk="function" line="404" lineend="405" name="create_parser" returns="ExpatParser" signature="create_parser(*args, **kwargs)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <import module="expat" />
      <variable citdl="str" name="feature_external_ges" />
      <variable citdl="str" name="feature_external_pes" />
      <variable citdl="str" name="feature_namespace_prefixes" />
      <variable citdl="str" name="feature_namespaces" />
      <variable citdl="str" name="feature_string_interning" />
      <variable citdl="str" name="feature_validation" />
      <import module="handler" />
      <variable citdl="str" name="property_interning_dict" />
      <variable citdl="str" name="property_xml_string" />
      <import module="saxutils" />
      <variable citdl="str" line="6" name="version" />
      <import module="xmlreader" />
      <variable attributes="__hidden__" citdl="create_parser()" line="411" name="p" />
      <variable attributes="protected __hidden__" citdl="function" line="39" name="_mkproxy" />
    </scope>
    <scope doc="runpy.py - locating and running Python code using the module namespace  Provides support for locating and running Python scripts using the Python" ilk="blob" lang="Python3" name="runpy">
      <variable citdl="list" line="19" name="__all__" />
      <scope doc="Get a PEP 302 &quot;loader&quot; object for module_or_name" ilk="function" name="get_loader" signature="get_loader(module_or_name)" />
      <import module="imp" />
      <scope doc="Execute a module&apos;s code without importing it" ilk="function" line="130" lineend="146" name="run_module" returns="_run_code()" signature="run_module(mod_name, init_globals=None, run_name=None, alter_sys=False)">
        <variable citdl="False" ilk="argument" name="alter_sys" />
        <variable line="139" name="pkg_name" />
        <variable ilk="argument" name="init_globals" />
        <variable ilk="argument" name="mod_name" />
        <variable ilk="argument" name="run_name" />
      </scope>
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="70" lineend="75" name="_get_filename" returns="_get_filename.meth()" signature="_get_filename(loader, mod_name)">
        <variable ilk="argument" name="loader" />
        <variable ilk="argument" name="mod_name" />
        <variable citdl="getattr()" line="72" name="meth" />
      </scope>
      <scope attributes="protected __hidden__" doc="Helper for _run_module_code" ilk="function" line="24" lineend="35" name="_run_code" signature="_run_code(code, run_globals, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None)">
        <variable ilk="argument" name="code" />
        <variable ilk="argument" name="run_globals" />
        <variable ilk="argument" name="init_globals" />
        <variable ilk="argument" name="mod_name" />
        <variable ilk="argument" name="mod_fname" />
        <variable ilk="argument" name="mod_loader" />
        <variable ilk="argument" name="pkg_name" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="78" lineend="95" name="_get_module_details" returns="tuple" signature="_get_module_details(mod_name)">
        <variable ilk="argument" name="mod_name" />
        <variable citdl="get_loader()" line="79" name="loader" />
        <variable citdl="str" line="86" name="pkg_main_name" />
        <variable citdl="loader.get_code()" line="91" name="code" />
        <variable citdl="_get_filename()" line="94" name="filename" />
      </scope>
      <scope attributes="protected __hidden__" doc="Helper for run_module" ilk="function" line="37" lineend="63" name="_run_module_code" returns="mod_globals.copy()" signature="_run_module_code(code, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None)">
        <variable ilk="argument" name="code" />
        <variable ilk="argument" name="init_globals" />
        <variable ilk="argument" name="mod_name" />
        <variable ilk="argument" name="mod_fname" />
        <variable ilk="argument" name="mod_loader" />
        <variable ilk="argument" name="pkg_name" />
        <variable citdl="imp.new_module()" line="42" name="temp_module" />
        <variable citdl="dict" line="43" name="mod_globals" />
        <variable line="45" name="saved_argv0" />
        <variable citdl="bool" line="46" name="restore_module" />
        <variable line="48" name="saved_module" />
      </scope>
      <scope attributes="protected __hidden__" doc="Runs the designated module in the __main__ namespace" ilk="function" line="102" lineend="128" name="_run_module_as_main" returns="_run_code()" signature="_run_module_as_main(mod_name, set_argv0=True)">
        <variable ilk="argument" name="mod_name" />
        <variable citdl="True" ilk="argument" name="set_argv0" />
        <variable citdl="str()" line="116" name="info" />
        <variable citdl="str" line="121" name="msg" />
        <variable line="123" name="pkg_name" />
        <variable line="124" name="main_globals" />
      </scope>
    </scope>
    <scope doc="This module provides access to the garbage collector for reference cycles.  enable() -- Enable automatic garbage collection." ilk="blob" lang="Python3" name="gc">
      <variable citdl="int" name="DEBUG_COLLECTABLE" />
      <variable citdl="int" name="DEBUG_LEAK" />
      <variable citdl="int" name="DEBUG_SAVEALL" />
      <variable citdl="int" name="DEBUG_STATS" />
      <variable citdl="int" name="DEBUG_UNCOLLECTABLE" />
      <scope doc="With no arguments, run a full collection." ilk="function" name="collect" signature="collect([generation]) -&gt; n" />
      <scope doc="Disable automatic garbage collection." ilk="function" name="disable" signature="disable() -&gt; None" />
      <scope doc="Enable automatic garbage collection." ilk="function" name="enable" signature="enable() -&gt; None" />
      <variable citdl="list" name="garbage" />
      <scope doc="Return the current collection counts" ilk="function" name="get_count" signature="get_count() -&gt; (count0, count1, count2)" />
      <scope doc="Get the garbage collection debugging flags." ilk="function" name="get_debug" signature="get_debug() -&gt; flags" />
      <scope doc="Return a list of objects tracked by the collector (excluding the list returned)." ilk="function" name="get_objects" signature="get_objects() -&gt; [...]" />
      <scope doc="Return the list of objects that are directly referred to by objs." ilk="function" name="get_referents" returns="list" signature="get_referents(*objs) -&gt; list" />
      <scope doc="Return the list of objects that directly refer to any of objs." ilk="function" name="get_referrers" returns="list" signature="get_referrers(*objs) -&gt; list" />
      <scope doc="Return the current collection thresholds" ilk="function" name="get_threshold" signature="get_threshold() -&gt; (threshold0, threshold1, threshold2)" />
      <scope doc="Returns true if the object is tracked by the garbage collector." ilk="function" name="is_tracked" returns="bool" signature="is_tracked(obj) -&gt; bool" />
      <scope doc="Returns true if automatic garbage collection is enabled." ilk="function" name="isenabled" signature="isenabled() -&gt; status" />
      <scope doc="Set the garbage collection debugging flags." ilk="function" name="set_debug" signature="set_debug(flags) -&gt; None" />
      <scope doc="Sets the collection thresholds." ilk="function" name="set_threshold" signature="set_threshold(threshold0, [threshold1, threshold2]) -&gt; None" />
    </scope>
    <scope doc="Provide access to Python&apos;s configuration information.  The specific configuration variables available depend heavily on the platform and configuration.  The values may be retrieved using" ilk="blob" lang="Python3" name="distutils.sysconfig">
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <variable citdl="str" line="23" name="EXEC_PREFIX" />
      <variable citdl="str" line="22" name="PREFIX" />
      <variable citdl="str" line="12" name="__revision__" />
      <scope doc="Do any platform-specific customization of a CCompiler instance." ilk="function" line="156" lineend="203" name="customize_compiler" signature="customize_compiler(compiler)">
        <variable citdl="str" line="193" name="cc_cmd" />
        <variable line="168" name="cc" />
        <variable line="170" name="cxx" />
        <variable line="187" name="ar" />
        <variable citdl="str" line="189" name="archiver" />
        <variable citdl="str" line="180" name="cflags" />
        <variable citdl="str" line="172" name="ldshared" />
        <variable citdl="str" line="174" name="cpp" />
        <variable ilk="argument" name="compiler" />
      </scope>
      <scope doc="Expand Makefile-style variables -- &quot;${foo}&quot; or &quot;$(foo)&quot; -- in &apos;string&apos; according to &apos;vars&apos; (a dictionary mapping variable names to values)." ilk="function" line="344" lineend="366" name="expand_makefile_vars" returns="vars.get()" signature="expand_makefile_vars(s, vars)">
        <variable citdl="list" ilk="argument" name="s" />
        <variable citdl="_findvar1_rx.search()" line="360" name="m" />
        <variable ilk="argument" name="vars" />
      </scope>
      <scope doc="Return full pathname of installed pyconfig.h file." ilk="function" line="206" lineend="220" name="get_config_h_filename" returns="os.path.join()" signature="get_config_h_filename()">
        <variable citdl="str" line="216" name="config_h" />
        <variable citdl="get_python_inc()" line="210" name="inc_dir" />
      </scope>
      <scope doc="Return the value of a single variable using the dictionary returned by &apos;get_config_vars()&apos;." ilk="function" line="578" lineend="583" name="get_config_var" signature="get_config_var(name)">
        <variable ilk="argument" name="name" />
      </scope>
      <scope doc="With no arguments, return a dictionary of all configuration variables relevant for the current platform." ilk="function" line="494" lineend="576" name="get_config_vars" returns="list" signature="get_config_vars(*args)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable line="533" name="kernel_version" />
        <variable citdl="int()" line="534" name="major_version" />
        <variable citdl="os.path.dirname()" line="523" name="base" />
        <variable citdl="re.sub()" line="545" name="flags" />
        <variable line="506" name="func" />
        <variable citdl="list" line="571" name="vals" />
        <variable citdl="os.path.join()" line="529" name="srcdir" />
        <variable line="559" name="arch" />
        <variable attributes="protected" citdl="dict" line="510" name="_config_vars" />
      </scope>
      <scope doc="Return full pathname of installed Makefile from the Python build." ilk="function" line="223" lineend="228" name="get_makefile_filename" returns="os.path.join()" signature="get_makefile_filename()">
        <variable citdl="get_python_lib()" line="227" name="lib_dir" />
      </scope>
      <scope doc="Return the directory containing installed Python header files." ilk="function" line="60" lineend="99" name="get_python_inc" returns="os.path.dirname()" signature="get_python_inc(plat_specific=0, prefix=None)">
        <variable citdl="int" ilk="argument" name="prefix" />
        <variable citdl="int" ilk="argument" name="plat_specific" />
        <variable citdl="os.path.dirname()" line="80" name="base" />
        <variable citdl="os.path.join()" line="84" name="incdir" />
      </scope>
      <scope doc="Return the directory containing the Python library (standard or site additions)." ilk="function" line="102" lineend="153" name="get_python_lib" returns="os.path.join()" signature="get_python_lib(plat_specific=0, standard_lib=0, prefix=None)">
        <variable citdl="int" ilk="argument" name="prefix" />
        <variable citdl="int" ilk="argument" name="plat_specific" />
        <variable citdl="int" ilk="argument" name="standard_lib" />
        <variable citdl="os.path.join()" line="120" name="libpython" />
      </scope>
      <scope doc="Return a string containing the major and minor Python version, leaving off the patchlevel." ilk="function" line="52" lineend="57" name="get_python_version" returns="list" signature="get_python_version()" />
      <import module="io" />
      <import module="os" />
      <scope doc="Parse a config.h-style file." ilk="function" line="231" lineend="257" name="parse_config_h" returns="dict" signature="parse_config_h(fp, g=None)">
        <variable ilk="argument" name="fp" />
        <variable citdl="dict" ilk="argument" name="g" />
        <variable citdl="undef_rx.match()" line="247" name="m" />
        <variable citdl="re.compile()" line="241" name="undef_rx" />
        <variable citdl="int()" line="250" name="v" />
        <variable citdl="fp.readline()" line="244" name="line" />
        <variable citdl="re.compile()" line="240" name="define_rx" />
      </scope>
      <scope doc="Parse a Makefile-style file." ilk="function" line="266" lineend="341" name="parse_makefile" returns="dict" signature="parse_makefile(fn, g=None)">
        <variable citdl="TextFile()" line="274" name="fp" />
        <variable citdl="dict" ilk="argument" name="g" />
        <variable citdl="list" line="322" name="after" />
        <variable citdl="_variable_rx.match()" line="285" name="m" />
        <variable citdl="list" line="306" name="value" />
        <variable citdl="m.group()" line="309" name="n" />
        <variable citdl="str()" line="312" name="item" />
        <variable citdl="dict" line="278" name="done" />
        <variable citdl="v.strip()" line="288" name="v" />
        <variable citdl="dict" line="279" name="notdone" />
        <variable citdl="False" line="310" name="found" />
        <variable citdl="fp.readline()" line="282" name="line" />
        <variable citdl="v.replace()" line="290" name="tmpv" />
        <variable ilk="argument" name="fn" />
      </scope>
      <variable citdl="str" line="28" name="project_base" />
      <variable citdl="bool" line="50" name="python_build" />
      <import module="re" />
      <import module="sys" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="263" name="_findvar1_rx" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="264" name="_findvar2_rx" />
      <scope attributes="protected __hidden__" doc="Initialize the module as appropriate for Macintosh systems" ilk="function" line="451" lineend="474" name="_init_mac" signature="_init_mac()">
        <import line="461" module="MacOS" />
        <variable citdl="dict" line="453" name="g" />
        <variable attributes="protected" citdl="dict" line="474" name="_config_vars" />
      </scope>
      <variable attributes="protected __hidden__" line="369" name="_config_vars" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="262" name="_variable_rx" />
      <scope attributes="protected __hidden__" doc="Initialize the module as appropriate for NT" ilk="function" line="432" lineend="448" name="_init_nt" signature="_init_nt()">
        <variable citdl="dict" line="434" name="g" />
        <variable attributes="protected" citdl="dict" line="448" name="_config_vars" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="45" lineend="49" name="_python_build" returns="bool" signature="_python_build()" />
      <scope attributes="protected __hidden__" doc="Initialize the module as appropriate for POSIX systems." ilk="function" line="371" lineend="429" name="_init_posix" signature="_init_posix()">
        <variable citdl="dict" line="373" name="g" />
        <variable citdl="get_config_h_filename()" line="376" name="filename" />
        <variable citdl="str" line="379" name="my_msg" />
        <variable line="401" name="cfg_target" />
        <variable citdl="os.getenv()" line="402" name="cur_target" />
        <variable citdl="get_python_lib()" line="422" name="python_lib" />
        <variable citdl="os.path.join()" line="423" name="ld_so_aix" />
        <variable citdl="os.path.join()" line="424" name="python_exp" />
        <variable attributes="protected" citdl="dict" line="429" name="_config_vars" />
      </scope>
      <scope attributes="protected __hidden__" doc="Initialize the module as appropriate for OS/2" ilk="function" line="477" lineend="491" name="_init_os2" signature="_init_os2()">
        <variable citdl="dict" line="479" name="g" />
        <variable attributes="protected" citdl="dict" line="491" name="_config_vars" />
      </scope>
    </scope>
    <scope doc="Drop-in replacement for the thread module.  Meant to be used as a brain-dead substitute so that threaded code does" ilk="blob" lang="Python3" name="_dummy_thread">
      <scope classrefs="object" doc="Class implementing dummy implementation of _thread.LockType.  Compatibility is maintained by maintaining self.locked_status" ilk="class" line="81" lineend="131" name="LockType">
        <variable attributes="__instancevar__" citdl="True" line="93" name="locked_status" />
        <scope doc="Dummy implementation of acquire()." ilk="function" line="95" lineend="114" name="acquire" returns="bool" signature="acquire(waitflag=None)">
          <variable citdl="LockType" ilk="argument" name="self" />
          <variable ilk="argument" name="waitflag" />
        </scope>
        <scope ilk="function" line="118" lineend="119" name="__exit__" signature="__exit__(typ, val, tb)">
          <variable citdl="LockType" ilk="argument" name="self" />
          <variable ilk="argument" name="typ" />
          <variable ilk="argument" name="val" />
          <variable ilk="argument" name="tb" />
        </scope>
        <variable citdl="LockType.acquire" line="116" name="__enter__" />
        <scope doc="Release the dummy lock." ilk="function" line="121" lineend="128" name="release" returns="bool" signature="release()">
          <variable citdl="LockType" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="130" lineend="131" name="locked" returns="bool" signature="locked()">
          <variable citdl="LockType" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="92" lineend="93" name="__init__" signature="LockType()">
          <variable citdl="LockType" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="list" line="16" name="__all__" />
      <import module="_traceback" />
      <scope doc="Dummy implementation of _thread.allocate_lock()." ilk="function" line="71" lineend="73" name="allocate_lock" returns="LockType()" signature="allocate_lock()" />
      <scope classrefs="Exception" doc="Dummy implementation of _thread.error." ilk="class" line="21" lineend="25" name="error">
        <variable attributes="__instancevar__" line="25" name="args" />
        <scope attributes="__ctor__" ilk="function" line="24" lineend="25" name="__init__" signature="error(*args)">
          <variable citdl="error" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
      </scope>
      <scope doc="Dummy implementation of _thread.exit()." ilk="function" line="58" lineend="60" name="exit" signature="exit()" />
      <scope doc="Dummy implementation of _thread.get_ident()." ilk="function" line="62" lineend="69" name="get_ident" returns="int" signature="get_ident()" />
      <scope doc="Set _interrupt flag to True to have start_new_thread raise KeyboardInterrupt upon exiting." ilk="function" line="138" lineend="145" name="interrupt_main" signature="interrupt_main()">
        <variable attributes="protected" citdl="True" line="145" name="_interrupt" />
      </scope>
      <scope doc="Dummy implementation of _thread.stack_size()." ilk="function" line="75" lineend="79" name="stack_size" returns="int" signature="stack_size(size=None)">
        <variable ilk="argument" name="size" />
      </scope>
      <scope doc="Dummy implementation of _thread.start_new_thread()." ilk="function" line="27" lineend="56" name="start_new_thread" signature="start_new_thread(function, args, kwargs={})">
        <variable ilk="argument" name="function" />
        <variable attributes="protected" citdl="False" line="55" name="_interrupt" />
        <variable ilk="argument" name="args" />
        <variable attributes="protected" citdl="True" line="45" name="_main" />
        <variable citdl="dict" ilk="argument" name="kwargs" />
      </scope>
      <variable attributes="protected __hidden__" citdl="False" line="134" name="_interrupt" />
      <variable attributes="protected __hidden__" citdl="True" line="136" name="_main" />
    </scope>
    <scope doc="# Autogenerated by Sphinx on Fri Jun 26 08:03:32 2009" ilk="blob" lang="Python3" name="pydoc_data.topics">
      <variable citdl="dict" line="2" name="topics" />
    </scope>
    <scope doc="Support to pretty-print lists, tuples, &amp; dictionaries recursively.  Very simple, but useful, especially in debugging data structures." ilk="blob" lang="Python3" name="pprint">
      <scope classrefs="object" ilk="class" line="99" lineend="254" name="PrettyPrinter">
        <variable attributes="protected __instancevar__" line="123" name="_depth" />
        <scope ilk="function" line="131" lineend="133" name="pprint" signature="pprint(object)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
        <scope ilk="function" line="143" lineend="145" name="isreadable" returns="readable" signature="isreadable(object)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="124" name="_indent_per_level" />
        <variable attributes="protected __instancevar__" citdl="_sys.stdout" line="127" name="_stream" />
        <scope attributes="protected" ilk="function" line="147" lineend="238" name="_format" signature="_format(object, stream, indent, allowance, context, level)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable citdl="sorted()" ilk="argument" name="object" />
          <variable ilk="argument" name="stream" />
          <variable citdl="int()" ilk="argument" name="indent" />
          <variable ilk="argument" name="allowance" />
          <variable ilk="argument" name="context" />
          <variable citdl="int" ilk="argument" name="level" />
          <variable citdl="_id()" line="149" name="objid" />
          <variable citdl="self._repr()" line="155" name="rep" />
          <variable citdl="_type()" line="156" name="typ" />
          <variable citdl="bool" line="157" name="sepLines" />
          <variable citdl="stream.write" line="158" name="write" />
          <variable citdl="getattr()" line="165" name="r" />
          <variable citdl="_len()" line="170" name="length" />
          <variable citdl="sorted()" line="174" name="items" />
          <variable citdl="str" line="200" name="endchar" />
        </scope>
        <scope doc="Format object for a specific context, returning a string and flags indicating whether the representation is &apos;readable&apos; and whether the object represents a recursive construct." ilk="function" line="249" lineend="254" name="format" returns="_safe_repr()" signature="format(object, context, maxlevels, level)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="maxlevels" />
          <variable ilk="argument" name="level" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="125" name="_width" />
        <variable attributes="protected __instancevar__" citdl="True" line="152" name="_recursive" />
        <scope ilk="function" line="135" lineend="138" name="pformat" returns="sio.getvalue()" signature="pformat(object)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable citdl="_StringIO()" line="136" name="sio" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="153" name="_readable" />
        <scope attributes="protected" ilk="function" line="240" lineend="247" name="_repr" returns="repr" signature="_repr(object, context, level)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope attributes="__ctor__" doc="Handle pretty printing operations onto a stream using a set of configured parameters." ilk="function" line="100" lineend="129" name="__init__" signature="PrettyPrinter(indent=1, width=80, depth=None, stream=None)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="indent" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable ilk="argument" name="depth" />
          <variable ilk="argument" name="stream" />
        </scope>
        <scope ilk="function" line="140" lineend="141" name="isrecursive" signature="isrecursive(object)">
          <variable citdl="PrettyPrinter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
      </scope>
      <variable citdl="list" line="41" name="__all__" />
      <import module="_sys" />
      <scope doc="Determine if saferepr(object) is readable by eval()." ilk="function" line="65" lineend="67" name="isreadable" signature="isreadable(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Determine if object requires a recursive representation." ilk="function" line="69" lineend="71" name="isrecursive" signature="isrecursive(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Format a Python object into a pretty-printed representation." ilk="function" line="57" lineend="59" name="pformat" signature="pformat(object, indent=1, width=80, depth=None)">
        <variable citdl="int" ilk="argument" name="width" />
        <variable ilk="argument" name="depth" />
        <variable ilk="argument" name="object" />
        <variable citdl="int" ilk="argument" name="indent" />
      </scope>
      <scope doc="Pretty-print a Python object to a stream [default is sys.stdout]." ilk="function" line="51" lineend="55" name="pprint" signature="pprint(object, stream=None, indent=1, width=80, depth=None)">
        <variable citdl="PrettyPrinter()" line="53" name="printer" />
        <variable citdl="int" ilk="argument" name="indent" />
        <variable ilk="argument" name="stream" />
        <variable ilk="argument" name="object" />
        <variable citdl="int" ilk="argument" name="width" />
        <variable ilk="argument" name="depth" />
      </scope>
      <scope doc="Version of repr() which can handle recursive data structures." ilk="function" line="61" lineend="63" name="saferepr" signature="saferepr(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="349" lineend="360" name="_perfcheck" signature="_perfcheck(object=None)">
        <import line="350" module="time" />
        <variable citdl="list" ilk="argument" name="object" />
        <variable citdl="PrettyPrinter" line="353" name="p" />
        <variable citdl="time.time()" line="354" name="t1" />
        <variable citdl="time.time()" line="356" name="t2" />
        <variable citdl="time.time()" line="358" name="t3" />
      </scope>
      <variable attributes="protected __hidden__" citdl="type" line="48" name="_type" />
      <variable attributes="protected __hidden__" citdl="len" line="47" name="_len" />
      <scope attributes="protected __hidden__" ilk="function" line="344" lineend="346" name="_recursion" returns="tuple" signature="_recursion(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="259" lineend="341" name="_safe_repr" returns="tuple" signature="_safe_repr(object, context, maxlevels, level)">
        <variable ilk="argument" name="object" />
        <variable ilk="argument" name="context" />
        <variable ilk="argument" name="maxlevels" />
        <variable ilk="argument" name="level" />
        <variable citdl="_type()" line="260" name="typ" />
        <variable citdl="str" line="265" name="closure" />
        <variable citdl="dict" line="266" name="quotes" />
        <variable citdl="quotes.get" line="270" name="qget" />
        <variable citdl="_StringIO()" line="271" name="sio" />
        <variable citdl="sio.write" line="272" name="write" />
        <variable citdl="getattr()" line="280" name="r" />
        <variable citdl="_id()" line="284" name="objid" />
        <variable citdl="True" line="290" name="readable" />
        <variable citdl="False" line="291" name="recursive" />
        <variable citdl="list" line="292" name="components" />
        <variable citdl="components.append" line="293" name="append" />
        <variable citdl="_safe_repr" line="295" name="saferepr" />
        <variable citdl="sorted()" line="296" name="items" />
        <variable citdl="str" line="312" name="format" />
        <variable citdl="repr()" line="340" name="rep" />
      </scope>
      <scope attributes="protected __hidden__" doc="Helper function for key functions when sorting unorderable objects." ilk="class" line="73" lineend="93" name="_safe_key">
        <variable citdl="list" line="83" name="__slots__" />
        <scope attributes="__ctor__" ilk="function" line="85" lineend="86" name="__init__" signature="_safe_key(obj)">
          <variable citdl="_safe_key" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
        </scope>
        <variable attributes="__instancevar__" line="86" name="obj" />
        <scope ilk="function" line="88" lineend="93" name="__lt__" returns="bool" signature="__lt__(other)">
          <variable citdl="_safe_key" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="bool" line="89" name="rv" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Helper function for comparing 2-tuples" ilk="function" line="95" lineend="97" name="_safe_tuple" returns="tuple" signature="_safe_tuple(t)">
        <variable ilk="argument" name="t" />
      </scope>
      <variable attributes="protected __hidden__" citdl="str.join" line="45" name="_commajoin" />
      <variable attributes="protected __hidden__" citdl="id" line="46" name="_id" />
    </scope>
    <scope doc="Fixer for exec.  This converts usages of the exec statement into calls to a built-in" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_exec">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" ilk="class" line="18" lineend="39" name="FixExec">
        <variable citdl="str" line="20" name="PATTERN" />
        <scope ilk="function" line="26" lineend="39" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixExec" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="self.syms" line="28" name="syms" />
          <variable line="29" name="a" />
          <variable citdl="results.get()" line="30" name="b" />
          <variable citdl="results.get()" line="31" name="c" />
          <variable citdl="list" line="32" name="args" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <import module="pytree" />
    </scope>
    <scope doc="Random variable generators.      integers" ilk="blob" lang="Python3" name="random">
      <variable citdl="int" line="59" name="BPF" />
      <variable citdl="float" line="57" name="LOG4" />
      <variable citdl="float" line="55" name="NV_MAGICCONST" />
      <variable citdl="float" line="60" name="RECIP_BPF" />
      <scope classrefs="Random" doc="Random number generator base class used by bound module functions.  Used to instantiate instances of Random to get generators that don&apos;t" ilk="class" line="69" lineend="623" name="Random">
        <scope doc="Pareto distribution. alpha is the shape parameter." ilk="function" line="605" lineend="610" name="paretovariate" returns="pow()" signature="paretovariate(alpha)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="alpha" />
          <variable citdl="self.random()" line="609" name="u" />
        </scope>
        <scope doc="x, random=random.random -&gt; shuffle list x in place; return None." ilk="function" line="258" lineend="270" name="shuffle" signature="shuffle(x, random=None, int=int)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable citdl="self.random" ilk="argument" name="random" />
          <variable citdl="int" ilk="argument" name="int" />
          <variable citdl="int()" line="269" name="j" />
        </scope>
        <scope doc="Choose a random item from range(start, stop[, step])." ilk="function" line="155" lineend="217" name="randrange" returns="Random.randrange.int()" signature="randrange(start, stop=None, step=1, int=int, default=None, maxwidth=1&lt;&lt;BPF)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="stop" />
          <variable citdl="int" ilk="argument" name="step" />
          <variable citdl="int" ilk="argument" name="int" />
          <variable ilk="argument" name="default" />
          <variable citdl="int" ilk="argument" name="maxwidth" />
          <variable citdl="int()" line="166" name="istart" />
          <variable citdl="int()" line="177" name="istop" />
          <variable citdl="int()" line="180" name="width" />
          <variable citdl="int()" line="202" name="istep" />
          <variable citdl="int" line="206" name="n" />
        </scope>
        <scope doc="Beta distribution." ilk="function" line="587" lineend="601" name="betavariate" returns="gammavariate()" signature="betavariate(alpha, beta)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="alpha" />
          <variable ilk="argument" name="beta" />
          <variable citdl="gammavariate()" line="597" name="y" />
        </scope>
        <scope ilk="function" line="150" lineend="151" name="__reduce__" returns="tuple" signature="__reduce__()">
          <variable citdl="Random" ilk="argument" name="self" />
        </scope>
        <scope doc="Normal distribution." ilk="function" line="360" lineend="381" name="normalvariate" returns="Random.normalvariate.random()" signature="normalvariate(mu, sigma)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="mu" />
          <variable ilk="argument" name="sigma" />
          <variable citdl="self.random" line="373" name="random" />
          <variable citdl="random()" line="375" name="u1" />
          <variable citdl="Random.normalvariate.random()" line="376" name="u2" />
          <variable citdl="_sqrt()" line="377" name="z" />
          <variable citdl="_exp()" line="378" name="zz" />
        </scope>
        <scope doc="Chooses k unique random elements from a population sequence or set." ilk="function" line="272" lineend="329" name="sample" returns="list" signature="sample(population, k)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable citdl="tuple()" ilk="argument" name="population" />
          <variable ilk="argument" name="k" />
          <variable citdl="self.random" line="304" name="random" />
          <variable citdl="len()" line="305" name="n" />
          <variable attributes="protected" citdl="int" line="308" name="_int" />
          <variable citdl="list" line="309" name="result" />
          <variable citdl="int" line="310" name="setsize" />
          <variable citdl="list()" line="315" name="pool" />
          <variable citdl="_int()" line="317" name="j" />
          <variable citdl="set()" line="321" name="selected" />
          <variable citdl="selected.add" line="322" name="selected_add" />
        </scope>
        <scope doc="Initialize internal state from hashable object." ilk="function" line="94" lineend="111" name="seed" signature="seed(a=None)">
          <import line="107" module="time" />
          <variable citdl="Random" ilk="argument" name="self" />
          <variable citdl="int()" ilk="argument" name="a" />
        </scope>
        <scope doc="Weibull distribution." ilk="function" line="614" lineend="623" name="weibullvariate" returns="pow()" signature="weibullvariate(alpha, beta)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="alpha" />
          <variable ilk="argument" name="beta" />
          <variable citdl="self.random()" line="622" name="u" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize an instance." ilk="function" line="85" lineend="92" name="__init__" signature="Random(x=None)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <variable attributes="__instancevar__" citdl="_sin()" line="92" name="gauss_next" />
        <scope doc="Circular data distribution." ilk="function" line="418" lineend="464" name="vonmisesvariate" returns="Random.vonmisesvariate.random()" signature="vonmisesvariate(mu, kappa)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="mu" />
          <variable ilk="argument" name="kappa" />
          <variable citdl="self.random" line="438" name="random" />
          <variable citdl="_sqrt()" line="442" name="a" />
          <variable citdl="_sqrt()" line="443" name="b" />
          <variable citdl="_sqrt()" line="444" name="r" />
          <variable citdl="random()" line="447" name="u1" />
          <variable citdl="_cos()" line="449" name="z" />
          <variable citdl="_sqrt()" line="450" name="f" />
          <variable citdl="_sqrt()" line="451" name="c" />
          <variable citdl="random()" line="453" name="u2" />
          <variable citdl="random()" line="458" name="u3" />
          <variable citdl="_acos()" line="460" name="theta" />
        </scope>
        <scope doc="Gamma distribution." ilk="function" line="468" lineend="530" name="gammavariate" returns="_exp()" signature="gammavariate(alpha, beta)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="alpha" />
          <variable ilk="argument" name="beta" />
          <variable citdl="self.random" line="482" name="random" />
          <variable citdl="_sqrt()" line="489" name="ainv" />
          <variable citdl="_log()" line="490" name="bbb" />
          <variable citdl="_sqrt()" line="491" name="ccc" />
          <variable citdl="random()" line="494" name="u1" />
          <variable citdl="Random.gammavariate.random()" line="497" name="u2" />
          <variable citdl="_log()" line="498" name="v" />
          <variable citdl="_log()" line="499" name="x" />
          <variable citdl="random()" line="500" name="z" />
          <variable citdl="_sqrt()" line="501" name="r" />
          <variable citdl="random()" line="507" name="u" />
          <variable citdl="_e" line="518" name="b" />
          <variable citdl="random()" line="519" name="p" />
        </scope>
        <scope doc="Get a random number in the range [a, b) or [a, b] depending on rounding." ilk="function" line="335" lineend="337" name="uniform" returns="self.random()" signature="uniform(a, b)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="Exponential distribution." ilk="function" line="397" lineend="414" name="expovariate" returns="_log()" signature="expovariate(lambd)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="lambd" />
          <variable citdl="self.random" line="410" name="random" />
          <variable citdl="random()" line="411" name="u" />
        </scope>
        <scope attributes="protected" doc="Return a random int in the range [0,n)" ilk="function" line="225" lineend="250" name="_randbelow" returns="Random._randbelow.int()" signature="_randbelow(n, _log=_log, int=int, _maxwidth=1&lt;&lt;BPF, _Method=_MethodType, _BuiltinMethod=_BuiltinMethodType)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="n" />
          <variable citdl="_log" ilk="argument" name="_log" />
          <variable citdl="int" ilk="argument" name="int" />
          <variable citdl="int" ilk="argument" name="_maxwidth" />
          <variable citdl="_MethodType" ilk="argument" name="_Method" />
          <variable citdl="_BuiltinMethodType" ilk="argument" name="_BuiltinMethod" />
          <variable citdl="self.getrandbits" line="234" name="getrandbits" />
          <variable citdl="int()" line="242" name="k" />
          <variable citdl="getrandbits()" line="243" name="r" />
        </scope>
        <scope doc="Restore internal state from object returned by getstate()." ilk="function" line="117" lineend="137" name="setstate" signature="setstate(state)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
          <variable line="119" name="version" />
          <variable citdl="tuple()" line="130" name="internalstate" />
        </scope>
        <scope doc="Log normal distribution." ilk="function" line="385" lineend="393" name="lognormvariate" returns="_exp()" signature="lognormvariate(mu, sigma)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="mu" />
          <variable ilk="argument" name="sigma" />
        </scope>
        <scope ilk="function" line="147" lineend="148" name="__setstate__" signature="__setstate__(state)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
        <scope doc="Triangular distribution." ilk="function" line="341" lineend="356" name="triangular" returns="self.random()" signature="triangular(low=0.0, high=1.0, mode=None)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable citdl="float" ilk="argument" name="low" />
          <variable citdl="float" ilk="argument" name="high" />
          <variable ilk="argument" name="mode" />
          <variable citdl="self.random()" line="350" name="u" />
          <variable citdl="float" line="351" name="c" />
        </scope>
        <scope doc="Gaussian distribution." ilk="function" line="534" lineend="571" name="gauss" returns="_cos()" signature="gauss(mu, sigma)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="mu" />
          <variable ilk="argument" name="sigma" />
          <variable citdl="self.random" line="562" name="random" />
          <variable citdl="_cos()" line="563" name="z" />
          <variable citdl="_pi" line="566" name="x2pi" />
          <variable citdl="_sqrt()" line="567" name="g2rad" />
        </scope>
        <scope doc="Choose a random element from a non-empty sequence." ilk="function" line="254" lineend="256" name="choice" signature="choice(seq)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="seq" />
        </scope>
        <variable citdl="int" line="83" name="VERSION" />
        <scope ilk="function" line="144" lineend="145" name="__getstate__" returns="Random.getstate()" signature="__getstate__()">
          <variable citdl="Random" ilk="argument" name="self" />
        </scope>
        <scope doc="Return random integer in range [a, b], including both end points." ilk="function" line="219" lineend="223" name="randint" returns="Random.randrange()" signature="randint(a, b)">
          <variable citdl="Random" ilk="argument" name="self" />
          <variable ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="Return internal state; can be passed to setstate() later." ilk="function" line="113" lineend="115" name="getstate" returns="tuple" signature="getstate()">
          <variable citdl="Random" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="float" line="58" name="SG_MAGICCONST" />
      <scope classrefs="Random" doc="Alternate random number generator using sources provided by the operating system (such as /dev/urandom on Unix or CryptGenRandom on Windows)." ilk="class" line="627" lineend="656" name="SystemRandom">
        <scope attributes="protected" doc="Method should not be called for a system random number generator." ilk="function" line="653" lineend="655" name="_notimplemented" signature="_notimplemented(*args, **kwds)">
          <variable citdl="SystemRandom" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
        <scope doc="Get the next random number in the range [0.0, 1.0)." ilk="function" line="635" lineend="637" name="random" returns="int" signature="random()">
          <variable citdl="SystemRandom" ilk="argument" name="self" />
        </scope>
        <scope doc="Stub method. Not used for a system random number generator." ilk="function" line="649" lineend="651" name="seed" signature="seed(*args, **kwds)">
          <variable citdl="SystemRandom" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
        <variable citdl="SystemRandom._notimplemented" line="656" name="getstate" />
        <scope ilk="function" line="639" lineend="647" name="getrandbits" returns="int" signature="getrandbits(k) -&gt; x.  Generates a long int with k random bits.">
          <variable citdl="SystemRandom" ilk="argument" name="self" />
          <variable ilk="argument" name="k" />
          <variable citdl="int" line="645" name="bytes" />
          <variable citdl="int()" line="646" name="x" />
        </scope>
      </scope>
      <variable citdl="float" line="56" name="TWOPI" />
      <variable citdl="list" line="48" name="__all__" />
      <import module="_collections" />
      <import module="_random" />
      <scope doc="Beta distribution." ilk="function" line="722" name="betavariate" />
      <scope doc="Choose a random element from a non-empty sequence." ilk="function" line="712" name="choice" />
      <variable citdl="_Feature" name="division" />
      <scope doc="Exponential distribution." ilk="function" line="718" name="expovariate" />
      <scope doc="Gamma distribution." ilk="function" line="720" name="gammavariate" />
      <scope doc="Gaussian distribution." ilk="function" line="721" name="gauss" />
      <scope doc="getrandbits(k) -&gt; x.  Generates a long int with k random bits." ilk="function" line="727" name="getrandbits" signature="getrandbits(k) -&gt; x.  Generates a long int with k random bits." />
      <scope doc="Return internal state; can be passed to setstate() later." ilk="function" line="725" name="getstate" />
      <scope doc="Log normal distribution." ilk="function" line="717" name="lognormvariate" />
      <scope doc="Normal distribution." ilk="function" line="716" name="normalvariate" />
      <scope doc="Pareto distribution. alpha is the shape parameter." ilk="function" line="723" name="paretovariate" />
      <scope doc="Return random integer in range [a, b], including both end points." ilk="function" line="711" name="randint" />
      <scope doc="random() -&gt; x in the interval [0, 1)." ilk="function" line="708" name="random" signature="random() -&gt; x in the interval [0, 1)." />
      <scope doc="Choose a random item from range(start, stop[, step])." ilk="function" line="713" name="randrange" />
      <scope doc="Chooses k unique random elements from a population sequence or set." ilk="function" line="714" name="sample" />
      <scope doc="Initialize internal state from hashable object." ilk="function" line="707" name="seed" />
      <scope doc="Restore internal state from object returned by getstate()." ilk="function" line="726" name="setstate" />
      <scope doc="x, random=random.random -&gt; shuffle list x in place; return None." ilk="function" line="715" name="shuffle" />
      <scope doc="Triangular distribution." ilk="function" line="710" name="triangular" />
      <scope doc="Get a random number in the range [a, b) or [a, b] depending on rounding." ilk="function" line="709" name="uniform" />
      <scope doc="Circular data distribution." ilk="function" line="719" name="vonmisesvariate" />
      <scope doc="Weibull distribution." ilk="function" line="724" name="weibullvariate" />
      <scope attributes="protected __hidden__" ilk="function" line="682" lineend="698" name="_test" signature="_test(N=2000)">
        <variable citdl="int" ilk="argument" name="N" />
      </scope>
      <variable attributes="protected __hidden__" citdl="Random" line="706" name="_inst" />
      <scope attributes="protected __hidden__" ilk="function" line="660" lineend="679" name="_test_generator" signature="_test_generator(n, func, args)">
        <import line="661" module="time" />
        <variable ilk="argument" name="n" />
        <variable ilk="argument" name="func" />
        <variable ilk="argument" name="args" />
        <variable citdl="float" line="663" name="total" />
        <variable citdl="func()" line="664" name="sqsum" />
        <variable citdl="float" line="665" name="smallest" />
        <variable citdl="max()" line="666" name="largest" />
        <variable citdl="time.time()" line="667" name="t0" />
        <variable citdl="func()" line="669" name="x" />
        <variable citdl="time.time()" line="674" name="t1" />
        <variable citdl="float" line="676" name="avg" />
        <variable citdl="_sqrt()" line="677" name="stddev" />
      </scope>
    </scope>
    <scope doc="A collection of string constants.  Public module variables:" ilk="blob" lang="Python3" name="string">
      <scope classrefs="object" ilk="class" name="Formatter" />
      <scope classrefs="object" doc="A string class for supporting $-substitutions." ilk="class" name="Template" />
      <import module="_re" />
      <variable citdl="str" name="ascii_letters" />
      <variable citdl="str" name="ascii_lowercase" />
      <variable citdl="str" name="ascii_uppercase" />
      <scope doc="Split the argument into words using split, capitalize each word using capitalize, and join the capitalized words using join." ilk="function" name="capwords" returns="str" signature="capwords(s [,sep]) -&gt; string" />
      <variable citdl="str" name="digits" />
      <variable citdl="str" name="hexdigits" />
      <scope doc="Return a translation table (a bytes object of length 256) suitable for use in bytes.translate where each byte in frm is mapped to the byte at the same position in to." ilk="function" name="maketrans" signature="maketrans(frm, to) -&gt; bytes" />
      <variable citdl="str" name="octdigits" />
      <variable citdl="str" name="printable" />
      <variable citdl="str" name="punctuation" />
      <variable citdl="str" name="whitespace" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_elementtree">
      <scope ilk="function" name="Comment" signature="Comment(text=None)" />
      <scope ilk="function" name="Element" />
      <import module="ElementPath" />
      <scope classrefs="ElementTree" ilk="class" name="ElementTree" />
      <scope ilk="function" name="PI" signature="PI(target, text=None)" />
      <scope ilk="function" name="ProcessingInstruction" signature="ProcessingInstruction(target, text=None)" />
      <scope classrefs="object" ilk="class" name="QName" />
      <scope ilk="function" name="SubElement" />
      <scope ilk="function" name="TreeBuilder" />
      <variable citdl="str" name="VERSION" />
      <scope ilk="function" name="XML" signature="XML(text)" />
      <scope ilk="function" name="XMLID" signature="XMLID(text)" />
      <scope ilk="function" name="XMLParser" />
      <scope classrefs="Exception" doc="Invalid syntax." ilk="class" name="XMLParserError" />
      <scope ilk="function" name="XMLTreeBuilder" />
      <variable citdl="str" name="__version__" />
      <scope ilk="function" name="dump" signature="dump(elem)" />
      <scope ilk="function" name="fromstring" signature="fromstring(text)" />
      <scope ilk="function" name="iselement" signature="iselement(element)" />
      <scope classrefs="object" ilk="class" name="iterparse" />
      <scope ilk="function" name="parse" signature="parse(source, parser=None)" />
      <scope ilk="function" name="tostring" signature="tostring(element, encoding=None)" />
    </scope>
    <scope doc="Stuff to parse WAVE files.  Usage." ilk="blob" lang="Python3" name="wave">
      <scope classrefs="object" ilk="class" name="Chunk" />
      <scope classrefs="Exception" ilk="class" line="78" lineend="79" name="Error" />
      <variable citdl="int" line="81" name="WAVE_FORMAT_PCM" />
      <scope classrefs="object" doc="Variables used in this class:  These variables are available to the user though appropriate" ilk="class" line="94" lineend="272" name="Wave_read">
        <variable attributes="protected __instancevar__" citdl="int" line="149" name="_nframes" />
        <scope ilk="function" line="205" lineend="206" name="getcompname" returns="self._compname" signature="getcompname()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="208" lineend="211" name="getparams" returns="tuple" signature="getparams()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="219" lineend="223" name="setpos" signature="setpos(pos)">
          <variable citdl="Wave_read" ilk="argument" name="self" />
          <variable ilk="argument" name="pos" />
        </scope>
        <scope ilk="function" line="174" lineend="175" name="getfp" returns="Chunk()" signature="getfp()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Chunk()" line="128" name="_file" />
        <variable attributes="protected __instancevar__" citdl="int" line="133" name="_fmt_chunk_read" />
        <variable attributes="protected __instancevar__" citdl="self._nchannels" line="270" name="_framesize" />
        <variable attributes="protected __instancevar__" citdl="builtins.open()" line="157" name="_i_opened_the_file" />
        <variable attributes="protected __instancevar__" line="126" name="_convert" />
        <scope ilk="function" line="181" lineend="185" name="close" signature="close()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="156" lineend="167" name="__init__" signature="Wave_read(f)">
          <variable citdl="Wave_read" ilk="argument" name="self" />
          <variable citdl="builtins.open()" ilk="argument" name="f" />
        </scope>
        <scope ilk="function" line="196" lineend="197" name="getsampwidth" returns="self._sampwidth" signature="getsampwidth()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="263" lineend="272" name="_read_fmt_chunk" signature="_read_fmt_chunk(chunk)">
          <variable citdl="Wave_read" ilk="argument" name="self" />
          <variable ilk="argument" name="chunk" />
          <variable line="266" name="sampwidth" />
        </scope>
        <scope ilk="function" line="202" lineend="203" name="getcomptype" returns="self._comptype" signature="getcomptype()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="177" lineend="179" name="rewind" signature="rewind()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="225" lineend="257" name="readframes" returns="str" signature="readframes(nframes)">
          <import line="238" module="array" />
          <variable citdl="Wave_read" ilk="argument" name="self" />
          <variable ilk="argument" name="nframes" />
          <variable citdl="self._framesize" line="228" name="pos" />
          <variable citdl="chunk.file" line="239" name="chunk" />
          <variable citdl="_convert()" line="240" name="data" />
          <variable citdl="int" line="241" name="nitems" />
        </scope>
        <scope ilk="function" line="125" lineend="154" name="initfp" signature="initfp(file)">
          <variable citdl="Wave_read" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="Chunk()" line="138" name="chunk" />
          <variable citdl="chunk.getname()" line="141" name="chunkname" />
        </scope>
        <scope ilk="function" line="187" lineend="188" name="tell" returns="int" signature="tell()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="267" name="_sampwidth" />
        <scope ilk="function" line="169" lineend="170" name="__del__" signature="__del__()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Chunk()" line="134" name="_data_chunk" />
        <scope ilk="function" line="193" lineend="194" name="getnframes" returns="int" signature="getnframes()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="136" name="_data_seek_needed" />
        <variable attributes="protected __instancevar__" citdl="str" line="272" name="_compname" />
        <variable attributes="protected __instancevar__" citdl="str" line="271" name="_comptype" />
        <scope ilk="function" line="199" lineend="200" name="getframerate" returns="self._framerate" signature="getframerate()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="127" name="_soundpos" />
        <scope ilk="function" line="213" lineend="214" name="getmarkers" signature="getmarkers()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="216" lineend="217" name="getmark" signature="getmark(id)">
          <variable citdl="Wave_read" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
        </scope>
        <scope ilk="function" line="190" lineend="191" name="getnchannels" returns="self._nchannels" signature="getnchannels()">
          <variable citdl="Wave_read" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Variables used in this class:  These variables are user settable through appropriate methods" ilk="class" line="274" lineend="485" name="Wave_write">
        <variable attributes="protected __instancevar__" citdl="int" line="318" name="_nframes" />
        <scope ilk="function" line="384" lineend="385" name="getcompname" signature="getcompname()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="397" lineend="401" name="getparams" returns="tuple" signature="getparams()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="313" name="_file" />
        <scope ilk="function" line="329" lineend="334" name="setnchannels" signature="setnchannels(nchannels)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="nchannels" />
        </scope>
        <scope attributes="protected" ilk="function" line="461" lineend="474" name="_write_header" signature="_write_header(initlength)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="initlength" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="builtins.open()" line="301" name="_i_opened_the_file" />
        <variable attributes="protected __instancevar__" citdl="int" line="321" name="_datalength" />
        <variable attributes="protected __instancevar__" line="314" name="_convert" />
        <scope ilk="function" line="436" lineend="445" name="close" signature="close()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="300" lineend="310" name="__init__" signature="Wave_write(f)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable citdl="builtins.open()" ilk="argument" name="f" />
        </scope>
        <scope ilk="function" line="365" lineend="368" name="setnframes" signature="setnframes(nframes)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="nframes" />
        </scope>
        <scope ilk="function" line="415" lineend="429" name="writeframesraw" signature="writeframesraw(data)">
          <import line="421" module="array" />
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable citdl="_convert()" ilk="argument" name="data" />
          <variable citdl="int" line="417" name="nframes" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="len()" line="320" name="_datawritten" />
        <scope ilk="function" line="348" lineend="351" name="getsampwidth" returns="int" signature="getsampwidth()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="403" lineend="404" name="setmark" signature="setmark(id, pos, name)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="pos" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="381" lineend="382" name="getcomptype" signature="getcomptype()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="312" lineend="321" name="initfp" signature="initfp(file)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope ilk="function" line="387" lineend="395" name="setparams" signature="setparams(params)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="params" />
        </scope>
        <scope ilk="function" line="412" lineend="413" name="tell" returns="int" signature="tell()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="341" lineend="346" name="setsampwidth" signature="setsampwidth(sampwidth)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="sampwidth" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="316" name="_sampwidth" />
        <scope ilk="function" line="323" lineend="324" name="__del__" signature="__del__()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="317" name="_framerate" />
        <variable attributes="protected __instancevar__" citdl="self._file.tell()" line="466" name="_form_length_pos" />
        <scope attributes="protected" ilk="function" line="451" lineend="459" name="_ensure_header_written" signature="_ensure_header_written(datasize)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="datasize" />
        </scope>
        <scope ilk="function" line="370" lineend="371" name="getnframes" returns="int" signature="getnframes()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="315" name="_nchannels" />
        <variable attributes="protected __instancevar__" line="379" name="_compname" />
        <variable attributes="protected __instancevar__" citdl="self._file.tell()" line="473" name="_data_length_pos" />
        <variable attributes="protected __instancevar__" line="378" name="_comptype" />
        <scope attributes="protected" ilk="function" line="476" lineend="485" name="_patchheader" signature="_patchheader()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable citdl="self._file.tell()" line="479" name="curpos" />
        </scope>
        <scope ilk="function" line="360" lineend="363" name="getframerate" returns="int" signature="getframerate()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="353" lineend="358" name="setframerate" signature="setframerate(framerate)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="framerate" />
        </scope>
        <scope ilk="function" line="431" lineend="434" name="writeframes" signature="writeframes(data)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="319" name="_nframeswritten" />
        <scope ilk="function" line="409" lineend="410" name="getmarkers" signature="getmarkers()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="406" lineend="407" name="getmark" signature="getmark(id)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
        </scope>
        <scope ilk="function" line="373" lineend="379" name="setcomptype" signature="setcomptype(comptype, compname)">
          <variable citdl="Wave_write" ilk="argument" name="self" />
          <variable ilk="argument" name="comptype" />
          <variable ilk="argument" name="compname" />
        </scope>
        <scope ilk="function" line="336" lineend="339" name="getnchannels" returns="int" signature="getnchannels()">
          <variable citdl="Wave_write" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="list" line="76" name="__all__" />
      <variable citdl="int" line="88" name="big_endian" />
      <import module="builtins" />
      <scope ilk="function" line="487" lineend="498" name="open" returns="Wave_read" signature="open(f, mode=None)">
        <variable citdl="f.mode" ilk="argument" name="mode" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="500" name="openfp" signature="openfp(f, mode=None)" />
      <import module="struct" />
      <variable attributes="protected __hidden__" citdl="tuple" line="83" name="_array_fmts" />
    </scope>
    <scope doc="Quoted-printable content transfer encoding per RFCs 2045-2047.  This module handles the content transfer encoding method defined in RFC 2045" ilk="blob" lang="Python3" name="email.quoprimime">
      <variable citdl="str" line="46" name="CRLF" />
      <variable citdl="str" line="48" name="EMPTYSTRING" />
      <variable citdl="str" line="47" name="NL" />
      <variable citdl="list" line="29" name="__all__" />
      <variable citdl="str" name="ascii_letters" />
      <scope doc="Return True if the octet should be escaped with body quopri." ilk="function" line="78" lineend="80" name="body_check" returns="bool" signature="body_check(octet)">
        <variable ilk="argument" name="octet" />
      </scope>
      <scope doc="Decode a quoted-printable string." ilk="function" line="277" name="body_decode" signature="body_decode(encoded, eol=&apos;\n&apos;)" />
      <scope doc="Encode with quoted-printable, wrapping at maxlinelen characters." ilk="function" line="151" lineend="223" name="body_encode" returns="str" signature="body_encode(body, maxlinelen=76, eol=&apos;\n&apos;)">
        <variable ilk="argument" name="body" />
        <variable citdl="str" line="169" name="encoded_body" />
        <variable citdl="quote()" line="188" name="c" />
        <variable citdl="int" ilk="argument" name="maxlinelen" />
        <variable citdl="body.splitlines()" line="173" name="lines" />
        <variable citdl="str" ilk="argument" name="eol" />
        <variable citdl="str" line="182" name="encoded_line" />
        <variable citdl="int" line="170" name="lineno" />
        <variable citdl="list" line="177" name="line" />
        <variable citdl="quote()" line="183" name="prev" />
        <variable citdl="len()" line="184" name="linelen" />
      </scope>
      <scope doc="Return a body quoted-printable encoding length." ilk="function" line="96" lineend="103" name="body_length" returns="sum()" signature="body_length(bytearray)">
        <variable ilk="argument" name="bytearray" />
      </scope>
      <variable citdl="int" name="c" />
      <scope doc="Decode a quoted-printable string." ilk="function" line="229" lineend="273" name="decode" returns="str" signature="decode(encoded, eol=&apos;\n&apos;)">
        <variable citdl="list" line="239" name="decoded" />
        <variable line="250" name="c" />
        <variable citdl="int" line="247" name="i" />
        <variable citdl="len()" line="248" name="n" />
        <variable ilk="argument" name="encoded" />
        <variable citdl="line.rstrip()" line="242" name="line" />
        <variable citdl="str" ilk="argument" name="eol" />
      </scope>
      <scope doc="Decode a quoted-printable string." ilk="function" line="278" name="decodestring" signature="decodestring(encoded, eol=&apos;\n&apos;)" />
      <variable citdl="str" name="digits" />
      <scope doc="Return True if the octet should be escaped with header quopri." ilk="function" line="73" lineend="75" name="header_check" returns="bool" signature="header_check(octet)">
        <variable ilk="argument" name="octet" />
      </scope>
      <scope doc="Decode a string encoded with RFC 2045 MIME header `Q&apos; encoding." ilk="function" line="289" lineend="297" name="header_decode" returns="re.sub()" signature="header_decode(s)">
        <variable citdl="s.replace()" ilk="argument" name="s" />
      </scope>
      <scope doc="Encode a single header line with quoted-printable (like) encoding." ilk="function" line="127" lineend="147" name="header_encode" returns="tuple" signature="header_encode(header_bytes, charset=&apos;iso-8859-1&apos;)">
        <variable citdl="list" line="142" name="encoded" />
        <variable ilk="argument" name="header_bytes" />
        <variable citdl="str" ilk="argument" name="charset" />
      </scope>
      <scope doc="Return a header quoted-printable encoding length." ilk="function" line="83" lineend="93" name="header_length" returns="sum()" signature="header_length(bytearray)">
        <variable ilk="argument" name="bytearray" />
      </scope>
      <variable citdl="str" name="hexdigits" />
      <scope ilk="function" line="122" lineend="123" name="quote" returns="str" signature="quote(c)">
        <variable ilk="argument" name="c" />
      </scope>
      <import module="re" />
      <scope doc="Turn a string in the form =AB to the ASCII character with value 0xab" ilk="function" line="117" lineend="119" name="unquote" returns="chr()" signature="unquote(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="106" lineend="114" name="_max_append" signature="_max_append(L, s, maxlen, extra=&apos;&apos;)">
        <variable ilk="argument" name="L" />
        <variable citdl="chr()" ilk="argument" name="s" />
        <variable ilk="argument" name="maxlen" />
        <variable citdl="str" ilk="argument" name="extra" />
      </scope>
      <scope attributes="protected __hidden__" doc="Turn a match in the form =AB to the ASCII character with value 0xab" ilk="function" line="282" lineend="285" name="_unquote_match" returns="unquote()" signature="_unquote_match(match)">
        <variable ilk="argument" name="match" />
        <variable citdl="match.group()" line="284" name="s" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict()" line="55" name="_QUOPRI_HEADER_MAP" />
      <variable attributes="protected __hidden__" citdl="_QUOPRI_HEADER_MAP.copy()" line="56" name="_QUOPRI_BODY_MAP" />
    </scope>
    <scope doc="Implementation of JSONEncoder" ilk="blob" lang="Python3" name="json.encoder">
      <variable citdl="SRE_Pattern" line="14" name="ESCAPE" />
      <variable citdl="SRE_Pattern" line="15" name="ESCAPE_ASCII" />
      <variable citdl="dict" line="17" name="ESCAPE_DCT" />
      <scope doc="Return the canonical string representation of the object." ilk="function" line="32" name="FLOAT_REPR" returns="str" signature="repr(object) -&gt; string" />
      <variable citdl="SRE_Pattern" line="16" name="HAS_UTF8" />
      <variable citdl="float" line="31" name="INFINITY" />
      <scope classrefs="object" doc="Extensible JSON &lt;http://json.org&gt; encoder for Python data structures.  Supports the following objects and types by default:" ilk="class" line="68" lineend="246" name="JSONEncoder">
        <variable attributes="__instancevar__" line="146" name="indent" />
        <scope doc="Implement this method in a subclass such that it returns a serializable object for ``o``, or calls the base implementation (to raise a ``TypeError``)." ilk="function" line="152" lineend="170" name="default" signature="default(o)">
          <variable citdl="JSONEncoder" ilk="argument" name="self" />
          <variable ilk="argument" name="o" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="143" name="check_circular" />
        <variable citdl="str" line="98" name="key_separator" />
        <scope doc="Return a JSON string representation of a Python data structure." ilk="function" line="172" lineend="191" name="encode" returns="str.join()" signature="encode(o)">
          <variable citdl="JSONEncoder" ilk="argument" name="self" />
          <variable ilk="argument" name="o" />
          <variable citdl="list()" line="188" name="chunks" />
        </scope>
        <scope doc="Encode the given object and yield each string representation as available." ilk="function" line="193" lineend="246" name="iterencode" returns="JSONEncoder.iterencode._iterencode()" signature="iterencode(o, _one_shot=False)">
          <variable citdl="JSONEncoder" ilk="argument" name="self" />
          <variable ilk="argument" name="o" />
          <variable citdl="False" ilk="argument" name="_one_shot" />
          <variable citdl="dict" line="204" name="markers" />
          <variable attributes="protected" citdl="encode_basestring" line="208" name="_encoder" />
          <scope ilk="function" line="212" lineend="232" name="floatstr" returns="JSONEncoder.iterencode.floatstr._repr()" signature="floatstr(o, allow_nan=self.allow_nan, _repr=FLOAT_REPR, _inf=INFINITY, _neginf=-INFINITY)">
            <variable ilk="argument" name="o" />
            <variable citdl="True" ilk="argument" name="allow_nan" />
            <variable citdl="repr" ilk="argument" name="_repr" />
            <variable citdl="float()" ilk="argument" name="_inf" />
            <variable citdl="float()" ilk="argument" name="_neginf" />
            <variable citdl="str" line="219" name="text" />
          </scope>
          <variable attributes="protected" citdl="c_make_encoder()" line="237" name="_iterencode" />
        </scope>
        <variable citdl="str" line="97" name="item_separator" />
        <variable attributes="__instancevar__" citdl="False" line="141" name="skipkeys" />
        <variable attributes="__instancevar__" citdl="True" line="144" name="allow_nan" />
        <variable attributes="__instancevar__" citdl="True" line="142" name="ensure_ascii" />
        <variable attributes="__instancevar__" citdl="False" line="145" name="sort_keys" />
        <scope attributes="__ctor__" doc="Constructor for JSONEncoder, with sensible defaults." ilk="function" line="99" lineend="150" name="__init__" signature="JSONEncoder(skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)">
          <variable citdl="JSONEncoder" ilk="argument" name="self" />
          <variable citdl="False" ilk="argument" name="skipkeys" />
          <variable citdl="True" ilk="argument" name="ensure_ascii" />
          <variable citdl="True" ilk="argument" name="check_circular" />
          <variable citdl="True" ilk="argument" name="allow_nan" />
          <variable citdl="False" ilk="argument" name="sort_keys" />
          <variable ilk="argument" name="indent" />
          <variable ilk="argument" name="separators" />
          <variable ilk="argument" name="default" />
        </scope>
      </scope>
      <scope doc="Return an ASCII-only JSON representation of a Python string" ilk="function" line="8" name="c_encode_basestring_ascii" signature="encode_basestring_ascii(basestring) -&gt; bytes" />
      <scope classrefs="object" doc="_iterencode(obj, _current_indent_level) -&gt; iterable" ilk="class" line="12" name="c_make_encoder" />
      <scope doc="Return a JSON representation of a Python string" ilk="function" line="34" lineend="40" name="encode_basestring" returns="str" signature="encode_basestring(s)">
        <variable ilk="argument" name="s" />
        <scope ilk="function" line="38" lineend="39" name="replace" signature="replace(match)">
          <variable ilk="argument" name="match" />
        </scope>
      </scope>
      <scope doc="Return an ASCII-only JSON representation of a Python string" ilk="function" line="65" name="encode_basestring_ascii" signature="encode_basestring_ascii(basestring) -&gt; bytes" />
      <variable citdl="int" name="i" />
      <scope doc="Return an ASCII-only JSON representation of a Python string" ilk="function" line="43" lineend="62" name="py_encode_basestring_ascii" returns="str" signature="py_encode_basestring_ascii(s)">
        <variable ilk="argument" name="s" />
        <scope ilk="function" line="47" lineend="61" name="replace" returns="str.format()" signature="replace(match)">
          <variable ilk="argument" name="match" />
          <variable citdl="match.group()" line="48" name="s" />
          <variable citdl="ord()" line="52" name="n" />
          <variable citdl="int" line="59" name="s1" />
          <variable citdl="int" line="60" name="s2" />
        </scope>
      </scope>
      <import module="re" />
      <scope attributes="protected __hidden__" ilk="function" line="248" lineend="421" name="_make_iterencode" returns="_make_iterencode._iterencode" signature="_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, ValueError=ValueError, dict=dict, float=float, id=id, int=int, isinstance=isinstance, list=list, str=str, tuple=tuple)">
        <variable ilk="argument" name="markers" />
        <variable ilk="argument" name="_default" />
        <variable ilk="argument" name="_encoder" />
        <variable ilk="argument" name="_indent" />
        <variable ilk="argument" name="_floatstr" />
        <variable ilk="argument" name="_key_separator" />
        <variable ilk="argument" name="_item_separator" />
        <variable ilk="argument" name="_sort_keys" />
        <variable ilk="argument" name="_skipkeys" />
        <variable ilk="argument" name="_one_shot" />
        <variable citdl="ValueError" ilk="argument" name="ValueError" />
        <variable citdl="dict" ilk="argument" name="dict" />
        <variable citdl="float" ilk="argument" name="float" />
        <variable citdl="id" ilk="argument" name="id" />
        <variable citdl="int" ilk="argument" name="int" />
        <variable citdl="isinstance" ilk="argument" name="isinstance" />
        <variable citdl="list" ilk="argument" name="list" />
        <variable citdl="str" ilk="argument" name="str" />
        <variable citdl="tuple" ilk="argument" name="tuple" />
        <scope attributes="protected" ilk="function" line="262" lineend="313" name="_iterencode_list" signature="_iterencode_list(lst, _current_indent_level)">
          <variable ilk="argument" name="lst" />
          <variable ilk="argument" name="_current_indent_level" />
          <variable citdl="id()" line="267" name="markerid" />
          <variable citdl="str" line="271" name="buf" />
          <variable citdl="str" line="274" name="newline_indent" />
          <variable citdl="str" line="275" name="separator" />
          <variable citdl="True" line="280" name="first" />
          <variable citdl="_iterencode()" line="301" name="chunks" />
        </scope>
        <scope attributes="protected" ilk="function" line="315" lineend="389" name="_iterencode_dict" signature="_iterencode_dict(dct, _current_indent_level)">
          <variable ilk="argument" name="dct" />
          <variable ilk="argument" name="_current_indent_level" />
          <variable citdl="id()" line="320" name="markerid" />
          <variable citdl="str" line="327" name="newline_indent" />
          <variable citdl="str" line="328" name="item_separator" />
          <variable citdl="True" line="333" name="first" />
          <variable citdl="sorted()" line="335" name="items" />
          <variable citdl="str" line="344" name="key" />
          <variable citdl="_iterencode()" line="377" name="chunks" />
        </scope>
        <scope attributes="protected" ilk="function" line="391" lineend="420" name="_iterencode" signature="_iterencode(o, _current_indent_level)">
          <variable citdl="_default()" ilk="argument" name="o" />
          <variable ilk="argument" name="_current_indent_level" />
          <variable citdl="id()" line="412" name="markerid" />
        </scope>
      </scope>
    </scope>
    <scope doc="Fast implementation of the datetime type." ilk="blob" lang="Python3" name="datetime">
      <variable citdl="int" name="MAXYEAR" />
      <variable citdl="int" name="MINYEAR" />
      <scope classrefs="object" doc="date(year, month, day) --&gt; date object" ilk="class" name="date" />
      <scope classrefs="date" doc="datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])  The year, month and day arguments are required. tzinfo may be None, or an" ilk="class" name="datetime" />
      <variable citdl="PyCapsule" name="datetime_CAPI" />
      <scope classrefs="object" doc="time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --&gt; a time object  All arguments are optional. tzinfo may be None, or an instance of" ilk="class" name="time" />
      <scope classrefs="object" doc="Difference between two datetime values." ilk="class" name="timedelta" />
      <scope classrefs="object" doc="Abstract base class for time zone info objects." ilk="class" name="tzinfo" />
    </scope>
    <scope doc="distutils.command.install_egg_info  Implements the Distutils &apos;install_egg_info&apos; command, for installing" ilk="blob" lang="Python3" name="distutils.command.install_egg_info">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <import module="dir_util" />
      <scope classrefs="Command" doc="Install an .egg-info file for the package" ilk="class" line="11" lineend="48" name="install_egg_info">
        <variable citdl="list" line="15" name="user_options" />
        <scope ilk="function" line="32" lineend="45" name="run" signature="run()">
          <variable citdl="install_egg_info" ilk="argument" name="self" />
          <variable citdl="os.path.join()" line="33" name="target" />
          <variable citdl="open()" line="43" name="f" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.path.join()" line="29" name="target" />
        <scope ilk="function" line="19" lineend="20" name="initialize_options" signature="initialize_options()">
          <variable citdl="install_egg_info" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="30" name="outputs" />
        <variable attributes="__instancevar__" line="20" name="install_dir" />
        <scope ilk="function" line="47" lineend="48" name="get_outputs" returns="list" signature="get_outputs()">
          <variable citdl="install_egg_info" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="22" lineend="30" name="finalize_options" signature="finalize_options()">
          <variable citdl="install_egg_info" ilk="argument" name="self" />
          <variable citdl="str" line="24" name="basename" />
        </scope>
        <variable citdl="str" line="14" name="description" />
      </scope>
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <scope doc="Convert an arbitrary string to a standard distribution name" ilk="function" line="55" lineend="60" name="safe_name" returns="re.sub()" signature="safe_name(name)">
        <variable ilk="argument" name="name" />
      </scope>
      <scope doc="Convert an arbitrary string to a standard version string" ilk="function" line="63" lineend="70" name="safe_version" returns="re.sub()" signature="safe_version(version)">
        <variable citdl="version.replace()" ilk="argument" name="version" />
      </scope>
      <import module="sys" />
      <scope doc="Convert a project or version name to its filename-escaped form" ilk="function" line="73" lineend="78" name="to_filename" returns="name.replace()" signature="to_filename(name)">
        <variable ilk="argument" name="name" />
      </scope>
    </scope>
    <scope doc="distutils.filelist  Provides the FileList class, used for poking about the filesystem" ilk="blob" lang="Python3" name="distutils.filelist">
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="A list of files built by on exploring the filesystem and filtered by applying various patterns to what we find there. " ilk="class" line="15" lineend="240" name="FileList">
        <variable attributes="__instancevar__" citdl="list" line="34" name="files" />
        <scope ilk="function" line="58" lineend="63" name="sort" signature="sort()">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable citdl="sorted()" line="60" name="sortable_files" />
        </scope>
        <scope ilk="function" line="55" lineend="56" name="extend" signature="extend(items)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="items" />
        </scope>
        <scope ilk="function" line="68" lineend="72" name="remove_duplicates" signature="remove_duplicates()">
          <variable citdl="FileList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="36" lineend="37" name="set_allfiles" signature="set_allfiles(allfiles)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="allfiles" />
        </scope>
        <variable attributes="__instancevar__" citdl="findall()" line="33" name="allfiles" />
        <scope ilk="function" line="105" lineend="176" name="process_template_line" signature="process_template_line(line)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope doc="Remove strings (presumably filenames) from &apos;files&apos; that match &apos;pattern&apos;." ilk="function" line="223" lineend="240" name="exclude_pattern" returns="bool" signature="exclude_pattern(pattern, anchor=1, prefix=None, is_regex=0)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="pattern" />
          <variable citdl="int" ilk="argument" name="anchor" />
          <variable ilk="argument" name="prefix" />
          <variable citdl="int" ilk="argument" name="is_regex" />
          <variable citdl="False" line="231" name="files_found" />
          <variable citdl="translate_pattern()" line="232" name="pattern_re" />
        </scope>
        <scope attributes="protected" ilk="function" line="77" lineend="103" name="_parse_template_line" returns="tuple" signature="_parse_template_line(line)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable citdl="line.split()" line="78" name="words" />
          <variable line="79" name="action" />
          <variable citdl="list" line="81" name="patterns" />
          <variable citdl="convert_path()" line="93" name="dir" />
          <variable citdl="convert_path()" line="99" name="dir_pattern" />
        </scope>
        <scope ilk="function" line="52" lineend="53" name="append" signature="append(item)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="30" lineend="34" name="__init__" signature="FileList(warn=None, debug_print=None)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="warn" />
          <variable ilk="argument" name="debug_print" />
        </scope>
        <scope doc="Select strings (presumably filenames) from &apos;self.files&apos; that match &apos;pattern&apos;, a Unix-style wildcard (glob) pattern." ilk="function" line="181" lineend="220" name="include_pattern" returns="bool" signature="include_pattern(pattern, anchor=1, prefix=None, is_regex=0)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="pattern" />
          <variable citdl="int" ilk="argument" name="anchor" />
          <variable ilk="argument" name="prefix" />
          <variable citdl="int" ilk="argument" name="is_regex" />
          <variable citdl="True" line="206" name="files_found" />
          <variable citdl="translate_pattern()" line="207" name="pattern_re" />
        </scope>
        <scope ilk="function" line="39" lineend="40" name="findall" signature="findall(dir=os.curdir)">
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable citdl="os.curdir" ilk="argument" name="dir" />
        </scope>
        <scope doc="Print &apos;msg&apos; to stdout if the global DEBUG (taken from the DISTUTILS_DEBUG environment variable) flag is true." ilk="function" line="42" lineend="48" name="debug_print" signature="debug_print(msg)">
          <import line="46" module="distutils.debug" symbol="DEBUG" />
          <variable citdl="FileList" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
      </scope>
      <variable citdl="str" line="7" name="__revision__" />
      <scope doc="Return &apos;pathname&apos; as a name that will work on the native filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope doc="Find all files under &apos;dir&apos; and return the list of full filenames (relative to &apos;dir&apos;)." ilk="function" line="246" lineend="274" name="findall" returns="list" signature="findall(dir=&apos;.&apos;)">
        <variable citdl="os.stat()" line="268" name="stat" />
        <variable citdl="list" line="252" name="list" />
        <variable citdl="stack.pop" line="254" name="pop" />
        <variable citdl="os.listdir()" line="259" name="names" />
        <variable citdl="stack.append" line="255" name="push" />
        <variable citdl="os.path.join()" line="263" name="fullname" />
        <variable citdl="list" line="253" name="stack" />
        <variable citdl="pop()" ilk="argument" name="dir" />
        <variable line="269" name="mode" />
      </scope>
      <import module="fnmatch" />
      <scope doc="Translate a shell-like glob pattern to a regular expression; return a string containing the regex." ilk="function" line="277" lineend="294" name="glob_to_re" returns="re.sub()" signature="glob_to_re(pattern)">
        <variable citdl="fnmatch.translate()" line="283" name="pattern_re" />
        <variable ilk="argument" name="pattern" />
      </scope>
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <scope doc="Translate a shell-like wildcard pattern to a compiled regular expression." ilk="function" line="297" lineend="323" name="translate_pattern" returns="re.compile()" signature="translate_pattern(pattern, anchor=1, prefix=None, is_regex=0)">
        <variable citdl="str" line="310" name="pattern_re" />
        <variable ilk="argument" name="pattern" />
        <variable citdl="glob_to_re()" line="316" name="empty_pattern" />
        <variable citdl="list" line="317" name="prefix_re" />
        <variable citdl="int" ilk="argument" name="is_regex" />
        <variable ilk="argument" name="prefix" />
        <variable citdl="int" ilk="argument" name="anchor" />
      </scope>
    </scope>
    <scope doc="Export the Python grammar and symbols." ilk="blob" lang="Python3" name="lib2to3.pygram">
      <scope classrefs="object" ilk="class" line="18" lineend="27" name="Symbols">
        <scope attributes="__ctor__" doc="Initializer." ilk="function" line="20" lineend="27" name="__init__" signature="Symbols(grammar)">
          <variable citdl="Symbols" ilk="argument" name="self" />
          <variable ilk="argument" name="grammar" />
        </scope>
      </scope>
      <import module="driver" />
      <import module="os" />
      <variable citdl="Grammar" line="30" name="python_grammar" />
      <variable citdl="Grammar" line="34" name="python_grammar_no_print_statement" />
      <variable citdl="Symbols" line="32" name="python_symbols" />
      <import module="pytree" />
      <import module="token" />
      <variable attributes="protected __hidden__" citdl="os.path.join()" line="15" name="_GRAMMAR_FILE" />
    </scope>
    <scope doc="HTTP server classes.  Note: BaseHTTPRequestHandler doesn&apos;t implement any HTTP request; see" ilk="blob" lang="Python3" name="http.server">
      <scope classrefs="StreamRequestHandler" doc="HTTP request handler base class.  The following explanation of HTTP serves to guide you through the" ilk="class" line="133" lineend="584" name="BaseHTTPRequestHandler">
        <variable attributes="__instancevar__" citdl="str()" line="273" name="requestline" />
        <scope doc="Parse a request (internal)." ilk="function" line="254" lineend="325" name="parse_request" returns="bool" signature="parse_request()">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="list" line="268" name="requestline" />
          <variable citdl="requestline.split()" line="274" name="words" />
          <variable line="281" name="base_version_number" />
          <variable citdl="base_version_number.split()" line="282" name="version_number" />
          <variable citdl="self.headers.get()" line="319" name="conntype" />
        </scope>
        <variable citdl="str" line="252" name="default_request_version" />
        <variable citdl="list" line="492" name="weekdayname" />
        <scope doc="Return the server software version string." ilk="function" line="469" lineend="471" name="version_string" returns="str" signature="version_string()">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the current time formatted for logging." ilk="function" line="484" lineend="490" name="log_date_time_string" returns="tuple" signature="log_date_time_string()">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="time.time()" line="486" name="now" />
          <variable citdl="str" line="488" name="s" />
        </scope>
        <variable attributes="__instancevar__" line="313" name="path" />
        <scope doc="Send a MIME header." ilk="function" line="407" lineend="416" name="send_header" signature="send_header(keyword, value)">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="keyword" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable citdl="str" line="245" name="error_message_format" />
        <variable citdl="str" line="238" name="sys_version" />
        <variable attributes="__instancevar__" citdl="str" line="266" name="request_version" />
        <scope doc="Send and log an error reply." ilk="function" line="356" lineend="385" name="send_error" signature="send_error(code, message=None)">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="code" />
          <variable citdl="str" ilk="argument" name="message" />
          <variable citdl="str" line="372" name="shortmsg" />
          <variable citdl="str" line="372" name="longmsg" />
          <variable citdl="str" line="375" name="explain" />
          <variable citdl="dict" line="378" name="content" />
        </scope>
        <scope doc="Log an error." ilk="function" line="433" lineend="445" name="log_error" signature="log_error(format, *args)">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="format" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable citdl="str" line="513" name="protocol_version" />
        <scope doc="Send the response header and log the response code." ilk="function" line="387" lineend="405" name="send_response" signature="send_response(code, message=None)">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="code" />
          <variable citdl="str" ilk="argument" name="message" />
        </scope>
        <scope doc="Handle multiple requests if necessary." ilk="function" line="348" lineend="354" name="handle" signature="handle()">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="dict" line="521" name="responses" />
        <scope doc="Return the current date and time formatted for a message header." ilk="function" line="473" lineend="482" name="date_time_string" returns="tuple" signature="date_time_string(timestamp=None)">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="time.time()" ilk="argument" name="timestamp" />
          <variable citdl="str" line="478" name="s" />
        </scope>
        <variable citdl="str" line="246" name="error_content_type" />
        <scope doc="Return the client address formatted for logging." ilk="function" line="498" lineend="507" name="address_string" returns="socket.getfqdn()" signature="address_string()">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Log an accepted request." ilk="function" line="423" lineend="431" name="log_request" signature="log_request(code=&apos;-&apos;, size=&apos;-&apos;)">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="code" />
          <variable citdl="str" ilk="argument" name="size" />
        </scope>
        <variable citdl="list" line="494" name="monthname" />
        <scope doc="Log an arbitrary message." ilk="function" line="447" lineend="467" name="log_message" signature="log_message(format, *args)">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="format" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable citdl="str" line="243" name="server_version" />
        <variable citdl="http.client.HTTPMessage" line="516" name="MessageClass" />
        <scope doc="Send the blank line ending the MIME headers." ilk="function" line="418" lineend="421" name="end_headers" signature="end_headers()">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.rfile.readline()" line="335" name="raw_requestline" />
        <variable attributes="__instancevar__" citdl="http.client.parse_headers()" line="316" name="headers" />
        <variable attributes="__instancevar__" line="265" name="command" />
        <scope doc="Handle a single HTTP request." ilk="function" line="327" lineend="346" name="handle_one_request" signature="handle_one_request()">
          <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="str" line="341" name="mname" />
          <variable citdl="getattr()" line="345" name="method" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="267" name="close_connection" />
      </scope>
      <scope classrefs="SimpleHTTPRequestHandler" doc="Complete HTTP server with GET, HEAD and POST commands.  GET and HEAD also support running CGI scripts." ilk="class" line="843" lineend="1101" name="CGIHTTPRequestHandler">
        <scope doc="Test whether self.path corresponds to a CGI script." ilk="function" line="879" lineend="899" name="is_cgi" returns="bool" signature="is_cgi()">
          <variable citdl="CGIHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="_url_collapse_path_split()" line="895" name="splitpath" />
        </scope>
        <variable attributes="__instancevar__" citdl="_url_collapse_path_split()" line="897" name="cgi_info" />
        <scope doc="Version of send_head that support CGI scripts" ilk="function" line="872" lineend="877" name="send_head" returns="SimpleHTTPRequestHandler.send_head()" signature="send_head()">
          <variable citdl="CGIHTTPRequestHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="hasattr()" line="854" name="have_fork" />
        <scope doc="Test whether argument path is an executable file." ilk="function" line="903" lineend="905" name="is_executable" returns="executable()" signature="is_executable(path)">
          <variable citdl="CGIHTTPRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
        </scope>
        <variable citdl="list" line="901" name="cgi_directories" />
        <variable citdl="int" line="858" name="rbufsize" />
        <scope doc="Test whether argument path is a Python script." ilk="function" line="907" lineend="910" name="is_python" returns="bool" signature="is_python(path)">
          <variable citdl="CGIHTTPRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
        </scope>
        <scope doc="Serve a POST request." ilk="function" line="860" lineend="870" name="do_POST" signature="do_POST()">
          <variable citdl="CGIHTTPRequestHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Execute a CGI script." ilk="function" line="912" lineend="1101" name="run_cgi" signature="run_cgi()">
          <import line="983" module="base64" />
          <import line="983" module="binascii" />
          <import line="1065" module="subprocess" />
          <variable citdl="CGIHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="self.path" line="914" name="path" />
          <variable citdl="path.find()" line="917" name="i" />
          <variable citdl="list" line="919" name="nextdir" />
          <variable citdl="list" line="920" name="nextrest" />
          <variable citdl="self.translate_path()" line="922" name="scriptdir" />
          <variable citdl="list" line="924" name="rest" />
          <variable citdl="list" line="924" name="dir" />
          <variable citdl="list" line="932" name="query" />
          <variable citdl="list" line="940" name="script" />
          <variable citdl="list" line="944" name="scriptname" />
          <variable citdl="self.translate_path()" line="945" name="scriptfile" />
          <variable citdl="is_python()" line="953" name="ispy" />
          <variable citdl="dict" line="962" name="env" />
          <variable citdl="urllib.parse.unquote()" line="969" name="uqrest" />
          <variable citdl="self.address_string()" line="975" name="host" />
          <variable citdl="authorization.split()" line="979" name="authorization" />
          <variable citdl="self.headers.get()" line="1001" name="length" />
          <variable citdl="self.headers.get()" line="1004" name="referer" />
          <variable citdl="list" line="1007" name="accept" />
          <variable citdl="self.headers.get()" line="1014" name="ua" />
          <variable citdl="filter()" line="1017" name="co" />
          <variable citdl="query.replace()" line="1030" name="decoded_query" />
          <variable citdl="list" line="1034" name="args" />
          <variable citdl="nobody_uid()" line="1037" name="nobody" />
          <variable citdl="os.fork()" line="1039" name="pid" />
          <variable citdl="list" line="1066" name="cmdline" />
          <variable citdl="list" line="1068" name="interp" />
          <variable citdl="int()" line="1077" name="nbytes" />
          <variable citdl="subprocess.Popen()" line="1080" name="p" />
          <variable citdl="self.rfile.read()" line="1086" name="data" />
          <variable citdl="p.returncode" line="1097" name="status" />
        </scope>
      </scope>
      <variable citdl="str" line="116" name="DEFAULT_ERROR_CONTENT_TYPE" />
      <variable citdl="str" line="104" name="DEFAULT_ERROR_MESSAGE" />
      <scope classrefs="TCPServer" ilk="class" line="121" lineend="130" name="HTTPServer">
        <variable citdl="int" line="123" name="allow_reuse_address" />
        <scope doc="Override server_bind to store the server name." ilk="function" line="125" lineend="130" name="server_bind" signature="server_bind()">
          <variable citdl="HTTPServer" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="port" line="130" name="server_port" />
        <variable attributes="__instancevar__" citdl="socket.getfqdn()" line="129" name="server_name" />
      </scope>
      <scope classrefs="BaseHTTPRequestHandler" doc="Simple HTTP request handler with GET and HEAD commands.  This serves files from the current directory and any of its" ilk="class" line="588" lineend="770" name="SimpleHTTPRequestHandler">
        <scope doc="Guess the type of a file." ilk="function" line="739" lineend="761" name="guess_type" signature="guess_type(path)">
          <variable citdl="SimpleHTTPRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable citdl="ext.lower()" line="757" name="ext" />
        </scope>
        <scope doc="Copy all data between two file objects." ilk="function" line="723" lineend="737" name="copyfile" signature="copyfile(source, outputfile)">
          <variable citdl="SimpleHTTPRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="outputfile" />
        </scope>
        <scope doc="Helper to produce a directory listing (absent index.html)." ilk="function" line="657" lineend="699" name="list_directory" returns="io.BytesIO()" signature="list_directory(path)">
          <variable citdl="SimpleHTTPRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable citdl="os.listdir()" line="666" name="list" />
          <variable citdl="list" line="671" name="r" />
          <variable citdl="cgi.escape()" line="672" name="displaypath" />
          <variable citdl="os.path.join()" line="678" name="fullname" />
          <variable citdl="name" line="679" name="displayname" />
          <variable citdl="name" line="683" name="linkname" />
          <variable citdl="sys.getfilesystemencoding()" line="690" name="enc" />
          <variable line="691" name="encoded" />
          <variable citdl="io.BytesIO()" line="692" name="f" />
        </scope>
        <scope doc="Common code for GET and HEAD commands." ilk="function" line="616" lineend="655" name="send_head" returns="open()" signature="send_head()">
          <variable citdl="SimpleHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="self.translate_path()" line="627" name="path" />
          <variable citdl="open()" line="628" name="f" />
          <variable citdl="os.path.join()" line="637" name="index" />
          <variable citdl="self.guess_type()" line="643" name="ctype" />
          <variable citdl="os.fstat()" line="651" name="fs" />
        </scope>
        <variable citdl="mimetypes.types_map.copy()" line="765" name="extensions_map" />
        <scope doc="Serve a GET request." ilk="function" line="603" lineend="608" name="do_GET" signature="do_GET()">
          <variable citdl="SimpleHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="self.send_head()" line="605" name="f" />
        </scope>
        <scope doc="Serve a HEAD request." ilk="function" line="610" lineend="614" name="do_HEAD" signature="do_HEAD()">
          <variable citdl="SimpleHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="self.send_head()" line="612" name="f" />
        </scope>
        <scope doc="Translate a /-separated PATH to the local filename syntax." ilk="function" line="701" lineend="721" name="translate_path" returns="os.getcwd()" signature="translate_path(path)">
          <variable citdl="SimpleHTTPRequestHandler" ilk="argument" name="self" />
          <variable citdl="os.getcwd()" ilk="argument" name="path" />
          <variable citdl="filter()" line="713" name="words" />
        </scope>
        <variable citdl="str" line="601" name="server_version" />
      </scope>
      <variable citdl="list" line="85" name="__all__" />
      <variable citdl="str" line="83" name="__version__" />
      <import module="cgi" />
      <import module="email" />
      <scope doc="Test for executable file." ilk="function" line="834" lineend="840" name="executable" returns="bool" signature="executable(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="os.stat()" line="837" name="st" />
      </scope>
      <import module="http" />
      <import module="io" />
      <import module="mimetypes" />
      <variable citdl="NoneType" line="816" name="nobody" />
      <scope doc="Internal routine to get nobody&apos;s uid" ilk="function" line="818" lineend="831" name="nobody_uid" returns="max()" signature="nobody_uid()">
        <variable citdl="max()" line="828" name="nobody" />
      </scope>
      <import module="os" />
      <import module="posixpath" />
      <import module="select" />
      <import module="shutil" />
      <import module="socket" />
      <import module="socketserver" />
      <import module="sys" />
      <scope doc="Test the HTTP request handler class." ilk="function" line="1104" lineend="1129" name="test" signature="test(HandlerClass=&lt;class &apos;http.server.BaseHTTPRequestHandler&apos;&gt;, ServerClass=&lt;class &apos;http.server.HTTPServer&apos;&gt;, protocol=&apos;HTTP/1.0&apos;)">
        <variable citdl="ServerClass()" line="1120" name="httpd" />
        <variable citdl="str" ilk="argument" name="protocol" />
        <variable citdl="tuple" line="1117" name="server_address" />
        <variable citdl="BaseHTTPRequestHandler" ilk="argument" name="HandlerClass" />
        <variable citdl="HTTPServer" ilk="argument" name="ServerClass" />
        <variable citdl="httpd.socket.getsockname()" line="1122" name="sa" />
        <variable citdl="int" line="1114" name="port" />
      </scope>
      <import module="time" />
      <import module="urllib" />
      <scope attributes="protected __hidden__" doc="Given a URL path, remove extra &apos;/&apos;s and &apos;.&apos; path elements and collapse any &apos;..&apos; references." ilk="function" line="777" lineend="813" name="_url_collapse_path_split" returns="tuple" signature="_url_collapse_path_split(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="list" line="792" name="path_parts" />
        <variable citdl="str" line="801" name="tail_part" />
        <variable citdl="list" line="804" name="head_parts" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="118" lineend="119" name="_quote_html" signature="_quote_html(html)">
        <variable ilk="argument" name="html" />
      </scope>
    </scope>
    <scope doc="# Symbolic constants for Tk" ilk="blob" lang="Python3" name="tkinter.constants">
      <variable citdl="str" line="72" name="ACTIVE" />
      <variable citdl="str" line="67" name="ALL" />
      <variable citdl="str" line="66" name="ANCHOR" />
      <variable citdl="str" line="97" name="ARC" />
      <variable citdl="str" line="53" name="BASELINE" />
      <variable citdl="str" line="103" name="BEVEL" />
      <variable citdl="str" line="25" name="BOTH" />
      <variable citdl="str" line="31" name="BOTTOM" />
      <variable citdl="str" line="85" name="BROWSE" />
      <variable citdl="str" line="100" name="BUTT" />
      <variable citdl="str" line="77" name="CASCADE" />
      <variable citdl="str" line="19" name="CENTER" />
      <variable citdl="str" line="49" name="CHAR" />
      <variable citdl="str" line="78" name="CHECKBUTTON" />
      <variable citdl="str" line="96" name="CHORD" />
      <variable citdl="str" line="79" name="COMMAND" />
      <variable citdl="str" line="65" name="CURRENT" />
      <variable citdl="str" line="71" name="DISABLED" />
      <variable citdl="str" line="91" name="DOTBOX" />
      <variable citdl="str" line="11" name="E" />
      <variable citdl="str" line="63" name="END" />
      <variable citdl="str" line="17" name="EW" />
      <variable citdl="str" line="87" name="EXTENDED" />
      <variable citdl="int" name="FALSE" />
      <variable citdl="str" line="98" name="FIRST" />
      <variable citdl="str" line="36" name="FLAT" />
      <variable citdl="str" line="38" name="GROOVE" />
      <variable citdl="str" line="74" name="HIDDEN" />
      <variable citdl="str" line="42" name="HORIZONTAL" />
      <variable citdl="str" line="64" name="INSERT" />
      <variable citdl="str" line="56" name="INSIDE" />
      <variable citdl="str" line="99" name="LAST" />
      <variable citdl="str" line="28" name="LEFT" />
      <variable citdl="str" line="104" name="MITER" />
      <variable citdl="str" line="107" name="MOVETO" />
      <variable citdl="str" line="86" name="MULTIPLE" />
      <variable citdl="str" line="8" name="N" />
      <variable citdl="str" line="14" name="NE" />
      <variable citdl="int" line="4" name="NO" />
      <variable citdl="str" line="22" name="NONE" />
      <variable citdl="str" line="70" name="NORMAL" />
      <variable citdl="str" line="16" name="NS" />
      <variable citdl="str" line="18" name="NSEW" />
      <variable citdl="str" line="46" name="NUMERIC" />
      <variable citdl="str" line="12" name="NW" />
      <variable citdl="int" name="OFF" />
      <variable citdl="int" name="ON" />
      <variable citdl="str" line="57" name="OUTSIDE" />
      <variable citdl="str" line="110" name="PAGES" />
      <variable citdl="str" line="95" name="PIESLICE" />
      <variable citdl="str" line="101" name="PROJECTING" />
      <variable citdl="str" line="80" name="RADIOBUTTON" />
      <variable citdl="str" line="34" name="RAISED" />
      <variable citdl="str" line="37" name="RIDGE" />
      <variable citdl="str" line="30" name="RIGHT" />
      <variable citdl="str" line="102" name="ROUND" />
      <variable citdl="str" line="9" name="S" />
      <variable citdl="str" line="108" name="SCROLL" />
      <variable citdl="str" line="15" name="SE" />
      <variable citdl="str" line="60" name="SEL" />
      <variable citdl="str" line="61" name="SEL_FIRST" />
      <variable citdl="str" line="62" name="SEL_LAST" />
      <variable citdl="str" line="81" name="SEPARATOR" />
      <variable citdl="str" line="84" name="SINGLE" />
      <variable citdl="str" line="39" name="SOLID" />
      <variable citdl="str" line="35" name="SUNKEN" />
      <variable citdl="str" line="13" name="SW" />
      <variable citdl="str" line="29" name="TOP" />
      <variable citdl="int" name="TRUE" />
      <variable citdl="str" line="92" name="UNDERLINE" />
      <variable citdl="str" line="109" name="UNITS" />
      <variable citdl="str" line="43" name="VERTICAL" />
      <variable citdl="str" line="10" name="W" />
      <variable citdl="str" line="50" name="WORD" />
      <variable citdl="str" line="23" name="X" />
      <variable citdl="str" line="24" name="Y" />
      <variable citdl="int" line="5" name="YES" />
    </scope>
    <scope doc="A generic class to build line-oriented command interpreters.  Interpreters constructed with this class obey the following conventions:" ilk="blob" lang="Python3" name="cmd">
      <scope classrefs="object" doc="A simple framework for writing line-oriented command interpreters.  These are often useful for test harnesses, administrative tools, and" ilk="class" line="52" lineend="403" name="Cmd">
        <scope ilk="function" line="295" lineend="338" name="do_help" signature="do_help(arg)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="getattr()" line="299" name="func" />
          <variable line="302" name="doc" />
          <variable citdl="get_names()" line="312" name="names" />
          <variable citdl="list" line="313" name="cmds_doc" />
          <variable citdl="list" line="314" name="cmds_undoc" />
          <variable citdl="dict" line="315" name="help" />
          <variable citdl="name" line="321" name="prevname" />
          <variable citdl="list" line="327" name="cmd" />
        </scope>
        <variable citdl="str" line="71" name="misc_header" />
        <variable citdl="str" line="64" name="prompt" />
        <variable attributes="__instancevar__" citdl="sys.stdout" line="93" name="stdout" />
        <scope doc="Interpret the argument as though it had been typed in response to the prompt." ilk="function" line="193" lineend="216" name="onecmd" returns="Cmd.onecmd.func()" signature="onecmd(line)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable citdl="getattr()" line="213" name="func" />
        </scope>
        <variable line="68" name="intro" />
        <scope doc="Hook method executed just before the command line is interpreted, but after the input prompt is generated and issued." ilk="function" line="151" lineend="156" name="precmd" signature="precmd(line)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope attributes="__ctor__" doc="Instantiate a line-oriented interpreter framework." ilk="function" line="76" lineend="97" name="__init__" signature="Cmd(completekey=&apos;tab&apos;, stdin=None, stdout=None)">
          <import line="87" module="sys" />
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="completekey" />
          <variable ilk="argument" name="stdin" />
          <variable ilk="argument" name="stdout" />
        </scope>
        <scope doc="Return the next possible completion for &apos;text&apos;." ilk="function" line="250" lineend="278" name="complete" signature="complete(text, state)">
          <import line="257" module="readline" />
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable ilk="argument" name="state" />
          <variable citdl="readline.get_line_buffer()" line="258" name="origline" />
          <variable citdl="origline.lstrip()" line="259" name="line" />
          <variable citdl="len()" line="260" name="stripped" />
          <variable citdl="len()" line="261" name="begidx" />
          <variable citdl="readline.get_endidx()" line="262" name="endidx" />
          <variable citdl="Cmd.completedefault" line="266" name="compfunc" />
        </scope>
        <variable citdl="str" line="69" name="doc_leader" />
        <scope doc="Hook method executed just after a command dispatch is finished." ilk="function" line="158" lineend="160" name="postcmd" signature="postcmd(stop, line)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable ilk="argument" name="stop" />
          <variable ilk="argument" name="line" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="97" name="completekey" />
        <scope ilk="function" line="292" lineend="293" name="complete_help" returns="Cmd.completenames()" signature="complete_help(*args)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Repeatedly issue a prompt, accept input, parse an initial prefix off the received input, and dispatch to action methods, passing them the remainder of the line as argument." ilk="function" line="99" lineend="148" name="cmdloop" signature="cmdloop(intro=None)">
          <import line="109" module="readline" />
          <import line="145" module="readline" />
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable ilk="argument" name="intro" />
          <variable citdl="self.postcmd()" line="120" name="stop" />
          <variable citdl="str" line="123" name="line" />
        </scope>
        <variable citdl="int" line="74" name="use_rawinput" />
        <scope doc="Hook method executed once when the cmdloop() method is called." ilk="function" line="162" lineend="164" name="preloop" signature="preloop()">
          <variable citdl="Cmd" ilk="argument" name="self" />
        </scope>
        <scope doc="Method called to complete an input line when no command- specific complete_*() method is available." ilk="function" line="237" lineend="244" name="completedefault" returns="list" signature="completedefault(*ignored)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="ignored" />
        </scope>
        <variable citdl="str" line="73" name="nohelp" />
        <variable attributes="__instancevar__" citdl="list" line="96" name="cmdqueue" />
        <scope ilk="function" line="280" lineend="290" name="get_names" returns="list" signature="get_names()">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable citdl="list" line="283" name="names" />
          <variable citdl="list" line="284" name="classes" />
          <variable citdl="classes.pop()" line="286" name="aclass" />
        </scope>
        <variable citdl="str" line="66" name="ruler" />
        <variable attributes="__instancevar__" citdl="readline.get_completer()" line="110" name="old_completer" />
        <variable citdl="str" line="67" name="lastcmd" />
        <scope doc="Called when an empty line is entered in response to the prompt." ilk="function" line="218" lineend="226" name="emptyline" returns="Cmd.onecmd()" signature="emptyline()">
          <variable citdl="Cmd" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="complete.compfunc()" line="274" name="completion_matches" />
        <scope doc="Display a list of strings as a compact set of columns." ilk="function" line="348" lineend="403" name="columnize" signature="columnize(list, displaywidth=80)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable ilk="argument" name="list" />
          <variable citdl="int" ilk="argument" name="displaywidth" />
          <variable citdl="list" line="358" name="nonstrings" />
          <variable citdl="len()" line="363" name="size" />
          <variable citdl="int" line="369" name="ncols" />
          <variable citdl="list" line="370" name="colwidths" />
          <variable citdl="int" line="371" name="totwidth" />
          <variable citdl="int" line="373" name="colwidth" />
          <variable citdl="row" line="375" name="i" />
          <variable citdl="str" line="378" name="x" />
          <variable citdl="len()" line="387" name="nrows" />
          <variable citdl="list" line="391" name="texts" />
        </scope>
        <variable citdl="str" line="70" name="doc_header" />
        <variable citdl="string.digits" line="65" name="identchars" />
        <scope doc="Hook method executed once when the cmdloop() method is about to return." ilk="function" line="166" lineend="171" name="postloop" signature="postloop()">
          <variable citdl="Cmd" ilk="argument" name="self" />
        </scope>
        <variable citdl="str" line="72" name="undoc_header" />
        <scope doc="Called on an input line when the command prefix is not recognized." ilk="function" line="228" lineend="235" name="default" signature="default(line)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <variable attributes="__instancevar__" citdl="sys.stdin" line="89" name="stdin" />
        <scope doc="Parse the line into a command name and a string containing the arguments." ilk="function" line="173" lineend="191" name="parseline" returns="tuple" signature="parseline(line)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="line" />
          <variable citdl="int" line="188" name="i" />
          <variable citdl="len()" line="188" name="n" />
          <variable citdl="list" line="190" name="cmd" />
          <variable line="190" name="arg" />
        </scope>
        <scope ilk="function" line="340" lineend="346" name="print_topics" signature="print_topics(header, cmds, cmdlen, maxcol)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable ilk="argument" name="header" />
          <variable ilk="argument" name="cmds" />
          <variable ilk="argument" name="cmdlen" />
          <variable ilk="argument" name="maxcol" />
        </scope>
        <scope ilk="function" line="246" lineend="248" name="completenames" returns="list" signature="completenames(text, *ignored)">
          <variable citdl="Cmd" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable attributes="varargs" ilk="argument" name="ignored" />
          <variable citdl="str" line="247" name="dotext" />
        </scope>
      </scope>
      <variable citdl="str" line="50" name="IDENTCHARS" />
      <variable citdl="str" line="49" name="PROMPT" />
      <variable citdl="list" line="47" name="__all__" />
      <import module="string" />
      <import module="sys" />
    </scope>
    <scope doc="Common pathname manipulations, OS/2 EMX version.  Instead of importing this module directly, import os and refer to this" ilk="blob" lang="Python3" name="os2emxpath">
      <variable citdl="list" line="14" name="__all__" />
      <scope doc="Return the absolute version of a path" ilk="function" line="146" lineend="150" name="abspath" returns="normpath()" signature="abspath(path)">
        <variable citdl="join()" ilk="argument" name="path" />
      </scope>
      <variable citdl="str" line="26" name="altsep" />
      <scope doc="Returns the final component of a pathname" ilk="function" line="88" lineend="90" name="basename" signature="basename(p)">
        <variable ilk="argument" name="p" />
      </scope>
      <scope doc="Given a list of pathnames, returns the longest common leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <variable citdl="str" line="22" name="curdir" />
      <variable citdl="str" line="28" name="defpath" />
      <variable citdl="str" line="29" name="devnull" />
      <scope doc="Returns the directory component of a pathname" ilk="function" line="95" lineend="97" name="dirname" signature="dirname(p)">
        <variable ilk="argument" name="p" />
      </scope>
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Expand ~ and ~user constructs." ilk="function" name="expanduser" signature="expanduser(path)" />
      <scope doc="Expand shell variables of the forms $var, ${var} and %var%." ilk="function" name="expandvars" signature="expandvars(path)" />
      <variable citdl="str" line="24" name="extsep" />
      <scope doc="Return the last access time of a file, reported by os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Test whether a path is absolute" ilk="function" name="isabs" signature="isabs(s)" />
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Test for symbolic link." ilk="function" name="islink" signature="islink(path)" />
      <scope doc="Test whether a path is a mount point (defined as root of drive)" ilk="function" line="109" lineend="115" name="ismount" returns="bool" signature="ismount(path)">
        <variable ilk="argument" name="path" />
        <variable line="114" name="p" />
      </scope>
      <scope doc="Join two or more pathname components, inserting sep as needed" ilk="function" line="44" lineend="54" name="join" returns="str" signature="join(a, *p)">
        <variable ilk="argument" name="a" />
        <variable attributes="varargs" ilk="argument" name="p" />
        <variable citdl="b" line="46" name="path" />
      </scope>
      <scope doc="Test whether a path exists." ilk="function" line="101" name="lexists" signature="lexists(path)" />
      <scope doc="Normalize case of pathname." ilk="function" line="35" lineend="39" name="normcase" signature="normcase(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Normalize path, eliminating double slashes, etc." ilk="function" line="120" lineend="142" name="normpath" returns="str" signature="normpath(path)">
        <variable citdl="int" line="128" name="i" />
        <variable citdl="path.replace()" ilk="argument" name="path" />
        <variable citdl="str" line="125" name="prefix" />
        <variable citdl="path.split()" line="127" name="comps" />
      </scope>
      <import module="os" />
      <variable citdl="str" line="23" name="pardir" />
      <variable citdl="str" line="27" name="pathsep" />
      <scope doc="Return the absolute version of a path" ilk="function" line="153" name="realpath" signature="realpath(path)" />
      <variable citdl="str" line="25" name="sep" />
      <scope doc="Split a pathname." ilk="function" name="split" signature="split(p)" />
      <scope doc="Split a pathname into drive/UNC sharepoint and relative path specifiers." ilk="function" name="splitdrive" signature="splitdrive(p)" />
      <scope doc="Split the extension from a pathname." ilk="function" name="splitext" signature="splitext(p)" />
      <scope doc="Split a pathname into UNC mount point and relative path specifiers." ilk="function" line="58" lineend="83" name="splitunc" returns="tuple" signature="splitunc(p)">
        <variable ilk="argument" name="p" />
        <variable citdl="normcase()" line="74" name="normp" />
        <variable citdl="list" line="68" name="firstTwo" />
        <variable citdl="normp.find()" line="75" name="index" />
      </scope>
      <import module="stat" />
      <variable citdl="bool" line="155" name="supports_unicode_filenames" />
    </scope>
    <scope doc="distutils.msvc9compiler  Contains MSVCCompiler, an implementation of the abstract CCompiler class" ilk="blob" lang="Python3" name="distutils.msvc9compiler">
      <scope classrefs="object" doc="Abstract base class to define the interface that must be implemented by real compiler classes.  Also has some utility methods used by several compiler classes." ilk="class" name="CCompiler" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <variable citdl="tuple" line="36" name="HKEYS" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompiler" doc="Concrete class that implements an interface to Microsoft Visual C++, as defined by the CCompiler abstract class." ilk="class" line="286" lineend="741" name="MSVCCompiler">
        <variable citdl="dict" line="297" name="executables" />
        <variable citdl="list" line="307" name="src_extensions" />
        <variable attributes="__instancevar__" citdl="list" line="393" name="compile_options_debug" />
        <variable attributes="__instancevar__" citdl="self.find_exe()" line="341" name="cc" />
        <variable attributes="__instancevar__" citdl="self.find_exe()" line="342" name="linker" />
        <variable attributes="__instancevar__" citdl="self.find_exe()" line="344" name="rc" />
        <scope ilk="function" line="695" lineend="697" name="runtime_library_dir_option" signature="runtime_library_dir_option(dir)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <scope ilk="function" line="699" lineend="700" name="library_option" returns="self.library_filename()" signature="library_option(lib)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="lib" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="325" name="initialized" />
        <scope ilk="function" line="529" lineend="551" name="create_static_lib" signature="create_static_lib(objects, output_libname, output_dir=None, debug=0, target_lang=None)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="objects" />
          <variable ilk="argument" name="output_libname" />
          <variable ilk="argument" name="output_dir" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="target_lang" />
          <variable citdl="self.library_filename()" line="539" name="output_filename" />
          <variable citdl="list" line="543" name="lib_args" />
        </scope>
        <scope ilk="function" line="692" lineend="693" name="library_dir_option" returns="str" signature="library_dir_option(dir)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="316" lineend="325" name="__init__" signature="MSVCCompiler(verbose=0, dry_run=0, force=0)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="verbose" />
          <variable citdl="int" ilk="argument" name="dry_run" />
          <variable citdl="int" ilk="argument" name="force" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="402" name="ldflags_shared" />
        <variable attributes="__instancevar__" citdl="self.find_exe()" line="343" name="lib" />
        <scope attributes="protected" ilk="function" line="660" lineend="686" name="_remove_visual_c_ref" signature="_remove_visual_c_ref(manifest_file)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="manifest_file" />
          <variable citdl="open()" line="668" name="manifest_f" />
          <variable citdl="re.sub()" line="670" name="manifest_buf" />
          <variable citdl="re.compile()" line="673" name="pattern" />
        </scope>
        <variable citdl="str" line="290" name="compiler_type" />
        <scope doc="Return path to an MSVC executable program." ilk="function" line="721" lineend="741" name="find_exe" returns="os.path.join()" signature="find_exe(exe)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="exe" />
          <variable citdl="os.path.join()" line="731" name="fn" />
        </scope>
        <scope ilk="function" line="703" lineend="717" name="find_library_file" returns="os.path.join()" signature="find_library_file(dirs, lib, debug=0)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dirs" />
          <variable ilk="argument" name="lib" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable citdl="list" line="707" name="try_names" />
          <variable citdl="os.path.join()" line="712" name="libfile" />
        </scope>
        <variable attributes="protected" citdl="list" line="303" name="_mc_extensions" />
        <variable attributes="__instancevar__" citdl="list" line="391" name="compile_options" />
        <variable citdl="str" line="310" name="obj_extension" />
        <variable attributes="__instancevar__" line="323" name="plat_name" />
        <variable attributes="protected" citdl="list" line="300" name="_c_extensions" />
        <variable attributes="protected" citdl="list" line="301" name="_cpp_extensions" />
        <variable attributes="protected" citdl="list" line="302" name="_rc_extensions" />
        <variable attributes="__instancevar__" line="389" name="preprocess_options" />
        <variable attributes="private __instancevar__" citdl="get_build_version()" line="318" name="__version" />
        <variable attributes="private __instancevar__" line="324" name="__arch" />
        <variable attributes="private __instancevar__" citdl="str" line="319" name="__root" />
        <scope ilk="function" line="554" lineend="658" name="link" signature="link(target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="target_desc" />
          <variable ilk="argument" name="objects" />
          <variable citdl="os.path.join()" ilk="argument" name="output_filename" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable ilk="argument" name="export_symbols" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable citdl="os.path.dirname()" ilk="argument" name="build_temp" />
          <variable ilk="argument" name="target_lang" />
          <variable citdl="self._fix_lib_args()" line="572" name="fixed_args" />
          <variable citdl="gen_lib_options()" line="580" name="lib_opts" />
          <variable citdl="list" line="589" name="ldflags" />
          <variable citdl="list" line="598" name="export_opts" />
          <variable citdl="list" line="602" name="ld_args" />
          <variable citdl="os.path.join()" line="614" name="implib_file" />
          <variable citdl="os.path.join()" line="624" name="temp_manifest" />
          <variable citdl="int" line="646" name="mfid" />
          <variable citdl="str" line="651" name="out_arg" />
        </scope>
        <scope ilk="function" line="327" lineend="409" name="initialize" signature="initialize(plat_name=None)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable citdl="get_platform()" ilk="argument" name="plat_name" />
          <variable citdl="tuple" line="333" name="ok_plats" />
          <variable citdl="str" line="354" name="plat_spec" />
          <variable citdl="query_vcvarsall()" line="360" name="vc_env" />
        </scope>
        <variable citdl="str" line="314" name="exe_extension" />
        <variable attributes="__instancevar__" citdl="list" line="407" name="ldflags_static" />
        <variable citdl="str" line="313" name="static_lib_format" />
        <variable attributes="__instancevar__" citdl="self.find_exe()" line="345" name="mc" />
        <variable attributes="private __instancevar__" citdl="normalize_and_reduce_paths()" line="321" name="__paths" />
        <variable attributes="__instancevar__" citdl="list" line="404" name="ldflags_shared_debug" />
        <scope ilk="function" line="444" lineend="526" name="compile" returns="objects" signature="compile(sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="sources" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="macros" />
          <variable ilk="argument" name="include_dirs" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="depends" />
          <variable citdl="self._setup_compile()" line="450" name="compile_info" />
          <variable citdl="list" line="454" name="compile_opts" />
          <variable citdl="os.path.abspath()" line="470" name="src" />
          <variable citdl="os.path.abspath()" line="473" name="input_opt" />
          <variable citdl="obj" line="479" name="output_opt" />
          <variable citdl="os.path.dirname()" line="498" name="h_dir" />
          <variable citdl="os.path.dirname()" line="499" name="rc_dir" />
          <variable citdl="os.path.join()" line="505" name="rc_file" />
        </scope>
        <variable citdl="str" line="309" name="res_extension" />
        <variable citdl="str" line="311" name="static_lib_extension" />
        <scope ilk="function" line="413" lineend="441" name="object_filenames" returns="list" signature="object_filenames(source_filenames, strip_dir=0, output_dir=&apos;&apos;)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="source_filenames" />
          <variable citdl="int" ilk="argument" name="strip_dir" />
          <variable citdl="str" ilk="argument" name="output_dir" />
          <variable citdl="list" line="420" name="obj_names" />
          <variable citdl="os.path.basename()" line="423" name="base" />
        </scope>
        <variable citdl="str" line="312" name="shared_lib_extension" />
      </scope>
      <scope classrefs="object" ilk="class" line="116" lineend="160" name="MacroExpander">
        <scope ilk="function" line="123" lineend="124" name="set_macro" signature="set_macro(macro, path, key)">
          <variable citdl="MacroExpander" ilk="argument" name="self" />
          <variable ilk="argument" name="macro" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="157" lineend="160" name="sub" returns="s.replace()" signature="sub(s)">
          <variable citdl="MacroExpander" ilk="argument" name="self" />
          <variable citdl="s.replace()" ilk="argument" name="s" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="120" name="vsbase" />
        <variable attributes="__instancevar__" citdl="dict" line="119" name="macros" />
        <scope ilk="function" line="126" lineend="155" name="load_macros" signature="load_macros(version)">
          <variable citdl="MacroExpander" ilk="argument" name="self" />
          <variable ilk="argument" name="version" />
          <variable citdl="str" line="147" name="p" />
          <variable citdl="RegOpenKeyEx()" line="150" name="h" />
          <variable citdl="RegEnumKey()" line="153" name="key" />
          <variable citdl="Reg.get_value()" line="154" name="d" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="118" lineend="121" name="__init__" signature="MacroExpander(version)">
          <variable citdl="MacroExpander" ilk="argument" name="self" />
          <variable ilk="argument" name="version" />
        </scope>
      </scope>
      <variable citdl="str" line="43" name="NET_BASE" />
      <variable citdl="dict" line="48" name="PLAT_TO_VCVARS" />
      <scope classrefs="object" doc="Helper class to read values from the registry" ilk="class" line="54" lineend="114" name="Reg">
        <scope doc="Return list of registry keys." ilk="function" line="82" lineend="81" name="read_keys" returns="list" signature="read_keys(base, key)">
          <variable citdl="Reg" ilk="argument" name="cls" />
          <variable ilk="argument" name="base" />
          <variable ilk="argument" name="key" />
          <variable citdl="RegOpenKeyEx()" line="69" name="handle" />
          <variable citdl="list" line="72" name="L" />
          <variable citdl="int" line="73" name="i" />
          <variable citdl="RegEnumKey()" line="76" name="k" />
        </scope>
        <scope ilk="function" line="64" lineend="63" name="get_value" signature="get_value(path, key)">
          <variable citdl="Reg" ilk="argument" name="cls" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="key" />
          <variable citdl="cls.read_values()" line="60" name="d" />
        </scope>
        <scope doc="Return dict of registry keys and values." ilk="function" line="104" lineend="103" name="read_values" returns="dict" signature="read_values(base, key)">
          <variable citdl="Reg" ilk="argument" name="cls" />
          <variable ilk="argument" name="base" />
          <variable ilk="argument" name="key" />
          <variable citdl="RegOpenKeyEx()" line="90" name="handle" />
          <variable citdl="dict" line="93" name="d" />
          <variable citdl="int" line="94" name="i" />
          <variable citdl="name.lower()" line="100" name="name" />
        </scope>
        <scope ilk="function" line="114" lineend="113" name="convert_mbcs" returns="Reg" signature="convert_mbcs()">
          <variable citdl="dec()" ilk="argument" name="s" />
          <variable citdl="getattr()" line="107" name="dec" />
        </scope>
      </scope>
      <scope doc="Enumerates subkeys of an open registry key." ilk="function" line="32" name="RegEnumKey" returns="str" signature="EnumKey(key, index) -&gt; string" />
      <scope doc="Enumerates values of an open registry key." ilk="function" line="33" name="RegEnumValue" returns="tuple" signature="EnumValue(key, index) -&gt; tuple" />
      <scope classrefs="OSError" doc="MS-Windows OS system call failed." ilk="class" line="34" name="RegError" />
      <scope doc="See OpenKey()" ilk="function" line="31" name="RegOpenKeyEx" />
      <variable citdl="float" line="281" name="VERSION" />
      <variable citdl="str" line="41" name="VS_BASE" />
      <variable citdl="str" line="42" name="WINSDK_BASE" />
      <variable citdl="str" line="15" name="__revision__" />
      <scope doc="Find the vcvarsall.bat file" ilk="function" line="209" lineend="242" name="find_vcvarsall" returns="os.path.join()" signature="find_vcvarsall(version)">
        <variable citdl="Reg.get_value()" line="217" name="productdir" />
        <variable citdl="os.path.join()" line="238" name="vcvarsall" />
        <variable citdl="str" line="215" name="vsbase" />
        <variable ilk="argument" name="version" />
        <variable citdl="os.environ.get()" line="225" name="toolsdir" />
        <variable citdl="str" line="224" name="toolskey" />
      </scope>
      <scope doc="Generate linker options for searching library directories and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at least two types of compilers: the typical Unix compiler and Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <scope doc="Return the version of MSVC that was used to build Python." ilk="function" line="162" lineend="182" name="get_build_version" returns="int()" signature="get_build_version()">
        <variable citdl="sys.version.find()" line="169" name="i" />
        <variable citdl="int()" line="174" name="majorVersion" />
        <variable citdl="str" line="168" name="prefix" />
        <variable citdl="int" line="175" name="minorVersion" />
      </scope>
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <import module="log" />
      <scope doc="Return a list of normalized paths with duplicates removed." ilk="function" line="184" lineend="196" name="normalize_and_reduce_paths" returns="list" signature="normalize_and_reduce_paths(paths)">
        <variable citdl="os.path.normpath()" line="192" name="np" />
        <variable ilk="argument" name="paths" />
        <variable citdl="list" line="190" name="reduced_paths" />
      </scope>
      <import module="os" />
      <scope doc="Launch vcvarsall.bat and read the settings from its environment" ilk="function" line="244" lineend="278" name="query_vcvarsall" returns="dict" signature="query_vcvarsall(version, arch=&apos;x86&apos;)">
        <variable citdl="find_vcvarsall()" line="247" name="vcvarsall" />
        <variable citdl="stdout.decode()" line="262" name="stdout" />
        <variable citdl="set()" line="248" name="interesting" />
        <variable citdl="subprocess.Popen()" line="254" name="popen" />
        <variable citdl="list" line="272" name="value" />
        <variable ilk="argument" name="version" />
        <variable citdl="dict" line="249" name="result" />
        <variable citdl="key.lower()" line="269" name="key" />
        <variable citdl="Reg.convert_mbcs()" line="264" name="line" />
        <variable citdl="str" ilk="argument" name="arch" />
      </scope>
      <import module="re" />
      <scope doc="Remove duplicate values of an environment variable." ilk="function" line="198" lineend="207" name="removeDuplicates" returns="os.pathsep.join()" signature="removeDuplicates(variable)">
        <variable ilk="argument" name="variable" />
        <variable citdl="list" line="202" name="newList" />
        <variable citdl="variable.split()" line="201" name="oldList" />
        <variable citdl="os.pathsep.join()" line="206" name="newVariable" />
      </scope>
      <import module="subprocess" />
      <import module="sys" />
      <import module="winreg" />
    </scope>
    <scope doc="A lexical analyzer class for simple shell-like syntaxes." ilk="blob" lang="Python3" name="shlex">
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <variable citdl="list" line="16" name="__all__" />
      <scope classrefs="object" doc="deque(iterable[, maxlen]) --&gt; deque object  Build an ordered collection accessible from endpoints only." ilk="class" name="deque" />
      <import module="os" />
      <scope classrefs="object" doc="A lexical analyzer class for simple shell-like syntaxes." ilk="class" line="18" lineend="269" name="shlex">
        <variable attributes="__instancevar__" citdl="str" line="42" name="quotes" />
        <scope doc="Get a token from the input stream (or from stack if it&apos;s nonempty)" ilk="function" line="85" lineend="115" name="get_token" returns="str" signature="get_token()">
          <variable citdl="shlex" ilk="argument" name="self" />
          <variable citdl="self.pushback.popleft()" line="88" name="tok" />
          <variable citdl="()" line="93" name="raw" />
          <variable citdl="self.sourcehook()" line="97" name="spec" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="43" name="escape" />
        <scope doc="Push a token onto the stack popped by the get_token method" ilk="function" line="56" lineend="60" name="push_token" signature="push_token(tok)">
          <variable citdl="shlex" ilk="argument" name="self" />
          <variable ilk="argument" name="tok" />
        </scope>
        <variable attributes="__instancevar__" citdl="deque()" line="50" name="filestack" />
        <scope attributes="__ctor__" ilk="function" line="20" lineend="54" name="__init__" signature="shlex(instream=None, infile=None, posix=False)">
          <variable citdl="shlex" ilk="argument" name="self" />
          <variable citdl="StringIO()" ilk="argument" name="instream" />
          <variable ilk="argument" name="infile" />
          <variable citdl="False" ilk="argument" name="posix" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="40" name="whitespace" />
        <variable attributes="__instancevar__" citdl="str" line="35" name="wordchars" />
        <variable attributes="__instancevar__" line="51" name="source" />
        <variable attributes="__instancevar__" citdl="str" line="45" name="state" />
        <variable attributes="__instancevar__" citdl="int" line="47" name="lineno" />
        <variable attributes="__instancevar__" line="25" name="infile" />
        <scope doc="Push an input source onto the lexer&apos;s input source stack." ilk="function" line="62" lineend="74" name="push_source" signature="push_source(newstream, newfile=None)">
          <variable citdl="shlex" ilk="argument" name="self" />
          <variable citdl="StringIO()" ilk="argument" name="newstream" />
          <variable ilk="argument" name="newfile" />
        </scope>
        <scope doc="Hook called on a filename to be sourced." ilk="function" line="245" lineend="252" name="sourcehook" returns="tuple" signature="sourcehook(newfile)">
          <variable citdl="shlex" ilk="argument" name="self" />
          <variable citdl="os.path.join()" ilk="argument" name="newfile" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="44" name="escapedquotes" />
        <scope ilk="function" line="265" lineend="269" name="__next__" returns="get_token()" signature="__next__()">
          <variable citdl="shlex" ilk="argument" name="self" />
          <variable citdl="get_token()" line="266" name="token" />
        </scope>
        <scope ilk="function" line="262" lineend="263" name="__iter__" returns="shlex" signature="__iter__()">
          <variable citdl="shlex" ilk="argument" name="self" />
        </scope>
        <scope doc="Pop the input source stack." ilk="function" line="76" lineend="83" name="pop_source" signature="pop_source()">
          <variable citdl="shlex" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="34" name="commenters" />
        <variable attributes="__instancevar__" citdl="str" line="31" name="eof" />
        <scope ilk="function" line="117" lineend="243" name="read_token" returns="str" signature="read_token()">
          <variable citdl="shlex" ilk="argument" name="self" />
          <variable citdl="False" line="118" name="quoted" />
          <variable citdl="str" line="119" name="escapedstate" />
          <variable citdl="self.instream.read()" line="121" name="nextchar" />
          <variable citdl="self.instream.read()" line="234" name="result" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="41" name="whitespace_split" />
        <scope doc="Emit a C-compiler-like, Emacs-friendly error-message leader." ilk="function" line="254" lineend="260" name="error_leader" returns="tuple" signature="error_leader(infile=None, lineno=None)">
          <variable citdl="shlex" ilk="argument" name="self" />
          <variable ilk="argument" name="infile" />
          <variable citdl="int" ilk="argument" name="lineno" />
        </scope>
        <variable attributes="__instancevar__" citdl="deque()" line="46" name="pushback" />
        <variable attributes="__instancevar__" citdl="self.instream.read()" line="49" name="token" />
        <variable attributes="__instancevar__" citdl="False" line="29" name="posix" />
        <variable attributes="__instancevar__" citdl="int" line="48" name="debug" />
        <variable attributes="__instancevar__" citdl="StringIO()" line="24" name="instream" />
      </scope>
      <scope ilk="function" line="271" lineend="276" name="split" returns="list()" signature="split(s, comments=False, posix=True)">
        <variable citdl="shlex" line="272" name="lex" />
        <variable ilk="argument" name="s" />
        <variable citdl="True" ilk="argument" name="posix" />
        <variable citdl="False" ilk="argument" name="comments" />
      </scope>
      <import module="sys" />
      <variable attributes="__hidden__" citdl="lexer.get_token()" line="285" name="tt" />
      <variable attributes="__hidden__" citdl="shlex" line="280" name="lexer" />
      <variable attributes="__hidden__" line="282" name="file" />
    </scope>
    <scope doc="# Module providing the `Pool` class for managing a process pool # # multiprocessing/pool.py" ilk="blob" lang="Python3" name="multiprocessing.pool">
      <scope classrefs="object" ilk="class" line="396" lineend="440" name="ApplyResult">
        <variable attributes="protected __instancevar__" line="403" name="_callback" />
        <scope ilk="function" line="421" lineend="428" name="get" returns="self._value" signature="get(timeout=None)">
          <variable citdl="ApplyResult" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <scope ilk="function" line="409" lineend="411" name="successful" returns="self._success" signature="successful()">
          <variable citdl="ApplyResult" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="402" name="_ready" />
        <scope ilk="function" line="406" lineend="407" name="ready" returns="bool" signature="ready()">
          <variable citdl="ApplyResult" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="threading.Condition()" line="399" name="_cond" />
        <variable attributes="protected __instancevar__" citdl="next()" line="400" name="_job" />
        <variable attributes="protected __instancevar__" line="401" name="_cache" />
        <scope attributes="protected" ilk="function" line="430" lineend="440" name="_set" signature="_set(i, obj)">
          <variable citdl="ApplyResult" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="obj" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="398" lineend="404" name="__init__" signature="ApplyResult(cache, callback)">
          <variable citdl="ApplyResult" ilk="argument" name="self" />
          <variable ilk="argument" name="cache" />
          <variable ilk="argument" name="callback" />
        </scope>
        <scope ilk="function" line="413" lineend="419" name="wait" signature="wait(timeout=None)">
          <variable citdl="ApplyResult" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
      </scope>
      <variable citdl="int" line="29" name="CLOSE" />
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs" ilk="class" name="Finalize" />
      <scope classrefs="object" ilk="class" line="490" lineend="557" name="IMapIterator">
        <scope attributes="protected" ilk="function" line="549" lineend="557" name="_set_length" signature="_set_length(length)">
          <variable citdl="IMapIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="length" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="497" name="_index" />
        <variable attributes="protected __instancevar__" citdl="dict" line="499" name="_unsorted" />
        <variable citdl="IMapIterator.next" line="528" name="__next__" />
        <scope ilk="function" line="502" lineend="503" name="__iter__" returns="IMapIterator" signature="__iter__()">
          <variable citdl="IMapIterator" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="505" lineend="526" name="next" returns="value" signature="next(timeout=None)">
          <variable citdl="IMapIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="self._items.popleft()" line="509" name="item" />
        </scope>
        <variable attributes="protected __instancevar__" line="498" name="_length" />
        <variable attributes="protected __instancevar__" citdl="threading.Condition()" line="493" name="_cond" />
        <variable attributes="protected __instancevar__" citdl="next()" line="494" name="_job" />
        <variable attributes="protected __instancevar__" line="495" name="_cache" />
        <variable attributes="protected __instancevar__" citdl="collections.deque()" line="496" name="_items" />
        <scope attributes="protected" ilk="function" line="530" lineend="547" name="_set" signature="_set(i, obj)">
          <variable citdl="IMapIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable citdl="self._unsorted.pop()" ilk="argument" name="obj" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="492" lineend="500" name="__init__" signature="IMapIterator(cache)">
          <variable citdl="IMapIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="cache" />
        </scope>
      </scope>
      <scope classrefs="IMapIterator" ilk="class" line="563" lineend="574" name="IMapUnorderedIterator">
        <scope attributes="protected" ilk="function" line="565" lineend="574" name="_set" signature="_set(i, obj)">
          <variable citdl="IMapUnorderedIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="obj" />
        </scope>
      </scope>
      <scope classrefs="ApplyResult" ilk="class" line="446" lineend="484" name="MapResult">
        <variable attributes="protected __instancevar__" citdl="result" line="451" name="_value" />
        <variable attributes="protected __instancevar__" line="452" name="_chunksize" />
        <variable attributes="protected __instancevar__" citdl="int" line="454" name="_number_left" />
        <variable attributes="protected __instancevar__" citdl="True" line="450" name="_success" />
        <variable attributes="protected __instancevar__" citdl="True" line="455" name="_ready" />
        <scope attributes="protected" ilk="function" line="459" lineend="484" name="_set" signature="_set(i, success_result)">
          <variable citdl="MapResult" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="success_result" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="448" lineend="457" name="__init__" signature="MapResult(cache, chunksize, length, callback)">
          <variable citdl="MapResult" ilk="argument" name="self" />
          <variable ilk="argument" name="cache" />
          <variable ilk="argument" name="chunksize" />
          <variable ilk="argument" name="length" />
          <variable ilk="argument" name="callback" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Class which supports an async version of applying functions to arguments." ilk="class" line="77" lineend="390" name="Pool">
        <scope doc="Asynchronous version of `apply()` method." ilk="function" line="190" lineend="197" name="apply_async" returns="ApplyResult()" signature="apply_async(func, args=(), kwds={}, callback=None)">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable citdl="dict" ilk="argument" name="kwds" />
          <variable ilk="argument" name="callback" />
          <variable citdl="ApplyResult()" line="195" name="result" />
        </scope>
        <scope attributes="protected" ilk="function" line="221" lineend="257" name="_handle_tasks" signature="_handle_tasks(put, outqueue, pool)">
          <variable citdl="Pool" ilk="argument" name="taskqueue" />
          <variable ilk="argument" name="put" />
          <variable ilk="argument" name="outqueue" />
          <variable ilk="argument" name="pool" />
          <variable citdl="threading.current_thread()" line="222" name="thread" />
          <variable citdl="int" line="225" name="i" />
        </scope>
        <scope attributes="protected" ilk="function" line="318" lineend="324" name="_get_tasks" signature="_get_tasks(it, size)">
          <variable citdl="Pool" ilk="argument" name="func" />
          <variable citdl="iter()" ilk="argument" name="it" />
          <variable ilk="argument" name="size" />
          <variable citdl="tuple()" line="321" name="x" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._outqueue._reader.recv" line="137" name="_quick_get" />
        <variable attributes="protected __instancevar__" citdl="int" line="87" name="_state" />
        <scope ilk="function" line="331" lineend="335" name="close" signature="close()">
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <scope doc="Equivalent of `func(*args, **kwds)`." ilk="function" line="139" lineend="144" name="apply" signature="apply(func, args=(), kwds={})">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable citdl="dict" ilk="argument" name="kwds" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._inqueue._writer.send" line="136" name="_quick_put" />
        <scope attributes="__ctor__" ilk="function" line="83" lineend="129" name="__init__" signature="Pool(processes=None, initializer=None, initargs=())">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable citdl="cpu_count()" ilk="argument" name="processes" />
          <variable ilk="argument" name="initializer" />
          <variable citdl="tuple" ilk="argument" name="initargs" />
          <variable citdl="Process()" line="100" name="w" />
        </scope>
        <scope attributes="protected" ilk="function" line="260" lineend="315" name="_handle_results" signature="_handle_results(get, cache)">
          <variable citdl="Pool" ilk="argument" name="outqueue" />
          <variable ilk="argument" name="get" />
          <variable ilk="argument" name="cache" />
          <variable citdl="threading.current_thread()" line="261" name="thread" />
          <variable citdl="get()" line="265" name="task" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="threading.Thread()" line="117" name="_result_handler" />
        <variable attributes="protected __instancevar__" citdl="dict" line="86" name="_cache" />
        <scope doc="Asynchronous version of `map()` method." ilk="function" line="199" lineend="218" name="map_async" returns="MapResult()" signature="map_async(func, iterable, chunksize=None, callback=None)">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable citdl="list()" ilk="argument" name="iterable" />
          <variable citdl="int" ilk="argument" name="chunksize" />
          <variable ilk="argument" name="callback" />
          <variable citdl="Pool._get_tasks()" line="214" name="task_batches" />
          <variable citdl="MapResult()" line="215" name="result" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Finalize()" line="125" name="_terminate" />
        <scope doc="Apply `func` to each element in `iterable`, collecting the results in a list that is returned." ilk="function" line="146" lineend="152" name="map" signature="map(func, iterable, chunksize=None)">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="iterable" />
          <variable ilk="argument" name="chunksize" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="SimpleQueue()" line="135" name="_outqueue" />
        <scope doc="Like `imap()` method but ordering of results is arbitrary." ilk="function" line="172" lineend="188" name="imap_unordered" returns="IMapUnorderedIterator()" signature="imap_unordered(func, iterable, chunksize=1)">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="iterable" />
          <variable citdl="int" ilk="argument" name="chunksize" />
          <variable citdl="IMapUnorderedIterator()" line="178" name="result" />
          <variable citdl="Pool._get_tasks()" line="184" name="task_batches" />
        </scope>
        <scope ilk="function" line="337" lineend="340" name="terminate" signature="terminate()">
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="360" lineend="390" name="_terminate_pool" signature="_terminate_pool(taskqueue, inqueue, outqueue, pool, task_handler, result_handler, cache)">
          <variable citdl="Pool" ilk="argument" name="cls" />
          <variable ilk="argument" name="taskqueue" />
          <variable ilk="argument" name="inqueue" />
          <variable ilk="argument" name="outqueue" />
          <variable ilk="argument" name="pool" />
          <variable ilk="argument" name="task_handler" />
          <variable ilk="argument" name="result_handler" />
          <variable ilk="argument" name="cache" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="threading.Thread()" line="109" name="_task_handler" />
        <scope attributes="protected" ilk="function" line="351" lineend="357" name="_help_stuff_finish" signature="_help_stuff_finish(task_handler, size)">
          <variable citdl="Pool" ilk="argument" name="inqueue" />
          <variable ilk="argument" name="task_handler" />
          <variable ilk="argument" name="size" />
        </scope>
        <scope ilk="function" line="326" lineend="328" name="__reduce__" signature="__reduce__()">
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="132" lineend="137" name="_setup_queues" signature="_setup_queues()">
          <import line="133" module=".queues" symbol="SimpleQueue" />
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <scope doc="Equivalent of `map()` -- can be MUCH slower than `Pool.map()`." ilk="function" line="154" lineend="170" name="imap" returns="IMapIterator()" signature="imap(func, iterable, chunksize=1)">
          <variable citdl="Pool" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="iterable" />
          <variable citdl="int" ilk="argument" name="chunksize" />
          <variable citdl="IMapIterator()" line="160" name="result" />
          <variable citdl="Pool._get_tasks()" line="166" name="task_batches" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="SimpleQueue()" line="134" name="_inqueue" />
        <scope ilk="function" line="342" lineend="348" name="join" signature="join()">
          <variable citdl="Pool" ilk="argument" name="self" />
        </scope>
        <variable line="81" name="Process" />
        <variable attributes="protected __instancevar__" citdl="list" line="98" name="_pool" />
        <variable attributes="protected __instancevar__" citdl="queue.Queue()" line="85" name="_taskqueue" />
      </scope>
      <scope classrefs="object" doc="Process objects represent activity that is run in a separate process  The class is analagous to `threading.Thread`" ilk="class" name="Process" />
      <variable citdl="int" line="28" name="RUN" />
      <variable citdl="int" line="30" name="TERMINATE" />
      <scope classrefs="Pool" ilk="class" line="580" lineend="602" name="ThreadPool">
        <variable attributes="protected __instancevar__" citdl="queue.Queue()" line="589" name="_outqueue" />
        <scope attributes="protected" ilk="function" line="587" lineend="591" name="_setup_queues" signature="_setup_queues()">
          <variable citdl="ThreadPool" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._outqueue.get" line="591" name="_quick_get" />
        <variable attributes="protected __instancevar__" citdl="queue.Queue()" line="588" name="_inqueue" />
        <scope attributes="protected" ilk="function" line="594" lineend="602" name="_help_stuff_finish" signature="_help_stuff_finish(task_handler, size)">
          <variable citdl="ThreadPool" ilk="argument" name="inqueue" />
          <variable ilk="argument" name="task_handler" />
          <variable ilk="argument" name="size" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._inqueue.put" line="590" name="_quick_put" />
        <scope attributes="__ctor__" ilk="function" line="584" lineend="585" name="__init__" signature="ThreadPool(processes=None, initializer=None, initargs=())">
          <variable citdl="ThreadPool" ilk="argument" name="self" />
          <variable ilk="argument" name="processes" />
          <variable ilk="argument" name="initializer" />
          <variable citdl="tuple" ilk="argument" name="initargs" />
        </scope>
      </scope>
      <scope classrefs="ProcessError" ilk="class" name="TimeoutError" />
      <variable citdl="list" line="9" name="__all__" />
      <import module="collections" />
      <scope doc="Returns the number of CPUs in the system" ilk="function" name="cpu_count" signature="cpu_count()" />
      <scope ilk="function" name="debug" signature="debug(msg, *args)" />
      <import module="itertools" />
      <variable citdl="count" line="36" name="job_counter" />
      <scope ilk="function" line="38" lineend="39" name="mapstar" returns="list()" signature="mapstar(args)">
        <variable ilk="argument" name="args" />
      </scope>
      <import module="queue" />
      <import module="threading" />
      <import module="time" />
      <scope ilk="function" line="45" lineend="71" name="worker" signature="worker(inqueue, outqueue, initializer=None, initargs=())">
        <variable citdl="get()" line="57" name="task" />
        <variable citdl="inqueue.get" line="47" name="get" />
        <variable ilk="argument" name="initializer" />
        <variable ilk="argument" name="outqueue" />
        <variable ilk="argument" name="inqueue" />
        <variable citdl="outqueue.put" line="46" name="put" />
        <variable citdl="tuple" ilk="argument" name="initargs" />
        <variable citdl="tuple" line="68" name="result" />
      </scope>
    </scope>
    <scope ilk="blob" lang="Python3" name="tkinter._fix">
      <import module="_tkinter" />
      <scope ilk="function" line="21" lineend="45" name="convert_path" returns="s.decode()" signature="convert_path(s)">
        <variable citdl="ctypes.windll.kernel32.CreateFileW()" line="24" name="hdir" />
        <variable citdl="list" ilk="argument" name="s" />
        <variable citdl="ctypes.create_unicode_buffer()" line="33" name="buf" />
        <variable citdl="ctypes.windll.kernel32.GetFinalPathNameByHandleW()" line="34" name="res" />
      </scope>
      <import module="ctypes" />
      <variable citdl="str" name="name" />
      <import module="os" />
      <variable citdl="str" line="47" name="prefix" />
      <import module="sys" />
      <variable citdl="str" line="58" name="tcldir" />
      <variable citdl="str" line="74" name="tixdir" />
      <variable citdl="str" line="66" name="v" />
      <variable citdl="str" line="64" name="ver" />
    </scope>
    <scope ilk="blob" lang="Python3" name="msilib.schema">
      <variable citdl="Table" line="15" name="ActionText" />
      <variable citdl="Table" line="20" name="AdminExecuteSequence" />
      <variable citdl="Table" line="30" name="AdminUISequence" />
      <variable citdl="Table" line="35" name="AdvtExecuteSequence" />
      <variable citdl="Table" line="40" name="AdvtUISequence" />
      <variable citdl="Table" line="45" name="AppId" />
      <variable citdl="Table" line="54" name="AppSearch" />
      <variable citdl="Table" line="62" name="BBControl" />
      <variable citdl="Table" line="73" name="Billboard" />
      <variable citdl="Table" line="89" name="Binary" />
      <variable citdl="Table" line="93" name="BindImage" />
      <variable citdl="Table" line="107" name="CCPSearch" />
      <variable citdl="Table" line="110" name="CheckBox" />
      <variable citdl="Table" line="114" name="Class" />
      <variable citdl="Table" line="149" name="ComboBox" />
      <variable citdl="Table" line="155" name="CompLocator" />
      <variable citdl="Table" line="160" name="Complus" />
      <variable citdl="Table" line="129" name="Component" />
      <variable citdl="Table" line="25" name="Condition" />
      <variable citdl="Table" line="169" name="Control" />
      <variable citdl="Table" line="195" name="ControlCondition" />
      <variable citdl="Table" line="201" name="ControlEvent" />
      <variable citdl="Table" line="209" name="CreateFolder" />
      <variable citdl="Table" line="213" name="CustomAction" />
      <variable citdl="Table" line="183" name="Dialog" />
      <variable citdl="Table" line="164" name="Directory" />
      <variable citdl="Table" line="219" name="DrLocator" />
      <variable citdl="Table" line="225" name="DuplicateFile" />
      <variable citdl="Table" line="232" name="Environment" />
      <variable citdl="Table" line="238" name="Error" />
      <variable citdl="Table" line="242" name="EventMapping" />
      <variable citdl="Table" line="248" name="Extension" />
      <variable citdl="Table" line="79" name="Feature" />
      <variable citdl="Table" line="260" name="FeatureComponents" />
      <variable citdl="Table" line="97" name="File" />
      <variable citdl="Table" line="264" name="FileSFPCatalog" />
      <variable citdl="Table" line="273" name="Font" />
      <variable citdl="Table" line="137" name="Icon" />
      <variable citdl="Table" line="277" name="IniFile" />
      <variable citdl="Table" line="287" name="IniLocator" />
      <variable citdl="Table" line="295" name="InstallExecuteSequence" />
      <variable citdl="Table" line="300" name="InstallUISequence" />
      <variable citdl="Table" line="305" name="IsolatedComponent" />
      <variable citdl="Table" line="309" name="LaunchCondition" />
      <variable citdl="Table" line="313" name="ListBox" />
      <variable citdl="Table" line="319" name="ListView" />
      <variable citdl="Table" line="326" name="LockPermissions" />
      <variable citdl="Table" line="255" name="MIME" />
      <variable citdl="Table" line="333" name="Media" />
      <variable citdl="Table" line="341" name="MoveFile" />
      <variable citdl="Table" line="350" name="MsiAssembly" />
      <variable citdl="Table" line="357" name="MsiAssemblyName" />
      <variable citdl="Table" line="362" name="MsiDigitalCertificate" />
      <variable citdl="Table" line="366" name="MsiDigitalSignature" />
      <variable citdl="Table" line="372" name="MsiFileHash" />
      <variable citdl="Table" line="380" name="MsiPatchHeaders" />
      <variable citdl="Table" line="384" name="ODBCAttribute" />
      <variable citdl="Table" line="396" name="ODBCDataSource" />
      <variable citdl="Table" line="389" name="ODBCDriver" />
      <variable citdl="Table" line="403" name="ODBCSourceAttribute" />
      <variable citdl="Table" line="408" name="ODBCTranslator" />
      <variable citdl="Table" line="415" name="Patch" />
      <variable citdl="Table" line="423" name="PatchPackage" />
      <variable citdl="Table" line="141" name="ProgId" />
      <variable citdl="Table" line="58" name="Property" />
      <variable citdl="Table" line="427" name="PublishComponent" />
      <variable citdl="Table" line="434" name="RadioButton" />
      <variable citdl="Table" line="453" name="RegLocator" />
      <variable citdl="Table" line="445" name="Registry" />
      <variable citdl="Table" line="460" name="RemoveFile" />
      <variable citdl="Table" line="467" name="RemoveIniFile" />
      <variable citdl="Table" line="477" name="RemoveRegistry" />
      <variable citdl="Table" line="484" name="ReserveCost" />
      <variable citdl="Table" line="268" name="SFPCatalog" />
      <variable citdl="Table" line="491" name="SelfReg" />
      <variable citdl="Table" line="495" name="ServiceControl" />
      <variable citdl="Table" line="503" name="ServiceInstall" />
      <variable citdl="Table" line="518" name="Shortcut" />
      <variable citdl="Table" line="532" name="Signature" />
      <scope classrefs="object" ilk="class" name="Table" />
      <variable citdl="Table" line="543" name="TextStyle" />
      <variable citdl="Table" line="550" name="TypeLib" />
      <variable citdl="Table" line="560" name="UIText" />
      <variable citdl="Table" line="564" name="Upgrade" />
      <variable citdl="Table" line="573" name="Verb" />
      <variable citdl="list" line="580" name="tables" />
      <variable attributes="protected __hidden__" citdl="Table()" line="3" name="_Validation" />
      <variable attributes="protected __hidden__" citdl="list" line="582" name="_Validation_records" />
    </scope>
    <scope doc="# Package analogous to &apos;threading.py&apos; but using processes # # multiprocessing/__init__.py" ilk="blob" lang="Python3" name="multiprocessing">
      <scope doc="Returns a synchronized shared array" ilk="function" line="249" lineend="254" name="Array" returns="Array()" signature="Array(typecode_or_type, size_or_initializer, **kwds)">
        <variable ilk="argument" name="typecode_or_type" />
        <variable attributes="kwargs" ilk="argument" name="kwds" />
        <variable ilk="argument" name="size_or_initializer" />
      </scope>
      <scope classrefs="ProcessError" ilk="class" line="79" lineend="80" name="AuthenticationError" />
      <scope doc="Returns a bounded semaphore object" ilk="function" line="193" lineend="198" name="BoundedSemaphore" returns="BoundedSemaphore()" signature="BoundedSemaphore(value=1)">
        <variable citdl="int" ilk="argument" name="value" />
      </scope>
      <scope classrefs="ProcessError" ilk="class" line="73" lineend="74" name="BufferTooShort" />
      <scope doc="Returns a condition object" ilk="function" line="179" lineend="184" name="Condition" returns="Condition()" signature="Condition(lock=None)">
        <variable ilk="argument" name="lock" />
      </scope>
      <scope doc="Returns an event object" ilk="function" line="200" lineend="205" name="Event" returns="Event()" signature="Event()" />
      <scope doc="Returns a queue object" ilk="function" line="214" lineend="219" name="JoinableQueue" returns="JoinableQueue()" signature="JoinableQueue(maxsize=0)">
        <variable citdl="int" ilk="argument" name="maxsize" />
      </scope>
      <scope doc="Returns a non-recursive lock object" ilk="function" line="165" lineend="170" name="Lock" returns="Lock()" signature="Lock()" />
      <scope doc="Returns a manager associated with a running server process" ilk="function" line="88" lineend="98" name="Manager" returns="SyncManager()" signature="Manager()">
        <variable citdl="SyncManager()" line="96" name="m" />
      </scope>
      <scope doc="Returns two connection object connected by a pipe" ilk="function" line="100" lineend="105" name="Pipe" returns="Pipe()" signature="Pipe(duplex=True)">
        <variable citdl="True" ilk="argument" name="duplex" />
      </scope>
      <scope doc="Returns a process pool object" ilk="function" line="221" lineend="226" name="Pool" returns="Pool()" signature="Pool(processes=None, initializer=None, initargs=())">
        <variable citdl="tuple" ilk="argument" name="initargs" />
        <variable ilk="argument" name="processes" />
        <variable ilk="argument" name="initializer" />
      </scope>
      <scope classrefs="object" doc="Process objects represent activity that is run in a separate process  The class is analagous to `threading.Thread`" ilk="class" name="Process" />
      <scope classrefs="Exception" ilk="class" line="70" lineend="71" name="ProcessError" />
      <scope doc="Returns a queue object" ilk="function" line="207" lineend="212" name="Queue" returns="Queue()" signature="Queue(maxsize=0)">
        <variable citdl="int" ilk="argument" name="maxsize" />
      </scope>
      <scope doc="Returns a recursive lock object" ilk="function" line="172" lineend="177" name="RLock" returns="RLock()" signature="RLock()" />
      <scope doc="Returns a shared array" ilk="function" line="235" lineend="240" name="RawArray" returns="RawArray()" signature="RawArray(typecode_or_type, size_or_initializer)">
        <variable ilk="argument" name="typecode_or_type" />
        <variable ilk="argument" name="size_or_initializer" />
      </scope>
      <scope doc="Returns a shared object" ilk="function" line="228" lineend="233" name="RawValue" returns="RawValue()" signature="RawValue(typecode_or_type, *args)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="typecode_or_type" />
      </scope>
      <variable citdl="int" name="SUBDEBUG" />
      <variable citdl="int" name="SUBWARNING" />
      <scope doc="Returns a semaphore object" ilk="function" line="186" lineend="191" name="Semaphore" returns="Semaphore()" signature="Semaphore(value=1)">
        <variable citdl="int" ilk="argument" name="value" />
      </scope>
      <scope classrefs="ProcessError" ilk="class" line="76" lineend="77" name="TimeoutError" />
      <scope doc="Returns a synchronized shared object" ilk="function" line="242" lineend="247" name="Value" returns="Value()" signature="Value(typecode_or_type, *args, **kwds)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="typecode_or_type" />
        <variable attributes="kwargs" ilk="argument" name="kwds" />
      </scope>
      <variable citdl="list" line="45" name="__all__" />
      <variable citdl="str" line="54" name="__author__" />
      <variable citdl="str" line="43" name="__version__" />
      <import module="_multiprocessing" />
      <scope doc="Return list of process objects corresponding to live child processes" ilk="function" name="active_children" signature="active_children()" />
      <scope doc="Install support for sending connections and sockets between processes" ilk="function" line="155" lineend="159" name="allow_connection_pickling" signature="allow_connection_pickling()" />
      <import module="connection" />
      <scope doc="Returns the number of CPUs in the system" ilk="function" line="107" lineend="130" name="cpu_count" returns="int()" signature="cpu_count()">
        <variable citdl="int" line="113" name="num" />
      </scope>
      <scope doc="Return process object representing the current process" ilk="function" name="current_process" signature="current_process()" />
      <import module="dummy" />
      <import module="forking" />
      <scope doc="Check whether this is a fake forked process in a frozen executable." ilk="function" line="132" lineend="139" name="freeze_support" signature="freeze_support()" />
      <scope doc="Return package logger -- if it does not already exist then it is created" ilk="function" line="141" lineend="146" name="get_logger" returns="get_logger()" signature="get_logger()" />
      <scope doc="Turn on logging and add a handler which prints to stderr" ilk="function" line="148" lineend="153" name="log_to_stderr" returns="log_to_stderr()" signature="log_to_stderr(level=None)">
        <variable ilk="argument" name="level" />
      </scope>
      <import module="managers" />
      <import module="os" />
      <import module="pool" />
      <import module="process" />
      <import module="queues" />
      <import module="reduction" />
      <scope doc="Sets the path to a python.exe or pythonw.exe binary used to run child processes on Windows instead of sys.executable." ilk="function" line="262" lineend="269" name="set_executable" signature="set_executable(executable)">
        <variable ilk="argument" name="executable" />
      </scope>
      <import module="synchronize" />
      <import module="sys" />
      <import module="util" />
    </scope>
    <scope doc="Faux ``threading`` version using ``dummy_thread`` instead of ``thread``.  The module ``_dummy_threading`` is added to ``sys.modules`` in order" ilk="blob" lang="Python3" name="dummy_threading">
      <scope ilk="function" name="BoundedSemaphore" signature="BoundedSemaphore(*args, **kwargs)" />
      <scope ilk="function" name="Condition" signature="Condition(*args, **kwargs)" />
      <scope ilk="function" name="Event" signature="Event(*args, **kwargs)" />
      <scope doc="Dummy implementation of _thread.allocate_lock()." ilk="function" name="Lock" signature="Lock()" />
      <scope ilk="function" name="RLock" signature="RLock(*args, **kwargs)" />
      <scope ilk="function" name="Semaphore" signature="Semaphore(*args, **kwargs)" />
      <scope classrefs="_Verbose" ilk="class" name="Thread" />
      <scope ilk="function" name="Timer" signature="Timer(*args, **kwargs)" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="active_count" signature="active_count()" />
      <scope ilk="function" name="current_thread" signature="current_thread()" />
      <scope ilk="function" name="enumerate" signature="enumerate()" />
      <scope classrefs="_localbase" ilk="class" name="local" />
      <scope ilk="function" name="setprofile" signature="setprofile(func)" />
      <scope ilk="function" name="settrace" signature="settrace(func)" />
      <scope doc="Dummy implementation of _thread.stack_size()." ilk="function" name="stack_size" signature="stack_size(size=None)" />
      <import module="threading" />
      <variable attributes="__hidden__" line="41" name="held__threading_local" />
      <variable attributes="__hidden__" citdl="True" line="16" name="holding__threading_local" />
      <variable attributes="__hidden__" citdl="True" line="14" name="holding_thread" />
      <variable attributes="__hidden__" line="23" name="held_thread" />
      <variable attributes="__hidden__" citdl="True" line="15" name="holding_threading" />
      <variable attributes="__hidden__" line="33" name="held_threading" />
    </scope>
    <scope doc="Disassembler of Python byte code into mnemonics." ilk="blob" lang="Python3" name="dis">
      <variable citdl="int" name="EXTENDED_ARG" />
      <variable citdl="int" name="HAVE_ARGUMENT" />
      <variable citdl="list" line="9" name="__all__" />
      <variable citdl="tuple" name="cmp_op" />
      <scope doc="Disassemble classes, methods, functions, or code." ilk="function" line="13" lineend="43" name="dis" signature="dis(x=None)">
        <variable citdl="x.__func__" ilk="argument" name="x" />
        <variable citdl="sorted()" line="27" name="items" />
      </scope>
      <scope doc="Disassemble a code object." ilk="function" line="111" lineend="157" name="disassemble" signature="disassemble(co, lasti=-1)">
        <variable citdl="int" line="118" name="extended_arg" />
        <variable citdl="co.co_code" line="113" name="code" />
        <variable ilk="argument" name="co" />
        <variable citdl="int" line="117" name="i" />
        <variable citdl="findlabels()" line="114" name="labels" />
        <variable citdl="int" ilk="argument" name="lasti" />
        <variable citdl="co.co_freevars" line="119" name="free" />
        <variable citdl="len()" line="116" name="n" />
        <variable citdl="int" line="137" name="oparg" />
        <variable citdl="dict()" line="115" name="linestarts" />
        <variable line="121" name="op" />
      </scope>
      <scope ilk="function" line="159" lineend="196" name="disassemble_string" signature="disassemble_string(code, lasti=-1, varnames=None, names=None, constants=None)">
        <variable ilk="argument" name="code" />
        <variable citdl="int" line="163" name="i" />
        <variable citdl="findlabels()" line="161" name="labels" />
        <variable citdl="int" ilk="argument" name="lasti" />
        <variable citdl="len()" line="162" name="n" />
        <variable ilk="argument" name="varnames" />
        <variable citdl="int" line="174" name="oparg" />
        <variable ilk="argument" name="names" />
        <variable ilk="argument" name="constants" />
        <variable line="165" name="op" />
      </scope>
      <scope doc="Disassemble a code object." ilk="function" line="198" name="disco" signature="disco(co, lasti=-1)" />
      <scope doc="Disassemble a traceback (default: last traceback)." ilk="function" line="45" lineend="53" name="distb" signature="distb(tb=None)">
        <variable citdl="tb.tb_next" ilk="argument" name="tb" />
      </scope>
      <scope doc="Detect all offsets in a byte code which are jump targets." ilk="function" line="200" lineend="223" name="findlabels" returns="list" signature="findlabels(code)">
        <variable ilk="argument" name="code" />
        <variable citdl="int" line="208" name="i" />
        <variable citdl="list" line="206" name="labels" />
        <variable citdl="len()" line="207" name="n" />
        <variable citdl="int" line="213" name="oparg" />
        <variable citdl="int" line="215" name="label" />
        <variable line="210" name="op" />
      </scope>
      <scope doc="Find the offsets in a byte code which are start of lines in the source." ilk="function" line="225" lineend="245" name="findlinestarts" signature="findlinestarts(code)">
        <variable ilk="argument" name="code" />
        <variable citdl="int" line="236" name="addr" />
        <variable citdl="list()" line="232" name="line_increments" />
        <variable citdl="code.co_firstlineno" line="235" name="lineno" />
        <variable citdl="list()" line="231" name="byte_increments" />
        <variable citdl="code.co_firstlineno" line="234" name="lastlineno" />
      </scope>
      <variable citdl="dict" line="57" name="flag2name" />
      <variable citdl="list" name="hascompare" />
      <variable citdl="list" name="hasconst" />
      <variable citdl="list" name="hasfree" />
      <variable citdl="list" name="hasjabs" />
      <variable citdl="list" name="hasjrel" />
      <variable citdl="list" name="haslocal" />
      <variable citdl="list" name="hasname" />
      <variable citdl="dict" name="opmap" />
      <variable citdl="list" name="opname" />
      <scope doc="Return pretty representation of code flags." ilk="function" line="67" lineend="79" name="pretty_flags" returns="str.join()" signature="pretty_flags(flags)">
        <variable citdl="int" line="71" name="flag" />
        <variable ilk="argument" name="flags" />
        <variable citdl="list" line="69" name="names" />
      </scope>
      <scope doc="Show details about a code object." ilk="function" line="81" lineend="109" name="show_code" signature="show_code(co)">
        <variable ilk="argument" name="co" />
      </scope>
      <import module="sys" />
      <import module="types" />
      <scope attributes="protected __hidden__" doc="Simple test program to disassemble a file." ilk="function" line="247" lineend="268" name="_test" signature="_test()">
        <variable citdl="str" line="253" name="fn" />
        <variable citdl="open()" line="259" name="f" />
        <variable citdl="f.read()" line="262" name="source" />
        <variable citdl="compile()" line="267" name="code" />
      </scope>
    </scope>
    <scope doc="Basic infrastructure for asynchronous socket service clients and servers.  There are only two ways to have a program on a single processor do &quot;more" ilk="blob" lang="Python3" name="asyncore">
      <variable citdl="int" name="EALREADY" />
      <variable citdl="int" name="EBADF" />
      <variable citdl="int" name="ECONNABORTED" />
      <variable citdl="int" name="ECONNRESET" />
      <variable citdl="int" name="EINPROGRESS" />
      <variable citdl="int" name="EINTR" />
      <variable citdl="int" name="EISCONN" />
      <variable citdl="int" name="ENOTCONN" />
      <variable citdl="int" name="ESHUTDOWN" />
      <variable citdl="int" name="EWOULDBLOCK" />
      <scope classrefs="Exception" ilk="class" line="68" lineend="69" name="ExitNow" />
      <scope ilk="function" line="547" lineend="563" name="close_all" signature="close_all(map=None, ignore_all=False)">
        <variable citdl="dict" ilk="argument" name="map" />
        <variable citdl="False" ilk="argument" name="ignore_all" />
      </scope>
      <scope ilk="function" line="527" lineend="545" name="compact_traceback" returns="tuple" signature="compact_traceback()">
        <variable citdl="list" line="529" name="tbinfo" />
        <variable citdl="str.join()" line="544" name="info" />
        <variable citdl="tb.tb_next" line="538" name="tb" />
      </scope>
      <scope classrefs="object" ilk="class" line="213" lineend="493" name="dispatcher">
        <scope ilk="function" line="294" lineend="303" name="set_reuse_addr" signature="set_reuse_addr()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="343" lineend="352" name="accept" returns="tuple" signature="accept()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="314" lineend="315" name="writable" returns="bool" signature="writable()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="354" lineend="365" name="send" returns="self.socket.send()" signature="send(data)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="self.socket.send()" line="356" name="result" />
        </scope>
        <scope ilk="function" line="411" lineend="420" name="handle_read_event" signature="handle_read_event()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="385" lineend="393" name="close" signature="close()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="456" lineend="474" name="handle_error" signature="handle_error()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable citdl="id()" line="461" name="self_repr" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="222" lineend="252" name="__init__" signature="dispatcher(sock=None, map=None)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="sock" />
          <variable ilk="argument" name="map" />
        </scope>
        <variable citdl="sock.getpeername()" line="219" name="addr" />
        <scope ilk="function" line="288" lineend="292" name="set_socket" signature="set_socket(sock, map=None)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="sock" />
          <variable ilk="argument" name="map" />
        </scope>
        <scope ilk="function" line="488" lineend="489" name="handle_accept" signature="handle_accept()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="311" lineend="312" name="readable" returns="bool" signature="readable()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="397" lineend="398" name="__getattr__" returns="getattr()" signature="__getattr__(attr)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
        </scope>
        <variable citdl="frozenset()" line="220" name="ignore_log_types" />
        <scope ilk="function" line="482" lineend="483" name="handle_write" signature="handle_write()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="441" lineend="454" name="handle_expt_event" signature="handle_expt_event()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable citdl="self.socket.getsockopt()" line="445" name="err" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="sock.fileno()" line="228" name="_fileno" />
        <scope ilk="function" line="407" lineend="409" name="log_info" signature="log_info(message, type=&apos;info&apos;)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="str" ilk="argument" name="type" />
        </scope>
        <scope ilk="function" line="282" lineend="286" name="create_socket" signature="create_socket(family, type)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="family" />
          <variable ilk="argument" name="type" />
          <variable citdl="socket.socket()" line="284" name="sock" />
        </scope>
        <scope ilk="function" line="321" lineend="325" name="listen" returns="self.socket.listen()" signature="listen(num)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="num" />
        </scope>
        <scope ilk="function" line="476" lineend="477" name="handle_expt" signature="handle_expt()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <variable citdl="False" line="215" name="debug" />
        <variable citdl="False" line="216" name="connected" />
        <scope ilk="function" line="479" lineend="480" name="handle_read" signature="handle_read()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <variable citdl="True" line="217" name="accepting" />
        <scope ilk="function" line="367" lineend="383" name="recv" returns="str" signature="recv(buffer_size)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="buffer_size" />
          <variable citdl="self.socket.recv()" line="369" name="data" />
        </scope>
        <scope ilk="function" line="404" lineend="405" name="log" signature="log(message)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <variable attributes="__instancevar__" line="252" name="socket" />
        <variable attributes="__instancevar__" citdl="tuple" line="283" name="family_and_type" />
        <variable attributes="protected __instancevar__" citdl="dict" line="224" name="_map" />
        <scope ilk="function" line="327" lineend="329" name="bind" returns="self.socket.bind()" signature="bind(addr)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="addr" />
        </scope>
        <scope ilk="function" line="485" lineend="486" name="handle_connect" signature="handle_connect()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="254" lineend="265" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable citdl="list" line="255" name="status" />
        </scope>
        <scope ilk="function" line="267" lineend="271" name="add_channel" signature="add_channel(map=None)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable citdl="dict" ilk="argument" name="map" />
        </scope>
        <scope ilk="function" line="491" lineend="493" name="handle_close" signature="handle_close()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="273" lineend="280" name="del_channel" signature="del_channel(map=None)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable citdl="dict" ilk="argument" name="map" />
          <variable line="274" name="fd" />
        </scope>
        <scope ilk="function" line="426" lineend="439" name="handle_write_event" signature="handle_write_event()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable citdl="self.socket.getsockopt()" line="434" name="err" />
        </scope>
        <variable citdl="False" line="218" name="closing" />
        <scope ilk="function" line="422" lineend="424" name="handle_connect_event" signature="handle_connect_event()">
          <variable citdl="dispatcher" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="331" lineend="341" name="connect" signature="connect(address)">
          <variable citdl="dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="address" />
          <variable citdl="self.socket.connect_ex()" line="333" name="err" />
        </scope>
      </scope>
      <scope classrefs="dispatcher" ilk="class" line="500" lineend="521" name="dispatcher_with_send">
        <scope ilk="function" line="511" lineend="512" name="handle_write" signature="handle_write()">
          <variable citdl="dispatcher_with_send" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="504" name="out_buffer" />
        <scope ilk="function" line="506" lineend="509" name="initiate_send" signature="initiate_send()">
          <variable citdl="dispatcher_with_send" ilk="argument" name="self" />
          <variable citdl="int" line="507" name="num_sent" />
        </scope>
        <scope ilk="function" line="517" lineend="521" name="send" signature="send(data)">
          <variable citdl="dispatcher_with_send" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="514" lineend="515" name="writable" returns="bool" signature="writable()">
          <variable citdl="dispatcher_with_send" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="502" lineend="504" name="__init__" signature="dispatcher_with_send(sock=None, map=None)">
          <variable citdl="dispatcher_with_send" ilk="argument" name="self" />
          <variable ilk="argument" name="sock" />
          <variable ilk="argument" name="map" />
        </scope>
      </scope>
      <variable citdl="dict" name="errorcode" />
      <scope ilk="function" line="195" lineend="211" name="loop" signature="loop(timeout=30.0, use_poll=False, map=None, count=None)">
        <variable ilk="argument" name="count" />
        <variable citdl="dict" ilk="argument" name="map" />
        <variable citdl="False" ilk="argument" name="use_poll" />
        <variable citdl="float" ilk="argument" name="timeout" />
        <variable citdl="poll2" line="200" name="poll_fun" />
      </scope>
      <import module="os" />
      <scope ilk="function" line="117" lineend="159" name="poll" signature="poll(timeout=0.0, map=None)">
        <variable citdl="dict" ilk="argument" name="map" />
        <variable citdl="obj.readable()" line="123" name="is_r" />
        <variable citdl="list" line="121" name="e" />
        <variable citdl="float" ilk="argument" name="timeout" />
        <variable citdl="obj.writable()" line="124" name="is_w" />
        <variable citdl="list" line="121" name="r" />
        <variable citdl="list" line="121" name="w" />
        <variable citdl="map.get()" line="144" name="obj" />
      </scope>
      <scope ilk="function" line="161" lineend="191" name="poll2" signature="poll2(timeout=0.0, map=None)">
        <variable citdl="dict" ilk="argument" name="map" />
        <variable citdl="map.get()" line="188" name="obj" />
        <variable citdl="select.poll()" line="168" name="pollster" />
        <variable citdl="list" line="182" name="r" />
        <variable citdl="int" line="171" name="flags" />
        <variable citdl="int()" ilk="argument" name="timeout" />
      </scope>
      <scope ilk="function" line="193" name="poll3" signature="poll3(timeout=0.0, map=None)" />
      <scope ilk="function" line="73" lineend="79" name="read" signature="read(obj)">
        <variable ilk="argument" name="obj" />
      </scope>
      <scope ilk="function" line="97" lineend="115" name="readwrite" signature="readwrite(obj, flags)">
        <variable ilk="argument" name="flags" />
        <variable ilk="argument" name="obj" />
      </scope>
      <import module="select" />
      <import module="socket" />
      <variable citdl="dict" line="60" name="socket_map" />
      <import module="sys" />
      <import module="time" />
      <scope ilk="function" line="81" lineend="87" name="write" signature="write(obj)">
        <variable ilk="argument" name="obj" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="89" lineend="95" name="_exception" signature="_exception(obj)">
        <variable ilk="argument" name="obj" />
      </scope>
      <scope attributes="__hidden__" classrefs="dispatcher" ilk="class" line="604" lineend="622" name="file_dispatcher">
        <scope attributes="__ctor__" ilk="function" line="606" lineend="617" name="__init__" signature="file_dispatcher(fd, map=None)">
          <variable citdl="file_dispatcher" ilk="argument" name="self" />
          <variable citdl="fd.fileno()" ilk="argument" name="fd" />
          <variable ilk="argument" name="map" />
          <variable citdl="int" line="615" name="flags" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="608" name="connected" />
        <scope ilk="function" line="619" lineend="622" name="set_file" signature="set_file(fd)">
          <variable citdl="file_dispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="fd" />
        </scope>
        <variable attributes="__instancevar__" citdl="file_wrapper" line="620" name="socket" />
        <variable attributes="protected __instancevar__" citdl="self.socket.fileno()" line="621" name="_fileno" />
      </scope>
      <scope attributes="__hidden__" ilk="class" line="581" lineend="602" name="file_wrapper">
        <scope attributes="__ctor__" ilk="function" line="586" lineend="587" name="__init__" signature="file_wrapper(fd)">
          <variable citdl="file_wrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="fd" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.dup()" line="587" name="fd" />
        <scope ilk="function" line="589" lineend="590" name="recv" returns="os.read()" signature="recv(*args)">
          <variable citdl="file_wrapper" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="592" lineend="593" name="send" returns="os.write()" signature="send(*args)">
          <variable citdl="file_wrapper" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable citdl="file_wrapper.recv" line="595" name="read" />
        <variable citdl="file_wrapper.send" line="596" name="write" />
        <scope ilk="function" line="598" lineend="599" name="close" signature="close()">
          <variable citdl="file_wrapper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="601" lineend="602" name="fileno" returns="os.dup()" signature="fileno()">
          <variable citdl="file_wrapper" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="62" lineend="66" name="_strerror" returns="os.strerror()" signature="_strerror(err)">
        <variable ilk="argument" name="err" />
        <variable citdl="os.strerror()" line="63" name="res" />
      </scope>
      <variable attributes="protected __hidden__" citdl="tuple" line="71" name="_reraised_exceptions" />
    </scope>
    <scope doc="Module/script to &quot;compile&quot; all .py files to .pyc (or .pyo) file.  When called as a script with arguments, this compiles the directories" ilk="blob" lang="Python3" name="compileall">
      <variable citdl="list" line="20" name="__all__" />
      <scope doc="Byte-compile all modules in the given directory tree." ilk="function" line="22" lineend="99" name="compile_dir" returns="int" signature="compile_dir(dir, maxlevels=10, ddir=None, force=0, rx=None, quiet=0)">
        <variable citdl="os.path.join()" line="62" name="cfile" />
        <variable citdl="list" line="56" name="head" />
        <variable citdl="os.path.join()" line="48" name="dfile" />
        <variable citdl="py_compile.compile()" line="72" name="ok" />
        <variable ilk="argument" name="ddir" />
        <variable citdl="int" ilk="argument" name="maxlevels" />
        <variable citdl="rx.search()" line="52" name="mo" />
        <variable ilk="argument" name="rx" />
        <variable citdl="int" ilk="argument" name="quiet" />
        <variable citdl="list" line="56" name="tail" />
        <variable citdl="struct.pack()" line="61" name="expect" />
        <variable citdl="int" line="44" name="success" />
        <variable citdl="int()" line="60" name="mtime" />
        <variable citdl="chandle.read()" line="64" name="actual" />
        <variable citdl="os.path.join()" line="46" name="fullname" />
        <variable citdl="int" ilk="argument" name="force" />
        <variable ilk="argument" name="dir" />
        <variable citdl="list" line="39" name="names" />
      </scope>
      <scope doc="Byte-compile all module on sys.path." ilk="function" line="101" lineend="119" name="compile_path" returns="compile_dir()" signature="compile_path(skip_curdir=1, maxlevels=0, force=0, quiet=0)">
        <variable citdl="int" ilk="argument" name="skip_curdir" />
        <variable citdl="int" line="112" name="success" />
        <variable citdl="int" ilk="argument" name="force" />
        <variable citdl="int" ilk="argument" name="quiet" />
        <variable citdl="int" ilk="argument" name="maxlevels" />
      </scope>
      <import module="imp" />
      <scope doc="Script main program." ilk="function" line="121" lineend="167" name="main" returns="compile_path()" signature="main()">
        <variable citdl="int" line="138" name="maxlevels" />
        <variable citdl="int" line="140" name="force" />
        <variable citdl="a" line="139" name="ddir" />
        <variable citdl="int" line="155" name="success" />
        <variable citdl="re.compile()" line="142" name="rx" />
        <variable citdl="int" line="141" name="quiet" />
      </scope>
      <import module="os" />
      <import module="py_compile" />
      <import module="struct" />
      <import module="sys" />
      <variable attributes="__hidden__" citdl="int()" line="170" name="exit_status" />
    </scope>
    <scope doc="Fixer for &apos;raise E, V, T&apos;  raise         -&gt; raise" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_raise">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" name="ArgList" signature="ArgList(args, lparen=Leaf(7, &apos;(&apos;), rparen=Leaf(8, &apos;)&apos;))" />
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" ilk="class" line="30" lineend="82" name="FixRaise">
        <variable citdl="str" line="32" name="PATTERN" />
        <scope ilk="function" line="36" lineend="82" name="transform" returns="pytree.Node()" signature="transform(node, results)">
          <variable citdl="FixRaise" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="self.syms" line="37" name="syms" />
          <variable line="39" name="exc" />
          <variable citdl="pytree.Node()" line="59" name="new" />
          <variable line="63" name="val" />
          <variable citdl="list" line="65" name="args" />
          <variable line="71" name="tb" />
          <variable citdl="Call()" line="74" name="e" />
          <variable citdl="list" line="75" name="with_tb" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Does the node represent a tuple literal?" ilk="function" name="is_tuple" signature="is_tuple(node)" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="dyld emulation" ilk="blob" lang="Python3" name="ctypes.macholib.dyld">
      <variable citdl="list" line="17" name="DEFAULT_FRAMEWORK_FALLBACK" />
      <variable citdl="list" line="24" name="DEFAULT_LIBRARY_FALLBACK" />
      <variable citdl="list" line="10" name="__all__" />
      <scope classrefs="object" doc="chain(*iterables) --&gt; chain object  Return a chain object whose .__next__() method returns elements from the" ilk="class" name="chain" />
      <scope classrefs="object" doc="combinations(iterable, r) --&gt; combinations object  Return successive r-length combinations of elements in the iterable." ilk="class" name="combinations" />
      <scope classrefs="object" doc="combinations_with_replacement(iterable, r) --&gt; combinations_with_replacement object  Return successive r-length combinations of elements in the iterable" ilk="class" name="combinations_with_replacement" />
      <scope classrefs="object" doc="compress(data, selectors) --&gt; iterator over selected data  Return data elements corresponding to true selector elements." ilk="class" name="compress" />
      <scope classrefs="object" doc="count(start=0, step=1]) --&gt; count object  Return a count object whose .__next__() method returns consecutive values." ilk="class" name="count" />
      <scope classrefs="object" doc="cycle(iterable) --&gt; cycle object  Return elements from the iterable until it is exhausted." ilk="class" name="cycle" />
      <scope classrefs="object" doc="dropwhile(predicate, iterable) --&gt; dropwhile object  Drop items from the iterable while predicate(item) is true." ilk="class" name="dropwhile" />
      <scope ilk="function" line="94" lineend="114" name="dyld_default_search" signature="dyld_default_search(name, env=None)">
        <variable citdl="dyld_fallback_framework_path()" line="100" name="fallback_framework_path" />
        <variable citdl="framework_info()" line="97" name="framework" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="env" />
        <variable citdl="dyld_fallback_library_path()" line="104" name="fallback_library_path" />
      </scope>
      <scope ilk="function" line="31" lineend="37" name="dyld_env" returns="list" signature="dyld_env(env, var)">
        <variable ilk="argument" name="var" />
        <variable citdl="env.get()" line="34" name="rval" />
        <variable citdl="os.environ" ilk="argument" name="env" />
      </scope>
      <scope ilk="function" line="87" lineend="92" name="dyld_executable_path_search" signature="dyld_executable_path_search(name, executable_path=None)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="executable_path" />
      </scope>
      <scope ilk="function" line="50" lineend="51" name="dyld_fallback_framework_path" returns="dyld_env()" signature="dyld_fallback_framework_path(env=None)">
        <variable ilk="argument" name="env" />
      </scope>
      <scope ilk="function" line="53" lineend="54" name="dyld_fallback_library_path" returns="dyld_env()" signature="dyld_fallback_library_path(env=None)">
        <variable ilk="argument" name="env" />
      </scope>
      <scope doc="Find a library or framework using dyld semantics" ilk="function" line="116" lineend="127" name="dyld_find" returns="path" signature="dyld_find(name, executable_path=None, env=None)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="env" />
        <variable ilk="argument" name="executable_path" />
      </scope>
      <scope ilk="function" line="44" lineend="45" name="dyld_framework_path" returns="dyld_env()" signature="dyld_framework_path(env=None)">
        <variable ilk="argument" name="env" />
      </scope>
      <scope ilk="function" line="39" lineend="42" name="dyld_image_suffix" returns="env.get()" signature="dyld_image_suffix(env=None)">
        <variable citdl="os.environ" ilk="argument" name="env" />
      </scope>
      <scope doc="For a potential path iterator, add DYLD_IMAGE_SUFFIX semantics" ilk="function" line="56" lineend="68" name="dyld_image_suffix_search" returns="dyld_image_suffix_search._inject()" signature="dyld_image_suffix_search(iterator, env=None)">
        <scope attributes="protected" ilk="function" line="61" lineend="67" name="_inject" signature="_inject(iterator=iterator, suffix=suffix)">
          <variable ilk="argument" name="iterator" />
          <variable citdl="dyld_image_suffix()" ilk="argument" name="suffix" />
        </scope>
        <variable ilk="argument" name="env" />
        <variable ilk="argument" name="iterator" />
        <variable citdl="dyld_image_suffix()" line="58" name="suffix" />
      </scope>
      <scope ilk="function" line="47" lineend="48" name="dyld_library_path" returns="dyld_env()" signature="dyld_library_path(env=None)">
        <variable ilk="argument" name="env" />
      </scope>
      <scope ilk="function" line="70" lineend="85" name="dyld_override_search" signature="dyld_override_search(name, env=None)">
        <variable citdl="framework_info()" line="76" name="framework" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="env" />
      </scope>
      <scope doc="A dylib name can take one of the following four forms: Location/Name.SomeVersion_Suffix.dylib Location/Name.SomeVersion.dylib Location/Name_Suffix.dylib" ilk="function" name="dylib_info" signature="dylib_info(filename)" />
      <scope classrefs="object" doc="filterfalse(function or None, sequence) --&gt; filterfalse object  Return those items of sequence for which function(item) is false." ilk="class" name="filterfalse" />
      <scope doc="Find a framework using dyld semantics in a very loose manner." ilk="function" line="129" lineend="150" name="framework_find" returns="dyld_find()" signature="framework_find(fn, executable_path=None, env=None)">
        <variable citdl="fn.rfind()" line="142" name="fmwk_index" />
        <variable ilk="argument" name="executable_path" />
        <variable citdl="os.path.join()" ilk="argument" name="fn" />
        <variable ilk="argument" name="env" />
      </scope>
      <scope doc="A framework name can take one of the following four forms: Location/Name.framework/Versions/SomeVersion/Name_Suffix Location/Name.framework/Versions/SomeVersion/Name Location/Name.framework/Name_Suffix" ilk="function" name="framework_info" signature="framework_info(filename)" />
      <scope classrefs="object" doc="groupby(iterable[, keyfunc]) -&gt; create an iterator which returns (key, sub-iterator) grouped by each value of key(value)." ilk="class" name="groupby" />
      <scope classrefs="object" doc="islice(iterable, [start,] stop [, step]) --&gt; islice object  Return an iterator whose next() method returns selected values from an" ilk="class" name="islice" />
      <import module="os" />
      <scope classrefs="object" doc="permutations(iterable[, r]) --&gt; permutations object  Return successive r-length permutations of elements in the iterable." ilk="class" name="permutations" />
      <scope classrefs="object" doc="product(*iterables) --&gt; product object  Cartesian product of input iterables.  Equivalent to nested for-loops." ilk="class" name="product" />
      <scope classrefs="object" doc="repeat(object [,times]) -&gt; create an iterator which returns the object for the specified number of times.  If not specified, returns the object endlessly." ilk="class" name="repeat" />
      <scope classrefs="object" doc="starmap(function, sequence) --&gt; starmap object  Return an iterator whose values are returned from the function evaluated" ilk="class" name="starmap" />
      <scope classrefs="object" doc="takewhile(predicate, iterable) --&gt; takewhile object  Return successive entries from an iterable as long as the " ilk="class" name="takewhile" />
      <scope doc="tee(iterable, n=2) --&gt; tuple of n independent iterators." ilk="function" name="tee" signature="tee(iterable, n=2) --&gt; tuple of n independent iterators." />
      <scope ilk="function" line="152" lineend="155" name="test_dyld_find" signature="test_dyld_find()">
        <variable citdl="dict" line="153" name="env" />
      </scope>
      <scope classrefs="object" doc="zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --&gt; zip_longest object  Return an zip_longest object whose .__next__() method returns a tuple where" ilk="class" name="zip_longest" />
    </scope>
    <scope doc="Base class for fixers (optional, but recommended)." ilk="blob" lang="Python3" name="lib2to3.fixer_base">
      <scope classrefs="object" doc="Optional base class for fixers.  The subclass name must be FixFooBar where FooBar is the result of" ilk="class" line="15" lineend="160" name="BaseFix">
        <variable line="25" name="PATTERN" />
        <scope doc="Compiles self.PATTERN into self.pattern." ilk="function" line="54" lineend="61" name="compile_pattern" signature="compile_pattern()">
          <variable citdl="BaseFix" ilk="argument" name="self" />
        </scope>
        <scope doc="Used for warning the user about possible uncertainty in the translation." ilk="function" line="131" lineend="139" name="warning" signature="warning(node, reason)">
          <variable citdl="BaseFix" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="reason" />
          <variable citdl="node.get_lineno()" line="138" name="lineno" />
        </scope>
        <variable citdl="itertools.count()" line="30" name="numbers" />
        <scope attributes="__ctor__" doc="Initializer. Subclass may override." ilk="function" line="42" lineend="52" name="__init__" signature="BaseFix(options, log)">
          <variable citdl="BaseFix" ilk="argument" name="self" />
          <variable ilk="argument" name="options" />
          <variable ilk="argument" name="log" />
        </scope>
        <variable attributes="__instancevar__" line="51" name="log" />
        <variable line="26" name="pattern" />
        <variable citdl="int" line="34" name="run_order" />
        <scope doc="Set the filename, and a logger derived from it." ilk="function" line="63" lineend="69" name="set_filename" signature="set_filename(filename)">
          <variable citdl="BaseFix" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
        </scope>
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" line="83" lineend="97" name="transform" signature="transform(node, results)">
          <variable citdl="BaseFix" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
        <variable line="28" name="filename" />
        <variable citdl="logging.getLogger()" line="29" name="logger" />
        <scope doc="Returns match for a given parse tree node." ilk="function" line="71" lineend="81" name="match" returns="self.pattern.match()" signature="match(node)">
          <variable citdl="BaseFix" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable citdl="dict" line="80" name="results" />
        </scope>
        <scope doc="Warn the user that a given chunk of code is not valid Python 3, but that it cannot be converted automatically." ilk="function" line="116" lineend="129" name="cannot_convert" signature="cannot_convert(node, reason=None)">
          <variable citdl="BaseFix" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="reason" />
          <variable citdl="node.get_lineno()" line="123" name="lineno" />
          <variable citdl="node.clone()" line="124" name="for_output" />
          <variable citdl="str" line="126" name="msg" />
        </scope>
        <variable citdl="pygram.python_symbols" line="40" name="syms" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" line="141" lineend="151" name="start_tree" signature="start_tree(tree, filename)">
          <variable citdl="BaseFix" ilk="argument" name="self" />
          <variable ilk="argument" name="tree" />
          <variable ilk="argument" name="filename" />
        </scope>
        <variable attributes="protected" line="36" name="_accept_type" />
        <variable attributes="__instancevar__" citdl="False" line="112" name="first_log" />
        <scope ilk="function" line="110" lineend="114" name="log_message" signature="log_message(message)">
          <variable citdl="BaseFix" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope doc="Return a string suitable for use as an identifier" ilk="function" line="99" lineend="108" name="new_name" returns="str" signature="new_name(template=&apos;xxx_todo_changeme&apos;)">
          <variable citdl="BaseFix" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="template" />
          <variable citdl="str" line="104" name="name" />
        </scope>
        <variable citdl="set()" line="31" name="used_names" />
        <variable citdl="False" line="33" name="explicit" />
        <variable line="27" name="options" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" line="153" lineend="160" name="finish_tree" signature="finish_tree(tree, filename)">
          <variable citdl="BaseFix" ilk="argument" name="self" />
          <variable ilk="argument" name="tree" />
          <variable ilk="argument" name="filename" />
        </scope>
        <variable citdl="str" line="32" name="order" />
      </scope>
      <scope classrefs="BaseFix" doc="Base class for fixers which not execute if an import is found." ilk="class" line="163" lineend="180" name="ConditionalFix">
        <variable attributes="protected __instancevar__" citdl="does_tree_import()" line="171" name="_should_skip" />
        <scope ilk="function" line="169" lineend="171" name="start_tree" signature="start_tree(*args)">
          <variable citdl="ConditionalFix" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="173" lineend="180" name="should_skip" returns="does_tree_import()" signature="should_skip(node)">
          <variable citdl="ConditionalFix" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable citdl="self.skip_on.split()" line="176" name="pkg" />
          <variable line="177" name="name" />
        </scope>
        <variable line="167" name="skip_on" />
      </scope>
      <scope classrefs="object" ilk="class" name="PatternCompiler" />
      <scope doc="Returns true if name is imported from package at the top level of the tree which node belongs to." ilk="function" name="does_tree_import" signature="does_tree_import(package, name, node)" />
      <import module="itertools" />
      <import module="logging" />
      <import module="pygram" />
    </scope>
    <scope doc="This module provides primitive operations to write multi-threaded programs. The &apos;threading&apos; module provides a more convenient interface." ilk="blob" lang="Python3" name="_thread">
      <scope classrefs="object" doc="A lock object is a synchronization primitive.  To create a lock, call the PyThread_allocate_lock() function.  Methods are: " ilk="class" name="LockType" />
      <scope doc="(allocate() is an obsolete synonym)" ilk="function" name="allocate" signature="allocate_lock() -&gt; lock object" />
      <scope doc="(allocate() is an obsolete synonym)" ilk="function" name="allocate_lock" signature="allocate_lock() -&gt; lock object" />
      <scope classrefs="Exception" ilk="class" name="error" />
      <scope doc="(PyThread_exit_thread() is an obsolete synonym)" ilk="function" name="exit" signature="exit()" />
      <scope doc="(PyThread_exit_thread() is an obsolete synonym)" ilk="function" name="exit_thread" signature="exit()" />
      <scope doc="Return a non-zero integer that uniquely identifies the current thread amongst other threads that exist simultaneously." ilk="function" name="get_ident" returns="int" signature="get_ident() -&gt; integer" />
      <scope doc="Raise a KeyboardInterrupt in the main thread." ilk="function" name="interrupt_main" signature="interrupt_main()" />
      <scope doc="Return the thread stack size used when creating new threads." ilk="function" name="stack_size" signature="stack_size([size]) -&gt; size" />
      <scope doc="(start_new() is an obsolete synonym)" ilk="function" name="start_new" signature="start_new_thread(function, args[, kwargs])" />
      <scope doc="(start_new() is an obsolete synonym)" ilk="function" name="start_new_thread" signature="start_new_thread(function, args[, kwargs])" />
    </scope>
    <scope doc="Debugger basics" ilk="blob" lang="Python3" name="bdb">
      <scope classrefs="object" doc="Generic Python debugger base class.  This class takes care of details of the trace facility;" ilk="class" line="14" lineend="420" name="Bdb">
        <scope ilk="function" line="248" lineend="262" name="clear_break" returns="tuple" signature="clear_break(filename, lineno)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="canonic()" ilk="argument" name="filename" />
          <variable ilk="argument" name="lineno" />
        </scope>
        <scope ilk="function" line="385" lineend="401" name="runeval" returns="eval()" signature="runeval(expr, globals=None, locals=None)">
          <import line="387" module="__main__" />
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="expr" />
          <variable citdl="dict" ilk="argument" name="globals" />
          <variable citdl="dict" ilk="argument" name="locals" />
        </scope>
        <scope ilk="function" line="306" lineend="311" name="get_file_breaks" returns="list" signature="get_file_breaks(filename)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="canonic()" ilk="argument" name="filename" />
        </scope>
        <scope ilk="function" line="264" lineend="275" name="clear_bpbynumber" returns="int()" signature="clear_bpbynumber(arg)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="int()" line="266" name="number" />
          <variable line="270" name="bp" />
        </scope>
        <scope ilk="function" line="287" lineend="293" name="clear_all_breaks" returns="str" signature="clear_all_breaks()">
          <variable citdl="Bdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="83" lineend="87" name="dispatch_return" returns="Bdb.trace_dispatch" signature="dispatch_return(frame, arg)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable attributes="__instancevar__" line="24" name="skip" />
        <scope doc="Start debugging from `frame`." ilk="function" line="194" lineend="207" name="set_trace" signature="set_trace(frame=None)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="frame.f_back" ilk="argument" name="frame" />
        </scope>
        <scope ilk="function" line="409" lineend="420" name="runcall" returns="func()" signature="runcall(func, *args, **kwds)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
          <variable citdl="func()" line="412" name="res" />
        </scope>
        <scope ilk="function" line="209" lineend="218" name="set_continue" signature="set_continue()">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="frame.f_back" line="215" name="frame" />
        </scope>
        <scope ilk="function" line="220" lineend="224" name="set_quit" signature="set_quit()">
          <variable citdl="Bdb" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="170" name="returnframe" />
        <scope doc="Stop on the next line in or below the given frame." ilk="function" line="186" lineend="188" name="set_next" signature="set_next(frame)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
        </scope>
        <scope ilk="function" line="367" lineend="383" name="run" signature="run(cmd, globals=None, locals=None)">
          <import line="369" module="__main__" />
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="cmd" />
          <variable citdl="dict" ilk="argument" name="globals" />
          <variable citdl="dict" ilk="argument" name="locals" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="23" lineend="26" name="__init__" signature="Bdb(skip=None)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="skip" />
        </scope>
        <scope ilk="function" line="70" lineend="81" name="dispatch_call" returns="Bdb.trace_dispatch" signature="dispatch_call(frame, arg)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable attributes="__instancevar__" citdl="frame.f_back" line="41" name="botframe" />
        <variable attributes="__instancevar__" citdl="bp.number" line="134" name="currentbp" />
        <scope ilk="function" line="89" lineend="93" name="dispatch_exception" returns="Bdb.trace_dispatch" signature="dispatch_exception(frame, arg)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope doc="This method is called if an exception occurs, but only if we are to stop at or just below this level." ilk="function" line="163" lineend="166" name="user_exception" signature="user_exception(frame, exc_info)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="exc_info" />
        </scope>
        <scope ilk="function" line="403" lineend="405" name="runctx" signature="runctx(cmd, globals, locals)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="globals" />
          <variable ilk="argument" name="locals" />
        </scope>
        <scope ilk="function" line="64" lineend="68" name="dispatch_line" returns="Bdb.trace_dispatch" signature="dispatch_line(frame)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
        </scope>
        <scope ilk="function" line="339" lineend="362" name="format_stack_entry" returns="frame.f_code.co_name" signature="format_stack_entry()">
          <import line="340" module="linecache" />
          <import line="340" module="reprlib" />
          <variable citdl="self.canonic()" line="342" name="filename" />
          <variable citdl="str" line="343" name="s" />
          <variable line="349" name="args" />
          <variable line="357" name="rv" />
          <variable citdl="linecache.getline()" line="360" name="line" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="172" name="stoplineno" />
        <scope doc="Stop when the line with the line no greater than the current one is reached or when returning from current frame" ilk="function" line="177" lineend="180" name="set_until" signature="set_until(frame)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
        </scope>
        <scope attributes="protected" ilk="function" line="168" lineend="172" name="_set_stopinfo" signature="_set_stopinfo(stopframe, returnframe, stoplineno=-1)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="stopframe" />
          <variable ilk="argument" name="returnframe" />
          <variable citdl="int" ilk="argument" name="stoplineno" />
        </scope>
        <scope ilk="function" line="233" lineend="246" name="set_break" returns="tuple" signature="set_break(filename, lineno, temporary=0, cond=None, funcname=None)">
          <import line="236" module="linecache" />
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="canonic()" ilk="argument" name="filename" />
          <variable ilk="argument" name="lineno" />
          <variable citdl="int" ilk="argument" name="temporary" />
          <variable ilk="argument" name="cond" />
          <variable ilk="argument" name="funcname" />
          <variable citdl="linecache.getline()" line="237" name="line" />
          <variable line="243" name="list" />
          <variable citdl="Breakpoint()" line="246" name="bp" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="25" name="breaks" />
        <variable attributes="__instancevar__" citdl="dict" line="26" name="fncache" />
        <scope ilk="function" line="141" lineend="142" name="do_clear" signature="do_clear(arg)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="105" lineend="117" name="stop_here" returns="bool" signature="stop_here(frame)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="frame.f_back" ilk="argument" name="frame" />
        </scope>
        <scope ilk="function" line="144" lineend="145" name="break_anywhere" returns="bool" signature="break_anywhere(frame)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
        </scope>
        <scope ilk="function" line="119" lineend="139" name="break_here" returns="bool" signature="break_here(frame)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable citdl="canonic()" line="120" name="filename" />
          <variable citdl="frame.f_lineno" line="123" name="lineno" />
        </scope>
        <scope doc="This method is called when there is the remote possibility that we ever need to stop in this function." ilk="function" line="150" lineend="153" name="user_call" signature="user_call(frame, argument_list)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="argument_list" />
        </scope>
        <scope ilk="function" line="38" lineend="42" name="reset" signature="reset()">
          <import line="39" module="linecache" />
          <variable citdl="Bdb" ilk="argument" name="self" />
        </scope>
        <scope doc="Stop after one line of code." ilk="function" line="182" lineend="184" name="set_step" signature="set_step()">
          <variable citdl="Bdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="99" lineend="103" name="is_skipped_module" returns="bool" signature="is_skipped_module(module_name)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="module_name" />
        </scope>
        <scope doc="Stop when returning from the given frame." ilk="function" line="190" lineend="192" name="set_return" signature="set_return(frame)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
        </scope>
        <scope ilk="function" line="295" lineend="298" name="get_break" returns="bool" signature="get_break(filename, lineno)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="canonic()" ilk="argument" name="filename" />
          <variable ilk="argument" name="lineno" />
        </scope>
        <scope ilk="function" line="277" lineend="285" name="clear_all_file_breaks" returns="str" signature="clear_all_file_breaks(filename)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="canonic()" ilk="argument" name="filename" />
          <variable line="282" name="blist" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="171" name="quitting" />
        <scope ilk="function" line="28" lineend="36" name="canonic" returns="os.path.abspath()" signature="canonic(filename)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="self.fncache.get()" line="31" name="canonic" />
        </scope>
        <scope ilk="function" line="319" lineend="335" name="get_stack" returns="tuple" signature="get_stack(f, t)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="f.f_back" ilk="argument" name="f" />
          <variable citdl="t.tb_next" ilk="argument" name="t" />
          <variable citdl="list" line="320" name="stack" />
          <variable citdl="max()" line="329" name="i" />
        </scope>
        <scope doc="This method is called when a return trap is set here." ilk="function" line="159" lineend="161" name="user_return" signature="user_return(frame, return_value)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="return_value" />
        </scope>
        <scope ilk="function" line="313" lineend="314" name="get_all_breaks" returns="dict" signature="get_all_breaks()">
          <variable citdl="Bdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="44" lineend="62" name="trace_dispatch" returns="Bdb.trace_dispatch" signature="trace_dispatch(frame, event, arg)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="event" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope doc="This method is called when we stop or break at this line." ilk="function" line="155" lineend="157" name="user_line" signature="user_line(frame)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
        </scope>
        <variable attributes="__instancevar__" citdl="frame.f_back" line="169" name="stopframe" />
        <scope ilk="function" line="300" lineend="304" name="get_breaks" returns="bool" signature="get_breaks(filename, lineno)">
          <variable citdl="Bdb" ilk="argument" name="self" />
          <variable citdl="canonic()" ilk="argument" name="filename" />
          <variable ilk="argument" name="lineno" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="Exception to give up completely" ilk="class" line="10" name="BdbQuit" />
      <scope classrefs="object" doc="Breakpoint class  Implements temporary breakpoints, ignore counts, disabling and" ilk="class" line="427" lineend="507" name="Breakpoint">
        <scope ilk="function" line="486" lineend="507" name="bpprint" signature="bpprint(out=None)">
          <variable citdl="Breakpoint" ilk="argument" name="self" />
          <variable citdl="sys.stdout" ilk="argument" name="out" />
          <variable citdl="str" line="490" name="disp" />
          <variable citdl="str" line="504" name="ss" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="461" name="hits" />
        <scope ilk="function" line="480" lineend="481" name="enable" signature="enable()">
          <variable citdl="Breakpoint" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="457" name="temporary" />
        <variable attributes="__instancevar__" line="454" name="func_first_executable_line" />
        <variable attributes="__instancevar__" citdl="int" line="459" name="enabled" />
        <variable attributes="__instancevar__" citdl="int" line="462" name="number" />
        <variable attributes="__instancevar__" line="452" name="funcname" />
        <variable attributes="__instancevar__" citdl="int" line="460" name="ignore" />
        <scope ilk="function" line="483" lineend="484" name="disable" signature="disable()">
          <variable citdl="Breakpoint" ilk="argument" name="self" />
        </scope>
        <variable citdl="list" line="447" name="bpbynumber" />
        <variable attributes="__instancevar__" line="455" name="file" />
        <variable attributes="__instancevar__" line="458" name="cond" />
        <variable attributes="__instancevar__" line="456" name="line" />
        <variable citdl="int" line="445" name="next" />
        <variable citdl="dict" line="446" name="bplist" />
        <scope attributes="__ctor__" ilk="function" line="451" lineend="469" name="__init__" signature="Breakpoint(file, line, temporary=0, cond=None, funcname=None)">
          <variable citdl="Breakpoint" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="line" />
          <variable citdl="int" ilk="argument" name="temporary" />
          <variable ilk="argument" name="cond" />
          <variable ilk="argument" name="funcname" />
        </scope>
        <scope ilk="function" line="472" lineend="478" name="deleteMe" signature="deleteMe()">
          <variable citdl="Breakpoint" ilk="argument" name="self" />
          <variable citdl="tuple" line="473" name="index" />
        </scope>
      </scope>
      <scope classrefs="Bdb" ilk="class" line="592" lineend="608" name="Tdb">
        <scope ilk="function" line="606" lineend="608" name="user_exception" signature="user_exception(frame, exc_stuff)">
          <variable citdl="Tdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="exc_stuff" />
        </scope>
        <scope ilk="function" line="597" lineend="603" name="user_line" signature="user_line(frame)">
          <import line="598" module="linecache" />
          <variable citdl="Tdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable citdl="frame.f_code.co_name" line="599" name="name" />
          <variable citdl="self.canonic()" line="601" name="fn" />
          <variable citdl="linecache.getline()" line="602" name="line" />
        </scope>
        <scope ilk="function" line="593" lineend="596" name="user_call" signature="user_call(frame, args)">
          <variable citdl="Tdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="args" />
          <variable citdl="frame.f_code.co_name" line="594" name="name" />
        </scope>
        <scope ilk="function" line="604" lineend="605" name="user_return" signature="user_return(frame, retval)">
          <variable citdl="Tdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="retval" />
        </scope>
      </scope>
      <variable citdl="list" line="8" name="__all__" />
      <scope ilk="function" line="615" lineend="617" name="bar" returns="int" signature="bar(a)">
        <variable ilk="argument" name="a" />
      </scope>
      <scope doc="Check whether we should break here because of `b.funcname`." ilk="function" line="511" lineend="535" name="checkfuncname" returns="bool" signature="checkfuncname(b, frame)">
        <variable ilk="argument" name="frame" />
        <variable ilk="argument" name="b" />
      </scope>
      <scope doc="Determine which breakpoint for this file:line is to be acted upon." ilk="function" line="539" lineend="588" name="effective" returns="tuple" signature="effective(file, line, frame)">
        <variable line="549" name="b" />
        <variable citdl="eval()" line="571" name="val" />
        <variable ilk="argument" name="frame" />
        <variable line="547" name="possibles" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="line" />
      </scope>
      <import module="fnmatch" />
      <scope ilk="function" line="610" lineend="613" name="foo" signature="foo(n)">
        <variable citdl="bar()" line="612" name="x" />
        <variable ilk="argument" name="n" />
      </scope>
      <import module="os" />
      <scope ilk="function" line="423" lineend="424" name="set_trace" signature="set_trace()" />
      <import module="sys" />
      <scope ilk="function" line="619" lineend="621" name="test" signature="test()">
        <variable citdl="Tdb" line="620" name="t" />
      </scope>
      <import module="types" />
    </scope>
    <scope doc="Routine to &quot;compile&quot; a .py file to a .pyc (or .pyo) file.  This module has intimate knowledge of the format of .pyc files." ilk="blob" lang="Python3" name="py_compile">
      <variable citdl="bytes" line="14" name="MAGIC" />
      <scope classrefs="Exception" doc="Exception raised when an error occurs while attempting to compile the file. " ilk="class" line="19" lineend="62" name="PyCompileError">
        <scope ilk="function" line="61" lineend="62" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="PyCompileError" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="exc_type.__name__" line="56" name="exc_type_name" />
        <variable attributes="__instancevar__" line="58" name="file" />
        <variable attributes="__instancevar__" citdl="tbtext.replace()" line="59" name="msg" />
        <variable attributes="__instancevar__" line="57" name="exc_value" />
        <scope attributes="__ctor__" ilk="function" line="46" lineend="59" name="__init__" signature="PyCompileError(exc_type, exc_value, file, msg=&apos;&apos;)">
          <variable citdl="PyCompileError" ilk="argument" name="self" />
          <variable ilk="argument" name="exc_type" />
          <variable ilk="argument" name="exc_value" />
          <variable ilk="argument" name="file" />
          <variable citdl="str" ilk="argument" name="msg" />
          <variable citdl="exc_type.__name__" line="47" name="exc_type_name" />
          <variable citdl="str.join()" line="49" name="tbtext" />
          <variable citdl="str" line="50" name="errmsg" />
        </scope>
      </scope>
      <variable citdl="list" line="16" name="__all__" />
      <import module="builtins" />
      <scope doc="Byte-compile one Python source file to Python bytecode." ilk="function" line="96" lineend="160" name="compile" signature="compile(file, cfile=None, dfile=None, doraise=False)">
        <variable citdl="__debug__" ilk="argument" name="cfile" />
        <variable citdl="open()" line="132" name="f" />
        <variable citdl="int()" line="134" name="timestamp" />
        <variable citdl="False" ilk="argument" name="doraise" />
        <variable citdl="read_encoding()" line="131" name="encoding" />
        <variable citdl="PyCompileError" line="144" name="py_exc" />
        <variable citdl="f.read()" line="137" name="codestring" />
        <variable citdl="open()" line="152" name="fc" />
        <variable citdl="builtins.compile()" line="142" name="codeobject" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="dfile" />
      </scope>
      <import module="imp" />
      <scope doc="Compile several source files." ilk="function" line="162" lineend="182" name="main" returns="int" signature="main(args=None)">
        <variable citdl="int" line="174" name="rv" />
        <variable citdl="list" ilk="argument" name="args" />
      </scope>
      <import module="marshal" />
      <import module="os" />
      <import module="re" />
      <scope doc="Read the first two lines of the file looking for coding: xyzzy." ilk="function" line="81" lineend="94" name="read_encoding" signature="read_encoding(file, default)">
        <variable ilk="argument" name="default" />
        <variable citdl="f.readline()" line="86" name="line" />
        <variable citdl="re.match()" line="89" name="m" />
        <variable ilk="argument" name="file" />
        <variable citdl="open()" line="83" name="f" />
      </scope>
      <scope ilk="function" line="71" lineend="72" name="set_creator_type" signature="set_creator_type(file)">
        <variable ilk="argument" name="file" />
      </scope>
      <import module="sys" />
      <import module="traceback" />
      <scope doc="Internal; write a 32-bit int to a file in little-endian order." ilk="function" line="74" lineend="79" name="wr_long" signature="wr_long(f, x)">
        <variable ilk="argument" name="x" />
        <variable ilk="argument" name="f" />
      </scope>
    </scope>
    <scope doc="Conversion pipeline templates.  The problem:" ilk="blob" lang="Python3" name="pipes">
      <variable citdl="str" line="71" name="FILEIN_FILEOUT" />
      <variable citdl="str" line="73" name="FILEIN_STDOUT" />
      <variable citdl="str" line="76" name="SINK" />
      <variable citdl="str" line="75" name="SOURCE" />
      <variable citdl="str" line="72" name="STDIN_FILEOUT" />
      <variable citdl="str" line="74" name="STDIN_STDOUT" />
      <scope classrefs="object" doc="Class representing a pipeline template." ilk="class" line="82" lineend="178" name="Template">
        <scope ilk="function" line="94" lineend="96" name="reset" signature="t.reset() restores a pipeline template to its initial state.">
          <variable citdl="Template" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="87" name="debugging" />
        <scope doc="initial state as the current one." ilk="function" line="98" lineend="104" name="clone" signature="t.clone() returns a new pipeline template with identical">
          <variable citdl="Template" ilk="argument" name="self" />
          <variable citdl="" line="101" name="t" />
        </scope>
        <scope ilk="function" line="110" lineend="124" name="append" signature="t.append(cmd, kind) adds a new step at the end.">
          <variable citdl="Template" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="kind" />
        </scope>
        <scope ilk="function" line="126" lineend="140" name="prepend" signature="t.prepend(cmd, kind) adds a new step at the front.">
          <variable citdl="Template" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="kind" />
        </scope>
        <scope ilk="function" line="173" lineend="178" name="makepipeline" returns="str" signature="makepipeline(infile, outfile)">
          <variable citdl="Template" ilk="argument" name="self" />
          <variable ilk="argument" name="infile" />
          <variable ilk="argument" name="outfile" />
          <variable citdl="()" line="174" name="cmd" />
        </scope>
        <scope ilk="function" line="152" lineend="160" name="open_r" returns="os.popen()" signature="t.open_r(file) and t.open_w(file) implement t.open(file, &apos;r&apos;) and t.open(file, &apos;w&apos;) respectively.">
          <variable citdl="Template" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="self.makepipeline()" line="159" name="cmd" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="96" name="steps" />
        <scope ilk="function" line="90" lineend="92" name="__repr__" returns="tuple" signature="t.__repr__() implements repr(t).">
          <variable citdl="Template" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="106" lineend="108" name="debug" signature="t.debug(flag) turns debugging on or off.">
          <variable citdl="Template" ilk="argument" name="self" />
          <variable ilk="argument" name="flag" />
        </scope>
        <scope ilk="function" line="162" lineend="168" name="open_w" returns="os.popen()" signature="open_w(file)">
          <variable citdl="Template" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="self.makepipeline()" line="167" name="cmd" />
        </scope>
        <scope ilk="function" line="170" lineend="171" name="copy" returns="os.system()" signature="copy(infile, outfile)">
          <variable citdl="Template" ilk="argument" name="self" />
          <variable ilk="argument" name="infile" />
          <variable ilk="argument" name="outfile" />
        </scope>
        <scope doc="reading or writing; the file is the other end of the pipeline." ilk="function" line="142" lineend="150" name="open" returns="self.open_r()" signature="t.open(file, rw) returns a pipe or file object open for">
          <variable citdl="Template" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="rw" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="85" lineend="88" name="__init__" signature="Template() returns a fresh pipeline template.">
          <variable citdl="Template" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="list" line="67" name="__all__" />
      <scope ilk="function" line="181" lineend="247" name="makepipeline" returns="str" signature="makepipeline(infile, steps, outfile)">
        <variable citdl="list" line="208" name="garbage" />
        <variable line="210" name="lkind" />
        <variable citdl="str" line="221" name="cmd" />
        <variable citdl="list" line="185" name="list" />
        <variable line="211" name="rkind" />
        <variable citdl="str" line="241" name="rmcmd" />
        <variable ilk="argument" name="outfile" />
        <variable ilk="argument" name="steps" />
        <variable citdl="str" line="230" name="cmdlist" />
        <variable citdl="str" line="244" name="trapcmd" />
        <variable ilk="argument" name="infile" />
      </scope>
      <import module="os" />
      <scope ilk="function" line="255" lineend="268" name="quote" returns="str" signature="quote(file)">
        <variable citdl="str" line="263" name="res" />
        <variable citdl="str" line="266" name="c" />
        <variable ilk="argument" name="file" />
      </scope>
      <import module="re" />
      <variable citdl="list" line="78" name="stepkinds" />
      <import module="string" />
      <import module="tempfile" />
      <variable attributes="protected __hidden__" citdl="str" line="253" name="_funnychars" />
      <variable attributes="protected __hidden__" citdl="string.digits" line="252" name="_safechars" />
    </scope>
    <scope doc="Fixer for removing uses of the types module.  These work for only the known names in the types module.  The forms above" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_types">
      <scope classrefs="BaseFix" ilk="class" name="FixTypes" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <import module="token" />
    </scope>
    <scope doc="Common pathname manipulations, WindowsNT/95 version.  Instead of importing this module directly, import os and refer to this" ilk="blob" lang="Python3" name="ntpath">
      <variable citdl="list" line="14" name="__all__" />
      <scope doc="Return the absolute version of a path." ilk="function" line="556" lineend="566" name="abspath" returns="normpath()" signature="abspath(path)">
        <variable citdl="_getfullpathname()" ilk="argument" name="path" />
      </scope>
      <variable citdl="str" line="28" name="altsep" />
      <scope doc="Returns the final component of a pathname" ilk="function" line="297" lineend="299" name="basename" signature="basename(p)">
        <variable ilk="argument" name="p" />
      </scope>
      <scope doc="Given a list of pathnames, returns the longest common leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <variable citdl="str" line="23" name="curdir" />
      <variable citdl="str" line="29" name="defpath" />
      <variable citdl="str" line="35" name="devnull" />
      <scope doc="Returns the directory component of a pathname" ilk="function" line="304" lineend="306" name="dirname" signature="dirname(p)">
        <variable ilk="argument" name="p" />
      </scope>
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Expand ~ and ~user constructs." ilk="function" line="341" lineend="374" name="expanduser" returns="join()" signature="expanduser(path)">
        <variable citdl="int" line="351" name="i" />
        <variable citdl="str" line="363" name="drive" />
        <variable citdl="len()" line="351" name="n" />
        <variable citdl="join()" line="356" name="userhome" />
        <variable citdl="str" line="346" name="tilde" />
        <variable ilk="argument" name="path" />
      </scope>
      <scope doc="Expand shell variables of the forms $var, ${var} and %var%." ilk="function" line="390" lineend="500" name="expandvars" returns="c.decode()" signature="expandvars(path)">
        <variable citdl="path.index()" line="413" name="index" />
        <variable citdl="list" line="416" name="c" />
        <variable citdl="list" line="412" name="res" />
        <variable citdl="str" line="402" name="dollar" />
        <variable citdl="str" line="400" name="percent" />
        <variable citdl="str" line="443" name="value" />
        <variable citdl="bytes()" line="398" name="varchars" />
        <variable citdl="len()" line="414" name="pathlen" />
        <variable citdl="str" line="399" name="quote" />
        <variable citdl="list" line="439" name="var" />
        <variable citdl="list" ilk="argument" name="path" />
        <variable citdl="str" line="401" name="brace" />
      </scope>
      <variable citdl="str" line="25" name="extsep" />
      <import module="genericpath" />
      <scope doc="Return the last access time of a file, reported by os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Test whether a path is absolute" ilk="function" line="90" lineend="93" name="isabs" returns="bool" signature="isabs(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Test for symbolic link." ilk="function" line="311" lineend="315" name="islink" returns="bool" signature="islink(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope doc="Test whether a path is a mount point (defined as root of drive)" ilk="function" line="323" lineend="329" name="ismount" returns="bool" signature="ismount(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="_get_bothseps()" line="325" name="seps" />
      </scope>
      <scope doc="Join two or more pathname components, inserting &quot;\&quot; as needed." ilk="function" line="98" lineend="172" name="join" returns="b" signature="join(a, *p)">
        <variable ilk="argument" name="a" />
        <variable line="145" name="path_rest" />
        <variable citdl="_get_sep()" line="102" name="sep" />
        <variable attributes="varargs" ilk="argument" name="p" />
        <variable citdl="_get_colon()" line="104" name="colon" />
        <variable citdl="b" line="105" name="path" />
        <variable citdl="_get_bothseps()" line="103" name="seps" />
        <variable citdl="int" line="107" name="b_wins" />
      </scope>
      <scope doc="Test whether a path exists." ilk="function" line="318" name="lexists" signature="lexists(path)" />
      <scope doc="Normalize case of pathname." ilk="function" line="77" lineend="81" name="normcase" signature="normcase(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Normalize path, eliminating double slashes, etc." ilk="function" line="507" lineend="537" name="normpath" returns="_get_sep()" signature="normpath(path)">
        <variable citdl="_get_sep()" line="509" name="sep" />
        <variable citdl="int" line="520" name="i" />
        <variable citdl="_get_dot()" line="510" name="dotdot" />
        <variable citdl="path.split()" line="519" name="comps" />
        <variable citdl="_get_sep()" line="516" name="prefix" />
        <variable citdl="path.replace()" ilk="argument" name="path" />
      </scope>
      <import module="os" />
      <variable citdl="str" line="24" name="pardir" />
      <variable citdl="str" line="27" name="pathsep" />
      <scope doc="Return the absolute version of a path." ilk="function" line="569" name="realpath" signature="realpath(path)" />
      <scope doc="Return a relative version of a path" ilk="function" line="574" lineend="609" name="relpath" returns="join()" signature="relpath(path, start=&apos;.&apos;)">
        <variable citdl="abspath()" line="585" name="path_abs" />
        <variable citdl="str" line="603" name="pardir" />
        <variable citdl="_get_dot()" ilk="argument" name="start" />
        <variable citdl="int" line="596" name="i" />
        <variable citdl="_get_sep()" line="576" name="sep" />
        <variable citdl="list" line="606" name="rel_list" />
        <variable citdl="abspath()" line="584" name="start_abs" />
        <variable citdl="str.format()" line="589" name="error" />
        <variable citdl="list" line="594" name="path_list" />
        <variable ilk="argument" name="path" />
        <variable citdl="list" line="593" name="start_list" />
      </scope>
      <variable citdl="str" line="26" name="sep" />
      <scope doc="Split a pathname." ilk="function" line="263" lineend="281" name="split" returns="tuple" signature="split(p)">
        <variable citdl="list" line="275" name="head" />
        <variable citdl="list" line="277" name="head2" />
        <variable citdl="len()" line="272" name="i" />
        <variable ilk="argument" name="p" />
        <variable citdl="list" line="275" name="tail" />
        <variable citdl="_get_bothseps()" line="269" name="seps" />
      </scope>
      <scope doc="Split a pathname into drive/UNC sharepoint and relative path specifiers." ilk="function" line="178" lineend="219" name="splitdrive" returns="tuple" signature="splitdrive(p)">
        <variable citdl="normp.find()" line="206" name="index" />
        <variable citdl="_get_sep()" line="199" name="sep" />
        <variable ilk="argument" name="p" />
        <variable citdl="normp.find()" line="209" name="index2" />
        <variable citdl="normcase()" line="200" name="normp" />
        <variable citdl="_get_empty()" line="197" name="empty" />
      </scope>
      <scope doc="Split the extension from a pathname." ilk="function" line="289" lineend="291" name="splitext" returns="genericpath._splitext()" signature="splitext(p)">
        <variable ilk="argument" name="p" />
        <variable citdl="genericpath._splitext.__doc__" line="292" name="__doc__" />
      </scope>
      <scope doc="Deprecated since Python 3.1." ilk="function" line="223" lineend="255" name="splitunc" returns="tuple" signature="splitunc(p)">
        <variable ilk="argument" name="p" />
        <variable citdl="normcase()" line="246" name="normp" />
        <variable citdl="list" line="240" name="firstTwo" />
        <variable citdl="normp.find()" line="247" name="index" />
        <variable citdl="_get_sep()" line="237" name="sep" />
      </scope>
      <import module="stat" />
      <variable citdl="bool" line="571" name="supports_unicode_filenames" />
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="43" lineend="47" name="_get_sep" returns="str" signature="_get_sep(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="37" lineend="41" name="_get_empty" returns="str" signature="_get_empty(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="61" lineend="65" name="_get_dot" returns="str" signature="_get_dot(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="55" lineend="59" name="_get_bothseps" returns="str" signature="_get_bothseps(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="67" lineend="71" name="_get_colon" returns="str" signature="_get_colon(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="49" lineend="53" name="_get_altsep" returns="str" signature="_get_altsep(path)">
        <variable ilk="argument" name="path" />
      </scope>
    </scope>
    <scope doc="A powerful, extensible, and easy-to-use option parser.  By Greg Ward &lt;gward@python.net&gt;" ilk="blob" lang="Python3" name="optparse">
      <scope classrefs="BadOptionError" doc="Raised if an ambiguous option is seen on the command line." ilk="class" line="141" lineend="151" name="AmbiguousOptionError">
        <variable attributes="__instancevar__" line="147" name="possibilities" />
        <scope ilk="function" line="149" lineend="151" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="AmbiguousOptionError" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="145" lineend="147" name="__init__" signature="AmbiguousOptionError(opt_str, possibilities)">
          <variable citdl="AmbiguousOptionError" ilk="argument" name="self" />
          <variable ilk="argument" name="opt_str" />
          <variable ilk="argument" name="possibilities" />
        </scope>
      </scope>
      <scope classrefs="OptParseError" doc="Raised if an invalid option is seen on the command line." ilk="class" line="131" lineend="139" name="BadOptionError">
        <variable attributes="__instancevar__" line="136" name="opt_str" />
        <scope ilk="function" line="138" lineend="139" name="__str__" returns="_()" signature="__str__()">
          <variable citdl="BadOptionError" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="135" lineend="136" name="__init__" signature="BadOptionError(opt_str)">
          <variable citdl="BadOptionError" ilk="argument" name="self" />
          <variable ilk="argument" name="opt_str" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Abstract base class for formatting option help.  OptionParser instances should use one of the HelpFormatter subclasses for formatting help; by default IndentedHelpFormatter is used." ilk="class" line="154" lineend="358" name="HelpFormatter">
        <scope ilk="function" line="288" lineend="321" name="format_option" returns="str.join()" signature="format_option(option)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable citdl="list" line="303" name="result" />
          <variable citdl="str" line="304" name="opts" />
          <variable citdl="int" line="305" name="opt_width" />
          <variable citdl="int" line="308" name="indent_first" />
          <variable citdl="expand_default()" line="314" name="help_text" />
          <variable citdl="textwrap.wrap()" line="315" name="help_lines" />
        </scope>
        <scope ilk="function" line="278" lineend="286" name="expand_default" returns="option.help" signature="expand_default(option)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable citdl="self.parser.defaults.get()" line="282" name="default_value" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="219" name="option_strings" />
        <variable attributes="__instancevar__" line="204" name="parser" />
        <scope ilk="function" line="223" lineend="224" name="set_parser" signature="set_parser(parser)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="parser" />
        </scope>
        <variable citdl="str" line="197" name="NO_DEFAULT_VALUE" />
        <scope ilk="function" line="232" lineend="236" name="set_long_opt_delimiter" signature="set_long_opt_delimiter(delim)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="delim" />
        </scope>
        <scope ilk="function" line="247" lineend="248" name="format_usage" signature="format_usage(usage)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="usage" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="218" name="default_tag" />
        <variable attributes="__instancevar__" line="217" name="short_first" />
        <scope ilk="function" line="226" lineend="230" name="set_short_opt_delimiter" signature="set_short_opt_delimiter(delim)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="delim" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="221" name="_long_opt_fmt" />
        <scope doc="Return a comma-separated list of option strings &amp; metavariables." ilk="function" line="341" lineend="358" name="format_option_strings" returns="str.join()" signature="format_option_strings(option)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable citdl="option.dest.upper()" line="344" name="metavar" />
          <variable citdl="option._short_opts" line="345" name="short_opts" />
          <variable citdl="list" line="347" name="long_opts" />
          <variable citdl="list" line="354" name="opts" />
        </scope>
        <variable attributes="__instancevar__" citdl="min()" line="216" name="help_width" />
        <scope ilk="function" line="271" lineend="275" name="format_epilog" returns="str" signature="format_epilog(epilog)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="epilog" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="213" name="width" />
        <scope attributes="__ctor__" ilk="function" line="199" lineend="221" name="__init__" signature="HelpFormatter(indent_increment, max_help_position, width, short_first)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="indent_increment" />
          <variable ilk="argument" name="max_help_position" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable ilk="argument" name="short_first" />
        </scope>
        <scope ilk="function" line="265" lineend="269" name="format_description" returns="str" signature="format_description(description)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="description" />
        </scope>
        <scope ilk="function" line="242" lineend="245" name="dedent" signature="dedent()">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="220" name="_short_opt_fmt" />
        <variable attributes="__instancevar__" line="205" name="indent_increment" />
        <scope attributes="protected" doc="Format a paragraph of free-form text for inclusion in the help output at the current indentation level." ilk="function" line="253" lineend="263" name="_format_text" returns="textwrap.fill()" signature="_format_text(text)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable citdl="int()" line="258" name="text_width" />
          <variable citdl="str" line="259" name="indent" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="214" name="current_indent" />
        <scope ilk="function" line="323" lineend="339" name="store_option_strings" signature="store_option_strings(parser)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="parser" />
          <variable citdl="max()" line="325" name="max_len" />
          <variable citdl="self.format_option_strings()" line="327" name="strings" />
        </scope>
        <scope ilk="function" line="238" lineend="240" name="indent" signature="indent()">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="215" name="level" />
        <variable attributes="__instancevar__" citdl="min()" line="206" name="help_position" />
        <scope ilk="function" line="250" lineend="251" name="format_heading" signature="format_heading(heading)">
          <variable citdl="HelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="heading" />
        </scope>
      </scope>
      <scope classrefs="HelpFormatter" doc="Format help with indented section bodies." ilk="class" line="360" lineend="376" name="IndentedHelpFormatter">
        <scope ilk="function" line="375" lineend="376" name="format_heading" returns="tuple" signature="format_heading(heading)">
          <variable citdl="IndentedHelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="heading" />
        </scope>
        <scope ilk="function" line="372" lineend="373" name="format_usage" returns="_()" signature="format_usage(usage)">
          <variable citdl="IndentedHelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="usage" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="364" lineend="370" name="__init__" signature="IndentedHelpFormatter(indent_increment=2, max_help_position=24, width=None, short_first=1)">
          <variable citdl="IndentedHelpFormatter" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="indent_increment" />
          <variable citdl="int" ilk="argument" name="max_help_position" />
          <variable ilk="argument" name="width" />
          <variable citdl="int" ilk="argument" name="short_first" />
        </scope>
      </scope>
      <variable citdl="tuple" line="441" name="NO_DEFAULT" />
      <scope classrefs="Exception" ilk="class" line="96" lineend="101" name="OptParseError">
        <variable attributes="__instancevar__" line="98" name="msg" />
        <scope ilk="function" line="100" lineend="101" name="__str__" signature="__str__()">
          <variable citdl="OptParseError" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="97" lineend="98" name="__init__" signature="OptParseError(msg)">
          <variable citdl="OptParseError" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Instance attributes:   _short_opts : [string]   _long_opts : [string]" ilk="class" line="444" lineend="816" name="Option">
        <scope attributes="protected" ilk="function" line="633" lineend="661" name="_check_type" signature="_check_type()">
          <import line="648" module="builtins" />
          <variable citdl="Option" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="776" lineend="786" name="process" returns="self.take_action()" signature="process(opt, value, values, parser)">
          <variable citdl="Option" ilk="argument" name="self" />
          <variable ilk="argument" name="opt" />
          <variable citdl="convert_value()" ilk="argument" name="value" />
          <variable ilk="argument" name="values" />
          <variable ilk="argument" name="parser" />
        </scope>
        <scope ilk="function" line="745" lineend="746" name="__str__" returns="str.join()" signature="__str__()">
          <variable citdl="Option" ilk="argument" name="self" />
        </scope>
        <variable citdl="tuple" line="511" name="ALWAYS_TYPED_ACTIONS" />
        <variable citdl="tuple" line="495" name="STORE_ACTIONS" />
        <variable citdl="tuple" line="505" name="TYPED_ACTIONS" />
        <scope attributes="__ctor__" ilk="function" line="559" lineend="576" name="__init__" signature="Option(*opts, **attrs)">
          <variable citdl="Option" ilk="argument" name="self" />
          <variable attributes="varargs" citdl="self._check_opt_strings()" ilk="argument" name="opts" />
          <variable attributes="kwargs" ilk="argument" name="attrs" />
        </scope>
        <scope attributes="protected" ilk="function" line="706" lineend="731" name="_check_callback" signature="_check_callback()">
          <variable citdl="Option" ilk="argument" name="self" />
        </scope>
        <variable citdl="tuple" line="515" name="CONST_ACTIONS" />
        <scope ilk="function" line="788" lineend="816" name="take_action" returns="int" signature="take_action(action, dest, opt, value, values, parser)">
          <variable citdl="Option" ilk="argument" name="self" />
          <variable ilk="argument" name="action" />
          <variable ilk="argument" name="dest" />
          <variable ilk="argument" name="opt" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="values" />
          <variable ilk="argument" name="parser" />
          <variable citdl="self.callback_args" line="804" name="args" />
          <variable citdl="dict" line="805" name="kwargs" />
        </scope>
        <scope ilk="function" line="753" lineend="757" name="get_opt_string" signature="get_opt_string()">
          <variable citdl="Option" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="608" lineend="622" name="_set_attrs" signature="_set_attrs(attrs)">
          <variable citdl="Option" ilk="argument" name="self" />
          <variable citdl="sorted()" ilk="argument" name="attrs" />
        </scope>
        <variable citdl="dict" line="538" name="TYPE_CHECKER" />
        <variable attributes="__instancevar__" citdl="str" line="638" name="type" />
        <scope ilk="function" line="750" lineend="751" name="takes_value" returns="bool" signature="takes_value()">
          <variable citdl="Option" ilk="argument" name="self" />
        </scope>
        <variable citdl="tuple" line="520" name="TYPES" />
        <variable citdl="_repr" line="748" name="__repr__" />
        <scope attributes="protected" ilk="function" line="627" lineend="631" name="_check_action" signature="_check_action()">
          <variable citdl="Option" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="762" lineend="767" name="check_value" returns="Option.check_value.checker()" signature="check_value(opt, value)">
          <variable citdl="Option" ilk="argument" name="self" />
          <variable ilk="argument" name="opt" />
          <variable ilk="argument" name="value" />
          <variable citdl="self.TYPE_CHECKER.get()" line="763" name="checker" />
        </scope>
        <variable attributes="__instancevar__" line="687" name="dest" />
        <variable attributes="__instancevar__" citdl="int" line="700" name="nargs" />
        <variable attributes="protected __instancevar__" citdl="list" line="562" name="_short_opts" />
        <variable attributes="protected __instancevar__" citdl="list" line="563" name="_long_opts" />
        <variable citdl="list" line="554" name="CHECK_METHODS" />
        <scope attributes="protected" ilk="function" line="587" lineend="606" name="_set_opt_strings" signature="_set_opt_strings(opts)">
          <variable citdl="Option" ilk="argument" name="self" />
          <variable ilk="argument" name="opts" />
        </scope>
        <scope attributes="protected" ilk="function" line="578" lineend="585" name="_check_opt_strings" returns="list" signature="_check_opt_strings(opts)">
          <variable citdl="Option" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="opts" />
        </scope>
        <variable citdl="tuple" line="481" name="ACTIONS" />
        <scope ilk="function" line="769" lineend="774" name="convert_value" returns="Option.check_value()" signature="convert_value(opt, value)">
          <variable citdl="Option" ilk="argument" name="self" />
          <variable ilk="argument" name="opt" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope attributes="protected" ilk="function" line="663" lineend="674" name="_check_choice" signature="_check_choice()">
          <variable citdl="Option" ilk="argument" name="self" />
        </scope>
        <variable citdl="list" line="466" name="ATTRS" />
        <scope attributes="protected" ilk="function" line="676" lineend="689" name="_check_dest" signature="_check_dest()">
          <variable citdl="Option" ilk="argument" name="self" />
          <variable citdl="bool" line="679" name="takes_value" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="629" name="action" />
        <scope attributes="protected" ilk="function" line="691" lineend="695" name="_check_const" signature="_check_const()">
          <variable citdl="Option" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="697" lineend="704" name="_check_nargs" signature="_check_nargs()">
          <variable citdl="Option" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="OptionError" doc="Raised if conflicting options are added to an OptionParser." ilk="class" line="120" name="OptionConflictError" />
      <scope classrefs="object" doc="Abstract base class.  Class attributes:" ilk="class" line="889" lineend="1074" name="OptionContainer">
        <scope ilk="function" line="953" lineend="954" name="set_description" signature="set_description(description)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="description" />
        </scope>
        <scope attributes="protected" ilk="function" line="969" lineend="994" name="_check_conflict" signature="_check_conflict(option)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable citdl="list" line="970" name="conflict_opts" />
          <variable line="979" name="handler" />
        </scope>
        <scope ilk="function" line="1040" lineend="1051" name="remove_option" signature="remove_option(opt_str)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="opt_str" />
          <variable citdl="self._long_opt.get()" line="1041" name="option" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="parser._long_opt" line="937" name="_long_opt" />
        <variable attributes="__instancevar__" line="951" name="conflict_handler" />
        <scope attributes="__ctor__" ilk="function" line="921" lineend="930" name="__init__" signature="OptionContainer(option_class, conflict_handler, description)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="option_class" />
          <variable ilk="argument" name="conflict_handler" />
          <variable ilk="argument" name="description" />
        </scope>
        <variable attributes="__instancevar__" line="954" name="description" />
        <scope ilk="function" line="1032" lineend="1034" name="get_option" returns="self._short_opt.get()" signature="get_option(opt_str)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="opt_str" />
        </scope>
        <scope ilk="function" line="1036" lineend="1038" name="has_option" returns="bool" signature="has_option(opt_str)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="opt_str" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="parser._short_opt" line="936" name="_short_opt" />
        <scope attributes="protected" ilk="function" line="932" lineend="938" name="_create_option_mappings" signature="_create_option_mappings()">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1065" lineend="1066" name="format_description" returns="formatter.format_description()" signature="format_description(formatter)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="formatter" />
        </scope>
        <scope doc="see OptionParser.destroy()." ilk="function" line="960" lineend="964" name="destroy" signature="destroy()">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="928" name="option_class" />
        <scope ilk="function" line="1026" lineend="1028" name="add_options" signature="add_options(option_list)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="option_list" />
        </scope>
        <scope ilk="function" line="956" lineend="957" name="get_description" signature="get_description()">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1068" lineend="1074" name="format_help" returns="str.join()" signature="format_help(formatter)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="formatter" />
          <variable citdl="list" line="1069" name="result" />
        </scope>
        <scope ilk="function" line="1056" lineend="1063" name="format_option_help" returns="str" signature="format_option_help(formatter)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="formatter" />
          <variable citdl="list" line="1059" name="result" />
        </scope>
        <scope ilk="function" line="996" lineend="1024" name="add_option" returns="option_class()" signature="add_option(Option) add_option(opt_str, ..., kwarg=val, ...)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="option_class()" line="1001" name="option" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="938" name="defaults" />
        <scope ilk="function" line="948" lineend="951" name="set_conflict_handler" signature="set_conflict_handler(handler)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="handler" />
        </scope>
        <scope attributes="protected" ilk="function" line="941" lineend="946" name="_share_option_mappings" signature="_share_option_mappings(parser)">
          <variable citdl="OptionContainer" ilk="argument" name="self" />
          <variable ilk="argument" name="parser" />
        </scope>
      </scope>
      <scope classrefs="OptParseError" doc="Raised if an Option instance is created with invalid or inconsistent arguments." ilk="class" line="104" lineend="118" name="OptionError">
        <variable attributes="__instancevar__" line="111" name="msg" />
        <scope ilk="function" line="114" lineend="118" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="OptionError" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str()" line="112" name="option_id" />
        <scope attributes="__ctor__" ilk="function" line="110" lineend="112" name="__init__" signature="OptionError(msg, option)">
          <variable citdl="OptionError" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="option" />
        </scope>
      </scope>
      <scope classrefs="OptionContainer" ilk="class" line="1077" lineend="1104" name="OptionGroup">
        <scope ilk="function" line="1099" lineend="1104" name="format_help" returns="formatter.format_heading()" signature="format_help(formatter)">
          <variable citdl="OptionGroup" ilk="argument" name="self" />
          <variable ilk="argument" name="formatter" />
          <variable citdl="formatter.format_heading()" line="1100" name="result" />
        </scope>
        <variable attributes="__instancevar__" line="1083" name="title" />
        <scope attributes="protected" ilk="function" line="1085" lineend="1087" name="_create_option_list" signature="_create_option_list()">
          <variable citdl="OptionGroup" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="1080" name="parser" />
        <variable attributes="__instancevar__" citdl="list" line="1086" name="option_list" />
        <scope ilk="function" line="1089" lineend="1090" name="set_title" signature="set_title(title)">
          <variable citdl="OptionGroup" ilk="argument" name="self" />
          <variable ilk="argument" name="title" />
        </scope>
        <scope doc="see OptionParser.destroy()." ilk="function" line="1092" lineend="1095" name="destroy" signature="destroy()">
          <variable citdl="OptionGroup" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1079" lineend="1083" name="__init__" signature="OptionGroup(parser, title, description=None)">
          <variable citdl="OptionGroup" ilk="argument" name="self" />
          <variable ilk="argument" name="parser" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="description" />
        </scope>
      </scope>
      <scope classrefs="OptionContainer" doc="Class attributes:   standard_option_list : [Option]     list of standard options that will be accepted by all instances" ilk="class" line="1107" lineend="1645" name="OptionParser">
        <scope ilk="function" line="1622" lineend="1623" name="format_epilog" returns="formatter.format_epilog()" signature="format_epilog(formatter)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="formatter" />
        </scope>
        <scope attributes="protected" ilk="function" line="1463" lineend="1498" name="_process_long_opt" signature="_process_long_opt(rargs, values)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="rargs" />
          <variable ilk="argument" name="values" />
          <variable citdl="rargs.pop()" line="1464" name="arg" />
          <variable citdl="True" line="1471" name="had_explicit_value" />
          <variable citdl="_match_long_opt()" line="1473" name="opt" />
          <variable line="1477" name="option" />
          <variable citdl="option.nargs" line="1479" name="nargs" />
          <variable citdl="tuple()" line="1487" name="value" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="1228" name="option_groups" />
        <scope ilk="function" line="1569" lineend="1574" name="get_usage" returns="str" signature="get_usage()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope doc="Print the version message for this program (self.version) to &apos;file&apos; (default stdout)." ilk="function" line="1594" lineend="1603" name="print_version" signature="print_version(file : file = stdout)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope doc="check_values(values : Values, args : [string]) -&gt; (values : Values, args : [string])" ilk="function" line="1390" lineend="1401" name="check_values" returns="tuple" signature="check_values(values : Values, args : [string])">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="values" />
          <variable ilk="argument" name="args" />
        </scope>
        <scope doc="Set parsing to not stop on the first non-option, allowing interspersing switches with command arguments." ilk="function" line="1271" lineend="1277" name="enable_interspersed_args" signature="enable_interspersed_args()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1335" lineend="1340" name="get_option_group" returns="option.container" signature="get_option_group(opt_str)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="opt_str" />
          <variable citdl="self._long_opt.get()" line="1336" name="option" />
        </scope>
        <scope ilk="function" line="1260" lineend="1269" name="set_usage" signature="set_usage(usage)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="usage" />
        </scope>
        <scope ilk="function" line="1287" lineend="1288" name="set_process_default_values" signature="set_process_default_values(process)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="process" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1174" lineend="1205" name="__init__" signature="OptionParser(usage=None, option_list=None, option_class=Option, version=None, conflict_handler=&apos;error&apos;, description=None, formatter=None, add_help_option=True, prog=None, epilog=None)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="usage" />
          <variable ilk="argument" name="option_list" />
          <variable citdl="Option" ilk="argument" name="option_class" />
          <variable ilk="argument" name="version" />
          <variable citdl="str" ilk="argument" name="conflict_handler" />
          <variable ilk="argument" name="description" />
          <variable citdl="IndentedHelpFormatter" ilk="argument" name="formatter" />
          <variable citdl="True" ilk="argument" name="add_help_option" />
          <variable ilk="argument" name="prog" />
          <variable ilk="argument" name="epilog" />
        </scope>
        <scope ilk="function" line="1319" lineend="1333" name="add_option_group" returns="OptionGroup" signature="add_option_group(*args, **kwargs)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="OptionGroup" line="1322" name="group" />
        </scope>
        <scope attributes="protected" ilk="function" line="1345" lineend="1349" name="_get_args" returns="list" signature="_get_args(args)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="args" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="1227" name="option_list" />
        <scope ilk="function" line="1588" lineend="1592" name="get_version" returns="str" signature="get_version()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="1241" lineend="1249" name="_populate_option_list" signature="_populate_option_list(option_list, add_help=True)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="option_list" />
          <variable citdl="True" ilk="argument" name="add_help" />
        </scope>
        <variable attributes="__instancevar__" line="1189" name="version" />
        <scope ilk="function" line="1554" lineend="1557" name="exit" signature="exit(status=0, msg=None)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="status" />
          <variable ilk="argument" name="msg" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="1254" name="largs" />
        <variable attributes="__instancevar__" citdl="list" line="1262" name="usage" />
        <scope ilk="function" line="1290" lineend="1291" name="set_default" signature="set_default(dest, value)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="dest" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" citdl="IndentedHelpFormatter" line="1194" name="formatter" />
        <variable attributes="__instancevar__" citdl="True" line="1191" name="process_default_values" />
        <scope doc="Print an extended help message, listing all options and any help text provided with them, to &apos;file&apos; (default stdout)." ilk="function" line="1637" lineend="1645" name="print_help" signature="print_help(file : file = stdout)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable citdl="sys.stdout" ilk="argument" name="file" />
        </scope>
        <scope doc="Set parsing to stop on the first non-option." ilk="function" line="1279" lineend="1285" name="disable_interspersed_args" signature="disable_interspersed_args()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1548" lineend="1549" name="expand_prog_name" returns="s.replace()" signature="expand_prog_name(s)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope attributes="protected" ilk="function" line="1231" lineend="1234" name="_add_help_option" signature="_add_help_option()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope doc="Print a usage message incorporating &apos;msg&apos; to stderr and exit." ilk="function" line="1559" lineend="1567" name="error" signature="error(msg : string)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
        <variable attributes="__instancevar__" citdl="_get_args()" line="1253" name="rargs" />
        <variable attributes="__instancevar__" line="1188" name="prog" />
        <scope ilk="function" line="1302" lineend="1314" name="get_default_values" returns="Values" signature="get_default_values()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable citdl="self.defaults.copy()" line="1307" name="defaults" />
          <variable citdl="defaults.get()" line="1309" name="default" />
          <variable citdl="option.get_opt_string()" line="1311" name="opt_str" />
        </scope>
        <scope ilk="function" line="1542" lineend="1546" name="get_prog_name" returns="os.path.basename()" signature="get_prog_name()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope doc="Declare that you are done with this OptionParser." ilk="function" line="1208" lineend="1220" name="destroy" signature="destroy()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="_process_args(largs : [string], rargs : [string], values : Values)" ilk="function" line="1403" name="_process_args" signature="_process_args(largs, rargs, values)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="largs" />
          <variable ilk="argument" name="rargs" />
          <variable ilk="argument" name="values" />
          <variable line="1414" name="arg" />
        </scope>
        <scope attributes="protected" doc="Determine which long option string &apos;opt&apos; matches, ie." ilk="function" line="1454" lineend="1461" name="_match_long_opt" returns="_match_abbrev()" signature="_match_long_opt(opt : string) -&gt; string">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="opt" />
        </scope>
        <variable attributes="__instancevar__" line="1196" name="epilog" />
        <variable citdl="list" line="1172" name="standard_option_list" />
        <scope ilk="function" line="1551" lineend="1552" name="get_description" returns="OptionParser.expand_prog_name()" signature="get_description()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope doc="parse_args(args : [string] = sys.argv[1:], values : Values = None) -&gt; (values : Values, args : [string])" ilk="function" line="1351" lineend="1388" name="parse_args" returns="self.check_values()" signature="parse_args(args=None, values=None)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="args" />
          <variable citdl="get_default_values()" ilk="argument" name="values" />
          <variable citdl="_get_args()" line="1365" name="rargs" />
          <variable citdl="self._process_args()" line="1383" name="stop" />
        </scope>
        <scope ilk="function" line="1625" lineend="1635" name="format_help" returns="str.join()" signature="format_help(formatter=None)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable citdl="IndentedHelpFormatter" ilk="argument" name="formatter" />
          <variable citdl="list" line="1628" name="result" />
        </scope>
        <scope attributes="protected" ilk="function" line="1226" lineend="1229" name="_create_option_list" signature="_create_option_list()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1293" lineend="1294" name="set_defaults" signature="set_defaults(**kwargs)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope attributes="protected" ilk="function" line="1236" lineend="1239" name="_add_version_option" signature="_add_version_option()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="1296" lineend="1300" name="_get_all_options" returns="list" signature="_get_all_options()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable citdl="list" line="1297" name="options" />
        </scope>
        <scope ilk="function" line="1605" lineend="1620" name="format_option_help" returns="str.join()" signature="format_option_help(formatter=None)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable citdl="IndentedHelpFormatter" ilk="argument" name="formatter" />
          <variable citdl="list" line="1609" name="result" />
        </scope>
        <variable attributes="__instancevar__" citdl="get_default_values()" line="1255" name="values" />
        <scope attributes="protected" ilk="function" line="1500" lineend="1537" name="_process_short_opts" signature="_process_short_opts(rargs, values)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="rargs" />
          <variable ilk="argument" name="values" />
          <variable citdl="rargs.pop()" line="1501" name="arg" />
          <variable citdl="False" line="1502" name="stop" />
          <variable citdl="int" line="1503" name="i" />
          <variable citdl="ch" line="1505" name="opt" />
          <variable citdl="self._short_opt.get()" line="1506" name="option" />
          <variable citdl="option.nargs" line="1518" name="nargs" />
          <variable citdl="tuple()" line="1526" name="value" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="1190" name="allow_interspersed_args" />
        <scope attributes="protected" ilk="function" line="1251" lineend="1255" name="_init_parsing_state" signature="_init_parsing_state()">
          <variable citdl="OptionParser" ilk="argument" name="self" />
        </scope>
        <scope doc="Print the usage message for the current program (self.usage) to &apos;file&apos; (default stdout)." ilk="function" line="1576" lineend="1586" name="print_usage" signature="print_usage(file : file = stdout)">
          <variable citdl="OptionParser" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
      </scope>
      <scope classrefs="OptParseError" doc="Raised if an invalid option value is encountered on the command line." ilk="class" line="125" name="OptionValueError" />
      <variable citdl="str" line="821" name="SUPPRESS_HELP" />
      <variable citdl="str" line="822" name="SUPPRESS_USAGE" />
      <scope classrefs="HelpFormatter" doc="Format help with underlined section headers." ilk="class" line="379" lineend="395" name="TitledHelpFormatter">
        <scope ilk="function" line="394" lineend="395" name="format_heading" returns="tuple" signature="format_heading(heading)">
          <variable citdl="TitledHelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="heading" />
        </scope>
        <scope ilk="function" line="391" lineend="392" name="format_usage" returns="tuple" signature="format_usage(usage)">
          <variable citdl="TitledHelpFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="usage" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="383" lineend="389" name="__init__" signature="TitledHelpFormatter(indent_increment=0, max_help_position=24, width=None, short_first=0)">
          <variable citdl="TitledHelpFormatter" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="indent_increment" />
          <variable citdl="int" ilk="argument" name="max_help_position" />
          <variable ilk="argument" name="width" />
          <variable citdl="int" ilk="argument" name="short_first" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="824" lineend="886" name="Values">
        <scope attributes="protected" doc="Update the option values from an arbitrary dictionary, using all keys from the dictionary regardless of whether they have a corresponding attribute in self or not." ilk="function" line="857" lineend="863" name="_update_loose" signature="_update_loose(dict)">
          <variable citdl="Values" ilk="argument" name="self" />
          <variable ilk="argument" name="dict" />
        </scope>
        <scope attributes="protected" ilk="function" line="865" lineend="871" name="_update" signature="_update(dict, mode)">
          <variable citdl="Values" ilk="argument" name="self" />
          <variable ilk="argument" name="dict" />
          <variable ilk="argument" name="mode" />
        </scope>
        <scope ilk="function" line="883" lineend="886" name="ensure_value" returns="getattr()" signature="ensure_value(attr, value)">
          <variable citdl="Values" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="831" lineend="832" name="__str__" returns="str()" signature="__str__()">
          <variable citdl="Values" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="878" lineend="881" name="read_file" signature="read_file(filename, mode=&apos;careful&apos;)">
          <variable citdl="Values" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable citdl="dict" line="879" name="vars" />
        </scope>
        <variable citdl="_repr" line="834" name="__repr__" />
        <scope attributes="__ctor__" ilk="function" line="826" lineend="829" name="__init__" signature="Values(defaults=None)">
          <variable citdl="Values" ilk="argument" name="self" />
          <variable ilk="argument" name="defaults" />
        </scope>
        <scope ilk="function" line="873" lineend="876" name="read_module" signature="read_module(modname, mode=&apos;careful&apos;)">
          <variable citdl="Values" ilk="argument" name="self" />
          <variable ilk="argument" name="modname" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable line="875" name="mod" />
        </scope>
        <scope ilk="function" line="836" lineend="842" name="__eq__" returns="NotImplemented" signature="__eq__(other)">
          <variable citdl="Values" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="protected" doc="Update the option values from an arbitrary dictionary, but only use keys from dict that already have a corresponding attribute in self." ilk="function" line="844" lineend="855" name="_update_careful" signature="_update_careful(dict)">
          <variable citdl="Values" ilk="argument" name="self" />
          <variable ilk="argument" name="dict" />
          <variable line="853" name="dval" />
        </scope>
      </scope>
      <variable citdl="list" line="26" name="__all__" />
      <variable citdl="str" line="43" name="__copyright__" />
      <variable citdl="str" line="24" name="__version__" />
      <scope ilk="function" line="422" lineend="428" name="check_builtin" returns="cvt()" signature="check_builtin(option, opt, value)">
        <variable ilk="argument" name="opt" />
        <variable ilk="argument" name="option" />
        <variable ilk="argument" name="value" />
      </scope>
      <scope ilk="function" line="430" lineend="437" name="check_choice" signature="check_choice(option, opt, value)">
        <variable ilk="argument" name="opt" />
        <variable ilk="argument" name="option" />
        <variable ilk="argument" name="value" />
        <variable citdl="str.join()" line="434" name="choices" />
      </scope>
      <scope ilk="function" line="91" lineend="92" name="gettext" signature="gettext(message)">
        <variable ilk="argument" name="message" />
      </scope>
      <scope classrefs="object" doc="Instance attributes:   _short_opts : [string]   _long_opts : [string]" ilk="class" line="1679" name="make_option" />
      <import module="os" />
      <import module="sys" />
      <import module="textwrap" />
      <scope attributes="protected __hidden__" doc="Return the string key in &apos;wordmap&apos; for which &apos;s&apos; is an unambiguous abbreviation." ilk="function" line="1650" lineend="1672" name="_match_abbrev" returns="str" signature="_match_abbrev(s : string, wordmap : {string : Option}) -&gt; string">
        <variable ilk="argument" name="s" />
        <variable ilk="argument" name="wordmap" />
        <variable citdl="list" line="1662" name="possibilities" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="414" lineend="415" name="_parse_long" returns="_parse_num()" signature="_parse_long(val)">
        <variable ilk="argument" name="val" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="78" lineend="79" name="_repr" returns="tuple" signature="_repr(self)">
        <variable ilk="argument" name="self" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="417" name="_builtin_cvt" />
      <scope attributes="protected __hidden__" ilk="function" line="398" lineend="409" name="_parse_num" returns="_parse_num.type()" signature="_parse_num(val, type)">
        <variable citdl="list" ilk="argument" name="val" />
        <variable ilk="argument" name="type" />
        <variable citdl="int" line="400" name="radix" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="411" lineend="412" name="_parse_int" returns="_parse_num()" signature="_parse_int(val)">
        <variable ilk="argument" name="val" />
      </scope>
      <variable attributes="protected __hidden__" citdl="gettext" line="93" name="_" />
    </scope>
    <scope doc="The pgen2 package." ilk="blob" lang="Python3" name="lib2to3.pgen2">
      <import module="driver" />
      <import module="grammar" />
      <import module="literals" />
      <import module="parse" />
      <import module="pgen" />
      <import module="token" />
      <import module="tokenize" />
    </scope>
    <scope doc="Create and manipulate C compatible data types in Python." ilk="blob" lang="Python3" name="_ctypes">
      <scope classrefs="Exception" ilk="class" name="ArgumentError" />
      <scope classrefs="_CData" doc="XXX to be provided" ilk="class" name="Array" />
      <scope classrefs="_CData" doc="Function Pointer" ilk="class" name="CFuncPtr" />
      <scope classrefs="Exception" doc="Raised when a COM method call failed." ilk="class" name="COMError" />
      <scope doc="CopyComPointer(src, dst) -&gt; HRESULT value" ilk="function" name="CopyComPointer" signature="CopyComPointer(src, dst) -&gt; HRESULT value" />
      <variable citdl="int" name="FUNCFLAG_CDECL" />
      <variable citdl="int" name="FUNCFLAG_HRESULT" />
      <variable citdl="int" name="FUNCFLAG_PYTHONAPI" />
      <variable citdl="int" name="FUNCFLAG_STDCALL" />
      <variable citdl="int" name="FUNCFLAG_USE_ERRNO" />
      <variable citdl="int" name="FUNCFLAG_USE_LASTERROR" />
      <scope doc="Convert a win32 error code into a string." ilk="function" name="FormatError" returns="str" signature="FormatError([integer]) -&gt; string" />
      <scope doc="Free the handle of an executable previously loaded by LoadLibrary." ilk="function" name="FreeLibrary" signature="FreeLibrary(handle) -&gt; void" />
      <scope doc="Load an executable (usually a DLL), and return a handle to it." ilk="function" name="LoadLibrary" signature="LoadLibrary(name) -&gt; handle" />
      <scope ilk="function" name="POINTER" />
      <scope ilk="function" name="PyObj_FromPtr" />
      <scope ilk="function" name="Py_DECREF" />
      <scope ilk="function" name="Py_INCREF" />
      <variable citdl="int" name="RTLD_GLOBAL" />
      <variable citdl="int" name="RTLD_LOCAL" />
      <scope classrefs="_CData" doc="Structure base class" ilk="class" name="Structure" />
      <scope classrefs="_CData" doc="Union base class" ilk="class" name="Union" />
      <variable citdl="str" name="__version__" />
      <scope doc="Return the address of the C instance internal buffer" ilk="function" name="addressof" returns="int" signature="addressof(C instance) -&gt; integer" />
      <scope doc="Return the alignment requirements of a C instance" ilk="function" name="alignment" returns="int" signature="alignment(C type) -&gt; integer alignment(C instance) -&gt; integer" />
      <scope doc="Return buffer interface information" ilk="function" name="buffer_info" />
      <scope doc="Return a pointer lookalike to a C instance, only usable as function argument" ilk="function" name="byref" signature="byref(C instance[, offset=0]) -&gt; byref-object" />
      <scope ilk="function" name="call_cdeclfunction" />
      <scope ilk="function" name="call_commethod" />
      <scope ilk="function" name="call_function" />
      <scope ilk="function" name="get_errno" />
      <scope ilk="function" name="get_last_error" />
      <scope ilk="function" name="pointer" />
      <scope doc="Resize the memory buffer of a ctypes instance" ilk="function" name="resize" />
      <scope doc="Set the encoding and error handling ctypes uses when converting between unicode and strings." ilk="function" name="set_conversion_mode" signature="set_conversion_mode(encoding, errors) -&gt; (previous-encoding, previous-errors)" />
      <scope ilk="function" name="set_errno" />
      <scope ilk="function" name="set_last_error" />
      <scope doc="Return the size in bytes of a C instance" ilk="function" name="sizeof" returns="int" signature="sizeof(C type) -&gt; integer sizeof(C instance) -&gt; integer" />
    </scope>
    <scope doc="# $Id: __init__.py 1821 2004-06-03 16:57:49Z fredrik $ # elementtree package" ilk="blob" lang="Python3" name="xml.etree">
      <import module="ElementPath" />
      <import module="ElementTree" />
      <import module="cElementTree" />
    </scope>
    <scope doc="JSON token scanner" ilk="blob" lang="Python3" name="json.scanner">
      <variable citdl="SRE_Pattern" line="11" name="NUMBER_RE" />
      <variable citdl="list" line="9" name="__all__" />
      <scope classrefs="object" doc="JSON scanner object" ilk="class" line="7" name="c_make_scanner" />
      <scope classrefs="object" doc="JSON scanner object" ilk="class" line="65" name="make_scanner" />
      <scope ilk="function" line="15" lineend="63" name="py_make_scanner" returns="py_make_scanner._scan_once" signature="py_make_scanner(context)">
        <variable citdl="context.parse_object" line="16" name="parse_object" />
        <variable citdl="context.parse_int" line="22" name="parse_int" />
        <variable citdl="context.parse_float" line="21" name="parse_float" />
        <variable citdl="context.object_hook" line="24" name="object_hook" />
        <variable citdl="NUMBER_RE.match" line="19" name="match_number" />
        <variable citdl="context.parse_constant" line="23" name="parse_constant" />
        <scope attributes="protected" ilk="function" line="26" lineend="61" name="_scan_once" returns="tuple" signature="_scan_once(string, idx)">
          <variable ilk="argument" name="string" />
          <variable ilk="argument" name="idx" />
          <variable line="28" name="nextchar" />
          <variable citdl="match_number()" line="46" name="m" />
          <variable citdl="parse_int()" line="50" name="res" />
        </scope>
        <variable citdl="context.parse_string" line="18" name="parse_string" />
        <variable citdl="context.strict" line="20" name="strict" />
        <variable citdl="context.parse_array" line="17" name="parse_array" />
        <variable ilk="argument" name="context" />
      </scope>
      <import module="re" />
    </scope>
    <scope doc="Shared support for scanning document type declarations in HTML and XHTML.  This module is used as a foundation for the html.parser module.  It has no" ilk="blob" lang="Python3" name="_markupbase">
      <scope classrefs="object" doc="Parser base class which provides some common support methods used by the SGML/HTML and XHTML parsers." ilk="class" line="23" lineend="391" name="ParserBase">
        <scope ilk="function" line="36" lineend="38" name="reset" signature="reset()">
          <variable citdl="ParserBase" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="142" lineend="161" name="parse_marked_section" returns="match.end()" signature="parse_marked_section(i, report=1)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable citdl="int" ilk="argument" name="report" />
          <variable citdl="self.rawdata" line="143" name="rawdata" />
          <variable citdl="_msmarkedsectionclose.search()" line="150" name="match" />
          <variable citdl="match.start()" line="159" name="j" />
        </scope>
        <scope attributes="protected" ilk="function" line="313" lineend="333" name="_parse_doctype_notation" returns="m.end()" signature="_parse_doctype_notation(i, declstartpos)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="declstartpos" />
          <variable citdl="self.rawdata" line="317" name="rawdata" />
          <variable citdl="list" line="319" name="c" />
          <variable citdl="_declstringlit_match()" line="326" name="m" />
          <variable citdl="m.end()" line="329" name="j" />
        </scope>
        <scope doc="Return current line number and offset." ilk="function" line="40" lineend="42" name="getpos" returns="tuple" signature="getpos()">
          <variable citdl="ParserBase" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="245" lineend="253" name="_parse_doctype_element" returns="rawdata.find()" signature="_parse_doctype_element(i, declstartpos)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="declstartpos" />
          <variable citdl="self.rawdata" line="250" name="rawdata" />
        </scope>
        <scope ilk="function" line="164" lineend="174" name="parse_comment" returns="match.end()" signature="parse_comment(i, report=1)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable citdl="int" ilk="argument" name="report" />
          <variable citdl="self.rawdata" line="165" name="rawdata" />
          <variable citdl="_commentclose.search()" line="168" name="match" />
          <variable citdl="match.start()" line="172" name="j" />
        </scope>
        <scope ilk="function" line="32" lineend="34" name="error" signature="error(message)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope attributes="protected" ilk="function" line="372" lineend="387" name="_scan_name" returns="tuple" signature="_scan_name(i, declstartpos)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="declstartpos" />
          <variable citdl="self.rawdata" line="373" name="rawdata" />
          <variable citdl="len()" line="374" name="n" />
          <variable citdl="_declname_match()" line="377" name="m" />
          <variable citdl="m.group()" line="379" name="s" />
          <variable citdl="s.strip()" line="380" name="name" />
        </scope>
        <scope ilk="function" line="64" lineend="138" name="parse_declaration" returns="self.parse_comment()" signature="parse_declaration(i)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable citdl="self.rawdata" line="75" name="rawdata" />
          <variable citdl="m.end()" line="76" name="j" />
          <variable citdl="len()" line="86" name="n" />
          <variable line="103" name="c" />
          <variable citdl="list" line="106" name="data" />
          <variable citdl="_declstringlit_match()" line="113" name="m" />
        </scope>
        <scope ilk="function" line="48" lineend="59" name="updatepos" signature="updatepos(i, j)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="j" />
          <variable citdl="self.rawdata" line="51" name="rawdata" />
          <variable citdl="rawdata.count()" line="52" name="nlines" />
          <variable citdl="rawdata.rindex()" line="55" name="pos" />
        </scope>
        <scope attributes="protected" ilk="function" line="178" lineend="242" name="_parse_doctype_subset" returns="meth()" signature="_parse_doctype_subset(i, declstartpos)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="declstartpos" />
          <variable citdl="self.rawdata" line="179" name="rawdata" />
          <variable citdl="len()" line="180" name="n" />
          <variable citdl="parse_comment()" line="181" name="j" />
          <variable line="183" name="c" />
          <variable citdl="list" line="185" name="s" />
          <variable citdl="getattr()" line="211" name="meth" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="37" name="lineno" />
        <scope attributes="protected" ilk="function" line="336" lineend="368" name="_parse_doctype_entity" returns="m.end()" signature="_parse_doctype_entity(i, declstartpos)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="declstartpos" />
          <variable citdl="self.rawdata" line="337" name="rawdata" />
          <variable citdl="int" line="339" name="j" />
          <variable citdl="list" line="341" name="c" />
          <variable citdl="_declstringlit_match()" line="358" name="m" />
        </scope>
        <variable attributes="__instancevar__" citdl="rawdata.rindex()" line="38" name="offset" />
        <scope attributes="protected" ilk="function" line="256" lineend="310" name="_parse_doctype_attlist" returns="rawdata.find()" signature="_parse_doctype_attlist(i, declstartpos)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="declstartpos" />
          <variable citdl="self.rawdata" line="257" name="rawdata" />
          <variable citdl="list" line="259" name="c" />
          <variable citdl="rawdata.find()" line="276" name="j" />
          <variable citdl="_declstringlit_match()" line="290" name="m" />
        </scope>
        <variable attributes="protected" citdl="str" line="61" name="_decl_otherchars" />
        <scope ilk="function" line="390" lineend="391" name="unknown_decl" signature="unknown_decl(data)">
          <variable citdl="ParserBase" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="27" lineend="30" name="__init__" signature="ParserBase()">
          <variable citdl="ParserBase" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="18" name="_msmarkedsectionclose" />
      <variable attributes="protected __hidden__" line="10" name="_declname_match" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="12" name="_commentclose" />
      <variable attributes="protected __hidden__" line="11" name="_declstringlit_match" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="13" name="_markedsectionclose" />
    </scope>
    <scope doc="codecs -- Python Codec Registry, API and helpers.  " ilk="blob" lang="Python3" name="codecs">
      <variable citdl="bytes" line="53" name="BOM" />
      <variable citdl="bytes" line="68" name="BOM32_BE" />
      <variable citdl="bytes" line="67" name="BOM32_LE" />
      <variable citdl="bytes" line="70" name="BOM64_BE" />
      <variable citdl="bytes" line="69" name="BOM64_LE" />
      <variable citdl="bytes" line="42" name="BOM_BE" />
      <variable citdl="bytes" line="39" name="BOM_LE" />
      <variable citdl="bytes" name="BOM_UTF16" />
      <variable citdl="bytes" name="BOM_UTF16_BE" />
      <variable citdl="bytes" name="BOM_UTF16_LE" />
      <variable citdl="bytes" line="56" name="BOM_UTF32" />
      <variable citdl="bytes" line="48" name="BOM_UTF32_BE" />
      <variable citdl="bytes" line="45" name="BOM_UTF32_LE" />
      <variable citdl="bytes" line="36" name="BOM_UTF8" />
      <scope classrefs="IncrementalDecoder" doc="This subclass of IncrementalDecoder can be used as the baseclass for an incremental decoder if the decoder must be able to handle incomplete byte sequences." ilk="class" line="281" lineend="315" name="BufferedIncrementalDecoder">
        <scope ilk="function" line="305" lineend="307" name="reset" signature="reset()">
          <variable citdl="BufferedIncrementalDecoder" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="309" lineend="311" name="getstate" returns="tuple" signature="getstate()">
          <variable citdl="BufferedIncrementalDecoder" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="290" name="buffer" />
        <scope ilk="function" line="297" lineend="303" name="decode" returns="result" signature="decode(input, final=False)">
          <variable citdl="BufferedIncrementalDecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="False" ilk="argument" name="final" />
          <variable citdl="str" line="299" name="data" />
        </scope>
        <scope attributes="protected" ilk="function" line="292" lineend="295" name="_buffer_decode" signature="_buffer_decode(input, errors, final)">
          <variable citdl="BufferedIncrementalDecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable ilk="argument" name="errors" />
          <variable ilk="argument" name="final" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="287" lineend="290" name="__init__" signature="BufferedIncrementalDecoder(errors=&apos;strict&apos;)">
          <variable citdl="BufferedIncrementalDecoder" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
        <scope ilk="function" line="313" lineend="315" name="setstate" signature="setstate(state)">
          <variable citdl="BufferedIncrementalDecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
      </scope>
      <scope classrefs="IncrementalEncoder" doc="This subclass of IncrementalEncoder can be used as the baseclass for an incremental encoder if the encoder must keep some of the output in a buffer between calls to encode()." ilk="class" line="198" lineend="230" name="BufferedIncrementalEncoder">
        <scope ilk="function" line="222" lineend="224" name="reset" signature="reset()">
          <variable citdl="BufferedIncrementalEncoder" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="226" lineend="227" name="getstate" returns="str" signature="getstate()">
          <variable citdl="BufferedIncrementalEncoder" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="207" name="buffer" />
        <scope ilk="function" line="214" lineend="220" name="encode" returns="result" signature="encode(input, final=False)">
          <variable citdl="BufferedIncrementalEncoder" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="False" ilk="argument" name="final" />
          <variable citdl="str" line="216" name="data" />
        </scope>
        <scope attributes="protected" ilk="function" line="209" lineend="212" name="_buffer_encode" signature="_buffer_encode(input, errors, final)">
          <variable citdl="BufferedIncrementalEncoder" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable ilk="argument" name="errors" />
          <variable ilk="argument" name="final" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="204" lineend="207" name="__init__" signature="BufferedIncrementalEncoder(errors=&apos;strict&apos;)">
          <variable citdl="BufferedIncrementalEncoder" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
        <scope ilk="function" line="229" lineend="230" name="setstate" signature="setstate(state)">
          <variable citdl="BufferedIncrementalEncoder" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Defines the interface for stateless encoders/decoders.  The .encode()/.decode() methods may use different error" ilk="class" line="94" lineend="156" name="Codec">
        <scope doc="Encodes the object input and returns a tuple (output object, length consumed)." ilk="function" line="116" lineend="133" name="encode" signature="encode(input, errors=&apos;strict&apos;)">
          <variable citdl="Codec" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
        <scope doc="Decodes the object input and returns a tuple (output object, length consumed)." ilk="function" line="135" lineend="156" name="decode" signature="decode(input, errors=&apos;strict&apos;)">
          <variable citdl="Codec" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
      </scope>
      <scope classrefs="tuple" ilk="class" line="75" lineend="92" name="CodecInfo">
        <scope ilk="function" line="77" lineend="87" name="__new__" returns="tuple.__new__()" signature="__new__(encode, decode, streamreader=None, streamwriter=None, incrementalencoder=None, incrementaldecoder=None, name=None)">
          <variable citdl="CodecInfo" ilk="argument" name="cls" />
          <variable ilk="argument" name="encode" />
          <variable ilk="argument" name="decode" />
          <variable ilk="argument" name="streamreader" />
          <variable ilk="argument" name="streamwriter" />
          <variable ilk="argument" name="incrementalencoder" />
          <variable ilk="argument" name="incrementaldecoder" />
          <variable ilk="argument" name="name" />
          <variable citdl="tuple.__new__()" line="79" name="self" />
        </scope>
        <scope ilk="function" line="89" lineend="92" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="CodecInfo" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope doc="Return a wrapped version of file which provides transparent encoding translation." ilk="function" line="879" lineend="913" name="EncodedFile" returns="StreamRecoder" signature="EncodedFile(file, data_encoding, file_encoding=None, errors=&apos;strict&apos;)">
        <variable citdl="str" ilk="argument" name="errors" />
        <variable citdl="StreamRecoder" line="908" name="sr" />
        <variable citdl="lookup()" line="907" name="file_info" />
        <variable ilk="argument" name="data_encoding" />
        <variable citdl="lookup()" line="906" name="data_info" />
        <variable ilk="argument" name="file_encoding" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope classrefs="object" doc="An IncrementalDecoder decodes an input in multiple steps. The input can be passed piece by piece to the decode() method. The IncrementalDecoder remembers the state of the decoding process between calls to decode()." ilk="class" line="232" name="IncrementalDecoder">
        <scope doc="Reset the decoder to the initial state." ilk="function" line="254" name="reset" signature="reset()">
          <variable citdl="IncrementalDecoder" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="246" name="errors" />
        <scope doc="Decode input and returns the resulting object." ilk="function" line="248" lineend="252" name="decode" signature="decode(input, final=False)">
          <variable citdl="IncrementalDecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="False" ilk="argument" name="final" />
        </scope>
        <scope doc="Return the current state of the decoder." ilk="function" line="259" lineend="271" name="getstate" returns="tuple" signature="getstate()">
          <variable citdl="IncrementalDecoder" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Create a IncrementalDecoder instance." ilk="function" line="238" lineend="246" name="__init__" signature="IncrementalDecoder(errors=&apos;strict&apos;)">
          <variable citdl="IncrementalDecoder" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
        <scope doc="Set the current state of the decoder." ilk="function" line="273" name="setstate" signature="setstate(state)">
          <variable citdl="IncrementalDecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
      </scope>
      <scope classrefs="object" doc="An IncrementalEncoder encodes an input in multiple steps. The input can be passed piece by piece to the encode() method. The IncrementalEncoder remembers the state of the encoding process between calls to encode()." ilk="class" line="158" name="IncrementalEncoder">
        <scope doc="Resets the encoder to the initial state." ilk="function" line="181" name="reset" signature="reset()">
          <variable citdl="IncrementalEncoder" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="172" name="errors" />
        <variable attributes="__instancevar__" citdl="str" line="173" name="buffer" />
        <scope doc="Return the current state of the encoder." ilk="function" line="186" lineend="190" name="getstate" returns="int" signature="getstate()">
          <variable citdl="IncrementalEncoder" ilk="argument" name="self" />
        </scope>
        <scope doc="Encodes input and returns the resulting object." ilk="function" line="175" lineend="179" name="encode" signature="encode(input, final=False)">
          <variable citdl="IncrementalEncoder" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="False" ilk="argument" name="final" />
        </scope>
        <scope attributes="__ctor__" doc="Creates an IncrementalEncoder instance." ilk="function" line="164" lineend="173" name="__init__" signature="IncrementalEncoder(errors=&apos;strict&apos;)">
          <variable citdl="IncrementalEncoder" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
        <scope doc="Set the current state of the encoder." ilk="function" line="192" name="setstate" signature="setstate(state)">
          <variable citdl="IncrementalEncoder" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
      </scope>
      <scope classrefs="Codec" ilk="class" line="392" lineend="634" name="StreamReader">
        <scope doc="Resets the codec buffers used for keeping state." ilk="function" line="591" lineend="602" name="reset" signature="reset()">
          <variable citdl="StreamReader" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the next decoded line from the input stream." ilk="function" line="612" lineend="618" name="__next__" returns="readline()" signature="__next__()">
          <variable citdl="StreamReader" ilk="argument" name="self" />
          <variable citdl="readline()" line="615" name="line" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="413" name="errors" />
        <scope ilk="function" line="633" lineend="634" name="__exit__" signature="__exit__(type, value, tb)">
          <variable citdl="StreamReader" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="tb" />
        </scope>
        <variable attributes="__instancevar__" citdl="line.splitlines()" line="418" name="linebuffer" />
        <variable attributes="__instancevar__" line="412" name="stream" />
        <variable attributes="__instancevar__" citdl="str" line="417" name="charbuffer" />
        <scope ilk="function" line="630" lineend="631" name="__enter__" returns="StreamReader" signature="__enter__()">
          <variable citdl="StreamReader" ilk="argument" name="self" />
        </scope>
        <scope doc="Read all lines available on the input stream and return them as list of lines." ilk="function" line="576" lineend="589" name="readlines" returns="data.splitlines()" signature="readlines(sizehint=None, keepends=True)">
          <variable citdl="StreamReader" ilk="argument" name="self" />
          <variable ilk="argument" name="sizehint" />
          <variable citdl="True" ilk="argument" name="keepends" />
          <variable citdl="read()" line="588" name="data" />
        </scope>
        <scope doc="Inherit all other methods from the underlying stream." ilk="function" line="623" lineend="628" name="__getattr__" returns="StreamReader.__getattr__.getattr()" signature="__getattr__(name, getattr=getattr)">
          <variable citdl="StreamReader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="getattr" ilk="argument" name="getattr" />
        </scope>
        <scope ilk="function" line="420" lineend="421" name="decode" signature="decode(input, errors=&apos;strict&apos;)">
          <variable citdl="StreamReader" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
        <scope doc="Decodes data from the stream self.stream and returns the resulting object." ilk="function" line="423" lineend="501" name="read" returns="str" signature="read(size=-1, chars=-1, firstline=False)">
          <variable citdl="StreamReader" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="size" />
          <variable citdl="int" ilk="argument" name="chars" />
          <variable citdl="False" ilk="argument" name="firstline" />
          <variable citdl="self.stream.read()" line="470" name="newdata" />
          <variable citdl="self.stream.read()" line="474" name="data" />
          <variable citdl="newchars.splitlines()" line="481" name="lines" />
          <variable citdl="list" line="495" name="result" />
        </scope>
        <scope ilk="function" line="620" lineend="621" name="__iter__" returns="StreamReader" signature="__iter__()">
          <variable citdl="StreamReader" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="414" name="bytebuffer" />
        <scope doc="Read one line from the input stream and return the decoded data." ilk="function" line="503" lineend="574" name="readline" returns="str" signature="readline(size=None, keepends=True)">
          <variable citdl="StreamReader" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="True" ilk="argument" name="keepends" />
          <variable citdl="str" line="515" name="line" />
          <variable citdl="int" line="526" name="readsize" />
          <variable citdl="read()" line="530" name="data" />
          <variable citdl="line.splitlines()" line="539" name="lines" />
          <variable line="557" name="line0withend" />
          <variable line="558" name="line0withoutend" />
        </scope>
        <scope doc="Set the input stream&apos;s current position." ilk="function" line="604" lineend="610" name="seek" signature="seek(offset, whence=0)">
          <variable citdl="StreamReader" ilk="argument" name="self" />
          <variable ilk="argument" name="offset" />
          <variable citdl="int" ilk="argument" name="whence" />
        </scope>
        <scope attributes="__ctor__" doc="Creates a StreamReader instance." ilk="function" line="394" lineend="418" name="__init__" signature="StreamReader(stream, errors=&apos;strict&apos;)">
          <variable citdl="StreamReader" ilk="argument" name="self" />
          <variable ilk="argument" name="stream" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
      </scope>
      <scope classrefs="object" doc="StreamReaderWriter instances allow wrapping streams which work in both read and write modes. " ilk="class" line="638" lineend="715" name="StreamReaderWriter">
        <scope ilk="function" line="697" lineend="700" name="reset" signature="reset()">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="667" name="errors" />
        <scope ilk="function" line="693" lineend="695" name="writelines" returns="self.writer.writelines()" signature="writelines(list)">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="list" />
        </scope>
        <variable attributes="__instancevar__" line="664" name="stream" />
        <variable citdl="str" line="649" name="encoding" />
        <scope ilk="function" line="669" lineend="671" name="read" returns="self.reader.read()" signature="read(size=-1)">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="size" />
        </scope>
        <scope doc="Return the next decoded line from the input stream." ilk="function" line="681" lineend="684" name="__next__" returns="next()" signature="__next__()">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="677" lineend="679" name="readlines" returns="self.reader.readlines()" signature="readlines(sizehint=None)">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="sizehint" />
        </scope>
        <scope doc="Inherit all other methods from the underlying stream." ilk="function" line="702" lineend="707" name="__getattr__" returns="StreamReaderWriter.__getattr__.getattr()" signature="__getattr__(name, getattr=getattr)">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="getattr" ilk="argument" name="getattr" />
        </scope>
        <scope ilk="function" line="689" lineend="691" name="write" returns="self.writer.write()" signature="write(data)">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="__instancevar__" citdl="__init__.Writer()" line="666" name="writer" />
        <scope ilk="function" line="686" lineend="687" name="__iter__" returns="StreamReaderWriter" signature="__iter__()">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="__init__.Reader()" line="665" name="reader" />
        <scope ilk="function" line="714" lineend="715" name="__exit__" signature="__exit__(type, value, tb)">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="tb" />
        </scope>
        <scope ilk="function" line="711" lineend="712" name="__enter__" returns="StreamReaderWriter" signature="__enter__()">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="673" lineend="675" name="readline" returns="self.reader.readline()" signature="readline(size=None)">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
        </scope>
        <scope attributes="__ctor__" doc="Creates a StreamReaderWriter instance." ilk="function" line="651" lineend="667" name="__init__" signature="StreamReaderWriter(stream, Reader, Writer, errors=&apos;strict&apos;)">
          <variable citdl="StreamReaderWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="stream" />
          <variable ilk="argument" name="Reader" />
          <variable ilk="argument" name="Writer" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
      </scope>
      <scope classrefs="object" doc="StreamRecoder instances provide a frontend - backend view of encoding data. " ilk="class" line="719" lineend="831" name="StreamRecoder">
        <scope ilk="function" line="815" lineend="818" name="reset" signature="reset()">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="804" lineend="807" name="write" returns="self.writer.write()" signature="write(data)">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="771" name="errors" />
        <scope ilk="function" line="809" lineend="813" name="writelines" returns="self.writer.write()" signature="writelines(list)">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="list" />
          <variable citdl="str.join()" line="811" name="data" />
        </scope>
        <variable attributes="__instancevar__" line="766" name="stream" />
        <scope ilk="function" line="773" lineend="777" name="read" returns="self.reader.read()" signature="read(size=-1)">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="size" />
          <variable citdl="self.reader.read()" line="775" name="data" />
        </scope>
        <scope ilk="function" line="827" lineend="828" name="__enter__" returns="StreamRecoder" signature="__enter__()">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="788" lineend="792" name="readlines" returns="data.splitlines()" signature="readlines(sizehint=None)">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="sizehint" />
          <variable citdl="self.reader.read()" line="790" name="data" />
        </scope>
        <variable citdl="str" line="737" name="data_encoding" />
        <scope doc="Inherit all other methods from the underlying stream." ilk="function" line="820" lineend="825" name="__getattr__" returns="StreamRecoder.__getattr__.getattr()" signature="__getattr__(name, getattr=getattr)">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="getattr" ilk="argument" name="getattr" />
        </scope>
        <variable attributes="__instancevar__" line="768" name="decode" />
        <variable attributes="__instancevar__" citdl="__init__.Writer()" line="770" name="writer" />
        <scope ilk="function" line="801" lineend="802" name="__iter__" returns="StreamRecoder" signature="__iter__()">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
        </scope>
        <variable citdl="str" line="738" name="file_encoding" />
        <scope attributes="__ctor__" doc="Creates a StreamRecoder instance which implements a two-way conversion: encode and decode work on the frontend (the input to .read() and output of .write()) while Reader and Writer work on the backend (reading and" ilk="function" line="740" lineend="771" name="__init__" signature="StreamRecoder(stream, encode, decode, Reader, Writer, errors=&apos;strict&apos;)">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="stream" />
          <variable ilk="argument" name="encode" />
          <variable ilk="argument" name="decode" />
          <variable ilk="argument" name="Reader" />
          <variable ilk="argument" name="Writer" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
        <variable attributes="__instancevar__" citdl="__init__.Reader()" line="769" name="reader" />
        <variable attributes="__instancevar__" line="767" name="encode" />
        <scope ilk="function" line="830" lineend="831" name="__exit__" signature="__exit__(type, value, tb)">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="tb" />
        </scope>
        <scope ilk="function" line="779" lineend="786" name="readline" returns="self.reader.readline()" signature="readline(size=None)">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="self.reader.readline()" line="782" name="data" />
        </scope>
        <scope doc="Return the next decoded line from the input stream." ilk="function" line="794" lineend="799" name="__next__" returns="next()" signature="__next__()">
          <variable citdl="StreamRecoder" ilk="argument" name="self" />
          <variable citdl="next()" line="797" name="data" />
        </scope>
      </scope>
      <scope classrefs="Codec" ilk="class" line="324" lineend="388" name="StreamWriter">
        <scope doc="Flushes and resets the codec buffers used for keeping state." ilk="function" line="365" lineend="375" name="reset" signature="reset()">
          <variable citdl="StreamWriter" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="349" name="errors" />
        <scope doc="Writes the concatenated list of strings to the stream using .write()." ilk="function" line="358" lineend="363" name="writelines" signature="writelines(list)">
          <variable citdl="StreamWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="list" />
        </scope>
        <variable attributes="__instancevar__" line="348" name="stream" />
        <scope ilk="function" line="384" lineend="385" name="__enter__" returns="StreamWriter" signature="__enter__()">
          <variable citdl="StreamWriter" ilk="argument" name="self" />
        </scope>
        <scope doc="Inherit all other methods from the underlying stream." ilk="function" line="377" lineend="382" name="__getattr__" returns="StreamWriter.__getattr__.getattr()" signature="__getattr__(name, getattr=getattr)">
          <variable citdl="StreamWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="getattr" ilk="argument" name="getattr" />
        </scope>
        <scope doc="Writes the object&apos;s contents encoded to self.stream." ilk="function" line="351" lineend="356" name="write" signature="write(object)">
          <variable citdl="StreamWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
        <scope ilk="function" line="387" lineend="388" name="__exit__" signature="__exit__(type, value, tb)">
          <variable citdl="StreamWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="tb" />
        </scope>
        <scope attributes="__ctor__" doc="Creates a StreamWriter instance." ilk="function" line="326" lineend="349" name="__init__" signature="StreamWriter(stream, errors=&apos;strict&apos;)">
          <variable citdl="StreamWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="stream" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
      </scope>
      <variable citdl="list" line="19" name="__all__" />
      <scope ilk="function" name="ascii_decode" />
      <scope ilk="function" name="ascii_encode" />
      <scope doc="Implements the &apos;backslashreplace&apos; error handling, which replaces an unencodable character with a backslashed escape sequence." ilk="function" line="1064" name="backslashreplace_errors" />
      <import module="builtins" />
      <scope ilk="function" name="charbuffer_encode" />
      <scope ilk="function" name="charmap_build" />
      <scope ilk="function" name="charmap_decode" />
      <scope ilk="function" name="charmap_encode" />
      <scope doc="Decodes obj using the codec registered for encoding." ilk="function" name="decode" returns="object" signature="decode(obj, [encoding[,errors]]) -&gt; object" />
      <scope doc="Encodes obj using the codec registered for encoding." ilk="function" name="encode" returns="object" signature="encode(obj, [encoding[,errors]]) -&gt; object" />
      <scope ilk="function" name="escape_decode" />
      <scope ilk="function" name="escape_encode" />
      <scope doc="Lookup up the codec for the given encoding and return its decoder function." ilk="function" line="927" lineend="935" name="getdecoder" signature="getdecoder(encoding)">
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope doc="Lookup up the codec for the given encoding and return its encoder function." ilk="function" line="917" lineend="925" name="getencoder" signature="getencoder(encoding)">
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope doc="Lookup up the codec for the given encoding and return its IncrementalDecoder class or factory function." ilk="function" line="951" lineend="963" name="getincrementaldecoder" signature="getincrementaldecoder(encoding)">
        <variable line="960" name="decoder" />
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope doc="Lookup up the codec for the given encoding and return its IncrementalEncoder class or factory function." ilk="function" line="937" lineend="949" name="getincrementalencoder" signature="getincrementalencoder(encoding)">
        <variable line="946" name="encoder" />
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope doc="Lookup up the codec for the given encoding and return its StreamReader class or factory function." ilk="function" line="965" lineend="973" name="getreader" signature="getreader(encoding)">
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope doc="Lookup up the codec for the given encoding and return its StreamWriter class or factory function." ilk="function" line="975" lineend="983" name="getwriter" signature="getwriter(encoding)">
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope doc="Implements the &apos;ignore&apos; error handling, which ignores malformed data and continues." ilk="function" line="1061" name="ignore_errors" />
      <scope doc="Decoding iterator." ilk="function" line="1003" lineend="1019" name="iterdecode" signature="iterdecode(iterator, encoding, errors=&apos;strict&apos;, **kwargs)">
        <variable citdl="str" ilk="argument" name="errors" />
        <variable ilk="argument" name="iterator" />
        <variable ilk="argument" name="encoding" />
        <variable citdl="getincrementaldecoder()()" line="1012" name="decoder" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
        <variable citdl="decoder.decode()" line="1014" name="output" />
      </scope>
      <scope doc="Encoding iterator." ilk="function" line="985" lineend="1001" name="iterencode" signature="iterencode(iterator, encoding, errors=&apos;strict&apos;, **kwargs)">
        <variable citdl="str" ilk="argument" name="errors" />
        <variable ilk="argument" name="iterator" />
        <variable ilk="argument" name="encoding" />
        <variable citdl="getincrementalencoder()()" line="994" name="encoder" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
        <variable citdl="encoder.encode()" line="996" name="output" />
      </scope>
      <scope ilk="function" name="latin_1_decode" />
      <scope ilk="function" name="latin_1_encode" />
      <scope doc="Looks up a codec tuple in the Python codec registry and returns a CodecInfo object." ilk="function" name="lookup" signature="lookup(encoding) -&gt; CodecInfo" />
      <scope doc="Return the error handler for the specified error handling name or raise a LookupError, if no handler exists under this name." ilk="function" name="lookup_error" signature="lookup_error(errors) -&gt; handler" />
      <scope doc="Creates an encoding map from a decoding map." ilk="function" line="1036" lineend="1055" name="make_encoding_map" returns="dict" signature="make_encoding_map(decoding_map)">
        <variable citdl="dict" line="1049" name="m" />
        <variable ilk="argument" name="decoding_map" />
      </scope>
      <scope doc="Return a dictionary where elements of the rng sequence are mapped to themselves." ilk="function" line="1023" lineend="1034" name="make_identity_dict" returns="dict" signature="make_identity_dict(rng) -&gt; dict">
        <variable citdl="dict" line="1031" name="res" />
        <variable ilk="argument" name="rng" />
      </scope>
      <scope ilk="function" name="mbcs_decode" />
      <scope ilk="function" name="mbcs_encode" />
      <scope doc="Open an encoded file using the given mode and return a wrapped version providing transparent encoding/decoding." ilk="function" line="835" lineend="877" name="open" returns="StreamReaderWriter" signature="open(filename, mode=&apos;rb&apos;, encoding=None, errors=&apos;strict&apos;, buffering=1)">
        <variable citdl="lookup()" line="873" name="info" />
        <variable citdl="str" ilk="argument" name="errors" />
        <variable ilk="argument" name="encoding" />
        <variable ilk="argument" name="filename" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="builtins.open()" line="870" name="file" />
        <variable citdl="int" ilk="argument" name="buffering" />
        <variable citdl="StreamReaderWriter" line="874" name="srw" />
      </scope>
      <scope ilk="function" name="raw_unicode_escape_decode" />
      <scope ilk="function" name="raw_unicode_escape_encode" />
      <scope ilk="function" name="readbuffer_encode" />
      <scope doc="Register a codec search function." ilk="function" name="register" signature="register(search_function)" />
      <scope doc="Register the specified error handler under the name errors." ilk="function" name="register_error" signature="register_error(errors, handler)" />
      <scope doc="Implements the &apos;replace&apos; error handling, which replaces malformed data with a replacement marker." ilk="function" line="1062" name="replace_errors" />
      <scope doc="Implements the &apos;strict&apos; error handling, which raises a UnicodeError on coding errors." ilk="function" line="1060" name="strict_errors" />
      <import module="sys" />
      <scope ilk="function" name="unicode_escape_decode" />
      <scope ilk="function" name="unicode_escape_encode" />
      <scope ilk="function" name="unicode_internal_decode" />
      <scope ilk="function" name="unicode_internal_encode" />
      <scope ilk="function" name="utf_16_be_decode" />
      <scope ilk="function" name="utf_16_be_encode" />
      <scope ilk="function" name="utf_16_decode" />
      <scope ilk="function" name="utf_16_encode" />
      <scope ilk="function" name="utf_16_ex_decode" />
      <scope ilk="function" name="utf_16_le_decode" />
      <scope ilk="function" name="utf_16_le_encode" />
      <scope ilk="function" name="utf_32_be_decode" />
      <scope ilk="function" name="utf_32_be_encode" />
      <scope ilk="function" name="utf_32_decode" />
      <scope ilk="function" name="utf_32_encode" />
      <scope ilk="function" name="utf_32_ex_decode" />
      <scope ilk="function" name="utf_32_le_decode" />
      <scope ilk="function" name="utf_32_le_encode" />
      <scope ilk="function" name="utf_7_decode" />
      <scope ilk="function" name="utf_7_encode" />
      <scope ilk="function" name="utf_8_decode" />
      <scope ilk="function" name="utf_8_encode" />
      <scope doc="Implements the &apos;xmlcharrefreplace&apos; error handling, which replaces an unencodable character with the appropriate XML character reference." ilk="function" line="1063" name="xmlcharrefreplace_errors" />
      <variable attributes="protected __hidden__" citdl="int" line="1075" name="_false" />
    </scope>
    <scope doc="distutils.ccompiler  Contains CCompiler, an abstract base class that defines the interface" ilk="blob" lang="Python3" name="distutils.ccompiler">
      <scope classrefs="object" doc="Abstract base class to define the interface that must be implemented by real compiler classes.  Also has some utility methods used by several compiler classes." ilk="class" line="17" lineend="915" name="CCompiler">
        <scope ilk="function" line="908" lineend="909" name="spawn" signature="spawn(cmd)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
        </scope>
        <variable line="65" name="src_extensions" />
        <variable attributes="__instancevar__" citdl="int" line="89" name="force" />
        <variable attributes="__instancevar__" citdl="int" line="90" name="verbose" />
        <scope doc="Return the compiler option to add &apos;dir&apos; to the list of directories searched for runtime libraries." ilk="function" line="750" lineend="754" name="runtime_library_dir_option" signature="runtime_library_dir_option(dir)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <scope doc="Set the list of directories to search for shared libraries at runtime to &apos;dirs&apos; (a list of strings)." ilk="function" line="282" lineend="288" name="set_runtime_library_dirs" signature="set_runtime_library_dirs(dirs)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dirs" />
        </scope>
        <scope attributes="protected" ilk="function" line="355" lineend="362" name="_get_cc_args" returns="list" signature="_get_cc_args(pp_opts, debug, before)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="pp_opts" />
          <variable ilk="argument" name="debug" />
          <variable ilk="argument" name="before" />
          <variable citdl="list" line="357" name="cc_args" />
        </scope>
        <scope doc="Define the executables (and options for them) that will be run to perform the various stages of compilation." ilk="function" line="123" lineend="153" name="set_executables" signature="set_executables(**kwargs)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope doc="Add &apos;dir&apos; to the list of directories that will be searched for shared libraries at runtime." ilk="function" line="276" lineend="280" name="add_runtime_library_dir" signature="add_runtime_library_dir(dir)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <scope doc="Add &apos;object&apos; to the list of object files (or analogues, such as explicitly named library files or the output of &quot;resource compilers&quot;) to be included in every link driven by this compiler object." ilk="function" line="290" lineend="296" name="add_link_object" signature="add_link_object(object)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
        <scope attributes="protected" doc="Typecheck and fix up some arguments supplied to various methods." ilk="function" line="412" lineend="427" name="_fix_object_args" returns="tuple" signature="_fix_object_args(objects, output_dir)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable citdl="list()" ilk="argument" name="objects" />
          <variable ilk="argument" name="output_dir" />
        </scope>
        <scope doc="Set the list of library search directories to &apos;dirs&apos; (a list of strings)." ilk="function" line="269" lineend="274" name="set_library_dirs" signature="set_library_dirs(dirs)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dirs" />
        </scope>
        <scope doc="Return the compiler option to add &apos;dir&apos; to the list of libraries linked into the shared library or executable." ilk="function" line="756" lineend="760" name="library_option" signature="library_option(lib)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="lib" />
        </scope>
        <scope doc="Link a bunch of stuff together to create a static library file." ilk="function" line="587" lineend="611" name="create_static_lib" signature="create_static_lib(objects, output_libname, output_dir=None, debug=0, target_lang=None)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="objects" />
          <variable ilk="argument" name="output_libname" />
          <variable ilk="argument" name="output_dir" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="target_lang" />
        </scope>
        <scope doc="Return the compiler option to add &apos;dir&apos; to the list of directories searched for libraries." ilk="function" line="744" lineend="748" name="library_dir_option" signature="library_dir_option(dir)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="87" lineend="121" name="__init__" signature="CCompiler(verbose=0, dry_run=0, force=0)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="verbose" />
          <variable citdl="int" ilk="argument" name="dry_run" />
          <variable citdl="int" ilk="argument" name="force" />
        </scope>
        <scope ilk="function" line="702" lineend="719" name="link_shared_object" signature="link_shared_object(objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="objects" />
          <variable ilk="argument" name="output_filename" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable ilk="argument" name="export_symbols" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="build_temp" />
          <variable ilk="argument" name="target_lang" />
        </scope>
        <scope doc="Add &apos;dir&apos; to the list of directories that will be searched for libraries specified to &apos;add_library()&apos; and &apos;set_libraries()&apos;." ilk="function" line="261" lineend="267" name="add_library_dir" signature="add_library_dir(dir)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <scope doc="Define a preprocessor macro for all compilations driven by this compiler object." ilk="function" line="186" lineend="199" name="define_macro" signature="define_macro(name, value=None)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
          <variable citdl="_find_macro()" line="195" name="i" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="88" name="dry_run" />
        <scope attributes="protected" doc="Decide which souce files must be recompiled." ilk="function" line="396" lineend="410" name="_prep_compile" returns="tuple" signature="_prep_compile(sources, output_dir, depends=None)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="sources" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="depends" />
          <variable citdl="self.object_filenames()" line="405" name="objects" />
        </scope>
        <scope attributes="protected" doc="Return true if we need to relink the files listed in &apos;objects&apos; to recreate &apos;output_file&apos;." ilk="function" line="463" lineend="474" name="_need_link" returns="bool" signature="_need_link(objects, output_file)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="objects" />
          <variable ilk="argument" name="output_file" />
          <variable citdl="newer_group()" line="471" name="newer" />
        </scope>
        <scope ilk="function" line="681" lineend="699" name="link_shared_lib" signature="link_shared_lib(objects, output_libname, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="objects" />
          <variable ilk="argument" name="output_libname" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable ilk="argument" name="export_symbols" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="build_temp" />
          <variable ilk="argument" name="target_lang" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="107" name="libraries" />
        <variable attributes="__instancevar__" citdl="list" line="100" name="macros" />
        <variable citdl="list" line="85" name="language_order" />
        <variable line="39" name="compiler_type" />
        <scope doc="Preprocess a single C/C++ source file, named in &apos;source&apos;." ilk="function" line="500" lineend="511" name="preprocess" signature="preprocess(source, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="output_file" />
          <variable ilk="argument" name="macros" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
        </scope>
        <variable citdl="dict" line="79" name="language_map" />
        <scope attributes="protected" doc="Compile &apos;src&apos; to product &apos;obj&apos;." ilk="function" line="581" lineend="585" name="_compile" signature="_compile(obj, src, ext, cc_args, extra_postargs, pp_opts)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="src" />
          <variable ilk="argument" name="ext" />
          <variable ilk="argument" name="cc_args" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="pp_opts" />
        </scope>
        <scope ilk="function" line="875" lineend="889" name="library_filename" returns="os.path.join()" signature="library_filename(libname, lib_type=&apos;static&apos;, strip_dir=0, output_dir=&apos;&apos;)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="libname" />
          <variable citdl="str" ilk="argument" name="lib_type" />
          <variable citdl="int" ilk="argument" name="strip_dir" />
          <variable citdl="str" ilk="argument" name="output_dir" />
          <variable citdl="getattr()" line="881" name="fmt" />
          <variable citdl="getattr()" line="882" name="ext" />
          <variable citdl="getattr()" line="885" name="filename" />
          <variable citdl="str" line="887" name="dir" />
        </scope>
        <scope ilk="function" line="846" lineend="861" name="object_filenames" returns="list" signature="object_filenames(source_filenames, strip_dir=0, output_dir=&apos;&apos;)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="source_filenames" />
          <variable citdl="int" ilk="argument" name="strip_dir" />
          <variable citdl="str" ilk="argument" name="output_dir" />
          <variable citdl="list" line="849" name="obj_names" />
          <variable citdl="os.path.basename()" line="852" name="base" />
        </scope>
        <scope ilk="function" line="863" lineend="867" name="shared_object_filename" returns="os.path.join()" signature="shared_object_filename(basename, strip_dir=0, output_dir=&apos;&apos;)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable citdl="os.path.basename()" ilk="argument" name="basename" />
          <variable citdl="int" ilk="argument" name="strip_dir" />
          <variable citdl="str" ilk="argument" name="output_dir" />
        </scope>
        <variable line="66" name="obj_extension" />
        <scope doc="Set the list of directories that will be searched to &apos;dirs&apos; (a list of strings)." ilk="function" line="227" lineend="235" name="set_include_dirs" signature="set_include_dirs(dirs)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dirs" />
        </scope>
        <variable citdl="str" line="615" name="SHARED_OBJECT" />
        <scope attributes="protected" doc="Typecheck and fix-up some of the arguments to the &apos;compile()&apos; method, and return fixed-up values." ilk="function" line="364" lineend="394" name="_fix_compile_args" returns="tuple" signature="_fix_compile_args(output_dir, macros, include_dirs)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="output_dir" />
          <variable citdl="list" ilk="argument" name="macros" />
          <variable citdl="list" ilk="argument" name="include_dirs" />
        </scope>
        <scope doc="Set the list of object files (or analogues) to be included in every link to &apos;objects&apos;." ilk="function" line="298" lineend="304" name="set_link_objects" signature="set_link_objects(objects)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="objects" />
        </scope>
        <variable citdl="str" line="617" name="EXECUTABLE" />
        <scope ilk="function" line="902" lineend="903" name="warn" signature="warn(msg)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="118" name="objects" />
        <scope doc="Link a bunch of stuff together to create an executable or shared library file." ilk="function" line="619" lineend="676" name="link" signature="link(target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="target_desc" />
          <variable ilk="argument" name="objects" />
          <variable ilk="argument" name="output_filename" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable ilk="argument" name="export_symbols" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="build_temp" />
          <variable ilk="argument" name="target_lang" />
        </scope>
        <scope ilk="function" line="894" lineend="895" name="announce" signature="announce(msg, level=1)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="155" lineend="159" name="set_executable" signature="set_executable(key, value)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Set the list of libraries to be included in all links driven by this compiler object to &apos;libnames&apos; (a list of strings)." ilk="function" line="253" lineend="259" name="set_libraries" signature="set_libraries(libnames)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="libnames" />
        </scope>
        <variable line="71" name="exe_extension" />
        <scope ilk="function" line="911" lineend="912" name="move_file" returns="CCompiler.move_file()" signature="move_file(src, dst)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="src" />
          <variable ilk="argument" name="dst" />
        </scope>
        <variable line="70" name="shared_lib_format" />
        <variable attributes="__instancevar__" citdl="list" line="103" name="include_dirs" />
        <variable line="69" name="static_lib_format" />
        <scope ilk="function" line="905" lineend="906" name="execute" signature="execute(func, args, msg=None, level=1)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="msg" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <scope doc="Search the specified list of directories for a static or shared library file &apos;lib&apos; and return the full path to that file." ilk="function" line="803" lineend="810" name="find_library_file" signature="find_library_file(dirs, lib, debug=0)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dirs" />
          <variable ilk="argument" name="lib" />
          <variable citdl="int" ilk="argument" name="debug" />
        </scope>
        <scope ilk="function" line="914" lineend="915" name="mkpath" signature="mkpath(name, mode=777)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="mode" />
        </scope>
        <scope ilk="function" line="722" lineend="736" name="link_executable" signature="link_executable(objects, output_progname, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, target_lang=None)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="objects" />
          <variable ilk="argument" name="output_progname" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="target_lang" />
        </scope>
        <variable attributes="__instancevar__" line="94" name="output_dir" />
        <scope attributes="protected" doc="Process arguments and decide which source files to compile." ilk="function" line="312" lineend="353" name="_setup_compile" returns="tuple" signature="_setup_compile(outdir, macros, incdirs, sources, depends, extra)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="outdir" />
          <variable citdl="list" ilk="argument" name="macros" />
          <variable citdl="list" ilk="argument" name="incdirs" />
          <variable ilk="argument" name="sources" />
          <variable ilk="argument" name="depends" />
          <variable citdl="list" ilk="argument" name="extra" />
          <variable citdl="self.object_filenames()" line="339" name="objects" />
          <variable citdl="gen_preprocess_options()" line="343" name="pp_opts" />
          <variable citdl="dict" line="345" name="build" />
          <variable line="347" name="src" />
          <variable line="348" name="obj" />
          <variable line="349" name="ext" />
        </scope>
        <scope ilk="function" line="869" lineend="873" name="executable_filename" returns="os.path.join()" signature="executable_filename(basename, strip_dir=0, output_dir=&apos;&apos;)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable citdl="os.path.basename()" ilk="argument" name="basename" />
          <variable citdl="int" ilk="argument" name="strip_dir" />
          <variable citdl="str" ilk="argument" name="output_dir" />
        </scope>
        <scope attributes="protected" ilk="function" line="161" lineend="167" name="_find_macro" returns="int" signature="_find_macro(name)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" line="162" name="i" />
        </scope>
        <scope attributes="protected" doc="Typecheck and fix up some of the arguments supplied to the &apos;link_*&apos; methods." ilk="function" line="429" lineend="461" name="_fix_lib_args" returns="tuple" signature="_fix_lib_args(libraries, library_dirs, runtime_library_dirs)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="libraries" />
          <variable citdl="list" ilk="argument" name="library_dirs" />
          <variable citdl="list" ilk="argument" name="runtime_library_dirs" />
        </scope>
        <scope doc="Add &apos;libname&apos; to the list of libraries that will be included in all links driven by this compiler object." ilk="function" line="237" lineend="251" name="add_library" signature="add_library(libname)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="libname" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="114" name="runtime_library_dirs" />
        <scope doc="Compile one or more source files." ilk="function" line="513" lineend="579" name="compile" returns="list" signature="compile(sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="sources" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="macros" />
          <variable ilk="argument" name="include_dirs" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="depends" />
          <variable citdl="_get_cc_args()" line="569" name="cc_args" />
        </scope>
        <scope doc="Detect the language of a given file, or list of files." ilk="function" line="476" lineend="494" name="detect_language" returns="self.language_map.get()" signature="detect_language(sources)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="sources" />
          <variable citdl="self.language_map.get()" line="482" name="lang" />
          <variable citdl="self.language_order.index()" line="483" name="index" />
          <variable citdl="self.language_map.get()" line="486" name="extlang" />
          <variable citdl="self.language_order.index()" line="488" name="extindex" />
        </scope>
        <scope doc="Add &apos;dir&apos; to the list of directories that will be searched for header files." ilk="function" line="219" lineend="225" name="add_include_dir" signature="add_include_dir(dir)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <variable line="67" name="static_lib_extension" />
        <scope doc="Return a boolean indicating whether funcname is supported on the current platform." ilk="function" line="762" lineend="801" name="has_function" returns="bool" signature="has_function(funcname, includes=None, include_dirs=None, libraries=None, library_dirs=None)">
          <import line="771" module="tempfile" />
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="funcname" />
          <variable citdl="list" ilk="argument" name="includes" />
          <variable citdl="list" ilk="argument" name="include_dirs" />
          <variable citdl="list" ilk="argument" name="libraries" />
          <variable citdl="list" ilk="argument" name="library_dirs" />
          <variable citdl="os.fdopen()" line="781" name="f" />
          <variable citdl="compile()" line="791" name="objects" />
        </scope>
        <variable line="68" name="shared_lib_extension" />
        <scope attributes="protected" doc="Ensures that every element of &apos;definitions&apos; is a valid macro definition, ie." ilk="function" line="169" lineend="181" name="_check_macro_definitions" signature="_check_macro_definitions(definitions)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="definitions" />
        </scope>
        <scope doc="Undefine a preprocessor macro for all compilations driven by this compiler object." ilk="function" line="201" lineend="217" name="undefine_macro" signature="undefine_macro(name)">
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="_find_macro()" line="212" name="i" />
          <variable citdl="tuple" line="216" name="undefn" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="110" name="library_dirs" />
        <variable citdl="str" line="616" name="SHARED_LIBRARY" />
        <scope ilk="function" line="897" lineend="900" name="debug_print" signature="debug_print(msg)">
          <import line="898" module="distutils.debug" symbol="DEBUG" />
          <variable citdl="CCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" line="6" name="__revision__" />
      <variable citdl="dict" line="961" name="compiler_class" />
      <scope doc="Perform some action that affects the outside world (eg." ilk="function" name="execute" signature="execute(func, args, msg=None, verbose=0, dry_run=0)" />
      <scope doc="Generate linker options for searching library directories and linking with specific libraries." ilk="function" line="1082" lineend="1118" name="gen_lib_options" returns="list" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)">
        <variable citdl="compiler.runtime_library_dir_option()" line="1095" name="opt" />
        <variable citdl="list" line="1089" name="lib_opts" />
        <variable citdl="compiler.find_library_file()" line="1110" name="lib_file" />
        <variable ilk="argument" name="runtime_library_dirs" />
        <variable ilk="argument" name="libraries" />
        <variable ilk="argument" name="library_dirs" />
        <variable ilk="argument" name="compiler" />
      </scope>
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at least two types of compilers: the typical Unix compiler and Visual C++." ilk="function" line="1037" lineend="1079" name="gen_preprocess_options" returns="list" signature="gen_preprocess_options(macros, include_dirs)">
        <variable ilk="argument" name="macros" />
        <variable citdl="list" line="1058" name="pp_opts" />
        <variable ilk="argument" name="include_dirs" />
      </scope>
      <scope doc="Determine the default compiler to use for the given platform." ilk="function" line="937" lineend="956" name="get_default_compiler" returns="compiler" signature="get_default_compiler(osname=None, platform=None)">
        <variable citdl="sys.platform" ilk="argument" name="platform" />
        <variable citdl="os.name" ilk="argument" name="osname" />
      </scope>
      <import module="log" />
      <scope doc="Create a directory and any missing ancestor directories." ilk="function" name="mkpath" signature="mkpath(name, mode=511, verbose=1, dry_run=0)" />
      <scope doc="Move a file &apos;src&apos; to &apos;dst&apos;." ilk="function" name="move_file" signature="move_file(src, dst, verbose=1, dry_run=0)" />
      <scope doc="Generate an instance of some CCompiler subclass for the supplied platform/compiler combination." ilk="function" line="992" lineend="1034" name="new_compiler" returns="new_compiler.klass()" signature="new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0)">
        <variable citdl="int" ilk="argument" name="force" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable line="1020" name="module" />
        <variable citdl="os.name" ilk="argument" name="plat" />
        <variable line="1021" name="klass" />
        <variable citdl="str" line="1012" name="msg" />
        <variable citdl="str" line="1018" name="module_name" />
        <variable citdl="get_default_compiler()" ilk="argument" name="compiler" />
      </scope>
      <scope doc="Return true if &apos;target&apos; is out-of-date with respect to any file listed in &apos;sources&apos;." ilk="function" name="newer_group" signature="newer_group(sources, target, missing=&apos;error&apos;)" />
      <scope doc="Walk two filename lists in parallel, testing if each source is newer than its corresponding target." ilk="function" name="newer_pairwise" signature="newer_pairwise(sources, targets)" />
      <import module="os" />
      <import module="re" />
      <scope doc="Print list of available compilers (used by the &quot;--help- compiler&quot; options to &quot;build&quot;, &quot;build_ext&quot;, &quot;build_clib&quot;)." ilk="function" line="975" lineend="989" name="show_compilers" signature="show_compilers()">
        <variable citdl="FancyGetopt()" line="988" name="pretty_printer" />
        <variable citdl="list" line="983" name="compilers" />
      </scope>
      <scope doc="Run another program, specified as a command list &apos;cmd&apos;, in a new process." ilk="function" name="spawn" signature="spawn(cmd, search_path=1, verbose=0, dry_run=0)" />
      <scope doc="Split a string up according to Unix shell-like rules for quotes and backslashes." ilk="function" name="split_quoted" signature="split_quoted(s)" />
      <import module="sys" />
      <variable attributes="protected __hidden__" citdl="tuple" line="922" name="_default_compilers" />
    </scope>
    <scope doc="Fix &quot;for x in f.xreadlines()&quot; -&gt; &quot;for x in f&quot;.  This fixer will also convert g(f.xreadlines) into g(f.__iter__)." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_xreadlines">
      <scope classrefs="BaseFix" ilk="class" line="11" lineend="24" name="FixXreadlines">
        <variable citdl="str" line="12" name="PATTERN" />
        <scope ilk="function" line="18" lineend="24" name="transform" signature="transform(node, results)">
          <variable citdl="FixXreadlines" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="results.get()" line="19" name="no_call" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Ttk wrapper.  This module provides classes to allow using Tk themed widget set." ilk="blob" lang="Python3" name="tkinter.ttk">
      <scope classrefs="Widget" doc="Ttk Button widget, displays a textual label and/or image, and evaluates a command when pressed." ilk="class" line="598" lineend="619" name="Button">
        <scope doc="Invokes the command associated with the button." ilk="function" line="617" lineend="619" name="invoke" returns="self.tk.call()" signature="invoke()">
          <variable citdl="Button" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a Ttk Button widget with the parent master." ilk="function" line="602" lineend="614" name="__init__" signature="Button(master=None, **kw)">
          <variable citdl="Button" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Ttk Checkbutton widget which is either in on- or off-state." ilk="class" line="622" lineend="648" name="Checkbutton">
        <scope doc="Toggles between the selected and deselected states and invokes the associated command." ilk="function" line="640" lineend="648" name="invoke" returns="self.tk.call()" signature="invoke()">
          <variable citdl="Checkbutton" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a Ttk Checkbutton widget with the parent master." ilk="function" line="625" lineend="637" name="__init__" signature="Checkbutton(master=None, **kw)">
          <variable citdl="Checkbutton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Entry" doc="Ttk Combobox widget combines a text field with a pop-down list of values." ilk="class" line="693" lineend="743" name="Combobox">
        <scope doc="If newindex is supplied, sets the combobox value to the element at position newindex in the list of values." ilk="function" line="733" lineend="738" name="current" returns="self.tk.call()" signature="current(newindex=None)">
          <variable citdl="Combobox" ilk="argument" name="self" />
          <variable ilk="argument" name="newindex" />
        </scope>
        <scope ilk="function" line="717" lineend="721" name="__setitem__" signature="__setitem__(item, value)">
          <variable citdl="Combobox" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Sets the value of the combobox to value." ilk="function" line="741" lineend="743" name="set" signature="set(value)">
          <variable citdl="Combobox" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Custom Combobox configure, created to properly format the values option." ilk="function" line="724" lineend="730" name="configure" returns="Entry.configure()" signature="configure(cnf=None, **kw)">
          <variable citdl="Combobox" ilk="argument" name="self" />
          <variable ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a Ttk Combobox widget with the parent master." ilk="function" line="697" lineend="714" name="__init__" signature="Combobox(master=None, **kw)">
          <variable citdl="Combobox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget Entry" doc="Ttk Entry widget displays a one-line text string and allows that string to be edited by the user." ilk="class" line="651" lineend="690" name="Entry">
        <scope doc="Force revalidation, independent of the conditions specified by the validate option." ilk="function" line="686" lineend="690" name="validate" returns="bool()" signature="validate()">
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Returns the name of the element at position x, y, or the empty string if the coordinates are outside the window." ilk="function" line="680" lineend="683" name="identify" returns="self.tk.call()" signature="identify(x, y)">
          <variable citdl="Entry" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope doc="Return a tuple of (x, y, width, height) which describes the bounding box of the character given by index." ilk="function" line="674" lineend="677" name="bbox" returns="self.tk.call()" signature="bbox(index)">
          <variable citdl="Entry" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope attributes="__ctor__" doc="Constructs a Ttk Entry widget with the parent master." ilk="function" line="655" lineend="671" name="__init__" signature="Entry(master=None, widget=None, **kw)">
          <variable citdl="Entry" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="widget" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Ttk Frame widget is a container, used to group other widgets together." ilk="class" line="746" lineend="761" name="Frame">
        <scope attributes="__ctor__" doc="Construct a Ttk Frame with parent master." ilk="function" line="750" lineend="761" name="__init__" signature="Frame(master=None, **kw)">
          <variable citdl="Frame" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Ttk Label widget displays a textual label and/or image." ilk="class" line="764" lineend="780" name="Label">
        <scope attributes="__ctor__" doc="Construct a Ttk Label with parent master." ilk="function" line="767" lineend="780" name="__init__" signature="Label(master=None, **kw)">
          <variable citdl="Label" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Ttk Labelframe widget is a container used to group other widgets together. It has an optional label, which may be a plain text string or another widget." ilk="class" line="801" name="LabelFrame" />
      <scope classrefs="Frame" doc="A Ttk Scale widget with a Ttk Label widget indicating its current value. " ilk="class" line="1495" lineend="1586" name="LabeledScale">
        <scope attributes="protected" doc="Return current scale value." ilk="function" line="1576" lineend="1578" name="_get_value" returns="self._variable.get()" signature="_get_value()">
          <variable citdl="LabeledScale" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="Scale" line="1521" name="scale" />
        <variable attributes="protected __instancevar__" citdl="tkinter.IntVar()" line="1516" name="_variable" />
        <variable attributes="protected __instancevar__" citdl="bool" line="1513" name="_label_top" />
        <variable citdl="int" line="1586" name="value" />
        <variable attributes="__instancevar__" citdl="Label" line="1520" name="label" />
        <variable attributes="private __instancevar__" citdl="self._variable.trace_variable()" line="1532" name="__tracecb" />
        <scope attributes="protected" doc="Adjust the label position according to the scale." ilk="function" line="1549" lineend="1573" name="_adjust" signature="_adjust(*args)">
          <variable citdl="LabeledScale" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <scope ilk="function" line="1551" lineend="1560" name="adjust_label" signature="adjust_label()">
            <variable citdl="self.label.winfo_reqheight()" line="1556" name="y" />
          </scope>
          <variable line="1562" name="from_" />
          <variable line="1562" name="to" />
          <variable citdl="self._variable.get()" line="1565" name="newval" />
        </scope>
        <scope doc="Destroy this widget and possibly its associated variable." ilk="function" line="1537" lineend="1546" name="destroy" signature="destroy()">
          <variable citdl="LabeledScale" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Set new scale value." ilk="function" line="1581" lineend="1583" name="_set_value" signature="_set_value(val)">
          <variable citdl="LabeledScale" ilk="argument" name="self" />
          <variable ilk="argument" name="val" />
        </scope>
        <scope attributes="__ctor__" doc="Construct an horizontal LabeledScale with parent master, a variable to be associated with the Ttk Scale widget and its range." ilk="function" line="1502" lineend="1534" name="__init__" signature="LabeledScale(master=None, variable=None, from_=0, to=10, **kw)">
          <variable citdl="LabeledScale" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="variable" />
          <variable citdl="int" ilk="argument" name="from_" />
          <variable citdl="int" ilk="argument" name="to" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable line="1525" name="scale_side" />
          <variable line="1526" name="label_side" />
          <variable line="1528" name="tmp" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="1518" name="_last_valid" />
      </scope>
      <scope classrefs="Widget" doc="Ttk Labelframe widget is a container used to group other widgets together. It has an optional label, which may be a plain text string or another widget." ilk="class" line="783" lineend="799" name="Labelframe">
        <scope attributes="__ctor__" doc="Construct a Ttk Labelframe with parent master." ilk="function" line="788" lineend="799" name="__init__" signature="Labelframe(master=None, **kw)">
          <variable citdl="Labelframe" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Ttk Menubutton widget displays a textual label and/or image, and displays a menu when pressed." ilk="class" line="804" lineend="820" name="Menubutton">
        <scope attributes="__ctor__" doc="Construct a Ttk Menubutton with parent master." ilk="function" line="808" lineend="820" name="__init__" signature="Menubutton(master=None, **kw)">
          <variable citdl="Menubutton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Ttk Notebook widget manages a collection of windows and displays a single one at a time. Each child window is associated with a tab, which the user may select to change the currently-displayed window." ilk="class" line="823" lineend="953" name="Notebook">
        <scope doc="Returns the numeric index of the tab specified by tab_id, or the total number of tabs if tab_id is the string &quot;end&quot;." ilk="function" line="889" lineend="892" name="index" returns="self.tk.call()" signature="index(tab_id)">
          <variable citdl="Notebook" ilk="argument" name="self" />
          <variable ilk="argument" name="tab_id" />
        </scope>
        <scope doc="Hides the tab specified by tab_id." ilk="function" line="874" lineend="880" name="hide" signature="hide(tab_id)">
          <variable citdl="Notebook" ilk="argument" name="self" />
          <variable ilk="argument" name="tab_id" />
        </scope>
        <scope doc="Removes the tab specified by tab_id, unmaps and unmanages the associated window." ilk="function" line="868" lineend="871" name="forget" signature="forget(tab_id)">
          <variable citdl="Notebook" ilk="argument" name="self" />
          <variable ilk="argument" name="tab_id" />
        </scope>
        <scope doc="Enable keyboard traversal for a toplevel window containing this notebook." ilk="function" line="930" lineend="953" name="enable_traversal" signature="enable_traversal()">
          <variable citdl="Notebook" ilk="argument" name="self" />
        </scope>
        <scope doc="Inserts a pane at the specified position." ilk="function" line="895" lineend="901" name="insert" signature="insert(pos, child, **kw)">
          <variable citdl="Notebook" ilk="argument" name="self" />
          <variable ilk="argument" name="pos" />
          <variable ilk="argument" name="child" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Returns a list of windows managed by the notebook." ilk="function" line="925" lineend="927" name="tabs" returns="tuple" signature="tabs()">
          <variable citdl="Notebook" ilk="argument" name="self" />
        </scope>
        <scope doc="Adds a new tab to the notebook." ilk="function" line="860" lineend="865" name="add" signature="add(child, **kw)">
          <variable citdl="Notebook" ilk="argument" name="self" />
          <variable ilk="argument" name="child" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Returns the name of the tab element at position x, y, or the empty string if none." ilk="function" line="883" lineend="886" name="identify" returns="self.tk.call()" signature="identify(x, y)">
          <variable citdl="Notebook" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope doc="Selects the specified tab." ilk="function" line="904" lineend="911" name="select" returns="self.tk.call()" signature="select(tab_id=None)">
          <variable citdl="Notebook" ilk="argument" name="self" />
          <variable ilk="argument" name="tab_id" />
        </scope>
        <scope doc="Query or modify the options of the specific tab_id." ilk="function" line="914" lineend="922" name="tab" returns="_val_or_dict()" signature="tab(tab_id, option=None, **kw)">
          <variable citdl="Notebook" ilk="argument" name="self" />
          <variable ilk="argument" name="tab_id" />
          <variable ilk="argument" name="option" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a Ttk Notebook with parent master." ilk="function" line="828" lineend="857" name="__init__" signature="Notebook(master=None, **kw)">
          <variable citdl="Notebook" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Menubutton" doc="Themed OptionMenu, based after tkinter&apos;s OptionMenu, which allows the user to select a value from a menu." ilk="class" line="1589" lineend="1645" name="OptionMenu">
        <variable attributes="protected __instancevar__" citdl="kwargs.pop()" line="1614" name="_callback" />
        <variable attributes="protected __instancevar__" line="1613" name="_variable" />
        <scope ilk="function" line="1622" lineend="1626" name="__getitem__" returns="Menubutton.__getitem__()" signature="__getitem__(item)">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope doc="Build a new menu of radiobuttons with *values and optionally a default value." ilk="function" line="1629" lineend="1639" name="set_menu" signature="set_menu(default=None, *values)">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="default" />
          <variable attributes="varargs" ilk="argument" name="values" />
          <variable line="1632" name="menu" />
        </scope>
        <scope doc="Destroy this widget and its associated variable." ilk="function" line="1642" lineend="1645" name="destroy" signature="destroy()">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a themed OptionMenu widget with master as the parent, the resource textvariable set to variable, the initially selected value specified by the default parameter, the menu values given by *values and additional keywords." ilk="function" line="1593" lineend="1619" name="__init__" signature="OptionMenu(master, variable, default=None, *values, **kwargs)">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="variable" />
          <variable ilk="argument" name="default" />
          <variable attributes="varargs" ilk="argument" name="values" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="dict" line="1608" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget PanedWindow" doc="Ttk Panedwindow widget displays a number of subwindows, stacked either vertically or horizontally." ilk="class" line="1012" name="PanedWindow" />
      <scope classrefs="Widget PanedWindow" doc="Ttk Panedwindow widget displays a number of subwindows, stacked either vertically or horizontally." ilk="class" line="956" lineend="1010" name="Panedwindow">
        <scope doc="If newpos is specified, sets the position of sash number index." ilk="function" line="1002" lineend="1010" name="sashpos" returns="self.tk.call()" signature="sashpos(index, newpos=None)">
          <variable citdl="Panedwindow" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="newpos" />
        </scope>
        <scope doc="Inserts a pane at the specified positions." ilk="function" line="981" lineend="987" name="insert" signature="insert(pos, child, **kw)">
          <variable citdl="Panedwindow" ilk="argument" name="self" />
          <variable ilk="argument" name="pos" />
          <variable ilk="argument" name="child" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Query or modify the options of the specified pane." ilk="function" line="990" lineend="999" name="pane" returns="_val_or_dict()" signature="pane(pane, option=None, **kw)">
          <variable citdl="Panedwindow" ilk="argument" name="self" />
          <variable ilk="argument" name="pane" />
          <variable ilk="argument" name="option" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a Ttk Panedwindow with parent master." ilk="function" line="960" lineend="975" name="__init__" signature="Panedwindow(master=None, **kw)">
          <variable citdl="Panedwindow" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <variable citdl="tkinter.PanedWindow.forget" line="978" name="forget" />
      </scope>
      <scope classrefs="Widget" doc="Ttk Progressbar widget shows the status of a long-running operation. They can operate in two modes: determinate mode shows the amount completed relative to the total amount of work to be done, and" ilk="class" line="1015" lineend="1054" name="Progressbar">
        <scope doc="Begin autoincrement mode: schedules a recurring timer event that calls method step every interval milliseconds." ilk="function" line="1036" lineend="1041" name="start" signature="start(interval=None)">
          <variable citdl="Progressbar" ilk="argument" name="self" />
          <variable ilk="argument" name="interval" />
        </scope>
        <scope doc="Increments the value option by amount." ilk="function" line="1044" lineend="1048" name="step" signature="step(amount=None)">
          <variable citdl="Progressbar" ilk="argument" name="self" />
          <variable ilk="argument" name="amount" />
        </scope>
        <scope doc="Stop autoincrement mode: cancels any recurring timer event initiated by start." ilk="function" line="1051" lineend="1054" name="stop" signature="stop()">
          <variable citdl="Progressbar" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a Ttk Progressbar with parent master." ilk="function" line="1022" lineend="1033" name="__init__" signature="Progressbar(master=None, **kw)">
          <variable citdl="Progressbar" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Ttk Radiobutton widgets are used in groups to show or change a set of mutually-exclusive options." ilk="class" line="1057" lineend="1082" name="Radiobutton">
        <scope doc="Sets the option variable to the option value, selects the widget, and invokes the associated command." ilk="function" line="1076" lineend="1082" name="invoke" returns="self.tk.call()" signature="invoke()">
          <variable citdl="Radiobutton" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a Ttk Radiobutton with parent master." ilk="function" line="1061" lineend="1073" name="__init__" signature="Radiobutton(master=None, **kw)">
          <variable citdl="Radiobutton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget Scale" doc="Ttk Scale widget is typically used to control the numeric value of a linked variable that varies uniformly over some range." ilk="class" line="1085" lineend="1121" name="Scale">
        <scope doc="Modify or query scale options." ilk="function" line="1103" lineend="1112" name="configure" signature="configure(cnf=None, **kw)">
          <variable citdl="Scale" ilk="argument" name="self" />
          <variable ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a Ttk Scale with parent master." ilk="function" line="1089" lineend="1100" name="__init__" signature="Scale(master=None, **kw)">
          <variable citdl="Scale" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Get the current value of the value option, or the value corresponding to the coordinates x, y if they are specified." ilk="function" line="1115" lineend="1121" name="get" returns="self.tk.call()" signature="get(x=None, y=None)">
          <variable citdl="Scale" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
      </scope>
      <scope classrefs="Widget Scrollbar" doc="Ttk Scrollbar controls the viewport of a scrollable widget." ilk="class" line="1124" lineend="1138" name="Scrollbar">
        <scope attributes="__ctor__" doc="Construct a Ttk Scrollbar with parent master." ilk="function" line="1127" lineend="1138" name="__init__" signature="Scrollbar(master=None, **kw)">
          <variable citdl="Scrollbar" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Ttk Separator widget displays a horizontal or vertical separator bar." ilk="class" line="1141" lineend="1156" name="Separator">
        <scope attributes="__ctor__" doc="Construct a Ttk Separator with parent master." ilk="function" line="1145" lineend="1156" name="__init__" signature="Separator(master=None, **kw)">
          <variable citdl="Separator" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Ttk Sizegrip allows the user to resize the containing toplevel window by pressing and dragging the grip." ilk="class" line="1159" lineend="1170" name="Sizegrip">
        <scope attributes="__ctor__" doc="Construct a Ttk Sizegrip with parent master." ilk="function" line="1163" lineend="1170" name="__init__" signature="Sizegrip(master=None, **kw)">
          <variable citdl="Sizegrip" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Manipulate style database." ilk="class" line="369" lineend="530" name="Style">
        <scope doc="Query or sets dynamic values of the specified option(s) in style." ilk="function" line="396" lineend="409" name="map" returns="_list_from_statespec()" signature="map(style, query_opt=None, **kw)">
          <variable citdl="Style" ilk="argument" name="self" />
          <variable ilk="argument" name="style" />
          <variable ilk="argument" name="query_opt" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Creates a new theme." ilk="function" line="484" lineend="498" name="theme_create" signature="theme_create(themename, parent=None, settings=None)">
          <variable citdl="Style" ilk="argument" name="self" />
          <variable ilk="argument" name="themename" />
          <variable ilk="argument" name="parent" />
          <variable ilk="argument" name="settings" />
          <variable line="491" name="script" />
        </scope>
        <scope doc="Define the widget layout for given style." ilk="function" line="424" lineend="464" name="layout" returns="_list_from_layouttuple()" signature="layout(style, layoutspec=None)">
          <variable citdl="Style" ilk="argument" name="self" />
          <variable ilk="argument" name="style" />
          <variable ilk="argument" name="layoutspec" />
          <variable citdl="str" line="456" name="lspec" />
        </scope>
        <scope doc="Query or sets the default value of the specified option(s) in style." ilk="function" line="385" lineend="393" name="configure" returns="_val_or_dict()" signature="configure(style, query_opt=None, **kw)">
          <variable citdl="Style" ilk="argument" name="self" />
          <variable ilk="argument" name="style" />
          <variable ilk="argument" name="query_opt" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Create a new element in the current theme of given etype." ilk="function" line="467" lineend="471" name="element_create" signature="element_create(elementname, etype, *args, **kw)">
          <variable citdl="Style" ilk="argument" name="self" />
          <variable ilk="argument" name="elementname" />
          <variable ilk="argument" name="etype" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Returns the list of elements defined in the current theme." ilk="function" line="474" lineend="476" name="element_names" returns="self.tk.call()" signature="element_names()">
          <variable citdl="Style" ilk="argument" name="self" />
        </scope>
        <scope doc="If themename is None, returns the theme in use, otherwise, set the current theme to themename, refreshes all widgets and emits a &lt;&lt;ThemeChanged&gt;&gt; event." ilk="function" line="518" lineend="530" name="theme_use" returns="self.tk.eval()" signature="theme_use(themename=None)">
          <variable citdl="Style" ilk="argument" name="self" />
          <variable ilk="argument" name="themename" />
        </scope>
        <scope doc="Temporarily sets the current theme to themename, apply specified settings and then restore the previous theme." ilk="function" line="501" lineend="510" name="theme_settings" signature="theme_settings(themename, settings)">
          <variable citdl="Style" ilk="argument" name="self" />
          <variable ilk="argument" name="themename" />
          <variable ilk="argument" name="settings" />
          <variable citdl="_script_from_settings()" line="509" name="script" />
        </scope>
        <variable attributes="protected" citdl="str" line="372" name="_name" />
        <scope doc="Return the list of elementname&apos;s options." ilk="function" line="479" lineend="481" name="element_options" returns="self.tk.call()" signature="element_options(elementname)">
          <variable citdl="Style" ilk="argument" name="self" />
          <variable ilk="argument" name="elementname" />
        </scope>
        <variable attributes="__instancevar__" citdl="setup_master()" line="381" name="master" />
        <variable attributes="__instancevar__" citdl="self.master.tk" line="382" name="tk" />
        <scope doc="Returns the value specified for option in style." ilk="function" line="412" lineend="421" name="lookup" returns="self.tk.call()" signature="lookup(style, option, state=None, default=None)">
          <variable citdl="Style" ilk="argument" name="self" />
          <variable ilk="argument" name="style" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="state" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="374" lineend="382" name="__init__" signature="Style(master=None)">
          <variable citdl="Style" ilk="argument" name="self" />
          <variable citdl="setup_master()" ilk="argument" name="master" />
        </scope>
        <scope doc="Returns a list of all known themes." ilk="function" line="513" lineend="515" name="theme_names" returns="self.tk.call()" signature="theme_names()">
          <variable citdl="Style" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Ttk Treeview widget displays a hierarchical collection of items.  Each item has a textual label, an optional image, and an optional list" ilk="class" line="1173" lineend="1490" name="Treeview">
        <scope doc="Replaces item&apos;s child with newchildren." ilk="function" line="1220" lineend="1226" name="set_children" signature="set_children(item, *newchildren)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable attributes="varargs" ilk="argument" name="newchildren" />
        </scope>
        <scope doc="If selop is not specified, returns selected items." ilk="function" line="1417" lineend="1419" name="selection" returns="self.tk.call()" signature="selection(selop=None, items=None)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="selop" />
          <variable ilk="argument" name="items" />
        </scope>
        <scope doc="Query or modify horizontal position of the treeview." ilk="function" line="1483" lineend="1485" name="xview" returns="self.tk.call()" signature="xview(*args)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Returns True if the specified item is present in the three, False otherwise." ilk="function" line="1255" lineend="1258" name="exists" returns="bool()" signature="exists(item)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope doc="Moves item to position index in parent&apos;s list of children." ilk="function" line="1378" lineend="1385" name="move" signature="move(item, parent, index)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="parent" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope doc="Query or modify the options for the specified tagname." ilk="function" line="1461" lineend="1471" name="tag_configure" returns="_val_or_dict()" signature="tag_configure(tagname, option=None, **kw)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="tagname" />
          <variable ilk="argument" name="option" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="If item is specified, sets the focus item to item." ilk="function" line="1261" lineend="1264" name="focus" returns="self.tk.call()" signature="focus(item=None)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope doc="Returns the element at position x, y." ilk="function" line="1330" lineend="1334" name="identify_element" returns="Treeview.identify()" signature="identify_element(x, y)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope doc="Ensure that item is visible." ilk="function" line="1408" lineend="1414" name="see" signature="see(item)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope doc="With one argument, returns a dictionary of column/value pairs for the specified item." ilk="function" line="1442" lineend="1451" name="set" returns="self.tk.call()" signature="set(item, column=None, value=None)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="column" />
          <variable ilk="argument" name="value" />
          <variable citdl="self.tk.call()" line="1447" name="res" />
        </scope>
        <scope doc="Returns a description of the specified component under the point given by x and y, or the empty string if no such component is present at that position." ilk="function" line="1299" lineend="1303" name="identify" returns="self.tk.call()" signature="identify(component, x, y)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="component" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope doc="Returns the data column identifier of the cell at position x." ilk="function" line="1311" lineend="1315" name="identify_column" returns="Treeview.identify()" signature="identify_column(x)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <scope doc="Add items to the selection." ilk="function" line="1427" lineend="1429" name="selection_add" signature="selection_add(items)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="items" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a Ttk Treeview with parent master." ilk="function" line="1180" lineend="1200" name="__init__" signature="Treeview(master=None, **kw)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Returns the integer index of item within its parent&apos;s list of children." ilk="function" line="1337" lineend="1340" name="index" returns="self.tk.call()" signature="index(item)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope doc="Remove items from the selection." ilk="function" line="1432" lineend="1434" name="selection_remove" signature="selection_remove(items)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="items" />
        </scope>
        <scope doc="items becomes the new selection." ilk="function" line="1422" lineend="1424" name="selection_set" signature="selection_set(items)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="items" />
        </scope>
        <scope doc="Bind a callback for the given event sequence to the tag tagname." ilk="function" line="1454" lineend="1458" name="tag_bind" signature="tag_bind(tagname, sequence=None, callback=None)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="tagname" />
          <variable ilk="argument" name="sequence" />
          <variable ilk="argument" name="callback" />
        </scope>
        <scope doc="Toggle the selection state of each item in items." ilk="function" line="1437" lineend="1439" name="selection_toggle" signature="selection_toggle(items)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="items" />
        </scope>
        <scope doc="Returns a tuple of children belonging to item." ilk="function" line="1213" lineend="1217" name="get_children" returns="tuple" signature="get_children(item=None)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope doc="Query or modify vertical position of the treeview." ilk="function" line="1488" lineend="1490" name="yview" returns="self.tk.call()" signature="yview(*args)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Returns the item ID of the item at position y." ilk="function" line="1306" lineend="1308" name="identify_row" returns="Treeview.identify()" signature="identify_row(y)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope doc="Returns the identifier of item&apos;s previous sibling, or &apos;&apos; if item is the first child of its parent." ilk="function" line="1402" lineend="1405" name="prev" returns="self.tk.call()" signature="prev(item)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <variable citdl="Treeview.move" line="1387" name="reattach" />
        <scope doc="Returns the ID of the parent of item, or &apos;&apos; if item is at the top level of the hierarchy." ilk="function" line="1396" lineend="1399" name="parent" returns="self.tk.call()" signature="parent(item)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope doc="Returns the identifier of item&apos;s next sibling, or &apos;&apos; if item is the last child of its parent." ilk="function" line="1390" lineend="1393" name="next" returns="self.tk.call()" signature="next(item)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope doc="Returns the bounding box (relative to the treeview widget&apos;s window) of the specified item in the form x y width height." ilk="function" line="1203" lineend="1210" name="bbox" returns="self.tk.call()" signature="bbox(item, column=None)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="column" />
        </scope>
        <scope doc="Unlinks all of the specified items from the tree." ilk="function" line="1246" lineend="1252" name="detach" signature="detach(*items)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="items" />
        </scope>
        <scope doc="Returns one of:" ilk="function" line="1318" lineend="1327" name="identify_region" returns="Treeview.identify()" signature="identify_region(x, y)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope doc="If item is specified, returns 1 or 0 depending on whether the specified item has the given tagname." ilk="function" line="1474" lineend="1480" name="tag_has" returns="self.tk.call()" signature="tag_has(tagname, item=None)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="tagname" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope doc="Creates a new item and return the item identifier of the newly created item." ilk="function" line="1343" lineend="1363" name="insert" returns="self.tk.call()" signature="insert(parent, index, iid=None, **kw)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="parent" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="iid" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="_format_optdict()" line="1356" name="opts" />
          <variable citdl="self.tk.call()" line="1358" name="res" />
        </scope>
        <scope doc="Query or modify the options for the specified column." ilk="function" line="1229" lineend="1237" name="column" returns="_val_or_dict()" signature="column(column, option=None, **kw)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="column" />
          <variable ilk="argument" name="option" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Query or modify the options for the specified item." ilk="function" line="1366" lineend="1375" name="item" returns="_val_or_dict()" signature="item(item, option=None, **kw)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="option" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Query or modify the heading options for the specified column." ilk="function" line="1267" lineend="1296" name="heading" returns="_val_or_dict()" signature="heading(column, option=None, **kw)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable ilk="argument" name="column" />
          <variable ilk="argument" name="option" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="kw.get()" line="1288" name="cmd" />
        </scope>
        <scope doc="Delete all specified items and all their descendants." ilk="function" line="1240" lineend="1243" name="delete" signature="delete(*items)">
          <variable citdl="Treeview" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="items" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Base class for Tk themed widgets." ilk="class" line="533" lineend="595" name="Widget">
        <scope doc="Modify or inquire widget state." ilk="function" line="585" lineend="595" name="state" returns="self.tk.splitlist()" signature="state(statespec=None)">
          <variable citdl="Widget" ilk="argument" name="self" />
          <variable citdl="str.join()" ilk="argument" name="statespec" />
        </scope>
        <scope doc="Returns the name of the element at position x, y, or the empty string if the point does not lie within any element." ilk="function" line="563" lineend="568" name="identify" returns="self.tk.call()" signature="identify(x, y)">
          <variable citdl="Widget" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope attributes="__ctor__" doc="Constructs a Ttk Widget with the parent master." ilk="function" line="536" lineend="560" name="__init__" signature="Widget(master, widgetname, kw=None)">
          <variable citdl="Widget" ilk="argument" name="self" />
          <variable citdl="setup_master()" ilk="argument" name="master" />
          <variable ilk="argument" name="widgetname" />
          <variable ilk="argument" name="kw" />
        </scope>
        <scope doc="Test the widget&apos;s state." ilk="function" line="571" lineend="582" name="instate" returns="bool()" signature="instate(statespec, callback=None, *args, **kw)">
          <variable citdl="Widget" ilk="argument" name="self" />
          <variable ilk="argument" name="statespec" />
          <variable ilk="argument" name="callback" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="self.tk.call()" line="578" name="ret" />
        </scope>
      </scope>
      <variable citdl="list" line="19" name="__all__" />
      <variable citdl="str" line="17" name="__author__" />
      <variable citdl="str" line="15" name="__version__" />
      <scope doc="If master is not None, itself is returned." ilk="function" line="352" lineend="366" name="setup_master" returns="tkinter.Tk()" signature="setup_master(master=None)">
        <variable citdl="tkinter._default_root" ilk="argument" name="master" />
      </scope>
      <scope doc="Returns adict with its values converted from Tcl objects to Python objects." ilk="function" line="335" lineend="350" name="tclobjs_to_py" signature="tclobjs_to_py(adict)">
        <variable ilk="argument" name="adict" />
        <variable citdl="list()" line="341" name="val" />
      </scope>
      <import module="tkinter" />
      <scope attributes="protected __hidden__" doc="Construct a list from the given statespec tuple according to the accepted statespec accepted by _format_mapdict." ilk="function" line="265" lineend="280" name="_list_from_statespec" returns="list" signature="_list_from_statespec(stuple)">
        <variable ilk="argument" name="stuple" />
        <variable citdl="list" line="268" name="nval" />
        <variable citdl="getattr()" line="270" name="typename" />
        <variable citdl="str()" line="274" name="val" />
        <variable citdl="iter()" line="279" name="it" />
      </scope>
      <scope attributes="protected __hidden__" doc="Formats a layout list so we can pass the result to ttk::style layout and ttk::style settings." ilk="function" line="159" lineend="206" name="_format_layoutlist" returns="tuple" signature="_format_layoutlist(layout, indent=0, indent_size=2)">
        <variable ilk="argument" name="layout" />
        <variable citdl="int" ilk="argument" name="indent" />
        <variable citdl="int" ilk="argument" name="indent_size" />
        <variable citdl="list" line="187" name="script" />
        <variable citdl="dict" line="191" name="opts" />
        <variable citdl="str.join()" line="192" name="fopts" />
        <variable citdl="str" line="193" name="head" />
      </scope>
      <variable attributes="protected __hidden__" line="33" name="_REQUIRE_TILE" />
      <scope attributes="protected __hidden__" doc="Converts a value to, hopefully, a more appropriate Python object." ilk="function" line="325" lineend="333" name="_convert_stringval" returns="int()" signature="_convert_stringval(value)">
        <variable citdl="str()" ilk="argument" name="value" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="35" lineend="48" name="_load_tile" signature="_load_tile(master)">
        <import line="37" module="os" />
        <variable ilk="argument" name="master" />
        <variable citdl="os.environ.get()" line="38" name="tilelib" />
      </scope>
      <scope attributes="protected __hidden__" doc="Construct a list from the tuple returned by ttk::layout, this is somewhat the reverse of _format_layoutlist." ilk="function" line="282" lineend="307" name="_list_from_layouttuple" returns="list" signature="_list_from_layouttuple(ltuple)">
        <variable ilk="argument" name="ltuple" />
        <variable citdl="list" line="285" name="res" />
        <variable citdl="int" line="287" name="indx" />
        <variable line="289" name="name" />
        <variable citdl="dict" line="290" name="opts" />
        <variable citdl="list" line="299" name="opt" />
        <variable citdl="()" line="303" name="val" />
      </scope>
      <variable attributes="protected __hidden__" citdl="tkinter._flatten" line="30" name="_flatten" />
      <scope attributes="protected __hidden__" doc="Break tuple in pairs, format it properly, then build the return dict." ilk="function" line="250" lineend="263" name="_dict_from_tcltuple" returns="tclobjs_to_py()" signature="_dict_from_tcltuple(ttuple, cut_minus=True)">
        <variable ilk="argument" name="ttuple" />
        <variable citdl="True" ilk="argument" name="cut_minus" />
        <variable line="256" name="opt_start" />
        <variable citdl="dict" line="258" name="retdict" />
        <variable citdl="iter()" line="259" name="it" />
      </scope>
      <scope attributes="protected __hidden__" doc="Formats mapdict to pass it to tk.call." ilk="function" line="84" lineend="120" name="_format_mapdict" returns="_flatten()" signature="_format_mapdict(mapdict, script=False)">
        <variable ilk="argument" name="mapdict" />
        <variable citdl="False" ilk="argument" name="script" />
        <variable line="95" name="format" />
        <variable citdl="list" line="97" name="opts" />
        <variable citdl="list" line="100" name="opt_val" />
        <variable citdl="str" line="104" name="state" />
        <variable citdl="str.join()" line="104" name="val" />
      </scope>
      <scope attributes="protected __hidden__" doc="Formats optdict to a tuple to pass it to tk.call." ilk="function" line="50" lineend="82" name="_format_optdict" returns="_flatten()" signature="_format_optdict(optdict, script=False, ignore=None)">
        <variable ilk="argument" name="optdict" />
        <variable citdl="False" ilk="argument" name="script" />
        <variable ilk="argument" name="ignore" />
        <variable line="56" name="format" />
        <variable citdl="list" line="58" name="opts" />
        <variable citdl="list" line="64" name="v" />
        <variable citdl="str.join()" line="73" name="value" />
      </scope>
      <scope attributes="protected __hidden__" doc="Formats args and kw according to the given element factory etype." ilk="function" line="122" lineend="157" name="_format_elemcreate" returns="tuple" signature="_format_elemcreate(etype, script=False, *args, **kw)">
        <variable ilk="argument" name="etype" />
        <variable citdl="False" ilk="argument" name="script" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable citdl="str" line="124" name="spec" />
        <variable citdl="tuple" line="125" name="opts" />
        <variable line="129" name="iname" />
        <variable line="132" name="imagespec" />
        <variable line="141" name="statemap" />
      </scope>
      <scope attributes="protected __hidden__" doc="Returns an appropriate script, based on settings, according to theme_settings definition to be used by theme_settings and theme_create." ilk="function" line="208" lineend="248" name="_script_from_settings" returns="str.join()" signature="_script_from_settings(settings)">
        <variable ilk="argument" name="settings" />
        <variable citdl="list" line="212" name="script" />
        <variable citdl="str.join()" line="218" name="s" />
        <variable line="233" name="eopts" />
        <variable line="234" name="etype" />
        <variable citdl="int" line="237" name="argc" />
        <variable citdl="list" line="241" name="elemargs" />
        <variable line="242" name="elemkw" />
      </scope>
      <scope attributes="protected __hidden__" doc="Format options then call func with args and options and return the appropriate result." ilk="function" line="309" lineend="323" name="_val_or_dict" returns="func()" signature="_val_or_dict(options, func, *args)">
        <variable citdl="_format_optdict()" ilk="argument" name="options" />
        <variable ilk="argument" name="func" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable citdl="func()" line="318" name="res" />
      </scope>
    </scope>
    <scope doc="Weak reference support for Python.  This module is an implementation of PEP 205:" ilk="blob" lang="Python3" name="weakref">
      <scope classrefs="object" ilk="class" name="CallableProxyType" />
      <scope classrefs="weakref" doc="Specialized reference that includes a key corresponding to the value.  This is used in the WeakValueDictionary to avoid having to create" ilk="class" line="225" lineend="243" name="KeyedRef">
        <variable citdl="tuple" line="235" name="__slots__" />
        <scope ilk="function" line="237" lineend="240" name="__new__" returns="ref.__new__()" signature="__new__(ob, callback, key)">
          <variable citdl="KeyedRef" ilk="argument" name="type" />
          <variable ilk="argument" name="ob" />
          <variable ilk="argument" name="callback" />
          <variable ilk="argument" name="key" />
          <variable citdl="ref.__new__()" line="238" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="242" lineend="243" name="__init__" signature="KeyedRef(ob, callback, key)">
          <variable citdl="KeyedRef" ilk="argument" name="self" />
          <variable ilk="argument" name="ob" />
          <variable ilk="argument" name="callback" />
          <variable ilk="argument" name="key" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" name="ProxyType" />
      <variable citdl="tuple" line="25" name="ProxyTypes" />
      <scope classrefs="object" ilk="class" name="ReferenceType" />
      <scope classrefs="MutableMapping" doc="Mapping class that references keys weakly.  Entries in the dictionary will be discarded when there is no" ilk="class" line="246" lineend="385" name="WeakKeyDictionary">
        <variable attributes="protected __instancevar__" citdl="set()" line="269" name="_iterating" />
        <scope ilk="function" line="371" lineend="372" name="pop" returns="self.data.pop()" signature="pop(key, *args)">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="268" name="_pending_removals" />
        <scope doc="Return a list of weak references to the keys." ilk="function" line="352" lineend="362" name="keyrefs" returns="list()" signature="keyrefs()">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="257" lineend="271" name="__init__" signature="WeakKeyDictionary(dict=None)">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="dict" />
          <scope ilk="function" line="259" lineend="265" name="remove" signature="remove(k, selfref=ref(self))">
            <variable ilk="argument" name="k" />
            <variable citdl="ref()" ilk="argument" name="selfref" />
            <variable citdl="selfref()" line="260" name="self" />
          </scope>
        </scope>
        <scope attributes="protected" ilk="function" line="273" lineend="284" name="_commit_removals" signature="_commit_removals()">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable citdl="list" line="278" name="l" />
          <variable citdl="dict" line="279" name="d" />
        </scope>
        <scope ilk="function" line="323" lineend="328" name="__contains__" returns="bool" signature="__contains__(key)">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="ref()" line="325" name="wr" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="WeakKeyDictionary.__init__.remove" line="266" name="_remove" />
        <scope ilk="function" line="292" lineend="293" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="289" lineend="290" name="__getitem__" signature="__getitem__(key)">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="320" lineend="321" name="get" returns="self.data.get()" signature="get(key, default=None)">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope ilk="function" line="337" lineend="342" name="keys" signature="keys()">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable citdl="wr()" line="340" name="obj" />
        </scope>
        <scope ilk="function" line="311" lineend="318" name="__deepcopy__" returns="self.__class__()" signature="__deepcopy__(memo)">
          <import line="312" module="copy" symbol="deepcopy" />
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="memo" />
          <variable citdl="self.__class__()" line="313" name="new" />
          <variable citdl="key()" line="315" name="o" />
        </scope>
        <scope ilk="function" line="377" lineend="385" name="update" signature="update(dict=None, **kwargs)">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable citdl="type()()" ilk="argument" name="dict" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="dict" line="378" name="d" />
        </scope>
        <variable citdl="WeakKeyDictionary.keys" line="344" name="__iter__" />
        <scope ilk="function" line="364" lineend="369" name="popitem" returns="tuple" signature="popitem()">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable citdl="key()" line="367" name="o" />
        </scope>
        <scope ilk="function" line="301" lineend="307" name="copy" signature="copy()">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable citdl="" line="302" name="new" />
          <variable citdl="key()" line="304" name="o" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="258" name="data" />
        <scope ilk="function" line="286" lineend="287" name="__delitem__" signature="__delitem__(key)">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="374" lineend="375" name="setdefault" returns="self.data.setdefault()" signature="setdefault(key, default=None)">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope ilk="function" line="330" lineend="335" name="items" signature="items()">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable citdl="wr()" line="333" name="key" />
        </scope>
        <scope ilk="function" line="298" lineend="299" name="__setitem__" signature="__setitem__(key, value)">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="346" lineend="350" name="values" signature="values()">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="295" lineend="296" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="WeakKeyDictionary" ilk="argument" name="self" />
        </scope>
        <variable citdl="WeakKeyDictionary.copy" line="309" name="__copy__" />
      </scope>
      <scope classrefs="object" ilk="class" name="WeakSet" />
      <scope classrefs="MutableMapping" doc="Mapping class that references values weakly.  Entries in the dictionary will be discarded when no strong" ilk="class" line="33" lineend="222" name="WeakValueDictionary">
        <variable attributes="protected __instancevar__" citdl="set()" line="56" name="_iterating" />
        <scope doc="Return an iterator that yields the weak references to the values." ilk="function" line="145" lineend="157" name="itervaluerefs" signature="itervaluerefs()">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="55" name="_pending_removals" />
        <scope attributes="__ctor__" ilk="function" line="45" lineend="58" name="__init__" signature="WeakValueDictionary(*args, **kw)">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <scope ilk="function" line="46" lineend="52" name="remove" signature="remove(wr, selfref=ref(self))">
            <variable ilk="argument" name="wr" />
            <variable citdl="ref()" ilk="argument" name="selfref" />
            <variable citdl="selfref()" line="47" name="self" />
          </scope>
        </scope>
        <scope attributes="protected" ilk="function" line="60" lineend="66" name="_commit_removals" signature="_commit_removals()">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable citdl="list" line="61" name="l" />
          <variable citdl="dict" line="62" name="d" />
        </scope>
        <scope ilk="function" line="83" lineend="88" name="__contains__" returns="bool" signature="__contains__(key)">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable line="85" name="o" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="WeakValueDictionary.__init__.remove" line="53" name="_remove" />
        <scope ilk="function" line="80" lineend="81" name="__len__" returns="sum()" signature="__len__()">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="68" lineend="73" name="__getitem__" signature="__getitem__(key)">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable line="69" name="o" />
        </scope>
        <scope ilk="function" line="117" lineend="128" name="get" returns="wr()" signature="get(key, default=None)">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
          <variable line="119" name="wr" />
          <variable citdl="wr()" line="123" name="o" />
        </scope>
        <scope ilk="function" line="137" lineend="141" name="keys" signature="keys()">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="108" lineend="115" name="__deepcopy__" returns="self.__class__()" signature="__deepcopy__(memo)">
          <import line="109" module="copy" symbol="deepcopy" />
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="memo" />
          <variable citdl="self.__class__()" line="110" name="new" />
          <variable citdl="wr()" line="112" name="o" />
        </scope>
        <scope doc="Return a list of weak references to the values." ilk="function" line="212" lineend="222" name="valuerefs" returns="list()" signature="valuerefs()">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="200" lineend="210" name="update" signature="update(dict=None, **kwargs)">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable citdl="type()()" ilk="argument" name="dict" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="dict" line="203" name="d" />
        </scope>
        <variable citdl="WeakValueDictionary.keys" line="143" name="__iter__" />
        <scope ilk="function" line="175" lineend="187" name="pop" returns="self.data.pop()()" signature="pop(key, *args)">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="self.data.pop()()" line="179" name="o" />
        </scope>
        <scope ilk="function" line="166" lineend="173" name="popitem" returns="tuple" signature="popitem()">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable citdl="wr()" line="171" name="o" />
        </scope>
        <scope ilk="function" line="98" lineend="104" name="copy" signature="copy()">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable citdl="" line="99" name="new" />
          <variable citdl="wr()" line="101" name="o" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="57" name="data" />
        <scope ilk="function" line="75" lineend="78" name="__delitem__" signature="__delitem__(key)">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="189" lineend="198" name="setdefault" returns="WeakValueDictionary.setdefault.wr()" signature="setdefault(key, default=None)">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
          <variable line="191" name="wr" />
        </scope>
        <scope ilk="function" line="130" lineend="135" name="items" signature="items()">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable citdl="wr()" line="133" name="v" />
        </scope>
        <scope ilk="function" line="93" lineend="96" name="__setitem__" signature="__setitem__(key, value)">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="159" lineend="164" name="values" signature="values()">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
          <variable citdl="wr()" line="162" name="obj" />
        </scope>
        <scope ilk="function" line="90" lineend="91" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="WeakValueDictionary" ilk="argument" name="self" />
        </scope>
        <variable citdl="WeakValueDictionary.copy" line="106" name="__copy__" />
      </scope>
      <variable citdl="list" line="27" name="__all__" />
      <import module="collections" />
      <scope doc="return the number of weak references" ilk="function" name="getweakrefcount" signature="getweakrefcount(object)" />
      <scope doc="return a list of all weak reference objects" ilk="function" name="getweakrefs" signature="getweakrefs(object)" />
      <scope doc="create a proxy object that weakly" ilk="function" name="proxy" signature="proxy(object[, callback])" />
      <scope classrefs="object" ilk="class" name="ref" />
    </scope>
    <scope doc="Module doctest -- a framework for running examples in docstrings.  In simplest use, end each module M to be tested with:" ilk="blob" lang="Python3" name="doctest">
      <variable citdl="str" line="155" name="BLANKLINE_MARKER" />
      <variable citdl="int" line="137" name="COMPARISON_FLAGS" />
      <variable citdl="int" line="131" name="DONT_ACCEPT_BLANKLINE" />
      <variable citdl="int" line="130" name="DONT_ACCEPT_TRUE_FOR_1" />
      <scope classrefs="DocTestRunner" doc="Run doc tests but raise an exception as soon as there is a failure.  If an unexpected exception occurs, an UnexpectedException is raised." ilk="class" line="1652" lineend="1753" name="DebugRunner">
        <scope ilk="function" line="1749" lineend="1750" name="report_unexpected_exception" signature="report_unexpected_exception(out, test, example, exc_info)">
          <variable citdl="DebugRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="out" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="example" />
          <variable ilk="argument" name="exc_info" />
        </scope>
        <scope ilk="function" line="1752" lineend="1753" name="report_failure" signature="report_failure(out, test, example, got)">
          <variable citdl="DebugRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="out" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="example" />
          <variable ilk="argument" name="got" />
        </scope>
        <scope ilk="function" line="1743" lineend="1747" name="run" returns="DocTestRunner.run()" signature="run(test, compileflags=None, out=None, clear_globs=True)">
          <variable citdl="DebugRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="compileflags" />
          <variable ilk="argument" name="out" />
          <variable citdl="True" ilk="argument" name="clear_globs" />
          <variable citdl="DocTestRunner.run()" line="1744" name="r" />
        </scope>
      </scope>
      <scope classrefs="DocTestCase" ilk="class" line="2263" lineend="2274" name="DocFileCase">
        <variable citdl="DocFileCase.__repr__" line="2270" name="__str__" />
        <scope ilk="function" line="2272" lineend="2274" name="format_failure" returns="tuple" signature="format_failure(err)">
          <variable citdl="DocFileCase" ilk="argument" name="self" />
          <variable ilk="argument" name="err" />
        </scope>
        <scope ilk="function" line="2265" lineend="2266" name="id" returns="str.join()" signature="id()">
          <variable citdl="DocFileCase" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2268" lineend="2269" name="__repr__" returns="self._dt_test.filename" signature="__repr__()">
          <variable citdl="DocFileCase" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope doc="A unittest suite for one or more doctest files." ilk="function" line="2303" lineend="2370" name="DocFileSuite" returns="unittest.TestSuite()" signature="DocFileSuite(*paths, **kw)">
        <variable attributes="varargs" ilk="argument" name="paths" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable citdl="unittest.TestSuite()" line="2359" name="suite" />
      </scope>
      <scope ilk="function" line="2277" lineend="2301" name="DocFileTest" returns="DocFileCase" signature="DocFileTest(path, module_relative=True, package=None, globs=None, parser=&lt;doctest.DocTestParser object at 0x0346B3F0&gt;, encoding=None, **options)">
        <variable citdl="True" ilk="argument" name="module_relative" />
        <variable citdl="os.path.basename()" line="2297" name="name" />
        <variable ilk="argument" name="encoding" />
        <variable citdl="DocTestParser" ilk="argument" name="parser" />
        <variable ilk="argument" name="package" />
        <variable citdl="parser.get_doctest()" line="2300" name="test" />
        <variable ilk="argument" name="path" />
        <variable citdl="globs.copy()" ilk="argument" name="globs" />
        <variable attributes="kwargs" ilk="argument" name="options" />
      </scope>
      <scope classrefs="object" doc="A collection of doctest examples that should be run in a single namespace.  Each `DocTest` defines the following attributes: " ilk="class" line="434" lineend="489" name="DocTest">
        <scope ilk="function" line="472" lineend="480" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="DocTest" ilk="argument" name="self" />
          <variable citdl="str" line="474" name="examples" />
        </scope>
        <variable attributes="__instancevar__" line="468" name="name" />
        <variable attributes="__instancevar__" line="466" name="docstring" />
        <variable attributes="__instancevar__" line="469" name="filename" />
        <variable attributes="__instancevar__" line="465" name="examples" />
        <scope ilk="function" line="484" lineend="489" name="__lt__" returns="NotImplemented" signature="__lt__(other)">
          <variable citdl="DocTest" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="globs.copy()" line="467" name="globs" />
        <scope attributes="__ctor__" doc="Create a new DocTest containing the given examples." ilk="function" line="458" lineend="470" name="__init__" signature="DocTest(examples, globs, name, filename, lineno, docstring)">
          <variable citdl="DocTest" ilk="argument" name="self" />
          <variable ilk="argument" name="examples" />
          <variable ilk="argument" name="globs" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="lineno" />
          <variable ilk="argument" name="docstring" />
        </scope>
        <variable attributes="__instancevar__" line="470" name="lineno" />
      </scope>
      <scope classrefs="TestCase" ilk="class" line="2056" lineend="2200" name="DocTestCase">
        <variable attributes="protected __instancevar__" line="2063" name="_dt_checker" />
        <variable attributes="protected __instancevar__" line="2064" name="_dt_test" />
        <variable attributes="protected __instancevar__" line="2065" name="_dt_setUp" />
        <scope ilk="function" line="2068" lineend="2072" name="setUp" signature="setUp()">
          <variable citdl="DocTestCase" ilk="argument" name="self" />
          <variable line="2069" name="test" />
        </scope>
        <variable attributes="protected __instancevar__" line="2066" name="_dt_tearDown" />
        <scope ilk="function" line="2082" lineend="2104" name="runTest" signature="runTest()">
          <variable citdl="DocTestCase" ilk="argument" name="self" />
          <variable line="2083" name="test" />
          <variable citdl="sys.stdout" line="2084" name="old" />
          <variable citdl="StringIO()" line="2085" name="new" />
          <variable citdl="int" line="2086" name="optionflags" />
          <variable citdl="DocTestRunner" line="2093" name="runner" />
        </scope>
        <scope ilk="function" line="2074" lineend="2080" name="tearDown" signature="tearDown()">
          <variable citdl="DocTestCase" ilk="argument" name="self" />
          <variable line="2075" name="test" />
        </scope>
        <variable citdl="DocTestCase.__repr__" line="2197" name="__str__" />
        <scope ilk="function" line="2106" lineend="2115" name="format_failure" returns="tuple" signature="format_failure(err)">
          <variable citdl="DocTestCase" ilk="argument" name="self" />
          <variable ilk="argument" name="err" />
          <variable line="2107" name="test" />
          <variable citdl="str" line="2109" name="lineno" />
          <variable citdl="str.join()" line="2112" name="lname" />
        </scope>
        <scope ilk="function" line="2193" lineend="2195" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="DocTestCase" ilk="argument" name="self" />
          <variable citdl="self._dt_test.name.split()" line="2194" name="name" />
        </scope>
        <scope doc="Run the test case without results and without catching exceptions" ilk="function" line="2118" lineend="2188" name="debug" signature="debug()">
          <variable citdl="DocTestCase" ilk="argument" name="self" />
          <variable citdl="DebugRunner" line="2185" name="runner" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="2062" name="_dt_optionflags" />
        <scope ilk="function" line="2199" lineend="2200" name="shortDescription" returns="self._dt_test.name" signature="shortDescription()">
          <variable citdl="DocTestCase" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2190" lineend="2191" name="id" returns="self._dt_test.name" signature="id()">
          <variable citdl="DocTestCase" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="2058" lineend="2066" name="__init__" signature="DocTestCase(test, optionflags=0, setUp=None, tearDown=None, checker=None)">
          <variable citdl="DocTestCase" ilk="argument" name="self" />
          <variable ilk="argument" name="test" />
          <variable citdl="int" ilk="argument" name="optionflags" />
          <variable ilk="argument" name="setUp" />
          <variable ilk="argument" name="tearDown" />
          <variable ilk="argument" name="checker" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="A DocTest example has failed in debugging mode.  The exception instance has variables:" ilk="class" line="1614" lineend="1631" name="DocTestFailure">
        <variable attributes="__instancevar__" line="1626" name="test" />
        <variable attributes="__instancevar__" line="1628" name="got" />
        <scope ilk="function" line="1630" lineend="1631" name="__str__" returns="str()" signature="__str__()">
          <variable citdl="DocTestFailure" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="1627" name="example" />
        <scope attributes="__ctor__" ilk="function" line="1625" lineend="1628" name="__init__" signature="DocTestFailure(test, example, got)">
          <variable citdl="DocTestFailure" ilk="argument" name="self" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="example" />
          <variable ilk="argument" name="got" />
        </scope>
      </scope>
      <scope classrefs="object" doc="A class used to extract the DocTests that are relevant to a given object, from its docstring and the docstrings of its contained objects.  Doctests can currently be extracted from the following" ilk="class" line="730" lineend="1029" name="DocTestFinder">
        <variable attributes="protected __instancevar__" citdl="DocTestParser" line="756" name="_parser" />
        <scope attributes="protected" doc="Return a line number of the given object&apos;s docstring." ilk="function" line="983" lineend="1029" name="_find_lineno" returns="getattr()" signature="_find_lineno(obj, source_lines)">
          <variable citdl="DocTestFinder" ilk="argument" name="self" />
          <variable citdl="obj.tb_frame" ilk="argument" name="obj" />
          <variable ilk="argument" name="source_lines" />
          <variable citdl="int" line="988" name="lineno" />
          <variable citdl="re.compile()" line="1000" name="pat" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="759" name="_exclude_empty" />
        <scope attributes="protected" doc="Find tests for the given object and any contained objects, and add them to `tests`." ilk="function" line="883" lineend="944" name="_find" signature="_find(tests, obj, name, module, source_lines, globs, seen)">
          <variable citdl="DocTestFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="tests" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="module" />
          <variable ilk="argument" name="source_lines" />
          <variable ilk="argument" name="globs" />
          <variable ilk="argument" name="seen" />
          <variable citdl="self._get_test()" line="897" name="test" />
          <variable citdl="str" line="904" name="valname" />
          <variable citdl="getattr()" line="934" name="val" />
        </scope>
        <scope attributes="protected" doc="Return a DocTest for the given object, if it defines a docstring; otherwise, return None." ilk="function" line="946" lineend="981" name="_get_test" returns="self._parser.get_doctest()" signature="_get_test(obj, name, module, globs, source_lines)">
          <variable citdl="DocTestFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="module" />
          <variable ilk="argument" name="globs" />
          <variable ilk="argument" name="source_lines" />
          <variable citdl="str" line="954" name="docstring" />
          <variable citdl="self._find_lineno()" line="967" name="lineno" />
          <variable citdl="list" line="975" name="filename" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="758" name="_recurse" />
        <scope attributes="protected" doc="Return true if the given object is defined in the given module." ilk="function" line="863" lineend="881" name="_from_module" returns="bool" signature="_from_module(module, object)">
          <variable citdl="DocTestFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="module" />
          <variable ilk="argument" name="object" />
        </scope>
        <scope doc="Return a list of the DocTests that are defined by the given object&apos;s docstring, or by any of its contained objects&apos; docstrings." ilk="function" line="761" lineend="861" name="find" returns="list" signature="find(obj, name=None, module=None, globs=None, extraglobs=None)">
          <variable citdl="DocTestFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable citdl="getattr()" ilk="argument" name="name" />
          <variable citdl="inspect.getmodule()" ilk="argument" name="module" />
          <variable citdl="module.__dict__.copy()" ilk="argument" name="globs" />
          <variable ilk="argument" name="extraglobs" />
          <variable citdl="inspect.getsourcefile()" line="816" name="file" />
          <variable citdl="linecache.getlines()" line="818" name="source_lines" />
          <variable citdl="list" line="854" name="tests" />
        </scope>
        <scope attributes="__ctor__" doc="Create a new doctest finder." ilk="function" line="739" lineend="759" name="__init__" signature="DocTestFinder(verbose=False, parser=DocTestParser(), recurse=True, exclude_empty=True)">
          <variable citdl="DocTestFinder" ilk="argument" name="self" />
          <variable citdl="False" ilk="argument" name="verbose" />
          <variable citdl="DocTestParser" ilk="argument" name="parser" />
          <variable citdl="True" ilk="argument" name="recurse" />
          <variable citdl="True" ilk="argument" name="exclude_empty" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="757" name="_verbose" />
      </scope>
      <scope classrefs="object" doc="A class used to parse strings containing doctest examples." ilk="class" line="495" lineend="723" name="DocTestParser">
        <scope attributes="protected" doc="Return the minimum indentation of any non-blank line in `s`" ilk="function" line="692" lineend="698" name="_min_indent" returns="int" signature="_min_indent(s)">
          <variable citdl="DocTestParser" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <variable citdl="list" line="694" name="indents" />
        </scope>
        <scope doc="Extract all doctest examples from the given string, and collect them into a `DocTest` object." ilk="function" line="582" lineend="592" name="get_doctest" returns="DocTest" signature="get_doctest(string, globs, name, filename, lineno)">
          <variable citdl="DocTestParser" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
          <variable ilk="argument" name="globs" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="lineno" />
        </scope>
        <scope attributes="protected" doc="Given a regular expression match from `_EXAMPLE_RE` (`m`), return a pair `(source, want)`, where `source` is the matched example&apos;s source code (with prompts and indentation stripped); and `want` is the example&apos;s expected output (with indentation" ilk="function" line="608" lineend="650" name="_parse_example" returns="tuple" signature="_parse_example(m, name, lineno)">
          <variable citdl="DocTestParser" ilk="argument" name="self" />
          <variable citdl="self._EXCEPTION_RE.match()" ilk="argument" name="m" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="lineno" />
          <variable citdl="len()" line="620" name="indent" />
          <variable line="624" name="source_lines" />
          <variable citdl="str.join()" line="627" name="source" />
          <variable citdl="m.group()" line="632" name="want" />
          <variable citdl="want.split()" line="633" name="want_lines" />
          <variable citdl="m.group()" line="643" name="exc_msg" />
          <variable citdl="self._find_options()" line="648" name="options" />
        </scope>
        <scope attributes="protected" doc="Return a dictionary containing option overrides extracted from option directives in the given source string." ilk="function" line="662" lineend="686" name="_find_options" returns="dict" signature="_find_options(source, name, lineno)">
          <variable citdl="DocTestParser" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="lineno" />
          <variable citdl="dict" line="670" name="options" />
          <variable line="673" name="option_strings" />
          <variable line="680" name="flag" />
        </scope>
        <variable attributes="protected" citdl="re.compile()" line="690" name="_INDENT_RE" />
        <variable attributes="protected" citdl="re.compile()" line="504" name="_EXAMPLE_RE" />
        <scope doc="Divide the given string into examples and intervening text, and return them as a list of alternating Examples and strings." ilk="function" line="543" lineend="580" name="parse" returns="list" signature="parse(string, name=&apos;&lt;string&gt;&apos;)">
          <variable citdl="DocTestParser" ilk="argument" name="self" />
          <variable citdl="string.expandtabs()" ilk="argument" name="string" />
          <variable citdl="str" ilk="argument" name="name" />
          <variable citdl="self._min_indent()" line="553" name="min_indent" />
          <variable citdl="list" line="557" name="output" />
          <variable citdl="int" line="558" name="charno" />
          <variable citdl="int" line="558" name="lineno" />
        </scope>
        <scope doc="Extract all doctest examples from the given string, and return them as a list of `Example` objects." ilk="function" line="594" lineend="606" name="get_examples" returns="list" signature="get_examples(string, name=&apos;&lt;string&gt;&apos;)">
          <variable citdl="DocTestParser" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
          <variable citdl="str" ilk="argument" name="name" />
        </scope>
        <scope attributes="protected" doc="Given the lines of a source string (including prompts and leading indentation), check to make sure that every prompt is followed by a space character." ilk="function" line="700" lineend="712" name="_check_prompt_blank" signature="_check_prompt_blank(lines, indent, name, lineno)">
          <variable citdl="DocTestParser" ilk="argument" name="self" />
          <variable ilk="argument" name="lines" />
          <variable ilk="argument" name="indent" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="lineno" />
        </scope>
        <scope attributes="protected" doc="Check that every line in the given list starts with the given prefix; if any line does not, then raise a ValueError." ilk="function" line="714" lineend="723" name="_check_prefix" signature="_check_prefix(lines, prefix, name, lineno)">
          <variable citdl="DocTestParser" ilk="argument" name="self" />
          <variable ilk="argument" name="lines" />
          <variable ilk="argument" name="prefix" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="lineno" />
        </scope>
        <variable attributes="protected" citdl="re.compile()" line="659" name="_OPTION_DIRECTIVE_RE" />
        <variable attributes="protected" citdl="re.compile()" line="526" name="_EXCEPTION_RE" />
        <variable attributes="protected" line="541" name="_IS_BLANK_OR_COMMENT" />
      </scope>
      <scope classrefs="object" doc="A class used to run DocTest test cases, and accumulate statistics. The `run` method is used to process a single DocTest case.  It returns a tuple `(f, t)`, where `t` is the number of test cases" ilk="class" line="1035" lineend="1464" name="DocTestRunner">
        <variable attributes="__instancevar__" citdl="_OutputRedirectingPdb" line="1373" name="debugger" />
        <variable attributes="private" citdl="re.compile()" line="1319" name="__LINECACHE_FILENAME_RE" />
        <scope doc="Report that the test runner is about to process the given example." ilk="function" line="1131" lineend="1142" name="report_start" signature="report_start(out, test, example)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="out" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="example" />
        </scope>
        <scope doc="Run the examples in `test`, and display the results using the writer function `out`." ilk="function" line="1330" lineend="1391" name="run" returns="DocTestRunner.__run()" signature="run(test, compileflags=None, out=None, clear_globs=True)">
          <import line="1390" module="builtins" />
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="test" />
          <variable citdl="_extract_future_flags()" ilk="argument" name="compileflags" />
          <variable citdl="save_stdout.write" ilk="argument" name="out" />
          <variable citdl="True" ilk="argument" name="clear_globs" />
          <variable citdl="sys.stdout" line="1355" name="save_stdout" />
          <variable citdl="save_stdout.encoding" line="1357" name="encoding" />
          <variable citdl="pdb.set_trace" line="1372" name="save_set_trace" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="1116" name="optionflags" />
        <scope attributes="__ctor__" doc="Create a new test runner." ilk="function" line="1095" lineend="1125" name="__init__" signature="DocTestRunner(checker=None, verbose=None, optionflags=0)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="checker" />
          <variable citdl="bool" ilk="argument" name="verbose" />
          <variable citdl="int" ilk="argument" name="optionflags" />
        </scope>
        <scope doc="Report that the given example raised an unexpected exception." ilk="function" line="1159" lineend="1164" name="report_unexpected_exception" signature="report_unexpected_exception(out, test, example, exc_info)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="out" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="example" />
          <variable ilk="argument" name="exc_info" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="OutputChecker()" line="1112" name="_checker" />
        <scope attributes="protected" ilk="function" line="1166" lineend="1180" name="_failure_header" returns="str.join()" signature="_failure_header(test, example)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="example" />
          <variable citdl="list" line="1167" name="out" />
          <variable citdl="example.lineno" line="1170" name="lineno" />
          <variable citdl="example.source" line="1178" name="source" />
        </scope>
        <scope attributes="private" ilk="function" line="1322" lineend="1328" name="__patched_linecache_getlines" returns="self.save_linecache_getlines()" signature="__patched_linecache_getlines(filename, module_globals=None)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="module_globals" />
          <variable citdl="self.__LINECACHE_FILENAME_RE.match()" line="1323" name="m" />
          <variable line="1325" name="example" />
        </scope>
        <scope doc="Report that the given example failed." ilk="function" line="1152" lineend="1157" name="report_failure" signature="report_failure(out, test, example, got)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="out" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="example" />
          <variable ilk="argument" name="got" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_SpoofOut" line="1125" name="_fakeout" />
        <variable attributes="protected __instancevar__" citdl="dict" line="1122" name="_name2ft" />
        <scope attributes="private" doc="Record the fact that the given DocTest (`test`) generated `f` failures out of `t` tried examples." ilk="function" line="1309" lineend="1317" name="__record_outcome" signature="__record_outcome(test, f, t)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="f" />
          <variable ilk="argument" name="t" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="1117" name="original_optionflags" />
        <scope attributes="private" doc="Run the examples in `test`." ilk="function" line="1186" lineend="1307" name="__run" returns="TestResults()" signature="__run(test, compileflags, out)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="compileflags" />
          <variable ilk="argument" name="out" />
          <variable citdl="int" line="1197" name="failures" />
          <variable citdl="int" line="1201" name="original_optionflags" />
          <variable citdl="self._checker.check_output" line="1205" name="check" />
          <variable citdl="int" line="1212" name="quiet" />
          <variable citdl="str" line="1236" name="filename" />
          <variable citdl="sys.exc_info()" line="1246" name="exception" />
          <variable citdl="self._fakeout.getvalue()" line="1253" name="got" />
          <variable citdl="SUCCESS" line="1255" name="outcome" />
          <variable line="1265" name="exc_msg" />
          <variable citdl="re.match()" line="1280" name="m1" />
          <variable citdl="re.match()" line="1281" name="m2" />
        </scope>
        <variable attributes="__instancevar__" line="1350" name="test" />
        <variable attributes="__instancevar__" citdl="int" line="1120" name="tries" />
        <scope doc="Report that the given example ran successfully." ilk="function" line="1144" lineend="1150" name="report_success" signature="report_success(out, test, example, got)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="out" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="example" />
          <variable ilk="argument" name="got" />
        </scope>
        <scope doc="Print a summary of all the test cases that have been run by this DocTestRunner, and return a tuple `(f, t)`, where `f` is the total number of failed examples, and `t` is the total number of tried examples." ilk="function" line="1396" lineend="1448" name="summarize" returns="TestResults()" signature="summarize(verbose=None)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable citdl="bool" ilk="argument" name="verbose" />
          <variable citdl="list" line="1409" name="notests" />
          <variable citdl="list" line="1410" name="passed" />
          <variable citdl="list" line="1411" name="failed" />
          <variable citdl="int" line="1412" name="totalt" />
        </scope>
        <variable citdl="str" line="1093" name="DIVIDER" />
        <variable attributes="protected __instancevar__" citdl="bool" line="1115" name="_verbose" />
        <scope ilk="function" line="1453" lineend="1464" name="merge" signature="merge(other)">
          <variable citdl="DocTestRunner" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="dict" line="1454" name="d" />
          <variable citdl="f2" line="1462" name="f" />
          <variable citdl="t2" line="1463" name="t" />
        </scope>
        <variable attributes="__instancevar__" citdl="linecache.getlines" line="1379" name="save_linecache_getlines" />
        <variable attributes="__instancevar__" citdl="int" line="1121" name="failures" />
      </scope>
      <scope doc="Convert doctest tests for a module to a unittest test suite." ilk="function" line="2202" lineend="2261" name="DocTestSuite" returns="unittest.TestSuite()" signature="DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options)">
        <variable citdl="test_finder.find()" line="2243" name="tests" />
        <variable citdl="DocTestFinder" ilk="argument" name="test_finder" />
        <variable citdl="_normalize_module()" ilk="argument" name="module" />
        <variable citdl="list" line="2255" name="filename" />
        <variable ilk="argument" name="extraglobs" />
        <variable citdl="unittest.TestSuite()" line="2250" name="suite" />
        <variable ilk="argument" name="globs" />
        <variable attributes="kwargs" ilk="argument" name="options" />
      </scope>
      <variable citdl="int" line="133" name="ELLIPSIS" />
      <variable citdl="str" line="156" name="ELLIPSIS_MARKER" />
      <scope classrefs="object" doc="A single doctest example, consisting of source code and expected output.  `Example` defines the following attributes: " ilk="class" line="381" lineend="432" name="Example">
        <variable attributes="__instancevar__" citdl="int" line="429" name="indent" />
        <variable attributes="__instancevar__" line="432" name="exc_msg" />
        <variable attributes="__instancevar__" line="426" name="source" />
        <variable attributes="__instancevar__" citdl="int" line="428" name="lineno" />
        <variable attributes="__instancevar__" line="427" name="want" />
        <variable attributes="__instancevar__" citdl="dict" line="431" name="options" />
        <scope attributes="__ctor__" ilk="function" line="416" lineend="432" name="__init__" signature="Example(source, want, exc_msg=None, lineno=0, indent=0, options=None)">
          <variable citdl="Example" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="want" />
          <variable ilk="argument" name="exc_msg" />
          <variable citdl="int" ilk="argument" name="lineno" />
          <variable citdl="int" ilk="argument" name="indent" />
          <variable citdl="dict" ilk="argument" name="options" />
        </scope>
      </scope>
      <variable citdl="int" line="135" name="IGNORE_EXCEPTION_DETAIL" />
      <variable citdl="int" line="132" name="NORMALIZE_WHITESPACE" />
      <variable citdl="dict" line="125" name="OPTIONFLAGS_BY_NAME" />
      <scope classrefs="object" doc="A class used to check the whether the actual output from a doctest example matches the expected output.  `OutputChecker` defines two methods: `check_output`, which compares a given pair of outputs," ilk="class" line="1466" lineend="1612" name="OutputChecker">
        <scope doc="Return True iff the actual output from an example (`got`) matches the expected output (`want`)." ilk="function" line="1480" lineend="1540" name="check_output" returns="bool" signature="check_output(want, got, optionflags)">
          <variable citdl="OutputChecker" ilk="argument" name="self" />
          <variable citdl="re.sub()" ilk="argument" name="want" />
          <variable citdl="re.sub()" ilk="argument" name="got" />
          <variable ilk="argument" name="optionflags" />
        </scope>
        <scope attributes="protected" ilk="function" line="1543" lineend="1564" name="_do_a_fancy_diff" returns="bool" signature="_do_a_fancy_diff(want, got, optionflags)">
          <variable citdl="OutputChecker" ilk="argument" name="self" />
          <variable ilk="argument" name="want" />
          <variable ilk="argument" name="got" />
          <variable ilk="argument" name="optionflags" />
        </scope>
        <scope attributes="protected" doc="Convert string to hex-escaped ASCII string." ilk="function" line="1474" lineend="1478" name="_toAscii" returns="str()" signature="_toAscii(s)">
          <variable citdl="OutputChecker" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope doc="Return a string describing the differences between the expected output for a given example (`example`) and the actual output (`got`)." ilk="function" line="1566" lineend="1612" name="output_difference" returns="tuple" signature="output_difference(example, got, optionflags)">
          <variable citdl="OutputChecker" ilk="argument" name="self" />
          <variable ilk="argument" name="example" />
          <variable citdl="re.sub()" ilk="argument" name="got" />
          <variable ilk="argument" name="optionflags" />
          <variable citdl="example.want" line="1573" name="want" />
          <variable citdl="want.splitlines()" line="1582" name="want_lines" />
          <variable citdl="got.splitlines()" line="1583" name="got_lines" />
          <variable citdl="list" line="1586" name="diff" />
          <variable citdl="str" line="1588" name="kind" />
          <variable citdl="difflib.Differ()" line="1594" name="engine" />
        </scope>
      </scope>
      <variable citdl="int" line="149" name="REPORTING_FLAGS" />
      <variable citdl="int" line="145" name="REPORT_CDIFF" />
      <variable citdl="int" line="146" name="REPORT_NDIFF" />
      <variable citdl="int" line="147" name="REPORT_ONLY_FIRST_FAILURE" />
      <variable citdl="int" line="144" name="REPORT_UDIFF" />
      <variable citdl="int" line="134" name="SKIP" />
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <scope classrefs="tuple" doc="TestResults(failed, attempted)" ilk="class" line="102" name="TestResults" />
      <scope classrefs="Exception" doc="A DocTest example has encountered an unexpected exception  The exception instance has variables:" ilk="class" line="1633" lineend="1650" name="UnexpectedException">
        <variable attributes="__instancevar__" line="1645" name="test" />
        <variable attributes="__instancevar__" line="1647" name="exc_info" />
        <scope ilk="function" line="1649" lineend="1650" name="__str__" returns="str()" signature="__str__()">
          <variable citdl="UnexpectedException" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="1646" name="example" />
        <scope attributes="__ctor__" ilk="function" line="1644" lineend="1647" name="__init__" signature="UnexpectedException(test, example, exc_info)">
          <variable citdl="UnexpectedException" ilk="argument" name="self" />
          <variable ilk="argument" name="test" />
          <variable ilk="argument" name="example" />
          <variable ilk="argument" name="exc_info" />
        </scope>
      </scope>
      <variable citdl="list" line="50" name="__all__" />
      <variable citdl="str" line="48" name="__docformat__" />
      <import module="__future__" />
      <variable citdl="dict" line="2572" name="__test__" />
      <scope doc="Debug a single doctest docstring." ilk="function" line="2514" lineend="2523" name="debug" signature="debug(module, name, pm=False)">
        <variable citdl="testsource()" line="2522" name="testsrc" />
        <variable ilk="argument" name="name" />
        <variable citdl="_normalize_module()" ilk="argument" name="module" />
        <variable citdl="False" ilk="argument" name="pm" />
      </scope>
      <scope doc="Debug a test script. `src` is the script, as a string." ilk="function" line="2479" lineend="2512" name="debug_script" signature="debug_script(src, pm=False, globs=None)">
        <variable citdl="open()" line="2504" name="fp" />
        <variable ilk="argument" name="src" />
        <variable citdl="open()" line="2487" name="f" />
        <variable citdl="tempfile.mktemp()" line="2486" name="srcfilename" />
        <variable citdl="fp.read()" line="2506" name="script" />
        <variable citdl="globs.copy()" ilk="argument" name="globs" />
        <variable citdl="False" ilk="argument" name="pm" />
      </scope>
      <scope doc="Debug a single doctest docstring, in argument `src`&apos;" ilk="function" line="2474" lineend="2477" name="debug_src" signature="debug_src(src, pm=False, globs=None)">
        <variable ilk="argument" name="src" />
        <variable citdl="script_from_examples()" line="2476" name="testsrc" />
        <variable ilk="argument" name="globs" />
        <variable citdl="False" ilk="argument" name="pm" />
      </scope>
      <import module="difflib" />
      <import module="inspect" />
      <import module="linecache" />
      <variable citdl="NoneType" line="1762" name="master" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <import module="os" />
      <import module="pdb" />
      <import module="re" />
      <scope ilk="function" line="126" lineend="128" name="register_optionflag" returns="OPTIONFLAGS_BY_NAME.setdefault()" signature="register_optionflag(name)">
        <variable ilk="argument" name="name" />
      </scope>
      <scope doc="Test examples in the given object&apos;s docstring (`f`), using `globs` as globals." ilk="function" line="1991" lineend="2012" name="run_docstring_examples" signature="run_docstring_examples(f, globs, verbose=False, name=&apos;NoName&apos;, compileflags=None, optionflags=0)">
        <variable citdl="False" ilk="argument" name="verbose" />
        <variable ilk="argument" name="f" />
        <variable citdl="DocTestRunner" line="2010" name="runner" />
        <variable ilk="argument" name="compileflags" />
        <variable citdl="int" ilk="argument" name="optionflags" />
        <variable ilk="argument" name="globs" />
        <variable citdl="DocTestFinder" line="2009" name="finder" />
        <variable citdl="str" ilk="argument" name="name" />
      </scope>
      <scope doc="Extract script from text with examples." ilk="function" line="2376" lineend="2456" name="script_from_examples" returns="str" signature="script_from_examples(s)">
        <variable citdl="list" line="2434" name="output" />
        <variable ilk="argument" name="s" />
        <variable citdl="piece.want" line="2440" name="want" />
      </scope>
      <scope doc="Sets the unittest option flags." ilk="function" line="2020" lineend="2053" name="set_unittest_reportflags" returns="int" signature="set_unittest_reportflags(flags)">
        <variable citdl="int" line="2051" name="old" />
        <variable ilk="argument" name="flags" />
        <variable attributes="protected" line="2052" name="_unittest_reportflags" />
      </scope>
      <import module="sys" />
      <import module="tempfile" />
      <scope doc="Test examples in the given file. Return (#failures, #tests)." ilk="function" line="1868" lineend="1989" name="testfile" returns="TestResults()" signature="testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=&lt;doctest.DocTestParser object at 0x0346B610&gt;, encoding=None)">
        <variable citdl="True" ilk="argument" name="module_relative" />
        <variable ilk="argument" name="verbose" />
        <variable ilk="argument" name="package" />
        <variable citdl="DebugRunner" line="1973" name="runner" />
        <variable citdl="DocTestParser" ilk="argument" name="parser" />
        <variable ilk="argument" name="filename" />
        <variable ilk="argument" name="encoding" />
        <variable citdl="parser.get_doctest()" line="1978" name="test" />
        <variable citdl="DebugRunner" line="1985" name="master" />
        <variable ilk="argument" name="extraglobs" />
        <variable citdl="False" ilk="argument" name="raise_on_error" />
        <variable citdl="True" ilk="argument" name="report" />
        <variable citdl="int" ilk="argument" name="optionflags" />
        <variable citdl="dict" ilk="argument" name="globs" />
        <variable citdl="os.path.basename()" ilk="argument" name="name" />
      </scope>
      <scope doc="m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False" ilk="function" line="1764" lineend="1866" name="testmod" returns="TestResults()" signature="testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False)">
        <variable ilk="argument" name="verbose" />
        <variable citdl="DebugRunner" line="1851" name="runner" />
        <variable ilk="argument" name="extraglobs" />
        <variable citdl="sys.modules.get()" ilk="argument" name="m" />
        <variable citdl="DebugRunner" line="1862" name="master" />
        <variable citdl="False" ilk="argument" name="raise_on_error" />
        <variable citdl="True" ilk="argument" name="report" />
        <variable citdl="False" ilk="argument" name="exclude_empty" />
        <variable citdl="int" ilk="argument" name="optionflags" />
        <variable ilk="argument" name="globs" />
        <variable citdl="DocTestFinder" line="1848" name="finder" />
        <variable citdl="m.__name__" ilk="argument" name="name" />
      </scope>
      <scope doc="Extract the test sources from a doctest docstring as a script." ilk="function" line="2458" lineend="2472" name="testsource" returns="script_from_examples()" signature="testsource(module, name)">
        <variable citdl="list" line="2467" name="test" />
        <variable citdl="script_from_examples()" line="2471" name="testsrc" />
        <variable line="2466" name="tests" />
        <variable ilk="argument" name="name" />
        <variable citdl="_normalize_module()" ilk="argument" name="module" />
      </scope>
      <import module="traceback" />
      <import module="unittest" />
      <import module="warnings" />
      <scope attributes="protected __hidden__" ilk="function" line="345" lineend="367" name="_module_relative_path" returns="os.path.join()" signature="_module_relative_path(module, path)">
        <variable ilk="argument" name="module" />
        <variable ilk="argument" name="path" />
        <variable citdl="os.curdir" line="354" name="basedir" />
      </scope>
      <scope attributes="protected __hidden__" doc="Return a commented form of the given line" ilk="function" line="303" lineend="309" name="_comment_line" returns="str" signature="_comment_line(line)">
        <variable citdl="line.rstrip()" ilk="argument" name="line" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="2018" name="_unittest_reportflags" />
      <scope attributes="protected __hidden__" doc="A pointless class, for sanity-checking of docstring testing." ilk="class" line="2528" lineend="2570" name="_TestClass">
        <scope attributes="__ctor__" doc="val -&gt; _TestClass object with associated value val." ilk="function" line="2542" lineend="2550" name="__init__" signature="_TestClass(val)">
          <variable citdl="_TestClass" ilk="argument" name="self" />
          <variable ilk="argument" name="val" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="2550" name="val" />
        <scope doc="&gt;&gt;&gt; _TestClass(13).square().get() 169" ilk="function" line="2552" lineend="2560" name="square" returns="_TestClass" signature="square() -&gt; square TestClass&apos;s associated value">
          <variable citdl="_TestClass" ilk="argument" name="self" />
        </scope>
        <scope doc="&gt;&gt;&gt; x = _TestClass(-42) &gt;&gt;&gt; print_(x.get()) -42" ilk="function" line="2562" lineend="2570" name="get" returns="int" signature="get() -&gt; return TestClass&apos;s associated value.">
          <variable citdl="_TestClass" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="2623" lineend="2645" name="_test" returns="int" signature="_test()">
        <variable citdl="list" line="2624" name="testfiles" />
        <variable citdl="os.path.basename()" line="2626" name="name" />
        <variable citdl="__import__()" line="2638" name="m" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="StringIO" ilk="class" line="239" lineend="251" name="_SpoofOut">
        <scope ilk="function" line="240" lineend="247" name="getvalue" returns="StringIO.getvalue()" signature="getvalue()">
          <variable citdl="_SpoofOut" ilk="argument" name="self" />
          <variable citdl="StringIO.getvalue()" line="241" name="result" />
        </scope>
        <scope ilk="function" line="249" lineend="251" name="truncate" signature="truncate(size=None)">
          <variable citdl="_SpoofOut" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Return the module specified by `module`." ilk="function" line="187" lineend="204" name="_normalize_module" returns="__import__()" signature="_normalize_module(module, depth=2)">
        <variable ilk="argument" name="module" />
        <variable citdl="int" ilk="argument" name="depth" />
      </scope>
      <scope attributes="protected __hidden__" doc="Return a string containing a traceback message for the given exc_info tuple (as returned by sys.exc_info())." ilk="function" line="227" lineend="236" name="_exception_traceback" returns="excout.getvalue()" signature="_exception_traceback(exc_info)">
        <variable ilk="argument" name="exc_info" />
        <variable citdl="StringIO()" line="233" name="excout" />
      </scope>
      <scope attributes="protected __hidden__" doc="Add the given number of space characters to the beginning of every non-blank line in `s`, and return the result." ilk="function" line="219" lineend="225" name="_indent" returns="re.sub()" signature="_indent(s, indent=4)">
        <variable ilk="argument" name="s" />
        <variable citdl="int" ilk="argument" name="indent" />
      </scope>
      <scope attributes="protected __hidden__" doc="Essentially the only subtle case: &gt;&gt;&gt; _ellipsis_match(&apos;aa...aa&apos;, &apos;aaa&apos;) False" ilk="function" line="254" lineend="301" name="_ellipsis_match" returns="bool" signature="_ellipsis_match(want, got)">
        <variable ilk="argument" name="want" />
        <variable ilk="argument" name="got" />
        <variable citdl="want.split()" line="264" name="ws" />
        <variable citdl="int" line="268" name="startpos" />
        <variable citdl="len()" line="268" name="endpos" />
        <variable line="269" name="w" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="206" lineend="217" name="_load_testfile" returns="tuple" signature="_load_testfile(filename, package, module_relative, encoding)">
        <variable citdl="_module_relative_path()" ilk="argument" name="filename" />
        <variable citdl="_normalize_module()" ilk="argument" name="package" />
        <variable ilk="argument" name="module_relative" />
        <variable ilk="argument" name="encoding" />
        <variable citdl="file_contents.decode()" line="212" name="file_contents" />
      </scope>
      <scope attributes="protected __hidden__" doc="Return the compiler-flags associated with the future features that have been imported into the given namespace (globs)." ilk="function" line="175" lineend="185" name="_extract_future_flags" returns="int" signature="_extract_future_flags(globs)">
        <variable ilk="argument" name="globs" />
        <variable citdl="int" line="180" name="flags" />
        <variable citdl="globs.get()" line="182" name="feature" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="pdb.Pdb" doc="A specialized version of the python debugger that redirects stdout to a given stream when interacting with the user." ilk="class" line="311" lineend="342" name="_OutputRedirectingPdb">
        <scope attributes="__ctor__" ilk="function" line="317" lineend="320" name="__init__" signature="_OutputRedirectingPdb(out)">
          <variable citdl="_OutputRedirectingPdb" ilk="argument" name="self" />
          <variable ilk="argument" name="out" />
        </scope>
        <variable attributes="private __instancevar__" line="318" name="__out" />
        <variable attributes="private __instancevar__" citdl="False" line="319" name="__debugger_used" />
        <scope ilk="function" line="322" lineend="326" name="set_trace" signature="set_trace(frame=None)">
          <variable citdl="_OutputRedirectingPdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
        </scope>
        <scope ilk="function" line="328" lineend="332" name="set_continue" signature="set_continue()">
          <variable citdl="_OutputRedirectingPdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="334" lineend="342" name="trace_dispatch" returns="pdb.Pdb.trace_dispatch()" signature="trace_dispatch(*args)">
          <variable citdl="_OutputRedirectingPdb" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="sys.stdout" line="336" name="save_stdout" />
        </scope>
      </scope>
    </scope>
    <scope doc="Fix incompatible imports and module references." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_imports">
      <scope classrefs="BaseFix" ilk="class" line="85" lineend="143" name="FixImports">
        <variable citdl="int" line="92" name="run_order" />
        <variable attributes="__instancevar__" citdl="build_pattern()" line="100" name="PATTERN" />
        <scope ilk="function" line="97" lineend="101" name="compile_pattern" signature="compile_pattern()">
          <variable citdl="FixImports" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="120" lineend="143" name="transform" signature="transform(node, results)">
          <variable citdl="FixImports" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable citdl="match()" ilk="argument" name="results" />
          <variable citdl="results.get()" line="121" name="import_mod" />
          <variable citdl="import_mod.value" line="123" name="mod_name" />
          <variable citdl="self.replace.get()" line="124" name="new_name" />
          <variable line="140" name="bare_name" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="118" name="replace" />
        <scope ilk="function" line="116" lineend="118" name="start_tree" signature="start_tree(tree, filename)">
          <variable citdl="FixImports" ilk="argument" name="self" />
          <variable ilk="argument" name="tree" />
          <variable ilk="argument" name="filename" />
        </scope>
        <scope ilk="function" line="94" lineend="95" name="build_pattern" returns="str.join()" signature="build_pattern()">
          <variable citdl="FixImports" ilk="argument" name="self" />
        </scope>
        <variable citdl="dict" line="88" name="mapping" />
        <scope ilk="function" line="104" lineend="114" name="match" returns="match()" signature="match(node)">
          <variable citdl="FixImports" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable line="105" name="match" />
          <variable citdl="match()" line="106" name="results" />
        </scope>
      </scope>
      <variable citdl="dict" line="8" name="MAPPING" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope ilk="function" line="61" lineend="62" name="alternates" returns="str" signature="alternates(members)">
        <variable ilk="argument" name="members" />
      </scope>
      <scope doc="Follow an attribute chain." ilk="function" name="attr_chain" signature="attr_chain(obj, attr)" />
      <scope ilk="function" line="65" lineend="82" name="build_pattern" signature="build_pattern(mapping={&apos;dbm&apos;: &apos;dbm.ndbm&apos;, &apos;tkFileDialog&apos;: &apos;tkinter.filedialog&apos;, &apos;__builtin__&apos;: &apos;builtins&apos;, &apos;ttk&apos;: &apos;tkinter.ttk&apos;, &apos;dummy_thread&apos;: &apos;_dummy_thread&apos;, &apos;tkSimpleDialog&apos;: &apos;tkinter.simpledialog&apos;, &apos;FileDialog&apos;: &apos;tkinter.filedialog&apos;, &apos;Tix&apos;: &apos;tkinter.tix&apos;, &apos;gdbm&apos;: &apos;dbm.gnu&apos;, &apos;robotparser&apos;: &apos;urllib.robotparser&apos;, &apos;CGIHTTPServer&apos;: &apos;http.server&apos;, &apos;Cookie&apos;: &apos;http.cookies&apos;, &apos;cPickle&apos;: &apos;pickle&apos;, &apos;SocketServer&apos;: &apos;socketserver&apos;, &apos;repr&apos;: &apos;reprlib&apos;, &apos;Dialog&apos;: &apos;tkinter.dialog&apos;, &apos;ScrolledText&apos;: &apos;tkinter.scrolledtext&apos;, &apos;cookielib&apos;: &apos;http.cookiejar&apos;, &apos;ConfigParser&apos;: &apos;configparser&apos;, &apos;httplib&apos;: &apos;http.client&apos;, &apos;markupbase&apos;: &apos;_markupbase&apos;, &apos;tkMessageBox&apos;: &apos;tkinter.messagebox&apos;, &apos;_winreg&apos;: &apos;winreg&apos;, &apos;DocXMLRPCServer&apos;: &apos;xmlrpc.server&apos;, &apos;cStringIO&apos;: &apos;io&apos;, &apos;copy_reg&apos;: &apos;copyreg&apos;, &apos;Tkdnd&apos;: &apos;tkinter.dnd&apos;, &apos;SimpleHTTPServer&apos;: &apos;http.server&apos;, &apos;SimpleDialog&apos;: &apos;tkinter.simpledialog&apos;, &apos;HTMLParser&apos;: &apos;html.parser&apos;, &apos;BaseHTTPServer&apos;: &apos;http.server&apos;, &apos;tkCommonDialog&apos;: &apos;tkinter.commondialog&apos;, &apos;dumbdbm&apos;: &apos;dbm.dumb&apos;, &apos;UserList&apos;: &apos;collections&apos;, &apos;UserString&apos;: &apos;collections&apos;, &apos;Tkinter&apos;: &apos;tkinter&apos;, &apos;tkFont&apos;: &apos;tkinter.font&apos;, &apos;htmlentitydefs&apos;: &apos;html.entities&apos;, &apos;SimpleXMLRPCServer&apos;: &apos;xmlrpc.server&apos;, &apos;Queue&apos;: &apos;queue&apos;, &apos;tkColorChooser&apos;: &apos;tkinter.colorchooser&apos;, &apos;commands&apos;: &apos;subprocess&apos;, &apos;thread&apos;: &apos;_thread&apos;, &apos;StringIO&apos;: &apos;io&apos;, &apos;xmlrpclib&apos;: &apos;xmlrpc.client&apos;, &apos;Tkconstants&apos;: &apos;tkinter.constants&apos;, &apos;urlparse&apos;: &apos;urllib.parse&apos;, &apos;dbhash&apos;: &apos;dbm.bsd&apos;})">
        <variable citdl="alternates()" line="67" name="bare_names" />
        <variable citdl="dict" ilk="argument" name="mapping" />
        <variable citdl="str.join()" line="66" name="mod_list" />
      </scope>
      <import module="fixer_base" />
    </scope>
    <scope doc="Implementation of the DOM Level 3 &apos;LS-Load&apos; feature." ilk="blob" lang="Python3" name="xml.dom.xmlbuilder">
      <scope classrefs="object" ilk="class" line="44" lineend="205" name="DOMBuilder">
        <variable attributes="protected" citdl="tuple" line="54" name="_legal_actions" />
        <scope attributes="protected" ilk="function" line="62" lineend="63" name="_set_entityResolver" signature="_set_entityResolver(entityResolver)">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="entityResolver" />
        </scope>
        <variable citdl="int" line="51" name="ACTION_INSERT_AFTER" />
        <scope attributes="protected" ilk="function" line="67" lineend="68" name="_set_errorHandler" signature="_set_errorHandler(errorHandler)">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="errorHandler" />
        </scope>
        <scope ilk="function" line="197" lineend="200" name="parseWithContext" signature="parseWithContext(input, cnode, action)">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable ilk="argument" name="cnode" />
          <variable ilk="argument" name="action" />
        </scope>
        <scope ilk="function" line="187" lineend="195" name="parse" returns="self._parse_bytestream()" signature="parse(input)">
          <import line="193" module="urllib.request" />
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="copy.copy()" line="188" name="options" />
          <variable citdl="urllib.request.urlopen()" line="191" name="fp" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="57" lineend="58" name="__init__" signature="DOMBuilder()">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
        </scope>
        <variable citdl="int" line="50" name="ACTION_APPEND_AS_CHILDREN" />
        <scope attributes="protected" ilk="function" line="202" lineend="205" name="_parse_bytestream" returns="builder.parseFile()" signature="_parse_bytestream(stream, options)">
          <import line="203" module="xml.dom.expatbuilder" />
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="stream" />
          <variable ilk="argument" name="options" />
          <variable citdl="xml.dom.expatbuilder.makeBuilder()" line="204" name="builder" />
        </scope>
        <scope ilk="function" line="162" lineend="178" name="getFeature" returns="options.whitespace_in_element_content" signature="getFeature(name)">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="_name_xform()" line="163" name="xname" />
          <variable citdl="Options" line="168" name="options" />
        </scope>
        <variable citdl="int" line="52" name="ACTION_INSERT_BEFORE" />
        <variable attributes="protected" citdl="dict" line="101" name="_settings" />
        <scope ilk="function" line="92" lineend="94" name="canSetFeature" returns="bool" signature="canSetFeature(name, state)">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="state" />
          <variable citdl="tuple" line="93" name="key" />
        </scope>
        <variable line="46" name="errorHandler" />
        <variable line="45" name="entityResolver" />
        <variable citdl="int" line="49" name="ACTION_REPLACE" />
        <scope attributes="protected" ilk="function" line="60" lineend="61" name="_get_entityResolver" signature="_get_entityResolver()">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="180" lineend="185" name="parseURI" returns="self.parse()" signature="parseURI(uri)">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="uri" />
          <variable citdl="self.entityResolver.resolveEntity()" line="182" name="input" />
        </scope>
        <scope attributes="protected" ilk="function" line="72" lineend="73" name="_set_filter" signature="_set_filter(filter)">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="filter" />
        </scope>
        <scope attributes="protected" ilk="function" line="65" lineend="66" name="_get_errorHandler" signature="_get_errorHandler()">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="75" lineend="87" name="setFeature" signature="setFeature(name, state)">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="state" />
          <variable line="79" name="settings" />
        </scope>
        <scope attributes="protected" ilk="function" line="70" lineend="71" name="_get_filter" signature="_get_filter()">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Options" line="58" name="_options" />
        <variable line="47" name="filter" />
        <scope ilk="function" line="89" lineend="90" name="supportsFeature" returns="hasattr()" signature="supportsFeature(name)">
          <variable citdl="DOMBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Element filter which can be used to tailor construction of a DOM instance." ilk="class" line="305" lineend="329" name="DOMBuilderFilter">
        <variable citdl="int" line="316" name="FILTER_REJECT" />
        <variable citdl="int" line="315" name="FILTER_ACCEPT" />
        <scope ilk="function" line="325" lineend="326" name="acceptNode" returns="int" signature="acceptNode(element)">
          <variable citdl="DOMBuilderFilter" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
        </scope>
        <variable citdl="int" line="318" name="FILTER_INTERRUPT" />
        <variable citdl="int" line="317" name="FILTER_SKIP" />
        <scope attributes="protected" ilk="function" line="322" lineend="323" name="_get_whatToShow" returns="NodeFilter.SHOW_ALL" signature="_get_whatToShow()">
          <variable citdl="DOMBuilderFilter" ilk="argument" name="self" />
        </scope>
        <variable citdl="NodeFilter.SHOW_ALL" line="320" name="whatToShow" />
        <scope ilk="function" line="328" lineend="329" name="startContainer" returns="int" signature="startContainer(element)">
          <variable citdl="DOMBuilderFilter" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="212" lineend="253" name="DOMEntityResolver">
        <scope attributes="protected" ilk="function" line="244" lineend="246" name="_create_opener" returns="urllib.request.build_opener()" signature="_create_opener()">
          <import line="245" module="urllib.request" />
          <variable citdl="DOMEntityResolver" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="215" lineend="235" name="resolveEntity" returns="DOMInputSource()" signature="resolveEntity(publicId, systemId)">
          <import line="226" module="posixpath" />
          <import line="226" module="urllib.parse" />
          <variable citdl="DOMEntityResolver" ilk="argument" name="self" />
          <variable ilk="argument" name="publicId" />
          <variable ilk="argument" name="systemId" />
          <variable citdl="DOMInputSource()" line="217" name="source" />
          <variable citdl="urllib.parse.urlparse()" line="227" name="parts" />
          <variable citdl="posixpath.dirname()" line="231" name="path" />
        </scope>
        <variable citdl="tuple" line="213" name="__slots__" />
        <variable attributes="protected __instancevar__" citdl="self._create_opener()" line="241" name="_opener" />
        <scope attributes="protected" ilk="function" line="248" lineend="253" name="_guess_media_encoding" signature="_guess_media_encoding(source)">
          <variable citdl="DOMEntityResolver" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable citdl="source.byteStream.info()" line="249" name="info" />
        </scope>
        <scope attributes="protected" ilk="function" line="237" lineend="242" name="_get_opener" returns="self._opener" signature="_get_opener()">
          <variable citdl="DOMEntityResolver" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="366" lineend="386" name="DOMImplementationLS">
        <scope ilk="function" line="381" lineend="383" name="createDOMWriter" signature="createDOMWriter()">
          <variable citdl="DOMImplementationLS" ilk="argument" name="self" />
        </scope>
        <variable citdl="int" line="367" name="MODE_SYNCHRONOUS" />
        <scope ilk="function" line="370" lineend="379" name="createDOMBuilder" returns="DOMBuilder" signature="createDOMBuilder(mode, schemaType)">
          <variable citdl="DOMImplementationLS" ilk="argument" name="self" />
          <variable ilk="argument" name="mode" />
          <variable ilk="argument" name="schemaType" />
        </scope>
        <scope ilk="function" line="385" lineend="386" name="createDOMInputSource" returns="DOMInputSource" signature="createDOMInputSource()">
          <variable citdl="DOMImplementationLS" ilk="argument" name="self" />
        </scope>
        <variable citdl="int" line="368" name="MODE_ASYNCHRONOUS" />
      </scope>
      <scope classrefs="object" ilk="class" line="256" lineend="302" name="DOMInputSource">
        <scope attributes="protected" ilk="function" line="299" lineend="300" name="_get_baseURI" signature="_get_baseURI()">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="264" name="encoding" />
        <scope attributes="protected" ilk="function" line="294" lineend="295" name="_get_systemId" signature="_get_systemId()">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="291" lineend="292" name="_set_publicId" signature="_set_publicId(publicId)">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="publicId" />
        </scope>
        <variable attributes="__instancevar__" line="263" name="stringData" />
        <variable attributes="__instancevar__" line="261" name="byteStream" />
        <scope attributes="protected" ilk="function" line="286" lineend="287" name="_set_encoding" signature="_set_encoding(encoding)">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="encoding" />
        </scope>
        <scope attributes="protected" ilk="function" line="271" lineend="272" name="_set_byteStream" signature="_set_byteStream(byteStream)">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="byteStream" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="260" lineend="267" name="__init__" signature="DOMInputSource()">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="269" lineend="270" name="_get_byteStream" signature="_get_byteStream()">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="279" lineend="280" name="_get_stringData" signature="_get_stringData()">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="296" lineend="297" name="_set_systemId" signature="_set_systemId(systemId)">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="systemId" />
        </scope>
        <variable attributes="__instancevar__" line="265" name="publicId" />
        <variable attributes="__instancevar__" line="262" name="characterStream" />
        <scope attributes="protected" ilk="function" line="281" lineend="282" name="_set_stringData" signature="_set_stringData(data)">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope attributes="protected" ilk="function" line="301" lineend="302" name="_set_baseURI" signature="_set_baseURI(uri)">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="uri" />
        </scope>
        <scope attributes="protected" ilk="function" line="289" lineend="290" name="_get_publicId" signature="_get_publicId()">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="284" lineend="285" name="_get_encoding" signature="_get_encoding()">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="267" name="baseURI" />
        <scope attributes="protected" ilk="function" line="276" lineend="277" name="_set_characterStream" signature="_set_characterStream(characterStream)">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="characterStream" />
        </scope>
        <scope attributes="protected" ilk="function" line="274" lineend="275" name="_get_characterStream" signature="_get_characterStream()">
          <variable citdl="DOMInputSource" ilk="argument" name="self" />
        </scope>
        <variable citdl="tuple" line="257" name="__slots__" />
        <variable attributes="__instancevar__" line="266" name="systemId" />
      </scope>
      <scope classrefs="object" doc="Mixin to create documents that conform to the load/save spec." ilk="class" line="334" lineend="363" name="DocumentLS">
        <scope ilk="function" line="352" lineend="353" name="load" signature="load(uri)">
          <variable citdl="DocumentLS" ilk="argument" name="self" />
          <variable ilk="argument" name="uri" />
        </scope>
        <scope ilk="function" line="358" lineend="363" name="saveXML" returns="snode.toxml()" signature="saveXML(snode)">
          <variable citdl="DocumentLS" ilk="argument" name="self" />
          <variable citdl="DocumentLS" ilk="argument" name="snode" />
        </scope>
        <scope ilk="function" line="346" lineend="350" name="abort" signature="abort()">
          <variable citdl="DocumentLS" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="339" lineend="340" name="_get_async" returns="bool" signature="_get_async()">
          <variable citdl="DocumentLS" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="355" lineend="356" name="loadXML" signature="loadXML(source)">
          <variable citdl="DocumentLS" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
        </scope>
        <variable citdl="False" line="337" name="async" />
        <scope attributes="protected" ilk="function" line="341" lineend="344" name="_set_async" signature="_set_async(async)">
          <variable citdl="DocumentLS" ilk="argument" name="self" />
          <variable ilk="argument" name="async" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Features object that has variables set for each DOMBuilder feature.  The DOMBuilder class uses an instance of this class to pass settings to" ilk="class" line="12" lineend="41" name="Options">
        <variable citdl="True" line="34" name="cdata_sections" />
        <variable citdl="True" line="23" name="namespace_declarations" />
        <variable citdl="False" line="37" name="infoset" />
        <variable citdl="True" line="33" name="whitespace_in_element_content" />
        <variable citdl="True" line="27" name="external_dtd_subset" />
        <variable citdl="False" line="28" name="validate_if_schema" />
        <variable citdl="False" line="38" name="supported_mediatypes_only" />
        <variable citdl="True" line="31" name="create_entity_ref_nodes" />
        <variable citdl="True" line="35" name="comments" />
        <variable citdl="True" line="26" name="external_general_entities" />
        <variable citdl="False" line="30" name="datatype_normalization" />
        <variable citdl="True" line="32" name="entities" />
        <variable line="40" name="errorHandler" />
        <variable citdl="int" line="22" name="namespaces" />
        <variable line="41" name="filter" />
        <variable citdl="True" line="36" name="charset_overrides_xml_encoding" />
        <variable citdl="False" line="29" name="validate" />
        <variable citdl="False" line="24" name="validation" />
        <variable citdl="True" line="25" name="external_parameter_entities" />
      </scope>
      <variable citdl="list" line="9" name="__all__" />
      <import module="copy" />
      <import module="xml" />
      <scope attributes="protected __hidden__" ilk="function" line="208" lineend="209" name="_name_xform" signature="_name_xform(name)">
        <variable ilk="argument" name="name" />
      </scope>
    </scope>
    <scope doc="Facility to use the Expat parser to load a minidom instance from a string or file. " ilk="blob" lang="Python3" name="xml.dom.expatbuilder">
      <variable citdl="int" name="CDATA_SECTION_NODE" />
      <variable citdl="int" name="DOCUMENT_NODE" />
      <variable citdl="NoneType" name="EMPTY_NAMESPACE" />
      <variable citdl="NoneType" name="EMPTY_PREFIX" />
      <scope classrefs="object" ilk="class" name="ElementInfo" />
      <scope classrefs="tuple" ilk="class" name="EmptyNodeList" />
      <scope classrefs="object" doc="Document builder that uses Expat to build a ParsedXML.DOM document instance." ilk="class" name="ExpatBuilder" />
      <scope classrefs="Namespaces ExpatBuilder" doc="Document builder that supports namespaces." ilk="class" name="ExpatBuilderNS" />
      <variable citdl="int" name="FILTER_ACCEPT" />
      <variable citdl="int" name="FILTER_INTERRUPT" />
      <variable citdl="int" name="FILTER_REJECT" />
      <variable citdl="int" name="FILTER_SKIP" />
      <scope classrefs="object" ilk="class" name="FilterCrutch" />
      <scope classrefs="object" doc="Wrapper around a DOMBuilderFilter which implements the checks to make the whatToShow filter attribute work." ilk="class" name="FilterVisibilityController" />
      <scope classrefs="ExpatBuilder" doc="Builder which constructs document fragments given XML source text and a context node. " ilk="class" name="FragmentBuilder" />
      <scope classrefs="Namespaces FragmentBuilder" doc="Fragment builder that supports namespaces." ilk="class" name="FragmentBuilderNS" />
      <scope classrefs="ExpatBuilder" doc="XML processor which can rip out the internal document type subset." ilk="class" name="InternalSubsetExtractor" />
      <scope classrefs="object" doc="Mix-in class for builders; adds support for namespaces." ilk="class" name="Namespaces" />
      <scope classrefs="object" doc="Class giving the NodeType constants." ilk="class" name="Node" />
      <scope classrefs="object" doc="This is the DOM2 NodeFilter interface. It contains only constants." ilk="class" name="NodeFilter" />
      <scope classrefs="list" ilk="class" name="NodeList" />
      <scope classrefs="Exception" doc="Exception raised to short-circuit parsing in InternalSubsetExtractor." ilk="class" name="ParseEscape" />
      <scope classrefs="FilterCrutch" ilk="class" name="Rejecter" />
      <scope classrefs="FilterCrutch" ilk="class" name="Skipper" />
      <variable citdl="tuple" name="StringTypes" />
      <variable citdl="int" name="TEXT_NODE" />
      <variable citdl="str" name="XMLNS_NAMESPACE" />
      <scope ilk="function" name="defproperty" signature="defproperty(klass, name, doc)" />
      <import module="expat" />
      <scope doc="Create a builder based on an Options object." ilk="function" name="makeBuilder" signature="makeBuilder(options)" />
      <import module="minidom" />
      <scope doc="Parse a document, returning the resulting Document node." ilk="function" name="parse" signature="parse(file, namespaces=True)" />
      <scope doc="Parse a fragment of a document, given the context from which it was originally extracted." ilk="function" name="parseFragment" signature="parseFragment(file, context, namespaces=True)" />
      <scope doc="Parse a fragment of a document from a string, given the context from which it was originally extracted." ilk="function" name="parseFragmentString" signature="parseFragmentString(string, context, namespaces=True)" />
      <scope doc="Parse a document from a string, returning the resulting Document node." ilk="function" name="parseString" signature="parseString(string, namespaces=True)" />
      <variable citdl="DOMImplementation" name="theDOMImplementation" />
      <import module="xmlbuilder" />
    </scope>
    <scope doc="RFC 3548: Base16, Base32, Base64 Data Encodings" ilk="blob" lang="Python3" name="base64">
      <variable citdl="int" line="305" name="MAXBINSIZE" />
      <variable citdl="int" line="304" name="MAXLINESIZE" />
      <variable citdl="list" line="14" name="__all__" />
      <scope doc="Decode a Base16 encoded byte string." ilk="function" line="279" lineend="296" name="b16decode" returns="binascii.unhexlify()" signature="b16decode(s, casefold=False)">
        <variable citdl="False" ilk="argument" name="casefold" />
        <variable citdl="s.upper()" ilk="argument" name="s" />
      </scope>
      <scope doc="Encode a byte string using Base16." ilk="function" line="269" lineend="276" name="b16encode" signature="b16encode(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Decode a Base32 encoded byte string." ilk="function" line="190" lineend="262" name="b32decode" returns="str.join()" signature="b32decode(s, casefold=False, map01=None)">
        <variable citdl="int" line="235" name="acc" />
        <variable citdl="list" line="248" name="last" />
        <variable citdl="_b32rev.get()" line="238" name="val" />
        <variable citdl="int" line="227" name="padchars" />
        <variable citdl="int" line="236" name="shift" />
        <variable citdl="re.search()" line="228" name="mo" />
        <variable citdl="False" ilk="argument" name="casefold" />
        <variable citdl="list" ilk="argument" name="s" />
        <variable citdl="list" line="234" name="parts" />
        <variable ilk="argument" name="map01" />
      </scope>
      <scope doc="Encode a byte string using Base32." ilk="function" line="147" lineend="187" name="b32encode" returns="bytes()" signature="b32encode(s)">
        <variable citdl="bytes()" line="159" name="encoded" />
        <variable citdl="bytes()" ilk="argument" name="s" />
      </scope>
      <scope doc="Decode a Base64 encoded byte string." ilk="function" line="68" lineend="87" name="b64decode" returns="binascii.a2b_base64()" signature="b64decode(s, altchars=None)">
        <variable ilk="argument" name="altchars" />
        <variable citdl="_translate()" ilk="argument" name="s" />
      </scope>
      <scope doc="Encode a byte string using Base64." ilk="function" line="45" lineend="65" name="b64encode" returns="list" signature="b64encode(s, altchars=None)">
        <variable ilk="argument" name="altchars" />
        <variable citdl="list" line="58" name="encoded" />
        <variable ilk="argument" name="s" />
      </scope>
      <import module="binascii" />
      <variable citdl="tuple" line="30" name="bytes_types" />
      <scope doc="Decode a file; input and output are binary files." ilk="function" line="322" lineend="329" name="decode" signature="decode(input, output)">
        <variable ilk="argument" name="input" />
        <variable citdl="input.readline()" line="325" name="line" />
        <variable citdl="binascii.a2b_base64()" line="328" name="s" />
        <variable ilk="argument" name="output" />
      </scope>
      <scope doc="Decode a bytestring of base-64 data into a bytestring." ilk="function" line="351" lineend="355" name="decodebytes" returns="binascii.a2b_base64()" signature="decodebytes(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Legacy alias of decodebytes()." ilk="function" line="357" lineend="362" name="decodestring" returns="decodebytes()" signature="decodestring(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Encode a file; input and output are binary files." ilk="function" line="307" lineend="319" name="encode" signature="encode(input, output)">
        <variable ilk="argument" name="input" />
        <variable citdl="input.read()" line="310" name="s" />
        <variable citdl="input.read()" line="314" name="ns" />
        <variable citdl="binascii.b2a_base64()" line="318" name="line" />
        <variable ilk="argument" name="output" />
      </scope>
      <scope doc="Encode a bytestring into a bytestring containing multiple lines of base-64 data." ilk="function" line="332" lineend="341" name="encodebytes" returns="str.join()" signature="encodebytes(s)">
        <variable ilk="argument" name="s" />
        <variable citdl="list" line="339" name="chunk" />
        <variable citdl="list" line="337" name="pieces" />
      </scope>
      <scope doc="Legacy alias of encodebytes()." ilk="function" line="343" lineend="348" name="encodestring" returns="encodebytes()" signature="encodestring(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Small main program" ilk="function" line="366" lineend="388" name="main" signature="main()">
        <variable citdl="encode" line="379" name="func" />
      </scope>
      <import module="re" />
      <scope doc="Decode a byte string encoded with the standard Base64 alphabet." ilk="function" line="97" lineend="105" name="standard_b64decode" returns="b64decode()" signature="standard_b64decode(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Encode a byte string using the standard Base64 alphabet." ilk="function" line="90" lineend="95" name="standard_b64encode" returns="b64encode()" signature="standard_b64encode(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <import module="struct" />
      <scope ilk="function" line="391" lineend="398" name="test" signature="test()">
        <variable citdl="decodebytes()" line="396" name="s2" />
        <variable citdl="encodebytes()" line="394" name="s1" />
        <variable citdl="str" line="392" name="s0" />
      </scope>
      <scope doc="Decode a byte string encoded with the standard Base64 alphabet." ilk="function" line="116" lineend="126" name="urlsafe_b64decode" returns="b64decode()" signature="urlsafe_b64decode(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Encode a byte string using a url-safe Base64 alphabet." ilk="function" line="107" lineend="114" name="urlsafe_b64encode" returns="b64encode()" signature="urlsafe_b64encode(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict()" line="144" name="_b32rev" />
      <variable attributes="protected __hidden__" citdl="list" line="143" name="_b32tab" />
      <scope attributes="protected __hidden__" ilk="function" line="33" lineend="39" name="_translate" returns="s.translate()" signature="_translate(s, altchars)">
        <variable ilk="argument" name="s" />
        <variable ilk="argument" name="altchars" />
        <variable citdl="bytearray()" line="36" name="translation" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="131" name="_b32alphabet" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_sre">
      <variable citdl="int" name="CODESIZE" />
      <variable citdl="int" name="MAGIC" />
      <scope ilk="function" name="compile" />
      <variable citdl="str" name="copyright" />
      <scope ilk="function" name="getcodesize" />
      <scope ilk="function" name="getlower" />
    </scope>
    <scope doc="# Copyright (C) 2001-2007 Python Software Foundation # Author: Ben Gertzfield, Barry Warsaw # Contact: email-sig@python.org" ilk="blob" lang="Python3" name="email.charset">
      <variable citdl="dict" line="67" name="ALIASES" />
      <variable citdl="int" line="24" name="BASE64" />
      <variable citdl="dict" line="36" name="CHARSETS" />
      <variable citdl="dict" line="96" name="CODEC_MAP" />
      <scope classrefs="object" doc="Map character sets to their email properties.  This class provides information about the requirements imposed on email" ilk="class" line="156" lineend="384" name="Charset">
        <variable attributes="__instancevar__" citdl="CODEC_MAP.get()" line="228" name="input_codec" />
        <variable attributes="__instancevar__" citdl="benc" line="224" name="body_encoding" />
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" line="293" lineend="355" name="header_encode_lines" returns="list" signature="header_encode_lines(string, maxlengths)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
          <variable ilk="argument" name="maxlengths" />
          <variable citdl="CODEC_MAP.get()" line="313" name="codec" />
          <variable citdl="joined_line.encode()" line="314" name="header_bytes" />
          <variable citdl="self._get_encoder()" line="315" name="encoder_module" />
          <variable citdl="partial()" line="316" name="encoder" />
          <variable citdl="get_output_charset()" line="319" name="charset" />
          <variable citdl="len()" line="320" name="extra" />
          <variable citdl="list" line="332" name="lines" />
          <variable citdl="list" line="333" name="current_line" />
          <variable citdl="next()" line="334" name="maxlen" />
          <variable citdl="EMPTYSTRING.join()" line="337" name="this_line" />
          <variable citdl="encoder_module.header_length()" line="338" name="length" />
          <variable line="346" name="separator" />
          <variable citdl="EMPTYSTRING.join()" line="347" name="joined_line" />
        </scope>
        <scope attributes="protected" ilk="function" line="357" lineend="370" name="_get_encoder" returns="email.base64mime" signature="_get_encoder(header_bytes)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="header_bytes" />
          <variable citdl="email.base64mime.header_length()" line="363" name="len64" />
          <variable citdl="email.quoprimime.header_length()" line="364" name="lenqp" />
        </scope>
        <scope ilk="function" line="241" lineend="242" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="ALIASES.get()" line="214" name="input_charset" />
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" line="273" lineend="291" name="header_encode" returns="encoder_module.header_encode()" signature="header_encode(string)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
          <variable citdl="CODEC_MAP.get()" line="284" name="codec" />
          <variable citdl="get_output_charset()" line="285" name="charset" />
          <variable citdl="string.encode()" line="286" name="header_bytes" />
          <variable citdl="self._get_encoder()" line="288" name="encoder_module" />
        </scope>
        <variable attributes="__instancevar__" citdl="henc" line="223" name="header_encoding" />
        <variable attributes="__instancevar__" citdl="ALIASES.get()" line="225" name="output_charset" />
        <scope doc="Return the output character set." ilk="function" line="265" lineend="271" name="get_output_charset" returns="ALIASES.get()" signature="get_output_charset()">
          <variable citdl="Charset" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="CODEC_MAP.get()" line="230" name="output_codec" />
        <variable citdl="Charset.__str__" line="236" name="__repr__" />
        <scope doc="Return the content-transfer-encoding used for body encoding." ilk="function" line="244" lineend="263" name="get_body_encoding" returns="str" signature="get_body_encoding()">
          <variable citdl="Charset" ilk="argument" name="self" />
        </scope>
        <scope doc="Body-encode a string by converting it first to bytes." ilk="function" line="372" lineend="384" name="body_encode" returns="email.base64mime.body_encode()" signature="body_encode(string)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope ilk="function" line="238" lineend="239" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="233" lineend="234" name="__str__" returns="self.input_charset.lower()" signature="__str__()">
          <variable citdl="Charset" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="200" lineend="231" name="__init__" signature="Charset(input_charset=DEFAULT_CHARSET)">
          <variable citdl="Charset" ilk="argument" name="self" />
          <variable citdl="input_charset.lower()" ilk="argument" name="input_charset" />
          <variable citdl="ALIASES.get()" line="221" name="conv" />
        </scope>
      </scope>
      <variable citdl="str" line="30" name="DEFAULT_CHARSET" />
      <variable citdl="str" line="31" name="EMPTYSTRING" />
      <variable citdl="int" line="23" name="QP" />
      <variable citdl="int" line="28" name="RFC2047_CHROME_LEN" />
      <variable citdl="int" line="25" name="SHORTEST" />
      <variable citdl="list" line="5" name="__all__" />
      <scope doc="Add a character set alias." ilk="function" line="136" lineend="142" name="add_alias" signature="add_alias(alias, canonical)">
        <variable ilk="argument" name="alias" />
        <variable ilk="argument" name="canonical" />
      </scope>
      <scope doc="Add character set properties to the global registry." ilk="function" line="108" lineend="133" name="add_charset" signature="add_charset(charset, header_enc=None, body_enc=None, output_charset=None)">
        <variable ilk="argument" name="output_charset" />
        <variable ilk="argument" name="charset" />
        <variable ilk="argument" name="header_enc" />
        <variable ilk="argument" name="body_enc" />
      </scope>
      <scope doc="Add a codec that map characters in the given charset to/from Unicode." ilk="function" line="145" lineend="152" name="add_codec" signature="add_codec(charset, codecname)">
        <variable ilk="argument" name="codecname" />
        <variable ilk="argument" name="charset" />
      </scope>
      <import module="email" />
      <scope doc="Set the Content-Transfer-Encoding header to 7bit or 8bit." ilk="function" name="encode_7or8bit" signature="encode_7or8bit(msg)" />
      <import module="errors" />
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application of the given arguments and keywords." ilk="class" name="partial" />
    </scope>
    <scope doc="This module supports asynchronous I/O on multiple file descriptors.  *** IMPORTANT NOTICE ***" ilk="blob" lang="Python3" name="select">
      <scope classrefs="Exception" ilk="class" name="error" />
      <scope doc="Wait until one or more file descriptors are ready for some kind of I/O." ilk="function" name="select" signature="select(rlist, wlist, xlist[, timeout]) -&gt; (rlist, wlist, xlist)" />
    </scope>
    <scope doc="Heap queue algorithm (a.k.a. priority queue).  Heaps are arrays for which a[k] &lt;= a[2*k+1] and a[k] &lt;= a[2*k+2] for" ilk="blob" lang="Python3" name="_heapq">
      <variable citdl="str" name="__about__" />
      <scope doc="Transform list into a heap, in-place, in O(len(heap)) time." ilk="function" name="heapify" />
      <scope doc="Pop the smallest item off the heap, maintaining the heap invariant." ilk="function" name="heappop" />
      <scope doc="Push item onto heap, maintaining the heap invariant." ilk="function" name="heappush" />
      <scope doc="Push item on the heap, then pop and return the smallest item from the heap." ilk="function" name="heappushpop" />
      <scope doc="Pop and return the current smallest value, and add the new item." ilk="function" name="heapreplace" />
      <scope doc="Find the n largest elements in a dataset." ilk="function" name="nlargest" />
      <scope doc="Find the n smallest elements in a dataset." ilk="function" name="nsmallest" />
    </scope>
    <scope doc="Conversion between binary data and ASCII" ilk="blob" lang="Python3" name="binascii">
      <scope classrefs="ValueError" ilk="class" name="Error" />
      <scope classrefs="Exception" ilk="class" name="Incomplete" />
      <scope doc="(ascii) -&gt; bin." ilk="function" name="a2b_base64" />
      <scope doc="hexstr must contain an even number of hex digits (upper or lower case)." ilk="function" name="a2b_hex" signature="a2b_hex(hexstr) -&gt; s; Binary data of hexadecimal representation." />
      <scope doc="ascii -&gt; bin, done." ilk="function" name="a2b_hqx" />
      <scope doc="Decode a string of qp-encoded data" ilk="function" name="a2b_qp" />
      <scope doc="(ascii) -&gt; bin." ilk="function" name="a2b_uu" />
      <scope doc="(bin) -&gt; ascii." ilk="function" name="b2a_base64" />
      <scope doc="This function is also available as &quot;hexlify()&quot;." ilk="function" name="b2a_hex" signature="b2a_hex(data) -&gt; s; Hexadecimal representation of binary data." />
      <scope doc="Encode .hqx data" ilk="function" name="b2a_hqx" />
      <scope doc="Encode a string using quoted-printable encoding." ilk="function" name="b2a_qp" signature="b2a_qp(data, quotetabs=0, istext=1, header=0) -&gt; s;" />
      <scope doc="(bin) -&gt; ascii." ilk="function" name="b2a_uu" />
      <scope doc="(data, oldcrc = 0) -&gt; newcrc." ilk="function" name="crc32" />
      <scope doc="(data, oldcrc) -&gt; newcrc." ilk="function" name="crc_hqx" />
      <scope doc="This function is also available as &quot;hexlify()&quot;." ilk="function" name="hexlify" signature="b2a_hex(data) -&gt; s; Hexadecimal representation of binary data." />
      <scope doc="Binhex RLE-code binary data" ilk="function" name="rlecode_hqx" />
      <scope doc="Decode hexbin RLE-coded string" ilk="function" name="rledecode_hqx" />
      <scope doc="hexstr must contain an even number of hex digits (upper or lower case)." ilk="function" name="unhexlify" signature="a2b_hex(hexstr) -&gt; s; Binary data of hexadecimal representation." />
    </scope>
    <scope doc="Email address parsing code.  Lifted directly from rfc822.py.  This should eventually be rewritten." ilk="blob" lang="Python3" name="email._parseaddr">
      <scope classrefs="AddrlistClass" doc="An AddressList encapsulates a list of parsed RFC 2822 addresses." ilk="class" line="435" lineend="480" name="AddressList">
        <scope ilk="function" line="471" lineend="476" name="__isub__" returns="AddressList" signature="__isub__(other)">
          <variable citdl="AddressList" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="478" lineend="480" name="__getitem__" signature="__getitem__(index)">
          <variable citdl="AddressList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="456" lineend="461" name="__iadd__" returns="AddressList" signature="__iadd__(other)">
          <variable citdl="AddressList" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="440" name="addresslist" />
        <scope attributes="__ctor__" ilk="function" line="437" lineend="442" name="__init__" signature="AddressList(field)">
          <variable citdl="AddressList" ilk="argument" name="self" />
          <variable ilk="argument" name="field" />
        </scope>
        <scope ilk="function" line="447" lineend="454" name="__add__" signature="__add__(other)">
          <variable citdl="AddressList" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="" line="449" name="newaddr" />
        </scope>
        <scope ilk="function" line="463" lineend="469" name="__sub__" signature="__sub__(other)">
          <variable citdl="AddressList" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="" line="465" name="newaddr" />
        </scope>
        <scope ilk="function" line="444" lineend="445" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="AddressList" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Address parser class by Ben Escoto.  To understand what this class does, it helps to have a copy of RFC 2822 in" ilk="class" line="155" lineend="433" name="AddrlistClass">
        <scope doc="Get a quote-delimited fragment from self&apos;s field." ilk="function" line="380" lineend="382" name="getquote" returns="AddrlistClass.getdelimited()" signature="getquote()">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
        </scope>
        <scope doc="Get the complete domain name from an address." ilk="function" line="324" lineend="341" name="getdomain" returns="EMPTYSTRING.join()" signature="getdomain()">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
          <variable citdl="list" line="326" name="sdlist" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="173" name="LWS" />
        <variable attributes="__instancevar__" citdl="int" line="172" name="pos" />
        <scope doc="Parse a route address (Return-path value)." ilk="function" line="267" lineend="297" name="getrouteaddr" returns="self.getaddrspec()" signature="getrouteaddr()">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
          <variable citdl="False" line="275" name="expectroute" />
          <variable citdl="str" line="278" name="adlist" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.atomends.replace()" line="180" name="phraseends" />
        <scope attributes="__ctor__" doc="Initialize a new instance." ilk="function" line="165" lineend="182" name="__init__" signature="AddrlistClass(field)">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
          <variable ilk="argument" name="field" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="175" name="FWS" />
        <scope doc="Parse a sequence of RFC 2822 phrases." ilk="function" line="412" lineend="433" name="getphraselist" returns="list" signature="getphraselist()">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
          <variable citdl="list" line="419" name="plist" />
        </scope>
        <scope doc="Parse an RFC 2822 addr-spec." ilk="function" line="299" lineend="322" name="getaddrspec" returns="self.getdomain()" signature="getaddrspec()">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
          <variable citdl="list" line="301" name="aslist" />
        </scope>
        <scope doc="Parse a header fragment delimited by special characters." ilk="function" line="343" lineend="378" name="getdelimited" returns="str" signature="getdelimited(beginchar, endchars, allowcomments=True)">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
          <variable ilk="argument" name="beginchar" />
          <variable ilk="argument" name="endchars" />
          <variable citdl="True" ilk="argument" name="allowcomments" />
          <variable citdl="list" line="359" name="slist" />
          <variable citdl="False" line="360" name="quote" />
        </scope>
        <variable attributes="__instancevar__" line="181" name="field" />
        <scope doc="Parse all addresses." ilk="function" line="194" lineend="206" name="getaddrlist" returns="list" signature="getaddrlist()">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
          <variable citdl="list" line="199" name="result" />
          <variable citdl="self.getaddress()" line="201" name="ad" />
        </scope>
        <scope doc="Parse an RFC 2822 atom." ilk="function" line="392" lineend="410" name="getatom" returns="EMPTYSTRING.join()" signature="getatom(atomends=None)">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="atomends" />
          <variable citdl="list" line="399" name="atomlist" />
        </scope>
        <scope doc="Parse the next address." ilk="function" line="208" lineend="265" name="getaddress" returns="list" signature="getaddress()">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
          <variable citdl="int" line="213" name="oldpos" />
          <variable citdl="list" line="214" name="oldcl" />
          <variable citdl="self.getphraselist()" line="215" name="plist" />
          <variable citdl="list" line="218" name="returnlist" />
          <variable citdl="self.getaddrspec()" line="230" name="addrspec" />
          <variable citdl="len()" line="237" name="fieldlen" />
          <variable citdl="self.getrouteaddr()" line="248" name="routeaddr" />
        </scope>
        <scope doc="Parse an RFC 2822 domain-literal." ilk="function" line="388" lineend="390" name="getdomainliteral" returns="str" signature="getdomainliteral()">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="174" name="CR" />
        <variable attributes="__instancevar__" citdl="list" line="182" name="commentlist" />
        <variable attributes="__instancevar__" citdl="str" line="176" name="atomends" />
        <scope doc="Parse up to the start of the next address." ilk="function" line="184" lineend="192" name="gotonext" signature="gotonext()">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="171" name="specials" />
        <scope doc="Get a parenthesis-delimited fragment from self&apos;s field." ilk="function" line="384" lineend="386" name="getcomment" returns="AddrlistClass.getdelimited()" signature="getcomment()">
          <variable citdl="AddrlistClass" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="str" line="20" name="COMMASPACE" />
      <variable citdl="str" line="19" name="EMPTYSTRING" />
      <variable citdl="str" line="18" name="SPACE" />
      <variable citdl="list" line="9" name="__all__" />
      <scope doc="Turn a 10-tuple as returned by parsedate_tz() into a UTC timestamp." ilk="function" line="140" lineend="147" name="mktime_tz" returns="time.mktime()" signature="mktime_tz(data)">
        <variable ilk="argument" name="data" />
        <variable citdl="time.mktime()" line="146" name="t" />
      </scope>
      <scope doc="Convert a time string to a time tuple." ilk="function" line="131" lineend="137" name="parsedate" returns="parsedate_tz()" signature="parsedate(data)">
        <variable ilk="argument" name="data" />
        <variable citdl="parsedate_tz()" line="133" name="t" />
      </scope>
      <scope doc="Convert a date string to a time tuple." ilk="function" line="45" lineend="128" name="parsedate_tz" returns="tuple" signature="parsedate_tz(data)">
        <variable citdl="int" line="122" name="tzsign" />
        <variable citdl="tm" line="91" name="tz" />
        <variable citdl="s.find()" line="57" name="i" />
        <variable citdl="int()" line="77" name="dd" />
        <variable line="61" name="stuff" />
        <variable citdl="int()" line="106" name="tmm" />
        <variable citdl="tm" line="87" name="yy" />
        <variable citdl="_monthnames.index()" line="75" name="mm" />
        <variable line="65" name="s" />
        <variable citdl="tm" line="87" name="tm" />
        <variable citdl="int()" line="105" name="thh" />
        <variable citdl="list" ilk="argument" name="data" />
        <variable citdl="int()" line="97" name="tss" />
        <variable citdl="int()" line="110" name="tzoffset" />
      </scope>
      <scope doc="Add quotes around a string." ilk="function" line="150" lineend="152" name="quote" signature="quote(str)">
        <variable ilk="argument" name="str" />
      </scope>
      <import module="time" />
      <variable attributes="protected __hidden__" citdl="dict" line="36" name="_timezones" />
      <variable attributes="protected __hidden__" citdl="list" line="28" name="_daynames" />
      <variable attributes="protected __hidden__" citdl="list" line="23" name="_monthnames" />
    </scope>
    <scope doc="Tokenization help for Python programs.  tokenize(readline) is a generator that breaks a stream of" ilk="blob" lang="Python3" name="tokenize">
      <variable citdl="int" name="AMPER" />
      <variable citdl="int" name="AMPEREQUAL" />
      <variable citdl="int" name="AT" />
      <variable citdl="bytes" name="BOM_UTF8" />
      <variable citdl="str" name="Binnumber" />
      <variable citdl="str" name="Bracket" />
      <variable citdl="int" name="CIRCUMFLEX" />
      <variable citdl="int" name="CIRCUMFLEXEQUAL" />
      <variable citdl="int" name="COLON" />
      <variable citdl="int" name="COMMA" />
      <variable citdl="int" name="COMMENT" />
      <variable citdl="str" name="Comment" />
      <variable citdl="str" name="ContStr" />
      <variable citdl="int" name="DEDENT" />
      <variable citdl="int" name="DOT" />
      <variable citdl="int" name="DOUBLESLASH" />
      <variable citdl="int" name="DOUBLESLASHEQUAL" />
      <variable citdl="int" name="DOUBLESTAR" />
      <variable citdl="int" name="DOUBLESTAREQUAL" />
      <variable citdl="str" name="Decnumber" />
      <variable citdl="str" name="Double" />
      <variable citdl="str" name="Double3" />
      <variable citdl="int" name="ELLIPSIS" />
      <variable citdl="int" name="ENCODING" />
      <variable citdl="int" name="ENDMARKER" />
      <variable citdl="int" name="EQEQUAL" />
      <variable citdl="int" name="EQUAL" />
      <variable citdl="int" name="ERRORTOKEN" />
      <variable citdl="str" name="Expfloat" />
      <variable citdl="str" name="Exponent" />
      <variable citdl="str" name="Floatnumber" />
      <variable citdl="str" name="Funny" />
      <variable citdl="int" name="GREATER" />
      <variable citdl="int" name="GREATEREQUAL" />
      <variable citdl="str" name="Hexnumber" />
      <variable citdl="int" name="INDENT" />
      <scope ilk="function" name="ISEOF" signature="ISEOF(x)" />
      <scope ilk="function" name="ISNONTERMINAL" signature="ISNONTERMINAL(x)" />
      <scope ilk="function" name="ISTERMINAL" signature="ISTERMINAL(x)" />
      <variable citdl="str" name="Ignore" />
      <variable citdl="str" name="Imagnumber" />
      <variable citdl="str" name="Intnumber" />
      <variable citdl="int" name="LBRACE" />
      <variable citdl="int" name="LEFTSHIFT" />
      <variable citdl="int" name="LEFTSHIFTEQUAL" />
      <variable citdl="int" name="LESS" />
      <variable citdl="int" name="LESSEQUAL" />
      <variable citdl="int" name="LPAR" />
      <variable citdl="int" name="LSQB" />
      <variable citdl="int" name="MINEQUAL" />
      <variable citdl="int" name="MINUS" />
      <variable citdl="int" name="NAME" />
      <variable citdl="int" name="NEWLINE" />
      <variable citdl="int" name="NL" />
      <variable citdl="int" name="NOTEQUAL" />
      <variable citdl="int" name="NT_OFFSET" />
      <variable citdl="int" name="NUMBER" />
      <variable citdl="int" name="N_TOKENS" />
      <variable citdl="str" name="Name" />
      <variable citdl="str" name="Number" />
      <variable citdl="int" name="OP" />
      <variable citdl="str" name="Octnumber" />
      <variable citdl="str" name="Operator" />
      <variable citdl="int" name="PERCENT" />
      <variable citdl="int" name="PERCENTEQUAL" />
      <variable citdl="int" name="PLUS" />
      <variable citdl="int" name="PLUSEQUAL" />
      <variable citdl="str" name="PlainToken" />
      <variable citdl="str" name="Pointfloat" />
      <variable citdl="str" name="PseudoExtras" />
      <variable citdl="str" name="PseudoToken" />
      <variable citdl="int" name="RARROW" />
      <variable citdl="int" name="RBRACE" />
      <variable citdl="int" name="RIGHTSHIFT" />
      <variable citdl="int" name="RIGHTSHIFTEQUAL" />
      <variable citdl="int" name="RPAR" />
      <variable citdl="int" name="RSQB" />
      <variable citdl="int" name="SEMI" />
      <variable citdl="int" name="SLASH" />
      <variable citdl="int" name="SLASHEQUAL" />
      <variable citdl="int" name="STAR" />
      <variable citdl="int" name="STAREQUAL" />
      <variable citdl="int" name="STRING" />
      <variable citdl="str" name="Single" />
      <variable citdl="str" name="Single3" />
      <variable citdl="str" name="Special" />
      <scope classrefs="Exception" ilk="class" name="StopTokenizing" />
      <variable citdl="str" name="String" />
      <variable citdl="int" name="TILDE" />
      <variable citdl="str" name="Token" />
      <scope classrefs="Exception" ilk="class" name="TokenError" />
      <scope classrefs="tuple" doc="TokenInfo(type, string, start, end, line)" ilk="class" name="TokenInfo" />
      <variable citdl="str" name="Triple" />
      <scope classrefs="object" ilk="class" name="Untokenizer" />
      <variable citdl="int" name="VBAR" />
      <variable citdl="int" name="VBAREQUAL" />
      <variable citdl="str" name="Whitespace" />
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="__author__" />
      <variable citdl="str" name="__credits__" />
      <scope ilk="function" name="any" signature="any(*choices)" />
      <variable citdl="SRE_Pattern" name="cookie_re" />
      <scope doc="The detect_encoding() function is used to detect the encoding that should be used to decode a Python source file." ilk="function" name="detect_encoding" signature="detect_encoding(readline)" />
      <variable citdl="SRE_Pattern" name="double3prog" />
      <variable citdl="dict" name="endprogs" />
      <scope doc="# An undocumented, backwards compatible, API for all the places in the standard # library that expect to be able to use tokenize with strings" ilk="function" name="generate_tokens" signature="generate_tokens(readline)" />
      <scope ilk="function" name="group" signature="group(*choices)" />
      <scope doc="Looks up a codec tuple in the Python codec registry and returns a CodecInfo object." ilk="function" name="lookup" signature="lookup(encoding) -&gt; CodecInfo" />
      <scope ilk="function" name="main" signature="main()" />
      <scope ilk="function" name="maybe" signature="maybe(*choices)" />
      <variable citdl="SRE_Pattern" name="pseudoprog" />
      <import module="re" />
      <variable citdl="SRE_Pattern" name="single3prog" />
      <variable citdl="dict" name="single_quoted" />
      <import module="string" />
      <import module="sys" />
      <variable citdl="str" name="t" />
      <variable citdl="int" name="tabsize" />
      <variable citdl="dict" name="tok_name" />
      <scope doc="The tokenize() generator requires one argment, readline, which must be a callable object which provides the same interface as the readline() method of built-in file objects." ilk="function" name="tokenize" signature="tokenize(readline)" />
      <variable citdl="SRE_Pattern" name="tokenprog" />
      <variable citdl="dict" name="triple_quoted" />
      <scope doc="Transform tokens back into Python source code." ilk="function" name="untokenize" signature="untokenize(iterable)" />
    </scope>
    <scope doc="# tk common message boxes # # this module provides an interface to the native message boxes" ilk="blob" lang="Python3" name="tkinter.messagebox">
      <variable citdl="str" line="45" name="ABORT" />
      <variable citdl="str" line="37" name="ABORTRETRYIGNORE" />
      <variable citdl="str" line="49" name="CANCEL" />
      <scope classrefs="object" ilk="class" name="Dialog" />
      <variable citdl="str" line="31" name="ERROR" />
      <variable citdl="str" line="47" name="IGNORE" />
      <variable citdl="str" line="32" name="INFO" />
      <scope classrefs="Dialog" doc="A message box" ilk="class" line="57" lineend="60" name="Message">
        <variable citdl="str" line="60" name="command" />
      </scope>
      <variable citdl="str" line="51" name="NO" />
      <variable citdl="str" line="38" name="OK" />
      <variable citdl="str" line="39" name="OKCANCEL" />
      <variable citdl="str" line="33" name="QUESTION" />
      <variable citdl="str" line="46" name="RETRY" />
      <variable citdl="str" line="40" name="RETRYCANCEL" />
      <variable citdl="str" line="34" name="WARNING" />
      <variable citdl="str" line="50" name="YES" />
      <variable citdl="str" line="41" name="YESNO" />
      <variable citdl="str" line="42" name="YESNOCANCEL" />
      <scope doc="Ask if operation should proceed; return true if the answer is ok" ilk="function" line="97" lineend="100" name="askokcancel" returns="bool" signature="askokcancel(title=None, message=None, **options)">
        <variable citdl="_show()" line="99" name="s" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable ilk="argument" name="message" />
        <variable ilk="argument" name="title" />
      </scope>
      <scope doc="Ask a question" ilk="function" line="93" lineend="95" name="askquestion" returns="_show()" signature="askquestion(title=None, message=None, **options)">
        <variable ilk="argument" name="message" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable ilk="argument" name="title" />
      </scope>
      <scope doc="Ask if operation should be retried; return true if the answer is yes" ilk="function" line="116" lineend="119" name="askretrycancel" returns="bool" signature="askretrycancel(title=None, message=None, **options)">
        <variable citdl="_show()" line="118" name="s" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable ilk="argument" name="message" />
        <variable ilk="argument" name="title" />
      </scope>
      <scope doc="Ask a question; return true if the answer is yes" ilk="function" line="102" lineend="105" name="askyesno" returns="bool" signature="askyesno(title=None, message=None, **options)">
        <variable citdl="_show()" line="104" name="s" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable ilk="argument" name="message" />
        <variable ilk="argument" name="title" />
      </scope>
      <scope doc="Ask a question; return true if the answer is yes, None if cancelled." ilk="function" line="107" lineend="114" name="askyesnocancel" returns="bool" signature="askyesnocancel(title=None, message=None, **options)">
        <variable citdl="_show()" line="109" name="s" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable ilk="argument" name="message" />
        <variable ilk="argument" name="title" />
      </scope>
      <scope doc="Show an error message" ilk="function" line="89" lineend="91" name="showerror" returns="_show()" signature="showerror(title=None, message=None, **options)">
        <variable ilk="argument" name="message" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable ilk="argument" name="title" />
      </scope>
      <scope doc="Show an info message" ilk="function" line="81" lineend="83" name="showinfo" returns="_show()" signature="showinfo(title=None, message=None, **options)">
        <variable ilk="argument" name="message" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable ilk="argument" name="title" />
      </scope>
      <scope doc="Show a warning message" ilk="function" line="85" lineend="87" name="showwarning" returns="_show()" signature="showwarning(title=None, message=None, **options)">
        <variable ilk="argument" name="message" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable ilk="argument" name="title" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="67" lineend="79" name="_show" returns="str" signature="_show(title=None, message=None, _icon=None, _type=None, **options)">
        <variable ilk="argument" name="title" />
        <variable ilk="argument" name="message" />
        <variable ilk="argument" name="_icon" />
        <variable ilk="argument" name="_type" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable line="72" name="res" />
      </scope>
    </scope>
    <scope doc="Fraction, infinite-precision, real numbers." ilk="blob" lang="Python3" name="fractions">
      <scope classrefs="Rational" doc="This class implements rational numbers.  Fraction(8, 6) will produce a rational number equivalent to" ilk="class" line="41" lineend="572" name="Fraction">
        <scope attributes="protected" doc="Helper for comparison operators, for internal use only." ilk="function" line="515" lineend="537" name="_richcmp" returns="NotImplemented" signature="_richcmp(other, op)">
          <variable citdl="Fraction" ilk="argument" name="self" />
          <variable citdl="other.real" ilk="argument" name="other" />
          <variable ilk="argument" name="op" />
        </scope>
        <scope doc="Converts a finite float to a rational number, exactly." ilk="function" line="121" lineend="134" name="from_float" returns="Fraction.from_float.cls()" signature="from_float(f)">
          <variable citdl="Fraction" ilk="argument" name="cls" />
          <variable ilk="argument" name="f" />
        </scope>
        <scope attributes="protected" doc="a * b" ilk="function" line="355" lineend="357" name="_mul" returns="Fraction" signature="_mul(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope ilk="function" line="225" lineend="230" name="__str__" returns="tuple" signature="str(self)">
          <variable citdl="Fraction" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="561" lineend="562" name="__reduce__" returns="tuple" signature="__reduce__()">
          <variable citdl="Fraction" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="a + b" ilk="function" line="339" lineend="343" name="_add" returns="Fraction" signature="_add(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="Will be math.floor(a) in 3.0." ilk="function" line="443" lineend="445" name="__floor__" returns="int" signature="__floor__()">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope doc="a % b" ilk="function" line="381" lineend="384" name="__rmod__" returns="Fraction" signature="__rmod__(a)">
          <variable citdl="Fraction" ilk="argument" name="b" />
          <variable ilk="argument" name="a" />
          <variable citdl="int" line="383" name="div" />
        </scope>
        <scope doc="Will be math.ceil(a) in 3.0." ilk="function" line="447" lineend="450" name="__ceil__" returns="int" signature="__ceil__()">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope doc="a &lt; b" ilk="function" line="539" lineend="541" name="__lt__" returns="Fraction._richcmp()" signature="__lt__(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="a ** b" ilk="function" line="410" lineend="422" name="__rpow__" returns="Fraction" signature="__rpow__(a)">
          <variable citdl="Fraction" ilk="argument" name="b" />
          <variable ilk="argument" name="a" />
        </scope>
        <scope doc="Constructs a Rational." ilk="function" line="57" lineend="118" name="__new__" signature="__new__(numerator=0, denominator=None)">
          <variable citdl="Fraction" ilk="argument" name="cls" />
          <variable citdl="int()" ilk="argument" name="numerator" />
          <variable citdl="int" ilk="argument" name="denominator" />
          <variable line="64" name="self" />
          <variable citdl="_RATIONAL_FORMAT.match()" line="74" name="m" />
          <variable citdl="m.group()" line="79" name="denom" />
          <variable citdl="m.group()" line="84" name="decimal" />
          <variable citdl="len()" line="86" name="scale" />
          <variable citdl="m.group()" line="89" name="exp" />
          <variable citdl="gcd()" line="115" name="g" />
        </scope>
        <scope ilk="function" line="432" lineend="434" name="__abs__" returns="Fraction" signature="abs(a)">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope doc="Converts a finite Decimal instance to a rational number, exactly." ilk="function" line="137" lineend="156" name="from_decimal" returns="Fraction.from_decimal.cls()" signature="from_decimal(dec)">
          <import line="139" module="decimal" symbol="Decimal" />
          <variable citdl="Fraction" ilk="argument" name="cls" />
          <variable citdl="Decimal()" ilk="argument" name="dec" />
          <variable citdl="int()" line="150" name="digits" />
        </scope>
        <scope doc="+a: Coerces a subclass instance to Fraction" ilk="function" line="424" lineend="426" name="__pos__" returns="Fraction" signature="__pos__()">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope doc="a // b" ilk="function" line="372" lineend="374" name="__rfloordiv__" returns="math.floor()" signature="__rfloordiv__(a)">
          <variable citdl="Fraction" ilk="argument" name="b" />
          <variable ilk="argument" name="a" />
        </scope>
        <scope doc="-a" ilk="function" line="428" lineend="430" name="__neg__" returns="Fraction" signature="__neg__()">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="214" lineend="215" name="numerator (property getter)" returns="a._numerator" signature="numerator (property getter)()">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope ilk="function" line="569" lineend="572" name="__deepcopy__" returns="Fraction" signature="__deepcopy__(memo)">
          <variable citdl="Fraction" ilk="argument" name="self" />
          <variable ilk="argument" name="memo" />
        </scope>
        <variable attributes="property" citdl="a._denominator" line="218" name="denominator" />
        <scope attributes="__hidden__" ilk="function" line="218" lineend="219" name="denominator (property getter)" returns="a._denominator" signature="denominator (property getter)()">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope attributes="protected" doc="Generates forward and reverse operators given a purely- rational operator and a function from the operator module." ilk="function" line="232" lineend="337" name="_operator_fallbacks" returns="tuple" signature="_operator_fallbacks(fallback_operator)">
          <variable citdl="Fraction" ilk="argument" name="monomorphic_operator" />
          <variable ilk="argument" name="fallback_operator" />
          <scope ilk="function" line="312" lineend="320" name="forward" returns="NotImplemented" signature="forward(a, b)">
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="b" />
            <variable citdl="str" line="321" name="__name__" />
            <variable citdl="monomorphic_operator.__doc__" line="322" name="__doc__" />
          </scope>
          <scope ilk="function" line="324" lineend="333" name="reverse" returns="NotImplemented" signature="reverse(b, a)">
            <variable ilk="argument" name="b" />
            <variable ilk="argument" name="a" />
            <variable citdl="str" line="334" name="__name__" />
            <variable citdl="monomorphic_operator.__doc__" line="335" name="__doc__" />
          </scope>
        </scope>
        <scope doc="a ** b" ilk="function" line="386" lineend="408" name="__pow__" returns="Fraction" signature="__pow__(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
          <variable citdl="b.numerator" line="396" name="power" />
        </scope>
        <scope doc="a &gt; b" ilk="function" line="543" lineend="545" name="__gt__" returns="Fraction._richcmp()" signature="__gt__(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="a != 0" ilk="function" line="555" lineend="557" name="__bool__" returns="bool" signature="__bool__()">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <scope attributes="protected" doc="a - b" ilk="function" line="347" lineend="351" name="_sub" returns="Fraction" signature="_sub(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="a == b" ilk="function" line="496" lineend="513" name="__eq__" returns="NotImplemented" signature="__eq__(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable citdl="b.real" ilk="argument" name="b" />
        </scope>
        <scope doc="Will be round(self, ndigits) in 3.0." ilk="function" line="452" lineend="475" name="__round__" returns="floor" signature="__round__(ndigits=None)">
          <variable citdl="Fraction" ilk="argument" name="self" />
          <variable ilk="argument" name="ndigits" />
          <variable citdl="abs()" line="468" name="shift" />
        </scope>
        <scope doc="Closest Fraction to self with denominator at most max_denominator." ilk="function" line="158" lineend="211" name="limit_denominator" returns="Fraction" signature="limit_denominator(max_denominator=1000000)">
          <variable citdl="Fraction" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="max_denominator" />
          <variable citdl="int" line="195" name="q1" />
          <variable citdl="int" line="195" name="q0" />
          <variable citdl="int" line="195" name="p0" />
          <variable citdl="int" line="195" name="p1" />
          <variable citdl="self._denominator" line="196" name="d" />
          <variable citdl="self._numerator" line="196" name="n" />
          <variable citdl="int" line="198" name="a" />
          <variable citdl="int" line="199" name="q2" />
          <variable citdl="int" line="205" name="k" />
          <variable citdl="" line="206" name="bound1" />
          <variable citdl="" line="207" name="bound2" />
        </scope>
        <scope doc="a % b" ilk="function" line="376" lineend="379" name="__mod__" returns="Fraction" signature="__mod__(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
          <variable citdl="int" line="378" name="div" />
        </scope>
        <scope ilk="function" line="436" lineend="441" name="__trunc__" returns="int" signature="trunc(a)">
          <variable citdl="Fraction" ilk="argument" name="a" />
        </scope>
        <variable attributes="property" citdl="a._numerator" line="214" name="numerator" />
        <variable citdl="tuple" line="54" name="__slots__" />
        <scope doc="a &lt;= b" ilk="function" line="547" lineend="549" name="__le__" returns="Fraction._richcmp()" signature="__le__(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope attributes="protected" doc="a / b" ilk="function" line="361" lineend="364" name="_div" returns="Fraction" signature="_div(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope ilk="function" line="221" lineend="223" name="__repr__" returns="tuple" signature="repr(self)">
          <variable citdl="Fraction" ilk="argument" name="self" />
        </scope>
        <scope doc="a // b" ilk="function" line="368" lineend="370" name="__floordiv__" returns="math.floor()" signature="__floordiv__(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="Tricky because values that are exactly representable as a float must have the same hash as that float." ilk="function" line="477" lineend="494" name="__hash__" returns="hash()" signature="hash(self)">
          <variable citdl="Fraction" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="564" lineend="567" name="__copy__" returns="Fraction" signature="__copy__()">
          <variable citdl="Fraction" ilk="argument" name="self" />
        </scope>
        <scope doc="a &gt;= b" ilk="function" line="551" lineend="553" name="__ge__" returns="Fraction._richcmp()" signature="__ge__(b)">
          <variable citdl="Fraction" ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
      </scope>
      <variable citdl="list" line="11" name="__all__" />
      <scope doc="Calculate the Greatest Common Divisor of a and b." ilk="function" line="15" lineend="23" name="gcd" signature="gcd(a, b)">
        <variable ilk="argument" name="a" />
        <variable ilk="argument" name="b" />
      </scope>
      <import module="math" />
      <import module="numbers" />
      <import module="operator" />
      <import module="re" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="26" name="_RATIONAL_FORMAT" />
    </scope>
    <scope doc="Python interface for the &apos;lsprof&apos; profiler. Compatible with the &apos;profile&apos; module." ilk="blob" lang="Python3" name="cProfile">
      <scope classrefs="Profiler" doc="Profile(custom_timer=None, time_unit=None, subcalls=True, builtins=True)  Builds a profiler object using the specified timer function." ilk="class" line="66" lineend="151" name="Profile" signature="Profile(custom_timer=None, time_unit=None, subcalls=True, builtins=True)">
        <variable attributes="__instancevar__" citdl="dict" line="96" name="stats" />
        <scope ilk="function" line="90" lineend="92" name="create_stats" signature="create_stats()">
          <variable citdl="Profile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="79" lineend="81" name="print_stats" signature="print_stats(sort=-1)">
          <import line="80" module="pstats" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="sort" />
        </scope>
        <scope ilk="function" line="132" lineend="135" name="run" returns="self.runctx()" signature="run(cmd)">
          <import line="133" module="__main__" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable citdl="dict" line="134" name="dict" />
        </scope>
        <scope ilk="function" line="83" lineend="88" name="dump_stats" signature="dump_stats(file)">
          <import line="84" module="marshal" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="open()" line="85" name="f" />
        </scope>
        <scope ilk="function" line="146" lineend="151" name="runcall" returns="Profile.runcall.func()" signature="runcall(func, *args, **kw)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="137" lineend="143" name="runctx" returns="Profile" signature="runctx(cmd, globals, locals)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="globals" />
          <variable ilk="argument" name="locals" />
        </scope>
        <scope ilk="function" line="94" lineend="127" name="snapshot_stats" signature="snapshot_stats()">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable citdl="self.getstats()" line="95" name="entries" />
          <variable citdl="dict" line="97" name="callersdicts" />
          <variable citdl="label()" line="100" name="func" />
          <variable citdl="entry.callcount" line="101" name="nc" />
          <variable citdl="entry.callcount" line="102" name="cc" />
          <variable citdl="subentry.inlinetime" line="103" name="tt" />
          <variable citdl="entry.totaltime" line="104" name="ct" />
          <variable citdl="dict" line="105" name="callers" />
          <variable line="122" name="prev" />
        </scope>
      </scope>
      <variable citdl="list" line="7" name="__all__" />
      <import module="_lsprof" />
      <scope doc="# Backwards compatibility." ilk="function" line="60" lineend="62" name="help" signature="help()" />
      <scope ilk="function" line="155" lineend="159" name="label" returns="tuple" signature="label(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="163" lineend="191" name="main" returns="OptionParser()" signature="main()">
        <variable citdl="str" line="166" name="usage" />
        <variable citdl="open()" line="183" name="fp" />
        <variable citdl="OptionParser()" line="167" name="parser" />
        <variable citdl="fp.read()" line="185" name="script" />
      </scope>
      <scope doc="Run statement under profiler optionally saving results in filename" ilk="function" line="14" lineend="37" name="run" returns="prof.print_stats()" signature="run(statement, filename=None, sort=-1)">
        <variable citdl="int" ilk="argument" name="sort" />
        <variable citdl="Profile()" line="25" name="prof" />
        <variable citdl="prof.print_stats()" line="26" name="result" />
        <variable ilk="argument" name="statement" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Run statement under profiler, supplying your own globals and locals, optionally saving results in filename." ilk="function" line="39" lineend="57" name="runctx" returns="prof.print_stats()" signature="runctx(statement, globals, locals, filename=None)">
        <variable ilk="argument" name="filename" />
        <variable ilk="argument" name="globals" />
        <variable citdl="prof.print_stats()" line="46" name="result" />
        <variable ilk="argument" name="statement" />
        <variable citdl="Profile()" line="45" name="prof" />
        <variable ilk="argument" name="locals" />
      </scope>
    </scope>
    <scope doc="HTTP/1.1 client library  &lt;intro stuff goes here&gt;" ilk="blob" lang="Python3" name="http.client">
      <variable citdl="int" line="103" name="ACCEPTED" />
      <variable citdl="int" line="147" name="BAD_GATEWAY" />
      <variable citdl="int" line="121" name="BAD_REQUEST" />
      <scope classrefs="HTTPException" ilk="class" line="1114" lineend="1117" name="BadStatusLine">
        <variable attributes="__instancevar__" line="1117" name="line" />
        <variable attributes="__instancevar__" citdl="tuple" line="1116" name="args" />
        <scope attributes="__ctor__" ilk="function" line="1115" lineend="1117" name="__init__" signature="BadStatusLine(line)">
          <variable citdl="BadStatusLine" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
      </scope>
      <variable citdl="int" line="130" name="CONFLICT" />
      <variable citdl="int" line="96" name="CONTINUE" />
      <variable citdl="int" line="102" name="CREATED" />
      <scope classrefs="ImproperConnectionState" ilk="class" line="1108" lineend="1109" name="CannotSendHeader" />
      <scope classrefs="ImproperConnectionState" ilk="class" line="1105" lineend="1106" name="CannotSendRequest" />
      <variable citdl="int" line="138" name="EXPECTATION_FAILED" />
      <variable citdl="int" line="141" name="FAILED_DEPENDENCY" />
      <variable citdl="int" line="124" name="FORBIDDEN" />
      <variable citdl="int" line="114" name="FOUND" />
      <scope ilk="function" line="1058" lineend="1062" name="FakeSocket" signature="FakeSocket(sock, sslobj)">
        <variable ilk="argument" name="sock" />
        <variable ilk="argument" name="sslobj" />
      </scope>
      <variable citdl="int" line="149" name="GATEWAY_TIMEOUT" />
      <variable citdl="int" line="131" name="GONE" />
      <scope classrefs="object" ilk="class" line="625" lineend="1027" name="HTTPConnection">
        <scope attributes="protected" ilk="function" line="934" lineend="949" name="_set_content_length" signature="_set_content_length(body)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="body" />
          <variable citdl="str()" line="936" name="thelen" />
        </scope>
        <variable attributes="protected __instancevar__" line="644" name="_tunnel_host" />
        <scope ilk="function" line="676" lineend="677" name="set_debuglevel" signature="set_debuglevel(level)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope doc="Connect to the host and port specified in __init__." ilk="function" line="702" lineend="707" name="connect" signature="connect()">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
        </scope>
        <scope doc="Close the connection to the HTTP server." ilk="function" line="709" lineend="717" name="close" signature="close()">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="674" name="port" />
        <scope attributes="__ctor__" ilk="function" line="636" lineend="649" name="__init__" signature="HTTPConnection(host, port=None, strict=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
          <variable ilk="argument" name="strict" />
          <variable citdl="socket._GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
        </scope>
        <variable attributes="protected __instancevar__" line="645" name="_tunnel_port" />
        <variable attributes="protected __instancevar__" citdl="list" line="640" name="_buffer" />
        <variable attributes="private __instancevar__" citdl="response_class()" line="641" name="__response" />
        <variable attributes="__instancevar__" citdl="socket.create_connection()" line="639" name="sock" />
        <scope doc="Send `str&apos; to the server." ilk="function" line="719" lineend="758" name="send" signature="send(str)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="str" />
          <variable citdl="int" line="734" name="blocksize" />
          <variable citdl="False" line="738" name="encode" />
          <variable citdl="str.mode" line="740" name="mode" />
          <variable citdl="data.encode()" line="751" name="data" />
        </scope>
        <variable citdl="int" line="634" name="strict" />
        <variable attributes="private __instancevar__" citdl="str" line="642" name="__state" />
        <variable citdl="HTTPResponse" line="630" name="response_class" />
        <variable citdl="int" line="633" name="debuglevel" />
        <scope doc="Send a request to the server." ilk="function" line="788" lineend="895" name="putrequest" signature="putrequest(method, url, skip_host=0, skip_accept_encoding=0)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="method" />
          <variable citdl="str" ilk="argument" name="url" />
          <variable citdl="int" ilk="argument" name="skip_host" />
          <variable citdl="int" ilk="argument" name="skip_accept_encoding" />
          <variable citdl="str" line="830" name="request" />
          <variable citdl="str" line="853" name="netloc" />
          <variable citdl="netloc.encode()" line="859" name="netloc_enc" />
          <variable citdl="self.host.encode()" line="865" name="host_enc" />
        </scope>
        <variable citdl="int" line="632" name="auto_open" />
        <scope attributes="protected" ilk="function" line="651" lineend="657" name="_set_tunnel" signature="_set_tunnel(host, port=None, headers=None)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
          <variable ilk="argument" name="headers" />
        </scope>
        <scope doc="Send a request header line to the server." ilk="function" line="897" lineend="913" name="putheader" signature="putheader(header, *values)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable citdl="header.encode()" ilk="argument" name="header" />
          <variable attributes="varargs" citdl="list()" ilk="argument" name="values" />
          <variable citdl="str.join()" line="911" name="value" />
        </scope>
        <variable attributes="protected __instancevar__" line="655" name="_tunnel_headers" />
        <scope attributes="protected" doc="Send the currently buffered request and clear the buffer." ilk="function" line="767" lineend="786" name="_send_output" signature="_send_output(message_body=None)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="message_body" />
          <variable citdl="str.join()" line="774" name="msg" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="673" name="host" />
        <variable attributes="protected" citdl="str" line="628" name="_http_vsn_str" />
        <scope doc="Indicate that the last header line has been sent to the server." ilk="function" line="915" lineend="928" name="endheaders" signature="endheaders(message_body=None)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="message_body" />
        </scope>
        <variable attributes="protected __instancevar__" line="643" name="_method" />
        <scope attributes="protected" ilk="function" line="679" lineend="700" name="_tunnel" signature="_tunnel()">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable citdl="str" line="681" name="connect_str" />
          <variable citdl="connect_str.encode()" line="682" name="connect_bytes" />
          <variable citdl="str" line="685" name="header_str" />
          <variable citdl="header_str.encode()" line="686" name="header_bytes" />
          <variable citdl="response_class()" line="689" name="response" />
          <variable citdl="response.fp.readline()" line="698" name="line" />
        </scope>
        <scope attributes="protected" ilk="function" line="951" lineend="970" name="_send_request" signature="_send_request(method, url, body, headers)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="method" />
          <variable ilk="argument" name="url" />
          <variable citdl="body.encode()" ilk="argument" name="body" />
          <variable ilk="argument" name="headers" />
          <variable citdl="dict.fromkeys()" line="953" name="header_names" />
          <variable citdl="dict" line="954" name="skips" />
        </scope>
        <scope doc="Send a complete request to the server." ilk="function" line="930" lineend="932" name="request" signature="request(method, url, body=None, headers={})">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="method" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="body" />
          <variable citdl="dict" ilk="argument" name="headers" />
        </scope>
        <scope attributes="protected" ilk="function" line="659" lineend="674" name="_set_hostport" signature="_set_hostport(host, port)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable citdl="host.rfind()" line="661" name="i" />
          <variable citdl="host.rfind()" line="662" name="j" />
        </scope>
        <scope doc="Get the response from the server." ilk="function" line="972" lineend="1027" name="getresponse" returns="response_class()" signature="getresponse()">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable citdl="response_class()" line="1009" name="response" />
        </scope>
        <scope attributes="protected" doc="Add a line of output to the current request buffer." ilk="function" line="760" lineend="765" name="_output" signature="_output(s)">
          <variable citdl="HTTPConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <variable attributes="protected" citdl="int" line="627" name="_http_vsn" />
        <variable attributes="__instancevar__" citdl="socket._GLOBAL_DEFAULT_TIMEOUT" line="638" name="timeout" />
        <variable citdl="int" line="631" name="default_port" />
      </scope>
      <scope classrefs="Exception" ilk="class" line="1066" lineend="1069" name="HTTPException" />
      <scope classrefs="Message" ilk="class" line="206" lineend="234" name="HTTPMessage">
        <scope doc="Find all header lines matching a given header name." ilk="function" line="213" lineend="234" name="getallmatchingheaders" returns="list" signature="getallmatchingheaders(name)">
          <variable citdl="HTTPMessage" ilk="argument" name="self" />
          <variable citdl="name.lower()" ilk="argument" name="name" />
          <variable citdl="len()" line="224" name="n" />
          <variable citdl="list" line="225" name="lst" />
          <variable citdl="int" line="226" name="hit" />
        </scope>
      </scope>
      <scope classrefs="RawIOBase" ilk="class" line="255" lineend="623" name="HTTPResponse">
        <scope attributes="protected" ilk="function" line="425" lineend="453" name="_check_close" returns="bool" signature="_check_close()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
          <variable citdl="self.headers.get()" line="426" name="conn" />
          <variable citdl="self.headers.get()" line="448" name="pconn" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="293" name="status" />
        <variable attributes="__instancevar__" citdl="str" line="358" name="code" />
        <scope ilk="function" line="598" lineend="601" name="getheader" returns="str.join()" signature="getheader(name, default=None)">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope attributes="protected" ilk="function" line="301" lineend="338" name="_read_status" returns="tuple" signature="_read_status()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
          <variable citdl="str()" line="303" name="line" />
          <variable citdl="str" line="315" name="reason" />
          <variable citdl="str" line="319" name="version" />
          <variable citdl="int()" line="333" name="status" />
        </scope>
        <scope attributes="protected" doc="Read the number of bytes requested, compensating for partial reads." ilk="function" line="572" lineend="593" name="_safe_read" returns="str.join()" signature="_safe_read(amt)">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
          <variable ilk="argument" name="amt" />
          <variable citdl="list" line="586" name="s" />
          <variable citdl="self.fp.read()" line="588" name="chunk" />
        </scope>
        <scope ilk="function" line="469" lineend="470" name="flush" signature="flush()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="455" lineend="458" name="close" signature="close()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="270" lineend="299" name="__init__" signature="HTTPResponse(sock, debuglevel=0, strict=0, method=None, url=None)">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
          <variable ilk="argument" name="sock" />
          <variable citdl="int" ilk="argument" name="debuglevel" />
          <variable citdl="int" ilk="argument" name="strict" />
          <variable ilk="argument" name="method" />
          <variable ilk="argument" name="url" />
        </scope>
        <scope ilk="function" line="477" lineend="484" name="isclosed" returns="bool" signature="isclosed()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="297" name="chunk_left" />
        <scope ilk="function" line="472" lineend="473" name="readable" returns="bool" signature="readable()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <scope doc="Return list of (header, value) tuples." ilk="function" line="603" lineend="607" name="getheaders" returns="list()" signature="getheaders()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="280" name="strict" />
        <variable attributes="__instancevar__" citdl="int" line="292" name="version" />
        <variable attributes="property" citdl="self.isclosed()" line="466" name="closed" />
        <variable attributes="__instancevar__" citdl="int" line="279" name="debuglevel" />
        <variable attributes="__instancevar__" citdl="sock.makefile()" line="278" name="fp" />
        <scope ilk="function" line="340" lineend="423" name="begin" signature="begin()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
          <variable line="352" name="skip" />
          <variable citdl="self.headers.get()" line="383" name="tr_enc" />
          <variable citdl="self.headers.get()" line="396" name="length" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="299" name="will_close" />
        <scope ilk="function" line="486" lineend="516" name="read" returns="self._read_chunked()" signature="read(amt=None)">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="amt" />
          <variable citdl="self.fp.read()" line="496" name="s" />
        </scope>
        <variable attributes="__instancevar__" citdl="reason.strip()" line="294" name="reason" />
        <variable attributes="protected __instancevar__" line="281" name="_method" />
        <scope ilk="function" line="616" lineend="617" name="info" returns="email.message_from_string()" signature="info()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="595" lineend="596" name="fileno" returns="self.fp.fileno()" signature="fileno()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="622" lineend="623" name="getcode" returns="str" signature="getcode()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="518" lineend="570" name="_read_chunked" returns="str.join()" signature="_read_chunked(amt)">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
          <variable ilk="argument" name="amt" />
          <variable citdl="str" line="520" name="chunk_left" />
          <variable citdl="list" line="521" name="value" />
          <variable citdl="self.fp.readline()" line="524" name="line" />
          <variable citdl="line.find()" line="525" name="i" />
        </scope>
        <scope ilk="function" line="611" lineend="612" name="__iter__" returns="HTTPResponse" signature="__iter__()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="619" lineend="620" name="geturl" returns="self.url" signature="geturl()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="parse_headers()" line="289" name="headers" />
        <variable attributes="__instancevar__" citdl="int" line="298" name="length" />
        <scope attributes="__hidden__" ilk="function" line="466" lineend="467" name="closed (property getter)" returns="self.isclosed()" signature="closed (property getter)()">
          <variable citdl="HTTPResponse" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="296" name="chunked" />
      </scope>
      <scope classrefs="HTTPConnection" doc="This class allows communication via SSL." ilk="class" line="1034" lineend="1055" name="HTTPSConnection">
        <variable attributes="__instancevar__" line="1043" name="cert_file" />
        <variable attributes="__instancevar__" citdl="socket.create_connection()" line="1052" name="sock" />
        <scope doc="Connect to a host on a given (SSL) port." ilk="function" line="1045" lineend="1055" name="connect" signature="connect()">
          <variable citdl="HTTPSConnection" ilk="argument" name="self" />
          <variable citdl="socket.create_connection()" line="1048" name="sock" />
        </scope>
        <variable citdl="int" line="1037" name="default_port" />
        <variable attributes="__instancevar__" line="1042" name="key_file" />
        <scope attributes="__ctor__" ilk="function" line="1039" lineend="1043" name="__init__" signature="HTTPSConnection(host, port=None, key_file=None, cert_file=None, strict=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT)">
          <variable citdl="HTTPSConnection" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
          <variable ilk="argument" name="key_file" />
          <variable ilk="argument" name="cert_file" />
          <variable ilk="argument" name="strict" />
          <variable citdl="socket._GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
        </scope>
      </scope>
      <variable citdl="int" line="85" name="HTTPS_PORT" />
      <variable citdl="int" line="84" name="HTTP_PORT" />
      <variable citdl="int" line="150" name="HTTP_VERSION_NOT_SUPPORTED" />
      <variable citdl="int" line="109" name="IM_USED" />
      <variable citdl="int" line="151" name="INSUFFICIENT_STORAGE" />
      <variable citdl="int" line="145" name="INTERNAL_SERVER_ERROR" />
      <scope classrefs="HTTPException" ilk="class" line="1102" lineend="1103" name="ImproperConnectionState" />
      <scope classrefs="HTTPException" ilk="class" line="1088" lineend="1100" name="IncompleteRead">
        <variable attributes="__instancevar__" line="1091" name="partial" />
        <scope ilk="function" line="1099" lineend="1100" name="__str__" returns="repr()" signature="__str__()">
          <variable citdl="IncompleteRead" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="tuple" line="1090" name="args" />
        <scope ilk="function" line="1093" lineend="1098" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="IncompleteRead" ilk="argument" name="self" />
          <variable citdl="str" line="1095" name="e" />
        </scope>
        <variable attributes="__instancevar__" line="1092" name="expected" />
        <scope attributes="__ctor__" ilk="function" line="1089" lineend="1092" name="__init__" signature="IncompleteRead(partial, expected=None)">
          <variable citdl="IncompleteRead" ilk="argument" name="self" />
          <variable ilk="argument" name="partial" />
          <variable ilk="argument" name="expected" />
        </scope>
      </scope>
      <scope classrefs="HTTPException" ilk="class" line="1074" lineend="1075" name="InvalidURL" />
      <variable citdl="int" line="132" name="LENGTH_REQUIRED" />
      <variable citdl="int" line="140" name="LOCKED" />
      <scope classrefs="object" doc="A limited file-like object for HTTP/0.9 responses." ilk="class" line="1122" lineend="1188" name="LineAndFileWrapper">
        <variable attributes="protected __instancevar__" line="1131" name="_line" />
        <variable attributes="protected __instancevar__" citdl="len()" line="1135" name="_line_left" />
        <scope attributes="protected" ilk="function" line="1140" lineend="1147" name="_done" signature="_done()">
          <variable citdl="LineAndFileWrapper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1149" lineend="1169" name="read" returns="self._file.read()" signature="read(amt=None)">
          <variable citdl="LineAndFileWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="amt" />
          <variable citdl="list" line="1154" name="s" />
          <variable citdl="int" line="1162" name="i" />
          <variable line="1163" name="j" />
        </scope>
        <scope ilk="function" line="1179" lineend="1188" name="readlines" returns="list" signature="readlines(size=None)">
          <variable citdl="LineAndFileWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="list" line="1183" name="L" />
        </scope>
        <variable attributes="protected __instancevar__" line="1132" name="_file" />
        <variable attributes="protected __instancevar__" citdl="int" line="1134" name="_line_offset" />
        <scope ilk="function" line="1137" lineend="1138" name="__getattr__" returns="getattr()" signature="__getattr__(attr)">
          <variable citdl="LineAndFileWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
        </scope>
        <scope ilk="function" line="1171" lineend="1177" name="readline" returns="list" signature="readline()">
          <variable citdl="LineAndFileWrapper" ilk="argument" name="self" />
          <variable citdl="list" line="1175" name="s" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="1133" name="_line_consumed" />
        <scope attributes="__ctor__" ilk="function" line="1130" lineend="1135" name="__init__" signature="LineAndFileWrapper(line, file)">
          <variable citdl="LineAndFileWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable ilk="argument" name="file" />
        </scope>
      </scope>
      <variable citdl="int" line="204" name="MAXAMOUNT" />
      <variable citdl="int" line="126" name="METHOD_NOT_ALLOWED" />
      <variable citdl="int" line="113" name="MOVED_PERMANENTLY" />
      <variable citdl="int" line="112" name="MULTIPLE_CHOICES" />
      <variable citdl="int" line="108" name="MULTI_STATUS" />
      <variable citdl="int" line="104" name="NON_AUTHORITATIVE_INFORMATION" />
      <variable citdl="int" line="127" name="NOT_ACCEPTABLE" />
      <variable citdl="int" line="152" name="NOT_EXTENDED" />
      <variable citdl="int" line="125" name="NOT_FOUND" />
      <variable citdl="int" line="146" name="NOT_IMPLEMENTED" />
      <variable citdl="int" line="116" name="NOT_MODIFIED" />
      <variable citdl="int" line="105" name="NO_CONTENT" />
      <scope classrefs="HTTPException" ilk="class" line="1071" lineend="1072" name="NotConnected" />
      <variable citdl="int" line="101" name="OK" />
      <variable citdl="int" line="107" name="PARTIAL_CONTENT" />
      <variable citdl="int" line="123" name="PAYMENT_REQUIRED" />
      <variable citdl="int" line="133" name="PRECONDITION_FAILED" />
      <variable citdl="int" line="98" name="PROCESSING" />
      <variable citdl="int" line="128" name="PROXY_AUTHENTICATION_REQUIRED" />
      <variable citdl="int" line="137" name="REQUESTED_RANGE_NOT_SATISFIABLE" />
      <variable citdl="int" line="134" name="REQUEST_ENTITY_TOO_LARGE" />
      <variable citdl="int" line="129" name="REQUEST_TIMEOUT" />
      <variable citdl="int" line="135" name="REQUEST_URI_TOO_LONG" />
      <variable citdl="int" line="106" name="RESET_CONTENT" />
      <scope classrefs="ImproperConnectionState" ilk="class" line="1111" lineend="1112" name="ResponseNotReady" />
      <variable citdl="int" line="115" name="SEE_OTHER" />
      <variable citdl="int" line="148" name="SERVICE_UNAVAILABLE" />
      <variable citdl="int" line="97" name="SWITCHING_PROTOCOLS" />
      <variable citdl="int" line="118" name="TEMPORARY_REDIRECT" />
      <variable citdl="int" line="122" name="UNAUTHORIZED" />
      <variable citdl="int" line="139" name="UNPROCESSABLE_ENTITY" />
      <variable citdl="int" line="136" name="UNSUPPORTED_MEDIA_TYPE" />
      <variable citdl="int" line="142" name="UPGRADE_REQUIRED" />
      <variable citdl="int" line="117" name="USE_PROXY" />
      <scope classrefs="HTTPException" ilk="class" line="1085" lineend="1086" name="UnimplementedFileMode" />
      <scope classrefs="HTTPException" ilk="class" line="1077" lineend="1080" name="UnknownProtocol">
        <variable attributes="__instancevar__" citdl="tuple" line="1079" name="args" />
        <variable attributes="__instancevar__" line="1080" name="version" />
        <scope attributes="__ctor__" ilk="function" line="1078" lineend="1080" name="__init__" signature="UnknownProtocol(version)">
          <variable citdl="UnknownProtocol" ilk="argument" name="self" />
          <variable ilk="argument" name="version" />
        </scope>
      </scope>
      <scope classrefs="HTTPException" ilk="class" line="1082" lineend="1083" name="UnknownTransferEncoding" />
      <variable citdl="list" line="77" name="__all__" />
      <import module="email" />
      <scope classrefs="Exception" ilk="class" line="1120" name="error" />
      <import module="io" />
      <import module="os" />
      <scope doc="Parses only RFC2822 headers from a file pointer." ilk="function" line="236" lineend="253" name="parse_headers" signature="parse_headers(fp, _class=&lt;class &apos;http.client.HTTPMessage&apos;&gt;)">
        <variable ilk="argument" name="fp" />
        <variable citdl="list" line="246" name="headers" />
        <variable citdl="fp.readline()" line="248" name="line" />
        <variable citdl="HTTPMessage" ilk="argument" name="_class" />
        <variable line="252" name="hstring" />
      </scope>
      <variable citdl="dict" line="155" name="responses" />
      <import module="socket" />
      <import module="ssl" />
      <scope doc="Parse a URL into 5 components: &lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt; Return a 5-tuple: (scheme, netloc, path, query, fragment)." ilk="function" name="urlsplit" signature="urlsplit(url, scheme=&apos;&apos;, allow_fragments=True)" />
      <import module="warnings" />
      <variable attributes="protected __hidden__" citdl="str" line="91" name="_CS_REQ_STARTED" />
      <variable attributes="protected __hidden__" citdl="str" line="90" name="_CS_IDLE" />
      <variable attributes="protected __hidden__" citdl="str" line="87" name="_UNKNOWN" />
      <variable attributes="protected __hidden__" citdl="str" line="92" name="_CS_REQ_SENT" />
    </scope>
    <scope doc="# This module is used to map the old Python 2 names to the new names used in # Python 3 for the pickle module.  This needed to make pickle streams # generated with Python 2 loadable by Python 3." ilk="blob" lang="Python3" name="_compat_pickle">
      <variable citdl="dict" line="8" name="IMPORT_MAPPING" />
      <variable citdl="dict" line="66" name="NAME_MAPPING" />
      <variable citdl="dict" line="80" name="REVERSE_IMPORT_MAPPING" />
      <variable citdl="dict" line="81" name="REVERSE_NAME_MAPPING" />
    </scope>
    <scope doc="Interfaces for launching and remotely controlling Web browsers." ilk="blob" lang="Python3" name="webbrowser">
      <scope classrefs="GenericBrowser" doc="Class for all browsers which are to be started in the background." ilk="class" line="185" lineend="202" name="BackgroundBrowser">
        <scope ilk="function" line="189" lineend="202" name="open" returns="bool" signature="open(url, new=0, autoraise=True)">
          <variable citdl="BackgroundBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="int" ilk="argument" name="new" />
          <variable citdl="True" ilk="argument" name="autoraise" />
          <variable citdl="list" line="190" name="cmdline" />
          <variable citdl="subprocess.Popen()" line="194" name="p" />
          <variable citdl="getattr()" line="196" name="setsid" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Parent class for all browsers. Do not use directly." ilk="class" line="139" lineend="155" name="BaseBrowser">
        <variable attributes="__instancevar__" citdl="str" line="145" name="name" />
        <variable attributes="__instancevar__" citdl="str" line="146" name="basename" />
        <variable citdl="list" line="142" name="args" />
        <scope ilk="function" line="151" lineend="152" name="open_new" returns="BaseBrowser.open()" signature="open_new(url)">
          <variable citdl="BaseBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
        </scope>
        <scope ilk="function" line="148" lineend="149" name="open" signature="open(url, new=0, autoraise=True)">
          <variable citdl="BaseBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="int" ilk="argument" name="new" />
          <variable citdl="True" ilk="argument" name="autoraise" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="144" lineend="146" name="__init__" signature="BaseBrowser(name=&apos;&apos;)">
          <variable citdl="BaseBrowser" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="154" lineend="155" name="open_new_tab" returns="BaseBrowser.open()" signature="open_new_tab(url)">
          <variable citdl="BaseBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
        </scope>
      </scope>
      <scope classrefs="UnixBrowser" doc="Launcher class for Elinks browsers." ilk="class" line="323" lineend="334" name="Elinks">
        <variable citdl="str" line="328" name="remote_action_newwin" />
        <variable citdl="False" line="334" name="redirect_stdout" />
        <variable citdl="str" line="327" name="remote_action" />
        <variable citdl="list" line="326" name="remote_args" />
        <variable citdl="False" line="330" name="background" />
        <variable citdl="str" line="329" name="remote_action_newtab" />
      </scope>
      <scope classrefs="Exception" ilk="class" line="15" lineend="16" name="Error" />
      <scope classrefs="UnixBrowser" doc="Launcher class for Galeon/Epiphany browsers." ilk="class" line="300" lineend="308" name="Galeon">
        <variable citdl="list" line="304" name="remote_args" />
        <variable citdl="str" line="306" name="remote_action_newwin" />
        <variable citdl="list" line="303" name="raise_opts" />
        <variable citdl="True" line="308" name="background" />
        <variable citdl="str" line="305" name="remote_action" />
      </scope>
      <scope classrefs="BaseBrowser" doc="Class for all browsers started with a command and without remote functionality." ilk="class" line="158" lineend="182" name="GenericBrowser">
        <variable attributes="__instancevar__" citdl="os.path.basename()" line="170" name="basename" />
        <variable attributes="__instancevar__" citdl="list" line="165" name="args" />
        <scope ilk="function" line="172" lineend="182" name="open" returns="bool" signature="open(url, new=0, autoraise=True)">
          <variable citdl="GenericBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="int" ilk="argument" name="new" />
          <variable citdl="True" ilk="argument" name="autoraise" />
          <variable citdl="list" line="173" name="cmdline" />
          <variable citdl="subprocess.Popen()" line="177" name="p" />
        </scope>
        <variable attributes="__instancevar__" line="164" name="name" />
        <scope attributes="__ctor__" ilk="function" line="162" lineend="170" name="__init__" signature="GenericBrowser(name)">
          <variable citdl="GenericBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <scope classrefs="BaseBrowser" ilk="class" line="394" lineend="437" name="Grail">
        <scope attributes="protected" ilk="function" line="398" lineend="422" name="_find_grail_rc" returns="socket.socket()" signature="_find_grail_rc()">
          <import line="399" module="glob" />
          <import line="400" module="pwd" />
          <import line="401" module="socket" />
          <import line="402" module="tempfile" />
          <variable citdl="Grail" ilk="argument" name="self" />
          <variable citdl="os.path.join()" line="403" name="tempdir" />
          <variable line="405" name="user" />
          <variable citdl="os.path.join()" line="406" name="filename" />
          <variable citdl="glob.glob()" line="407" name="maybes" />
          <variable citdl="socket.socket()" line="410" name="s" />
        </scope>
        <scope ilk="function" line="432" lineend="437" name="open" returns="_remote()" signature="open(url, new=0, autoraise=True)">
          <variable citdl="Grail" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="int" ilk="argument" name="new" />
          <variable citdl="True" ilk="argument" name="autoraise" />
          <variable citdl="_remote()" line="434" name="ok" />
        </scope>
        <scope attributes="protected" ilk="function" line="424" lineend="430" name="_remote" returns="int" signature="_remote(action)">
          <variable citdl="Grail" ilk="argument" name="self" />
          <variable ilk="argument" name="action" />
          <variable citdl="_find_grail_rc()" line="425" name="s" />
        </scope>
      </scope>
      <scope classrefs="BaseBrowser" doc="Controller for the KDE File Manager (kfm, or Konqueror).  See the output of ``kfmclient --commands``" ilk="class" line="337" lineend="391" name="Konqueror">
        <scope ilk="function" line="344" lineend="391" name="open" returns="bool" signature="open(url, new=0, autoraise=True)">
          <variable citdl="Konqueror" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="int" ilk="argument" name="new" />
          <variable citdl="True" ilk="argument" name="autoraise" />
          <variable citdl="str" line="347" name="action" />
          <variable citdl="io.open()" line="351" name="devnull" />
          <variable citdl="getattr()" line="354" name="setsid" />
          <variable citdl="subprocess.Popen()" line="359" name="p" />
        </scope>
      </scope>
      <scope classrefs="UnixBrowser" doc="Launcher class for Mozilla/Netscape browsers." ilk="class" line="285" lineend="295" name="Mozilla">
        <variable citdl="str" line="292" name="remote_action_newwin" />
        <variable citdl="list" line="288" name="raise_opts" />
        <variable citdl="str" line="291" name="remote_action" />
        <variable citdl="list" line="290" name="remote_args" />
        <variable citdl="True" line="295" name="background" />
        <variable citdl="str" line="293" name="remote_action_newtab" />
      </scope>
      <scope classrefs="UnixBrowser" doc="Launcher class for Mozilla/Netscape browsers." ilk="class" line="297" name="Netscape" />
      <scope classrefs="UnixBrowser" doc="Launcher class for Opera browser." ilk="class" line="311" lineend="320" name="Opera">
        <variable citdl="str" line="318" name="remote_action_newwin" />
        <variable citdl="list" line="314" name="raise_opts" />
        <variable citdl="str" line="317" name="remote_action" />
        <variable citdl="list" line="316" name="remote_args" />
        <variable citdl="True" line="320" name="background" />
        <variable citdl="str" line="319" name="remote_action_newtab" />
      </scope>
      <scope classrefs="BaseBrowser" doc="Parent class for all Unix browsers with remote functionality." ilk="class" line="205" lineend="282" name="UnixBrowser">
        <variable line="211" name="remote_action_newwin" />
        <variable line="208" name="raise_opts" />
        <variable citdl="True" line="214" name="redirect_stdout" />
        <variable line="210" name="remote_action" />
        <scope attributes="protected" ilk="function" line="216" lineend="258" name="_invoke" returns="bool" signature="_invoke(args, remote, autoraise)">
          <variable citdl="UnixBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="remote" />
          <variable citdl="int()" ilk="argument" name="autoraise" />
          <variable citdl="list" line="217" name="raise_opt" />
          <variable line="221" name="opt" />
          <variable citdl="list" line="224" name="cmdline" />
          <variable citdl="io.open()" line="227" name="inout" />
          <variable citdl="getattr()" line="233" name="setsid" />
          <variable citdl="subprocess.Popen()" line="237" name="p" />
          <variable citdl="p.poll()" line="244" name="rc" />
        </scope>
        <variable citdl="list" line="209" name="remote_args" />
        <variable citdl="False" line="213" name="background" />
        <scope ilk="function" line="260" lineend="282" name="open" returns="bool" signature="open(url, new=0, autoraise=True)">
          <variable citdl="UnixBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="int" ilk="argument" name="new" />
          <variable citdl="True" ilk="argument" name="autoraise" />
          <variable line="262" name="action" />
          <variable citdl="list" line="274" name="args" />
          <variable citdl="_invoke()" line="276" name="success" />
        </scope>
        <variable line="212" name="remote_action_newtab" />
      </scope>
      <scope classrefs="BaseBrowser" ilk="class" line="514" lineend="523" name="WindowsDefault">
        <scope ilk="function" line="515" lineend="523" name="open" returns="bool" signature="open(url, new=0, autoraise=True)">
          <variable citdl="WindowsDefault" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="int" ilk="argument" name="new" />
          <variable citdl="True" ilk="argument" name="autoraise" />
        </scope>
      </scope>
      <variable citdl="list" line="13" name="__all__" />
      <variable citdl="str" name="browser" />
      <scope doc="Return a browser launcher instance appropriate for the environment." ilk="function" line="29" lineend="53" name="get" returns="BackgroundBrowser()" signature="get(using=None)">
        <variable ilk="argument" name="using" />
        <variable citdl="list" line="32" name="alternatives" />
        <variable citdl="_synthesize()" line="46" name="command" />
        <variable citdl="shlex.split()" line="38" name="browser" />
      </scope>
      <variable citdl="str" line="532" name="iexplore" />
      <import module="io" />
      <scope ilk="function" line="639" lineend="661" name="main" signature="main()">
        <variable citdl="str" line="641" name="usage" />
        <variable line="658" name="url" />
        <variable citdl="int" line="650" name="new_win" />
      </scope>
      <scope ilk="function" line="59" lineend="64" name="open" returns="bool" signature="open(url, new=0, autoraise=True)">
        <variable ilk="argument" name="url" />
        <variable citdl="int" ilk="argument" name="new" />
        <variable citdl="True" ilk="argument" name="autoraise" />
        <variable citdl="get()" line="61" name="browser" />
      </scope>
      <scope ilk="function" line="66" lineend="67" name="open_new" returns="open()" signature="open_new(url)">
        <variable ilk="argument" name="url" />
      </scope>
      <scope ilk="function" line="69" lineend="70" name="open_new_tab" returns="open()" signature="open_new_tab(url)">
        <variable ilk="argument" name="url" />
      </scope>
      <import module="os" />
      <scope doc="Register a browser connector and, optionally, connection." ilk="function" line="21" lineend="27" name="register" signature="register(name, klass, instance=None, update_tryorder=1)">
        <variable citdl="int" ilk="argument" name="update_tryorder" />
        <variable ilk="argument" name="instance" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="klass" />
      </scope>
      <scope ilk="function" line="447" lineend="489" name="register_X_browsers" signature="register_X_browsers()" />
      <import module="shlex" />
      <import module="stat" />
      <import module="subprocess" />
      <import module="sys" />
      <import module="time" />
      <scope attributes="__hidden__" classrefs="BaseBrowser" doc="Launcher class for Aqua browsers on Mac OS X" ilk="class" line="557" lineend="601" name="MacOSX">
        <scope attributes="__ctor__" ilk="function" line="567" lineend="568" name="__init__" signature="MacOSX(name)">
          <variable citdl="MacOSX" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="__instancevar__" line="568" name="name" />
        <scope ilk="function" line="570" lineend="601" name="open" returns="bool" signature="open(url, new=0, autoraise=True)">
          <variable citdl="MacOSX" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="url" />
          <variable citdl="int" ilk="argument" name="new" />
          <variable citdl="True" ilk="argument" name="autoraise" />
          <variable citdl="str" line="580" name="script" />
          <variable citdl="str" line="584" name="toWindow" />
          <variable citdl="url.replace()" line="589" name="cmd" />
          <variable citdl="os.popen()" line="595" name="osapipe" />
          <variable citdl="osapipe.close()" line="600" name="rc" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Return True if cmd is executable or can be found on the executable search path." ilk="function" line="122" lineend="134" name="_iscommand" returns="bool" signature="_iscommand(cmd)">
        <variable ilk="argument" name="cmd" />
        <variable citdl="os.environ.get()" line="127" name="path" />
        <variable citdl="os.path.join()" line="131" name="exe" />
      </scope>
      <variable attributes="protected __hidden__" line="622" name="_userchoices" />
      <variable attributes="__hidden__" citdl="_synthesize()" line="629" name="cmd" />
      <scope attributes="protected __hidden__" ilk="function" line="115" lineend="120" name="_isexecutable" returns="bool" signature="_isexecutable(cmd)">
        <variable ilk="argument" name="cmd" />
        <variable line="117" name="mode" />
      </scope>
      <scope attributes="__hidden__" classrefs="BaseBrowser" ilk="class" line="548" lineend="551" name="InternetConfig">
        <scope ilk="function" line="549" lineend="551" name="open" returns="bool" signature="open(url, new=0, autoraise=True)">
          <variable citdl="InternetConfig" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="int" ilk="argument" name="new" />
          <variable citdl="True" ilk="argument" name="autoraise" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Attempt to synthesize a controller base on existing controllers." ilk="function" line="73" lineend="102" name="_synthesize" returns="list" signature="_synthesize(browser, update_tryorder=1)">
        <import line="96" module="copy" />
        <variable ilk="argument" name="browser" />
        <variable citdl="int" ilk="argument" name="update_tryorder" />
        <variable line="85" name="cmd" />
        <variable citdl="os.path.basename()" line="88" name="name" />
        <variable line="90" name="command" />
        <variable citdl="copy.copy()" line="94" name="controller" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="18" name="_browsers" />
      <variable attributes="__hidden__" line="632" name="cmdline" />
      <variable attributes="protected __hidden__" citdl="list" line="19" name="_tryorder" />
    </scope>
    <scope doc="# Tkinter font wrapper # # written by Fredrik Lundh, February 1998" ilk="blob" lang="Python3" name="tkinter.font">
      <variable citdl="str" line="16" name="BOLD" />
      <scope classrefs="object" doc="Represents a named font.  Constructor options are:" ilk="class" line="24" lineend="165" name="Font">
        <scope ilk="function" line="96" lineend="97" name="__str__" returns="str" signature="__str__()">
          <variable citdl="Font" ilk="argument" name="self" />
        </scope>
        <scope doc="Return font metrics." ilk="function" line="150" lineend="165" name="metrics" returns="int()" signature="metrics(*options)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable attributes="varargs" citdl="dict" ilk="argument" name="options" />
          <variable citdl="_split()" line="161" name="res" />
        </scope>
        <scope doc="Return actual font attributes" ilk="function" line="121" lineend="127" name="actual" returns="Font._call()" signature="actual(option=None)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
        </scope>
        <variable attributes="__instancevar__" citdl="str()" line="76" name="name" />
        <scope ilk="function" line="102" lineend="103" name="__getitem__" returns="self.cget()" signature="__getitem__(key)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="108" lineend="115" name="__del__" signature="__del__()">
          <variable citdl="Font" ilk="argument" name="self" />
        </scope>
        <scope doc="Modify font attributes" ilk="function" line="134" lineend="141" name="config" returns="Font._mkdict()" signature="config(**options)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="options" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="tkinter._default_root" line="92" name="_root" />
        <scope doc="Get font attribute" ilk="function" line="130" lineend="132" name="cget" returns="Font._call()" signature="cget(option)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
        </scope>
        <scope attributes="protected" ilk="function" line="60" lineend="64" name="_mkdict" returns="dict" signature="_mkdict(args)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable ilk="argument" name="args" />
          <variable citdl="dict" line="61" name="options" />
        </scope>
        <scope attributes="protected" ilk="function" line="54" lineend="58" name="_get" returns="tuple()" signature="_get(args)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable ilk="argument" name="args" />
          <variable citdl="list" line="55" name="options" />
        </scope>
        <scope ilk="function" line="105" lineend="106" name="__setitem__" signature="__setitem__(key, value)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="root.tk.call" line="94" name="_call" />
        <variable citdl="Font.config" line="144" name="configure" />
        <scope doc="Return text width" ilk="function" line="146" lineend="148" name="measure" returns="int()" signature="measure(text)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="79" name="delete_font" />
        <scope doc="Return a distinct copy of the current font" ilk="function" line="117" lineend="119" name="copy" returns="Font" signature="copy()">
          <variable citdl="Font" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="99" lineend="100" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="protected" ilk="function" line="47" lineend="52" name="_set" returns="tuple()" signature="_set(kw)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable ilk="argument" name="kw" />
          <variable citdl="list" line="48" name="options" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="66" lineend="94" name="__init__" signature="Font(root=None, font=None, name=None, exists=False, **options)">
          <variable citdl="Font" ilk="argument" name="self" />
          <variable citdl="tkinter._default_root" ilk="argument" name="root" />
          <variable citdl="root.tk.splitlist()" ilk="argument" name="font" />
          <variable citdl="str()" ilk="argument" name="name" />
          <variable citdl="False" ilk="argument" name="exists" />
          <variable attributes="kwargs" ilk="argument" name="options" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="root.tk.splitlist" line="93" name="_split" />
      </scope>
      <variable citdl="str" line="17" name="ITALIC" />
      <variable citdl="str" line="14" name="NORMAL" />
      <variable citdl="str" line="15" name="ROMAN" />
      <variable citdl="str" line="9" name="__version__" />
      <scope doc="Get font families (as a tuple)" ilk="function" line="167" lineend="171" name="families" returns="root.tk.splitlist()" signature="families(root=None)">
        <variable citdl="tkinter._default_root" ilk="argument" name="root" />
      </scope>
      <scope doc="Get names of defined fonts (as a tuple)" ilk="function" line="173" lineend="177" name="names" returns="root.tk.splitlist()" signature="names(root=None)">
        <variable citdl="tkinter._default_root" ilk="argument" name="root" />
      </scope>
      <scope doc="Given the name of a tk named font, returns a Font representation." ilk="function" line="19" lineend="22" name="nametofont" returns="Font()" signature="nametofont(name)">
        <variable ilk="argument" name="name" />
      </scope>
      <import module="tkinter" />
      <variable attributes="__hidden__" line="212" name="fb" />
      <variable attributes="__hidden__" citdl="tkinter.Tk()" line="184" name="root" />
      <variable attributes="__hidden__" citdl="tkinter.Label()" line="206" name="w" />
      <variable attributes="__hidden__" citdl="Font" line="187" name="f" />
    </scope>
    <scope doc="Generic interface to all dbm clones.  Use" ilk="blob" lang="Python3" name="dbm">
      <variable citdl="list" line="39" name="__all__" />
      <import module="dumb" />
      <variable citdl="tuple" line="47" name="error" />
      <import module="io" />
      <scope ilk="function" line="57" lineend="88" name="open" returns="mod.open()" signature="open(file, flag=&apos;r&apos;, mode=438)">
        <variable citdl="whichdb()" line="72" name="result" />
        <variable citdl="int" ilk="argument" name="mode" />
        <variable citdl="str" ilk="argument" name="flag" />
        <variable attributes="protected" citdl="__import__()" line="66" name="_defaultmod" />
        <variable ilk="argument" name="file" />
        <variable citdl="__import__()" line="62" name="mod" />
      </scope>
      <import module="os" />
      <import module="struct" />
      <import module="sys" />
      <scope doc="Guess which db package to use to open a db file." ilk="function" line="91" lineend="187" name="whichdb" returns="str" signature="whichdb(filename)">
        <variable citdl="ndbm.open()" line="123" name="d" />
        <variable citdl="io.open()" line="106" name="f" />
        <variable citdl="f.read()" line="153" name="s16" />
        <variable ilk="argument" name="filename" />
        <variable citdl="list" line="155" name="s" />
        <variable line="133" name="size" />
      </scope>
      <variable attributes="protected __hidden__" citdl="list" line="50" name="_names" />
      <variable attributes="protected __hidden__" line="51" name="_defaultmod" />
      <variable attributes="protected __hidden__" citdl="dict" line="52" name="_modules" />
    </scope>
    <scope doc="This module provides access to the Unicode Character Database which defines character properties for all Unicode characters. The data in this database is based on the UnicodeData.txt file version" ilk="blob" lang="Python3" name="unicodedata">
      <scope classrefs="object" ilk="class" name="UCD" />
      <scope doc="Returns the bidirectional category assigned to the Unicode character unichr as string." ilk="function" name="bidirectional" signature="bidirectional(unichr)" />
      <scope doc="Returns the general category assigned to the Unicode character unichr as string." ilk="function" name="category" signature="category(unichr)" />
      <scope doc="Returns the canonical combining class assigned to the Unicode character unichr as integer." ilk="function" name="combining" signature="combining(unichr)" />
      <scope doc="Returns the decimal value assigned to the Unicode character unichr as integer." ilk="function" name="decimal" signature="decimal(unichr[, default])" />
      <scope doc="Returns the character decomposition mapping assigned to the Unicode character unichr as string." ilk="function" name="decomposition" signature="decomposition(unichr)" />
      <scope doc="Returns the digit value assigned to the Unicode character unichr as integer." ilk="function" name="digit" signature="digit(unichr[, default])" />
      <scope doc="Returns the east asian width assigned to the Unicode character unichr as string." ilk="function" name="east_asian_width" signature="east_asian_width(unichr)" />
      <scope doc="Look up character by name." ilk="function" name="lookup" signature="lookup(name)" />
      <scope doc="Returns the mirrored property assigned to the Unicode character unichr as integer." ilk="function" name="mirrored" signature="mirrored(unichr)" />
      <scope doc="Returns the name assigned to the Unicode character unichr as a string." ilk="function" name="name" signature="name(unichr[, default])" />
      <scope doc="Return the normal form &apos;form&apos; for the Unicode string unistr." ilk="function" name="normalize" signature="normalize(form, unistr)" />
      <scope doc="Returns the numeric value assigned to the Unicode character unichr as float." ilk="function" name="numeric" signature="numeric(unichr[, default])" />
      <variable citdl="UCD" name="ucd_3_2_0" />
      <variable citdl="PyCapsule" name="ucnhash_CAPI" />
      <variable citdl="str" name="unidata_version" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_ast">
      <scope classrefs="object" ilk="class" name="AST" />
      <scope classrefs="operator" ilk="class" name="Add" />
      <scope classrefs="boolop" ilk="class" name="And" />
      <scope classrefs="stmt" ilk="class" name="Assert" />
      <scope classrefs="stmt" ilk="class" name="Assign" />
      <scope classrefs="expr" ilk="class" name="Attribute" />
      <scope classrefs="stmt" ilk="class" name="AugAssign" />
      <scope classrefs="expr_context" ilk="class" name="AugLoad" />
      <scope classrefs="expr_context" ilk="class" name="AugStore" />
      <scope classrefs="expr" ilk="class" name="BinOp" />
      <scope classrefs="operator" ilk="class" name="BitAnd" />
      <scope classrefs="operator" ilk="class" name="BitOr" />
      <scope classrefs="operator" ilk="class" name="BitXor" />
      <scope classrefs="expr" ilk="class" name="BoolOp" />
      <scope classrefs="stmt" ilk="class" name="Break" />
      <scope classrefs="expr" ilk="class" name="Bytes" />
      <scope classrefs="expr" ilk="class" name="Call" />
      <scope classrefs="stmt" ilk="class" name="ClassDef" />
      <scope classrefs="expr" ilk="class" name="Compare" />
      <scope classrefs="stmt" ilk="class" name="Continue" />
      <scope classrefs="expr_context" ilk="class" name="Del" />
      <scope classrefs="stmt" ilk="class" name="Delete" />
      <scope classrefs="expr" ilk="class" name="Dict" />
      <scope classrefs="expr" ilk="class" name="DictComp" />
      <scope classrefs="operator" ilk="class" name="Div" />
      <scope classrefs="expr" ilk="class" name="Ellipsis" />
      <scope classrefs="cmpop" ilk="class" name="Eq" />
      <scope classrefs="excepthandler" ilk="class" name="ExceptHandler" />
      <scope classrefs="stmt" ilk="class" name="Expr" />
      <scope classrefs="mod" ilk="class" name="Expression" />
      <scope classrefs="slice" ilk="class" name="ExtSlice" />
      <scope classrefs="operator" ilk="class" name="FloorDiv" />
      <scope classrefs="stmt" ilk="class" name="For" />
      <scope classrefs="stmt" ilk="class" name="FunctionDef" />
      <scope classrefs="expr" ilk="class" name="GeneratorExp" />
      <scope classrefs="stmt" ilk="class" name="Global" />
      <scope classrefs="cmpop" ilk="class" name="Gt" />
      <scope classrefs="cmpop" ilk="class" name="GtE" />
      <scope classrefs="stmt" ilk="class" name="If" />
      <scope classrefs="expr" ilk="class" name="IfExp" />
      <scope classrefs="stmt" ilk="class" name="Import" />
      <scope classrefs="stmt" ilk="class" name="ImportFrom" />
      <scope classrefs="cmpop" ilk="class" name="In" />
      <scope classrefs="slice" ilk="class" name="Index" />
      <scope classrefs="mod" ilk="class" name="Interactive" />
      <scope classrefs="unaryop" ilk="class" name="Invert" />
      <scope classrefs="cmpop" ilk="class" name="Is" />
      <scope classrefs="cmpop" ilk="class" name="IsNot" />
      <scope classrefs="operator" ilk="class" name="LShift" />
      <scope classrefs="expr" ilk="class" name="Lambda" />
      <scope classrefs="expr" ilk="class" name="List" />
      <scope classrefs="expr" ilk="class" name="ListComp" />
      <scope classrefs="expr_context" ilk="class" name="Load" />
      <scope classrefs="cmpop" ilk="class" name="Lt" />
      <scope classrefs="cmpop" ilk="class" name="LtE" />
      <scope classrefs="operator" ilk="class" name="Mod" />
      <scope classrefs="mod" ilk="class" name="Module" />
      <scope classrefs="operator" ilk="class" name="Mult" />
      <scope classrefs="expr" ilk="class" name="Name" />
      <scope classrefs="stmt" ilk="class" name="Nonlocal" />
      <scope classrefs="unaryop" ilk="class" name="Not" />
      <scope classrefs="cmpop" ilk="class" name="NotEq" />
      <scope classrefs="cmpop" ilk="class" name="NotIn" />
      <scope classrefs="expr" ilk="class" name="Num" />
      <scope classrefs="boolop" ilk="class" name="Or" />
      <scope classrefs="expr_context" ilk="class" name="Param" />
      <scope classrefs="stmt" ilk="class" name="Pass" />
      <scope classrefs="operator" ilk="class" name="Pow" />
      <variable citdl="int" name="PyCF_ONLY_AST" />
      <scope classrefs="operator" ilk="class" name="RShift" />
      <scope classrefs="stmt" ilk="class" name="Raise" />
      <scope classrefs="stmt" ilk="class" name="Return" />
      <scope classrefs="expr" ilk="class" name="Set" />
      <scope classrefs="expr" ilk="class" name="SetComp" />
      <scope classrefs="slice" ilk="class" name="Slice" />
      <scope classrefs="expr" ilk="class" name="Starred" />
      <scope classrefs="expr_context" ilk="class" name="Store" />
      <scope classrefs="expr" ilk="class" name="Str" />
      <scope classrefs="operator" ilk="class" name="Sub" />
      <scope classrefs="expr" ilk="class" name="Subscript" />
      <scope classrefs="mod" ilk="class" name="Suite" />
      <scope classrefs="stmt" ilk="class" name="TryExcept" />
      <scope classrefs="stmt" ilk="class" name="TryFinally" />
      <scope classrefs="expr" ilk="class" name="Tuple" />
      <scope classrefs="unaryop" ilk="class" name="UAdd" />
      <scope classrefs="unaryop" ilk="class" name="USub" />
      <scope classrefs="expr" ilk="class" name="UnaryOp" />
      <scope classrefs="stmt" ilk="class" name="While" />
      <scope classrefs="stmt" ilk="class" name="With" />
      <scope classrefs="expr" ilk="class" name="Yield" />
      <variable citdl="str" name="__version__" />
      <scope classrefs="AST" ilk="class" name="alias" />
      <scope classrefs="AST" ilk="class" name="arg" />
      <scope classrefs="AST" ilk="class" name="arguments" />
      <scope classrefs="AST" ilk="class" name="boolop" />
      <scope classrefs="AST" ilk="class" name="cmpop" />
      <scope classrefs="AST" ilk="class" name="comprehension" />
      <scope classrefs="AST" ilk="class" name="excepthandler" />
      <scope classrefs="AST" ilk="class" name="expr" />
      <scope classrefs="AST" ilk="class" name="expr_context" />
      <scope classrefs="AST" ilk="class" name="keyword" />
      <scope classrefs="AST" ilk="class" name="mod" />
      <scope classrefs="AST" ilk="class" name="operator" />
      <scope classrefs="AST" ilk="class" name="slice" />
      <scope classrefs="AST" ilk="class" name="stmt" />
      <scope classrefs="AST" ilk="class" name="unaryop" />
    </scope>
    <scope doc="# base class for tk common dialogues # # this module provides a base class for accessing the common" ilk="blob" lang="Python3" name="tkinter.commondialog">
      <variable citdl="str" name="ACTIVE" />
      <variable citdl="str" name="ALL" />
      <variable citdl="str" name="ANCHOR" />
      <variable citdl="str" name="ARC" />
      <scope ilk="function" name="At" signature="At(x, y=None)" />
      <scope doc="# Indices: # XXX I don&apos;t like these -- take them away" ilk="function" name="AtEnd" signature="AtEnd()" />
      <scope ilk="function" name="AtInsert" signature="AtInsert(*args)" />
      <scope ilk="function" name="AtSelFirst" signature="AtSelFirst()" />
      <scope ilk="function" name="AtSelLast" signature="AtSelLast()" />
      <variable citdl="str" name="BASELINE" />
      <variable citdl="str" name="BEVEL" />
      <variable citdl="str" name="BOTH" />
      <variable citdl="str" name="BOTTOM" />
      <variable citdl="str" name="BROWSE" />
      <variable citdl="str" name="BUTT" />
      <scope classrefs="Misc" doc="Internal class." ilk="class" name="BaseWidget" />
      <scope classrefs="Image" doc="Widget which can display a bitmap." ilk="class" name="BitmapImage" />
      <scope classrefs="Variable" doc="Value holder for boolean variables." ilk="class" name="BooleanVar" />
      <scope classrefs="Widget" doc="Button widget." ilk="class" name="Button" />
      <variable citdl="str" name="CASCADE" />
      <variable citdl="str" name="CENTER" />
      <variable citdl="str" name="CHAR" />
      <variable citdl="str" name="CHECKBUTTON" />
      <variable citdl="str" name="CHORD" />
      <variable citdl="str" name="COMMAND" />
      <variable citdl="str" name="CURRENT" />
      <scope classrefs="object" doc="Internal class. Stores function to call when some user defined Tcl function is called e.g. after an event occurred." ilk="class" name="CallWrapper" />
      <scope classrefs="Widget" doc="Canvas widget to display graphical elements like lines or text." ilk="class" name="Canvas" />
      <scope classrefs="Widget" doc="Checkbutton widget which is either in on- or off-state." ilk="class" name="Checkbutton" />
      <variable citdl="str" name="DISABLED" />
      <variable citdl="str" name="DOTBOX" />
      <scope classrefs="object" ilk="class" line="13" lineend="60" name="Dialog">
        <scope attributes="protected" ilk="function" line="28" lineend="29" name="_fixoptions" signature="_fixoptions()">
          <variable citdl="Dialog" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="34" lineend="60" name="show" returns="_fixresult()" signature="show(**options)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="options" />
          <variable citdl="Frame()" line="44" name="w" />
          <variable citdl="w.tk.call()" line="48" name="s" />
        </scope>
        <scope attributes="protected" ilk="function" line="31" lineend="32" name="_fixresult" signature="_fixresult(widget, result)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
          <variable ilk="argument" name="result" />
        </scope>
        <variable attributes="__instancevar__" line="23" name="master" />
        <variable line="15" name="command" />
        <variable attributes="__instancevar__" line="24" name="options" />
        <scope attributes="__ctor__" ilk="function" line="17" lineend="26" name="__init__" signature="Dialog(master=None, **options)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="options" />
        </scope>
      </scope>
      <scope classrefs="Variable" doc="Value holder for float variables." ilk="class" name="DoubleVar" />
      <variable citdl="str" name="E" />
      <variable citdl="str" name="END" />
      <variable citdl="str" name="EW" />
      <variable citdl="int" name="EXCEPTION" />
      <variable citdl="str" name="EXTENDED" />
      <scope classrefs="Widget" doc="Entry widget which allows to display simple text." ilk="class" name="Entry" />
      <scope classrefs="object" doc="Container for the properties of an event.  Instances of this type are generated if one of the following events occurs:" ilk="class" name="Event" />
      <variable citdl="int" name="FALSE" />
      <variable citdl="str" name="FIRST" />
      <variable citdl="str" name="FLAT" />
      <scope classrefs="Widget" doc="Frame widget which may contain other widgets and can have a 3D border." ilk="class" name="Frame" />
      <variable citdl="str" name="GROOVE" />
      <scope classrefs="object" doc="Geometry manager Grid.  Base class to use the methods grid_* in every widget." ilk="class" name="Grid" />
      <variable citdl="str" name="HIDDEN" />
      <variable citdl="str" name="HORIZONTAL" />
      <variable citdl="str" name="INSERT" />
      <variable citdl="str" name="INSIDE" />
      <scope classrefs="object" doc="Base class for images." ilk="class" name="Image" />
      <scope classrefs="Variable" doc="Value holder for integer variables." ilk="class" name="IntVar" />
      <variable citdl="str" name="LAST" />
      <variable citdl="str" name="LEFT" />
      <scope classrefs="Widget" doc="Label widget which can display text and bitmaps." ilk="class" name="Label" />
      <scope classrefs="Widget" doc="labelframe widget." ilk="class" name="LabelFrame" />
      <scope classrefs="Widget" doc="Listbox widget which can display a list of strings." ilk="class" name="Listbox" />
      <variable citdl="str" name="MITER" />
      <variable citdl="str" name="MOVETO" />
      <variable citdl="str" name="MULTIPLE" />
      <scope classrefs="Widget" doc="Menu widget which allows to display menu bars, pull-down menus and pop-up menus." ilk="class" name="Menu" />
      <scope classrefs="Widget" doc="Menubutton widget, obsolete since Tk8.0." ilk="class" name="Menubutton" />
      <scope classrefs="Widget" doc="Message widget to display multiline text. Obsolete since Label does it too." ilk="class" name="Message" />
      <scope classrefs="object" doc="Internal class.  Base class which defines methods common for interior widgets." ilk="class" name="Misc" />
      <variable citdl="str" name="N" />
      <variable citdl="str" name="NE" />
      <variable citdl="int" name="NO" />
      <variable citdl="str" name="NONE" />
      <variable citdl="str" name="NORMAL" />
      <variable citdl="str" name="NS" />
      <variable citdl="str" name="NSEW" />
      <variable citdl="str" name="NUMERIC" />
      <variable citdl="str" name="NW" />
      <scope doc="Inhibit setting of default root window." ilk="function" name="NoDefaultRoot" signature="NoDefaultRoot()" />
      <variable citdl="int" name="OFF" />
      <variable citdl="int" name="ON" />
      <variable citdl="str" name="OUTSIDE" />
      <scope classrefs="Menubutton" doc="OptionMenu which allows the user to select a value from a menu." ilk="class" name="OptionMenu" />
      <variable citdl="str" name="PAGES" />
      <variable citdl="str" name="PIESLICE" />
      <variable citdl="str" name="PROJECTING" />
      <scope classrefs="object" doc="Geometry manager Pack.  Base class to use the methods pack_* in every widget." ilk="class" name="Pack" />
      <scope classrefs="Widget" doc="panedwindow widget." ilk="class" name="PanedWindow" />
      <scope classrefs="Image" doc="Widget which can display colored images in GIF, PPM/PGM format." ilk="class" name="PhotoImage" />
      <scope classrefs="object" doc="Geometry manager Place.  Base class to use the methods place_* in every widget." ilk="class" name="Place" />
      <variable citdl="str" name="RADIOBUTTON" />
      <variable citdl="str" name="RAISED" />
      <variable citdl="int" name="READABLE" />
      <variable citdl="str" name="RIDGE" />
      <variable citdl="str" name="RIGHT" />
      <variable citdl="str" name="ROUND" />
      <scope classrefs="Widget" doc="Radiobutton widget which shows only one of several buttons in on-state." ilk="class" name="Radiobutton" />
      <variable citdl="str" name="S" />
      <variable citdl="str" name="SCROLL" />
      <variable citdl="str" name="SE" />
      <variable citdl="str" name="SEL" />
      <variable citdl="str" name="SEL_FIRST" />
      <variable citdl="str" name="SEL_LAST" />
      <variable citdl="str" name="SEPARATOR" />
      <variable citdl="str" name="SINGLE" />
      <variable citdl="str" name="SOLID" />
      <variable citdl="str" name="SUNKEN" />
      <variable citdl="str" name="SW" />
      <scope classrefs="Widget" doc="Scale widget which can display a numerical scale." ilk="class" name="Scale" />
      <scope classrefs="Widget" doc="Scrollbar widget which displays a slider at a certain position." ilk="class" name="Scrollbar" />
      <scope classrefs="Widget" doc="spinbox widget." ilk="class" name="Spinbox" />
      <scope classrefs="Variable" doc="Value holder for strings variables." ilk="class" name="StringVar" />
      <scope classrefs="Button" ilk="class" name="Studbutton" />
      <variable citdl="str" name="TOP" />
      <variable citdl="int" name="TRUE" />
      <scope ilk="function" name="Tcl" signature="Tcl(screenName=None, baseName=None, className=&apos;Tk&apos;, useTk=0)" />
      <scope classrefs="Exception" ilk="class" name="TclError" />
      <variable citdl="float" name="TclVersion" />
      <scope classrefs="Widget" doc="Text widget which can display text in various forms." ilk="class" name="Text" />
      <scope classrefs="Misc Wm" doc="Toplevel widget of Tk which represents mostly the main window of an appliation. It has an associated Tcl interpreter." ilk="class" name="Tk" />
      <variable citdl="float" name="TkVersion" />
      <scope classrefs="BaseWidget Wm" doc="Toplevel widget, e.g. for dialogs." ilk="class" name="Toplevel" />
      <scope classrefs="Button" ilk="class" name="Tributton" />
      <variable citdl="str" name="UNDERLINE" />
      <variable citdl="str" name="UNITS" />
      <variable citdl="str" name="VERTICAL" />
      <scope classrefs="object" doc="Class to define value holders for e.g. buttons.  Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations" ilk="class" name="Variable" />
      <variable citdl="str" name="W" />
      <variable citdl="str" name="WORD" />
      <variable citdl="int" name="WRITABLE" />
      <scope classrefs="BaseWidget Pack Place Grid" doc="Internal class.  Base class for a widget which can be positioned with the geometry managers" ilk="class" name="Widget" />
      <scope classrefs="object" doc="Provides functions for the communication with the window manager." ilk="class" name="Wm" />
      <variable citdl="str" name="X" />
      <variable citdl="str" name="Y" />
      <variable citdl="int" name="YES" />
      <import module="constants" />
      <import module="font" />
      <scope doc="Convert true and false to integer values 1 and 0." ilk="function" name="getboolean" signature="getboolean(s)" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number  Convert a string or number to a floating point number, if possible." ilk="class" name="getdouble" />
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer  Convert a string or number to an integer, if possible.  A floating" ilk="class" name="getint" />
      <scope ilk="function" name="image_names" signature="image_names()" />
      <scope ilk="function" name="image_types" signature="image_types()" />
      <scope doc="Run the main loop of Tcl." ilk="function" name="mainloop" signature="mainloop(n=0)" />
      <import module="sys" />
      <import module="ttk" />
      <variable citdl="int" name="wantobjects" />
    </scope>
    <scope doc="Fixer for apply().  This converts apply(func, v, k) into (func)(*v, **k)." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_apply">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" ilk="class" line="14" lineend="58" name="FixApply">
        <variable citdl="str" line="16" name="PATTERN" />
        <scope ilk="function" line="30" lineend="58" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixApply" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="self.syms" line="31" name="syms" />
          <variable citdl="func.clone()" line="33" name="func" />
          <variable citdl="args.clone()" line="34" name="args" />
          <variable citdl="results.get()" line="35" name="kwds" />
          <variable citdl="node.prefix" line="36" name="prefix" />
          <variable citdl="list" line="49" name="l_newargs" />
        </scope>
      </scope>
      <import module="fixer_base" />
      <scope ilk="function" name="parenthesize" signature="parenthesize(node)" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="Find modules used by a script, using introspection." ilk="blob" lang="Python3" name="modulefinder">
      <scope doc="# A Public interface" ilk="function" line="31" lineend="34" name="AddPackagePath" signature="AddPackagePath(packagename, path)">
        <variable ilk="argument" name="path" />
        <variable ilk="argument" name="packagename" />
        <variable citdl="packagePathMap.get()" line="32" name="paths" />
      </scope>
      <variable citdl="bytes" line="20" name="HAVE_ARGUMENT" />
      <variable citdl="bytes" line="16" name="IMPORT_NAME" />
      <variable citdl="bytes" line="15" name="LOAD_CONST" />
      <scope classrefs="object" ilk="class" line="47" lineend="69" name="Module">
        <variable attributes="__instancevar__" citdl="dict" line="60" name="starimports" />
        <variable attributes="__instancevar__" line="51" name="__file__" />
        <variable attributes="__instancevar__" line="52" name="__path__" />
        <scope ilk="function" line="62" lineend="69" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="Module" ilk="argument" name="self" />
          <variable citdl="str" line="63" name="s" />
        </scope>
        <variable attributes="__instancevar__" line="50" name="__name__" />
        <variable attributes="__instancevar__" line="53" name="__code__" />
        <variable attributes="__instancevar__" citdl="dict" line="57" name="globalnames" />
        <scope attributes="__ctor__" ilk="function" line="49" lineend="60" name="__init__" signature="Module(name, file=None, path=None)">
          <variable citdl="Module" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="path" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="71" lineend="594" name="ModuleFinder">
        <scope ilk="function" line="389" lineend="439" name="scan_code" signature="scan_code(co, m)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="co" />
          <variable ilk="argument" name="m" />
          <variable citdl="co.co_code" line="390" name="code" />
          <variable citdl="ModuleFinder.scan_opcodes" line="392" name="scanner" />
          <variable citdl="int" line="401" name="have_star" />
          <variable citdl="list" line="405" name="fromlist" />
          <variable citdl="self.modules.get()" line="411" name="mm" />
          <variable citdl="determine_parent()" line="431" name="parent" />
        </scope>
        <scope attributes="protected" ilk="function" line="313" lineend="334" name="_safe_import_hook" signature="_safe_import_hook(name, caller, fromlist, level=-1)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="caller" />
          <variable ilk="argument" name="fromlist" />
          <variable citdl="int" ilk="argument" name="level" />
          <variable citdl="sub" line="333" name="fullname" />
        </scope>
        <scope attributes="protected" ilk="function" line="305" lineend="311" name="_add_badmodule" signature="_add_badmodule(name, caller)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="caller" />
        </scope>
        <scope ilk="function" line="192" lineend="205" name="load_tail" returns="self.import_module()" signature="load_tail(q, tail)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="q" />
          <variable citdl="list" ilk="argument" name="tail" />
          <variable citdl="self.import_module()" line="194" name="m" />
          <variable citdl="tail.find()" line="196" name="i" />
          <variable citdl="list" line="198" name="head" />
          <variable citdl="str" line="199" name="mname" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="83" name="processed_paths" />
        <scope attributes="__ctor__" ilk="function" line="73" lineend="83" name="__init__" signature="ModuleFinder(path=None, debug=0, excludes=[], replace_paths=[])">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable citdl="sys.path" ilk="argument" name="path" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable citdl="list" ilk="argument" name="excludes" />
          <variable citdl="list" ilk="argument" name="replace_paths" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="81" name="excludes" />
        <scope ilk="function" line="94" lineend="98" name="msgin" signature="msgin(*args)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable line="95" name="level" />
        </scope>
        <scope doc="Return a list of modules that appear to be missing." ilk="function" line="515" lineend="521" name="any_missing" returns="missing" signature="any_missing()">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="464" lineend="479" name="find_module" returns="tuple" signature="find_module(name, path, parent=None)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="sys.path" ilk="argument" name="path" />
          <variable ilk="argument" name="parent" />
          <variable citdl="parent.__name__" line="467" name="fullname" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="82" name="replace_paths" />
        <scope ilk="function" line="278" lineend="303" name="load_module" returns="self.load_package()" signature="load_module(fqname, fp, pathname, file_info)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="fqname" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="pathname" />
          <variable ilk="argument" name="file_info" />
          <variable citdl="self.add_module()" line="282" name="m" />
          <variable citdl="compile()" line="286" name="co" />
        </scope>
        <scope ilk="function" line="458" lineend="462" name="add_module" returns="m" signature="add_module(fqname)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="fqname" />
        </scope>
        <scope ilk="function" line="221" lineend="246" name="find_all_submodules" returns="modules.keys()" signature="find_all_submodules(m)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="m" />
          <variable citdl="dict" line="224" name="modules" />
          <variable citdl="list" line="228" name="suffixes" />
          <variable citdl="os.listdir()" line="233" name="names" />
          <variable citdl="list" line="238" name="mod" />
          <variable citdl="len()" line="240" name="n" />
        </scope>
        <scope ilk="function" line="85" lineend="92" name="msg" signature="msg(level, str, *args)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="str" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="112" lineend="117" name="load_file" signature="load_file(pathname)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="pathname" />
          <variable citdl="open()" line="115" name="fp" />
          <variable citdl="tuple" line="116" name="stuff" />
        </scope>
        <scope ilk="function" line="100" lineend="104" name="msgout" signature="msgout(*args)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable line="101" name="level" />
        </scope>
        <scope ilk="function" line="119" lineend="128" name="import_hook" returns="q" signature="import_hook(name, caller=None, fromlist=None, level=-1)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="caller" />
          <variable ilk="argument" name="fromlist" />
          <variable citdl="int" ilk="argument" name="level" />
          <variable citdl="self.determine_parent()" line="121" name="parent" />
          <variable citdl="self.load_tail()" line="123" name="m" />
        </scope>
        <scope ilk="function" line="569" lineend="594" name="replace_paths_in_code" returns="types.CodeType()" signature="replace_paths_in_code(co)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="co" />
          <variable citdl="os.path.normpath()" line="570" name="new_filename" />
          <variable citdl="list()" line="585" name="consts" />
        </scope>
        <scope ilk="function" line="106" lineend="110" name="run_script" signature="run_script(pathname)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="pathname" />
          <variable citdl="open()" line="108" name="fp" />
          <variable citdl="tuple" line="109" name="stuff" />
        </scope>
        <scope ilk="function" line="441" lineend="456" name="load_package" returns="self.add_module()" signature="load_package(fqname, pathname)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable citdl="replacePackageMap.get()" ilk="argument" name="fqname" />
          <variable ilk="argument" name="pathname" />
          <variable citdl="replacePackageMap.get()" line="443" name="newname" />
          <variable citdl="self.add_module()" line="446" name="m" />
        </scope>
        <scope ilk="function" line="130" lineend="163" name="determine_parent" signature="determine_parent(caller, level=-1)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="caller" />
          <variable citdl="int" ilk="argument" name="level" />
          <variable citdl="caller.__name__" line="135" name="pname" />
          <variable line="140" name="parent" />
          <variable citdl="pname.rfind()" line="156" name="i" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="78" name="badmodules" />
        <scope doc="Print a report to stdout, listing the found modules with their paths, as well as modules that are missing, or seem to be missing." ilk="function" line="481" lineend="513" name="report" signature="report()">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable citdl="sorted()" line="489" name="keys" />
          <variable line="491" name="m" />
          <variable citdl="sorted()" line="504" name="mods" />
        </scope>
        <variable attributes="__instancevar__" citdl="sys.path" line="76" name="path" />
        <scope ilk="function" line="360" lineend="387" name="scan_opcodes_25" signature="scan_opcodes_25(co, unpack=struct.unpack)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="co" />
          <variable citdl="struct.unpack" ilk="argument" name="unpack" />
          <variable citdl="list" line="364" name="code" />
          <variable citdl="co.co_names" line="365" name="names" />
          <variable citdl="co.co_consts" line="366" name="consts" />
          <variable citdl="bytes()" line="367" name="LOAD_LOAD_AND_IMPORT" />
          <variable citdl="bytes()" line="369" name="c" />
          <variable line="377" name="level" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="80" name="indent" />
        <scope ilk="function" line="165" lineend="190" name="find_head_package" returns="tuple" signature="find_head_package(parent, name)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="parent" />
          <variable ilk="argument" name="name" />
          <variable citdl="name.find()" line="168" name="i" />
          <variable citdl="list" line="169" name="head" />
          <variable citdl="list" line="170" name="tail" />
          <variable citdl="list" line="175" name="qname" />
          <variable citdl="self.import_module()" line="178" name="q" />
        </scope>
        <scope ilk="function" line="336" lineend="358" name="scan_opcodes" signature="scan_opcodes(co, unpack=struct.unpack)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="co" />
          <variable citdl="struct.unpack" ilk="argument" name="unpack" />
          <variable citdl="list" line="340" name="code" />
          <variable citdl="co.co_names" line="341" name="names" />
          <variable citdl="co.co_consts" line="342" name="consts" />
          <variable line="344" name="c" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="77" name="modules" />
        <variable attributes="__instancevar__" citdl="int" line="79" name="debug" />
        <scope ilk="function" line="207" lineend="219" name="ensure_fromlist" signature="ensure_fromlist(m, fromlist, recursive=0)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="m" />
          <variable ilk="argument" name="fromlist" />
          <variable citdl="int" ilk="argument" name="recursive" />
          <variable citdl="self.find_all_submodules()" line="212" name="all" />
          <variable citdl="str" line="216" name="subname" />
          <variable citdl="self.import_module()" line="217" name="submod" />
        </scope>
        <scope ilk="function" line="248" lineend="276" name="import_module" returns="self.load_module()" signature="import_module(partname, fqname, parent)">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="partname" />
          <variable ilk="argument" name="fqname" />
          <variable ilk="argument" name="parent" />
          <variable citdl="self.load_module()" line="251" name="m" />
        </scope>
        <scope doc="Return two lists, one with modules that are certainly missing and one with modules that *may* be missing." ilk="function" line="523" lineend="567" name="any_missing_maybe" returns="tuple" signature="any_missing_maybe()">
          <variable citdl="ModuleFinder" ilk="argument" name="self" />
          <variable citdl="list" line="532" name="missing" />
          <variable citdl="list" line="533" name="maybe" />
          <variable citdl="name.rfind()" line="537" name="i" />
          <variable citdl="list" line="541" name="subname" />
          <variable citdl="list" line="542" name="pkgname" />
          <variable citdl="self.modules.get()" line="543" name="pkg" />
        </scope>
      </scope>
      <variable citdl="str" line="12" name="READ_MODE" />
      <scope ilk="function" line="43" lineend="44" name="ReplacePackage" signature="ReplacePackage(oldname, newname)">
        <variable ilk="argument" name="newname" />
        <variable ilk="argument" name="oldname" />
      </scope>
      <variable citdl="bytes" line="18" name="STORE_GLOBAL" />
      <variable citdl="bytes" line="17" name="STORE_NAME" />
      <variable citdl="list" line="19" name="STORE_OPS" />
      <import module="dis" />
      <variable citdl="_Feature" name="generators" />
      <import module="imp" />
      <import module="marshal" />
      <import module="os" />
      <variable citdl="dict" line="28" name="packagePathMap" />
      <variable citdl="dict" line="36" name="replacePackageMap" />
      <import module="struct" />
      <import module="sys" />
      <scope ilk="function" line="597" lineend="653" name="test" returns="ModuleFinder" signature="test()">
        <variable citdl="ModuleFinder" line="639" name="mf" />
        <variable citdl="str" line="625" name="script" />
        <variable citdl="list" line="609" name="addpath" />
        <variable citdl="int" line="608" name="domods" />
        <variable citdl="list" line="630" name="path" />
        <variable citdl="int" line="607" name="debug" />
        <variable citdl="list" line="610" name="exclude" />
      </scope>
      <import module="types" />
      <variable attributes="__hidden__" citdl="test()" line="658" name="mf" />
    </scope>
    <scope doc="Manage shelves of pickled objects.  A &quot;shelf&quot; is a persistent, dictionary-like object.  The difference" ilk="blob" lang="Python3" name="shelve">
      <scope classrefs="Shelf" doc="Shelf implementation using the &quot;BSD&quot; db interface.  This adds methods first(), next(), previous(), last() and" ilk="class" line="163" lineend="203" name="BsdDbShelf">
        <scope ilk="function" line="200" lineend="203" name="last" returns="tuple" signature="last()">
          <variable citdl="BsdDbShelf" ilk="argument" name="self" />
          <variable citdl="BytesIO()" line="202" name="f" />
        </scope>
        <scope ilk="function" line="180" lineend="183" name="set_location" returns="tuple" signature="set_location(key)">
          <variable citdl="BsdDbShelf" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="BytesIO()" line="182" name="f" />
        </scope>
        <scope ilk="function" line="185" lineend="188" name="next" returns="tuple" signature="next()">
          <variable citdl="BsdDbShelf" ilk="argument" name="self" />
          <variable citdl="BytesIO()" line="187" name="f" />
        </scope>
        <scope ilk="function" line="190" lineend="193" name="previous" returns="tuple" signature="previous()">
          <variable citdl="BsdDbShelf" ilk="argument" name="self" />
          <variable citdl="BytesIO()" line="192" name="f" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="176" lineend="178" name="__init__" signature="BsdDbShelf(dict, protocol=None, writeback=False, keyencoding=&apos;utf-8&apos;)">
          <variable citdl="BsdDbShelf" ilk="argument" name="self" />
          <variable ilk="argument" name="dict" />
          <variable ilk="argument" name="protocol" />
          <variable citdl="False" ilk="argument" name="writeback" />
          <variable citdl="str" ilk="argument" name="keyencoding" />
        </scope>
        <scope ilk="function" line="195" lineend="198" name="first" returns="tuple" signature="first()">
          <variable citdl="BsdDbShelf" ilk="argument" name="self" />
          <variable citdl="BytesIO()" line="197" name="f" />
        </scope>
      </scope>
      <scope classrefs="_BufferedIOBase" doc="BytesIO([buffer]) -&gt; object  Create a buffered I/O implementation using an in-memory bytes" ilk="class" name="BytesIO" />
      <scope classrefs="Shelf" doc="Shelf implementation using the &quot;dbm&quot; generic dbm interface.  This is initialized with the filename for the dbm database." ilk="class" line="206" lineend="215" name="DbfilenameShelf">
        <scope attributes="__ctor__" ilk="function" line="213" lineend="215" name="__init__" signature="DbfilenameShelf(filename, flag=&apos;c&apos;, protocol=None, writeback=False)">
          <import line="214" module="dbm" />
          <variable citdl="DbfilenameShelf" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="str" ilk="argument" name="flag" />
          <variable ilk="argument" name="protocol" />
          <variable citdl="False" ilk="argument" name="writeback" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Pickler(file, protocol=None) This takes a binary file for writing a pickle data stream. " ilk="class" name="Pickler" />
      <scope classrefs="MutableMapping" doc="Base class for shelf implementations.  This is initialized with a dictionary-like object." ilk="class" line="76" lineend="160" name="Shelf">
        <variable attributes="__instancevar__" citdl="True" line="89" name="writeback" />
        <scope ilk="function" line="108" lineend="116" name="__getitem__" signature="__getitem__(key)">
          <variable citdl="Shelf" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable line="110" name="value" />
          <variable citdl="BytesIO()" line="112" name="f" />
        </scope>
        <scope ilk="function" line="100" lineend="101" name="__contains__" returns="bool" signature="__contains__(key)">
          <variable citdl="Shelf" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="146" lineend="150" name="__del__" signature="__del__()">
          <variable citdl="Shelf" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="90" name="cache" />
        <scope ilk="function" line="152" lineend="160" name="sync" signature="sync()">
          <variable citdl="Shelf" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="93" lineend="95" name="__iter__" signature="__iter__()">
          <variable citdl="Shelf" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="91" name="keyencoding" />
        <variable attributes="__instancevar__" citdl="_ClosedDict" line="85" name="dict" />
        <scope ilk="function" line="97" lineend="98" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="Shelf" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="88" name="_protocol" />
        <scope ilk="function" line="126" lineend="131" name="__delitem__" signature="__delitem__(key)">
          <variable citdl="Shelf" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="118" lineend="124" name="__setitem__" signature="__setitem__(key, value)">
          <variable citdl="Shelf" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="value" />
          <variable citdl="BytesIO()" line="121" name="f" />
          <variable citdl="Pickler()" line="122" name="p" />
        </scope>
        <scope ilk="function" line="133" lineend="144" name="close" signature="close()">
          <variable citdl="Shelf" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="103" lineend="106" name="get" signature="get(key, default=None)">
          <variable citdl="Shelf" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="83" lineend="91" name="__init__" signature="Shelf(dict, protocol=None, writeback=False, keyencoding=&apos;utf-8&apos;)">
          <variable citdl="Shelf" ilk="argument" name="self" />
          <variable ilk="argument" name="dict" />
          <variable citdl="int" ilk="argument" name="protocol" />
          <variable citdl="False" ilk="argument" name="writeback" />
          <variable citdl="str" ilk="argument" name="keyencoding" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Unpickler(file, *, encoding=&apos;ASCII&apos;, errors=&apos;strict&apos;) This takes a binary file for reading a pickle data stream. " ilk="class" name="Unpickler" />
      <variable citdl="list" line="64" name="__all__" />
      <import module="collections" />
      <scope doc="Open a persistent dictionary for reading and writing." ilk="function" line="218" lineend="231" name="open" returns="DbfilenameShelf" signature="open(filename, flag=&apos;c&apos;, protocol=None, writeback=False)">
        <variable citdl="False" ilk="argument" name="writeback" />
        <variable citdl="str" ilk="argument" name="flag" />
        <variable ilk="argument" name="protocol" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="collections.MutableMapping" doc="Marker for a closed dict. Access attempts raise a ValueError." ilk="class" line="66" lineend="74" name="_ClosedDict">
        <scope ilk="function" line="69" lineend="70" name="closed" signature="closed(*args)">
          <variable citdl="_ClosedDict" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable citdl="_ClosedDict.closed" line="71" name="__iter__" />
        <scope ilk="function" line="73" lineend="74" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="_ClosedDict" ilk="argument" name="self" />
        </scope>
      </scope>
    </scope>
    <scope doc="Filename matching with shell patterns.  fnmatch(FILENAME, PATTERN) matches according to the local convention." ilk="blob" lang="Python3" name="fnmatch">
      <variable citdl="list" line="15" name="__all__" />
      <scope doc="Return the subset of the list NAMES that match PAT" ilk="function" line="54" lineend="69" name="filter" returns="list" signature="filter(names, pat)">
        <variable citdl="os.path.normcase()" ilk="argument" name="pat" />
        <variable ilk="argument" name="names" />
        <variable citdl="_compile_pattern()" line="59" name="match" />
        <variable citdl="list" line="57" name="result" />
      </scope>
      <scope doc="Test whether FILENAME matches PATTERN." ilk="function" line="20" lineend="39" name="fnmatch" returns="fnmatchcase()" signature="fnmatch(name, pat)">
        <variable citdl="os.path.normcase()" ilk="argument" name="pat" />
        <variable citdl="os.path.normcase()" ilk="argument" name="name" />
      </scope>
      <scope doc="Test whether FILENAME matches PATTERN, including case." ilk="function" line="71" lineend="79" name="fnmatchcase" returns="bool" signature="fnmatchcase(name, pat)">
        <variable ilk="argument" name="pat" />
        <variable ilk="argument" name="name" />
        <variable citdl="_compile_pattern()" line="78" name="match" />
      </scope>
      <import module="re" />
      <scope doc="Translate a shell PATTERN to a regular expression." ilk="function" line="81" lineend="116" name="translate" returns="tuple" signature="translate(pat)">
        <variable line="90" name="c" />
        <variable ilk="argument" name="pat" />
        <variable citdl="int" line="87" name="i" />
        <variable citdl="str" line="88" name="res" />
        <variable citdl="int" line="97" name="j" />
        <variable citdl="len()" line="87" name="n" />
        <variable citdl="str" line="107" name="stuff" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="18" name="_cacheb" />
      <scope attributes="protected __hidden__" ilk="function" line="41" lineend="52" name="_compile_pattern" returns="regex.match" signature="_compile_pattern(pat)">
        <variable ilk="argument" name="pat" />
        <variable line="42" name="cache" />
        <variable citdl="cache.get()" line="43" name="regex" />
        <variable citdl="str()" line="46" name="pat_str" />
        <variable citdl="translate()" line="47" name="res_str" />
        <variable citdl="bytes()" line="48" name="res" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="17" name="_cache" />
    </scope>
    <scope doc="Internal support module for sre" ilk="blob" lang="Python3" name="sre_parse">
      <variable citdl="str" name="ANY" />
      <variable citdl="str" name="ANY_ALL" />
      <variable citdl="str" name="ASSERT" />
      <variable citdl="str" name="ASSERT_NOT" />
      <variable citdl="str" name="AT" />
      <variable citdl="dict" name="ATCODES" />
      <variable citdl="str" name="AT_BEGINNING" />
      <variable citdl="str" name="AT_BEGINNING_LINE" />
      <variable citdl="str" name="AT_BEGINNING_STRING" />
      <variable citdl="str" name="AT_BOUNDARY" />
      <variable citdl="str" name="AT_END" />
      <variable citdl="str" name="AT_END_LINE" />
      <variable citdl="str" name="AT_END_STRING" />
      <variable citdl="dict" name="AT_LOCALE" />
      <variable citdl="str" name="AT_LOC_BOUNDARY" />
      <variable citdl="str" name="AT_LOC_NON_BOUNDARY" />
      <variable citdl="dict" name="AT_MULTILINE" />
      <variable citdl="str" name="AT_NON_BOUNDARY" />
      <variable citdl="dict" name="AT_UNICODE" />
      <variable citdl="str" name="AT_UNI_BOUNDARY" />
      <variable citdl="str" name="AT_UNI_NON_BOUNDARY" />
      <variable citdl="str" name="BIGCHARSET" />
      <variable citdl="str" name="BRANCH" />
      <variable citdl="str" name="CALL" />
      <variable citdl="dict" line="40" name="CATEGORIES" />
      <variable citdl="str" name="CATEGORY" />
      <variable citdl="str" name="CATEGORY_DIGIT" />
      <variable citdl="str" name="CATEGORY_LINEBREAK" />
      <variable citdl="str" name="CATEGORY_LOC_NOT_WORD" />
      <variable citdl="str" name="CATEGORY_LOC_WORD" />
      <variable citdl="str" name="CATEGORY_NOT_DIGIT" />
      <variable citdl="str" name="CATEGORY_NOT_LINEBREAK" />
      <variable citdl="str" name="CATEGORY_NOT_SPACE" />
      <variable citdl="str" name="CATEGORY_NOT_WORD" />
      <variable citdl="str" name="CATEGORY_SPACE" />
      <variable citdl="str" name="CATEGORY_UNI_DIGIT" />
      <variable citdl="str" name="CATEGORY_UNI_LINEBREAK" />
      <variable citdl="str" name="CATEGORY_UNI_NOT_DIGIT" />
      <variable citdl="str" name="CATEGORY_UNI_NOT_LINEBREAK" />
      <variable citdl="str" name="CATEGORY_UNI_NOT_SPACE" />
      <variable citdl="str" name="CATEGORY_UNI_NOT_WORD" />
      <variable citdl="str" name="CATEGORY_UNI_SPACE" />
      <variable citdl="str" name="CATEGORY_UNI_WORD" />
      <variable citdl="str" name="CATEGORY_WORD" />
      <variable citdl="str" name="CHARSET" />
      <variable citdl="dict" name="CHCODES" />
      <variable citdl="dict" name="CH_LOCALE" />
      <variable citdl="dict" name="CH_UNICODE" />
      <variable citdl="set" line="22" name="DIGITS" />
      <variable citdl="dict" line="29" name="ESCAPES" />
      <variable citdl="str" name="FAILURE" />
      <variable citdl="dict" line="53" name="FLAGS" />
      <variable citdl="str" name="GROUPREF" />
      <variable citdl="str" name="GROUPREF_EXISTS" />
      <variable citdl="str" name="GROUPREF_IGNORE" />
      <variable citdl="set" line="25" name="HEXDIGITS" />
      <variable citdl="str" name="IN" />
      <variable citdl="str" name="INFO" />
      <variable citdl="str" name="IN_IGNORE" />
      <variable citdl="str" name="JUMP" />
      <variable citdl="str" name="LITERAL" />
      <variable citdl="str" name="LITERAL_IGNORE" />
      <variable citdl="int" name="MAGIC" />
      <variable citdl="str" name="MARK" />
      <variable citdl="int" name="MAXREPEAT" />
      <variable citdl="str" name="MAX_REPEAT" />
      <variable citdl="str" name="MAX_UNTIL" />
      <variable citdl="str" name="MIN_REPEAT" />
      <variable citdl="str" name="MIN_REPEAT_ONE" />
      <variable citdl="str" name="MIN_UNTIL" />
      <variable citdl="str" name="NEGATE" />
      <variable citdl="str" name="NOT_LITERAL" />
      <variable citdl="str" name="NOT_LITERAL_IGNORE" />
      <variable citdl="set" line="24" name="OCTDIGITS" />
      <variable citdl="dict" name="OPCODES" />
      <variable citdl="dict" name="OP_IGNORE" />
      <scope classrefs="object" ilk="class" line="66" lineend="87" name="Pattern">
        <scope ilk="function" line="84" lineend="85" name="closegroup" signature="closegroup(gid)">
          <variable citdl="Pattern" ilk="argument" name="self" />
          <variable ilk="argument" name="gid" />
        </scope>
        <scope ilk="function" line="73" lineend="83" name="opengroup" returns="int" signature="opengroup(name=None)">
          <variable citdl="Pattern" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" line="74" name="gid" />
          <variable citdl="self.groupdict.get()" line="77" name="ogid" />
        </scope>
        <scope ilk="function" line="86" lineend="87" name="checkgroup" returns="bool" signature="checkgroup(gid)">
          <variable citdl="Pattern" ilk="argument" name="self" />
          <variable ilk="argument" name="gid" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="69" name="flags" />
        <variable attributes="__instancevar__" citdl="int" line="71" name="groups" />
        <variable attributes="__instancevar__" citdl="dict" line="72" name="groupdict" />
        <variable attributes="__instancevar__" citdl="list" line="70" name="open" />
        <scope attributes="__ctor__" ilk="function" line="68" lineend="72" name="__init__" signature="Pattern()">
          <variable citdl="Pattern" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="str" name="RANGE" />
      <variable citdl="str" name="REPEAT" />
      <variable citdl="str" line="20" name="REPEAT_CHARS" />
      <variable citdl="str" name="REPEAT_ONE" />
      <variable citdl="str" line="19" name="SPECIAL_CHARS" />
      <variable citdl="int" name="SRE_FLAG_ASCII" />
      <variable citdl="int" name="SRE_FLAG_DEBUG" />
      <variable citdl="int" name="SRE_FLAG_DOTALL" />
      <variable citdl="int" name="SRE_FLAG_IGNORECASE" />
      <variable citdl="int" name="SRE_FLAG_LOCALE" />
      <variable citdl="int" name="SRE_FLAG_MULTILINE" />
      <variable citdl="int" name="SRE_FLAG_TEMPLATE" />
      <variable citdl="int" name="SRE_FLAG_UNICODE" />
      <variable citdl="int" name="SRE_FLAG_VERBOSE" />
      <variable citdl="int" name="SRE_INFO_CHARSET" />
      <variable citdl="int" name="SRE_INFO_LITERAL" />
      <variable citdl="int" name="SRE_INFO_PREFIX" />
      <variable citdl="str" name="SUBPATTERN" />
      <variable citdl="str" name="SUCCESS" />
      <scope classrefs="object" ilk="class" line="89" lineend="176" name="SubPattern">
        <scope ilk="function" line="129" lineend="130" name="__delitem__" signature="__delitem__(index)">
          <variable citdl="SubPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="131" lineend="134" name="__getitem__" returns="SubPattern" signature="__getitem__(index)">
          <variable citdl="SubPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="97" lineend="124" name="dump" signature="dump(level=0)">
          <variable citdl="SubPattern" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="level" />
          <variable citdl="int" line="98" name="nl" />
          <variable citdl="tuple" line="99" name="seqtypes" />
          <variable citdl="int" line="109" name="i" />
        </scope>
        <scope ilk="function" line="137" lineend="138" name="insert" signature="insert(index, code)">
          <variable citdl="SubPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="code" />
        </scope>
        <variable attributes="__instancevar__" line="92" name="pattern" />
        <scope ilk="function" line="139" lineend="140" name="append" signature="append(code)">
          <variable citdl="SubPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="code" />
        </scope>
        <scope ilk="function" line="141" lineend="176" name="getwidth" returns="tuple" signature="getwidth()">
          <variable citdl="SubPattern" ilk="argument" name="self" />
          <variable citdl="sys.maxsize" line="145" name="lo" />
          <variable citdl="tuple" line="146" name="UNITCODES" />
          <variable citdl="tuple" line="147" name="REPEATCODES" />
          <variable citdl="sys.maxsize" line="150" name="i" />
          <variable citdl="int" line="151" name="j" />
          <variable citdl="max()" line="157" name="hi" />
        </scope>
        <variable attributes="__instancevar__" citdl="tuple" line="96" name="width" />
        <scope ilk="function" line="135" lineend="136" name="__setitem__" signature="__setitem__(index, code)">
          <variable citdl="SubPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="code" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="91" lineend="96" name="__init__" signature="SubPattern(pattern, data=None)">
          <variable citdl="SubPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="pattern" />
          <variable citdl="list" ilk="argument" name="data" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="95" name="data" />
        <scope ilk="function" line="127" lineend="128" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="SubPattern" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="125" lineend="126" name="__repr__" returns="repr()" signature="__repr__()">
          <variable citdl="SubPattern" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="178" lineend="215" name="Tokenizer">
        <variable attributes="__instancevar__" citdl="int" line="181" name="index" />
        <variable attributes="__instancevar__" line="180" name="string" />
        <scope ilk="function" line="208" lineend="211" name="get" returns="chr()" signature="get()">
          <variable citdl="Tokenizer" ilk="argument" name="self" />
          <variable citdl="chr()" line="209" name="this" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="185" name="next" />
        <scope attributes="__ctor__" ilk="function" line="179" lineend="182" name="__init__" signature="Tokenizer(string)">
          <variable citdl="Tokenizer" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope ilk="function" line="214" lineend="215" name="seek" signature="seek(index)">
          <variable citdl="Tokenizer" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="212" lineend="213" name="tell" returns="tuple" signature="tell()">
          <variable citdl="Tokenizer" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="202" lineend="207" name="match" returns="int" signature="match(char, skip=1)">
          <variable citdl="Tokenizer" ilk="argument" name="self" />
          <variable ilk="argument" name="char" />
          <variable citdl="int" ilk="argument" name="skip" />
        </scope>
        <scope attributes="private" ilk="function" line="183" lineend="201" name="__next" signature="__next()">
          <variable citdl="Tokenizer" ilk="argument" name="self" />
          <variable citdl="chr()" line="187" name="char" />
          <variable citdl="chr()" line="194" name="c" />
        </scope>
      </scope>
      <variable citdl="set" line="27" name="WHITESPACE" />
      <scope classrefs="Exception" ilk="class" name="error" />
      <scope ilk="function" line="804" lineend="816" name="expand_template" returns="sep.join()" signature="expand_template(template, match)">
        <variable ilk="argument" name="template" />
        <variable citdl="list" line="808" name="literals" />
        <variable citdl="match.group" line="805" name="g" />
        <variable ilk="argument" name="match" />
        <variable citdl="list" line="806" name="sep" />
      </scope>
      <scope ilk="function" line="670" lineend="680" name="fix_flags" signature="fix_flags(src, flags)">
        <variable ilk="argument" name="src" />
        <variable ilk="argument" name="flags" />
      </scope>
      <scope ilk="function" line="220" lineend="221" name="isdigit" returns="bool" signature="isdigit(char)">
        <variable ilk="argument" name="char" />
      </scope>
      <scope ilk="function" line="217" lineend="218" name="isident" returns="bool" signature="isident(char)">
        <variable ilk="argument" name="char" />
      </scope>
      <scope ilk="function" line="223" lineend="230" name="isname" returns="bool" signature="isname(name)">
        <variable ilk="argument" name="name" />
      </scope>
      <scope ilk="function" name="makedict" signature="makedict(list)" />
      <scope ilk="function" line="682" lineend="709" name="parse" returns="_parse_sub()" signature="parse(str, flags=0, pattern=None)">
        <variable citdl="Tokenizer" line="685" name="source" />
        <variable citdl="Pattern" ilk="argument" name="pattern" />
        <variable citdl="_parse_sub()" line="692" name="p" />
        <variable citdl="source.get()" line="695" name="tail" />
        <variable citdl="int" ilk="argument" name="flags" />
        <variable ilk="argument" name="str" />
      </scope>
      <scope ilk="function" line="711" lineend="802" name="parse_template" returns="tuple" signature="parse_template(source, pattern)">
        <variable citdl="p.append" line="717" name="a" />
        <variable citdl="int()" line="748" name="index" />
        <variable citdl="list" line="734" name="c" />
        <variable citdl="chr" line="725" name="makechar" />
        <variable citdl="groups.append" line="787" name="groupsappend" />
        <variable citdl="str" line="736" name="name" />
        <variable citdl="list" line="723" name="sep" />
        <variable citdl="parse_template.sget()" line="729" name="this" />
        <variable ilk="argument" name="pattern" />
        <variable citdl="s.get" line="715" name="sget" />
        <variable citdl="list" line="716" name="p" />
        <variable citdl="sget()" line="739" name="char" />
        <variable ilk="argument" name="source" />
        <scope ilk="function" line="718" lineend="722" name="literal" signature="literal(literal, p=p, pappend=a)">
          <variable ilk="argument" name="literal" />
          <variable citdl="list" ilk="argument" name="p" />
          <variable citdl="p.append" ilk="argument" name="pappend" />
        </scope>
        <variable citdl="list" line="786" name="groups" />
        <variable line="790" name="encode" />
        <variable citdl="list" line="788" name="literals" />
        <variable citdl="Tokenizer" line="714" name="s" />
        <variable citdl="int" line="785" name="i" />
        <variable citdl="False" line="766" name="isoctal" />
      </scope>
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="308" lineend="365" name="_parse_sub" returns="SubPattern" signature="_parse_sub(source, state, nested=1)">
        <variable ilk="argument" name="source" />
        <variable ilk="argument" name="state" />
        <variable citdl="int" ilk="argument" name="nested" />
        <variable citdl="list" line="311" name="items" />
        <variable citdl="items.append" line="312" name="itemsappend" />
        <variable citdl="source.match" line="313" name="sourcematch" />
        <variable citdl="SubPattern" line="328" name="subpattern" />
        <variable citdl="subpattern.append" line="329" name="subpatternappend" />
        <variable line="333" name="prefix" />
        <variable citdl="list" line="357" name="set" />
        <variable citdl="set.append" line="358" name="setappend" />
      </scope>
      <variable attributes="protected __hidden__" citdl="set()" line="382" name="_ASSERTCHARS" />
      <variable attributes="protected __hidden__" citdl="set()" line="383" name="_LOOKBEHINDASSERTCHARS" />
      <variable attributes="protected __hidden__" citdl="set()" line="381" name="_PATTERNENDERS" />
      <scope attributes="protected __hidden__" ilk="function" line="367" lineend="379" name="_parse_sub_cond" returns="SubPattern" signature="_parse_sub_cond(source, state, condgroup)">
        <variable ilk="argument" name="source" />
        <variable ilk="argument" name="state" />
        <variable ilk="argument" name="condgroup" />
        <variable citdl="_parse()" line="368" name="item_yes" />
        <variable citdl="_parse()" line="370" name="item_no" />
        <variable citdl="SubPattern" line="377" name="subpattern" />
      </scope>
      <variable attributes="protected __hidden__" citdl="set()" line="384" name="_REPEATCODES" />
      <scope attributes="protected __hidden__" ilk="function" line="232" lineend="262" name="_class_escape" returns="CATEGORIES.get()" signature="_class_escape(source, escape)">
        <variable ilk="argument" name="source" />
        <variable citdl="source.get()" ilk="argument" name="escape" />
        <variable citdl="CATEGORIES.get()" line="234" name="code" />
        <variable citdl="list" line="241" name="c" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="386" lineend="668" name="_parse" returns="SubPattern" signature="_parse(source, state)">
        <variable ilk="argument" name="source" />
        <variable ilk="argument" name="state" />
        <variable citdl="SubPattern" line="388" name="subpattern" />
        <variable citdl="subpattern.append" line="391" name="subpatternappend" />
        <variable citdl="source.get" line="392" name="sourceget" />
        <variable citdl="source.match" line="393" name="sourcematch" />
        <variable attributes="protected" citdl="len" line="394" name="_len" />
        <variable citdl="set()" line="395" name="PATTERNENDERS" />
        <variable citdl="set()" line="396" name="ASSERTCHARS" />
        <variable citdl="set()" line="397" name="LOOKBEHINDASSERTCHARS" />
        <variable citdl="set()" line="398" name="REPEATCODES" />
        <variable citdl="sourceget()" line="404" name="this" />
        <variable citdl="list" line="424" name="set" />
        <variable citdl="set.append" line="425" name="setappend" />
        <variable citdl="list" line="431" name="start" />
        <variable citdl="tuple" line="437" name="code1" />
        <variable citdl="tuple" line="453" name="code2" />
        <variable citdl="str" line="458" name="lo" />
        <variable citdl="_parse.sourceget()" line="459" name="hi" />
        <variable citdl="int" line="482" name="min" />
        <variable citdl="MAXREPEAT" line="482" name="max" />
        <variable citdl="source.tell()" line="492" name="here" />
        <variable citdl="list" line="516" name="item" />
        <variable citdl="int" line="532" name="group" />
        <variable citdl="str" line="533" name="name" />
        <variable citdl="int()" line="534" name="condgroup" />
        <variable citdl="sourceget()" line="544" name="char" />
        <variable citdl="state.groupdict.get()" line="565" name="gid" />
        <variable citdl="int" line="590" name="dir" />
        <variable citdl="_parse_sub()" line="596" name="p" />
        <variable citdl="str" line="606" name="condname" />
        <variable citdl="_escape()" line="662" name="code" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="264" lineend="306" name="_escape" returns="CATEGORIES.get()" signature="_escape(source, escape, state)">
        <variable ilk="argument" name="source" />
        <variable citdl="source.get()" ilk="argument" name="escape" />
        <variable ilk="argument" name="state" />
        <variable citdl="ESCAPES.get()" line="266" name="code" />
        <variable citdl="list" line="273" name="c" />
        <variable citdl="int()" line="296" name="group" />
      </scope>
    </scope>
    <scope doc="Manage HTTP Response Headers  Much of this module is red-handedly pilfered from email.Message in the stdlib," ilk="blob" lang="Python3" name="wsgiref.headers">
      <scope classrefs="object" doc="Manage a collection of HTTP response headers" ilk="class" line="40" lineend="202" name="Headers">
        <scope doc="Delete all occurrences of a header, if present." ilk="function" line="71" lineend="77" name="__delitem__" signature="__delitem__(name)">
          <variable citdl="Headers" ilk="argument" name="self" />
          <variable citdl="_convert_string_type()" ilk="argument" name="name" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="47" name="_headers" />
        <scope doc="Return first matching header value for &apos;name&apos;, or &apos;value&apos;" ilk="function" line="161" lineend="172" name="setdefault" returns="get()" signature="setdefault(name, value)">
          <variable citdl="Headers" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
          <variable citdl="get()" line="166" name="result" />
        </scope>
        <scope doc="Get the first header value for &apos;name&apos;" ilk="function" line="79" lineend="88" name="__getitem__" returns="self.get()" signature="__getitem__(name)">
          <variable citdl="Headers" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Return true if the message contains the header." ilk="function" line="94" lineend="96" name="__contains__" returns="bool" signature="__contains__(name)">
          <variable citdl="Headers" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Return a list of all the header field names." ilk="function" line="120" lineend="128" name="keys" returns="list" signature="keys()">
          <variable citdl="Headers" ilk="argument" name="self" />
        </scope>
        <scope doc="Get all the header fields and values." ilk="function" line="143" lineend="151" name="items" returns="list" signature="items()">
          <variable citdl="Headers" ilk="argument" name="self" />
        </scope>
        <scope doc="suitable for direct HTTP transmission." ilk="function" line="156" lineend="159" name="__str__" returns="str.join()" signature="str() returns the formatted headers, complete with end line,">
          <variable citdl="Headers" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of all the values for the named field." ilk="function" line="99" lineend="108" name="get_all" returns="list" signature="get_all(name)">
          <variable citdl="Headers" ilk="argument" name="self" />
          <variable citdl="_convert_string_type()" ilk="argument" name="name" />
        </scope>
        <scope doc="Extended header setting." ilk="function" line="175" lineend="202" name="add_header" signature="add_header(_name, _value, **_params)">
          <variable citdl="Headers" ilk="argument" name="self" />
          <variable ilk="argument" name="_name" />
          <variable citdl="_convert_string_type()" ilk="argument" name="_value" />
          <variable attributes="kwargs" ilk="argument" name="_params" />
          <variable citdl="list" line="191" name="parts" />
          <variable citdl="_convert_string_type()" line="196" name="k" />
          <variable citdl="_convert_string_type()" line="200" name="v" />
        </scope>
        <scope doc="Set the value of a header." ilk="function" line="65" lineend="69" name="__setitem__" signature="__setitem__(name, val)">
          <variable citdl="Headers" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="val" />
        </scope>
        <scope attributes="protected" doc="Convert/check value type." ilk="function" line="53" lineend="59" name="_convert_string_type" returns="str()" signature="_convert_string_type(value)">
          <variable citdl="Headers" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Return a list of all header values." ilk="function" line="133" lineend="141" name="values" returns="list" signature="values()">
          <variable citdl="Headers" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="44" lineend="51" name="__init__" signature="Headers(headers)">
          <variable citdl="Headers" ilk="argument" name="self" />
          <variable ilk="argument" name="headers" />
          <variable citdl="self._convert_string_type()" line="49" name="k" />
          <variable citdl="self._convert_string_type()" line="50" name="v" />
        </scope>
        <scope doc="Get the first header value for &apos;name&apos;, or return &apos;default&apos;" ilk="function" line="111" lineend="117" name="get" returns="v" signature="get(name, default=None)">
          <variable citdl="Headers" ilk="argument" name="self" />
          <variable citdl="_convert_string_type()" ilk="argument" name="name" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope doc="Return the total number of headers, including duplicates." ilk="function" line="61" lineend="63" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="Headers" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="153" lineend="154" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Headers" ilk="argument" name="self" />
        </scope>
      </scope>
      <import module="re" />
      <variable citdl="SRE_Pattern" line="11" name="tspecials" />
      <scope attributes="protected __hidden__" doc="Convenience function to format and return a key=value pair." ilk="function" line="13" lineend="25" name="_formatparam" returns="tuple" signature="_formatparam(param, value=None, quote=1)">
        <variable ilk="argument" name="param" />
        <variable ilk="argument" name="value" />
        <variable citdl="int" ilk="argument" name="quote" />
      </scope>
    </scope>
    <scope doc="Create portable serialized representations of Python objects.  See module copyreg for a mechanism for registering custom picklers." ilk="blob" lang="Python3" name="pickle">
      <variable citdl="bytes" name="APPEND" />
      <variable citdl="bytes" name="APPENDS" />
      <variable citdl="bytes" name="BINBYTES" />
      <variable citdl="bytes" name="BINFLOAT" />
      <variable citdl="bytes" name="BINGET" />
      <variable citdl="bytes" name="BININT" />
      <variable citdl="bytes" name="BININT1" />
      <variable citdl="bytes" name="BININT2" />
      <variable citdl="bytes" name="BINPERSID" />
      <variable citdl="bytes" name="BINPUT" />
      <variable citdl="bytes" name="BINSTRING" />
      <variable citdl="bytes" name="BINUNICODE" />
      <variable citdl="bytes" name="BUILD" />
      <scope classrefs="object" ilk="class" name="BuiltinFunctionType" />
      <variable citdl="int" name="DEFAULT_PROTOCOL" />
      <variable citdl="bytes" name="DICT" />
      <variable citdl="bytes" name="DUP" />
      <variable citdl="bytes" name="EMPTY_DICT" />
      <variable citdl="bytes" name="EMPTY_LIST" />
      <variable citdl="bytes" name="EMPTY_TUPLE" />
      <variable citdl="bytes" name="EXT1" />
      <variable citdl="bytes" name="EXT2" />
      <variable citdl="bytes" name="EXT4" />
      <variable citdl="bytes" name="FALSE" />
      <variable citdl="bytes" name="FLOAT" />
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])  Create a function object from a code object and a dictionary." ilk="class" name="FunctionType" />
      <variable citdl="bytes" name="GET" />
      <variable citdl="bytes" name="GLOBAL" />
      <variable citdl="int" name="HIGHEST_PROTOCOL" />
      <variable citdl="bytes" name="INST" />
      <variable citdl="bytes" name="INT" />
      <variable citdl="bytes" name="LIST" />
      <variable citdl="bytes" name="LONG" />
      <variable citdl="bytes" name="LONG1" />
      <variable citdl="bytes" name="LONG4" />
      <variable citdl="bytes" name="LONG_BINGET" />
      <variable citdl="bytes" name="LONG_BINPUT" />
      <variable citdl="bytes" name="MARK" />
      <variable citdl="bytes" name="NEWFALSE" />
      <variable citdl="bytes" name="NEWOBJ" />
      <variable citdl="bytes" name="NEWTRUE" />
      <variable citdl="bytes" name="NONE" />
      <variable citdl="bytes" name="OBJ" />
      <variable citdl="bytes" name="PERSID" />
      <variable citdl="bytes" name="POP" />
      <variable citdl="bytes" name="POP_MARK" />
      <variable citdl="bytes" name="PROTO" />
      <variable citdl="bytes" name="PUT" />
      <scope classrefs="Exception" ilk="class" name="PickleError" />
      <scope classrefs="object" doc="Pickler(file, protocol=None) This takes a binary file for writing a pickle data stream. " ilk="class" name="Pickler" />
      <scope classrefs="PickleError" ilk="class" name="PicklingError" />
      <variable citdl="NoneType" name="PyStringMap" />
      <variable citdl="bytes" name="REDUCE" />
      <variable citdl="bytes" name="SETITEM" />
      <variable citdl="bytes" name="SETITEMS" />
      <variable citdl="bytes" name="SHORT_BINBYTES" />
      <variable citdl="bytes" name="SHORT_BINSTRING" />
      <variable citdl="bytes" name="STOP" />
      <variable citdl="bytes" name="STRING" />
      <variable citdl="bytes" name="TRUE" />
      <variable citdl="bytes" name="TUPLE" />
      <variable citdl="bytes" name="TUPLE1" />
      <variable citdl="bytes" name="TUPLE2" />
      <variable citdl="bytes" name="TUPLE3" />
      <variable citdl="bytes" name="UNICODE" />
      <scope classrefs="object" doc="Unpickler(file, *, encoding=&apos;ASCII&apos;, errors=&apos;strict&apos;) This takes a binary file for reading a pickle data stream. " ilk="class" name="Unpickler" />
      <scope classrefs="PickleError" ilk="class" name="UnpicklingError" />
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="__version__" />
      <import module="_binascii" />
      <import module="_compat_pickle" />
      <variable citdl="tuple" name="bytes_types" />
      <variable citdl="dict" name="classmap" />
      <import module="codecs" />
      <variable citdl="list" name="compatible_formats" />
      <scope doc="Decode a long from a two&apos;s complement little-endian binary string." ilk="function" name="decode_long" signature="decode_long(data)" />
      <variable citdl="dict" name="dispatch_table" />
      <scope ilk="function" name="dump" signature="dump(obj, file, protocol=None, *, fix_imports=True)" />
      <scope ilk="function" name="dumps" signature="dumps(obj, protocol=None, *, fix_imports=True)" />
      <scope doc="Encode a long to a two&apos;s complement little-endian binary string." ilk="function" name="encode_long" signature="encode_long(x)" />
      <variable citdl="str" name="format_version" />
      <import module="io" />
      <scope ilk="function" name="load" signature="load(file, *, fix_imports=True, encoding=&apos;ASCII&apos;, errors=&apos;strict&apos;)" />
      <scope ilk="function" name="loads" signature="loads(s, *, fix_imports=True, encoding=&apos;ASCII&apos;, errors=&apos;strict&apos;)" />
      <import module="marshal" />
      <scope doc="Convert the string to a value." ilk="function" name="mloads" signature="loads(string)" />
      <import module="re" />
      <import module="struct" />
      <import module="sys" />
      <scope doc="Figure out the module in which a function occurs." ilk="function" name="whichmodule" signature="whichmodule(func, funcname)" />
    </scope>
    <scope doc="Generic socket server classes.  This module tries to capture the various aspects of defining a server:" ilk="blob" lang="Python3" name="socketserver">
      <scope classrefs="object" doc="Base class for request handler classes.  This class is instantiated for each request to be handled.  The" ilk="class" line="591" lineend="624" name="BaseRequestHandler">
        <scope ilk="function" line="623" lineend="624" name="finish" signature="finish()">
          <variable citdl="BaseRequestHandler" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="620" lineend="621" name="handle" signature="handle()">
          <variable citdl="BaseRequestHandler" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="617" lineend="618" name="setup" signature="setup()">
          <variable citdl="BaseRequestHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="610" name="request" />
        <variable attributes="__instancevar__" line="612" name="server" />
        <scope attributes="__ctor__" ilk="function" line="609" lineend="615" name="__init__" signature="BaseRequestHandler(request, client_address, server)">
          <variable citdl="BaseRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable ilk="argument" name="client_address" />
          <variable ilk="argument" name="server" />
        </scope>
        <variable attributes="__instancevar__" line="611" name="client_address" />
      </scope>
      <scope classrefs="object" doc="Base class for server classes.  Methods for the caller:" ilk="class" line="150" lineend="337" name="BaseServer">
        <variable attributes="__instancevar__" line="198" name="RequestHandlerClass" />
        <scope doc="Called by constructor to activate the server." ilk="function" line="202" lineend="208" name="server_activate" signature="server_activate()">
          <variable citdl="BaseServer" ilk="argument" name="self" />
        </scope>
        <scope doc="Handle one request, possibly blocking." ilk="function" line="250" lineend="266" name="handle_request" signature="handle_request()">
          <variable citdl="BaseServer" ilk="argument" name="self" />
          <variable citdl="min()" line="257" name="timeout" />
          <variable citdl="select.select()" line="262" name="fd_sets" />
        </scope>
        <scope doc="Handle one request at a time until shutdown." ilk="function" line="210" lineend="227" name="serve_forever" signature="serve_forever(poll_interval=0.5)">
          <variable citdl="BaseServer" ilk="argument" name="self" />
          <variable citdl="float" ilk="argument" name="poll_interval" />
        </scope>
        <scope doc="Stops the serve_forever loop." ilk="function" line="229" lineend="237" name="shutdown" signature="shutdown()">
          <variable citdl="BaseServer" ilk="argument" name="self" />
        </scope>
        <scope doc="Call finish_request." ilk="function" line="301" lineend="308" name="process_request" signature="process_request(request, client_address)">
          <variable citdl="BaseServer" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable ilk="argument" name="client_address" />
        </scope>
        <variable attributes="private __instancevar__" citdl="True" line="200" name="__serving" />
        <scope doc="Called if no new request arrives within self.timeout." ilk="function" line="286" lineend="291" name="handle_timeout" signature="handle_timeout()">
          <variable citdl="BaseServer" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="197" name="server_address" />
        <scope doc="Verify the request. May be overridden." ilk="function" line="293" lineend="299" name="verify_request" returns="bool" signature="verify_request(request, client_address)">
          <variable citdl="BaseServer" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable ilk="argument" name="client_address" />
        </scope>
        <variable attributes="private __instancevar__" citdl="threading.Event()" line="199" name="__is_shut_down" />
        <scope doc="Called to clean up an individual request." ilk="function" line="322" lineend="324" name="close_request" signature="close_request(request)">
          <variable citdl="BaseServer" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope doc="Called to clean-up the server." ilk="function" line="310" lineend="316" name="server_close" signature="server_close()">
          <variable citdl="BaseServer" ilk="argument" name="self" />
        </scope>
        <scope doc="Finish one request by instantiating RequestHandlerClass." ilk="function" line="318" lineend="320" name="finish_request" signature="finish_request(request, client_address)">
          <variable citdl="BaseServer" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable ilk="argument" name="client_address" />
        </scope>
        <variable line="193" name="timeout" />
        <scope attributes="protected" doc="Handle one request, without blocking." ilk="function" line="268" lineend="284" name="_handle_request_noblock" signature="_handle_request_noblock()">
          <variable citdl="BaseServer" ilk="argument" name="self" />
        </scope>
        <scope doc="Handle an error gracefully. May be overridden." ilk="function" line="326" lineend="337" name="handle_error" signature="handle_error(request, client_address)">
          <import line="335" module="traceback" />
          <variable citdl="BaseServer" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable ilk="argument" name="client_address" />
        </scope>
        <scope attributes="__ctor__" doc="Constructor. May be extended, do not override." ilk="function" line="195" lineend="200" name="__init__" signature="BaseServer(server_address, RequestHandlerClass)">
          <variable citdl="BaseServer" ilk="argument" name="self" />
          <variable ilk="argument" name="server_address" />
          <variable ilk="argument" name="RequestHandlerClass" />
        </scope>
      </scope>
      <scope classrefs="BaseRequestHandler" doc="Define self.rfile and self.wfile for datagram sockets." ilk="class" line="661" lineend="675" name="DatagramRequestHandler">
        <scope ilk="function" line="668" lineend="672" name="setup" signature="setup()">
          <import line="669" module="io" symbol="BytesIO" />
          <variable citdl="DatagramRequestHandler" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="674" lineend="675" name="finish" signature="finish()">
          <variable citdl="DatagramRequestHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="BytesIO()" line="672" name="wfile" />
        <variable attributes="__instancevar__" citdl="BytesIO()" line="671" name="rfile" />
      </scope>
      <scope classrefs="object" doc="Mix-in class to handle each request in a new process." ilk="class" line="473" lineend="541" name="ForkingMixIn">
        <scope doc="Internal routine to wait for children that have exited." ilk="function" line="481" lineend="511" name="collect_children" signature="collect_children()">
          <variable citdl="ForkingMixIn" ilk="argument" name="self" />
          <variable line="492" name="pid" />
        </scope>
        <scope doc="Fork a new subprocess to process the request." ilk="function" line="520" lineend="541" name="process_request" signature="process_request(request, client_address)">
          <variable citdl="ForkingMixIn" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable ilk="argument" name="client_address" />
          <variable citdl="os.fork()" line="523" name="pid" />
        </scope>
        <variable citdl="int" line="479" name="max_children" />
        <scope doc="Wait for zombies after self.timeout seconds of inactivity." ilk="function" line="513" lineend="518" name="handle_timeout" signature="handle_timeout()">
          <variable citdl="ForkingMixIn" ilk="argument" name="self" />
        </scope>
        <variable citdl="int" line="477" name="timeout" />
        <variable citdl="list" line="478" name="active_children" />
      </scope>
      <scope classrefs="ForkingMixIn TCPServer" ilk="class" line="574" lineend="574" name="ForkingTCPServer" />
      <scope classrefs="ForkingMixIn UDPServer" ilk="class" line="573" lineend="573" name="ForkingUDPServer" />
      <scope classrefs="BaseRequestHandler" doc="Define self.rfile and self.wfile for stream sockets." ilk="class" line="635" lineend="658" name="StreamRequestHandler">
        <variable citdl="int" line="647" name="wbufsize" />
        <scope ilk="function" line="654" lineend="658" name="finish" signature="finish()">
          <variable citdl="StreamRequestHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.connection.makefile()" line="652" name="wfile" />
        <scope ilk="function" line="649" lineend="652" name="setup" signature="setup()">
          <variable citdl="StreamRequestHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.request" line="650" name="connection" />
        <variable citdl="int" line="646" name="rbufsize" />
        <variable attributes="__instancevar__" citdl="self.connection.makefile()" line="651" name="rfile" />
      </scope>
      <scope classrefs="BaseServer" doc="Base class for various socket-based server classes.  Defaults to synchronous IP stream (i.e., TCP)." ilk="class" line="340" lineend="448" name="TCPServer">
        <variable citdl="False" line="392" name="allow_reuse_address" />
        <scope doc="Called by constructor to activate the server." ilk="function" line="414" lineend="420" name="server_activate" signature="server_activate()">
          <variable citdl="TCPServer" ilk="argument" name="self" />
        </scope>
        <variable citdl="socket.AF_INET" line="386" name="address_family" />
        <variable attributes="__instancevar__" citdl="socket.socket()" line="397" name="socket" />
        <scope doc="Return socket file number." ilk="function" line="430" lineend="436" name="fileno" returns="self.socket.fileno()" signature="fileno()">
          <variable citdl="TCPServer" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.socket.getsockname()" line="412" name="server_address" />
        <scope doc="Called to clean-up the server." ilk="function" line="422" lineend="428" name="server_close" signature="server_close()">
          <variable citdl="TCPServer" ilk="argument" name="self" />
        </scope>
        <variable citdl="socket.SOCK_STREAM" line="388" name="socket_type" />
        <scope doc="Called to clean up an individual request." ilk="function" line="446" lineend="448" name="close_request" signature="close_request(request)">
          <variable citdl="TCPServer" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope doc="Get the request and client address from the socket." ilk="function" line="438" lineend="444" name="get_request" returns="self.socket.accept()" signature="get_request()">
          <variable citdl="TCPServer" ilk="argument" name="self" />
        </scope>
        <scope doc="Called by constructor to bind the socket." ilk="function" line="403" lineend="412" name="server_bind" signature="server_bind()">
          <variable citdl="TCPServer" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Constructor. May be extended, do not override." ilk="function" line="394" lineend="401" name="__init__" signature="TCPServer(server_address, RequestHandlerClass, bind_and_activate=True)">
          <variable citdl="TCPServer" ilk="argument" name="self" />
          <variable ilk="argument" name="server_address" />
          <variable ilk="argument" name="RequestHandlerClass" />
          <variable citdl="True" ilk="argument" name="bind_and_activate" />
        </scope>
        <variable citdl="int" line="390" name="request_queue_size" />
      </scope>
      <scope classrefs="object" doc="Mix-in class to handle each request in a new thread." ilk="class" line="544" lineend="570" name="ThreadingMixIn">
        <variable citdl="False" line="549" name="daemon_threads" />
        <scope doc="Same as in BaseServer but as a thread." ilk="function" line="551" lineend="562" name="process_request_thread" signature="process_request_thread(request, client_address)">
          <variable citdl="ThreadingMixIn" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable ilk="argument" name="client_address" />
        </scope>
        <scope doc="Start a new thread to process the request." ilk="function" line="564" lineend="570" name="process_request" signature="process_request(request, client_address)">
          <variable citdl="ThreadingMixIn" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable ilk="argument" name="client_address" />
          <variable citdl="threading.Thread()" line="566" name="t" />
        </scope>
      </scope>
      <scope classrefs="ThreadingMixIn TCPServer" ilk="class" line="577" lineend="577" name="ThreadingTCPServer" />
      <scope classrefs="ThreadingMixIn UDPServer" ilk="class" line="576" lineend="576" name="ThreadingUDPServer" />
      <scope classrefs="TCPServer" doc="UDP server class." ilk="class" line="451" lineend="471" name="UDPServer">
        <variable citdl="False" line="455" name="allow_reuse_address" />
        <scope ilk="function" line="465" lineend="467" name="server_activate" signature="server_activate()">
          <variable citdl="UDPServer" ilk="argument" name="self" />
        </scope>
        <variable citdl="int" line="459" name="max_packet_size" />
        <variable citdl="socket.SOCK_DGRAM" line="457" name="socket_type" />
        <scope ilk="function" line="469" lineend="471" name="close_request" signature="close_request(request)">
          <variable citdl="UDPServer" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope ilk="function" line="461" lineend="463" name="get_request" returns="tuple" signature="get_request()">
          <variable citdl="UDPServer" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="list" line="141" name="__all__" />
      <variable citdl="str" line="129" name="__version__" />
      <import module="os" />
      <import module="select" />
      <import module="socket" />
      <import module="sys" />
      <import module="threading" />
      <scope attributes="__hidden__" classrefs="UDPServer" ilk="class" line="584" lineend="585" name="UnixDatagramServer">
        <variable citdl="socket.AF_UNIX" line="585" name="address_family" />
      </scope>
      <scope attributes="__hidden__" classrefs="ThreadingMixIn UnixDatagramServer" ilk="class" line="589" lineend="589" name="ThreadingUnixDatagramServer" />
      <scope attributes="__hidden__" classrefs="ThreadingMixIn UnixStreamServer" ilk="class" line="587" lineend="587" name="ThreadingUnixStreamServer" />
      <scope attributes="__hidden__" classrefs="TCPServer" ilk="class" line="581" lineend="582" name="UnixStreamServer">
        <variable citdl="socket.AF_UNIX" line="582" name="address_family" />
      </scope>
    </scope>
    <scope doc="distutils.command.build_ext  Implements the Distutils &apos;build_ext&apos; command, for building extension" ilk="blob" lang="Python3" name="distutils.command.build_ext">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="Just a collection of attributes that describes an extension module and everything needed to build it (hopefully in a portable way, but there are hooks that let you be as unportable as you need)." ilk="class" name="Extension" />
      <variable citdl="bool" name="HAS_USER_SITE" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <variable citdl="int" name="MSVC_VERSION" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <variable citdl="str" name="USER_BASE" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" name="__revision__" />
      <scope classrefs="Command" ilk="class" name="build_ext" />
      <scope doc="Do any platform-specific customization of a CCompiler instance." ilk="function" name="customize_compiler" signature="customize_compiler(compiler)" />
      <variable citdl="SRE_Pattern" name="extension_name_re" />
      <scope doc="Return the version of MSVC that was used to build Python." ilk="function" name="get_build_version" signature="get_build_version()" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <scope doc="Return true if &apos;target&apos; is out-of-date with respect to any file listed in &apos;sources&apos;." ilk="function" name="newer_group" signature="newer_group(sources, target, missing=&apos;error&apos;)" />
      <import module="os" />
      <import module="re" />
      <scope ilk="function" name="show_compilers" signature="show_compilers()" />
      <import module="sys" />
    </scope>
    <scope doc="Utility functions, node construction macros, etc." ilk="blob" lang="Python3" name="lib2to3.fixer_util">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" line="52" lineend="57" name="ArgList" returns="Node()" signature="ArgList(args, lparen=Leaf(7, &apos;(&apos;), rparen=Leaf(8, &apos;)&apos;))">
        <variable citdl="Node()" line="54" name="node" />
        <variable ilk="argument" name="args" />
        <variable citdl="RParen()" ilk="argument" name="rparen" />
        <variable citdl="LParen()" ilk="argument" name="lparen" />
      </scope>
      <scope doc="Build an assignment statement" ilk="function" line="25" lineend="34" name="Assign" returns="Node()" signature="Assign(target, source)">
        <variable citdl="list" ilk="argument" name="source" />
        <variable citdl="list" ilk="argument" name="target" />
      </scope>
      <scope doc="A node tuple for obj.attr" ilk="function" line="40" lineend="42" name="Attr" returns="list" signature="Attr(obj, attr)">
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="attr" />
      </scope>
      <scope doc="A blank line" ilk="function" line="70" lineend="72" name="BlankLine" returns="Leaf()" signature="BlankLine()" />
      <scope doc="A function call" ilk="function" line="59" lineend="64" name="Call" returns="Node()" signature="Call(func_name, args=None, prefix=None)">
        <variable citdl="Node()" line="61" name="node" />
        <variable ilk="argument" name="func_name" />
        <variable ilk="argument" name="prefix" />
        <variable ilk="argument" name="args" />
      </scope>
      <scope doc="A comma leaf" ilk="function" line="44" lineend="46" name="Comma" returns="Leaf()" signature="Comma()" />
      <scope doc="A period (.) leaf" ilk="function" line="48" lineend="50" name="Dot" returns="Leaf()" signature="Dot()" />
      <scope doc="Return an import statement in the form: from package import name_leafs" ilk="function" line="111" lineend="128" name="FromImport" returns="Node()" signature="FromImport(package_name, name_leafs)">
        <variable citdl="Node()" line="127" name="imp" />
        <variable ilk="argument" name="name_leafs" />
        <variable ilk="argument" name="package_name" />
        <variable citdl="list" line="123" name="children" />
      </scope>
      <scope ilk="function" line="15" lineend="17" name="KeywordArg" returns="Node()" signature="KeywordArg(keyword, value)">
        <variable ilk="argument" name="value" />
        <variable ilk="argument" name="keyword" />
      </scope>
      <scope ilk="function" line="19" lineend="20" name="LParen" returns="Leaf()" signature="LParen()" />
      <scope classrefs="Base" doc="Concrete implementation for leaf nodes." ilk="class" name="Leaf" />
      <scope doc="A list comprehension of the form [xp for fp in it if test]." ilk="function" line="87" lineend="109" name="ListComp" returns="Node()" signature="ListComp(xp, fp, it, test=None)">
        <variable ilk="argument" name="fp" />
        <variable citdl="Leaf()" line="97" name="in_leaf" />
        <variable ilk="argument" name="it" />
        <variable citdl="Leaf()" line="95" name="for_leaf" />
        <variable citdl="Node()" line="105" name="inner" />
        <variable citdl="list" line="99" name="inner_args" />
        <variable ilk="argument" name="test" />
        <variable ilk="argument" name="xp" />
        <variable citdl="Leaf()" line="102" name="if_leaf" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" line="36" lineend="38" name="Name" returns="Leaf()" signature="Name(name, prefix=None)">
        <variable ilk="argument" name="prefix" />
        <variable ilk="argument" name="name" />
      </scope>
      <scope doc="A newline literal" ilk="function" line="66" lineend="68" name="Newline" returns="Leaf()" signature="Newline()" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes." ilk="class" name="Node" />
      <scope ilk="function" line="74" lineend="75" name="Number" returns="Leaf()" signature="Number(n, prefix=None)">
        <variable ilk="argument" name="prefix" />
        <variable ilk="argument" name="n" />
      </scope>
      <scope ilk="function" line="22" lineend="23" name="RParen" returns="Leaf()" signature="RParen()" />
      <scope doc="A string leaf" ilk="function" line="83" lineend="85" name="String" returns="Leaf()" signature="String(string, prefix=None)">
        <variable ilk="argument" name="prefix" />
        <variable ilk="argument" name="string" />
      </scope>
      <scope doc="A numeric or string subscript" ilk="function" line="77" lineend="81" name="Subscript" returns="Node()" signature="Subscript(index_node)">
        <variable ilk="argument" name="index_node" />
      </scope>
      <scope doc="Follow an attribute chain." ilk="function" line="168" lineend="185" name="attr_chain" signature="attr_chain(obj, attr)">
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="attr" />
        <variable citdl="getattr()" line="182" name="next" />
      </scope>
      <variable citdl="set" line="165" name="consuming_calls" />
      <scope doc="Returns true if name is imported from package at the top level of the tree which node belongs to." ilk="function" line="270" lineend="276" name="does_tree_import" returns="bool()" signature="does_tree_import(package, name, node)">
        <variable ilk="argument" name="node" />
        <variable citdl="find_binding()" line="275" name="binding" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="package" />
      </scope>
      <scope doc="Returns the node which binds variable name, otherwise None." ilk="function" line="328" lineend="368" name="find_binding" returns="child" signature="find_binding(name, node, package=None)">
        <variable ilk="argument" name="node" />
        <variable citdl="()" line="338" name="n" />
        <variable ilk="argument" name="name" />
        <variable citdl="()" line="334" name="ret" />
        <variable ilk="argument" name="package" />
      </scope>
      <scope doc="Find the top level namespace." ilk="function" line="261" lineend="268" name="find_root" returns="node.parent" signature="find_root(node)">
        <variable citdl="node.parent" ilk="argument" name="node" />
      </scope>
      <scope doc="Returns true if node is in an environment where all that is required of it is being itterable (ie, it doesn&apos;t matter if it returns a list or an itterator)." ilk="function" line="206" lineend="223" name="in_special_context" returns="bool" signature="in_special_context(node)">
        <variable ilk="argument" name="node" />
        <variable citdl="patcomp.compile_pattern()" line="216" name="p2" />
        <variable citdl="patcomp.compile_pattern()" line="215" name="p0" />
        <variable citdl="patcomp.compile_pattern()" line="214" name="p1" />
        <variable citdl="dict" line="220" name="results" />
        <variable citdl="list" line="218" name="patterns" />
        <variable citdl="True" line="217" name="pats_built" />
      </scope>
      <scope doc="Returns true if the node is an import statement." ilk="function" line="278" lineend="280" name="is_import" returns="bool" signature="is_import(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <scope doc="Does the node represent a list literal?" ilk="function" line="147" lineend="154" name="is_list" returns="isinstance()" signature="is_list(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <scope doc="Check that something isn&apos;t an attribute or function name etc." ilk="function" line="225" lineend="246" name="is_probably_builtin" returns="bool" signature="is_probably_builtin(node)">
        <variable ilk="argument" name="node" />
        <variable citdl="node.prev_sibling" line="229" name="prev" />
        <variable citdl="node.parent" line="233" name="parent" />
      </scope>
      <scope doc="Does the node represent a tuple literal?" ilk="function" line="135" lineend="145" name="is_tuple" returns="bool" signature="is_tuple(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <scope ilk="function" line="252" lineend="259" name="make_suite" returns="Node()" signature="make_suite(node)">
        <variable citdl="node.clone()" ilk="argument" name="node" />
        <variable citdl="Node()" line="257" name="suite" />
        <variable citdl="node.parent" line="256" name="parent" />
      </scope>
      <variable citdl="str" line="187" name="p0" />
      <variable citdl="str" line="190" name="p1" />
      <variable citdl="str" line="198" name="p2" />
      <scope ilk="function" line="161" lineend="162" name="parenthesize" returns="Node()" signature="parenthesize(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <import module="patcomp" />
      <variable citdl="bool" line="205" name="pats_built" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
      <scope doc="Works like `does_tree_import` but adds an import statement if it was not imported." ilk="function" line="282" lineend="324" name="touch_import" signature="touch_import(package, name, node)">
        <variable ilk="argument" name="node" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="package" />
        <scope ilk="function" line="285" lineend="287" name="is_import_stmt" returns="node.children" signature="is_import_stmt(node)">
          <variable ilk="argument" name="node" />
        </scope>
        <variable citdl="idx" line="296" name="insert_pos" />
        <variable citdl="find_root()" line="289" name="root" />
        <variable citdl="list" line="323" name="children" />
        <variable citdl="FromImport()" line="316" name="import_" />
      </scope>
      <variable attributes="protected __hidden__" citdl="set()" line="327" name="_def_syms" />
      <scope attributes="protected __hidden__" ilk="function" line="371" lineend="379" name="_find" returns="nodes.pop()" signature="_find(name, node)">
        <variable ilk="argument" name="name" />
        <variable citdl="nodes.pop()" ilk="argument" name="node" />
        <variable citdl="list" line="372" name="nodes" />
      </scope>
      <scope attributes="protected __hidden__" doc="Will reuturn node if node will import name, or node will import * from package." ilk="function" line="381" lineend="420" name="_is_import_binding" signature="_is_import_binding(node, name, package=None)">
        <variable ilk="argument" name="node" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="package" />
        <variable line="387" name="imp" />
        <variable line="396" name="last" />
        <variable line="406" name="n" />
        <variable line="413" name="child" />
      </scope>
      <variable attributes="protected __hidden__" citdl="set()" line="370" name="_block_syms" />
    </scope>
    <scope doc="Abstract Base Classes (ABCs) for numbers, according to PEP 3141.  TODO: Fill out more detailed documentation on the operators." ilk="blob" lang="Python3" name="numbers">
      <scope classrefs="type" doc="Metaclass for defining Abstract Base Classes (ABCs).  Use this metaclass to create an ABC.  An ABC can be subclassed" ilk="class" name="ABCMeta" />
      <scope classrefs="Number" doc="Complex defines the operations that work on the builtin complex type.  In short, those are: a conversion to complex, .real, .imag, +, -," ilk="class" line="32" lineend="145" name="Complex">
        <scope doc="Retrieve the real component of this number." ilk="function" line="54" lineend="59" name="real" signature="real()">
          <variable citdl="Complex" ilk="argument" name="self" />
        </scope>
        <scope doc="self != other" ilk="function" line="142" lineend="145" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="other / self" ilk="function" line="113" lineend="115" name="__rtruediv__" signature="__rtruediv__(other)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Retrieve the real component of this number." ilk="function" line="62" lineend="67" name="imag" signature="imag()">
          <variable citdl="Complex" ilk="argument" name="self" />
        </scope>
        <scope doc="self / other: Should promote to float when necessary." ilk="function" line="108" lineend="110" name="__truediv__" signature="__truediv__(other)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="self**exponent; should promote to float or complex when necessary." ilk="function" line="118" lineend="120" name="__pow__" signature="__pow__(exponent)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="exponent" />
        </scope>
        <scope doc="other + self" ilk="function" line="75" lineend="77" name="__radd__" signature="__radd__(other)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="+self" ilk="function" line="85" lineend="87" name="__pos__" signature="__pos__()">
          <variable citdl="Complex" ilk="argument" name="self" />
        </scope>
        <variable citdl="tuple" line="43" name="__slots__" />
        <scope doc="self * other" ilk="function" line="98" lineend="100" name="__mul__" signature="__mul__(other)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="other - self" ilk="function" line="93" lineend="95" name="__rsub__" returns="Complex" signature="__rsub__(other)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="-self" ilk="function" line="80" lineend="82" name="__neg__" signature="__neg__()">
          <variable citdl="Complex" ilk="argument" name="self" />
        </scope>
        <scope doc="self + other" ilk="function" line="70" lineend="72" name="__add__" signature="__add__(other)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="(x+y*i).conjugate() returns (x-y*i)." ilk="function" line="133" lineend="135" name="conjugate" signature="conjugate()">
          <variable citdl="Complex" ilk="argument" name="self" />
        </scope>
        <scope doc="True if self != 0. Called for bool(self)." ilk="function" line="49" lineend="51" name="__bool__" returns="bool" signature="__bool__()">
          <variable citdl="Complex" ilk="argument" name="self" />
        </scope>
        <scope doc="self - other" ilk="function" line="89" lineend="91" name="__sub__" returns="Complex" signature="__sub__(other)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="base ** self" ilk="function" line="123" lineend="125" name="__rpow__" signature="__rpow__(base)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="base" />
        </scope>
        <scope doc="Returns the Real distance from 0. Called for abs(self)." ilk="function" line="128" lineend="130" name="__abs__" signature="__abs__()">
          <variable citdl="Complex" ilk="argument" name="self" />
        </scope>
        <scope doc="self == other" ilk="function" line="138" lineend="140" name="__eq__" signature="__eq__(other)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="other * self" ilk="function" line="103" lineend="105" name="__rmul__" signature="__rmul__(other)">
          <variable citdl="Complex" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Return a builtin complex instance. Called for complex(self)." ilk="function" line="46" name="__complex__" signature="__complex__()">
          <variable citdl="Complex" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Rational" doc="Integral adds a conversion to int and the bit-string operations." ilk="class" line="295" lineend="388" name="Integral">
        <scope ilk="function" line="301" lineend="303" name="__int__" signature="int(self)">
          <variable citdl="Integral" ilk="argument" name="self" />
        </scope>
        <scope doc="self &gt;&gt; other" ilk="function" line="331" lineend="333" name="__rshift__" signature="__rshift__(other)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="other | self" ilk="function" line="366" lineend="368" name="__ror__" signature="__ror__(other)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__hidden__" doc="Integers are their own numerators." ilk="function" line="381" lineend="383" name="numerator (property getter)" returns="Integral" signature="numerator (property getter)()">
          <variable citdl="Integral" ilk="argument" name="self" />
        </scope>
        <scope doc="~self" ilk="function" line="371" lineend="373" name="__invert__" signature="__invert__()">
          <variable citdl="Integral" ilk="argument" name="self" />
        </scope>
        <scope doc="other &amp; self" ilk="function" line="346" lineend="348" name="__rand__" signature="__rand__(other)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__hidden__" doc="Integers have a denominator of 1." ilk="function" line="386" lineend="388" name="denominator (property getter)" returns="int" signature="denominator (property getter)()">
          <variable citdl="Integral" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="int" line="386" name="denominator" />
        <variable attributes="property" citdl="Integral" line="381" name="numerator" />
        <scope doc="self ** exponent % modulus, but maybe faster." ilk="function" line="310" lineend="318" name="__pow__" signature="__pow__(exponent, modulus=None)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="exponent" />
          <variable ilk="argument" name="modulus" />
        </scope>
        <scope doc="self ^ other" ilk="function" line="351" lineend="353" name="__xor__" signature="__xor__(other)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable citdl="tuple" line="298" name="__slots__" />
        <scope doc="other &gt;&gt; self" ilk="function" line="336" lineend="338" name="__rrshift__" signature="__rrshift__(other)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="self | other" ilk="function" line="361" lineend="363" name="__or__" signature="__or__(other)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="self &lt;&lt; other" ilk="function" line="321" lineend="323" name="__lshift__" signature="__lshift__(other)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="self &amp; other" ilk="function" line="341" lineend="343" name="__and__" signature="__and__(other)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="305" lineend="307" name="__index__" returns="int()" signature="index(self)">
          <variable citdl="Integral" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="376" lineend="378" name="__float__" returns="float()" signature="float(self) == float(int(self))">
          <variable citdl="Integral" ilk="argument" name="self" />
        </scope>
        <scope doc="other ^ self" ilk="function" line="356" lineend="358" name="__rxor__" signature="__rxor__(other)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="other &lt;&lt; self" ilk="function" line="326" lineend="328" name="__rlshift__" signature="__rlshift__(other)">
          <variable citdl="Integral" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
      </scope>
      <scope classrefs="object" doc="All numbers inherit from this class.  If you just want to check if an argument x is a number, without" ilk="class" line="12" lineend="21" name="Number">
        <variable line="21" name="__hash__" />
        <variable citdl="tuple" line="18" name="__slots__" />
      </scope>
      <scope classrefs="Real" doc=".numerator and .denominator should be in lowest terms." ilk="class" line="270" lineend="292" name="Rational">
        <variable citdl="tuple" line="273" name="__slots__" />
        <scope ilk="function" line="280" lineend="281" name="denominator" signature="denominator()">
          <variable citdl="Rational" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="276" lineend="277" name="numerator" signature="numerator()">
          <variable citdl="Rational" ilk="argument" name="self" />
        </scope>
        <scope doc="It&apos;s important that this conversion use the integer&apos;s &quot;true&quot; division rather than casting one side to float before dividing so that ratios of huge integers convert without overflowing." ilk="function" line="284" lineend="292" name="__float__" returns="Rational.numerator" signature="float(self) = self.numerator / self.denominator">
          <variable citdl="Rational" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Complex" doc="To Complex, Real adds the operations that work on real numbers.  In short, those are: a conversion to float, trunc(), divmod," ilk="class" line="150" lineend="265" name="Real">
        <variable attributes="property" citdl="Real" line="254" name="real" />
        <scope doc="The pair (self // other, self % other)." ilk="function" line="208" lineend="214" name="__rdivmod__" returns="tuple" signature="divmod(other, self)">
          <variable citdl="Real" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Rounds self to ndigits decimal places, defaulting to 0." ilk="function" line="192" lineend="198" name="__round__" signature="__round__()" />
        <scope doc="Truncates self to an Integral." ilk="function" line="169" lineend="179" name="__trunc__" signature="trunc(self)">
          <variable citdl="Real" ilk="argument" name="self" />
        </scope>
        <scope doc="Conjugate is a no-op for Reals." ilk="function" line="263" lineend="265" name="conjugate" returns="Real" signature="conjugate()">
          <variable citdl="Real" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="int" line="259" name="imag" />
        <scope doc="self % other" ilk="function" line="227" lineend="229" name="__mod__" signature="__mod__(other)">
          <variable citdl="Real" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__hidden__" doc="Real numbers have no imaginary component." ilk="function" line="259" lineend="261" name="imag (property getter)" returns="int" signature="imag (property getter)()">
          <variable citdl="Real" ilk="argument" name="self" />
        </scope>
        <scope doc="self &lt;= other" ilk="function" line="244" lineend="246" name="__le__" signature="__le__(other)">
          <variable citdl="Real" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable citdl="tuple" line="159" name="__slots__" />
        <scope attributes="__hidden__" doc="Real numbers are their real component." ilk="function" line="254" lineend="256" name="real (property getter)" returns="Real" signature="real (property getter)()">
          <variable citdl="Real" ilk="argument" name="self" />
        </scope>
        <scope doc="other // self: The floor() of other/self." ilk="function" line="222" lineend="224" name="__rfloordiv__" signature="__rfloordiv__(other)">
          <variable citdl="Real" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="The pair (self // other, self % other)." ilk="function" line="200" lineend="206" name="__divmod__" returns="tuple" signature="divmod(self, other)">
          <variable citdl="Real" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="self // other: The floor() of self/other." ilk="function" line="217" lineend="219" name="__floordiv__" signature="__floordiv__(other)">
          <variable citdl="Real" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="249" lineend="251" name="__complex__" returns="complex()" signature="complex(self) == complex(float(self), 0)">
          <variable citdl="Real" ilk="argument" name="self" />
        </scope>
        <scope doc="other % self" ilk="function" line="232" lineend="234" name="__rmod__" signature="__rmod__(other)">
          <variable citdl="Real" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Finds the least Integral &gt;= self." ilk="function" line="187" lineend="189" name="__ceil__" signature="__ceil__()">
          <variable citdl="Real" ilk="argument" name="self" />
        </scope>
        <scope doc="Finds the greatest Integral &lt;= self." ilk="function" line="182" lineend="184" name="__floor__" signature="__floor__()">
          <variable citdl="Real" ilk="argument" name="self" />
        </scope>
        <scope doc="self &lt; other" ilk="function" line="237" lineend="241" name="__lt__" signature="__lt__(other)">
          <variable citdl="Real" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Any Real can be converted to a native float object." ilk="function" line="162" lineend="166" name="__float__" signature="__float__()">
          <variable citdl="Real" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="list" line="10" name="__all__" />
      <scope doc="A decorator indicating abstract methods." ilk="function" name="abstractmethod" signature="abstractmethod(funcobj)" />
      <scope classrefs="property" doc="A decorator indicating abstract properties.  Requires that the metaclass is ABCMeta or derived from it.  A" ilk="class" name="abstractproperty" />
    </scope>
    <scope doc="Basic message object for the email package object model." ilk="blob" lang="Python3" name="email.message">
      <scope classrefs="_BufferedIOBase" doc="BytesIO([buffer]) -&gt; object  Create a buffered I/O implementation using an in-memory bytes" ilk="class" name="BytesIO" />
      <scope classrefs="object" doc="Map character sets to their email properties.  This class provides information about the requirements imposed on email" ilk="class" name="Charset" />
      <scope classrefs="object" doc="Basic message object.  A message object is defined as something that has a bunch of RFC 2822" ilk="class" line="91" lineend="796" name="Message">
        <scope doc="Set a parameter in the Content-Type header." ilk="function" line="571" lineend="617" name="set_param" signature="set_param(param, value, header=&apos;Content-Type&apos;, requote=True, charset=None, language=&apos;&apos;)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="param" />
          <variable citdl="tuple" ilk="argument" name="value" />
          <variable citdl="str" ilk="argument" name="header" />
          <variable citdl="True" ilk="argument" name="requote" />
          <variable ilk="argument" name="charset" />
          <variable citdl="str" ilk="argument" name="language" />
          <variable citdl="str" line="593" name="ctype" />
          <variable citdl="_formatparam()" line="606" name="append_param" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Charset()" line="110" name="_charset" />
        <scope doc="Return the entire formatted message as a string." ilk="function" line="117" lineend="121" name="__str__" returns="self.as_string()" signature="__str__()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <scope doc="Extended header setting." ilk="function" line="391" lineend="411" name="add_header" signature="add_header(_name, _value, **_params)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="_name" />
          <variable ilk="argument" name="_value" />
          <variable attributes="kwargs" ilk="argument" name="_params" />
          <variable citdl="list" line="403" name="parts" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="113" name="defects" />
        <scope doc="Returns the message&apos;s sub-content type." ilk="function" line="465" lineend="472" name="get_content_subtype" signature="get_content_subtype()">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable citdl="get_content_type()" line="471" name="ctype" />
        </scope>
        <scope doc="Return the filename associated with the payload if present." ilk="function" line="673" lineend="687" name="get_filename" signature="get_filename(failobj=None)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="failobj" />
          <variable citdl="object()" line="681" name="missing" />
          <variable citdl="get_param()" line="682" name="filename" />
        </scope>
        <scope doc="Remove the given parameter completely from the Content-Type header." ilk="function" line="619" lineend="639" name="del_param" signature="del_param(param, header=&apos;content-type&apos;, requote=True)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="param" />
          <variable citdl="str" ilk="argument" name="header" />
          <variable citdl="True" ilk="argument" name="requote" />
          <variable citdl="SEMISPACE.join()" line="629" name="new_ctype" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="106" lineend="115" name="__init__" signature="Message()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="492" lineend="511" name="_get_params_preserve" returns="list" signature="_get_params_preserve(failobj, header)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="failobj" />
          <variable ilk="argument" name="header" />
          <variable citdl="object()" line="495" name="missing" />
          <variable citdl="get()" line="496" name="value" />
          <variable citdl="list" line="499" name="params" />
          <variable citdl="name.strip()" line="503" name="name" />
          <variable citdl="val.strip()" line="504" name="val" />
        </scope>
        <scope doc="Get a header value." ilk="function" line="286" lineend="295" name="__getitem__" returns="self.get()" signature="__getitem__(name)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="317" lineend="318" name="__contains__" returns="bool" signature="__contains__(name)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Return the message&apos;s content type." ilk="function" line="432" lineend="454" name="get_content_type" returns="self.get_default_type()" signature="get_content_type()">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable citdl="object()" line="445" name="missing" />
          <variable citdl="get()" line="446" name="value" />
          <variable line="450" name="ctype" />
        </scope>
        <scope doc="Return a list of all the values for the named field." ilk="function" line="373" lineend="389" name="get_all" returns="list" signature="get_all(name, failobj=None)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable citdl="name.lower()" ilk="argument" name="name" />
          <variable ilk="argument" name="failobj" />
          <variable citdl="list" line="382" name="values" />
        </scope>
        <scope doc="Return the message&apos;s Content-Type parameters, as a list." ilk="function" line="513" lineend="533" name="get_params" returns="list" signature="get_params(failobj=None, header=&apos;content-type&apos;, unquote=True)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="failobj" />
          <variable citdl="str" ilk="argument" name="header" />
          <variable citdl="True" ilk="argument" name="unquote" />
          <variable citdl="object()" line="526" name="missing" />
          <variable citdl="_get_params_preserve()" line="527" name="params" />
        </scope>
        <scope doc="Add the given payload to the current payload." ilk="function" line="155" lineend="165" name="attach" signature="attach(payload)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="payload" />
        </scope>
        <scope doc="Return the entire formatted message as a string." ilk="function" line="123" lineend="137" name="as_string" returns="fp.getvalue()" signature="as_string(unixfrom=False, maxheaderlen=0)">
          <import line="133" module="email.generator" symbol="Generator" />
          <variable citdl="Message" ilk="argument" name="self" />
          <variable citdl="False" ilk="argument" name="unixfrom" />
          <variable citdl="int" ilk="argument" name="maxheaderlen" />
          <variable citdl="StringIO()" line="134" name="fp" />
          <variable citdl="Generator()" line="135" name="g" />
        </scope>
        <scope doc="Set the value of a header." ilk="function" line="297" lineend="303" name="__setitem__" signature="__setitem__(name, val)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="val" />
        </scope>
        <scope doc="Set the boundary parameter in Content-Type to &apos;boundary&apos;." ilk="function" line="702" lineend="745" name="set_boundary" signature="set_boundary(boundary)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="boundary" />
          <variable citdl="object()" line="712" name="missing" />
          <variable citdl="_get_params_preserve()" line="713" name="params" />
          <variable citdl="list" line="718" name="newparams" />
          <variable citdl="False" line="719" name="foundp" />
          <variable citdl="list" line="732" name="newheaders" />
          <variable citdl="list" line="735" name="parts" />
        </scope>
        <scope doc="Get a header value." ilk="function" line="357" lineend="367" name="get" returns="v" signature="get(name, failobj=None)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable citdl="name.lower()" ilk="argument" name="name" />
          <variable ilk="argument" name="failobj" />
        </scope>
        <scope doc="Set the charset of the payload to a given character set." ilk="function" line="236" lineend="272" name="set_charset" signature="set_charset(charset)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable citdl="Charset()" ilk="argument" name="charset" />
          <variable citdl="charset.get_body_encoding()" line="267" name="cte" />
        </scope>
        <scope ilk="function" line="324" lineend="325" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the payload to the given value." ilk="function" line="226" lineend="234" name="set_payload" signature="set_payload(payload, charset=None)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="payload" />
          <variable ilk="argument" name="charset" />
        </scope>
        <scope ilk="function" line="149" lineend="150" name="get_unixfrom" signature="get_unixfrom()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the Charset instance associated with the message&apos;s payload." ilk="function" line="274" lineend="277" name="get_charset" returns="Charset()" signature="get_charset()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="charset.body_encode()" line="109" name="_payload" />
        <scope doc="Return a list of all the message&apos;s header field names." ilk="function" line="327" lineend="335" name="keys" returns="list" signature="keys()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the main type and subtype for the Content-Type header." ilk="function" line="641" lineend="671" name="set_type" signature="set_type(type, header=&apos;Content-Type&apos;, requote=True)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable citdl="str" ilk="argument" name="header" />
          <variable citdl="True" ilk="argument" name="requote" />
          <variable citdl="get_params()" line="666" name="params" />
        </scope>
        <scope ilk="function" line="146" lineend="147" name="set_unixfrom" signature="set_unixfrom(unixfrom)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="unixfrom" />
        </scope>
        <scope ilk="function" line="320" lineend="322" name="__iter__" signature="__iter__()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="108" name="_unixfrom" />
        <scope doc="Return a list containing the charset(s) used in this message." ilk="function" line="777" lineend="793" name="get_charsets" returns="list" signature="get_charsets(failobj=None)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="failobj" />
        </scope>
        <variable attributes="__instancevar__" line="112" name="preamble" />
        <scope doc="Return the `default&apos; content type." ilk="function" line="474" lineend="481" name="get_default_type" returns="str" signature="get_default_type()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <scope doc="Delete all occurrences of a header, if present." ilk="function" line="305" lineend="315" name="__delitem__" signature="__delitem__(name)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable citdl="name.lower()" ilk="argument" name="name" />
          <variable citdl="list" line="311" name="newheaders" />
        </scope>
        <scope doc="Return the message&apos;s main content type." ilk="function" line="456" lineend="463" name="get_content_maintype" signature="get_content_maintype()">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable citdl="get_content_type()" line="462" name="ctype" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="107" name="_headers" />
        <scope doc="Get all the message&apos;s header fields and values." ilk="function" line="347" lineend="355" name="items" returns="list" signature="items()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="115" name="_default_type" />
        <scope doc="Return True if the message consists of multiple parts." ilk="function" line="139" lineend="141" name="is_multipart" returns="isinstance()" signature="is_multipart()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <scope doc="Replace a header." ilk="function" line="413" lineend="426" name="replace_header" signature="replace_header(_name, _value)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable citdl="_name.lower()" ilk="argument" name="_name" />
          <variable ilk="argument" name="_value" />
        </scope>
        <scope doc="Return the charset parameter of the Content-Type header." ilk="function" line="747" lineend="775" name="get_content_charset" returns="charset.lower()" signature="get_content_charset(failobj=None)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="failobj" />
          <variable citdl="object()" line="754" name="missing" />
          <variable citdl="get_param()" line="755" name="charset" />
          <variable citdl="str" line="760" name="pcharset" />
          <variable line="765" name="as_bytes" />
        </scope>
        <scope doc="Set the `default&apos; content type." ilk="function" line="483" lineend="490" name="set_default_type" signature="set_default_type(ctype)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="ctype" />
        </scope>
        <scope doc="Return a list of all the message&apos;s header values." ilk="function" line="337" lineend="345" name="values" returns="list" signature="values()">
          <variable citdl="Message" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the boundary associated with the payload if present." ilk="function" line="689" lineend="700" name="get_boundary" signature="get_boundary(failobj=None)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="failobj" />
          <variable citdl="object()" line="695" name="missing" />
          <variable citdl="get_param()" line="696" name="boundary" />
        </scope>
        <scope doc="Return a reference to the payload." ilk="function" line="167" lineend="224" name="get_payload" returns="payload.encode()" signature="get_payload(i=None, decode=False)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable citdl="False" ilk="argument" name="decode" />
          <variable citdl="list" line="188" name="payload" />
          <variable line="199" name="cte" />
          <variable citdl="BytesIO()" line="212" name="in_file" />
          <variable citdl="BytesIO()" line="213" name="out_file" />
        </scope>
        <scope doc="Return the parameter value if found in the Content-Type header." ilk="function" line="535" lineend="569" name="get_param" returns="v" signature="get_param(param, failobj=None, header=&apos;content-type&apos;, unquote=True)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="param" />
          <variable ilk="argument" name="failobj" />
          <variable citdl="str" ilk="argument" name="header" />
          <variable citdl="True" ilk="argument" name="unquote" />
        </scope>
      </scope>
      <variable citdl="str" line="21" name="SEMISPACE" />
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <variable citdl="list" line="7" name="__all__" />
      <import module="base64" />
      <import module="binascii" />
      <import module="errors" />
      <import module="re" />
      <variable citdl="SRE_Pattern" line="25" name="tspecials" />
      <import module="utils" />
      <import module="uu" />
      <import module="warnings" />
      <scope attributes="protected __hidden__" ilk="function" line="79" lineend="87" name="_unquotevalue" returns="tuple" signature="_unquotevalue(value)">
        <variable ilk="argument" name="value" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="29" lineend="37" name="_splitparam" returns="tuple" signature="_splitparam(param)">
        <variable ilk="argument" name="param" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="61" lineend="76" name="_parseparam" returns="list" signature="_parseparam(s)">
        <variable citdl="list" ilk="argument" name="s" />
        <variable citdl="list" line="62" name="plist" />
        <variable citdl="s.find()" line="65" name="end" />
        <variable citdl="list" line="70" name="f" />
        <variable citdl="f.index()" line="72" name="i" />
      </scope>
      <scope attributes="protected __hidden__" doc="Convenience function to format and return a key=value pair." ilk="function" line="39" lineend="59" name="_formatparam" returns="tuple" signature="_formatparam(param, value=None, quote=True)">
        <variable ilk="argument" name="param" />
        <variable citdl="utils.encode_rfc2231()" ilk="argument" name="value" />
        <variable citdl="True" ilk="argument" name="quote" />
      </scope>
    </scope>
    <scope doc="distutils.command.sdist  Implements the Distutils &apos;sdist&apos; command (create a source distribution)." ilk="blob" lang="Python3" name="distutils.command.sdist">
      <scope classrefs="object" ilk="class" name="BuiltinFunctionType" />
      <scope classrefs="object" ilk="class" name="BuiltinMethodType" />
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,       constants, names, varnames, filename, name, firstlineno,       lnotab[, freevars[, cellvars]])" ilk="class" name="CodeType" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="A list of files built by on exploring the filesystem and filtered by applying various patterns to what we find there. " ilk="class" name="FileList" />
      <scope classrefs="object" ilk="class" name="FrameType" />
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])  Create a function object from a code object and a dictionary." ilk="class" name="FunctionType" />
      <scope classrefs="object" ilk="class" name="GeneratorType" />
      <scope classrefs="object" ilk="class" name="GetSetDescriptorType" />
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])  Create a function object from a code object and a dictionary." ilk="class" name="LambdaType" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="object" ilk="class" name="MemberDescriptorType" />
      <scope classrefs="object" doc="method(function, instance)  Create a bound instance method object." ilk="class" name="MethodType" />
      <scope classrefs="object" doc="module(name[, doc])  Create a module object." ilk="class" name="ModuleType" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="object" doc="Provides a file-like object that takes care of all the things you commonly want to do when processing a text file that has some line-by-line syntax: strip comments (as long as &quot;#&quot; is your" ilk="class" name="TextFile" />
      <scope classrefs="object" ilk="class" name="TracebackType" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" name="__revision__" />
      <import module="archive_util" />
      <scope doc="Return &apos;pathname&apos; as a name that will work on the native filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <import module="dep_util" />
      <import module="dir_util" />
      <import module="file_util" />
      <scope doc="Return a list of paths matching a pathname pattern." ilk="function" name="glob" signature="glob(pathname)" />
      <import module="log" />
      <import module="os" />
      <scope classrefs="Command" ilk="class" name="sdist" />
      <scope doc="Print all possible values for the &apos;formats&apos; option (used by the &quot;--help-formats&quot; command-line option)." ilk="function" name="show_formats" signature="show_formats()" />
      <import module="string" />
      <import module="sys" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_subprocess">
      <variable citdl="int" name="CREATE_NEW_CONSOLE" />
      <scope ilk="function" name="CreatePipe" />
      <scope ilk="function" name="CreateProcess" />
      <variable citdl="int" name="DUPLICATE_SAME_ACCESS" />
      <scope ilk="function" name="DuplicateHandle" />
      <scope ilk="function" name="GetCurrentProcess" />
      <scope ilk="function" name="GetExitCodeProcess" />
      <scope ilk="function" name="GetModuleFileName" />
      <scope ilk="function" name="GetStdHandle" />
      <scope ilk="function" name="GetVersion" />
      <variable citdl="int" name="INFINITE" />
      <variable citdl="int" name="STARTF_USESHOWWINDOW" />
      <variable citdl="int" name="STARTF_USESTDHANDLES" />
      <variable citdl="int" name="STD_ERROR_HANDLE" />
      <variable citdl="int" name="STD_INPUT_HANDLE" />
      <variable citdl="int" name="STD_OUTPUT_HANDLE" />
      <variable citdl="int" name="SW_HIDE" />
      <scope ilk="function" name="TerminateProcess" />
      <variable citdl="int" name="WAIT_OBJECT_0" />
      <scope ilk="function" name="WaitForSingleObject" />
    </scope>
    <scope doc="Utility functions for copying files and directory trees.  XXX The functions here don&apos;t copy the resource fork or other metadata on Mac." ilk="blob" lang="Python3" name="shutil">
      <scope classrefs="EnvironmentError" ilk="class" line="16" lineend="17" name="Error" />
      <scope classrefs="EnvironmentError" doc="Raised when trying to do a kind of operation (e.g. copying) which is not supported on a special file (e.g. a named pipe)" ilk="class" line="19" name="SpecialFileError" />
      <variable citdl="list" line="13" name="__all__" />
      <scope doc="Return the absolute version of a path." ilk="function" name="abspath" signature="abspath(path)" />
      <scope doc="Copy data and mode bits (&quot;cp src dst&quot;)." ilk="function" line="94" lineend="103" name="copy" signature="copy(src, dst)">
        <variable ilk="argument" name="src" />
        <variable citdl="os.path.join()" ilk="argument" name="dst" />
      </scope>
      <scope doc="Copy data and all stat info (&quot;cp -p src dst&quot;)." ilk="function" line="105" lineend="114" name="copy2" signature="copy2(src, dst)">
        <variable ilk="argument" name="src" />
        <variable citdl="os.path.join()" ilk="argument" name="dst" />
      </scope>
      <scope doc="Copy data from src to dst" ilk="function" line="48" lineend="73" name="copyfile" signature="copyfile(src, dst)">
        <variable ilk="argument" name="src" />
        <variable ilk="argument" name="dst" />
        <variable citdl="open()" line="54" name="fdst" />
        <variable citdl="open()" line="53" name="fsrc" />
        <variable citdl="os.stat()" line="57" name="st" />
      </scope>
      <scope doc="copy data from file-like object fsrc to file-like object fdst" ilk="function" line="28" lineend="34" name="copyfileobj" signature="copyfileobj(fsrc, fdst, length=16384)">
        <variable citdl="fsrc.read()" line="31" name="buf" />
        <variable citdl="int" ilk="argument" name="length" />
        <variable ilk="argument" name="fdst" />
        <variable ilk="argument" name="fsrc" />
      </scope>
      <scope doc="Copy mode bits from src to dst" ilk="function" line="75" lineend="80" name="copymode" signature="copymode(src, dst)">
        <variable ilk="argument" name="src" />
        <variable ilk="argument" name="dst" />
        <variable citdl="stat.S_IMODE()" line="79" name="mode" />
        <variable citdl="os.stat()" line="78" name="st" />
      </scope>
      <scope doc="Copy all stat info (mode bits, atime, mtime, flags) from src to dst" ilk="function" line="82" lineend="91" name="copystat" signature="copystat(src, dst)">
        <variable ilk="argument" name="src" />
        <variable ilk="argument" name="dst" />
        <variable citdl="stat.S_IMODE()" line="85" name="mode" />
        <variable citdl="os.stat()" line="84" name="st" />
      </scope>
      <scope doc="Recursively copy a directory tree using copy2()." ilk="function" line="128" lineend="191" name="copytree" signature="copytree(src, dst, symlinks=False, ignore=None)">
        <variable citdl="False" ilk="argument" name="symlinks" />
        <variable ilk="argument" name="src" />
        <variable citdl="list" line="161" name="errors" />
        <variable citdl="os.readlink()" line="169" name="linkto" />
        <variable citdl="os.path.join()" line="166" name="dstname" />
        <variable ilk="argument" name="dst" />
        <variable citdl="os.path.join()" line="165" name="srcname" />
        <variable citdl="os.listdir()" line="154" name="names" />
        <variable ilk="argument" name="ignore" />
        <variable citdl="set()" line="156" name="ignored_names" />
      </scope>
      <import module="fnmatch" />
      <scope doc="Function that can be used as copytree() ignore parameter." ilk="function" line="116" lineend="126" name="ignore_patterns" returns="ignore_patterns._ignore_patterns" signature="ignore_patterns(*patterns)">
        <variable attributes="varargs" ilk="argument" name="patterns" />
        <scope attributes="protected" ilk="function" line="121" lineend="125" name="_ignore_patterns" returns="set()" signature="_ignore_patterns(path, names)">
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="names" />
          <variable citdl="list" line="122" name="ignored_names" />
        </scope>
      </scope>
      <scope doc="Recursively move a file or directory to another location." ilk="function" line="247" lineend="279" name="move" signature="move(src, dst)">
        <variable citdl="os.path.join()" line="264" name="real_dst" />
        <variable ilk="argument" name="src" />
        <variable ilk="argument" name="dst" />
      </scope>
      <import module="os" />
      <scope doc="Recursively delete a directory tree." ilk="function" line="193" lineend="239" name="rmtree" signature="rmtree(path, ignore_errors=False, onerror=None)">
        <variable ilk="argument" name="onerror" />
        <variable citdl="int" line="226" name="mode" />
        <variable citdl="False" ilk="argument" name="ignore_errors" />
        <variable ilk="argument" name="path" />
        <variable citdl="os.path.join()" line="224" name="fullname" />
        <variable citdl="os.listdir()" line="218" name="names" />
      </scope>
      <import module="stat" />
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="242" lineend="245" name="_basename" returns="os.path.basename()" signature="_basename(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="281" lineend="288" name="_destinsrc" returns="dst.startswith()" signature="_destinsrc(src, dst)">
        <variable citdl="abspath()" ilk="argument" name="src" />
        <variable citdl="abspath()" ilk="argument" name="dst" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="36" lineend="46" name="_samefile" returns="os.path.samefile()" signature="_samefile(src, dst)">
        <variable ilk="argument" name="src" />
        <variable ilk="argument" name="dst" />
      </scope>
      <variable attributes="__hidden__" line="26" name="WindowsError" />
    </scope>
    <scope doc="# ElementTree # $Id: ElementPath.py 1858 2004-06-17 21:31:41Z Fredrik $ #" ilk="blob" lang="Python3" name="xml.etree.ElementPath">
      <scope classrefs="object" ilk="class" line="66" lineend="165" name="Path">
        <scope ilk="function" line="118" lineend="128" name="findtext" returns="str" signature="findtext(element, default=None)">
          <variable citdl="Path" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
          <variable ilk="argument" name="default" />
          <variable line="119" name="tag" />
          <variable citdl="self.findall()" line="121" name="nodeset" />
        </scope>
        <scope ilk="function" line="133" lineend="165" name="findall" returns="list" signature="findall(element)">
          <variable citdl="Path" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
          <variable citdl="list" line="134" name="nodeset" />
          <variable citdl="int" line="135" name="index" />
          <variable line="138" name="path" />
          <variable citdl="list" line="142" name="set" />
          <variable line="145" name="tag" />
          <variable citdl="list()" line="153" name="new" />
        </scope>
        <variable attributes="__instancevar__" line="75" name="tag" />
        <variable attributes="__instancevar__" citdl="list" line="74" name="path" />
        <scope ilk="function" line="103" lineend="113" name="find" returns="elem" signature="find(element)">
          <variable citdl="Path" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
          <variable line="104" name="tag" />
          <variable citdl="self.findall()" line="106" name="nodeset" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="71" lineend="98" name="__init__" signature="Path(path)">
          <variable citdl="Path" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable citdl="xpath_tokenizer()" line="72" name="tokens" />
        </scope>
      </scope>
      <scope ilk="function" line="185" lineend="186" name="find" signature="find(element, path)">
        <variable ilk="argument" name="path" />
        <variable ilk="argument" name="element" />
      </scope>
      <scope ilk="function" line="197" lineend="198" name="findall" signature="findall(element, path)">
        <variable ilk="argument" name="path" />
        <variable ilk="argument" name="element" />
      </scope>
      <scope ilk="function" line="191" lineend="192" name="findtext" signature="findtext(element, path, default=None)">
        <variable ilk="argument" name="default" />
        <variable ilk="argument" name="path" />
        <variable ilk="argument" name="element" />
      </scope>
      <import module="re" />
      <scope classrefs="object" ilk="class" line="60" lineend="61" name="xpath_descendant_or_self" />
      <scope doc="Return a list of all non-overlapping matches of pattern in string." ilk="function" line="56" name="xpath_tokenizer" signature="findall(string[, pos[, endpos]]) --&gt; list." />
      <variable attributes="protected __hidden__" citdl="dict" line="167" name="_cache" />
      <scope attributes="protected __hidden__" ilk="function" line="172" lineend="180" name="_compile" returns="_cache.get()" signature="_compile(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="Path" line="173" name="p" />
      </scope>
    </scope>
    <scope doc="Core implementation of import.  This module is NOT meant to be directly imported! It has been designed such" ilk="blob" lang="Python3" name="importlib._bootstrap">
      <scope classrefs="object" doc="Meta path import for built-in modules.  All methods are either class or static methods to avoid the need to" ilk="class" line="204" lineend="254" name="BuiltinImporter">
        <scope doc="Load a built-in module." ilk="function" line="228" lineend="236" name="load_module" returns="imp.init_builtin()" signature="load_module(fullname)">
          <variable citdl="BuiltinImporter" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="bool" line="230" name="is_reload" />
        </scope>
        <scope doc="Return None as built-in modules do not have code objects." ilk="function" line="240" lineend="242" name="get_code" signature="get_code(fullname)">
          <variable citdl="BuiltinImporter" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope doc="Return None as built-in module are never packages." ilk="function" line="252" lineend="254" name="is_package" returns="bool" signature="is_package(fullname)">
          <variable citdl="BuiltinImporter" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope doc="Return None as built-in modules do not have source code." ilk="function" line="246" lineend="248" name="get_source" signature="get_source(fullname)">
          <variable citdl="BuiltinImporter" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope doc="Find the built-in module." ilk="function" line="214" lineend="222" name="find_module" signature="find_module(fullname, path=None)">
          <variable citdl="BuiltinImporter" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
          <variable ilk="argument" name="path" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Meta path import for frozen modules.  All methods are either class or static methods to avoid the need to" ilk="class" line="257" lineend="301" name="FrozenImporter">
        <scope doc="Load a frozen module." ilk="function" line="275" lineend="283" name="load_module" returns="imp.init_frozen()" signature="load_module(fullname)">
          <variable citdl="FrozenImporter" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="bool" line="277" name="is_reload" />
        </scope>
        <scope doc="Return the code object for the frozen module." ilk="function" line="287" lineend="289" name="get_code" returns="imp.get_frozen_object()" signature="get_code(fullname)">
          <variable citdl="FrozenImporter" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope doc="Return if the frozen module is a package." ilk="function" line="299" lineend="301" name="is_package" returns="imp.is_frozen_package()" signature="is_package(fullname)">
          <variable citdl="FrozenImporter" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope doc="Return None as frozen modules do not have source code." ilk="function" line="293" lineend="295" name="get_source" signature="get_source(fullname)">
          <variable citdl="FrozenImporter" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope doc="Find a frozen module." ilk="function" line="267" lineend="269" name="find_module" signature="find_module(fullname, path=None)">
          <variable citdl="FrozenImporter" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
          <variable ilk="argument" name="path" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Meta path finder for sys.(path|path_hooks|path_importer_cache)." ilk="class" line="593" lineend="655" name="PathFinder">
        <scope attributes="protected" doc="Get the finder for the path from sys.path_importer_cache." ilk="function" line="615" lineend="637" name="_path_importer_cache" returns="default()" signature="_path_importer_cache(path, default=None)">
          <variable citdl="PathFinder" ilk="argument" name="cls" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="default" />
          <variable citdl="_path_hooks()" line="628" name="finder" />
        </scope>
        <scope attributes="protected" doc="Search sequence of hooks for a finder for &apos;path&apos;." ilk="function" line="598" lineend="612" name="_path_hooks" returns="hook()" signature="_path_hooks(path, hooks=None)">
          <variable citdl="PathFinder" ilk="argument" name="cls" />
          <variable ilk="argument" name="path" />
          <variable citdl="sys.path_hooks" ilk="argument" name="hooks" />
        </scope>
        <scope doc="Find the module on sys.path or &apos;path&apos; based on sys.path_hooks and sys.path_importer_cache." ilk="function" line="640" lineend="655" name="find_module" returns="finder.find_module()" signature="find_module(fullname, path=None)">
          <variable citdl="PathFinder" ilk="argument" name="cls" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="sys.path" ilk="argument" name="path" />
          <variable citdl="_path_importer_cache()" line="647" name="finder" />
          <variable citdl="finder.find_module()" line="651" name="loader" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Loader base class for Python source code.  Subclasses need to implement the methods:" ilk="class" line="304" lineend="379" name="PyLoader">
        <scope doc="Load a source module." ilk="function" line="317" lineend="319" name="load_module" returns="self._load_module()" signature="load_module(module)">
          <variable citdl="PyLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="module" />
        </scope>
        <scope doc="Get a code object from source." ilk="function" line="337" lineend="359" name="get_code" returns="compile()" signature="get_code(fullname)">
          <variable citdl="PyLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="self.source_path()" line="339" name="source_path" />
          <variable citdl="str.format()" line="341" name="message" />
          <variable citdl="source.replace()" line="343" name="source" />
          <variable citdl="str" line="345" name="line_endings" />
        </scope>
        <scope doc="Return the source code for a module." ilk="function" line="362" lineend="379" name="get_source" returns="ImportError()" signature="get_source(fullname)">
          <import line="376" module="io" />
          <import line="377" module="tokenize" />
          <variable citdl="PyLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="self.source_path()" line="369" name="path" />
          <variable citdl="self.get_data()" line="373" name="source_bytes" />
          <variable citdl="tokenize.detect_encoding()" line="378" name="encoding" />
        </scope>
        <scope attributes="protected" doc="Initialize a module from source." ilk="function" line="321" lineend="335" name="_load_module" signature="_load_module(module)">
          <variable citdl="PyLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="module" />
          <variable citdl="module.__name__" line="323" name="name" />
          <variable citdl="self.get_code()" line="324" name="code_object" />
        </scope>
      </scope>
      <scope classrefs="PyLoader" doc="Loader base class for Python source and bytecode.  Requires implementing the methods needed for PyLoader as well as" ilk="class" line="382" lineend="449" name="PyPycLoader">
        <scope doc="Load a module from source or bytecode." ilk="function" line="392" lineend="399" name="load_module" returns="self._load_module()" signature="load_module(module)">
          <variable citdl="PyPycLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="module" />
          <variable citdl="module.__name__" line="394" name="name" />
          <variable citdl="self.source_path()" line="395" name="source_path" />
          <variable citdl="self.bytecode_path()" line="396" name="bytecode_path" />
        </scope>
        <scope doc="Get a code object from source or bytecode." ilk="function" line="401" lineend="449" name="get_code" returns="marshal.loads()" signature="get_code(fullname)">
          <variable citdl="PyPycLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="self.source_mtime()" line="405" name="source_timestamp" />
          <variable citdl="self.bytecode_path()" line="407" name="bytecode_path" />
          <variable citdl="bytearray()" line="409" name="data" />
          <variable citdl="list" line="411" name="magic" />
          <variable citdl="list" line="414" name="raw_timestamp" />
          <variable citdl="marshal._r_long()" line="417" name="pyc_timestamp" />
          <variable citdl="list" line="418" name="bytecode" />
          <variable line="442" name="code_object" />
        </scope>
      </scope>
      <scope doc="Import a module." ilk="function" line="910" lineend="954" name="__import__" returns="_gcd_import()" signature="__import__(name, globals={}, locals={}, fromlist=[], level=0)">
        <variable citdl="list" ilk="argument" name="fromlist" />
        <variable ilk="argument" name="name" />
        <variable citdl="int" ilk="argument" name="level" />
        <variable line="926" name="package" />
        <variable citdl="_gcd_import()" line="922" name="module" />
        <variable citdl="len()" line="941" name="cut_off" />
        <variable citdl="dict" ilk="argument" name="globals" />
        <variable citdl="dict" ilk="argument" name="locals" />
      </scope>
      <import module="_io" />
      <import module="_os" />
      <import module="_warnings" />
      <import module="errno" />
      <import module="imp" />
      <import module="marshal" />
      <scope doc="Decorator to handle selecting the proper module for loaders." ilk="function" line="128" lineend="157" name="module_for_loader" returns="module_for_loader.decorated" signature="module_for_loader(fxn)">
        <scope ilk="function" line="141" lineend="155" name="decorated" returns="module_for_loader.fxn()" signature="decorated(self, fullname)">
          <variable ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="sys.modules.get()" line="142" name="module" />
          <variable citdl="bool()" line="143" name="is_reload" />
        </scope>
        <variable ilk="argument" name="fxn" />
      </scope>
      <variable citdl="str" name="path_sep" />
      <scope doc="Set __loader__ on the returned module." ilk="function" line="117" lineend="125" name="set_loader" returns="set_loader.wrapper" signature="set_loader(fxn)">
        <variable ilk="argument" name="fxn" />
        <scope ilk="function" line="119" lineend="123" name="wrapper" returns="fxn()" signature="wrapper(self, *args, **kwargs)">
          <variable ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="fxn()" line="120" name="module" />
        </scope>
      </scope>
      <scope doc="Set __package__ on the returned module." ilk="function" line="104" lineend="114" name="set_package" returns="set_package.wrapper" signature="set_package(fxn)">
        <variable ilk="argument" name="fxn" />
        <scope ilk="function" line="106" lineend="112" name="wrapper" returns="fxn()" signature="wrapper(*args, **kwargs)">
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="fxn()" line="107" name="module" />
        </scope>
      </scope>
      <import module="sys" />
      <scope attributes="protected __hidden__" classrefs="PyLoader" doc="Load a Python source file." ilk="class" line="452" lineend="495" name="_PyFileLoader">
        <scope attributes="__ctor__" ilk="function" line="456" lineend="464" name="__init__" signature="_PyFileLoader(name, path, is_pkg)">
          <variable citdl="_PyFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="is_pkg" />
        </scope>
        <variable attributes="protected __instancevar__" line="457" name="_name" />
        <variable attributes="protected __instancevar__" line="458" name="_is_pkg" />
        <variable attributes="protected __instancevar__" citdl="_path_without_ext()" line="462" name="_base_path" />
        <scope attributes="protected" doc="Find a path from the base path and the specified extension type that exists, returning None if one is not found." ilk="function" line="466" lineend="474" name="_find_path" returns="suffix" signature="_find_path(ext_type)">
          <variable citdl="_PyFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="ext_type" />
          <variable citdl="_path_without_ext()" line="470" name="path" />
        </scope>
        <scope doc="Return the path to an existing source file for the module, or None if one cannot be found." ilk="function" line="477" lineend="481" name="source_path" returns="_PyFileLoader._find_path()" signature="source_path(fullname)">
          <variable citdl="_PyFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope doc="Return the data from path as raw bytes." ilk="function" line="483" lineend="485" name="get_data" signature="get_data(path)">
          <variable citdl="_PyFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
        </scope>
        <scope doc="Return a boolean based on whether the module is a package." ilk="function" line="488" lineend="495" name="is_package" signature="is_package(fullname)">
          <variable citdl="_PyFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Replacement for os.path.join." ilk="function" line="22" lineend="25" name="_path_join" returns="path_sep.join()" signature="_path_join(*args)">
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <scope attributes="protected __hidden__" doc="Decorator to verify the named module is frozen." ilk="function" line="186" lineend="193" name="_requires_frozen" returns="_requires_frozen.wrapper" signature="_requires_frozen(fxn)">
        <variable ilk="argument" name="fxn" />
        <scope ilk="function" line="188" lineend="191" name="wrapper" returns="_requires_frozen.fxn()" signature="wrapper(self, fullname)">
          <variable ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Create a closure which sequentially checks path hooks to see which ones (if any) can work with a path." ilk="function" line="777" lineend="795" name="_chained_path_hook" returns="_chained_path_hook.path_hook" signature="_chained_path_hook(*path_hooks)">
        <variable attributes="varargs" ilk="argument" name="path_hooks" />
        <scope doc="Check to see if &apos;entry&apos; matches any of the enclosed path hooks." ilk="function" line="780" lineend="793" name="path_hook" returns="_ChainedFinder" signature="path_hook(entry)">
          <variable ilk="argument" name="entry" />
          <variable citdl="list" line="782" name="finders" />
          <variable citdl="hook()" line="785" name="finder" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="_chained_path_hook()" line="798" name="_DEFAULT_PATH_HOOK" />
      <scope attributes="protected __hidden__" doc="Replacement for os.path.isfile." ilk="function" line="48" lineend="50" name="_path_isfile" returns="_path_is_mode_type()" signature="_path_isfile(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" doc="Base class for file finders." ilk="class" line="674" lineend="730" name="_FileFinder">
        <scope attributes="__ctor__" doc="Initialize an importer for the passed-in sys.path entry (which is assumed to have already been verified as an existing directory)." ilk="function" line="693" lineend="703" name="__init__" signature="_FileFinder(path_entry)">
          <variable citdl="_FileFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="path_entry" />
          <variable citdl="_path_absolute()" line="700" name="absolute_path" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_path_absolute()" line="703" name="_path_entry" />
        <scope ilk="function" line="705" lineend="730" name="find_module" returns="self._loader()" signature="find_module(fullname, path=None)">
          <variable citdl="_FileFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable ilk="argument" name="path" />
          <variable line="706" name="tail_module" />
          <variable citdl="_path_join()" line="707" name="package_directory" />
          <variable citdl="ext" line="711" name="init_filename" />
          <variable citdl="_path_join()" line="712" name="package_init" />
          <variable citdl="ext" line="718" name="file_name" />
          <variable citdl="_path_join()" line="719" name="file_path" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="_FileFinder" doc="Importer for extension files." ilk="class" line="761" lineend="772" name="_ExtensionFileFinder">
        <variable attributes="protected" citdl="False" line="765" name="_possible_package" />
        <variable attributes="protected" citdl="_ExtensionFileLoader" line="766" name="_loader" />
        <scope attributes="__ctor__" ilk="function" line="768" lineend="772" name="__init__" signature="_ExtensionFileFinder(path_entry)">
          <variable citdl="_ExtensionFileFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="path_entry" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_suffix_list()" line="771" name="_suffixes" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="_PyFileFinder" doc="Finder for source and bytecode files." ilk="class" line="748" lineend="756" name="_PyPycFileFinder">
        <variable attributes="protected" citdl="_PyPycFileLoader" line="752" name="_loader" />
        <scope attributes="__ctor__" ilk="function" line="754" lineend="756" name="__init__" signature="_PyPycFileFinder(path_entry)">
          <variable citdl="_PyPycFileFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="path_entry" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="PathFinder" doc="Subclass of PathFinder that implements implicit semantics for __import__." ilk="class" line="800" lineend="818" name="_DefaultPathFinder">
        <scope attributes="protected" doc="Search sys.path_hooks as well as implicit path hooks." ilk="function" line="806" lineend="812" name="_path_hooks" signature="_path_hooks(path)">
          <variable citdl="_DefaultPathFinder" ilk="argument" name="cls" />
          <variable ilk="argument" name="path" />
          <variable citdl="list" line="811" name="implicit_hooks" />
        </scope>
        <scope attributes="protected" doc="Use the default path hook when None is stored in sys.path_importer_cache." ilk="function" line="815" lineend="818" name="_path_importer_cache" signature="_path_importer_cache(path)">
          <variable citdl="_DefaultPathFinder" ilk="argument" name="cls" />
          <variable ilk="argument" name="path" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Test whether the path is the specified mode type." ilk="function" line="38" lineend="44" name="_path_is_mode_type" returns="bool" signature="_path_is_mode_type(path, mode)">
        <variable ilk="argument" name="path" />
        <variable ilk="argument" name="mode" />
        <variable citdl="_os.stat()" line="41" name="stat_info" />
      </scope>
      <scope attributes="protected __hidden__" doc="Finder that sequentially calls other finders." ilk="class" line="658" lineend="671" name="_ChainedFinder">
        <scope attributes="__ctor__" ilk="function" line="662" lineend="663" name="__init__" signature="_ChainedFinder(*finders)">
          <variable citdl="_ChainedFinder" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="finders" />
        </scope>
        <variable attributes="protected __instancevar__" line="663" name="_finders" />
        <scope ilk="function" line="665" lineend="671" name="find_module" returns="finder.find_module()" signature="find_module(fullname, path=None)">
          <variable citdl="_ChainedFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable ilk="argument" name="path" />
          <variable citdl="finder.find_module()" line="667" name="result" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Loader for extension modules." ilk="class" line="542" lineend="588" name="_ExtensionFileLoader">
        <scope attributes="__ctor__" doc="Initialize the loader." ilk="function" line="550" lineend="560" name="__init__" signature="_ExtensionFileLoader(name, path, is_pkg)">
          <variable citdl="_ExtensionFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="is_pkg" />
        </scope>
        <variable attributes="protected __instancevar__" line="557" name="_name" />
        <variable attributes="protected __instancevar__" line="558" name="_path" />
        <scope doc="Load an extension module." ilk="function" line="565" lineend="573" name="load_module" returns="imp.load_dynamic()" signature="load_module(fullname)">
          <variable citdl="_ExtensionFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="bool" line="567" name="is_reload" />
        </scope>
        <scope doc="Return False as an extension module can never be a package." ilk="function" line="576" lineend="578" name="is_package" returns="bool" signature="is_package(fullname)">
          <variable citdl="_ExtensionFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope doc="Return None as an extension module cannot create a code object." ilk="function" line="581" lineend="583" name="get_code" signature="get_code(fullname)">
          <variable citdl="_ExtensionFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope doc="Return None as extension modules have no source code." ilk="function" line="586" lineend="588" name="get_source" signature="get_source(fullname)">
          <variable citdl="_ExtensionFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="PyPycLoader _PyFileLoader" doc="Load a module from a source or bytecode file." ilk="class" line="498" lineend="539" name="_PyPycFileLoader">
        <scope doc="Return the modification time of the source for the specified module." ilk="function" line="503" lineend="509" name="source_mtime" returns="int()" signature="source_mtime(name)">
          <variable citdl="_PyPycFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="self.source_path()" line="506" name="source_path" />
        </scope>
        <scope doc="Return the path to a bytecode file, or None if one does not exist." ilk="function" line="512" lineend="516" name="bytecode_path" returns="self._find_path()" signature="bytecode_path(fullname)">
          <variable citdl="_PyPycFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <scope doc="Write out &apos;data&apos; for the specified module, returning a boolean signifying if the write-out actually occurred." ilk="function" line="519" lineend="539" name="write_bytecode" returns="bool" signature="write_bytecode(name, data)">
          <variable citdl="_PyPycFileLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="data" />
          <variable citdl="self._base_path" line="527" name="bytecode_path" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Replacement for os.path.splitext()[0]." ilk="function" line="59" lineend="65" name="_path_without_ext" returns="list" signature="_path_without_ext(path, ext_type)">
        <variable ilk="argument" name="path" />
        <variable ilk="argument" name="ext_type" />
      </scope>
      <scope attributes="protected __hidden__" doc="Simple replacement for contextlib.closing." ilk="class" line="81" lineend="92" name="_closing">
        <scope attributes="__ctor__" ilk="function" line="85" lineend="86" name="__init__" signature="_closing(obj)">
          <variable citdl="_closing" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
        </scope>
        <variable attributes="__instancevar__" line="86" name="obj" />
        <scope ilk="function" line="88" lineend="89" name="__enter__" signature="__enter__()">
          <variable citdl="_closing" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="91" lineend="92" name="__exit__" signature="__exit__(*args)">
          <variable citdl="_closing" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Decorator to verify the named module is built-in." ilk="function" line="176" lineend="183" name="_requires_builtin" returns="_requires_builtin.wrapper" signature="_requires_builtin(fxn)">
        <variable ilk="argument" name="fxn" />
        <scope ilk="function" line="178" lineend="181" name="wrapper" returns="_requires_builtin.fxn()" signature="wrapper(self, fullname)">
          <variable ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Replacement for os.path.exists." ilk="function" line="28" lineend="35" name="_path_exists" returns="bool" signature="_path_exists(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="_FileFinder" doc="Importer for source/bytecode files." ilk="class" line="733" lineend="745" name="_PyFileFinder">
        <variable attributes="protected" citdl="True" line="737" name="_possible_package" />
        <variable attributes="protected" citdl="_PyFileLoader" line="738" name="_loader" />
        <scope attributes="__ctor__" ilk="function" line="740" lineend="745" name="__init__" signature="_PyFileFinder(path_entry)">
          <variable citdl="_PyFileFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="path_entry" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_suffix_list()" line="744" name="_suffixes" />
      </scope>
      <scope attributes="protected __hidden__" doc="Decorator to verify that the module being requested matches the one the loader can handle." ilk="function" line="160" lineend="173" name="_check_name" returns="_check_name.inner" signature="_check_name(method)">
        <variable ilk="argument" name="method" />
        <scope ilk="function" line="168" lineend="171" name="inner" returns="_check_name.method()" signature="inner(self, name, *args, **kwargs)">
          <variable ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Context manager for the import lock." ilk="class" line="821" lineend="831" name="_ImportLockContext">
        <scope doc="Acquire the import lock." ilk="function" line="825" lineend="827" name="__enter__" signature="__enter__()">
          <variable citdl="_ImportLockContext" ilk="argument" name="self" />
        </scope>
        <scope doc="Release the import lock regardless of any raised exceptions." ilk="function" line="829" lineend="831" name="__exit__" signature="__exit__(exc_type, exc_value, exc_traceback)">
          <variable citdl="_ImportLockContext" ilk="argument" name="self" />
          <variable ilk="argument" name="exc_type" />
          <variable ilk="argument" name="exc_value" />
          <variable ilk="argument" name="exc_traceback" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="list" line="834" name="_IMPLICIT_META_PATH" />
      <scope attributes="protected __hidden__" doc="Replacement for os.path.isdir." ilk="function" line="54" lineend="56" name="_path_isdir" returns="_path_is_mode_type()" signature="_path_isdir(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" doc="Return a list of file suffixes based on the imp file type." ilk="function" line="196" lineend="199" name="_suffix_list" returns="list" signature="_suffix_list(suffix_type)">
        <variable ilk="argument" name="suffix_type" />
      </scope>
      <scope attributes="protected __hidden__" doc="Replacement for os.path.abspath." ilk="function" line="68" lineend="78" name="_path_absolute" returns="_os.getcwd()" signature="_path_absolute(path)">
        <variable citdl="_os.getcwd()" ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" doc="Simple substitute for functools.wraps." ilk="function" line="95" lineend="99" name="_wrap" signature="_wrap(new, old)">
        <variable ilk="argument" name="new" />
        <variable ilk="argument" name="old" />
      </scope>
      <scope attributes="protected __hidden__" doc="Import and return the module based on its name, the package the call is being made from, and the level adjustment." ilk="function" line="836" lineend="907" name="_gcd_import" signature="_gcd_import(name, package=None, level=0)">
        <variable citdl="list" ilk="argument" name="name" />
        <variable ilk="argument" name="package" />
        <variable citdl="int" ilk="argument" name="level" />
        <variable citdl="str" line="849" name="msg" />
        <variable citdl="len()" line="855" name="dot" />
        <variable line="868" name="module" />
        <variable citdl="str.format()" line="870" name="message" />
        <variable line="876" name="parent" />
        <variable citdl="parent_module.__path__" line="877" name="path" />
        <variable line="882" name="parent_module" />
        <variable citdl="list" line="884" name="meta_path" />
        <variable citdl="finder.find_module()" line="886" name="loader" />
      </scope>
    </scope>
    <scope doc="CSV parsing and writing.  This module provides classes that assist in the reading and writing" ilk="blob" lang="Python3" name="csv">
      <scope classrefs="object" doc="Describe an Excel dialect.  This must be subclassed (see csv.excel).  Valid attributes are:" ilk="class" line="22" lineend="51" name="Dialect">
        <variable line="35" name="escapechar" />
        <variable attributes="protected" citdl="False" line="31" name="_valid" />
        <variable line="37" name="skipinitialspace" />
        <scope attributes="protected" ilk="function" line="46" lineend="51" name="_validate" signature="_validate()">
          <variable citdl="Dialect" ilk="argument" name="self" />
        </scope>
        <variable line="39" name="quoting" />
        <variable attributes="protected" citdl="str" line="30" name="_name" />
        <variable line="33" name="delimiter" />
        <variable line="38" name="lineterminator" />
        <scope attributes="__ctor__" ilk="function" line="41" lineend="44" name="__init__" signature="Dialect()">
          <variable citdl="Dialect" ilk="argument" name="self" />
        </scope>
        <variable line="34" name="quotechar" />
        <variable line="36" name="doublequote" />
      </scope>
      <scope classrefs="object" ilk="class" line="69" lineend="116" name="DictReader">
        <variable attributes="__instancevar__" line="74" name="restval" />
        <variable attributes="__instancevar__" citdl="str" line="76" name="dialect" />
        <variable attributes="__instancevar__" citdl="int" line="77" name="line_num" />
        <scope ilk="function" line="96" lineend="116" name="__next__" returns="dict()" signature="__next__()">
          <variable citdl="DictReader" ilk="argument" name="self" />
          <variable citdl="next()" line="100" name="row" />
          <variable citdl="dict()" line="108" name="d" />
          <variable citdl="len()" line="109" name="lf" />
          <variable citdl="len()" line="110" name="lr" />
        </scope>
        <variable attributes="property" citdl="next()" line="83" name="fieldnames" />
        <variable attributes="__instancevar__" line="73" name="restkey" />
        <scope ilk="function" line="79" lineend="80" name="__iter__" returns="DictReader" signature="__iter__()">
          <variable citdl="DictReader" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="next()" line="72" name="_fieldnames" />
        <scope attributes="__hidden__" ilk="function" line="93" lineend="94" name="fieldnames (property setter)" signature="fieldnames (property setter)(value)">
          <variable citdl="DictReader" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" citdl="reader()" line="75" name="reader" />
        <scope attributes="__hidden__" ilk="function" line="83" lineend="90" name="fieldnames (property getter)" returns="next()" signature="fieldnames (property getter)()">
          <variable citdl="DictReader" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="70" lineend="77" name="__init__" signature="DictReader(f, fieldnames=None, restkey=None, restval=None, dialect=&apos;excel&apos;, *args, **kwds)">
          <variable citdl="DictReader" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
          <variable ilk="argument" name="fieldnames" />
          <variable ilk="argument" name="restkey" />
          <variable ilk="argument" name="restval" />
          <variable citdl="str" ilk="argument" name="dialect" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="119" lineend="145" name="DictWriter">
        <variable attributes="__instancevar__" citdl="str" line="123" name="restval" />
        <scope attributes="protected" ilk="function" line="130" lineend="136" name="_dict_to_list" returns="list" signature="_dict_to_list(rowdict)">
          <variable citdl="DictWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="rowdict" />
          <variable citdl="list" line="132" name="wrong_fields" />
        </scope>
        <scope ilk="function" line="138" lineend="139" name="writerow" returns="self.writer.writerow()" signature="writerow(rowdict)">
          <variable citdl="DictWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="rowdict" />
        </scope>
        <variable attributes="__instancevar__" citdl="writer()" line="128" name="writer" />
        <variable attributes="__instancevar__" line="122" name="fieldnames" />
        <scope ilk="function" line="141" lineend="145" name="writerows" returns="self.writer.writerows()" signature="writerows(rowdicts)">
          <variable citdl="DictWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="rowdicts" />
          <variable citdl="list" line="142" name="rows" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="127" name="extrasaction" />
        <scope attributes="__ctor__" ilk="function" line="120" lineend="128" name="__init__" signature="DictWriter(f, fieldnames, restval=&apos;&apos;, extrasaction=&apos;raise&apos;, dialect=&apos;excel&apos;, *args, **kwds)">
          <variable citdl="DictWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
          <variable ilk="argument" name="fieldnames" />
          <variable citdl="str" ilk="argument" name="restval" />
          <variable citdl="str" ilk="argument" name="extrasaction" />
          <variable citdl="str" ilk="argument" name="dialect" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
      </scope>
      <scope classrefs="Exception" ilk="class" name="Error" />
      <variable citdl="int" name="QUOTE_ALL" />
      <variable citdl="int" name="QUOTE_MINIMAL" />
      <variable citdl="int" name="QUOTE_NONE" />
      <variable citdl="int" name="QUOTE_NONNUMERIC" />
      <scope classrefs="object" doc="&quot;Sniffs&quot; the format of a CSV file (i.e. delimiter, quotechar) Returns a Dialect object." ilk="class" line="153" lineend="434" name="Sniffer">
        <scope attributes="protected" doc="Looks for text enclosed between two identical quotes (the probable quotechar) which are preceded and followed by the same character (the probable delimiter)." ilk="function" line="192" lineend="263" name="_guess_quote_and_delimiter" returns="tuple" signature="_guess_quote_and_delimiter(data, delimiters)">
          <variable citdl="Sniffer" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable ilk="argument" name="delimiters" />
          <variable citdl="list" line="204" name="matches" />
          <variable citdl="re.compile()" line="209" name="regexp" />
          <variable citdl="dict" line="217" name="quotes" />
          <variable citdl="dict" line="218" name="delims" />
          <variable citdl="int" line="219" name="spaces" />
          <variable citdl="int" line="221" name="n" />
          <variable line="222" name="key" />
          <variable citdl="max()" line="239" name="quotechar" />
          <variable citdl="str" line="242" name="delim" />
          <variable citdl="int" line="243" name="skipinitialspace" />
          <variable citdl="re.compile()" line="253" name="dq_regexp" />
          <variable citdl="True" line="259" name="doublequote" />
        </scope>
        <scope attributes="protected" doc="The delimiter /should/ occur the same number of times on each row." ilk="function" line="266" lineend="366" name="_guess_delimiter" returns="tuple" signature="_guess_delimiter(data, delimiters)">
          <variable citdl="Sniffer" ilk="argument" name="self" />
          <variable citdl="list()" ilk="argument" name="data" />
          <variable ilk="argument" name="delimiters" />
          <variable citdl="list" line="287" name="ascii" />
          <variable citdl="min()" line="290" name="chunkLength" />
          <variable citdl="int" line="291" name="iteration" />
          <variable citdl="dict" line="292" name="charFrequency" />
          <variable citdl="dict" line="293" name="modes" />
          <variable citdl="dict" line="294" name="delims" />
          <variable citdl="min()" line="295" name="end" />
          <variable citdl="int" line="295" name="start" />
          <variable citdl="charFrequency.get()" line="300" name="metaFrequency" />
          <variable citdl="line.count()" line="302" name="freq" />
          <variable citdl="list" line="308" name="items" />
          <variable citdl="modes.items()" line="323" name="modeList" />
          <variable citdl="float()" line="324" name="total" />
          <variable citdl="float" line="326" name="consistency" />
          <variable citdl="float" line="328" name="threshold" />
          <variable line="338" name="delim" />
          <variable citdl="bool" line="339" name="skipinitialspace" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="160" name="preferred" />
        <scope ilk="function" line="369" lineend="434" name="has_header" returns="bool" signature="has_header(sample)">
          <variable citdl="Sniffer" ilk="argument" name="self" />
          <variable ilk="argument" name="sample" />
          <variable citdl="reader()" line="379" name="rdr" />
          <variable citdl="next()" line="381" name="header" />
          <variable citdl="len()" line="383" name="columns" />
          <variable citdl="dict" line="384" name="columnTypes" />
          <variable citdl="int" line="387" name="checked" />
          <variable citdl="len()" line="407" name="thisType" />
          <variable citdl="int" line="419" name="hasHeader" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="158" lineend="160" name="__init__" signature="Sniffer()">
          <variable citdl="Sniffer" ilk="argument" name="self" />
        </scope>
        <scope doc="Returns a dialect (or None) corresponding to the sample" ilk="function" line="163" lineend="189" name="sniff" returns="Sniffer.sniff.dialect" signature="sniff(sample, delimiters=None)">
          <variable citdl="Sniffer" ilk="argument" name="self" />
          <variable ilk="argument" name="sample" />
          <variable ilk="argument" name="delimiters" />
          <scope classrefs="Dialect" ilk="class" line="177" lineend="180" name="dialect">
            <variable attributes="protected" citdl="str" line="178" name="_name" />
            <variable citdl="str" line="179" name="lineterminator" />
            <variable citdl="QUOTE_MINIMAL" line="180" name="quoting" />
            <variable attributes="__instancevar__" citdl="doublequote" line="183" name="doublequote" />
            <variable attributes="__instancevar__" citdl="delimiter" line="184" name="delimiter" />
            <variable attributes="__instancevar__" citdl="quotechar" line="186" name="quotechar" />
            <variable attributes="__instancevar__" citdl="skipinitialspace" line="187" name="skipinitialspace" />
          </scope>
        </scope>
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <variable citdl="list" line="16" name="__all__" />
      <variable citdl="str" name="__version__" />
      <scope classrefs="Dialect" doc="Describe the usual properties of Excel-generated CSV files." ilk="class" line="53" lineend="60" name="excel">
        <variable citdl="str" line="59" name="lineterminator" />
        <variable citdl="False" line="58" name="skipinitialspace" />
        <variable citdl="QUOTE_MINIMAL" line="60" name="quoting" />
        <variable citdl="str" line="55" name="delimiter" />
        <variable citdl="str" line="56" name="quotechar" />
        <variable citdl="True" line="57" name="doublequote" />
      </scope>
      <scope classrefs="excel" doc="Describe the usual properties of Excel-generated TAB-delimited files." ilk="class" line="63" lineend="65" name="excel_tab">
        <variable citdl="str" line="65" name="delimiter" />
      </scope>
      <scope doc="Sets an upper limit on parsed fields." ilk="function" name="field_size_limit" />
      <scope doc="Return the dialect instance associated with name." ilk="function" name="get_dialect" />
      <scope doc="Return a list of all know dialect names." ilk="function" name="list_dialects" />
      <import module="re" />
      <scope doc="csv_reader = reader(iterable [, dialect=&apos;excel&apos;] [optional keyword args]) for row in csv_reader: process(row)" ilk="function" name="reader" />
      <scope doc="Create a mapping from a string name to a dialect class." ilk="function" name="register_dialect" />
      <scope doc="Delete the name/dialect mapping associated with a string name." ilk="function" name="unregister_dialect" />
      <scope doc="csv_writer = csv.writer(fileobj [, dialect=&apos;excel&apos;] [optional keyword args]) for row in sequence: csv_writer.writerow(row)" ilk="function" name="writer" />
      <variable attributes="__hidden__" citdl="float" line="151" name="complex" />
    </scope>
    <scope doc="Class for profiling Python code." ilk="blob" lang="Python3" name="profile">
      <scope classrefs="OptionContainer" doc="Class attributes:   standard_option_list : [Option]     list of standard options that will be accepted by all instances" ilk="class" name="OptionParser" />
      <scope classrefs="object" doc="Profiler class.  self.cur is always a tuple.  Each such tuple corresponds to a stack" ilk="class" line="125" lineend="588" name="Profile">
        <variable attributes="__instancevar__" citdl="arg.__name__" line="170" name="c_func_name" />
        <variable citdl="dict" line="366" name="dispatch" />
        <scope attributes="__ctor__" ilk="function" line="166" lineend="217" name="__init__" signature="Profile(timer=None, bias=None)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="timer" />
          <variable citdl="int" ilk="argument" name="bias" />
          <variable citdl="timer()" line="197" name="t" />
          <variable citdl="len()" line="199" name="length" />
          <scope ilk="function" line="213" lineend="214" name="get_time_timer" returns="Profile.__init__.get_time_timer.sum()" signature="get_time_timer(timer=timer, sum=sum)">
            <variable ilk="argument" name="timer" />
            <variable citdl="sum" ilk="argument" name="sum" />
          </scope>
        </scope>
        <variable citdl="int" line="164" name="bias" />
        <variable attributes="__instancevar__" citdl="os.times" line="178" name="timer" />
        <scope ilk="function" line="254" lineend="264" name="trace_dispatch_mac" signature="trace_dispatch_mac(frame, event, arg)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="event" />
          <variable ilk="argument" name="arg" />
          <variable citdl="os.times" line="255" name="timer" />
          <variable citdl="Profile.trace_dispatch_i.timer()" line="256" name="t" />
        </scope>
        <scope ilk="function" line="468" lineend="474" name="runcall" returns="Profile.runcall.func()" signature="runcall(func, *args, **kw)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="517" lineend="526" name="calibrate" returns="self._calibrate_inner()" signature="calibrate(m, verbose=0)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="m" />
          <variable citdl="int" ilk="argument" name="verbose" />
          <variable citdl="int" line="521" name="saved_bias" />
        </scope>
        <scope ilk="function" line="440" lineend="447" name="snapshot_stats" signature="snapshot_stats()">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable citdl="callers.copy()" line="443" name="callers" />
          <variable citdl="int" line="444" name="nc" />
        </scope>
        <scope ilk="function" line="328" lineend="363" name="trace_dispatch_return" returns="int" signature="trace_dispatch_return(frame, t)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="t" />
          <variable line="337" name="rit" />
          <variable citdl="ret" line="338" name="frame_total" />
          <variable citdl="dict" line="343" name="timings" />
          <variable citdl="ret" line="350" name="ct" />
          <variable citdl="int" line="351" name="cc" />
        </scope>
        <variable attributes="__instancevar__" citdl="tuple" line="168" name="cur" />
        <scope ilk="function" line="382" lineend="385" name="set_cmd" signature="set_cmd(cmd)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
        </scope>
        <scope ilk="function" line="436" lineend="438" name="create_stats" signature="create_stats()">
          <variable citdl="Profile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="239" lineend="249" name="trace_dispatch_i" signature="trace_dispatch_i(frame, event, arg)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="event" />
          <variable ilk="argument" name="arg" />
          <variable citdl="os.times" line="240" name="timer" />
          <variable citdl="get_time()" line="241" name="t" />
        </scope>
        <scope ilk="function" line="268" lineend="278" name="trace_dispatch_l" signature="trace_dispatch_l(frame, event, arg)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="event" />
          <variable ilk="argument" name="arg" />
          <variable citdl="_get_time_resource" line="269" name="get_time" />
          <variable citdl="Profile.trace_dispatch_l.get_time()" line="270" name="t" />
        </scope>
        <scope ilk="function" line="458" lineend="465" name="runctx" returns="Profile" signature="runctx(cmd, globals, locals)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="globals" />
          <variable ilk="argument" name="locals" />
        </scope>
        <scope ilk="function" line="453" lineend="456" name="run" returns="self.runctx()" signature="run(cmd)">
          <import line="454" module="__main__" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable citdl="dict" line="455" name="dict" />
        </scope>
        <scope ilk="class" line="397" lineend="400" name="fake_frame">
          <scope attributes="__ctor__" ilk="function" line="398" lineend="400" name="__init__" signature="fake_frame(code, prior)">
            <variable citdl="fake_frame" ilk="argument" name="self" />
            <variable ilk="argument" name="code" />
            <variable ilk="argument" name="prior" />
          </scope>
          <variable attributes="__instancevar__" line="399" name="f_code" />
          <variable attributes="__instancevar__" line="400" name="f_back" />
        </scope>
        <scope ilk="function" line="430" lineend="434" name="dump_stats" signature="dump_stats(file)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="open()" line="431" name="f" />
        </scope>
        <scope attributes="protected" ilk="function" line="528" lineend="588" name="_calibrate_inner" returns="get_time()" signature="_calibrate_inner(m, verbose)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="m" />
          <variable ilk="argument" name="verbose" />
          <variable citdl="_get_time_resource" line="529" name="get_time" />
          <scope ilk="function" line="537" lineend="539" name="f1" signature="f1(n)">
            <variable ilk="argument" name="n" />
            <variable citdl="int" line="539" name="x" />
          </scope>
          <scope ilk="function" line="541" lineend="543" name="f" signature="f(m, f1=f1)">
            <variable ilk="argument" name="m" />
            <variable citdl="Profile._calibrate_inner.f1" ilk="argument" name="f1" />
          </scope>
          <variable citdl="get_time()" line="548" name="t0" />
          <variable citdl="get_time()" line="550" name="t1" />
          <variable citdl="get_time()" line="551" name="elapsed_noprofile" />
          <variable citdl="" line="558" name="p" />
          <variable citdl="get_time()" line="562" name="elapsed_profile" />
          <variable citdl="float" line="567" name="total_calls" />
          <variable citdl="float" line="568" name="reported_time" />
          <variable citdl="get_time()" line="585" name="mean" />
        </scope>
        <scope ilk="function" line="317" lineend="326" name="trace_dispatch_c_call" returns="int" signature="trace_dispatch_c_call(frame, t)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="t" />
          <variable citdl="tuple" line="318" name="fn" />
          <variable citdl="dict" line="320" name="timings" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="441" name="stats" />
        <scope ilk="function" line="414" lineend="422" name="simulate_cmd_complete" signature="simulate_cmd_complete()">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable citdl="_get_time_resource" line="415" name="get_time" />
          <variable citdl="Profile.trace_dispatch_l.get_time()" line="416" name="t" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.trace_dispatch" line="179" name="dispatcher" />
        <scope ilk="function" line="402" lineend="409" name="simulate_call" signature="simulate_call(name)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="fake_code" line="403" name="code" />
          <variable line="405" name="pframe" />
          <variable citdl="fake_frame" line="408" name="frame" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="169" name="cmd" />
        <scope ilk="function" line="295" lineend="315" name="trace_dispatch_call" returns="int" signature="trace_dispatch_call(frame, t)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="t" />
          <variable citdl="frame.f_code" line="306" name="fcode" />
          <variable citdl="tuple" line="307" name="fn" />
          <variable citdl="dict" line="309" name="timings" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="167" name="timings" />
        <scope ilk="function" line="425" lineend="427" name="print_stats" signature="print_stats(sort=-1)">
          <import line="426" module="pstats" />
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="sort" />
        </scope>
        <variable attributes="__instancevar__" citdl="get_time()" line="216" name="t" />
        <scope ilk="function" line="287" lineend="292" name="trace_dispatch_exception" returns="int" signature="trace_dispatch_exception(frame, t)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="t" />
        </scope>
        <variable attributes="__instancevar__" citdl="Profile.__init__.get_time_timer" line="180" name="get_time" />
        <scope ilk="function" line="221" lineend="234" name="trace_dispatch" signature="trace_dispatch(frame, event, arg)">
          <variable citdl="Profile" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="event" />
          <variable ilk="argument" name="arg" />
          <variable citdl="os.times" line="222" name="timer" />
          <variable citdl="timer()" line="223" name="t" />
          <variable citdl="timer()" line="233" name="r" />
        </scope>
        <scope ilk="class" line="387" lineend="395" name="fake_code">
          <scope attributes="__ctor__" ilk="function" line="388" lineend="392" name="__init__" signature="fake_code(filename, line, name)">
            <variable citdl="fake_code" ilk="argument" name="self" />
            <variable ilk="argument" name="filename" />
            <variable ilk="argument" name="line" />
            <variable ilk="argument" name="name" />
          </scope>
          <variable attributes="__instancevar__" line="389" name="co_filename" />
          <variable attributes="__instancevar__" line="390" name="co_line" />
          <variable attributes="__instancevar__" line="391" name="co_name" />
          <variable attributes="__instancevar__" citdl="int" line="392" name="co_firstlineno" />
          <scope ilk="function" line="394" lineend="395" name="__repr__" returns="repr()" signature="__repr__()">
            <variable citdl="fake_code" ilk="argument" name="self" />
          </scope>
        </scope>
      </scope>
      <scope doc="#*********************************************************** *****************" ilk="function" line="591" lineend="592" name="Stats" signature="Stats(*args)">
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <variable citdl="list" line="42" name="__all__" />
      <scope doc="# Backwards compatibility." ilk="function" line="96" lineend="98" name="help" signature="help()" />
      <scope ilk="function" line="594" lineend="620" name="main" returns="OptionParser()" signature="main()">
        <variable citdl="str" line="595" name="usage" />
        <variable citdl="open()" line="612" name="fp" />
        <variable citdl="OptionParser()" line="596" name="parser" />
        <variable citdl="fp.read()" line="614" name="script" />
      </scope>
      <import module="marshal" />
      <import module="os" />
      <scope doc="Run statement under profiler optionally saving results in filename" ilk="function" line="57" lineend="76" name="run" returns="prof.print_stats()" signature="run(statement, filename=None, sort=-1)">
        <variable citdl="int" ilk="argument" name="sort" />
        <variable citdl="Profile()" line="68" name="prof" />
        <variable ilk="argument" name="statement" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Run statement under profiler, supplying your own globals and locals, optionally saving results in filename." ilk="function" line="78" lineend="93" name="runctx" returns="prof.print_stats()" signature="runctx(statement, globals, locals, filename=None)">
        <variable citdl="Profile()" line="84" name="prof" />
        <variable ilk="argument" name="globals" />
        <variable ilk="argument" name="locals" />
        <variable ilk="argument" name="statement" />
        <variable ilk="argument" name="filename" />
      </scope>
      <import module="sys" />
      <import module="time" />
      <variable attributes="__hidden__" line="117" name="resgetrusage" />
      <scope attributes="protected __hidden__" ilk="function" line="102" lineend="103" name="_get_time_mac" returns="_get_time_mac.timer()" signature="_get_time_mac(timer=MacOS.GetTicks)">
        <variable citdl="MacOS.GetTicks" ilk="argument" name="timer" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="118" lineend="120" name="_get_time_resource" signature="_get_time_resource(timer=resgetrusage)">
        <variable ilk="argument" name="timer" />
        <variable citdl="timer()" line="119" name="t" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="114" name="_has_res" />
      <scope attributes="protected __hidden__" ilk="function" line="106" lineend="108" name="_get_time_times" signature="_get_time_times(timer=os.times)">
        <variable citdl="os.times" ilk="argument" name="timer" />
        <variable citdl="timer()" line="107" name="t" />
      </scope>
    </scope>
    <scope doc="Fixer for function definitions with tuple parameters.  def func(((a, b), c), d):" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_tuple_params">
      <scope doc="Build an assignment statement" ilk="function" name="Assign" signature="Assign(target, source)" />
      <scope classrefs="BaseFix" ilk="class" line="31" lineend="130" name="FixTupleParams">
        <variable citdl="str" line="32" name="PATTERN" />
        <scope ilk="function" line="106" lineend="130" name="transform_lambda" signature="transform_lambda(node, results)">
          <variable citdl="FixTupleParams" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="107" name="args" />
          <variable line="108" name="body" />
          <variable citdl="simplify_args()" line="109" name="inner" />
          <variable citdl="find_params()" line="118" name="params" />
          <variable citdl="map_to_index()" line="119" name="to_index" />
          <variable citdl="self.new_name()" line="120" name="tup_name" />
          <variable citdl="Name()" line="122" name="new_param" />
          <variable citdl="list" line="126" name="subscripts" />
          <variable citdl="pytree.Node()" line="127" name="new" />
        </scope>
        <scope ilk="function" line="42" lineend="104" name="transform" returns="self.transform_lambda()" signature="transform(node, results)">
          <variable citdl="FixTupleParams" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="list" line="46" name="new_lines" />
          <variable line="47" name="suite" />
          <variable line="48" name="args" />
          <variable citdl="int" line="52" name="start" />
          <variable citdl="str" line="53" name="indent" />
          <variable citdl="Newline()" line="54" name="end" />
          <scope ilk="function" line="63" lineend="72" name="handle_tuple" signature="handle_tuple(tuple_arg, add_prefix=False)">
            <variable ilk="argument" name="tuple_arg" />
            <variable citdl="False" ilk="argument" name="add_prefix" />
            <variable citdl="Name()" line="64" name="n" />
            <variable citdl="tuple_arg.clone()" line="65" name="arg" />
            <variable citdl="Assign()" line="67" name="stmt" />
          </scope>
          <variable citdl="int" line="92" name="after" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A newline literal" ilk="function" name="Newline" signature="Newline()" />
      <scope ilk="function" name="Number" signature="Number(n, prefix=None)" />
      <scope doc="A numeric or string subscript" ilk="function" name="Subscript" signature="Subscript(index_node)" />
      <scope ilk="function" line="146" lineend="151" name="find_params" returns="node.value" signature="find_params(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <import module="fixer_base" />
      <scope ilk="function" line="27" lineend="29" name="is_docstring" returns="isinstance()" signature="is_docstring(stmt)">
        <variable ilk="argument" name="stmt" />
      </scope>
      <scope ilk="function" line="153" lineend="162" name="map_to_index" returns="dict" signature="map_to_index(param_list, prefix=[], d=None)">
        <variable ilk="argument" name="param_list" />
        <variable citdl="list" ilk="argument" name="prefix" />
        <variable citdl="dict" ilk="argument" name="d" />
        <variable citdl="list" line="157" name="trailer" />
      </scope>
      <import module="pytree" />
      <scope ilk="function" line="135" lineend="144" name="simplify_args" signature="simplify_args(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
      <scope ilk="function" line="164" lineend="171" name="tuple_name" returns="str.join()" signature="tuple_name(param_list)">
        <variable ilk="argument" name="param_list" />
        <variable citdl="list" line="165" name="l" />
      </scope>
    </scope>
    <scope ilk="blob" lang="Python3" name="ctypes.util">
      <scope ilk="function" line="232" lineend="233" name="find_library" returns="_get_soname()" signature="find_library(name)">
        <variable ilk="argument" name="name" />
      </scope>
      <scope doc="Return the name of the VC runtime dll" ilk="function" line="29" lineend="44" name="find_msvcrt" returns="str" signature="find_msvcrt()">
        <variable citdl="str" line="36" name="clibname" />
        <variable citdl="_get_build_version()" line="31" name="version" />
      </scope>
      <import module="os" />
      <import module="sys" />
      <scope ilk="function" line="238" lineend="264" name="test" signature="test()" />
      <scope attributes="protected __hidden__" ilk="function" line="182" lineend="202" name="_findLib_ldconfig" returns="res.group()" signature="_findLib_ldconfig(name)">
        <variable ilk="argument" name="name" />
        <variable citdl="re.escape()" line="184" name="expr" />
        <variable citdl="os.popen()" line="185" name="f" />
        <variable citdl="f.read()" line="187" name="data" />
        <variable citdl="re.search()" line="190" name="res" />
        <variable citdl="str" line="193" name="cmd" />
      </scope>
      <scope attributes="protected __hidden__" doc="Return the version of MSVC that was used to build Python." ilk="function" line="6" lineend="27" name="_get_build_version" returns="int()" signature="_get_build_version()">
        <variable citdl="str" line="13" name="prefix" />
        <variable citdl="sys.version.find()" line="14" name="i" />
        <variable citdl="int()" line="19" name="majorVersion" />
        <variable citdl="int" line="20" name="minorVersion" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="130" lineend="149" name="_get_soname" returns="res.group()" signature="_get_soname(f)">
        <variable citdl="os.popen()" ilk="argument" name="f" />
        <variable citdl="str" line="134" name="cmd" />
        <variable citdl="f.read()" line="137" name="dump" />
        <variable citdl="f.close()" line="138" name="rv" />
        <variable citdl="f.read()" line="143" name="data" />
        <variable citdl="re.search()" line="146" name="res" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="88" lineend="111" name="_findLib_gcc" returns="res.group()" signature="_findLib_gcc(name)">
        <variable ilk="argument" name="name" />
        <variable citdl="re.escape()" line="89" name="expr" />
        <variable citdl="str" line="92" name="cmd" />
        <variable citdl="os.popen()" line="95" name="f" />
        <variable citdl="f.read()" line="97" name="trace" />
        <variable citdl="f.close()" line="99" name="rv" />
        <variable citdl="re.search()" line="108" name="res" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="155" lineend="164" name="_num_version" returns="list" signature="_num_version(libname)">
        <variable ilk="argument" name="libname" />
        <variable citdl="libname.split()" line="157" name="parts" />
        <variable citdl="list" line="158" name="nums" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="204" lineend="230" name="_findSoname_ldconfig" returns="res.group()" signature="_findSoname_ldconfig(name)">
        <import line="205" module="struct" />
        <variable ilk="argument" name="name" />
        <variable citdl="str" line="207" name="machine" />
        <variable citdl="dict" line="210" name="mach_map" />
        <variable citdl="mach_map.get()" line="217" name="abi_type" />
        <variable citdl="str" line="220" name="expr" />
        <variable citdl="os.popen()" line="222" name="f" />
        <variable citdl="f.read()" line="224" name="data" />
        <variable citdl="re.search()" line="227" name="res" />
      </scope>
    </scope>
    <scope doc="An extensible library for opening URLs using a variety of protocols  The simplest way to use this module is to call the urlopen function," ilk="blob" lang="Python3" name="urllib.request">
      <scope classrefs="object" ilk="class" line="759" lineend="801" name="AbstractBasicAuthHandler">
        <scope ilk="function" line="779" lineend="789" name="http_error_auth_reqed" returns="self.retry_http_basic_auth()" signature="http_error_auth_reqed(authreq, host, req, headers)">
          <variable citdl="AbstractBasicAuthHandler" ilk="argument" name="self" />
          <variable citdl="headers.get()" ilk="argument" name="authreq" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="headers" />
          <variable citdl="AbstractBasicAuthHandler.rx.search()" line="785" name="mo" />
        </scope>
        <variable attributes="__instancevar__" citdl="HTTPPasswordMgr" line="776" name="passwd" />
        <variable attributes="__instancevar__" citdl="self.passwd.add_password" line="777" name="add_password" />
        <variable citdl="re.compile()" line="766" name="rx" />
        <scope ilk="function" line="791" lineend="801" name="retry_http_basic_auth" returns="self.parent.open()" signature="retry_http_basic_auth(host, req, realm)">
          <variable citdl="AbstractBasicAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="realm" />
          <variable citdl="str" line="794" name="raw" />
          <variable citdl="str" line="795" name="auth" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="773" lineend="777" name="__init__" signature="AbstractBasicAuthHandler(password_mgr=None)">
          <variable citdl="AbstractBasicAuthHandler" ilk="argument" name="self" />
          <variable citdl="HTTPPasswordMgr" ilk="argument" name="password_mgr" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="832" lineend="967" name="AbstractDigestAuthHandler">
        <scope ilk="function" line="965" lineend="967" name="get_entity_digest" signature="get_entity_digest(data, chal)">
          <variable citdl="AbstractDigestAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable ilk="argument" name="chal" />
        </scope>
        <scope ilk="function" line="855" lineend="870" name="http_error_auth_reqed" returns="self.retry_http_digest_auth()" signature="http_error_auth_reqed(auth_header, host, req, headers)">
          <variable citdl="AbstractDigestAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="auth_header" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="headers" />
          <variable citdl="headers.get()" line="856" name="authreq" />
          <variable line="868" name="scheme" />
        </scope>
        <scope ilk="function" line="955" lineend="963" name="get_algorithm_impls" returns="tuple" signature="get_algorithm_impls(algorithm)">
          <variable citdl="AbstractDigestAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="algorithm" />
          <variable line="958" name="H" />
          <variable line="962" name="KD" />
        </scope>
        <variable attributes="__instancevar__" citdl="HTTPPasswordMgr" line="846" name="passwd" />
        <variable attributes="__instancevar__" citdl="self.passwd.add_password" line="847" name="add_password" />
        <scope ilk="function" line="884" lineend="893" name="get_cnonce" returns="list" signature="get_cnonce(nonce)">
          <variable citdl="AbstractDigestAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="nonce" />
          <variable citdl="str" line="890" name="s" />
          <variable citdl="randombytes()" line="891" name="b" />
          <variable line="892" name="dig" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="843" lineend="850" name="__init__" signature="AbstractDigestAuthHandler(passwd=None)">
          <variable citdl="AbstractDigestAuthHandler" ilk="argument" name="self" />
          <variable citdl="HTTPPasswordMgr" ilk="argument" name="passwd" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="848" name="retried" />
        <scope ilk="function" line="872" lineend="882" name="retry_http_digest_auth" returns="self.parent.open()" signature="retry_http_digest_auth(req, auth)">
          <variable citdl="AbstractDigestAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable citdl="self.get_authorization()" ilk="argument" name="auth" />
          <variable citdl="parse_keqv_list()" line="874" name="chal" />
          <variable citdl="str" line="877" name="auth_val" />
          <variable citdl="self.parent.open()" line="881" name="resp" />
        </scope>
        <variable attributes="__instancevar__" line="850" name="last_nonce" />
        <scope ilk="function" line="852" lineend="853" name="reset_retry_count" signature="reset_retry_count()">
          <variable citdl="AbstractDigestAuthHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="849" name="nonce_count" />
        <scope ilk="function" line="895" lineend="953" name="get_authorization" returns="tuple" signature="get_authorization(req, chal)">
          <variable citdl="AbstractDigestAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="chal" />
          <variable line="897" name="realm" />
          <variable line="898" name="nonce" />
          <variable citdl="chal.get()" line="899" name="qop" />
          <variable citdl="chal.get()" line="900" name="algorithm" />
          <variable citdl="chal.get()" line="903" name="opaque" />
          <variable citdl="self.get_entity_digest()" line="917" name="entdig" />
          <variable citdl="str" line="921" name="A1" />
          <variable citdl="str" line="922" name="A2" />
          <variable citdl="str" line="931" name="ncvalue" />
          <variable citdl="get_cnonce()" line="932" name="cnonce" />
          <variable citdl="str" line="933" name="noncebit" />
          <variable citdl="KD()" line="934" name="respdig" />
          <variable citdl="str" line="943" name="base" />
        </scope>
      </scope>
      <scope classrefs="BaseHandler" ilk="class" line="1000" lineend="1084" name="AbstractHTTPHandler">
        <scope ilk="function" line="1005" lineend="1006" name="set_http_debuglevel" signature="set_http_debuglevel(level)">
          <variable citdl="AbstractHTTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="1003" name="_debuglevel" />
        <scope ilk="function" line="1008" lineend="1034" name="do_request_" signature="do_request_(request)">
          <variable citdl="AbstractHTTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable citdl="request.host" line="1009" name="host" />
          <variable citdl="request.data" line="1014" name="data" />
          <variable citdl="request.host" line="1023" name="sel_host" />
          <variable citdl="name.capitalize()" line="1030" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1002" lineend="1003" name="__init__" signature="AbstractHTTPHandler(debuglevel=0)">
          <variable citdl="AbstractHTTPHandler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="debuglevel" />
        </scope>
        <scope doc="Return an HTTPResponse object for the request, using http_class." ilk="function" line="1036" lineend="1084" name="do_open" returns="h.getresponse()" signature="do_open(http_class, req)">
          <variable citdl="AbstractHTTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="http_class" />
          <variable ilk="argument" name="req" />
          <variable citdl="req.host" line="1041" name="host" />
          <variable citdl="http_class()" line="1045" name="h" />
          <variable citdl="dict()" line="1046" name="headers" />
          <variable citdl="dict" line="1062" name="tunnel_headers" />
          <variable citdl="str" line="1063" name="proxy_auth_hdr" />
          <variable citdl="h.getresponse()" line="1073" name="r" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="437" lineend="453" name="BaseHandler">
        <scope ilk="function" line="443" lineend="445" name="close" signature="close()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="447" lineend="453" name="__lt__" returns="bool" signature="__lt__(other)">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable citdl="int" line="438" name="handler_order" />
        <variable attributes="__instancevar__" line="441" name="parent" />
        <scope ilk="function" line="440" lineend="441" name="add_parent" signature="add_parent(parent)">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="parent" />
        </scope>
      </scope>
      <scope classrefs="FTPHandler" ilk="class" line="1289" lineend="1334" name="CacheFTPHandler">
        <variable attributes="__instancevar__" citdl="min()" line="1295" name="soonest" />
        <variable attributes="__instancevar__" citdl="dict" line="1293" name="cache" />
        <scope ilk="function" line="1302" lineend="1303" name="setMaxConns" signature="setMaxConns(m)">
          <variable citdl="CacheFTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="m" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="1297" name="max_conns" />
        <variable attributes="__instancevar__" citdl="int" line="1296" name="delay" />
        <scope ilk="function" line="1305" lineend="1314" name="connect_ftp" signature="connect_ftp(user, passwd, host, port, dirs, timeout)">
          <variable citdl="CacheFTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="user" />
          <variable ilk="argument" name="passwd" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
          <variable ilk="argument" name="dirs" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="tuple" line="1306" name="key" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="1294" name="timeout" />
        <scope ilk="function" line="1299" lineend="1300" name="setTimeout" signature="setTimeout(t)">
          <variable citdl="CacheFTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="t" />
        </scope>
        <scope ilk="function" line="1316" lineend="1334" name="check_cache" signature="check_cache()">
          <variable citdl="CacheFTPHandler" ilk="argument" name="self" />
          <variable citdl="time.time()" line="1318" name="t" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1292" lineend="1297" name="__init__" signature="CacheFTPHandler()">
          <variable citdl="CacheFTPHandler" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="URLError" doc="# exception raised when downloaded size does not match content-length" ilk="class" name="ContentTooShortError" />
      <scope classrefs="BaseHandler" ilk="class" line="1231" lineend="1287" name="FTPHandler">
        <scope ilk="function" line="1285" lineend="1287" name="connect_ftp" returns="ftpwrapper()" signature="connect_ftp(user, passwd, host, port, dirs, timeout)">
          <variable citdl="FTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="user" />
          <variable ilk="argument" name="passwd" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
          <variable ilk="argument" name="dirs" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="ftpwrapper()" line="1286" name="fw" />
        </scope>
        <scope ilk="function" line="1232" lineend="1283" name="ftp_open" returns="addinfourl()" signature="ftp_open(req)">
          <import line="1233" module="ftplib" />
          <import line="1234" module="mimetypes" />
          <variable citdl="FTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable citdl="req.host" line="1235" name="host" />
          <variable citdl="ftplib.FTP_PORT" line="1240" name="port" />
          <variable citdl="unquote()" line="1249" name="passwd" />
          <variable citdl="unquote()" line="1251" name="user" />
          <variable citdl="list" line="1259" name="dirs" />
          <variable line="1261" name="file" />
          <variable citdl="self.connect_ftp()" line="1265" name="fw" />
          <variable citdl="value.upper()" line="1266" name="type" />
          <variable citdl="email.message_from_string()" line="1273" name="headers" />
          <variable line="1274" name="mtype" />
          <variable citdl="URLError()" line="1282" name="exc" />
        </scope>
      </scope>
      <scope classrefs="URLopener" doc="Derived class with handlers for errors we can handle (perhaps)." ilk="class" line="1803" lineend="1989" name="FancyURLopener">
        <scope ilk="function" line="1904" lineend="1920" name="retry_proxy_http_basic_auth" returns="self.open()" signature="retry_proxy_http_basic_auth(url, realm, data=None)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="realm" />
          <variable ilk="argument" name="data" />
          <variable citdl="selector" line="1906" name="newurl" />
          <variable line="1907" name="proxy" />
          <variable citdl="proxyhost.find()" line="1910" name="i" />
          <variable citdl="list" line="1911" name="proxyhost" />
        </scope>
        <scope ilk="function" line="1968" lineend="1977" name="get_user_passwd" returns="tuple" signature="get_user_passwd(host, realm, clear_cache=0)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="realm" />
          <variable citdl="int" ilk="argument" name="clear_cache" />
          <variable citdl="str" line="1969" name="key" />
        </scope>
        <scope doc="Default error handling -- don&apos;t raise an exception." ilk="function" line="1812" lineend="1814" name="http_error_default" returns="addinfourl()" signature="http_error_default(url, fp, errcode, errmsg, headers)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
        </scope>
        <scope doc="Error 401 -- authentication required." ilk="function" line="1860" lineend="1880" name="http_error_401" returns="getattr()()" signature="http_error_401(url, fp, errcode, errmsg, headers, data=None)">
          <import line="1867" module="re" />
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="data" />
          <variable line="1866" name="stuff" />
          <variable citdl="re.match()" line="1868" name="match" />
          <variable citdl="str" line="1876" name="name" />
        </scope>
        <scope doc="Override this in a GUI environment!" ilk="function" line="1979" lineend="1989" name="prompt_user_passwd" returns="tuple" signature="prompt_user_passwd(host, realm)">
          <import line="1981" module="getpass" />
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="realm" />
          <variable citdl="input()" line="1983" name="user" />
          <variable citdl="getpass.getpass()" line="1984" name="passwd" />
        </scope>
        <scope ilk="function" line="1922" lineend="1938" name="retry_proxy_https_basic_auth" returns="self.open()" signature="retry_proxy_https_basic_auth(url, realm, data=None)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="realm" />
          <variable ilk="argument" name="data" />
          <variable citdl="host" line="1924" name="newurl" />
          <variable line="1925" name="proxy" />
          <variable citdl="proxyhost.find()" line="1928" name="i" />
          <variable citdl="list" line="1929" name="proxyhost" />
        </scope>
        <scope ilk="function" line="1954" lineend="1966" name="retry_https_basic_auth" returns="self.open()" signature="retry_https_basic_auth(url, realm, data=None)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="realm" />
          <variable ilk="argument" name="data" />
          <variable citdl="host.find()" line="1956" name="i" />
          <variable citdl="list" line="1957" name="host" />
          <variable citdl="str" line="1962" name="newurl" />
        </scope>
        <scope doc="Error 407 -- proxy authentication required." ilk="function" line="1882" lineend="1902" name="http_error_407" returns="getattr()()" signature="http_error_407(url, fp, errcode, errmsg, headers, data=None)">
          <import line="1889" module="re" />
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="data" />
          <variable line="1888" name="stuff" />
          <variable citdl="re.match()" line="1890" name="match" />
          <variable citdl="str" line="1898" name="name" />
        </scope>
        <scope doc="Error 307 -- relocated, but turn POST into error." ilk="function" line="1853" lineend="1858" name="http_error_307" returns="FancyURLopener.http_error_302()" signature="http_error_307(url, fp, errcode, errmsg, headers, data=None)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="1832" lineend="1843" name="redirect_internal" returns="self.open()" signature="redirect_internal(url, fp, errcode, errmsg, headers, data)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="data" />
          <variable citdl="urljoin()" line="1834" name="newurl" />
          <variable citdl="fp.read()" line="1839" name="void" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="1809" name="tries" />
        <scope doc="Error 303 -- also relocated (essentially identical to 302)." ilk="function" line="1849" lineend="1851" name="http_error_303" returns="FancyURLopener.http_error_302()" signature="http_error_303(url, fp, errcode, errmsg, headers, data=None)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="Error 302 -- relocated (temporarily)." ilk="function" line="1816" lineend="1830" name="http_error_302" returns="self.redirect_internal()" signature="http_error_302(url, fp, errcode, errmsg, headers, data=None)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="data" />
          <variable citdl="self.http_error_500" line="1821" name="meth" />
          <variable citdl="self.redirect_internal()" line="1827" name="result" />
        </scope>
        <scope doc="Error 301 -- also relocated (permanently)." ilk="function" line="1845" lineend="1847" name="http_error_301" returns="FancyURLopener.http_error_302()" signature="http_error_301(url, fp, errcode, errmsg, headers, data=None)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="1808" name="auth_cache" />
        <scope ilk="function" line="1940" lineend="1952" name="retry_http_basic_auth" returns="self.open()" signature="retry_http_basic_auth(url, realm, data=None)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="realm" />
          <variable ilk="argument" name="data" />
          <variable citdl="host.find()" line="1942" name="i" />
          <variable citdl="list" line="1943" name="host" />
          <variable citdl="str" line="1948" name="newurl" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="1810" name="maxtries" />
        <scope attributes="__ctor__" ilk="function" line="1806" lineend="1810" name="__init__" signature="FancyURLopener(*args, **kwargs)">
          <variable citdl="FancyURLopener" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
      </scope>
      <scope classrefs="BaseHandler" ilk="class" line="1178" lineend="1223" name="FileHandler">
        <scope ilk="function" line="1190" lineend="1198" name="get_names" returns="tuple" signature="get_names()">
          <variable citdl="FileHandler" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1180" lineend="1186" name="file_open" returns="self.open_local_file()" signature="file_open(req)">
          <variable citdl="FileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable citdl="req.selector" line="1181" name="url" />
        </scope>
        <variable citdl="tuple" line="1189" name="names" />
        <scope ilk="function" line="1201" lineend="1223" name="open_local_file" returns="addinfourl()" signature="open_local_file(req)">
          <import line="1202" module="email.utils" />
          <import line="1203" module="mimetypes" />
          <variable citdl="FileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable citdl="req.host" line="1204" name="host" />
          <variable citdl="req.selector" line="1205" name="file" />
          <variable citdl="url2pathname()" line="1206" name="localfile" />
          <variable citdl="os.stat()" line="1208" name="stats" />
          <variable citdl="stats.st_size" line="1209" name="size" />
          <variable citdl="email.utils.formatdate()" line="1210" name="modified" />
          <variable line="1211" name="mtype" />
          <variable citdl="email.message_from_string()" line="1212" name="headers" />
        </scope>
      </scope>
      <scope classrefs="AbstractBasicAuthHandler BaseHandler" ilk="class" line="804" lineend="811" name="HTTPBasicAuthHandler">
        <scope ilk="function" line="808" lineend="811" name="http_error_401" returns="self.http_error_auth_reqed()" signature="http_error_401(req, fp, code, msg, headers)">
          <variable citdl="HTTPBasicAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="headers" />
          <variable citdl="req.full_url" line="809" name="url" />
        </scope>
        <variable citdl="str" line="806" name="auth_header" />
      </scope>
      <scope classrefs="BaseHandler" ilk="class" line="1102" lineend="1118" name="HTTPCookieProcessor">
        <scope ilk="function" line="1109" lineend="1111" name="http_request" signature="http_request(request)">
          <variable citdl="HTTPCookieProcessor" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
        </scope>
        <variable attributes="__instancevar__" citdl="http.cookiejar.CookieJar()" line="1107" name="cookiejar" />
        <variable citdl="HTTPCookieProcessor.http_request" line="1117" name="https_request" />
        <variable citdl="HTTPCookieProcessor.http_response" line="1118" name="https_response" />
        <scope attributes="__ctor__" ilk="function" line="1103" lineend="1107" name="__init__" signature="HTTPCookieProcessor(cookiejar=None)">
          <import line="1104" module="http.cookiejar" />
          <variable citdl="HTTPCookieProcessor" ilk="argument" name="self" />
          <variable citdl="http.cookiejar.CookieJar()" ilk="argument" name="cookiejar" />
        </scope>
        <scope ilk="function" line="1113" lineend="1115" name="http_response" signature="http_response(request, response)">
          <variable citdl="HTTPCookieProcessor" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable ilk="argument" name="response" />
        </scope>
      </scope>
      <scope classrefs="BaseHandler" ilk="class" line="473" lineend="475" name="HTTPDefaultErrorHandler">
        <scope ilk="function" line="474" lineend="475" name="http_error_default" signature="http_error_default(req, fp, code, msg, hdrs)">
          <variable citdl="HTTPDefaultErrorHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="hdrs" />
        </scope>
      </scope>
      <scope classrefs="BaseHandler AbstractDigestAuthHandler" doc="An authentication protocol defined by RFC 2069  Digest authentication improves on basic authentication because it" ilk="class" line="970" lineend="985" name="HTTPDigestAuthHandler">
        <scope ilk="function" line="980" lineend="985" name="http_error_401" returns="self.http_error_auth_reqed()" signature="http_error_401(req, fp, code, msg, headers)">
          <variable citdl="HTTPDigestAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="headers" />
          <variable line="981" name="host" />
          <variable citdl="self.http_error_auth_reqed()" line="982" name="retry" />
        </scope>
        <variable citdl="int" line="978" name="handler_order" />
        <variable citdl="str" line="977" name="auth_header" />
      </scope>
      <scope classrefs="URLError addinfourl" doc="Raised when HTTP error occurs, but also acts like non-error return" ilk="class" name="HTTPError" />
      <scope classrefs="BaseHandler" doc="Process HTTP error responses." ilk="class" line="456" lineend="471" name="HTTPErrorProcessor">
        <variable citdl="HTTPErrorProcessor.http_response" line="471" name="https_response" />
        <variable citdl="int" line="458" name="handler_order" />
        <scope ilk="function" line="460" lineend="469" name="http_response" returns="self.parent.error()" signature="http_response(request, response)">
          <variable citdl="HTTPErrorProcessor" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable citdl="self.parent.error()" ilk="argument" name="response" />
          <variable citdl="response.msg" line="461" name="msg" />
          <variable citdl="response.code" line="461" name="code" />
          <variable citdl="response.info()" line="461" name="hdrs" />
        </scope>
      </scope>
      <scope classrefs="AbstractHTTPHandler" ilk="class" line="1087" lineend="1092" name="HTTPHandler">
        <scope ilk="function" line="1089" lineend="1090" name="http_open" returns="self.do_open()" signature="http_open(req)">
          <variable citdl="HTTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
        </scope>
        <variable citdl="AbstractHTTPHandler.do_request_" line="1092" name="http_request" />
      </scope>
      <scope classrefs="object" ilk="class" line="685" lineend="746" name="HTTPPasswordMgr">
        <scope doc="Check if test is below base in a URI tree" ilk="function" line="734" lineend="746" name="is_suburi" returns="bool" signature="is_suburi(base, test)">
          <variable citdl="HTTPPasswordMgr" ilk="argument" name="self" />
          <variable ilk="argument" name="base" />
          <variable ilk="argument" name="test" />
          <variable citdl="posixpath.commonprefix()" line="743" name="common" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="688" name="passwd" />
        <scope ilk="function" line="690" lineend="699" name="add_password" signature="add_password(realm, uri, user, passwd)">
          <variable citdl="HTTPPasswordMgr" ilk="argument" name="self" />
          <variable ilk="argument" name="realm" />
          <variable citdl="list" ilk="argument" name="uri" />
          <variable ilk="argument" name="user" />
          <variable ilk="argument" name="passwd" />
          <variable citdl="tuple()" line="697" name="reduced_uri" />
        </scope>
        <scope ilk="function" line="701" lineend="709" name="find_user_password" returns="tuple" signature="find_user_password(realm, authuri)">
          <variable citdl="HTTPPasswordMgr" ilk="argument" name="self" />
          <variable ilk="argument" name="realm" />
          <variable ilk="argument" name="authuri" />
          <variable citdl="self.passwd.get()" line="702" name="domains" />
          <variable citdl="self.reduce_uri()" line="704" name="reduced_authuri" />
        </scope>
        <scope doc="Accept authority or URI and extract only the authority and path." ilk="function" line="711" lineend="732" name="reduce_uri" returns="tuple" signature="reduce_uri(uri, default_port=True)">
          <variable citdl="HTTPPasswordMgr" ilk="argument" name="self" />
          <variable ilk="argument" name="uri" />
          <variable citdl="True" ilk="argument" name="default_port" />
          <variable citdl="urlsplit()" line="714" name="parts" />
          <variable line="717" name="scheme" />
          <variable citdl="str" line="718" name="authority" />
          <variable citdl="str" line="719" name="path" />
          <variable citdl="{}.get()" line="727" name="dport" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="687" lineend="688" name="__init__" signature="HTTPPasswordMgr()">
          <variable citdl="HTTPPasswordMgr" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="HTTPPasswordMgr" ilk="class" line="749" lineend="756" name="HTTPPasswordMgrWithDefaultRealm">
        <scope ilk="function" line="751" lineend="756" name="find_user_password" returns="tuple" signature="find_user_password(realm, authuri)">
          <variable citdl="HTTPPasswordMgrWithDefaultRealm" ilk="argument" name="self" />
          <variable ilk="argument" name="realm" />
          <variable ilk="argument" name="authuri" />
        </scope>
      </scope>
      <scope classrefs="BaseHandler" ilk="class" line="477" lineend="566" name="HTTPRedirectHandler">
        <variable citdl="str" line="566" name="inf_msg" />
        <scope doc="Return a Request or None in response to a redirect." ilk="function" line="485" lineend="513" name="redirect_request" returns="Request" signature="redirect_request(req, fp, code, msg, headers, newurl)">
          <variable citdl="HTTPRedirectHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="headers" />
          <variable citdl="newurl.replace()" ilk="argument" name="newurl" />
          <variable citdl="req.get_method()" line="495" name="m" />
          <variable citdl="tuple" line="507" name="CONTENT_HEADERS" />
          <variable citdl="dict()" line="508" name="newheaders" />
        </scope>
        <variable citdl="int" line="480" name="max_repeats" />
        <variable citdl="int" line="483" name="max_redirections" />
        <scope ilk="function" line="519" lineend="562" name="http_error_302" returns="self.parent.open()" signature="http_error_302(req, fp, code, msg, headers)">
          <variable citdl="HTTPRedirectHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="headers" />
          <variable citdl="urljoin()" line="523" name="newurl" />
          <variable citdl="list()" line="530" name="urlparts" />
          <variable citdl="redirect_request()" line="541" name="new" />
          <variable citdl="dict" line="548" name="visited" />
        </scope>
        <variable citdl="HTTPRedirectHandler.http_error_302" line="564" name="http_error_301" />
      </scope>
      <scope classrefs="AbstractHTTPHandler" ilk="class" line="1095" lineend="1100" name="HTTPSHandler">
        <variable citdl="AbstractHTTPHandler.do_request_" line="1100" name="https_request" />
        <scope ilk="function" line="1097" lineend="1098" name="https_open" returns="self.do_open()" signature="https_open(req)">
          <variable citdl="HTTPSHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
        </scope>
      </scope>
      <variable citdl="int" line="1338" name="MAXFTPCACHE" />
      <scope classrefs="object" ilk="class" line="256" lineend="393" name="OpenerDirector">
        <variable attributes="__instancevar__" citdl="dict" line="264" name="process_response" />
        <scope attributes="protected" ilk="function" line="320" lineend="329" name="_call_chain" returns="func()" signature="_call_chain(chain, kind, meth_name, *args)">
          <variable citdl="OpenerDirector" ilk="argument" name="self" />
          <variable ilk="argument" name="chain" />
          <variable ilk="argument" name="kind" />
          <variable ilk="argument" name="meth_name" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="chain.get()" line="324" name="handlers" />
          <variable citdl="getattr()" line="326" name="func" />
          <variable citdl="func()" line="327" name="result" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="265" name="process_request" />
        <variable attributes="__instancevar__" citdl="list" line="261" name="handlers" />
        <variable attributes="__instancevar__" citdl="list" line="259" name="addheaders" />
        <scope attributes="protected" ilk="function" line="359" lineend="372" name="_open" returns="OpenerDirector._call_chain()" signature="_open(req, data=None)">
          <variable citdl="OpenerDirector" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="data" />
          <variable citdl="_call_chain()" line="360" name="result" />
          <variable citdl="req.type" line="365" name="protocol" />
        </scope>
        <scope ilk="function" line="267" lineend="314" name="add_handler" signature="add_handler(handler)">
          <variable citdl="OpenerDirector" ilk="argument" name="self" />
          <variable ilk="argument" name="handler" />
          <variable citdl="False" line="272" name="added" />
          <variable citdl="meth.find()" line="278" name="i" />
          <variable citdl="list" line="279" name="protocol" />
          <variable citdl="list" line="280" name="condition" />
          <variable citdl="condition.find()" line="283" name="j" />
          <variable citdl="list" line="284" name="kind" />
          <variable citdl="dict" line="289" name="lookup" />
          <variable citdl="lookup.setdefault()" line="303" name="handlers" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="262" name="handle_open" />
        <scope ilk="function" line="374" lineend="393" name="error" returns="OpenerDirector._call_chain()" signature="error(proto, *args)">
          <variable citdl="OpenerDirector" ilk="argument" name="self" />
          <variable ilk="argument" name="proto" />
          <variable attributes="varargs" citdl="tuple" ilk="argument" name="args" />
          <variable citdl="dict" line="377" name="dict" />
          <variable citdl="str" line="379" name="meth_name" />
          <variable citdl="int" line="380" name="http_err" />
          <variable line="381" name="orig_args" />
          <variable citdl="_call_chain()" line="387" name="result" />
        </scope>
        <scope ilk="function" line="316" lineend="318" name="close" signature="close()">
          <variable citdl="OpenerDirector" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="331" lineend="357" name="open" returns="self._open()" signature="open(fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT)">
          <variable citdl="OpenerDirector" ilk="argument" name="self" />
          <variable ilk="argument" name="fullurl" />
          <variable ilk="argument" name="data" />
          <variable citdl="socket._GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
          <variable citdl="meth()" line="334" name="req" />
          <variable citdl="req.type" line="341" name="protocol" />
          <variable citdl="req.type" line="344" name="meth_name" />
          <variable citdl="getattr()" line="346" name="meth" />
          <variable citdl="meth()" line="349" name="response" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="263" name="handle_error" />
        <scope attributes="__ctor__" ilk="function" line="257" lineend="265" name="__init__" signature="OpenerDirector()">
          <variable citdl="OpenerDirector" ilk="argument" name="self" />
          <variable citdl="list" line="258" name="client_version" />
        </scope>
      </scope>
      <scope classrefs="AbstractBasicAuthHandler BaseHandler" ilk="class" line="814" lineend="825" name="ProxyBasicAuthHandler">
        <variable citdl="str" line="816" name="auth_header" />
        <scope ilk="function" line="818" lineend="825" name="http_error_407" returns="self.http_error_auth_reqed()" signature="http_error_407(req, fp, code, msg, headers)">
          <variable citdl="ProxyBasicAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="headers" />
          <variable citdl="req.host" line="823" name="authority" />
        </scope>
      </scope>
      <scope classrefs="BaseHandler AbstractDigestAuthHandler" ilk="class" line="988" lineend="998" name="ProxyDigestAuthHandler">
        <variable citdl="int" line="991" name="handler_order" />
        <variable citdl="str" line="990" name="auth_header" />
        <scope ilk="function" line="993" lineend="998" name="http_error_407" returns="self.http_error_auth_reqed()" signature="http_error_407(req, fp, code, msg, headers)">
          <variable citdl="ProxyDigestAuthHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="headers" />
          <variable citdl="req.host" line="994" name="host" />
          <variable citdl="self.http_error_auth_reqed()" line="995" name="retry" />
        </scope>
      </scope>
      <scope classrefs="BaseHandler" ilk="class" line="643" lineend="683" name="ProxyHandler">
        <scope ilk="function" line="657" lineend="683" name="proxy_open" returns="self.parent.open()" signature="proxy_open(req, proxy, type)">
          <variable citdl="ProxyHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable ilk="argument" name="proxy" />
          <variable ilk="argument" name="type" />
          <variable citdl="req.type" line="658" name="orig_type" />
          <variable citdl="req.type" line="661" name="proxy_type" />
          <variable citdl="str" line="667" name="user_pass" />
          <variable line="669" name="creds" />
          <variable citdl="unquote()" line="671" name="hostport" />
        </scope>
        <variable attributes="__instancevar__" citdl="getproxies()" line="651" name="proxies" />
        <variable citdl="int" line="645" name="handler_order" />
        <scope attributes="__ctor__" ilk="function" line="647" lineend="655" name="__init__" signature="ProxyHandler(proxies=None)">
          <variable citdl="ProxyHandler" ilk="argument" name="self" />
          <variable citdl="getproxies()" ilk="argument" name="proxies" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="160" lineend="254" name="Request">
        <variable attributes="__instancevar__" citdl="False" line="175" name="unverifiable" />
        <variable attributes="protected __instancevar__" citdl="unquote()" line="168" name="_tunnel_host" />
        <scope ilk="function" line="231" lineend="232" name="has_proxy" returns="bool" signature="has_proxy()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="234" lineend="236" name="add_header" signature="add_header(key, val)">
          <variable citdl="Request" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="val" />
        </scope>
        <scope ilk="function" line="206" lineend="207" name="get_type" returns="self.type" signature="get_type()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="218" lineend="219" name="get_origin_req_host" returns="request_host()" signature="get_origin_req_host()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="162" lineend="176" name="__init__" signature="Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False)">
          <variable citdl="Request" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="data" />
          <variable citdl="dict" ilk="argument" name="headers" />
          <variable citdl="request_host()" ilk="argument" name="origin_req_host" />
          <variable citdl="False" ilk="argument" name="unverifiable" />
        </scope>
        <scope ilk="function" line="197" lineend="198" name="has_data" returns="bool" signature="has_data()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="200" lineend="201" name="get_data" signature="get_data()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="194" lineend="195" name="add_data" signature="add_data(data)">
          <variable citdl="Request" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="203" lineend="204" name="get_full_url" returns="unwrap()" signature="get_full_url()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="212" lineend="213" name="get_selector" returns="self.selector" signature="get_selector()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="227" name="type" />
        <scope ilk="function" line="215" lineend="216" name="is_unverifiable" returns="bool" signature="is_unverifiable()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="246" lineend="249" name="get_header" returns="self.headers.get()" signature="get_header(header_name, default=None)">
          <variable citdl="Request" ilk="argument" name="self" />
          <variable ilk="argument" name="header_name" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope ilk="function" line="223" lineend="229" name="set_proxy" signature="set_proxy(host, type)">
          <variable citdl="Request" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="type" />
        </scope>
        <scope ilk="function" line="209" lineend="210" name="get_host" returns="unquote()" signature="get_host()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="request_host()" line="174" name="origin_req_host" />
        <variable attributes="__instancevar__" citdl="unquote()" line="184" name="host" />
        <variable attributes="__instancevar__" citdl="unwrap()" line="228" name="selector" />
        <variable attributes="__instancevar__" line="166" name="data" />
        <scope attributes="protected" ilk="function" line="178" lineend="184" name="_parse" signature="_parse()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="186" lineend="190" name="get_method" returns="str" signature="get_method()">
          <variable citdl="Request" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="251" lineend="254" name="header_items" returns="list()" signature="header_items()">
          <variable citdl="Request" ilk="argument" name="self" />
          <variable citdl="self.unredirected_hdrs.copy()" line="252" name="hdrs" />
        </scope>
        <scope ilk="function" line="238" lineend="240" name="add_unredirected_header" signature="add_unredirected_header(key, val)">
          <variable citdl="Request" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="val" />
        </scope>
        <variable attributes="__instancevar__" citdl="unwrap()" line="165" name="full_url" />
        <variable attributes="__instancevar__" citdl="dict" line="167" name="headers" />
        <variable attributes="__instancevar__" citdl="dict" line="171" name="unredirected_hdrs" />
        <scope ilk="function" line="242" lineend="244" name="has_header" returns="bool" signature="has_header(header_name)">
          <variable citdl="Request" ilk="argument" name="self" />
          <variable ilk="argument" name="header_name" />
        </scope>
      </scope>
      <scope classrefs="IOError" ilk="class" name="URLError" />
      <scope classrefs="object" doc="Class to open URLs. This is a class rather than just a subroutine because we may need more than one set of global protocol-specific options." ilk="class" line="1364" lineend="1800" name="URLopener">
        <scope ilk="function" line="1471" lineend="1535" name="retrieve" returns="tuple" signature="retrieve(url) returns (filename, headers) for a local object or (tempfilename, headers) for a remote object.">
          <import line="1492" module="tempfile" />
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable citdl="unwrap()" ilk="argument" name="url" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="reporthook" />
          <variable ilk="argument" name="data" />
          <variable citdl="self.open_local_file()" line="1480" name="fp" />
          <variable citdl="fp.info()" line="1481" name="hdrs" />
          <variable citdl="fp.info()" line="1488" name="headers" />
          <variable citdl="os.fdopen()" line="1490" name="tfp" />
          <variable line="1497" name="suffix" />
          <variable citdl="tuple" line="1502" name="result" />
          <variable citdl="int" line="1505" name="bs" />
          <variable citdl="int" line="1506" name="size" />
          <variable citdl="int" line="1507" name="read" />
          <variable citdl="int" line="1508" name="blocknum" />
          <variable citdl="fp.read()" line="1514" name="block" />
        </scope>
        <variable attributes="__instancevar__" citdl="x509.get()" line="1383" name="cert_file" />
        <variable attributes="__instancevar__" line="1394" name="ftpcache" />
        <scope ilk="function" line="1403" lineend="1404" name="close" signature="close()">
          <variable citdl="URLopener" ilk="argument" name="self" />
        </scope>
        <scope doc="Use URLopener().open(file) instead of open(file, &apos;r&apos;)." ilk="function" line="1426" lineend="1458" name="open" returns="self.open_unknown()" signature="open(fullurl, data=None)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable citdl="quote()" ilk="argument" name="fullurl" />
          <variable ilk="argument" name="data" />
          <variable citdl="()" line="1432" name="fp" />
          <variable citdl="str" line="1436" name="urltype" />
          <variable line="1438" name="proxy" />
          <variable citdl="tuple" line="1441" name="url" />
          <variable citdl="str" line="1444" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1377" lineend="1394" name="__init__" signature="URLopener(proxies=None, **x509)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable citdl="getproxies()" ilk="argument" name="proxies" />
          <variable attributes="kwargs" ilk="argument" name="x509" />
        </scope>
        <scope doc="Overridable interface to open unknown URL type." ilk="function" line="1465" lineend="1468" name="open_unknown_proxy" signature="open_unknown_proxy(proxy, fullurl, data=None)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="proxy" />
          <variable ilk="argument" name="fullurl" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="Handle http errors." ilk="function" line="1630" lineend="1644" name="http_error" returns="method()" signature="http_error(url, fp, errcode, errmsg, headers, data=None)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="data" />
          <variable citdl="str" line="1636" name="name" />
          <variable citdl="getattr()" line="1638" name="method" />
          <variable citdl="method()" line="1640" name="result" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="1384" name="addheaders" />
        <variable citdl="list" line="1374" name="version" />
        <variable attributes="__instancevar__" citdl="str" line="1445" name="type" />
        <variable attributes="private" citdl="list" line="1372" name="__tempfiles" />
        <scope doc="Use &quot;data&quot; URL." ilk="function" line="1760" lineend="1800" name="open_data" returns="addinfourl()" signature="open_data(url, data=None)">
          <import line="1788" module="base64" />
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="unquote()" ilk="argument" name="data" />
          <variable citdl="list" line="1776" name="type" />
          <variable citdl="type.rfind()" line="1777" name="semi" />
          <variable citdl="list" line="1779" name="encoding" />
          <variable citdl="list" line="1783" name="msg" />
          <variable citdl="email.message_from_string()" line="1797" name="headers" />
          <variable citdl="io.StringIO()" line="1798" name="f" />
        </scope>
        <scope doc="Overridable interface to open unknown URL type." ilk="function" line="1460" lineend="1463" name="open_unknown" signature="open_unknown(fullurl, data=None)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="fullurl" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="Default error handler: close the connection and raise IOError." ilk="function" line="1646" lineend="1650" name="http_error_default" signature="http_error_default(url, fp, errcode, errmsg, headers)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
          <variable citdl="fp.read()" line="1648" name="void" />
        </scope>
        <scope ilk="function" line="1400" lineend="1401" name="__del__" signature="__del__()">
          <variable citdl="URLopener" ilk="argument" name="self" />
        </scope>
        <variable attributes="private __instancevar__" citdl="os.unlink" line="1386" name="__unlink" />
        <scope attributes="protected" ilk="function" line="1653" lineend="1656" name="_https_connection" returns="http.client.HTTPSConnection()" signature="_https_connection(host)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
        </scope>
        <scope doc="Add a header to be used by the HTTP interface only e.g." ilk="function" line="1420" lineend="1423" name="addheader" signature="addheader(*args)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable attributes="__instancevar__" line="1387" name="tempcache" />
        <variable attributes="__instancevar__" citdl="getproxies()" line="1381" name="proxies" />
        <scope doc="Use HTTPS protocol." ilk="function" line="1658" lineend="1660" name="open_https" returns="URLopener._open_generic_http()" signature="open_https(url, data=None)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="Use local file." ilk="function" line="1671" lineend="1699" name="open_local_file" returns="addinfourl()" signature="open_local_file(url)">
          <import line="1673" module="mimetypes" />
          <import line="1673" module="email.utils" />
          <import line="1674" module="io" symbol="StringIO" />
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="url2pathname()" line="1676" name="localname" />
          <variable citdl="os.stat()" line="1678" name="stats" />
          <variable citdl="stats.st_size" line="1681" name="size" />
          <variable citdl="email.utils.formatdate()" line="1682" name="modified" />
          <variable line="1683" name="mtype" />
          <variable citdl="email.message_from_string()" line="1684" name="headers" />
          <variable citdl="file" line="1688" name="urlfile" />
        </scope>
        <scope doc="Use FTP protocol." ilk="function" line="1701" lineend="1758" name="open_ftp" returns="addinfourl()" signature="open_ftp(url)">
          <import line="1705" module="mimetypes" />
          <import line="1706" module="io" symbol="StringIO" />
          <import line="1718" module="ftplib" />
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="unquote()" line="1712" name="passwd" />
          <variable citdl="unquote()" line="1713" name="host" />
          <variable citdl="unquote()" line="1714" name="user" />
          <variable citdl="ftplib.FTP_PORT" line="1719" name="port" />
          <variable citdl="unquote()" line="1723" name="path" />
          <variable citdl="list" line="1724" name="dirs" />
          <variable line="1725" name="file" />
          <variable citdl="tuple" line="1728" name="key" />
          <variable line="1734" name="v" />
          <variable citdl="str" line="1741" name="type" />
          <variable line="1749" name="mtype" />
          <variable citdl="email.message_from_string()" line="1750" name="headers" />
        </scope>
        <scope doc="Use local file or FTP depending on form of URL." ilk="function" line="1662" lineend="1669" name="open_file" returns="self.open_ftp()" signature="open_file(url)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
        </scope>
        <scope doc="Use HTTP protocol." ilk="function" line="1626" lineend="1628" name="open_http" returns="URLopener._open_generic_http()" signature="open_http(url, data=None)">
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="__instancevar__" citdl="x509.get()" line="1382" name="key_file" />
        <scope ilk="function" line="1406" lineend="1418" name="cleanup" signature="cleanup()">
          <variable citdl="URLopener" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Make an HTTP connection using connection_class." ilk="function" line="1539" lineend="1624" name="_open_generic_http" returns="self.http_error()" signature="_open_generic_http(connection_factory, url, data)">
          <import line="1583" module="base64" />
          <import line="1589" module="base64" />
          <variable citdl="URLopener" ilk="argument" name="self" />
          <variable ilk="argument" name="connection_factory" />
          <variable citdl="rest" ilk="argument" name="url" />
          <variable ilk="argument" name="data" />
          <variable line="1552" name="user_passwd" />
          <variable line="1553" name="proxy_passwd" />
          <variable citdl="unquote()" line="1558" name="host" />
          <variable citdl="unquote()" line="1559" name="realhost" />
          <variable citdl="str" line="1575" name="selector" />
          <variable line="1584" name="proxy_auth" />
          <variable line="1590" name="auth" />
          <variable citdl="connection_factory()" line="1593" name="http_conn" />
          <variable citdl="dict" line="1594" name="headers" />
          <variable citdl="http_conn.getresponse()" line="1611" name="response" />
        </scope>
      </scope>
      <scope classrefs="BaseHandler" ilk="class" line="1120" lineend="1123" name="UnknownHandler">
        <scope ilk="function" line="1121" lineend="1123" name="unknown_open" signature="unknown_open(req)">
          <variable citdl="UnknownHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="req" />
          <variable citdl="req.type" line="1122" name="type" />
        </scope>
      </scope>
      <variable citdl="str" line="114" name="__version__" />
      <scope classrefs="addbase" doc="Class to add a close hook to an open file." ilk="class" name="addclosehook" />
      <scope classrefs="addbase" doc="class to add info() and geturl() methods to an open file." ilk="class" name="addinfourl" />
      <import module="base64" />
      <import module="bisect" />
      <scope doc="Create an opener object from a list of handlers." ilk="function" line="399" lineend="435" name="build_opener" returns="OpenerDirector" signature="build_opener(*handlers)">
        <scope ilk="function" line="408" lineend="409" name="isclass" returns="isinstance()" signature="isclass(obj)">
          <variable ilk="argument" name="obj" />
        </scope>
        <variable citdl="set()" line="417" name="skip" />
        <variable attributes="varargs" ilk="argument" name="handlers" />
        <variable citdl="OpenerDirector" line="411" name="opener" />
        <variable citdl="list" line="412" name="default_classes" />
        <variable citdl="h()" line="433" name="h" />
      </scope>
      <import module="email" />
      <variable citdl="dict" line="1363" name="ftpcache" />
      <scope doc="Return the set of errors raised by the FTP class." ilk="function" line="2011" lineend="2017" name="ftperrors" returns="ftplib.all_errors" signature="ftperrors()">
        <variable attributes="protected" citdl="ftplib.all_errors" line="2016" name="_ftperrors" />
      </scope>
      <scope classrefs="object" doc="Class used by open_ftp() for cache of open FTP connections." ilk="class" line="2030" lineend="2105" name="ftpwrapper">
        <variable attributes="__instancevar__" line="2038" name="dirs" />
        <variable attributes="__instancevar__" citdl="ftplib.FTP()" line="2045" name="ftp" />
        <variable attributes="__instancevar__" citdl="int" line="2044" name="busy" />
        <variable attributes="__instancevar__" line="2035" name="passwd" />
        <scope ilk="function" line="2042" lineend="2049" name="init" signature="init()">
          <import line="2043" module="ftplib" />
          <variable citdl="ftpwrapper" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="2036" name="host" />
        <scope ilk="function" line="2051" lineend="2090" name="retrfile" returns="tuple" signature="retrfile(file, type)">
          <import line="2052" module="ftplib" />
          <variable citdl="ftpwrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="type" />
          <variable citdl="int" line="2054" name="isdir" />
          <variable citdl="str" line="2054" name="cmd" />
          <variable citdl="self.ftp.ntransfercmd()" line="2061" name="conn" />
          <variable citdl="self.ftp.pwd()" line="2076" name="pwd" />
        </scope>
        <variable attributes="__instancevar__" line="2034" name="user" />
        <variable attributes="__instancevar__" line="2039" name="timeout" />
        <scope ilk="function" line="2100" lineend="2105" name="close" signature="close()">
          <variable citdl="ftpwrapper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="2091" lineend="2098" name="endtransfer" signature="endtransfer()">
          <variable citdl="ftpwrapper" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="2037" name="port" />
        <scope attributes="__ctor__" ilk="function" line="2033" lineend="2040" name="__init__" signature="ftpwrapper(user, passwd, host, port, dirs, timeout=None)">
          <variable citdl="ftpwrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="user" />
          <variable ilk="argument" name="passwd" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
          <variable ilk="argument" name="dirs" />
          <variable ilk="argument" name="timeout" />
        </scope>
      </scope>
      <scope doc="Return a dictionary of scheme -&gt; proxy server URL mappings." ilk="function" line="2230" name="getproxies" signature="getproxies()" />
      <scope doc="Return a dictionary of scheme -&gt; proxy server URL mappings." ilk="function" line="2108" lineend="2122" name="getproxies_environment" returns="dict" signature="getproxies_environment()">
        <variable citdl="dict" line="2117" name="proxies" />
        <variable citdl="name.lower()" line="2119" name="name" />
      </scope>
      <scope doc="Return a dictionary of scheme -&gt; proxy server URL mappings." ilk="function" line="2185" lineend="2228" name="getproxies_registry" returns="dict" signature="getproxies_registry()">
        <variable citdl="winreg.OpenKey()" line="2198" name="internetSettings" />
        <variable citdl="str()" line="2204" name="proxyServer" />
        <variable citdl="dict" line="2191" name="proxies" />
        <variable line="2200" name="proxyEnable" />
        <variable citdl="str" line="2213" name="address" />
      </scope>
      <import module="hashlib" />
      <import module="http" />
      <scope ilk="function" line="123" lineend="125" name="install_opener" signature="install_opener(opener)">
        <variable attributes="protected" line="125" name="_opener" />
        <variable ilk="argument" name="opener" />
      </scope>
      <import module="io" />
      <scope doc="Return the IP address of the magic hostname &apos;localhost&apos;." ilk="function" line="1995" lineend="2000" name="localhost" returns="socket.gethostbyname()" signature="localhost()">
        <variable attributes="protected" citdl="socket.gethostbyname()" line="1999" name="_localhost" />
      </scope>
      <scope doc="Return an empty email Message object." ilk="function" line="2020" lineend="2025" name="noheaders" returns="email.message_from_string()" signature="noheaders()">
        <variable attributes="protected" citdl="email.message_from_string()" line="2024" name="_noheaders" />
      </scope>
      <import module="os" />
      <scope doc="Parse lists as described by RFC 2068 Section 2." ilk="function" line="1135" lineend="1176" name="parse_http_list" returns="list" signature="parse_http_list(s)">
        <variable citdl="list" line="1144" name="res" />
        <variable ilk="argument" name="s" />
        <variable citdl="str" line="1145" name="part" />
        <variable citdl="False" line="1158" name="quote" />
        <variable citdl="False" line="1147" name="escape" />
      </scope>
      <scope doc="Parse list of key=value strings where keys are not duplicated." ilk="function" line="1125" lineend="1133" name="parse_keqv_list" returns="dict" signature="parse_keqv_list(l)">
        <variable citdl="list" line="1131" name="v" />
        <variable citdl="dict" line="1127" name="parsed" />
        <variable ilk="argument" name="l" />
      </scope>
      <scope doc="OS-specific conversion from a file system path to a relative URL of the &apos;file&apos; scheme; not recommended for general use." ilk="function" line="1351" lineend="1354" name="pathname2url" returns="quote()" signature="pathname2url(p)">
        <variable ilk="argument" name="pathname" />
      </scope>
      <import module="posixpath" />
      <scope doc="Return a dictionary of scheme -&gt; proxy server URL mappings." ilk="function" line="2291" name="proxy_bypass" signature="proxy_bypass(host)" />
      <scope doc="Test if proxies should not be used for a particular host." ilk="function" line="2124" lineend="2141" name="proxy_bypass_environment" returns="int" signature="proxy_bypass_environment(host)">
        <variable citdl="os.environ.get()" line="2130" name="no_proxy" />
        <variable ilk="argument" name="host" />
      </scope>
      <scope ilk="function" line="2239" lineend="2289" name="proxy_bypass_registry" returns="int" signature="proxy_bypass_registry(host)">
        <variable citdl="socket.gethostbyname()" line="2262" name="addr" />
        <variable citdl="socket.getfqdn()" line="2268" name="fqdn" />
        <variable citdl="str()" line="2251" name="proxyOverride" />
        <variable citdl="winreg.OpenKey()" line="2247" name="internetSettings" />
        <variable citdl="list" ilk="argument" name="host" />
        <variable citdl="test.replace()" line="2282" name="test" />
        <variable line="2249" name="proxyEnable" />
      </scope>
      <scope doc="Each part of a URL, e.g." ilk="function" name="quote" signature="quote(&apos;abc def&apos;) -&gt; &apos;abc%20def&apos;" />
      <import module="random" />
      <scope doc="Return n random bytes." ilk="function" line="828" lineend="830" name="randombytes" returns="os.urandom()" signature="randombytes(n)">
        <variable ilk="argument" name="n" />
      </scope>
      <import module="re" />
      <scope doc="Return request-host, as defined by RFC 2965." ilk="function" line="144" lineend="158" name="request_host" returns="host.lower()" signature="request_host(request)">
        <variable citdl="request.full_url" line="151" name="url" />
        <variable citdl="request.get_header()" line="152" name="host" />
        <variable ilk="argument" name="request" />
      </scope>
      <import module="socket" />
      <scope doc="&apos;/path&apos;, [&apos;attr1=value1&apos;, &apos;attr2=value2&apos;, ...]." ilk="function" name="splitattr" signature="splitattr(&apos;/path;attr1=value1;attr2=value2;...&apos;) -&gt;" />
      <scope doc="splithost(&apos;//host[:port]/path&apos;) --&gt; &apos;host[:port]&apos;, &apos;/path&apos;." ilk="function" name="splithost" signature="splithost(&apos;//host[:port]/path&apos;) --&gt; &apos;host[:port]&apos;, &apos;/path&apos;." />
      <scope doc="splitpasswd(&apos;user:passwd&apos;) -&gt; &apos;user&apos;, &apos;passwd&apos;." ilk="function" name="splitpasswd" signature="splitpasswd(&apos;user:passwd&apos;) -&gt; &apos;user&apos;, &apos;passwd&apos;." />
      <scope doc="splitport(&apos;host:port&apos;) --&gt; &apos;host&apos;, &apos;port&apos;." ilk="function" name="splitport" signature="splitport(&apos;host:port&apos;) --&gt; &apos;host&apos;, &apos;port&apos;." />
      <scope doc="splitquery(&apos;/path?query&apos;) --&gt; &apos;/path&apos;, &apos;query&apos;." ilk="function" name="splitquery" signature="splitquery(&apos;/path?query&apos;) --&gt; &apos;/path&apos;, &apos;query&apos;." />
      <scope doc="splittype(&apos;type:opaquestring&apos;) --&gt; &apos;type&apos;, &apos;opaquestring&apos;." ilk="function" name="splittype" signature="splittype(&apos;type:opaquestring&apos;) --&gt; &apos;type&apos;, &apos;opaquestring&apos;." />
      <scope doc="splituser(&apos;user[:passwd]@host[:port]&apos;) --&gt; &apos;user[:passwd]&apos;, &apos;host[:port]&apos;." ilk="function" name="splituser" signature="splituser(&apos;user[:passwd]@host[:port]&apos;) --&gt; &apos;user[:passwd]&apos;, &apos;host[:port]&apos;." />
      <scope doc="splitvalue(&apos;attr=value&apos;) --&gt; &apos;attr&apos;, &apos;value&apos;." ilk="function" name="splitvalue" signature="splitvalue(&apos;attr=value&apos;) --&gt; &apos;attr&apos;, &apos;value&apos;." />
      <import module="ssl" />
      <import module="sys" />
      <scope doc="Return the IP addresses of the current host." ilk="function" line="2003" lineend="2008" name="thishost" returns="tuple()" signature="thishost()">
        <variable attributes="protected" citdl="tuple()" line="2007" name="_thishost" />
      </scope>
      <import module="time" />
      <scope doc="to_bytes(u&quot;URL&quot;) --&gt; &apos;URL&apos;." ilk="function" name="to_bytes" signature="to_bytes(u&quot;URL&quot;) --&gt; &apos;URL&apos;." />
      <scope doc="Replace %xx escapes by their single-character equivalent." ilk="function" name="unquote" signature="unquote(string, encoding=&apos;utf-8&apos;, errors=&apos;replace&apos;)" />
      <scope doc="unwrap(&apos;&lt;URL:type://host/path&gt;&apos;) --&gt; &apos;type://host/path&apos;." ilk="function" name="unwrap" signature="unwrap(&apos;&lt;URL:type://host/path&gt;&apos;) --&gt; &apos;type://host/path&apos;." />
      <scope doc="OS-specific conversion from a relative URL of the &apos;file&apos; scheme to a file system path; not recommended for general use." ilk="function" line="1346" lineend="1349" name="url2pathname" returns="unquote()" signature="url2pathname(url)">
        <variable ilk="argument" name="pathname" />
      </scope>
      <scope ilk="function" line="135" lineend="140" name="urlcleanup" signature="urlcleanup()">
        <variable attributes="protected" line="140" name="_opener" />
      </scope>
      <scope doc="Join a base URL and a possibly relative URL to form an absolute interpretation of the latter." ilk="function" name="urljoin" signature="urljoin(base, url, allow_fragments=True)" />
      <scope ilk="function" line="117" lineend="121" name="urlopen" returns="_opener.open()" signature="urlopen(url, data=None, timeout=&lt;object object at 0x028CE358&gt;)">
        <variable ilk="argument" name="url" />
        <variable attributes="protected" citdl="build_opener()" line="120" name="_opener" />
        <variable ilk="argument" name="data" />
        <variable citdl="socket._GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
      </scope>
      <scope doc="Parse a URL into 6 components: &lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;fragment&gt; Return a 6-tuple: (scheme, netloc, path, params, query, fragment)." ilk="function" name="urlparse" signature="urlparse(url, scheme=&apos;&apos;, allow_fragments=True)" />
      <scope ilk="function" line="129" lineend="133" name="urlretrieve" returns="_urlopener.retrieve()" signature="urlretrieve(url, filename=None, reporthook=None, data=None)">
        <variable ilk="argument" name="url" />
        <variable attributes="protected" citdl="FancyURLopener()" line="132" name="_urlopener" />
        <variable ilk="argument" name="data" />
        <variable ilk="argument" name="reporthook" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Parse a URL into 5 components: &lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt; Return a 5-tuple: (scheme, netloc, path, query, fragment)." ilk="function" name="urlsplit" signature="urlsplit(url, scheme=&apos;&apos;, allow_fragments=True)" />
      <scope doc="Put a parsed URL back together again." ilk="function" name="urlunparse" signature="urlunparse(components)" />
      <variable attributes="protected __hidden__" line="128" name="_urlopener" />
      <scope attributes="__hidden__" doc="Return a dictionary of scheme -&gt; proxy server URL mappings." ilk="function" line="2145" lineend="2173" name="getproxies_internetconfig" returns="dict" signature="getproxies_internetconfig()">
        <import line="2154" module="ic" />
        <variable citdl="ic.IC()" line="2159" name="config" />
        <variable citdl="dict" line="2162" name="proxies" />
        <variable line="2166" name="value" />
      </scope>
      <scope attributes="protected __hidden__" doc="If a URL is supplied, it must have an authority (host:port) component." ilk="function" line="571" lineend="641" name="_parse_proxy" returns="tuple" signature="Return (scheme, user, password, host/port) given a URL or an authority.">
        <variable ilk="argument" name="proxy" />
        <variable line="624" name="scheme" />
        <variable citdl="list" line="625" name="authority" />
        <variable citdl="r_scheme.find()" line="632" name="end" />
        <variable line="640" name="user" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="1225" lineend="1229" name="_safe_gethostbyname" returns="socket.gethostbyname()" signature="_safe_gethostbyname(host)">
        <variable ilk="argument" name="host" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="143" name="_cut_port_re" />
      <variable attributes="protected __hidden__" line="2010" name="_ftperrors" />
      <variable attributes="protected __hidden__" line="2019" name="_noheaders" />
      <variable attributes="protected __hidden__" citdl="True" line="109" name="_have_ssl" />
      <variable attributes="protected __hidden__" line="2002" name="_thishost" />
      <variable attributes="protected __hidden__" line="116" name="_opener" />
      <variable attributes="protected __hidden__" line="1994" name="_localhost" />
    </scope>
    <scope doc="Utilities to compile possibly incomplete Python source code.  This module provides two interfaces, broadly similar to the builtin" ilk="blob" lang="Python3" name="codeop">
      <scope classrefs="object" doc="Instances of this class have __call__ methods identical in signature to compile_command; the difference is that if the instance compiles program text containing a __future__ statement," ilk="class" line="139" lineend="168" name="CommandCompiler">
        <scope doc="Compile a command and determine whether it is incomplete." ilk="function" line="149" lineend="168" name="__call__" returns="_maybe_compile()" signature="__call__(source, filename=&apos;&lt;input&gt;&apos;, symbol=&apos;single&apos;)">
          <variable citdl="CommandCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable citdl="str" ilk="argument" name="filename" />
          <variable citdl="str" ilk="argument" name="symbol" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="146" lineend="147" name="__init__" signature="CommandCompiler()">
          <variable citdl="CommandCompiler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="Compile" line="147" name="compiler" />
      </scope>
      <scope classrefs="object" doc="Instances of this class behave much like the built-in compile function, but if one is used to compile text containing a future statement, it &quot;remembers&quot; and compiles all subsequent program texts" ilk="class" line="124" lineend="137" name="Compile">
        <scope ilk="function" line="132" lineend="137" name="__call__" returns="compile()" signature="__call__(source, filename, symbol)">
          <variable citdl="Compile" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="symbol" />
          <variable citdl="compile()" line="133" name="codeob" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="130" name="flags" />
        <scope attributes="__ctor__" ilk="function" line="129" lineend="130" name="__init__" signature="Compile()">
          <variable citdl="Compile" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="int" line="66" name="PyCF_DONT_IMPLY_DEDENT" />
      <variable citdl="list" line="64" name="__all__" />
      <import module="__future__" />
      <scope doc="Compile a command and determine whether it is incomplete." ilk="function" line="104" lineend="122" name="compile_command" returns="_maybe_compile()" signature="compile_command(source, filename=&apos;&lt;input&gt;&apos;, symbol=&apos;single&apos;)">
        <variable ilk="argument" name="source" />
        <variable citdl="str" ilk="argument" name="symbol" />
        <variable citdl="str" ilk="argument" name="filename" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="101" lineend="102" name="_compile" returns="compile()" signature="_compile(source, filename, symbol)">
        <variable ilk="argument" name="source" />
        <variable ilk="argument" name="filename" />
        <variable ilk="argument" name="symbol" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="68" lineend="99" name="_maybe_compile" returns="compiler()" signature="_maybe_compile(compiler, source, filename, symbol)">
        <variable ilk="argument" name="compiler" />
        <variable citdl="str" ilk="argument" name="source" />
        <variable ilk="argument" name="filename" />
        <variable ilk="argument" name="symbol" />
        <variable citdl="line.strip()" line="71" name="line" />
        <variable line="78" name="err" />
        <variable citdl="compiler()" line="79" name="code" />
        <variable citdl="compiler()" line="87" name="code1" />
        <variable citdl="e" line="89" name="err1" />
        <variable citdl="compiler()" line="92" name="code2" />
        <variable citdl="e" line="94" name="err2" />
      </scope>
      <variable attributes="protected __hidden__" citdl="list" line="61" name="_features" />
    </scope>
    <scope doc="A parser of RFC 2822 and MIME email messages." ilk="blob" lang="Python3" name="email.parser">
      <scope classrefs="object" doc="A feed-style parser of email." ilk="class" name="FeedParser" />
      <scope classrefs="Parser" ilk="class" line="86" lineend="91" name="HeaderParser">
        <scope ilk="function" line="87" lineend="88" name="parse" returns="Parser.parse()" signature="parse(fp, headersonly=True)">
          <variable citdl="HeaderParser" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
          <variable citdl="True" ilk="argument" name="headersonly" />
        </scope>
        <scope ilk="function" line="90" lineend="91" name="parsestr" returns="Parser.parsestr()" signature="parsestr(text, headersonly=True)">
          <variable citdl="HeaderParser" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable citdl="True" ilk="argument" name="headersonly" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Basic message object.  A message object is defined as something that has a bunch of RFC 2822" ilk="class" name="Message" />
      <scope classrefs="object" ilk="class" line="17" lineend="82" name="Parser">
        <scope doc="Create a message structure from the data in a file." ilk="function" line="56" lineend="72" name="parse" returns="feedparser.close()" signature="parse(fp, headersonly=False)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
          <variable citdl="False" ilk="argument" name="headersonly" />
          <variable citdl="FeedParser()" line="64" name="feedparser" />
          <variable citdl="fp.read()" line="68" name="data" />
        </scope>
        <scope doc="Create a message structure from a string." ilk="function" line="74" lineend="82" name="parsestr" returns="Parser.parse()" signature="parsestr(text, headersonly=False)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable citdl="False" ilk="argument" name="headersonly" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Message" line="45" name="_class" />
        <scope attributes="__ctor__" doc="Parser of RFC 2822 and MIME email messages." ilk="function" line="18" lineend="54" name="__init__" signature="Parser(*args, **kws)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kws" />
        </scope>
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <variable citdl="list" line="7" name="__all__" />
      <import module="warnings" />
    </scope>
    <scope doc="Common pathname manipulations, WindowsNT/95 version.  Instead of importing this module directly, import os and refer to this" ilk="blob" lang="Python3" name="os.path">
      <variable citdl="list" name="__all__" />
      <scope doc="Return the absolute version of a path." ilk="function" name="abspath" signature="abspath(path)" />
      <variable citdl="str" name="altsep" />
      <scope doc="Returns the final component of a pathname" ilk="function" name="basename" signature="basename(p)" />
      <scope doc="Given a list of pathnames, returns the longest common leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <variable citdl="str" name="curdir" />
      <variable citdl="str" name="defpath" />
      <variable citdl="str" name="devnull" />
      <scope doc="Returns the directory component of a pathname" ilk="function" name="dirname" signature="dirname(p)" />
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Expand ~ and ~user constructs." ilk="function" name="expanduser" signature="expanduser(path)" />
      <scope doc="Expand shell variables of the forms $var, ${var} and %var%." ilk="function" name="expandvars" signature="expandvars(path)" />
      <variable citdl="str" name="extsep" />
      <import module="genericpath" />
      <scope doc="Return the last access time of a file, reported by os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Test whether a path is absolute" ilk="function" name="isabs" signature="isabs(s)" />
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Test for symbolic link." ilk="function" name="islink" signature="islink(path)" />
      <scope doc="Test whether a path is a mount point (defined as root of drive)" ilk="function" name="ismount" signature="ismount(path)" />
      <scope doc="Join two or more pathname components, inserting &quot;\&quot; as needed." ilk="function" name="join" signature="join(a, *p)" />
      <scope doc="Test whether a path exists." ilk="function" name="lexists" signature="lexists(path)" />
      <scope doc="Normalize case of pathname." ilk="function" name="normcase" signature="normcase(s)" />
      <scope doc="Normalize path, eliminating double slashes, etc." ilk="function" name="normpath" signature="normpath(path)" />
      <import module="os" />
      <variable citdl="str" name="pardir" />
      <variable citdl="str" name="pathsep" />
      <scope doc="Return the absolute version of a path." ilk="function" name="realpath" signature="realpath(path)" />
      <scope doc="Return a relative version of a path" ilk="function" name="relpath" signature="relpath(path, start=&apos;.&apos;)" />
      <variable citdl="str" name="sep" />
      <scope doc="Split a pathname." ilk="function" name="split" signature="split(p)" />
      <scope doc="Split a pathname into drive/UNC sharepoint and relative path specifiers." ilk="function" name="splitdrive" signature="splitdrive(p)" />
      <scope doc="Split the extension from a pathname." ilk="function" name="splitext" signature="splitext(p)" />
      <scope doc="Deprecated since Python 3.1." ilk="function" name="splitunc" signature="splitunc(p)" />
      <import module="stat" />
      <variable citdl="bool" name="supports_unicode_filenames" />
      <import module="sys" />
    </scope>
    <scope doc="Base64 content transfer encoding per RFCs 2045-2047.  This module handles the content transfer encoding method defined in RFC 2045" ilk="blob" lang="Python3" name="email.base64mime">
      <variable citdl="str" line="40" name="CRLF" />
      <variable citdl="str" line="42" name="EMPTYSTRING" />
      <variable citdl="int" line="45" name="MISC_LEN" />
      <variable citdl="str" line="41" name="NL" />
      <variable citdl="list" line="27" name="__all__" />
      <scope doc="(ascii) -&gt; bin." ilk="function" name="a2b_base64" />
      <scope doc="(bin) -&gt; ascii." ilk="function" name="b2a_base64" />
      <scope doc="Encode a byte string using Base64." ilk="function" name="b64encode" signature="b64encode(s, altchars=None)" />
      <scope doc="Decode a raw base64 string, returning a bytes object." ilk="function" line="118" name="body_decode" signature="body_decode(string)" />
      <scope doc="Encode a string with base64." ilk="function" line="76" lineend="98" name="body_encode" returns="EMPTYSTRING.join()" signature="body_encode(s, maxlinelen=76, eol=&apos;\n&apos;)">
        <variable citdl="int" ilk="argument" name="maxlinelen" />
        <variable citdl="int" line="90" name="max_unencoded" />
        <variable citdl="list" line="89" name="encvec" />
        <variable ilk="argument" name="s" />
        <variable citdl="list" line="94" name="enc" />
        <variable citdl="str" ilk="argument" name="eol" />
      </scope>
      <scope doc="Decode a raw base64 string, returning a bytes object." ilk="function" line="102" lineend="114" name="decode" returns="bytes()" signature="decode(string)">
        <variable ilk="argument" name="string" />
      </scope>
      <scope doc="Decode a raw base64 string, returning a bytes object." ilk="function" line="119" name="decodestring" signature="decodestring(string)" />
      <scope doc="Encode a single header line with Base64 encoding in a given charset." ilk="function" line="61" lineend="72" name="header_encode" returns="tuple" signature="header_encode(header_bytes, charset=&apos;iso-8859-1&apos;)">
        <variable line="71" name="encoded" />
        <variable citdl="header_bytes.encode()" ilk="argument" name="header_bytes" />
        <variable citdl="str" ilk="argument" name="charset" />
      </scope>
      <scope doc="Return the length of s when it is encoded with base64." ilk="function" line="50" lineend="57" name="header_length" returns="groups_of_3" signature="header_length(bytearray)">
        <variable ilk="argument" name="bytearray" />
        <variable citdl="groups_of_3" line="54" name="n" />
      </scope>
    </scope>
    <scope doc="distutils.core  The only module that needs to be imported to use the Distutils; provides" ilk="blob" lang="Python3" name="distutils.core">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <variable citdl="NoneType" name="DEBUG" />
      <scope classrefs="object" doc="The core of the Distutils.  Most of the work hiding behind &apos;setup&apos; is really done within a Distribution instance, which farms the work out to the Distutils commands specified on the command line." ilk="class" name="Distribution" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="Just a collection of attributes that describes an extension module and everything needed to build it (hopefully in a portable way, but there are hooks that let you be as unportable as you need)." ilk="class" name="Extension" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="Command" doc="Base command that knows how to handle the .pypirc file" ilk="class" name="PyPIRCCommand" />
      <variable citdl="str" line="27" name="USAGE" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" line="9" name="__revision__" />
      <variable citdl="tuple" line="53" name="extension_keywords" />
      <scope ilk="function" line="34" lineend="36" name="gen_usage" returns="str" signature="gen_usage(script_name)">
        <variable ilk="argument" name="script_name" />
        <variable citdl="os.path.basename()" line="35" name="script" />
      </scope>
      <scope doc="Generate a useful error message from an EnvironmentError (IOError or OSError) exception object." ilk="function" name="grok_environment_error" signature="grok_environment_error(exc, prefix=&apos;error: &apos;)" />
      <import module="os" />
      <scope doc="Run a setup script in a somewhat controlled environment, and return the Distribution instance that drives things." ilk="function" line="173" lineend="237" name="run_setup" signature="run_setup(script_name, script_args=None, stop_after=&apos;run&apos;)">
        <variable citdl="dict" line="211" name="g" />
        <variable citdl="sys.argv" line="210" name="save_argv" />
        <variable citdl="dict" line="212" name="l" />
        <variable ilk="argument" name="script_name" />
        <variable attributes="protected" citdl="str" line="208" name="_setup_stop_after" />
        <variable ilk="argument" name="script_args" />
        <variable citdl="str" ilk="argument" name="stop_after" />
      </scope>
      <scope doc="The gateway to the Distutils: do everything your setup script needs to do, in a highly flexible and user-driven way." ilk="function" line="59" lineend="168" name="setup" returns="dist" signature="setup(**attrs)">
        <variable citdl="dist.parse_command_line()" line="135" name="ok" />
        <variable citdl="grok_environment_error()" line="153" name="error" />
        <variable attributes="protected" citdl="klass()" line="110" name="_setup_distribution" />
        <variable citdl="Distribution" line="96" name="klass" />
        <variable attributes="kwargs" ilk="argument" name="attrs" />
      </scope>
      <variable citdl="tuple" line="44" name="setup_keywords" />
      <import module="sys" />
      <variable attributes="protected __hidden__" line="40" name="_setup_stop_after" />
      <variable attributes="protected __hidden__" line="41" name="_setup_distribution" />
    </scope>
    <scope doc="OS routines for Mac, NT, or Posix depending on what system we&apos;re on.  This exports:" ilk="blob" lang="Python3" name="os">
      <variable citdl="int" name="F_OK" />
      <scope classrefs="Mapping" ilk="class" name="MutableMapping" />
      <variable citdl="int" name="O_APPEND" />
      <variable citdl="int" name="O_BINARY" />
      <variable citdl="int" name="O_CREAT" />
      <variable citdl="int" name="O_EXCL" />
      <variable citdl="int" name="O_NOINHERIT" />
      <variable citdl="int" name="O_RANDOM" />
      <variable citdl="int" name="O_RDONLY" />
      <variable citdl="int" name="O_RDWR" />
      <variable citdl="int" name="O_SEQUENTIAL" />
      <variable citdl="int" name="O_SHORT_LIVED" />
      <variable citdl="int" name="O_TEMPORARY" />
      <variable citdl="int" name="O_TEXT" />
      <variable citdl="int" name="O_TRUNC" />
      <variable citdl="int" name="O_WRONLY" />
      <variable citdl="int" name="P_DETACH" />
      <variable citdl="int" line="456" name="P_NOWAIT" />
      <variable citdl="int" name="P_NOWAITO" />
      <variable citdl="int" name="P_OVERLAY" />
      <variable citdl="int" line="455" name="P_WAIT" />
      <variable citdl="int" name="R_OK" />
      <variable citdl="int" line="114" name="SEEK_CUR" />
      <variable citdl="int" line="115" name="SEEK_END" />
      <variable citdl="int" line="113" name="SEEK_SET" />
      <variable citdl="int" name="TMP_MAX" />
      <variable citdl="int" name="W_OK" />
      <variable citdl="int" name="X_OK" />
      <variable citdl="list" line="31" name="__all__" />
      <import module="_copyreg" />
      <scope doc="Abort the interpreter immediately." ilk="function" name="abort" signature="abort() -&gt; does not return!" />
      <scope doc="Use the real uid/gid to test for access to a path." ilk="function" name="access" returns="bool" signature="access(path, mode) -&gt; True if granted, False otherwise" />
      <variable citdl="str" name="altsep" />
      <scope doc="Change the current working directory to the specified path." ilk="function" name="chdir" signature="chdir(path)" />
      <scope doc="Change the access permissions of a file." ilk="function" name="chmod" signature="chmod(path, mode)" />
      <scope doc="Close a file descriptor (for low level IO)." ilk="function" name="close" signature="close(fd)" />
      <scope doc="Closes all file descriptors in [fd_low, fd_high), ignoring errors." ilk="function" name="closerange" signature="closerange(fd_low, fd_high)" />
      <variable citdl="str" name="curdir" />
      <variable citdl="str" name="defpath" />
      <scope doc="Return a string describing the encoding of the device if the output is a terminal; else return None." ilk="function" name="device_encoding" returns="str" signature="device_encoding(fd) -&gt; str" />
      <variable citdl="str" name="devnull" />
      <scope doc="Return a duplicate of a file descriptor." ilk="function" name="dup" signature="dup(fd) -&gt; fd2" />
      <scope doc="Duplicate file descriptor." ilk="function" name="dup2" signature="dup2(old_fd, new_fd)" />
      <variable citdl="_Environ" line="291" name="environ" />
      <import module="errno" />
      <scope classrefs="EnvironmentError" doc="OS system call failed." ilk="class" name="error" />
      <scope doc="Execute the executable file with argument list args, replacing the current process." ilk="function" line="293" lineend="298" name="execl" signature="execl(file, *args)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute the executable file with argument list args and environment env, replacing the current process." ilk="function" line="300" lineend="306" name="execle" signature="execle(file, *args, env)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable line="305" name="env" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process." ilk="function" line="308" lineend="313" name="execlp" signature="execlp(file, *args)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process." ilk="function" line="315" lineend="322" name="execlpe" signature="execlpe(file, *args, env)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable line="321" name="env" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute an executable path with arguments, replacing current process." ilk="function" name="execv" signature="execv(path, args)" />
      <scope doc="Execute a path with arguments and environment, replacing current process." ilk="function" name="execve" signature="execve(path, args, env)" />
      <scope doc="Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process." ilk="function" line="324" lineend="330" name="execvp" signature="execvp(file, args)">
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute the executable file (which is searched for along $PATH) with argument list args and environment env , replacing the current process." ilk="function" line="332" lineend="339" name="execvpe" signature="execvpe(file, args, env)">
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="env" />
        <variable ilk="argument" name="file" />
      </scope>
      <variable citdl="str" name="extsep" />
      <scope doc="# Supply os.fdopen()" ilk="function" line="673" lineend="677" name="fdopen" returns="io.open()" signature="fdopen(fd, *args, **kwargs)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="fd" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope doc="Like stat(), but for an open file descriptor." ilk="function" name="fstat" signature="fstat(fd) -&gt; stat result" />
      <scope doc="force write of file with filedescriptor to disk." ilk="function" name="fsync" signature="fsync(fildes)" />
      <scope doc="Return a unicode string representing the current working directory." ilk="function" name="getcwd" signature="getcwd() -&gt; path" />
      <scope doc="Return a bytes string representing the current working directory." ilk="function" name="getcwdb" signature="getcwdb() -&gt; path" />
      <scope doc="Get an environment variable, return None if it doesn&apos;t exist." ilk="function" line="443" lineend="446" name="getenv" returns="environ.get()" signature="getenv(key, default=None)">
        <variable ilk="argument" name="default" />
        <variable ilk="argument" name="key" />
      </scope>
      <scope doc="Return the current process id" ilk="function" name="getpid" signature="getpid() -&gt; pid" />
      <scope doc="Return True if the file descriptor &apos;fd&apos; is an open file descriptor connected to the slave end of a terminal." ilk="function" name="isatty" returns="bool" signature="isatty(fd) -&gt; bool" />
      <variable citdl="str" line="43" name="linesep" />
      <scope doc="Return a list containing the names of the entries in the directory." ilk="function" name="listdir" signature="listdir(path) -&gt; list_of_strings" />
      <scope doc="Set the current position of a file descriptor." ilk="function" name="lseek" signature="lseek(fd, pos, how) -&gt; newpos" />
      <scope doc="Like stat(path), but do not follow symbolic links." ilk="function" name="lstat" signature="lstat(path) -&gt; stat result" />
      <scope doc="Super-mkdir; create a leaf directory and all intermediate ones." ilk="function" line="122" lineend="143" name="makedirs" signature="makedirs(path [, mode=0o777])">
        <variable ilk="argument" name="name" />
        <variable citdl="int" ilk="argument" name="mode" />
      </scope>
      <scope doc="Create a directory." ilk="function" name="mkdir" signature="mkdir(path [, mode=0777])" />
      <variable citdl="str" line="42" name="name" />
      <scope doc="Open a file (for low level IO)." ilk="function" name="open" signature="open(filename, flag [, mode=0777]) -&gt; fd" />
      <variable citdl="str" name="pardir" />
      <import alias="path" line="1" module="os.path" />
      <variable citdl="str" name="pathsep" />
      <scope doc="Create a pipe." ilk="function" name="pipe" signature="pipe() -&gt; (read_end, write_end)" />
      <scope doc="# Supply os.popen()" ilk="function" line="630" lineend="647" name="popen" returns="_wrap_close()" signature="popen(cmd, mode=&apos;r&apos;, buffering=None)">
        <variable ilk="argument" name="buffering" />
        <variable ilk="argument" name="cmd" />
        <variable citdl="subprocess.Popen()" line="637" name="proc" />
        <variable citdl="str" ilk="argument" name="mode" />
      </scope>
      <scope doc="Change or add an environment variable." ilk="function" name="putenv" signature="putenv(key, value)" />
      <scope doc="Read a file descriptor." ilk="function" name="read" returns="str" signature="read(fd, buffersize) -&gt; string" />
      <scope doc="Remove a file (same as unlink(path))." ilk="function" name="remove" signature="remove(path)" />
      <scope doc="Super-rmdir; remove a leaf directory and all empty intermediate ones." ilk="function" line="145" lineend="165" name="removedirs" signature="removedirs(path)">
        <variable ilk="argument" name="name" />
      </scope>
      <scope doc="Rename a file or directory." ilk="function" name="rename" signature="rename(old, new)" />
      <scope doc="Super-rename; create directories as necessary and delete any left empty." ilk="function" line="167" lineend="191" name="renames" signature="renames(old, new)">
        <variable ilk="argument" name="new" />
        <variable ilk="argument" name="old" />
      </scope>
      <scope doc="Remove a directory." ilk="function" name="rmdir" signature="rmdir(path)" />
      <variable citdl="str" name="sep" />
      <scope doc="Execute file with arguments from args in a subprocess." ilk="function" line="534" lineend="541" name="spawnl" returns="spawnv()" signature="spawnl(mode, file, *args) -&gt; integer">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute file with arguments from args in a subprocess with the supplied environment." ilk="function" line="543" lineend="552" name="spawnle" returns="spawnve()" signature="spawnle(mode, file, *args, env) -&gt; integer">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable line="551" name="env" />
      </scope>
      <scope doc="Execute the program &apos;path&apos; in a new process." ilk="function" line="489" lineend="496" name="spawnv" returns="_spawnvef()" signature="spawnv(mode, path, args)">
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Execute the program &apos;path&apos; in a new process." ilk="function" line="498" lineend="506" name="spawnve" returns="_spawnvef()" signature="spawnve(mode, path, args, env)">
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="env" />
      </scope>
      <scope doc="Start a file with its associated" ilk="function" name="startfile" signature="startfile(filepath [, operation])" />
      <scope doc="Perform a stat system call on the given path." ilk="function" name="stat" signature="stat(path) -&gt; stat result" />
      <scope doc="Determine whether os.[lf]stat represents time stamps as float objects." ilk="function" name="stat_float_times" signature="stat_float_times([newval]) -&gt; oldval" />
      <scope classrefs="object" doc="stat_result: Result from stat or lstat.  This object may be accessed either as a tuple of" ilk="class" name="stat_result" />
      <scope classrefs="object" doc="statvfs_result: Result from statvfs or fstatvfs.  This object may be accessed either as a tuple of" ilk="class" name="statvfs_result" />
      <scope doc="Translate an error code to a message string." ilk="function" name="strerror" returns="str" signature="strerror(code) -&gt; string" />
      <import module="sys" />
      <scope doc="Execute the command (a string) in a subshell." ilk="function" name="system" signature="system(command) -&gt; exit_status" />
      <scope doc="Return a tuple of floating point numbers indicating process times." ilk="function" name="times" signature="times() -&gt; (utime, stime, cutime, cstime, elapsed_time)" />
      <scope doc="Set the current numeric umask and return the previous umask." ilk="function" name="umask" signature="umask(new_mask) -&gt; old_mask" />
      <scope doc="Remove a file (same as remove(path))." ilk="function" name="unlink" signature="unlink(path)" />
      <scope doc="Return n random bytes suitable for cryptographic use." ilk="function" line="613" lineend="627" name="urandom" returns="str" signature="urandom(n) -&gt; str">
        <variable citdl="str" line="623" name="bs" />
        <variable attributes="protected" citdl="open()" line="620" name="_urandomfd" />
        <variable ilk="argument" name="n" />
      </scope>
      <scope doc="Set the access and modified time of the file to the given values." ilk="function" name="utime" signature="utime(path, (atime, mtime)) utime(path, None)" />
      <scope doc="Wait for completion of a given process." ilk="function" name="waitpid" signature="waitpid(pid, options) -&gt; (pid, status &lt;&lt; 8)" />
      <scope doc="Directory tree generator." ilk="function" line="195" lineend="283" name="walk" signature="walk(top, topdown=True, onerror=None, followlinks=False)">
        <variable citdl="list" line="268" name="dirs" />
        <variable citdl="list" line="268" name="nondirs" />
        <variable ilk="argument" name="onerror" />
        <variable ilk="argument" name="top" />
        <variable citdl="listdir()" line="262" name="names" />
        <variable citdl="join()" line="278" name="path" />
        <variable citdl="False" ilk="argument" name="followlinks" />
        <variable citdl="True" ilk="argument" name="topdown" />
      </scope>
      <scope doc="Write a string to a file descriptor." ilk="function" name="write" signature="write(fd, string) -&gt; byteswritten" />
      <scope attributes="protected __hidden__" ilk="function" line="449" lineend="450" name="_exists" returns="bool" signature="_exists(name)">
        <variable ilk="argument" name="name" />
      </scope>
      <scope attributes="__hidden__" doc="Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment." ilk="function" line="520" lineend="528" name="spawnvpe" returns="_spawnvef()" signature="spawnvpe(mode, file, args, env) -&gt; integer">
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="env" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="587" lineend="588" name="_make_stat_result" returns="stat_result()" signature="_make_stat_result(tup, dict)">
        <variable ilk="argument" name="tup" />
        <variable ilk="argument" name="dict" />
      </scope>
      <variable attributes="protected __hidden__" citdl="putenv" line="422" name="_putenv" />
      <scope attributes="protected __hidden__" ilk="function" line="590" lineend="592" name="_pickle_stat_result" returns="tuple" signature="_pickle_stat_result(sr)">
        <variable ilk="argument" name="sr" />
      </scope>
      <scope attributes="__hidden__" doc="Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment." ilk="function" line="571" lineend="580" name="spawnlpe" returns="spawnvpe()" signature="spawnlpe(mode, file, *args, env) -&gt; integer">
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable line="579" name="env" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="599" lineend="600" name="_make_statvfs_result" returns="statvfs_result()" signature="_make_statvfs_result(tup, dict)">
        <variable ilk="argument" name="tup" />
        <variable ilk="argument" name="dict" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="602" lineend="604" name="_pickle_statvfs_result" returns="tuple" signature="_pickle_statvfs_result(sr)">
        <variable ilk="argument" name="sr" />
      </scope>
      <variable attributes="protected __hidden__" citdl="sys.builtin_module_names" line="28" name="_names" />
      <scope attributes="protected __hidden__" ilk="class" line="650" lineend="670" name="_wrap_close">
        <scope attributes="__ctor__" ilk="function" line="651" lineend="653" name="__init__" signature="_wrap_close(stream, proc)">
          <variable citdl="_wrap_close" ilk="argument" name="self" />
          <variable ilk="argument" name="stream" />
          <variable ilk="argument" name="proc" />
        </scope>
        <variable attributes="protected __instancevar__" line="652" name="_stream" />
        <variable attributes="protected __instancevar__" line="653" name="_proc" />
        <scope ilk="function" line="654" lineend="662" name="close" returns="self._proc.wait()" signature="close()">
          <variable citdl="_wrap_close" ilk="argument" name="self" />
          <variable citdl="self._proc.wait()" line="656" name="returncode" />
        </scope>
        <scope ilk="function" line="663" lineend="664" name="__enter__" returns="_wrap_close" signature="__enter__()">
          <variable citdl="_wrap_close" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="665" lineend="666" name="__exit__" signature="__exit__(*args)">
          <variable citdl="_wrap_close" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="667" lineend="668" name="__getattr__" returns="getattr()" signature="__getattr__(name)">
          <variable citdl="_wrap_close" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="669" lineend="670" name="__iter__" returns="iter()" signature="__iter__()">
          <variable citdl="_wrap_close" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="MutableMapping" ilk="class" line="382" lineend="419" name="_Environ">
        <scope attributes="__ctor__" ilk="function" line="383" lineend="389" name="__init__" signature="_Environ(environ, keymap, putenv, unsetenv)">
          <variable citdl="_Environ" ilk="argument" name="self" />
          <variable ilk="argument" name="environ" />
          <variable ilk="argument" name="keymap" />
          <variable ilk="argument" name="putenv" />
          <variable ilk="argument" name="unsetenv" />
        </scope>
        <variable attributes="__instancevar__" line="384" name="keymap" />
        <variable attributes="__instancevar__" line="385" name="putenv" />
        <variable attributes="__instancevar__" line="386" name="unsetenv" />
        <variable attributes="__instancevar__" citdl="dict" line="387" name="data" />
        <scope ilk="function" line="391" lineend="392" name="__getitem__" signature="__getitem__(key)">
          <variable citdl="_Environ" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="394" lineend="397" name="__setitem__" signature="__setitem__(key, value)">
          <variable citdl="_Environ" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="str()" ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="399" lineend="401" name="__delitem__" signature="__delitem__(key)">
          <variable citdl="_Environ" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="403" lineend="405" name="__iter__" signature="__iter__()">
          <variable citdl="_Environ" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="407" lineend="408" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="_Environ" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="410" lineend="411" name="__repr__" returns="str.format()" signature="__repr__()">
          <variable citdl="_Environ" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="413" lineend="414" name="copy" returns="dict()" signature="copy()">
          <variable citdl="_Environ" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="416" lineend="419" name="setdefault" signature="setdefault(key, value)">
          <variable citdl="_Environ" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="value" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="343" lineend="376" name="_execvpe" signature="_execvpe(file, args, env=None)">
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="args" />
        <variable citdl="dict" ilk="argument" name="env" />
        <variable citdl="execve" line="345" name="func" />
        <variable citdl="tuple" line="346" name="argrest" />
        <variable citdl="defpath" line="357" name="envpath" />
        <variable citdl="envpath.split()" line="360" name="PATH" />
        <variable citdl="e" line="361" name="last_exc" />
        <variable line="362" name="saved_tb" />
        <variable citdl="path.join()" line="364" name="fullname" />
        <variable line="369" name="tb" />
        <variable citdl="e" line="372" name="saved_exc" />
      </scope>
      <variable attributes="protected __hidden__" citdl="unsetenv" line="429" name="_unsetenv" />
      <scope attributes="protected __hidden__" ilk="function" line="35" lineend="39" name="_get_exports_list" returns="list()" signature="_get_exports_list(module)">
        <variable ilk="argument" name="module" />
      </scope>
      <variable attributes="protected __hidden__" line="436" name="_keymap" />
      <scope attributes="protected __hidden__" ilk="function" line="462" lineend="487" name="_spawnvef" returns="WTERMSIG()" signature="_spawnvef(mode, file, args, env, func)">
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="env" />
        <variable ilk="argument" name="func" />
        <variable citdl="fork()" line="464" name="pid" />
      </scope>
      <scope attributes="__hidden__" doc="Execute file (which is looked for along $PATH) with arguments from args in a subprocess." ilk="function" line="510" lineend="518" name="spawnvp" returns="_spawnvef()" signature="spawnvp(mode, file, args) -&gt; integer">
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="args" />
      </scope>
      <scope attributes="__hidden__" doc="Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment." ilk="function" line="561" lineend="569" name="spawnlp" returns="spawnvp()" signature="spawnlp(mode, file, *args) -&gt; integer">
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
    </scope>
    <scope doc="Fixer for operator.{isCallable,sequenceIncludes}  operator.isCallable(obj) -&gt; hasattr(obj, &apos;__call__&apos;)" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_operator">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" ilk="class" name="FixOperator" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A string leaf" ilk="function" name="String" signature="String(string, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Fixer that cleans up a tuple argument to isinstance after the tokens in it were fixed.  This is mainly used to remove double occurrences of tokens as a leftover of the long -&gt; int / unicode -&gt; str conversion." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_isinstance">
      <scope classrefs="BaseFix" ilk="class" line="16" lineend="52" name="FixIsinstance">
        <variable citdl="str" line="18" name="PATTERN" />
        <variable citdl="int" line="27" name="run_order" />
        <scope ilk="function" line="29" lineend="52" name="transform" signature="transform(node, results)">
          <variable citdl="FixIsinstance" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="set()" line="30" name="names_inserted" />
          <variable line="31" name="testlist" />
          <variable citdl="testlist.children" line="32" name="args" />
          <variable citdl="list" line="33" name="new_args" />
          <variable citdl="enumerate()" line="34" name="iterator" />
          <variable citdl="testlist.parent" line="47" name="atom" />
        </scope>
      </scope>
      <import module="fixer_base" />
      <import module="token" />
    </scope>
    <scope doc="# Access WeakSet through the weakref module. # This code is separated-out because it is needed # by abc.py to load everything else at startup." ilk="blob" lang="Python3" name="_weakrefset">
      <scope classrefs="object" ilk="class" line="35" lineend="210" name="WeakSet">
        <scope ilk="function" line="136" lineend="142" name="difference_update" signature="difference_update(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="set()" line="48" name="_iterating" />
        <scope ilk="function" line="185" lineend="186" name="symmetric_difference" returns="WeakSet._apply()" signature="symmetric_difference(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="85" lineend="86" name="copy" returns="self.__class__()" signature="copy()">
          <variable citdl="WeakSet" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="71" lineend="73" name="__reduce__" returns="tuple" signature="__reduce__()">
          <variable citdl="WeakSet" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="88" lineend="98" name="pop" returns="itemref()" signature="pop()">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable citdl="self.data.pop()" line="93" name="itemref" />
          <variable citdl="itemref()" line="96" name="item" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="47" name="_pending_removals" />
        <scope ilk="function" line="156" lineend="159" name="intersection_update" signature="intersection_update(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable citdl="WeakSet.intersection" line="154" name="__and__" />
        <variable citdl="WeakSet.issubset" line="168" name="__lt__" />
        <scope attributes="__ctor__" ilk="function" line="36" lineend="50" name="__init__" signature="WeakSet(data=None)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <scope attributes="protected" ilk="function" line="38" lineend="44" name="_remove" signature="_remove(item, selfref=ref(self))">
            <variable ilk="argument" name="item" />
            <variable citdl="ref()" ilk="argument" name="selfref" />
            <variable citdl="selfref()" line="39" name="self" />
          </scope>
        </scope>
        <variable citdl="WeakSet.difference" line="134" name="__sub__" />
        <scope attributes="protected" ilk="function" line="52" lineend="56" name="_commit_removals" signature="_commit_removals()">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable citdl="list" line="53" name="l" />
          <variable citdl="self.data.discard" line="54" name="discard" />
        </scope>
        <scope ilk="function" line="132" lineend="133" name="difference" returns="WeakSet._apply()" signature="difference(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="160" lineend="164" name="__iand__" returns="WeakSet" signature="__iand__(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="166" lineend="167" name="issubset" returns="self.data.issubset()" signature="issubset(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="68" lineend="69" name="__contains__" returns="bool" signature="__contains__(item)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope ilk="function" line="205" lineend="206" name="union" returns="WeakSet._apply()" signature="union(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="180" lineend="183" name="__eq__" returns="NotImplemented" signature="__eq__(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="WeakSet.__init__._remove" line="45" name="_remove" />
        <scope ilk="function" line="75" lineend="78" name="add" signature="add(item)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope ilk="function" line="196" lineend="203" name="__ixor__" returns="WeakSet" signature="__ixor__(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="65" lineend="66" name="__len__" returns="sum()" signature="__len__()">
          <variable citdl="WeakSet" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="143" lineend="150" name="__isub__" returns="WeakSet" signature="__isub__(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="189" lineend="195" name="symmetric_difference_update" signature="symmetric_difference_update(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="110" lineend="117" name="update" signature="update(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="58" lineend="63" name="__iter__" signature="__iter__()">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable citdl="itemref()" line="61" name="item" />
        </scope>
        <variable citdl="WeakSet.union" line="207" name="__or__" />
        <variable citdl="WeakSet.issuperset" line="175" name="__gt__" />
        <scope ilk="function" line="152" lineend="153" name="intersection" returns="WeakSet._apply()" signature="intersection(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="set()" line="37" name="data" />
        <scope ilk="function" line="209" lineend="210" name="isdisjoint" returns="bool" signature="isdisjoint(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="173" lineend="174" name="issuperset" returns="self.data.issuperset()" signature="issuperset(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="80" lineend="83" name="clear" signature="clear()">
          <variable citdl="WeakSet" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="100" lineend="103" name="remove" signature="remove(item)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <variable citdl="WeakSet.symmetric_difference" line="187" name="__xor__" />
        <scope ilk="function" line="119" lineend="121" name="__ior__" returns="WeakSet" signature="__ior__(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="170" lineend="171" name="__le__" returns="bool" signature="__le__(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="protected" ilk="function" line="124" lineend="130" name="_apply" returns="self.__class__()" signature="_apply(other, method)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable citdl="self.__class__()" ilk="argument" name="other" />
          <variable ilk="argument" name="method" />
          <variable citdl="method()" line="127" name="newdata" />
          <variable citdl="self.__class__()" line="128" name="newset" />
        </scope>
        <scope ilk="function" line="105" lineend="108" name="discard" signature="discard(item)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope ilk="function" line="177" lineend="178" name="__ge__" returns="bool" signature="__ge__(other)">
          <variable citdl="WeakSet" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
      </scope>
      <variable citdl="list" line="7" name="__all__" />
      <scope classrefs="object" ilk="class" name="ref" />
      <scope attributes="protected __hidden__" ilk="class" line="10" lineend="32" name="_IterationGuard">
        <scope attributes="__ctor__" ilk="function" line="16" lineend="18" name="__init__" signature="_IterationGuard(weakcontainer)">
          <variable citdl="_IterationGuard" ilk="argument" name="self" />
          <variable ilk="argument" name="weakcontainer" />
        </scope>
        <variable attributes="__instancevar__" citdl="ref()" line="18" name="weakcontainer" />
        <scope ilk="function" line="20" lineend="24" name="__enter__" returns="_IterationGuard" signature="__enter__()">
          <variable citdl="_IterationGuard" ilk="argument" name="self" />
          <variable citdl="weakcontainer()" line="21" name="w" />
        </scope>
        <scope ilk="function" line="26" lineend="32" name="__exit__" signature="__exit__(e, t, b)">
          <variable citdl="_IterationGuard" ilk="argument" name="self" />
          <variable ilk="argument" name="e" />
          <variable ilk="argument" name="t" />
          <variable ilk="argument" name="b" />
          <variable citdl="weakcontainer()" line="27" name="w" />
          <variable citdl="w._iterating" line="29" name="s" />
        </scope>
      </scope>
    </scope>
    <scope doc="Fixer for reduce().  Makes sure reduce() is imported from the functools module if reduce is" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_reduce">
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope classrefs="BaseFix" ilk="class" line="16" lineend="33" name="FixReduce">
        <variable citdl="str" line="18" name="PATTERN" />
        <scope ilk="function" line="32" lineend="33" name="transform" signature="transform(node, results)">
          <variable citdl="FixReduce" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <import module="pytree" />
      <scope doc="Works like `does_tree_import` but adds an import statement if it was not imported." ilk="function" name="touch_import" signature="touch_import(package, name, node)" />
    </scope>
    <scope doc="Fixer that changes xrange(...) into range(...)." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_xrange">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" ilk="class" line="12" lineend="63" name="FixXrange">
        <variable citdl="str" line="47" name="P2" />
        <variable citdl="patcomp.compile_pattern()" line="51" name="p2" />
        <variable citdl="str" line="44" name="P1" />
        <scope ilk="function" line="53" lineend="63" name="in_special_context" returns="bool" signature="in_special_context(node)">
          <variable citdl="FixXrange" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable citdl="dict" line="56" name="results" />
        </scope>
        <variable citdl="str" line="14" name="PATTERN" />
        <scope ilk="function" line="20" lineend="27" name="transform" returns="self.transform_xrange()" signature="transform(node, results)">
          <variable citdl="FixXrange" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="21" name="name" />
        </scope>
        <scope ilk="function" line="33" lineend="42" name="transform_range" returns="Call()" signature="transform_range(node, results)">
          <variable citdl="FixXrange" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="Call()" line="35" name="range_call" />
          <variable citdl="Call()" line="37" name="list_call" />
        </scope>
        <variable citdl="patcomp.compile_pattern()" line="45" name="p1" />
        <scope ilk="function" line="29" lineend="31" name="transform_xrange" signature="transform_xrange(node, results)">
          <variable citdl="FixXrange" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="30" name="name" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <variable citdl="set" name="consuming_calls" />
      <import module="fixer_base" />
      <import module="patcomp" />
    </scope>
    <scope doc="Word completion for GNU readline 2.0.  This requires the latest extension to the readline module. The completer" ilk="blob" lang="Python3" name="rlcompleter">
      <scope classrefs="object" ilk="class" line="41" lineend="150" name="Completer">
        <variable attributes="__instancevar__" citdl="int" line="64" name="use_main_ns" />
        <scope doc="Return the next possible completion for &apos;text&apos;." ilk="function" line="69" lineend="87" name="complete" signature="complete(text, state)">
          <variable citdl="Completer" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable ilk="argument" name="state" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.attr_matches()" line="81" name="matches" />
        <variable attributes="__instancevar__" citdl="dict" line="67" name="namespace" />
        <scope doc="Compute matches when text contains a dot." ilk="function" line="113" lineend="150" name="attr_matches" returns="list" signature="attr_matches(text)">
          <import line="125" module="re" />
          <variable citdl="Completer" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable citdl="re.match()" line="126" name="m" />
          <variable citdl="eval()" line="131" name="thisobject" />
          <variable citdl="dir()" line="136" name="words" />
          <variable citdl="list" line="143" name="matches" />
          <variable citdl="len()" line="144" name="n" />
          <variable citdl="getattr()" line="147" name="val" />
          <variable citdl="_callable_postfix()" line="148" name="word" />
        </scope>
        <scope doc="Compute matches when text is a simple name." ilk="function" line="94" lineend="111" name="global_matches" returns="list" signature="global_matches(text)">
          <import line="101" module="keyword" />
          <variable citdl="Completer" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable citdl="list" line="102" name="matches" />
          <variable citdl="len()" line="103" name="n" />
        </scope>
        <scope attributes="protected" ilk="function" line="89" lineend="92" name="_callable_postfix" returns="str" signature="_callable_postfix(val, word)">
          <variable citdl="Completer" ilk="argument" name="self" />
          <variable ilk="argument" name="val" />
          <variable citdl="str" ilk="argument" name="word" />
        </scope>
        <scope attributes="__ctor__" doc="Create a new completer for the command line." ilk="function" line="42" lineend="67" name="__init__" signature="Completer(namespace=None)">
          <variable citdl="Completer" ilk="argument" name="self" />
          <variable ilk="argument" name="namespace" />
        </scope>
      </scope>
      <variable citdl="list" line="39" name="__all__" />
      <import module="__main__" />
      <import module="builtins" />
      <scope ilk="function" line="152" lineend="157" name="get_class_members" returns="get_class_members()" signature="get_class_members(klass)">
        <variable ilk="argument" name="klass" />
        <variable citdl="dir()" line="153" name="ret" />
      </scope>
    </scope>
    <scope doc="File selection dialog classes.  Classes:" ilk="blob" lang="Python3" name="tkinter.filedialog">
      <variable citdl="str" name="ACTIVE" />
      <variable citdl="str" name="ALL" />
      <variable citdl="str" name="ANCHOR" />
      <variable citdl="str" name="ARC" />
      <scope ilk="function" name="At" signature="At(x, y=None)" />
      <scope doc="# Indices: # XXX I don&apos;t like these -- take them away" ilk="function" name="AtEnd" signature="AtEnd()" />
      <scope ilk="function" name="AtInsert" signature="AtInsert(*args)" />
      <scope ilk="function" name="AtSelFirst" signature="AtSelFirst()" />
      <scope ilk="function" name="AtSelLast" signature="AtSelLast()" />
      <variable citdl="str" name="BASELINE" />
      <variable citdl="str" name="BEVEL" />
      <variable citdl="str" name="BOTH" />
      <variable citdl="str" name="BOTTOM" />
      <variable citdl="str" name="BROWSE" />
      <variable citdl="str" name="BUTT" />
      <scope classrefs="Misc" doc="Internal class." ilk="class" name="BaseWidget" />
      <scope classrefs="Image" doc="Widget which can display a bitmap." ilk="class" name="BitmapImage" />
      <scope classrefs="Variable" doc="Value holder for boolean variables." ilk="class" name="BooleanVar" />
      <scope classrefs="Widget" doc="Button widget." ilk="class" name="Button" />
      <variable citdl="str" name="CASCADE" />
      <variable citdl="str" name="CENTER" />
      <variable citdl="str" name="CHAR" />
      <variable citdl="str" name="CHECKBUTTON" />
      <variable citdl="str" name="CHORD" />
      <variable citdl="str" name="COMMAND" />
      <variable citdl="str" name="CURRENT" />
      <scope classrefs="object" doc="Internal class. Stores function to call when some user defined Tcl function is called e.g. after an event occurred." ilk="class" name="CallWrapper" />
      <scope classrefs="Widget" doc="Canvas widget to display graphical elements like lines or text." ilk="class" name="Canvas" />
      <scope classrefs="Widget" doc="Checkbutton widget which is either in on- or off-state." ilk="class" name="Checkbutton" />
      <variable citdl="str" name="DISABLED" />
      <variable citdl="str" name="DOTBOX" />
      <scope classrefs="Widget" ilk="class" name="Dialog" />
      <scope classrefs="Dialog" doc="Ask for a directory" ilk="class" line="353" lineend="369" name="Directory">
        <variable attributes="__instancevar__" citdl="result.string" line="368" name="directory" />
        <scope attributes="protected" ilk="function" line="358" lineend="369" name="_fixresult" returns="result.string" signature="_fixresult(widget, result)">
          <variable citdl="Directory" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
          <variable citdl="result.string" ilk="argument" name="result" />
        </scope>
        <variable citdl="str" line="356" name="command" />
      </scope>
      <scope classrefs="Variable" doc="Value holder for float variables." ilk="class" name="DoubleVar" />
      <variable citdl="str" name="E" />
      <variable citdl="str" name="END" />
      <variable citdl="str" name="EW" />
      <variable citdl="int" name="EXCEPTION" />
      <variable citdl="str" name="EXTENDED" />
      <scope classrefs="Widget" doc="Entry widget which allows to display simple text." ilk="class" name="Entry" />
      <scope classrefs="object" doc="Container for the properties of an event.  Instances of this type are generated if one of the following events occurs:" ilk="class" name="Event" />
      <variable citdl="int" name="FALSE" />
      <variable citdl="str" name="FIRST" />
      <variable citdl="str" name="FLAT" />
      <scope classrefs="object" doc="Standard file selection dialog -- no checks on selected file.  Usage:" ilk="class" line="26" lineend="222" name="FileDialog">
        <variable attributes="__instancevar__" citdl="Listbox()" line="87" name="dirs" />
        <variable attributes="__instancevar__" citdl="Entry()" line="63" name="selection" />
        <variable attributes="__instancevar__" citdl="Button()" line="96" name="ok_button" />
        <scope ilk="function" line="155" lineend="157" name="files_select_event" signature="files_select_event(event)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
          <variable citdl="self.files.get()" line="156" name="file" />
        </scope>
        <scope ilk="function" line="159" lineend="160" name="ok_event" signature="ok_event(event)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope ilk="function" line="220" lineend="222" name="set_selection" signature="set_selection(file)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope ilk="function" line="146" lineend="150" name="dirs_select_event" signature="dirs_select_event(event)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
          <variable citdl="self.dirs.get()" line="148" name="subdir" />
          <variable citdl="os.path.normpath()" line="149" name="dir" />
        </scope>
        <scope ilk="function" line="114" lineend="137" name="go" signature="go(dir_or_file=os.curdir, pattern=&apos;*&apos;, default=&apos;&apos;, key=None)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable citdl="os.path.expanduser()" ilk="argument" name="dir_or_file" />
          <variable citdl="str" ilk="argument" name="pattern" />
          <variable citdl="str" ilk="argument" name="default" />
          <variable ilk="argument" name="key" />
          <variable citdl="os.path.dirname()" line="134" name="directory" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="51" lineend="112" name="__init__" signature="FileDialog(master, title=None)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="str" ilk="argument" name="title" />
          <variable citdl="self.files.bindtags()" line="79" name="btags" />
        </scope>
        <scope ilk="function" line="139" lineend="141" name="quit" signature="quit(how=None)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="how" />
        </scope>
        <variable attributes="__instancevar__" citdl="Frame()" line="60" name="botframe" />
        <scope ilk="function" line="200" lineend="203" name="get_selection" returns="self.selection.get()" signature="get_selection()">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable citdl="self.selection.get()" line="201" name="file" />
        </scope>
        <variable citdl="str" line="49" name="title" />
        <scope ilk="function" line="143" lineend="144" name="dirs_double_event" signature="dirs_double_event(event)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <variable attributes="__instancevar__" citdl="Toplevel()" line="56" name="top" />
        <variable attributes="__instancevar__" citdl="Button()" line="100" name="filter_button" />
        <variable attributes="__instancevar__" line="129" name="how" />
        <scope ilk="function" line="152" lineend="153" name="files_double_event" signature="files_double_event(event)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope ilk="function" line="162" lineend="163" name="ok_command" signature="ok_command()">
          <variable citdl="FileDialog" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="53" name="master" />
        <scope ilk="function" line="208" lineend="218" name="set_filter" signature="set_filter(dir, pat)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable citdl="os.path.normpath()" ilk="argument" name="dir" />
          <variable ilk="argument" name="pat" />
          <variable citdl="os.getcwd()" line="211" name="pwd" />
        </scope>
        <variable attributes="__instancevar__" citdl="Listbox()" line="76" name="files" />
        <variable attributes="__instancevar__" citdl="Frame()" line="71" name="midframe" />
        <variable attributes="__instancevar__" citdl="Scrollbar()" line="74" name="filesbar" />
        <scope ilk="function" line="205" lineend="206" name="cancel_command" signature="cancel_command(event=None)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope ilk="function" line="165" lineend="191" name="filter_command" signature="filter_command(event=None)">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
          <variable citdl="os.listdir()" line="168" name="names" />
          <variable citdl="list" line="175" name="subdirs" />
          <variable citdl="list" line="176" name="matchingfiles" />
          <variable citdl="os.path.join()" line="178" name="fullname" />
          <variable citdl="str" line="190" name="tail" />
        </scope>
        <scope ilk="function" line="193" lineend="198" name="get_filter" returns="os.path.split()" signature="get_filter()">
          <variable citdl="FileDialog" ilk="argument" name="self" />
          <variable citdl="os.path.join()" line="194" name="filter" />
        </scope>
        <variable attributes="__instancevar__" citdl="Button()" line="104" name="cancel_button" />
        <variable attributes="__instancevar__" citdl="Entry()" line="67" name="filter" />
        <variable attributes="__instancevar__" citdl="Scrollbar()" line="85" name="dirsbar" />
        <variable attributes="__instancevar__" citdl="os.path.expanduser()" line="54" name="directory" />
      </scope>
      <scope classrefs="Widget" doc="Frame widget which may contain other widgets and can have a 3D border." ilk="class" name="Frame" />
      <variable citdl="str" name="GROOVE" />
      <scope classrefs="object" doc="Geometry manager Grid.  Base class to use the methods grid_* in every widget." ilk="class" name="Grid" />
      <variable citdl="str" name="HIDDEN" />
      <variable citdl="str" name="HORIZONTAL" />
      <variable citdl="str" name="INSERT" />
      <variable citdl="str" name="INSIDE" />
      <scope classrefs="object" doc="Base class for images." ilk="class" name="Image" />
      <scope classrefs="Variable" doc="Value holder for integer variables." ilk="class" name="IntVar" />
      <variable citdl="str" name="LAST" />
      <variable citdl="str" name="LEFT" />
      <scope classrefs="Widget" doc="Label widget which can display text and bitmaps." ilk="class" name="Label" />
      <scope classrefs="Widget" doc="labelframe widget." ilk="class" name="LabelFrame" />
      <scope classrefs="Widget" doc="Listbox widget which can display a list of strings." ilk="class" name="Listbox" />
      <scope classrefs="FileDialog" doc="File selection dialog which checks that the file exists." ilk="class" line="225" lineend="236" name="LoadFileDialog">
        <scope ilk="function" line="231" lineend="236" name="ok_command" signature="ok_command()">
          <variable citdl="LoadFileDialog" ilk="argument" name="self" />
          <variable citdl="self.get_selection()" line="232" name="file" />
        </scope>
        <variable citdl="str" line="229" name="title" />
      </scope>
      <variable citdl="str" name="MITER" />
      <variable citdl="str" name="MOVETO" />
      <variable citdl="str" name="MULTIPLE" />
      <scope classrefs="Widget" doc="Menu widget which allows to display menu bars, pull-down menus and pop-up menus." ilk="class" name="Menu" />
      <scope classrefs="Widget" doc="Menubutton widget, obsolete since Tk8.0." ilk="class" name="Menubutton" />
      <scope classrefs="Widget" doc="Message widget to display multiline text. Obsolete since Label does it too." ilk="class" name="Message" />
      <scope classrefs="object" doc="Internal class.  Base class which defines methods common for interior widgets." ilk="class" name="Misc" />
      <variable citdl="str" name="N" />
      <variable citdl="str" name="NE" />
      <variable citdl="int" name="NO" />
      <variable citdl="str" name="NONE" />
      <variable citdl="str" name="NORMAL" />
      <variable citdl="str" name="NS" />
      <variable citdl="str" name="NSEW" />
      <variable citdl="str" name="NUMERIC" />
      <variable citdl="str" name="NW" />
      <scope doc="Inhibit setting of default root window." ilk="function" name="NoDefaultRoot" signature="NoDefaultRoot()" />
      <variable citdl="int" name="OFF" />
      <variable citdl="int" name="ON" />
      <variable citdl="str" name="OUTSIDE" />
      <scope classrefs="_Dialog" doc="Ask for a filename to open" ilk="class" line="326" lineend="344" name="Open">
        <scope attributes="protected" ilk="function" line="331" lineend="344" name="_fixresult" returns="_Dialog._fixresult()" signature="_fixresult(widget, result)">
          <import line="336" module="os" />
          <variable citdl="Open" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
          <variable citdl="tuple()" ilk="argument" name="result" />
        </scope>
        <variable citdl="str" line="329" name="command" />
      </scope>
      <scope classrefs="Menubutton" doc="OptionMenu which allows the user to select a value from a menu." ilk="class" name="OptionMenu" />
      <variable citdl="str" name="PAGES" />
      <variable citdl="str" name="PIESLICE" />
      <variable citdl="str" name="PROJECTING" />
      <scope classrefs="object" doc="Geometry manager Pack.  Base class to use the methods pack_* in every widget." ilk="class" name="Pack" />
      <scope classrefs="Widget" doc="panedwindow widget." ilk="class" name="PanedWindow" />
      <scope classrefs="Image" doc="Widget which can display colored images in GIF, PPM/PGM format." ilk="class" name="PhotoImage" />
      <scope classrefs="object" doc="Geometry manager Place.  Base class to use the methods place_* in every widget." ilk="class" name="Place" />
      <variable citdl="str" name="RADIOBUTTON" />
      <variable citdl="str" name="RAISED" />
      <variable citdl="int" name="READABLE" />
      <variable citdl="str" name="RIDGE" />
      <variable citdl="str" name="RIGHT" />
      <variable citdl="str" name="ROUND" />
      <scope classrefs="Widget" doc="Radiobutton widget which shows only one of several buttons in on-state." ilk="class" name="Radiobutton" />
      <variable citdl="str" name="S" />
      <variable citdl="str" name="SCROLL" />
      <variable citdl="str" name="SE" />
      <variable citdl="str" name="SEL" />
      <variable citdl="str" name="SEL_FIRST" />
      <variable citdl="str" name="SEL_LAST" />
      <variable citdl="str" name="SEPARATOR" />
      <variable citdl="str" name="SINGLE" />
      <variable citdl="str" name="SOLID" />
      <variable citdl="str" name="SUNKEN" />
      <variable citdl="str" name="SW" />
      <scope classrefs="_Dialog" doc="Ask for a filename to save as" ilk="class" line="346" lineend="349" name="SaveAs">
        <variable citdl="str" line="349" name="command" />
      </scope>
      <scope classrefs="FileDialog" doc="File selection dialog which checks that the file may be created." ilk="class" line="239" lineend="264" name="SaveFileDialog">
        <scope ilk="function" line="245" lineend="264" name="ok_command" signature="ok_command()">
          <variable citdl="SaveFileDialog" ilk="argument" name="self" />
          <variable citdl="self.get_selection()" line="246" name="file" />
          <variable citdl="Dialog()" line="251" name="d" />
        </scope>
        <variable citdl="str" line="243" name="title" />
      </scope>
      <scope classrefs="Widget" doc="Scale widget which can display a numerical scale." ilk="class" name="Scale" />
      <scope classrefs="Widget" doc="Scrollbar widget which displays a slider at a certain position." ilk="class" name="Scrollbar" />
      <scope classrefs="Widget" doc="spinbox widget." ilk="class" name="Spinbox" />
      <scope classrefs="Variable" doc="Value holder for strings variables." ilk="class" name="StringVar" />
      <scope classrefs="Button" ilk="class" name="Studbutton" />
      <variable citdl="str" name="TOP" />
      <variable citdl="int" name="TRUE" />
      <scope ilk="function" name="Tcl" signature="Tcl(screenName=None, baseName=None, className=&apos;Tk&apos;, useTk=0)" />
      <scope classrefs="Exception" ilk="class" name="TclError" />
      <variable citdl="float" name="TclVersion" />
      <scope classrefs="Widget" doc="Text widget which can display text in various forms." ilk="class" name="Text" />
      <scope classrefs="Misc Wm" doc="Toplevel widget of Tk which represents mostly the main window of an appliation. It has an associated Tcl interpreter." ilk="class" name="Tk" />
      <variable citdl="float" name="TkVersion" />
      <scope classrefs="BaseWidget Wm" doc="Toplevel widget, e.g. for dialogs." ilk="class" name="Toplevel" />
      <scope classrefs="Button" ilk="class" name="Tributton" />
      <variable citdl="str" name="UNDERLINE" />
      <variable citdl="str" name="UNITS" />
      <variable citdl="str" name="VERTICAL" />
      <scope classrefs="object" doc="Class to define value holders for e.g. buttons.  Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations" ilk="class" name="Variable" />
      <variable citdl="str" name="W" />
      <variable citdl="str" name="WORD" />
      <variable citdl="int" name="WRITABLE" />
      <scope classrefs="BaseWidget Pack Place Grid Form" doc="Internal class.  Base class for a widget which can be positioned with the geometry managers" ilk="class" name="Widget" />
      <scope classrefs="object" doc="Provides functions for the communication with the window manager." ilk="class" name="Wm" />
      <variable citdl="str" name="X" />
      <variable citdl="str" name="Y" />
      <variable citdl="int" name="YES" />
      <scope doc="Ask for a directory, and return the file name" ilk="function" line="428" lineend="430" name="askdirectory" signature="askdirectory(**options)">
        <variable attributes="kwargs" ilk="argument" name="options" />
      </scope>
      <scope doc="Ask for a filename to open, and returned the opened file" ilk="function" line="395" lineend="401" name="askopenfile" returns="open()" signature="askopenfile(mode=&apos;r&apos;, **options)">
        <variable line="398" name="filename" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable citdl="str" ilk="argument" name="mode" />
      </scope>
      <scope doc="Ask for a filename to open" ilk="function" line="374" lineend="377" name="askopenfilename" signature="askopenfilename(**options)">
        <variable attributes="kwargs" ilk="argument" name="options" />
      </scope>
      <scope doc="Ask for multiple filenames to open" ilk="function" line="384" lineend="391" name="askopenfilenames" signature="askopenfilenames(**options)">
        <variable attributes="kwargs" ilk="argument" name="options" />
      </scope>
      <scope doc="Ask for multiple filenames and return the open file objects" ilk="function" line="403" lineend="417" name="askopenfiles" returns="list" signature="askopenfiles(mode=&apos;r&apos;, **options)">
        <variable citdl="askopenfilenames()" line="411" name="files" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="list" line="413" name="ofiles" />
        <variable attributes="kwargs" ilk="argument" name="options" />
      </scope>
      <scope doc="Ask for a filename to save as, and returned the opened file" ilk="function" line="420" lineend="426" name="asksaveasfile" returns="open()" signature="asksaveasfile(mode=&apos;w&apos;, **options)">
        <variable line="423" name="filename" />
        <variable attributes="kwargs" ilk="argument" name="options" />
        <variable citdl="str" ilk="argument" name="mode" />
      </scope>
      <scope doc="Ask for a filename to save as" ilk="function" line="379" lineend="382" name="asksaveasfilename" signature="asksaveasfilename(**options)">
        <variable attributes="kwargs" ilk="argument" name="options" />
      </scope>
      <import module="commondialog" />
      <import module="constants" />
      <import module="dialog" />
      <variable citdl="dict" line="23" name="dialogstates" />
      <import module="dnd" />
      <import module="fnmatch" />
      <import module="font" />
      <scope doc="Convert true and false to integer values 1 and 0." ilk="function" name="getboolean" signature="getboolean(s)" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number  Convert a string or number to a floating point number, if possible." ilk="class" name="getdouble" />
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer  Convert a string or number to an integer, if possible.  A floating" ilk="class" name="getint" />
      <scope ilk="function" name="image_names" signature="image_names()" />
      <scope ilk="function" name="image_types" signature="image_types()" />
      <scope doc="Run the main loop of Tcl." ilk="function" name="mainloop" signature="mainloop(n=0)" />
      <import module="messagebox" />
      <import module="os" />
      <import module="scrolledtext" />
      <import module="sys" />
      <scope doc="Simple test program." ilk="function" line="437" lineend="478" name="test" signature="test()">
        <variable citdl="open()" line="467" name="fp" />
        <variable citdl="fd.go()" line="444" name="savefile" />
        <variable citdl="locale.nl_langinfo()" line="452" name="enc" />
        <variable citdl="asksaveasfilename()" line="477" name="saveasfilename" />
        <variable citdl="askopenfilename()" line="465" name="openfilename" />
        <variable citdl="LoadFileDialog" line="441" name="fd" />
        <variable citdl="fd.go()" line="442" name="loadfile" />
        <variable citdl="Tk()" line="439" name="root" />
      </scope>
      <import module="tix" />
      <import module="ttk" />
      <variable citdl="int" name="wantobjects" />
      <scope attributes="protected __hidden__" classrefs="commondialog.Dialog" ilk="class" line="297" lineend="320" name="_Dialog">
        <scope attributes="protected" ilk="function" line="299" lineend="304" name="_fixoptions" signature="_fixoptions()">
          <variable citdl="_Dialog" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="306" lineend="320" name="_fixresult" returns="result.string" signature="_fixresult(widget, result)">
          <import line="309" module="os" />
          <variable citdl="_Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
          <variable citdl="result.string" ilk="argument" name="result" />
        </scope>
        <variable attributes="__instancevar__" citdl="result.string" line="319" name="filename" />
      </scope>
    </scope>
    <scope doc="functools.py - Tools for working with functions and callable objects" ilk="blob" lang="Python3" name="functools">
      <variable citdl="tuple" line="15" name="WRAPPER_ASSIGNMENTS" />
      <variable citdl="tuple" line="16" name="WRAPPER_UPDATES" />
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application of the given arguments and keywords." ilk="class" name="partial" />
      <scope doc="Apply a function of two arguments cumulatively to the items of a sequence, from left to right, so as to reduce the sequence to a single value." ilk="function" name="reduce" signature="reduce(function, sequence[, initial]) -&gt; value" />
      <scope doc="Update a wrapper function to look like the wrapped function" ilk="function" line="17" lineend="37" name="update_wrapper" signature="update_wrapper(wrapper, wrapped, assigned=(&apos;__module__&apos;, &apos;__name__&apos;, &apos;__doc__&apos;), updated=(&apos;__dict__&apos;,))">
        <variable ilk="argument" name="wrapped" />
        <variable citdl="tuple" ilk="argument" name="assigned" />
        <variable citdl="tuple" ilk="argument" name="updated" />
        <variable ilk="argument" name="wrapper" />
      </scope>
      <scope doc="Decorator factory to apply update_wrapper() to a wrapper function" ilk="function" line="39" lineend="51" name="wraps" returns="partial()" signature="wraps(wrapped, assigned=(&apos;__module__&apos;, &apos;__name__&apos;, &apos;__doc__&apos;), updated=(&apos;__dict__&apos;,))">
        <variable ilk="argument" name="wrapped" />
        <variable citdl="tuple" ilk="argument" name="assigned" />
        <variable citdl="tuple" ilk="argument" name="updated" />
      </scope>
    </scope>
    <scope doc="Class representing text/* type MIME documents." ilk="blob" lang="Python3" name="email.mime.text">
      <scope classrefs="MIMEBase" doc="Base class for MIME multipart/* type messages." ilk="class" name="MIMENonMultipart" />
      <scope classrefs="MIMENonMultipart" doc="Class for generating text/* type MIME documents." ilk="class" line="14" lineend="30" name="MIMEText">
        <scope attributes="__ctor__" doc="Create a text/* type MIME document." ilk="function" line="17" lineend="30" name="__init__" signature="MIMEText(_text, _subtype=&apos;plain&apos;, _charset=&apos;us-ascii&apos;)">
          <variable citdl="MIMEText" ilk="argument" name="self" />
          <variable ilk="argument" name="_text" />
          <variable citdl="str" ilk="argument" name="_subtype" />
          <variable citdl="str" ilk="argument" name="_charset" />
        </scope>
      </scope>
      <variable citdl="list" line="7" name="__all__" />
      <scope doc="Set the Content-Transfer-Encoding header to 7bit or 8bit." ilk="function" name="encode_7or8bit" signature="encode_7or8bit(msg)" />
    </scope>
    <scope doc="distutils.fancy_getopt  Wrapper around the standard getopt module that provides the following" ilk="blob" lang="Python3" name="distutils.fancy_getopt">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="Wrapper around the standard &apos;getopt()&apos; module that provides some handy extra functionality:   * short and long options are tied together" ilk="class" line="31" lineend="366" name="FancyGetopt">
        <variable attributes="__instancevar__" citdl="list" line="81" name="option_order" />
        <scope attributes="protected" doc="Populate the various data structures that keep tabs on the option table." ilk="function" line="135" lineend="210" name="_grok_option_table" signature="_grok_option_table()">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable citdl="int" line="148" name="repeat" />
          <variable citdl="str" line="170" name="short" />
          <variable citdl="list" line="171" name="long" />
          <variable citdl="self.negative_alias.get()" line="176" name="alias_to" />
        </scope>
        <scope attributes="protected" ilk="function" line="112" lineend="120" name="_check_alias_dict" signature="_check_alias_dict(aliases, what)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable ilk="argument" name="aliases" />
          <variable ilk="argument" name="what" />
        </scope>
        <scope ilk="function" line="88" lineend="90" name="set_option_table" signature="set_option_table(option_table)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable ilk="argument" name="option_table" />
        </scope>
        <scope ilk="function" line="362" lineend="366" name="print_help" signature="print_help(header=None, file=None)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable ilk="argument" name="header" />
          <variable citdl="sys.stdout" ilk="argument" name="file" />
        </scope>
        <scope attributes="protected" ilk="function" line="83" lineend="86" name="_build_index" signature="_build_index()">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="52" name="option_table" />
        <scope doc="Set the aliases for this option parser." ilk="function" line="122" lineend="125" name="set_aliases" signature="set_aliases(alias)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable ilk="argument" name="alias" />
        </scope>
        <scope doc="Set the negative aliases for this option parser." ilk="function" line="127" lineend="133" name="set_negative_aliases" signature="set_negative_aliases(negative_alias)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable ilk="argument" name="negative_alias" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="76" name="takes_arg" />
        <scope attributes="__ctor__" ilk="function" line="43" lineend="81" name="__init__" signature="FancyGetopt(option_table=None)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable ilk="argument" name="option_table" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="74" name="short2long" />
        <variable attributes="__instancevar__" citdl="list" line="73" name="long_opts" />
        <scope doc="Return true if the option table for this parser has an option with long name &apos;long_option&apos;." ilk="function" line="101" lineend="104" name="has_option" returns="bool" signature="has_option(long_option)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable ilk="argument" name="long_option" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="66" name="negative_alias" />
        <variable attributes="__instancevar__" citdl="dict" line="56" name="option_index" />
        <scope doc="Parse command-line options in args. Store as attributes on object." ilk="function" line="212" lineend="271" name="getopt" returns="tuple" signature="getopt(args=None, object=None)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="args" />
          <variable citdl="OptionDummy()" ilk="argument" name="object" />
          <variable citdl="True" line="227" name="created_object" />
          <variable citdl="str.join()" line="233" name="short_opts" />
          <variable citdl="self.alias.get()" line="241" name="opt" />
          <variable citdl="self.negative_alias.get()" line="246" name="alias" />
          <variable citdl="int" line="255" name="val" />
          <variable line="259" name="attr" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="143" name="repeat" />
        <variable attributes="__instancevar__" citdl="dict" line="75" name="attr_name" />
        <scope doc="Returns the list of (option, value) tuples processed by the previous run of &apos;getopt()&apos;." ilk="function" line="273" lineend="281" name="get_option_order" returns="list" signature="get_option_order()">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
        </scope>
        <scope doc="Generate help text (a list of strings, one per suggested line of output) from the option table for this FancyGetopt object." ilk="function" line="283" lineend="360" name="generate_help" returns="list" signature="generate_help(header=None)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable ilk="argument" name="header" />
          <variable citdl="int" line="291" name="max_opt" />
          <variable citdl="list" line="293" name="long" />
          <variable line="294" name="short" />
          <variable citdl="len()" line="295" name="l" />
          <variable citdl="len()" line="303" name="opt_width" />
          <variable citdl="int" line="327" name="line_width" />
          <variable citdl="len()" line="328" name="text_width" />
          <variable citdl="len()" line="329" name="big_indent" />
          <variable citdl="list" line="331" name="lines" />
          <variable citdl="wrap_text()" line="337" name="text" />
          <variable citdl="str" line="351" name="opt_names" />
        </scope>
        <scope doc="Translate long option name &apos;long_option&apos; to the form it has as an attribute of some object: ie., translate hyphens to underscores." ilk="function" line="106" lineend="110" name="get_attr_name" returns="long_option.translate()" signature="get_attr_name(long_option)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable ilk="argument" name="long_option" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="62" name="alias" />
        <scope ilk="function" line="92" lineend="99" name="add_option" signature="add_option(long_option, short_option=None, help_string=None)">
          <variable citdl="FancyGetopt" ilk="argument" name="self" />
          <variable ilk="argument" name="long_option" />
          <variable ilk="argument" name="short_option" />
          <variable ilk="argument" name="help_string" />
          <variable citdl="tuple" line="97" name="option" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="72" name="short_opts" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="object" doc="Dummy class just used as a place to hold command-line option values as instance attributes." ilk="class" line="438" lineend="446" name="OptionDummy">
        <scope attributes="__ctor__" doc="Create a new OptionDummy instance." ilk="function" line="442" lineend="446" name="__init__" signature="OptionDummy(options=[])">
          <variable citdl="OptionDummy" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="options" />
        </scope>
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="dict" name="WS_TRANS" />
      <variable citdl="str" line="11" name="__revision__" />
      <scope ilk="function" line="369" lineend="372" name="fancy_getopt" returns="parser.getopt()" signature="fancy_getopt(options, negative_opt, object, args)">
        <variable ilk="argument" name="object" />
        <variable citdl="FancyGetopt" line="370" name="parser" />
        <variable ilk="argument" name="options" />
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="negative_opt" />
      </scope>
      <import module="getopt" />
      <variable citdl="str" line="21" name="longopt_pat" />
      <variable citdl="SRE_Pattern" line="22" name="longopt_re" />
      <variable citdl="dict" line="29" name="longopt_xlate" />
      <variable citdl="SRE_Pattern" line="25" name="neg_alias_re" />
      <import module="re" />
      <import module="string" />
      <import module="sys" />
      <scope doc="Convert a long option name to a valid Python identifier by changing &quot;-&quot; to &quot;_&quot;." ilk="function" line="431" lineend="435" name="translate_longopt" returns="opt.translate()" signature="translate_longopt(opt)">
        <variable ilk="argument" name="opt" />
      </scope>
      <scope doc="Split &apos;text&apos; into multiple lines of no more than &apos;width&apos; characters each, and return the list of strings that results." ilk="function" line="377" lineend="428" name="wrap_text" returns="list" signature="wrap_text(text : string, width : int) -&gt; [string]">
        <variable citdl="int" line="396" name="cur_len" />
        <variable citdl="text.translate()" ilk="argument" name="text" />
        <variable citdl="list" line="392" name="lines" />
        <variable citdl="len()" line="399" name="l" />
        <variable citdl="list" line="395" name="cur_line" />
        <variable ilk="argument" name="width" />
        <variable citdl="re.split()" line="390" name="chunks" />
      </scope>
      <variable attributes="__hidden__" citdl="str" line="450" name="text" />
    </scope>
    <scope doc="distutils.command.build  Implements the Distutils &apos;build&apos; command." ilk="blob" lang="Python3" name="distutils.command.build">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <variable citdl="str" line="5" name="__revision__" />
      <scope classrefs="Command" ilk="class" line="18" lineend="149" name="build">
        <variable attributes="__instancevar__" citdl="int" line="68" name="force" />
        <variable citdl="list" line="146" name="sub_commands" />
        <variable attributes="__instancevar__" citdl="os.path.join()" line="63" name="build_temp" />
        <scope ilk="function" line="142" lineend="143" name="has_scripts" returns="self.distribution.has_scripts()" signature="has_scripts()">
          <variable citdl="build" ilk="argument" name="self" />
        </scope>
        <variable citdl="list" line="22" name="user_options" />
        <scope ilk="function" line="56" lineend="69" name="initialize_options" signature="initialize_options()">
          <variable citdl="build" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.path.join()" line="61" name="build_platlib" />
        <variable attributes="__instancevar__" citdl="get_platform()" line="66" name="plat_name" />
        <scope ilk="function" line="121" lineend="128" name="run" signature="run()">
          <variable citdl="build" ilk="argument" name="self" />
        </scope>
        <variable citdl="str" line="20" name="description" />
        <variable attributes="__instancevar__" citdl="os.path.normpath()" line="69" name="executable" />
        <scope ilk="function" line="133" lineend="134" name="has_pure_modules" returns="self.distribution.has_pure_modules()" signature="has_pure_modules()">
          <variable citdl="build" ilk="argument" name="self" />
        </scope>
        <variable citdl="list" line="51" name="help_options" />
        <variable citdl="list" line="49" name="boolean_options" />
        <scope ilk="function" line="139" lineend="140" name="has_ext_modules" returns="self.distribution.has_ext_modules()" signature="has_ext_modules()">
          <variable citdl="build" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.path.join()" line="64" name="build_scripts" />
        <variable attributes="__instancevar__" line="65" name="compiler" />
        <variable attributes="__instancevar__" citdl="str" line="57" name="build_base" />
        <scope ilk="function" line="136" lineend="137" name="has_c_libraries" returns="self.distribution.has_c_libraries()" signature="has_c_libraries()">
          <variable citdl="build" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="67" name="debug" />
        <scope ilk="function" line="71" lineend="119" name="finalize_options" signature="finalize_options()">
          <variable citdl="build" ilk="argument" name="self" />
          <variable citdl="str" line="83" name="plat_specifier" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.path.join()" line="60" name="build_purelib" />
        <variable attributes="__instancevar__" citdl="os.path.join()" line="62" name="build_lib" />
      </scope>
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <import module="os" />
      <scope ilk="function" line="13" lineend="15" name="show_compilers" signature="show_compilers()" />
      <import module="sys" />
    </scope>
    <scope doc="Utility code for constructing importers, etc." ilk="blob" lang="Python3" name="importlib.util">
      <scope doc="Decorator to handle selecting the proper module for loaders." ilk="function" name="module_for_loader" signature="module_for_loader(fxn)" />
      <scope doc="Set __loader__ on the returned module." ilk="function" name="set_loader" signature="set_loader(fxn)" />
      <scope doc="Set __package__ on the returned module." ilk="function" name="set_package" signature="set_package(fxn)" />
    </scope>
    <scope doc="distutils.dep_util  Utility functions for simple, timestamp-based dependency of files" ilk="blob" lang="Python3" name="distutils.dep_util">
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <variable citdl="str" line="7" name="__revision__" />
      <scope doc="Return true if &apos;source&apos; exists and is more recently modified than &apos;target&apos;, or if &apos;source&apos; exists and &apos;target&apos; doesn&apos;t." ilk="function" line="13" lineend="29" name="newer" returns="bool" signature="newer(source, target)">
        <variable ilk="argument" name="source" />
        <variable line="27" name="mtime2" />
        <variable ilk="argument" name="target" />
        <variable line="26" name="mtime1" />
      </scope>
      <scope doc="Return true if &apos;target&apos; is out-of-date with respect to any file listed in &apos;sources&apos;." ilk="function" line="56" lineend="92" name="newer_group" returns="int" signature="newer_group(sources, target, missing=&apos;error&apos;)">
        <variable line="78" name="target_mtime" />
        <variable ilk="argument" name="sources" />
        <variable line="88" name="source_mtime" />
        <variable ilk="argument" name="target" />
        <variable citdl="str" ilk="argument" name="missing" />
      </scope>
      <scope doc="Walk two filename lists in parallel, testing if each source is newer than its corresponding target." ilk="function" line="34" lineend="51" name="newer_pairwise" returns="tuple" signature="newer_pairwise(sources, targets)">
        <variable citdl="list" line="44" name="n_sources" />
        <variable ilk="argument" name="sources" />
        <variable citdl="list" line="45" name="n_targets" />
        <variable ilk="argument" name="targets" />
      </scope>
      <import module="os" />
    </scope>
    <scope doc="Built-in functions, exceptions, and other objects.  Noteworthy: None is the `nil&apos; object; Ellipsis represents `...&apos; in slices." ilk="blob" lang="Python3" name="builtins">
      <scope classrefs="Exception" doc="Base class for arithmetic errors." ilk="class" name="ArithmeticError" />
      <scope classrefs="Exception" doc="Assertion failed." ilk="class" name="AssertionError" />
      <scope classrefs="Exception" doc="Attribute not found." ilk="class" name="AttributeError" />
      <scope classrefs="object" doc="Common base class for all exceptions" ilk="class" name="BaseException" />
      <scope classrefs="Exception" doc="Buffer error." ilk="class" name="BufferError" />
      <scope classrefs="Warning" doc="Base class for warnings about bytes and buffer related problems, mostly related to conversion from str or comparing to str." ilk="class" name="BytesWarning" />
      <scope classrefs="Warning" doc="Base class for warnings about deprecated features." ilk="class" name="DeprecationWarning" />
      <scope classrefs="Exception" doc="Read beyond end of file." ilk="class" name="EOFError" />
      <variable citdl="ellipsis" name="Ellipsis" />
      <scope classrefs="Exception" doc="Base class for I/O related errors." ilk="class" name="EnvironmentError" />
      <scope classrefs="BaseException" doc="Common base class for all non-exit exceptions." ilk="class" name="Exception" />
      <variable citdl="bool" name="False" />
      <scope classrefs="ArithmeticError" doc="Floating point operation failed." ilk="class" name="FloatingPointError" />
      <scope classrefs="Warning" doc="Base class for warnings about constructs that will change semantically in the future." ilk="class" name="FutureWarning" />
      <scope classrefs="BaseException" doc="Request that a generator exit." ilk="class" name="GeneratorExit" />
      <scope classrefs="EnvironmentError" doc="I/O operation failed." ilk="class" name="IOError" />
      <scope classrefs="Exception" doc="Import can&apos;t find module, or can&apos;t find name in module." ilk="class" name="ImportError" />
      <scope classrefs="Warning" doc="Base class for warnings about probable mistakes in module imports" ilk="class" name="ImportWarning" />
      <scope classrefs="SyntaxError" doc="Improper indentation." ilk="class" name="IndentationError" />
      <scope classrefs="LookupError" doc="Sequence index out of range." ilk="class" name="IndexError" />
      <scope classrefs="LookupError" doc="Mapping key not found." ilk="class" name="KeyError" />
      <scope classrefs="BaseException" doc="Program interrupted by user." ilk="class" name="KeyboardInterrupt" />
      <scope classrefs="Exception" doc="Base class for lookup errors." ilk="class" name="LookupError" />
      <scope classrefs="Exception" doc="Out of memory." ilk="class" name="MemoryError" />
      <scope classrefs="Exception" doc="Name not found globally." ilk="class" name="NameError" />
      <variable citdl="NoneType" name="None" />
      <variable citdl="NotImplementedType" name="NotImplemented" />
      <scope classrefs="RuntimeError" doc="Method or function hasn&apos;t been implemented yet." ilk="class" name="NotImplementedError" />
      <scope classrefs="EnvironmentError" doc="OS system call failed." ilk="class" name="OSError" />
      <scope classrefs="ArithmeticError" doc="Result too large to be represented." ilk="class" name="OverflowError" />
      <scope classrefs="Warning" doc="Base class for warnings about features which will be deprecated in the future." ilk="class" name="PendingDeprecationWarning" />
      <scope classrefs="Exception" doc="Weak ref proxy used after referent went away." ilk="class" name="ReferenceError" />
      <scope classrefs="Exception" doc="Unspecified run-time error." ilk="class" name="RuntimeError" />
      <scope classrefs="Warning" doc="Base class for warnings about dubious runtime behavior." ilk="class" name="RuntimeWarning" />
      <scope classrefs="Exception" doc="Signal the end from iterator.__next__()." ilk="class" name="StopIteration" />
      <scope classrefs="Exception" doc="Invalid syntax." ilk="class" name="SyntaxError" />
      <scope classrefs="Warning" doc="Base class for warnings about dubious syntax." ilk="class" name="SyntaxWarning" />
      <scope classrefs="Exception" doc="Internal error in the Python interpreter.  Please report this to the Python maintainer, along with the traceback," ilk="class" name="SystemError" />
      <scope classrefs="BaseException" doc="Request to exit from the interpreter." ilk="class" name="SystemExit" />
      <scope classrefs="IndentationError" doc="Improper mixture of spaces and tabs." ilk="class" name="TabError" />
      <variable citdl="bool" name="True" />
      <scope classrefs="Exception" doc="Inappropriate argument type." ilk="class" name="TypeError" />
      <scope classrefs="NameError" doc="Local name referenced but not bound to a value." ilk="class" name="UnboundLocalError" />
      <scope classrefs="UnicodeError" doc="Unicode decoding error." ilk="class" name="UnicodeDecodeError" />
      <scope classrefs="UnicodeError" doc="Unicode encoding error." ilk="class" name="UnicodeEncodeError" />
      <scope classrefs="ValueError" doc="Unicode related error." ilk="class" name="UnicodeError" />
      <scope classrefs="UnicodeError" doc="Unicode translation error." ilk="class" name="UnicodeTranslateError" />
      <scope classrefs="Warning" doc="Base class for warnings about Unicode related problems, mostly related to conversion problems." ilk="class" name="UnicodeWarning" />
      <scope classrefs="Warning" doc="Base class for warnings generated by user code." ilk="class" name="UserWarning" />
      <scope classrefs="Exception" doc="Inappropriate argument value (of correct type)." ilk="class" name="ValueError" />
      <scope classrefs="Exception" doc="Base class for warning categories." ilk="class" name="Warning" />
      <scope classrefs="OSError" doc="MS-Windows OS system call failed." ilk="class" name="WindowsError" />
      <scope classrefs="ArithmeticError" doc="Second argument to a division or modulo operation was zero." ilk="class" name="ZeroDivisionError" />
      <scope doc="Internal helper function used by the class statement." ilk="function" name="__build_class__" signature="__build_class__(func, name, *bases, metaclass=None, **kwds) -&gt; class" />
      <variable citdl="bool" name="__debug__" />
      <scope doc="Import a module." ilk="function" name="__import__" returns="module" signature="__import__(name, globals={}, locals={}, fromlist=[], level=-1) -&gt; module" />
      <scope doc="Return the absolute value of the argument." ilk="function" name="abs" returns="int" signature="abs(number) -&gt; number" />
      <scope doc="Return True if bool(x) is True for all values x in the iterable." ilk="function" name="all" returns="bool" signature="all(iterable) -&gt; bool" />
      <scope doc="Return True if bool(x) is True for any x in the iterable." ilk="function" name="any" returns="bool" signature="any(iterable) -&gt; bool" />
      <scope doc="As repr(), return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by repr() using \x, \u or \U escapes." ilk="function" name="ascii" returns="str" signature="ascii(object) -&gt; string" />
      <scope doc="Return the binary representation of an integer or long integer." ilk="function" name="bin" returns="str" signature="bin(number) -&gt; string" />
      <scope classrefs="int" doc="bool(x) -&gt; bool  Returns True when the argument x is true, False otherwise." ilk="class" name="bool" />
      <scope classrefs="object" doc="bytearray(iterable_of_ints) -&gt; bytearray bytearray(string, encoding[, errors]) -&gt; bytearray bytearray(bytes_or_bytearray) -&gt; mutable copy of bytes_or_bytearray" ilk="class" name="bytearray" />
      <scope classrefs="object" doc="bytes(iterable_of_ints) -&gt; bytes bytes(string, encoding[, errors]) -&gt; bytes bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer" ilk="class" name="bytes" />
      <scope doc="Return a Unicode string of one character with ordinal i; 0 &lt;= i &lt;= 0x10ffff." ilk="function" name="chr" returns="unicode" signature="chr(i) -&gt; Unicode character" />
      <scope classrefs="object" doc="classmethod(function) -&gt; method  Convert a function to be a class method." ilk="class" name="classmethod" />
      <scope doc="Compile the source string (a Python module, statement or expression) into a code object that can be executed by exec() or eval()." ilk="function" name="compile" returns="code" signature="compile(source, filename, mode[, flags[, dont_inherit]]) -&gt; code object" />
      <scope classrefs="object" doc="complex(real[, imag]) -&gt; complex number  Create a complex number from a real part and an optional imaginary part." ilk="class" name="complex" />
      <variable citdl="_Printer" name="copyright" />
      <variable citdl="_Printer" name="credits" />
      <scope doc="Delete a named attribute on an object; delattr(x, &apos;y&apos;) is equivalent to ``del x.y&apos;&apos;." ilk="function" name="delattr" signature="delattr(object, name)" />
      <scope classrefs="object" doc="dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object&apos;s     (key, value) pairs" ilk="class" name="dict" />
      <scope doc="If called without an argument, return the names in the current scope." ilk="function" name="dir" returns="list" signature="dir([object]) -&gt; list of strings" />
      <scope doc="Return the tuple ((x-x%y)/y, x%y)." ilk="function" name="divmod" signature="divmod(x, y) -&gt; (div, mod)" />
      <scope classrefs="object" doc="enumerate(iterable) -&gt; iterator for index, value of iterable  Return an enumerate object.  iterable must be another object that supports" ilk="class" name="enumerate" />
      <scope doc="Evaluate the source in the context of globals and locals." ilk="function" name="eval" signature="eval(source[, globals[, locals]]) -&gt; value" />
      <scope doc="Read and execute code from an object, which can be a string or a code object." ilk="function" name="exec" signature="exec(object[, globals[, locals]])" />
      <variable citdl="Quitter" name="exit" />
      <scope classrefs="object" doc="filter(function or None, iterable) --&gt; filter object  Return an iterator yielding those items of iterable for which function(item)" ilk="class" name="filter" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number  Convert a string or number to a floating point number, if possible." ilk="class" name="float" />
      <scope doc="Returns value.__format__(format_spec) format_spec defaults to &quot;&quot;" ilk="function" name="format" returns="str" signature="format(value[, format_spec]) -&gt; string" />
      <scope classrefs="object" doc="frozenset() -&gt; empty frozenset object frozenset(iterable) -&gt; frozenset object " ilk="class" name="frozenset" />
      <scope doc="Get a named attribute from an object; getattr(x, &apos;y&apos;) is equivalent to x.y." ilk="function" name="getattr" signature="getattr(object, name[, default]) -&gt; value" />
      <scope doc="Return the dictionary containing the current scope&apos;s global variables." ilk="function" name="globals" returns="dict" signature="globals() -&gt; dictionary" />
      <scope doc="Return whether the object has an attribute with the given name." ilk="function" name="hasattr" returns="bool" signature="hasattr(object, name) -&gt; bool" />
      <scope doc="Return a hash value for the object." ilk="function" name="hash" returns="int" signature="hash(object) -&gt; integer" />
      <variable citdl="_Helper" name="help" />
      <scope doc="Return the hexadecimal representation of an integer or long integer." ilk="function" name="hex" returns="str" signature="hex(number) -&gt; string" />
      <scope doc="Return the identity of an object." ilk="function" name="id" returns="int" signature="id(object) -&gt; integer" />
      <scope doc="Read a string from standard input." ilk="function" name="input" returns="str" signature="input([prompt]) -&gt; string" />
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer  Convert a string or number to an integer, if possible.  A floating" ilk="class" name="int" />
      <scope doc="Return whether an object is an instance of a class or of a subclass thereof." ilk="function" name="isinstance" returns="bool" signature="isinstance(object, class-or-type-or-tuple) -&gt; bool" />
      <scope doc="Return whether class C is a subclass (i.e., a derived class) of class B." ilk="function" name="issubclass" returns="bool" signature="issubclass(C, B) -&gt; bool" />
      <scope doc="Get an iterator from an object." ilk="function" name="iter" signature="iter(iterable) -&gt; iterator iter(callable, sentinel) -&gt; iterator" />
      <scope doc="Return the number of items of a sequence or mapping." ilk="function" name="len" returns="int" signature="len(object) -&gt; integer" />
      <variable citdl="_Printer" name="license" />
      <scope classrefs="object" doc="list() -&gt; new empty list list(iterable) -&gt; new list initialized from iterable&apos;s items" ilk="class" name="list" />
      <scope doc="Update and return a dictionary containing the current scope&apos;s local variables." ilk="function" name="locals" returns="dict" signature="locals() -&gt; dictionary" />
      <scope classrefs="object" doc="map(func, *iterables) --&gt; map object  Make an iterator that computes the function using arguments from" ilk="class" name="map" />
      <scope doc="With a single iterable argument, return its largest item." ilk="function" name="max" signature="max(iterable[, key=func]) -&gt; value max(a, b, c, ...[, key=func]) -&gt; value" />
      <scope classrefs="object" doc="memoryview(object)  Create a new memoryview object which references the given object." ilk="class" name="memoryview" />
      <scope doc="With a single iterable argument, return its smallest item." ilk="function" name="min" signature="min(iterable[, key=func]) -&gt; value min(a, b, c, ...[, key=func]) -&gt; value" />
      <scope doc="Return the next item from the iterator." ilk="function" name="next" signature="next(iterator[, default])" />
      <scope doc="The most base type" ilk="class" name="object" />
      <scope doc="Return the octal representation of an integer or long integer." ilk="function" name="oct" returns="str" signature="oct(number) -&gt; string" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="open" />
      <scope doc="Return the integer ordinal of a one-character string." ilk="function" name="ord" returns="int" signature="ord(c) -&gt; integer" />
      <scope doc="With two arguments, equivalent to x**y." ilk="function" name="pow" returns="int" signature="pow(x, y[, z]) -&gt; number" />
      <scope doc="Prints the values to a stream, or to sys.stdout by default." ilk="function" name="print" signature="print(value, ..., sep=&apos; &apos;, end=&apos;\n&apos;, file=sys.stdout)" />
      <scope classrefs="object" doc="property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute  fget is a function to be used for getting an attribute value, and likewise" ilk="class" name="property" />
      <variable citdl="Quitter" name="quit" />
      <scope classrefs="object" doc="range([start,] stop[, step]) -&gt; range object  Returns an iterator that generates the numbers in the range on demand." ilk="class" name="range" />
      <scope doc="Return the canonical string representation of the object." ilk="function" name="repr" returns="str" signature="repr(object) -&gt; string" />
      <scope classrefs="object" doc="reversed(sequence) -&gt; reverse iterator over values of the sequence  Return a reverse iterator" ilk="class" name="reversed" />
      <scope doc="Round a number to a given precision in decimal digits (default 0 digits)." ilk="function" name="round" returns="int" signature="round(number[, ndigits]) -&gt; number" />
      <scope classrefs="object" doc="set() -&gt; new empty set object set(iterable) -&gt; new set object " ilk="class" name="set" />
      <scope doc="Set a named attribute on an object; setattr(x, &apos;y&apos;, v) is equivalent to ``x.y = v&apos;&apos;." ilk="function" name="setattr" signature="setattr(object, name, value)" />
      <scope classrefs="object" doc="slice([start,] stop[, step])  Create a slice object.  This is used for extended slicing (e.g. a[0:10:2])." ilk="class" name="slice" />
      <scope doc="sorted(iterable, key=None, reverse=False) --&gt; new sorted list" ilk="function" name="sorted" signature="sorted(iterable, key=None, reverse=False) --&gt; new sorted list" />
      <scope classrefs="object" doc="staticmethod(function) -&gt; method  Convert a function to be a static method." ilk="class" name="staticmethod" />
      <scope classrefs="object" doc="str(string[, encoding[, errors]]) -&gt; str  Create a new string object from the given encoded string." ilk="class" name="str" />
      <scope doc="Returns the sum of an iterable of numbers (NOT strings) plus the value of parameter &apos;start&apos; (which defaults to 0)." ilk="function" name="sum" signature="sum(iterable[, start]) -&gt; value" />
      <scope classrefs="object" doc="super() -&gt; same as super(__class__, &lt;first argument&gt;) super(type) -&gt; unbound super object super(type, obj) -&gt; bound super object; requires isinstance(obj, type)" ilk="class" name="super" />
      <scope classrefs="object" doc="tuple() -&gt; empty tuple tuple(iterable) -&gt; tuple initialized from iterable&apos;s items " ilk="class" name="tuple" />
      <scope classrefs="object" doc="type(object) -&gt; the object&apos;s type type(name, bases, dict) -&gt; a new type" ilk="class" name="type" />
      <scope doc="Without arguments, equivalent to locals()." ilk="function" name="vars" returns="dict" signature="vars([object]) -&gt; dictionary" />
      <scope classrefs="object" doc="zip(iter1 [,iter2 [...]]) --&gt; zip object  Return a zip object whose .__next__() method returns a tuple where" ilk="class" name="zip" />
    </scope>
    <scope doc="UUID objects (universally unique identifiers) according to RFC 4122.  This module provides immutable UUID objects (class UUID) and the functions" ilk="blob" lang="Python3" name="uuid">
      <variable citdl="UUID" line="562" name="NAMESPACE_DNS" />
      <variable citdl="UUID" line="564" name="NAMESPACE_OID" />
      <variable citdl="UUID" line="563" name="NAMESPACE_URL" />
      <variable citdl="UUID" line="565" name="NAMESPACE_X500" />
      <variable citdl="str" line="49" name="RESERVED_FUTURE" />
      <variable citdl="str" line="49" name="RESERVED_MICROSOFT" />
      <variable citdl="str" line="49" name="RESERVED_NCS" />
      <variable citdl="str" line="49" name="RFC_4122" />
      <scope classrefs="object" doc="Instances of the UUID class represent UUIDs as specified in RFC 4122. UUID objects are immutable, hashable, and usable as dictionary keys. Converting a UUID to a string with str() yields something in the form" ilk="class" line="56" lineend="312" name="UUID">
        <scope ilk="function" line="221" lineend="222" name="__int__" returns="self.int" signature="__int__()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="int" line="272" name="clock_seq_low" />
        <scope attributes="__hidden__" ilk="function" line="309" lineend="312" name="version (property getter)" returns="int()" signature="version (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="230" lineend="233" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable citdl="self.int" line="231" name="hex" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="298" lineend="306" name="variant (property getter)" returns="str" signature="variant (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="276" lineend="278" name="time (property getter)" returns="int" signature="time (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="281" lineend="283" name="clock_seq (property getter)" returns="int" signature="clock_seq (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="int" line="281" name="clock_seq" />
        <scope ilk="function" line="198" lineend="201" name="__lt__" returns="NotImplemented" signature="__lt__(other)">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="property" citdl="int" line="268" name="clock_seq_hi_variant" />
        <scope attributes="__ctor__" doc="Create a UUID from either a string of 32 hexadecimal digits, a string of 16 bytes as the &apos;bytes&apos; argument, a string of 16 bytes in little-endian order as the &apos;bytes_le&apos; argument, a tuple of six integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version," ilk="function" line="104" lineend="183" name="__init__" signature="UUID(hex=None, bytes=None, bytes_le=None, fields=None, int=None, version=None)">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable ilk="argument" name="hex" />
          <variable citdl="bytes_()" ilk="argument" name="bytes" />
          <variable ilk="argument" name="bytes_le" />
          <variable ilk="argument" name="fields" />
          <variable citdl="int_()" ilk="argument" name="int" />
          <variable ilk="argument" name="version" />
          <variable citdl="int" line="168" name="clock_seq" />
        </scope>
        <scope ilk="function" line="227" lineend="228" name="__setattr__" signature="__setattr__(name, value)">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="256" lineend="257" name="time_low (property getter)" returns="int" signature="time_low (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="int" line="264" name="time_hi_version" />
        <variable attributes="property" citdl="str" line="290" name="hex" />
        <scope attributes="__hidden__" ilk="function" line="251" lineend="253" name="fields (property getter)" returns="tuple" signature="fields (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="int()" line="309" name="version" />
        <scope attributes="__hidden__" ilk="function" line="294" lineend="295" name="urn (property getter)" returns="str" signature="urn (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="236" lineend="240" name="bytes (property getter)" returns="bytearray()" signature="bytes (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable citdl="bytearray()" line="237" name="bytes" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="272" lineend="273" name="clock_seq_low (property getter)" returns="int" signature="clock_seq_low (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="int" line="256" name="time_low" />
        <scope ilk="function" line="190" lineend="193" name="__ne__" returns="NotImplemented" signature="__ne__(other)">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="243" lineend="248" name="bytes_le (property getter)" returns="bytes_()" signature="bytes_le (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable citdl="bytearray()" line="244" name="bytes" />
        </scope>
        <variable attributes="property" citdl="int" line="286" name="node" />
        <variable attributes="property" citdl="str" line="298" name="variant" />
        <variable attributes="property" citdl="int" line="260" name="time_mid" />
        <scope ilk="function" line="203" lineend="206" name="__gt__" returns="NotImplemented" signature="__gt__(other)">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="185" lineend="188" name="__eq__" returns="NotImplemented" signature="__eq__(other)">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="260" lineend="261" name="time_mid (property getter)" returns="int" signature="time_mid (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="290" lineend="291" name="hex (property getter)" returns="self.int" signature="hex (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="tuple" line="251" name="fields" />
        <variable attributes="property" citdl="str()" line="294" name="urn" />
        <variable attributes="property" citdl="bytearray()" line="236" name="bytes" />
        <variable attributes="property" citdl="list" line="243" name="bytes_le" />
        <scope attributes="__hidden__" ilk="function" line="264" lineend="265" name="time_hi_version (property getter)" returns="int" signature="time_hi_version (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="286" lineend="287" name="node (property getter)" returns="int" signature="node (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="224" lineend="225" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="int" line="276" name="time" />
        <scope ilk="function" line="218" lineend="219" name="__hash__" returns="hash()" signature="__hash__()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="208" lineend="211" name="__le__" returns="NotImplemented" signature="__le__(other)">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="268" lineend="269" name="clock_seq_hi_variant (property getter)" returns="int" signature="clock_seq_hi_variant (property getter)()">
          <variable citdl="UUID" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="213" lineend="216" name="__ge__" returns="NotImplemented" signature="__ge__(other)">
          <variable citdl="UUID" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
      </scope>
      <variable citdl="str" line="47" name="__author__" />
      <scope classrefs="object" doc="bytes(iterable_of_ints) -&gt; bytes bytes(string, encoding[, errors]) -&gt; bytes bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer" ilk="class" line="54" name="bytes_" />
      <import module="ctypes" />
      <scope doc="Get the hardware address as a 48-bit positive integer." ilk="function" line="466" lineend="491" name="getnode" returns="getter()" signature="getnode()">
        <variable attributes="protected" citdl="getter()" line="487" name="_node" />
        <variable citdl="list" line="481" name="getters" />
      </scope>
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer  Convert a string or number to an integer, if possible.  A floating" ilk="class" line="53" name="int_" />
      <variable citdl="WinDLL" line="422" name="lib" />
      <variable citdl="str" name="libname" />
      <scope doc="Generate a UUID from a host ID, sequence number, and the current time." ilk="function" line="495" lineend="528" name="uuid1" returns="UUID" signature="uuid1(node=None, clock_seq=None)">
        <variable citdl="getnode()" ilk="argument" name="node" />
        <variable citdl="int" line="520" name="time_low" />
        <variable attributes="protected" citdl="ctypes.create_string_buffer()" line="504" name="_buffer" />
        <variable citdl="int()" line="513" name="timestamp" />
        <variable citdl="int()" line="510" name="nanoseconds" />
        <variable citdl="int" line="523" name="clock_seq_low" />
        <variable citdl="int" line="521" name="time_mid" />
        <variable attributes="protected" citdl="int()" line="516" name="_last_timestamp" />
        <variable citdl="int" line="524" name="clock_seq_hi_variant" />
        <variable citdl="int" line="522" name="time_hi_version" />
        <variable citdl="random.randrange()" ilk="argument" name="clock_seq" />
      </scope>
      <scope doc="Generate a UUID from the MD5 hash of a namespace UUID and a name." ilk="function" line="530" lineend="534" name="uuid3" returns="UUID" signature="uuid3(namespace, name)">
        <variable line="533" name="hash" />
        <variable ilk="argument" name="namespace" />
        <variable ilk="argument" name="name" />
      </scope>
      <scope doc="Generate a random UUID." ilk="function" line="536" lineend="552" name="uuid4" returns="UUID" signature="uuid4()">
        <variable citdl="bytes_()" line="551" name="bytes" />
        <variable attributes="protected" citdl="ctypes.create_string_buffer()" line="541" name="_buffer" />
      </scope>
      <scope doc="Generate a UUID from the SHA-1 hash of a namespace UUID and a name." ilk="function" line="554" lineend="558" name="uuid5" returns="UUID" signature="uuid5(namespace, name)">
        <variable line="557" name="hash" />
        <variable ilk="argument" name="namespace" />
        <variable ilk="argument" name="name" />
      </scope>
      <variable attributes="protected __hidden__" citdl="getattr()" line="442" name="_UuidCreate" />
      <variable attributes="protected __hidden__" citdl="lib.uuid_generate_random" line="414" name="_uuid_generate_random" />
      <scope attributes="protected __hidden__" doc="Get a random node ID, with eighth bit set as suggested by RFC 4122." ilk="function" line="459" lineend="462" name="_random_getnode" returns="int" signature="_random_getnode()">
        <import line="461" module="random" />
      </scope>
      <scope attributes="protected __hidden__" doc="Get the hardware address on Windows using ctypes." ilk="function" line="453" lineend="457" name="_windll_getnode" signature="_windll_getnode()">
        <variable attributes="protected" citdl="ctypes.create_string_buffer()" line="455" name="_buffer" />
      </scope>
      <scope attributes="protected __hidden__" doc="Get the hardware address on Windows using NetBIOS calls." ilk="function" line="381" lineend="408" name="_netbios_getnode" returns="int" signature="_netbios_getnode()">
        <import line="384" module="win32wnet" />
        <import line="384" module="netbios" />
        <variable citdl="netbios.NCB()" line="385" name="ncb" />
        <variable citdl="map()" line="406" name="bytes" />
      </scope>
      <variable attributes="protected __hidden__" line="493" name="_last_timestamp" />
      <scope attributes="protected __hidden__" ilk="function" line="314" lineend="334" name="_find_mac" returns="int()" signature="_find_mac(command, args, hw_identifiers, get_index)">
        <import line="315" module="os" />
        <variable ilk="argument" name="command" />
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="hw_identifiers" />
        <variable ilk="argument" name="get_index" />
        <variable citdl="os.path.join()" line="317" name="executable" />
        <variable citdl="str" line="324" name="cmd" />
        <variable citdl="os.popen()" line="325" name="pipe" />
        <variable line="330" name="words" />
      </scope>
      <scope attributes="protected __hidden__" doc="Get the hardware address on Windows by running ipconfig.exe." ilk="function" line="360" lineend="379" name="_ipconfig_getnode" returns="int()" signature="_ipconfig_getnode()">
        <import line="362" module="os" />
        <import line="362" module="re" />
        <import line="365" module="ctypes" />
        <variable citdl="list" line="363" name="dirs" />
        <variable citdl="ctypes.create_string_buffer()" line="366" name="buffer" />
        <variable citdl="os.popen()" line="373" name="pipe" />
        <variable line="377" name="value" />
      </scope>
      <variable attributes="protected __hidden__" line="464" name="_node" />
      <scope attributes="protected __hidden__" doc="Get the hardware address on Unix using ctypes." ilk="function" line="447" lineend="451" name="_unixdll_getnode" signature="_unixdll_getnode()">
        <variable attributes="protected" citdl="ctypes.create_string_buffer()" line="449" name="_buffer" />
      </scope>
      <scope attributes="protected __hidden__" doc="Get the hardware address on Unix by running ifconfig." ilk="function" line="336" lineend="358" name="_ifconfig_getnode" returns="_find_mac()" signature="_ifconfig_getnode()">
        <import line="345" module="socket" />
        <variable citdl="_find_mac()" line="341" name="mac" />
        <variable citdl="socket.gethostbyname()" line="346" name="ip_addr" />
      </scope>
      <variable attributes="protected __hidden__" citdl="lib.uuid_generate_time" line="428" name="_uuid_generate_time" />
    </scope>
    <scope doc="# Copyright 2004-2005 Elemental Security, Inc. All Rights Reserved. # Licensed to PSF under a Contributor Agreement." ilk="blob" lang="Python3" name="lib2to3.pgen2.pgen">
      <scope classrefs="object" ilk="class" line="347" lineend="382" name="DFAState">
        <variable attributes="__instancevar__" line="353" name="nfaset" />
        <variable attributes="__instancevar__" citdl="dict" line="355" name="arcs" />
        <scope ilk="function" line="357" lineend="361" name="addarc" signature="addarc(next, label)">
          <variable citdl="DFAState" ilk="argument" name="self" />
          <variable ilk="argument" name="next" />
          <variable ilk="argument" name="label" />
        </scope>
        <variable attributes="__instancevar__" citdl="bool" line="354" name="isfinal" />
        <scope ilk="function" line="363" lineend="366" name="unifystate" signature="unifystate(old, new)">
          <variable citdl="DFAState" ilk="argument" name="self" />
          <variable ilk="argument" name="old" />
          <variable ilk="argument" name="new" />
        </scope>
        <variable line="382" name="__hash__" />
        <scope ilk="function" line="368" lineend="380" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="DFAState" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="349" lineend="355" name="__init__" signature="DFAState(nfaset, final)">
          <variable citdl="DFAState" ilk="argument" name="self" />
          <variable ilk="argument" name="nfaset" />
          <variable ilk="argument" name="final" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="337" lineend="345" name="NFAState">
        <scope ilk="function" line="342" lineend="345" name="addarc" signature="addarc(next, label=None)">
          <variable citdl="NFAState" ilk="argument" name="self" />
          <variable ilk="argument" name="next" />
          <variable ilk="argument" name="label" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="339" lineend="340" name="__init__" signature="NFAState()">
          <variable citdl="NFAState" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="340" name="arcs" />
      </scope>
      <scope classrefs="object" ilk="class" line="10" lineend="335" name="ParserGenerator">
        <variable attributes="__instancevar__" citdl="open()" line="18" name="stream" />
        <scope ilk="function" line="115" lineend="143" name="calcfirst" signature="calcfirst(name)">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable line="116" name="dfa" />
          <variable line="118" name="state" />
          <variable citdl="dict" line="119" name="totalset" />
          <variable citdl="dict" line="120" name="overlapcheck" />
          <variable line="124" name="fset" />
          <variable citdl="dict" line="135" name="inverse" />
        </scope>
        <scope ilk="function" line="169" lineend="203" name="make_dfa" returns="list" signature="make_dfa(start, finish)">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="finish" />
          <scope ilk="function" line="176" lineend="179" name="closure" returns="dict" signature="closure(state)">
            <variable ilk="argument" name="state" />
            <variable citdl="dict" line="177" name="base" />
          </scope>
          <scope ilk="function" line="180" lineend="187" name="addclosure" signature="addclosure(state, base)">
            <variable ilk="argument" name="state" />
            <variable ilk="argument" name="base" />
          </scope>
          <variable citdl="list" line="188" name="states" />
          <variable citdl="dict" line="190" name="arcs" />
          <variable citdl="DFAState()" line="200" name="st" />
        </scope>
        <scope ilk="function" line="145" lineend="167" name="parse" returns="tuple" signature="parse()">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable citdl="dict" line="146" name="dfas" />
          <variable citdl="self.expect()" line="147" name="startsymbol" />
          <variable citdl="self.expect()" line="153" name="name" />
          <variable citdl="self.make_dfa()" line="158" name="dfa" />
          <variable citdl="len()" line="160" name="oldlen" />
          <variable citdl="len()" line="162" name="newlen" />
        </scope>
        <scope ilk="function" line="107" lineend="112" name="addfirstsets" signature="addfirstsets()">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable citdl="list()" line="108" name="names" />
        </scope>
        <scope ilk="function" line="313" lineend="319" name="expect" returns="self.value" signature="expect(type, value=None)">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable citdl="self.value" ilk="argument" name="value" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="12" lineend="25" name="__init__" signature="ParserGenerator(filename, stream=None)">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="open()" ilk="argument" name="stream" />
          <variable citdl="stream.close" line="13" name="close_stream" />
        </scope>
        <scope ilk="function" line="276" lineend="294" name="parse_item" returns="tuple" signature="parse_item()">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable citdl="self.value" line="286" name="value" />
        </scope>
        <variable attributes="__instancevar__" citdl="tokenize.generate_tokens()" line="19" name="generator" />
        <scope ilk="function" line="228" lineend="247" name="simplify_dfa" signature="simplify_dfa(dfa)">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="dfa" />
          <variable citdl="True" line="235" name="changes" />
          <variable line="240" name="state_j" />
        </scope>
        <scope ilk="function" line="221" lineend="226" name="dump_dfa" signature="dump_dfa(name, dfa)">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="dfa" />
        </scope>
        <variable attributes="__instancevar__" line="17" name="filename" />
        <scope ilk="function" line="266" lineend="274" name="parse_alt" returns="tuple" signature="parse_alt()">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable citdl="d" line="273" name="b" />
        </scope>
        <scope ilk="function" line="61" lineend="105" name="make_label" returns="len()" signature="make_label(c, label)">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="c" />
          <variable ilk="argument" name="label" />
          <variable citdl="len()" line="63" name="ilabel" />
          <variable citdl="getattr()" line="76" name="itoken" />
          <variable citdl="eval()" line="88" name="value" />
        </scope>
        <scope ilk="function" line="328" lineend="335" name="raise_error" signature="raise_error(msg, *args)">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable citdl="str.join()" ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="27" lineend="50" name="make_grammar" returns="PgenGrammar" signature="make_grammar()">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable citdl="PgenGrammar" line="28" name="c" />
          <variable citdl="list()" line="29" name="names" />
          <variable citdl="len()" line="34" name="i" />
          <variable line="38" name="dfa" />
          <variable citdl="list" line="39" name="states" />
          <variable citdl="list" line="41" name="arcs" />
        </scope>
        <scope ilk="function" line="52" lineend="59" name="make_first" returns="dict" signature="make_first(c, name)">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="c" />
          <variable ilk="argument" name="name" />
          <variable line="53" name="rawfirst" />
          <variable citdl="dict" line="54" name="first" />
          <variable citdl="self.make_label()" line="56" name="ilabel" />
        </scope>
        <scope ilk="function" line="249" lineend="264" name="parse_rhs" returns="tuple" signature="parse_rhs()">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable citdl="NFAState()" line="255" name="aa" />
          <variable citdl="NFAState()" line="256" name="zz" />
        </scope>
        <scope ilk="function" line="205" lineend="219" name="dump_nfa" signature="dump_nfa(name, start, finish)">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="finish" />
          <variable citdl="list" line="207" name="todo" />
          <variable citdl="todo.index()" line="212" name="j" />
        </scope>
        <scope ilk="function" line="296" lineend="311" name="parse_atom" returns="tuple" signature="parse_atom()">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable citdl="NFAState()" line="304" name="a" />
          <variable citdl="NFAState()" line="305" name="z" />
        </scope>
        <scope ilk="function" line="321" lineend="325" name="gettoken" signature="gettoken()">
          <variable citdl="ParserGenerator" ilk="argument" name="self" />
          <variable citdl="next()" line="322" name="tup" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="24" name="first" />
      </scope>
      <scope classrefs="Grammar" ilk="class" line="7" lineend="8" name="PgenGrammar" />
      <scope ilk="function" line="384" lineend="386" name="generate_grammar" returns="p.make_grammar()" signature="generate_grammar(filename=&apos;Grammar.txt&apos;)">
        <variable citdl="ParserGenerator" line="385" name="p" />
        <variable citdl="str" ilk="argument" name="filename" />
      </scope>
      <import module="grammar" />
      <import module="token" />
      <import module="tokenize" />
    </scope>
    <scope doc="Temporary files.  This module provides generic, low- and high-level interfaces for" ilk="blob" lang="Python3" name="tempfile">
      <scope doc="Create and return a temporary file." ilk="function" line="415" lineend="447" name="NamedTemporaryFile" returns="_TemporaryFileWrapper" signature="NamedTemporaryFile(mode=&apos;w+b&apos;, buffering=-1, encoding=None, newline=None, suffix=&apos;&apos;, prefix=&apos;tmp&apos;, dir=None, delete=True)">
        <variable citdl="str" ilk="argument" name="suffix" />
        <variable ilk="argument" name="encoding" />
        <variable ilk="argument" name="newline" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <variable citdl="int" line="436" name="flags" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="_io.open()" line="444" name="file" />
        <variable citdl="int" ilk="argument" name="buffering" />
        <variable citdl="gettempdir()" ilk="argument" name="dir" />
        <variable citdl="True" ilk="argument" name="delete" />
      </scope>
      <scope classrefs="object" doc="Temporary file wrapper, specialized to switch from StringIO to a real file when it exceeds a certain size or when a fileno is needed." ilk="class" line="485" lineend="615" name="SpooledTemporaryFile">
        <variable attributes="property" citdl="self._file.softspace" line="593" name="softspace" />
        <variable attributes="property" citdl="self._file.encoding" line="552" name="encoding" />
        <variable attributes="protected __instancevar__" citdl="int" line="502" name="_max_size" />
        <scope ilk="function" line="614" lineend="615" name="xreadlines" returns="self._file.xreadlines()" signature="xreadlines(*args)">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="586" lineend="587" name="readlines" returns="self._file.readlines()" signature="readlines(*args)">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="559" lineend="560" name="flush" signature="flush()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="544" lineend="545" name="close" signature="close()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="562" lineend="563" name="isatty" returns="self._file.isatty()" signature="isatty()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="515" lineend="524" name="rollover" signature="rollover()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable citdl="_io.BytesIO()" line="517" name="file" />
          <variable citdl="TemporaryFile()" line="518" name="newfile" />
        </scope>
        <scope ilk="function" line="589" lineend="590" name="seek" signature="seek(*args)">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="492" lineend="507" name="__init__" signature="SpooledTemporaryFile(max_size=0, mode=&apos;w+b&apos;, buffering=-1, encoding=None, newline=None, suffix=&apos;&apos;, prefix=template, dir=None)">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="max_size" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable citdl="int" ilk="argument" name="buffering" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="newline" />
          <variable citdl="str" ilk="argument" name="suffix" />
          <variable citdl="str" ilk="argument" name="prefix" />
          <variable ilk="argument" name="dir" />
        </scope>
        <variable attributes="property" citdl="self._file.newlines" line="574" name="newlines" />
        <scope attributes="protected" ilk="function" line="509" lineend="513" name="_check" signature="_check(file)">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="int" line="511" name="max_size" />
        </scope>
        <scope ilk="function" line="532" lineend="535" name="__enter__" returns="SpooledTemporaryFile" signature="__enter__()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="577" lineend="578" name="next" returns="self._file.next" signature="next()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="602" lineend="606" name="write" returns="file.write()" signature="write(s)">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <variable citdl="_io.BytesIO()" line="603" name="file" />
          <variable citdl="file.write()" line="604" name="rv" />
        </scope>
        <variable attributes="property" citdl="self._file.closed" line="548" name="closed" />
        <variable attributes="protected" citdl="False" line="490" name="_rolled" />
        <variable attributes="protected __instancevar__" citdl="_io.BytesIO()" line="496" name="_file" />
        <scope ilk="function" line="596" lineend="597" name="tell" returns="self._file.tell()" signature="tell()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="566" lineend="567" name="mode (property getter)" returns="self._file.mode" signature="mode (property getter)()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="537" lineend="538" name="__exit__" signature="__exit__(exc, value, tb)">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable ilk="argument" name="exc" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="tb" />
        </scope>
        <scope ilk="function" line="599" lineend="600" name="truncate" signature="truncate()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="580" lineend="581" name="read" returns="self._file.read()" signature="read(*args)">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="593" lineend="594" name="softspace (property getter)" returns="self._file.softspace" signature="softspace (property getter)()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="552" lineend="553" name="encoding (property getter)" returns="self._file.encoding" signature="encoding (property getter)()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="541" lineend="542" name="__iter__" returns="self._file.__iter__()" signature="__iter__()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="504" name="_TemporaryFileArgs" />
        <scope ilk="function" line="608" lineend="612" name="writelines" returns="file.writelines()" signature="writelines(iterable)">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable ilk="argument" name="iterable" />
          <variable citdl="_io.BytesIO()" line="609" name="file" />
          <variable citdl="file.writelines()" line="610" name="rv" />
        </scope>
        <scope ilk="function" line="583" lineend="584" name="readline" returns="self._file.readline()" signature="readline(*args)">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="555" lineend="557" name="fileno" returns="self._file.fileno()" signature="fileno()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="574" lineend="575" name="newlines (property getter)" returns="self._file.newlines" signature="newlines (property getter)()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="self._file.name" line="570" name="name" />
        <scope attributes="__hidden__" ilk="function" line="570" lineend="571" name="name (property getter)" returns="self._file.name" signature="name (property getter)()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="self._file.mode" line="566" name="mode" />
        <scope attributes="__hidden__" ilk="function" line="548" lineend="549" name="closed (property getter)" returns="self._file.closed" signature="closed (property getter)()">
          <variable citdl="SpooledTemporaryFile" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="int" line="71" name="TMP_MAX" />
      <scope doc="Create and return a temporary file." ilk="function" line="455" lineend="483" name="TemporaryFile" returns="_io.open()" signature="TemporaryFile(mode=&apos;w+b&apos;, buffering=-1, encoding=None, newline=None, suffix=&apos;&apos;, prefix=&apos;tmp&apos;, dir=None, delete=True)">
        <variable citdl="str" ilk="argument" name="suffix" />
        <variable ilk="argument" name="encoding" />
        <variable ilk="argument" name="newline" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <variable citdl="int" line="474" name="flags" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="int" ilk="argument" name="buffering" />
        <variable citdl="gettempdir()" ilk="argument" name="dir" />
      </scope>
      <variable citdl="list" line="20" name="__all__" />
      <import module="_errno" />
      <import module="_io" />
      <import module="_os" />
      <import module="_thread" />
      <scope doc="Accessor for tempfile.tempdir." ilk="function" line="239" lineend="249" name="gettempdir" returns="_get_default_tempdir()" signature="gettempdir()">
        <variable citdl="_get_default_tempdir()" line="246" name="tempdir" />
      </scope>
      <scope doc="Accessor for tempdir.template." ilk="function" line="233" lineend="235" name="gettempprefix" returns="str" signature="gettempprefix()" />
      <scope doc="User-callable function to create and return a unique temporary directory." ilk="function" line="288" lineend="317" name="mkdtemp" returns="_os.path.join()" signature="mkdtemp(suffix=&apos;&apos;, prefix=&apos;tmp&apos;, dir=None)">
        <variable citdl="next()" line="307" name="name" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <variable citdl="_get_candidate_names()" line="304" name="names" />
        <variable citdl="_os.path.join()" line="308" name="file" />
        <variable citdl="gettempdir()" ilk="argument" name="dir" />
        <variable citdl="str" ilk="argument" name="suffix" />
      </scope>
      <scope doc="User-callable function to create and return a unique temporary file." ilk="function" line="251" lineend="285" name="mkstemp" returns="_mkstemp_inner()" signature="mkstemp(suffix=&apos;&apos;, prefix=&apos;tmp&apos;, dir=None, text=False)">
        <variable citdl="False" ilk="argument" name="text" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <variable citdl="int" line="281" name="flags" />
        <variable citdl="str" ilk="argument" name="suffix" />
        <variable citdl="gettempdir()" ilk="argument" name="dir" />
      </scope>
      <scope doc="User-callable function to return a unique temporary file name." ilk="function" line="319" lineend="346" name="mktemp" returns="_os.path.join()" signature="mktemp(suffix=&apos;&apos;, prefix=&apos;tmp&apos;, dir=None)">
        <variable citdl="next()" line="341" name="name" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <variable citdl="_get_candidate_names()" line="339" name="names" />
        <variable citdl="_os.path.join()" line="342" name="file" />
        <variable citdl="gettempdir()" ilk="argument" name="dir" />
        <variable citdl="str" ilk="argument" name="suffix" />
      </scope>
      <variable citdl="NoneType" line="237" name="tempdir" />
      <variable citdl="str" line="75" name="template" />
      <scope attributes="protected __hidden__" ilk="function" line="95" lineend="101" name="_exists" returns="bool" signature="_exists(fn)">
        <variable ilk="argument" name="fn" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="88" lineend="93" name="_stat" signature="_stat(fn)">
        <variable ilk="argument" name="fn" />
        <variable citdl="open()" line="90" name="f" />
      </scope>
      <scope attributes="protected __hidden__" doc="Temporary file wrapper" ilk="class" line="349" lineend="412" name="_TemporaryFileWrapper">
        <scope attributes="__ctor__" ilk="function" line="357" lineend="361" name="__init__" signature="_TemporaryFileWrapper(file, name, delete=True)">
          <variable citdl="_TemporaryFileWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="name" />
          <variable citdl="True" ilk="argument" name="delete" />
        </scope>
        <variable attributes="__instancevar__" line="358" name="file" />
        <variable attributes="__instancevar__" line="359" name="name" />
        <variable attributes="__instancevar__" citdl="False" line="360" name="close_called" />
        <variable attributes="__instancevar__" citdl="True" line="361" name="delete" />
        <scope ilk="function" line="363" lineend="371" name="__getattr__" returns="getattr()" signature="__getattr__(name)">
          <variable citdl="_TemporaryFileWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable line="367" name="file" />
          <variable citdl="getattr()" line="368" name="a" />
        </scope>
        <scope ilk="function" line="375" lineend="377" name="__enter__" returns="_TemporaryFileWrapper" signature="__enter__()">
          <variable citdl="_TemporaryFileWrapper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="380" lineend="381" name="__iter__" returns="iter()" signature="__iter__()">
          <variable citdl="_TemporaryFileWrapper" ilk="argument" name="self" />
        </scope>
        <variable citdl="_os.unlink" line="392" name="unlink" />
        <scope ilk="function" line="394" lineend="399" name="close" signature="close()">
          <variable citdl="_TemporaryFileWrapper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="401" lineend="402" name="__del__" signature="__del__()">
          <variable citdl="_TemporaryFileWrapper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="411" lineend="412" name="__exit__" signature="__exit__(exc, value, tb)">
          <variable citdl="_TemporaryFileWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="exc" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="tb" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="43" lineend="51" name="_set_cloexec" signature="_set_cloexec(fd)">
        <variable ilk="argument" name="fd" />
        <variable citdl="_fcntl.fcntl()" line="45" name="flags" />
      </scope>
      <scope attributes="protected __hidden__" doc="Generate a list of candidate temporary directories which _get_default_tempdir will try." ilk="function" line="136" lineend="159" name="_candidate_tempdir_list" returns="list" signature="_candidate_tempdir_list()">
        <variable citdl="list" line="140" name="dirlist" />
        <variable citdl="_os.getenv()" line="144" name="dirname" />
      </scope>
      <scope attributes="protected __hidden__" doc="Calculate the default directory to use for temporary files." ilk="function" line="161" lineend="193" name="_get_default_tempdir" returns="_os.path.normcase()" signature="_get_default_tempdir()">
        <variable citdl="_RandomNameSequence" line="170" name="namer" />
        <variable citdl="_candidate_tempdir_list()" line="171" name="dirlist" />
        <variable citdl="_os.path.normcase()" line="175" name="dir" />
        <variable citdl="next()" line="178" name="name" />
        <variable citdl="_os.path.join()" line="179" name="filename" />
        <variable citdl="_os.open()" line="181" name="fd" />
        <variable citdl="_io.open()" line="182" name="fp" />
      </scope>
      <scope attributes="protected __hidden__" doc="Code common to mkstemp, TemporaryFile, and NamedTemporaryFile." ilk="function" line="211" lineend="228" name="_mkstemp_inner" returns="tuple" signature="_mkstemp_inner(dir, pre, suf, flags)">
        <variable ilk="argument" name="dir" />
        <variable ilk="argument" name="pre" />
        <variable ilk="argument" name="suf" />
        <variable ilk="argument" name="flags" />
        <variable citdl="_get_candidate_names()" line="214" name="names" />
        <variable citdl="next()" line="217" name="name" />
        <variable citdl="_os.path.join()" line="218" name="file" />
        <variable citdl="_os.open()" line="220" name="fd" />
      </scope>
      <variable attributes="protected __hidden__" line="195" name="_name_sequence" />
      <scope attributes="protected __hidden__" doc="Common setup sequence for all user-callable interfaces." ilk="function" line="197" lineend="208" name="_get_candidate_names" returns="_RandomNameSequence" signature="_get_candidate_names()">
        <variable attributes="protected" citdl="_RandomNameSequence" line="205" name="_name_sequence" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="66" name="_bin_openflags" />
      <variable attributes="protected __hidden__" citdl="int" line="60" name="_text_openflags" />
      <variable attributes="protected __hidden__" citdl="_thread.allocate_lock" line="58" name="_allocate_lock" />
      <scope attributes="protected __hidden__" doc="An instance of _RandomNameSequence generates an endless sequence of unpredictable strings which can safely be incorporated into file names." ilk="class" line="103" lineend="134" name="_RandomNameSequence">
        <variable citdl="str" line="111" name="characters" />
        <scope attributes="__ctor__" ilk="function" line="115" lineend="118" name="__init__" signature="_RandomNameSequence()">
          <variable citdl="_RandomNameSequence" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="_allocate_lock()" line="116" name="mutex" />
        <variable attributes="__instancevar__" citdl="_Random()" line="117" name="rng" />
        <variable attributes="__instancevar__" citdl="_os.path.normcase" line="118" name="normcase" />
        <scope ilk="function" line="120" lineend="121" name="__iter__" returns="_RandomNameSequence" signature="__iter__()">
          <variable citdl="_RandomNameSequence" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="123" lineend="134" name="__next__" returns="_RandomNameSequence.normcase()" signature="__next__()">
          <variable citdl="_RandomNameSequence" ilk="argument" name="self" />
          <variable citdl="_allocate_lock()" line="124" name="m" />
          <variable citdl="str" line="125" name="c" />
          <variable citdl="self.rng.choice" line="126" name="choose" />
          <variable citdl="list" line="130" name="letters" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="_allocate_lock()" line="79" name="_once_lock" />
    </scope>
    <scope doc="This module provides the components needed to build your own __import__ function.  Undocumented functions are obsolete." ilk="blob" lang="Python3" name="imp">
      <variable citdl="int" name="C_BUILTIN" />
      <variable citdl="int" name="C_EXTENSION" />
      <variable citdl="int" name="IMP_HOOK" />
      <scope classrefs="object" doc="Null importer object" ilk="class" name="NullImporter" />
      <variable citdl="int" name="PKG_DIRECTORY" />
      <variable citdl="int" name="PY_CODERESOURCE" />
      <variable citdl="int" name="PY_COMPILED" />
      <variable citdl="int" name="PY_FROZEN" />
      <variable citdl="int" name="PY_RESOURCE" />
      <variable citdl="int" name="PY_SOURCE" />
      <variable citdl="int" name="SEARCH_ERROR" />
      <scope doc="Acquires the interpreter&apos;s import lock for the current thread." ilk="function" name="acquire_lock" signature="acquire_lock() -&gt; None" />
      <scope doc="Search for a module." ilk="function" name="find_module" signature="find_module(name, [path]) -&gt; (file, filename, (suffix, mode, type))" />
      <scope ilk="function" name="get_frozen_object" />
      <scope doc="Return the magic number for .pyc or .pyo files." ilk="function" name="get_magic" returns="str" signature="get_magic() -&gt; string" />
      <scope doc="Return a list of (suffix, mode, type) tuples describing the files that find_module() looks for." ilk="function" name="get_suffixes" signature="get_suffixes() -&gt; [(suffix, mode, type), ...]" />
      <scope ilk="function" name="init_builtin" />
      <scope ilk="function" name="init_frozen" />
      <scope ilk="function" name="is_builtin" />
      <scope ilk="function" name="is_frozen" />
      <scope ilk="function" name="is_frozen_package" />
      <scope ilk="function" name="load_compiled" />
      <scope ilk="function" name="load_dynamic" />
      <scope doc="Load a module, given information returned by find_module()." ilk="function" name="load_module" returns="module" signature="load_module(name, file, filename, (suffix, mode, type)) -&gt; module" />
      <scope ilk="function" name="load_package" />
      <scope ilk="function" name="load_source" />
      <scope doc="Return True if the import lock is currently held, else False." ilk="function" name="lock_held" signature="lock_held() -&gt; boolean" />
      <scope doc="Create a new module. Do not enter it in sys.modules." ilk="function" name="new_module" returns="module" signature="new_module(name) -&gt; module" />
      <scope doc="Release the interpreter&apos;s import lock." ilk="function" name="release_lock" signature="release_lock() -&gt; None" />
      <scope doc="Reload the module." ilk="function" name="reload" returns="module" signature="reload(module) -&gt; module" />
    </scope>
    <scope doc="# This directory is a Python package." ilk="blob" lang="Python3" name="html">
      <import module="parser" />
    </scope>
    <scope doc="# Module implementing synchronization primitives # # multiprocessing/synchronize.py" ilk="blob" lang="Python3" name="multiprocessing.synchronize">
      <scope classrefs="Semaphore" ilk="class" line="101" lineend="112" name="BoundedSemaphore">
        <scope ilk="function" line="106" lineend="112" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="BoundedSemaphore" ilk="argument" name="self" />
          <variable citdl="self._semlock._get_value()" line="108" name="value" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="103" lineend="104" name="__init__" signature="BoundedSemaphore(value=1)">
          <variable citdl="BoundedSemaphore" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="value" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="169" lineend="267" name="Condition">
        <scope ilk="function" line="198" lineend="204" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="Condition" ilk="argument" name="self" />
          <variable citdl="self._woken_count._semlock._get_value()" line="200" name="num_waiters" />
        </scope>
        <scope ilk="function" line="188" lineend="189" name="__enter__" returns="self._lock.__enter__()" signature="__enter__()">
          <variable citdl="Condition" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="191" lineend="192" name="__exit__" returns="self._lock.__exit__()" signature="__exit__(*args)">
          <variable citdl="Condition" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="183" lineend="186" name="__setstate__" signature="__setstate__(state)">
          <variable citdl="Condition" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
        <variable attributes="__instancevar__" citdl="self._lock.acquire" line="195" name="acquire" />
        <variable attributes="protected __instancevar__" citdl="RLock" line="172" name="_lock" />
        <variable attributes="protected __instancevar__" citdl="Semaphore" line="175" name="_wait_semaphore" />
        <variable attributes="protected __instancevar__" citdl="Semaphore" line="173" name="_sleeping_count" />
        <scope ilk="function" line="229" lineend="244" name="notify" signature="notify()">
          <variable citdl="Condition" ilk="argument" name="self" />
          <variable citdl="self._sleeping_count.acquire()" line="236" name="res" />
        </scope>
        <scope attributes="protected" ilk="function" line="194" lineend="196" name="_make_methods" signature="_make_methods()">
          <variable citdl="Condition" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self._lock.release" line="196" name="release" />
        <scope ilk="function" line="246" lineend="267" name="notify_all" signature="notify_all()">
          <variable citdl="Condition" ilk="argument" name="self" />
          <variable citdl="self._sleeping_count.acquire()" line="253" name="res" />
          <variable citdl="int" line="256" name="sleepers" />
        </scope>
        <scope ilk="function" line="178" lineend="181" name="__getstate__" returns="tuple" signature="__getstate__()">
          <variable citdl="Condition" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Semaphore" line="174" name="_woken_count" />
        <scope attributes="__ctor__" ilk="function" line="171" lineend="176" name="__init__" signature="Condition(lock=None)">
          <variable citdl="Condition" ilk="argument" name="self" />
          <variable ilk="argument" name="lock" />
        </scope>
        <scope ilk="function" line="206" lineend="227" name="wait" signature="wait(timeout=None)">
          <variable citdl="Condition" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="self._lock._semlock._count()" line="214" name="count" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="273" lineend="318" name="Event">
        <variable attributes="protected __instancevar__" citdl="Semaphore" line="277" name="_flag" />
        <scope ilk="function" line="289" lineend="296" name="set" signature="set()">
          <variable citdl="Event" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="298" lineend="303" name="clear" signature="clear()">
          <variable citdl="Event" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Condition" line="276" name="_cond" />
        <scope ilk="function" line="279" lineend="287" name="is_set" returns="bool" signature="is_set()">
          <variable citdl="Event" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="275" lineend="277" name="__init__" signature="Event()">
          <variable citdl="Event" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="305" lineend="318" name="wait" returns="bool" signature="wait(timeout=None)">
          <variable citdl="Event" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs" ilk="class" name="Finalize" />
      <scope classrefs="SemLock" ilk="class" line="118" lineend="137" name="Lock">
        <scope ilk="function" line="123" lineend="137" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Lock" ilk="argument" name="self" />
          <variable citdl="str" line="126" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="120" lineend="121" name="__init__" signature="Lock()">
          <variable citdl="Lock" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Start a subprocess to run the code of a process object" ilk="class" name="Popen" />
      <variable citdl="int" name="RECURSIVE_MUTEX" />
      <scope classrefs="SemLock" ilk="class" line="143" lineend="163" name="RLock">
        <scope ilk="function" line="148" lineend="163" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="RLock" ilk="argument" name="self" />
          <variable citdl="str" line="151" name="name" />
          <variable citdl="str" line="154" name="count" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="145" lineend="146" name="__init__" signature="RLock()">
          <variable citdl="RLock" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="int" name="SEMAPHORE" />
      <variable citdl="int" line="40" name="SEM_VALUE_MAX" />
      <scope classrefs="object" ilk="class" line="46" lineend="76" name="SemLock">
        <variable attributes="__instancevar__" citdl="self._semlock.acquire" line="59" name="acquire" />
        <scope ilk="function" line="65" lineend="66" name="__exit__" returns="self._semlock.__exit__()" signature="__exit__(*args)">
          <variable citdl="SemLock" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_multiprocessing.SemLock._rebuild()" line="74" name="_semlock" />
        <scope ilk="function" line="73" lineend="76" name="__setstate__" signature="__setstate__(state)">
          <variable citdl="SemLock" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
        <scope ilk="function" line="62" lineend="63" name="__enter__" returns="self._semlock.__enter__()" signature="__enter__()">
          <variable citdl="SemLock" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="58" lineend="60" name="_make_methods" signature="_make_methods()">
          <variable citdl="SemLock" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self._semlock.release" line="60" name="release" />
        <scope ilk="function" line="68" lineend="71" name="__getstate__" returns="tuple" signature="__getstate__()">
          <variable citdl="SemLock" ilk="argument" name="self" />
          <variable citdl="self._semlock" line="70" name="sl" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="48" lineend="56" name="__init__" signature="SemLock(kind, value, maxvalue)">
          <variable citdl="SemLock" ilk="argument" name="self" />
          <variable ilk="argument" name="kind" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="maxvalue" />
          <variable citdl="_multiprocessing.SemLock()" line="49" name="sl" />
          <scope attributes="protected" ilk="function" line="54" lineend="55" name="_after_fork" signature="_after_fork(obj)">
            <variable ilk="argument" name="obj" />
          </scope>
        </scope>
      </scope>
      <scope classrefs="SemLock" ilk="class" line="82" lineend="95" name="Semaphore">
        <scope ilk="function" line="87" lineend="88" name="get_value" returns="self._semlock._get_value()" signature="get_value()">
          <variable citdl="Semaphore" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="90" lineend="95" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Semaphore" ilk="argument" name="self" />
          <variable citdl="self._semlock._get_value()" line="92" name="value" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="84" lineend="85" name="__init__" signature="Semaphore(value=1)">
          <variable citdl="Semaphore" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="value" />
        </scope>
      </scope>
      <variable citdl="list" line="9" name="__all__" />
      <import module="_multiprocessing" />
      <scope ilk="function" name="assert_spawning" signature="assert_spawning(self)" />
      <scope doc="Return process object representing the current process" ilk="function" name="current_process" signature="current_process()" />
      <scope ilk="function" name="debug" signature="debug(msg, *args)" />
      <import module="os" />
      <scope ilk="function" name="register_after_fork" signature="register_after_fork(obj, func)" />
      <import module="sys" />
      <import module="threading" />
    </scope>
    <scope doc="# Module which supports allocation of memory from an mmap # # multiprocessing/heap.py" ilk="blob" lang="Python3" name="multiprocessing.heap">
      <scope classrefs="object" ilk="class" name="Arena" />
      <scope classrefs="object" ilk="class" name="BufferWrapper" />
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs" ilk="class" name="Finalize" />
      <scope classrefs="object" ilk="class" name="Heap" />
      <variable citdl="list" name="__all__" />
      <import module="_multiprocessing" />
      <scope ilk="function" name="assert_spawning" signature="assert_spawning(self)" />
      <import module="bisect" />
      <scope ilk="function" name="info" signature="info(msg, *args)" />
      <import module="itertools" />
      <import module="mmap" />
      <import module="os" />
      <import module="sys" />
      <import module="tempfile" />
      <import module="threading" />
      <scope classrefs="object" ilk="class" name="win32" />
    </scope>
    <scope doc="# Dummy file to make this directory a package." ilk="blob" lang="Python3" name="lib2to3.fixes">
      <import module="fix_apply" />
      <import module="fix_buffer" />
      <import module="fix_callable" />
      <import module="fix_execfile" />
      <import module="fix_future" />
      <import module="fix_getcwdu" />
      <import module="fix_has_key" />
      <import module="fix_idioms" />
      <import module="fix_imports" />
      <import module="fix_imports2" />
      <import module="fix_input" />
      <import module="fix_isinstance" />
      <import module="fix_itertools" />
      <import module="fix_map" />
      <import module="fix_metaclass" />
      <import module="fix_methodattrs" />
      <import module="fix_ne" />
      <import module="fix_nonzero" />
      <import module="fix_numliterals" />
      <import module="fix_operator" />
      <import module="fix_print" />
      <import module="fix_raise" />
      <import module="fix_raw_input" />
      <import module="fix_reduce" />
      <import module="fix_renames" />
      <import module="fix_standarderror" />
      <import module="fix_tuple_params" />
      <import module="fix_types" />
      <import module="fix_unicode" />
      <import module="fix_xrange" />
      <import module="fix_xreadlines" />
      <import module="fix_zip" />
    </scope>
    <scope doc="# Module which supports allocation of ctypes objects from shared memory # # multiprocessing/sharedctypes.py" ilk="blob" lang="Python3" name="multiprocessing.sharedctypes">
      <scope doc="Return a synchronization wrapper for a RawArray" ilk="function" name="Array" signature="Array(typecode_or_type, size_or_initializer, **kwds)" />
      <scope classrefs="_Pickler" ilk="class" name="ForkingPickler" />
      <scope doc="Returns a recursive lock object" ilk="function" name="RLock" signature="RLock()" />
      <scope doc="Returns a ctypes array allocated from shared memory" ilk="function" name="RawArray" signature="RawArray(typecode_or_type, size_or_initializer)" />
      <scope doc="Returns a ctypes object allocated from shared memory" ilk="function" name="RawValue" signature="RawValue(typecode_or_type, *args)" />
      <scope classrefs="SynchronizedBase" ilk="class" name="Synchronized" />
      <scope classrefs="SynchronizedBase" ilk="class" name="SynchronizedArray" />
      <scope classrefs="object" ilk="class" name="SynchronizedBase" />
      <scope classrefs="SynchronizedArray" ilk="class" name="SynchronizedString" />
      <scope doc="Return a synchronization wrapper for a Value" ilk="function" name="Value" signature="Value(typecode_or_type, *args, lock=None)" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="assert_spawning" signature="assert_spawning(self)" />
      <variable citdl="WeakKeyDictionary" name="class_cache" />
      <scope ilk="function" name="copy" signature="copy(obj)" />
      <import module="ctypes" />
      <import module="heap" />
      <scope ilk="function" name="make_property" signature="make_property(name)" />
      <variable citdl="dict" name="prop_cache" />
      <scope ilk="function" name="rebuild_ctype" signature="rebuild_ctype(type_, wrapper, length)" />
      <scope ilk="function" name="reduce_ctype" signature="reduce_ctype(obj)" />
      <scope ilk="function" name="synchronized" signature="synchronized(obj, lock=None)" />
      <import module="sys" />
      <variable citdl="str" name="template" />
      <variable citdl="dict" name="typecode_to_type" />
      <import module="weakref" />
    </scope>
    <scope doc="Fix incompatible imports and module references that must be fixed after fix_imports." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_imports2">
      <scope classrefs="FixImports" ilk="class" line="12" lineend="16" name="FixImports2">
        <variable citdl="int" line="14" name="run_order" />
        <variable citdl="dict" line="16" name="mapping" />
      </scope>
      <variable citdl="dict" line="6" name="MAPPING" />
      <import module="fix_imports" />
    </scope>
    <scope doc="Fixer that changes unicode to str, unichr to chr, and u&quot;...&quot; into &quot;...&quot;." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_unicode">
      <scope classrefs="BaseFix" ilk="class" line="12" lineend="25" name="FixUnicode">
        <variable citdl="str" line="14" name="PATTERN" />
        <scope ilk="function" line="16" lineend="25" name="transform" returns="node.clone()" signature="transform(node, results)">
          <variable citdl="FixUnicode" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="node.clone()" line="18" name="new" />
        </scope>
      </scope>
      <import module="fixer_base" />
      <import module="re" />
      <import module="token" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="10" name="_literal_re" />
      <variable attributes="protected __hidden__" citdl="dict" line="9" name="_mapping" />
    </scope>
    <scope doc="This is an implementation of decimal floating point arithmetic based on the General Decimal Arithmetic Specification: " ilk="blob" lang="Python3" name="decimal">
      <variable citdl="Context" name="BasicContext" />
      <scope classrefs="DecimalException" doc="Exponent of a 0 changed to fit bounds.  This occurs and signals clamped if the exponent of a result has been" ilk="class" name="Clamped" />
      <scope classrefs="object" doc="Contains the context for a Decimal instance.  Contains:" ilk="class" name="Context" />
      <scope classrefs="InvalidOperation" doc="Trying to convert badly formed string.  This occurs and signals invalid-operation if an string is being" ilk="class" name="ConversionSyntax" />
      <scope classrefs="object" doc="Floating point class for decimal arithmetic." ilk="class" name="Decimal" />
      <scope classrefs="ArithmeticError" doc="Base exception class.  Used exceptions derive from this." ilk="class" name="DecimalException" />
      <scope classrefs="tuple" doc="DecimalTuple(sign, digits, exponent)" ilk="class" name="DecimalTuple" />
      <variable citdl="Context" name="DefaultContext" />
      <scope classrefs="DecimalException ZeroDivisionError" doc="Division by 0.  This occurs and signals division-by-zero if division of a finite number" ilk="class" name="DivisionByZero" />
      <scope classrefs="InvalidOperation" doc="Cannot perform the division adequately.  This occurs and signals invalid-operation if the integer result of a" ilk="class" name="DivisionImpossible" />
      <scope classrefs="InvalidOperation ZeroDivisionError" doc="Undefined result of division.  This occurs and signals invalid-operation if division by zero was" ilk="class" name="DivisionUndefined" />
      <variable citdl="Context" name="ExtendedContext" />
      <scope classrefs="DecimalException" doc="Had to round, losing information.  This occurs and signals inexact whenever the result of an operation is" ilk="class" name="Inexact" />
      <scope classrefs="InvalidOperation" doc="Invalid context.  Unknown rounding, for example.  This occurs and signals invalid-operation if an invalid context was" ilk="class" name="InvalidContext" />
      <scope classrefs="DecimalException" doc="An invalid operation was performed.  Various bad things cause this:" ilk="class" name="InvalidOperation" />
      <scope classrefs="Inexact Rounded" doc="Numerical overflow.  This occurs and signals overflow if the adjusted exponent of a result" ilk="class" name="Overflow" />
      <variable citdl="str" name="ROUND_05UP" />
      <variable citdl="str" name="ROUND_CEILING" />
      <variable citdl="str" name="ROUND_DOWN" />
      <variable citdl="str" name="ROUND_FLOOR" />
      <variable citdl="str" name="ROUND_HALF_DOWN" />
      <variable citdl="str" name="ROUND_HALF_EVEN" />
      <variable citdl="str" name="ROUND_HALF_UP" />
      <variable citdl="str" name="ROUND_UP" />
      <scope classrefs="DecimalException" doc="Number got rounded (not  necessarily changed during rounding).  This occurs and signals rounded whenever the result of an operation is" ilk="class" name="Rounded" />
      <scope classrefs="DecimalException" doc="Exponent &lt; Emin before rounding.  This occurs and signals subnormal whenever the result of a conversion or" ilk="class" name="Subnormal" />
      <scope classrefs="Inexact Rounded Subnormal" doc="Numerical underflow with result rounded to 0.  This occurs and signals underflow if a result is inexact and the" ilk="class" name="Underflow" />
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="__version__" />
      <import module="_copy" />
      <import module="_locale" />
      <import module="_math" />
      <import module="_numbers" />
      <scope doc="Returns this thread&apos;s context." ilk="function" name="getcontext" signature="getcontext(_local=&lt;_thread._local object at 0x039ECCF8&gt;)" />
      <scope doc="Return a context manager for a copy of the supplied context" ilk="function" name="localcontext" signature="localcontext(ctx=None)" />
      <scope doc="Set this thread&apos;s context to context." ilk="function" name="setcontext" signature="setcontext(context, _local=&lt;_thread._local object at 0x039ECCF8&gt;)" />
    </scope>
    <scope doc="Fixer for intern().  intern(s) -&gt; sys.intern(s)" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_intern">
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope classrefs="BaseFix" ilk="class" line="14" lineend="44" name="FixIntern">
        <variable citdl="str" line="16" name="PATTERN" />
        <scope ilk="function" line="26" lineend="44" name="transform" returns="pytree.Node()" signature="transform(node, results)">
          <variable citdl="FixIntern" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="self.syms" line="27" name="syms" />
          <variable line="28" name="obj" />
          <variable citdl="obj.clone()" line="30" name="newarglist" />
          <variable citdl="list" line="33" name="after" />
          <variable citdl="pytree.Node()" line="36" name="new" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <import module="pytree" />
      <scope doc="Works like `does_tree_import` but adds an import statement if it was not imported." ilk="function" name="touch_import" signature="touch_import(package, name, node)" />
    </scope>
    <scope doc="Additional handlers for the logging package for Python. The core package is based on PEP 282 and comments thereto in comp.lang.python, and influenced by Apache&apos;s log4j system." ilk="blob" lang="Python3" name="logging.handlers">
      <scope classrefs="FileHandler" doc="Base class for handlers that rotate log files at a certain point. Not meant to be instantiated directly.  Instead, use RotatingFileHandler or TimedRotatingFileHandler." ilk="class" line="47" lineend="77" name="BaseRotatingHandler">
        <variable attributes="__instancevar__" line="60" name="mode" />
        <scope doc="Emit a record." ilk="function" line="63" lineend="77" name="emit" signature="emit(record)">
          <variable citdl="BaseRotatingHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <scope attributes="__ctor__" doc="Use the specified filename for streamed logging" ilk="function" line="53" lineend="61" name="__init__" signature="BaseRotatingHandler(filename, mode, encoding=None, delay=0)">
          <variable citdl="BaseRotatingHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="mode" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="int" ilk="argument" name="delay" />
        </scope>
        <variable attributes="__instancevar__" line="61" name="encoding" />
      </scope>
      <scope classrefs="Handler" doc="A handler class which buffers logging records in memory. Whenever each record is added to the buffer, a check is made to see if the buffer should be flushed. If it should, then flush() is expected to do what&apos;s needed." ilk="class" line="1040" lineend="1089" name="BufferingHandler">
        <variable attributes="__instancevar__" line="1051" name="capacity" />
        <variable attributes="__instancevar__" citdl="list" line="1052" name="buffer" />
        <scope attributes="__ctor__" doc="Initialize the handler with the buffer size." ilk="function" line="1046" lineend="1052" name="__init__" signature="BufferingHandler(capacity)">
          <variable citdl="BufferingHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="capacity" />
        </scope>
        <scope doc="Override to implement custom flushing behaviour." ilk="function" line="1074" lineend="1080" name="flush" signature="flush()">
          <variable citdl="BufferingHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Close the handler." ilk="function" line="1082" lineend="1089" name="close" signature="close()">
          <variable citdl="BufferingHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="1063" lineend="1072" name="emit" signature="emit(record)">
          <variable citdl="BufferingHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <scope doc="Should the handler flush its buffer?" ilk="function" line="1054" lineend="1061" name="shouldFlush" returns="bool" signature="shouldFlush(record)">
          <variable citdl="BufferingHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
      </scope>
      <variable citdl="int" line="41" name="DEFAULT_HTTP_LOGGING_PORT" />
      <variable citdl="int" line="42" name="DEFAULT_SOAP_LOGGING_PORT" />
      <variable citdl="int" line="39" name="DEFAULT_TCP_LOGGING_PORT" />
      <variable citdl="int" line="40" name="DEFAULT_UDP_LOGGING_PORT" />
      <scope classrefs="SocketHandler" doc="A handler class which writes logging records, in pickle format, to a datagram socket.  The pickle which is sent is that of the LogRecord&apos;s attribute dictionary (__dict__), so that the receiver does not need to" ilk="class" line="554" lineend="590" name="DatagramHandler">
        <scope doc="The factory method of SocketHandler is here overridden to create a UDP socket (SOCK_DGRAM)." ilk="function" line="572" lineend="578" name="makeSocket" returns="socket.socket()" signature="makeSocket()">
          <variable citdl="DatagramHandler" ilk="argument" name="self" />
          <variable citdl="socket.socket()" line="577" name="s" />
        </scope>
        <scope doc="Send a pickled string to a socket." ilk="function" line="580" lineend="590" name="send" signature="send(s)">
          <variable citdl="DatagramHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope attributes="__ctor__" doc="Initializes the handler with a specific host address and port." ilk="function" line="565" lineend="570" name="__init__" signature="DatagramHandler(host, port)">
          <variable citdl="DatagramHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="570" name="closeOnError" />
      </scope>
      <scope classrefs="Handler" doc="A class which sends records to a Web server, using either GET or POST semantics." ilk="class" line="978" lineend="1038" name="HTTPHandler">
        <variable attributes="__instancevar__" line="993" name="url" />
        <variable attributes="__instancevar__" citdl="method.upper()" line="994" name="method" />
        <variable attributes="__instancevar__" line="992" name="host" />
        <scope doc="Emit a record." ilk="function" line="1004" lineend="1038" name="emit" signature="emit(record)">
          <import line="1011" module="http.client" />
          <import line="1011" module="urllib.parse" />
          <variable citdl="HTTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="list" line="1012" name="host" />
          <variable citdl="http.client.HTTP()" line="1013" name="h" />
          <variable citdl="str" line="1014" name="url" />
          <variable citdl="urllib.parse.urlencode()" line="1015" name="data" />
          <variable citdl="str" line="1018" name="sep" />
          <variable citdl="host.find()" line="1025" name="i" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize the instance with the host, the request URL, and the method (&quot;GET&quot; or &quot;POST&quot;)" ilk="function" line="983" lineend="994" name="__init__" signature="HTTPHandler(host, url, method=&apos;GET&apos;)">
          <variable citdl="HTTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="url" />
          <variable citdl="method.upper()" ilk="argument" name="method" />
        </scope>
        <scope doc="Default implementation of mapping the log record into a dict that is sent as the CGI data." ilk="function" line="996" lineend="1002" name="mapLogRecord" returns="dict" signature="mapLogRecord(record)">
          <variable citdl="HTTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
      </scope>
      <scope classrefs="BufferingHandler" doc="A handler class which buffers logging records in memory, periodically flushing them to a target handler. Flushing occurs whenever the buffer is full, or when an event of a certain severity or greater is seen." ilk="class" line="1091" lineend="1139" name="MemoryHandler">
        <variable attributes="__instancevar__" line="1107" name="target" />
        <variable attributes="__instancevar__" citdl="logging.ERROR" line="1106" name="flushLevel" />
        <variable attributes="__instancevar__" citdl="list" line="1131" name="buffer" />
        <scope doc="Set the target handler for this handler." ilk="function" line="1116" lineend="1120" name="setTarget" signature="setTarget(target)">
          <variable citdl="MemoryHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="target" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize the handler with the buffer size, the level at which flushing should occur and an optional target." ilk="function" line="1097" lineend="1107" name="__init__" signature="MemoryHandler(capacity, flushLevel=logging.ERROR, target=None)">
          <variable citdl="MemoryHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="capacity" />
          <variable citdl="logging.ERROR" ilk="argument" name="flushLevel" />
          <variable ilk="argument" name="target" />
        </scope>
        <scope doc="For a MemoryHandler, flushing means just sending the buffered records to the target, if there is one." ilk="function" line="1122" lineend="1131" name="flush" signature="flush()">
          <variable citdl="MemoryHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Flush, set the target to None and lose the buffer." ilk="function" line="1133" lineend="1139" name="close" signature="close()">
          <variable citdl="MemoryHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Check for buffer full or a record at the flushLevel or higher." ilk="function" line="1109" lineend="1114" name="shouldFlush" returns="bool" signature="shouldFlush(record)">
          <variable citdl="MemoryHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
      </scope>
      <scope classrefs="Handler" doc="A handler class which sends events to the NT Event Log. Adds a registry entry for the specified application name. If no dllname is provided, win32service.pyd (which contains some basic message" ilk="class" line="878" lineend="976" name="NTEventLogHandler">
        <variable attributes="__instancevar__" citdl="win32evtlog.EVENTLOG_ERROR_TYPE" line="901" name="deftype" />
        <scope doc="Return the event category for the record." ilk="function" line="924" lineend="931" name="getEventCategory" returns="int" signature="getEventCategory(record)">
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="win32evtlogutil" line="893" name="_welu" />
        <scope doc="Return the event type for the record." ilk="function" line="933" lineend="944" name="getEventType" returns="self.typemap.get()" signature="getEventType(record)">
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <variable attributes="__instancevar__" line="892" name="appname" />
        <scope doc="Return the message ID for the event record." ilk="function" line="914" lineend="922" name="getMessageID" returns="int" signature="getMessageID(record)">
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="946" lineend="963" name="emit" signature="emit(record)">
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="getMessageID()" line="955" name="id" />
          <variable citdl="getEventCategory()" line="956" name="cat" />
          <variable citdl="getEventType()" line="957" name="type" />
          <variable citdl="self.format()" line="958" name="msg" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="899" name="logtype" />
        <variable attributes="__instancevar__" citdl="os.path.split()" line="898" name="dllname" />
        <scope doc="Clean up this handler." ilk="function" line="965" lineend="976" name="close" signature="close()">
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="902" name="typemap" />
        <scope attributes="__ctor__" ilk="function" line="888" lineend="912" name="__init__" signature="NTEventLogHandler(appname, dllname=None, logtype=&apos;Application&apos;)">
          <import line="891" module="win32evtlogutil" />
          <import line="891" module="win32evtlog" />
          <variable citdl="NTEventLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="appname" />
          <variable citdl="os.path.split()" ilk="argument" name="dllname" />
          <variable citdl="str" ilk="argument" name="logtype" />
        </scope>
      </scope>
      <scope classrefs="BaseRotatingHandler" doc="Handler for logging to a set of files, which switches from one file to the next when the current file reaches a certain size." ilk="class" line="79" lineend="148" name="RotatingFileHandler">
        <variable attributes="__instancevar__" citdl="int" line="109" name="backupCount" />
        <variable attributes="__instancevar__" citdl="self._open()" line="132" name="stream" />
        <scope doc="Determine if rollover should occur." ilk="function" line="134" lineend="148" name="shouldRollover" returns="int" signature="shouldRollover(record)">
          <variable citdl="RotatingFileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="self.format()" line="144" name="msg" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="108" name="maxBytes" />
        <scope doc="Do a rollover, as described in __init__()." ilk="function" line="111" lineend="132" name="doRollover" signature="doRollover()">
          <variable citdl="RotatingFileHandler" ilk="argument" name="self" />
          <variable citdl="str" line="119" name="sfn" />
          <variable citdl="str" line="120" name="dfn" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="131" name="mode" />
        <scope attributes="__ctor__" doc="Open the specified file and use it as the stream for logging." ilk="function" line="84" lineend="109" name="__init__" signature="RotatingFileHandler(filename, mode=&apos;a&apos;, maxBytes=0, backupCount=0, encoding=None, delay=0)">
          <variable citdl="RotatingFileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable citdl="int" ilk="argument" name="maxBytes" />
          <variable citdl="int" ilk="argument" name="backupCount" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="int" ilk="argument" name="delay" />
        </scope>
      </scope>
      <scope classrefs="Handler" doc="A handler class which sends an SMTP email for each logging event." ilk="class" line="791" lineend="876" name="SMTPHandler">
        <variable attributes="__instancevar__" line="813" name="username" />
        <scope doc="Return the current date and time formatted for a MIME header." ilk="function" line="835" lineend="845" name="date_time" returns="tuple" signature="date_time()">
          <variable citdl="SMTPHandler" ilk="argument" name="self" />
          <variable citdl="str" line="841" name="s" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="817" name="toaddrs" />
        <variable citdl="list" line="831" name="monthname" />
        <variable attributes="__instancevar__" line="809" name="mailport" />
        <variable attributes="__instancevar__" line="814" name="fromaddr" />
        <variable citdl="list" line="829" name="weekdayname" />
        <variable attributes="__instancevar__" line="809" name="mailhost" />
        <scope doc="Determine the subject for the email." ilk="function" line="820" lineend="827" name="getSubject" signature="getSubject(record)">
          <variable citdl="SMTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="847" lineend="876" name="emit" signature="emit(record)">
          <import line="854" module="smtplib" />
          <import line="856" module="email.utils" symbol="formatdate" />
          <variable citdl="SMTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="SMTPHandler.date_time" line="858" name="formatdate" />
          <variable citdl="smtplib.SMTP_PORT" line="859" name="port" />
          <variable citdl="smtplib.SMTP()" line="862" name="smtp" />
          <variable citdl="self.format()" line="863" name="msg" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize the handler." ilk="function" line="795" lineend="818" name="__init__" signature="SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None)">
          <variable citdl="SMTPHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="mailhost" />
          <variable ilk="argument" name="fromaddr" />
          <variable citdl="list" ilk="argument" name="toaddrs" />
          <variable ilk="argument" name="subject" />
          <variable ilk="argument" name="credentials" />
        </scope>
        <variable attributes="__instancevar__" line="818" name="subject" />
      </scope>
      <variable citdl="int" name="ST_DEV" />
      <variable citdl="int" name="ST_INO" />
      <variable citdl="int" line="43" name="SYSLOG_UDP_PORT" />
      <scope classrefs="Handler" doc="A handler class which writes logging records, in pickle format, to a streaming socket. The socket is kept open across logging calls. If the peer resets it, an attempt is made to reconnect on the next call." ilk="class" line="399" lineend="552" name="SocketHandler">
        <scope doc="Handle an error during logging." ilk="function" line="514" lineend="526" name="handleError" signature="handleError(record)">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <variable attributes="__instancevar__" citdl="float" line="429" name="retryStart" />
        <scope doc="Emit a record." ilk="function" line="528" lineend="543" name="emit" signature="emit(record)">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="makePickle()" line="538" name="s" />
        </scope>
        <scope doc="Pickles the record in binary format with a length prefix, and returns it ready for transmission across the socket." ilk="function" line="499" lineend="512" name="makePickle" returns="struct.pack()" signature="makePickle(record)">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="record.exc_info" line="504" name="ei" />
          <variable citdl="self.format()" line="506" name="dummy" />
          <variable citdl="pickle.dumps()" line="508" name="s" />
          <variable citdl="struct.pack()" line="511" name="slen" />
        </scope>
        <scope doc="Try to create a socket, using an exponential backoff with a max retry time." ilk="function" line="444" lineend="470" name="createSocket" signature="createSocket()">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable citdl="time.time()" line="450" name="now" />
          <variable citdl="int" line="455" name="attempt" />
        </scope>
        <variable attributes="__instancevar__" citdl="makeSocket()" line="423" name="sock" />
        <scope doc="Send a pickled string to the socket." ilk="function" line="472" lineend="497" name="send" signature="send(s)">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <variable citdl="int" line="489" name="sentsofar" />
          <variable citdl="len()" line="490" name="left" />
          <variable citdl="self.sock.send()" line="492" name="sent" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="424" name="closeOnError" />
        <variable attributes="__instancevar__" citdl="float" line="430" name="retryMax" />
        <variable attributes="__instancevar__" line="421" name="host" />
        <variable attributes="__instancevar__" citdl="time.time()" line="425" name="retryTime" />
        <scope doc="Closes the socket." ilk="function" line="545" lineend="552" name="close" signature="close()">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="float" line="465" name="retryPeriod" />
        <scope doc="A factory method which allows subclasses to define the precise type of socket they want." ilk="function" line="433" lineend="442" name="makeSocket" returns="socket.socket()" signature="makeSocket(timeout=1)">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="timeout" />
          <variable citdl="socket.socket()" line="438" name="s" />
        </scope>
        <variable attributes="__instancevar__" citdl="float" line="431" name="retryFactor" />
        <variable attributes="__instancevar__" line="422" name="port" />
        <scope attributes="__ctor__" doc="Initializes the handler with a specific host address and port." ilk="function" line="412" lineend="431" name="__init__" signature="SocketHandler(host, port)">
          <variable citdl="SocketHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
        </scope>
      </scope>
      <scope classrefs="Handler" doc="A handler class which sends formatted logging records to a syslog server. Based on Sam Rushing&apos;s syslog module: http://www.nightmare.com/squirl/python-ext/misc/syslog.py" ilk="class" line="592" lineend="789" name="SysLogHandler">
        <variable citdl="int" line="613" name="LOG_CRIT" />
        <scope doc="Closes the socket." ilk="function" line="743" lineend="749" name="close" signature="close()">
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="704" name="facility" />
        <variable citdl="int" line="614" name="LOG_ERR" />
        <variable citdl="dict" line="685" name="priority_map" />
        <variable citdl="int" line="612" name="LOG_ALERT" />
        <variable citdl="int" line="623" name="LOG_MAIL" />
        <variable citdl="int" line="611" name="LOG_EMERG" />
        <variable citdl="int" line="630" name="LOG_CRON" />
        <variable citdl="int" line="626" name="LOG_SYSLOG" />
        <variable citdl="int" line="617" name="LOG_INFO" />
        <variable citdl="dict" line="643" name="priority_names" />
        <scope attributes="__ctor__" doc="Initialize a handler." ilk="function" line="693" lineend="712" name="__init__" signature="SysLogHandler(address=(&apos;localhost&apos;, SYSLOG_UDP_PORT), facility=LOG_USER)">
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="address" />
          <variable citdl="int" ilk="argument" name="facility" />
        </scope>
        <variable citdl="int" line="615" name="LOG_WARNING" />
        <variable citdl="int" line="618" name="LOG_DEBUG" />
        <variable citdl="int" line="631" name="LOG_AUTHPRIV" />
        <variable citdl="int" line="624" name="LOG_DAEMON" />
        <variable citdl="int" line="634" name="LOG_LOCAL0" />
        <variable citdl="str" line="728" name="log_format_string" />
        <variable citdl="int" line="621" name="LOG_KERN" />
        <variable attributes="__instancevar__" line="712" name="formatter" />
        <variable citdl="int" line="622" name="LOG_USER" />
        <variable citdl="int" line="629" name="LOG_UUCP" />
        <scope doc="Map a logging level name to a key in the priority_names map." ilk="function" line="751" lineend="759" name="mapPriority" returns="self.priority_map.get()" signature="mapPriority(levelName)">
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="levelName" />
        </scope>
        <variable attributes="__instancevar__" citdl="tuple" line="703" name="address" />
        <variable citdl="int" line="638" name="LOG_LOCAL4" />
        <variable citdl="int" line="639" name="LOG_LOCAL5" />
        <variable citdl="int" line="640" name="LOG_LOCAL6" />
        <variable citdl="int" line="641" name="LOG_LOCAL7" />
        <variable citdl="int" line="628" name="LOG_NEWS" />
        <variable citdl="int" line="635" name="LOG_LOCAL1" />
        <variable citdl="int" line="636" name="LOG_LOCAL2" />
        <variable citdl="int" line="637" name="LOG_LOCAL3" />
        <variable citdl="int" line="625" name="LOG_AUTH" />
        <variable attributes="__instancevar__" citdl="socket.socket()" line="710" name="socket" />
        <variable citdl="int" line="627" name="LOG_LPR" />
        <variable citdl="dict" line="658" name="facility_names" />
        <scope doc="Encode the facility and priority." ilk="function" line="730" lineend="741" name="encodePriority" returns="int" signature="encodePriority(facility, priority)">
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="facility" />
          <variable ilk="argument" name="priority" />
        </scope>
        <scope attributes="protected" ilk="function" line="714" lineend="722" name="_connect_unixsocket" signature="_connect_unixsocket(address)">
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="address" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="706" name="unixsocket" />
        <variable citdl="int" line="616" name="LOG_NOTICE" />
        <scope doc="Emit a record." ilk="function" line="761" lineend="789" name="emit" signature="emit(record)">
          <variable citdl="SysLogHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="self.format()" line="768" name="msg" />
        </scope>
      </scope>
      <scope classrefs="BaseRotatingHandler" doc="Handler for logging to a file, rotating the log file at certain timed intervals. " ilk="class" line="150" lineend="346" name="TimedRotatingFileHandler">
        <variable attributes="__instancevar__" citdl="int()" line="197" name="dayOfWeek" />
        <variable attributes="__instancevar__" citdl="False" line="162" name="utc" />
        <scope doc="Determine the files to delete when rolling over." ilk="function" line="279" lineend="300" name="getFilesToDelete" returns="list" signature="getFilesToDelete()">
          <variable citdl="TimedRotatingFileHandler" ilk="argument" name="self" />
          <variable citdl="os.listdir()" line="286" name="fileNames" />
          <variable citdl="list" line="287" name="result" />
          <variable citdl="str" line="288" name="prefix" />
          <variable citdl="len()" line="289" name="plen" />
          <variable citdl="list" line="292" name="suffix" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="161" name="backupCount" />
        <variable attributes="__instancevar__" citdl="str" line="177" name="suffix" />
        <variable attributes="__instancevar__" citdl="self._open()" line="332" name="stream" />
        <scope doc="Determine if rollover should occur." ilk="function" line="266" lineend="277" name="shouldRollover" returns="int" signature="shouldRollover(record)">
          <variable citdl="TimedRotatingFileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="int()" line="273" name="t" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="176" name="interval" />
        <variable attributes="__instancevar__" citdl="when.upper()" line="160" name="when" />
        <scope doc="do a rollover; in this case, a date/time stamp is appended to the filename when the rollover happens." ilk="function" line="302" lineend="346" name="doRollover" signature="doRollover()">
          <variable citdl="TimedRotatingFileHandler" ilk="argument" name="self" />
          <variable citdl="self.computeRollover()" line="313" name="t" />
          <variable citdl="time.gmtime()" line="315" name="timeTuple" />
          <variable citdl="self.baseFilename" line="318" name="dfn" />
          <variable citdl="int()" line="333" name="currentTime" />
          <variable citdl="computeRollover()" line="334" name="newRolloverAt" />
          <variable line="339" name="dstNow" />
          <variable line="340" name="dstAtRollover" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="331" name="mode" />
        <variable attributes="__instancevar__" citdl="computeRollover()" line="205" name="rolloverAt" />
        <scope doc="Work out the rollover time based on the specified time." ilk="function" line="207" lineend="264" name="computeRollover" returns="int()" signature="computeRollover(currentTime)">
          <variable citdl="TimedRotatingFileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="currentTime" />
          <variable citdl="int" line="211" name="result" />
          <variable citdl="time.localtime()" line="222" name="t" />
          <variable line="225" name="currentHour" />
          <variable line="226" name="currentMinute" />
          <variable line="227" name="currentSecond" />
          <variable citdl="int" line="229" name="r" />
          <variable line="248" name="day" />
          <variable citdl="int()" line="251" name="daysToWait" />
          <variable citdl="int()" line="254" name="newRolloverAt" />
          <variable line="256" name="dstNow" />
          <variable line="257" name="dstAtRollover" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="178" name="extMatch" />
        <scope attributes="__ctor__" ilk="function" line="158" lineend="205" name="__init__" signature="TimedRotatingFileHandler(filename, when=&apos;h&apos;, interval=1, backupCount=0, encoding=None, delay=0, utc=False)">
          <variable citdl="TimedRotatingFileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="str" ilk="argument" name="when" />
          <variable citdl="int" ilk="argument" name="interval" />
          <variable citdl="int" ilk="argument" name="backupCount" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="int" ilk="argument" name="delay" />
          <variable citdl="False" ilk="argument" name="utc" />
        </scope>
      </scope>
      <scope classrefs="FileHandler" doc="A handler for logging to a file, which watches the file to see if it has changed while in use. This can happen because of usage of programs such as newsyslog and logrotate which perform" ilk="class" line="348" lineend="397" name="WatchedFileHandler">
        <variable attributes="__instancevar__" citdl="self._open()" line="393" name="stream" />
        <variable attributes="__instancevar__" citdl="int" line="371" name="ino" />
        <variable attributes="__instancevar__" citdl="int" line="371" name="dev" />
        <scope attributes="__ctor__" ilk="function" line="368" lineend="374" name="__init__" signature="WatchedFileHandler(filename, mode=&apos;a&apos;, encoding=None, delay=0)">
          <variable citdl="WatchedFileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="int" ilk="argument" name="delay" />
          <variable citdl="os.stat()" line="373" name="stat" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="376" lineend="397" name="emit" signature="emit(record)">
          <variable citdl="WatchedFileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="os.stat()" line="385" name="stat" />
          <variable citdl="int" line="386" name="changed" />
        </scope>
      </scope>
      <import module="codecs" />
      <import module="logging" />
      <import module="os" />
      <import module="pickle" />
      <import module="re" />
      <import module="socket" />
      <import module="struct" />
      <import module="time" />
      <variable attributes="protected __hidden__" citdl="int" line="45" name="_MIDNIGHT" />
      <variable attributes="__hidden__" line="33" name="codecs" />
    </scope>
    <scope doc="Token constants (from &quot;token.h&quot;)." ilk="blob" lang="Python3" name="token">
      <variable citdl="int" line="32" name="AMPER" />
      <variable citdl="int" line="54" name="AMPEREQUAL" />
      <variable citdl="int" line="62" name="AT" />
      <variable citdl="int" line="45" name="CIRCUMFLEX" />
      <variable citdl="int" line="56" name="CIRCUMFLEXEQUAL" />
      <variable citdl="int" line="24" name="COLON" />
      <variable citdl="int" line="25" name="COMMA" />
      <variable citdl="int" line="19" name="DEDENT" />
      <variable citdl="int" line="36" name="DOT" />
      <variable citdl="int" line="60" name="DOUBLESLASH" />
      <variable citdl="int" line="61" name="DOUBLESLASHEQUAL" />
      <variable citdl="int" line="48" name="DOUBLESTAR" />
      <variable citdl="int" line="59" name="DOUBLESTAREQUAL" />
      <variable citdl="int" line="64" name="ELLIPSIS" />
      <variable citdl="int" line="13" name="ENDMARKER" />
      <variable citdl="int" line="40" name="EQEQUAL" />
      <variable citdl="int" line="35" name="EQUAL" />
      <variable citdl="int" line="66" name="ERRORTOKEN" />
      <variable citdl="int" line="34" name="GREATER" />
      <variable citdl="int" line="43" name="GREATEREQUAL" />
      <variable citdl="int" line="18" name="INDENT" />
      <scope ilk="function" line="84" lineend="85" name="ISEOF" returns="bool" signature="ISEOF(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope ilk="function" line="81" lineend="82" name="ISNONTERMINAL" returns="bool" signature="ISNONTERMINAL(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope ilk="function" line="78" lineend="79" name="ISTERMINAL" returns="bool" signature="ISTERMINAL(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <variable citdl="int" line="38" name="LBRACE" />
      <variable citdl="int" line="46" name="LEFTSHIFT" />
      <variable citdl="int" line="57" name="LEFTSHIFTEQUAL" />
      <variable citdl="int" line="33" name="LESS" />
      <variable citdl="int" line="42" name="LESSEQUAL" />
      <variable citdl="int" line="20" name="LPAR" />
      <variable citdl="int" line="22" name="LSQB" />
      <variable citdl="int" line="50" name="MINEQUAL" />
      <variable citdl="int" line="28" name="MINUS" />
      <variable citdl="int" line="14" name="NAME" />
      <variable citdl="int" line="17" name="NEWLINE" />
      <variable citdl="int" line="41" name="NOTEQUAL" />
      <variable citdl="int" line="68" name="NT_OFFSET" />
      <variable citdl="int" line="15" name="NUMBER" />
      <variable citdl="int" line="67" name="N_TOKENS" />
      <variable citdl="int" line="65" name="OP" />
      <variable citdl="int" line="37" name="PERCENT" />
      <variable citdl="int" line="53" name="PERCENTEQUAL" />
      <variable citdl="int" line="27" name="PLUS" />
      <variable citdl="int" line="49" name="PLUSEQUAL" />
      <variable citdl="int" line="63" name="RARROW" />
      <variable citdl="int" line="39" name="RBRACE" />
      <variable citdl="int" line="47" name="RIGHTSHIFT" />
      <variable citdl="int" line="58" name="RIGHTSHIFTEQUAL" />
      <variable citdl="int" line="21" name="RPAR" />
      <variable citdl="int" line="23" name="RSQB" />
      <variable citdl="int" line="26" name="SEMI" />
      <variable citdl="int" line="30" name="SLASH" />
      <variable citdl="int" line="52" name="SLASHEQUAL" />
      <variable citdl="int" line="29" name="STAR" />
      <variable citdl="int" line="51" name="STAREQUAL" />
      <variable citdl="int" line="16" name="STRING" />
      <variable citdl="int" line="44" name="TILDE" />
      <variable citdl="int" line="31" name="VBAR" />
      <variable citdl="int" line="55" name="VBAREQUAL" />
      <scope ilk="function" line="88" lineend="138" name="main" signature="main()">
        <variable citdl="open()" line="97" name="fp" />
        <variable citdl="list" line="92" name="inFileName" />
        <variable citdl="int()" line="111" name="val" />
        <variable line="120" name="format" />
        <variable citdl="str" line="93" name="outFileName" />
        <variable citdl="list" line="91" name="args" />
        <variable citdl="list" line="101" name="lines" />
        <variable citdl="dict" line="106" name="tokens" />
        <variable citdl="sorted()" line="113" name="keys" />
        <variable citdl="re.compile()" line="103" name="prog" />
        <variable citdl="format.index()" line="124" name="end" />
        <variable citdl="format.index()" line="123" name="start" />
        <variable citdl="prog.match()" line="108" name="match" />
      </scope>
      <variable citdl="dict" line="71" name="tok_name" />
    </scope>
    <scope doc="Encodings and related functions." ilk="blob" lang="Python3" name="email.encoders">
      <variable citdl="list" line="7" name="__all__" />
      <scope doc="Set the Content-Transfer-Encoding header to 7bit or 8bit." ilk="function" line="50" lineend="70" name="encode_7or8bit" signature="encode_7or8bit(msg)">
        <variable ilk="argument" name="msg" />
        <variable citdl="msg.get_charset()" line="63" name="charset" />
        <variable citdl="msg.get_charset()" line="64" name="output_cset" />
        <variable citdl="msg.get_payload()" line="52" name="orig" />
      </scope>
      <scope doc="Encode the message&apos;s payload in Base64." ilk="function" line="26" lineend="34" name="encode_base64" signature="encode_base64(msg)">
        <variable ilk="argument" name="msg" />
        <variable citdl="_bencode()" line="32" name="encdata" />
        <variable citdl="msg.get_payload()" line="31" name="orig" />
      </scope>
      <scope doc="Do nothing." ilk="function" line="74" name="encode_noop" signature="encode_noop(msg)">
        <variable ilk="argument" name="msg" />
      </scope>
      <scope doc="Encode the message&apos;s payload in quoted-printable." ilk="function" line="38" lineend="46" name="encode_quopri" signature="encode_quopri(msg)">
        <variable ilk="argument" name="msg" />
        <variable citdl="_qencode()" line="44" name="encdata" />
        <variable citdl="msg.get_payload()" line="43" name="orig" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="20" lineend="23" name="_qencode" returns="enc.replace()" signature="_qencode(s)">
        <variable ilk="argument" name="s" />
        <variable citdl="_encodestring()" line="21" name="enc" />
      </scope>
    </scope>
    <scope doc="Parser driver.  This provides a high-level interface to parse a file into a syntax tree." ilk="blob" lang="Python3" name="lib2to3.pgen2.driver">
      <scope classrefs="object" ilk="class" line="28" lineend="105" name="Driver">
        <variable attributes="__instancevar__" line="35" name="convert" />
        <scope doc="Parse a stream and return the syntax tree." ilk="function" line="85" lineend="88" name="parse_stream_raw" returns="Driver.parse_tokens()" signature="parse_stream_raw(stream, debug=False)">
          <variable citdl="Driver" ilk="argument" name="self" />
          <variable ilk="argument" name="stream" />
          <variable citdl="False" ilk="argument" name="debug" />
          <variable citdl="tokenize.generate_tokens()" line="87" name="tokens" />
        </scope>
        <variable attributes="__instancevar__" line="31" name="grammar" />
        <scope doc="Parse a stream and return the syntax tree." ilk="function" line="90" lineend="92" name="parse_stream" returns="Driver.parse_stream_raw()" signature="parse_stream(stream, debug=False)">
          <variable citdl="Driver" ilk="argument" name="self" />
          <variable ilk="argument" name="stream" />
          <variable citdl="False" ilk="argument" name="debug" />
        </scope>
        <scope doc="Parse a string and return the syntax tree." ilk="function" line="102" lineend="105" name="parse_string" returns="Driver.parse_tokens()" signature="parse_string(text, debug=False)">
          <variable citdl="Driver" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable citdl="False" ilk="argument" name="debug" />
          <variable citdl="tokenize.generate_tokens()" line="104" name="tokens" />
        </scope>
        <scope doc="Parse a file and return the syntax tree." ilk="function" line="94" lineend="100" name="parse_file" returns="Driver.parse_stream()" signature="parse_file(filename, encoding=None, debug=False)">
          <variable citdl="Driver" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="False" ilk="argument" name="debug" />
          <variable citdl="codecs.open()" line="96" name="stream" />
        </scope>
        <scope doc="Parse a series of tokens and return the syntax tree." ilk="function" line="37" lineend="83" name="parse_tokens" returns="p.rootnode" signature="parse_tokens(tokens, debug=False)">
          <variable citdl="Driver" ilk="argument" name="self" />
          <variable ilk="argument" name="tokens" />
          <variable citdl="False" ilk="argument" name="debug" />
          <variable citdl="parse.Parser()" line="40" name="p" />
          <variable citdl="int" line="42" name="lineno" />
          <variable citdl="int" line="43" name="column" />
          <variable line="44" name="type" />
          <variable citdl="str" line="45" name="prefix" />
        </scope>
        <variable attributes="__instancevar__" citdl="logging.getLogger()" line="34" name="logger" />
        <scope attributes="__ctor__" ilk="function" line="30" lineend="35" name="__init__" signature="Driver(grammar, convert=None, logger=None)">
          <variable citdl="Driver" ilk="argument" name="self" />
          <variable ilk="argument" name="grammar" />
          <variable ilk="argument" name="convert" />
          <variable citdl="logging.getLogger()" ilk="argument" name="logger" />
        </scope>
      </scope>
      <variable citdl="list" line="16" name="__all__" />
      <variable citdl="str" line="14" name="__author__" />
      <import module="codecs" />
      <scope doc="Generator that behaves like readline without using StringIO." ilk="function" line="108" lineend="113" name="generate_lines" signature="generate_lines(text)">
        <variable ilk="argument" name="text" />
      </scope>
      <import module="grammar" />
      <scope doc="Load the grammar (maybe from a pickle)." ilk="function" line="116" lineend="138" name="load_grammar" returns="grammar.Grammar()" signature="load_grammar(gt=&apos;Grammar.txt&apos;, gp=None, save=True, force=False, logger=None)">
        <variable citdl="str" ilk="argument" name="gt" />
        <variable citdl="False" ilk="argument" name="force" />
        <variable citdl="pgen.generate_grammar()" line="128" name="g" />
        <variable citdl="str" ilk="argument" name="gp" />
        <variable citdl="str" line="124" name="tail" />
        <variable citdl="logging.getLogger()" ilk="argument" name="logger" />
        <variable citdl="True" ilk="argument" name="save" />
      </scope>
      <import module="logging" />
      <import module="os" />
      <import module="parse" />
      <import module="pgen" />
      <import module="sys" />
      <import module="token" />
      <import module="tokenize" />
      <scope attributes="protected __hidden__" doc="Inquire whether file a was written since file b." ilk="function" line="141" lineend="147" name="_newer" returns="bool" signature="_newer(a, b)">
        <variable ilk="argument" name="a" />
        <variable ilk="argument" name="b" />
      </scope>
    </scope>
    <scope doc="distutils.command.build_clib  Implements the Distutils &apos;build_clib&apos; command, to build a C/C++ library" ilk="blob" lang="Python3" name="distutils.command.build_clib">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" line="7" name="__revision__" />
      <scope classrefs="Command" ilk="class" line="30" lineend="211" name="build_clib">
        <variable citdl="list" line="34" name="user_options" />
        <variable attributes="__instancevar__" line="64" name="undef" />
        <variable attributes="__instancevar__" citdl="int" line="66" name="force" />
        <variable citdl="str" line="32" name="description" />
        <scope ilk="function" line="54" lineend="67" name="initialize_options" signature="initialize_options()">
          <variable citdl="build_clib" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="new_compiler()" line="67" name="compiler" />
        <scope ilk="function" line="183" lineend="211" name="build_libraries" signature="build_libraries(libraries)">
          <variable citdl="build_clib" ilk="argument" name="self" />
          <variable ilk="argument" name="libraries" />
          <variable citdl="build_info.get()" line="185" name="sources" />
          <variable citdl="build_info.get()" line="198" name="macros" />
          <variable citdl="build_info.get()" line="199" name="include_dirs" />
          <variable citdl="self.compiler.compile()" line="200" name="objects" />
        </scope>
        <scope ilk="function" line="96" lineend="117" name="run" signature="run()">
          <import line="101" module="distutils.ccompiler" symbol="new_compiler" />
          <variable citdl="build_clib" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="56" name="build_temp" />
        <variable attributes="__instancevar__" citdl="self.distribution.libraries" line="59" name="libraries" />
        <scope doc="Ensure that the list of libraries is valid." ilk="function" line="120" lineend="152" name="check_library_list" signature="check_library_list(libraries)">
          <variable citdl="build_clib" ilk="argument" name="self" />
          <variable ilk="argument" name="libraries" />
        </scope>
        <variable citdl="list" line="49" name="help_options" />
        <variable citdl="list" line="47" name="boolean_options" />
        <scope ilk="function" line="156" lineend="165" name="get_library_names" returns="list" signature="get_library_names()">
          <variable citdl="build_clib" ilk="argument" name="self" />
          <variable citdl="list" line="162" name="lib_names" />
        </scope>
        <scope ilk="function" line="70" lineend="90" name="finalize_options" signature="finalize_options()">
          <variable citdl="build_clib" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="65" name="debug" />
        <scope ilk="function" line="168" lineend="180" name="get_source_files" returns="list" signature="get_source_files()">
          <variable citdl="build_clib" ilk="argument" name="self" />
          <variable citdl="list" line="170" name="filenames" />
          <variable citdl="build_info.get()" line="172" name="sources" />
        </scope>
        <variable attributes="__instancevar__" line="63" name="define" />
        <variable attributes="__instancevar__" line="55" name="build_clib" />
        <variable attributes="__instancevar__" citdl="self.include_dirs.split()" line="62" name="include_dirs" />
      </scope>
      <scope doc="Do any platform-specific customization of a CCompiler instance." ilk="function" name="customize_compiler" signature="customize_compiler(compiler)" />
      <import module="log" />
      <import module="os" />
      <scope ilk="function" line="25" lineend="27" name="show_compilers" signature="show_compilers()" />
    </scope>
    <scope doc="Module for parsing and testing package version predicate strings." ilk="blob" lang="Python3" name="distutils.versionpredicate">
      <scope classrefs="object" doc="Parse and test package version predicates.  &gt;&gt;&gt; v = VersionPredicate(&apos;pyepat.abc (&gt;1.0, &lt;3333.3a1, !=1555.1b3)&apos;)" ilk="class" line="31" lineend="138" name="VersionPredicate">
        <variable attributes="__instancevar__" citdl="list" line="116" name="pred" />
        <scope ilk="function" line="123" lineend="128" name="__str__" returns="str" signature="__str__()">
          <variable citdl="VersionPredicate" ilk="argument" name="self" />
          <variable citdl="list" line="125" name="seq" />
        </scope>
        <scope doc="True if version is compatible with all the predicates in self." ilk="function" line="130" lineend="138" name="satisfied_by" returns="bool" signature="satisfied_by(version)">
          <variable citdl="VersionPredicate" ilk="argument" name="self" />
          <variable ilk="argument" name="version" />
        </scope>
        <scope attributes="__ctor__" doc="Parse a version predicate string." ilk="function" line="96" lineend="121" name="__init__" signature="VersionPredicate(versionPredicateStr)">
          <variable citdl="VersionPredicate" ilk="argument" name="self" />
          <variable citdl="versionPredicateStr.strip()" ilk="argument" name="versionPredicateStr" />
          <variable citdl="re_validPackage.match()" line="106" name="match" />
          <variable citdl="paren.strip()" line="110" name="paren" />
          <variable line="115" name="str" />
        </scope>
      </scope>
      <variable citdl="dict" line="28" name="compmap" />
      <import module="distutils" />
      <import module="operator" />
      <import module="re" />
      <variable citdl="SRE_Pattern" line="12" name="re_paren" />
      <variable citdl="SRE_Pattern" line="13" name="re_splitComparison" />
      <variable citdl="SRE_Pattern" line="8" name="re_validPackage" />
      <scope doc="Parse a single version comparison." ilk="function" line="17" lineend="26" name="splitUp" returns="tuple" signature="splitUp(pred)">
        <variable ilk="argument" name="pred" />
        <variable citdl="re_splitComparison.match()" line="22" name="res" />
      </scope>
      <scope doc="Return the name and optional version number of a provision." ilk="function" line="143" lineend="166" name="split_provision" returns="tuple" signature="split_provision(value)">
        <variable attributes="protected" citdl="re.compile()" line="156" name="_provision_rx" />
        <variable citdl="m.group()" line="163" name="ver" />
        <variable citdl="_provision_rx.match()" line="160" name="m" />
        <variable citdl="value.strip()" ilk="argument" name="value" />
      </scope>
      <variable attributes="protected __hidden__" line="141" name="_provision_rx" />
    </scope>
    <scope doc="Turtle graphics is a popular way for introducing programming to kids. It was part of the original Logo programming language developed by Wally Feurzig and Seymour Papert in 1966." ilk="blob" lang="Python3" name="turtle">
      <scope classrefs="Widget" doc="Canvas widget to display graphical elements like lines or text." ilk="class" line="455" name="Canvas" />
      <scope classrefs="RawTurtle" doc="RawTurtle auto-crating (scrolled) canvas.  When a Turtle object is created or a function derived from some" ilk="class" line="3815" name="Pen" />
      <scope classrefs="TPen TNavigator" doc="Animation part of the RawTurtle. Puts RawTurtle upon a TurtleScreen and provides tools for its animation." ilk="class" line="3649" name="RawPen" />
      <scope classrefs="TPen TNavigator" doc="Animation part of the RawTurtle. Puts RawTurtle upon a TurtleScreen and provides tools for its animation." ilk="class" line="2509" lineend="3647" name="RawTurtle">
        <variable attributes="__instancevar__" citdl="_TurtleImage" line="2542" name="turtle" />
        <variable attributes="protected __instancevar__" citdl="self._orient.rotate()" line="3273" name="_orient" />
        <scope attributes="protected" ilk="function" line="2689" lineend="2690" name="_color" returns="self.screen._color()" signature="_color(args)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="args" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="2551" name="stampItems" />
        <variable attributes="protected __instancevar__" citdl="math.cos()" line="2945" name="_shearfactor" />
        <variable citdl="list" line="2514" name="screens" />
        <scope doc="Set turtle shape to shape with given name / return current shapename." ilk="function" line="2750" lineend="2775" name="shape" returns="self.turtle.shapeIndex" signature="shape(name=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="protected" doc="Perform a Turtle-data update." ilk="function" line="2650" lineend="2666" name="_update" signature="_update()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable citdl="TurtleScreen" line="2653" name="screen" />
        </scope>
        <scope doc="Set or return the current shearfactor." ilk="function" line="2817" lineend="2838" name="shearfactor" returns="self._shearfactor" signature="shearfactor(shear=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="shear" />
        </scope>
        <scope attributes="protected" doc="Does the main part of the work for undo()" ilk="function" line="3587" lineend="3617" name="_undo" signature="_undo(action, data)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="action" />
          <variable ilk="argument" name="data" />
          <variable citdl="self.undobuffer.pop()" line="3595" name="dummy" />
          <variable line="3597" name="stitem" />
          <variable line="3602" name="item" />
        </scope>
        <scope doc="Return the current shape polygon as tuple of coordinate pairs." ilk="function" line="2962" lineend="2976" name="get_shapepoly" returns="self._getshapepoly()" signature="get_shapepoly()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable line="2974" name="shape" />
        </scope>
        <scope doc="Return the Turtleobject itself." ilk="function" line="3492" lineend="3507" name="getturtle" returns="RawTurtle" signature="getturtle()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="2544" name="_creatingPoly" />
        <scope attributes="__ctor__" ilk="function" line="2516" lineend="2554" name="__init__" signature="RawTurtle(canvas=None, shape=[_CFG], undobuffersize=[_CFG], visible=[_CFG])">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="canvas" />
          <variable ilk="argument" name="shape" />
          <variable ilk="argument" name="undobuffersize" />
          <variable ilk="argument" name="visible" />
          <variable citdl="TurtleScreen" line="2537" name="screen" />
        </scope>
        <scope attributes="protected" doc="Calculate transformed shape polygon according to resizemode and shapetransform." ilk="function" line="2979" lineend="2990" name="_getshapepoly" returns="tuple()" signature="_getshapepoly(polygon, compound=False)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="polygon" />
          <variable citdl="False" ilk="argument" name="compound" />
          <variable citdl="max()" line="2986" name="l" />
          <variable citdl="int" line="2987" name="t21" />
          <variable citdl="max()" line="2987" name="t22" />
          <variable citdl="int" line="2987" name="t12" />
          <variable citdl="max()" line="2987" name="t11" />
        </scope>
        <scope doc="Return the lastly recorded polygon." ilk="function" line="3463" lineend="3474" name="get_poly" returns="tuple()" signature="get_poly()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Performs the writing for write()" ilk="function" line="3397" lineend="3405" name="_write" returns="end" signature="_write(txt, align, font)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="txt" />
          <variable ilk="argument" name="align" />
          <variable ilk="argument" name="font" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="2549" name="currentLine" />
        <scope doc="Return the TurtleScreen object, the turtle is drawing  on." ilk="function" line="3476" lineend="3490" name="getscreen" returns="TurtleScreen" signature="getscreen()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Manages the correct rendering of the turtle with respect to its shape, resizemode, stretch and tilt etc." ilk="function" line="2992" lineend="3028" name="_drawturtle" signature="_drawturtle()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable citdl="TurtleScreen" line="2995" name="screen" />
          <variable citdl="_polytrafo()" line="2996" name="shape" />
          <variable citdl="shape._type" line="2997" name="ttype" />
          <variable citdl="self.turtle._item" line="2998" name="titem" />
          <variable citdl="shape._data" line="3001" name="tshape" />
          <variable citdl="int" line="3003" name="w" />
          <variable citdl="self._pencolor" line="3007" name="oc" />
          <variable citdl="self._fillcolor" line="3007" name="fc" />
          <variable citdl="_polytrafo()" line="3014" name="poly" />
        </scope>
        <scope doc="Rotate the turtleshape by angle." ilk="function" line="2891" lineend="2908" name="tilt" signature="tilt(angle)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="angle" />
        </scope>
        <scope attributes="protected" ilk="function" line="2692" lineend="2693" name="_colorstr" returns="self.screen._colorstr()" signature="_colorstr(args)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="args" />
        </scope>
        <scope doc="Return fillstate (True if filling, False else)." ilk="function" line="3294" lineend="3306" name="filling" returns="isinstance()" signature="filling()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <scope doc="Fill the shape drawn after the call begin_fill()." ilk="function" line="3329" lineend="3347" name="end_fill" signature="end_fill()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <scope doc="Write text at the current turtle position." ilk="function" line="3407" lineend="3434" name="write" signature="write(arg, move=False, align=&apos;left&apos;, font=(&apos;Arial&apos;, 8, &apos;normal&apos;))">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="False" ilk="argument" name="move" />
          <variable citdl="str" ilk="argument" name="align" />
          <variable citdl="tuple" ilk="argument" name="font" />
          <variable citdl="_write()" line="3429" name="end" />
        </scope>
        <scope attributes="protected" doc="Turns pen clockwise by angle." ilk="function" line="3260" lineend="3276" name="_rotate" signature="_rotate(angle)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="angle" />
          <variable citdl="self._orient.rotate()" line="3266" name="neworient" />
          <variable citdl="self.screen._tracing" line="3267" name="tracing" />
          <variable citdl="self._speed" line="3269" name="anglevel" />
          <variable citdl="int()" line="3270" name="steps" />
          <variable citdl="int()" line="3271" name="delta" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="tuple" line="2939" name="_shapetrafo" />
        <scope doc="Set or return the current tilt-angle." ilk="function" line="2864" lineend="2889" name="tiltangle" returns="self._degreesPerAU" signature="tiltangle(angle=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="angle" />
          <variable citdl="self._tilt" line="2886" name="tilt" />
        </scope>
        <scope doc="Delete stamp with given stampid" ilk="function" line="3099" lineend="3112" name="clearstamp" signature="clearstamp(stampid)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="stampid" />
        </scope>
        <scope doc="Bind fun to mouse-click event on this turtle on canvas." ilk="function" line="3521" lineend="3540" name="onclick" signature="onclick(fun, btn=1, add=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable citdl="int" ilk="argument" name="btn" />
          <variable ilk="argument" name="add" />
        </scope>
        <scope doc="Set or return the current transformation matrix of the turtle shape." ilk="function" line="2910" lineend="2947" name="shapetransform" returns="self._shapetrafo" signature="shapetransform(t11=None, t12=None, t21=None, t22=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="t11" />
          <variable ilk="argument" name="t12" />
          <variable ilk="argument" name="t21" />
          <variable ilk="argument" name="t22" />
          <variable line="2933" name="m11" />
          <variable line="2934" name="m12" />
          <variable line="2935" name="m21" />
          <variable line="2936" name="m22" />
          <variable citdl="math.pi" line="2940" name="alfa" />
          <variable citdl="math.cos()" line="2941" name="ca" />
          <variable citdl="math.sin()" line="2941" name="sa" />
          <variable citdl="math.cos()" line="2942" name="a21" />
          <variable citdl="math.cos()" line="2942" name="a22" />
          <variable citdl="math.cos()" line="2942" name="a12" />
          <variable citdl="math.cos()" line="2942" name="a11" />
        </scope>
        <scope doc="Start recording the vertices of a polygon." ilk="function" line="3436" lineend="3448" name="begin_poly" signature="begin_poly()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <scope doc="Bind fun to mouse-move event on this turtle on canvas." ilk="function" line="3566" lineend="3584" name="ondrag" signature="ondrag(fun, btn=1, add=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable citdl="int" ilk="argument" name="btn" />
          <variable ilk="argument" name="add" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="new" line="3172" name="_position" />
        <scope doc="Create and return a clone of the turtle." ilk="function" line="2710" lineend="2748" name="clone" returns="deepcopy()" signature="clone()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable citdl="TurtleScreen" line="2722" name="screen" />
          <variable citdl="_TurtleImage" line="2725" name="turtle" />
          <variable citdl="deepcopy()" line="2729" name="q" />
          <variable line="2738" name="ttype" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="math.pi" line="2946" name="_tilt" />
        <variable attributes="protected __instancevar__" citdl="list" line="2543" name="_poly" />
        <variable attributes="__instancevar__" citdl="Tbuffer" line="2553" name="undobuffer" />
        <variable citdl="RawTurtle.shapesize" line="3647" name="turtlesize" />
        <scope doc="Delete all or first/last n of turtle&apos;s stamps." ilk="function" line="3114" lineend="3140" name="clearstamps" signature="clearstamps(n=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="n" />
          <variable citdl="list" line="3133" name="toDelete" />
        </scope>
        <scope doc="Set or disable undobuffer." ilk="function" line="2581" lineend="2598" name="setundobuffer" signature="setundobuffer(size)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
        </scope>
        <scope doc="Rotate the turtleshape to point in the specified direction" ilk="function" line="2840" lineend="2862" name="settiltangle" signature="settiltangle(angle)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="angle" />
          <variable citdl="self._angleOrient" line="2860" name="tilt" />
        </scope>
        <scope attributes="protected" doc="Delete all of pen&apos;s drawings" ilk="function" line="2613" lineend="2624" name="_clear" signature="_clear()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="TurtleScreen" line="2521" name="screen" />
        <scope doc="Bind fun to mouse-button-release event on this turtle on canvas." ilk="function" line="3542" lineend="3564" name="onrelease" signature="onrelease(fun, btn=1, add=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable citdl="int" ilk="argument" name="btn" />
          <variable ilk="argument" name="add" />
        </scope>
        <scope doc="No argument." ilk="function" line="3619" lineend="3645" name="undo" signature="undo (repeatedly) the last turtle action.">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable citdl="self.undobuffer.pop()" line="3637" name="item" />
          <variable line="3638" name="action" />
          <variable citdl="list" line="3639" name="data" />
        </scope>
        <scope attributes="protected" doc="Move the pen to the point end, thereby drawing a line if pen is down." ilk="function" line="3142" lineend="3193" name="_goto" signature="_goto(end)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="end" />
          <variable citdl="tuple" line="3148" name="go_modes" />
          <variable citdl="TurtleScreen" line="3152" name="screen" />
          <variable citdl="tuple" line="3153" name="undo_entry" />
          <variable citdl="self._position" line="3161" name="start" />
          <variable citdl="self._position" line="3163" name="diff" />
          <variable citdl="screen.yscale" line="3164" name="diffsq" />
          <variable citdl="int()" line="3165" name="nhops" />
          <variable citdl="self._position" line="3166" name="delta" />
          <variable citdl="False" line="3169" name="top" />
        </scope>
        <scope attributes="protected" doc="does the work for clearstamp() and clearstamps()" ilk="function" line="3077" lineend="3097" name="_clearstamp" signature="_clearstamp(stampid)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="stampid" />
          <variable citdl="tuple" line="3089" name="item" />
          <variable citdl="Tbuffer" line="3090" name="buf" />
          <variable citdl="buf.buffer.index()" line="3093" name="index" />
        </scope>
        <scope attributes="protected" doc="Turns turtle animation on/off and set delay for update drawings." ilk="function" line="2668" lineend="2687" name="_tracer" returns="self.screen.tracer()" signature="_tracer(flag=None, delay=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="flag" />
          <variable ilk="argument" name="delay" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="3254" name="_fillpath" />
        <scope doc="Stop recording the vertices of a polygon." ilk="function" line="3450" lineend="3461" name="end_poly" signature="end_poly()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <scope doc="Return count of entries in the undobuffer." ilk="function" line="2600" lineend="2611" name="undobufferentries" returns="self.undobuffer.nr_of_items()" signature="undobufferentries()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Convert colortriples to hexstrings." ilk="function" line="2695" lineend="2708" name="_cc" returns="tuple" signature="_cc(args)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="args" />
        </scope>
        <variable citdl="RawTurtle.getturtle" line="3509" name="getpen" />
        <variable attributes="__instancevar__" citdl="self.screen._createline()" line="2548" name="currentLineItem" />
        <scope doc="Delete the turtle&apos;s drawings and restore its default values." ilk="function" line="2556" lineend="2579" name="reset" signature="reset()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="2546" name="_shown" />
        <scope attributes="protected" doc="Set delay value which determines speed of turtle animation." ilk="function" line="3516" lineend="3519" name="_delay" returns="self.screen.delay()" signature="_delay(delay=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="delay" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="2547" name="_hidden_from_screen" />
        <variable attributes="__instancevar__" citdl="list" line="2550" name="items" />
        <scope doc="Delete the turtle&apos;s drawings from the screen. Do not move turtle." ilk="function" line="2627" lineend="2640" name="clear" signature="clear()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <scope doc="Called just before drawing a shape to be filled." ilk="function" line="3308" lineend="3326" name="begin_fill" signature="begin_fill()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="2642" lineend="2648" name="_update_data" signature="_update_data()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
        </scope>
        <scope doc="Stamp a copy of the turtleshape onto the canvas and return its id." ilk="function" line="3032" lineend="3075" name="stamp" returns="screen._createpoly()" signature="stamp()">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable citdl="TurtleScreen" line="3047" name="screen" />
          <variable citdl="_polytrafo()" line="3048" name="shape" />
          <variable citdl="shape._type" line="3049" name="ttype" />
          <variable citdl="shape._data" line="3050" name="tshape" />
          <variable citdl="screen._createpoly()" line="3052" name="stitem" />
          <variable citdl="int" line="3053" name="w" />
          <variable citdl="self._pencolor" line="3057" name="oc" />
          <variable citdl="self._fillcolor" line="3057" name="fc" />
          <variable citdl="screen._createpoly()" line="3066" name="item" />
          <variable citdl="_polytrafo()" line="3070" name="poly" />
        </scope>
        <scope attributes="protected" doc="Reverse a _goto." ilk="function" line="3195" lineend="3258" name="_undogoto" signature="_undogoto(entry)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable citdl="TurtleScreen" line="3201" name="screen" />
          <variable citdl="pc" line="3209" name="usepc" />
          <variable citdl="list" line="3214" name="todelete" />
          <variable citdl="old" line="3220" name="start" />
          <variable citdl="new" line="3222" name="diff" />
          <variable citdl="screen.xscale" line="3223" name="diffsq" />
          <variable citdl="int()" line="3224" name="nhops" />
          <variable citdl="new" line="3225" name="delta" />
          <variable citdl="True" line="3228" name="top" />
        </scope>
        <variable attributes="protected __instancevar__" line="2552" name="_undobuffersize" />
        <variable attributes="__instancevar__" citdl="screen._createline()" line="2541" name="drawingLineItem" />
        <variable attributes="protected __instancevar__" citdl="tuple" line="2944" name="_stretchfactor" />
        <scope attributes="protected" doc="Closes current line item and starts a new one." ilk="function" line="3278" lineend="3292" name="_newLine" signature="_newLine(usePos=True)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="usePos" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self.screen._createpoly()" line="2545" name="_fillitem" />
        <scope doc="Set/return turtle&apos;s stretchfactors/outline. Set resizemode to &quot;user&quot;." ilk="function" line="2777" lineend="2815" name="shapesize" returns="tuple" signature="shapesize(stretch_wid=None, stretch_len=None, outline=None)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="stretch_wid" />
          <variable ilk="argument" name="stretch_len" />
          <variable citdl="self._outlinewidth" ilk="argument" name="outline" />
          <variable citdl="tuple" line="2805" name="stretchfactor" />
        </scope>
        <scope doc="Draw a dot with diameter size, using color." ilk="function" line="3349" lineend="3395" name="dot" signature="dot(size=None, *color)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable citdl="max()" ilk="argument" name="size" />
          <variable attributes="varargs" citdl="_colorstr()" ilk="argument" name="color" />
          <variable citdl="self.screen._dot()" line="3376" name="item" />
          <variable citdl="self.pen()" line="3381" name="pen" />
        </scope>
        <scope attributes="protected" doc="Computes transformed polygon shapes from a shape according to current position and heading." ilk="function" line="2950" lineend="2960" name="_polytrafo" returns="list" signature="_polytrafo(poly)">
          <variable citdl="RawTurtle" ilk="argument" name="self" />
          <variable ilk="argument" name="poly" />
          <variable citdl="TurtleScreen" line="2954" name="screen" />
          <variable citdl="Vec2D" line="2957" name="e" />
        </scope>
      </scope>
      <scope doc="Return the singleton screen object." ilk="function" line="3653" lineend="3659" name="Screen" returns="Turtle._screen" signature="Screen()" />
      <scope classrefs="Frame" doc="Modeled after the scrolled canvas class from Grayons&apos;s Tkinter book.  Used as the default canvas, which pops up automatically when" ilk="class" line="329" lineend="426" name="ScrolledCanvas">
        <scope doc="Adjust canvas and scrollbars according to given canvas size." ilk="function" line="360" lineend="375" name="reset" signature="reset(canvwidth=None, canvheight=None, bg=None)">
          <variable citdl="ScrolledCanvas" ilk="argument" name="self" />
          <variable ilk="argument" name="canvwidth" />
          <variable ilk="argument" name="canvheight" />
          <variable ilk="argument" name="bg" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="340" name="canvwidth" />
        <scope doc="&apos;forward&apos; method, which canvas itself has inherited..." ilk="function" line="418" lineend="421" name="unbind" signature="unbind(*args, **kwargs)">
          <variable citdl="ScrolledCanvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="341" name="bg" />
        <scope doc="&apos;forward&apos; method, which canvas itself has inherited..." ilk="function" line="413" lineend="416" name="bind" signature="bind(*args, **kwargs)">
          <variable citdl="ScrolledCanvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self.winfo_toplevel()" line="338" name="_rootwindow" />
        <variable attributes="__instancevar__" citdl="TK.Scrollbar()" line="346" name="vscroll" />
        <variable attributes="__instancevar__" citdl="int" line="339" name="height" />
        <variable attributes="__instancevar__" citdl="int" line="339" name="width" />
        <scope doc="Adjust scrollbars according to window- and canvas-size." ilk="function" line="378" lineend="392" name="adjustScrolls" signature="adjustScrolls()">
          <variable citdl="ScrolledCanvas" ilk="argument" name="self" />
          <variable citdl="self._canvas.winfo_width()" line="381" name="cwidth" />
          <variable citdl="self._canvas.winfo_height()" line="382" name="cheight" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="TK.Canvas()" line="342" name="_canvas" />
        <scope doc="&apos;forward&apos; method, which canvas itself has inherited..." ilk="function" line="398" lineend="401" name="bbox" returns="self._canvas.bbox()" signature="bbox(*args)">
          <variable citdl="ScrolledCanvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="&apos;forward&apos; method, which canvas itself has inherited..." ilk="function" line="423" lineend="426" name="focus_force" signature="focus_force()">
          <variable citdl="ScrolledCanvas" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="TK.Scrollbar()" line="344" name="hscroll" />
        <scope doc="self-explanatory" ilk="function" line="394" lineend="396" name="onResize" signature="onResize(event)">
          <variable citdl="ScrolledCanvas" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope doc="&apos;forward&apos; method, which canvas itself has inherited..." ilk="function" line="408" lineend="411" name="config" signature="config(*args, **kwargs)">
          <variable citdl="ScrolledCanvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope doc="&apos;forward&apos; method, which canvas itself has inherited..." ilk="function" line="403" lineend="406" name="cget" returns="self._canvas.cget()" signature="cget(*args, **kwargs)">
          <variable citdl="ScrolledCanvas" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="335" lineend="358" name="__init__" signature="ScrolledCanvas(master, width=500, height=350, canvwidth=600, canvheight=500)">
          <variable citdl="ScrolledCanvas" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable citdl="int" ilk="argument" name="height" />
          <variable citdl="int" ilk="argument" name="canvwidth" />
          <variable citdl="int" ilk="argument" name="canvheight" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="340" name="canvheight" />
      </scope>
      <scope classrefs="object" doc="Data structure modeling shapes.  attribute _type is one of &quot;polygon&quot;, &quot;image&quot;, &quot;compound&quot;" ilk="class" line="871" lineend="915" name="Shape">
        <variable attributes="protected __instancevar__" line="879" name="_type" />
        <scope doc="Add component to a shape of type compound." ilk="function" line="894" lineend="915" name="addcomponent" signature="addcomponent(poly, fill, outline=None)">
          <variable citdl="Shape" ilk="argument" name="self" />
          <variable ilk="argument" name="poly" />
          <variable ilk="argument" name="fill" />
          <variable ilk="argument" name="outline" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="TurtleScreen._image()" line="892" name="_data" />
        <scope attributes="__ctor__" ilk="function" line="878" lineend="892" name="__init__" signature="Shape(type_, data=None)">
          <variable citdl="Shape" ilk="argument" name="self" />
          <variable ilk="argument" name="type_" />
          <variable citdl="list" ilk="argument" name="data" />
        </scope>
      </scope>
      <import module="TK" />
      <scope classrefs="object" doc="Navigation part of the RawTurtle. Implements methods for turtle movement." ilk="class" line="1510" lineend="2015" name="TNavigator">
        <variable attributes="protected __instancevar__" citdl="self._orient.rotate()" line="1538" name="_orient" />
        <variable citdl="int" line="1519" name="DEFAULT_ANGLEOFFSET" />
        <variable citdl="dict" line="1514" name="START_ORIENTATION" />
        <variable citdl="TNavigator.goto" line="2013" name="setpos" />
        <scope attributes="protected" doc="move turtle forward by specified distance" ilk="function" line="1599" lineend="1602" name="_go" signature="_go(distance)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="distance" />
          <variable citdl="Vec2D" line="1601" name="ende" />
        </scope>
        <scope doc="Move the turtle backward by distance." ilk="function" line="1636" lineend="1654" name="back" signature="back(distance)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="distance" />
        </scope>
        <scope doc="Return the turtle&apos;s y coordinate --- No arguments." ilk="function" line="1725" lineend="1737" name="ycor" signature="ycor()">
          <variable citdl="TNavigator" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Set turtle-mode to &apos;standard&apos;, &apos;world&apos; or &apos;logo&apos;." ilk="function" line="1540" lineend="1553" name="_setmode" returns="str" signature="_setmode(mode=None)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="mode" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="1524" name="_angleOrient" />
        <scope doc="Move turtle to the origin - coordinates (0,0)." ilk="function" line="1775" lineend="1787" name="home" signature="home()">
          <variable citdl="TNavigator" ilk="argument" name="self" />
        </scope>
        <scope doc="dummy method - to be overwritten by child class" ilk="function" line="2000" name="speed" signature="speed(s=0)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="s" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1522" lineend="1530" name="__init__" signature="TNavigator(mode=DEFAULT_MODE)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="mode" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Vec2D" line="1537" name="_position" />
        <variable citdl="TNavigator.right" line="2010" name="rt" />
        <scope attributes="protected" doc="dummy method - to be overwritten by child class" ilk="function" line="2004" name="_delay" signature="_delay(n=None)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="n" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="1525" name="_mode" />
        <scope attributes="protected" doc="Turn turtle counterclockwise by specified angle if angle &gt; 0." ilk="function" line="1604" lineend="1607" name="_rotate" signature="_rotate(angle)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="angle" />
        </scope>
        <variable citdl="TNavigator.left" line="2011" name="lt" />
        <scope attributes="protected" doc="dummy method - to be overwritten by child class" ilk="function" line="2002" name="_tracer" signature="_tracer(a=None, b=None)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="Set angle measurement units to degrees." ilk="function" line="1564" lineend="1583" name="degrees" signature="degrees(fullcircle=360.0)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable citdl="float" ilk="argument" name="fullcircle" />
        </scope>
        <scope doc="Move the turtle forward by the specified distance." ilk="function" line="1613" lineend="1634" name="forward" signature="forward(distance)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="distance" />
        </scope>
        <scope doc="Draw a circle with given radius." ilk="function" line="1935" lineend="1996" name="circle" signature="circle(radius, extent=None, steps=None)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="radius" />
          <variable ilk="argument" name="extent" />
          <variable citdl="int()" ilk="argument" name="steps" />
          <variable citdl="self.speed()" line="1968" name="speed" />
          <variable citdl="abs()" line="1972" name="frac" />
          <variable citdl="int()" line="1974" name="w" />
          <variable citdl="int()" line="1975" name="w2" />
          <variable citdl="math.sin()" line="1976" name="l" />
          <variable citdl="self._tracer()" line="1979" name="tr" />
          <variable citdl="self._delay()" line="1980" name="dl" />
        </scope>
        <variable attributes="__instancevar__" line="1526" name="undobuffer" />
        <scope attributes="protected" doc="Helper function for degrees() and radians()" ilk="function" line="1555" lineend="1562" name="_setDegreesPerAU" signature="_setDegreesPerAU(fullcircle)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="fullcircle" />
        </scope>
        <scope doc="Move turtle to an absolute position." ilk="function" line="1740" lineend="1773" name="goto" signature="goto(x, y=None)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope doc="Turn turtle right by angle units." ilk="function" line="1656" lineend="1675" name="right" signature="right(angle)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="angle" />
        </scope>
        <scope attributes="protected" doc="move turtle to position end." ilk="function" line="1609" lineend="1611" name="_goto" signature="_goto(end)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="end" />
        </scope>
        <variable citdl="TNavigator.forward" line="2007" name="fd" />
        <variable citdl="TNavigator.pos" line="2012" name="position" />
        <variable attributes="protected __instancevar__" line="1557" name="_fullcircle" />
        <variable citdl="TNavigator.back" line="2008" name="bk" />
        <scope doc="Return the turtle&apos;s x coordinate." ilk="function" line="1711" lineend="1723" name="xcor" signature="xcor()">
          <variable citdl="TNavigator" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="1523" name="_angleOffset" />
        <scope doc="reset turtle to its initial values" ilk="function" line="1532" lineend="1538" name="reset" signature="reset()">
          <variable citdl="TNavigator" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the distance from the turtle to (x,y) in turtle step units." ilk="function" line="1825" lineend="1855" name="distance" returns="abs()" signature="distance(x, y=None)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable citdl="Vec2D" line="1848" name="pos" />
        </scope>
        <variable citdl="TNavigator.setheading" line="2015" name="seth" />
        <scope doc="Set the angle measurement units to radians." ilk="function" line="1585" lineend="1597" name="radians" signature="radians()">
          <variable citdl="TNavigator" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the turtle&apos;s current heading." ilk="function" line="1892" lineend="1905" name="heading" returns="round()" signature="heading()">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable citdl="round()" line="1903" name="result" />
        </scope>
        <scope doc="Set the orientation of the turtle to to_angle." ilk="function" line="1907" lineend="1933" name="setheading" signature="setheading(to_angle)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="to_angle" />
          <variable citdl="TNavigator.heading()" line="1930" name="angle" />
          <variable line="1931" name="full" />
        </scope>
        <variable citdl="str" line="1518" name="DEFAULT_MODE" />
        <scope doc="Return the turtle&apos;s current location (x,y), as a Vec2D- vector." ilk="function" line="1698" lineend="1709" name="pos" returns="Vec2D" signature="pos()">
          <variable citdl="TNavigator" ilk="argument" name="self" />
        </scope>
        <variable citdl="int" line="1520" name="DEFAULT_ANGLEORIENT" />
        <variable attributes="protected __instancevar__" citdl="int" line="1558" name="_degreesPerAU" />
        <variable citdl="TNavigator.goto" line="2014" name="setposition" />
        <variable citdl="TNavigator.back" line="2009" name="backward" />
        <scope doc="Set the turtle&apos;s first coordinate to x" ilk="function" line="1789" lineend="1805" name="setx" signature="setx(x)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <scope doc="Set the turtle&apos;s second coordinate to y" ilk="function" line="1807" lineend="1823" name="sety" signature="sety(y)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope doc="Return the angle of the line from the turtle&apos;s position to (x, y)." ilk="function" line="1857" lineend="1890" name="towards" returns="round()" signature="towards(x, y=None)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable citdl="Vec2D" line="1880" name="pos" />
          <variable citdl="round()" line="1888" name="result" />
        </scope>
        <scope doc="Turn turtle left by angle units." ilk="function" line="1677" lineend="1696" name="left" signature="left(angle)">
          <variable citdl="TNavigator" ilk="argument" name="self" />
          <variable ilk="argument" name="angle" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Drawing part of the RawTurtle. Implements drawing properties." ilk="class" line="2018" lineend="2475" name="TPen">
        <scope attributes="protected" doc="dummy method - to be overwritten by child class" ilk="function" line="2462" name="_update" signature="_update(count=True, forced=False)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="count" />
          <variable citdl="False" ilk="argument" name="forced" />
        </scope>
        <variable attributes="protected __instancevar__" line="2032" name="_fillcolor" />
        <scope doc="Return or set the pencolor and fillcolor." ilk="function" line="2173" lineend="2217" name="color" returns="tuple" signature="color(*args)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="len()" line="2206" name="l" />
          <variable citdl="self._colorstr()" line="2208" name="pcolor" />
          <variable citdl="self._colorstr()" line="2214" name="fcolor" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="2030" name="_shown" />
        <variable attributes="protected __instancevar__" citdl="float" line="2036" name="_shearfactor" />
        <variable citdl="TPen.pendown" line="2473" name="down" />
        <scope doc="Pull the pen down -- drawing when moving." ilk="function" line="2106" lineend="2118" name="pendown" signature="pendown()">
          <variable citdl="TPen" ilk="argument" name="self" />
        </scope>
        <scope doc="Return or set the pencolor." ilk="function" line="2219" lineend="2254" name="pencolor" returns="self._color()" signature="pencolor(*args)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="self._colorstr()" line="2249" name="color" />
        </scope>
        <scope doc="Return True if the Turtle is shown, False if it&apos;s hidden." ilk="function" line="2321" lineend="2331" name="isvisible" returns="bool" signature="isvisible()">
          <variable citdl="TPen" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="2039" name="_outlinewidth" />
        <scope doc="Return or set the turtle&apos;s speed." ilk="function" line="2135" lineend="2171" name="speed" returns="int" signature="speed(speed=None)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="speed" />
          <variable citdl="dict" line="2162" name="speeds" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="2022" lineend="2025" name="__init__" signature="TPen(resizemode=[_CFG])">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable ilk="argument" name="resizemode" />
        </scope>
        <variable citdl="TPen.penup" line="2471" name="pu" />
        <variable attributes="protected __instancevar__" line="2031" name="_pencolor" />
        <scope doc="Pull the pen up -- no drawing when moving." ilk="function" line="2092" lineend="2104" name="penup" signature="penup()">
          <variable citdl="TPen" ilk="argument" name="self" />
        </scope>
        <scope doc="Makes the turtle invisible." ilk="function" line="2305" lineend="2319" name="hideturtle" signature="hideturtle()">
          <variable citdl="TPen" ilk="argument" name="self" />
        </scope>
        <variable citdl="TPen.pensize" line="2469" name="width" />
        <scope doc="Return or set the pen&apos;s attributes." ilk="function" line="2333" lineend="2456" name="pen" returns="dict" signature="pen(pen=None, **pendict)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable ilk="argument" name="pen" />
          <variable attributes="kwargs" ilk="argument" name="pendict" />
          <variable attributes="protected" citdl="dict" line="2380" name="_pd" />
          <variable citdl="dict" line="2397" name="p" />
          <variable attributes="protected" citdl="dict" line="2402" name="_p_buf" />
          <variable citdl="True" line="2409" name="newLine" />
          <variable citdl="tuple" line="2438" name="sf" />
          <variable citdl="float" line="2452" name="shf" />
          <variable citdl="math.cos()" line="2453" name="ca" />
          <variable citdl="math.sin()" line="2453" name="sa" />
        </scope>
        <variable citdl="TPen.pendown" line="2472" name="pd" />
        <scope attributes="protected" doc="dummy method - to be overwritten by child class" ilk="function" line="2466" name="_colorstr" signature="_colorstr(args)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable ilk="argument" name="args" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="float" line="2037" name="_tilt" />
        <scope doc="Set or return the line thickness." ilk="function" line="2069" lineend="2089" name="pensize" returns="int" signature="pensize(width=None)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable ilk="argument" name="width" />
        </scope>
        <variable attributes="__instancevar__" line="2024" name="undobuffer" />
        <scope doc="Set resizemode to one of the values: &quot;auto&quot;, &quot;user&quot;, &quot;noresize&quot;." ilk="function" line="2041" lineend="2067" name="resizemode" signature="resizemode(rmode=None)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable citdl="rmode.lower()" ilk="argument" name="rmode" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="2029" name="_pensize" />
        <variable attributes="protected __instancevar__" citdl="True" line="2033" name="_drawing" />
        <variable citdl="TPen.hideturtle" line="2475" name="ht" />
        <scope doc="Makes the turtle visible." ilk="function" line="2292" lineend="2303" name="showturtle" signature="showturtle()">
          <variable citdl="TPen" ilk="argument" name="self" />
        </scope>
        <scope doc="Return or set the fillcolor." ilk="function" line="2256" lineend="2290" name="fillcolor" returns="self._color()" signature="fillcolor(*args)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="self._colorstr()" line="2285" name="color" />
        </scope>
        <scope doc="Return True if pen is down, False if it&apos;s up." ilk="function" line="2120" lineend="2133" name="isdown" returns="bool" signature="isdown()">
          <variable citdl="TPen" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="tuple" line="2038" name="_shapetrafo" />
        <variable attributes="protected __instancevar__" line="2023" name="_resizemode" />
        <variable citdl="TPen.penup" line="2470" name="up" />
        <variable attributes="protected __instancevar__" citdl="int" line="2034" name="_speed" />
        <variable citdl="TPen.showturtle" line="2474" name="st" />
        <scope attributes="protected" doc="dummy method - to be overwritten by child class" ilk="function" line="2464" name="_color" signature="_color(args)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable ilk="argument" name="args" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="tuple" line="2035" name="_stretchfactor" />
        <scope attributes="protected" doc="dummy method - to be overwritten by child class" ilk="function" line="2460" name="_newLine" signature="_newLine(usePos=True)">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="usePos" />
        </scope>
        <scope attributes="protected" ilk="function" line="2027" lineend="2039" name="_reset" signature="_reset(pencolor=[_CFG], fillcolor=[_CFG])">
          <variable citdl="TPen" ilk="argument" name="self" />
          <variable ilk="argument" name="pencolor" />
          <variable ilk="argument" name="fillcolor" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Ring buffer used as undobuffer for RawTurtle objects." ilk="class" line="918" lineend="952" name="Tbuffer">
        <scope ilk="function" line="925" lineend="932" name="reset" signature="reset(bufsize=None)">
          <variable citdl="Tbuffer" ilk="argument" name="self" />
          <variable ilk="argument" name="bufsize" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="922" name="buffer" />
        <scope ilk="function" line="940" lineend="948" name="pop" signature="pop()">
          <variable citdl="Tbuffer" ilk="argument" name="self" />
          <variable line="942" name="item" />
        </scope>
        <scope ilk="function" line="949" lineend="950" name="nr_of_items" returns="self.buffer.count()" signature="nr_of_items()">
          <variable citdl="Tbuffer" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="933" lineend="939" name="push" signature="push(item)">
          <variable citdl="Tbuffer" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="924" name="cumulate" />
        <variable attributes="__instancevar__" citdl="int" line="921" name="bufsize" />
        <variable attributes="__instancevar__" citdl="int" line="923" name="ptr" />
        <scope attributes="__ctor__" ilk="function" line="920" lineend="924" name="__init__" signature="Tbuffer(bufsize=10)">
          <variable citdl="Tbuffer" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="bufsize" />
        </scope>
        <scope ilk="function" line="951" lineend="952" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Tbuffer" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="Will be raised in TurtleScreen.update, if _RUNNING becomes False.  Thus stops execution of turtle graphics script. Main purpose: use in" ilk="class" line="857" lineend="863" name="Terminator" />
      <scope classrefs="RawTurtle" doc="RawTurtle auto-crating (scrolled) canvas.  When a Turtle object is created or a function derived from some" ilk="class" line="3795" lineend="3813" name="Turtle">
        <variable attributes="protected" citdl="Screen()" line="3802" name="_screen" />
        <variable attributes="protected" citdl="" line="3801" name="_pen" />
        <scope attributes="__ctor__" ilk="function" line="3804" lineend="3813" name="__init__" signature="Turtle(shape=[_CFG], undobuffersize=[_CFG], visible=[_CFG])">
          <variable citdl="Turtle" ilk="argument" name="self" />
          <variable ilk="argument" name="shape" />
          <variable ilk="argument" name="undobuffersize" />
          <variable ilk="argument" name="visible" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="Some TurtleGraphics Error" ilk="class" line="866" name="TurtleGraphicsError" />
      <scope classrefs="TurtleScreenBase" doc="Provides screen oriented methods like setbg etc.  Only relies upon the methods of TurtleScreenBase and NOT" ilk="class" line="956" lineend="1508" name="TurtleScreen">
        <variable attributes="protected __instancevar__" citdl="int()" line="992" name="_delayvalue" />
        <variable attributes="protected __instancevar__" citdl="dict" line="967" name="_shapes" />
        <scope doc="Return a list of names of all currently available turtle shapes." ilk="function" line="1331" lineend="1340" name="getshapes" returns="sorted()" signature="getshapes()">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.canvheight" line="1091" name="yscale" />
        <variable citdl="TurtleScreen.clear" line="1506" name="clearscreen" />
        <scope doc="Bind fun to key-press event of key if key is given, or to any key-press-event if no key is given." ilk="function" line="1395" lineend="1426" name="onkeypress" signature="onkeypress(fun, key=None)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return the width of the turtle window." ilk="function" line="1301" lineend="1308" name="window_width" signature="window_width()">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
        </scope>
        <variable citdl="TurtleScreen.onclick" line="1504" name="onscreenclick" />
        <scope doc="Return the Canvas of this TurtleScreen." ilk="function" line="1319" lineend="1329" name="getcanvas" returns="self.cv" signature="getcanvas()">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
        </scope>
        <scope doc="Bind fun to key-release event of key." ilk="function" line="1363" lineend="1393" name="onkey" signature="onkey(fun, key)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="965" lineend="995" name="__init__" signature="TurtleScreen(cv, mode=[_CFG], colormode=[_CFG], delay=[_CFG])">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="cv" />
          <variable ilk="argument" name="mode" />
          <variable ilk="argument" name="colormode" />
          <variable ilk="argument" name="delay" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="1015" name="_tracing" />
        <variable attributes="protected" citdl="True" line="963" name="_RUNNING" />
        <variable attributes="protected __instancevar__" citdl="str" line="1014" name="_bgpicname" />
        <scope attributes="protected" doc="Increment upadate counter." ilk="function" line="1281" lineend="1288" name="_incrementudc" signature="_incrementudc()">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="mode.lower()" line="991" name="_mode" />
        <scope attributes="protected" doc="Return color string corresponding to args." ilk="function" line="1135" lineend="1160" name="_colorstr" returns="tuple" signature="_colorstr(color)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="color" />
        </scope>
        <scope doc="Return or set the drawing delay in milliseconds." ilk="function" line="1266" lineend="1279" name="delay" returns="int()" signature="delay(delay=None)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="delay" />
        </scope>
        <scope doc="Set or return backgroundcolor of the TurtleScreen." ilk="function" line="1215" lineend="1236" name="bgcolor" returns="_color()" signature="bgcolor(*args)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="self._bgcolor()" line="1230" name="color" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="994" name="_keys" />
        <scope doc="Bind fun to mouse-click event on canvas." ilk="function" line="1342" lineend="1361" name="onclick" signature="onclick(fun, btn=1, add=None)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable citdl="int" ilk="argument" name="btn" />
          <variable ilk="argument" name="add" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.canvwidth" line="1058" name="xscale" />
        <variable citdl="TurtleScreen.register_shape" line="1507" name="addshape" />
        <variable attributes="protected __instancevar__" citdl="True" line="1284" name="_RUNNNING" />
        <scope doc="Set background image or return name of current backgroundimage." ilk="function" line="1461" lineend="1483" name="bgpic" returns="str" signature="bgpic(picname=None)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="picname" />
        </scope>
        <scope doc="Return the height of the turtle window." ilk="function" line="1310" lineend="1317" name="window_height" signature="window_height()">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the colormode or set it to 1.0 or 255." ilk="function" line="1173" lineend="1192" name="colormode" signature="colormode(cmode=None)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="cmode" />
        </scope>
        <scope doc="Set up a user defined coordinate-system." ilk="function" line="1061" lineend="1098" name="setworldcoordinates" signature="setworldcoordinates(llx, lly, urx, ury)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="llx" />
          <variable ilk="argument" name="lly" />
          <variable ilk="argument" name="urx" />
          <variable ilk="argument" name="ury" />
          <variable citdl="float()" line="1085" name="xspan" />
          <variable citdl="float()" line="1086" name="yspan" />
          <variable citdl="float" line="1089" name="oldxscale" />
          <variable citdl="self.yscale" line="1089" name="oldyscale" />
          <variable citdl="self.canvwidth" line="1092" name="srx1" />
          <variable citdl="self.canvheight" line="1093" name="sry1" />
          <variable citdl="self.canvwidth" line="1094" name="srx2" />
          <variable citdl="self.canvheight" line="1095" name="sry2" />
        </scope>
        <scope doc="Adds a turtle shape to TurtleScreen&apos;s shapelist." ilk="function" line="1100" lineend="1133" name="register_shape" signature="register_shape(name, shape=None)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="Shape" ilk="argument" name="shape" />
        </scope>
        <scope doc="Perform a TurtleScreen update." ilk="function" line="1290" lineend="1299" name="update" signature="update()">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable citdl="int" line="1293" name="tracing" />
        </scope>
        <scope doc="Install a timer, which calls fun after t milliseconds." ilk="function" line="1440" lineend="1459" name="ontimer" signature="ontimer(fun, t=0)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable citdl="int" ilk="argument" name="t" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._createimage()" line="1013" name="_bgpic" />
        <variable attributes="protected __instancevar__" citdl="int" line="1016" name="_updatecounter" />
        <scope doc="Reset all Turtles on the Screen to their initial state." ilk="function" line="1194" lineend="1204" name="reset" signature="reset()">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
        </scope>
        <variable citdl="TurtleScreen.onkey" line="1508" name="onkeyrelease" />
        <scope doc="Return the list of turtles on the screen." ilk="function" line="1206" lineend="1213" name="turtles" returns="list" signature="turtles()">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
        </scope>
        <scope doc="Delete all drawings and all turtles from the TurtleScreen." ilk="function" line="997" lineend="1025" name="clear" signature="clear()">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int()" line="993" name="_colormode" />
        <scope doc="Turns turtle animation on/off and set delay for update drawings." ilk="function" line="1238" lineend="1264" name="tracer" returns="int" signature="tracer(n=None, delay=None)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="n" />
          <variable ilk="argument" name="delay" />
        </scope>
        <scope doc="Set turtle-mode (&apos;standard&apos;, &apos;logo&apos; or &apos;world&apos;) and perform reset." ilk="function" line="1027" lineend="1059" name="mode" signature="mode(mode=None)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable citdl="mode.lower()" ilk="argument" name="mode" />
        </scope>
        <scope attributes="protected" ilk="function" line="1162" lineend="1171" name="_color" returns="tuple()" signature="_color(cstr)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="cstr" />
          <variable citdl="list" line="1166" name="cl" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="988" name="_bgpics" />
        <scope doc="Set focus on TurtleScreen (in order to collect key-events)" ilk="function" line="1428" lineend="1438" name="listen" signature="listen(xdummy=None, ydummy=None)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="xdummy" />
          <variable ilk="argument" name="ydummy" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="1017" name="_turtles" />
        <variable citdl="TurtleScreen.reset" line="1505" name="resetscreen" />
        <scope doc="Resize the canvas the turtles are drawing on." ilk="function" line="1485" lineend="1502" name="screensize" returns="self._resize()" signature="screensize(canvwidth=None, canvheight=None, bg=None)">
          <variable citdl="TurtleScreen" ilk="argument" name="self" />
          <variable ilk="argument" name="canvwidth" />
          <variable ilk="argument" name="canvheight" />
          <variable ilk="argument" name="bg" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Provide the basic graphics functionality. Interface between Tkinter and turtle.py. " ilk="class" line="458" lineend="849" name="TurtleScreenBase">
        <scope attributes="protected" doc="Configure polygonitem polyitem according to provided arguments: coordlist is sequence of coordinates fill is filling color" ilk="function" line="499" lineend="522" name="_drawpoly" signature="_drawpoly(polyitem, coordlist, fill=None, outline=None, width=None, top=False)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="polyitem" />
          <variable ilk="argument" name="coordlist" />
          <variable ilk="argument" name="fill" />
          <variable ilk="argument" name="outline" />
          <variable ilk="argument" name="width" />
          <variable citdl="False" ilk="argument" name="top" />
          <variable citdl="list" line="510" name="cl" />
        </scope>
        <scope attributes="protected" doc="Redraw graphics items on canvas" ilk="function" line="559" lineend="562" name="_update" signature="_update()">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
        </scope>
        <scope doc="Pop up a dialog window for input of a number." ilk="function" line="830" lineend="849" name="numinput" returns="simpledialog.askfloat()" signature="numinput(title, prompt, default=None, minval=None, maxval=None)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="prompt" />
          <variable ilk="argument" name="default" />
          <variable ilk="argument" name="minval" />
          <variable ilk="argument" name="maxval" />
        </scope>
        <scope attributes="protected" doc="Configure image item as to draw image object at center of canvas." ilk="function" line="733" lineend="739" name="_setbgpic" signature="_setbgpic(item, image)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="image" />
        </scope>
        <scope attributes="protected" doc="Bind fun to mouse-move-event (with pressed mouse button) on turtle." ilk="function" line="639" lineend="658" name="_ondrag" signature="_ondrag(item, fun, num=1, add=None)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="fun" />
          <variable citdl="int" ilk="argument" name="num" />
          <variable ilk="argument" name="add" />
          <scope ilk="function" line="651" lineend="657" name="eventfun" signature="eventfun(event)">
            <variable ilk="argument" name="event" />
            <variable citdl="self.cv.canvasy()" line="653" name="y" />
            <variable citdl="self.cv.canvasx()" line="653" name="x" />
          </scope>
        </scope>
        <scope attributes="protected" doc="Check if the string color is a legal Tkinter color string." ilk="function" line="568" lineend="576" name="_iscolorstring" returns="bool" signature="_iscolorstring(color)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="color" />
          <variable citdl="self.cv.winfo_rgb()" line="572" name="rgb" />
          <variable citdl="True" line="573" name="ok" />
        </scope>
        <scope attributes="protected" doc="Delete graphics item from canvas." ilk="function" line="553" lineend="557" name="_delete" signature="_delete(item)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope attributes="protected" doc="Bind fun to mouse-click event on canvas." ilk="function" line="660" lineend="676" name="_onscreenclick" signature="_onscreenclick(fun, num=1, add=None)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable citdl="int" ilk="argument" name="num" />
          <variable ilk="argument" name="add" />
          <scope ilk="function" line="672" lineend="675" name="eventfun" signature="eventfun(event)">
            <variable ilk="argument" name="event" />
            <variable citdl="self.yscale" line="673" name="y" />
            <variable citdl="self.cv.canvasx()" line="673" name="x" />
          </scope>
        </scope>
        <scope attributes="protected" doc="Create an invisible line item on canvas self.cv)" ilk="function" line="524" lineend="528" name="_createline" returns="self.cv.create_line()" signature="_createline()">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Bind fun to key-release event of key." ilk="function" line="678" lineend="687" name="_onkeyrelease" signature="_onkeyrelease(fun, key)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable ilk="argument" name="key" />
          <scope ilk="function" line="685" lineend="686" name="eventfun" signature="eventfun(event)">
            <variable ilk="argument" name="event" />
          </scope>
        </scope>
        <scope attributes="protected" doc="Bind fun to mouse-button-release event on turtle." ilk="function" line="620" lineend="637" name="_onrelease" signature="_onrelease(item, fun, num=1, add=None)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="fun" />
          <variable citdl="int" ilk="argument" name="num" />
          <variable ilk="argument" name="add" />
          <scope ilk="function" line="632" lineend="635" name="eventfun" signature="eventfun(event)">
            <variable ilk="argument" name="event" />
            <variable citdl="self.yscale" line="633" name="y" />
            <variable citdl="self.cv.canvasx()" line="633" name="x" />
          </scope>
        </scope>
        <scope attributes="__ctor__" ilk="function" line="481" lineend="492" name="__init__" signature="TurtleScreenBase(cv)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="cv" />
          <variable citdl="self.cv.canvwidth" line="484" name="w" />
          <variable citdl="self.cv.canvheight" line="485" name="h" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.cv.canvwidth" line="490" name="canvwidth" />
        <scope attributes="protected" doc="Create and return image item on canvas." ilk="function" line="720" lineend="723" name="_createimage" returns="self.cv.create_image()" signature="_createimage(image)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="image" />
        </scope>
        <scope attributes="protected" doc="Delay subsequent canvas actions for delay ms." ilk="function" line="564" lineend="566" name="_delay" signature="_delay(delay)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="delay" />
        </scope>
        <scope attributes="protected" doc="Configure image item as to draw image object at position (x,y) on canvas)" ilk="function" line="725" lineend="731" name="_drawimage" signature="_drawimage(item, pos, image)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="pos" />
          <variable ilk="argument" name="image" />
        </scope>
        <variable attributes="__instancevar__" line="482" name="cv" />
        <scope attributes="protected" doc="return an image object containing the imagedata from a gif- file named filename." ilk="function" line="475" lineend="479" name="_image" returns="TK.PhotoImage()" signature="_image()">
          <variable citdl="TurtleScreenBase" ilk="argument" name="filename" />
        </scope>
        <scope attributes="protected" doc="Create an invisible polygon item on canvas self.cv)" ilk="function" line="494" lineend="497" name="_createpoly" returns="self.cv.create_polygon()" signature="_createpoly()">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
        </scope>
        <scope doc="Starts event loop - calling Tkinter&apos;s mainloop function." ilk="function" line="800" lineend="813" name="mainloop" signature="mainloop()">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="float" line="492" name="xscale" />
        <scope attributes="protected" doc="Install a timer, which calls fun after t milliseconds." ilk="function" line="712" lineend="718" name="_ontimer" signature="_ontimer(fun, t)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable ilk="argument" name="t" />
        </scope>
        <scope attributes="protected" doc="returns list of coordinate-pairs of points of item Example (for insiders): &gt;&gt;&gt; from turtle import * &gt;&gt;&gt; getscreen()._pointlist(getturtle().turtle._item)" ilk="function" line="747" lineend="757" name="_pointlist" returns="list" signature="_pointlist(item)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable citdl="list()" line="755" name="cl" />
          <variable citdl="list" line="756" name="pl" />
        </scope>
        <scope attributes="protected" doc="Return &apos;line&apos; or &apos;polygon&apos; or &apos;image&apos; depending on type of item." ilk="function" line="741" lineend="745" name="_type" returns="self.cv.type()" signature="_type(item)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope attributes="protected" doc="Set canvas&apos; backgroundcolor if color is not None, else return backgroundcolor." ilk="function" line="578" lineend="585" name="_bgcolor" returns="self.cv.cget()" signature="_bgcolor(color=None)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="color" />
        </scope>
        <scope attributes="protected" doc="Resize the canvas the turtles are drawing on." ilk="function" line="774" lineend="787" name="_resize" returns="tuple" signature="_resize(canvwidth=None, canvheight=None, bg=None)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="canvwidth" />
          <variable ilk="argument" name="canvheight" />
          <variable ilk="argument" name="bg" />
        </scope>
        <scope attributes="protected" doc="Set focus on canvas (in order to collect key-events)" ilk="function" line="707" lineend="710" name="_listen" signature="_listen()">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="return a blank image object" ilk="function" line="467" lineend="472" name="_blankimage" returns="TK.PhotoImage()" signature="_blankimage()">
          <variable citdl="TK.PhotoImage()" line="470" name="img" />
        </scope>
        <scope attributes="protected" doc="Write txt at pos in canvas with specified font and color." ilk="function" line="587" lineend="600" name="_write" returns="tuple" signature="_write(pos, txt, align, font, pencolor)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="pos" />
          <variable ilk="argument" name="txt" />
          <variable ilk="argument" name="align" />
          <variable ilk="argument" name="font" />
          <variable ilk="argument" name="pencolor" />
          <variable citdl="float" line="593" name="x" />
          <variable citdl="self.yscale" line="594" name="y" />
          <variable citdl="dict" line="595" name="anchor" />
          <variable citdl="self.cv.create_text()" line="596" name="item" />
        </scope>
        <scope attributes="protected" ilk="function" line="762" lineend="772" name="_rescale" signature="_rescale(xscalefactor, yscalefactor)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="xscalefactor" />
          <variable ilk="argument" name="yscalefactor" />
          <variable citdl="self.cv.find_all()" line="763" name="items" />
          <variable citdl="list()" line="765" name="coordinates" />
          <variable citdl="list" line="766" name="newcoordlist" />
        </scope>
        <scope attributes="protected" doc="Return the width and height of the turtle window." ilk="function" line="789" lineend="798" name="_window_size" returns="tuple" signature="_window_size()">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable citdl="self.cv.winfo_width()" line="792" name="width" />
          <variable citdl="self.cv.winfo_height()" line="795" name="height" />
        </scope>
        <scope attributes="protected" doc="If key is given, bind fun to key-press event of key." ilk="function" line="689" lineend="705" name="_onkeypress" signature="_onkeypress(fun, key=None)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="fun" />
          <variable ilk="argument" name="key" />
          <scope ilk="function" line="700" lineend="701" name="eventfun" signature="eventfun(event)">
            <variable ilk="argument" name="event" />
          </scope>
        </scope>
        <scope attributes="protected" doc="Configure lineitem according to provided arguments: coordlist is sequence of coordinates fill is drawing color width is width of drawn line." ilk="function" line="530" lineend="551" name="_drawline" signature="_drawline(lineitem, coordlist=None, fill=None, width=None, top=False)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="lineitem" />
          <variable ilk="argument" name="coordlist" />
          <variable ilk="argument" name="fill" />
          <variable ilk="argument" name="width" />
          <variable citdl="False" ilk="argument" name="top" />
          <variable citdl="list" line="541" name="cl" />
        </scope>
        <scope attributes="protected" doc="Bind fun to mouse-click event on turtle." ilk="function" line="605" lineend="618" name="_onclick" signature="_onclick(item, fun, num=1, add=None)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable ilk="argument" name="fun" />
          <variable citdl="int" ilk="argument" name="num" />
          <variable ilk="argument" name="add" />
          <scope ilk="function" line="614" lineend="617" name="eventfun" signature="eventfun(event)">
            <variable ilk="argument" name="event" />
            <variable citdl="self.cv.canvasy()" line="615" name="y" />
            <variable citdl="self.cv.canvasx()" line="615" name="x" />
          </scope>
        </scope>
        <scope attributes="protected" ilk="function" line="759" lineend="760" name="_setscrollregion" signature="_setscrollregion(srx1, sry1, srx2, sry2)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="srx1" />
          <variable ilk="argument" name="sry1" />
          <variable ilk="argument" name="srx2" />
          <variable ilk="argument" name="sry2" />
        </scope>
        <scope doc="Pop up a dialog window for input of a string." ilk="function" line="815" lineend="828" name="textinput" returns="simpledialog.askstring()" signature="textinput(title, prompt)">
          <variable citdl="TurtleScreenBase" ilk="argument" name="self" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="prompt" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.cv.canvheight" line="491" name="canvheight" />
      </scope>
      <scope classrefs="tuple" doc="A 2 dimensional vector class, used as a helper class for implementing turtle graphics. May be useful for turtle graphics programs also." ilk="class" line="236" lineend="277" name="Vec2D">
        <scope ilk="function" line="276" lineend="277" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Vec2D" ilk="argument" name="self" />
        </scope>
        <scope doc="rotate self counterclockwise by angle" ilk="function" line="267" lineend="273" name="rotate" returns="Vec2D" signature="rotate(angle)">
          <variable citdl="Vec2D" ilk="argument" name="self" />
          <variable citdl="math.pi" ilk="argument" name="angle" />
          <variable citdl="" line="270" name="perp" />
          <variable citdl="math.sin()" line="272" name="s" />
          <variable citdl="math.cos()" line="272" name="c" />
        </scope>
        <scope ilk="function" line="250" lineend="251" name="__new__" returns="tuple.__new__()" signature="__new__(x, y)">
          <variable citdl="Vec2D" ilk="argument" name="cls" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope ilk="function" line="265" lineend="266" name="__abs__" returns="float" signature="__abs__()">
          <variable citdl="Vec2D" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="254" lineend="257" name="__mul__" returns="Vec2D" signature="__mul__(other)">
          <variable citdl="Vec2D" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="252" lineend="253" name="__add__" returns="Vec2D" signature="__add__(other)">
          <variable citdl="Vec2D" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="258" lineend="260" name="__rmul__" returns="Vec2D" signature="__rmul__(other)">
          <variable citdl="Vec2D" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="261" lineend="262" name="__sub__" returns="Vec2D" signature="__sub__(other)">
          <variable citdl="Vec2D" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="274" lineend="275" name="__getnewargs__" returns="tuple" signature="__getnewargs__()">
          <variable citdl="Vec2D" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="263" lineend="264" name="__neg__" returns="Vec2D" signature="__neg__()">
          <variable citdl="Vec2D" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="list" line="141" name="__all__" />
      <scope doc="Adds a turtle shape to TurtleScreen&apos;s shapelist." ilk="function" name="addshape" signature="addshape(name, shape=None)" />
      <scope doc="Move the turtle backward by distance." ilk="function" name="back" signature="back(distance)" />
      <scope doc="Move the turtle backward by distance." ilk="function" name="backward" signature="backward(distance)" />
      <scope doc="Called just before drawing a shape to be filled." ilk="function" name="begin_fill" signature="begin_fill()" />
      <scope doc="Start recording the vertices of a polygon." ilk="function" name="begin_poly" signature="begin_poly()" />
      <scope doc="Set or return backgroundcolor of the TurtleScreen." ilk="function" name="bgcolor" signature="bgcolor(*args)" />
      <scope doc="Set background image or return name of current backgroundimage." ilk="function" name="bgpic" signature="bgpic(picname=None)" />
      <scope doc="Move the turtle backward by distance." ilk="function" name="bk" signature="bk(distance)" />
      <scope doc="Shut the turtlegraphics window." ilk="function" name="bye" signature="bye()" />
      <scope doc="Draw a circle with given radius." ilk="function" name="circle" signature="circle(radius, extent=None, steps=None)" />
      <scope doc="Delete the turtle&apos;s drawings from the screen." ilk="function" name="clear" signature="clear()" />
      <scope doc="Delete all drawings and all turtles from the TurtleScreen." ilk="function" name="clearscreen" signature="clearscreen()" />
      <scope doc="Delete stamp with given stampid" ilk="function" name="clearstamp" signature="clearstamp(stampid)" />
      <scope doc="Delete all or first/last n of turtle&apos;s stamps." ilk="function" name="clearstamps" signature="clearstamps(n=None)" />
      <scope doc="Create and return a clone of the" ilk="function" name="clone" signature="clone()" />
      <scope doc="Return or set the pencolor and fillcolor." ilk="function" name="color" signature="color(*args)" />
      <scope doc="Return the colormode or set it to 1.0 or 255." ilk="function" name="colormode" signature="colormode(cmode=None)" />
      <scope doc="Convert content of config-file into dictionary." ilk="function" line="170" lineend="198" name="config_dict" returns="dict" signature="config_dict(filename)">
        <variable citdl="open()" line="172" name="f" />
        <variable citdl="eval()" line="186" name="value" />
        <variable citdl="f.readlines()" line="173" name="cfglines" />
        <variable citdl="dict" line="175" name="cfgdict" />
        <variable citdl="key.strip()" line="185" name="key" />
        <variable citdl="line.strip()" line="177" name="line" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Deep copy operation on arbitrary Python objects." ilk="function" name="deepcopy" signature="deepcopy(x, memo=None, _nil=[])" />
      <variable citdl="str" line="3953" name="defstr" />
      <scope doc="Set angle measurement units to degrees." ilk="function" name="degrees" signature="degrees(fullcircle=360.0)" />
      <scope doc="Return or set the drawing delay in milliseconds." ilk="function" name="delay" signature="delay(delay=None)" />
      <scope doc="Return the distance from the turtle to (x,y) in turtle step units." ilk="function" name="distance" signature="distance(x, y=None)" />
      <scope doc="Starts event loop - calling Tkinter&apos;s mainloop function." ilk="function" line="3969" name="done" signature="done()" />
      <scope doc="Draw a dot with diameter size, using color." ilk="function" name="dot" signature="dot(size=None, *color)" />
      <scope doc="Pull the pen down -- drawing when moving." ilk="function" name="down" signature="down()" />
      <scope doc="Fill the shape drawn after the call begin_fill()." ilk="function" name="end_fill" signature="end_fill()" />
      <scope doc="Stop recording the vertices of a polygon." ilk="function" name="end_poly" signature="end_poly()" />
      <scope doc="Go into mainloop until the mouse is clicked." ilk="function" name="exitonclick" signature="exitonclick()" />
      <scope doc="Move the turtle forward by the specified distance." ilk="function" name="fd" signature="fd(distance)" />
      <scope doc="Return or set the fillcolor." ilk="function" name="fillcolor" signature="fillcolor(*args)" />
      <scope doc="Return fillstate (True if filling, False else)." ilk="function" name="filling" signature="filling()" />
      <scope doc="Move the turtle forward by the specified distance." ilk="function" name="forward" signature="forward(distance)" />
      <scope doc="Return the lastly recorded polygon." ilk="function" name="get_poly" signature="get_poly()" />
      <scope doc="Return the current shape polygon as tuple of coordinate pairs." ilk="function" name="get_shapepoly" signature="get_shapepoly()" />
      <scope doc="Return the Canvas of this TurtleScreen." ilk="function" name="getcanvas" signature="getcanvas()" />
      <scope doc="Get strings describing the arguments for the given object" ilk="function" line="3892" lineend="3917" name="getmethparlist" returns="tuple" signature="getmethparlist(ob)">
        <variable citdl="ob.__code__.co_argcount" line="3899" name="counter" />
        <variable ilk="argument" name="ob" />
        <variable citdl="list()" line="3900" name="items2" />
        <variable citdl="str.join()" line="3915" name="argText2" />
        <variable citdl="str" line="3894" name="argText1" />
        <variable citdl="list()" line="3905" name="items1" />
        <variable citdl="int" line="3898" name="argOffset" />
        <variable citdl="list" line="3901" name="realArgs" />
        <variable citdl="list" line="3902" name="defaults" />
      </scope>
      <scope doc="Return the Turtleobject itself." ilk="function" name="getpen" signature="getpen()" />
      <scope doc="Return the TurtleScreen object, the turtle is drawing  on." ilk="function" name="getscreen" signature="getscreen()" />
      <scope doc="Return a list of names of all currently available turtle shapes." ilk="function" name="getshapes" signature="getshapes()" />
      <scope doc="Return the Turtleobject itself." ilk="function" name="getturtle" signature="getturtle()" />
      <scope doc="Move turtle to an absolute position." ilk="function" name="goto" signature="goto(x, y=None)" />
      <scope doc="Return the turtle&apos;s current heading." ilk="function" name="heading" signature="heading()" />
      <scope doc="Makes the turtle invisible." ilk="function" name="hideturtle" signature="hideturtle()" />
      <scope doc="Move turtle to the origin - coordinates (0,0)." ilk="function" name="home" signature="home()" />
      <scope doc="Makes the turtle invisible." ilk="function" name="ht" signature="ht()" />
      <scope doc="Return True if pen is down, False if it&apos;s up." ilk="function" name="isdown" signature="isdown()" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Return True if the Turtle is shown, False if it&apos;s hidden." ilk="function" name="isvisible" signature="isvisible()" />
      <scope doc="Join two or more pathname components, inserting &quot;\&quot; as needed." ilk="function" name="join" signature="join(a, *p)" />
      <scope doc="Turn turtle left by angle units." ilk="function" name="left" signature="left(angle)" />
      <scope doc="Set focus on TurtleScreen (in order to collect key-events)" ilk="function" name="listen" signature="listen(xdummy=None, ydummy=None)" />
      <scope doc="Turn turtle left by angle units." ilk="function" name="lt" signature="lt(angle)" />
      <scope doc="Starts event loop - calling Tkinter&apos;s mainloop function." ilk="function" name="mainloop" signature="mainloop()" />
      <import module="math" />
      <variable citdl="str" name="methodname" />
      <scope doc="Set turtle-mode (&apos;standard&apos;, &apos;logo&apos; or &apos;world&apos;) and perform reset." ilk="function" name="mode" signature="mode(mode=None)" />
      <scope doc="Pop up a dialog window for input of a number." ilk="function" name="numinput" signature="numinput(title, prompt, default=None, minval=None, maxval=None)" />
      <scope doc="Bind fun to mouse-click event on this turtle on canvas." ilk="function" name="onclick" signature="onclick(fun, btn=1, add=None)" />
      <scope doc="Bind fun to mouse-move event on this turtle on canvas." ilk="function" name="ondrag" signature="ondrag(fun, btn=1, add=None)" />
      <scope doc="Bind fun to key-release event of key." ilk="function" name="onkey" signature="onkey(fun, key)" />
      <scope doc="Bind fun to key-press event of key if key is given, or to any key-press-event if no key is given." ilk="function" name="onkeypress" signature="onkeypress(fun, key=None)" />
      <scope doc="Bind fun to key-release event of key." ilk="function" name="onkeyrelease" signature="onkeyrelease(fun, key)" />
      <scope doc="Bind fun to mouse-button-release event on this turtle on canvas." ilk="function" name="onrelease" signature="onrelease(fun, btn=1, add=None)" />
      <scope doc="Bind fun to mouse-click event on canvas." ilk="function" name="onscreenclick" signature="onscreenclick(fun, btn=1, add=None)" />
      <scope doc="Install a timer, which calls fun after t milliseconds." ilk="function" name="ontimer" signature="ontimer(fun, t=0)" />
      <import module="os" />
      <scope doc="Pull the pen down -- drawing when moving." ilk="function" name="pd" signature="pd()" />
      <scope doc="Return or set the pen&apos;s attributes." ilk="function" name="pen" signature="pen(pen=None, **pendict)" />
      <scope doc="Return or set the pencolor." ilk="function" name="pencolor" signature="pencolor(*args)" />
      <scope doc="Pull the pen down -- drawing when moving." ilk="function" name="pendown" signature="pendown()" />
      <scope doc="Set or return the line thickness." ilk="function" name="pensize" signature="pensize(width=None)" />
      <scope doc="Pull the pen up -- no drawing when moving." ilk="function" name="penup" signature="penup()" />
      <variable citdl="str" name="pl1" />
      <variable citdl="str" name="pl2" />
      <scope doc="Return the turtle&apos;s current location (x,y), as a Vec2D- vector." ilk="function" name="pos" signature="pos()" />
      <scope doc="Return the turtle&apos;s current location (x,y), as a Vec2D- vector." ilk="function" name="position" signature="position()" />
      <scope doc="Pull the pen up -- no drawing when moving." ilk="function" name="pu" signature="pu()" />
      <scope doc="Set the angle measurement units to radians." ilk="function" name="radians" signature="radians()" />
      <scope doc="Read in docstrings from lang-specific docstring dictionary." ilk="function" line="3863" lineend="3878" name="read_docstrings" signature="read_docstrings(lang)">
        <variable ilk="argument" name="lang" />
        <variable citdl="dict" line="3870" name="modname" />
        <variable citdl="module.docsdict" line="3872" name="docsdict" />
        <variable citdl="__import__()" line="3871" name="module" />
      </scope>
      <scope doc="Read config-files, change configuration-dict accordingly." ilk="function" line="200" lineend="228" name="readconfig" signature="readconfig(cfgdict)">
        <variable citdl="dict" line="215" name="cfgdict2" />
        <variable ilk="argument" name="cfgdict" />
        <variable citdl="dict" line="214" name="cfgdict1" />
        <variable citdl="join()" line="222" name="cfg_file2" />
        <variable citdl="str" line="213" name="default_cfg" />
      </scope>
      <scope doc="Adds a turtle shape to TurtleScreen&apos;s shapelist." ilk="function" name="register_shape" signature="register_shape(name, shape=None)" />
      <scope doc="Delete the turtle&apos;s drawings and restore its default values." ilk="function" name="reset" signature="reset()" />
      <scope doc="Reset all Turtles on the Screen to their initial state." ilk="function" name="resetscreen" signature="resetscreen()" />
      <scope doc="Set resizemode to one of the values: &quot;auto&quot;, &quot;user&quot;, &quot;noresize&quot;." ilk="function" name="resizemode" signature="resizemode(rmode=None)" />
      <scope doc="Turn turtle right by angle units." ilk="function" name="right" signature="right(angle)" />
      <scope doc="Turn turtle right by angle units." ilk="function" name="rt" signature="rt(angle)" />
      <scope doc="Resize the canvas the turtles are drawing on." ilk="function" name="screensize" signature="screensize(canvwidth=None, canvheight=None, bg=None)" />
      <scope doc="Set the orientation of the turtle to to_angle." ilk="function" name="seth" signature="seth(to_angle)" />
      <scope doc="Set the orientation of the turtle to to_angle." ilk="function" name="setheading" signature="setheading(to_angle)" />
      <scope doc="Move turtle to an absolute position." ilk="function" name="setpos" signature="setpos(x, y=None)" />
      <scope doc="Move turtle to an absolute position." ilk="function" name="setposition" signature="setposition(x, y=None)" />
      <scope doc="Rotate the turtleshape to point in the specified direction" ilk="function" name="settiltangle" signature="settiltangle(angle)" />
      <scope doc="Set or disable undobuffer." ilk="function" name="setundobuffer" signature="setundobuffer(size)" />
      <scope doc="Set the size and position of the main window." ilk="function" name="setup" signature="setup(width=0.5, height=0.75, startx=None, starty=None)" />
      <scope doc="Set up a user defined coordinate-system." ilk="function" name="setworldcoordinates" signature="setworldcoordinates(llx, lly, urx, ury)" />
      <scope doc="Set the turtle&apos;s first coordinate to x" ilk="function" name="setx" signature="setx(x)" />
      <scope doc="Set the turtle&apos;s second coordinate to y" ilk="function" name="sety" signature="sety(y)" />
      <scope doc="Set turtle shape to shape with given name / return current shapename." ilk="function" name="shape" signature="shape(name=None)" />
      <scope doc="Set/return turtle&apos;s stretchfactors/outline." ilk="function" name="shapesize" signature="shapesize(stretch_wid=None, stretch_len=None, outline=None)" />
      <scope doc="Set or return the current transformation matrix of the turtle shape." ilk="function" name="shapetransform" signature="shapetransform(t11=None, t12=None, t21=None, t22=None)" />
      <scope doc="Set or return the current shearfactor." ilk="function" name="shearfactor" signature="shearfactor(shear=None)" />
      <scope doc="Makes the turtle visible." ilk="function" name="showturtle" signature="showturtle()" />
      <import module="simpledialog" />
      <scope doc="Return or set the turtle&apos;s speed." ilk="function" name="speed" signature="speed(speed=None)" />
      <scope doc="Split a pathname." ilk="function" name="split" signature="split(p)" />
      <scope doc="Makes the turtle visible." ilk="function" name="st" signature="st()" />
      <scope doc="Stamp a copy of the turtleshape onto the canvas and return its id." ilk="function" name="stamp" signature="stamp()" />
      <scope doc="Pop up a dialog window for input of a string." ilk="function" name="textinput" signature="textinput(title, prompt)" />
      <scope doc="Rotate the turtleshape by angle." ilk="function" name="tilt" signature="tilt(angle)" />
      <scope doc="Set or return the current tilt-angle." ilk="function" name="tiltangle" signature="tiltangle(angle=None)" />
      <import module="time" />
      <scope doc="Set title of turtle-window" ilk="function" name="title" signature="title(titlestring)" />
      <scope doc="Return the angle of the line from the turtle&apos;s position to (x, y)." ilk="function" name="towards" signature="towards(x, y=None)" />
      <scope doc="Turns turtle animation on/off and set delay for update drawings." ilk="function" name="tracer" signature="tracer(n=None, delay=None)" />
      <scope doc="Return the list of turtles on the" ilk="function" name="turtles" signature="turtles()" />
      <scope doc="Set/return turtle&apos;s stretchfactors/outline." ilk="function" name="turtlesize" signature="turtlesize(stretch_wid=None, stretch_len=None, outline=None)" />
      <import module="types" />
      <scope doc="No argument." ilk="function" name="undo" signature="undo (repeatedly) the last turtle action." />
      <scope doc="Return count of entries in the undobuffer." ilk="function" name="undobufferentries" signature="undobufferentries()" />
      <scope doc="Pull the pen up -- no drawing when moving." ilk="function" name="up" signature="up()" />
      <scope doc="Perform a TurtleScreen update." ilk="function" name="update" signature="update()" />
      <scope doc="Set or return the line thickness." ilk="function" name="width" signature="width(width=None)" />
      <scope doc="Return the height of the turtle window." ilk="function" name="window_height" signature="window_height()" />
      <scope doc="Return the width of the turtle window." ilk="function" name="window_width" signature="window_width()" />
      <scope doc="Write text at the current turtle position." ilk="function" name="write" signature="write(arg, move=False, align=&apos;left&apos;, font=(&apos;Arial&apos;, 8, &apos;normal&apos;))" />
      <scope doc="Create and write docstring-dictionary to file." ilk="function" line="3829" lineend="3861" name="write_docstringdict" signature="write_docstringdict(filename=&apos;turtle_docstringdict&apos;)">
        <variable citdl="sorted()" line="3851" name="keys" />
        <variable citdl="open()" line="3850" name="f" />
        <variable citdl="dict" line="3841" name="docsdict" />
        <variable citdl="methodname" line="3844" name="key" />
        <variable citdl="str" ilk="argument" name="filename" />
      </scope>
      <scope doc="Return the turtle&apos;s x coordinate." ilk="function" name="xcor" signature="xcor()" />
      <scope doc="Return the turtle&apos;s y coordinate --- No arguments." ilk="function" name="ycor" signature="ycor()" />
      <scope attributes="__hidden__" ilk="function" line="3972" lineend="3976" name="switchpen" signature="switchpen()" />
      <variable attributes="private __hidden__" citdl="str" line="304" name="__stringBody" />
      <scope attributes="protected __hidden__" classrefs="TK.Tk" doc="Root class for Screen based on Tkinter." ilk="class" line="431" lineend="453" name="_Root">
        <scope attributes="__ctor__" ilk="function" line="433" lineend="434" name="__init__" signature="_Root()">
          <variable citdl="_Root" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="436" lineend="438" name="setupcanvas" signature="setupcanvas(width, height, cwidth, cheight)">
          <variable citdl="_Root" ilk="argument" name="self" />
          <variable ilk="argument" name="width" />
          <variable ilk="argument" name="height" />
          <variable ilk="argument" name="cwidth" />
          <variable ilk="argument" name="cheight" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="ScrolledCanvas" line="437" name="_canvas" />
        <scope attributes="protected" ilk="function" line="440" lineend="441" name="_getcanvas" returns="ScrolledCanvas" signature="_getcanvas()">
          <variable citdl="_Root" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="443" lineend="444" name="set_geometry" signature="set_geometry(width, height, startx, starty)">
          <variable citdl="_Root" ilk="argument" name="self" />
          <variable ilk="argument" name="width" />
          <variable ilk="argument" name="height" />
          <variable ilk="argument" name="startx" />
          <variable ilk="argument" name="starty" />
        </scope>
        <scope ilk="function" line="446" lineend="447" name="ondestroy" signature="ondestroy(destroy)">
          <variable citdl="_Root" ilk="argument" name="self" />
          <variable ilk="argument" name="destroy" />
        </scope>
        <scope ilk="function" line="449" lineend="450" name="win_width" returns="self.winfo_screenwidth()" signature="win_width()">
          <variable citdl="_Root" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="452" lineend="453" name="win_height" returns="self.winfo_screenheight()" signature="win_height()">
          <variable citdl="_Root" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="TurtleScreen" ilk="class" line="3661" lineend="3792" name="_Screen">
        <variable attributes="protected" citdl="_Root" line="3663" name="_root" />
        <variable attributes="protected" citdl="self._root._getcanvas()" line="3664" name="_canvas" />
        <variable attributes="protected" line="3665" name="_title" />
        <scope attributes="__ctor__" ilk="function" line="3667" lineend="3687" name="__init__" signature="_Screen()">
          <variable citdl="_Screen" ilk="argument" name="self" />
          <variable line="3678" name="width" />
          <variable line="3679" name="height" />
          <variable line="3680" name="canvwidth" />
          <variable line="3681" name="canvheight" />
          <variable line="3682" name="leftright" />
          <variable line="3683" name="topbottom" />
        </scope>
        <scope doc="Set the size and position of the main window." ilk="function" line="3689" lineend="3727" name="setup" signature="setup(width=[_CFG], height=[_CFG], startx=[_CFG], starty=[_CFG])">
          <variable citdl="_Screen" ilk="argument" name="self" />
          <variable citdl="self._root.win_width()" ilk="argument" name="width" />
          <variable citdl="self._root.win_height()" ilk="argument" name="height" />
          <variable citdl="self._root.win_width()" ilk="argument" name="startx" />
          <variable citdl="self._root.win_height()" ilk="argument" name="starty" />
          <variable citdl="self._root.win_width()" line="3716" name="sw" />
          <variable citdl="self._root.win_height()" line="3717" name="sh" />
        </scope>
        <scope doc="Set title of turtle-window" ilk="function" line="3729" lineend="3744" name="title" signature="title(titlestring)">
          <variable citdl="_Screen" ilk="argument" name="self" />
          <variable ilk="argument" name="titlestring" />
        </scope>
        <scope attributes="protected" ilk="function" line="3746" lineend="3754" name="_destroy" signature="_destroy()">
          <variable citdl="_Screen" ilk="argument" name="self" />
          <variable citdl="_Root" line="3747" name="root" />
        </scope>
        <scope doc="Shut the turtlegraphics window." ilk="function" line="3756" lineend="3762" name="bye" signature="bye()">
          <variable citdl="_Screen" ilk="argument" name="self" />
        </scope>
        <scope doc="Go into mainloop until the mouse is clicked." ilk="function" line="3764" lineend="3792" name="exitonclick" signature="exitonclick()">
          <variable citdl="_Screen" ilk="argument" name="self" />
          <scope ilk="function" line="3783" lineend="3785" name="exitGracefully" signature="Screen.bye() with two dummy-parameters">
            <variable ilk="argument" name="x" />
            <variable ilk="argument" name="y" />
          </scope>
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="148" name="_CFG" />
      <variable attributes="protected __hidden__" citdl="str" line="103" name="_ver" />
      <scope attributes="protected __hidden__" doc="Create a TurtleScreen if not already present." ilk="function" line="3823" lineend="3827" name="_getscreen" returns="Screen()" signature="_getscreen()" />
      <variable attributes="protected __hidden__" citdl="list" line="139" name="_tg_utilities" />
      <variable attributes="protected __hidden__" citdl="list" line="144" name="_alias_list" />
      <scope attributes="protected __hidden__" doc="Create the &apos;anonymous&apos; turtle if not already present." ilk="function" line="3817" lineend="3821" name="_getpen" signature="_getpen()" />
      <variable attributes="protected __hidden__" line="3880" name="_LANGUAGE" />
      <scope attributes="private __hidden__" doc="helper function for Scrolled Canvas" ilk="function" line="288" lineend="296" name="__methodDict" signature="__methodDict(cls, _dict)">
        <variable ilk="argument" name="cls" />
        <variable ilk="argument" name="_dict" />
        <variable citdl="list()" line="290" name="baseList" />
      </scope>
      <scope attributes="protected __hidden__" doc="To reduce docstrings from RawTurtle class for functions" ilk="function" line="3919" lineend="3929" name="_turtle_docrevise" returns="parexp.sub()" signature="_turtle_docrevise(docstr)">
        <import line="3922" module="re" />
        <variable ilk="argument" name="docstr" />
        <variable line="3925" name="turtlename" />
        <variable citdl="parexp.sub()" line="3926" name="newdocstr" />
        <variable citdl="re.compile()" line="3927" name="parexp" />
      </scope>
      <scope attributes="__hidden__" doc="Demo of some new features." ilk="function" line="4031" lineend="4128" name="demo2" signature="demo2()">
        <variable citdl="distance()" line="4037" name="radius" />
        <variable citdl="int" line="4048" name="laenge" />
        <variable citdl="getturtle()" line="4085" name="tri" />
        <variable citdl="Turtle" line="4087" name="turtle" />
        <variable citdl="int" line="4102" name="count" />
        <scope ilk="function" line="4117" lineend="4119" name="baba" signature="baba(xdummy, ydummy)">
          <variable ilk="argument" name="xdummy" />
          <variable ilk="argument" name="ydummy" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="list" line="117" name="_tg_classes" />
      <scope attributes="__hidden__" doc="Demo of old turtle.py - module" ilk="function" line="3978" lineend="4028" name="demo1" signature="demo1()" />
      <scope attributes="protected __hidden__" doc="To reduce docstrings from TurtleScreen class for functions" ilk="function" line="3931" lineend="3941" name="_screen_docrevise" returns="parexp.sub()" signature="_screen_docrevise(docstr)">
        <import line="3934" module="re" />
        <variable ilk="argument" name="docstr" />
        <variable line="3937" name="screenname" />
        <variable citdl="parexp.sub()" line="3938" name="newdocstr" />
        <variable citdl="re.compile()" line="3939" name="parexp" />
      </scope>
      <scope attributes="private __hidden__" doc="helper function for Scrolled Canvas" ilk="function" line="298" lineend="302" name="__methods" returns="_dict.keys()" signature="__methods(cls)">
        <variable ilk="argument" name="cls" />
        <variable attributes="protected" citdl="dict" line="300" name="_dict" />
      </scope>
      <variable attributes="protected __hidden__" citdl="list" line="119" name="_tg_screen_functions" />
      <scope attributes="private __hidden__" ilk="function" line="308" lineend="326" name="__forwardmethods" signature="__forwardmethods(fromClass, toClass, toPart, exclude=())">
        <variable ilk="argument" name="fromClass" />
        <variable ilk="argument" name="toClass" />
        <variable ilk="argument" name="toPart" />
        <variable citdl="tuple" ilk="argument" name="exclude" />
        <variable attributes="protected" citdl="dict" line="310" name="_dict_1" />
        <variable attributes="protected" citdl="dict" line="312" name="_dict" />
        <variable citdl="__methods()" line="313" name="mfc" />
        <variable citdl="dict" line="321" name="d" />
        <variable citdl="dict" line="323" name="execString" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="object" doc="Helper class: Datatype to store Turtle attributes" ilk="class" line="2478" lineend="2506" name="_TurtleImage">
        <scope attributes="__ctor__" ilk="function" line="2482" lineend="2485" name="__init__" signature="_TurtleImage(screen, shapeIndex)">
          <variable citdl="_TurtleImage" ilk="argument" name="self" />
          <variable ilk="argument" name="screen" />
          <variable ilk="argument" name="shapeIndex" />
        </scope>
        <variable attributes="__instancevar__" line="2483" name="screen" />
        <variable attributes="protected __instancevar__" line="2484" name="_type" />
        <scope attributes="protected" ilk="function" line="2487" lineend="2506" name="_setshape" signature="_setshape(shapeIndex)">
          <variable citdl="_TurtleImage" ilk="argument" name="self" />
          <variable ilk="argument" name="shapeIndex" />
          <variable line="2488" name="screen" />
        </scope>
        <variable attributes="__instancevar__" line="2489" name="shapeIndex" />
        <variable attributes="protected __instancevar__" citdl="screen._createimage()" line="2501" name="_item" />
      </scope>
      <variable attributes="protected __hidden__" citdl="list" line="126" name="_tg_turtle_functions" />
    </scope>
    <scope doc="Simple class to read IFF chunks.  An IFF chunk (used in formats such as AIFF, TIFF, RMFF (RealMedia File" ilk="blob" lang="Python3" name="chunk">
      <scope classrefs="object" ilk="class" line="51" lineend="167" name="Chunk">
        <scope ilk="function" line="91" lineend="94" name="isatty" returns="bool" signature="isatty()">
          <variable citdl="Chunk" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="65" name="chunksize" />
        <scope doc="Read at most size bytes from the chunk." ilk="function" line="120" lineend="141" name="read" returns="str" signature="read(size=-1)">
          <variable citdl="Chunk" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="size" />
          <variable citdl="self.file.read()" line="134" name="data" />
          <variable citdl="self.file.read()" line="139" name="dummy" />
        </scope>
        <scope doc="Skip the rest of the chunk." ilk="function" line="143" lineend="167" name="skip" signature="skip()">
          <variable citdl="Chunk" ilk="argument" name="self" />
          <variable citdl="len()" line="154" name="n" />
          <variable citdl="read()" line="165" name="dummy" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="55" name="align" />
        <scope ilk="function" line="115" lineend="118" name="tell" returns="int" signature="tell()">
          <variable citdl="Chunk" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the size of the current chunk." ilk="function" line="82" lineend="84" name="getsize" returns="int" signature="getsize()">
          <variable citdl="Chunk" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="file.read()" line="61" name="chunkname" />
        <variable attributes="__instancevar__" line="60" name="file" />
        <variable attributes="__instancevar__" citdl="self.file.tell()" line="72" name="offset" />
        <variable attributes="__instancevar__" citdl="False" line="74" name="seekable" />
        <scope ilk="function" line="86" lineend="89" name="close" signature="close()">
          <variable citdl="Chunk" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="len()" line="70" name="size_read" />
        <scope doc="Seek to specified position into the chunk." ilk="function" line="96" lineend="113" name="seek" signature="seek(pos, whence=0)">
          <variable citdl="Chunk" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="pos" />
          <variable citdl="int" ilk="argument" name="whence" />
        </scope>
        <scope doc="Return the name (ID) of the current chunk." ilk="function" line="78" lineend="80" name="getname" returns="file.read()" signature="getname()">
          <variable citdl="Chunk" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="52" lineend="76" name="__init__" signature="Chunk(file, align=True, bigendian=True, inclheader=False)">
          <import line="53" module="struct" />
          <variable citdl="Chunk" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="True" ilk="argument" name="align" />
          <variable citdl="True" ilk="argument" name="bigendian" />
          <variable citdl="False" ilk="argument" name="inclheader" />
          <variable citdl="str" line="57" name="strflag" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="54" name="closed" />
      </scope>
    </scope>
    <scope doc="# Module providing the `Process` class which emulates `threading.Thread` # # multiprocessing/process.py" ilk="blob" lang="Python3" name="multiprocessing.process">
      <scope classrefs="bytes" ilk="class" line="260" lineend="268" name="AuthenticationString">
        <scope ilk="function" line="261" lineend="268" name="__reduce__" returns="tuple" signature="__reduce__()">
          <import line="262" module=".forking" symbol="Popen" />
          <variable citdl="AuthenticationString" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="str" line="25" name="ORIGINAL_DIR" />
      <scope classrefs="object" doc="Process objects represent activity that is run in a separate process  The class is analagous to `threading.Thread`" ilk="class" line="60" lineend="254" name="Process">
        <scope attributes="__hidden__" doc="Return indentifier (PID) of process or `None` if it has yet to start" ilk="function" line="180" lineend="187" name="ident (property getter)" returns="os.getpid()" signature="ident (property getter)()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="set()" line="220" name="_children" />
        <variable citdl="start.Popen()" line="189" name="pid" />
        <scope attributes="__hidden__" doc="Return exit code of process or `None` if it has yet to stop" ilk="function" line="171" lineend="177" name="exitcode (property getter)" returns="self._popen.poll()" signature="exitcode (property getter)()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" doc="Return whether process is a daemon" ilk="function" line="145" lineend="149" name="daemon (property getter)" returns="_current_process._daemonic" signature="daemon (property getter)()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="68" lineend="81" name="__init__" signature="Process(group=None, target=None, name=None, args=(), kwargs={})">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable ilk="argument" name="group" />
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="name" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable citdl="dict" ilk="argument" name="kwargs" />
          <variable citdl="next()" line="70" name="count" />
        </scope>
        <variable attributes="protected __instancevar__" line="77" name="_target" />
        <variable attributes="protected __instancevar__" citdl="tuple()" line="78" name="_args" />
        <scope doc="Start child process" ilk="function" line="90" lineend="105" name="start" signature="start()">
          <import line="103" module=".forking" symbol="Popen" />
          <variable citdl="Process" ilk="argument" name="self" />
          <variable line="101" name="Popen" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_current_process._authkey" line="72" name="_authkey" />
        <variable attributes="protected __instancevar__" citdl="tuple" line="71" name="_identity" />
        <scope attributes="protected" ilk="function" line="215" lineend="254" name="_bootstrap" returns="int" signature="_bootstrap()">
          <import line="216" module="." symbol="util" />
          <import line="248" module="traceback" />
          <variable citdl="Process" ilk="argument" name="self" />
          <variable attributes="protected" citdl="Process" line="228" name="_current_process" />
          <variable citdl="int" line="234" name="exitcode" />
        </scope>
        <scope doc="Return whether process is alive" ilk="function" line="123" lineend="133" name="is_alive" returns="bool" signature="is_alive()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="140" lineend="142" name="name (property setter)" signature="name (property setter)(name)">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="protected" line="66" name="_Popen" />
        <scope doc="Method to be run in sub-process; can be overridden in sub- class" ilk="function" line="83" lineend="88" name="run" signature="run()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_current_process._daemonic" line="73" name="_daemonic" />
        <scope doc="Terminate process; sends SIGTERM signal or uses TerminateProcess()" ilk="function" line="107" lineend="111" name="terminate" signature="terminate()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="_current_process._authkey" line="160" name="authkey" />
        <scope attributes="__hidden__" doc="Set whether process is a daemon" ilk="function" line="152" lineend="157" name="daemon (property setter)" signature="daemon (property setter)(daemonic)">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable ilk="argument" name="daemonic" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_current_process._tempdir" line="74" name="_tempdir" />
        <variable attributes="protected __instancevar__" citdl="start.Popen()" line="76" name="_popen" />
        <variable attributes="protected __instancevar__" citdl="itertools.count()" line="221" name="_counter" />
        <variable attributes="property" citdl="_current_process._daemonic" line="145" name="daemon" />
        <variable attributes="property" citdl="start.Popen()" line="180" name="ident" />
        <scope doc="Wait until child process terminates" ilk="function" line="113" lineend="121" name="join" signature="join(timeout=None)">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="self._popen.wait()" line="119" name="res" />
        </scope>
        <variable attributes="property" citdl="str.join()" line="136" name="name" />
        <scope attributes="__hidden__" ilk="function" line="160" lineend="161" name="authkey (property getter)" returns="_current_process._authkey" signature="authkey (property getter)()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="80" name="_name" />
        <scope attributes="__hidden__" ilk="function" line="136" lineend="137" name="name (property getter)" returns="str" signature="name (property getter)()">
          <variable citdl="Process" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" doc="Set authorization key of process" ilk="function" line="164" lineend="168" name="authkey (property setter)" signature="authkey (property setter)(authkey)">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable ilk="argument" name="authkey" />
        </scope>
        <scope ilk="function" line="191" lineend="211" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="Process" ilk="argument" name="self" />
          <variable citdl="str" line="193" name="status" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="os.getpid()" line="75" name="_parent_pid" />
        <variable attributes="protected __instancevar__" citdl="dict()" line="79" name="_kwargs" />
        <variable attributes="property" citdl="start.Popen()" line="171" name="exitcode" />
      </scope>
      <variable citdl="list" line="9" name="__all__" />
      <scope doc="Return list of process objects corresponding to live child processes" ilk="function" line="39" lineend="44" name="active_children" returns="list()" signature="active_children()" />
      <scope doc="Return process object representing the current process" ilk="function" line="33" lineend="37" name="current_process" returns="_current_process" signature="current_process()" />
      <import module="itertools" />
      <variable citdl="str" name="name" />
      <import module="os" />
      <import module="signal" />
      <scope doc="The default handler for SIGINT installed by Python." ilk="function" name="signum" signature="default_int_handler(...)" />
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="50" lineend="54" name="_cleanup" signature="_cleanup()" />
      <scope attributes="protected __hidden__" classrefs="Process" ilk="class" line="274" lineend="285" name="_MainProcess">
        <scope attributes="__ctor__" ilk="function" line="276" lineend="285" name="__init__" signature="_MainProcess()">
          <variable citdl="_MainProcess" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="tuple" line="277" name="_identity" />
        <variable attributes="protected __instancevar__" citdl="False" line="278" name="_daemonic" />
        <variable attributes="protected __instancevar__" citdl="str" line="279" name="_name" />
        <variable attributes="protected __instancevar__" line="280" name="_parent_pid" />
        <variable attributes="protected __instancevar__" line="281" name="_popen" />
        <variable attributes="protected __instancevar__" citdl="itertools.count()" line="282" name="_counter" />
        <variable attributes="protected __instancevar__" citdl="set()" line="283" name="_children" />
        <variable attributes="protected __instancevar__" citdl="AuthenticationString" line="284" name="_authkey" />
        <variable attributes="protected __instancevar__" line="285" name="_tempdir" />
      </scope>
      <variable attributes="protected __hidden__" citdl="_MainProcess" line="287" name="_current_process" />
      <variable attributes="protected __hidden__" citdl="dict" line="294" name="_exitcode_to_name" />
    </scope>
    <scope doc="distutils.dist  Provides the Distribution class, which represents the module distribution" ilk="blob" lang="Python3" name="distutils.dist">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <variable citdl="NoneType" name="DEBUG" />
      <scope classrefs="object" doc="The core of the Distutils.  Most of the work hiding behind &apos;setup&apos; is really done within a Distribution instance, which farms the work out to the Distutils commands specified on the command line." ilk="class" line="29" lineend="968" name="Distribution">
        <variable citdl="list" line="68" name="display_options" />
        <variable attributes="__instancevar__" line="195" name="ext_modules" />
        <variable attributes="__instancevar__" citdl="int" line="132" name="verbose" />
        <variable citdl="str" line="60" name="common_usage" />
        <variable attributes="__instancevar__" citdl="dict" line="173" name="command_options" />
        <variable citdl="list" line="52" name="global_options" />
        <variable attributes="__instancevar__" line="165" name="script_name" />
        <scope doc="Parse the setup script&apos;s command line, taken from the &apos;script_args&apos; instance attribute (which defaults to &apos;sys.argv[1:]&apos; -- see &apos;setup()&apos; in core.py)." ilk="function" line="391" lineend="456" name="parse_command_line" returns="bool" signature="parse_command_line()">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable citdl="self._get_toplevel_options()" line="414" name="toplevel_options" />
          <variable citdl="FancyGetopt()" line="424" name="parser" />
          <variable citdl="self._parse_command_opts()" line="427" name="args" />
          <variable citdl="parser.get_option_order()" line="428" name="option_order" />
        </scope>
        <scope ilk="function" line="953" lineend="954" name="has_modules" returns="Distribution.has_pure_modules()" signature="has_modules()">
          <variable citdl="Distribution" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="276" lineend="300" name="dump_option_dicts" signature="dump_option_dicts(header=None, commands=None, indent=&apos;&apos;)">
          <import line="277" module="pprint" symbol="pformat" />
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="header" />
          <variable citdl="sorted()" ilk="argument" name="commands" />
          <variable citdl="str" ilk="argument" name="indent" />
          <variable citdl="self.command_options.get()" line="291" name="opt_dict" />
          <variable citdl="pformat()" line="298" name="out" />
        </scope>
        <scope doc="Return the command object for &apos;command&apos;." ilk="function" line="798" lineend="823" name="get_command_obj" returns="klass()" signature="get_command_obj(command, create=1)">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
          <variable citdl="int" ilk="argument" name="create" />
          <variable citdl="self.command_obj.get()" line="804" name="cmd_obj" />
          <variable citdl="get_command_class()" line="810" name="klass" />
          <variable citdl="self.command_options.get()" line="819" name="options" />
        </scope>
        <variable attributes="__instancevar__" line="200" name="data_files" />
        <variable attributes="__instancevar__" line="196" name="ext_package" />
        <scope attributes="__ctor__" doc="Construct a new Distribution instance: initialize all the attributes of a Distribution, and then use &apos;attrs&apos; (a dictionary mapping attribute names to values) to assign some of those attributes their &quot;real&quot; values." ilk="function" line="120" lineend="263" name="__init__" signature="Distribution(attrs=None)">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="attrs" />
          <variable citdl="basename" line="145" name="method_name" />
          <variable citdl="attrs.get()" line="230" name="options" />
          <variable citdl="self.get_option_dict()" line="234" name="opt_dict" />
          <variable citdl="str" line="241" name="msg" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="134" name="help" />
        <scope doc="Run each command that was seen on the setup script command line." ilk="function" line="913" lineend="919" name="run_commands" signature="run_commands()">
          <variable citdl="Distribution" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="184" name="dist_files" />
        <variable attributes="__instancevar__" citdl="str" line="201" name="password" />
        <variable attributes="__instancevar__" citdl="int" line="133" name="dry_run" />
        <scope ilk="function" line="950" lineend="951" name="has_c_libraries" returns="bool" signature="has_c_libraries()">
          <variable citdl="Distribution" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="152" name="cmdclass" />
        <scope ilk="function" line="345" lineend="387" name="parse_config_files" signature="parse_config_files(filenames=None)">
          <import line="346" module="configparser" symbol="ConfigParser" />
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable citdl="find_config_files()" ilk="argument" name="filenames" />
          <variable citdl="ConfigParser()" line="354" name="parser" />
          <variable citdl="parser.options()" line="360" name="options" />
          <variable citdl="get_option_dict()" line="361" name="opt_dict" />
          <variable citdl="parser.get()" line="365" name="val" />
          <variable citdl="opt.replace()" line="366" name="opt" />
          <variable citdl="self.negative_opt.get()" line="378" name="alias" />
        </scope>
        <variable attributes="__instancevar__" line="192" name="py_modules" />
        <variable attributes="__instancevar__" line="198" name="extra_path" />
        <variable citdl="list" line="112" name="display_option_names" />
        <variable attributes="__instancevar__" line="193" name="libraries" />
        <scope attributes="protected" doc="Return the non-display options recognized at the top level." ilk="function" line="458" lineend="466" name="_get_toplevel_options" returns="list" signature="_get_toplevel_options()">
          <variable citdl="Distribution" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="207" name="command_obj" />
        <scope ilk="function" line="910" lineend="911" name="announce" signature="announce(msg, level=log.INFO)">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="log.INFO" ilk="argument" name="level" />
        </scope>
        <variable citdl="dict" line="115" name="negative_opt" />
        <scope doc="Do whatever it takes to run a command (including nothing at all, if the command has already been run)." ilk="function" line="923" lineend="939" name="run_command" signature="run_command(command)">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
          <variable citdl="get_command_obj()" line="936" name="cmd_obj" />
        </scope>
        <variable attributes="__instancevar__" citdl="DistributionMetadata()" line="143" name="metadata" />
        <scope attributes="protected" doc="Set the options for &apos;command_obj&apos; from &apos;option_dict&apos;." ilk="function" line="825" lineend="867" name="_set_command_options" signature="_set_command_options(command_obj, option_dict=None)">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="command_obj" />
          <variable citdl="get_option_dict()" ilk="argument" name="option_dict" />
          <variable citdl="command_obj.get_command_name()" line="834" name="command_name" />
          <variable citdl="list" line="845" name="bool_opts" />
          <variable citdl="command_obj.negative_opt" line="850" name="neg_opt" />
          <variable citdl="isinstance()" line="855" name="is_string" />
        </scope>
        <scope doc="Reinitializes a command to the state it was in when first returned by &apos;get_command_obj()&apos;: ie., initialized but not yet finalized." ilk="function" line="869" lineend="906" name="reinitialize_command" returns="get_command_obj()" signature="reinitialize_command(command, reinit_subcommands=0)">
          <import line="888" module="distutils.cmd" symbol="Command" />
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable citdl="get_command_obj()" ilk="argument" name="command" />
          <variable citdl="int" ilk="argument" name="reinit_subcommands" />
          <variable citdl="command.get_command_name()" line="890" name="command_name" />
        </scope>
        <scope attributes="protected" doc="Parse the command-line options for a single command." ilk="function" line="469" lineend="559" name="_parse_command_opts" signature="_parse_command_opts(parser, args)">
          <import line="479" module="distutils.cmd" symbol="Command" />
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="parser" />
          <variable ilk="argument" name="args" />
          <variable line="482" name="command" />
          <variable citdl="self.get_command_class()" line="491" name="cmd_class" />
          <variable citdl="negative_opt.copy()" line="511" name="negative_opt" />
          <variable citdl="fix_help_options()" line="520" name="help_options" />
          <variable citdl="int" line="538" name="help_option_found" />
          <variable citdl="get_option_dict()" line="555" name="opt_dict" />
        </scope>
        <scope ilk="function" line="944" lineend="945" name="has_pure_modules" returns="bool" signature="has_pure_modules()">
          <variable citdl="Distribution" ilk="argument" name="self" />
        </scope>
        <scope doc="If there were any non-global &quot;display-only&quot; options (--help- commands or the metadata display options) on the command line, display the requested info and return true; else return false." ilk="function" line="624" lineend="662" name="handle_display_options" returns="int" signature="handle_display_options(option_order)">
          <import line="630" module="distutils.core" symbol="gen_usage" />
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="option_order" />
          <variable citdl="int" line="644" name="any_display_options" />
          <variable citdl="dict" line="645" name="is_display_option" />
          <variable citdl="translate_longopt()" line="651" name="opt" />
          <variable citdl="getattr()()" line="652" name="value" />
        </scope>
        <scope doc="Find as many configuration files as should be processed for this platform, and return a list of filenames in the order in which they should be parsed." ilk="function" line="304" lineend="343" name="find_config_files" returns="list" signature="find_config_files()">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable citdl="list" line="316" name="files" />
          <variable citdl="os.path.dirname()" line="320" name="sys_dir" />
          <variable citdl="os.path.join()" line="323" name="sys_file" />
          <variable citdl="str" line="329" name="user_filename" />
          <variable citdl="os.path.join()" line="334" name="user_file" />
          <variable citdl="str" line="339" name="local_file" />
        </scope>
        <scope ilk="function" line="947" lineend="948" name="has_ext_modules" returns="bool" signature="has_ext_modules()">
          <variable citdl="Distribution" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="965" lineend="968" name="is_pure" returns="Distribution.has_pure_modules()" signature="is_pure()">
          <variable citdl="Distribution" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="199" name="scripts" />
        <variable attributes="__instancevar__" citdl="list" line="160" name="command_packages" />
        <variable attributes="__instancevar__" line="189" name="packages" />
        <scope doc="Print out a help message listing all available commands with a description of each." ilk="function" line="681" lineend="712" name="print_commands" signature="print_commands()">
          <import line="689" module="distutils.command" />
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable citdl="distutils.command.__all__" line="690" name="std_commands" />
          <variable citdl="dict" line="691" name="is_std" />
          <variable citdl="list" line="695" name="extra_commands" />
          <variable citdl="int" line="700" name="max_length" />
        </scope>
        <variable attributes="__instancevar__" line="197" name="include_dirs" />
        <scope doc="Get a list of (command, description) tuples." ilk="function" line="714" lineend="744" name="get_command_list" returns="list" signature="get_command_list()">
          <import line="723" module="distutils.command" />
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable citdl="distutils.command.__all__" line="724" name="std_commands" />
          <variable citdl="dict" line="725" name="is_std" />
          <variable citdl="list" line="729" name="extra_commands" />
          <variable citdl="list" line="734" name="rv" />
          <variable citdl="self.cmdclass.get()" line="736" name="klass" />
          <variable citdl="str" line="740" name="description" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="423" name="commands" />
        <variable attributes="__instancevar__" line="191" name="package_dir" />
        <variable attributes="__instancevar__" citdl="dict" line="219" name="have_run" />
        <scope ilk="function" line="956" lineend="957" name="has_headers" returns="bool" signature="has_headers()">
          <variable citdl="Distribution" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="959" lineend="960" name="has_scripts" returns="bool" signature="has_scripts()">
          <variable citdl="Distribution" ilk="argument" name="self" />
        </scope>
        <scope doc="Print a subset of the list of all commands -- used by &apos;print_commands()&apos;." ilk="function" line="664" lineend="679" name="print_command_list" signature="print_command_list(commands, header, max_length)">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="commands" />
          <variable ilk="argument" name="header" />
          <variable ilk="argument" name="max_length" />
          <variable citdl="self.get_command_class()" line="671" name="klass" />
          <variable citdl="klass.description" line="675" name="description" />
        </scope>
        <variable attributes="__instancevar__" line="194" name="headers" />
        <variable attributes="__instancevar__" citdl="dict" line="190" name="package_data" />
        <scope doc="Return a list of packages from which commands are loaded." ilk="function" line="748" lineend="758" name="get_command_packages" returns="str" signature="get_command_packages()">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable citdl="list" line="750" name="pkgs" />
        </scope>
        <variable attributes="__instancevar__" line="166" name="script_args" />
        <scope doc="Set final values for all the options on the Distribution instance, analogous to the .finalize_options() method of Command objects." ilk="function" line="561" lineend="572" name="finalize_options" signature="finalize_options()">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable citdl="list" line="567" name="value" />
        </scope>
        <scope doc="Return the class that implements the Distutils command named by &apos;command&apos;." ilk="function" line="760" lineend="796" name="get_command_class" returns="getattr()" signature="get_command_class(command)">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
          <variable citdl="self.cmdclass.get()" line="772" name="klass" />
          <variable citdl="str" line="777" name="module_name" />
          <variable line="778" name="klass_name" />
          <variable line="782" name="module" />
        </scope>
        <scope doc="Get the option dictionary for a given command." ilk="function" line="265" lineend="274" name="get_option_dict" returns="dict" signature="get_option_dict(command)">
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
          <variable citdl="self.command_options.get()" line="271" name="dict" />
        </scope>
        <scope attributes="protected" doc="Show help for the setup script command-line in the form of several lists of command-line options." ilk="function" line="574" lineend="622" name="_show_help" signature="_show_help(parser, global_options=1, display_options=1, commands=[])">
          <import line="589" module="distutils.core" symbol="gen_usage" />
          <import line="590" module="distutils.cmd" symbol="Command" />
          <variable citdl="Distribution" ilk="argument" name="self" />
          <variable ilk="argument" name="parser" />
          <variable citdl="int" ilk="argument" name="global_options" />
          <variable citdl="int" ilk="argument" name="display_options" />
          <variable citdl="list" ilk="argument" name="commands" />
          <variable citdl="_get_toplevel_options()" line="594" name="options" />
          <variable citdl="self.get_command_class()" line="610" name="klass" />
        </scope>
        <scope ilk="function" line="962" lineend="963" name="has_data_files" returns="bool" signature="has_data_files()">
          <variable citdl="Distribution" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Dummy class to hold the distribution meta-data: name, version, author, and so forth." ilk="class" line="977" lineend="1137" name="DistributionMetadata">
        <variable attributes="__instancevar__" line="997" name="maintainer" />
        <variable attributes="__instancevar__" line="998" name="maintainer_email" />
        <variable attributes="__instancevar__" line="1004" name="platforms" />
        <scope ilk="function" line="1130" lineend="1131" name="get_obsoletes" returns="list" signature="get_obsoletes()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="1003" name="keywords" />
        <scope ilk="function" line="1067" lineend="1068" name="get_author" returns="str" signature="get_author()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="1002" name="long_description" />
        <scope attributes="__ctor__" ilk="function" line="992" lineend="1010" name="__init__" signature="DistributionMetadata()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1098" lineend="1099" name="get_keywords" returns="list" signature="get_keywords()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1114" lineend="1118" name="set_requires" signature="set_requires(value)">
          <import line="1115" module="distutils.versionpredicate" />
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" line="995" name="author" />
        <variable attributes="__instancevar__" line="996" name="author_email" />
        <scope ilk="function" line="1104" lineend="1105" name="get_classifiers" returns="list" signature="get_classifiers()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1061" lineend="1062" name="get_version" returns="str" signature="get_version()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <variable citdl="DistributionMetadata.get_license" line="1090" name="get_licence" />
        <variable attributes="__instancevar__" line="1006" name="download_url" />
        <scope ilk="function" line="1095" lineend="1096" name="get_long_description" returns="str" signature="get_long_description()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="994" name="version" />
        <variable attributes="__instancevar__" line="1010" name="obsoletes" />
        <variable attributes="__instancevar__" citdl="list" line="1008" name="provides" />
        <scope ilk="function" line="1070" lineend="1071" name="get_author_email" returns="str" signature="get_author_email()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1133" lineend="1137" name="set_obsoletes" signature="set_obsoletes(value)">
          <import line="1134" module="distutils.versionpredicate" />
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" line="1001" name="description" />
        <scope ilk="function" line="1111" lineend="1112" name="get_requires" returns="list" signature="get_requires()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1120" lineend="1121" name="get_provides" returns="list" signature="get_provides()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1092" lineend="1093" name="get_description" returns="str" signature="get_description()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1123" lineend="1128" name="set_provides" signature="set_provides(value)">
          <import line="1126" module="distutils.versionpredicate" />
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="1107" lineend="1108" name="get_download_url" returns="str" signature="get_download_url()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected" citdl="tuple" line="982" name="_METHOD_BASENAMES" />
        <scope ilk="function" line="1076" lineend="1077" name="get_maintainer_email" returns="str" signature="get_maintainer_email()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="1005" name="classifiers" />
        <variable attributes="__instancevar__" line="993" name="name" />
        <variable attributes="__instancevar__" line="1000" name="license" />
        <variable attributes="__instancevar__" line="999" name="url" />
        <scope ilk="function" line="1082" lineend="1083" name="get_contact_email" returns="str" signature="get_contact_email()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1073" lineend="1074" name="get_maintainer" returns="str" signature="get_maintainer()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope doc="Write the PKG-INFO format data to a file object." ilk="function" line="1019" lineend="1050" name="write_pkg_file" signature="write_pkg_file(file)">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="str" line="1022" name="version" />
          <variable citdl="rfc822_escape()" line="1037" name="long_desc" />
          <variable citdl="str.join()" line="1040" name="keywords" />
        </scope>
        <scope ilk="function" line="1058" lineend="1059" name="get_name" returns="str" signature="get_name()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope doc="Write the PKG-INFO file into the release tree." ilk="function" line="1012" lineend="1017" name="write_pkg_info" signature="write_pkg_info(base_dir)">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
          <variable ilk="argument" name="base_dir" />
          <variable citdl="open()" line="1015" name="pkg_info" />
        </scope>
        <scope ilk="function" line="1101" lineend="1102" name="get_platforms" returns="list" signature="get_platforms()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="1052" lineend="1054" name="_write_list" signature="_write_list(file, name, values)">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="values" />
        </scope>
        <scope ilk="function" line="1085" lineend="1086" name="get_url" returns="str" signature="get_url()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1088" lineend="1089" name="get_license" returns="str" signature="get_license()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="1009" name="requires" />
        <scope ilk="function" line="1064" lineend="1065" name="get_fullname" returns="tuple" signature="get_fullname()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1079" lineend="1080" name="get_contact" returns="str" signature="get_contact()">
          <variable citdl="DistributionMetadata" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="Wrapper around the standard &apos;getopt()&apos; module that provides some handy extra functionality:   * short and long options are tied together" ilk="class" name="FancyGetopt" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" line="7" name="__revision__" />
      <scope doc="Ensure that &apos;os.environ&apos; has all the environment variables we guarantee that users can use in config files, command- line options, etc." ilk="function" name="check_environ" signature="check_environ()" />
      <variable citdl="SRE_Pattern" line="26" name="command_re" />
      <scope doc="Convert a 4-tuple &apos;help_options&apos; list as found in various command classes to the 3-tuple form required by FancyGetopt." ilk="function" line="1139" lineend="1146" name="fix_help_options" returns="list" signature="fix_help_options(options)">
        <variable ilk="argument" name="options" />
        <variable citdl="list" line="1143" name="new_options" />
      </scope>
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <scope doc="Return a version of the string escaped for inclusion in an RFC-822 header, by ensuring there are 8 spaces space after each newline." ilk="function" name="rfc822_escape" signature="rfc822_escape(header)" />
      <scope doc="Convert a string representation of truth to true (1) or false (0)." ilk="function" name="strtobool" signature="strtobool(val)" />
      <import module="sys" />
      <scope doc="Convert a long option name to a valid Python identifier by changing &quot;-&quot; to &quot;_&quot;." ilk="function" name="translate_longopt" signature="translate_longopt(opt)" />
      <import module="warnings" />
      <variable attributes="__hidden__" line="14" name="warnings" />
    </scope>
    <scope doc="Standard &quot;encodings&quot; Package      Standard Python encoding modules are stored in this package" ilk="blob" lang="Python3" name="encodings">
      <scope classrefs="LookupError SystemError" ilk="class" line="39" lineend="40" name="CodecRegistryError" />
      <import module="aliases" />
      <import module="codecs" />
      <import module="cp1252" />
      <import module="cp437" />
      <import module="latin_1" />
      <scope doc="Normalize an encoding name." ilk="function" line="42" lineend="67" name="normalize_encoding" returns="str.join()" signature="normalize_encoding(encoding)">
        <variable citdl="False" line="58" name="punct" />
        <variable citdl="list" line="57" name="chars" />
        <variable citdl="str()" ilk="argument" name="encoding" />
      </scope>
      <scope ilk="function" line="69" lineend="150" name="search_function" returns="getregentry()" signature="search_function(encoding)">
        <variable ilk="argument" name="encoding" />
        <variable citdl="normalize_encoding()" line="83" name="norm_encoding" />
        <variable citdl="_aliases.get()" line="84" name="aliased_encoding" />
        <variable citdl="mod.getaliases()" line="141" name="codecaliases" />
        <variable citdl="list" line="87" name="modnames" />
        <variable citdl="mod.getregentry" line="107" name="getregentry" />
        <variable citdl="_cache.get()" line="72" name="entry" />
        <variable citdl="__import__()" line="97" name="mod" />
      </scope>
      <import module="utf_8" />
      <variable attributes="protected __hidden__" citdl="list" line="36" name="_import_tail" />
      <variable attributes="protected __hidden__" citdl="str" line="35" name="_unknown" />
      <variable attributes="protected __hidden__" citdl="aliases.aliases" line="37" name="_aliases" />
      <variable attributes="protected __hidden__" citdl="dict" line="34" name="_cache" />
    </scope>
    <scope doc="# This directory is a Python package." ilk="blob" lang="Python3" name="http">
      <import module="client" />
      <import module="cookies" />
      <import module="server" />
    </scope>
    <scope doc="Fixer that turns &lt;&gt; into !=." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_ne">
      <scope classrefs="BaseFix" ilk="class" line="12" lineend="23" name="FixNe">
        <variable attributes="protected" citdl="token.NOTEQUAL" line="15" name="_accept_type" />
        <scope ilk="function" line="21" lineend="23" name="transform" returns="pytree.Leaf()" signature="transform(node, results)">
          <variable citdl="FixNe" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="pytree.Leaf()" line="22" name="new" />
        </scope>
        <scope ilk="function" line="17" lineend="19" name="match" returns="bool" signature="match(node)">
          <variable citdl="FixNe" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
        </scope>
      </scope>
      <import module="fixer_base" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_tkinter">
      <variable citdl="int" name="ALL_EVENTS" />
      <variable citdl="int" name="DONT_WAIT" />
      <variable citdl="int" name="EXCEPTION" />
      <variable citdl="int" name="FILE_EVENTS" />
      <variable citdl="int" name="IDLE_EVENTS" />
      <variable citdl="int" name="READABLE" />
      <variable citdl="str" name="TCL_VERSION" />
      <variable citdl="int" name="TIMER_EVENTS" />
      <variable citdl="str" name="TK_VERSION" />
      <scope classrefs="Exception" ilk="class" name="TclError" />
      <scope classrefs="object" ilk="class" name="Tcl_Obj" />
      <scope classrefs="object" ilk="class" name="TkappType" />
      <scope classrefs="object" ilk="class" name="TkttType" />
      <variable citdl="int" name="WINDOW_EVENTS" />
      <variable citdl="int" name="WRITABLE" />
      <scope ilk="function" name="create" returns="tkapp" />
      <scope doc="Return the current busy-wait interval between successive calls to Tcl_DoOneEvent in a threaded Python interpreter." ilk="function" name="getbusywaitinterval" returns="int" signature="getbusywaitinterval() -&gt; int" />
      <scope doc="Set the busy-wait interval in milliseconds between successive calls to Tcl_DoOneEvent in a threaded Python interpreter." ilk="function" name="setbusywaitinterval" signature="setbusywaitinterval(n) -&gt; None" />
      <scope attributes="__hidden__" ilk="class" name="tkapp">
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="T.__new__(S, ...) -&gt; a new object with type S, a subtype of T" ilk="function" name="__new__" signature="T.__new__(S, ...) -&gt; a new object with type S, a subtype of T" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce_ex__" />
        <scope doc="__sizeof__() -&gt; size of object in memory, in bytes" ilk="function" name="__sizeof__" signature="__sizeof__() -&gt; size of object in memory, in bytes" />
        <scope doc="Abstract classes can override this to customize issubclass()." ilk="function" name="__subclasshook__" />
        <scope ilk="function" name="adderrorinfo" />
        <scope ilk="function" name="call" />
        <scope ilk="function" name="createcommand" />
        <scope ilk="function" name="createtimerhandler" />
        <scope ilk="function" name="deletecommand" />
        <scope ilk="function" name="dooneevent" />
        <scope ilk="function" name="eval" />
        <scope ilk="function" name="evalfile" />
        <scope ilk="function" name="exprboolean" />
        <scope ilk="function" name="exprdouble" />
        <scope ilk="function" name="exprlong" />
        <scope ilk="function" name="exprstring" />
        <scope ilk="function" name="getboolean" />
        <scope ilk="function" name="getdouble" />
        <scope ilk="function" name="getint" />
        <scope ilk="function" name="getvar" />
        <scope ilk="function" name="globalcall" />
        <scope ilk="function" name="globaleval" />
        <scope ilk="function" name="globalgetvar" />
        <scope ilk="function" name="globalsetvar" />
        <scope ilk="function" name="globalunsetvar" />
        <scope ilk="function" name="interpaddr" />
        <scope ilk="function" name="loadtk" />
        <scope ilk="function" name="mainloop" />
        <scope ilk="function" name="merge" />
        <scope ilk="function" name="quit" />
        <scope ilk="function" name="record" />
        <scope ilk="function" name="setvar" />
        <scope ilk="function" name="split" />
        <scope ilk="function" name="splitlist" />
        <scope ilk="function" name="unsetvar" />
        <scope ilk="function" name="wantobjects" />
        <scope ilk="function" name="willdispatch" />
      </scope>
    </scope>
    <scope doc="IMAP4 client.  Based on RFC 2060." ilk="blob" lang="Python3" name="imaplib">
      <variable citdl="tuple" line="36" name="AllowedVersions" />
      <variable citdl="bytes" line="32" name="CRLF" />
      <variable citdl="dict" line="40" name="Commands" />
      <variable citdl="SRE_Pattern" line="84" name="Continuation" />
      <variable citdl="int" line="33" name="Debug" />
      <variable citdl="SRE_Pattern" line="85" name="Flags" />
      <scope classrefs="object" doc="IMAP4 client class.  Instantiate with: IMAP4([host[, port]])" ilk="class" line="100" lineend="1128" name="IMAP4">
        <scope doc="Fetch truncated part of a message." ilk="function" line="588" lineend="597" name="partial" returns="self._untagged_response()" signature="partial(message_num, message_part, start, length)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="message_num" />
          <variable ilk="argument" name="message_part" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="length" />
          <variable citdl="str" line="595" name="name" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="176" name="_cmd_log_len" />
        <scope attributes="protected" ilk="function" line="803" lineend="814" name="_append_untagged" signature="_append_untagged(typ, dat)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="typ" />
          <variable citdl="str" ilk="argument" name="dat" />
          <variable citdl="dict" line="806" name="ur" />
        </scope>
        <scope attributes="protected" ilk="function" line="1095" lineend="1100" name="_mesg" signature="_mesg(s, secs=None)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <variable citdl="time.time()" ilk="argument" name="secs" />
          <variable citdl="time.strftime()" line="1098" name="tm" />
        </scope>
        <scope attributes="protected" ilk="function" line="1036" lineend="1045" name="_match" returns="bool" signature="_match(cre, s)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="cre" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope doc="Send data to remote." ilk="function" line="255" lineend="257" name="send" signature="send(data)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="Read &apos;size&apos; bytes from remote." ilk="function" line="237" lineend="247" name="read" returns="str.join()" signature="read(size)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="list" line="239" name="chunks" />
          <variable citdl="int" line="240" name="read" />
          <variable citdl="self.file.read()" line="242" name="data" />
        </scope>
        <scope attributes="protected" ilk="function" line="1076" lineend="1078" name="_simple_command" returns="IMAP4._command_complete()" signature="_simple_command(name, *args)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="List &apos;subscribed&apos; mailbox names in directory matching pattern." ilk="function" line="548" lineend="557" name="lsub" returns="self._untagged_response()" signature="lsub(directory=&apos;&quot;&quot;&apos;, pattern=&apos;*&apos;)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="directory" />
          <variable citdl="str" ilk="argument" name="pattern" />
          <variable citdl="str" line="555" name="name" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="178" name="_cmd_log" />
        <variable attributes="__instancevar__" line="522" name="password" />
        <scope attributes="protected" ilk="function" line="1068" lineend="1073" name="_quote" returns="str" signature="_quote(arg)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="arg.replace()" ilk="argument" name="arg" />
        </scope>
        <scope doc="Permanently remove deleted items from selected mailbox." ilk="function" line="423" lineend="434" name="expunge" returns="self._untagged_response()" signature="expunge()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" line="432" name="name" />
        </scope>
        <scope doc="List mailbox names in directory matching pattern." ilk="function" line="491" lineend="500" name="list" returns="self._untagged_response()" signature="list(directory=&apos;&quot;&quot;&apos;, pattern=&apos;*&apos;)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="directory" />
          <variable citdl="str" ilk="argument" name="pattern" />
          <variable citdl="str" line="498" name="name" />
        </scope>
        <scope doc="(typ, [data]) = &lt;instance&gt;.capability() Fetch capabilities list from server." ilk="function" line="361" lineend="367" name="capability" returns="self._untagged_response()" signature="capability()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" line="365" name="name" />
        </scope>
        <scope attributes="protected" ilk="function" line="901" lineend="912" name="_command_complete" returns="tuple" signature="_command_complete(name, tag)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="tag" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="151" name="debug" />
        <scope doc="Request named status conditions for mailbox." ilk="function" line="707" lineend="716" name="status" returns="self._untagged_response()" signature="status(mailbox, names)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
          <variable ilk="argument" name="names" />
          <variable citdl="str" line="712" name="name" />
        </scope>
        <scope attributes="protected" ilk="function" line="1056" lineend="1065" name="_checkquote" returns="self._quote()" signature="_checkquote(arg)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable attributes="__instancevar__" citdl="version" line="205" name="PROTOCOL_VERSION" />
        <variable attributes="__instancevar__" citdl="int" line="232" name="port" />
        <scope doc="Append message to named mailbox." ilk="function" line="309" lineend="329" name="append" returns="self._simple_command()" signature="append(mailbox, flags, date_time, message)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="mailbox" />
          <variable citdl="str" ilk="argument" name="flags" />
          <variable citdl="Time2Internaldate()" ilk="argument" name="date_time" />
          <variable ilk="argument" name="message" />
          <variable citdl="str" line="316" name="name" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.mo.group()" line="156" name="continuation_response" />
        <scope attributes="protected" ilk="function" line="995" lineend="1014" name="_get_tagged_response" signature="_get_tagged_response(tag)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable line="998" name="result" />
        </scope>
        <scope doc="Authenticate command - requires response processing." ilk="function" line="332" lineend="358" name="authenticate" returns="tuple" signature="authenticate(mechanism, authobject)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mechanism" />
          <variable ilk="argument" name="authobject" />
          <variable citdl="mechanism.upper()" line="348" name="mech" />
        </scope>
        <scope doc="Force use of CRAM-MD5 authentication." ilk="function" line="517" lineend="523" name="login_cram_md5" returns="IMAP4.authenticate()" signature="login_cram_md5(user, password)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="user" />
          <variable ilk="argument" name="password" />
        </scope>
        <variable attributes="__instancevar__" citdl="re.compile()" line="168" name="tagre" />
        <scope ilk="function" line="211" lineend="215" name="__getattr__" returns="getattr()" signature="__getattr__(attr)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="152" name="state" />
        <scope doc="Send NOOP command." ilk="function" line="577" lineend="585" name="noop" returns="self._simple_command()" signature="noop()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="915" lineend="992" name="_get_response" returns="self._get_line()" signature="_get_response()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="self._get_line()" line="922" name="resp" />
          <variable citdl="self.mo.group()" line="927" name="tag" />
          <variable citdl="self.mo.group()" line="931" name="typ" />
          <variable citdl="self.mo.group()" line="933" name="dat" />
          <variable citdl="self.mo.group()" line="936" name="dat2" />
          <variable citdl="int()" line="965" name="size" />
          <variable citdl="read()" line="969" name="data" />
        </scope>
        <scope doc="Show my ACLs for a mailbox (i.e. the rights that I have on mailbox)." ilk="function" line="559" lineend="565" name="myrights" returns="self._untagged_response()" signature="myrights(mailbox)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="231" name="host" />
        <scope doc="Shutdown connection to server." ilk="function" line="532" lineend="545" name="logout" returns="tuple" signature="logout()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="list" line="541" name="dat" />
          <variable citdl="str" line="541" name="typ" />
        </scope>
        <scope attributes="protected" ilk="function" line="817" lineend="820" name="_check_bye" signature="_check_bye()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="self.untagged_responses.get()" line="818" name="bye" />
        </scope>
        <scope doc="Return socket instance used to connect to IMAP4 server." ilk="function" line="266" lineend="271" name="socket" returns="_create_socket()" signature="socket()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
        </scope>
        <scope doc="IMAPrev1 extension THREAD command." ilk="function" line="738" lineend="745" name="thread" returns="self._untagged_response()" signature="thread(threading_algorithm, charset, *search_criteria)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="threading_algorithm" />
          <variable ilk="argument" name="charset" />
          <variable attributes="varargs" ilk="argument" name="search_criteria" />
          <variable citdl="str" line="743" name="name" />
        </scope>
        <scope doc="Set a mailbox acl." ilk="function" line="668" lineend="673" name="setacl" returns="self._simple_command()" signature="setacl(mailbox, who, what)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
          <variable ilk="argument" name="who" />
          <variable ilk="argument" name="what" />
        </scope>
        <scope doc="Identify client using plaintext password." ilk="function" line="503" lineend="514" name="login" returns="tuple" signature="login(user, password)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="user" />
          <variable ilk="argument" name="password" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="155" name="untagged_responses" />
        <scope doc="Get the quota root&apos;s resource usage and limits." ilk="function" line="469" lineend="477" name="getquota" returns="self._untagged_response()" signature="getquota(root)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="root" />
        </scope>
        <scope attributes="protected" ilk="function" line="1102" lineend="1108" name="_dump_ur" signature="_dump_ur(dict)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="dict" />
          <variable citdl="dict.items()" line="1104" name="l" />
          <variable citdl="str" line="1106" name="t" />
        </scope>
        <scope doc="Get the ACLs for a mailbox." ilk="function" line="452" lineend="458" name="getacl" returns="self._untagged_response()" signature="getacl(mailbox)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
        </scope>
        <scope doc="Subscribe to new mailbox." ilk="function" line="730" lineend="735" name="subscribe" returns="self._simple_command()" signature="subscribe(mailbox)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
        </scope>
        <scope doc="Delete the ACLs (remove any rights) set for who on mailbox." ilk="function" line="416" lineend="421" name="deleteacl" returns="self._simple_command()" signature="deleteacl(mailbox, who)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
          <variable ilk="argument" name="who" />
        </scope>
        <variable attributes="__instancevar__" citdl="tuple()" line="196" name="capabilities" />
        <scope doc="Close I/O established in &quot;open&quot;." ilk="function" line="260" lineend="263" name="shutdown" signature="shutdown()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
        </scope>
        <scope doc="Setup connection to remote server on &quot;host:port&quot; (default: localhost:standard IMAP4 port)." ilk="function" line="225" lineend="234" name="open" signature="open(host=&apos;&apos;, port=IMAP4_PORT)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
        </scope>
        <scope doc="(typ, [data]) = &lt;instance&gt;.setannotation(mailbox[, entry, attribute]+) Set ANNOTATIONs." ilk="function" line="676" lineend="681" name="setannotation" returns="self._untagged_response()" signature="setannotation(*args)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Select a mailbox." ilk="function" line="636" lineend="665" name="select" returns="tuple" signature="select(mailbox=&apos;INBOX&apos;, readonly=False)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="mailbox" />
          <variable citdl="False" ilk="argument" name="readonly" />
          <variable citdl="str" line="651" name="name" />
        </scope>
        <scope doc="Create new mailbox." ilk="function" line="401" lineend="406" name="create" returns="self._simple_command()" signature="create(mailbox)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
        </scope>
        <variable attributes="__instancevar__" citdl="_create_socket()" line="233" name="sock" />
        <variable attributes="__instancevar__" citdl="MapCRLF.sub()" line="153" name="literal" />
        <scope attributes="protected" ilk="function" line="1017" lineend="1033" name="_get_line" returns="list" signature="_get_line()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="readline()" line="1019" name="line" />
        </scope>
        <scope doc="Alters flag dispositions for messages in mailbox." ilk="function" line="719" lineend="727" name="store" returns="self._untagged_response()" signature="store(message_set, command, flags)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="message_set" />
          <variable ilk="argument" name="command" />
          <variable citdl="str" ilk="argument" name="flags" />
        </scope>
        <scope doc="Get the list of quota roots for the named mailbox." ilk="function" line="480" lineend="488" name="getquotaroot" returns="tuple" signature="getquotaroot(mailbox)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="177" name="_cmd_log_idx" />
        <scope doc="Search mailbox for matching messages." ilk="function" line="621" lineend="633" name="search" returns="self._untagged_response()" signature="search(charset, *criteria)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="charset" />
          <variable attributes="varargs" ilk="argument" name="criteria" />
          <variable citdl="str" line="628" name="name" />
        </scope>
        <scope doc="Assume authentication as &quot;user&quot;." ilk="function" line="600" lineend="610" name="proxyauth" returns="self._simple_command()" signature="proxyauth(user)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="user" />
          <variable citdl="str" line="609" name="name" />
        </scope>
        <scope doc="Unsubscribe from old mailbox." ilk="function" line="773" lineend="778" name="unsubscribe" returns="self._simple_command()" signature="unsubscribe(mailbox)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
        </scope>
        <scope attributes="protected" ilk="function" line="823" lineend="898" name="_command" returns="self._new_tag()" signature="_command(name, *args)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="bytes()" ilk="argument" name="name" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="self._new_tag()" line="840" name="tag" />
          <variable citdl="bytes()" line="842" name="data" />
          <variable citdl="bytes()" line="846" name="arg" />
          <variable citdl="literator()" line="850" name="literal" />
          <variable citdl="MapCRLF.sub()" line="854" name="literator" />
        </scope>
        <scope attributes="protected" ilk="function" line="1110" lineend="1115" name="_log" signature="_log(line)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope doc="Copy &apos;message_set&apos; messages onto end of &apos;new_mailbox&apos;." ilk="function" line="393" lineend="398" name="copy" returns="self._simple_command()" signature="copy(message_set, new_mailbox)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="message_set" />
          <variable ilk="argument" name="new_mailbox" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="158" name="tagnum" />
        <variable attributes="__instancevar__" citdl="cre.match()" line="1041" name="mo" />
        <variable attributes="__instancevar__" citdl="Int2AP()" line="167" name="tagpre" />
        <scope classrefs="Exception" ilk="class" line="146" lineend="146" name="error" />
        <scope attributes="protected" ilk="function" line="1081" lineend="1090" name="_untagged_response" returns="tuple" signature="_untagged_response(typ, dat, name)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="typ" />
          <variable ilk="argument" name="dat" />
          <variable ilk="argument" name="name" />
          <variable citdl="self.untagged_responses.pop()" line="1086" name="data" />
        </scope>
        <scope doc="(typ, [data, ...]) = &lt;instance&gt;.fetch(message_set, message_parts)" ilk="function" line="437" lineend="449" name="fetch" returns="self._untagged_response()" signature="Fetch (parts of) messages.">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="message_set" />
          <variable ilk="argument" name="message_parts" />
          <variable citdl="str" line="447" name="name" />
        </scope>
        <scope doc="Delete old mailbox." ilk="function" line="409" lineend="414" name="delete" returns="self._simple_command()" signature="delete(mailbox)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
        </scope>
        <scope doc="Rename old mailbox name to new." ilk="function" line="613" lineend="618" name="rename" returns="self._simple_command()" signature="rename(oldmailbox, newmailbox)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="oldmailbox" />
          <variable ilk="argument" name="newmailbox" />
        </scope>
        <scope doc="IMAP4rev1 extension SORT command." ilk="function" line="693" lineend="704" name="sort" returns="self._untagged_response()" signature="sort(sort_criteria, charset, *search_criteria)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="sort_criteria" />
          <variable ilk="argument" name="charset" />
          <variable attributes="varargs" ilk="argument" name="search_criteria" />
          <variable citdl="str" line="698" name="name" />
        </scope>
        <scope doc="Execute &quot;command arg ...&quot; with messages identified by UID, rather than message number." ilk="function" line="748" lineend="770" name="uid" returns="self._untagged_response()" signature="uid(command, *args)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="command.upper()" ilk="argument" name="command" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="str" line="764" name="name" />
        </scope>
        <scope doc="Allow simple extension commands notified by server in CAPABILITY response." ilk="function" line="781" lineend="796" name="xatom" returns="self._simple_command()" signature="xatom(name, *args)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="name.upper()" ilk="argument" name="name" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope classrefs="IMAP4.error" ilk="class" line="147" lineend="147" name="abort" />
        <variable attributes="__instancevar__" citdl="self.sock.makefile()" line="234" name="file" />
        <scope doc="Close currently selected mailbox." ilk="function" line="378" lineend="390" name="close" returns="tuple" signature="close()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="222" lineend="223" name="_create_socket" returns="socket.create_connection()" signature="_create_socket()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
        </scope>
        <scope doc="Checkpoint mailbox on server." ilk="function" line="370" lineend="375" name="check" returns="self._simple_command()" signature="check()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="150" lineend="208" name="__init__" signature="IMAP4(host=&apos;&apos;, port=IMAP4_PORT)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable citdl="dat.upper()" line="194" name="dat" />
        </scope>
        <scope attributes="protected" ilk="function" line="1048" lineend="1053" name="_new_tag" returns="bytes()" signature="_new_tag()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="Int2AP()" line="1050" name="tag" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="154" name="tagged_commands" />
        <scope doc="Returns IMAP namespaces ala rfc2342" ilk="function" line="567" lineend="574" name="namespace" returns="self._untagged_response()" signature="namespace()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" line="572" name="name" />
        </scope>
        <scope classrefs="IMAP4.abort" ilk="class" line="148" lineend="148" name="readonly" />
        <scope doc="(typ, [data]) = &lt;instance&gt;.getannotation(mailbox, entry, attribute) Retrieve ANNOTATIONs." ilk="function" line="461" lineend="466" name="getannotation" returns="self._untagged_response()" signature="getannotation(mailbox, entry, attribute)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="mailbox" />
          <variable ilk="argument" name="entry" />
          <variable ilk="argument" name="attribute" />
        </scope>
        <scope attributes="protected" doc="Authobject to use with CRAM-MD5 authentication." ilk="function" line="526" lineend="529" name="_CRAM_MD5_AUTH" returns="str" signature="_CRAM_MD5_AUTH(challenge)">
          <import line="528" module="hmac" />
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="challenge" />
        </scope>
        <scope doc="Set the quota root&apos;s resource limits." ilk="function" line="684" lineend="690" name="setquota" returns="self._untagged_response()" signature="setquota(root, limits)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="root" />
          <variable ilk="argument" name="limits" />
        </scope>
        <variable attributes="__instancevar__" citdl="self._get_response()" line="183" name="welcome" />
        <variable attributes="__instancevar__" line="522" name="user" />
        <scope ilk="function" line="1117" lineend="1128" name="print_log" signature="print_log()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="int" line="1119" name="i" />
          <variable citdl="int" line="1119" name="n" />
        </scope>
        <scope doc="Read line from remote." ilk="function" line="250" lineend="252" name="readline" returns="self.file.readline()" signature="readline()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
        </scope>
        <scope doc="Return data for response &apos;code&apos; if received, or None." ilk="function" line="295" lineend="302" name="response" returns="self._untagged_response()" signature="response(code)">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable ilk="argument" name="code" />
        </scope>
        <scope doc="Return most recent &apos;RECENT&apos; responses if any exist, else prompt server for an update using the &apos;NOOP&apos; command." ilk="function" line="278" lineend="292" name="recent" returns="tuple" signature="recent()">
          <variable citdl="IMAP4" ilk="argument" name="self" />
          <variable citdl="str" line="287" name="name" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="157" name="is_readonly" />
      </scope>
      <variable citdl="int" line="34" name="IMAP4_PORT" />
      <scope classrefs="IMAP4" doc="IMAP4 client class over SSL connection  Instantiate with: IMAP4_SSL([host[, port[, keyfile[, certfile]]]])" ilk="class" line="1137" lineend="1167" name="IMAP4_SSL">
        <scope doc="Setup connection to remote server on &quot;host:port&quot;." ilk="function" line="1161" lineend="1167" name="open" signature="open(host=&apos;&apos;, port=IMAP4_SSL_PORT)">
          <variable citdl="IMAP4_SSL" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
        </scope>
        <scope attributes="protected" ilk="function" line="1157" lineend="1159" name="_create_socket" returns="ssl.wrap_socket()" signature="_create_socket()">
          <variable citdl="IMAP4_SSL" ilk="argument" name="self" />
          <variable citdl="IMAP4._create_socket()" line="1158" name="sock" />
        </scope>
        <variable attributes="__instancevar__" line="1154" name="certfile" />
        <variable attributes="__instancevar__" line="1153" name="keyfile" />
        <scope attributes="__ctor__" ilk="function" line="1152" lineend="1155" name="__init__" signature="IMAP4_SSL(host=&apos;&apos;, port=IMAP4_SSL_PORT, keyfile=None, certfile=None)">
          <variable citdl="IMAP4_SSL" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable ilk="argument" name="keyfile" />
          <variable ilk="argument" name="certfile" />
        </scope>
      </scope>
      <variable citdl="int" line="35" name="IMAP4_SSL_PORT" />
      <scope classrefs="IMAP4" doc="IMAP4 client class over a stream  Instantiate with: IMAP4_stream(command)" ilk="class" line="1172" lineend="1224" name="IMAP4_stream">
        <scope doc="Close I/O established in &quot;open&quot;." ilk="function" line="1220" lineend="1224" name="shutdown" signature="shutdown()">
          <variable citdl="IMAP4_stream" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="subprocess.Popen()" line="1198" name="process" />
        <variable attributes="__instancevar__" line="1196" name="sock" />
        <variable attributes="__instancevar__" citdl="self.process.stdin" line="1201" name="writefile" />
        <variable attributes="__instancevar__" citdl="self.process.stdout" line="1202" name="readfile" />
        <scope doc="Read &apos;size&apos; bytes from remote." ilk="function" line="1204" lineend="1206" name="read" returns="self.readfile.read()" signature="read(size)">
          <variable citdl="IMAP4_stream" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
        </scope>
        <variable attributes="__instancevar__" line="1194" name="host" />
        <variable attributes="__instancevar__" line="1185" name="command" />
        <scope doc="Send data to remote." ilk="function" line="1214" lineend="1217" name="send" signature="send(data)">
          <variable citdl="IMAP4_stream" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="__instancevar__" line="1197" name="file" />
        <scope doc="Read line from remote." ilk="function" line="1209" lineend="1211" name="readline" returns="self.readfile.readline()" signature="readline()">
          <variable citdl="IMAP4_stream" ilk="argument" name="self" />
        </scope>
        <scope doc="Setup a stream connection." ilk="function" line="1189" lineend="1202" name="open" signature="open(host=None, port=None)">
          <variable citdl="IMAP4_stream" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
        </scope>
        <variable attributes="__instancevar__" line="1195" name="port" />
        <scope attributes="__ctor__" ilk="function" line="1184" lineend="1186" name="__init__" signature="IMAP4_stream(command)">
          <variable citdl="IMAP4_stream" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
        </scope>
      </scope>
      <scope doc="Convert integer to A-P string representation." ilk="function" line="1319" lineend="1328" name="Int2AP" returns="str" signature="Int2AP(num)">
        <variable citdl="str" line="1323" name="AP" />
        <variable citdl="int()" ilk="argument" name="num" />
        <variable citdl="str" line="1323" name="val" />
      </scope>
      <variable citdl="SRE_Pattern" line="86" name="InternalDate" />
      <scope doc="Convert IMAP4 INTERNALDATE to UT." ilk="function" line="1275" lineend="1315" name="Internaldate2tuple" returns="time.localtime()" signature="Internaldate2tuple(resp)">
        <variable citdl="time.mktime()" line="1304" name="utc" />
        <variable citdl="int()" line="1298" name="zone" />
        <variable citdl="int()" line="1290" name="hour" />
        <variable citdl="int()" line="1291" name="min" />
        <variable citdl="InternalDate.match()" line="1281" name="mo" />
        <variable citdl="int()" line="1293" name="zoneh" />
        <variable citdl="mo.group()" line="1286" name="zonen" />
        <variable citdl="int()" line="1294" name="zonem" />
        <variable citdl="int()" line="1288" name="day" />
        <variable citdl="time.localtime()" line="1309" name="lt" />
        <variable citdl="tuple" line="1302" name="tt" />
        <variable citdl="int()" line="1292" name="sec" />
        <variable line="1285" name="mon" />
        <variable citdl="int()" line="1289" name="year" />
        <variable ilk="argument" name="resp" />
      </scope>
      <variable citdl="SRE_Pattern" line="91" name="Literal" />
      <variable citdl="SRE_Pattern" line="92" name="MapCRLF" />
      <variable citdl="dict" line="1272" name="Mon2num" />
      <scope doc="Convert IMAP4 flags response to python tuple." ilk="function" line="1332" lineend="1340" name="ParseFlags" returns="tuple" signature="ParseFlags(resp)">
        <variable ilk="argument" name="resp" />
        <variable citdl="Flags.match()" line="1336" name="mo" />
      </scope>
      <variable citdl="SRE_Pattern" line="93" name="Response_code" />
      <scope doc="Convert &apos;date_time&apos; to IMAP4 INTERNALDATE representation." ilk="function" line="1343" lineend="1366" name="Time2Internaldate" returns="time.strftime()" signature="Time2Internaldate(date_time)">
        <variable ilk="argument" name="date_time" />
        <variable citdl="time.localtime()" line="1351" name="tt" />
        <variable citdl="time.strftime()" line="1359" name="dt" />
        <variable citdl="time.altzone" line="1363" name="zone" />
      </scope>
      <variable citdl="SRE_Pattern" line="94" name="Untagged_response" />
      <variable citdl="SRE_Pattern" line="95" name="Untagged_status" />
      <variable citdl="list" line="27" name="__all__" />
      <variable citdl="str" line="23" name="__version__" />
      <import module="binascii" />
      <import module="random" />
      <import module="re" />
      <import module="socket" />
      <import module="ssl" />
      <import module="subprocess" />
      <import module="sys" />
      <import module="time" />
      <variable attributes="__hidden__" citdl="list" line="1399" name="test_seq1" />
      <variable attributes="__hidden__" citdl="val" line="1383" name="stream_command" />
      <variable attributes="__hidden__" citdl="tuple" line="1416" name="test_seq2" />
      <scope attributes="__hidden__" ilk="function" line="1426" lineend="1431" name="run" returns="dat" signature="run(cmd, args)">
        <variable ilk="argument" name="cmd" />
        <variable ilk="argument" name="args" />
      </scope>
      <variable attributes="__hidden__" line="1458" name="uid" />
      <variable attributes="__hidden__" citdl="tuple" line="1381" name="optlist" />
      <variable attributes="__hidden__" citdl="getpass.getpass()" line="1396" name="PASSWD" />
      <variable attributes="__hidden__" citdl="re.match()" line="1447" name="mo" />
      <variable attributes="__hidden__" citdl="tuple" line="1381" name="args" />
      <variable attributes="__hidden__" citdl="IMAP4" line="1435" name="M" />
      <variable attributes="__hidden__" citdl="run()" line="1453" name="dat" />
      <variable attributes="__hidden__" line="1393" name="host" />
      <variable attributes="__hidden__" citdl="dict" line="1398" name="test_mesg" />
      <variable attributes="__hidden__" citdl="mo.group()" line="1448" name="path" />
      <scope attributes="protected __hidden__" doc="Private class to provide en/decoding for base64-based authentication conversation." ilk="class" line="1228" lineend="1268" name="_Authenticator">
        <scope attributes="__ctor__" ilk="function" line="1234" lineend="1235" name="__init__" signature="_Authenticator(mechinst)">
          <variable citdl="_Authenticator" ilk="argument" name="self" />
          <variable ilk="argument" name="mechinst" />
        </scope>
        <variable attributes="__instancevar__" line="1235" name="mech" />
        <scope ilk="function" line="1237" lineend="1241" name="process" returns="str" signature="process(data)">
          <variable citdl="_Authenticator" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="mech()" line="1238" name="ret" />
        </scope>
        <scope ilk="function" line="1243" lineend="1263" name="encode" returns="str" signature="encode(inp)">
          <variable citdl="_Authenticator" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="inp" />
          <variable citdl="str" line="1252" name="oup" />
          <variable citdl="list" line="1255" name="t" />
          <variable citdl="binascii.b2a_base64()" line="1260" name="e" />
        </scope>
        <scope ilk="function" line="1265" lineend="1268" name="decode" returns="binascii.a2b_base64()" signature="decode(inp)">
          <variable citdl="_Authenticator" ilk="argument" name="self" />
          <variable ilk="argument" name="inp" />
        </scope>
      </scope>
      <variable attributes="__hidden__" citdl="getpass.getuser()" line="1395" name="USER" />
    </scope>
    <scope doc="distutils.command.upload  Implements the Distutils &apos;upload&apos; subcommand (upload package to PyPI)." ilk="blob" lang="Python3" name="distutils.command.upload">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="Command" doc="Base command that knows how to handle the .pypirc file" ilk="class" name="PyPIRCCommand" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <import module="configparser" />
      <import module="httpclient" />
      <import module="io" />
      <import module="log" />
      <scope doc="Returns a md5 hash object; optionally initialized with a string" ilk="function" name="md5" />
      <import module="os" />
      <import module="platform" />
      <import module="socket" />
      <scope doc="Run another program, specified as a command list &apos;cmd&apos;, in a new process." ilk="function" name="spawn" signature="spawn(cmd, search_path=1, verbose=0, dry_run=0)" />
      <scope doc="Encode a byte string using the standard Base64 alphabet." ilk="function" name="standard_b64encode" signature="standard_b64encode(s)" />
      <import module="sys" />
      <scope classrefs="PyPIRCCommand" ilk="class" line="24" lineend="197" name="upload">
        <variable attributes="__instancevar__" citdl="str" line="38" name="username" />
        <variable citdl="list" line="28" name="user_options" />
        <variable attributes="__instancevar__" line="55" name="realm" />
        <variable citdl="str" line="26" name="description" />
        <variable attributes="__instancevar__" line="54" name="repository" />
        <scope ilk="function" line="36" lineend="42" name="initialize_options" signature="initialize_options()">
          <variable citdl="upload" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="40" name="show_response" />
        <variable attributes="__instancevar__" citdl="False" line="41" name="sign" />
        <scope ilk="function" line="62" lineend="66" name="run" signature="run()">
          <variable citdl="upload" ilk="argument" name="self" />
        </scope>
        <variable citdl="PyPIRCCommand.boolean_options" line="34" name="boolean_options" />
        <scope ilk="function" line="44" lineend="60" name="finalize_options" signature="finalize_options()">
          <variable citdl="upload" ilk="argument" name="self" />
          <variable citdl="self._read_pypirc()" line="50" name="config" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.distribution.password" line="39" name="password" />
        <variable attributes="__instancevar__" line="42" name="identity" />
        <scope ilk="function" line="68" lineend="197" name="upload_file" signature="upload_file(command, pyversion, filename)">
          <variable citdl="upload" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
          <variable ilk="argument" name="pyversion" />
          <variable ilk="argument" name="filename" />
          <variable citdl="list" line="71" name="gpg_args" />
          <variable line="79" name="content" />
          <variable citdl="self.distribution.metadata" line="80" name="meta" />
          <variable citdl="dict" line="81" name="data" />
          <variable citdl="str" line="113" name="comment" />
          <variable line="127" name="user_pass" />
          <variable citdl="str" line="130" name="auth" />
          <variable citdl="str" line="133" name="boundary" />
          <variable citdl="boundary.encode()" line="134" name="sep_boundary" />
          <variable citdl="str" line="135" name="end_boundary" />
          <variable citdl="io.BytesIO()" line="136" name="body" />
          <variable citdl="key" line="138" name="title" />
          <variable citdl="list" line="141" name="value" />
          <variable citdl="httpclient.HTTPConnection()" line="168" name="http" />
          <variable citdl="log.INFO" line="175" name="loglevel" />
          <variable citdl="http.getresponse()" line="189" name="r" />
        </scope>
      </scope>
      <import module="urllib" />
    </scope>
    <scope doc="Fixer for has_key().  Calls to .has_key() methods are expressed in terms of the &apos;in&apos;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_has_key">
      <scope classrefs="BaseFix" ilk="class" line="39" lineend="109" name="FixHasKey">
        <variable citdl="str" line="41" name="PATTERN" />
        <scope ilk="function" line="71" lineend="109" name="transform" returns="pytree.Node()" signature="transform(node, results)">
          <variable citdl="FixHasKey" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="self.syms" line="73" name="syms" />
          <variable citdl="results.get()" line="79" name="negation" />
          <variable line="80" name="anchor" />
          <variable citdl="node.prefix" line="81" name="prefix" />
          <variable citdl="list" line="82" name="before" />
          <variable citdl="parenthesize()" line="83" name="arg" />
          <variable citdl="list" line="84" name="after" />
          <variable citdl="Name()" line="95" name="n_op" />
          <variable citdl="Name()" line="97" name="n_not" />
          <variable citdl="parenthesize()" line="99" name="new" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope ilk="function" name="parenthesize" signature="parenthesize(node)" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="distutils.command.bdist_wininst  Implements the Distutils &apos;bdist_wininst&apos; command: create a windows installer" ilk="blob" lang="Python3" name="distutils.command.bdist_wininst">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" line="6" name="__revision__" />
      <scope classrefs="Command" ilk="class" line="16" lineend="343" name="bdist_wininst">
        <scope ilk="function" line="191" lineend="235" name="get_inidata" returns="str.join()" signature="get_inidata()">
          <import line="230" module="time" />
          <import line="231" module="distutils" />
          <variable citdl="bdist_wininst" ilk="argument" name="self" />
          <variable citdl="list" line="193" name="lines" />
          <variable citdl="self.distribution.metadata" line="194" name="metadata" />
          <variable citdl="str" line="201" name="info" />
          <scope ilk="function" line="204" lineend="205" name="escape" returns="s.replace()" signature="escape(s)">
            <variable ilk="argument" name="s" />
          </scope>
          <variable citdl="getattr()" line="209" name="data" />
          <variable citdl="self.distribution.get_fullname()" line="228" name="title" />
          <variable citdl="str" line="232" name="build_info" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="65" name="no_target_optimize" />
        <variable attributes="__instancevar__" line="68" name="bitmap" />
        <variable attributes="__instancevar__" citdl="int" line="63" name="keep_temp" />
        <variable citdl="list" line="20" name="user_options" />
        <scope ilk="function" line="60" lineend="73" name="initialize_options" signature="initialize_options()">
          <variable citdl="bdist_wininst" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.path.join()" line="61" name="bdist_dir" />
        <scope ilk="function" line="303" lineend="343" name="get_exe_bytes" signature="get_exe_bytes()">
          <import line="304" module="distutils.msvccompiler" symbol="get_build_version" />
          <variable citdl="bdist_wininst" ilk="argument" name="self" />
          <variable citdl="get_python_version()" line="313" name="cur_version" />
          <variable citdl="get_build_version()" line="319" name="bv" />
          <variable citdl="os.path.dirname()" line="330" name="directory" />
          <variable citdl="list" line="338" name="sfix" />
          <variable citdl="os.path.join()" line="342" name="filename" />
        </scope>
        <variable attributes="__instancevar__" line="62" name="plat_name" />
        <scope ilk="function" line="237" lineend="288" name="create_exe" signature="create_exe(arcname, fullname, bitmap=None)">
          <import line="238" module="struct" />
          <variable citdl="bdist_wininst" ilk="argument" name="self" />
          <variable ilk="argument" name="arcname" />
          <variable ilk="argument" name="fullname" />
          <variable ilk="argument" name="bitmap" />
          <variable citdl="str" line="242" name="cfgdata" />
          <variable citdl="self.get_installer_filename()" line="244" name="installer_name" />
          <variable line="248" name="bitmapdata" />
          <variable citdl="int" line="249" name="bitmaplen" />
          <variable citdl="open()" line="253" name="file" />
          <variable line="270" name="script_data" />
          <variable citdl="struct.pack()" line="282" name="header" />
        </scope>
        <scope ilk="function" line="110" lineend="189" name="run" signature="run()">
          <import line="171" module="tempfile" symbol="mktemp" />
          <variable citdl="bdist_wininst" ilk="argument" name="self" />
          <variable citdl="self.reinitialize_command()" line="121" name="install" />
          <variable citdl="self.reinitialize_command()" line="127" name="install_lib" />
          <variable citdl="list" line="139" name="target_version" />
          <variable citdl="str" line="143" name="plat_specifier" />
          <variable citdl="self.get_finalized_command()" line="144" name="build" />
          <variable citdl="key.upper()" line="151" name="value" />
          <variable citdl="mktemp()" line="172" name="archive_basename" />
          <variable citdl="self.distribution.get_fullname()" line="173" name="fullname" />
          <variable citdl="self.make_archive()" line="174" name="arcname" />
          <variable citdl="str" line="179" name="pyversion" />
        </scope>
        <variable citdl="str" line="18" name="description" />
        <variable attributes="__instancevar__" citdl="int" line="70" name="skip_build" />
        <variable citdl="list" line="57" name="boolean_options" />
        <variable attributes="__instancevar__" citdl="int" line="64" name="no_target_compile" />
        <variable attributes="__instancevar__" line="71" name="install_script" />
        <variable attributes="__instancevar__" citdl="get_python_version()" line="66" name="target_version" />
        <variable attributes="__instancevar__" line="72" name="pre_install_script" />
        <variable attributes="__instancevar__" line="69" name="title" />
        <scope ilk="function" line="290" lineend="301" name="get_installer_filename" returns="os.path.join()" signature="get_installer_filename(fullname)">
          <variable citdl="bdist_wininst" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="os.path.join()" line="295" name="installer_name" />
        </scope>
        <variable attributes="__instancevar__" line="73" name="user_access_control" />
        <scope ilk="function" line="76" lineend="108" name="finalize_options" signature="finalize_options()">
          <variable citdl="bdist_wininst" ilk="argument" name="self" />
          <variable citdl="self.distribution.get_command_obj()" line="81" name="bdist" />
          <variable line="84" name="bdist_base" />
          <variable citdl="get_python_version()" line="89" name="short_version" />
        </scope>
        <variable attributes="__instancevar__" line="67" name="dist_dir" />
      </scope>
      <scope doc="Create all the empty directories under &apos;base_dir&apos; needed to put &apos;files&apos; there." ilk="function" name="create_tree" signature="create_tree(base_dir, files, mode=511, verbose=1, dry_run=0)" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <import module="os" />
      <scope doc="Recursively remove an entire directory tree." ilk="function" name="remove_tree" signature="remove_tree(directory, verbose=1, dry_run=0)" />
      <import module="sys" />
    </scope>
    <scope doc="Support for regular expressions (RE).  This module provides regular expression matching operations similar to" ilk="blob" lang="Python3" name="re">
      <variable citdl="int" line="131" name="A" />
      <variable citdl="int" name="ASCII" />
      <variable citdl="int" line="141" name="DEBUG" />
      <variable citdl="int" name="DOTALL" />
      <variable citdl="int" line="132" name="I" />
      <variable citdl="int" name="IGNORECASE" />
      <variable citdl="int" line="133" name="L" />
      <variable citdl="int" name="LOCALE" />
      <variable citdl="int" line="135" name="M" />
      <variable citdl="int" name="MULTILINE" />
      <variable citdl="int" line="136" name="S" />
      <scope classrefs="object" ilk="class" line="318" lineend="352" name="Scanner">
        <variable attributes="__instancevar__" line="321" name="lexicon" />
        <scope ilk="function" line="333" lineend="352" name="scan" returns="tuple" signature="scan(string)">
          <variable citdl="Scanner" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
          <variable citdl="list" line="334" name="result" />
          <variable citdl="result.append" line="335" name="append" />
          <variable line="336" name="match" />
          <variable citdl="int" line="337" name="i" />
          <variable citdl="match()" line="339" name="m" />
          <variable citdl="m.end()" line="342" name="j" />
          <variable citdl="action()" line="345" name="action" />
        </scope>
        <variable attributes="__instancevar__" citdl="sre_compile.compile()" line="332" name="scanner" />
        <scope attributes="__ctor__" ilk="function" line="319" lineend="332" name="__init__" signature="Scanner(lexicon, flags=0)">
          <import line="320" module="sre_constants" symbol="BRANCH" />
          <import line="320" module="sre_constants" symbol="SUBPATTERN" />
          <variable citdl="Scanner" ilk="argument" name="self" />
          <variable ilk="argument" name="lexicon" />
          <variable citdl="int" ilk="argument" name="flags" />
          <variable citdl="sre_parse.SubPattern()" line="323" name="p" />
          <variable citdl="sre_parse.Pattern()" line="324" name="s" />
        </scope>
        <variable attributes="__instancevar__" citdl="match()" line="347" name="match" />
      </scope>
      <variable citdl="int" line="140" name="T" />
      <variable citdl="int" name="TEMPLATE" />
      <variable citdl="int" line="134" name="U" />
      <variable citdl="int" name="UNICODE" />
      <variable citdl="int" name="VERBOSE" />
      <variable citdl="int" line="137" name="X" />
      <variable citdl="list" line="123" name="__all__" />
      <variable citdl="str" line="128" name="__version__" />
      <scope doc="Compile a regular expression pattern, returning a pattern object." ilk="function" line="203" lineend="205" name="compile" returns="_compile()" signature="compile(pattern, flags=0)">
        <variable ilk="argument" name="pattern" />
        <variable citdl="int" ilk="argument" name="flags" />
      </scope>
      <import module="copyreg" />
      <scope classrefs="Exception" ilk="class" line="144" name="error" />
      <scope doc="Escape all non-alphanumeric characters in pattern." ilk="function" line="221" lineend="247" name="escape" returns="bytes()" signature="escape(pattern)">
        <variable ilk="argument" name="pattern" />
        <variable citdl="list()" line="225" name="s" />
        <variable citdl="ord()" line="237" name="esc" />
        <variable citdl="frozenset()" line="224" name="alphanum" />
        <variable line="227" name="c" />
      </scope>
      <scope doc="Return a list of all non-overlapping matches in the string." ilk="function" line="184" lineend="192" name="findall" signature="findall(pattern, string, flags=0)">
        <variable ilk="argument" name="pattern" />
        <variable citdl="int" ilk="argument" name="flags" />
        <variable ilk="argument" name="string" />
      </scope>
      <scope doc="Return an iterator over all non-overlapping matches in the string." ilk="function" line="196" lineend="201" name="finditer" signature="finditer(pattern, string, flags=0)">
        <variable ilk="argument" name="pattern" />
        <variable citdl="int" ilk="argument" name="flags" />
        <variable ilk="argument" name="string" />
      </scope>
      <scope doc="Try to apply the pattern at the start of the string, returning a match object, or None if no match was found." ilk="function" line="149" lineend="152" name="match" signature="match(pattern, string, flags=0)">
        <variable ilk="argument" name="pattern" />
        <variable citdl="int" ilk="argument" name="flags" />
        <variable ilk="argument" name="string" />
      </scope>
      <scope doc="Clear the regular expression cache" ilk="function" line="207" lineend="210" name="purge" signature="purge()" />
      <scope doc="Scan through string looking for a match to the pattern, returning a match object, or None if no match was found." ilk="function" line="154" lineend="157" name="search" signature="search(pattern, string, flags=0)">
        <variable ilk="argument" name="pattern" />
        <variable citdl="int" ilk="argument" name="flags" />
        <variable ilk="argument" name="string" />
      </scope>
      <scope doc="Split the source string by the occurrences of the pattern, returning a list containing the resulting substrings." ilk="function" line="179" lineend="182" name="split" signature="split(pattern, string, maxsplit=0, flags=0)">
        <variable ilk="argument" name="pattern" />
        <variable citdl="int" ilk="argument" name="maxsplit" />
        <variable citdl="int" ilk="argument" name="flags" />
        <variable ilk="argument" name="string" />
      </scope>
      <import module="sre_compile" />
      <import module="sre_parse" />
      <scope doc="Return the string obtained by replacing the leftmost non- overlapping occurrences of the pattern in string by the replacement repl." ilk="function" line="159" lineend="166" name="sub" signature="sub(pattern, repl, string, count=0, flags=0)">
        <variable citdl="int" ilk="argument" name="count" />
        <variable ilk="argument" name="pattern" />
        <variable ilk="argument" name="repl" />
        <variable citdl="int" ilk="argument" name="flags" />
        <variable ilk="argument" name="string" />
      </scope>
      <scope doc="Return a 2-tuple containing (new_string, number)." ilk="function" line="168" lineend="177" name="subn" signature="subn(pattern, repl, string, count=0, flags=0)">
        <variable citdl="int" ilk="argument" name="count" />
        <variable ilk="argument" name="pattern" />
        <variable ilk="argument" name="repl" />
        <variable citdl="int" ilk="argument" name="flags" />
        <variable ilk="argument" name="string" />
      </scope>
      <import module="sys" />
      <scope doc="Compile a template pattern, returning a pattern object" ilk="function" line="212" lineend="214" name="template" returns="_compile()" signature="template(pattern, flags=0)">
        <variable ilk="argument" name="pattern" />
        <variable citdl="int" ilk="argument" name="flags" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="296" lineend="304" name="_subx" returns="_subx.filter" signature="_subx(pattern, template)">
        <variable ilk="argument" name="pattern" />
        <variable citdl="_compile_repl()" ilk="argument" name="template" />
        <scope ilk="function" line="302" lineend="303" name="filter" returns="sre_parse.expand_template()" signature="filter(match, template=template)">
          <variable ilk="argument" name="match" />
          <variable citdl="_compile_repl()" ilk="argument" name="template" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="frozenset()" line="216" name="_alphanum_str" />
      <scope attributes="protected __hidden__" ilk="function" line="291" lineend="294" name="_expand" returns="sre_parse.expand_template()" signature="_expand(pattern, match, template)">
        <variable ilk="argument" name="pattern" />
        <variable ilk="argument" name="match" />
        <variable citdl="sre_parse.parse_template()" ilk="argument" name="template" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="310" lineend="311" name="_pickle" returns="tuple" signature="_pickle(p)">
        <variable ilk="argument" name="p" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="257" name="_MAXCACHE" />
      <variable attributes="protected __hidden__" citdl="type()" line="255" name="_pattern_type" />
      <variable attributes="protected __hidden__" citdl="dict" line="253" name="_cache_repl" />
      <variable attributes="protected __hidden__" citdl="dict" line="252" name="_cache" />
      <scope attributes="protected __hidden__" ilk="function" line="259" lineend="277" name="_compile" returns="sre_compile.compile()" signature="_compile(*key)">
        <variable attributes="varargs" ilk="argument" name="key" />
        <variable citdl="tuple" line="261" name="cachekey" />
        <variable citdl="sre_compile.compile()" line="262" name="p" />
      </scope>
      <variable attributes="protected __hidden__" citdl="frozenset()" line="218" name="_alphanum_bytes" />
      <scope attributes="protected __hidden__" ilk="function" line="279" lineend="289" name="_compile_repl" returns="_cache_repl.get()" signature="_compile_repl(*key)">
        <variable attributes="varargs" ilk="argument" name="key" />
        <variable citdl="sre_parse.parse_template()" line="281" name="p" />
      </scope>
    </scope>
    <scope doc="distutils.command.install_headers  Implements the Distutils &apos;install_headers&apos; command, to install C/C++ header" ilk="blob" lang="Python3" name="distutils.command.install_headers">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <variable citdl="str" line="6" name="__revision__" />
      <scope classrefs="Command" doc="# XXX force is never used" ilk="class" line="12" lineend="49" name="install_headers">
        <variable citdl="list" line="16" name="user_options" />
        <variable attributes="__instancevar__" citdl="int" line="26" name="force" />
        <variable citdl="str" line="14" name="description" />
        <scope ilk="function" line="45" lineend="46" name="get_inputs" returns="self.distribution.headers" signature="get_inputs()">
          <variable citdl="install_headers" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="24" lineend="27" name="initialize_options" signature="initialize_options()">
          <variable citdl="install_headers" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="25" name="install_dir" />
        <scope ilk="function" line="35" lineend="43" name="run" signature="run()">
          <variable citdl="install_headers" ilk="argument" name="self" />
          <variable citdl="self.distribution.headers" line="36" name="headers" />
        </scope>
        <variable citdl="list" line="22" name="boolean_options" />
        <scope ilk="function" line="29" lineend="32" name="finalize_options" signature="finalize_options()">
          <variable citdl="install_headers" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="48" lineend="49" name="get_outputs" returns="list" signature="get_outputs()">
          <variable citdl="install_headers" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="27" name="outfiles" />
      </scope>
    </scope>
    <scope doc="This module is always available.  It provides access to the mathematical functions defined by the C standard." ilk="blob" lang="Python3" name="math">
      <scope doc="Return the arc cosine (measured in radians) of x." ilk="function" name="acos" signature="acos(x)" />
      <scope doc="Return the hyperbolic arc cosine (measured in radians) of x." ilk="function" name="acosh" signature="acosh(x)" />
      <scope doc="Return the arc sine (measured in radians) of x." ilk="function" name="asin" signature="asin(x)" />
      <scope doc="Return the hyperbolic arc sine (measured in radians) of x." ilk="function" name="asinh" signature="asinh(x)" />
      <scope doc="Return the arc tangent (measured in radians) of x." ilk="function" name="atan" signature="atan(x)" />
      <scope doc="Return the arc tangent (measured in radians) of y/x." ilk="function" name="atan2" signature="atan2(y, x)" />
      <scope doc="Return the hyperbolic arc tangent (measured in radians) of x." ilk="function" name="atanh" signature="atanh(x)" />
      <scope doc="Return the ceiling of x as an int." ilk="function" name="ceil" signature="ceil(x)" />
      <scope doc="Return x with the sign of y." ilk="function" name="copysign" signature="copysign(x, y)" />
      <scope doc="Return the cosine of x (measured in radians)." ilk="function" name="cos" signature="cos(x)" />
      <scope doc="Return the hyperbolic cosine of x." ilk="function" name="cosh" signature="cosh(x)" />
      <scope doc="Convert angle x from radians to degrees." ilk="function" name="degrees" signature="degrees(x)" />
      <variable citdl="float" name="e" />
      <scope doc="Return e raised to the power of x." ilk="function" name="exp" signature="exp(x)" />
      <scope doc="Return the absolute value of the float x." ilk="function" name="fabs" signature="fabs(x)" />
      <scope doc="Find x!." ilk="function" name="factorial" signature="factorial(x) -&gt; Integral" />
      <scope doc="Return the floor of x as an int." ilk="function" name="floor" signature="floor(x)" />
      <scope doc="Return fmod(x, y), according to platform C." ilk="function" name="fmod" signature="fmod(x, y)" />
      <scope doc="Return the mantissa and exponent of x, as pair (m, e)." ilk="function" name="frexp" signature="frexp(x)" />
      <scope doc="Return an accurate floating point sum of values in the iterable." ilk="function" name="fsum" signature="fsum(iterable)" />
      <scope doc="Return the Euclidean distance, sqrt(x*x + y*y)." ilk="function" name="hypot" signature="hypot(x, y)" />
      <scope doc="Check if float x is infinite (positive or negative)." ilk="function" name="isinf" returns="bool" signature="isinf(x) -&gt; bool" />
      <scope doc="Check if float x is not a number (NaN)." ilk="function" name="isnan" returns="bool" signature="isnan(x) -&gt; bool" />
      <scope doc="Return x * (2**i)." ilk="function" name="ldexp" signature="ldexp(x, i)" />
      <scope doc="Return the logarithm of x to the given base." ilk="function" name="log" signature="log(x[, base])" />
      <scope doc="Return the base 10 logarithm of x." ilk="function" name="log10" signature="log10(x)" />
      <scope doc="Return the natural logarithm of 1+x (base e)." ilk="function" name="log1p" signature="log1p(x)" />
      <scope doc="Return the fractional and integer parts of x." ilk="function" name="modf" signature="modf(x)" />
      <variable citdl="float" name="pi" />
      <scope doc="Return x**y (x to the power of y)." ilk="function" name="pow" signature="pow(x, y)" />
      <scope doc="Convert angle x from degrees to radians." ilk="function" name="radians" signature="radians(x)" />
      <scope doc="Return the sine of x (measured in radians)." ilk="function" name="sin" signature="sin(x)" />
      <scope doc="Return the hyperbolic sine of x." ilk="function" name="sinh" signature="sinh(x)" />
      <scope doc="Return the square root of x." ilk="function" name="sqrt" signature="sqrt(x)" />
      <scope doc="Return the tangent of x (measured in radians)." ilk="function" name="tan" signature="tan(x)" />
      <scope doc="Return the hyperbolic tangent of x." ilk="function" name="tanh" signature="tanh(x)" />
      <scope doc="Truncates x to the nearest Integral toward 0." ilk="function" name="trunc" signature="trunc(x:Real) -&gt; Integral" />
    </scope>
    <scope doc="Fix bound method attributes (method.im_? -&gt; method.__?__)." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_methodattrs">
      <scope classrefs="BaseFix" ilk="class" line="15" lineend="23" name="FixMethodattrs">
        <variable citdl="str" line="16" name="PATTERN" />
        <scope ilk="function" line="20" lineend="23" name="transform" signature="transform(node, results)">
          <variable citdl="FixMethodattrs" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="21" name="attr" />
          <variable line="22" name="new" />
        </scope>
      </scope>
      <variable citdl="dict" line="9" name="MAP" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="ast ~~~ " ilk="blob" lang="Python3" name="ast">
      <scope classrefs="object" ilk="class" name="AST" />
      <scope classrefs="operator" ilk="class" name="Add" />
      <scope classrefs="boolop" ilk="class" name="And" />
      <scope classrefs="stmt" ilk="class" name="Assert" />
      <scope classrefs="stmt" ilk="class" name="Assign" />
      <scope classrefs="expr" ilk="class" name="Attribute" />
      <scope classrefs="stmt" ilk="class" name="AugAssign" />
      <scope classrefs="expr_context" ilk="class" name="AugLoad" />
      <scope classrefs="expr_context" ilk="class" name="AugStore" />
      <scope classrefs="expr" ilk="class" name="BinOp" />
      <scope classrefs="operator" ilk="class" name="BitAnd" />
      <scope classrefs="operator" ilk="class" name="BitOr" />
      <scope classrefs="operator" ilk="class" name="BitXor" />
      <scope classrefs="expr" ilk="class" name="BoolOp" />
      <scope classrefs="stmt" ilk="class" name="Break" />
      <scope classrefs="expr" ilk="class" name="Bytes" />
      <scope classrefs="expr" ilk="class" name="Call" />
      <scope classrefs="stmt" ilk="class" name="ClassDef" />
      <scope classrefs="expr" ilk="class" name="Compare" />
      <scope classrefs="stmt" ilk="class" name="Continue" />
      <scope classrefs="expr_context" ilk="class" name="Del" />
      <scope classrefs="stmt" ilk="class" name="Delete" />
      <scope classrefs="expr" ilk="class" name="Dict" />
      <scope classrefs="expr" ilk="class" name="DictComp" />
      <scope classrefs="operator" ilk="class" name="Div" />
      <scope classrefs="expr" ilk="class" name="Ellipsis" />
      <scope classrefs="cmpop" ilk="class" name="Eq" />
      <scope classrefs="excepthandler" ilk="class" name="ExceptHandler" />
      <scope classrefs="stmt" ilk="class" name="Expr" />
      <scope classrefs="mod" ilk="class" name="Expression" />
      <scope classrefs="slice" ilk="class" name="ExtSlice" />
      <scope classrefs="operator" ilk="class" name="FloorDiv" />
      <scope classrefs="stmt" ilk="class" name="For" />
      <scope classrefs="stmt" ilk="class" name="FunctionDef" />
      <scope classrefs="expr" ilk="class" name="GeneratorExp" />
      <scope classrefs="stmt" ilk="class" name="Global" />
      <scope classrefs="cmpop" ilk="class" name="Gt" />
      <scope classrefs="cmpop" ilk="class" name="GtE" />
      <scope classrefs="stmt" ilk="class" name="If" />
      <scope classrefs="expr" ilk="class" name="IfExp" />
      <scope classrefs="stmt" ilk="class" name="Import" />
      <scope classrefs="stmt" ilk="class" name="ImportFrom" />
      <scope classrefs="cmpop" ilk="class" name="In" />
      <scope classrefs="slice" ilk="class" name="Index" />
      <scope classrefs="mod" ilk="class" name="Interactive" />
      <scope classrefs="unaryop" ilk="class" name="Invert" />
      <scope classrefs="cmpop" ilk="class" name="Is" />
      <scope classrefs="cmpop" ilk="class" name="IsNot" />
      <scope classrefs="operator" ilk="class" name="LShift" />
      <scope classrefs="expr" ilk="class" name="Lambda" />
      <scope classrefs="expr" ilk="class" name="List" />
      <scope classrefs="expr" ilk="class" name="ListComp" />
      <scope classrefs="expr_context" ilk="class" name="Load" />
      <scope classrefs="cmpop" ilk="class" name="Lt" />
      <scope classrefs="cmpop" ilk="class" name="LtE" />
      <scope classrefs="operator" ilk="class" name="Mod" />
      <scope classrefs="mod" ilk="class" name="Module" />
      <scope classrefs="operator" ilk="class" name="Mult" />
      <scope classrefs="expr" ilk="class" name="Name" />
      <scope classrefs="NodeVisitor" doc="A :class:`NodeVisitor` subclass that walks the abstract syntax tree and allows modification of nodes. " ilk="class" line="256" lineend="313" name="NodeTransformer">
        <scope ilk="function" line="292" lineend="313" name="generic_visit" signature="generic_visit(node)">
          <variable citdl="NodeTransformer" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable citdl="getattr()" line="294" name="old_value" />
          <variable citdl="list" line="296" name="new_values" />
          <variable citdl="self.visit()" line="299" name="value" />
          <variable citdl="self.visit()" line="308" name="new_node" />
        </scope>
      </scope>
      <scope classrefs="object" doc="A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.  This function may return a value which is forwarded by the `visit` method." ilk="class" line="219" lineend="253" name="NodeVisitor">
        <scope doc="Called if no explicit visitor function exists for a node." ilk="function" line="245" lineend="253" name="generic_visit" signature="generic_visit(node)">
          <variable citdl="NodeVisitor" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
        </scope>
        <scope doc="Visit a node." ilk="function" line="239" lineend="243" name="visit" returns="NodeVisitor.visit.visitor()" signature="visit(node)">
          <variable citdl="NodeVisitor" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable citdl="node.__class__.__name__" line="241" name="method" />
          <variable citdl="getattr()" line="242" name="visitor" />
        </scope>
      </scope>
      <scope classrefs="stmt" ilk="class" name="Nonlocal" />
      <scope classrefs="unaryop" ilk="class" name="Not" />
      <scope classrefs="cmpop" ilk="class" name="NotEq" />
      <scope classrefs="cmpop" ilk="class" name="NotIn" />
      <scope classrefs="expr" ilk="class" name="Num" />
      <scope classrefs="boolop" ilk="class" name="Or" />
      <scope classrefs="expr_context" ilk="class" name="Param" />
      <scope classrefs="stmt" ilk="class" name="Pass" />
      <scope classrefs="operator" ilk="class" name="Pow" />
      <variable citdl="int" name="PyCF_ONLY_AST" />
      <scope classrefs="operator" ilk="class" name="RShift" />
      <scope classrefs="stmt" ilk="class" name="Raise" />
      <scope classrefs="stmt" ilk="class" name="Return" />
      <scope classrefs="expr" ilk="class" name="Set" />
      <scope classrefs="expr" ilk="class" name="SetComp" />
      <scope classrefs="slice" ilk="class" name="Slice" />
      <scope classrefs="expr" ilk="class" name="Starred" />
      <scope classrefs="expr_context" ilk="class" name="Store" />
      <scope classrefs="expr" ilk="class" name="Str" />
      <scope classrefs="operator" ilk="class" name="Sub" />
      <scope classrefs="expr" ilk="class" name="Subscript" />
      <scope classrefs="mod" ilk="class" name="Suite" />
      <scope classrefs="stmt" ilk="class" name="TryExcept" />
      <scope classrefs="stmt" ilk="class" name="TryFinally" />
      <scope classrefs="expr" ilk="class" name="Tuple" />
      <scope classrefs="unaryop" ilk="class" name="UAdd" />
      <scope classrefs="unaryop" ilk="class" name="USub" />
      <scope classrefs="expr" ilk="class" name="UnaryOp" />
      <scope classrefs="stmt" ilk="class" name="While" />
      <scope classrefs="stmt" ilk="class" name="With" />
      <scope classrefs="expr" ilk="class" name="Yield" />
      <variable citdl="str" name="__version__" />
      <scope classrefs="AST" ilk="class" name="alias" />
      <scope classrefs="AST" ilk="class" name="arg" />
      <scope classrefs="AST" ilk="class" name="arguments" />
      <scope classrefs="AST" ilk="class" name="boolop" />
      <scope classrefs="AST" ilk="class" name="cmpop" />
      <scope classrefs="AST" ilk="class" name="comprehension" />
      <scope doc="Copy source location (`lineno` and `col_offset` attributes) from *old_node* to *new_node* if possible, and return *new_node*." ilk="function" line="113" lineend="122" name="copy_location" signature="copy_location(new_node, old_node)">
        <variable ilk="argument" name="new_node" />
        <variable ilk="argument" name="old_node" />
      </scope>
      <scope doc="Return a formatted dump of the tree in *node*." ilk="function" line="83" lineend="110" name="dump" returns="dump._format()" signature="dump(node, annotate_fields=True, include_attributes=False)">
        <variable ilk="argument" name="node" />
        <scope attributes="protected" ilk="function" line="92" lineend="107" name="_format" returns="tuple" signature="_format(node)">
          <variable ilk="argument" name="node" />
          <variable citdl="list" line="94" name="fields" />
          <variable citdl="str" line="95" name="rv" />
        </scope>
        <variable citdl="False" ilk="argument" name="include_attributes" />
        <variable citdl="True" ilk="argument" name="annotate_fields" />
      </scope>
      <scope classrefs="AST" ilk="class" name="excepthandler" />
      <scope classrefs="AST" ilk="class" name="expr" />
      <scope classrefs="AST" ilk="class" name="expr_context" />
      <scope doc="When you compile a node tree with compile(), the compiler expects lineno and col_offset attributes for every node that supports them." ilk="function" line="125" lineend="147" name="fix_missing_locations" signature="fix_missing_locations(node)">
        <variable ilk="argument" name="node" />
        <scope attributes="protected" ilk="function" line="133" lineend="145" name="_fix" signature="_fix(node, lineno, col_offset)">
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="lineno" />
          <variable ilk="argument" name="col_offset" />
        </scope>
      </scope>
      <scope doc="Return the docstring for the given node or None if no docstring can be found." ilk="function" line="189" lineend="202" name="get_docstring" returns="inspect.cleandoc()" signature="get_docstring(node, clean=True)">
        <variable ilk="argument" name="node" />
        <variable citdl="True" ilk="argument" name="clean" />
      </scope>
      <scope doc="Increment the line number of each node in the tree starting at *node* by *n*." ilk="function" line="150" lineend="160" name="increment_lineno" signature="increment_lineno(node, n=1)">
        <variable ilk="argument" name="node" />
        <variable citdl="int" ilk="argument" name="n" />
      </scope>
      <scope doc="Yield all direct child nodes of *node*, that is, all fields that are nodes and all items of fields that are lists of nodes." ilk="function" line="175" lineend="186" name="iter_child_nodes" signature="iter_child_nodes(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <scope doc="Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields`` that is present on *node*." ilk="function" line="163" lineend="172" name="iter_fields" signature="iter_fields(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <scope classrefs="AST" ilk="class" name="keyword" />
      <scope doc="Safely evaluate an expression node or a string containing a Python expression." ilk="function" line="40" lineend="80" name="literal_eval" returns="literal_eval._convert()" signature="literal_eval(node_or_string)">
        <scope attributes="protected" ilk="function" line="52" lineend="79" name="_convert" returns="list()" signature="_convert(node)">
          <variable ilk="argument" name="node" />
          <variable citdl="node.left.n" line="73" name="left" />
          <variable citdl="node.right.n" line="74" name="right" />
        </scope>
        <variable attributes="protected" citdl="dict" line="47" name="_safe_names" />
        <variable citdl="parse()" ilk="argument" name="node_or_string" />
      </scope>
      <scope classrefs="AST" ilk="class" name="mod" />
      <scope classrefs="AST" ilk="class" name="operator" />
      <scope doc="Parse an expression into an AST node." ilk="function" line="32" lineend="37" name="parse" returns="compile()" signature="parse(expr, filename=&apos;&lt;unknown&gt;&apos;, mode=&apos;exec&apos;)">
        <variable ilk="argument" name="expr" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="str" ilk="argument" name="filename" />
      </scope>
      <scope classrefs="AST" ilk="class" name="slice" />
      <scope classrefs="AST" ilk="class" name="stmt" />
      <scope classrefs="AST" ilk="class" name="unaryop" />
      <scope doc="Recursively yield all child nodes of *node*, in no specified order." ilk="function" line="205" lineend="216" name="walk" signature="walk(node)">
        <variable citdl="todo.popleft()" ilk="argument" name="node" />
        <variable citdl="deque()" line="212" name="todo" />
      </scope>
    </scope>
    <scope doc="Pattern compiler.  The grammer is taken from PatternGrammar.txt." ilk="blob" lang="Python3" name="lib2to3.patcomp">
      <scope classrefs="object" ilk="class" line="42" lineend="172" name="PatternCompiler">
        <variable attributes="__instancevar__" citdl="driver.load_grammar()" line="49" name="grammar" />
        <scope ilk="function" line="170" lineend="172" name="get_int" returns="int()" signature="get_int(node)">
          <variable citdl="PatternCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
        </scope>
        <scope doc="Compiles a pattern string to a nested pytree.*Pattern object." ilk="function" line="55" lineend="62" name="compile_pattern" returns="self.compile_node()" signature="compile_pattern(input, debug=False)">
          <variable citdl="PatternCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="False" ilk="argument" name="debug" />
          <variable citdl="tokenize_wrapper()" line="57" name="tokens" />
          <variable citdl="self.driver.parse_tokens()" line="59" name="root" />
        </scope>
        <variable attributes="__instancevar__" citdl="driver.Driver()" line="53" name="driver" />
        <variable attributes="__instancevar__" citdl="pygram.python_grammar" line="51" name="pygrammar" />
        <variable attributes="__instancevar__" citdl="pygram.Symbols()" line="50" name="syms" />
        <scope doc="Compiles a node, recursively." ilk="function" line="64" lineend="133" name="compile_node" returns="p.optimize()" signature="compile_node(node)">
          <variable citdl="PatternCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable citdl="list" line="76" name="alts" />
          <variable citdl="pytree.WildcardPattern()" line="79" name="p" />
          <variable citdl="list" line="83" name="units" />
          <variable citdl="self.compile_basic()" line="90" name="pattern" />
          <variable line="96" name="name" />
          <variable citdl="list" line="97" name="nodes" />
          <variable line="101" name="repeat" />
          <variable citdl="repeat.children" line="111" name="children" />
          <variable line="112" name="child" />
          <variable citdl="int" line="114" name="min" />
          <variable citdl="pytree.HUGE" line="115" name="max" />
        </scope>
        <scope ilk="function" line="135" lineend="168" name="compile_basic" returns="pytree.WildcardPattern()" signature="compile_basic(nodes, repeat=None)">
          <variable citdl="PatternCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="nodes" />
          <variable ilk="argument" name="repeat" />
          <variable line="138" name="node" />
          <variable citdl="str()" line="140" name="value" />
          <variable citdl="getattr()" line="152" name="type" />
          <variable citdl="list" line="158" name="content" />
          <variable citdl="compile_node()" line="166" name="subpattern" />
        </scope>
        <scope attributes="__ctor__" doc="Initializer." ilk="function" line="44" lineend="53" name="__init__" signature="PatternCompiler(grammar_file=_PATTERN_GRAMMAR_FILE)">
          <variable citdl="PatternCompiler" ilk="argument" name="self" />
          <variable citdl="os.path.join()" ilk="argument" name="grammar_file" />
        </scope>
        <variable attributes="__instancevar__" citdl="pygram.python_symbols" line="52" name="pysyms" />
      </scope>
      <scope classrefs="Exception" ilk="class" line="28" lineend="29" name="PatternSyntaxError" />
      <variable citdl="dict" line="176" name="TOKEN_MAP" />
      <variable citdl="str" line="11" name="__author__" />
      <scope ilk="function" line="200" lineend="201" name="compile_pattern" signature="compile_pattern(pattern)">
        <variable ilk="argument" name="pattern" />
      </scope>
      <import module="driver" />
      <import module="grammar" />
      <import module="literals" />
      <import module="os" />
      <import module="parse" />
      <scope doc="Converts raw node information to a Node or Leaf instance." ilk="function" line="191" lineend="197" name="pattern_convert" returns="pytree.Node()" signature="pattern_convert(grammar, raw_node_info)">
        <variable ilk="argument" name="grammar" />
        <variable ilk="argument" name="raw_node_info" />
      </scope>
      <import module="pygram" />
      <import module="pytree" />
      <import module="token" />
      <import module="tokenize" />
      <scope doc="Tokenizes a string suppressing significant whitespace." ilk="function" line="32" lineend="39" name="tokenize_wrapper" signature="tokenize_wrapper(input)">
        <variable citdl="tokenize.generate_tokens()" line="35" name="tokens" />
        <variable ilk="argument" name="input" />
        <variable citdl="set()" line="34" name="skip" />
      </scope>
      <variable attributes="protected __hidden__" citdl="os.path.join()" line="24" name="_PATTERN_GRAMMAR_FILE" />
      <scope attributes="protected __hidden__" ilk="function" line="182" lineend="188" name="_type_of_literal" returns="token.NAME" signature="_type_of_literal(value)">
        <variable ilk="argument" name="value" />
      </scope>
    </scope>
    <scope doc="Support for POSIX locales." ilk="blob" lang="Python3" name="_locale">
      <variable citdl="int" name="CHAR_MAX" />
      <scope classrefs="Exception" ilk="class" name="Error" />
      <variable citdl="int" name="LC_ALL" />
      <variable citdl="int" name="LC_COLLATE" />
      <variable citdl="int" name="LC_CTYPE" />
      <variable citdl="int" name="LC_MONETARY" />
      <variable citdl="int" name="LC_NUMERIC" />
      <variable citdl="int" name="LC_TIME" />
      <scope doc="() -&gt; dict." ilk="function" name="localeconv" />
      <scope doc="(integer,string=None) -&gt; string." ilk="function" name="setlocale" />
      <scope doc="string,string -&gt; int." ilk="function" name="strcoll" />
      <scope doc="Return a string that can be used as a key for locale-aware comparisons." ilk="function" name="strxfrm" signature="strxfrm(string) -&gt; string." />
    </scope>
    <scope doc="Logging package for Python. Based on PEP 282 and comments thereto in comp.lang.python, and influenced by Apache&apos;s log4j system. " ilk="blob" lang="Python3" name="logging">
      <variable citdl="str" line="1358" name="BASIC_FORMAT" />
      <scope classrefs="object" doc="A formatter suitable for formatting a number of records." ilk="class" line="458" lineend="494" name="BufferingFormatter">
        <variable attributes="__instancevar__" citdl="Formatter" line="468" name="linefmt" />
        <scope doc="Return the header string for the specified records." ilk="function" line="472" lineend="476" name="formatHeader" returns="str" signature="formatHeader(records)">
          <variable citdl="BufferingFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="records" />
        </scope>
        <scope doc="Return the footer string for the specified records." ilk="function" line="478" lineend="482" name="formatFooter" returns="str" signature="formatFooter(records)">
          <variable citdl="BufferingFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="records" />
        </scope>
        <scope attributes="__ctor__" doc="Optionally specify a formatter which will be used to format each individual record." ilk="function" line="462" lineend="470" name="__init__" signature="BufferingFormatter(linefmt=None)">
          <variable citdl="BufferingFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="linefmt" />
        </scope>
        <scope doc="Format the specified records and return the result as a string." ilk="function" line="484" lineend="494" name="format" returns="str" signature="format(records)">
          <variable citdl="BufferingFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="records" />
          <variable citdl="str" line="488" name="rv" />
        </scope>
      </scope>
      <variable citdl="int" line="125" name="CRITICAL" />
      <variable citdl="int" line="131" name="DEBUG" />
      <variable citdl="int" line="127" name="ERROR" />
      <variable citdl="int" line="126" name="FATAL" />
      <scope classrefs="StreamHandler" doc="A handler class which writes formatted logging records to disk files." ilk="class" line="800" lineend="854" name="FileHandler">
        <variable attributes="__instancevar__" citdl="_open()" line="819" name="stream" />
        <variable attributes="__instancevar__" line="814" name="encoding" />
        <scope attributes="protected" doc="Open the current base file with the (original) mode and encoding." ilk="function" line="834" lineend="843" name="_open" returns="open()" signature="_open()">
          <variable citdl="FileHandler" ilk="argument" name="self" />
          <variable citdl="open()" line="840" name="stream" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.path.abspath()" line="812" name="baseFilename" />
        <variable attributes="__instancevar__" citdl="str" line="813" name="mode" />
        <scope doc="Closes the stream." ilk="function" line="823" lineend="832" name="close" signature="close()">
          <variable citdl="FileHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Emit a record." ilk="function" line="845" lineend="854" name="emit" signature="emit(record)">
          <variable citdl="FileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <scope attributes="__ctor__" doc="Open the specified file and use it as the stream for logging." ilk="function" line="804" lineend="821" name="__init__" signature="FileHandler(filename, mode=&apos;a&apos;, encoding=None, delay=0)">
          <variable citdl="FileHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="int" ilk="argument" name="delay" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Filter instances are used to perform arbitrary filtering of LogRecords.  Loggers and Handlers can optionally use Filter instances to filter" ilk="class" line="500" lineend="535" name="Filter">
        <scope doc="Determine if the specified record is to be logged." ilk="function" line="522" lineend="535" name="filter" returns="bool" signature="filter(record)">
          <variable citdl="Filter" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="519" name="name" />
        <scope attributes="__ctor__" doc="Initialize a filter." ilk="function" line="511" lineend="520" name="__init__" signature="Filter(name=&apos;&apos;)">
          <variable citdl="Filter" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="name" />
        </scope>
        <variable attributes="__instancevar__" citdl="len()" line="520" name="nlen" />
      </scope>
      <scope classrefs="object" doc="A base class for loggers and handlers which allows them to share common code." ilk="class" line="537" lineend="575" name="Filterer">
        <scope doc="Determine if a record is loggable by consulting all the filters." ilk="function" line="562" lineend="575" name="filter" returns="int" signature="filter(record)">
          <variable citdl="Filterer" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="int" line="570" name="rv" />
        </scope>
        <scope doc="Add the specified filter to this handler." ilk="function" line="548" lineend="553" name="addFilter" signature="addFilter(filter)">
          <variable citdl="Filterer" ilk="argument" name="self" />
          <variable ilk="argument" name="filter" />
        </scope>
        <scope doc="Remove the specified filter from this handler." ilk="function" line="555" lineend="560" name="removeFilter" signature="removeFilter(filter)">
          <variable citdl="Filterer" ilk="argument" name="self" />
          <variable ilk="argument" name="filter" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="546" name="filters" />
        <scope attributes="__ctor__" doc="Initialize the list of filters to be an empty list." ilk="function" line="542" lineend="546" name="__init__" signature="Filterer()">
          <variable citdl="Filterer" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Formatter instances are used to convert a LogRecord to text.  Formatters need to know how a LogRecord is constructed. They are" ilk="class" line="326" lineend="451" name="Formatter">
        <variable attributes="__instancevar__" line="382" name="datefmt" />
        <variable attributes="protected __instancevar__" citdl="str" line="379" name="_fmt" />
        <variable citdl="time.localtime" line="368" name="converter" />
        <scope doc="Format the specified record as text." ilk="function" line="425" lineend="451" name="format" returns="str" signature="format(record)">
          <variable citdl="Formatter" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="str" line="441" name="s" />
        </scope>
        <scope doc="Return the creation time of the specified LogRecord as formatted text." ilk="function" line="384" lineend="408" name="formatTime" returns="time.strftime()" signature="formatTime(record, datefmt=None)">
          <variable citdl="Formatter" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable ilk="argument" name="datefmt" />
          <variable citdl="converter()" line="402" name="ct" />
          <variable citdl="time.strftime()" line="404" name="s" />
          <variable citdl="time.strftime()" line="406" name="t" />
        </scope>
        <scope doc="Format and return the specified exception information as a string." ilk="function" line="410" lineend="423" name="formatException" returns="sio.getvalue()" signature="formatException(ei)">
          <variable citdl="Formatter" ilk="argument" name="self" />
          <variable ilk="argument" name="ei" />
          <variable citdl="io.StringIO()" line="417" name="sio" />
          <variable citdl="sio.getvalue()" line="419" name="s" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize the formatter with specified format strings." ilk="function" line="370" lineend="382" name="__init__" signature="Formatter(fmt=None, datefmt=None)">
          <variable citdl="Formatter" ilk="argument" name="self" />
          <variable ilk="argument" name="fmt" />
          <variable ilk="argument" name="datefmt" />
        </scope>
      </scope>
      <scope classrefs="Filterer" doc="Handler instances dispatch logging events to specific destinations.  The base handler class. Acts as a placeholder which defines the Handler" ilk="class" line="584" lineend="731" name="Handler">
        <scope doc="Acquire the I/O thread lock." ilk="function" line="619" lineend="624" name="acquire" signature="acquire()">
          <variable citdl="Handler" ilk="argument" name="self" />
        </scope>
        <scope doc="Conditionally emit the specified logging record." ilk="function" line="662" lineend="678" name="handle" returns="self.filter()" signature="handle(record)">
          <variable citdl="Handler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="self.filter()" line="671" name="rv" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="599" name="level" />
        <variable attributes="__instancevar__" citdl="threading.RLock()" line="615" name="lock" />
        <scope doc="Set the logging level of this handler." ilk="function" line="633" lineend="637" name="setLevel" signature="setLevel(level)">
          <variable citdl="Handler" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope doc="Handle errors which occur during an emit() call." ilk="function" line="712" lineend="731" name="handleError" signature="handleError(record)">
          <variable citdl="Handler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="sys.exc_info()" line="725" name="ei" />
        </scope>
        <scope doc="Acquire a thread lock for serializing access to the underlying I/O." ilk="function" line="610" lineend="617" name="createLock" signature="createLock()">
          <variable citdl="Handler" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the formatter for this handler." ilk="function" line="680" lineend="684" name="setFormatter" signature="setFormatter(fmt)">
          <variable citdl="Handler" ilk="argument" name="self" />
          <variable ilk="argument" name="fmt" />
        </scope>
        <scope doc="Ensure all logging output has been flushed." ilk="function" line="686" lineend="693" name="flush" signature="flush()">
          <variable citdl="Handler" ilk="argument" name="self" />
        </scope>
        <scope doc="Release the I/O thread lock." ilk="function" line="626" lineend="631" name="release" signature="release()">
          <variable citdl="Handler" ilk="argument" name="self" />
        </scope>
        <scope doc="Tidy up any resources used by the handler." ilk="function" line="695" lineend="710" name="close" signature="close()">
          <variable citdl="Handler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="600" name="formatter" />
        <scope doc="Do whatever it takes to actually log the specified logging record." ilk="function" line="652" lineend="659" name="emit" signature="emit(record)">
          <variable citdl="Handler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <scope attributes="__ctor__" doc="Initializes the instance - basically setting the formatter to None and the filter list to empty." ilk="function" line="593" lineend="608" name="__init__" signature="Handler(level=NOTSET)">
          <variable citdl="Handler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <scope doc="Format the specified record." ilk="function" line="639" lineend="650" name="format" returns="fmt.format()" signature="format(record)">
          <variable citdl="Handler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="Formatter" line="647" name="fmt" />
        </scope>
      </scope>
      <variable citdl="int" line="130" name="INFO" />
      <scope classrefs="object" doc="A LogRecord instance represents an event being logged.  LogRecord instances are created every time something is logged. They" ilk="class" line="216" lineend="309" name="LogRecord">
        <variable attributes="__instancevar__" citdl="time.time()" line="267" name="relativeCreated" />
        <variable attributes="__instancevar__" citdl="os.getpid()" line="283" name="process" />
        <scope ilk="function" line="287" lineend="289" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="LogRecord" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="257" name="module" />
        <variable attributes="__instancevar__" line="264" name="funcName" />
        <scope attributes="__ctor__" doc="Initialize a logging record with interesting information." ilk="function" line="228" lineend="285" name="__init__" signature="LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None)">
          <import line="278" module="multiprocessing" symbol="current_process" />
          <variable citdl="LogRecord" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="pathname" />
          <variable ilk="argument" name="lineno" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="exc_info" />
          <variable ilk="argument" name="func" />
          <variable citdl="time.time()" line="233" name="ct" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.path.basename()" line="256" name="filename" />
        <variable attributes="__instancevar__" line="253" name="levelno" />
        <variable attributes="__instancevar__" line="275" name="processName" />
        <scope doc="Return the message for this LogRecord." ilk="function" line="291" lineend="309" name="getMessage" returns="str()" signature="getMessage()">
          <variable citdl="LogRecord" ilk="argument" name="self" />
          <variable citdl="str()" line="299" name="msg" />
        </scope>
        <variable attributes="__instancevar__" line="263" name="lineno" />
        <variable attributes="__instancevar__" line="235" name="msg" />
        <variable attributes="__instancevar__" line="251" name="args" />
        <variable attributes="__instancevar__" line="262" name="exc_text" />
        <variable attributes="__instancevar__" line="234" name="name" />
        <variable attributes="__instancevar__" citdl="thread.get_ident()" line="269" name="thread" />
        <variable attributes="__instancevar__" citdl="time.time()" line="265" name="created" />
        <variable attributes="__instancevar__" line="270" name="threadName" />
        <variable attributes="__instancevar__" citdl="int()" line="266" name="msecs" />
        <variable attributes="__instancevar__" line="254" name="pathname" />
        <variable attributes="__instancevar__" line="261" name="exc_info" />
        <variable attributes="__instancevar__" citdl="getLevelName()" line="252" name="levelname" />
      </scope>
      <scope classrefs="Filterer" doc="Instances of the Logger class represent a single logging channel. A &quot;logging channel&quot; indicates an area of an application. Exactly how an &quot;area&quot; is defined is up to the application developer. Since an" ilk="class" line="994" lineend="1244" name="Logger">
        <variable attributes="__instancevar__" citdl="int" line="1019" name="disabled" />
        <variable attributes="__instancevar__" citdl="Manager" line="1352" name="manager" />
        <scope doc="Log &apos;msg % args&apos; with severity &apos;WARNING&apos;." ilk="function" line="1051" lineend="1061" name="warning" signature="warning(msg, *args, **kwargs)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize the logger with a name and an optional level." ilk="function" line="1009" lineend="1019" name="__init__" signature="Logger(name, level=NOTSET)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <scope doc="Log &apos;msg % args&apos; with the integer severity &apos;level&apos;." ilk="function" line="1097" lineend="1112" name="log" signature="log(level, msg, *args, **kwargs)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope doc="Add the specified handler to this logger." ilk="function" line="1179" lineend="1184" name="addHandler" signature="addHandler(hdlr)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="hdlr" />
        </scope>
        <scope doc="Remove the specified handler from this logger." ilk="function" line="1186" lineend="1196" name="removeHandler" signature="removeHandler(hdlr)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="hdlr" />
        </scope>
        <scope doc="Log &apos;msg % args&apos; with severity &apos;CRITICAL&apos;." ilk="function" line="1083" lineend="1093" name="critical" signature="critical(msg, *args, **kwargs)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <variable citdl="Logger.critical" line="1095" name="fatal" />
        <scope doc="Call the handlers for the specified record." ilk="function" line="1169" lineend="1177" name="handle" signature="handle(record)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
        <variable attributes="__instancevar__" line="1016" name="parent" />
        <scope doc="Set the logging level of this logger." ilk="function" line="1021" lineend="1025" name="setLevel" signature="setLevel(level)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <variable citdl="Logger.warning" line="1063" name="warn" />
        <scope doc="Find the stack frame of the caller so that we can note the source file name, line number and function name." ilk="function" line="1114" lineend="1133" name="findCaller" returns="tuple" signature="findCaller()">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable citdl="f.f_back" line="1119" name="f" />
          <variable citdl="tuple" line="1124" name="rv" />
          <variable citdl="f.f_code" line="1126" name="co" />
          <variable citdl="os.path.normcase()" line="1127" name="filename" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="1017" name="propagate" />
        <scope attributes="protected" doc="Low-level logging routine which creates a LogRecord and then calls all the handlers of this logger to handle the record." ilk="function" line="1148" lineend="1167" name="_log" signature="_log(level, msg, args, exc_info=None, extra=None)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="args" />
          <variable citdl="sys.exc_info()" ilk="argument" name="exc_info" />
          <variable ilk="argument" name="extra" />
          <variable citdl="int" line="1160" name="lno" />
          <variable citdl="str" line="1160" name="fn" />
          <variable citdl="str" line="1160" name="func" />
          <variable citdl="makeRecord()" line="1166" name="record" />
        </scope>
        <scope doc="Is this logger enabled for level &apos;level&apos;?" ilk="function" line="1238" lineend="1244" name="isEnabledFor" returns="bool" signature="isEnabledFor(level)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope doc="Get the effective level for this logger." ilk="function" line="1224" lineend="1236" name="getEffectiveLevel" returns="int" signature="getEffectiveLevel()">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable citdl="Logger" line="1231" name="logger" />
        </scope>
        <scope doc="A factory method which can be overridden in subclasses to create specialized LogRecords." ilk="function" line="1135" lineend="1146" name="makeRecord" returns="LogRecord" signature="makeRecord(name, level, fn, lno, msg, args, exc_info, func=None, extra=None)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="fn" />
          <variable ilk="argument" name="lno" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="exc_info" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="extra" />
          <variable citdl="LogRecord" line="1140" name="rv" />
        </scope>
        <scope doc="Log &apos;msg % args&apos; with severity &apos;INFO&apos;." ilk="function" line="1039" lineend="1049" name="info" signature="info(msg, *args, **kwargs)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope doc="Convenience method for logging an ERROR with exception information." ilk="function" line="1077" lineend="1081" name="exception" signature="exception(msg, *args)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable attributes="__instancevar__" line="1014" name="name" />
        <variable attributes="__instancevar__" citdl="list" line="1018" name="handlers" />
        <variable attributes="__instancevar__" citdl="int" line="1015" name="level" />
        <scope doc="Pass a record to all relevant handlers." ilk="function" line="1198" lineend="1222" name="callHandlers" signature="callHandlers(record)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="Logger" line="1208" name="c" />
          <variable citdl="int" line="1209" name="found" />
        </scope>
        <scope doc="Log &apos;msg % args&apos; with severity &apos;ERROR&apos;." ilk="function" line="1065" lineend="1075" name="error" signature="error(msg, *args, **kwargs)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope doc="Log &apos;msg % args&apos; with severity &apos;DEBUG&apos;." ilk="function" line="1027" lineend="1037" name="debug" signature="debug(msg, *args, **kwargs)">
          <variable citdl="Logger" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <variable attributes="__instancevar__" citdl="RootLogger" line="1351" name="root" />
      </scope>
      <scope classrefs="object" doc="An adapter for loggers which makes it easier to specify contextual information in logging output." ilk="class" line="1260" lineend="1348" name="LoggerAdapter">
        <scope doc="Delegate an info call to the underlying logger, after adding contextual information from this adapter instance." ilk="function" line="1301" lineend="1307" name="info" signature="info(msg, *args, **kwargs)">
          <variable citdl="LoggerAdapter" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope doc="Delegate an exception call to the underlying logger, after adding contextual information from this adapter instance." ilk="function" line="1325" lineend="1332" name="exception" signature="exception(msg, *args, **kwargs)">
          <variable citdl="LoggerAdapter" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope doc="Delegate a log call to the underlying logger, after adding contextual information from this adapter instance." ilk="function" line="1342" lineend="1348" name="log" signature="log(level, msg, *args, **kwargs)">
          <variable citdl="LoggerAdapter" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <variable attributes="__instancevar__" line="1278" name="extra" />
        <scope doc="Process the logging message and keyword arguments passed in to a logging call to insert contextual information." ilk="function" line="1280" lineend="1291" name="process" returns="tuple" signature="process(msg, kwargs)">
          <variable citdl="LoggerAdapter" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="kwargs" />
        </scope>
        <scope doc="Delegate a warning call to the underlying logger, after adding contextual information from this adapter instance." ilk="function" line="1309" lineend="1315" name="warning" signature="warning(msg, *args, **kwargs)">
          <variable citdl="LoggerAdapter" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope doc="Delegate a critical call to the underlying logger, after adding contextual information from this adapter instance." ilk="function" line="1334" lineend="1340" name="critical" signature="critical(msg, *args, **kwargs)">
          <variable citdl="LoggerAdapter" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope doc="Delegate an error call to the underlying logger, after adding contextual information from this adapter instance." ilk="function" line="1317" lineend="1323" name="error" signature="error(msg, *args, **kwargs)">
          <variable citdl="LoggerAdapter" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope doc="Delegate a debug call to the underlying logger, after adding contextual information from this adapter instance." ilk="function" line="1293" lineend="1299" name="debug" signature="debug(msg, *args, **kwargs)">
          <variable citdl="LoggerAdapter" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <variable attributes="__instancevar__" line="1277" name="logger" />
        <scope attributes="__ctor__" doc="Initialize the adapter with a logger and a dict-like object which provides contextual information." ilk="function" line="1266" lineend="1278" name="__init__" signature="LoggerAdapter(logger, extra)">
          <variable citdl="LoggerAdapter" ilk="argument" name="self" />
          <variable ilk="argument" name="logger" />
          <variable ilk="argument" name="extra" />
        </scope>
      </scope>
      <scope classrefs="object" doc="There is [under normal circumstances] just one Manager instance, which holds the hierarchy of loggers." ilk="class" line="907" lineend="988" name="Manager">
        <scope attributes="protected" doc="Ensure that children of the placeholder ph are connected to the specified logger." ilk="function" line="977" lineend="988" name="_fixupChildren" signature="_fixupChildren(ph, alogger)">
          <variable citdl="Manager" ilk="argument" name="self" />
          <variable ilk="argument" name="ph" />
          <variable ilk="argument" name="alogger" />
          <variable citdl="alogger.name" line="982" name="name" />
          <variable citdl="len()" line="983" name="namelen" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="918" name="emittedNoHandlerWarning" />
        <variable attributes="__instancevar__" citdl="dict" line="919" name="loggerDict" />
        <scope doc="Get a logger with the specified name (channel name), creating it if it doesn&apos;t yet exist." ilk="function" line="921" lineend="951" name="getLogger" returns="_loggerClass()" signature="getLogger(name)">
          <variable citdl="Manager" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="_loggerClass()" line="932" name="rv" />
          <variable line="938" name="ph" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="917" name="disable" />
        <scope attributes="protected" doc="Ensure that there are either loggers or placeholders all the way from the specified logger to the root of the logger hierarchy." ilk="function" line="953" lineend="975" name="_fixupParents" signature="_fixupParents(alogger)">
          <variable citdl="Manager" ilk="argument" name="self" />
          <variable ilk="argument" name="alogger" />
          <variable citdl="alogger.name" line="958" name="name" />
          <variable citdl="name.rfind()" line="959" name="i" />
          <variable line="960" name="rv" />
          <variable citdl="list" line="962" name="substr" />
          <variable line="966" name="obj" />
        </scope>
        <variable attributes="__instancevar__" line="916" name="root" />
        <scope attributes="__ctor__" doc="Initialize the manager with the root node of the logger hierarchy." ilk="function" line="912" lineend="919" name="__init__" signature="Manager(rootnode)">
          <variable citdl="Manager" ilk="argument" name="self" />
          <variable ilk="argument" name="rootnode" />
        </scope>
      </scope>
      <variable citdl="int" line="132" name="NOTSET" />
      <scope classrefs="Handler" doc="This handler does nothing. It&apos;s intended to be used to avoid the &quot;No handlers could be found for logger XXX&quot; one-off warning. This is important for library code, which may contain code to log events. If a user" ilk="class" line="1536" lineend="1547" name="NullHandler">
        <scope ilk="function" line="1546" lineend="1547" name="emit" signature="emit(record)">
          <variable citdl="NullHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
        </scope>
      </scope>
      <scope classrefs="object" doc="PlaceHolder instances are used in the Manager logger hierarchy to take the place of nodes for which no loggers have been defined. This class is intended for internal use only and not as part of the public API." ilk="class" line="860" lineend="880" name="PlaceHolder">
        <scope doc="Add the specified logger as a child of this placeholder." ilk="function" line="873" lineend="880" name="append" signature="append(alogger)">
          <variable citdl="PlaceHolder" ilk="argument" name="self" />
          <variable ilk="argument" name="alogger" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize with the specified logger being a child of this placeholder." ilk="function" line="866" lineend="871" name="__init__" signature="PlaceHolder(alogger)">
          <variable citdl="PlaceHolder" ilk="argument" name="self" />
          <variable ilk="argument" name="alogger" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="871" name="loggerMap" />
      </scope>
      <scope classrefs="Logger" doc="A root logger is not that different to any other logger, except that it must have a logging level and there is only one instance of it in the hierarchy." ilk="class" line="1246" lineend="1256" name="RootLogger">
        <scope attributes="__ctor__" doc="Initialize the logger with the name &quot;root&quot;." ilk="function" line="1252" lineend="1256" name="__init__" signature="RootLogger(level)">
          <variable citdl="RootLogger" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
      </scope>
      <scope classrefs="Handler" doc="A handler class which writes logging records, appropriately formatted, to a stream. Note that this class does not close the stream, as sys.stdout or sys.stderr may be used." ilk="class" line="733" lineend="798" name="StreamHandler">
        <variable attributes="__instancevar__" citdl="sys.stderr" line="749" name="stream" />
        <scope doc="Emit a record." ilk="function" line="758" lineend="798" name="emit" signature="emit(record)">
          <variable citdl="StreamHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="record" />
          <variable citdl="self.format()" line="770" name="msg" />
          <variable citdl="sys.stderr" line="771" name="stream" />
          <variable citdl="fs.decode()" line="772" name="fs" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize the handler." ilk="function" line="740" lineend="749" name="__init__" signature="StreamHandler(stream=None)">
          <variable citdl="StreamHandler" ilk="argument" name="self" />
          <variable citdl="sys.stderr" ilk="argument" name="stream" />
        </scope>
        <scope doc="Flushes the stream." ilk="function" line="751" lineend="756" name="flush" signature="flush()">
          <variable citdl="StreamHandler" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="int" line="129" name="WARN" />
      <variable citdl="int" line="128" name="WARNING" />
      <variable citdl="list" line="28" name="__all__" />
      <variable citdl="str" line="47" name="__author__" />
      <variable citdl="str" line="50" name="__date__" />
      <variable citdl="str" line="48" name="__status__" />
      <variable citdl="str" line="49" name="__version__" />
      <scope doc="Associate &apos;levelName&apos; with &apos;level&apos;." ilk="function" line="166" lineend="177" name="addLevelName" signature="addLevelName(level, levelName)">
        <variable ilk="argument" name="levelName" />
        <variable ilk="argument" name="level" />
      </scope>
      <import module="atexit" />
      <scope doc="Do basic configuration for the logging system." ilk="function" line="1360" lineend="1411" name="basicConfig" signature="basicConfig(**kwargs)">
        <variable citdl="kwargs.get()" line="1400" name="fs" />
        <variable citdl="kwargs.get()" line="1398" name="stream" />
        <variable citdl="kwargs.get()" line="1405" name="level" />
        <variable citdl="Formatter" line="1402" name="fmt" />
        <variable citdl="kwargs.get()" line="1401" name="dfs" />
        <variable citdl="kwargs.get()" line="1393" name="filename" />
        <variable citdl="kwargs.get()" line="1395" name="mode" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
        <variable citdl="FileHandler" line="1396" name="hdlr" />
      </scope>
      <scope doc="If capture is true, redirect all warnings to the logging package." ilk="function" line="1571" lineend="1585" name="captureWarnings" signature="captureWarnings(capture)">
        <variable ilk="argument" name="capture" />
        <variable attributes="protected" citdl="warnings.showwarning" line="1580" name="_warnings_showwarning" />
      </scope>
      <import module="codecs" />
      <scope doc="Log a message with severity &apos;CRITICAL&apos; on the root logger." ilk="function" line="1438" lineend="1444" name="critical" signature="critical(msg, *args, **kwargs)">
        <variable ilk="argument" name="msg" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope doc="Return the frame object for the caller&apos;s stack frame." ilk="function" line="71" lineend="76" name="currentframe" signature="currentframe()" />
      <scope doc="Log a message with severity &apos;DEBUG&apos; on the root logger." ilk="function" line="1481" lineend="1487" name="debug" signature="debug(msg, *args, **kwargs)">
        <variable ilk="argument" name="msg" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope doc="Disable all logging calls less severe than &apos;level&apos;." ilk="function" line="1497" lineend="1501" name="disable" signature="disable(level)">
        <variable ilk="argument" name="level" />
      </scope>
      <scope doc="Log a message with severity &apos;ERROR&apos; on the root logger." ilk="function" line="1448" lineend="1454" name="error" signature="error(msg, *args, **kwargs)">
        <variable ilk="argument" name="msg" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope doc="Log a message with severity &apos;ERROR&apos; on the root logger, with exception information." ilk="function" line="1456" lineend="1461" name="exception" signature="exception(msg, *args)">
        <variable ilk="argument" name="msg" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <scope doc="Log a message with severity &apos;CRITICAL&apos; on the root logger." ilk="function" line="1446" name="fatal" signature="fatal(msg, *args, **kwargs)" />
      <scope doc="Return the textual representation of logging level &apos;level&apos;." ilk="function" line="150" lineend="164" name="getLevelName" returns="_levelNames.get()" signature="getLevelName(level)">
        <variable ilk="argument" name="level" />
      </scope>
      <scope doc="Return a logger with the specified name, creating it if necessary." ilk="function" line="1418" lineend="1427" name="getLogger" returns="RootLogger" signature="getLogger(name=None)">
        <variable ilk="argument" name="name" />
      </scope>
      <scope doc="Return the class to be used when instantiating a logger." ilk="function" line="900" lineend="905" name="getLoggerClass" signature="getLoggerClass()" />
      <scope doc="Log a message with severity &apos;INFO&apos; on the root logger." ilk="function" line="1473" lineend="1479" name="info" signature="info(msg, *args, **kwargs)">
        <variable ilk="argument" name="msg" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <import module="io" />
      <scope doc="Log &apos;msg % args&apos; with the integer severity &apos;level&apos; on the root logger." ilk="function" line="1489" lineend="1495" name="log" signature="log(level, msg, *args, **kwargs)">
        <variable ilk="argument" name="msg" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="level" />
      </scope>
      <variable citdl="int" line="107" name="logMultiprocessing" />
      <variable citdl="int" line="112" name="logProcesses" />
      <variable citdl="int" line="102" name="logThreads" />
      <scope doc="Make a LogRecord whose attributes are defined by the specified dictionary, This function is useful for converting a logging event received over a socket connection (which is sent as a dictionary) into a LogRecord instance." ilk="function" line="311" lineend="320" name="makeLogRecord" returns="LogRecord" signature="makeLogRecord(dict)">
        <variable citdl="LogRecord" line="318" name="rv" />
        <variable ilk="argument" name="dict" />
      </scope>
      <import module="os" />
      <variable citdl="int" line="97" name="raiseExceptions" />
      <variable citdl="RootLogger" line="1350" name="root" />
      <scope doc="Set the class to be used when instantiating a logger." ilk="function" line="887" lineend="898" name="setLoggerClass" signature="setLoggerClass(klass)">
        <variable attributes="protected" line="898" name="_loggerClass" />
        <variable ilk="argument" name="klass" />
      </scope>
      <scope doc="Perform any cleanup actions in the logging system (e.g." ilk="function" line="1503" lineend="1518" name="shutdown" signature="shutdown(handlerList=[])">
        <variable citdl="list" ilk="argument" name="handlerList" />
      </scope>
      <import module="sys" />
      <import module="thread" />
      <import module="threading" />
      <import module="time" />
      <import module="traceback" />
      <scope doc="Log a message with severity &apos;WARNING&apos; on the root logger." ilk="function" line="1471" name="warn" signature="warn(msg, *args, **kwargs)" />
      <scope doc="Log a message with severity &apos;WARNING&apos; on the root logger." ilk="function" line="1463" lineend="1469" name="warning" signature="warning(msg, *args, **kwargs)">
        <variable ilk="argument" name="msg" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <import module="warnings" />
      <variable attributes="protected __hidden__" line="1551" name="_warnings_showwarning" />
      <variable attributes="protected __hidden__" citdl="Formatter" line="456" name="_defaultFormatter" />
      <variable attributes="protected __hidden__" citdl="str" line="63" name="_srcfile" />
      <variable attributes="__hidden__" line="45" name="thread" />
      <variable attributes="protected __hidden__" citdl="dict" line="581" name="_handlers" />
      <variable attributes="protected __hidden__" citdl="time.time()" line="91" name="_startTime" />
      <variable attributes="protected __hidden__" line="191" name="_lock" />
      <scope attributes="__hidden__" ilk="function" line="1526" lineend="1530" name="exithook" signature="exithook(status, old_exit=sys.exit)">
        <variable ilk="argument" name="status" />
        <variable citdl="sys.exit" ilk="argument" name="old_exit" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="134" name="_levelNames" />
      <variable attributes="protected __hidden__" citdl="bool" line="56" name="_unicode" />
      <variable attributes="protected __hidden__" citdl="Logger" line="885" name="_loggerClass" />
      <scope attributes="protected __hidden__" doc="Implementation of showwarnings which redirects to logging, which will first check to see if the file parameter is None." ilk="function" line="1553" lineend="1569" name="_showwarning" signature="_showwarning(message, category, filename, lineno, file=None, line=None)">
        <variable ilk="argument" name="message" />
        <variable ilk="argument" name="category" />
        <variable ilk="argument" name="filename" />
        <variable ilk="argument" name="lineno" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="line" />
        <variable citdl="warnings.formatwarning()" line="1565" name="s" />
        <variable citdl="getLogger()" line="1566" name="logger" />
      </scope>
      <scope attributes="protected __hidden__" doc="Release the module-level lock acquired by calling _acquireLock()." ilk="function" line="205" lineend="210" name="_releaseLock" signature="_releaseLock()" />
      <scope attributes="protected __hidden__" doc="Acquire the module-level lock for serializing access to shared data." ilk="function" line="193" lineend="203" name="_acquireLock" signature="_acquireLock()">
        <variable attributes="protected" citdl="threading.RLock()" line="201" name="_lock" />
      </scope>
      <variable attributes="protected __hidden__" citdl="list" line="582" name="_handlerList" />
      <variable attributes="__hidden__" line="39" name="codecs" />
    </scope>
    <scope doc="Extract, format and print information about Python stack traces." ilk="blob" lang="Python3" name="traceback">
      <variable citdl="list" line="6" name="__all__" />
      <scope doc="Extract the raw traceback from the current stack frame." ilk="function" line="308" lineend="340" name="extract_stack" returns="list" signature="extract_stack(f=None, limit=None)">
        <variable citdl="f.f_code" line="329" name="co" />
        <variable citdl="co.co_name" line="331" name="name" />
        <variable citdl="f.f_back" ilk="argument" name="f" />
        <variable citdl="list" line="325" name="list" />
        <variable citdl="int" line="326" name="n" />
        <variable citdl="sys.tracebacklimit" ilk="argument" name="limit" />
        <variable citdl="f.f_lineno" line="328" name="lineno" />
        <variable citdl="line.strip()" line="333" name="line" />
        <variable citdl="co.co_filename" line="330" name="filename" />
      </scope>
      <scope doc="Return list of up to limit pre-processed entries from traceback." ilk="function" line="77" lineend="106" name="extract_tb" returns="list" signature="extract_tb(tb, limit=None)">
        <variable citdl="f.f_code" line="96" name="co" />
        <variable citdl="co.co_name" line="98" name="name" />
        <variable citdl="tb.tb_frame" line="94" name="f" />
        <variable citdl="list" line="91" name="list" />
        <variable citdl="int" line="92" name="n" />
        <variable citdl="sys.tracebacklimit" ilk="argument" name="limit" />
        <variable citdl="tb.tb_lineno" line="95" name="lineno" />
        <variable citdl="linecache.getline()" line="100" name="line" />
        <variable citdl="co.co_filename" line="97" name="filename" />
        <variable citdl="tb.tb_next" ilk="argument" name="tb" />
      </scope>
      <scope doc="Like print_exc() but return a string." ilk="function" line="264" lineend="271" name="format_exc" returns="str.join()" signature="format_exc(limit=None, chain=True)">
        <variable line="271" name="etype" />
        <variable ilk="argument" name="limit" />
        <variable citdl="True" ilk="argument" name="chain" />
      </scope>
      <scope doc="Format a stack trace and the exception information." ilk="function" line="166" lineend="188" name="format_exception" returns="list" signature="format_exception(etype, value, tb, limit=None, chain=True)">
        <variable citdl="True" ilk="argument" name="chain" />
        <variable citdl="list" line="175" name="list" />
        <variable ilk="argument" name="value" />
        <variable ilk="argument" name="limit" />
        <variable ilk="argument" name="etype" />
        <variable citdl="list" line="177" name="values" />
        <variable ilk="argument" name="tb" />
      </scope>
      <scope doc="Format the exception part of a traceback." ilk="function" line="190" lineend="236" name="format_exception_only" returns="list" signature="format_exception_only(etype, value)">
        <variable line="229" name="caretspace" />
        <variable citdl="list" line="220" name="lines" />
        <variable ilk="argument" name="value" />
        <variable citdl="value.filename" line="221" name="filename" />
        <variable citdl="value.msg" line="234" name="msg" />
        <variable citdl="value.text" line="224" name="badline" />
        <variable citdl="str" line="222" name="lineno" />
        <variable citdl="value.offset" line="225" name="offset" />
        <variable ilk="argument" name="etype" />
        <variable citdl="etype.__module__" line="212" name="smod" />
        <variable citdl="etype.__name__" line="211" name="stype" />
      </scope>
      <scope doc="Format a list of traceback entry tuples for printing." ilk="function" line="26" lineend="42" name="format_list" returns="list" signature="format_list(extracted_list)">
        <variable citdl="str" line="38" name="item" />
        <variable citdl="list" line="36" name="list" />
        <variable ilk="argument" name="extracted_list" />
      </scope>
      <scope doc="Shorthand for &apos;format_list(extract_stack(f, limit))&apos;." ilk="function" line="299" lineend="306" name="format_stack" returns="format_list()" signature="format_stack(f=None, limit=None)">
        <variable ilk="argument" name="limit" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="A shorthand for &apos;format_list(extract_stack(f, limit))." ilk="function" line="73" lineend="75" name="format_tb" returns="format_list()" signature="format_tb(tb, limit=None)">
        <variable ilk="argument" name="limit" />
        <variable ilk="argument" name="tb" />
      </scope>
      <import module="linecache" />
      <scope doc="Shorthand for &apos;print_exception(*sys.exc_info(), limit, file)&apos;." ilk="function" line="253" lineend="261" name="print_exc" signature="print_exc(limit=None, file=None, chain=True)">
        <variable line="261" name="etype" />
        <variable ilk="argument" name="limit" />
        <variable citdl="True" ilk="argument" name="chain" />
        <variable citdl="sys.stderr" ilk="argument" name="file" />
      </scope>
      <scope doc="Print exception up to &apos;limit&apos; stack trace entries from &apos;tb&apos; to &apos;file&apos;." ilk="function" line="138" lineend="164" name="print_exception" signature="print_exception(etype, value, tb, limit=None, file=None, chain=True)">
        <variable citdl="True" ilk="argument" name="chain" />
        <variable citdl="format_exception_only()" line="162" name="lines" />
        <variable ilk="argument" name="value" />
        <variable ilk="argument" name="limit" />
        <variable citdl="sys.stderr" ilk="argument" name="file" />
        <variable ilk="argument" name="etype" />
        <variable citdl="list" line="152" name="values" />
        <variable ilk="argument" name="tb" />
      </scope>
      <scope doc="This is a shorthand for &apos;print_exception(sys.last_type, sys.last_value, sys.last_traceback, limit, file)&apos;." ilk="function" line="274" lineend="282" name="print_last" signature="print_last(limit=None, file=None, chain=True)">
        <variable ilk="argument" name="limit" />
        <variable citdl="True" ilk="argument" name="chain" />
        <variable citdl="sys.stderr" ilk="argument" name="file" />
      </scope>
      <scope doc="Print the list of tuples as returned by extract_tb() or extract_stack() as a formatted stack trace to the given file." ilk="function" line="15" lineend="24" name="print_list" signature="print_list(extracted_list, file=None)">
        <variable ilk="argument" name="extracted_list" />
        <variable citdl="sys.stderr" ilk="argument" name="file" />
      </scope>
      <scope doc="Print a stack trace from its invocation point." ilk="function" line="285" lineend="297" name="print_stack" signature="print_stack(f=None, limit=None, file=None)">
        <variable ilk="argument" name="limit" />
        <variable ilk="argument" name="file" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="Print up to &apos;limit&apos; stack trace entries from the traceback &apos;tb&apos;." ilk="function" line="45" lineend="71" name="print_tb" signature="print_tb(tb, limit=None, file=None)">
        <variable citdl="f.f_code" line="62" name="co" />
        <variable citdl="co.co_name" line="64" name="name" />
        <variable citdl="tb.tb_frame" line="60" name="f" />
        <variable citdl="int" line="58" name="n" />
        <variable citdl="sys.tracebacklimit" ilk="argument" name="limit" />
        <variable citdl="tb.tb_lineno" line="61" name="lineno" />
        <variable citdl="sys.stderr" ilk="argument" name="file" />
        <variable citdl="linecache.getline()" line="68" name="line" />
        <variable citdl="co.co_filename" line="63" name="filename" />
        <variable citdl="tb.tb_next" ilk="argument" name="tb" />
      </scope>
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="246" lineend="250" name="_some_str" returns="str" signature="_some_str(value)">
        <variable ilk="argument" name="value" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="117" lineend="135" name="_iter_chain" signature="_iter_chain(exc, custom_tb=None, seen=None)">
        <variable ilk="argument" name="exc" />
        <variable ilk="argument" name="custom_tb" />
        <variable citdl="set()" ilk="argument" name="seen" />
        <variable citdl="list" line="121" name="its" />
        <variable citdl="exc.__cause__" line="122" name="cause" />
        <variable citdl="exc.__context__" line="127" name="context" />
      </scope>
      <variable attributes="protected __hidden__" citdl="str" line="109" name="_cause_message" />
      <scope attributes="protected __hidden__" ilk="function" line="11" lineend="12" name="_print" signature="_print(file, str=&apos;&apos;, terminator=&apos;\n&apos;)">
        <variable ilk="argument" name="file" />
        <variable citdl="str" ilk="argument" name="str" />
        <variable citdl="str" ilk="argument" name="terminator" />
      </scope>
      <variable attributes="protected __hidden__" citdl="str" line="113" name="_context_message" />
      <scope attributes="protected __hidden__" ilk="function" line="238" lineend="244" name="_format_final_exc_line" returns="tuple" signature="_format_final_exc_line(etype, value)">
        <variable ilk="argument" name="etype" />
        <variable ilk="argument" name="value" />
        <variable citdl="_some_str()" line="239" name="valuestr" />
        <variable citdl="str" line="241" name="line" />
      </scope>
    </scope>
    <scope doc="robotparser.py  Copyright (C) 2000  Bastian Kleineidam" ilk="blob" lang="Python3" name="urllib.robotparser">
      <scope classrefs="object" doc="An entry has one or more user-agents and zero or more rulelines" ilk="class" line="166" lineend="200" name="Entry">
        <variable attributes="__instancevar__" citdl="list" line="169" name="useragents" />
        <scope ilk="function" line="172" lineend="178" name="__str__" returns="str.join()" signature="__str__()">
          <variable citdl="Entry" ilk="argument" name="self" />
          <variable citdl="list" line="173" name="ret" />
        </scope>
        <scope doc="check if this entry applies to the specified agent" ilk="function" line="180" lineend="191" name="applies_to" returns="bool" signature="applies_to(useragent)">
          <variable citdl="Entry" ilk="argument" name="self" />
          <variable ilk="argument" name="useragent" />
          <variable citdl="agent.lower()" line="188" name="agent" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="170" name="rulelines" />
        <scope attributes="__ctor__" ilk="function" line="168" lineend="170" name="__init__" signature="Entry()">
          <variable citdl="Entry" ilk="argument" name="self" />
        </scope>
        <scope doc="Preconditions: - our agent applies to this entry - filename is URL decoded" ilk="function" line="193" lineend="200" name="allowance" returns="line.allowance" signature="allowance(filename)">
          <variable citdl="Entry" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
        </scope>
      </scope>
      <scope classrefs="object" doc="This class provides a set of methods to read, parse and answer questions about a single robots.txt file." ilk="class" line="17" lineend="146" name="RobotFileParser">
        <scope doc="using the parsed robots.txt decide if useragent can fetch url" ilk="function" line="124" lineend="143" name="can_fetch" returns="self.default_entry.allowance()" signature="can_fetch(useragent, url)">
          <variable citdl="RobotFileParser" ilk="argument" name="self" />
          <variable ilk="argument" name="useragent" />
          <variable citdl="urllib.parse.quote()" ilk="argument" name="url" />
        </scope>
        <variable attributes="__instancevar__" line="50" name="url" />
        <scope ilk="function" line="145" lineend="146" name="__str__" returns="str.join()" signature="__str__()">
          <variable citdl="RobotFileParser" ilk="argument" name="self" />
        </scope>
        <scope doc="Returns the time the robots.txt file was last fetched." ilk="function" line="31" lineend="38" name="mtime" returns="int" signature="mtime()">
          <variable citdl="RobotFileParser" ilk="argument" name="self" />
        </scope>
        <scope doc="Sets the time the robots.txt file was last fetched to the current time." ilk="function" line="40" lineend="46" name="modified" signature="modified()">
          <import line="45" module="time" />
          <variable citdl="RobotFileParser" ilk="argument" name="self" />
        </scope>
        <scope doc="Parse the input lines from a robots.txt file." ilk="function" line="73" lineend="121" name="parse" signature="parse(lines)">
          <variable citdl="RobotFileParser" ilk="argument" name="self" />
          <variable ilk="argument" name="lines" />
          <variable citdl="int" line="83" name="state" />
          <variable citdl="Entry()" line="84" name="entry" />
          <variable citdl="line.find()" line="96" name="i" />
          <variable citdl="line.strip()" line="98" name="line" />
        </scope>
        <scope doc="Reads the robots.txt URL and feeds it to the parser." ilk="function" line="53" lineend="64" name="read" signature="read()">
          <variable citdl="RobotFileParser" ilk="argument" name="self" />
          <variable citdl="urllib.request.urlopen()" line="56" name="f" />
          <variable citdl="f.read()" line="63" name="raw" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="26" name="disallow_all" />
        <scope doc="Sets the URL referring to a robots.txt file." ilk="function" line="48" lineend="51" name="set_url" signature="set_url(url)">
          <variable citdl="RobotFileParser" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="29" name="last_checked" />
        <scope attributes="protected" ilk="function" line="66" lineend="71" name="_add_entry" signature="_add_entry(entry)">
          <variable citdl="RobotFileParser" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="24" name="entries" />
        <variable attributes="__instancevar__" line="25" name="default_entry" />
        <variable attributes="__instancevar__" citdl="False" line="27" name="allow_all" />
        <scope attributes="__ctor__" ilk="function" line="23" lineend="29" name="__init__" signature="RobotFileParser(url=&apos;&apos;)">
          <variable citdl="RobotFileParser" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="url" />
        </scope>
      </scope>
      <scope classrefs="object" doc="A rule line is a single &quot;Allow:&quot; (allowance==True) or &quot;Disallow:&quot; (allowance==False) followed by a path." ilk="class" line="149" lineend="163" name="RuleLine">
        <variable attributes="__instancevar__" citdl="urllib.parse.quote()" line="156" name="path" />
        <scope ilk="function" line="162" lineend="163" name="__str__" returns="str" signature="__str__()">
          <variable citdl="RuleLine" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="159" lineend="160" name="applies_to" returns="bool" signature="applies_to(filename)">
          <variable citdl="RuleLine" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="152" lineend="157" name="__init__" signature="RuleLine(path, allowance)">
          <variable citdl="RuleLine" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable citdl="True" ilk="argument" name="allowance" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="157" name="allowance" />
      </scope>
      <variable citdl="list" line="15" name="__all__" />
      <import module="urllib" />
    </scope>
    <scope doc="# Module providing various facilities to other parts of the package # # multiprocessing/util.py" ilk="blob" lang="Python3" name="multiprocessing.util">
      <variable citdl="int" line="30" name="DEBUG" />
      <variable citdl="str" line="35" name="DEFAULT_LOGGING_FORMAT" />
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs" ilk="class" line="144" lineend="214" name="Finalize">
        <variable attributes="protected __instancevar__" line="156" name="_callback" />
        <scope doc="Return whether this finalizer is still waiting to invoke callback" ilk="function" line="191" lineend="195" name="still_active" returns="bool" signature="still_active()">
          <variable citdl="Finalize" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="tuple" line="159" name="_key" />
        <variable attributes="protected __instancevar__" citdl="tuple" line="157" name="_args" />
        <variable attributes="protected __instancevar__" citdl="weakref.ref()" line="152" name="_weakref" />
        <scope doc="Cancel finalization of the object" ilk="function" line="179" lineend="189" name="cancel" signature="cancel()">
          <variable citdl="Finalize" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="197" lineend="214" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Finalize" ilk="argument" name="self" />
          <variable citdl="_weakref()" line="199" name="obj" />
          <variable citdl="getattr()" line="206" name="x" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="158" name="_kwargs" />
        <scope doc="Run the callback unless it has already been called or cancelled" ilk="function" line="163" lineend="177" name="__call__" returns="_callback()" signature="__call__(wr=None)">
          <variable citdl="Finalize" ilk="argument" name="self" />
          <variable ilk="argument" name="wr" />
          <variable citdl="_callback()" line="174" name="res" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="148" lineend="161" name="__init__" signature="Finalize(obj, callback, args=(), kwargs=None, exitpriority=None)">
          <variable citdl="Finalize" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="callback" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable ilk="argument" name="kwargs" />
          <variable ilk="argument" name="exitpriority" />
        </scope>
      </scope>
      <scope classrefs="_local" ilk="class" line="287" lineend="291" name="ForkAwareLocal">
        <scope ilk="function" line="290" lineend="291" name="__reduce__" returns="tuple" signature="__reduce__()">
          <variable citdl="ForkAwareLocal" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="288" lineend="289" name="__init__" signature="ForkAwareLocal()">
          <variable citdl="ForkAwareLocal" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="280" lineend="285" name="ForkAwareThreadLock">
        <variable attributes="__instancevar__" citdl="self._lock.release" line="284" name="release" />
        <variable attributes="__instancevar__" citdl="self._lock.acquire" line="283" name="acquire" />
        <variable attributes="protected __instancevar__" citdl="threading.Lock()" line="282" name="_lock" />
        <scope attributes="__ctor__" ilk="function" line="281" lineend="285" name="__init__" signature="ForkAwareThreadLock()">
          <variable citdl="ForkAwareThreadLock" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="int" line="31" name="INFO" />
      <variable citdl="str" line="34" name="LOGGER_NAME" />
      <variable citdl="int" line="28" name="NOTSET" />
      <variable citdl="int" line="29" name="SUBDEBUG" />
      <variable citdl="int" line="32" name="SUBWARNING" />
      <variable citdl="list" line="17" name="__all__" />
      <scope doc="Return list of process objects corresponding to live child processes" ilk="function" name="active_children" signature="active_children()" />
      <import module="atexit" />
      <scope doc="Return process object representing the current process" ilk="function" name="current_process" signature="current_process()" />
      <scope ilk="function" line="44" lineend="46" name="debug" signature="debug(msg, *args)">
        <variable ilk="argument" name="msg" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <scope doc="Returns logger used by multiprocessing" ilk="function" line="56" lineend="83" name="get_logger" returns="logging.getLogger()" signature="get_logger()">
        <variable attributes="protected" citdl="logging.getLogger()" line="67" name="_logger" />
      </scope>
      <scope ilk="function" line="107" lineend="115" name="get_temp_dir" signature="get_temp_dir()">
        <variable citdl="tempfile.mkdtemp()" line="111" name="tempdir" />
      </scope>
      <scope ilk="function" line="48" lineend="50" name="info" signature="info(msg, *args)">
        <variable ilk="argument" name="msg" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <scope doc="Returns true if the process is shutting down" ilk="function" line="247" lineend="251" name="is_exiting" returns="bool" signature="is_exiting()" />
      <import module="itertools" />
      <scope doc="Turn on logging and add a handler which prints to stderr" ilk="function" line="85" lineend="101" name="log_to_stderr" signature="log_to_stderr(level=None)">
        <variable citdl="get_logger()" line="92" name="logger" />
        <variable citdl="logging.StreamHandler()" line="94" name="handler" />
        <variable citdl="logging.Formatter()" line="93" name="formatter" />
        <variable attributes="protected" citdl="True" line="100" name="_log_to_stderr" />
        <variable ilk="argument" name="level" />
      </scope>
      <scope ilk="function" line="133" lineend="134" name="register_after_fork" signature="register_after_fork(obj, func)">
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="func" />
      </scope>
      <scope ilk="function" line="40" lineend="42" name="sub_debug" signature="sub_debug(msg, *args)">
        <variable ilk="argument" name="msg" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <scope ilk="function" line="52" lineend="54" name="sub_warning" signature="sub_warning(msg, *args)">
        <variable ilk="argument" name="msg" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <import module="threading" />
      <import module="weakref" />
      <variable attributes="protected __hidden__" citdl="itertools.count()" line="122" name="_afterfork_counter" />
      <scope attributes="protected __hidden__" ilk="function" line="255" lineend="272" name="_exit_function" signature="_exit_function()" />
      <variable attributes="protected __hidden__" citdl="weakref.WeakValueDictionary()" line="121" name="_afterfork_registry" />
      <variable attributes="protected __hidden__" line="37" name="_logger" />
      <scope attributes="protected __hidden__" ilk="function" line="124" lineend="131" name="_run_after_forkers" signature="_run_after_forkers()">
        <variable citdl="list()" line="125" name="items" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="140" name="_finalizer_registry" />
      <variable attributes="protected __hidden__" citdl="False" line="38" name="_log_to_stderr" />
      <variable attributes="protected __hidden__" citdl="False" line="253" name="_exiting" />
      <scope attributes="protected __hidden__" doc="Run all finalizers whose exit priority is not None and at least minpriority" ilk="function" line="217" lineend="241" name="_run_finalizers" signature="_run_finalizers(minpriority=None)">
        <import line="237" module="traceback" />
        <variable ilk="argument" name="minpriority" />
        <variable line="225" name="f" />
        <variable citdl="list" line="229" name="items" />
      </scope>
      <variable attributes="protected __hidden__" citdl="itertools.count()" line="141" name="_finalizer_counter" />
    </scope>
    <scope doc="distutils.command.bdist  Implements the Distutils &apos;bdist&apos; command (create a built [binary]" ilk="blob" lang="Python3" name="distutils.command.bdist">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" name="__revision__" />
      <scope classrefs="Command" ilk="class" name="bdist" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <import module="os" />
      <scope doc="Print list of available formats (arguments to &quot;--format&quot; option)." ilk="function" name="show_formats" signature="show_formats()" />
    </scope>
    <scope doc="Built-in functions, exceptions, and other objects.  Noteworthy: None is the `nil&apos; object; Ellipsis represents `...&apos; in slices." ilk="blob" lang="Python3" name="*">
      <scope classrefs="Exception" doc="Base class for arithmetic errors." ilk="class" name="ArithmeticError" />
      <scope classrefs="Exception" doc="Assertion failed." ilk="class" name="AssertionError" />
      <scope classrefs="Exception" doc="Attribute not found." ilk="class" name="AttributeError" />
      <scope classrefs="object" doc="Common base class for all exceptions" ilk="class" name="BaseException" />
      <scope classrefs="Exception" doc="Buffer error." ilk="class" name="BufferError" />
      <scope classrefs="Warning" doc="Base class for warnings about bytes and buffer related problems, mostly related to conversion from str or comparing to str." ilk="class" name="BytesWarning" />
      <scope classrefs="Warning" doc="Base class for warnings about deprecated features." ilk="class" name="DeprecationWarning" />
      <scope classrefs="Exception" doc="Read beyond end of file." ilk="class" name="EOFError" />
      <variable citdl="ellipsis" name="Ellipsis" />
      <scope classrefs="Exception" doc="Base class for I/O related errors." ilk="class" name="EnvironmentError" />
      <scope classrefs="BaseException" doc="Common base class for all non-exit exceptions." ilk="class" name="Exception" />
      <variable citdl="bool" name="False" />
      <scope classrefs="ArithmeticError" doc="Floating point operation failed." ilk="class" name="FloatingPointError" />
      <scope classrefs="Warning" doc="Base class for warnings about constructs that will change semantically in the future." ilk="class" name="FutureWarning" />
      <scope classrefs="BaseException" doc="Request that a generator exit." ilk="class" name="GeneratorExit" />
      <scope classrefs="EnvironmentError" doc="I/O operation failed." ilk="class" name="IOError" />
      <scope classrefs="Exception" doc="Import can&apos;t find module, or can&apos;t find name in module." ilk="class" name="ImportError" />
      <scope classrefs="Warning" doc="Base class for warnings about probable mistakes in module imports" ilk="class" name="ImportWarning" />
      <scope classrefs="SyntaxError" doc="Improper indentation." ilk="class" name="IndentationError" />
      <scope classrefs="LookupError" doc="Sequence index out of range." ilk="class" name="IndexError" />
      <scope classrefs="LookupError" doc="Mapping key not found." ilk="class" name="KeyError" />
      <scope classrefs="BaseException" doc="Program interrupted by user." ilk="class" name="KeyboardInterrupt" />
      <scope classrefs="Exception" doc="Base class for lookup errors." ilk="class" name="LookupError" />
      <scope classrefs="Exception" doc="Out of memory." ilk="class" name="MemoryError" />
      <scope classrefs="Exception" doc="Name not found globally." ilk="class" name="NameError" />
      <variable citdl="NoneType" name="None" />
      <variable citdl="NotImplementedType" name="NotImplemented" />
      <scope classrefs="RuntimeError" doc="Method or function hasn&apos;t been implemented yet." ilk="class" name="NotImplementedError" />
      <scope classrefs="EnvironmentError" doc="OS system call failed." ilk="class" name="OSError" />
      <scope classrefs="ArithmeticError" doc="Result too large to be represented." ilk="class" name="OverflowError" />
      <scope classrefs="Warning" doc="Base class for warnings about features which will be deprecated in the future." ilk="class" name="PendingDeprecationWarning" />
      <scope classrefs="Exception" doc="Weak ref proxy used after referent went away." ilk="class" name="ReferenceError" />
      <scope classrefs="Exception" doc="Unspecified run-time error." ilk="class" name="RuntimeError" />
      <scope classrefs="Warning" doc="Base class for warnings about dubious runtime behavior." ilk="class" name="RuntimeWarning" />
      <scope classrefs="Exception" doc="Signal the end from iterator.__next__()." ilk="class" name="StopIteration" />
      <scope classrefs="Exception" doc="Invalid syntax." ilk="class" name="SyntaxError" />
      <scope classrefs="Warning" doc="Base class for warnings about dubious syntax." ilk="class" name="SyntaxWarning" />
      <scope classrefs="Exception" doc="Internal error in the Python interpreter.  Please report this to the Python maintainer, along with the traceback," ilk="class" name="SystemError" />
      <scope classrefs="BaseException" doc="Request to exit from the interpreter." ilk="class" name="SystemExit" />
      <scope classrefs="IndentationError" doc="Improper mixture of spaces and tabs." ilk="class" name="TabError" />
      <variable citdl="bool" name="True" />
      <scope classrefs="Exception" doc="Inappropriate argument type." ilk="class" name="TypeError" />
      <scope classrefs="NameError" doc="Local name referenced but not bound to a value." ilk="class" name="UnboundLocalError" />
      <scope classrefs="UnicodeError" doc="Unicode decoding error." ilk="class" name="UnicodeDecodeError" />
      <scope classrefs="UnicodeError" doc="Unicode encoding error." ilk="class" name="UnicodeEncodeError" />
      <scope classrefs="ValueError" doc="Unicode related error." ilk="class" name="UnicodeError" />
      <scope classrefs="UnicodeError" doc="Unicode translation error." ilk="class" name="UnicodeTranslateError" />
      <scope classrefs="Warning" doc="Base class for warnings about Unicode related problems, mostly related to conversion problems." ilk="class" name="UnicodeWarning" />
      <scope classrefs="Warning" doc="Base class for warnings generated by user code." ilk="class" name="UserWarning" />
      <scope classrefs="Exception" doc="Inappropriate argument value (of correct type)." ilk="class" name="ValueError" />
      <scope classrefs="Exception" doc="Base class for warning categories." ilk="class" name="Warning" />
      <scope classrefs="OSError" doc="MS-Windows OS system call failed." ilk="class" name="WindowsError" />
      <scope classrefs="ArithmeticError" doc="Second argument to a division or modulo operation was zero." ilk="class" name="ZeroDivisionError" />
      <scope doc="Internal helper function used by the class statement." ilk="function" name="__build_class__" signature="__build_class__(func, name, *bases, metaclass=None, **kwds) -&gt; class" />
      <scope doc="Import a module." ilk="function" name="__import__" returns="module" signature="__import__(name, globals={}, locals={}, fromlist=[], level=-1) -&gt; module" />
      <scope doc="Return the absolute value of the argument." ilk="function" name="abs" returns="int" signature="abs(number) -&gt; number" />
      <scope doc="Return True if bool(x) is True for all values x in the iterable." ilk="function" name="all" returns="bool" signature="all(iterable) -&gt; bool" />
      <scope doc="Return True if bool(x) is True for any x in the iterable." ilk="function" name="any" returns="bool" signature="any(iterable) -&gt; bool" />
      <scope doc="As repr(), return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by repr() using \x, \u or \U escapes." ilk="function" name="ascii" returns="str" signature="ascii(object) -&gt; string" />
      <scope doc="Return the binary representation of an integer or long integer." ilk="function" name="bin" returns="str" signature="bin(number) -&gt; string" />
      <scope classrefs="int" doc="bool(x) -&gt; bool  Returns True when the argument x is true, False otherwise." ilk="class" name="bool" />
      <scope classrefs="object" doc="bytearray(iterable_of_ints) -&gt; bytearray bytearray(string, encoding[, errors]) -&gt; bytearray bytearray(bytes_or_bytearray) -&gt; mutable copy of bytes_or_bytearray" ilk="class" name="bytearray" />
      <scope classrefs="object" doc="bytes(iterable_of_ints) -&gt; bytes bytes(string, encoding[, errors]) -&gt; bytes bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer" ilk="class" name="bytes" />
      <scope doc="Return a Unicode string of one character with ordinal i; 0 &lt;= i &lt;= 0x10ffff." ilk="function" name="chr" returns="unicode" signature="chr(i) -&gt; Unicode character" />
      <scope classrefs="object" doc="classmethod(function) -&gt; method  Convert a function to be a class method." ilk="class" name="classmethod" />
      <scope doc="Compile the source string (a Python module, statement or expression) into a code object that can be executed by exec() or eval()." ilk="function" name="compile" returns="code" signature="compile(source, filename, mode[, flags[, dont_inherit]]) -&gt; code object" />
      <scope classrefs="object" doc="complex(real[, imag]) -&gt; complex number  Create a complex number from a real part and an optional imaginary part." ilk="class" name="complex" />
      <variable citdl="_Printer" name="credits" />
      <scope doc="Delete a named attribute on an object; delattr(x, &apos;y&apos;) is equivalent to ``del x.y&apos;&apos;." ilk="function" name="delattr" signature="delattr(object, name)" />
      <scope classrefs="object" doc="dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object&apos;s     (key, value) pairs" ilk="class" name="dict" />
      <scope doc="If called without an argument, return the names in the current scope." ilk="function" name="dir" returns="list" signature="dir([object]) -&gt; list of strings" />
      <scope doc="Return the tuple ((x-x%y)/y, x%y)." ilk="function" name="divmod" signature="divmod(x, y) -&gt; (div, mod)" />
      <scope classrefs="object" doc="enumerate(iterable) -&gt; iterator for index, value of iterable  Return an enumerate object.  iterable must be another object that supports" ilk="class" name="enumerate" />
      <scope doc="Evaluate the source in the context of globals and locals." ilk="function" name="eval" signature="eval(source[, globals[, locals]]) -&gt; value" />
      <scope doc="Read and execute code from an object, which can be a string or a code object." ilk="function" name="exec" signature="exec(object[, globals[, locals]])" />
      <scope classrefs="object" doc="filter(function or None, iterable) --&gt; filter object  Return an iterator yielding those items of iterable for which function(item)" ilk="class" name="filter" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number  Convert a string or number to a floating point number, if possible." ilk="class" name="float" />
      <scope doc="Returns value.__format__(format_spec) format_spec defaults to &quot;&quot;" ilk="function" name="format" returns="str" signature="format(value[, format_spec]) -&gt; string" />
      <scope classrefs="object" doc="frozenset() -&gt; empty frozenset object frozenset(iterable) -&gt; frozenset object " ilk="class" name="frozenset" />
      <scope doc="Get a named attribute from an object; getattr(x, &apos;y&apos;) is equivalent to x.y." ilk="function" name="getattr" signature="getattr(object, name[, default]) -&gt; value" />
      <scope doc="Return the dictionary containing the current scope&apos;s global variables." ilk="function" name="globals" returns="dict" signature="globals() -&gt; dictionary" />
      <scope doc="Return whether the object has an attribute with the given name." ilk="function" name="hasattr" returns="bool" signature="hasattr(object, name) -&gt; bool" />
      <scope doc="Return a hash value for the object." ilk="function" name="hash" returns="int" signature="hash(object) -&gt; integer" />
      <variable citdl="_Helper" name="help" />
      <scope doc="Return the hexadecimal representation of an integer or long integer." ilk="function" name="hex" returns="str" signature="hex(number) -&gt; string" />
      <scope doc="Return the identity of an object." ilk="function" name="id" returns="int" signature="id(object) -&gt; integer" />
      <scope doc="Read a string from standard input." ilk="function" name="input" returns="str" signature="input([prompt]) -&gt; string" />
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer  Convert a string or number to an integer, if possible.  A floating" ilk="class" name="int" />
      <scope doc="Return whether an object is an instance of a class or of a subclass thereof." ilk="function" name="isinstance" returns="bool" signature="isinstance(object, class-or-type-or-tuple) -&gt; bool" />
      <scope doc="Return whether class C is a subclass (i.e., a derived class) of class B." ilk="function" name="issubclass" returns="bool" signature="issubclass(C, B) -&gt; bool" />
      <scope doc="Get an iterator from an object." ilk="function" name="iter" signature="iter(iterable) -&gt; iterator iter(callable, sentinel) -&gt; iterator" />
      <scope doc="Return the number of items of a sequence or mapping." ilk="function" name="len" returns="int" signature="len(object) -&gt; integer" />
      <scope classrefs="object" doc="list() -&gt; new empty list list(iterable) -&gt; new list initialized from iterable&apos;s items" ilk="class" name="list" />
      <scope doc="Update and return a dictionary containing the current scope&apos;s local variables." ilk="function" name="locals" returns="dict" signature="locals() -&gt; dictionary" />
      <scope classrefs="object" doc="map(func, *iterables) --&gt; map object  Make an iterator that computes the function using arguments from" ilk="class" name="map" />
      <scope doc="With a single iterable argument, return its largest item." ilk="function" name="max" signature="max(iterable[, key=func]) -&gt; value max(a, b, c, ...[, key=func]) -&gt; value" />
      <scope classrefs="object" doc="memoryview(object)  Create a new memoryview object which references the given object." ilk="class" name="memoryview" />
      <scope doc="With a single iterable argument, return its smallest item." ilk="function" name="min" signature="min(iterable[, key=func]) -&gt; value min(a, b, c, ...[, key=func]) -&gt; value" />
      <scope doc="Return the next item from the iterator." ilk="function" name="next" signature="next(iterator[, default])" />
      <scope doc="The most base type" ilk="class" name="object" />
      <scope doc="Return the octal representation of an integer or long integer." ilk="function" name="oct" returns="str" signature="oct(number) -&gt; string" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="open" />
      <scope doc="Return the integer ordinal of a one-character string." ilk="function" name="ord" returns="int" signature="ord(c) -&gt; integer" />
      <scope doc="With two arguments, equivalent to x**y." ilk="function" name="pow" returns="int" signature="pow(x, y[, z]) -&gt; number" />
      <scope doc="Prints the values to a stream, or to sys.stdout by default." ilk="function" name="print" signature="print(value, ..., sep=&apos; &apos;, end=&apos;\n&apos;, file=sys.stdout)" />
      <scope classrefs="object" doc="property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute  fget is a function to be used for getting an attribute value, and likewise" ilk="class" name="property" />
      <variable citdl="Quitter" name="quit" />
      <scope classrefs="object" doc="range([start,] stop[, step]) -&gt; range object  Returns an iterator that generates the numbers in the range on demand." ilk="class" name="range" />
      <scope doc="Return the canonical string representation of the object." ilk="function" name="repr" returns="str" signature="repr(object) -&gt; string" />
      <scope classrefs="object" doc="reversed(sequence) -&gt; reverse iterator over values of the sequence  Return a reverse iterator" ilk="class" name="reversed" />
      <scope doc="Round a number to a given precision in decimal digits (default 0 digits)." ilk="function" name="round" returns="int" signature="round(number[, ndigits]) -&gt; number" />
      <scope classrefs="object" doc="set() -&gt; new empty set object set(iterable) -&gt; new set object " ilk="class" name="set" />
      <scope doc="Set a named attribute on an object; setattr(x, &apos;y&apos;, v) is equivalent to ``x.y = v&apos;&apos;." ilk="function" name="setattr" signature="setattr(object, name, value)" />
      <scope classrefs="object" doc="slice([start,] stop[, step])  Create a slice object.  This is used for extended slicing (e.g. a[0:10:2])." ilk="class" name="slice" />
      <scope doc="sorted(iterable, key=None, reverse=False) --&gt; new sorted list" ilk="function" name="sorted" signature="sorted(iterable, key=None, reverse=False) --&gt; new sorted list" />
      <scope classrefs="object" doc="staticmethod(function) -&gt; method  Convert a function to be a static method." ilk="class" name="staticmethod" />
      <scope classrefs="object" doc="str(string[, encoding[, errors]]) -&gt; str  Create a new string object from the given encoded string." ilk="class" name="str" />
      <scope doc="Returns the sum of an iterable of numbers (NOT strings) plus the value of parameter &apos;start&apos; (which defaults to 0)." ilk="function" name="sum" signature="sum(iterable[, start]) -&gt; value" />
      <scope classrefs="object" doc="super() -&gt; same as super(__class__, &lt;first argument&gt;) super(type) -&gt; unbound super object super(type, obj) -&gt; bound super object; requires isinstance(obj, type)" ilk="class" name="super" />
      <scope classrefs="object" doc="tuple() -&gt; empty tuple tuple(iterable) -&gt; tuple initialized from iterable&apos;s items " ilk="class" name="tuple" />
      <scope classrefs="object" doc="type(object) -&gt; the object&apos;s type type(name, bases, dict) -&gt; a new type" ilk="class" name="type" />
      <scope doc="Without arguments, equivalent to locals()." ilk="function" name="vars" returns="dict" signature="vars([object]) -&gt; dictionary" />
      <scope classrefs="object" doc="zip(iter1 [,iter2 [...]]) --&gt; zip object  Return a zip object whose .__next__() method returns a tuple where" ilk="class" name="zip" />
    </scope>
    <scope doc="distutils.command.install_lib  Implements the Distutils &apos;install_lib&apos; command" ilk="blob" lang="Python3" name="distutils.command.install_lib">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <variable citdl="str" name="PYTHON_SOURCE_EXTENSION" />
      <variable citdl="str" name="__revision__" />
      <scope classrefs="Command" ilk="class" name="install_lib" />
      <import module="os" />
      <import module="sys" />
    </scope>
    <scope doc="High performance data structures. - deque:        ordered collection accessible from endpoints only - defaultdict:  dict subclass with a default value factory" ilk="blob" lang="Python3" name="_collections">
      <scope classrefs="dict" doc="defaultdict(default_factory) --&gt; dict with default factory  The default factory is called without arguments to produce" ilk="class" name="defaultdict" />
      <scope classrefs="object" doc="deque(iterable[, maxlen]) --&gt; deque object  Build an ordered collection accessible from endpoints only." ilk="class" name="deque" />
    </scope>
    <scope doc="Fixer for __metaclass__ = X -&gt; (metaclass=X) methods.  The various forms of classef (inherits nothing, inherits once, inherints" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_metaclass">
      <scope classrefs="BaseFix" ilk="class" line="145" lineend="227" name="FixMetaclass">
        <variable citdl="str" line="147" name="PATTERN" />
        <scope ilk="function" line="151" lineend="227" name="transform" signature="transform(node, results)">
          <variable citdl="FixMetaclass" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="stmt" line="158" name="last_metaclass" />
          <variable line="163" name="text_type" />
          <variable citdl="Node()" line="170" name="arglist" />
          <variable line="173" name="parent" />
          <variable line="192" name="meta_txt" />
          <variable citdl="meta_txt.prefix" line="194" name="orig_meta_prefix" />
          <variable line="203" name="expr_stmt" />
          <variable citdl="Leaf()" line="216" name="pass_leaf" />
        </scope>
      </scope>
      <scope classrefs="Base" doc="Concrete implementation for leaf nodes." ilk="class" name="Leaf" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes." ilk="class" name="Node" />
      <scope ilk="function" line="100" lineend="120" name="find_metas" signature="find_metas(cls_node)">
        <variable line="114" name="left_node" />
        <variable ilk="argument" name="cls_node" />
        <variable line="111" name="expr_node" />
      </scope>
      <import module="fixer_base" />
      <scope doc="If an INDENT is followed by a thing with a prefix then nuke the prefix Otherwise we get in trouble when removing __metaclass__ at suite start" ilk="function" line="123" lineend="142" name="fixup_indent" signature="fixup_indent(suite)">
        <variable citdl="kids.pop()" line="130" name="node" />
        <variable ilk="argument" name="suite" />
        <variable line="127" name="kids" />
      </scope>
      <scope doc="one-line classes don&apos;t get a suite in the parse tree so we add one to normalize the tree" ilk="function" line="45" lineend="68" name="fixup_parse_tree" signature="fixup_parse_tree(cls_node)">
        <variable citdl="Node()" line="68" name="node" />
        <variable citdl="Node()" line="62" name="suite" />
        <variable ilk="argument" name="cls_node" />
        <variable line="64" name="move_node" />
      </scope>
      <scope doc="if there is a semi-colon all the parts count as part of the same simple_stmt." ilk="function" line="71" lineend="92" name="fixup_simple_stmt" signature="fixup_simple_stmt(parent, i, stmt_node)">
        <variable citdl="Node()" line="83" name="new_expr" />
        <variable ilk="argument" name="parent" />
        <variable ilk="argument" name="i" />
        <variable citdl="Node()" line="84" name="new_stmt" />
        <variable line="91" name="old_leaf1" />
        <variable ilk="argument" name="stmt_node" />
        <variable line="90" name="new_leaf1" />
        <variable line="86" name="move_node" />
      </scope>
      <scope doc="we have to check the cls_node without changing it." ilk="function" line="26" lineend="42" name="has_metaclass" returns="has_metaclass()" signature="has_metaclass(parent)">
        <variable line="38" name="left_side" />
        <variable line="36" name="expr_node" />
        <variable ilk="argument" name="parent" />
      </scope>
      <scope ilk="function" line="95" lineend="97" name="remove_trailing_newline" signature="remove_trailing_newline(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="distutils.util  Miscellaneous utility functions -- anything that doesn&apos;t fit into" ilk="blob" lang="Python3" name="distutils.util">
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="object" doc="Mixin class for commands that run 2to3. To configure 2to3, setup scripts may either change the class variables, or inherit from individual commands" ilk="class" line="636" lineend="653" name="Mixin2to3">
        <scope ilk="function" line="652" lineend="653" name="run_2to3" returns="Mixin2to3.run_2to3()" signature="run_2to3(files)">
          <variable citdl="Mixin2to3" ilk="argument" name="self" />
          <variable ilk="argument" name="files" />
        </scope>
        <variable line="650" name="explicit" />
        <variable line="647" name="options" />
        <variable line="644" name="fixer_names" />
      </scope>
      <variable citdl="str" line="7" name="__revision__" />
      <scope doc="Byte-compile a collection of Python source files to either .pyc or .pyo files in the same directory." ilk="function" line="424" lineend="562" name="byte_compile" signature="byte_compile(py_files, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None)">
        <variable citdl="__debug__" line="544" name="cfile" />
        <variable ilk="argument" name="py_files" />
        <variable citdl="file" line="545" name="dfile" />
        <variable citdl="int" ilk="argument" name="force" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable citdl="open()" line="486" name="script" />
        <variable citdl="list" line="519" name="cmd" />
        <variable citdl="__debug__" ilk="argument" name="direct" />
        <variable citdl="mktemp()" line="482" name="script_name" />
        <variable citdl="os.path.basename()" line="554" name="cfile_base" />
        <variable ilk="argument" name="prefix" />
        <variable line="482" name="script_fd" />
        <variable citdl="int" ilk="argument" name="optimize" />
        <variable ilk="argument" name="base_dir" />
      </scope>
      <scope doc="Return &apos;pathname&apos; with &apos;new_root&apos; prepended." ilk="function" line="213" lineend="247" name="change_root" returns="os.path.join()" signature="change_root(new_root, pathname)">
        <variable citdl="list" line="228" name="path" />
        <variable citdl="pathname.split()" line="242" name="elements" />
        <variable citdl="str" ilk="argument" name="pathname" />
        <variable ilk="argument" name="new_root" />
      </scope>
      <scope doc="Ensure that &apos;os.environ&apos; has all the environment variables we guarantee that users can use in config files, command- line options, etc." ilk="function" line="251" lineend="270" name="check_environ" signature="check_environ()">
        <variable attributes="protected" citdl="int" line="270" name="_environ_checked" />
      </scope>
      <scope doc="Return &apos;pathname&apos; as a name that will work on the native filesystem, i.e." ilk="function" line="185" lineend="208" name="convert_path" returns="os.curdir" signature="convert_path(pathname)">
        <variable citdl="pathname.split()" line="203" name="paths" />
        <variable ilk="argument" name="pathname" />
      </scope>
      <scope doc="Recursively copy a directory, only copying new and changed files, running run_2to3 over all newly copied Python modules afterward." ilk="function" line="603" lineend="634" name="copydir_run_2to3" returns="list" signature="copydir_run_2to3(src, dest, template=None, fixer_names=None, options=None, explicit=None)">
        <variable ilk="argument" name="src" />
        <variable citdl="os.path.join()" line="628" name="outname" />
        <variable ilk="argument" name="dest" />
        <variable citdl="copy_file()" line="630" name="res" />
        <variable ilk="argument" name="explicit" />
        <variable ilk="argument" name="fixer_names" />
        <variable citdl="FileList()" line="613" name="filelist" />
        <variable ilk="argument" name="template" />
        <variable citdl="line.strip()" line="623" name="line" />
        <variable citdl="list" line="626" name="copied" />
        <variable ilk="argument" name="options" />
        <variable citdl="os.getcwd()" line="614" name="curdir" />
      </scope>
      <scope doc="Perform some action that affects the outside world (eg." ilk="function" line="389" lineend="405" name="execute" signature="execute(func, args, msg=None, verbose=0, dry_run=0)">
        <variable citdl="str" ilk="argument" name="msg" />
        <variable ilk="argument" name="args" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable ilk="argument" name="func" />
        <variable citdl="int" ilk="argument" name="dry_run" />
      </scope>
      <scope doc="Return a string that identifies the current platform." ilk="function" line="16" lineend="180" name="get_platform" returns="tuple" signature="get_platform()">
        <variable line="47" name="look" />
        <variable citdl="open()" line="112" name="f" />
        <variable citdl="sys.version.find()" line="43" name="i" />
        <variable citdl="cfgvars.get()" line="99" name="macver" />
        <variable citdl="sys.version.find()" line="46" name="j" />
        <variable citdl="re.search()" line="86" name="m" />
        <variable citdl="str" line="65" name="osname" />
        <variable citdl="str" line="66" name="machine" />
        <variable citdl="str" line="42" name="prefix" />
        <variable citdl="re.compile()" line="85" name="rel_re" />
        <variable line="143" name="cflags" />
        <variable citdl="m.group()" line="77" name="release" />
        <variable citdl="str.join()" line="107" name="macrelease" />
        <variable citdl="tuple()" line="145" name="archs" />
        <variable citdl="get_config_vars()" line="97" name="cfgvars" />
      </scope>
      <scope doc="Generate a useful error message from an EnvironmentError (IOError or OSError) exception object." ilk="function" line="298" lineend="317" name="grok_environment_error" returns="tuple" signature="grok_environment_error(exc, prefix=&apos;error: &apos;)">
        <variable citdl="prefix" line="309" name="error" />
      </scope>
      <import module="log" />
      <scope doc="Return true if &apos;source&apos; exists and is more recently modified than &apos;target&apos;, or if &apos;source&apos; exists and &apos;target&apos; doesn&apos;t." ilk="function" name="newer" signature="newer(source, target)" />
      <import module="os" />
      <import module="re" />
      <scope doc="Return a version of the string escaped for inclusion in an RFC-822 header, by ensuring there are 8 spaces space after each newline." ilk="function" line="566" lineend="572" name="rfc822_escape" returns="sep.join()" signature="rfc822_escape(header)">
        <variable ilk="argument" name="header" />
        <variable citdl="header.split()" line="570" name="lines" />
        <variable citdl="str" line="571" name="sep" />
      </scope>
      <scope doc="Invoke 2to3 on a list of Python files." ilk="function" line="576" lineend="601" name="run_2to3" signature="run_2to3(files, fixer_names=None, options=None, explicit=None)">
        <variable ilk="argument" name="files" />
        <variable ilk="argument" name="explicit" />
        <scope classrefs="RefactoringTool" ilk="class" line="588" lineend="596" name="DistutilsRefactoringTool">
          <scope ilk="function" line="589" lineend="590" name="log_error" signature="log_error(msg, *args, **kw)">
            <variable citdl="DistutilsRefactoringTool" ilk="argument" name="self" />
            <variable ilk="argument" name="msg" />
            <variable attributes="varargs" ilk="argument" name="args" />
            <variable attributes="kwargs" ilk="argument" name="kw" />
          </scope>
          <scope ilk="function" line="592" lineend="593" name="log_message" signature="log_message(msg, *args)">
            <variable citdl="DistutilsRefactoringTool" ilk="argument" name="self" />
            <variable ilk="argument" name="msg" />
            <variable attributes="varargs" ilk="argument" name="args" />
          </scope>
          <scope ilk="function" line="595" lineend="596" name="log_debug" signature="log_debug(msg, *args)">
            <variable citdl="DistutilsRefactoringTool" ilk="argument" name="self" />
            <variable ilk="argument" name="msg" />
            <variable attributes="varargs" ilk="argument" name="args" />
          </scope>
        </scope>
        <variable citdl="get_fixers_from_package()" ilk="argument" name="fixer_names" />
        <variable citdl="DistutilsRefactoringTool" line="600" name="r" />
        <variable ilk="argument" name="options" />
      </scope>
      <scope doc="Run another program, specified as a command list &apos;cmd&apos;, in a new process." ilk="function" name="spawn" signature="spawn(cmd, search_path=1, verbose=0, dry_run=0)" />
      <scope doc="Split a string up according to Unix shell-like rules for quotes and backslashes." ilk="function" line="328" lineend="384" name="split_quoted" returns="list" signature="split_quoted(s)">
        <variable citdl="m.end()" line="350" name="end" />
        <variable citdl="list" ilk="argument" name="s" />
        <variable citdl="_dquote_re.match()" line="349" name="m" />
        <variable citdl="int" line="346" name="pos" />
        <variable citdl="list" line="345" name="words" />
      </scope>
      <import module="string" />
      <scope doc="Convert a string representation of truth to true (1) or false (0)." ilk="function" line="408" lineend="421" name="strtobool" returns="int" signature="strtobool(val)">
        <variable citdl="val.lower()" ilk="argument" name="val" />
      </scope>
      <scope doc="Perform shell/Perl-style variable substitution on &apos;string&apos;." ilk="function" line="273" lineend="293" name="subst_vars" returns="re.sub()" signature="subst_vars(s, local_vars)">
        <scope attributes="protected" ilk="function" line="283" lineend="288" name="_subst" returns="str()" signature="_subst(match, local_vars=local_vars)">
          <variable ilk="argument" name="match" />
          <variable ilk="argument" name="local_vars" />
          <variable citdl="match.group()" line="284" name="var_name" />
        </scope>
        <variable ilk="argument" name="s" />
        <variable ilk="argument" name="local_vars" />
      </scope>
      <import module="sys" />
      <variable attributes="protected __hidden__" citdl="int" line="250" name="_environ_checked" />
      <scope attributes="protected __hidden__" ilk="function" line="322" lineend="326" name="_init_regex" signature="_init_regex()">
        <variable attributes="protected" citdl="re.compile()" line="324" name="_wordchars_re" />
        <variable attributes="protected" citdl="re.compile()" line="325" name="_squote_re" />
        <variable attributes="protected" citdl="re.compile()" line="326" name="_dquote_re" />
      </scope>
      <variable attributes="protected __hidden__" line="321" name="_wordchars_re" />
    </scope>
    <scope doc="This module defines an object type which can efficiently represent an array of basic values: characters, integers, floating point numbers.  Arrays are sequence types and behave very much like lists," ilk="blob" lang="Python3" name="array">
      <scope classrefs="object" doc="array(typecode [, initializer]) -&gt; array  Return a new array whose items are restricted by typecode, and" ilk="class" name="ArrayType" />
      <scope classrefs="object" doc="array(typecode [, initializer]) -&gt; array  Return a new array whose items are restricted by typecode, and" ilk="class" name="array" />
      <variable citdl="str" name="typecodes" />
    </scope>
    <scope doc="Class representing image/* type MIME documents." ilk="blob" lang="Python3" name="email.mime.image">
      <scope classrefs="MIMENonMultipart" doc="Class for generating image/* type MIME documents." ilk="class" line="16" lineend="46" name="MIMEImage">
        <scope attributes="__ctor__" doc="Create an image/* type MIME document." ilk="function" line="19" lineend="46" name="__init__" signature="MIMEImage(_imagedata, _subtype=None, _encoder=encoders.encode_base64, **_params)">
          <variable citdl="MIMEImage" ilk="argument" name="self" />
          <variable ilk="argument" name="_imagedata" />
          <variable citdl="imghdr.what()" ilk="argument" name="_subtype" />
          <variable citdl="encoders.encode_base64" ilk="argument" name="_encoder" />
          <variable attributes="kwargs" ilk="argument" name="_params" />
        </scope>
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME multipart/* type messages." ilk="class" name="MIMENonMultipart" />
      <variable citdl="list" line="7" name="__all__" />
      <import module="encoders" />
      <import module="imghdr" />
    </scope>
    <scope doc="Common operations on Posix pathnames.  Instead of importing this module directly, import os and refer to" ilk="blob" lang="Python3" name="posixpath">
      <variable citdl="list" line="19" name="__all__" />
      <scope doc="Return an absolute path." ilk="function" line="361" lineend="369" name="abspath" returns="normpath()" signature="abspath(path)">
        <variable citdl="join()" ilk="argument" name="path" />
        <variable citdl="os.getcwdb()" line="365" name="cwd" />
      </scope>
      <variable citdl="NoneType" line="35" name="altsep" />
      <scope doc="Returns the final component of a pathname" ilk="function" line="126" lineend="130" name="basename" returns="list" signature="basename(p)">
        <variable citdl="p.rfind()" line="129" name="i" />
        <variable ilk="argument" name="p" />
        <variable citdl="_get_sep()" line="128" name="sep" />
      </scope>
      <scope doc="Given a list of pathnames, returns the longest common leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <variable citdl="str" line="29" name="curdir" />
      <variable citdl="str" line="34" name="defpath" />
      <variable citdl="str" line="36" name="devnull" />
      <scope doc="Returns the directory component of a pathname" ilk="function" line="135" lineend="142" name="dirname" returns="list" signature="dirname(p)">
        <variable citdl="p.rfind()" line="138" name="i" />
        <variable ilk="argument" name="p" />
        <variable citdl="head.rstrip()" line="139" name="head" />
        <variable citdl="_get_sep()" line="137" name="sep" />
      </scope>
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Expand ~ and ~user constructions." ilk="function" line="229" lineend="264" name="expanduser" returns="pwent.pw_dir" signature="expanduser(path)">
        <variable citdl="list" line="250" name="name" />
        <variable citdl="_get_sep()" line="238" name="sep" />
        <variable citdl="path.find()" line="239" name="i" />
        <variable citdl="pwd.getpwnam()" line="254" name="pwent" />
        <variable citdl="userhome.encode()" line="245" name="userhome" />
        <variable citdl="str" line="233" name="tilde" />
        <variable ilk="argument" name="path" />
        <variable citdl="str" line="260" name="root" />
      </scope>
      <scope doc="Expand shell variables of form $var and ${var}." ilk="function" line="274" lineend="317" name="expandvars" returns="list" signature="expandvars(path)">
        <variable citdl="_varprogb.search" line="284" name="search" />
        <variable citdl="str" line="286" name="end" />
        <variable citdl="m.group()" line="302" name="name" />
        <variable citdl="int" line="296" name="i" />
        <variable citdl="search()" line="298" name="m" />
        <variable attributes="protected" citdl="re.compile()" line="292" name="_varprog" />
        <variable citdl="value.encode()" line="309" name="value" />
        <variable citdl="str" line="285" name="start" />
        <variable citdl="list" line="308" name="tail" />
        <variable attributes="protected" citdl="re.compile()" line="283" name="_varprogb" />
        <variable citdl="list" ilk="argument" name="path" />
      </scope>
      <variable citdl="str" line="31" name="extsep" />
      <import module="genericpath" />
      <scope doc="Return the last access time of a file, reported by os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Test whether a path is absolute" ilk="function" line="58" lineend="61" name="isabs" returns="s.startswith()" signature="isabs(s)">
        <variable ilk="argument" name="s" />
        <variable citdl="_get_sep()" line="60" name="sep" />
      </scope>
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Test whether a path is a symbolic link" ilk="function" line="148" lineend="154" name="islink" returns="bool" signature="islink(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="os.lstat()" line="151" name="st" />
      </scope>
      <scope doc="Test whether a path is a mount point" ilk="function" line="198" lineend="217" name="ismount" returns="bool" signature="ismount(path)">
        <variable citdl="s1.st_ino" line="213" name="ino1" />
        <variable citdl="join()" line="203" name="parent" />
        <variable citdl="os.lstat()" line="206" name="s2" />
        <variable citdl="os.lstat()" line="201" name="s1" />
        <variable citdl="s2.st_ino" line="214" name="ino2" />
        <variable citdl="s2.st_dev" line="210" name="dev2" />
        <variable citdl="s1.st_dev" line="209" name="dev1" />
        <variable ilk="argument" name="path" />
      </scope>
      <scope doc="Join two or more pathname components, inserting &apos;/&apos; as needed." ilk="function" line="68" lineend="81" name="join" returns="b" signature="join(a, *p)">
        <variable ilk="argument" name="a" />
        <variable attributes="varargs" ilk="argument" name="p" />
        <variable citdl="b" line="73" name="path" />
        <variable citdl="_get_sep()" line="72" name="sep" />
      </scope>
      <scope doc="Test whether a path exists." ilk="function" line="158" lineend="164" name="lexists" returns="bool" signature="lexists(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="os.lstat()" line="161" name="st" />
      </scope>
      <scope doc="Normalize case of pathname." ilk="function" line="49" lineend="52" name="normcase" signature="normcase(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope doc="Normalize path, eliminating double slashes, etc." ilk="function" line="324" lineend="358" name="normpath" returns="sep.join()" signature="normpath(path)">
        <variable citdl="str" line="327" name="sep" />
        <variable citdl="str" line="330" name="dotdot" />
        <variable citdl="list" line="344" name="comps" />
        <variable citdl="str" line="328" name="empty" />
        <variable citdl="path.startswith()" line="338" name="initial_slashes" />
        <variable citdl="sep.join()" ilk="argument" name="path" />
        <variable citdl="list" line="345" name="new_comps" />
        <variable citdl="str" line="329" name="dot" />
      </scope>
      <import module="os" />
      <variable citdl="str" line="30" name="pardir" />
      <variable citdl="str" line="33" name="pathsep" />
      <scope doc="Return the canonical path of the specified filename, eliminating any symbolic links encountered in the path." ilk="function" line="375" lineend="401" name="realpath" returns="abspath()" signature="realpath(filename)">
        <variable citdl="_resolve_link()" line="393" name="resolved" />
        <variable citdl="join()" line="398" name="newpath" />
        <variable citdl="str" line="379" name="sep" />
        <variable citdl="join()" line="390" name="component" />
        <variable ilk="argument" name="filename" />
        <variable citdl="list" line="385" name="bits" />
        <variable citdl="str" line="380" name="empty" />
      </scope>
      <scope doc="Return a relative version of a path" ilk="function" line="426" lineend="453" name="relpath" returns="join()" signature="relpath(path, start=None)">
        <variable citdl="str" line="435" name="pardir" />
        <variable citdl="len()" line="450" name="rel_list" />
        <variable citdl="str" line="434" name="sep" />
        <variable citdl="len()" line="448" name="i" />
        <variable citdl="str" ilk="argument" name="start" />
        <variable citdl="str" line="433" name="curdir" />
        <variable line="445" name="path_list" />
        <variable ilk="argument" name="path" />
        <variable line="444" name="start_list" />
      </scope>
      <scope doc="Test whether two pathnames reference the same actual file" ilk="function" line="169" lineend="173" name="samefile" returns="samestat()" signature="samefile(f1, f2)">
        <variable ilk="argument" name="f1" />
        <variable ilk="argument" name="f2" />
        <variable citdl="os.stat()" line="171" name="s1" />
        <variable citdl="os.stat()" line="172" name="s2" />
      </scope>
      <scope doc="Test whether two open file objects reference the same file" ilk="function" line="179" lineend="183" name="sameopenfile" returns="samestat()" signature="sameopenfile(fp1, fp2)">
        <variable citdl="os.fstat()" line="182" name="s2" />
        <variable citdl="os.fstat()" line="181" name="s1" />
        <variable ilk="argument" name="fp1" />
        <variable ilk="argument" name="fp2" />
      </scope>
      <scope doc="Test whether two stat buffers reference the same file" ilk="function" line="189" lineend="192" name="samestat" returns="bool" signature="samestat(s1, s2)">
        <variable ilk="argument" name="s2" />
        <variable ilk="argument" name="s1" />
      </scope>
      <variable citdl="str" line="32" name="sep" />
      <scope doc="Split a pathname." ilk="function" line="89" lineend="97" name="split" returns="tuple" signature="split(p)">
        <variable citdl="p.rfind()" line="93" name="i" />
        <variable ilk="argument" name="p" />
        <variable citdl="head.rstrip()" line="94" name="head" />
        <variable citdl="list" line="94" name="tail" />
        <variable citdl="_get_sep()" line="92" name="sep" />
      </scope>
      <scope doc="Split a pathname into drive and path." ilk="function" line="118" lineend="121" name="splitdrive" returns="tuple" signature="splitdrive(p)">
        <variable ilk="argument" name="p" />
      </scope>
      <scope doc="Split the extension from a pathname." ilk="function" line="105" lineend="112" name="splitext" returns="genericpath._splitext()" signature="splitext(p)">
        <variable citdl="str" line="108" name="extsep" />
        <variable citdl="genericpath._splitext.__doc__" line="113" name="__doc__" />
        <variable ilk="argument" name="p" />
        <variable citdl="str" line="107" name="sep" />
      </scope>
      <import module="stat" />
      <variable citdl="bool" line="424" name="supports_unicode_filenames" />
      <import module="sys" />
      <scope attributes="protected __hidden__" doc="Internal helper function." ilk="function" line="404" lineend="422" name="_resolve_link" returns="normpath()" signature="_resolve_link(path)">
        <variable citdl="normpath()" ilk="argument" name="path" />
        <variable citdl="set()" line="409" name="paths_seen" />
        <variable citdl="os.readlink()" line="416" name="resolved" />
        <variable citdl="dirname()" line="418" name="dir" />
      </scope>
      <variable attributes="protected __hidden__" line="271" name="_varprog" />
      <scope attributes="protected __hidden__" ilk="function" line="38" lineend="42" name="_get_sep" returns="str" signature="_get_sep(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <variable attributes="protected __hidden__" line="272" name="_varprogb" />
    </scope>
    <scope doc="Define names for built-in types that aren&apos;t directly accessible as a builtin." ilk="blob" lang="Python3" name="types">
      <scope classrefs="object" ilk="class" line="24" name="BuiltinFunctionType" />
      <scope classrefs="object" ilk="class" line="25" name="BuiltinMethodType" />
      <scope classrefs="object" doc="code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,       constants, names, varnames, filename, name, firstlineno,       lnotab[, freevars[, cellvars]])" ilk="class" line="14" name="CodeType" />
      <scope classrefs="object" ilk="class" line="34" name="FrameType" />
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])  Create a function object from a code object and a dictionary." ilk="class" line="12" name="FunctionType" />
      <scope classrefs="object" ilk="class" line="18" name="GeneratorType" />
      <scope classrefs="object" ilk="class" line="38" name="GetSetDescriptorType" />
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])  Create a function object from a code object and a dictionary." ilk="class" line="13" name="LambdaType" />
      <scope classrefs="object" ilk="class" line="39" name="MemberDescriptorType" />
      <scope classrefs="object" doc="method(function, instance)  Create a bound instance method object." ilk="class" line="22" name="MethodType" />
      <scope classrefs="object" doc="module(name[, doc])  Create a module object." ilk="class" line="27" name="ModuleType" />
      <scope classrefs="object" ilk="class" line="33" name="TracebackType" />
      <scope attributes="protected __hidden__" ilk="function" line="16" lineend="17" name="_g" signature="_g()" />
      <scope attributes="protected __hidden__" ilk="function" line="11" lineend="11" name="_f" signature="_f()" />
      <scope attributes="protected __hidden__" ilk="class" line="20" lineend="21" name="_C">
        <scope attributes="protected" ilk="function" line="21" lineend="21" name="_m" signature="_m()">
          <variable citdl="_C" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable attributes="__hidden__" line="32" name="tb" />
    </scope>
    <scope ilk="blob" lang="Python3" name="msilib.sequence">
      <variable citdl="list" line="1" name="AdminExecuteSequence" />
      <variable citdl="list" line="12" name="AdminUISequence" />
      <variable citdl="list" line="22" name="AdvtExecuteSequence" />
      <variable citdl="list" line="39" name="InstallExecuteSequence" />
      <variable citdl="list" line="108" name="InstallUISequence" />
      <variable citdl="list" line="126" name="tables" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_codecs">
      <scope ilk="function" name="ascii_decode" />
      <scope ilk="function" name="ascii_encode" />
      <scope ilk="function" name="charbuffer_encode" />
      <scope ilk="function" name="charmap_build" />
      <scope ilk="function" name="charmap_decode" />
      <scope ilk="function" name="charmap_encode" />
      <scope doc="Decodes obj using the codec registered for encoding." ilk="function" name="decode" returns="object" signature="decode(obj, [encoding[,errors]]) -&gt; object" />
      <scope doc="Encodes obj using the codec registered for encoding." ilk="function" name="encode" returns="object" signature="encode(obj, [encoding[,errors]]) -&gt; object" />
      <scope ilk="function" name="escape_decode" />
      <scope ilk="function" name="escape_encode" />
      <scope ilk="function" name="latin_1_decode" />
      <scope ilk="function" name="latin_1_encode" />
      <scope doc="Looks up a codec tuple in the Python codec registry and returns a CodecInfo object." ilk="function" name="lookup" signature="lookup(encoding) -&gt; CodecInfo" />
      <scope doc="Return the error handler for the specified error handling name or raise a LookupError, if no handler exists under this name." ilk="function" name="lookup_error" signature="lookup_error(errors) -&gt; handler" />
      <scope ilk="function" name="mbcs_decode" />
      <scope ilk="function" name="mbcs_encode" />
      <scope ilk="function" name="raw_unicode_escape_decode" />
      <scope ilk="function" name="raw_unicode_escape_encode" />
      <scope ilk="function" name="readbuffer_encode" />
      <scope doc="Register a codec search function." ilk="function" name="register" signature="register(search_function)" />
      <scope doc="Register the specified error handler under the name errors." ilk="function" name="register_error" signature="register_error(errors, handler)" />
      <scope ilk="function" name="unicode_escape_decode" />
      <scope ilk="function" name="unicode_escape_encode" />
      <scope ilk="function" name="unicode_internal_decode" />
      <scope ilk="function" name="unicode_internal_encode" />
      <scope ilk="function" name="utf_16_be_decode" />
      <scope ilk="function" name="utf_16_be_encode" />
      <scope ilk="function" name="utf_16_decode" />
      <scope ilk="function" name="utf_16_encode" />
      <scope ilk="function" name="utf_16_ex_decode" />
      <scope ilk="function" name="utf_16_le_decode" />
      <scope ilk="function" name="utf_16_le_encode" />
      <scope ilk="function" name="utf_32_be_decode" />
      <scope ilk="function" name="utf_32_be_encode" />
      <scope ilk="function" name="utf_32_decode" />
      <scope ilk="function" name="utf_32_encode" />
      <scope ilk="function" name="utf_32_ex_decode" />
      <scope ilk="function" name="utf_32_le_decode" />
      <scope ilk="function" name="utf_32_le_encode" />
      <scope ilk="function" name="utf_7_decode" />
      <scope ilk="function" name="utf_7_encode" />
      <scope ilk="function" name="utf_8_decode" />
      <scope ilk="function" name="utf_8_encode" />
    </scope>
    <scope doc="Implements (a subset of) Sun XDR -- eXternal Data Representation.  See: RFC 1014" ilk="blob" lang="Python3" name="xdrlib">
      <scope classrefs="_BufferedIOBase" doc="BytesIO([buffer]) -&gt; object  Create a buffered I/O implementation using an in-memory bytes" ilk="class" name="BytesIO" />
      <scope classrefs="Error" ilk="class" line="31" lineend="32" name="ConversionError" />
      <scope classrefs="Exception" doc="Exception class for this module. Use:  except xdrlib.Error, var:" ilk="class" line="13" lineend="28" name="Error">
        <variable attributes="__instancevar__" line="24" name="msg" />
        <scope ilk="function" line="27" lineend="28" name="__str__" returns="str()" signature="__str__()">
          <variable citdl="Error" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="25" lineend="26" name="__repr__" returns="repr()" signature="__repr__()">
          <variable citdl="Error" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="23" lineend="24" name="__init__" signature="Error(msg)">
          <variable citdl="Error" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Pack various data representations into a buffer." ilk="class" line="36" lineend="109" name="Packer">
        <scope ilk="function" line="42" lineend="43" name="reset" signature="reset()">
          <variable citdl="Packer" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="60" lineend="62" name="pack_uhyper" signature="pack_uhyper(x)">
          <variable citdl="Packer" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <scope ilk="function" line="56" lineend="58" name="pack_bool" signature="pack_bool(x)">
          <variable citdl="Packer" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <variable attributes="private __instancevar__" citdl="BytesIO()" line="43" name="__buf" />
        <variable citdl="Packer.pack_uint" line="53" name="pack_int" />
        <scope ilk="function" line="86" lineend="89" name="pack_string" signature="pack_string(s)">
          <variable citdl="Packer" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <variable citdl="len()" line="87" name="n" />
        </scope>
        <scope ilk="function" line="50" lineend="51" name="pack_uint" signature="pack_uint(x)">
          <variable citdl="Packer" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <variable citdl="Packer.get_buffer" line="48" name="get_buf" />
        <scope ilk="function" line="76" lineend="82" name="pack_fstring" signature="pack_fstring(n, s)">
          <variable citdl="Packer" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="n" />
          <variable ilk="argument" name="s" />
          <variable citdl="list" line="79" name="data" />
        </scope>
        <variable citdl="Packer.pack_uint" line="54" name="pack_enum" />
        <scope ilk="function" line="66" lineend="69" name="pack_float" signature="pack_float(x)">
          <variable citdl="Packer" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <scope ilk="function" line="106" lineend="109" name="pack_array" signature="pack_array(list, pack_item)">
          <variable citdl="Packer" ilk="argument" name="self" />
          <variable ilk="argument" name="list" />
          <variable ilk="argument" name="pack_item" />
          <variable citdl="len()" line="107" name="n" />
        </scope>
        <variable citdl="Packer.pack_string" line="91" name="pack_opaque" />
        <variable citdl="Packer.pack_uhyper" line="64" name="pack_hyper" />
        <scope ilk="function" line="71" lineend="74" name="pack_double" signature="pack_double(x)">
          <variable citdl="Packer" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <variable citdl="Packer.pack_fstring" line="84" name="pack_fopaque" />
        <scope ilk="function" line="100" lineend="104" name="pack_farray" signature="pack_farray(n, list, pack_item)">
          <variable citdl="Packer" ilk="argument" name="self" />
          <variable ilk="argument" name="n" />
          <variable ilk="argument" name="list" />
          <variable ilk="argument" name="pack_item" />
        </scope>
        <variable citdl="Packer.pack_string" line="92" name="pack_bytes" />
        <scope ilk="function" line="94" lineend="98" name="pack_list" signature="pack_list(list, pack_item)">
          <variable citdl="Packer" ilk="argument" name="self" />
          <variable ilk="argument" name="list" />
          <variable ilk="argument" name="pack_item" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="39" lineend="40" name="__init__" signature="Packer()">
          <variable citdl="Packer" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="45" lineend="46" name="get_buffer" returns="self.__buf.getvalue()" signature="get_buffer()">
          <variable citdl="Packer" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Unpacks various data representations from the given buffer." ilk="class" line="113" lineend="226" name="Unpacker">
        <scope ilk="function" line="218" lineend="222" name="unpack_farray" returns="list" signature="unpack_farray(n, unpack_item)">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable ilk="argument" name="n" />
          <variable ilk="argument" name="unpack_item" />
          <variable citdl="list" line="219" name="list" />
        </scope>
        <scope ilk="function" line="172" lineend="178" name="unpack_float" signature="unpack_float()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable citdl="int" line="173" name="i" />
          <variable citdl="list" line="175" name="data" />
        </scope>
        <scope ilk="function" line="132" lineend="134" name="done" signature="done()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="126" lineend="127" name="set_position" signature="set_position(position)">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable ilk="argument" name="position" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="116" lineend="117" name="__init__" signature="Unpacker(data)">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="private __instancevar__" line="120" name="__buf" />
        <variable citdl="Unpacker.unpack_int" line="156" name="unpack_enum" />
        <scope ilk="function" line="188" lineend="196" name="unpack_fstring" returns="list" signature="unpack_fstring(n)">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable ilk="argument" name="n" />
          <variable citdl="int" line="191" name="i" />
          <variable citdl="int" line="192" name="j" />
        </scope>
        <scope ilk="function" line="123" lineend="124" name="get_position" returns="int" signature="get_position()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="180" lineend="186" name="unpack_double" signature="unpack_double()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable citdl="int" line="181" name="i" />
          <variable citdl="list" line="183" name="data" />
        </scope>
        <scope ilk="function" line="166" lineend="170" name="unpack_hyper" returns="unpack_uhyper()" signature="unpack_hyper()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable citdl="unpack_uhyper()" line="167" name="x" />
        </scope>
        <variable citdl="Unpacker.unpack_string" line="204" name="unpack_opaque" />
        <scope ilk="function" line="161" lineend="164" name="unpack_uhyper" returns="int" signature="unpack_uhyper()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable citdl="unpack_uint()" line="162" name="hi" />
          <variable citdl="unpack_uint()" line="163" name="lo" />
        </scope>
        <scope ilk="function" line="158" lineend="159" name="unpack_bool" returns="bool()" signature="unpack_bool()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="148" lineend="154" name="unpack_int" signature="unpack_int()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable citdl="int" line="149" name="i" />
          <variable citdl="list" line="151" name="data" />
        </scope>
        <scope ilk="function" line="129" lineend="130" name="get_buffer" signature="get_buffer()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="119" lineend="121" name="reset" signature="reset(data)">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="136" lineend="146" name="unpack_uint" returns="int()" signature="unpack_uint()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable citdl="int" line="137" name="i" />
          <variable citdl="list" line="139" name="data" />
          <variable line="142" name="x" />
        </scope>
        <scope ilk="function" line="224" lineend="226" name="unpack_array" returns="Unpacker.unpack_farray()" signature="unpack_array(unpack_item)">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable ilk="argument" name="unpack_item" />
          <variable citdl="unpack_uint()" line="225" name="n" />
        </scope>
        <variable attributes="private __instancevar__" citdl="int" line="121" name="__pos" />
        <variable citdl="Unpacker.unpack_string" line="205" name="unpack_bytes" />
        <scope ilk="function" line="207" lineend="216" name="unpack_list" returns="list" signature="unpack_list(unpack_item)">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable ilk="argument" name="unpack_item" />
          <variable citdl="list" line="208" name="list" />
          <variable citdl="unpack_uint()" line="210" name="x" />
          <variable citdl="unpack_item()" line="214" name="item" />
        </scope>
        <variable citdl="Unpacker.unpack_fstring" line="198" name="unpack_fopaque" />
        <scope ilk="function" line="200" lineend="202" name="unpack_string" returns="Unpacker.unpack_fstring()" signature="unpack_string()">
          <variable citdl="Unpacker" ilk="argument" name="self" />
          <variable citdl="unpack_uint()" line="201" name="n" />
        </scope>
      </scope>
      <variable citdl="list" line="10" name="__all__" />
      <import module="struct" />
    </scope>
    <scope doc="FeedParser - An email feed parser.  The feed parser implements an interface for incrementally parsing an email" ilk="blob" lang="Python3" name="email.feedparser">
      <scope classrefs="object" doc="A file-ish object that can have new data loaded into it.  You can also push and pop line-matching predicates onto a stack.  When the" ilk="class" line="43" lineend="129" name="BufferedSubFile">
        <scope ilk="function" line="119" lineend="120" name="is_closed" returns="bool" signature="is_closed()">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="59" name="_closed" />
        <scope ilk="function" line="115" lineend="117" name="pushlines" signature="pushlines(lines)">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
          <variable ilk="argument" name="lines" />
        </scope>
        <scope ilk="function" line="64" lineend="65" name="pop_eof_matcher" returns="self._eofstack.pop()" signature="pop_eof_matcher()">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="125" lineend="129" name="__next__" returns="readline()" signature="__next__()">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
          <variable citdl="readline()" line="126" name="line" />
        </scope>
        <scope ilk="function" line="91" lineend="94" name="unreadline" signature="unreadline(line)">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope doc="Push some new data into this object." ilk="function" line="96" lineend="113" name="push" signature="push(data)">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="data" />
          <variable citdl="NLCRE_crack.split()" line="101" name="parts" />
          <variable citdl="list" line="110" name="lines" />
        </scope>
        <scope ilk="function" line="122" lineend="123" name="__iter__" returns="BufferedSubFile" signature="__iter__()">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="51" lineend="59" name="__init__" signature="BufferedSubFile()">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="57" name="_eofstack" />
        <scope ilk="function" line="67" lineend="71" name="close" signature="close()">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="73" lineend="89" name="readline" returns="str" signature="readline()">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
          <variable citdl="self._lines.pop()" line="80" name="line" />
        </scope>
        <scope ilk="function" line="61" lineend="62" name="push_eof_matcher" signature="push_eof_matcher(pred)">
          <variable citdl="BufferedSubFile" ilk="argument" name="self" />
          <variable ilk="argument" name="pred" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="55" name="_lines" />
        <variable attributes="protected __instancevar__" citdl="str" line="53" name="_partial" />
      </scope>
      <variable citdl="str" line="36" name="EMPTYSTRING" />
      <scope classrefs="object" doc="A feed-style parser of email." ilk="class" line="133" lineend="480" name="FeedParser">
        <scope doc="Push more data into the parser." ilk="function" line="150" lineend="153" name="feed" signature="feed(data)">
          <variable citdl="FeedParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope attributes="protected" ilk="function" line="183" lineend="189" name="_pop_message" returns="self._msgstack.pop()" signature="_pop_message()">
          <variable citdl="FeedParser" ilk="argument" name="self" />
          <variable citdl="self._msgstack.pop()" line="184" name="retval" />
        </scope>
        <scope attributes="protected" ilk="function" line="155" lineend="159" name="_call_parse" signature="_call_parse()">
          <variable citdl="FeedParser" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="140" name="_msgstack" />
        <scope attributes="protected" ilk="function" line="427" lineend="480" name="_parse_headers" signature="_parse_headers(lines)">
          <variable citdl="FeedParser" ilk="argument" name="self" />
          <variable ilk="argument" name="lines" />
          <variable citdl="str" line="429" name="lastheader" />
          <variable citdl="list" line="430" name="lastvalue" />
          <variable citdl="errors.MalformedHeaderDefect()" line="438" name="defect" />
          <variable line="445" name="lhdr" />
          <variable citdl="NLCRE_eol.search()" line="452" name="mo" />
          <variable citdl="list" line="454" name="line" />
          <variable citdl="line.find()" line="470" name="i" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="BufferedSubFile" line="139" name="_input" />
        <scope attributes="protected" ilk="function" line="173" lineend="181" name="_new_message" signature="_new_message()">
          <variable citdl="FeedParser" ilk="argument" name="self" />
          <variable citdl="_factory()" line="174" name="msg" />
        </scope>
        <scope attributes="protected" ilk="function" line="191" lineend="425" name="_parsegen" signature="_parsegen()">
          <variable citdl="FeedParser" ilk="argument" name="self" />
          <variable citdl="list" line="194" name="headers" />
          <variable citdl="list" line="216" name="lines" />
          <variable citdl="self._input.readline()" line="218" name="line" />
          <variable citdl="_pop_message()" line="240" name="msg" />
          <variable citdl="self._cur.get_boundary()" line="277" name="boundary" />
          <variable citdl="self._cur.get_boundary()" line="296" name="separator" />
          <variable citdl="re.compile()" line="297" name="boundaryre" />
          <variable citdl="True" line="300" name="capturing_preamble" />
          <variable citdl="list" line="301" name="preamble" />
          <variable citdl="False" line="302" name="linesep" />
          <variable citdl="NLCRE_eol.search()" line="310" name="mo" />
          <variable line="324" name="lastline" />
          <variable citdl="NLCRE_eol.search()" line="325" name="eolmo" />
          <variable citdl="list" line="358" name="epilogue" />
          <variable citdl="len()" line="364" name="end" />
          <variable citdl="self._last.get_payload()" line="367" name="payload" />
          <variable line="411" name="firstline" />
          <variable citdl="NLCRE_bol.match()" line="412" name="bolmo" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="message.Message" line="138" name="_factory" />
        <variable attributes="protected __instancevar__" citdl="_factory()" line="143" name="_last" />
        <scope attributes="protected" ilk="function" line="147" lineend="148" name="_set_headersonly" signature="_set_headersonly()">
          <variable citdl="FeedParser" ilk="argument" name="self" />
        </scope>
        <scope doc="Parse all remaining data and return the root message object." ilk="function" line="161" lineend="171" name="close" returns="self._pop_message()" signature="close()">
          <variable citdl="FeedParser" ilk="argument" name="self" />
          <variable citdl="self._pop_message()" line="165" name="root" />
        </scope>
        <variable attributes="protected __instancevar__" line="141" name="_parse" />
        <variable attributes="protected __instancevar__" citdl="_factory()" line="142" name="_cur" />
        <scope attributes="__ctor__" doc="_factory is called with no arguments to create a new message obj" ilk="function" line="136" lineend="144" name="__init__" signature="FeedParser(_factory=message.Message)">
          <variable citdl="FeedParser" ilk="argument" name="self" />
          <variable citdl="message.Message" ilk="argument" name="_factory" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="144" name="_headersonly" />
      </scope>
      <variable citdl="str" line="37" name="NL" />
      <variable citdl="SRE_Pattern" line="29" name="NLCRE" />
      <variable citdl="SRE_Pattern" line="30" name="NLCRE_bol" />
      <variable citdl="SRE_Pattern" line="32" name="NLCRE_crack" />
      <variable citdl="SRE_Pattern" line="31" name="NLCRE_eol" />
      <variable citdl="object" line="39" name="NeedMoreData" />
      <variable citdl="list" line="22" name="__all__" />
      <import module="errors" />
      <variable citdl="SRE_Pattern" line="35" name="headerRE" />
      <import module="message" />
      <import module="re" />
    </scope>
    <scope doc="Adjust some old Python 2 idioms to their modern counterparts.  * Change some type comparisons to isinstance() calls:" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_idioms">
      <scope doc="A blank line" ilk="function" name="BlankLine" signature="BlankLine()" />
      <variable citdl="str" line="34" name="CMP" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" ilk="class" line="37" lineend="153" name="FixIdioms">
        <variable citdl="str" line="41" name="PATTERN" />
        <variable citdl="True" line="39" name="explicit" />
        <scope ilk="function" line="91" lineend="99" name="transform" returns="self.transform_sort()" signature="transform(node, results)">
          <variable citdl="FixIdioms" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
        <scope ilk="function" line="101" lineend="111" name="transform_isinstance" returns="Call()" signature="transform_isinstance(node, results)">
          <variable citdl="FixIdioms" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="102" name="x" />
          <variable line="103" name="T" />
          <variable citdl="Call()" line="106" name="test" />
        </scope>
        <scope ilk="function" line="113" lineend="115" name="transform_while" signature="transform_while(node, results)">
          <variable citdl="FixIdioms" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="114" name="one" />
        </scope>
        <scope ilk="function" line="117" lineend="153" name="transform_sort" signature="transform_sort(node, results)">
          <variable citdl="FixIdioms" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="118" name="sort_stmt" />
          <variable line="119" name="next_stmt" />
          <variable citdl="results.get()" line="120" name="list_call" />
          <variable citdl="results.get()" line="121" name="simple_expr" />
          <variable citdl="simple_expr.clone()" line="126" name="new" />
          <variable citdl="sort_stmt.prefix" line="134" name="btwn" />
          <variable citdl="tuple" line="142" name="prefix_lines" />
          <variable citdl="BlankLine()" line="148" name="end_line" />
        </scope>
        <scope ilk="function" line="80" lineend="89" name="match" signature="match(node)">
          <variable citdl="FixIdioms" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable line="81" name="r" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes." ilk="class" name="Node" />
      <variable citdl="str" line="35" name="TYPE" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    <scope doc="distutils.pypirc  Provides the PyPIRCCommand class, the base class for the command classes" ilk="blob" lang="Python3" name="distutils.config">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="RawConfigParser" ilk="class" name="ConfigParser" />
      <variable citdl="str" line="12" name="DEFAULT_PYPIRC" />
      <scope classrefs="Command" doc="Base command that knows how to handle the .pypirc file" ilk="class" line="22" lineend="124" name="PyPIRCCommand">
        <variable citdl="str" line="25" name="DEFAULT_REPOSITORY" />
        <variable citdl="list" line="30" name="user_options" />
        <variable citdl="str" line="28" name="realm" />
        <variable citdl="str" line="26" name="DEFAULT_REALM" />
        <variable citdl="str" line="27" name="repository" />
        <scope doc="Initialize options." ilk="function" line="113" lineend="117" name="initialize_options" signature="initialize_options()">
          <variable citdl="PyPIRCCommand" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="117" name="show_response" />
        <scope attributes="protected" doc="Creates a default .pypirc file." ilk="function" line="43" lineend="55" name="_store_pypirc" signature="_store_pypirc(username, password)">
          <variable citdl="PyPIRCCommand" ilk="argument" name="self" />
          <variable ilk="argument" name="username" />
          <variable ilk="argument" name="password" />
          <variable citdl="_get_rc_file()" line="45" name="rc" />
          <variable citdl="open()" line="46" name="f" />
        </scope>
        <variable citdl="list" line="37" name="boolean_options" />
        <scope doc="Finalizes options." ilk="function" line="119" lineend="124" name="finalize_options" signature="finalize_options()">
          <variable citdl="PyPIRCCommand" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Reads the .pypirc file." ilk="function" line="57" lineend="111" name="_read_pypirc" returns="dict" signature="_read_pypirc()">
          <variable citdl="PyPIRCCommand" ilk="argument" name="self" />
          <variable citdl="_get_rc_file()" line="59" name="rc" />
          <variable citdl="str" line="62" name="repository" />
          <variable citdl="str" line="63" name="realm" />
          <variable citdl="ConfigParser()" line="65" name="config" />
          <variable citdl="config.sections()" line="67" name="sections" />
          <variable citdl="config.get()" line="70" name="index_servers" />
          <variable attributes="protected" citdl="list" line="71" name="_servers" />
          <variable citdl="dict" line="83" name="current" />
          <variable citdl="str" line="100" name="server" />
        </scope>
        <scope attributes="protected" doc="Returns rc file path." ilk="function" line="39" lineend="41" name="_get_rc_file" returns="os.path.join()" signature="_get_rc_file()">
          <variable citdl="PyPIRCCommand" ilk="argument" name="self" />
        </scope>
      </scope>
      <import module="os" />
      <import module="sys" />
    </scope>
    <scope doc="Parser engine for the grammar tables generated by pgen.  The grammar table must be loaded first." ilk="blob" lang="Python3" name="lib2to3.pgen2.parse">
      <scope classrefs="Exception" doc="Exception to signal the parser is stuck." ilk="class" line="16" lineend="25" name="ParseError">
        <variable attributes="__instancevar__" line="22" name="msg" />
        <variable attributes="__instancevar__" line="25" name="context" />
        <variable attributes="__instancevar__" line="23" name="type" />
        <variable attributes="__instancevar__" line="24" name="value" />
        <scope attributes="__ctor__" ilk="function" line="19" lineend="25" name="__init__" signature="ParseError(msg, type, value, context)">
          <variable citdl="ParseError" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="context" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Parser engine.  The proper usage sequence is:" ilk="class" line="27" lineend="201" name="Parser">
        <variable attributes="__instancevar__" line="87" name="convert" />
        <variable attributes="__instancevar__" line="86" name="grammar" />
        <scope doc="Shift a token." ilk="function" line="175" lineend="182" name="shift" signature="shift(type, value, newstate, context)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="newstate" />
          <variable ilk="argument" name="context" />
          <variable citdl="convert()" line="178" name="newnode" />
        </scope>
        <scope doc="Prepare for parsing." ilk="function" line="89" lineend="111" name="setup" signature="setup(start=None)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable citdl="self.grammar.start" ilk="argument" name="start" />
          <variable citdl="tuple" line="107" name="newnode" />
          <variable citdl="tuple" line="108" name="stackentry" />
        </scope>
        <scope doc="Pop a nonterminal." ilk="function" line="191" lineend="201" name="pop" signature="pop()">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable citdl="convert()" line="194" name="newnode" />
        </scope>
        <scope doc="Push a nonterminal." ilk="function" line="184" lineend="189" name="push" signature="push(type, newdfa, newstate, context)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="newdfa" />
          <variable ilk="argument" name="newstate" />
          <variable ilk="argument" name="context" />
          <variable citdl="tuple" line="187" name="newnode" />
        </scope>
        <variable attributes="__instancevar__" citdl="convert()" line="110" name="rootnode" />
        <scope doc="Turn a token into a label." ilk="function" line="161" lineend="173" name="classify" returns="self.grammar.keywords.get()" signature="classify(type, value, context)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="context" />
          <variable citdl="self.grammar.keywords.get()" line="167" name="ilabel" />
        </scope>
        <scope doc="Add a token; return True iff this is the end of the program." ilk="function" line="113" lineend="159" name="addtoken" returns="bool" signature="addtoken(type, value, context)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="context" />
          <variable citdl="self.classify()" line="116" name="ilabel" />
          <variable line="121" name="arcs" />
          <variable citdl="newstate" line="131" name="state" />
          <variable line="143" name="itsdfa" />
        </scope>
        <variable attributes="__instancevar__" citdl="set()" line="111" name="used_names" />
        <variable attributes="__instancevar__" citdl="list" line="109" name="stack" />
        <scope attributes="__ctor__" doc="Constructor." ilk="function" line="57" lineend="87" name="__init__" signature="Parser(grammar, convert=None)">
          <variable citdl="Parser" ilk="argument" name="self" />
          <variable ilk="argument" name="grammar" />
          <variable ilk="argument" name="convert" />
        </scope>
      </scope>
      <import module="token" />
    </scope>
    <scope doc="hashlib module - A common interface to many hash functions.  new(name, data=b&apos;&apos;) - returns a new hash object implementing the" ilk="blob" lang="Python3" name="hashlib">
      <import module="_hashlib" />
      <scope doc="Returns a md5 hash object; optionally initialized with a string" ilk="function" line="135" name="md5" />
      <scope doc="Return a new hashing object using the named algorithm;" ilk="function" line="106" name="new" signature="new(name, data=b&apos;&apos;)" />
      <scope doc="Returns a sha1 hash object; optionally initialized with a string" ilk="function" line="136" name="sha1" />
      <scope doc="Returns a sha224 hash object; optionally initialized with a string" ilk="function" line="137" name="sha224" />
      <scope doc="Returns a sha256 hash object; optionally initialized with a string" ilk="function" line="138" name="sha256" />
      <scope doc="Returns a sha384 hash object; optionally initialized with a string" ilk="function" line="139" name="sha384" />
      <scope doc="Returns a sha512 hash object; optionally initialized with a string" ilk="function" line="140" name="sha512" />
      <scope attributes="private __hidden__" doc="Return a new hashing object using the named algorithm;" ilk="function" line="82" lineend="86" name="__py_new" returns="__get_builtin_constructor()()" signature="new(name, data=b&apos;&apos;)">
        <variable ilk="argument" name="name" />
        <variable citdl="str" ilk="argument" name="data" />
      </scope>
      <variable attributes="__hidden__" citdl="getattr()" line="113" name="f" />
      <scope attributes="private __hidden__" ilk="function" line="57" lineend="79" name="__get_builtin_constructor" returns="_sha512.sha512" signature="__get_builtin_constructor(name)">
        <import line="59" module="_sha1" />
        <import line="62" module="_md5" />
        <import line="65" module="_sha256" />
        <import line="72" module="_sha512" />
        <variable ilk="argument" name="name" />
        <variable citdl="list" line="66" name="bs" />
      </scope>
      <variable attributes="__hidden__" citdl="list" line="109" name="funcName" />
      <scope attributes="private __hidden__" doc="Return a new hashing object using the named algorithm;" ilk="function" line="89" lineend="100" name="__hash_new" returns="__get_builtin_constructor()()" signature="new(name, data=b&apos;&apos;)">
        <variable ilk="argument" name="name" />
        <variable citdl="str" ilk="argument" name="data" />
      </scope>
      <variable attributes="__hidden__" citdl="str" line="7" name="__doc__" />
    </scope>
    <scope doc="Keywords (from &quot;graminit.c&quot;)  This file is automatically generated; please don&apos;t muck it up!" ilk="blob" lang="Python3" name="keyword">
      <variable citdl="list" line="13" name="__all__" />
      <scope doc="x.__contains__(y) &lt;==&gt; y in x." ilk="function" line="53" name="iskeyword" signature="x.__contains__(y) &lt;==&gt; y in x." />
      <variable citdl="list" line="15" name="kwlist" />
      <scope ilk="function" line="55" lineend="92" name="main" signature="main()">
        <variable citdl="open()" line="64" name="fp" />
        <variable citdl="str" line="60" name="optfile" />
        <variable citdl="format.index()" line="83" name="end" />
        <variable citdl="fp.readlines()" line="77" name="format" />
        <variable citdl="list" line="58" name="args" />
        <variable citdl="list" line="66" name="lines" />
        <variable citdl="format.index()" line="82" name="start" />
        <variable citdl="re.compile()" line="65" name="strprog" />
        <variable citdl="list" line="59" name="iptfile" />
        <variable citdl="strprog.search()" line="69" name="match" />
      </scope>
    </scope>
    <scope doc="CSV parsing and writing.  This module provides classes that assist in the reading and writing" ilk="blob" lang="Python3" name="_csv">
      <scope classrefs="object" doc="CSV dialect  The Dialect type records CSV parsing and generation options." ilk="class" name="Dialect" />
      <scope classrefs="Exception" ilk="class" name="Error" />
      <variable citdl="int" name="QUOTE_ALL" />
      <variable citdl="int" name="QUOTE_MINIMAL" />
      <variable citdl="int" name="QUOTE_NONE" />
      <variable citdl="int" name="QUOTE_NONNUMERIC" />
      <variable citdl="str" name="__version__" />
      <scope doc="Sets an upper limit on parsed fields." ilk="function" name="field_size_limit" />
      <scope doc="Return the dialect instance associated with name." ilk="function" name="get_dialect" />
      <scope doc="Return a list of all know dialect names." ilk="function" name="list_dialects" />
      <scope doc="csv_reader = reader(iterable [, dialect=&apos;excel&apos;] [optional keyword args]) for row in csv_reader: process(row)" ilk="function" name="reader" />
      <scope doc="Create a mapping from a string name to a dialect class." ilk="function" name="register_dialect" />
      <scope doc="Delete the name/dialect mapping associated with a string name." ilk="function" name="unregister_dialect" />
      <scope doc="csv_writer = csv.writer(fileobj [, dialect=&apos;excel&apos;] [optional keyword args]) for row in sequence: csv_writer.writerow(row)" ilk="function" name="writer" />
    </scope>
    <scope doc="distutils.command.bdist_rpm  Implements the Distutils &apos;bdist_rpm&apos; command (create RPM source and binary" ilk="blob" lang="Python3" name="distutils.command.bdist_rpm">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <variable citdl="NoneType" name="DEBUG" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" line="6" name="__revision__" />
      <scope classrefs="Command" ilk="class" line="17" lineend="552" name="bdist_rpm">
        <variable attributes="__instancevar__" line="164" name="pre_install" />
        <variable attributes="__instancevar__" line="145" name="binary_only" />
        <variable attributes="__instancevar__" line="155" name="doc_files" />
        <variable attributes="__instancevar__" line="180" name="force_arch" />
        <variable attributes="__instancevar__" line="143" name="fix_python" />
        <variable attributes="__instancevar__" citdl="int" line="175" name="keep_temp" />
        <variable attributes="__instancevar__" line="153" name="vendor" />
        <variable attributes="__instancevar__" line="152" name="serial" />
        <variable citdl="dict" line="133" name="negative_opt" />
        <variable citdl="list" line="21" name="user_options" />
        <variable attributes="__instancevar__" line="150" name="group" />
        <scope ilk="function" line="138" lineend="181" name="initialize_options" signature="initialize_options()">
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="166" name="pre_uninstall" />
        <variable attributes="__instancevar__" citdl="int" line="178" name="no_autoreq" />
        <variable attributes="__instancevar__" line="173" name="obsoletes" />
        <variable attributes="__instancevar__" line="169" name="provides" />
        <variable attributes="__instancevar__" line="160" name="build_script" />
        <variable attributes="__instancevar__" line="162" name="clean_script" />
        <variable attributes="__instancevar__" line="139" name="bdist_base" />
        <variable attributes="__instancevar__" line="168" name="prep" />
        <scope ilk="function" line="259" lineend="375" name="run" signature="run()">
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
          <variable line="269" name="spec_dir" />
          <variable citdl="dict" line="272" name="rpm_dir" />
          <variable citdl="os.path.join()" line="280" name="spec_path" />
          <variable citdl="list" line="292" name="saved_dist_files" />
          <variable citdl="self.reinitialize_command()" line="293" name="sdist" />
          <variable line="301" name="source" />
          <variable line="302" name="source_dir" />
          <variable citdl="list" line="314" name="rpm_cmd" />
          <variable citdl="str" line="339" name="nvr_string" />
          <variable citdl="str" line="340" name="src_rpm" />
          <variable citdl="str" line="341" name="non_src_rpm" />
          <variable citdl="str" line="342" name="q_cmd" />
          <variable citdl="os.popen()" line="345" name="out" />
          <variable citdl="list" line="346" name="binary_rpms" />
          <variable line="347" name="source_rpm" />
          <variable citdl="out.readline()" line="349" name="line" />
          <variable line="352" name="l" />
          <variable citdl="out.close()" line="359" name="status" />
          <variable citdl="os.path.join()" line="367" name="srpm" />
          <variable citdl="os.path.join()" line="373" name="rpm" />
        </scope>
        <variable citdl="str" line="19" name="description" />
        <variable attributes="__instancevar__" citdl="str" line="142" name="python" />
        <scope attributes="protected" doc="Generate the text of an RPM spec file and return it as a list of strings (one per line)." ilk="function" line="380" lineend="531" name="_make_spec_file" returns="list" signature="_make_spec_file()">
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
          <variable citdl="list" line="385" name="spec_file" />
          <variable citdl="getattr()" line="434" name="val" />
          <variable citdl="str" line="475" name="def_setup_call" />
          <variable citdl="str" line="476" name="def_build" />
          <variable citdl="str" line="486" name="install_cmd" />
          <variable citdl="list" line="489" name="script_options" />
        </scope>
        <variable attributes="__instancevar__" line="163" name="verify_script" />
        <scope attributes="protected" doc="Format the changelog correctly and convert it to a list of strings" ilk="function" line="533" lineend="552" name="_format_changelog" returns="list" signature="_format_changelog(changelog)">
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
          <variable ilk="argument" name="changelog" />
          <variable citdl="list" line="538" name="new_changelog" />
          <variable citdl="line.strip()" line="540" name="line" />
        </scope>
        <variable attributes="__instancevar__" line="147" name="use_bzip2" />
        <variable attributes="__instancevar__" line="149" name="distribution_name" />
        <variable attributes="__instancevar__" citdl="os.path.join()" line="140" name="rpm_base" />
        <variable citdl="list" line="130" name="boolean_options" />
        <variable attributes="__instancevar__" line="171" name="conflicts" />
        <scope attributes="protected" ilk="function" line="377" lineend="378" name="_dist_path" returns="os.path.join()" signature="_dist_path(path)">
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
        </scope>
        <variable attributes="__instancevar__" line="154" name="packager" />
        <variable attributes="__instancevar__" line="161" name="install_script" />
        <variable attributes="__instancevar__" line="172" name="build_requires" />
        <variable attributes="__instancevar__" line="157" name="icon" />
        <variable attributes="__instancevar__" citdl="int" line="177" name="rpm3_mode" />
        <variable attributes="__instancevar__" line="159" name="prep_script" />
        <variable attributes="__instancevar__" citdl="self._format_changelog()" line="156" name="changelog" />
        <variable attributes="__instancevar__" line="170" name="requires" />
        <variable attributes="__instancevar__" line="144" name="spec_only" />
        <variable attributes="__instancevar__" citdl="int" line="181" name="quiet" />
        <variable attributes="__instancevar__" line="146" name="source_only" />
        <variable attributes="__instancevar__" citdl="int" line="176" name="use_rpm_opt_flags" />
        <scope ilk="function" line="214" lineend="257" name="finalize_package_data" signature="finalize_package_data()">
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="151" name="release" />
        <scope ilk="function" line="183" lineend="212" name="finalize_options" signature="finalize_options()">
          <variable citdl="bdist_rpm" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="141" name="dist_dir" />
        <variable attributes="__instancevar__" line="165" name="post_install" />
        <variable attributes="__instancevar__" line="167" name="post_uninstall" />
      </scope>
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <import module="os" />
      <import module="sys" />
      <scope doc="Create a file with the specified name and write &apos;contents&apos; (a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
    </scope>
    <scope ilk="blob" lang="Python3" name="pydoc_data">
      <import module="topics" />
    </scope>
    <scope doc="Library that exposes various tables found in the StringPrep RFC 3454.  There are two kinds of tables: sets, for which a member test is provided," ilk="blob" lang="Python3" name="stringprep">
      <variable citdl="set" line="19" name="b1_set" />
      <variable citdl="dict" line="24" name="b3_exceptions" />
      <variable citdl="set" line="220" name="c22_specials" />
      <variable citdl="set" line="247" name="c6_set" />
      <variable citdl="set" line="252" name="c7_set" />
      <variable citdl="set" line="257" name="c8_set" />
      <variable citdl="set" line="262" name="c9_set" />
      <scope ilk="function" line="12" lineend="16" name="in_table_a1" returns="bool" signature="in_table_a1(code)">
        <variable citdl="ord()" line="14" name="c" />
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="20" lineend="21" name="in_table_b1" returns="bool" signature="in_table_b1(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="206" lineend="207" name="in_table_c11" returns="bool" signature="in_table_c11(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="213" lineend="214" name="in_table_c11_c12" returns="bool" signature="in_table_c11_c12(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="210" lineend="211" name="in_table_c12" returns="bool" signature="in_table_c12(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="217" lineend="218" name="in_table_c21" returns="bool" signature="in_table_c21(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="227" lineend="229" name="in_table_c21_c22" returns="bool" signature="in_table_c21_c22(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="221" lineend="225" name="in_table_c22" returns="bool" signature="in_table_c22(code)">
        <variable citdl="ord()" line="222" name="c" />
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="232" lineend="233" name="in_table_c3" returns="bool" signature="in_table_c3(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="236" lineend="240" name="in_table_c4" returns="bool" signature="in_table_c4(code)">
        <variable citdl="ord()" line="237" name="c" />
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="243" lineend="244" name="in_table_c5" returns="bool" signature="in_table_c5(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="248" lineend="249" name="in_table_c6" returns="bool" signature="in_table_c6(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="253" lineend="254" name="in_table_c7" returns="bool" signature="in_table_c7(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="258" lineend="259" name="in_table_c8" returns="bool" signature="in_table_c8(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="263" lineend="264" name="in_table_c9" returns="bool" signature="in_table_c9(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="267" lineend="268" name="in_table_d1" returns="bool" signature="in_table_d1(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="271" lineend="272" name="in_table_d2" returns="bool" signature="in_table_d2(code)">
        <variable ilk="argument" name="code" />
      </scope>
      <scope ilk="function" line="195" lineend="203" name="map_table_b2" returns="map_table_b3()" signature="map_table_b2(a)">
        <variable ilk="argument" name="a" />
        <variable citdl="str.join()" line="198" name="bl" />
        <variable citdl="unicodedata.normalize()" line="199" name="c" />
        <variable citdl="unicodedata.normalize()" line="197" name="b" />
        <variable citdl="map_table_b3()" line="196" name="al" />
      </scope>
      <scope ilk="function" line="189" lineend="192" name="map_table_b3" returns="code.lower()" signature="map_table_b3(code)">
        <variable citdl="b3_exceptions.get()" line="190" name="r" />
        <variable ilk="argument" name="code" />
      </scope>
      <variable citdl="UCD" name="unicodedata" />
    </scope>
    <scope doc="PlaySound(sound, flags) - play a sound SND_FILENAME - sound is a wav file name SND_ALIAS - sound is a registry sound association name" ilk="blob" lang="Python3" name="winsound">
      <scope doc="a wrapper around the Windows Beep API" ilk="function" name="Beep" signature="Beep(frequency, duration)" />
      <variable citdl="int" name="MB_ICONASTERISK" />
      <variable citdl="int" name="MB_ICONEXCLAMATION" />
      <variable citdl="int" name="MB_ICONHAND" />
      <variable citdl="int" name="MB_ICONQUESTION" />
      <variable citdl="int" name="MB_OK" />
      <scope doc="call Windows MessageBeep(x). x defaults to MB_OK." ilk="function" name="MessageBeep" signature="MessageBeep(x)" />
      <scope doc="a wrapper around the Windows PlaySound API" ilk="function" name="PlaySound" signature="PlaySound(sound, flags)" />
      <variable citdl="int" name="SND_ALIAS" />
      <variable citdl="int" name="SND_APPLICATION" />
      <variable citdl="int" name="SND_ASYNC" />
      <variable citdl="int" name="SND_FILENAME" />
      <variable citdl="int" name="SND_LOOP" />
      <variable citdl="int" name="SND_MEMORY" />
      <variable citdl="int" name="SND_NODEFAULT" />
      <variable citdl="int" name="SND_NOSTOP" />
      <variable citdl="int" name="SND_NOWAIT" />
      <variable citdl="int" name="SND_PURGE" />
    </scope>
    <scope doc="distutils.command.clean  Implements the Distutils &apos;clean&apos; command." ilk="blob" lang="Python3" name="distutils.command.clean">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <variable citdl="str" line="7" name="__revision__" />
      <scope classrefs="Command" ilk="class" line="14" lineend="78" name="clean">
        <variable citdl="list" line="17" name="user_options" />
        <scope ilk="function" line="51" lineend="78" name="run" signature="run()">
          <variable citdl="clean" ilk="argument" name="self" />
        </scope>
        <variable citdl="str" line="16" name="description" />
        <scope ilk="function" line="34" lineend="40" name="initialize_options" signature="initialize_options()">
          <variable citdl="clean" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="39" name="bdist_base" />
        <variable attributes="__instancevar__" line="35" name="build_base" />
        <variable attributes="__instancevar__" line="40" name="all" />
        <variable attributes="__instancevar__" line="37" name="build_temp" />
        <variable citdl="list" line="32" name="boolean_options" />
        <variable attributes="__instancevar__" line="36" name="build_lib" />
        <scope ilk="function" line="42" lineend="49" name="finalize_options" signature="finalize_options()">
          <variable citdl="clean" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="38" name="build_scripts" />
      </scope>
      <import module="log" />
      <import module="os" />
      <scope doc="Recursively remove an entire directory tree." ilk="function" name="remove_tree" signature="remove_tree(directory, verbose=1, dry_run=0)" />
    </scope>
    <scope doc="Redo the builtin repr() (representation) but with limits on most sizes." ilk="blob" lang="Python3" name="reprlib">
      <scope classrefs="object" ilk="class" line="8" lineend="114" name="Repr">
        <scope ilk="function" line="55" lineend="57" name="repr_array" returns="Repr._repr_iterable()" signature="repr_array(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable citdl="x.typecode" line="56" name="header" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="14" name="maxarray" />
        <variable attributes="__instancevar__" citdl="int" line="17" name="maxfrozenset" />
        <variable attributes="__instancevar__" citdl="int" line="15" name="maxdict" />
        <variable attributes="__instancevar__" citdl="int" line="16" name="maxset" />
        <variable attributes="__instancevar__" citdl="int" line="13" name="maxlist" />
        <scope attributes="__ctor__" ilk="function" line="10" lineend="21" name="__init__" signature="Repr()">
          <variable citdl="Repr" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="52" lineend="53" name="repr_list" returns="Repr._repr_iterable()" signature="repr_list(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="86" lineend="93" name="repr_str" returns="str" signature="repr_str(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable citdl="list" line="87" name="s" />
          <variable citdl="max()" line="89" name="i" />
          <variable citdl="max()" line="90" name="j" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="18" name="maxdeque" />
        <scope ilk="function" line="49" lineend="50" name="repr_tuple" returns="Repr._repr_iterable()" signature="repr_tuple(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="19" name="maxstring" />
        <scope attributes="protected" ilk="function" line="36" lineend="47" name="_repr_iterable" returns="tuple" signature="_repr_iterable(x, level, left, right, maxiter, trail=&apos;&apos;)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="left" />
          <variable citdl="str" ilk="argument" name="right" />
          <variable ilk="argument" name="maxiter" />
          <variable citdl="str" ilk="argument" name="trail" />
          <variable citdl="len()" line="37" name="n" />
          <variable citdl="str.join()" line="39" name="s" />
          <variable citdl="int" line="41" name="newlevel" />
          <variable citdl="Repr.repr1" line="42" name="repr1" />
          <variable citdl="list" line="43" name="pieces" />
        </scope>
        <scope ilk="function" line="26" lineend="34" name="repr1" returns="getattr()()" signature="repr1(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable citdl="str.join()" line="27" name="typename" />
          <variable citdl="typename.split()" line="29" name="parts" />
        </scope>
        <scope ilk="function" line="59" lineend="61" name="repr_set" returns="Repr._repr_iterable()" signature="repr_set(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable citdl="_possibly_sorted()" ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="103" lineend="114" name="repr_instance" returns="tuple" signature="repr_instance(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable citdl="list" line="105" name="s" />
          <variable citdl="max()" line="111" name="i" />
          <variable citdl="max()" line="112" name="j" />
        </scope>
        <scope ilk="function" line="23" lineend="24" name="repr" returns="self.repr1()" signature="repr(x)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <scope ilk="function" line="71" lineend="84" name="repr_dict" returns="tuple" signature="repr_dict(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable citdl="len()" line="72" name="n" />
          <variable citdl="int" line="75" name="newlevel" />
          <variable citdl="Repr.repr1" line="76" name="repr1" />
          <variable citdl="list" line="77" name="pieces" />
          <variable citdl="repr1()" line="79" name="keyrepr" />
          <variable citdl="repr1()" line="80" name="valrepr" />
          <variable citdl="str.join()" line="83" name="s" />
        </scope>
        <scope ilk="function" line="63" lineend="66" name="repr_frozenset" returns="Repr._repr_iterable()" signature="repr_frozenset(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable citdl="_possibly_sorted()" ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="11" name="maxlevel" />
        <variable attributes="__instancevar__" citdl="int" line="21" name="maxother" />
        <variable attributes="__instancevar__" citdl="int" line="20" name="maxlong" />
        <variable attributes="__instancevar__" citdl="int" line="12" name="maxtuple" />
        <scope ilk="function" line="68" lineend="69" name="repr_deque" returns="Repr._repr_iterable()" signature="repr_deque(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="95" lineend="101" name="repr_int" returns="str" signature="repr_int(x, level)">
          <variable citdl="Repr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable citdl="list" line="96" name="s" />
          <variable citdl="max()" line="98" name="i" />
          <variable citdl="max()" line="99" name="j" />
        </scope>
      </scope>
      <variable citdl="list" line="3" name="__all__" />
      <variable citdl="Repr" line="126" name="aRepr" />
      <import module="builtins" />
      <scope classrefs="object" doc="islice(iterable, [start,] stop [, step]) --&gt; islice object  Return an iterator whose next() method returns selected values from an" ilk="class" name="islice" />
      <scope ilk="function" line="127" name="repr" />
      <scope attributes="protected __hidden__" ilk="function" line="117" lineend="124" name="_possibly_sorted" returns="list()" signature="_possibly_sorted(x)">
        <variable ilk="argument" name="x" />
      </scope>
    </scope>
    <scope doc="Internal support module for sre" ilk="blob" lang="Python3" name="sre_compile">
      <variable citdl="str" name="ANY" />
      <variable citdl="str" name="ANY_ALL" />
      <variable citdl="str" name="ASSERT" />
      <variable citdl="str" name="ASSERT_NOT" />
      <variable citdl="str" name="AT" />
      <variable citdl="dict" name="ATCODES" />
      <variable citdl="str" name="AT_BEGINNING" />
      <variable citdl="str" name="AT_BEGINNING_LINE" />
      <variable citdl="str" name="AT_BEGINNING_STRING" />
      <variable citdl="str" name="AT_BOUNDARY" />
      <variable citdl="str" name="AT_END" />
      <variable citdl="str" name="AT_END_LINE" />
      <variable citdl="str" name="AT_END_STRING" />
      <variable citdl="dict" name="AT_LOCALE" />
      <variable citdl="str" name="AT_LOC_BOUNDARY" />
      <variable citdl="str" name="AT_LOC_NON_BOUNDARY" />
      <variable citdl="dict" name="AT_MULTILINE" />
      <variable citdl="str" name="AT_NON_BOUNDARY" />
      <variable citdl="dict" name="AT_UNICODE" />
      <variable citdl="str" name="AT_UNI_BOUNDARY" />
      <variable citdl="str" name="AT_UNI_NON_BOUNDARY" />
      <variable citdl="str" name="BIGCHARSET" />
      <variable citdl="str" name="BRANCH" />
      <variable citdl="str" name="CALL" />
      <variable citdl="str" name="CATEGORY" />
      <variable citdl="str" name="CATEGORY_DIGIT" />
      <variable citdl="str" name="CATEGORY_LINEBREAK" />
      <variable citdl="str" name="CATEGORY_LOC_NOT_WORD" />
      <variable citdl="str" name="CATEGORY_LOC_WORD" />
      <variable citdl="str" name="CATEGORY_NOT_DIGIT" />
      <variable citdl="str" name="CATEGORY_NOT_LINEBREAK" />
      <variable citdl="str" name="CATEGORY_NOT_SPACE" />
      <variable citdl="str" name="CATEGORY_NOT_WORD" />
      <variable citdl="str" name="CATEGORY_SPACE" />
      <variable citdl="str" name="CATEGORY_UNI_DIGIT" />
      <variable citdl="str" name="CATEGORY_UNI_LINEBREAK" />
      <variable citdl="str" name="CATEGORY_UNI_NOT_DIGIT" />
      <variable citdl="str" name="CATEGORY_UNI_NOT_LINEBREAK" />
      <variable citdl="str" name="CATEGORY_UNI_NOT_SPACE" />
      <variable citdl="str" name="CATEGORY_UNI_NOT_WORD" />
      <variable citdl="str" name="CATEGORY_UNI_SPACE" />
      <variable citdl="str" name="CATEGORY_UNI_WORD" />
      <variable citdl="str" name="CATEGORY_WORD" />
      <variable citdl="str" name="CHARSET" />
      <variable citdl="dict" name="CHCODES" />
      <variable citdl="dict" name="CH_LOCALE" />
      <variable citdl="dict" name="CH_UNICODE" />
      <variable citdl="str" name="FAILURE" />
      <variable citdl="str" name="GROUPREF" />
      <variable citdl="str" name="GROUPREF_EXISTS" />
      <variable citdl="str" name="GROUPREF_IGNORE" />
      <variable citdl="str" name="IN" />
      <variable citdl="str" name="INFO" />
      <variable citdl="str" name="IN_IGNORE" />
      <variable citdl="str" name="JUMP" />
      <variable citdl="str" name="LITERAL" />
      <variable citdl="str" name="LITERAL_IGNORE" />
      <variable citdl="int" name="MAGIC" />
      <variable citdl="str" name="MARK" />
      <variable citdl="int" line="20" name="MAXCODE" />
      <variable citdl="int" name="MAXREPEAT" />
      <variable citdl="str" name="MAX_REPEAT" />
      <variable citdl="str" name="MAX_UNTIL" />
      <variable citdl="str" name="MIN_REPEAT" />
      <variable citdl="str" name="MIN_REPEAT_ONE" />
      <variable citdl="str" name="MIN_UNTIL" />
      <variable citdl="str" name="NEGATE" />
      <variable citdl="str" name="NOT_LITERAL" />
      <variable citdl="str" name="NOT_LITERAL_IGNORE" />
      <variable citdl="dict" name="OPCODES" />
      <variable citdl="dict" name="OP_IGNORE" />
      <variable citdl="str" name="RANGE" />
      <variable citdl="str" name="REPEAT" />
      <variable citdl="str" name="REPEAT_ONE" />
      <variable citdl="int" name="SRE_FLAG_ASCII" />
      <variable citdl="int" name="SRE_FLAG_DEBUG" />
      <variable citdl="int" name="SRE_FLAG_DOTALL" />
      <variable citdl="int" name="SRE_FLAG_IGNORECASE" />
      <variable citdl="int" name="SRE_FLAG_LOCALE" />
      <variable citdl="int" name="SRE_FLAG_MULTILINE" />
      <variable citdl="int" name="SRE_FLAG_TEMPLATE" />
      <variable citdl="int" name="SRE_FLAG_UNICODE" />
      <variable citdl="int" name="SRE_FLAG_VERBOSE" />
      <variable citdl="int" name="SRE_INFO_CHARSET" />
      <variable citdl="int" name="SRE_INFO_LITERAL" />
      <variable citdl="int" name="SRE_INFO_PREFIX" />
      <variable citdl="str" name="SUBPATTERN" />
      <variable citdl="str" name="SUCCESS" />
      <import module="_sre" />
      <scope ilk="function" line="486" lineend="514" name="compile" returns="_sre.compile()" signature="compile(p, flags=0)">
        <variable citdl="_code()" line="495" name="code" />
        <variable line="490" name="pattern" />
        <variable citdl="sre_parse.parse()" ilk="argument" name="p" />
        <variable citdl="int" ilk="argument" name="flags" />
        <variable citdl="p.pattern.groupdict" line="506" name="groupindex" />
        <variable citdl="list" line="507" name="indexgroup" />
      </scope>
      <scope classrefs="Exception" ilk="class" name="error" />
      <scope ilk="function" line="468" lineend="469" name="isstring" returns="isinstance()" signature="isstring(obj)">
        <variable ilk="argument" name="obj" />
      </scope>
      <scope ilk="function" name="makedict" signature="makedict(list)" />
      <import module="sre_parse" />
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="258" lineend="273" name="_mk_bitmap" returns="list" signature="_mk_bitmap(bits)">
        <variable ilk="argument" name="bits" />
        <variable citdl="list" line="259" name="data" />
        <variable citdl="data.append" line="260" name="dataappend" />
        <variable citdl="tuple" line="262" name="start" />
        <variable citdl="m" line="268" name="v" />
        <variable line="269" name="m" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="301" lineend="353" name="_optimize_unicode" returns="list" signature="_optimize_unicode(charset, fixup)">
        <import line="303" module="array" />
        <variable ilk="argument" name="charset" />
        <variable ilk="argument" name="fixup" />
        <variable citdl="list" line="306" name="charmap" />
        <variable citdl="int" line="307" name="negate" />
        <variable citdl="dict" line="329" name="comps" />
        <variable citdl="list" line="330" name="mapping" />
        <variable citdl="int" line="331" name="block" />
        <variable citdl="list" line="332" name="data" />
        <variable citdl="tuple()" line="334" name="chunk" />
        <variable citdl="comps.setdefault()" line="335" name="new" />
        <variable citdl="list" line="340" name="header" />
        <variable citdl="str" line="342" name="code" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="362" lineend="466" name="_compile_info" signature="_compile_info(code, pattern, flags)">
        <variable ilk="argument" name="code" />
        <variable ilk="argument" name="pattern" />
        <variable ilk="argument" name="flags" />
        <variable citdl="list" line="370" name="prefix" />
        <variable citdl="prefix.append" line="371" name="prefixappend" />
        <variable citdl="int" line="372" name="prefix_skip" />
        <variable citdl="list" line="373" name="charset" />
        <variable citdl="charset.append" line="374" name="charsetappend" />
        <variable citdl="list" line="398" name="c" />
        <variable citdl="c.append" line="399" name="cappend" />
        <variable citdl="code.append" line="430" name="emit" />
        <variable citdl="len()" line="432" name="skip" />
        <variable citdl="SRE_INFO_PREFIX" line="434" name="mask" />
        <variable citdl="list" line="458" name="table" />
      </scope>
      <variable attributes="protected __hidden__" citdl="set()" line="29" name="_SUCCESS_CODES" />
      <scope attributes="protected __hidden__" ilk="function" line="355" lineend="360" name="_simple" returns="bool" signature="_simple(av)">
        <variable ilk="argument" name="av" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="178" lineend="205" name="_compile_charset" signature="_compile_charset(charset, flags, code, fixup=None)">
        <variable ilk="argument" name="charset" />
        <variable ilk="argument" name="flags" />
        <variable ilk="argument" name="code" />
        <variable citdl="_identityfunction" ilk="argument" name="fixup" />
        <variable citdl="code.append" line="180" name="emit" />
      </scope>
      <variable attributes="protected __hidden__" citdl="set()" line="27" name="_LITERAL_CODES" />
      <variable attributes="protected __hidden__" citdl="set()" line="30" name="_ASSERT_CODES" />
      <scope attributes="protected __hidden__" ilk="function" line="24" lineend="25" name="_identityfunction" signature="_identityfunction(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="471" lineend="484" name="_code" returns="list" signature="_code(p, flags)">
        <variable ilk="argument" name="p" />
        <variable citdl="int" ilk="argument" name="flags" />
        <variable citdl="list" line="474" name="code" />
      </scope>
      <variable attributes="protected __hidden__" citdl="set()" line="28" name="_REPEATING_CODES" />
      <scope attributes="protected __hidden__" ilk="function" line="32" lineend="176" name="_compile" signature="_compile(code, pattern, flags)">
        <variable ilk="argument" name="code" />
        <variable ilk="argument" name="pattern" />
        <variable ilk="argument" name="flags" />
        <variable citdl="code.append" line="34" name="emit" />
        <variable attributes="protected" citdl="len" line="35" name="_len" />
        <variable citdl="set()" line="36" name="LITERAL_CODES" />
        <variable citdl="set()" line="37" name="REPEATING_CODES" />
        <variable citdl="set()" line="38" name="SUCCESS_CODES" />
        <variable citdl="set()" line="39" name="ASSERT_CODES" />
        <variable citdl="function" line="51" name="fixup" />
        <variable citdl="_len()" line="56" name="skip" />
        <variable citdl="AT_MULTILINE.get()" line="129" name="av" />
        <variable citdl="list" line="137" name="tail" />
        <variable citdl="tail.append" line="138" name="tailappend" />
        <variable citdl="_len()" line="165" name="skipyes" />
        <variable citdl="_len()" line="169" name="skipno" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="207" lineend="256" name="_optimize_charset" returns="list" signature="_optimize_charset(charset, fixup)">
        <variable ilk="argument" name="charset" />
        <variable ilk="argument" name="fixup" />
        <variable citdl="list" line="209" name="out" />
        <variable citdl="out.append" line="210" name="outappend" />
        <variable citdl="list" line="211" name="charmap" />
        <variable citdl="int" line="228" name="i" />
        <variable citdl="list" line="229" name="runs" />
        <variable citdl="runs.append" line="230" name="runsappend" />
        <variable citdl="int" line="234" name="p" />
        <variable citdl="int" line="235" name="n" />
        <variable citdl="_mk_bitmap()" line="253" name="data" />
      </scope>
    </scope>
    <scope doc="BaseHTTPServer that implements the Python WSGI protocol (PEP 333, rev 1.21)  This is both an example of how WSGI can be implemented, and a basis for running" ilk="blob" lang="Python3" name="wsgiref.simple_server">
      <scope classrefs="StreamRequestHandler" doc="HTTP request handler base class.  The following explanation of HTTP serves to guide you through the" ilk="class" name="BaseHTTPRequestHandler" />
      <scope classrefs="TCPServer" ilk="class" name="HTTPServer" />
      <scope classrefs="SimpleHandler" ilk="class" line="27" lineend="37" name="ServerHandler">
        <scope ilk="function" line="31" lineend="37" name="close" signature="close()">
          <variable citdl="ServerHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="str" line="29" name="server_software" />
      </scope>
      <scope classrefs="BaseHandler" doc="Handler that&apos;s just initialized with streams, environment, etc.  This handler subclass is intended for synchronous HTTP/1.0 origin servers," ilk="class" name="SimpleHandler" />
      <scope classrefs="BaseHTTPRequestHandler" ilk="class" line="84" lineend="138" name="WSGIRequestHandler">
        <scope ilk="function" line="88" lineend="122" name="get_environ" returns="self.server.base_environ.copy()" signature="get_environ()">
          <variable citdl="WSGIRequestHandler" ilk="argument" name="self" />
          <variable citdl="self.server.base_environ.copy()" line="89" name="env" />
          <variable citdl="self.path" line="95" name="path" />
          <variable citdl="str" line="95" name="query" />
          <variable citdl="self.address_string()" line="100" name="host" />
          <variable citdl="self.headers.get()" line="110" name="length" />
          <variable line="115" name="k" />
          <variable citdl="v.strip()" line="115" name="v" />
        </scope>
        <scope doc="Handle a single HTTP request" ilk="function" line="127" lineend="138" name="handle" signature="handle()">
          <variable citdl="WSGIRequestHandler" ilk="argument" name="self" />
          <variable citdl="ServerHandler" line="134" name="handler" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.rfile.readline()" line="130" name="raw_requestline" />
        <variable citdl="str" line="86" name="server_version" />
        <scope ilk="function" line="124" lineend="125" name="get_stderr" returns="sys.stderr" signature="get_stderr()">
          <variable citdl="WSGIRequestHandler" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="HTTPServer" doc="BaseHTTPServer that implements the Python WSGI protocol" ilk="class" line="43" lineend="68" name="WSGIServer">
        <scope ilk="function" line="54" lineend="62" name="setup_environ" signature="setup_environ()">
          <variable citdl="WSGIServer" ilk="argument" name="self" />
          <variable citdl="dict" line="56" name="env" />
        </scope>
        <variable line="47" name="application" />
        <scope doc="Override server_bind to store the server name." ilk="function" line="49" lineend="52" name="server_bind" signature="server_bind()">
          <variable citdl="WSGIServer" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="67" lineend="68" name="set_app" signature="set_app(application)">
          <variable citdl="WSGIServer" ilk="argument" name="self" />
          <variable ilk="argument" name="application" />
        </scope>
        <scope ilk="function" line="64" lineend="65" name="get_app" signature="get_app()">
          <variable citdl="WSGIServer" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="list" line="19" name="__all__" />
      <variable citdl="str" line="18" name="__version__" />
      <scope ilk="function" line="165" lineend="174" name="demo_app" returns="list" signature="demo_app(environ, start_response)">
        <variable ilk="argument" name="start_response" />
        <variable citdl="sorted()" line="170" name="h" />
        <variable ilk="argument" name="environ" />
        <variable citdl="StringIO()" line="167" name="stdout" />
      </scope>
      <scope doc="Create a new WSGI server listening on `host` and `port` for `app`" ilk="function" line="177" lineend="183" name="make_server" returns="server_class()" signature="make_server(host, port, app, server_class=&lt;class &apos;wsgiref.simple_server.WSGIServer&apos;&gt;, handler_class=&lt;class &apos;wsgiref.simple_server.WSGIRequestHandler&apos;&gt;)">
        <variable citdl="WSGIServer" ilk="argument" name="server_class" />
        <variable ilk="argument" name="app" />
        <variable citdl="server_class()" line="181" name="server" />
        <variable ilk="argument" name="host" />
        <variable citdl="WSGIRequestHandler" ilk="argument" name="handler_class" />
        <variable ilk="argument" name="port" />
      </scope>
      <variable citdl="str" line="22" name="server_version" />
      <variable citdl="str" line="24" name="software_version" />
      <import module="sys" />
      <variable citdl="str" line="23" name="sys_version" />
      <import module="urllib" />
      <variable attributes="__hidden__" citdl="make_server()" line="187" name="httpd" />
      <variable attributes="__hidden__" citdl="httpd.socket.getsockname()" line="188" name="sa" />
    </scope>
    <scope doc="Fixer for import statements. If spam is being imported from the local directory, this import:     from spam import eggs" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_import">
      <scope classrefs="BaseFix" ilk="class" line="38" lineend="89" name="FixImport">
        <variable citdl="str" line="40" name="PATTERN" />
        <scope ilk="function" line="78" lineend="89" name="probably_a_local_import" returns="bool" signature="probably_a_local_import(imp_name)">
          <variable citdl="FixImport" ilk="argument" name="self" />
          <variable ilk="argument" name="imp_name" />
          <variable citdl="join()" line="80" name="base_path" />
        </scope>
        <scope ilk="function" line="46" lineend="76" name="transform" returns="FromImport()" signature="transform(node, results)">
          <variable citdl="FixImport" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="47" name="imp" />
          <variable citdl="False" line="60" name="have_local" />
          <variable citdl="False" line="61" name="have_absolute" />
          <variable citdl="FromImport()" line="74" name="new" />
        </scope>
      </scope>
      <scope doc="Return an import statement in the form: from package import name_leafs" ilk="function" name="FromImport" signature="FromImport(package_name, name_leafs)" />
      <scope doc="Returns the directory component of a pathname" ilk="function" name="dirname" signature="dirname(p)" />
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <import module="fixer_base" />
      <scope doc="Join two or more pathname components, inserting &quot;\&quot; as needed." ilk="function" name="join" signature="join(a, *p)" />
      <variable citdl="str" name="sep" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
      <scope doc="Walks over all the names imported in a dotted_as_names node." ilk="function" line="19" lineend="35" name="traverse_imports" signature="traverse_imports(names)">
        <variable citdl="pending.pop()" line="25" name="node" />
        <variable ilk="argument" name="names" />
        <variable citdl="list" line="23" name="pending" />
      </scope>
    </scope>
    <scope ilk="blob" lang="Python3" name="_hashlib">
      <scope doc="Return a new hash object using the named algorithm." ilk="function" name="new" />
      <scope doc="Returns a md5 hash object; optionally initialized with a string" ilk="function" name="openssl_md5" />
      <scope doc="Returns a sha1 hash object; optionally initialized with a string" ilk="function" name="openssl_sha1" />
      <scope doc="Returns a sha224 hash object; optionally initialized with a string" ilk="function" name="openssl_sha224" />
      <scope doc="Returns a sha256 hash object; optionally initialized with a string" ilk="function" name="openssl_sha256" />
      <scope doc="Returns a sha384 hash object; optionally initialized with a string" ilk="function" name="openssl_sha384" />
      <scope doc="Returns a sha512 hash object; optionally initialized with a string" ilk="function" name="openssl_sha512" />
    </scope>
    <scope doc="Fixer for print.  Change:" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_print">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" ilk="class" line="29" lineend="85" name="FixPrint">
        <variable citdl="str" line="31" name="PATTERN" />
        <scope ilk="function" line="75" lineend="85" name="add_kwarg" signature="add_kwarg(l_nodes, s_kwd, n_expr)">
          <variable citdl="FixPrint" ilk="argument" name="self" />
          <variable ilk="argument" name="l_nodes" />
          <variable ilk="argument" name="s_kwd" />
          <variable ilk="argument" name="n_expr" />
          <variable citdl="pytree.Node()" line="78" name="n_argument" />
        </scope>
        <scope ilk="function" line="35" lineend="73" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixPrint" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="results.get()" line="38" name="bare_print" />
          <variable citdl="list" line="46" name="args" />
          <variable line="52" name="sep" />
          <variable citdl="str" line="55" name="end" />
          <variable line="58" name="file" />
          <variable citdl="list" line="61" name="l_args" />
          <variable citdl="Call()" line="71" name="n_stmt" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A string leaf" ilk="function" name="String" signature="String(string, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Does the node represent a tuple literal?" ilk="function" name="is_tuple" signature="is_tuple(node)" />
      <variable citdl="NodePattern" line="24" name="parend_expr" />
      <import module="patcomp" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="Module difflib -- helpers for computing deltas between objects.  Function get_close_matches(word, possibilities, n=3, cutoff=0.6):" ilk="blob" lang="Python3" name="difflib">
      <scope classrefs="object" doc="Differ is a class for comparing sequences of lines of text, and producing human-readable differences or deltas.  Differ uses SequenceMatcher both to compare sequences of lines, and to compare" ilk="class" line="765" lineend="1087" name="Differ">
        <variable attributes="__instancevar__" line="880" name="linejunk" />
        <variable attributes="__instancevar__" line="881" name="charjunk" />
        <scope attributes="protected" ilk="function" line="930" lineend="943" name="_plain_replace" signature="_plain_replace(a, alo, ahi, b, blo, bhi)">
          <variable citdl="Differ" ilk="argument" name="self" />
          <variable ilk="argument" name="a" />
          <variable ilk="argument" name="alo" />
          <variable ilk="argument" name="ahi" />
          <variable ilk="argument" name="b" />
          <variable ilk="argument" name="blo" />
          <variable ilk="argument" name="bhi" />
          <variable citdl="_dump()" line="935" name="first" />
          <variable citdl="_dump()" line="936" name="second" />
        </scope>
        <scope doc="Compare two sequences of lines; generate the resulting delta." ilk="function" line="883" lineend="923" name="compare" signature="compare(a, b)">
          <variable citdl="Differ" ilk="argument" name="self" />
          <variable ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
          <variable citdl="SequenceMatcher" line="909" name="cruncher" />
          <variable citdl="self._dump()" line="912" name="g" />
        </scope>
        <scope attributes="protected" doc="Generate comparison results for a same-tagged range." ilk="function" line="925" lineend="928" name="_dump" signature="_dump(tag, x, lo, hi)">
          <variable citdl="Differ" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="lo" />
          <variable ilk="argument" name="hi" />
        </scope>
        <scope attributes="protected" doc="Format &quot;?&quot; output and deal with leading tabs." ilk="function" line="1056" lineend="1087" name="_qformat" signature="_qformat(aline, bline, atags, btags)">
          <variable citdl="Differ" ilk="argument" name="self" />
          <variable ilk="argument" name="aline" />
          <variable ilk="argument" name="bline" />
          <variable ilk="argument" name="atags" />
          <variable ilk="argument" name="btags" />
          <variable citdl="min()" line="1074" name="common" />
        </scope>
        <scope attributes="protected" ilk="function" line="1043" lineend="1054" name="_fancy_helper" signature="_fancy_helper(a, alo, ahi, b, blo, bhi)">
          <variable citdl="Differ" ilk="argument" name="self" />
          <variable ilk="argument" name="a" />
          <variable ilk="argument" name="alo" />
          <variable ilk="argument" name="ahi" />
          <variable ilk="argument" name="b" />
          <variable ilk="argument" name="blo" />
          <variable ilk="argument" name="bhi" />
          <variable citdl="_dump()" line="1044" name="g" />
        </scope>
        <scope attributes="protected" doc="When replacing one block of lines with another, search the blocks for *similar* lines; the best-matching pair (if any) is used as a synch point, and intraline difference marking is done on the similar pair." ilk="function" line="945" lineend="1041" name="_fancy_replace" signature="_fancy_replace(a, alo, ahi, b, blo, bhi)">
          <variable citdl="Differ" ilk="argument" name="self" />
          <variable ilk="argument" name="a" />
          <variable ilk="argument" name="alo" />
          <variable ilk="argument" name="ahi" />
          <variable ilk="argument" name="b" />
          <variable ilk="argument" name="blo" />
          <variable ilk="argument" name="bhi" />
          <variable citdl="float" line="966" name="cutoff" />
          <variable citdl="float" line="966" name="best_ratio" />
          <variable citdl="SequenceMatcher" line="967" name="cruncher" />
          <variable citdl="i" line="968" name="eqi" />
          <variable citdl="j" line="968" name="eqj" />
          <variable line="974" name="bj" />
          <variable line="977" name="ai" />
          <variable citdl="j" line="992" name="best_j" />
          <variable citdl="i" line="992" name="best_i" />
          <variable line="1014" name="aelt" />
          <variable line="1014" name="belt" />
          <variable citdl="str" line="1017" name="atags" />
          <variable citdl="bj1" line="1020" name="lb" />
          <variable citdl="ai2" line="1020" name="la" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a text differencer, with optional filters." ilk="function" line="859" lineend="881" name="__init__" signature="Differ(linejunk=None, charjunk=None)">
          <variable citdl="Differ" ilk="argument" name="self" />
          <variable ilk="argument" name="linejunk" />
          <variable ilk="argument" name="charjunk" />
        </scope>
      </scope>
      <scope classrefs="object" doc="For producing HTML side by side comparison with change highlights.  This class can be used to create an HTML table (or a complete HTML file" ilk="class" line="1637" lineend="1983" name="HtmlDiff">
        <scope attributes="protected" doc="Create unique anchor prefixes" ilk="function" line="1850" lineend="1859" name="_make_prefix" signature="_make_prefix()">
          <variable citdl="HtmlDiff" ilk="argument" name="self" />
          <variable citdl="str" line="1855" name="fromprefix" />
          <variable citdl="str" line="1856" name="toprefix" />
        </scope>
        <scope attributes="protected" doc="Builds list of text lines by splitting text lines at wrap point" ilk="function" line="1723" lineend="1776" name="_split_line" signature="_split_line(data_list, line_num, text)">
          <variable citdl="HtmlDiff" ilk="argument" name="self" />
          <variable ilk="argument" name="data_list" />
          <variable ilk="argument" name="line_num" />
          <variable ilk="argument" name="text" />
          <variable citdl="len()" line="1738" name="size" />
          <variable line="1739" name="max" />
          <variable citdl="int" line="1746" name="i" />
          <variable citdl="int" line="1747" name="n" />
          <variable citdl="str" line="1748" name="mark" />
          <variable citdl="list" line="1762" name="line1" />
          <variable citdl="list" line="1763" name="line2" />
        </scope>
        <variable attributes="protected __instancevar__" line="1673" name="_linejunk" />
        <scope attributes="protected" doc="Returns HTML markup of &quot;from&quot; / &quot;to&quot; text lines" ilk="function" line="1827" lineend="1848" name="_format_line" returns="tuple" signature="_format_line(side, flag, linenum, text)">
          <variable citdl="HtmlDiff" ilk="argument" name="self" />
          <variable ilk="argument" name="side" />
          <variable ilk="argument" name="flag" />
          <variable citdl="str" ilk="argument" name="linenum" />
          <variable ilk="argument" name="text" />
          <variable citdl="str" line="1837" name="id" />
        </scope>
        <variable attributes="protected" line="1655" name="_table_template" />
        <variable attributes="protected" line="1654" name="_styles" />
        <scope attributes="protected" doc="Returns from/to line lists with tabs expanded and newlines removed." ilk="function" line="1700" lineend="1721" name="_tab_newline_replace" returns="tuple" signature="_tab_newline_replace(fromlines, tolines)">
          <variable citdl="HtmlDiff" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="fromlines" />
          <variable citdl="list" ilk="argument" name="tolines" />
          <scope ilk="function" line="1710" lineend="1718" name="expand_tabs" signature="expand_tabs(line)">
            <variable citdl="line.replace()" ilk="argument" name="line" />
          </scope>
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="1859" name="_prefix" />
        <scope attributes="protected" doc="Makes list of &quot;next&quot; links" ilk="function" line="1861" lineend="1906" name="_convert_flags" returns="tuple" signature="_convert_flags(fromlist, tolist, flaglist, context, numlines)">
          <variable citdl="HtmlDiff" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="fromlist" />
          <variable citdl="list" ilk="argument" name="tolist" />
          <variable citdl="list" ilk="argument" name="flaglist" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="numlines" />
          <variable line="1865" name="toprefix" />
          <variable citdl="list" line="1868" name="next_id" />
          <variable citdl="list" line="1869" name="next_href" />
          <variable citdl="int" line="1870" name="num_chg" />
          <variable citdl="False" line="1870" name="in_change" />
          <variable citdl="int" line="1871" name="last" />
          <variable citdl="max()" line="1880" name="i" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="IS_CHARACTER_JUNK" line="1674" name="_charjunk" />
        <scope doc="Returns HTML table of side by side comparison with change highlights" ilk="function" line="1908" lineend="1983" name="make_table" signature="make_table(fromlines, tolines, fromdesc=&apos;&apos;, todesc=&apos;&apos;, context=False, numlines=5)">
          <variable citdl="HtmlDiff" ilk="argument" name="self" />
          <variable ilk="argument" name="fromlines" />
          <variable ilk="argument" name="tolines" />
          <variable citdl="str" ilk="argument" name="fromdesc" />
          <variable citdl="str" ilk="argument" name="todesc" />
          <variable citdl="False" ilk="argument" name="context" />
          <variable citdl="int" ilk="argument" name="numlines" />
          <variable citdl="int" line="1936" name="context_lines" />
          <variable citdl="_mdiff()" line="1939" name="diffs" />
          <variable citdl="list" line="1953" name="s" />
          <variable citdl="str" line="1954" name="fmt" />
          <variable citdl="str" line="1966" name="header_row" />
          <variable citdl="dict()" line="1974" name="table" />
        </scope>
        <scope doc="Returns HTML file of side by side comparison with change highlights" ilk="function" line="1676" lineend="1698" name="make_file" returns="dict()" signature="make_file(fromlines, tolines, fromdesc=&apos;&apos;, todesc=&apos;&apos;, context=False, numlines=5)">
          <variable citdl="HtmlDiff" ilk="argument" name="self" />
          <variable ilk="argument" name="fromlines" />
          <variable ilk="argument" name="tolines" />
          <variable citdl="str" ilk="argument" name="fromdesc" />
          <variable citdl="str" ilk="argument" name="todesc" />
          <variable citdl="False" ilk="argument" name="context" />
          <variable citdl="int" ilk="argument" name="numlines" />
        </scope>
        <variable attributes="protected" line="1656" name="_legend" />
        <scope attributes="protected" doc="Returns iterator that splits (wraps) mdiff text lines" ilk="function" line="1778" lineend="1804" name="_line_wrapper" signature="_line_wrapper(diffs)">
          <variable citdl="HtmlDiff" ilk="argument" name="self" />
          <variable ilk="argument" name="diffs" />
          <variable citdl="list" line="1790" name="fromlist" />
          <variable citdl="list" line="1790" name="tolist" />
          <variable citdl="fromlist.pop()" line="1797" name="fromdata" />
          <variable citdl="tolist.pop()" line="1801" name="todata" />
        </scope>
        <variable attributes="protected __instancevar__" line="1672" name="_wrapcolumn" />
        <variable attributes="protected" line="1653" name="_file_template" />
        <variable attributes="protected __instancevar__" citdl="int" line="1671" name="_tabsize" />
        <scope attributes="protected" doc="Collects mdiff output into separate lists" ilk="function" line="1806" lineend="1825" name="_collect_lines" returns="tuple" signature="_collect_lines(diffs)">
          <variable citdl="HtmlDiff" ilk="argument" name="self" />
          <variable ilk="argument" name="diffs" />
          <variable citdl="list" line="1813" name="fromlist" />
          <variable citdl="list" line="1813" name="tolist" />
          <variable citdl="list" line="1813" name="flaglist" />
        </scope>
        <scope attributes="__ctor__" doc="HtmlDiff instance initializer" ilk="function" line="1659" lineend="1674" name="__init__" signature="HtmlDiff(tabsize=8, wrapcolumn=None, linejunk=None, charjunk=IS_CHARACTER_JUNK)">
          <variable citdl="HtmlDiff" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="tabsize" />
          <variable ilk="argument" name="wrapcolumn" />
          <variable ilk="argument" name="linejunk" />
          <variable citdl="IS_CHARACTER_JUNK" ilk="argument" name="charjunk" />
        </scope>
        <variable attributes="protected" citdl="int" line="1657" name="_default_prefix" />
      </scope>
      <scope doc="Return 1 for ignorable character: iff `ch` is a space or tab." ilk="function" line="1124" lineend="1140" name="IS_CHARACTER_JUNK" returns="bool" signature="IS_CHARACTER_JUNK(ch, ws=&apos; \t&apos;)">
        <variable ilk="argument" name="ch" />
        <variable citdl="str" ilk="argument" name="ws" />
      </scope>
      <scope doc="Return 1 for ignorable line: iff `line` is blank or contains a single &apos;#&apos;." ilk="function" line="1108" lineend="1122" name="IS_LINE_JUNK" returns="bool" signature="IS_LINE_JUNK(line, pat=&lt;built-in method match of _sre.SRE_Pattern object at 0x03430330&gt;)">
        <variable ilk="argument" name="line" />
        <variable ilk="argument" name="pat" />
      </scope>
      <scope classrefs="tuple" doc="Match(a, b, size)" ilk="class" line="38" name="Match" />
      <scope classrefs="object" doc="SequenceMatcher is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are hashable.  The basic algorithm predates, and is a little fancier than, an algorithm" ilk="class" line="45" lineend="700" name="SequenceMatcher">
        <variable attributes="__instancevar__" line="213" name="a" />
        <variable attributes="__instancevar__" citdl="list" line="563" name="opcodes" />
        <variable attributes="__instancevar__" line="277" name="b" />
        <scope doc="Return a measure of the sequences&apos; similarity (float in [0,1])." ilk="function" line="636" lineend="659" name="ratio" returns="_calculate_ratio()" signature="ratio()">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable citdl="sum()" line="658" name="matches" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="279" name="fullbcount" />
        <scope doc="Isolate change clusters by eliminating ranges with no changes." ilk="function" line="586" lineend="634" name="get_grouped_opcodes" signature="get_grouped_opcodes(n=3)">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="n" />
          <variable citdl="list" line="611" name="codes" />
          <variable citdl="int" line="622" name="nn" />
          <variable citdl="list" line="623" name="group" />
          <variable citdl="max()" line="631" name="i1" />
          <variable citdl="max()" line="631" name="j1" />
        </scope>
        <scope doc="Return list of triples describing matching subsequences." ilk="function" line="460" lineend="529" name="get_matching_blocks" returns="map()" signature="get_matching_blocks()">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable citdl="len()" line="481" name="lb" />
          <variable citdl="len()" line="481" name="la" />
          <variable citdl="list" line="489" name="queue" />
          <variable citdl="list" line="490" name="matching_blocks" />
          <variable citdl="int" line="508" name="i1" />
          <variable citdl="list" line="509" name="non_adjacent" />
          <variable citdl="j2" line="523" name="j1" />
          <variable citdl="k2" line="523" name="k1" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="252" name="matching_blocks" />
        <scope doc="Set the second sequence to be compared." ilk="function" line="254" lineend="280" name="set_seq2" signature="set_seq2(b)">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="Set the two sequences to be compared." ilk="function" line="216" lineend="226" name="set_seqs" signature="set_seqs(a, b)">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="a" />
          <variable ilk="argument" name="b" />
        </scope>
        <scope doc="Return an upper bound on ratio() relatively quickly." ilk="function" line="661" lineend="688" name="quick_ratio" returns="_calculate_ratio()" signature="quick_ratio()">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable citdl="dict" line="675" name="fullbcount" />
          <variable citdl="dict" line="678" name="avail" />
          <variable citdl="int" line="679" name="matches" />
          <variable citdl="avail.__contains__" line="679" name="availhas" />
          <variable citdl="fullbcount.get()" line="682" name="numb" />
        </scope>
        <scope doc="Return list of 5-tuples describing how to turn a into b." ilk="function" line="531" lineend="584" name="get_opcodes" returns="self.opcodes" signature="get_opcodes()">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable citdl="int" line="562" name="i" />
          <variable citdl="str" line="570" name="tag" />
          <variable citdl="size" line="579" name="j" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="312" name="b2j" />
        <scope attributes="__ctor__" doc="Construct a SequenceMatcher." ilk="function" line="153" lineend="214" name="__init__" signature="SequenceMatcher(isjunk=None, a=&apos;&apos;, b=&apos;&apos;)">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="isjunk" />
          <variable citdl="str" ilk="argument" name="a" />
          <variable citdl="str" ilk="argument" name="b" />
        </scope>
        <variable attributes="__instancevar__" citdl="junkdict.__contains__" line="347" name="isbjunk" />
        <variable attributes="__instancevar__" line="212" name="isjunk" />
        <scope doc="Return an upper bound on ratio() very quickly." ilk="function" line="690" lineend="700" name="real_quick_ratio" returns="_calculate_ratio()" signature="real_quick_ratio()">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable citdl="len()" line="697" name="lb" />
          <variable citdl="len()" line="697" name="la" />
        </scope>
        <scope doc="Find longest matching block in a[alo:ahi] and b[blo:bhi]." ilk="function" line="350" lineend="458" name="find_longest_match" returns="Match()" signature="find_longest_match(alo, ahi, blo, bhi)">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="alo" />
          <variable ilk="argument" name="ahi" />
          <variable ilk="argument" name="blo" />
          <variable ilk="argument" name="bhi" />
          <variable line="406" name="a" />
          <variable citdl="junkdict.__contains__" line="406" name="isbjunk" />
          <variable line="406" name="b" />
          <variable citdl="dict" line="406" name="b2j" />
          <variable citdl="SequenceMatcher.find_longest_match.j2lenget()" line="407" name="bestj" />
          <variable citdl="SequenceMatcher.find_longest_match.j2lenget()" line="407" name="besti" />
          <variable citdl="SequenceMatcher.find_longest_match.j2lenget()" line="407" name="bestsize" />
          <variable citdl="dict" line="411" name="j2len" />
          <variable citdl="list" line="412" name="nothing" />
          <variable citdl="j2len.get" line="416" name="j2lenget" />
          <variable citdl="dict" line="417" name="newj2len" />
          <variable citdl="SequenceMatcher.find_longest_match.j2lenget()" line="424" name="k" />
        </scope>
        <scope attributes="private" ilk="function" line="299" lineend="348" name="__chain_b" signature="__chain_b()">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable line="310" name="b" />
          <variable citdl="len()" line="311" name="n" />
          <variable citdl="dict" line="313" name="populardict" />
          <variable line="316" name="indices" />
          <variable line="333" name="isjunk" />
          <variable citdl="dict" line="334" name="junkdict" />
        </scope>
        <scope doc="Set the first sequence to be compared." ilk="function" line="228" lineend="252" name="set_seq1" signature="set_seq1(a)">
          <variable citdl="SequenceMatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="a" />
        </scope>
        <variable attributes="__instancevar__" citdl="populardict.__contains__" line="348" name="isbpopular" />
      </scope>
      <variable citdl="list" line="31" name="__all__" />
      <scope doc="Compare two sequences of lines; generate the delta as a context diff." ilk="function" line="1205" lineend="1279" name="context_diff" signature="context_diff(a, b, fromfile=&apos;&apos;, tofile=&apos;&apos;, fromfiledate=&apos;&apos;, tofiledate=&apos;&apos;, n=3, lineterm=&apos;\n&apos;)">
        <variable ilk="argument" name="a" />
        <variable citdl="str" ilk="argument" name="tofiledate" />
        <variable citdl="True" line="1250" name="started" />
        <variable citdl="int" ilk="argument" name="n" />
        <variable ilk="argument" name="b" />
        <variable citdl="str" ilk="argument" name="tofile" />
        <variable citdl="str" ilk="argument" name="lineterm" />
        <variable citdl="str" ilk="argument" name="fromfiledate" />
        <variable citdl="list" line="1263" name="visiblechanges" />
        <variable citdl="str" ilk="argument" name="fromfile" />
        <variable citdl="dict" line="1251" name="prefixmap" />
      </scope>
      <scope doc="Use SequenceMatcher to return list of the best &quot;good enough&quot; matches." ilk="function" line="702" lineend="748" name="get_close_matches" returns="list" signature="get_close_matches(word, possibilities, n=3, cutoff=0.6)">
        <variable citdl="float" ilk="argument" name="cutoff" />
        <variable ilk="argument" name="word" />
        <variable citdl="int" ilk="argument" name="n" />
        <variable ilk="argument" name="possibilities" />
        <variable citdl="SequenceMatcher" line="736" name="s" />
        <variable citdl="list" line="735" name="result" />
      </scope>
      <import module="heapq" />
      <scope doc="Compare `a` and `b` (lists of strings); return a `Differ`-style delta." ilk="function" line="1281" lineend="1315" name="ndiff" signature="ndiff(a, b, linejunk=None, charjunk=&lt;function IS_CHARACTER_JUNK at 0x0343AED0&gt;)">
        <variable ilk="argument" name="a" />
        <variable ilk="argument" name="linejunk" />
        <variable citdl="IS_CHARACTER_JUNK" ilk="argument" name="charjunk" />
        <variable ilk="argument" name="b" />
      </scope>
      <scope doc="Generate one of the two sequences that generated a delta." ilk="function" line="1987" lineend="2017" name="restore" signature="restore(delta, which)">
        <variable citdl="tuple" line="2014" name="prefixes" />
        <variable line="2010" name="tag" />
        <variable ilk="argument" name="which" />
        <variable ilk="argument" name="delta" />
      </scope>
      <scope doc="Compare two sequences of lines; generate the delta as a unified diff." ilk="function" line="1143" lineend="1202" name="unified_diff" signature="unified_diff(a, b, fromfile=&apos;&apos;, tofile=&apos;&apos;, fromfiledate=&apos;&apos;, tofiledate=&apos;&apos;, n=3, lineterm=&apos;\n&apos;)">
        <variable ilk="argument" name="a" />
        <variable citdl="str" ilk="argument" name="tofiledate" />
        <variable citdl="False" line="1184" name="started" />
        <variable line="1190" name="i2" />
        <variable line="1190" name="j1" />
        <variable line="1190" name="j2" />
        <variable citdl="int" ilk="argument" name="n" />
        <variable line="1190" name="i1" />
        <variable ilk="argument" name="b" />
        <variable citdl="str" ilk="argument" name="tofile" />
        <variable citdl="str" ilk="argument" name="lineterm" />
        <variable citdl="str" ilk="argument" name="fromfile" />
        <variable citdl="str" ilk="argument" name="fromfiledate" />
      </scope>
      <scope attributes="protected __hidden__" doc="Return number of `ch` characters at the start of `line`." ilk="function" line="750" lineend="763" name="_count_leading" returns="int" signature="_count_leading(line, ch)">
        <variable ilk="argument" name="line" />
        <variable ilk="argument" name="ch" />
        <variable citdl="int" line="760" name="i" />
        <variable citdl="len()" line="760" name="n" />
      </scope>
      <variable attributes="protected __hidden__" citdl="str" line="1610" name="_table_template" />
      <variable attributes="protected __hidden__" citdl="str" line="1601" name="_styles" />
      <scope attributes="protected __hidden__" doc="Returns generator yielding marked up from/to side by side differences." ilk="function" line="1317" lineend="1578" name="_mdiff" signature="_mdiff(fromlines, tolines, context=None, linejunk=None, charjunk=IS_CHARACTER_JUNK)">
        <import line="1351" module="re" />
        <variable ilk="argument" name="fromlines" />
        <variable ilk="argument" name="tolines" />
        <variable ilk="argument" name="context" />
        <variable ilk="argument" name="linejunk" />
        <variable citdl="IS_CHARACTER_JUNK" ilk="argument" name="charjunk" />
        <variable citdl="re.compile()" line="1354" name="change_re" />
        <variable citdl="ndiff()" line="1357" name="diff_lines_iterator" />
        <scope attributes="protected" doc="Returns line of text with user&apos;s change markup and line formatting." ilk="function" line="1359" lineend="1413" name="_make_line" returns="tuple" signature="_make_line(lines, format_key, side, num_lines=[0, 0])">
          <variable ilk="argument" name="lines" />
          <variable ilk="argument" name="format_key" />
          <variable ilk="argument" name="side" />
          <variable citdl="list" ilk="argument" name="num_lines" />
          <variable citdl="list" line="1389" name="text" />
          <variable citdl="lines.pop()" line="1389" name="markers" />
          <variable citdl="list" line="1391" name="sub_info" />
          <scope ilk="function" line="1392" lineend="1394" name="record_sub_info" returns="match_object.group()" signature="record_sub_info(match_object, sub_info=sub_info)">
            <variable ilk="argument" name="match_object" />
            <variable citdl="list" ilk="argument" name="sub_info" />
          </scope>
        </scope>
        <scope attributes="protected" doc="Yields from/to lines of text with a change indication." ilk="function" line="1415" lineend="1504" name="_line_iterator" signature="_line_iterator()">
          <variable citdl="list" line="1429" name="lines" />
          <variable citdl="int" line="1430" name="num_blanks_to_yield" />
          <variable citdl="int" line="1430" name="num_blanks_pending" />
          <variable citdl="str.join()" line="1440" name="s" />
          <variable citdl="_make_line()" line="1459" name="to_line" />
          <variable citdl="_make_line()" line="1459" name="from_line" />
        </scope>
        <scope attributes="protected" doc="Yields from/to lines of text with a change indication." ilk="function" line="1506" lineend="1532" name="_line_pair_iterator" signature="_line_pair_iterator()">
          <variable citdl="_line_iterator()" line="1519" name="line_iterator" />
          <variable citdl="list" line="1520" name="fromlines" />
          <variable citdl="list" line="1520" name="tolines" />
        </scope>
        <variable citdl="_line_pair_iterator()" line="1536" name="line_pair_iterator" />
        <variable citdl="int" line="1544" name="lines_to_write" />
        <variable citdl="int" line="1549" name="index" />
        <variable citdl="list" line="1549" name="contextLines" />
        <variable citdl="False" line="1550" name="found_diff" />
        <variable line="1553" name="i" />
      </scope>
      <variable attributes="protected __hidden__" citdl="str" line="1581" name="_file_template" />
      <variable attributes="protected __hidden__" citdl="str" line="1620" name="_legend" />
      <scope attributes="protected __hidden__" ilk="function" line="40" lineend="43" name="_calculate_ratio" returns="float" signature="_calculate_ratio(matches, length)">
        <variable ilk="argument" name="matches" />
        <variable ilk="argument" name="length" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="2019" lineend="2021" name="_test" returns="doctest.testmod()" signature="_test()">
        <import line="2020" module="doctest" />
        <import line="2020" module="difflib" />
      </scope>
    </scope>
    <scope doc="Utilities to get a password and/or the current user name.  getpass(prompt[, stream]) - Prompt for a password, with echo turned off." ilk="blob" lang="Python3" name="getpass">
      <scope classrefs="UserWarning" ilk="class" line="23" lineend="23" name="GetPassWarning" />
      <variable citdl="list" line="20" name="__all__" />
      <scope ilk="function" line="112" lineend="118" name="fallback_getpass" returns="_raw_input()" signature="fallback_getpass(prompt=&apos;Password: &apos;, stream=None)">
        <variable citdl="sys.stderr" line="116" name="stream" />
      </scope>
      <scope doc="Prompt for password with echo off, using Windows getch()." ilk="function" line="172" name="getpass" signature="getpass(prompt=&apos;Password: &apos;, stream=None)" />
      <scope doc="Get the username from the environment or password database." ilk="function" line="140" lineend="157" name="getuser" returns="os.environ.get()" signature="getuser()">
        <variable citdl="os.environ.get()" line="151" name="user" />
      </scope>
      <import module="msvcrt" />
      <import module="os" />
      <import module="sys" />
      <scope doc="Prompt for a password, with echo turned off." ilk="function" line="26" lineend="86" name="unix_getpass" returns="_raw_input()" signature="unix_getpass(prompt=&apos;Password: &apos;, stream=None)">
        <variable citdl="os.fdopen()" line="42" name="tty" />
        <variable citdl="termios.tcgetattr()" line="63" name="old" />
        <variable citdl="os.fdopen()" line="49" name="stream" />
        <variable citdl="termios.TCSAFLUSH" line="66" name="tcsetattr_flags" />
        <variable citdl="fallback_getpass()" line="55" name="passwd" />
        <variable citdl="sys.stdin.fileno()" line="41" name="fd" />
        <variable citdl="list" line="64" name="new" />
        <variable citdl="sys.stdin" line="47" name="input" />
      </scope>
      <import module="warnings" />
      <scope doc="Prompt for password with echo off, using Windows getch()." ilk="function" line="89" lineend="109" name="win_getpass" returns="msvcrt.getwch()" signature="win_getpass(prompt=&apos;Password: &apos;, stream=None)">
        <variable citdl="msvcrt.getwch()" line="98" name="c" />
        <variable citdl="list" line="96" name="pw" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="121" lineend="137" name="_raw_input" returns="input.readline()" signature="_raw_input(prompt=&apos;&apos;, stream=None, input=None)">
        <variable citdl="str()" ilk="argument" name="prompt" />
        <variable citdl="sys.stderr" ilk="argument" name="stream" />
        <variable citdl="sys.stdin" ilk="argument" name="input" />
        <variable citdl="input.readline()" line="132" name="line" />
      </scope>
    </scope>
    <scope doc="Helper to provide extensibility for pickle.  This is only useful to add pickle support for extension types defined in" ilk="blob" lang="Python3" name="copyreg">
      <variable citdl="list" line="7" name="__all__" />
      <scope ilk="function" line="87" lineend="88" name="__newobj__" returns="cls.__new__()" signature="__newobj__(cls, *args)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="cls" />
      </scope>
      <scope doc="Register an extension code." ilk="function" line="152" lineend="168" name="add_extension" signature="add_extension(module, name, code)">
        <variable citdl="tuple" line="157" name="key" />
        <variable citdl="int()" ilk="argument" name="code" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="module" />
      </scope>
      <scope ilk="function" line="182" lineend="183" name="clear_extension_cache" signature="clear_extension_cache()" />
      <scope ilk="function" line="22" lineend="24" name="constructor" signature="constructor(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <variable citdl="dict" line="10" name="dispatch_table" />
      <scope ilk="function" line="12" lineend="20" name="pickle" signature="pickle(ob_type, pickle_function, constructor_ob=None)">
        <variable ilk="argument" name="ob_type" />
        <variable ilk="argument" name="constructor_ob" />
        <variable ilk="argument" name="pickle_function" />
      </scope>
      <scope ilk="function" line="34" lineend="35" name="pickle_complex" returns="tuple" signature="pickle_complex(c)">
        <variable ilk="argument" name="c" />
      </scope>
      <scope doc="Unregister an extension code. For testing only." ilk="function" line="170" lineend="180" name="remove_extension" signature="remove_extension(module, name, code)">
        <variable citdl="tuple" line="172" name="key" />
        <variable ilk="argument" name="code" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="module" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="147" name="_inverted_registry" />
      <variable attributes="protected __hidden__" citdl="dict" line="148" name="_extension_cache" />
      <scope attributes="protected __hidden__" ilk="function" line="41" lineend="48" name="_reconstructor" returns="object.__new__()" signature="_reconstructor(cls, base, state)">
        <variable ilk="argument" name="cls" />
        <variable ilk="argument" name="base" />
        <variable ilk="argument" name="state" />
        <variable citdl="base.__new__()" line="43" name="obj" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="50" name="_HEAPTYPE" />
      <scope attributes="protected __hidden__" ilk="function" line="54" lineend="83" name="_reduce_ex" returns="tuple" signature="_reduce_ex(self, proto)">
        <variable ilk="argument" name="self" />
        <variable ilk="argument" name="proto" />
        <variable citdl="object" line="60" name="base" />
        <variable citdl="base()" line="62" name="state" />
        <variable citdl="tuple" line="67" name="args" />
        <variable citdl="self.__getstate__" line="69" name="getstate" />
        <variable citdl="getstate()" line="75" name="dict" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="146" name="_extension_registry" />
      <scope attributes="protected __hidden__" doc="Return a list of slot names for a given class." ilk="function" line="90" lineend="135" name="_slotnames" returns="list" signature="_slotnames(cls)">
        <variable ilk="argument" name="cls" />
        <variable citdl="cls.__dict__.get()" line="102" name="names" />
        <variable citdl="tuple" line="115" name="slots" />
      </scope>
    </scope>
    <scope doc="Interface to the compiler&apos;s internal symbol tables" ilk="blob" lang="Python3" name="symtable">
      <scope classrefs="SymbolTable" ilk="class" line="158" lineend="168" name="Class">
        <variable attributes="private" citdl="tuple()" line="160" name="__methods" />
        <scope ilk="function" line="162" lineend="168" name="get_methods" returns="tuple()" signature="get_methods()">
          <variable citdl="Class" ilk="argument" name="self" />
          <variable citdl="dict" line="164" name="d" />
        </scope>
      </scope>
      <variable citdl="int" name="DEF_BOUND" />
      <variable citdl="int" name="DEF_FREE_CLASS" />
      <variable citdl="int" name="DEF_FREE_GLOBAL" />
      <variable citdl="int" name="DEF_GLOBAL" />
      <variable citdl="int" name="DEF_IMPORT" />
      <variable citdl="int" name="DEF_LOCAL" />
      <variable citdl="int" name="DEF_PARAM" />
      <variable citdl="int" name="FREE" />
      <scope classrefs="SymbolTable" ilk="class" line="122" lineend="155" name="Function">
        <variable attributes="private" citdl="__idents_matching()" line="127" name="__frees" />
        <scope ilk="function" line="134" lineend="137" name="get_parameters" returns="__idents_matching()" signature="get_parameters()">
          <variable citdl="Function" ilk="argument" name="self" />
        </scope>
        <variable attributes="private" citdl="__idents_matching()" line="126" name="__locals" />
        <scope ilk="function" line="144" lineend="149" name="get_globals" returns="__idents_matching()" signature="get_globals()">
          <variable citdl="Function" ilk="argument" name="self" />
          <variable citdl="tuple" line="146" name="glob" />
          <variable line="147" name="test" />
        </scope>
        <variable attributes="private" citdl="__idents_matching()" line="125" name="__params" />
        <scope ilk="function" line="151" lineend="155" name="get_frees" returns="__idents_matching()" signature="get_frees()">
          <variable citdl="Function" ilk="argument" name="self" />
          <variable line="153" name="is_free" />
        </scope>
        <scope ilk="function" line="139" lineend="142" name="get_locals" returns="__idents_matching()" signature="get_locals()">
          <variable citdl="Function" ilk="argument" name="self" />
        </scope>
        <variable attributes="private" citdl="__idents_matching()" line="128" name="__globals" />
        <scope attributes="private" ilk="function" line="130" lineend="132" name="__idents_matching" returns="tuple()" signature="__idents_matching(test_func)">
          <variable citdl="Function" ilk="argument" name="self" />
          <variable ilk="argument" name="test_func" />
        </scope>
      </scope>
      <variable citdl="int" name="GLOBAL_EXPLICIT" />
      <variable citdl="int" name="GLOBAL_IMPLICIT" />
      <variable citdl="int" name="OPT_IMPORT_STAR" />
      <variable citdl="int" name="SCOPE_MASK" />
      <variable citdl="int" name="SCOPE_OFF" />
      <scope classrefs="object" ilk="class" line="171" lineend="233" name="Symbol">
        <scope ilk="function" line="197" lineend="198" name="is_local" returns="bool()" signature="is_local()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <variable attributes="private __instancevar__" citdl="int" line="176" name="__scope" />
        <scope ilk="function" line="185" lineend="186" name="is_referenced" returns="bool()" signature="is_referenced()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="206" lineend="207" name="is_assigned" returns="bool()" signature="is_assigned()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of namespaces bound to this name" ilk="function" line="222" lineend="224" name="get_namespaces" returns="tuple" signature="get_namespaces()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="188" lineend="189" name="is_parameter" returns="bool()" signature="is_parameter()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="194" lineend="195" name="is_declared_global" returns="bool()" signature="is_declared_global()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <variable attributes="private __instancevar__" line="175" name="__flags" />
        <scope ilk="function" line="182" lineend="183" name="get_name" signature="get_name()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <variable attributes="private __instancevar__" line="174" name="__name" />
        <scope doc="Returns true if name binding introduces new namespace." ilk="function" line="209" lineend="220" name="is_namespace" returns="bool()" signature="is_namespace()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="200" lineend="201" name="is_free" returns="bool()" signature="is_free()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="203" lineend="204" name="is_imported" returns="bool()" signature="is_imported()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <scope doc="Returns the single namespace bound to this name." ilk="function" line="226" lineend="233" name="get_namespace" signature="get_namespace()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <variable attributes="private __instancevar__" citdl="tuple" line="177" name="__namespaces" />
        <scope ilk="function" line="191" lineend="192" name="is_global" returns="bool()" signature="is_global()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="173" lineend="177" name="__init__" signature="Symbol(name, flags, namespaces=None)">
          <variable citdl="Symbol" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="flags" />
          <variable ilk="argument" name="namespaces" />
        </scope>
        <scope ilk="function" line="179" lineend="180" name="__repr__" returns="str.format()" signature="__repr__()">
          <variable citdl="Symbol" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="41" lineend="119" name="SymbolTable">
        <variable attributes="protected __instancevar__" citdl="dict" line="46" name="_symbols" />
        <scope ilk="function" line="109" lineend="110" name="get_symbols" returns="list" signature="get_symbols()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="80" lineend="82" name="is_optimized" returns="bool()" signature="is_optimized()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="84" lineend="85" name="is_nested" returns="bool()" signature="is_nested()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <scope doc="Return true if the scope uses import *" ilk="function" line="94" lineend="96" name="has_import_star" returns="bool()" signature="has_import_star()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="45" name="_filename" />
        <scope ilk="function" line="87" lineend="88" name="has_children" returns="bool()" signature="has_children()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <scope doc="Return true if the scope uses exec. Deprecated method." ilk="function" line="90" lineend="92" name="has_exec" returns="bool" signature="has_exec()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="77" lineend="78" name="get_lineno" returns="self._table.lineno" signature="get_lineno()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="74" lineend="75" name="get_name" returns="self._table.name" signature="get_name()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="71" lineend="72" name="get_id" returns="self._table.id" signature="get_id()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="61" lineend="69" name="get_type" returns="str" signature="get_type()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="101" lineend="107" name="lookup" returns="Symbol()" signature="lookup(name)">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="Symbol()" line="102" name="sym" />
          <variable line="104" name="flags" />
          <variable citdl="self.__check_children()" line="105" name="namespaces" />
        </scope>
        <scope ilk="function" line="48" lineend="59" name="__repr__" returns="str.format()" signature="__repr__()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
          <variable citdl="str" line="50" name="kind" />
        </scope>
        <scope ilk="function" line="98" lineend="99" name="get_identifiers" returns="self._table.symbols.keys()" signature="get_identifiers()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="117" lineend="119" name="get_children" returns="list" signature="get_children()">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="44" name="_table" />
        <scope attributes="private" ilk="function" line="112" lineend="115" name="__check_children" returns="list" signature="__check_children(name)">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="43" lineend="46" name="__init__" signature="SymbolTable(raw_table, filename)">
          <variable citdl="SymbolTable" ilk="argument" name="self" />
          <variable ilk="argument" name="raw_table" />
          <variable ilk="argument" name="filename" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="20" lineend="36" name="SymbolTableFactory">
        <scope ilk="function" line="31" lineend="36" name="__call__" returns="new()" signature="__call__(table, filename)">
          <variable citdl="SymbolTableFactory" ilk="argument" name="self" />
          <variable ilk="argument" name="table" />
          <variable ilk="argument" name="filename" />
          <variable citdl="tuple" line="32" name="key" />
          <variable citdl="self.__memo.get()" line="33" name="obj" />
        </scope>
        <scope ilk="function" line="24" lineend="29" name="new" returns="Class()" signature="new(table, filename)">
          <variable citdl="SymbolTableFactory" ilk="argument" name="self" />
          <variable ilk="argument" name="table" />
          <variable ilk="argument" name="filename" />
        </scope>
        <variable attributes="private __instancevar__" citdl="weakref.WeakValueDictionary()" line="22" name="__memo" />
        <scope attributes="__ctor__" ilk="function" line="21" lineend="22" name="__init__" signature="SymbolTableFactory()">
          <variable citdl="SymbolTableFactory" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="int" name="USE" />
      <variable citdl="list" line="11" name="__all__" />
      <import module="_symtable" />
      <scope ilk="function" line="13" lineend="18" name="symtable" returns="_newSymbolTable()" signature="symtable(code, filename, compile_type)">
        <variable citdl="_symtable.symtable()" line="14" name="raw" />
        <variable ilk="argument" name="code" />
        <variable ilk="argument" name="compile_type" />
        <variable ilk="argument" name="filename" />
      </scope>
      <import module="weakref" />
      <variable attributes="__hidden__" citdl="mod.lookup()" line="240" name="info" />
      <variable attributes="__hidden__" line="237" name="src" />
      <variable attributes="protected __hidden__" citdl="SymbolTableFactory" line="38" name="_newSymbolTable" />
      <variable attributes="__hidden__" citdl="symtable()" line="238" name="mod" />
    </scope>
    <scope doc="Parse a Python module and describe its classes and methods.  Parse enough of a Python file to recognize imports and class and" ilk="blob" lang="Python3" name="pyclbr">
      <scope classrefs="object" doc="Class to represent a Python class." ilk="class" line="53" lineend="66" name="Class">
        <variable attributes="__instancevar__" citdl="dict" line="61" name="methods" />
        <variable attributes="__instancevar__" line="56" name="module" />
        <variable attributes="__instancevar__" line="63" name="lineno" />
        <variable attributes="__instancevar__" line="62" name="file" />
        <variable attributes="__instancevar__" citdl="list" line="60" name="super" />
        <scope attributes="protected" ilk="function" line="65" lineend="66" name="_addmethod" signature="_addmethod(name, lineno)">
          <variable citdl="Class" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="lineno" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="55" lineend="63" name="__init__" signature="Class(module, name, super, file, lineno)">
          <variable citdl="Class" ilk="argument" name="self" />
          <variable ilk="argument" name="module" />
          <variable ilk="argument" name="name" />
          <variable citdl="list" ilk="argument" name="super" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="lineno" />
        </scope>
        <variable attributes="__instancevar__" line="57" name="name" />
      </scope>
      <variable citdl="int" name="DEDENT" />
      <scope classrefs="object" doc="Class to represent a top-level Python function" ilk="class" line="68" lineend="74" name="Function">
        <variable attributes="__instancevar__" line="72" name="name" />
        <variable attributes="__instancevar__" line="73" name="file" />
        <scope attributes="__ctor__" ilk="function" line="70" lineend="74" name="__init__" signature="Function(module, name, file, lineno)">
          <variable citdl="Function" ilk="argument" name="self" />
          <variable ilk="argument" name="module" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="lineno" />
        </scope>
        <variable attributes="__instancevar__" line="71" name="module" />
        <variable attributes="__instancevar__" line="74" name="lineno" />
      </scope>
      <variable citdl="int" name="NAME" />
      <variable citdl="int" name="OP" />
      <variable citdl="list" line="48" name="__all__" />
      <import module="imp" />
      <scope classrefs="object" doc="itemgetter(item, ...) --&gt; itemgetter object  Return a callable object that fetches the given item(s) from its operand." ilk="class" name="itemgetter" />
      <scope doc="Backwards compatible interface." ilk="function" line="76" lineend="86" name="readmodule" returns="dict" signature="readmodule(module, path=None)">
        <variable ilk="argument" name="path" />
        <variable ilk="argument" name="module" />
        <variable citdl="dict" line="82" name="res" />
      </scope>
      <scope doc="Read a module file and return a dictionary of classes." ilk="function" line="88" lineend="95" name="readmodule_ex" returns="_readmodule()" signature="readmodule_ex(module, path=None)">
        <variable ilk="argument" name="path" />
        <variable ilk="argument" name="module" />
      </scope>
      <import module="sys" />
      <import module="tokenize" />
      <scope attributes="protected __hidden__" ilk="function" line="277" lineend="295" name="_getnamelist" returns="list" signature="_getnamelist(g)">
        <variable ilk="argument" name="g" />
        <variable citdl="list" line="281" name="names" />
        <variable line="289" name="name2" />
        <variable line="292" name="token" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="297" lineend="314" name="_getname" returns="tuple" signature="_getname(g)">
        <variable ilk="argument" name="g" />
        <variable citdl="list" line="301" name="parts" />
      </scope>
      <scope attributes="protected __hidden__" doc="Do the hard work for readmodule[_ex]." ilk="function" line="97" lineend="275" name="_readmodule" returns="dict" signature="_readmodule(module, path, inpackage=None)">
        <variable ilk="argument" name="module" />
        <variable citdl="list" ilk="argument" name="path" />
        <variable ilk="argument" name="inpackage" />
        <variable citdl="str" line="107" name="fullmodule" />
        <variable citdl="dict" line="116" name="dict" />
        <variable citdl="module.rfind()" line="124" name="i" />
        <variable citdl="list" line="126" name="package" />
        <variable citdl="list" line="127" name="submodule" />
        <variable citdl="()" line="128" name="parent" />
        <variable line="134" name="f" />
        <variable citdl="list" line="149" name="stack" />
        <variable citdl="tokenize.generate_tokens()" line="151" name="g" />
        <variable citdl="Class" line="168" name="cur_class" />
        <variable citdl="list" line="188" name="inherit" />
        <variable citdl="_getnamelist()" line="190" name="names" />
        <variable citdl="int" line="192" name="level" />
        <variable citdl="list" line="193" name="super" />
        <variable citdl="str.join()" line="197" name="n" />
        <variable citdl="n.split()" line="202" name="c" />
        <variable line="207" name="m" />
        <variable citdl="()" line="210" name="d" />
        <variable citdl="_getnamelist()" line="234" name="modules" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="316" lineend="338" name="_main" signature="_main()">
        <import line="318" module="os" />
        <variable citdl="os.path.basename()" line="319" name="mod" />
        <variable citdl="list" line="321" name="path" />
        <variable citdl="readmodule_ex()" line="327" name="dict" />
        <variable citdl="dict.values()" line="328" name="objs" />
        <variable citdl="sorted()" line="333" name="methods" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="50" name="_modules" />
    </scope>
    <scope doc="Configuration file parser.  A setup file consists of sections, lead by a &quot;[section]&quot; header," ilk="blob" lang="Python3" name="configparser">
      <scope classrefs="RawConfigParser" ilk="class" line="519" lineend="611" name="ConfigParser">
        <scope attributes="protected" ilk="function" line="606" lineend="611" name="_interpolation_replace" returns="str" signature="_interpolation_replace(match)">
          <variable citdl="ConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="match" />
          <variable citdl="match.group()" line="607" name="s" />
        </scope>
        <scope doc="Return a list of tuples with (name, value) for each option in the section." ilk="function" line="553" lineend="583" name="items" returns="list" signature="items(section, raw=False, vars=None)">
          <variable citdl="ConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable citdl="False" ilk="argument" name="raw" />
          <variable ilk="argument" name="vars" />
          <variable citdl="self._defaults.copy()" line="565" name="d" />
          <variable citdl="list()" line="575" name="options" />
        </scope>
        <variable attributes="protected" citdl="re.compile()" line="604" name="_KEYCRE" />
        <scope attributes="protected" ilk="function" line="585" lineend="602" name="_interpolate" returns="self._KEYCRE.sub()" signature="_interpolate(section, option, rawval, vars)">
          <variable citdl="ConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="rawval" />
          <variable ilk="argument" name="vars" />
          <variable citdl="self._KEYCRE.sub()" line="587" name="value" />
          <variable citdl="int" line="588" name="depth" />
        </scope>
        <scope doc="Get an option value for a given section." ilk="function" line="521" lineend="551" name="get" returns="self._interpolate()" signature="get(section, option, raw=False, vars=None)">
          <variable citdl="ConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable citdl="self.optionxform()" ilk="argument" name="option" />
          <variable citdl="False" ilk="argument" name="raw" />
          <variable ilk="argument" name="vars" />
          <variable citdl="self._defaults.copy()" line="532" name="d" />
          <variable line="544" name="value" />
        </scope>
      </scope>
      <variable citdl="str" line="105" name="DEFAULTSECT" />
      <scope classrefs="Error" doc="Raised when a section is multiply-created." ilk="class" line="146" lineend="151" name="DuplicateSectionError">
        <variable attributes="__instancevar__" line="151" name="section" />
        <scope attributes="__ctor__" ilk="function" line="149" lineend="151" name="__init__" signature="DuplicateSectionError(section)">
          <variable citdl="DuplicateSectionError" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="Base class for ConfigParser exceptions." ilk="class" line="112" lineend="137" name="Error">
        <scope attributes="protected" doc="Setter for &apos;message&apos;; needed only to override deprecation in BaseException." ilk="function" line="120" lineend="123" name="_set_message" signature="_set_message(value)">
          <variable citdl="Error" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable citdl="Error.__repr__" line="137" name="__str__" />
        <scope attributes="protected" doc="Getter for &apos;message&apos;; needed only to override deprecation in BaseException." ilk="function" line="115" lineend="118" name="_get_message" returns="self.__message" signature="_get_message()">
          <variable citdl="Error" ilk="argument" name="self" />
        </scope>
        <variable attributes="private __instancevar__" line="123" name="__message" />
        <variable citdl="property()" line="128" name="message" />
        <scope attributes="__ctor__" ilk="function" line="130" lineend="132" name="__init__" signature="Error(msg=&apos;&apos;)">
          <variable citdl="Error" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="msg" />
        </scope>
        <scope ilk="function" line="134" lineend="135" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Error" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="InterpolationError" doc="Raised when substitutions are nested too deeply." ilk="class" line="187" lineend="196" name="InterpolationDepthError">
        <scope attributes="__ctor__" ilk="function" line="190" lineend="196" name="__init__" signature="InterpolationDepthError(option, section, rawval)">
          <variable citdl="InterpolationDepthError" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="rawval" />
          <variable citdl="str" line="191" name="msg" />
        </scope>
      </scope>
      <scope classrefs="Error" doc="Base class for interpolation-related exceptions." ilk="class" line="162" lineend="168" name="InterpolationError">
        <variable attributes="__instancevar__" line="168" name="section" />
        <variable attributes="__instancevar__" line="167" name="option" />
        <scope attributes="__ctor__" ilk="function" line="165" lineend="168" name="__init__" signature="InterpolationError(option, section, msg)">
          <variable citdl="InterpolationError" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="msg" />
        </scope>
      </scope>
      <scope classrefs="InterpolationError" doc="A string substitution required a setting which was not available." ilk="class" line="170" lineend="181" name="InterpolationMissingOptionError">
        <variable attributes="__instancevar__" line="181" name="reference" />
        <scope attributes="__ctor__" ilk="function" line="173" lineend="181" name="__init__" signature="InterpolationMissingOptionError(option, section, rawval, reference)">
          <variable citdl="InterpolationMissingOptionError" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="rawval" />
          <variable ilk="argument" name="reference" />
          <variable citdl="str" line="174" name="msg" />
        </scope>
      </scope>
      <scope classrefs="InterpolationError" doc="Raised when the source text into which substitutions are made does not conform to the required syntax." ilk="class" line="183" name="InterpolationSyntaxError" />
      <variable citdl="int" line="107" name="MAX_INTERPOLATION_DEPTH" />
      <scope classrefs="ParsingError" doc="Raised when a key-value pair is found before any section header." ilk="class" line="210" lineend="220" name="MissingSectionHeaderError">
        <variable attributes="__instancevar__" line="220" name="line" />
        <variable attributes="__instancevar__" line="219" name="lineno" />
        <scope attributes="__ctor__" ilk="function" line="213" lineend="220" name="__init__" signature="MissingSectionHeaderError(filename, lineno, line)">
          <variable citdl="MissingSectionHeaderError" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="lineno" />
          <variable ilk="argument" name="line" />
        </scope>
        <variable attributes="__instancevar__" line="218" name="filename" />
      </scope>
      <scope classrefs="Error" doc="A requested option was not found." ilk="class" line="153" lineend="160" name="NoOptionError">
        <variable attributes="__instancevar__" line="160" name="section" />
        <variable attributes="__instancevar__" line="159" name="option" />
        <scope attributes="__ctor__" ilk="function" line="156" lineend="160" name="__init__" signature="NoOptionError(option, section)">
          <variable citdl="NoOptionError" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="section" />
        </scope>
      </scope>
      <scope classrefs="Error" doc="Raised when no section matches a requested option." ilk="class" line="139" lineend="144" name="NoSectionError">
        <variable attributes="__instancevar__" line="144" name="section" />
        <scope attributes="__ctor__" ilk="function" line="142" lineend="144" name="__init__" signature="NoSectionError(section)">
          <variable citdl="NoSectionError" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
        </scope>
      </scope>
      <scope classrefs="Error" doc="Raised when a configuration file does not follow legal syntax." ilk="class" line="198" lineend="208" name="ParsingError">
        <variable attributes="__instancevar__" citdl="list" line="204" name="errors" />
        <scope ilk="function" line="206" lineend="208" name="append" signature="append(lineno, line)">
          <variable citdl="ParsingError" ilk="argument" name="self" />
          <variable ilk="argument" name="lineno" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="201" lineend="204" name="__init__" signature="ParsingError(filename)">
          <variable citdl="ParsingError" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
        </scope>
        <variable attributes="__instancevar__" line="203" name="filename" />
      </scope>
      <scope classrefs="object" ilk="class" line="223" lineend="516" name="RawConfigParser">
        <scope ilk="function" line="360" lineend="361" name="optionxform" returns="optionstr.lower()" signature="optionxform(optionstr)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="optionstr" />
        </scope>
        <scope ilk="function" line="348" lineend="349" name="getfloat" returns="RawConfigParser._get()" signature="getfloat(section, option)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="option" />
        </scope>
        <scope doc="Set an option." ilk="function" line="375" lineend="384" name="set" signature="set(section, option, value)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="value" />
          <variable citdl="_dict()" line="378" name="sectdict" />
        </scope>
        <scope doc="Indicate whether the named section is present in the configuration." ilk="function" line="254" lineend="259" name="has_section" returns="bool" signature="has_section(section)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
        </scope>
        <variable attributes="protected" citdl="dict" line="351" name="_boolean_states" />
        <scope doc="Remove a file section." ilk="function" line="416" lineend="421" name="remove_section" returns="bool" signature="remove_section(section)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable citdl="bool" line="418" name="existed" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="224" lineend="230" name="__init__" signature="RawConfigParser(defaults=None, dict_type=_default_dict)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="defaults" />
          <variable citdl="dict" ilk="argument" name="dict_type" />
        </scope>
        <scope ilk="function" line="354" lineend="358" name="getboolean" signature="getboolean(section, option)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="option" />
          <variable citdl="get()" line="355" name="v" />
        </scope>
        <scope doc="Check for the existence of a given option in a given section." ilk="function" line="363" lineend="373" name="has_option" returns="bool" signature="has_option(section, option)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable citdl="optionxform()" ilk="argument" name="option" />
        </scope>
        <variable citdl="re.compile()" line="431" name="OPTCRE" />
        <scope doc="Write an .ini-format representation of the configuration state." ilk="function" line="386" lineend="399" name="write" signature="write(fp)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="225" name="_dict" />
        <scope doc="Create a new section in the configuration." ilk="function" line="240" lineend="252" name="add_section" signature="add_section(section)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
        </scope>
        <scope doc="Return a list of section names, excluding [DEFAULT]" ilk="function" line="235" lineend="238" name="sections" returns="list()" signature="sections()">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_dict()" line="226" name="_sections" />
        <scope ilk="function" line="313" lineend="327" name="get" signature="get(section, option)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="option" />
          <variable citdl="self.optionxform()" line="314" name="opt" />
        </scope>
        <scope doc="Read and parse a filename or a list of filenames." ilk="function" line="272" lineend="295" name="read" returns="list" signature="read(filenames)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="filenames" />
          <variable citdl="list" line="286" name="read_ok" />
          <variable citdl="open()" line="289" name="fp" />
        </scope>
        <scope attributes="protected" ilk="function" line="342" lineend="343" name="_get" returns="RawConfigParser._get.conv()" signature="_get(section, conv, option)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="conv" />
          <variable ilk="argument" name="option" />
        </scope>
        <variable citdl="re.compile()" line="426" name="SECTCRE" />
        <scope doc="Remove an option." ilk="function" line="401" lineend="414" name="remove_option" returns="bool" signature="remove_option(section, option)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable citdl="optionxform()" ilk="argument" name="option" />
          <variable citdl="_dict()" line="404" name="sectdict" />
          <variable citdl="bool" line="411" name="existed" />
        </scope>
        <scope ilk="function" line="329" lineend="340" name="items" returns="d.items()" signature="items(section)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable citdl="_dict()" line="331" name="d2" />
          <variable citdl="self._defaults.copy()" line="336" name="d" />
        </scope>
        <scope attributes="protected" doc="Parse a sectioned setup file." ilk="function" line="440" lineend="516" name="_read" signature="_read(fp, fpname)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="fpname" />
          <variable citdl="_dict()" line="450" name="cursect" />
          <variable citdl="optionxform()" line="451" name="optname" />
          <variable citdl="int" line="452" name="lineno" />
          <variable citdl="ParsingError" line="453" name="e" />
          <variable citdl="fp.readline()" line="455" name="line" />
          <variable citdl="line.strip()" line="467" name="value" />
          <variable citdl="self.SECTCRE.match()" line="473" name="mo" />
          <variable citdl="mo.group()" line="475" name="sectname" />
          <variable citdl="optval.find()" line="497" name="pos" />
          <variable citdl="optval.strip()" line="499" name="optval" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_dict()" line="227" name="_defaults" />
        <scope doc="Like read() but the argument must be a file-like object." ilk="function" line="297" lineend="311" name="readfp" signature="readfp(fp, filename=None)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
          <variable citdl="fp.name" ilk="argument" name="filename" />
        </scope>
        <scope ilk="function" line="345" lineend="346" name="getint" returns="RawConfigParser._get()" signature="getint(section, option)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="option" />
        </scope>
        <scope ilk="function" line="232" lineend="233" name="defaults" returns="_dict()" signature="defaults()">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of option names for the given section name." ilk="function" line="261" lineend="270" name="options" returns="list()" signature="options(section)">
          <variable citdl="RawConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable line="264" name="opts" />
        </scope>
      </scope>
      <scope classrefs="ConfigParser" ilk="class" line="614" lineend="675" name="SafeConfigParser">
        <scope attributes="protected" ilk="function" line="624" lineend="660" name="_interpolate_some" signature="_interpolate_some(option, accum, rest, section, map, depth)">
          <variable citdl="SafeConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="accum" />
          <variable citdl="list" ilk="argument" name="rest" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="map" />
          <variable ilk="argument" name="depth" />
          <variable citdl="rest.find()" line="628" name="p" />
          <variable citdl="list" line="636" name="c" />
          <variable citdl="self._interpvar_re.match()" line="641" name="m" />
          <variable citdl="self.optionxform()" line="645" name="var" />
          <variable line="648" name="v" />
        </scope>
        <scope doc="Set an option. Extend ConfigParser.set: check for string values." ilk="function" line="662" lineend="675" name="set" signature="set(section, option, value)">
          <variable citdl="SafeConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="value" />
          <variable citdl="value.replace()" line="668" name="tmp_value" />
          <variable citdl="tmp_value.find()" line="671" name="percent_index" />
        </scope>
        <scope attributes="protected" ilk="function" line="616" lineend="620" name="_interpolate" returns="str.join()" signature="_interpolate(section, option, rawval, vars)">
          <variable citdl="SafeConfigParser" ilk="argument" name="self" />
          <variable ilk="argument" name="section" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="rawval" />
          <variable ilk="argument" name="vars" />
          <variable citdl="list" line="618" name="L" />
        </scope>
        <variable attributes="protected" citdl="re.compile()" line="622" name="_interpvar_re" />
      </scope>
      <variable citdl="list" line="98" name="__all__" />
      <import module="re" />
      <variable attributes="protected __hidden__" citdl="dict" line="94" name="_default_dict" />
    </scope>
    <scope doc="# Wrapper module for _elementtree" ilk="blob" lang="Python3" name="xml.etree.cElementTree">
      <scope ilk="function" name="Comment" signature="Comment(text=None)" />
      <scope ilk="function" name="Element" />
      <import module="ElementPath" />
      <scope classrefs="ElementTree" ilk="class" name="ElementTree" />
      <scope ilk="function" name="PI" signature="PI(target, text=None)" />
      <scope ilk="function" name="ProcessingInstruction" signature="ProcessingInstruction(target, text=None)" />
      <scope classrefs="object" ilk="class" name="QName" />
      <scope ilk="function" name="SubElement" />
      <scope ilk="function" name="TreeBuilder" />
      <variable citdl="str" name="VERSION" />
      <scope ilk="function" name="XML" signature="XML(text)" />
      <scope ilk="function" name="XMLID" signature="XMLID(text)" />
      <scope ilk="function" name="XMLParser" />
      <scope classrefs="Exception" doc="Invalid syntax." ilk="class" name="XMLParserError" />
      <scope ilk="function" name="XMLTreeBuilder" />
      <scope ilk="function" name="dump" signature="dump(elem)" />
      <scope ilk="function" name="fromstring" signature="fromstring(text)" />
      <scope ilk="function" name="iselement" signature="iselement(element)" />
      <scope classrefs="object" ilk="class" name="iterparse" />
      <scope ilk="function" name="parse" signature="parse(source, parser=None)" />
      <scope ilk="function" name="tostring" signature="tostring(element, encoding=None)" />
    </scope>
    <scope doc="Fixer for callable().  This converts callable(obj) into isinstance(obj, collections.Callable), adding a" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_callable">
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" ilk="class" line="13" lineend="34" name="FixCallable">
        <variable citdl="str" line="17" name="PATTERN" />
        <scope ilk="function" line="27" lineend="34" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixCallable" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="28" name="func" />
          <variable citdl="list" line="32" name="args" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A string leaf" ilk="function" name="String" signature="String(string, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Works like `does_tree_import` but adds an import statement if it was not imported." ilk="function" name="touch_import" signature="touch_import(package, name, node)" />
    </scope>
    <scope doc="The python bz2 module provides a comprehensive interface for the bz2 compression library. It implements a complete file interface, one shot (de)compression functions, and types for" ilk="blob" lang="Python3" name="bz2">
      <scope classrefs="object" doc="BZ2Compressor([compresslevel=9]) -&gt; compressor object  Create a new compressor object. This object may be used to compress" ilk="class" name="BZ2Compressor" />
      <scope classrefs="object" doc="BZ2Decompressor() -&gt; decompressor object  Create a new decompressor object. This object may be used to decompress" ilk="class" name="BZ2Decompressor" />
      <scope classrefs="object" doc="BZ2File(name [, mode=&apos;r&apos;, buffering=0, compresslevel=9]) -&gt; file object  Open a bz2 file. The mode can be &apos;r&apos; or &apos;w&apos;, for reading (default) or" ilk="class" name="BZ2File" />
      <variable citdl="str" name="__author__" />
      <scope doc="Compress data in one shot." ilk="function" name="compress" returns="str" signature="compress(data [, compresslevel=9]) -&gt; string" />
      <scope doc="Decompress data in one shot." ilk="function" name="decompress" signature="decompress(data) -&gt; decompressed data" />
    </scope>
    <scope doc="#empty" ilk="blob" lang="Python3" name="lib2to3">
      <import module="fixer_base" />
      <import module="fixer_util" />
      <import module="fixes" />
      <import module="patcomp" />
      <import module="pgen2" />
      <import module="pygram" />
      <import module="pytree" />
      <import module="refactor" />
    </scope>
    <scope doc="Base classes for server/gateway implementations" ilk="blob" lang="Python3" name="wsgiref.handlers">
      <scope classrefs="SimpleHandler" doc="CGI-like systems using input/output/error streams and environ mapping  Usage::" ilk="class" line="409" lineend="430" name="BaseCGIHandler">
        <variable citdl="False" line="430" name="origin_server" />
      </scope>
      <scope classrefs="object" doc="Manage the invocation of a WSGI application" ilk="class" line="24" lineend="351" name="BaseHandler">
        <scope doc="Transmit version/status/date/server, via self._write()" ilk="function" line="184" lineend="196" name="send_preamble" signature="send_preamble()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="False" line="54" name="headers_sent" />
        <scope doc="&apos;start_response()&apos; callable as specified by PEP 333" ilk="function" line="147" lineend="174" name="start_response" returns="self.write" signature="start_response(status, headers, exc_info=None)">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable citdl="self._convert_string_type()" ilk="argument" name="status" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="exc_info" />
          <variable citdl="list" line="165" name="str_headers" />
          <variable citdl="self._convert_string_type()" line="167" name="name" />
          <variable citdl="self._convert_string_type()" line="168" name="val" />
        </scope>
        <variable citdl="True" line="30" name="wsgi_multiprocess" />
        <scope doc="Override in subclass to return suitable &apos;wsgi.input&apos;" ilk="function" line="341" lineend="343" name="get_stdin" signature="get_stdin()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.error_output()" line="74" name="result" />
        <scope doc="Compute Content-Length or switch to chunked encoding if possible" ilk="function" line="126" name="set_content_length" signature="set_content_length()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable citdl="len()" line="129" name="blocks" />
        </scope>
        <scope doc="Close the iterable (if needed) and reset all instance vars" ilk="function" line="248" lineend="258" name="close" signature="close()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Log current error, and send error output to client if possible" ilk="function" line="297" lineend="302" name="handle_error" signature="handle_error()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="True" line="29" name="wsgi_multithread" />
        <variable citdl="FileWrapper" line="43" name="wsgi_file_wrapper" />
        <variable citdl="str" line="34" name="http_version" />
        <scope doc="Send any iterable data, then close self and the iterable" ilk="function" line="106" lineend="118" name="finish_response" signature="finish_response()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="tuple" line="28" name="wsgi_version" />
        <scope doc="&apos;write()&apos; callable as specified by PEP 333" ilk="function" line="198" lineend="216" name="write" signature="write(data)">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable citdl="str" line="48" name="error_status" />
        <variable citdl="list" line="49" name="error_headers" />
        <variable citdl="dict()" line="40" name="os_environ" />
        <scope doc="Set up the environment for one request" ilk="function" line="85" lineend="103" name="setup_environ" signature="setup_environ()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable citdl="self.os_environ.copy()" line="88" name="env" />
        </scope>
        <scope doc="Transmit headers to the client, via self._write()" ilk="function" line="261" lineend="267" name="send_headers" signature="send_headers()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Platform-specific file transmission" ilk="function" line="219" lineend="237" name="sendfile" returns="bool" signature="sendfile()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Invoke the application" ilk="function" line="65" lineend="82" name="run" signature="run(application)">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="application" />
        </scope>
        <variable citdl="str" line="50" name="error_body" />
        <variable line="35" name="server_software" />
        <scope doc="Log the &apos;exc_info&apos; tuple in the server log" ilk="function" line="281" lineend="295" name="log_exception" signature="log_exception(exc_info)">
          <import line="287" module="traceback" symbol="print_exception" />
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="exc_info" />
          <variable citdl="self.get_stderr()" line="288" name="stderr" />
        </scope>
        <scope doc="True if client can accept status and headers" ilk="function" line="276" lineend="278" name="client_is_modern" returns="bool" signature="client_is_modern()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Override in subclass to force sending of recent &apos;_write()&apos; calls" ilk="function" line="333" lineend="339" name="_flush" signature="_flush()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Convert/check value type." ilk="function" line="176" lineend="182" name="_convert_string_type" returns="str()" signature="_convert_string_type(value, title)">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="title" />
        </scope>
        <scope doc="True if &apos;self.result&apos; is an instance of &apos;self.wsgi_file_wrapper&apos;" ilk="function" line="270" lineend="273" name="result_is_file" returns="bool" signature="result_is_file()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable citdl="FileWrapper" line="272" name="wrapper" />
        </scope>
        <scope attributes="protected" doc="Override in subclass to buffer data for send to client" ilk="function" line="324" lineend="331" name="_write" signature="_write(data)">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable line="47" name="traceback_limit" />
        <scope doc="WSGI mini-app to create error output" ilk="function" line="305" lineend="319" name="error_output" returns="list" signature="error_output(environ, start_response)">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="environ" />
          <variable ilk="argument" name="start_response" />
        </scope>
        <scope doc="Return the URL scheme being used" ilk="function" line="121" lineend="123" name="get_scheme" returns="guess_scheme()" signature="get_scheme()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Override in subclass to return suitable &apos;wsgi.errors&apos;" ilk="function" line="345" lineend="347" name="get_stderr" signature="get_stderr()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="True" line="33" name="origin_server" />
        <variable citdl="int" line="56" name="bytes_sent" />
        <scope doc="Make any necessary header changes or defaults" ilk="function" line="139" lineend="145" name="cleanup_headers" signature="cleanup_headers()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="headers_class()" line="55" name="headers" />
        <variable citdl="self._convert_string_type()" line="53" name="status" />
        <scope doc="Ensure headers and content have both been sent" ilk="function" line="240" lineend="246" name="finish_content" signature="finish_content()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="False" line="31" name="wsgi_run_once" />
        <scope doc="Override in subclass to insert CGI variables in &apos;self.environ&apos;" ilk="function" line="349" lineend="351" name="add_cgi_vars" signature="add_cgi_vars()">
          <variable citdl="BaseHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="Headers" line="44" name="headers_class" />
      </scope>
      <scope classrefs="BaseCGIHandler" doc="CGI-based invocation via sys.stdin/stdout/stderr and os.environ  Usage::" ilk="class" line="450" lineend="476" name="CGIHandler">
        <variable citdl="True" line="467" name="wsgi_run_once" />
        <scope attributes="__ctor__" ilk="function" line="473" lineend="476" name="__init__" signature="CGIHandler()">
          <variable citdl="CGIHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="dict" line="471" name="os_environ" />
      </scope>
      <scope classrefs="object" doc="Wrapper to convert file-like objects to iterables" ilk="class" name="FileWrapper" />
      <scope classrefs="object" doc="Manage a collection of HTTP response headers" ilk="class" name="Headers" />
      <scope classrefs="BaseHandler" doc="Handler that&apos;s just initialized with streams, environment, etc.  This handler subclass is intended for synchronous HTTP/1.0 origin servers," ilk="class" line="363" lineend="406" name="SimpleHandler">
        <variable attributes="__instancevar__" citdl="True" line="383" name="wsgi_multithread" />
        <scope ilk="function" line="389" lineend="390" name="get_stderr" signature="get_stderr()">
          <variable citdl="SimpleHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="380" name="stdout" />
        <variable attributes="__instancevar__" line="379" name="stdin" />
        <variable attributes="__instancevar__" citdl="False" line="384" name="wsgi_multiprocess" />
        <variable attributes="protected __instancevar__" citdl="function" line="404" name="_flush" />
        <scope ilk="function" line="386" lineend="387" name="get_stdin" signature="get_stdin()">
          <variable citdl="SimpleHandler" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="382" name="base_env" />
        <variable attributes="__instancevar__" line="381" name="stderr" />
        <scope attributes="protected" ilk="function" line="395" lineend="402" name="_write" signature="_write(data)">
          <variable citdl="SimpleHandler" ilk="argument" name="self" />
          <variable citdl="data.encode()" ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="392" lineend="393" name="add_cgi_vars" signature="add_cgi_vars()">
          <variable citdl="SimpleHandler" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="376" lineend="384" name="__init__" signature="SimpleHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)">
          <variable citdl="SimpleHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="stdin" />
          <variable ilk="argument" name="stdout" />
          <variable ilk="argument" name="stderr" />
          <variable ilk="argument" name="environ" />
          <variable citdl="True" ilk="argument" name="multithread" />
          <variable citdl="False" ilk="argument" name="multiprocess" />
        </scope>
      </scope>
      <variable citdl="list" line="8" name="__all__" />
      <scope ilk="function" line="16" lineend="19" name="format_date_time" returns="tuple" signature="format_date_time(timestamp)">
        <variable ilk="argument" name="timestamp" />
      </scope>
      <scope doc="Return a guess for whether &apos;wsgi.url_scheme&apos; should be &apos;http&apos; or &apos;https&apos;" ilk="function" name="guess_scheme" signature="guess_scheme(environ)" />
      <scope doc="Return true if &apos;header_name&apos; is an HTTP/1.1 &quot;Hop-by-Hop&quot; header" ilk="function" name="is_hop_by_hop" signature="is_hop_by_hop(header_name)" />
      <import module="os" />
      <import module="sys" />
      <import module="time" />
      <variable attributes="protected __hidden__" citdl="list" line="12" name="_monthname" />
      <variable attributes="protected __hidden__" citdl="list" line="11" name="_weekdayname" />
    </scope>
    <scope doc="distutils.unixccompiler  Contains the UnixCCompiler class, a subclass of CCompiler that handles" ilk="blob" lang="Python3" name="distutils.unixccompiler">
      <scope classrefs="object" doc="Abstract base class to define the interface that must be implemented by real compiler classes.  Also has some utility methods used by several compiler classes." ilk="class" name="CCompiler" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompiler" ilk="class" line="106" lineend="336" name="UnixCCompiler">
        <variable citdl="dict" line="116" name="executables" />
        <variable citdl="list" line="135" name="src_extensions" />
        <scope ilk="function" line="315" lineend="336" name="find_library_file" returns="os.path.join()" signature="find_library_file(dirs, lib, debug=0)">
          <variable citdl="UnixCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dirs" />
          <variable ilk="argument" name="lib" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable citdl="self.library_filename()" line="316" name="shared_f" />
          <variable citdl="self.library_filename()" line="317" name="dylib_f" />
          <variable citdl="self.library_filename()" line="318" name="static_f" />
          <variable citdl="os.path.join()" line="321" name="shared" />
          <variable citdl="os.path.join()" line="322" name="dylib" />
          <variable citdl="os.path.join()" line="323" name="static" />
        </scope>
        <variable citdl="str" line="137" name="static_lib_extension" />
        <variable citdl="str" line="140" name="static_lib_format" />
        <variable citdl="str" line="136" name="obj_extension" />
        <scope ilk="function" line="312" lineend="313" name="library_option" returns="str" signature="library_option(lib)">
          <variable citdl="UnixCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="lib" />
        </scope>
        <variable citdl="str" line="139" name="dylib_lib_extension" />
        <scope attributes="protected" ilk="function" line="267" lineend="268" name="_is_gcc" returns="bool" signature="_is_gcc(compiler_name)">
          <variable citdl="UnixCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="compiler_name" />
        </scope>
        <scope ilk="function" line="270" lineend="310" name="runtime_library_dir_option" returns="str" signature="runtime_library_dir_option(dir)">
          <variable citdl="UnixCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
          <variable citdl="os.path.basename()" line="284" name="compiler" />
        </scope>
        <variable citdl="str" line="108" name="compiler_type" />
        <scope ilk="function" line="144" lineend="168" name="preprocess" signature="preprocess(source, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None)">
          <variable citdl="UnixCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="output_file" />
          <variable ilk="argument" name="macros" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable citdl="self._fix_compile_args()" line="146" name="fixed_args" />
          <variable citdl="gen_preprocess_options()" line="148" name="pp_opts" />
          <variable citdl="gen_preprocess_options()" line="149" name="pp_args" />
        </scope>
        <variable citdl="str" line="138" name="shared_lib_extension" />
        <scope attributes="protected" ilk="function" line="170" lineend="178" name="_compile" signature="_compile(obj, src, ext, cc_args, extra_postargs, pp_opts)">
          <variable citdl="UnixCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="src" />
          <variable ilk="argument" name="ext" />
          <variable ilk="argument" name="cc_args" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="pp_opts" />
          <variable citdl="self.compiler_so" line="171" name="compiler_so" />
        </scope>
        <variable citdl="str" line="142" name="exe_extension" />
        <scope ilk="function" line="180" lineend="204" name="create_static_lib" signature="create_static_lib(objects, output_libname, output_dir=None, debug=0, target_lang=None)">
          <variable citdl="UnixCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="objects" />
          <variable ilk="argument" name="output_libname" />
          <variable ilk="argument" name="output_dir" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="target_lang" />
          <variable citdl="self.library_filename()" line="184" name="output_filename" />
        </scope>
        <scope ilk="function" line="264" lineend="265" name="library_dir_option" returns="str" signature="library_dir_option(dir)">
          <variable citdl="UnixCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <scope ilk="function" line="206" lineend="258" name="link" signature="link(target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)">
          <variable citdl="UnixCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="target_desc" />
          <variable ilk="argument" name="objects" />
          <variable citdl="os.path.join()" ilk="argument" name="output_filename" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable ilk="argument" name="export_symbols" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="build_temp" />
          <variable ilk="argument" name="target_lang" />
          <variable citdl="self._fix_lib_args()" line="212" name="fixed_args" />
          <variable citdl="gen_lib_options()" line="216" name="lib_opts" />
          <variable citdl="gen_lib_options()" line="224" name="ld_args" />
          <variable citdl="list" line="235" name="linker" />
          <variable citdl="int" line="244" name="i" />
        </scope>
      </scope>
      <variable citdl="str" line="16" name="__revision__" />
      <scope doc="Generate linker options for searching library directories and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at least two types of compilers: the typical Unix compiler and Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <import module="log" />
      <scope doc="Return true if &apos;source&apos; exists and is more recently modified than &apos;target&apos;, or if &apos;source&apos; exists and &apos;target&apos; doesn&apos;t." ilk="function" name="newer" signature="newer(source, target)" />
      <import module="os" />
      <import module="sys" />
      <import module="sysconfig" />
      <scope attributes="protected __hidden__" doc="This function will strip &apos;-isysroot PATH&apos; and &apos;-arch ARCH&apos; from the compile flags if the user has specified one them in extra_compile_flags." ilk="function" line="43" lineend="104" name="_darwin_compiler_fixup" returns="list()" signature="_darwin_compiler_fixup(compiler_so, cc_args)">
        <variable citdl="list()" ilk="argument" name="compiler_so" />
        <variable ilk="argument" name="cc_args" />
        <variable citdl="bool" line="52" name="stripArch" />
        <variable line="55" name="kernel_version" />
        <variable citdl="int()" line="56" name="major_version" />
        <variable citdl="bool" line="64" name="stripSysroot" />
        <variable citdl="compiler_so.index()" line="69" name="index" />
        <variable line="91" name="sysroot" />
        <variable citdl="cc_args.index()" line="93" name="idx" />
      </scope>
    </scope>
    <scope doc="Python version compatibility support for minidom." ilk="blob" lang="Python3" name="xml.dom.minicompat">
      <scope classrefs="tuple" ilk="class" name="EmptyNodeList" />
      <scope classrefs="list" ilk="class" name="NodeList" />
      <variable citdl="tuple" name="StringTypes" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="defproperty" signature="defproperty(klass, name, doc)" />
      <import module="xml" />
    </scope>
    <scope doc="Classes to generate plain text from a message object tree." ilk="blob" lang="Python3" name="email.generator">
      <scope classrefs="Generator" doc="Generator a text representation of a message.  Like the Generator base class, except that non-text parts are substituted" ilk="class" line="272" lineend="324" name="DecodedGenerator">
        <scope attributes="protected" ilk="function" line="306" lineend="324" name="_dispatch" signature="_dispatch(msg)">
          <variable citdl="DecodedGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="part.get_content_maintype()" line="308" name="maintype" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="302" name="_fmt" />
        <scope attributes="__ctor__" doc="Like Generator.__init__() except that an additional optional argument is allowed." ilk="function" line="278" lineend="304" name="__init__" signature="DecodedGenerator(outfp, mangle_from_=True, maxheaderlen=78, fmt=None)">
          <variable citdl="DecodedGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="outfp" />
          <variable citdl="True" ilk="argument" name="mangle_from_" />
          <variable citdl="int" ilk="argument" name="maxheaderlen" />
          <variable ilk="argument" name="fmt" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Generates output from a Message object tree.  This basic generator writes the message to the given file object as plain" ilk="class" line="25" lineend="266" name="Generator">
        <variable attributes="protected __instancevar__" citdl="StringIO()" line="52" name="_fp" />
        <variable attributes="protected __instancevar__" citdl="int" line="54" name="_maxheaderlen" />
        <scope attributes="protected" ilk="function" line="150" lineend="158" name="_handle_text" signature="_handle_text(msg)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="fcre.sub()" line="151" name="payload" />
        </scope>
        <scope attributes="protected" ilk="function" line="229" lineend="248" name="_handle_message_delivery_status" signature="_handle_message_delivery_status(msg)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="list" line="233" name="blocks" />
          <variable citdl="StringIO()" line="235" name="s" />
          <variable citdl="clone()" line="236" name="g" />
          <variable citdl="s.getvalue()" line="238" name="text" />
          <variable citdl="text.split()" line="239" name="lines" />
        </scope>
        <scope attributes="protected" ilk="function" line="218" lineend="227" name="_handle_multipart_signed" signature="_handle_multipart_signed(msg)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="int" line="222" name="old_maxheaderlen" />
        </scope>
        <scope attributes="protected" ilk="function" line="133" lineend="144" name="_write_headers" signature="_write_headers(msg)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="Header()" line="140" name="header" />
        </scope>
        <scope doc="Clone this generator with the exact same options." ilk="function" line="78" lineend="80" name="clone" returns="self.__class__()" signature="clone(fp)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="53" name="_mangle_from_" />
        <scope ilk="function" line="56" lineend="58" name="write" signature="write(s)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope attributes="protected" ilk="function" line="163" lineend="216" name="_handle_multipart" signature="_handle_multipart(msg)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="list" line="167" name="msgtexts" />
          <variable citdl="list" line="168" name="subparts" />
          <variable citdl="StringIO()" line="179" name="s" />
          <variable citdl="clone()" line="180" name="g" />
          <variable citdl="NL.join()" line="185" name="alltext" />
          <variable citdl="msg.get_boundary()" line="187" name="boundary" />
        </scope>
        <scope doc="Print the message object tree rooted at msg to the output file specified when the Generator instance was created." ilk="function" line="60" lineend="76" name="flatten" signature="flatten(msg, unixfrom=False)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="False" ilk="argument" name="unixfrom" />
          <variable citdl="msg.get_unixfrom()" line="72" name="ufrom" />
        </scope>
        <scope attributes="protected" ilk="function" line="250" lineend="266" name="_handle_message" signature="_handle_message(msg)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="StringIO()" line="251" name="s" />
          <variable citdl="clone()" line="252" name="g" />
          <variable citdl="msg.get_payload()" line="262" name="payload" />
        </scope>
        <scope attributes="protected" ilk="function" line="113" lineend="127" name="_dispatch" signature="_dispatch(msg)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="msg.get_content_maintype()" line="118" name="main" />
          <variable citdl="msg.get_content_subtype()" line="119" name="sub" />
          <variable line="120" name="specific" />
          <variable citdl="getattr()" line="121" name="meth" />
          <variable citdl="main.replace()" line="123" name="generic" />
        </scope>
        <scope attributes="protected" ilk="function" line="86" lineend="111" name="_write" signature="_write(msg)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable line="98" name="oldfp" />
          <variable citdl="getattr()" line="106" name="meth" />
        </scope>
        <variable attributes="protected" citdl="Generator._handle_text" line="161" name="_writeBody" />
        <scope attributes="__ctor__" doc="Create the generator for message flattening." ilk="function" line="35" lineend="54" name="__init__" signature="Generator(outfp, mangle_from_=True, maxheaderlen=78)">
          <variable citdl="Generator" ilk="argument" name="self" />
          <variable ilk="argument" name="outfp" />
          <variable citdl="True" ilk="argument" name="mangle_from_" />
          <variable citdl="int" ilk="argument" name="maxheaderlen" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" name="Header" />
      <variable citdl="str" line="19" name="NL" />
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <variable citdl="str" line="18" name="UNDERSCORE" />
      <variable citdl="list" line="7" name="__all__" />
      <variable citdl="SRE_Pattern" line="21" name="fcre" />
      <import module="random" />
      <import module="re" />
      <import module="sys" />
      <import module="time" />
      <import module="warnings" />
      <variable attributes="protected __hidden__" citdl="str" line="270" name="_FMT" />
      <scope attributes="protected __hidden__" ilk="function" line="332" lineend="347" name="_make_boundary" returns="str()" signature="_make_boundary(text=None)">
        <variable ilk="argument" name="text" />
        <variable citdl="random.randrange()" line="335" name="token" />
        <variable citdl="str" line="336" name="boundary" />
        <variable citdl="str" line="339" name="b" />
        <variable citdl="int" line="340" name="counter" />
        <variable citdl="re.compile()" line="342" name="cre" />
      </scope>
      <variable attributes="protected __hidden__" citdl="len()" line="329" name="_width" />
      <variable attributes="protected __hidden__" citdl="len()" line="330" name="_fmt" />
    </scope>
    <scope doc="Implementation module for SSL socket operations.  See the socket module for documentation." ilk="blob" lang="Python3" name="_ssl">
      <variable citdl="int" name="CERT_NONE" />
      <variable citdl="int" name="CERT_OPTIONAL" />
      <variable citdl="int" name="CERT_REQUIRED" />
      <variable citdl="int" name="PROTOCOL_SSLv2" />
      <variable citdl="int" name="PROTOCOL_SSLv23" />
      <variable citdl="int" name="PROTOCOL_SSLv3" />
      <variable citdl="int" name="PROTOCOL_TLSv1" />
      <scope doc="Mix string into the OpenSSL PRNG state." ilk="function" name="RAND_add" signature="RAND_add(string, entropy)" />
      <scope doc="Queries the entropy gather daemon (EGD) on the socket named by &apos;path&apos;." ilk="function" name="RAND_egd" signature="RAND_egd(path) -&gt; bytes" />
      <scope doc="Returns 1 if the OpenSSL PRNG has been seeded with enough data and 0 if not." ilk="function" name="RAND_status" signature="RAND_status() -&gt; 0 or 1" />
      <scope classrefs="error" ilk="class" name="SSLError" />
      <scope classrefs="object" ilk="class" name="SSLType" />
      <variable citdl="int" name="SSL_ERROR_EOF" />
      <variable citdl="int" name="SSL_ERROR_INVALID_ERROR_CODE" />
      <variable citdl="int" name="SSL_ERROR_SSL" />
      <variable citdl="int" name="SSL_ERROR_SYSCALL" />
      <variable citdl="int" name="SSL_ERROR_WANT_CONNECT" />
      <variable citdl="int" name="SSL_ERROR_WANT_READ" />
      <variable citdl="int" name="SSL_ERROR_WANT_WRITE" />
      <variable citdl="int" name="SSL_ERROR_WANT_X509_LOOKUP" />
      <variable citdl="int" name="SSL_ERROR_ZERO_RETURN" />
      <scope doc="sslwrap(socket, server_side, [keyfile, certfile, certs_mode, protocol, cacertsfile]) -&gt; sslobject" ilk="function" name="sslwrap" />
    </scope>
    <scope doc="program/module to trace Python program or function execution  Sample use, command line:" ilk="blob" lang="Python3" name="trace">
      <scope classrefs="object" ilk="class" line="201" lineend="370" name="CoverageResults">
        <variable attributes="__instancevar__" citdl="dict" line="204" name="counts" />
        <scope doc="@param coverdir" ilk="function" line="253" lineend="334" name="write_results" signature="write_results(show_missing=True, summary=False, coverdir=None)">
          <variable citdl="CoverageResults" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="show_missing" />
          <variable citdl="False" ilk="argument" name="summary" />
          <variable ilk="argument" name="coverdir" />
          <variable citdl="pfile" line="267" name="lastfile" />
          <variable citdl="cfile" line="274" name="lastcfile" />
          <variable citdl="dict" line="282" name="per_file" />
          <variable citdl="per_file.get()" line="284" name="lines_hit" />
          <variable citdl="dict" line="288" name="sums" />
          <variable citdl="list" line="295" name="filename" />
          <variable citdl="os.path.dirname()" line="298" name="dir" />
          <variable citdl="fullmodname()" line="299" name="modulename" />
          <variable citdl="dict" line="309" name="lnotab" />
          <variable citdl="linecache.getlines()" line="313" name="source" />
          <variable citdl="os.path.join()" line="314" name="coverpath" />
          <variable citdl="int()" line="319" name="percent" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.counts.copy()" line="207" name="counter" />
        <scope doc="Return a coverage results file in path." ilk="function" line="336" lineend="370" name="write_results_file" returns="tuple" signature="write_results_file(path, lines, lnotab, lines_hit)">
          <variable citdl="CoverageResults" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="lines" />
          <variable ilk="argument" name="lnotab" />
          <variable ilk="argument" name="lines_hit" />
          <variable citdl="open()" line="340" name="outfile" />
          <variable citdl="int" line="346" name="n_lines" />
          <variable citdl="int" line="347" name="n_hits" />
          <variable citdl="i" line="349" name="lineno" />
        </scope>
        <scope doc="Merge in the data from another CoverageResults" ilk="function" line="235" lineend="251" name="update" signature="update(other)">
          <variable citdl="CoverageResults" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="dict" line="237" name="counts" />
          <variable citdl="self.calledfuncs.copy()" line="238" name="calledfuncs" />
          <variable citdl="self.callers.copy()" line="239" name="callers" />
          <variable citdl="other.counts" line="240" name="other_counts" />
          <variable citdl="other.calledfuncs" line="241" name="other_calledfuncs" />
          <variable citdl="other.callers" line="242" name="other_callers" />
        </scope>
        <variable attributes="__instancevar__" line="217" name="outfile" />
        <variable attributes="__instancevar__" citdl="self.calledfuncs.copy()" line="208" name="calledfuncs" />
        <scope doc="Return True if the filename does not refer to a file we want to have reported." ilk="function" line="228" lineend="233" name="is_ignored_filename" returns="bool" signature="is_ignored_filename(filename)">
          <variable citdl="CoverageResults" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
        </scope>
        <variable attributes="__instancevar__" line="216" name="infile" />
        <scope attributes="__ctor__" ilk="function" line="202" lineend="226" name="__init__" signature="CoverageResults(counts=None, calledfuncs=None, infile=None, callers=None, outfile=None)">
          <variable citdl="CoverageResults" ilk="argument" name="self" />
          <variable ilk="argument" name="counts" />
          <variable ilk="argument" name="calledfuncs" />
          <variable ilk="argument" name="infile" />
          <variable ilk="argument" name="callers" />
          <variable ilk="argument" name="outfile" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.callers.copy()" line="212" name="callers" />
      </scope>
      <scope classrefs="object" ilk="class" line="115" lineend="166" name="Ignore">
        <variable attributes="protected __instancevar__" citdl="list()" line="118" name="_dirs" />
        <variable attributes="protected __instancevar__" citdl="dict" line="121" name="_ignore" />
        <variable attributes="protected __instancevar__" citdl="list" line="117" name="_mods" />
        <scope attributes="__ctor__" ilk="function" line="116" lineend="121" name="__init__" signature="Ignore(modules=None, dirs=None)">
          <variable citdl="Ignore" ilk="argument" name="self" />
          <variable ilk="argument" name="modules" />
          <variable ilk="argument" name="dirs" />
        </scope>
        <scope ilk="function" line="123" lineend="166" name="names" returns="int" signature="names(filename, modulename)">
          <variable citdl="Ignore" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="modulename" />
          <variable citdl="len()" line="137" name="n" />
        </scope>
      </scope>
      <variable citdl="str" line="110" name="PRAGMA_NOCOVER" />
      <scope classrefs="object" ilk="class" line="437" lineend="654" name="Trace">
        <scope ilk="function" line="642" lineend="648" name="localtrace_count" returns="self.localtrace_trace" signature="localtrace_count(frame, why, arg)">
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="why" />
          <variable ilk="argument" name="arg" />
          <variable citdl="frame.f_code.co_filename" line="644" name="filename" />
          <variable citdl="frame.f_lineno" line="645" name="lineno" />
          <variable citdl="tuple" line="646" name="key" />
        </scope>
        <scope ilk="function" line="526" lineend="569" name="file_module_function_of" returns="tuple" signature="file_module_function_of(frame)">
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable citdl="frame.f_code" line="527" name="code" />
          <variable citdl="code.co_filename" line="528" name="filename" />
          <variable citdl="modname()" line="530" name="modulename" />
          <variable citdl="code.co_name" line="534" name="funcname" />
          <variable citdl="str()" line="535" name="clsname" />
          <variable citdl="list" line="543" name="funcs" />
          <variable citdl="list" line="549" name="dicts" />
          <variable citdl="list" line="552" name="classes" />
        </scope>
        <scope ilk="function" line="614" lineend="627" name="localtrace_trace_and_count" returns="self.localtrace_trace" signature="localtrace_trace_and_count(frame, why, arg)">
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="why" />
          <variable ilk="argument" name="arg" />
          <variable citdl="frame.f_code.co_filename" line="617" name="filename" />
          <variable citdl="frame.f_lineno" line="618" name="lineno" />
          <variable citdl="tuple" line="619" name="key" />
          <variable citdl="os.path.basename()" line="624" name="bname" />
        </scope>
        <scope ilk="function" line="650" lineend="654" name="results" returns="CoverageResults" signature="results()">
          <variable citdl="Trace" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="466" name="_calledfuncs" />
        <scope ilk="function" line="515" lineend="524" name="runfunc" returns="func()" signature="runfunc(func, *args, **kw)">
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="func()" line="516" name="result" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="461" name="counts" />
        <scope attributes="__ctor__" doc="@param count true iff it should count number of times each line is executed @param trace true iff it should print out each line that is being counted" ilk="function" line="438" lineend="487" name="__init__" signature="Trace(count=1, trace=1, countfuncs=0, countcallers=0, ignoremods=(), ignoredirs=(), infile=None, outfile=None, timing=False)">
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="count" />
          <variable citdl="int" ilk="argument" name="trace" />
          <variable citdl="int" ilk="argument" name="countfuncs" />
          <variable citdl="int" ilk="argument" name="countcallers" />
          <variable citdl="tuple" ilk="argument" name="ignoremods" />
          <variable citdl="tuple" ilk="argument" name="ignoredirs" />
          <variable ilk="argument" name="infile" />
          <variable ilk="argument" name="outfile" />
          <variable citdl="False" ilk="argument" name="timing" />
        </scope>
        <scope ilk="function" line="629" lineend="640" name="localtrace_trace" returns="self.localtrace_trace" signature="localtrace_trace(frame, why, arg)">
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="why" />
          <variable ilk="argument" name="arg" />
          <variable citdl="frame.f_code.co_filename" line="632" name="filename" />
          <variable citdl="frame.f_lineno" line="633" name="lineno" />
          <variable citdl="os.path.basename()" line="637" name="bname" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.globaltrace_lt" line="473" name="globaltrace" />
        <scope doc="Handler for call events." ilk="function" line="591" lineend="612" name="globaltrace_lt" returns="self.localtrace_trace" signature="globaltrace_lt(frame, why, arg)">
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="why" />
          <variable ilk="argument" name="arg" />
          <variable citdl="frame.f_code" line="598" name="code" />
          <variable citdl="frame.f_globals.get()" line="599" name="filename" />
          <variable citdl="modname()" line="603" name="modulename" />
          <variable citdl="self.ignore.names()" line="605" name="ignore_it" />
        </scope>
        <scope ilk="function" line="502" lineend="513" name="runctx" signature="runctx(cmd, globals=None, locals=None)">
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable citdl="dict" ilk="argument" name="globals" />
          <variable citdl="dict" ilk="argument" name="locals" />
        </scope>
        <variable attributes="__instancevar__" line="458" name="infile" />
        <scope ilk="function" line="489" lineend="500" name="run" signature="run(cmd)">
          <import line="490" module="__main__" />
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable citdl="dict" line="491" name="dict" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="465" name="trace" />
        <variable attributes="__instancevar__" citdl="time.time()" line="469" name="start_time" />
        <variable attributes="__instancevar__" line="459" name="outfile" />
        <scope doc="Handler for call events." ilk="function" line="571" lineend="580" name="globaltrace_trackcallers" signature="globaltrace_trackcallers(frame, why, arg)">
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="why" />
          <variable ilk="argument" name="arg" />
          <variable citdl="file_module_function_of()" line="578" name="this_func" />
          <variable citdl="file_module_function_of()" line="579" name="parent_func" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.localtrace_trace_and_count" line="478" name="localtrace" />
        <scope doc="Handler for call events." ilk="function" line="582" lineend="589" name="globaltrace_countfuncs" signature="globaltrace_countfuncs(frame, why, arg)">
          <variable citdl="Trace" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="why" />
          <variable ilk="argument" name="arg" />
          <variable citdl="file_module_function_of()" line="588" name="this_func" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="468" name="_caller_cache" />
        <variable attributes="__instancevar__" citdl="dict" line="463" name="pathtobasename" />
        <variable attributes="__instancevar__" citdl="dict" line="462" name="blabbed" />
        <variable attributes="__instancevar__" citdl="Ignore" line="460" name="ignore" />
        <variable attributes="protected __instancevar__" citdl="dict" line="467" name="_callers" />
        <variable attributes="__instancevar__" citdl="int" line="464" name="donothing" />
      </scope>
      <scope doc="Return dict where keys are line numbers in the line number table." ilk="function" line="423" lineend="435" name="find_executable_linenos" returns="dict" signature="find_executable_linenos(filename)">
        <variable line="428" name="prog" />
        <variable citdl="find_strings()" line="434" name="strs" />
        <variable citdl="compile()" line="433" name="code" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Return lineno dict for all code objects reachable from code." ilk="function" line="388" lineend="398" name="find_lines" returns="find_lines_from_code()" signature="find_lines(code, strs)">
        <variable ilk="argument" name="strs" />
        <variable ilk="argument" name="code" />
        <variable citdl="find_lines_from_code()" line="391" name="linenos" />
      </scope>
      <scope doc="Return dict where keys are lines in the line number table." ilk="function" line="372" lineend="386" name="find_lines_from_code" returns="dict" signature="find_lines_from_code(code, strs)">
        <variable ilk="argument" name="code" />
        <variable ilk="argument" name="strs" />
        <variable citdl="False" line="378" name="docstring" />
        <variable citdl="dict" line="374" name="linenos" />
        <variable citdl="code.co_firstlineno" line="380" name="lineno" />
        <variable line="376" name="line_increments" />
        <variable citdl="len()" line="377" name="table_length" />
      </scope>
      <scope doc="Return a dict of possible docstring positions." ilk="function" line="400" lineend="421" name="find_strings" returns="dict" signature="find_strings(filename, encoding=None)">
        <variable citdl="token.INDENT" line="410" name="prev_ttype" />
        <variable citdl="open()" line="411" name="f" />
        <variable ilk="argument" name="encoding" />
        <variable citdl="dict" line="407" name="d" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Return a plausible module name for the path." ilk="function" line="175" lineend="199" name="fullmodname" returns="filename" signature="fullmodname(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="base.replace()" line="192" name="base" />
        <variable citdl="os.path.normcase()" line="183" name="comparepath" />
        <variable citdl="os.path.normcase()" line="184" name="longest" />
        <variable citdl="os.path.normcase()" line="186" name="dir" />
      </scope>
      <import module="gc" />
      <import module="io" />
      <import module="linecache" />
      <scope ilk="function" line="660" lineend="813" name="main" signature="main(argv=None)">
        <variable citdl="int" line="681" name="count" />
        <variable citdl="open()" line="799" name="fp" />
        <variable citdl="True" line="690" name="listfuncs" />
        <variable citdl="val" line="684" name="counts_file" />
        <variable citdl="int" line="680" name="trace" />
        <variable citdl="int" line="683" name="no_report" />
        <variable citdl="int" line="685" name="missing" />
        <variable line="791" name="progname" />
        <variable citdl="sys.argv" ilk="argument" name="argv" />
        <variable citdl="t.results()" line="787" name="results" />
        <variable citdl="True" line="692" name="timing" />
        <variable citdl="fp.read()" line="801" name="script" />
        <variable citdl="s.replace()" line="754" name="s" />
        <variable citdl="list" line="687" name="ignore_dirs" />
        <variable citdl="val" line="688" name="coverdir" />
        <variable citdl="int" line="682" name="report" />
        <variable citdl="True" line="691" name="countcallers" />
        <variable citdl="int" line="689" name="summary" />
        <variable citdl="list" line="686" name="ignore_modules" />
        <variable citdl="Trace" line="794" name="t" />
      </scope>
      <scope doc="Return a plausible module name for the patch." ilk="function" line="168" lineend="173" name="modname" returns="filename" signature="modname(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="os.path.basename()" line="171" name="base" />
      </scope>
      <import module="os" />
      <import module="pickle" />
      <import module="re" />
      <variable citdl="SRE_Pattern" line="113" name="rx_blank" />
      <import module="sys" />
      <import module="threading" />
      <import module="time" />
      <import module="token" />
      <import module="tokenize" />
      <import module="types" />
      <scope ilk="function" line="65" lineend="108" name="usage" signature="usage(outfile)">
        <variable ilk="argument" name="outfile" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="656" lineend="658" name="_err_exit" signature="_err_exit(msg)">
        <variable ilk="argument" name="msg" />
      </scope>
    </scope>
    <scope doc="Python part of the warnings subsystem." ilk="blob" lang="Python3" name="warnings">
      <scope classrefs="object" doc="Holds the result of a single showwarning() call." ilk="class" name="WarningMessage" />
      <variable citdl="list" name="__all__" />
      <scope classrefs="object" doc="A context manager that copies and restores the warnings filter upon exiting the context. " ilk="class" name="catch_warnings" />
      <variable citdl="str" name="default_action" />
      <variable citdl="str" name="defaultaction" />
      <variable citdl="list" name="filters" />
      <scope doc="Insert an entry into the list of warnings filters (at the front)." ilk="function" name="filterwarnings" signature="filterwarnings(action, message=&apos;&apos;, category=&lt;class &apos;Warning&apos;&gt;, module=&apos;&apos;, lineno=0, append=False)" />
      <scope doc="Function to format a warning the standard way." ilk="function" name="formatwarning" signature="formatwarning(message, category, filename, lineno, line=None)" />
      <import module="linecache" />
      <variable citdl="dict" name="once_registry" />
      <variable citdl="dict" name="onceregistry" />
      <scope doc="Clear the list of warning filters, so that no filters are active." ilk="function" name="resetwarnings" signature="resetwarnings()" />
      <scope doc="Hook to write a warning to a file; replace if you like." ilk="function" name="showwarning" signature="showwarning(message, category, filename, lineno, file=None, line=None)" />
      <scope doc="Insert a simple entry into the list of warnings filters (at the front)." ilk="function" name="simplefilter" signature="simplefilter(action, category=&lt;class &apos;Warning&apos;&gt;, lineno=0, append=False)" />
      <import module="sys" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <scope doc="Low-level inferface to warnings functionality." ilk="function" name="warn_explicit" />
    </scope>
    <scope doc="Filename globbing utility." ilk="blob" lang="Python3" name="glob">
      <variable citdl="list" line="8" name="__all__" />
      <import module="fnmatch" />
      <scope doc="Return a list of paths matching a pathname pattern." ilk="function" line="10" lineend="16" name="glob" returns="list()" signature="glob(pathname)">
        <variable ilk="argument" name="pathname" />
      </scope>
      <scope ilk="function" line="63" lineend="72" name="glob0" returns="list" signature="glob0(dirname, basename)">
        <variable ilk="argument" name="basename" />
        <variable ilk="argument" name="dirname" />
      </scope>
      <scope ilk="function" line="49" lineend="61" name="glob1" returns="list" signature="glob1(dirname, pattern)">
        <variable ilk="argument" name="pattern" />
        <variable citdl="bytes()" ilk="argument" name="dirname" />
        <variable citdl="os.listdir()" line="56" name="names" />
      </scope>
      <scope ilk="function" line="78" lineend="83" name="has_magic" returns="bool" signature="has_magic(s)">
        <variable ilk="argument" name="s" />
        <variable citdl="magic_check_bytes.search()" line="80" name="match" />
      </scope>
      <scope doc="Return an iterator which yields the paths matching a pathname pattern." ilk="function" line="18" lineend="43" name="iglob" signature="iglob(pathname)">
        <variable citdl="()" line="34" name="dirs" />
        <variable citdl="glob0" line="38" name="glob_in_dir" />
        <variable ilk="argument" name="pathname" />
      </scope>
      <variable citdl="SRE_Pattern" line="75" name="magic_check" />
      <variable citdl="SRE_Pattern" line="76" name="magic_check_bytes" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
    </scope>
    <scope doc="More comprehensive traceback formatting for Python scripts.  To enable this module, do:" ilk="blob" lang="Python3" name="cgitb">
      <scope classrefs="object" doc="A hook to replace sys.excepthook that shows tracebacks in HTML." ilk="class" line="257" lineend="306" name="Hook">
        <scope ilk="function" line="271" lineend="306" name="handle" signature="handle(info=None)">
          <variable citdl="Hook" ilk="argument" name="self" />
          <variable citdl="sys.exc_info()" ilk="argument" name="info" />
          <variable citdl="text" line="276" name="formatter" />
          <variable citdl="False" line="277" name="plain" />
          <variable citdl="formatter()" line="279" name="doc" />
          <variable line="294" name="suffix" />
          <variable citdl="os.fdopen()" line="297" name="file" />
          <variable citdl="path" line="300" name="msg" />
        </scope>
        <variable attributes="__instancevar__" citdl="sys.stdout" line="265" name="file" />
        <variable attributes="__instancevar__" citdl="str" line="266" name="format" />
        <variable attributes="__instancevar__" line="263" name="logdir" />
        <variable attributes="__instancevar__" citdl="int" line="264" name="context" />
        <scope ilk="function" line="268" lineend="269" name="__call__" signature="__call__(etype, evalue, etb)">
          <variable citdl="Hook" ilk="argument" name="self" />
          <variable ilk="argument" name="etype" />
          <variable ilk="argument" name="evalue" />
          <variable ilk="argument" name="etb" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="262" name="display" />
        <scope attributes="__ctor__" ilk="function" line="260" lineend="266" name="__init__" signature="Hook(display=1, logdir=None, context=5, file=None, format=&apos;html&apos;)">
          <variable citdl="Hook" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="display" />
          <variable ilk="argument" name="logdir" />
          <variable citdl="int" ilk="argument" name="context" />
          <variable ilk="argument" name="file" />
          <variable citdl="str" ilk="argument" name="format" />
        </scope>
      </scope>
      <variable citdl="list" line="46" name="__UNDEF__" />
      <scope doc="Install an exception handler that formats tracebacks as HTML." ilk="function" line="309" lineend="316" name="enable" signature="enable(display=1, logdir=None, context=5, format=&apos;html&apos;)">
        <variable citdl="str" ilk="argument" name="format" />
        <variable ilk="argument" name="logdir" />
        <variable citdl="int" ilk="argument" name="context" />
        <variable citdl="int" ilk="argument" name="display" />
      </scope>
      <scope ilk="function" line="59" lineend="63" name="grey" returns="str" signature="grey(text)">
        <variable ilk="argument" name="text" />
      </scope>
      <scope ilk="function" line="308" name="handler" />
      <scope doc="Return a nice HTML document describing a given traceback." ilk="function" line="102" lineend="190" name="html" returns="pydoc.html.heading()" signature="html(einfo, context=5)">
        <variable citdl="list" line="153" name="dump" />
        <variable citdl="small()" line="144" name="num" />
        <variable citdl="dict" line="153" name="done" />
        <variable citdl="os.path.abspath()" line="121" name="file" />
        <variable citdl="list" line="117" name="frames" />
        <variable citdl="list" line="139" name="rows" />
        <variable citdl="scanvars()" line="137" name="vars" />
        <variable citdl="str" line="107" name="pyver" />
        <variable citdl="str" line="126" name="call" />
        <scope ilk="function" line="133" lineend="136" name="reader" returns="linecache.getline()" signature="reader(lnum=[lnum])">
          <variable citdl="list" ilk="argument" name="lnum" />
        </scope>
        <variable citdl="etype.__name__" line="106" name="etype" />
        <variable citdl="str" line="109" name="head" />
        <variable citdl="inspect.getinnerframes()" line="118" name="records" />
        <variable citdl="str" line="122" name="link" />
        <variable citdl="time.ctime()" line="108" name="date" />
        <variable citdl="str" line="146" name="line" />
        <variable ilk="argument" name="einfo" />
        <variable citdl="list" line="173" name="exception" />
        <variable citdl="str" line="116" name="indent" />
        <variable citdl="strong()" line="159" name="name" />
        <variable citdl="index" line="142" name="i" />
        <variable citdl="pydoc.html.repr()" line="177" name="value" />
        <variable citdl="int" ilk="argument" name="context" />
        <variable citdl="dict" line="132" name="highlight" />
      </scope>
      <import module="inspect" />
      <import module="keyword" />
      <import module="linecache" />
      <scope doc="Find the value for a given name in the given environment." ilk="function" line="65" lineend="79" name="lookup" returns="tuple" signature="lookup(name, frame, locals)">
        <variable ilk="argument" name="frame" />
        <variable line="72" name="builtins" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="locals" />
      </scope>
      <import module="os" />
      <import module="pydoc" />
      <scope doc="Return a string that resets the CGI and browser to a known state." ilk="function" line="36" lineend="44" name="reset" returns="str" signature="reset()" />
      <scope doc="Scan one logical line of Python and look up values of variables used." ilk="function" line="81" lineend="100" name="scanvars" returns="list" signature="scanvars(reader, frame, locals)">
        <variable citdl="list" line="83" name="vars" />
        <variable citdl="list" line="83" name="parent" />
        <variable ilk="argument" name="frame" />
        <variable citdl="list" line="83" name="value" />
        <variable citdl="str" line="83" name="prefix" />
        <variable ilk="argument" name="locals" />
        <variable ilk="argument" name="reader" />
        <variable citdl="token" line="83" name="lasttoken" />
      </scope>
      <scope ilk="function" line="47" lineend="51" name="small" returns="str" signature="small(text)">
        <variable ilk="argument" name="text" />
      </scope>
      <scope ilk="function" line="53" lineend="57" name="strong" returns="str" signature="strong(text)">
        <variable ilk="argument" name="text" />
      </scope>
      <import module="sys" />
      <import module="tempfile" />
      <scope doc="Return a plain text document describing a given traceback." ilk="function" line="192" lineend="255" name="text" returns="tuple" signature="text(einfo, context=5)">
        <variable citdl="list" line="230" name="dump" />
        <variable citdl="str" line="199" name="head" />
        <variable citdl="list" line="222" name="rows" />
        <variable citdl="time.ctime()" line="198" name="date" />
        <variable citdl="str" line="207" name="file" />
        <variable citdl="scanvars()" line="220" name="vars" />
        <variable citdl="inspect.getinnerframes()" line="205" name="records" />
        <variable citdl="lnum" line="224" name="i" />
        <variable citdl="list" line="244" name="exception" />
        <variable citdl="list" line="204" name="frames" />
        <variable citdl="str" line="197" name="pyver" />
        <variable citdl="lnum" line="226" name="num" />
        <variable citdl="dict" line="230" name="done" />
        <variable citdl="pydoc.text.repr()" line="246" name="value" />
        <variable citdl="int" ilk="argument" name="context" />
        <scope ilk="function" line="216" lineend="219" name="reader" returns="linecache.getline()" signature="reader(lnum=[lnum])">
          <variable citdl="list" ilk="argument" name="lnum" />
        </scope>
        <variable citdl="etype.__name__" line="196" name="etype" />
        <variable citdl="dict" line="215" name="highlight" />
        <variable ilk="argument" name="einfo" />
        <variable citdl="str" line="209" name="call" />
        <variable citdl="where" line="235" name="name" />
      </scope>
      <import module="time" />
      <import module="tokenize" />
      <import module="traceback" />
      <import module="types" />
    </scope>
    <scope doc="Abstract Base Classes (ABCs) according to PEP 3119." ilk="blob" lang="Python3" name="abc">
      <scope classrefs="type" doc="Metaclass for defining Abstract Base Classes (ABCs).  Use this metaclass to create an ABC.  An ABC can be subclassed" ilk="class" name="ABCMeta" />
      <scope classrefs="object" ilk="class" name="WeakSet" />
      <scope doc="A decorator indicating abstract methods." ilk="function" name="abstractmethod" signature="abstractmethod(funcobj)" />
      <scope classrefs="property" doc="A decorator indicating abstract properties.  Requires that the metaclass is ABCMeta or derived from it.  A" ilk="class" name="abstractproperty" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_sqlite3">
      <scope classrefs="object" ilk="class" name="Cache" />
      <scope classrefs="object" doc="SQLite database connection object." ilk="class" name="Connection" />
      <scope classrefs="object" doc="SQLite database cursor class." ilk="class" name="Cursor" />
      <scope classrefs="DatabaseError" ilk="class" name="DataError" />
      <scope classrefs="Error" ilk="class" name="DatabaseError" />
      <scope classrefs="Exception" ilk="class" name="Error" />
      <scope classrefs="DatabaseError" ilk="class" name="IntegrityError" />
      <scope classrefs="Error" ilk="class" name="InterfaceError" />
      <scope classrefs="DatabaseError" ilk="class" name="InternalError" />
      <scope classrefs="DatabaseError" ilk="class" name="NotSupportedError" />
      <scope classrefs="DatabaseError" ilk="class" name="OperationalError" />
      <scope classrefs="object" ilk="class" name="OptimizedUnicode" />
      <variable citdl="int" name="PARSE_COLNAMES" />
      <variable citdl="int" name="PARSE_DECLTYPES" />
      <scope classrefs="object" ilk="class" name="PrepareProtocol" />
      <scope classrefs="DatabaseError" ilk="class" name="ProgrammingError" />
      <scope classrefs="object" ilk="class" name="Row" />
      <variable citdl="int" name="SQLITE_ALTER_TABLE" />
      <variable citdl="int" name="SQLITE_ANALYZE" />
      <variable citdl="int" name="SQLITE_ATTACH" />
      <variable citdl="int" name="SQLITE_CREATE_INDEX" />
      <variable citdl="int" name="SQLITE_CREATE_TABLE" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_INDEX" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_TABLE" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_TRIGGER" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_VIEW" />
      <variable citdl="int" name="SQLITE_CREATE_TRIGGER" />
      <variable citdl="int" name="SQLITE_CREATE_VIEW" />
      <variable citdl="int" name="SQLITE_DELETE" />
      <variable citdl="int" name="SQLITE_DENY" />
      <variable citdl="int" name="SQLITE_DETACH" />
      <variable citdl="int" name="SQLITE_DROP_INDEX" />
      <variable citdl="int" name="SQLITE_DROP_TABLE" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_INDEX" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_TABLE" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_TRIGGER" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_VIEW" />
      <variable citdl="int" name="SQLITE_DROP_TRIGGER" />
      <variable citdl="int" name="SQLITE_DROP_VIEW" />
      <variable citdl="int" name="SQLITE_IGNORE" />
      <variable citdl="int" name="SQLITE_INSERT" />
      <variable citdl="int" name="SQLITE_OK" />
      <variable citdl="int" name="SQLITE_PRAGMA" />
      <variable citdl="int" name="SQLITE_READ" />
      <variable citdl="int" name="SQLITE_REINDEX" />
      <variable citdl="int" name="SQLITE_SELECT" />
      <variable citdl="int" name="SQLITE_TRANSACTION" />
      <variable citdl="int" name="SQLITE_UPDATE" />
      <scope classrefs="object" ilk="class" name="Statement" />
      <scope classrefs="Exception" ilk="class" name="Warning" />
      <scope doc="adapt(obj, protocol, alternate) -&gt; adapt obj to given protocol. Non-standard." ilk="function" name="adapt" signature="adapt(obj, protocol, alternate) -&gt; adapt obj to given protocol. Non-standard." />
      <variable citdl="dict" name="adapters" />
      <scope doc="Checks if a string contains a complete SQL statement." ilk="function" name="complete_statement" signature="complete_statement(sql)" />
      <scope doc="Opens a connection to the SQLite database file *database*." ilk="function" name="connect" signature="connect(database[, timeout, isolation_level, detect_types, factory])" />
      <variable citdl="dict" name="converters" />
      <scope doc="Enable or disable callback functions throwing errors to stderr." ilk="function" name="enable_callback_tracebacks" signature="enable_callback_tracebacks(flag)" />
      <scope doc="Enable or disable shared cache mode for the calling thread." ilk="function" name="enable_shared_cache" signature="enable_shared_cache(do_enable)" />
      <scope doc="Registers an adapter with pysqlite&apos;s adapter registry." ilk="function" name="register_adapter" signature="register_adapter(type, callable)" />
      <scope doc="Registers a converter with pysqlite. Non-standard." ilk="function" name="register_converter" signature="register_converter(typename, callable)" />
      <variable citdl="str" name="sqlite_version" />
      <variable citdl="str" name="version" />
    </scope>
    <scope doc="Fixer that turns 1L into 1, 0755 into 0o755." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_numliterals">
      <scope classrefs="BaseFix" ilk="class" line="12" lineend="28" name="FixNumliterals">
        <variable attributes="protected" citdl="token.NUMBER" line="15" name="_accept_type" />
        <scope ilk="function" line="21" lineend="28" name="transform" returns="Number()" signature="transform(node, results)">
          <variable citdl="FixNumliterals" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="list" line="22" name="val" />
        </scope>
        <scope ilk="function" line="17" lineend="19" name="match" returns="bool" signature="match(node)">
          <variable citdl="FixNumliterals" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
        </scope>
      </scope>
      <scope ilk="function" name="Number" signature="Number(n, prefix=None)" />
      <import module="fixer_base" />
      <import module="token" />
    </scope>
    <scope doc="Enough Mach-O to make your head spin.  See the relevant header files in /usr/include/mach-o" ilk="blob" lang="Python3" name="ctypes.macholib">
      <variable citdl="str" line="9" name="__version__" />
      <import module="dyld" />
      <import module="dylib" />
      <import module="framework" />
    </scope>
    <scope doc="Fixer for imports of itertools.(imap|ifilter|izip|ifilterfalse)" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_itertools_imports">
      <scope doc="A blank line" ilk="function" name="BlankLine" signature="BlankLine()" />
      <scope classrefs="BaseFix" ilk="class" line="8" lineend="52" name="FixItertoolsImports">
        <variable citdl="locals()" line="9" name="PATTERN" />
        <scope ilk="function" line="13" lineend="52" name="transform" returns="BlankLine()" signature="transform(node, results)">
          <variable citdl="FixItertoolsImports" ilk="argument" name="self" />
          <variable citdl="BlankLine()" ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="14" name="imports" />
          <variable citdl="list" line="16" name="children" />
          <variable citdl="child.value" line="21" name="member" />
          <variable citdl="child" line="22" name="name_node" />
          <variable citdl="name_node.value" line="26" name="member_name" />
          <variable citdl="True" line="36" name="remove_comma" />
          <variable citdl="node.prefix" line="49" name="p" />
        </scope>
      </scope>
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="# dialog.py -- Tkinter interface to the tk_dialog script." ilk="blob" lang="Python3" name="tkinter.dialog">
      <variable citdl="str" name="ACTIVE" />
      <variable citdl="str" name="ALL" />
      <variable citdl="str" name="ANCHOR" />
      <variable citdl="str" name="ARC" />
      <scope ilk="function" name="At" signature="At(x, y=None)" />
      <scope doc="# Indices: # XXX I don&apos;t like these -- take them away" ilk="function" name="AtEnd" signature="AtEnd()" />
      <scope ilk="function" name="AtInsert" signature="AtInsert(*args)" />
      <scope ilk="function" name="AtSelFirst" signature="AtSelFirst()" />
      <scope ilk="function" name="AtSelLast" signature="AtSelLast()" />
      <variable citdl="str" name="BASELINE" />
      <variable citdl="str" name="BEVEL" />
      <variable citdl="str" name="BOTH" />
      <variable citdl="str" name="BOTTOM" />
      <variable citdl="str" name="BROWSE" />
      <variable citdl="str" name="BUTT" />
      <scope classrefs="Misc" doc="Internal class." ilk="class" name="BaseWidget" />
      <scope classrefs="Image" doc="Widget which can display a bitmap." ilk="class" name="BitmapImage" />
      <scope classrefs="Variable" doc="Value holder for boolean variables." ilk="class" name="BooleanVar" />
      <scope classrefs="Widget" doc="Button widget." ilk="class" name="Button" />
      <variable citdl="str" name="CASCADE" />
      <variable citdl="str" name="CENTER" />
      <variable citdl="str" name="CHAR" />
      <variable citdl="str" name="CHECKBUTTON" />
      <variable citdl="str" name="CHORD" />
      <variable citdl="str" name="COMMAND" />
      <variable citdl="str" name="CURRENT" />
      <scope classrefs="object" doc="Internal class. Stores function to call when some user defined Tcl function is called e.g. after an event occurred." ilk="class" name="CallWrapper" />
      <scope classrefs="Widget" doc="Canvas widget to display graphical elements like lines or text." ilk="class" name="Canvas" />
      <scope classrefs="Widget" doc="Checkbutton widget which is either in on- or off-state." ilk="class" name="Checkbutton" />
      <variable citdl="str" line="7" name="DIALOG_ICON" />
      <variable citdl="str" name="DISABLED" />
      <variable citdl="str" name="DOTBOX" />
      <scope classrefs="Widget" ilk="class" line="12" lineend="25" name="Dialog">
        <scope ilk="function" line="25" lineend="25" name="destroy" signature="destroy()">
          <variable citdl="Dialog" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.tk.getint()" line="17" name="num" />
        <scope attributes="__ctor__" ilk="function" line="13" lineend="24" name="__init__" signature="Dialog(master=None, cnf={}, **kw)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="15" name="widgetName" />
      </scope>
      <scope classrefs="Variable" doc="Value holder for float variables." ilk="class" name="DoubleVar" />
      <variable citdl="str" name="E" />
      <variable citdl="str" name="END" />
      <variable citdl="str" name="EW" />
      <variable citdl="int" name="EXCEPTION" />
      <variable citdl="str" name="EXTENDED" />
      <scope classrefs="Widget" doc="Entry widget which allows to display simple text." ilk="class" name="Entry" />
      <scope classrefs="object" doc="Container for the properties of an event.  Instances of this type are generated if one of the following events occurs:" ilk="class" name="Event" />
      <variable citdl="int" name="FALSE" />
      <variable citdl="str" name="FIRST" />
      <variable citdl="str" name="FLAT" />
      <scope classrefs="Widget" doc="Frame widget which may contain other widgets and can have a 3D border." ilk="class" name="Frame" />
      <variable citdl="str" name="GROOVE" />
      <scope classrefs="object" doc="Geometry manager Grid.  Base class to use the methods grid_* in every widget." ilk="class" name="Grid" />
      <variable citdl="str" name="HIDDEN" />
      <variable citdl="str" name="HORIZONTAL" />
      <variable citdl="str" name="INSERT" />
      <variable citdl="str" name="INSIDE" />
      <scope classrefs="object" doc="Base class for images." ilk="class" name="Image" />
      <scope classrefs="Variable" doc="Value holder for integer variables." ilk="class" name="IntVar" />
      <variable citdl="str" name="LAST" />
      <variable citdl="str" name="LEFT" />
      <scope classrefs="Widget" doc="Label widget which can display text and bitmaps." ilk="class" name="Label" />
      <scope classrefs="Widget" doc="labelframe widget." ilk="class" name="LabelFrame" />
      <scope classrefs="Widget" doc="Listbox widget which can display a list of strings." ilk="class" name="Listbox" />
      <variable citdl="str" name="MITER" />
      <variable citdl="str" name="MOVETO" />
      <variable citdl="str" name="MULTIPLE" />
      <scope classrefs="Widget" doc="Menu widget which allows to display menu bars, pull-down menus and pop-up menus." ilk="class" name="Menu" />
      <scope classrefs="Widget" doc="Menubutton widget, obsolete since Tk8.0." ilk="class" name="Menubutton" />
      <scope classrefs="Widget" doc="Message widget to display multiline text. Obsolete since Label does it too." ilk="class" name="Message" />
      <scope classrefs="object" doc="Internal class.  Base class which defines methods common for interior widgets." ilk="class" name="Misc" />
      <variable citdl="str" name="N" />
      <variable citdl="str" name="NE" />
      <variable citdl="int" name="NO" />
      <variable citdl="str" name="NONE" />
      <variable citdl="str" name="NORMAL" />
      <variable citdl="str" name="NS" />
      <variable citdl="str" name="NSEW" />
      <variable citdl="str" name="NUMERIC" />
      <variable citdl="str" name="NW" />
      <scope doc="Inhibit setting of default root window." ilk="function" name="NoDefaultRoot" signature="NoDefaultRoot()" />
      <variable citdl="int" name="OFF" />
      <variable citdl="int" name="ON" />
      <variable citdl="str" name="OUTSIDE" />
      <scope classrefs="Menubutton" doc="OptionMenu which allows the user to select a value from a menu." ilk="class" name="OptionMenu" />
      <variable citdl="str" name="PAGES" />
      <variable citdl="str" name="PIESLICE" />
      <variable citdl="str" name="PROJECTING" />
      <scope classrefs="object" doc="Geometry manager Pack.  Base class to use the methods pack_* in every widget." ilk="class" name="Pack" />
      <scope classrefs="Widget" doc="panedwindow widget." ilk="class" name="PanedWindow" />
      <scope classrefs="Image" doc="Widget which can display colored images in GIF, PPM/PGM format." ilk="class" name="PhotoImage" />
      <scope classrefs="object" doc="Geometry manager Place.  Base class to use the methods place_* in every widget." ilk="class" name="Place" />
      <variable citdl="str" name="RADIOBUTTON" />
      <variable citdl="str" name="RAISED" />
      <variable citdl="int" name="READABLE" />
      <variable citdl="str" name="RIDGE" />
      <variable citdl="str" name="RIGHT" />
      <variable citdl="str" name="ROUND" />
      <scope classrefs="Widget" doc="Radiobutton widget which shows only one of several buttons in on-state." ilk="class" name="Radiobutton" />
      <variable citdl="str" name="S" />
      <variable citdl="str" name="SCROLL" />
      <variable citdl="str" name="SE" />
      <variable citdl="str" name="SEL" />
      <variable citdl="str" name="SEL_FIRST" />
      <variable citdl="str" name="SEL_LAST" />
      <variable citdl="str" name="SEPARATOR" />
      <variable citdl="str" name="SINGLE" />
      <variable citdl="str" name="SOLID" />
      <variable citdl="str" name="SUNKEN" />
      <variable citdl="str" name="SW" />
      <scope classrefs="Widget" doc="Scale widget which can display a numerical scale." ilk="class" name="Scale" />
      <scope classrefs="Widget" doc="Scrollbar widget which displays a slider at a certain position." ilk="class" name="Scrollbar" />
      <scope classrefs="Widget" doc="spinbox widget." ilk="class" name="Spinbox" />
      <scope classrefs="Variable" doc="Value holder for strings variables." ilk="class" name="StringVar" />
      <scope classrefs="Button" ilk="class" name="Studbutton" />
      <variable citdl="str" name="TOP" />
      <variable citdl="int" name="TRUE" />
      <scope ilk="function" name="Tcl" signature="Tcl(screenName=None, baseName=None, className=&apos;Tk&apos;, useTk=0)" />
      <scope classrefs="Exception" ilk="class" name="TclError" />
      <variable citdl="float" name="TclVersion" />
      <scope classrefs="Widget" doc="Text widget which can display text in various forms." ilk="class" name="Text" />
      <scope classrefs="Misc Wm" doc="Toplevel widget of Tk which represents mostly the main window of an appliation. It has an associated Tcl interpreter." ilk="class" name="Tk" />
      <variable citdl="float" name="TkVersion" />
      <scope classrefs="BaseWidget Wm" doc="Toplevel widget, e.g. for dialogs." ilk="class" name="Toplevel" />
      <scope classrefs="Button" ilk="class" name="Tributton" />
      <variable citdl="str" name="UNDERLINE" />
      <variable citdl="str" name="UNITS" />
      <variable citdl="str" name="VERTICAL" />
      <scope classrefs="object" doc="Class to define value holders for e.g. buttons.  Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations" ilk="class" name="Variable" />
      <variable citdl="str" name="W" />
      <variable citdl="str" name="WORD" />
      <variable citdl="int" name="WRITABLE" />
      <scope classrefs="BaseWidget Pack Place Grid Form" doc="Internal class.  Base class for a widget which can be positioned with the geometry managers" ilk="class" name="Widget" />
      <scope classrefs="object" doc="Provides functions for the communication with the window manager." ilk="class" name="Wm" />
      <variable citdl="str" name="X" />
      <variable citdl="str" name="Y" />
      <variable citdl="int" name="YES" />
      <import module="commondialog" />
      <import module="constants" />
      <import module="font" />
      <scope doc="Convert true and false to integer values 1 and 0." ilk="function" name="getboolean" signature="getboolean(s)" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number  Convert a string or number to a floating point number, if possible." ilk="class" name="getdouble" />
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer  Convert a string or number to an integer, if possible.  A floating" ilk="class" name="getint" />
      <scope ilk="function" name="image_names" signature="image_names()" />
      <scope ilk="function" name="image_types" signature="image_types()" />
      <scope doc="Run the main loop of Tcl." ilk="function" name="mainloop" signature="mainloop(n=0)" />
      <import module="sys" />
      <import module="tix" />
      <import module="ttk" />
      <variable citdl="int" name="wantobjects" />
      <variable attributes="__hidden__" citdl="Button()" line="46" name="q" />
      <scope attributes="protected __hidden__" ilk="function" line="27" lineend="39" name="_test" signature="_test()">
        <variable citdl="Dialog" line="28" name="d" />
      </scope>
      <variable attributes="__hidden__" citdl="Button()" line="43" name="t" />
    </scope>
    <scope doc="The io module provides the Python interfaces to stream handling. The builtin open function is defined in this module. " ilk="blob" lang="Python3" name="_io">
      <scope classrefs="IOError" doc="Exception raised when I/O would block on a non-blocking I/O stream" ilk="class" name="BlockingIOError" />
      <scope classrefs="_BufferedIOBase" doc="A buffered reader and writer object together.  A buffered reader object and buffered writer object put together to" ilk="class" name="BufferedRWPair" />
      <scope classrefs="_BufferedIOBase" doc="A buffered interface to random access streams.  The constructor creates a reader and writer for a seekable stream," ilk="class" name="BufferedRandom" />
      <scope classrefs="_BufferedIOBase" doc="Create a new buffered reader using the given readable raw IO object." ilk="class" name="BufferedReader" />
      <scope classrefs="_BufferedIOBase" doc="A buffer for a writeable sequential RawIO object.  The constructor creates a BufferedWriter for the given writeable raw" ilk="class" name="BufferedWriter" />
      <scope classrefs="_BufferedIOBase" doc="BytesIO([buffer]) -&gt; object  Create a buffered I/O implementation using an in-memory bytes" ilk="class" name="BytesIO" />
      <variable citdl="int" name="DEFAULT_BUFFER_SIZE" />
      <scope classrefs="_RawIOBase" doc="file(name: str[, mode: str]) -&gt; file IO object  Open a file.  The mode can be &apos;r&apos;, &apos;w&apos; or &apos;a&apos; for reading (default)," ilk="class" name="FileIO" />
      <scope classrefs="object" doc="Codec used when reading a file in universal newlines mode.  It wraps another incremental decoder, translating \r\n and \r into \n.  It also records the types of newlines encountered.  When used with" ilk="class" name="IncrementalNewlineDecoder" />
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <scope classrefs="_TextIOBase" doc="Character and line based layer over a BufferedIOBase object, buffer.  encoding gives the name of the encoding that the stream will be" ilk="class" name="TextIOWrapper" />
      <scope classrefs="ValueError IOError" ilk="class" name="UnsupportedOperation" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="open" />
    </scope>
    <scope doc="Cache lines from files.  This is intended to read lines from modules imported -- hence if a filename" ilk="blob" lang="Python3" name="linecache">
      <variable citdl="list" line="12" name="__all__" />
      <variable citdl="dict" line="24" name="cache" />
      <scope doc="Discard cache entries that are out of date." ilk="function" line="44" lineend="66" name="checkcache" signature="checkcache(filename=None)">
        <variable citdl="os.stat()" line="61" name="stat" />
        <variable citdl="list" line="49" name="filenames" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Clear the cache entirely." ilk="function" line="27" lineend="31" name="clearcache" signature="clearcache()">
        <variable citdl="dict" line="31" name="cache" />
      </scope>
      <scope ilk="function" line="14" lineend="19" name="getline" returns="str" signature="getline(filename, lineno, module_globals=None)">
        <variable ilk="argument" name="module_globals" />
        <variable citdl="getlines()" line="15" name="lines" />
        <variable ilk="argument" name="lineno" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Get the lines for a file from the cache." ilk="function" line="34" lineend="41" name="getlines" returns="updatecache()" signature="getlines(filename, module_globals=None)">
        <variable ilk="argument" name="module_globals" />
        <variable ilk="argument" name="filename" />
      </scope>
      <import module="os" />
      <import module="sys" />
      <import module="tokenize" />
      <scope doc="Update a cache entry and return its list of lines." ilk="function" line="69" lineend="133" name="updatecache" returns="list" signature="updatecache(filename, module_globals=None)">
        <variable citdl="os.stat()" line="81" name="stat" />
        <variable ilk="argument" name="module_globals" />
        <variable citdl="module_globals.get()" line="87" name="name" />
        <variable citdl="getattr()" line="89" name="get_source" />
        <variable line="83" name="basename" />
        <variable citdl="fp.readlines()" line="130" name="lines" />
        <variable ilk="argument" name="filename" />
        <variable citdl="stat.st_mtime" line="131" name="mtime" />
        <variable citdl="os.path.join()" line="79" name="fullname" />
        <variable line="88" name="loader" />
        <variable citdl="get_source()" line="93" name="data" />
        <variable citdl="stat.st_size" line="131" name="size" />
      </scope>
    </scope>
    <scope doc="Strptime-related classes and functions.  CLASSES:" ilk="blob" lang="Python3" name="_strptime">
      <variable citdl="int" name="ASCII" />
      <variable citdl="int" name="IGNORECASE" />
      <scope classrefs="object" doc="Stores and handles locale-specific information related to time.  ATTRIBUTES:" ilk="class" line="31" lineend="173" name="LocaleTime">
        <variable attributes="__instancevar__" citdl="_getlang()" line="70" name="lang" />
        <scope attributes="private" ilk="function" line="103" lineend="113" name="__calc_am_pm" signature="__calc_am_pm()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="list" line="109" name="am_pm" />
          <variable citdl="time.struct_time()" line="111" name="time_tuple" />
        </scope>
        <scope attributes="private" ilk="function" line="96" lineend="101" name="__calc_month" signature="__calc_month()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="list" line="98" name="a_month" />
          <variable citdl="list" line="99" name="f_month" />
        </scope>
        <scope attributes="private" ilk="function" line="115" lineend="158" name="__calc_date_time" signature="__calc_date_time()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="time.struct_time()" line="123" name="time_tuple" />
          <variable citdl="list" line="124" name="date_time" />
          <variable citdl="list" line="128" name="replacement_pairs" />
          <variable citdl="current_format.replace()" line="139" name="current_format" />
          <variable citdl="str" line="152" name="U_W" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="113" name="am_pm" />
        <variable attributes="__instancevar__" citdl="list" line="101" name="f_month" />
        <scope attributes="private" ilk="function" line="79" lineend="86" name="__pad" returns="list()" signature="__pad(seq, front)">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="list()" ilk="argument" name="seq" />
          <variable ilk="argument" name="front" />
        </scope>
        <variable attributes="__instancevar__" line="157" name="LC_date" />
        <scope attributes="private" ilk="function" line="160" lineend="173" name="__calc_timezone" signature="__calc_timezone()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="frozenset()" line="168" name="no_saving" />
          <variable citdl="frozenset()" line="170" name="has_saving" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="93" name="a_weekday" />
        <variable attributes="__instancevar__" citdl="list" line="94" name="f_weekday" />
        <variable attributes="__instancevar__" line="156" name="LC_date_time" />
        <variable attributes="__instancevar__" citdl="tuple" line="173" name="timezone" />
        <scope attributes="private" ilk="function" line="88" lineend="94" name="__calc_weekday" signature="__calc_weekday()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
          <variable citdl="list" line="91" name="a_weekday" />
          <variable citdl="list" line="92" name="f_weekday" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="100" name="a_month" />
        <variable attributes="__instancevar__" line="158" name="LC_time" />
        <scope attributes="__ctor__" doc="Set all attributes." ilk="function" line="50" lineend="77" name="__init__" signature="LocaleTime()">
          <variable citdl="LocaleTime" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="dict" doc="Handle conversion from format directives to regexes." ilk="class" line="176" lineend="265" name="TimeRE">
        <scope doc="Return a compiled re object for the format string." ilk="function" line="263" lineend="265" name="compile" returns="re_compile()" signature="compile(format)">
          <variable citdl="TimeRE" ilk="argument" name="self" />
          <variable ilk="argument" name="format" />
        </scope>
        <variable attributes="__instancevar__" citdl="LocaleTime" line="186" name="locale_time" />
        <scope attributes="private" doc="Convert a list to a regex string for matching a directive." ilk="function" line="221" lineend="238" name="__seqToRE" returns="tuple" signature="__seqToRE(to_convert, directive)">
          <variable citdl="TimeRE" ilk="argument" name="self" />
          <variable citdl="sorted()" ilk="argument" name="to_convert" />
          <variable ilk="argument" name="directive" />
          <variable citdl="str.join()" line="236" name="regex" />
        </scope>
        <scope attributes="__ctor__" doc="Create keys/values." ilk="function" line="179" lineend="219" name="__init__" signature="TimeRE(locale_time=None)">
          <variable citdl="TimeRE" ilk="argument" name="self" />
          <variable ilk="argument" name="locale_time" />
          <variable citdl="super()" line="189" name="base" />
        </scope>
        <scope doc="Return regex pattern for the format string." ilk="function" line="240" lineend="261" name="pattern" returns="tuple" signature="pattern(format)">
          <variable citdl="TimeRE" ilk="argument" name="self" />
          <variable citdl="regex_chars.sub()" ilk="argument" name="format" />
          <variable citdl="str" line="247" name="processed_format" />
          <variable citdl="re_compile()" line="251" name="regex_chars" />
          <variable citdl="re_compile()" line="253" name="whitespace_replacement" />
          <variable citdl="format.index()" line="256" name="directive_index" />
        </scope>
      </scope>
      <variable citdl="list" line="25" name="__all__" />
      <import module="calendar" />
      <scope classrefs="object" doc="date(year, month, day) --&gt; date object" ilk="class" name="datetime_date" />
      <import module="locale" />
      <scope doc="Compile a regular expression pattern, returning a pattern object." ilk="function" name="re_compile" signature="re_compile(pattern, flags=0)" />
      <scope doc="Escape all non-alphanumeric characters in pattern." ilk="function" name="re_escape" signature="re_escape(pattern)" />
      <import module="time" />
      <variable attributes="protected __hidden__" citdl="TimeRE" line="270" name="_TimeRE_cache" />
      <variable attributes="protected __hidden__" citdl="dict" line="272" name="_regex_cache" />
      <scope attributes="protected __hidden__" doc="Calculate the Julian day based on the year, week of the year, and day of the week, with week_start_day representing whether the week of the year assumes the week starts on Sunday or Monday (6 or 0)." ilk="function" line="274" lineend="292" name="_calc_julian_from_U_or_W" returns="int" signature="_calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon)">
        <variable ilk="argument" name="year" />
        <variable ilk="argument" name="week_of_year" />
        <variable citdl="int" ilk="argument" name="day_of_week" />
        <variable ilk="argument" name="week_starts_Mon" />
        <variable citdl="int" line="278" name="first_weekday" />
        <variable citdl="int" line="287" name="week_0_length" />
        <variable citdl="int" line="291" name="days_to_week" />
      </scope>
      <variable attributes="protected __hidden__" citdl="_thread_allocate_lock()" line="267" name="_cache_lock" />
      <scope attributes="protected __hidden__" doc="Return a time struct based on the input string and the format string." ilk="function" line="295" lineend="458" name="_strptime" returns="tuple" signature="_strptime()">
        <variable citdl="str" line="300" name="msg" />
        <variable attributes="protected" citdl="TimeRE" line="307" name="_TimeRE_cache" />
        <variable citdl="_TimeRE_cache.locale_time" line="311" name="locale_time" />
        <variable citdl="_TimeRE_cache.compile()" line="312" name="format_regex" />
        <variable citdl="str" line="319" name="bad_directive" />
        <variable citdl="format_regex.match()" line="329" name="found" />
        <variable citdl="int()" line="336" name="year" />
        <variable citdl="int" line="337" name="month" />
        <variable citdl="int" line="338" name="hour" />
        <variable citdl="int" line="339" name="tz" />
        <variable citdl="int" line="342" name="week_of_year" />
        <variable citdl="int" line="343" name="week_of_year_start" />
        <variable citdl="int" line="346" name="weekday" />
        <variable citdl="found.groupdict()" line="347" name="found_dict" />
        <variable citdl="datetime_result.day" line="372" name="day" />
        <variable line="377" name="ampm" />
        <variable citdl="int()" line="392" name="minute" />
        <variable citdl="int()" line="394" name="second" />
        <variable line="396" name="s" />
        <variable citdl="int()" line="399" name="fraction" />
        <variable citdl="int" line="411" name="julian" />
        <variable line="423" name="found_zone" />
        <variable line="438" name="week_starts_Mon" />
        <variable citdl="datetime_date.fromordinal()" line="450" name="datetime_result" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="460" lineend="461" name="_strptime_time" signature="_strptime_time()" />
      <variable attributes="protected __hidden__" citdl="int" line="271" name="_CACHE_MAX_SIZE" />
      <scope attributes="protected __hidden__" ilk="function" line="27" lineend="29" name="_getlang" returns="locale.getlocale()" signature="_getlang()" />
    </scope>
    <scope doc="HMAC (Keyed-Hashing for Message Authentication) Python module.  Implements the HMAC algorithm as described by RFC 2104." ilk="blob" lang="Python3" name="hmac">
      <scope classrefs="object" doc="RFC 2104 HMAC class.  Also complies with RFC 4231.  This supports the API for Cryptographic Hash Functions (PEP 247)." ilk="class" line="20" lineend="127" name="HMAC">
        <variable attributes="__instancevar__" citdl="digest_cons()" line="54" name="outer" />
        <variable citdl="int" line="25" name="blocksize" />
        <scope doc="Update this hashing object with the string msg." ilk="function" line="85" lineend="90" name="update" signature="update(msg)">
          <variable citdl="HMAC" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
        <scope doc="Like digest(), but returns a string of hexadecimal digits instead." ilk="function" line="123" lineend="127" name="hexdigest" returns="h.hexdigest()" signature="hexdigest()">
          <variable citdl="HMAC" ilk="argument" name="self" />
          <variable citdl="_current()" line="126" name="h" />
        </scope>
        <variable attributes="__instancevar__" citdl="hashlib.md5" line="50" name="digest_cons" />
        <variable attributes="__instancevar__" citdl="digest_cons()" line="55" name="inner" />
        <scope attributes="protected" doc="Return a hash object for the current state." ilk="function" line="104" lineend="111" name="_current" returns="self.outer.copy()" signature="_current()">
          <variable citdl="HMAC" ilk="argument" name="self" />
          <variable citdl="self.outer.copy()" line="109" name="h" />
        </scope>
        <scope doc="Return the hash value of this hashing object." ilk="function" line="113" lineend="121" name="digest" returns="h.digest()" signature="digest()">
          <variable citdl="HMAC" ilk="argument" name="self" />
          <variable citdl="_current()" line="120" name="h" />
        </scope>
        <scope doc="Return a separate copy of this hashing object." ilk="function" line="92" lineend="102" name="copy" returns="self.__class__()" signature="copy()">
          <variable citdl="HMAC" ilk="argument" name="self" />
          <variable citdl="self.__class__()" line="97" name="other" />
        </scope>
        <scope attributes="__ctor__" doc="Create a new HMAC object." ilk="function" line="27" lineend="80" name="__init__" signature="HMAC(key, msg=None, digestmod=None)">
          <import line="46" module="hashlib" />
          <variable citdl="HMAC" ilk="argument" name="self" />
          <variable citdl="bytes()" ilk="argument" name="key" />
          <variable ilk="argument" name="msg" />
          <variable citdl="hashlib.md5" ilk="argument" name="digestmod" />
          <variable citdl="int" line="59" name="blocksize" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.inner.digest_size" line="56" name="digest_size" />
      </scope>
      <import module="_warnings" />
      <variable citdl="NoneType" line="13" name="digest_size" />
      <scope doc="Create a new hashing object and return it." ilk="function" line="129" lineend="140" name="new" returns="HMAC" signature="new(key, msg=None, digestmod=None)">
        <variable ilk="argument" name="msg" />
        <variable ilk="argument" name="digestmod" />
        <variable ilk="argument" name="key" />
      </scope>
      <variable citdl="bytes" line="9" name="trans_36" />
      <variable citdl="bytes" line="8" name="trans_5C" />
      <variable attributes="protected __hidden__" citdl="list" line="18" name="_secret_backdoor_key" />
    </scope>
    <scope doc="Various types of useful iterators and generators." ilk="blob" lang="Python3" name="email.iterators">
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <variable citdl="list" line="7" name="__all__" />
      <scope doc="Iterate over the parts, returning string payloads line-by- line." ilk="function" line="35" lineend="44" name="body_line_iterator" signature="body_line_iterator(msg, decode=False)">
        <variable ilk="argument" name="msg" />
        <variable citdl="False" ilk="argument" name="decode" />
        <variable citdl="subpart.get_payload()" line="41" name="payload" />
      </scope>
      <import module="sys" />
      <scope doc="Iterate over the subparts with a given MIME type." ilk="function" line="47" lineend="57" name="typed_subpart_iterator" signature="typed_subpart_iterator(msg, maintype=&apos;text&apos;, subtype=None)">
        <variable ilk="argument" name="msg" />
        <variable ilk="argument" name="subtype" />
        <variable citdl="str" ilk="argument" name="maintype" />
      </scope>
      <scope doc="Walk over the message tree, yielding each subpart." ilk="function" line="20" lineend="30" name="walk" signature="walk(self)">
        <variable ilk="argument" name="self" />
      </scope>
      <scope attributes="protected __hidden__" doc="A handy debugging aid" ilk="function" line="61" lineend="73" name="_structure" signature="_structure(msg, fp=None, level=0, include_default=False)">
        <variable ilk="argument" name="msg" />
        <variable citdl="sys.stdout" ilk="argument" name="fp" />
        <variable citdl="int" ilk="argument" name="level" />
        <variable citdl="False" ilk="argument" name="include_default" />
        <variable citdl="str" line="65" name="tab" />
      </scope>
    </scope>
    <scope doc="Read from and write to tar format archives." ilk="blob" lang="Python3" name="tarfile">
      <variable citdl="bytes" line="84" name="AREGTYPE" />
      <variable citdl="bytes" line="88" name="BLKTYPE" />
      <variable citdl="int" line="74" name="BLOCKSIZE" />
      <variable citdl="bytes" line="87" name="CHRTYPE" />
      <variable citdl="bytes" line="91" name="CONTTYPE" />
      <scope classrefs="TarError" doc="Exception for unavailable compression methods." ilk="class" line="326" lineend="328" name="CompressionError" />
      <variable citdl="int" line="104" name="DEFAULT_FORMAT" />
      <variable citdl="bytes" line="89" name="DIRTYPE" />
      <variable citdl="str" line="166" name="ENCODING" />
      <scope classrefs="object" doc="File-like object for reading an archive member. Is returned by TarFile.extractfile()." ilk="class" line="758" lineend="893" name="ExFileObject">
        <variable citdl="ExFileObject.read" line="811" name="read1" />
        <variable attributes="__instancevar__" citdl="tarinfo.name" line="769" name="name" />
        <scope doc="Close the file object." ilk="function" line="881" lineend="884" name="close" signature="close()">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="775" name="buffer" />
        <scope ilk="function" line="777" lineend="778" name="readable" returns="bool" signature="readable()">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list with all remaining lines." ilk="function" line="842" lineend="850" name="readlines" returns="list" signature="readlines()">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
          <variable citdl="list" line="845" name="result" />
          <variable citdl="readline()" line="847" name="line" />
        </scope>
        <scope doc="Return the current file position." ilk="function" line="852" lineend="858" name="tell" returns="int" signature="tell()">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="780" lineend="781" name="writable" returns="bool" signature="writable()">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
        </scope>
        <scope doc="Read at most size bytes from the file." ilk="function" line="786" lineend="808" name="read" returns="str" signature="read(size=None)">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="str" line="793" name="buf" />
        </scope>
        <scope doc="Get an iterator over the file&apos;s lines." ilk="function" line="886" lineend="893" name="__iter__" signature="__iter__()">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
          <variable citdl="readline()" line="890" name="line" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="770" name="mode" />
        <variable attributes="__instancevar__" citdl="False" line="771" name="closed" />
        <variable citdl="int" line="762" name="blocksize" />
        <scope ilk="function" line="783" lineend="784" name="seekable" returns="self.fileobj.seekable()" signature="seekable()">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="min()" line="774" name="position" />
        <variable attributes="__instancevar__" citdl="_FileInFile" line="765" name="fileobj" />
        <scope doc="Seek to a position in the file." ilk="function" line="860" lineend="879" name="seek" signature="seek(pos, whence=os.SEEK_SET)">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
          <variable ilk="argument" name="pos" />
          <variable citdl="os.SEEK_SET" ilk="argument" name="whence" />
        </scope>
        <scope doc="Read one entire line from the file." ilk="function" line="813" lineend="840" name="readline" returns="self.fileobj.read()" signature="readline(size=-1)">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="size" />
          <variable citdl="self.buffer.find()" line="821" name="pos" />
          <variable citdl="list" line="825" name="buf" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="764" lineend="775" name="__init__" signature="ExFileObject(tarfile, tarinfo)">
          <variable citdl="ExFileObject" ilk="argument" name="self" />
          <variable ilk="argument" name="tarfile" />
          <variable ilk="argument" name="tarinfo" />
        </scope>
        <variable attributes="__instancevar__" citdl="tarinfo.size" line="772" name="size" />
      </scope>
      <scope classrefs="TarError" doc="General exception for extract errors." ilk="class" line="320" lineend="322" name="ExtractError" />
      <variable citdl="bytes" line="90" name="FIFOTYPE" />
      <variable citdl="bytes" line="94" name="GNUTYPE_LONGLINK" />
      <variable citdl="bytes" line="93" name="GNUTYPE_LONGNAME" />
      <variable citdl="bytes" line="95" name="GNUTYPE_SPARSE" />
      <variable citdl="int" line="102" name="GNU_FORMAT" />
      <variable citdl="bytes" line="76" name="GNU_MAGIC" />
      <variable citdl="tuple" line="121" name="GNU_TYPES" />
      <scope classrefs="TarError" doc="Exception for invalid headers." ilk="class" line="332" lineend="334" name="HeaderError" />
      <variable citdl="int" line="80" name="LENGTH_LINK" />
      <variable citdl="int" line="79" name="LENGTH_NAME" />
      <variable citdl="int" line="81" name="LENGTH_PREFIX" />
      <variable citdl="bytes" line="85" name="LNKTYPE" />
      <variable citdl="bytes" line="73" name="NUL" />
      <variable citdl="tuple" line="125" name="PAX_FIELDS" />
      <variable citdl="int" line="103" name="PAX_FORMAT" />
      <variable citdl="dict" line="130" name="PAX_NUMBER_FIELDS" />
      <variable citdl="bytes" line="77" name="POSIX_MAGIC" />
      <variable citdl="int" line="75" name="RECORDSIZE" />
      <variable citdl="bytes" line="83" name="REGTYPE" />
      <variable citdl="tuple" line="117" name="REGULAR_TYPES" />
      <scope classrefs="TarError" doc="Exception for unreadble tar archives." ilk="class" line="323" lineend="325" name="ReadError" />
      <variable citdl="bytes" line="99" name="SOLARIS_XHDTYPE" />
      <variable citdl="tuple" line="110" name="SUPPORTED_TYPES" />
      <variable citdl="bytes" line="86" name="SYMTYPE" />
      <variable citdl="int" line="144" name="S_IFBLK" />
      <variable citdl="int" line="146" name="S_IFCHR" />
      <variable citdl="int" line="145" name="S_IFDIR" />
      <variable citdl="int" line="147" name="S_IFIFO" />
      <variable citdl="int" line="142" name="S_IFLNK" />
      <variable citdl="int" line="143" name="S_IFREG" />
      <scope classrefs="TarError" doc="Exception for unsupported operations on stream-like TarFiles." ilk="class" line="329" lineend="331" name="StreamError" />
      <variable citdl="int" line="158" name="TGEXEC" />
      <variable citdl="int" line="156" name="TGREAD" />
      <variable citdl="int" line="157" name="TGWRITE" />
      <variable citdl="int" line="161" name="TOEXEC" />
      <variable citdl="int" line="159" name="TOREAD" />
      <variable citdl="int" line="160" name="TOWRITE" />
      <variable citdl="int" line="150" name="TSGID" />
      <variable citdl="int" line="149" name="TSUID" />
      <variable citdl="int" line="151" name="TSVTX" />
      <variable citdl="int" line="155" name="TUEXEC" />
      <variable citdl="int" line="153" name="TUREAD" />
      <variable citdl="int" line="154" name="TUWRITE" />
      <scope classrefs="Exception" doc="Base exception." ilk="class" line="317" lineend="319" name="TarError" />
      <scope classrefs="object" doc="The TarFile Class provides an interface to tar archives." ilk="class" line="1461" lineend="2362" name="TarFile">
        <variable citdl="TarInfo" line="1483" name="tarinfo" />
        <variable attributes="__instancevar__" citdl="list" line="1550" name="members" />
        <variable citdl="int" line="1473" name="errorlevel" />
        <variable citdl="sys.getfilesystemencoding()" line="1479" name="encoding" />
        <scope doc="Add the TarInfo object `tarinfo&apos; to the archive." ilk="function" line="1970" lineend="1994" name="addfile" signature="addfile(tarinfo, fileobj=None)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable citdl="copy.copy()" ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="fileobj" />
          <variable citdl="tarinfo.tobuf()" line="1981" name="buf" />
        </scope>
        <scope doc="Set file permissions of targetpath according to tarinfo." ilk="function" line="2259" lineend="2266" name="chmod" signature="chmod(tarinfo, targetpath)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="targetpath" />
        </scope>
        <scope doc="Return a TarInfo object for member `name&apos;." ilk="function" line="1758" lineend="1767" name="getmember" returns="self._getmember()" signature="getmember(name)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="self._getmember()" line="1764" name="tarinfo" />
        </scope>
        <scope doc="Close the TarFile." ilk="function" line="1738" lineend="1756" name="close" signature="close()">
          <variable citdl="TarFile" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the next member of the archive as a TarInfo object, when TarFile is opened for reading." ilk="function" line="2279" lineend="2310" name="next" returns="self.next()" signature="next()">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable citdl="self.next()" line="2286" name="m" />
          <variable citdl="self.tarinfo.fromtarfile()" line="2294" name="tarinfo" />
        </scope>
        <scope doc="Open a tar archive for reading, writing or appending." ilk="function" line="1597" lineend="1667" name="open" returns="TarFile.open.func()" signature="open(name=None, mode=&apos;r&apos;, fileobj=None, bufsize=RECORDSIZE, **kwargs)">
          <variable citdl="TarFile" ilk="argument" name="cls" />
          <variable ilk="argument" name="name" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable ilk="argument" name="fileobj" />
          <variable citdl="int" ilk="argument" name="bufsize" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="getattr()" line="1626" name="func" />
          <variable citdl="fileobj.tell()" line="1628" name="saved_pos" />
          <variable citdl="str" line="1639" name="filemode" />
          <variable citdl="str" line="1640" name="comptype" />
          <variable citdl="cls()" line="1658" name="t" />
        </scope>
        <variable citdl="ExFileObject" line="1485" name="fileobject" />
        <scope doc="Make a (symbolic) link called targetpath." ilk="function" line="2204" lineend="2229" name="makelink" signature="makelink(tarinfo, targetpath)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="targetpath" />
          <variable citdl="tarinfo.linkname" line="2209" name="linkpath" />
        </scope>
        <variable citdl="str" line="1481" name="errors" />
        <variable citdl="False" line="1470" name="ignore_zeros" />
        <scope doc="Extract a member from the archive to the current working directory, using its full name." ilk="function" line="2033" lineend="2064" name="extract" signature="extract(member, path=&apos;&apos;)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="member" />
          <variable citdl="str" ilk="argument" name="path" />
          <variable citdl="getmember()" line="2042" name="tarinfo" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="fileobj.mode" line="1501" name="_mode" />
        <scope doc="Make a file called targetpath." ilk="function" line="2164" lineend="2171" name="makefile" signature="makefile(tarinfo, targetpath)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="targetpath" />
          <variable citdl="extractfile()" line="2167" name="source" />
          <variable citdl="bltn_open()" line="2168" name="target" />
        </scope>
        <scope doc="Create a TarInfo object for either the file `name&apos; or the file object `fileobj&apos; (using os.fstat on its file descriptor)." ilk="function" line="1785" lineend="1882" name="gettarinfo" returns="tarinfo()" signature="gettarinfo(name=None, arcname=None, fileobj=None)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable citdl="fileobj.name" ilk="argument" name="name" />
          <variable citdl="fileobj.name" ilk="argument" name="arcname" />
          <variable ilk="argument" name="fileobj" />
          <variable citdl="tarinfo()" line="1811" name="tarinfo" />
          <variable citdl="os.lstat()" line="1818" name="statres" />
          <variable citdl="os.readlink()" line="1823" name="linkname" />
          <variable citdl="statres.st_mode" line="1825" name="stmd" />
          <variable citdl="tuple" line="1827" name="inode" />
          <variable citdl="str" line="1832" name="type" />
        </scope>
        <scope doc="Add the file `name&apos; to the archive." ilk="function" line="1913" lineend="1968" name="add" signature="add(name, arcname=None, recursive=True, exclude=None)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="str" ilk="argument" name="arcname" />
          <variable citdl="True" ilk="argument" name="recursive" />
          <variable ilk="argument" name="exclude" />
          <variable citdl="gettarinfo()" line="1949" name="tarinfo" />
          <variable citdl="bltn_open()" line="1957" name="f" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.next()" line="1559" name="firstmember" />
        <scope attributes="__ctor__" doc="Open an (uncompressed) tar archive `name&apos;." ilk="function" line="1487" lineend="1583" name="__init__" signature="TarFile(name=None, mode=&apos;r&apos;, fileobj=None, format=None, tarinfo=None, dereference=None, ignore_zeros=None, encoding=None, errors=None, pax_headers=None, debug=None, errorlevel=None)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable citdl="fileobj.name" ilk="argument" name="name" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable citdl="bltn_open()" ilk="argument" name="fileobj" />
          <variable ilk="argument" name="format" />
          <variable ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="dereference" />
          <variable ilk="argument" name="ignore_zeros" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="errors" />
          <variable ilk="argument" name="pax_headers" />
          <variable ilk="argument" name="debug" />
          <variable ilk="argument" name="errorlevel" />
          <variable citdl="self.tarinfo.create_pax_global_header()" line="1576" name="buf" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="1549" name="closed" />
        <scope doc="Return the members of the archive as a list of TarInfo objects." ilk="function" line="1769" lineend="1777" name="getmembers" returns="list" signature="getmembers()">
          <variable citdl="TarFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Write debugging output to sys.stderr." ilk="function" line="2358" lineend="2362" name="_dbg" signature="_dbg(level, msg)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="msg" />
        </scope>
        <scope doc="Make a character or block device called targetpath." ilk="function" line="2189" lineend="2202" name="makedev" signature="makedev(tarinfo, targetpath)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="targetpath" />
          <variable citdl="tarinfo.mode" line="2195" name="mode" />
        </scope>
        <scope doc="Open gzip compressed tar archive name for reading or writing." ilk="function" line="1678" lineend="1701" name="gzopen" returns="taropen()" signature="gzopen(name, mode=&apos;r&apos;, fileobj=None, compresslevel=9, **kwargs)">
          <import line="1686" module="gzip" />
          <variable citdl="TarFile" ilk="argument" name="cls" />
          <variable ilk="argument" name="name" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable citdl="bltn_open()" ilk="argument" name="fileobj" />
          <variable citdl="int" ilk="argument" name="compresslevel" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="taropen()" line="1695" name="t" />
        </scope>
        <scope doc="Make a fifo called targetpath." ilk="function" line="2181" lineend="2187" name="makefifo" signature="makefifo(tarinfo, targetpath)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="targetpath" />
        </scope>
        <scope attributes="protected" doc="Find an archive member by name from bottom to top." ilk="function" line="2315" lineend="2329" name="_getmember" signature="_getmember(name, tarinfo=None)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="tarinfo" />
          <variable citdl="getmembers()" line="2320" name="members" />
          <variable citdl="len()" line="2323" name="end" />
        </scope>
        <variable citdl="int" line="1477" name="format" />
        <variable citdl="dict" line="1729" name="OPEN_METH" />
        <variable citdl="False" line="1467" name="dereference" />
        <variable attributes="__instancevar__" citdl="bltn_open()" line="1517" name="fileobj" />
        <scope doc="Extract all members from the archive to the current working directory and set owner, modification time and permissions on directories afterwards." ilk="function" line="1996" lineend="2031" name="extractall" signature="extractall(path=&apos;.&apos;, members=None)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="path" />
          <variable citdl="TarFile" ilk="argument" name="members" />
          <variable citdl="list" line="2003" name="directories" />
          <variable citdl="copy.copy()" line="2012" name="tarinfo" />
          <variable citdl="os.path.join()" line="2022" name="dirpath" />
        </scope>
        <scope attributes="protected" doc="Check if TarFile is still open, and if the operation&apos;s mode corresponds to TarFile&apos;s mode." ilk="function" line="2341" lineend="2348" name="_check" signature="_check(mode=None)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="mode" />
        </scope>
        <scope doc="Open uncompressed tar archive name for reading or writing." ilk="function" line="1670" lineend="1675" name="taropen" returns="TarFile.taropen.cls()" signature="taropen(name, mode=&apos;r&apos;, fileobj=None, **kwargs)">
          <variable citdl="TarFile" ilk="argument" name="cls" />
          <variable ilk="argument" name="name" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable ilk="argument" name="fileobj" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.fileobj.tell()" line="1552" name="offset" />
        <scope doc="Open bzip2 compressed tar archive name for reading or writing." ilk="function" line="1704" lineend="1726" name="bz2open" returns="taropen()" signature="bz2open(name, mode=&apos;r&apos;, fileobj=None, compresslevel=9, **kwargs)">
          <import line="1712" module="bz2" />
          <variable citdl="TarFile" ilk="argument" name="cls" />
          <variable ilk="argument" name="name" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable citdl="_BZ2Proxy" ilk="argument" name="fileobj" />
          <variable citdl="int" ilk="argument" name="compresslevel" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="taropen()" line="1722" name="t" />
        </scope>
        <scope attributes="protected" doc="Extract the TarInfo object tarinfo to a physical file called targetpath." ilk="function" line="2105" lineend="2146" name="_extract_member" signature="_extract_member(tarinfo, targetpath)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="tarinfo" />
          <variable citdl="os.path.normpath()" ilk="argument" name="targetpath" />
          <variable citdl="os.path.dirname()" line="2117" name="upperdirs" />
        </scope>
        <scope doc="Return the members of the archive as a list of their names." ilk="function" line="1779" lineend="1783" name="getnames" returns="list" signature="getnames()">
          <variable citdl="TarFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Read through the entire archive file and look for readable members." ilk="function" line="2331" lineend="2339" name="_load" signature="_load()">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable citdl="next()" line="2336" name="tarinfo" />
        </scope>
        <scope doc="Set modification time of targetpath according to tarinfo." ilk="function" line="2268" lineend="2276" name="utime" signature="utime(tarinfo, targetpath)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="targetpath" />
        </scope>
        <variable attributes="__instancevar__" line="1516" name="name" />
        <scope doc="Make a directory called targetpath." ilk="function" line="2153" lineend="2162" name="makedir" signature="makedir(tarinfo, targetpath)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="targetpath" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="1509" name="_extfileobj" />
        <variable attributes="__instancevar__" citdl="dict" line="1539" name="pax_headers" />
        <scope doc="Print a table of contents to sys.stdout." ilk="function" line="1884" lineend="1911" name="list" signature="list(verbose=True)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="verbose" />
        </scope>
        <scope doc="Provide an iterator object." ilk="function" line="2350" lineend="2356" name="__iter__" returns="TarIter()" signature="__iter__()">
          <variable citdl="TarFile" ilk="argument" name="self" />
        </scope>
        <scope doc="Set owner of targetpath according to tarinfo." ilk="function" line="2231" lineend="2257" name="chown" signature="chown(tarinfo, targetpath)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="targetpath" />
          <variable citdl="os.getgid()" line="2237" name="g" />
          <variable citdl="os.getuid()" line="2244" name="u" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="1500" name="mode" />
        <scope doc="Extract a member from the archive as a file object." ilk="function" line="2066" lineend="2103" name="extractfile" returns="TarFile.fileobject()" signature="extractfile(member)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="member" />
          <variable citdl="getmember()" line="2078" name="tarinfo" />
        </scope>
        <variable citdl="int" line="1465" name="debug" />
        <scope doc="Make a file from a TarInfo object with an unknown type at targetpath." ilk="function" line="2173" lineend="2179" name="makeunknown" signature="makeunknown(tarinfo, targetpath)">
          <variable citdl="TarFile" ilk="argument" name="self" />
          <variable ilk="argument" name="tarinfo" />
          <variable ilk="argument" name="targetpath" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="1554" name="inodes" />
        <variable attributes="protected __instancevar__" citdl="False" line="1551" name="_loaded" />
      </scope>
      <scope classrefs="object" doc="Informational class which holds the details about an archive member given by a tar header block. TarInfo objects are returned by TarFile.getmember()," ilk="class" line="899" lineend="1458" name="TarInfo">
        <scope ilk="function" line="1445" lineend="1446" name="issym" returns="bool" signature="issym()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1457" lineend="1458" name="isdev" returns="bool" signature="isdev()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the object as a pax global header block sequence." ilk="function" line="1069" lineend="1072" name="create_pax_global_header" returns="cls._create_pax_generic_header()" signature="create_pax_global_header(pax_headers)">
          <variable citdl="TarInfo" ilk="argument" name="cls" />
          <variable ilk="argument" name="pax_headers" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="919" name="uid" />
        <scope attributes="protected" doc="Round up a byte count by BLOCKSIZE and return it, e.g." ilk="function" line="1430" lineend="1437" name="_block" returns="blocks" signature="_block(count)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="count" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="922" name="mtime" />
        <scope attributes="protected" doc="Split a name longer than 100 chars into a prefix and a name part." ilk="function" line="1074" lineend="1087" name="_posix_split_name" returns="tuple" signature="_posix_split_name(name)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="name" />
          <variable citdl="list" line="1078" name="prefix" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="932" name="offset_data" />
        <variable attributes="__instancevar__" citdl="str" line="926" name="uname" />
        <scope doc="Return the TarInfo&apos;s attributes as a dictionary." ilk="function" line="954" lineend="976" name="get_info" returns="dict" signature="get_info()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable citdl="dict" line="957" name="info" />
        </scope>
        <scope ilk="function" line="1439" lineend="1440" name="isreg" returns="bool" signature="isreg()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="927" name="gname" />
        <scope ilk="function" line="1441" lineend="1442" name="isfile" returns="TarInfo.isreg()" signature="isfile()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Replace fields with supplemental information from a previous pax extended or global header." ilk="function" line="1409" lineend="1428" name="_apply_pax_info" signature="_apply_pax_info(pax_headers, encoding, errors)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="pax_headers" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="errors" />
          <variable citdl="int" line="1418" name="value" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a TarInfo object." ilk="function" line="913" lineend="935" name="__init__" signature="TarInfo(name=&apos;&apos;)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="name" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="921" name="size" />
        <scope ilk="function" line="1455" lineend="1456" name="issparse" returns="bool" signature="issparse()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the object as a ustar header block." ilk="function" line="1019" lineend="1066" name="create_pax_header" returns="self._create_header()" signature="create_pax_header(info)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="info" />
          <variable citdl="self.pax_headers.copy()" line="1025" name="pax_headers" />
          <variable line="1055" name="val" />
          <variable citdl="str" line="1062" name="buf" />
        </scope>
        <scope attributes="protected" ilk="function" line="947" lineend="948" name="_setlinkpath" signature="_setlinkpath(linkname)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="linkname" />
        </scope>
        <scope doc="Return the object as a GNU header block sequence." ilk="function" line="1005" lineend="1017" name="create_gnu_header" returns="str" signature="create_gnu_header(info, encoding, errors)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="info" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="errors" />
          <variable citdl="str" line="1010" name="buf" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="931" name="offset" />
        <scope doc="Return the object as a ustar header block." ilk="function" line="992" lineend="1003" name="create_ustar_header" returns="self._create_header()" signature="create_ustar_header(info, encoding, errors)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="info" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="errors" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="920" name="gid" />
        <scope attributes="protected" doc="Choose the right processing method depending on the type and call it." ilk="function" line="1259" lineend="1270" name="_proc_member" returns="self._proc_builtin()" signature="_proc_member(tarfile)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="tarfile" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="925" name="linkname" />
        <scope attributes="protected" doc="Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence for name." ilk="function" line="1128" lineend="1142" name="_create_gnu_long_header" returns="TarInfo._create_header()" signature="_create_gnu_long_header(name, type, encoding, errors)">
          <variable citdl="TarInfo" ilk="argument" name="cls" />
          <variable citdl="name.encode()" ilk="argument" name="name" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="errors" />
          <variable citdl="dict" line="1134" name="info" />
        </scope>
        <scope attributes="protected" doc="Return a POSIX.1-2001 extended or global header sequence that contains a list of keyword, value pairs." ilk="function" line="1145" lineend="1173" name="_create_pax_generic_header" returns="TarInfo._create_header()" signature="_create_pax_generic_header(pax_headers, type)">
          <variable citdl="TarInfo" ilk="argument" name="cls" />
          <variable ilk="argument" name="pax_headers" />
          <variable ilk="argument" name="type" />
          <variable citdl="str" line="1150" name="records" />
          <variable citdl="keyword.encode()" line="1152" name="keyword" />
          <variable citdl="value.encode()" line="1153" name="value" />
          <variable citdl="len()" line="1154" name="l" />
          <variable citdl="len()" line="1155" name="n" />
          <variable citdl="int" line="1160" name="p" />
          <variable citdl="dict" line="1165" name="info" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="924" name="type" />
        <scope ilk="function" line="951" lineend="952" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the next TarInfo object from TarFile object tarfile." ilk="function" line="1237" lineend="1246" name="fromtarfile" returns="obj._proc_member()" signature="fromtarfile(tarfile)">
          <variable citdl="TarInfo" ilk="argument" name="cls" />
          <variable ilk="argument" name="tarfile" />
          <variable citdl="tarfile.fileobj.read()" line="1241" name="buf" />
          <variable citdl="frombuf()" line="1244" name="obj" />
        </scope>
        <scope ilk="function" line="1443" lineend="1444" name="isdir" returns="bool" signature="isdir()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="941" lineend="942" name="_setpath" signature="_setpath(name)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="protected" ilk="function" line="939" lineend="940" name="_getpath" returns="str" signature="_getpath()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1447" lineend="1448" name="islnk" returns="bool" signature="islnk()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="923" name="chksum" />
        <scope attributes="protected" doc="Process the blocks that hold a GNU longname or longlink member." ilk="function" line="1289" lineend="1308" name="_proc_gnulong" returns="fromtarfile()" signature="_proc_gnulong(tarfile)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="tarfile" />
          <variable citdl="tarfile.fileobj.read()" line="1293" name="buf" />
          <variable citdl="fromtarfile()" line="1296" name="next" />
        </scope>
        <scope attributes="protected" doc="Process an extended or global header as described in POSIX.1-2001." ilk="function" line="1351" lineend="1407" name="_proc_pax" returns="fromtarfile()" signature="_proc_pax(tarfile)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="tarfile" />
          <variable citdl="tarfile.fileobj.read()" line="1356" name="buf" />
          <variable citdl="tarfile.pax_headers" line="1362" name="pax_headers" />
          <variable citdl="re.compile()" line="1370" name="regex" />
          <variable citdl="int" line="1371" name="pos" />
          <variable citdl="regex.match()" line="1373" name="match" />
          <variable citdl="int()" line="1378" name="length" />
          <variable citdl="list" line="1379" name="value" />
          <variable citdl="keyword.decode()" line="1381" name="keyword" />
          <variable citdl="fromtarfile()" line="1388" name="next" />
          <variable citdl="next.offset_data" line="1402" name="offset" />
        </scope>
        <scope attributes="protected" doc="Return a header block." ilk="function" line="1090" lineend="1115" name="_create_header" returns="bytes()" signature="_create_header(format, encoding, errors)">
          <variable citdl="TarInfo" ilk="argument" name="info" />
          <variable ilk="argument" name="format" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="errors" />
          <variable citdl="list" line="1094" name="parts" />
          <variable citdl="list" line="1112" name="buf" />
          <variable line="1113" name="chksum" />
        </scope>
        <variable citdl="property()" line="949" name="linkpath" />
        <scope attributes="protected" ilk="function" line="945" lineend="946" name="_getlinkpath" returns="str" signature="_getlinkpath()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="928" name="devmajor" />
        <variable attributes="__instancevar__" citdl="str" line="917" name="name" />
        <scope ilk="function" line="1451" lineend="1452" name="isblk" returns="bool" signature="isblk()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1449" lineend="1450" name="ischr" returns="bool" signature="ischr()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Process a builtin type or an unknown type which will be treated as a regular file." ilk="function" line="1272" lineend="1287" name="_proc_builtin" returns="TarInfo" signature="_proc_builtin(tarfile)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="tarfile" />
          <variable citdl="int" line="1277" name="offset" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="935" name="pax_headers" />
        <scope doc="Return a tar header as a string of 512 byte blocks." ilk="function" line="978" lineend="990" name="tobuf" returns="self.create_pax_header()" signature="tobuf(format=DEFAULT_FORMAT, encoding=ENCODING, errors=&apos;strict&apos;)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="format" />
          <variable citdl="sys.getfilesystemencoding()" ilk="argument" name="encoding" />
          <variable citdl="str" ilk="argument" name="errors" />
          <variable citdl="get_info()" line="981" name="info" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="929" name="devminor" />
        <variable citdl="tuple" line="907" name="__slots__" />
        <scope attributes="protected" doc="Return the string payload filled with zero bytes up to the next 512 byte border." ilk="function" line="1118" lineend="1125" name="_create_payload" returns="TarInfo" signature="_create_payload()">
          <variable citdl="TarInfo" ilk="argument" name="payload" />
        </scope>
        <scope ilk="function" line="1453" lineend="1454" name="isfifo" returns="bool" signature="isfifo()">
          <variable citdl="TarInfo" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="918" name="mode" />
        <variable attributes="__instancevar__" citdl="_ringbuffer()" line="934" name="sparse" />
        <scope doc="Construct a TarInfo object from a 512 byte bytes object." ilk="function" line="1176" lineend="1234" name="frombuf" returns="cls()" signature="frombuf(buf, encoding, errors)">
          <variable citdl="TarInfo" ilk="argument" name="cls" />
          <variable ilk="argument" name="buf" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="errors" />
          <variable citdl="nti()" line="1184" name="chksum" />
          <variable citdl="cls()" line="1188" name="obj" />
          <variable citdl="nts()" line="1202" name="prefix" />
          <variable citdl="int" line="1213" name="pos" />
          <variable citdl="list" line="1214" name="structs" />
          <variable citdl="nti()" line="1217" name="offset" />
          <variable citdl="nti()" line="1218" name="numbytes" />
          <variable citdl="bool()" line="1223" name="isextended" />
          <variable citdl="nti()" line="1224" name="origsize" />
        </scope>
        <variable citdl="property()" line="943" name="path" />
        <scope attributes="protected" doc="Process a GNU sparse header plus extra headers." ilk="function" line="1310" lineend="1349" name="_proc_sparse" returns="TarInfo" signature="_proc_sparse(tarfile)">
          <variable citdl="TarInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="tarfile" />
          <variable citdl="tarfile.fileobj.read()" line="1319" name="buf" />
          <variable citdl="int" line="1320" name="pos" />
          <variable citdl="nti()" line="1323" name="offset" />
          <variable citdl="nti()" line="1324" name="numbytes" />
          <variable citdl="bool()" line="1329" name="isextended" />
          <variable citdl="nti()" line="1334" name="lastpos" />
          <variable citdl="int" line="1335" name="realpos" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Iterator Class.  for tarinfo in TarFile(...):" ilk="class" line="2365" lineend="2399" name="TarIter">
        <variable attributes="__instancevar__" citdl="int" line="2376" name="index" />
        <scope doc="Return iterator object." ilk="function" line="2377" lineend="2380" name="__iter__" returns="TarIter" signature="__iter__()">
          <variable citdl="TarIter" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the next item using TarFile&apos;s next() method." ilk="function" line="2381" lineend="2399" name="__next__" returns="self.tarfile.next()" signature="__next__()">
          <variable citdl="TarIter" ilk="argument" name="self" />
          <variable citdl="self.tarfile.next()" line="2389" name="tarinfo" />
        </scope>
        <variable attributes="__instancevar__" line="2375" name="tarfile" />
        <scope attributes="__ctor__" doc="Construct a TarIter object." ilk="function" line="2372" lineend="2376" name="__init__" signature="TarIter(tarfile)">
          <variable citdl="TarIter" ilk="argument" name="self" />
          <variable ilk="argument" name="tarfile" />
        </scope>
      </scope>
      <variable citdl="int" line="101" name="USTAR_FORMAT" />
      <variable citdl="bytes" line="98" name="XGLTYPE" />
      <variable citdl="bytes" line="97" name="XHDTYPE" />
      <variable citdl="list" line="66" name="__all__" />
      <variable citdl="str" line="35" name="__author__" />
      <variable citdl="str" line="38" name="__credits__" />
      <variable citdl="str" line="37" name="__cvsid__" />
      <variable citdl="str" line="36" name="__date__" />
      <variable citdl="str" line="32" name="__version__" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" line="2458" name="bltn_open" />
      <scope doc="Calculate the checksum for a member&apos;s header by summing up all characters except for the chksum field which is treated as if it was filled with spaces." ilk="function" line="232" lineend="243" name="calc_chksums" returns="tuple" signature="calc_chksums(buf)">
        <variable citdl="sum()" line="242" name="signed_chksum" />
        <variable ilk="argument" name="buf" />
        <variable citdl="sum()" line="241" name="unsigned_chksum" />
      </scope>
      <import module="copy" />
      <scope doc="Copy length bytes from fileobj src to fileobj dst." ilk="function" line="245" name="copyfileobj" signature="copyfileobj(src, dst, length=None)">
        <variable ilk="argument" name="src" />
        <variable ilk="argument" name="dst" />
        <variable citdl="int" line="255" name="BUFSIZE" />
        <variable citdl="src.read()" line="258" name="buf" />
        <variable ilk="argument" name="length" />
      </scope>
      <import module="errno" />
      <scope doc="Convert a file&apos;s mode to a string of the form -rwxrwxrwx." ilk="function" line="297" lineend="310" name="filemode" returns="str.join()" signature="filemode(mode)">
        <variable ilk="argument" name="mode" />
        <variable citdl="list" line="302" name="perm" />
      </scope>
      <variable citdl="tuple" line="270" name="filemode_table" />
      <variable citdl="NoneType" line="63" name="grp" />
      <scope doc="Return True if name points to a tar archive that we are able to handle, else return False." ilk="function" line="2447" lineend="2456" name="is_tarfile" returns="bool" signature="is_tarfile(name)">
        <variable ilk="argument" name="name" />
        <variable citdl="open()" line="2452" name="t" />
      </scope>
      <scope doc="Convert a python number to a number field." ilk="function" line="205" lineend="230" name="itn" returns="bytes()" signature="itn(n, digits=8, format=1)">
        <variable citdl="int" ilk="argument" name="digits" />
        <variable citdl="bytes()" line="215" name="s" />
        <variable citdl="int" ilk="argument" name="format" />
        <variable ilk="argument" name="n" />
      </scope>
      <scope doc="/" ilk="function" line="313" name="normpath" signature="normpath(path)" />
      <scope doc="Convert a number field to a python number." ilk="function" line="188" lineend="203" name="nti" returns="int()" signature="nti(s)">
        <variable ilk="argument" name="s" />
        <variable citdl="int()" line="195" name="n" />
      </scope>
      <scope doc="Convert a null-terminated bytes object to a string." ilk="function" line="180" lineend="186" name="nts" returns="s.decode()" signature="nts(s, encoding, errors)">
        <variable citdl="s.find()" line="183" name="p" />
        <variable citdl="list" ilk="argument" name="s" />
        <variable ilk="argument" name="errors" />
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope doc="Open a tar archive for reading, writing or appending." ilk="function" line="2459" name="open" />
      <import module="os" />
      <variable citdl="NoneType" name="pwd" />
      <import module="re" />
      <import module="shutil" />
      <import module="stat" />
      <scope doc="Convert a string to a null-terminated bytes object." ilk="function" line="174" lineend="178" name="stn" returns="str" signature="stn(s, length, encoding, errors)">
        <variable citdl="s.encode()" ilk="argument" name="s" />
        <variable ilk="argument" name="errors" />
        <variable ilk="argument" name="length" />
        <variable ilk="argument" name="encoding" />
      </scope>
      <import module="struct" />
      <import module="sys" />
      <import module="time" />
      <variable citdl="str" line="34" name="version" />
      <scope attributes="protected __hidden__" classrefs="object" doc="Small proxy class that enables external file object support for &quot;r:bz2&quot; and &quot;w:bz2&quot; modes." ilk="class" line="613" lineend="670" name="_BZ2Proxy">
        <variable citdl="int" line="621" name="blocksize" />
        <scope attributes="__ctor__" ilk="function" line="623" lineend="627" name="__init__" signature="_BZ2Proxy(fileobj, mode)">
          <variable citdl="_BZ2Proxy" ilk="argument" name="self" />
          <variable ilk="argument" name="fileobj" />
          <variable ilk="argument" name="mode" />
        </scope>
        <variable attributes="__instancevar__" line="624" name="fileobj" />
        <variable attributes="__instancevar__" line="625" name="mode" />
        <variable attributes="__instancevar__" citdl="getattr()" line="626" name="name" />
        <scope ilk="function" line="629" lineend="637" name="init" signature="init()">
          <import line="630" module="bz2" />
          <variable citdl="_BZ2Proxy" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="631" name="pos" />
        <variable attributes="__instancevar__" citdl="bz2.BZ2Decompressor()" line="633" name="bz2obj" />
        <variable attributes="__instancevar__" citdl="list" line="635" name="buf" />
        <scope ilk="function" line="639" lineend="652" name="read" returns="list" signature="read(size)">
          <variable citdl="_BZ2Proxy" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="len()" line="640" name="x" />
          <variable citdl="self.fileobj.read()" line="642" name="raw" />
          <variable citdl="self.bz2obj.decompress()" line="645" name="data" />
          <variable citdl="list" line="649" name="buf" />
        </scope>
        <scope ilk="function" line="654" lineend="657" name="seek" signature="seek(pos)">
          <variable citdl="_BZ2Proxy" ilk="argument" name="self" />
          <variable ilk="argument" name="pos" />
        </scope>
        <scope ilk="function" line="659" lineend="660" name="tell" returns="int" signature="tell()">
          <variable citdl="_BZ2Proxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="662" lineend="665" name="write" signature="write(data)">
          <variable citdl="_BZ2Proxy" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="self.bz2obj.compress()" line="664" name="raw" />
        </scope>
        <scope ilk="function" line="667" lineend="670" name="close" signature="close()">
          <variable citdl="_BZ2Proxy" ilk="argument" name="self" />
          <variable citdl="self.bz2obj.flush()" line="669" name="raw" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="object" doc="A thin wrapper around an existing file object that provides a part of its data as an individual file object." ilk="class" line="676" lineend="754" name="_FileInFile">
        <scope attributes="__ctor__" ilk="function" line="682" lineend="687" name="__init__" signature="_FileInFile(fileobj, offset, size, sparse=None)">
          <variable citdl="_FileInFile" ilk="argument" name="self" />
          <variable ilk="argument" name="fileobj" />
          <variable ilk="argument" name="offset" />
          <variable ilk="argument" name="size" />
          <variable ilk="argument" name="sparse" />
        </scope>
        <variable attributes="__instancevar__" line="683" name="fileobj" />
        <variable attributes="__instancevar__" line="684" name="offset" />
        <variable attributes="__instancevar__" line="685" name="size" />
        <variable attributes="__instancevar__" line="686" name="sparse" />
        <variable attributes="__instancevar__" citdl="int" line="687" name="position" />
        <scope ilk="function" line="689" lineend="693" name="seekable" returns="self.fileobj.seekable()" signature="seekable()">
          <variable citdl="_FileInFile" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the current file position." ilk="function" line="695" lineend="698" name="tell" returns="int" signature="tell()">
          <variable citdl="_FileInFile" ilk="argument" name="self" />
        </scope>
        <scope doc="Seek to a position in the file." ilk="function" line="700" lineend="703" name="seek" signature="seek(position)">
          <variable citdl="_FileInFile" ilk="argument" name="self" />
          <variable ilk="argument" name="position" />
        </scope>
        <scope doc="Read data from the file." ilk="function" line="705" lineend="716" name="read" returns="self.readnormal()" signature="read(size=None)">
          <variable citdl="_FileInFile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="size" />
        </scope>
        <scope doc="Read operation for regular files." ilk="function" line="718" lineend="723" name="readnormal" returns="self.fileobj.read()" signature="readnormal(size)">
          <variable citdl="_FileInFile" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
        </scope>
        <scope doc="Read operation for sparse files." ilk="function" line="725" lineend="735" name="readsparse" returns="str" signature="readsparse(size)">
          <variable citdl="_FileInFile" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="str" line="728" name="data" />
          <variable citdl="self.readsparsesection()" line="730" name="buf" />
        </scope>
        <scope doc="Read a single section of a sparse file." ilk="function" line="737" lineend="754" name="readsparsesection" returns="self.fileobj.read()" signature="readsparsesection(size)">
          <variable citdl="_FileInFile" ilk="argument" name="self" />
          <variable citdl="min()" ilk="argument" name="size" />
          <variable citdl="self.sparse.find()" line="740" name="section" />
          <variable citdl="section.realpos" line="748" name="realpos" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Base class for _data and _hole." ilk="class" line="2402" lineend="2409" name="_section">
        <scope attributes="__ctor__" ilk="function" line="2405" lineend="2407" name="__init__" signature="_section(offset, size)">
          <variable citdl="_section" ilk="argument" name="self" />
          <variable ilk="argument" name="offset" />
          <variable ilk="argument" name="size" />
        </scope>
        <variable attributes="__instancevar__" line="2406" name="offset" />
        <variable attributes="__instancevar__" line="2407" name="size" />
        <scope ilk="function" line="2408" lineend="2409" name="__contains__" returns="bool" signature="__contains__(offset)">
          <variable citdl="_section" ilk="argument" name="self" />
          <variable ilk="argument" name="offset" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="list" doc="Ringbuffer class which increases performance over a regular list." ilk="class" line="2423" lineend="2442" name="_ringbuffer">
        <scope attributes="__ctor__" ilk="function" line="2427" lineend="2428" name="__init__" signature="_ringbuffer()">
          <variable citdl="_ringbuffer" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="2428" name="idx" />
        <scope ilk="function" line="2429" lineend="2442" name="find" signature="find(offset)">
          <variable citdl="_ringbuffer" ilk="argument" name="self" />
          <variable ilk="argument" name="offset" />
          <variable citdl="int" line="2430" name="idx" />
          <variable line="2432" name="item" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Low-level file object. Supports reading and writing." ilk="class" line="339" lineend="361" name="_LowLevelFile">
        <scope attributes="__ctor__" ilk="function" line="345" lineend="352" name="__init__" signature="_LowLevelFile(name, mode)">
          <variable citdl="_LowLevelFile" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="mode" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.open()" line="352" name="fd" />
        <scope ilk="function" line="354" lineend="355" name="close" signature="close()">
          <variable citdl="_LowLevelFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="357" lineend="358" name="read" returns="os.read()" signature="read(size)">
          <variable citdl="_LowLevelFile" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
        </scope>
        <scope ilk="function" line="360" lineend="361" name="write" signature="write(s)">
          <variable citdl="_LowLevelFile" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Class that serves as an adapter between TarFile and a stream-like object." ilk="class" line="363" lineend="586" name="_Stream">
        <scope attributes="__ctor__" doc="Construct a _Stream object." ilk="function" line="374" lineend="418" name="__init__" signature="_Stream(name, mode, comptype, fileobj, bufsize)">
          <import line="399" module="zlib" />
          <import line="411" module="bz2" />
          <variable citdl="_Stream" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="mode" />
          <variable citdl="fileobj.getcomptype()" ilk="argument" name="comptype" />
          <variable citdl="_LowLevelFile" ilk="argument" name="fileobj" />
          <variable ilk="argument" name="bufsize" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="377" name="_extfileobj" />
        <variable attributes="__instancevar__" citdl="list" line="388" name="name" />
        <variable attributes="__instancevar__" line="389" name="mode" />
        <variable attributes="__instancevar__" citdl="fileobj.getcomptype()" line="390" name="comptype" />
        <variable attributes="__instancevar__" citdl="_LowLevelFile" line="391" name="fileobj" />
        <variable attributes="__instancevar__" line="392" name="bufsize" />
        <variable attributes="__instancevar__" citdl="list" line="393" name="buf" />
        <variable attributes="__instancevar__" citdl="int" line="394" name="pos" />
        <variable attributes="__instancevar__" citdl="False" line="395" name="closed" />
        <variable attributes="__instancevar__" line="402" name="zlib" />
        <variable attributes="__instancevar__" citdl="self.zlib.crc32()" line="403" name="crc" />
        <variable attributes="__instancevar__" citdl="str" line="415" name="dbuf" />
        <variable attributes="__instancevar__" citdl="bz2.BZ2Compressor()" line="416" name="cmp" />
        <scope ilk="function" line="420" lineend="422" name="__del__" signature="__del__()">
          <variable citdl="_Stream" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Initialize for writing with gzip compression." ilk="function" line="424" lineend="436" name="_init_write_gz" signature="_init_write_gz()">
          <variable citdl="_Stream" ilk="argument" name="self" />
          <variable citdl="struct.pack()" line="431" name="timestamp" />
        </scope>
        <scope doc="Write string s to the stream." ilk="function" line="438" lineend="446" name="write" signature="write(s)">
          <variable citdl="_Stream" ilk="argument" name="self" />
          <variable citdl="self.cmp.compress()" ilk="argument" name="s" />
        </scope>
        <scope attributes="private" doc="Write string s to the stream if a whole new block is ready to be written." ilk="function" line="448" lineend="455" name="__write" signature="__write(s)">
          <variable citdl="_Stream" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope doc="Close the _Stream object." ilk="function" line="457" lineend="483" name="close" signature="close()">
          <variable citdl="_Stream" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Initialize for reading a gzip compressed fileobj." ilk="function" line="485" lineend="514" name="_init_read_gz" signature="_init_read_gz()">
          <variable citdl="_Stream" ilk="argument" name="self" />
          <variable citdl="ord()" line="497" name="flag" />
          <variable citdl="ord()" line="501" name="xlen" />
          <variable citdl="self.__read()" line="505" name="s" />
        </scope>
        <scope doc="Return the stream&apos;s file pointer position." ilk="function" line="516" lineend="519" name="tell" returns="int" signature="tell()">
          <variable citdl="_Stream" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the stream&apos;s file pointer to pos." ilk="function" line="521" lineend="532" name="seek" returns="int" signature="seek(pos=0)">
          <variable citdl="_Stream" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="pos" />
        </scope>
        <scope doc="Return the next size number of bytes from the stream." ilk="function" line="534" lineend="550" name="read" returns="self._read()" signature="read(size=None)">
          <variable citdl="_Stream" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="list" line="540" name="t" />
          <variable citdl="self._read()" line="542" name="buf" />
        </scope>
        <scope attributes="protected" doc="Return size bytes from the stream." ilk="function" line="552" lineend="571" name="_read" returns="list" signature="_read(size)">
          <variable citdl="_Stream" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="len()" line="558" name="c" />
          <variable citdl="self.__read()" line="560" name="buf" />
        </scope>
        <scope attributes="private" doc="Return size bytes from stream." ilk="function" line="573" lineend="586" name="__read" returns="self.fileobj.read()" signature="__read(size)">
          <variable citdl="_Stream" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="len()" line="577" name="c" />
          <variable citdl="list" line="579" name="buf" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="_section" doc="Represent a hole section in a sparse file." ilk="class" line="2418" lineend="2421" name="_hole" />
      <scope attributes="protected __hidden__" classrefs="_section" doc="Represent a data section in a sparse file." ilk="class" line="2411" lineend="2416" name="_data">
        <scope attributes="__ctor__" ilk="function" line="2414" lineend="2416" name="__init__" signature="_data(offset, size, realpos)">
          <variable citdl="_data" ilk="argument" name="self" />
          <variable ilk="argument" name="offset" />
          <variable ilk="argument" name="size" />
          <variable ilk="argument" name="realpos" />
        </scope>
        <variable attributes="__instancevar__" line="2416" name="realpos" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="object" doc="Small proxy class that enables transparent compression detection for the Stream interface (mode &apos;r|*&apos;)." ilk="class" line="589" lineend="610" name="_StreamProxy">
        <scope attributes="__ctor__" ilk="function" line="594" lineend="596" name="__init__" signature="_StreamProxy(fileobj)">
          <variable citdl="_StreamProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="fileobj" />
        </scope>
        <variable attributes="__instancevar__" line="595" name="fileobj" />
        <variable attributes="__instancevar__" citdl="self.fileobj.read()" line="596" name="buf" />
        <variable attributes="__instancevar__" citdl="function" line="598" name="read" />
        <scope ilk="function" line="602" lineend="607" name="getcomptype" returns="str" signature="getcomptype()">
          <variable citdl="_StreamProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="609" lineend="610" name="close" signature="close()">
          <variable citdl="_StreamProxy" ilk="argument" name="self" />
        </scope>
      </scope>
    </scope>
    <scope doc="Fixer that addes parentheses where they are required  This converts ``[x for x in 1, 2]`` to ``[x for x in (1, 2)]``." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_paren">
      <scope classrefs="BaseFix" doc="# XXX This doesn&apos;t support nested for loops like [x for x in 1, 2 for x in 1, 2]" ilk="class" line="12" lineend="42" name="FixParen">
        <variable citdl="str" line="13" name="PATTERN" />
        <scope ilk="function" line="35" lineend="42" name="transform" signature="transform(node, results)">
          <variable citdl="FixParen" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="36" name="target" />
          <variable citdl="LParen()" line="38" name="lparen" />
        </scope>
      </scope>
      <scope ilk="function" name="LParen" signature="LParen()" />
      <scope ilk="function" name="RParen" signature="RParen()" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Heap queue algorithm (a.k.a. priority queue).  Heaps are arrays for which a[k] &lt;= a[2*k+1] and a[k] &lt;= a[2*k+2] for" ilk="blob" lang="Python3" name="heapq">
      <variable citdl="str" line="35" name="__about__" />
      <variable citdl="list" line="129" name="__all__" />
      <import module="bisect" />
      <scope classrefs="object" doc="chain(*iterables) --&gt; chain object  Return a chain object whose .__next__() method returns elements from the" ilk="class" name="chain" />
      <scope classrefs="object" doc="count(start=0, step=1]) --&gt; count object  Return a count object whose .__next__() method returns consecutive values." ilk="class" name="count" />
      <scope doc="Transform list into a heap, in-place, in O(len(heap)) time." ilk="function" line="174" lineend="183" name="heapify" signature="heapify(x)">
        <variable ilk="argument" name="x" />
        <variable citdl="len()" line="176" name="n" />
      </scope>
      <scope doc="Pop the smallest item off the heap, maintaining the heap invariant." ilk="function" line="140" lineend="149" name="heappop" returns="heap.pop()" signature="heappop(heap)">
        <variable citdl="heap.pop()" line="142" name="lastelt" />
        <variable citdl="heap.pop()" line="144" name="returnitem" />
        <variable ilk="argument" name="heap" />
      </scope>
      <scope doc="Push item onto heap, maintaining the heap invariant." ilk="function" line="135" lineend="138" name="heappush" signature="heappush(heap, item)">
        <variable ilk="argument" name="item" />
        <variable ilk="argument" name="heap" />
      </scope>
      <scope doc="Push item on the heap, then pop and return the smallest item from the heap." ilk="function" line="167" lineend="172" name="heappushpop" signature="heappushpop(heap, item)">
        <variable ilk="argument" name="item" />
        <variable ilk="argument" name="heap" />
      </scope>
      <scope doc="Pop and return the current smallest value, and add the new item." ilk="function" line="151" lineend="165" name="heapreplace" signature="heapreplace(heap, item)">
        <variable ilk="argument" name="item" />
        <variable line="162" name="returnitem" />
        <variable ilk="argument" name="heap" />
      </scope>
      <scope classrefs="object" doc="islice(iterable, [start,] stop [, step]) --&gt; islice object  Return an iterator whose next() method returns selected values from an" ilk="class" name="islice" />
      <scope doc="Merge multiple sorted inputs into a single sorted output." ilk="function" line="314" name="merge" signature="merge(*iterables)">
        <variable citdl="h.append" line="328" name="h_append" />
        <variable attributes="protected" citdl="heapreplace" line="325" name="_heapreplace" />
        <variable citdl="list" line="327" name="h" />
        <variable citdl="it.__next__" line="331" name="next" />
        <variable attributes="protected" citdl="StopIteration" line="325" name="_StopIteration" />
        <variable attributes="protected" citdl="heappop" line="325" name="_heappop" />
        <variable attributes="varargs" ilk="argument" name="iterables" />
      </scope>
      <scope doc="Find the n largest elements in a dataset." ilk="function" line="388" lineend="423" name="nlargest" returns="list" signature="nlargest(n, iterable, key=None)">
        <variable citdl="list()" line="397" name="head" />
        <variable citdl="zip()" line="396" name="it" />
        <variable ilk="argument" name="n" />
        <variable citdl="_nlargest()" line="416" name="result" />
        <variable ilk="argument" name="key" />
        <variable ilk="argument" name="iterable" />
        <variable citdl="len()" line="406" name="size" />
      </scope>
      <scope doc="Find the n smallest elements in a dataset." ilk="function" line="351" lineend="385" name="nsmallest" returns="list" signature="nsmallest(n, iterable, key=None)">
        <variable citdl="list()" line="359" name="head" />
        <variable citdl="zip()" line="358" name="it" />
        <variable ilk="argument" name="n" />
        <variable citdl="_nsmallest()" line="378" name="result" />
        <variable ilk="argument" name="key" />
        <variable ilk="argument" name="iterable" />
        <variable citdl="len()" line="368" name="size" />
      </scope>
      <scope classrefs="object" doc="repeat(object [,times]) -&gt; create an iterator which returns the object for the specified number of times.  If not specified, returns the object endlessly." ilk="class" name="repeat" />
      <scope doc="tee(iterable, n=2) --&gt; tuple of n independent iterators." ilk="function" name="tee" signature="tee(iterable, n=2) --&gt; tuple of n independent iterators." />
      <variable attributes="__hidden__" citdl="list" line="431" name="sort" />
      <variable attributes="protected __hidden__" citdl="nsmallest" line="350" name="_nsmallest" />
      <variable attributes="protected __hidden__" citdl="nlargest" line="387" name="_nlargest" />
      <scope attributes="protected __hidden__" ilk="function" line="288" lineend="306" name="_siftup" signature="_siftup(heap, pos)">
        <variable ilk="argument" name="heap" />
        <variable citdl="int" ilk="argument" name="pos" />
        <variable citdl="len()" line="289" name="endpos" />
        <variable line="290" name="startpos" />
        <variable line="291" name="newitem" />
        <variable citdl="int" line="293" name="childpos" />
        <variable citdl="int" line="296" name="rightpos" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="235" lineend="247" name="_siftdown" signature="_siftdown(heap, startpos, pos)">
        <variable ilk="argument" name="heap" />
        <variable ilk="argument" name="startpos" />
        <variable citdl="int" ilk="argument" name="pos" />
        <variable line="236" name="newitem" />
        <variable citdl="int" line="240" name="parentpos" />
        <variable line="241" name="parent" />
      </scope>
      <variable attributes="__hidden__" citdl="list" line="427" name="heap" />
      <variable attributes="__hidden__" citdl="list" line="428" name="data" />
    </scope>
    <scope doc="subprocess - Subprocesses with accessible I/O streams  This module allows you to spawn processes, connect to their" ilk="blob" lang="Python3" name="subprocess">
      <variable citdl="int" name="CREATE_NEW_CONSOLE" />
      <scope classrefs="Exception" doc="This exception is raised when a process run by check_call() or check_output() returns a non-zero exit status. The exit status will be stored in the returncode attribute;" ilk="class" line="332" lineend="343" name="CalledProcessError">
        <variable attributes="__instancevar__" line="340" name="cmd" />
        <variable attributes="__instancevar__" line="341" name="output" />
        <scope ilk="function" line="342" lineend="343" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="CalledProcessError" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="339" name="returncode" />
        <scope attributes="__ctor__" ilk="function" line="338" lineend="341" name="__init__" signature="CalledProcessError(returncode, cmd, output=None)">
          <variable citdl="CalledProcessError" ilk="argument" name="self" />
          <variable ilk="argument" name="returncode" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="output" />
        </scope>
      </scope>
      <scope ilk="function" name="CreatePipe" />
      <scope ilk="function" name="CreateProcess" />
      <variable citdl="int" name="DUPLICATE_SAME_ACCESS" />
      <scope ilk="function" name="DuplicateHandle" />
      <scope ilk="function" name="GetCurrentProcess" />
      <scope ilk="function" name="GetExitCodeProcess" />
      <scope ilk="function" name="GetModuleFileName" />
      <scope ilk="function" name="GetStdHandle" />
      <scope ilk="function" name="GetVersion" />
      <variable citdl="int" name="INFINITE" />
      <variable citdl="int" line="389" name="MAXFD" />
      <variable citdl="int" line="406" name="PIPE" />
      <scope classrefs="object" ilk="class" line="595" lineend="1349" name="Popen">
        <variable attributes="__instancevar__" citdl="GetExitCodeProcess()" line="631" name="returncode" />
        <variable attributes="__instancevar__" citdl="io.open()" line="628" name="stdout" />
        <variable attributes="__instancevar__" citdl="os.fork()" line="630" name="pid" />
        <variable attributes="protected __instancevar__" citdl="hp" line="878" name="_handle" />
        <scope attributes="protected" ilk="function" line="914" lineend="915" name="_readerthread" signature="_readerthread(fh, buffer)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="fh" />
          <variable ilk="argument" name="buffer" />
        </scope>
        <scope doc="Kill the process with SIGKILL" ilk="function" line="1346" lineend="1349" name="kill" signature="kill()">
          <variable citdl="Popen" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Construct and return tuple with IO objects: p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite" ilk="function" line="973" lineend="1015" name="_get_handles" returns="tuple" signature="_get_handles(stdin, stdout, stderr)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="stdin" />
          <variable ilk="argument" name="stdout" />
          <variable ilk="argument" name="stderr" />
          <variable citdl="stdin.fileno()" line="977" name="p2cread" />
          <variable line="977" name="p2cwrite" />
          <variable line="978" name="c2pread" />
          <variable citdl="stdout.fileno()" line="978" name="c2pwrite" />
          <variable line="979" name="errread" />
          <variable citdl="stdout.fileno()" line="979" name="errwrite" />
        </scope>
        <scope ilk="function" line="730" lineend="731" name="poll" returns="self._internal_poll()" signature="poll()">
          <variable citdl="Popen" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Create new Popen instance." ilk="function" line="596" lineend="681" name="__init__" signature="Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="args" />
          <variable citdl="int" ilk="argument" name="bufsize" />
          <variable ilk="argument" name="executable" />
          <variable ilk="argument" name="stdin" />
          <variable ilk="argument" name="stdout" />
          <variable ilk="argument" name="stderr" />
          <variable ilk="argument" name="preexec_fn" />
          <variable citdl="False" ilk="argument" name="close_fds" />
          <variable citdl="False" ilk="argument" name="shell" />
          <variable ilk="argument" name="cwd" />
          <variable ilk="argument" name="env" />
          <variable citdl="False" ilk="argument" name="universal_newlines" />
          <variable ilk="argument" name="startupinfo" />
          <variable citdl="int" ilk="argument" name="creationflags" />
          <variable citdl="msvcrt.open_osfhandle()" line="662" name="p2cwrite" />
          <variable citdl="msvcrt.open_osfhandle()" line="664" name="c2pread" />
          <variable citdl="msvcrt.open_osfhandle()" line="666" name="errread" />
        </scope>
        <scope attributes="protected" doc="Find and return absolut path to w9xpopen.exe" ilk="function" line="802" lineend="815" name="_find_w9xpopen" returns="os.path.join()" signature="_find_w9xpopen()">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable citdl="os.path.join()" line="804" name="w9xpopen" />
        </scope>
        <scope attributes="protected" ilk="function" line="684" lineend="686" name="_translate_newlines" returns="data.decode()" signature="_translate_newlines(data, encoding)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable ilk="argument" name="encoding" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="604" name="_child_created" />
        <scope attributes="protected" doc="Return a duplicate of handle, which is inheritable" ilk="function" line="795" lineend="799" name="_make_inheritable" returns="DuplicateHandle()" signature="_make_inheritable(handle)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="handle" />
        </scope>
        <scope attributes="protected" ilk="function" line="1194" lineend="1224" name="_communicate" returns="tuple" signature="_communicate(input)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="str.join()" line="1209" name="stdout" />
          <variable citdl="str.join()" line="1211" name="stderr" />
        </scope>
        <scope ilk="function" line="689" lineend="697" name="__del__" signature="__del__(sys=sys)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable citdl="sys" ilk="argument" name="sys" />
        </scope>
        <scope attributes="protected" ilk="function" line="1018" lineend="1025" name="_set_cloexec_flag" signature="_set_cloexec_flag(fd)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="fd" />
          <variable citdl="int" line="1020" name="cloexec_flag" />
          <variable citdl="fcntl.fcntl()" line="1024" name="old" />
        </scope>
        <scope doc="Interact with process: Send data to stdin." ilk="function" line="700" lineend="727" name="communicate" returns="tuple" signature="communicate(input=None)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="self.stdout.read()" line="712" name="stdout" />
          <variable citdl="self.stderr.read()" line="713" name="stderr" />
        </scope>
        <scope doc="Terminate the process with SIGTERM" ilk="function" line="1341" lineend="1344" name="terminate" signature="terminate()">
          <variable citdl="Popen" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Check if child process has terminated." ilk="function" line="1171" lineend="1182" name="_internal_poll" returns="GetExitCodeProcess()" signature="_internal_poll(_deadstate=None)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="_deadstate" />
        </scope>
        <scope attributes="protected" doc="Execute program (POSIX version)" ilk="function" line="1033" lineend="1158" name="_execute_child" signature="_execute_child(args, executable, preexec_fn, close_fds, cwd, env, universal_newlines, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="args" />
          <variable ilk="argument" name="executable" />
          <variable ilk="argument" name="preexec_fn" />
          <variable ilk="argument" name="close_fds" />
          <variable ilk="argument" name="cwd" />
          <variable ilk="argument" name="env" />
          <variable ilk="argument" name="universal_newlines" />
          <variable ilk="argument" name="startupinfo" />
          <variable ilk="argument" name="creationflags" />
          <variable ilk="argument" name="shell" />
          <variable ilk="argument" name="p2cread" />
          <variable ilk="argument" name="p2cwrite" />
          <variable ilk="argument" name="c2pread" />
          <variable ilk="argument" name="c2pwrite" />
          <variable ilk="argument" name="errread" />
          <variable ilk="argument" name="errwrite" />
          <variable citdl="gc.isenabled()" line="1060" name="gc_was_enabled" />
          <variable citdl="traceback.format_exception()" line="1121" name="exc_lines" />
          <variable citdl="_eintr_retry_call()" line="1147" name="data" />
          <variable citdl="pickle.loads()" line="1154" name="child_exception" />
        </scope>
        <scope attributes="protected" ilk="function" line="1227" lineend="1281" name="_communicate_with_poll" returns="tuple" signature="_communicate_with_poll(input)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable line="1228" name="stdout" />
          <variable line="1229" name="stderr" />
          <variable citdl="dict" line="1230" name="fd2file" />
          <variable citdl="dict" line="1231" name="fd2output" />
          <variable citdl="select.poll()" line="1233" name="poller" />
          <scope ilk="function" line="1234" lineend="1236" name="register_and_append" signature="register_and_append(file_obj, eventmask)">
            <variable ilk="argument" name="file_obj" />
            <variable ilk="argument" name="eventmask" />
          </scope>
          <scope ilk="function" line="1238" lineend="1241" name="close_unregister_and_remove" signature="close_unregister_and_remove(fd)">
            <variable ilk="argument" name="fd" />
          </scope>
          <variable citdl="int" line="1246" name="select_POLLIN_POLLPRI" />
          <variable citdl="int" line="1254" name="input_offset" />
          <variable citdl="poller.poll()" line="1257" name="ready" />
          <variable citdl="list" line="1268" name="chunk" />
          <variable citdl="os.read()" line="1273" name="data" />
        </scope>
        <scope doc="Wait for child process to terminate." ilk="function" line="1185" lineend="1191" name="wait" returns="GetExitCodeProcess()" signature="wait()">
          <variable citdl="Popen" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="1161" lineend="1168" name="_handle_exitstatus" signature="_handle_exitstatus(sts)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="sts" />
        </scope>
        <scope attributes="protected" ilk="function" line="1028" lineend="1030" name="_close_fds" signature="_close_fds(but)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="but" />
        </scope>
        <variable attributes="__instancevar__" citdl="io.open()" line="627" name="stdin" />
        <scope attributes="protected" ilk="function" line="1284" lineend="1333" name="_communicate_with_select" returns="tuple" signature="_communicate_with_select(input)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable citdl="list" line="1285" name="read_set" />
          <variable citdl="list" line="1286" name="write_set" />
          <variable citdl="list" line="1287" name="stdout" />
          <variable citdl="list" line="1288" name="stderr" />
          <variable citdl="int" line="1299" name="input_offset" />
          <variable citdl="list" line="1312" name="chunk" />
          <variable citdl="os.write()" line="1313" name="bytes_written" />
          <variable citdl="os.read()" line="1320" name="data" />
        </scope>
        <variable attributes="__instancevar__" citdl="io.open()" line="629" name="stderr" />
        <scope doc="Send a signal to the process" ilk="function" line="1336" lineend="1339" name="send_signal" signature="send_signal(sig)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="sig" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="632" name="universal_newlines" />
      </scope>
      <variable citdl="int" name="STARTF_USESHOWWINDOW" />
      <variable citdl="int" name="STARTF_USESTDHANDLES" />
      <scope classrefs="object" ilk="class" line="364" lineend="369" name="STARTUPINFO">
        <variable line="367" name="hStdOutput" />
        <variable citdl="int" line="369" name="wShowWindow" />
        <variable line="366" name="hStdInput" />
        <variable line="368" name="hStdError" />
        <variable citdl="int" line="365" name="dwFlags" />
      </scope>
      <variable citdl="int" line="407" name="STDOUT" />
      <variable citdl="int" name="STD_ERROR_HANDLE" />
      <variable citdl="int" name="STD_INPUT_HANDLE" />
      <variable citdl="int" name="STD_OUTPUT_HANDLE" />
      <variable citdl="int" name="SW_HIDE" />
      <scope ilk="function" name="TerminateProcess" />
      <variable citdl="int" name="WAIT_OBJECT_0" />
      <scope ilk="function" name="WaitForSingleObject" />
      <variable citdl="list" line="385" name="__all__" />
      <scope doc="Run command with arguments." ilk="function" line="420" lineend="428" name="call" signature="call(*popenargs, **kwargs)">
        <variable attributes="varargs" ilk="argument" name="popenargs" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope doc="Run command with arguments. Wait for command to complete." ilk="function" line="431" lineend="447" name="check_call" returns="int" signature="check_call(*popenargs, **kwargs)">
        <variable citdl="kwargs.get()" line="443" name="cmd" />
        <variable citdl="call()" line="441" name="retcode" />
        <variable attributes="varargs" ilk="argument" name="popenargs" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope doc="Run command with arguments and return its output as a byte string." ilk="function" line="450" lineend="480" name="check_output" returns="output" signature="check_output(*popenargs, **kwargs)">
        <variable citdl="Popen()" line="472" name="process" />
        <variable citdl="kwargs.get()" line="476" name="cmd" />
        <variable citdl="process.poll()" line="474" name="retcode" />
        <variable attributes="varargs" ilk="argument" name="popenargs" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <import module="gc" />
      <scope doc="Return output (stdout or stderr) of executing cmd in a shell." ilk="function" line="582" lineend="592" name="getoutput" signature="getoutput(cmd)">
        <variable ilk="argument" name="cmd" />
      </scope>
      <scope doc="Execute the string &apos;cmd&apos; in a shell with os.popen() and return a 2-tuple (status, output)." ilk="function" line="557" lineend="579" name="getstatusoutput" returns="tuple" signature="Return (status, output) of executing cmd in a shell.">
        <variable citdl="os.popen()" line="574" name="pipe" />
        <variable citdl="list" line="575" name="text" />
        <variable ilk="argument" name="cmd" />
        <variable citdl="int" line="576" name="sts" />
      </scope>
      <import module="io" />
      <scope doc="Translate a sequence of arguments into a command line string, using the same rules as the MS C runtime:" ilk="function" line="483" lineend="550" name="list2cmdline" returns="str.join()" signature="list2cmdline(seq)">
        <variable citdl="False" line="514" name="needquote" />
        <variable citdl="list" line="513" name="result" />
        <variable ilk="argument" name="seq" />
        <variable citdl="list" line="516" name="bs_buf" />
      </scope>
      <import module="msvcrt" />
      <variable citdl="bool" line="323" name="mswindows" />
      <import module="os" />
      <scope classrefs="object" ilk="class" line="370" lineend="371" name="pywintypes">
        <variable citdl="IOError" line="371" name="error" />
      </scope>
      <import module="signal" />
      <import module="sys" />
      <import module="threading" />
      <import module="traceback" />
      <variable attributes="protected __hidden__" citdl="list" line="393" name="_active" />
      <scope attributes="protected __hidden__" ilk="function" line="410" lineend="417" name="_eintr_retry_call" returns="_eintr_retry_call.func()" signature="_eintr_retry_call(func, *args)">
        <variable ilk="argument" name="func" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="1352" lineend="1390" name="_demo_posix" signature="_demo_posix()">
        <variable line="1356" name="plist" />
        <variable citdl="Popen" line="1364" name="p" />
        <variable citdl="Popen" line="1371" name="p1" />
        <variable citdl="Popen" line="1372" name="p2" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="395" lineend="404" name="_cleanup" signature="_cleanup()">
        <variable citdl="inst._internal_poll()" line="397" name="res" />
      </scope>
      <variable attributes="protected __hidden__" citdl="hasattr()" line="374" name="_has_poll" />
      <scope attributes="protected __hidden__" ilk="function" line="1393" lineend="1407" name="_demo_windows" signature="_demo_windows()">
        <variable citdl="Popen" line="1398" name="p1" />
        <variable citdl="Popen" line="1399" name="p2" />
        <variable citdl="Popen" line="1406" name="p" />
      </scope>
      <variable attributes="protected __hidden__" citdl="getattr()" line="382" name="_PIPE_BUF" />
    </scope>
    <scope doc="Fixer that changes zip(seq0, seq1, ...) into list(zip(seq0, seq1, ...) unless there exists a &apos;from future_builtins import zip&apos; statement in the top-level namespace." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_zip">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="ConditionalFix" ilk="class" line="14" lineend="34" name="FixZip">
        <variable citdl="str" line="16" name="PATTERN" />
        <variable citdl="str" line="21" name="skip_on" />
        <scope ilk="function" line="23" lineend="34" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixZip" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="Call()" line="30" name="new" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Returns true if node is in an environment where all that is required of it is being itterable (ie, it doesn&apos;t matter if it returns a list or an itterator)." ilk="function" name="in_special_context" signature="in_special_context(node)" />
    </scope>
    <scope ilk="blob" lang="Python3" name="ctypes._endian">
      <scope doc="# XXX Deprecated" ilk="function" name="ARRAY" signature="ARRAY(typ, len)" />
      <scope classrefs="Exception" ilk="class" name="ArgumentError" />
      <scope classrefs="_CData" doc="XXX to be provided" ilk="class" name="Array" />
      <scope classrefs="Structure" doc="Structure with big endian byte order" ilk="class" line="42" name="BigEndianStructure" />
      <scope classrefs="object" doc="An instance of this class represents a loaded dll/shared library, exporting functions using the standard C calling convention (named &apos;cdecl&apos; on Windows)." ilk="class" name="CDLL" />
      <scope doc="CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False) -&gt; function prototype." ilk="function" name="CFUNCTYPE" signature="CFUNCTYPE(restype, *argtypes, **kw)" />
      <variable citdl="int" name="DEFAULT_MODE" />
      <scope ilk="function" name="DllCanUnloadNow" signature="DllCanUnloadNow()" />
      <scope ilk="function" name="DllGetClassObject" signature="DllGetClassObject(rclsid, riid, ppv)" />
      <scope doc="Convert a win32 error code into a string." ilk="function" name="FormatError" returns="str" signature="FormatError([integer]) -&gt; string" />
      <variable citdl="_FuncPtr" name="GetLastError" />
      <scope classrefs="_SimpleCData" ilk="class" name="HRESULT" />
      <scope classrefs="object" ilk="class" name="LibraryLoader" />
      <scope classrefs="_CData" doc="Structure base class" ilk="class" line="50" lineend="52" name="LittleEndianStructure">
        <variable attributes="protected" line="52" name="_swappedbytes_" />
      </scope>
      <scope classrefs="CDLL" doc="This class represents a dll exporting functions using the Windows stdcall calling convention, and returning HRESULT. HRESULT error values are automatically raised as WindowsError" ilk="class" name="OleDLL" />
      <scope ilk="function" name="POINTER" />
      <scope ilk="function" name="PYFUNCTYPE" signature="PYFUNCTYPE(restype, *argtypes)" />
      <scope classrefs="CDLL" doc="This class represents the Python library itself.  It allows to access Python API functions.  The GIL is not released, and Python exceptions are handled correctly." ilk="class" name="PyDLL" />
      <variable citdl="int" name="RTLD_GLOBAL" />
      <variable citdl="int" name="RTLD_LOCAL" />
      <scope doc="# XXX Deprecated" ilk="function" name="SetPointerType" signature="SetPointerType(pointer, cls)" />
      <scope classrefs="_CData" doc="Structure base class" ilk="class" name="Structure" />
      <scope classrefs="_CData" doc="Union base class" ilk="class" name="Union" />
      <scope ilk="function" name="WINFUNCTYPE" signature="WINFUNCTYPE(restype, *argtypes, **kw)" />
      <scope classrefs="CDLL" doc="This class represents a dll exporting functions using the Windows stdcall calling convention." ilk="class" name="WinDLL" />
      <scope ilk="function" name="WinError" signature="WinError(code=None, descr=None)" />
      <scope doc="Return the address of the C instance internal buffer" ilk="function" name="addressof" returns="int" signature="addressof(C instance) -&gt; integer" />
      <scope doc="Return the alignment requirements of a C instance" ilk="function" name="alignment" returns="int" signature="alignment(C type) -&gt; integer alignment(C instance) -&gt; integer" />
      <scope doc="Return a pointer lookalike to a C instance, only usable as function argument" ilk="function" name="byref" signature="byref(C instance[, offset=0]) -&gt; byref-object" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_bool" />
      <scope ilk="function" name="c_buffer" signature="c_buffer(init, size=None)" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_byte" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_char" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_char_p" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_double" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_float" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_int" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_long" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_longdouble" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_longlong" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_short" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_size_t" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_ubyte" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_uint" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_ulong" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_ulonglong" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_ushort" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_void_p" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_voidp" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_wchar" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_wchar_p" />
      <scope ilk="function" name="cast" signature="cast(obj, typ)" />
      <variable citdl="LibraryLoader" name="cdll" />
      <scope doc="create_string_buffer(aBytes) -&gt; character array create_string_buffer(anInteger) -&gt; character array create_string_buffer(aString, anInteger) -&gt; character array" ilk="function" name="create_string_buffer" returns="str" signature="create_string_buffer(aBytes) -&gt; character array create_string_buffer(anInteger) -&gt; character array create_string_buffer(aString, anInteger) -&gt; character array" />
      <scope doc="create_unicode_buffer(aString) -&gt; character array create_unicode_buffer(anInteger) -&gt; character array create_unicode_buffer(aString, anInteger) -&gt; character array" ilk="function" name="create_unicode_buffer" returns="str" signature="create_unicode_buffer(aString) -&gt; character array create_unicode_buffer(anInteger) -&gt; character array create_unicode_buffer(aString, anInteger) -&gt; character array" />
      <scope ilk="function" name="get_errno" />
      <scope ilk="function" name="get_last_error" />
      <variable citdl="CFunctionType" name="memmove" />
      <variable citdl="CFunctionType" name="memset" />
      <variable citdl="LibraryLoader" name="oledll" />
      <scope ilk="function" name="pointer" />
      <scope classrefs="_SimpleCData" ilk="class" name="py_object" />
      <variable citdl="LibraryLoader" name="pydll" />
      <variable citdl="PyDLL" name="pythonapi" />
      <scope doc="Resize the memory buffer of a ctypes instance" ilk="function" name="resize" />
      <scope doc="Set the encoding and error handling ctypes uses when converting between unicode and strings." ilk="function" name="set_conversion_mode" signature="set_conversion_mode(encoding, errors) -&gt; (previous-encoding, previous-errors)" />
      <scope ilk="function" name="set_errno" />
      <scope ilk="function" name="set_last_error" />
      <scope doc="Return the size in bytes of a C instance" ilk="function" name="sizeof" returns="int" signature="sizeof(C type) -&gt; integer sizeof(C instance) -&gt; integer" />
      <scope doc="Return the string at addr." ilk="function" name="string_at" returns="str" signature="string_at(addr[, size]) -&gt; string" />
      <import module="sys" />
      <variable citdl="LibraryLoader" name="windll" />
      <scope doc="Return the string at addr." ilk="function" name="wstring_at" returns="str" signature="wstring_at(addr[, size]) -&gt; string" />
      <variable attributes="protected __hidden__" citdl="type()" line="4" name="_array_type" />
      <scope attributes="protected __hidden__" doc="Return the type with the &apos;other&apos; byte order." ilk="function" line="6" lineend="17" name="_other_endian" returns="_other_endian()" signature="_other_endian(typ)">
        <variable ilk="argument" name="typ" />
      </scope>
      <variable attributes="protected __hidden__" citdl="str" line="38" name="_OTHER_ENDIAN" />
      <scope attributes="protected __hidden__" classrefs="type()" ilk="class" line="19" lineend="29" name="_swapped_meta">
        <scope ilk="function" line="20" lineend="29" name="__setattr__" signature="__setattr__(attrname, value)">
          <variable citdl="_swapped_meta" ilk="argument" name="self" />
          <variable ilk="argument" name="attrname" />
          <variable citdl="list" ilk="argument" name="value" />
          <variable citdl="list" line="22" name="fields" />
          <variable line="24" name="name" />
          <variable line="25" name="typ" />
          <variable citdl="list" line="26" name="rest" />
        </scope>
      </scope>
    </scope>
    <scope doc="Core XML support for Python.  This package contains four sub-packages:" ilk="blob" lang="Python3" name="xml">
      <variable citdl="list" line="20" name="__all__" />
      <import module="dom" />
      <import module="etree" />
      <import module="parsers" />
      <import module="sax" />
      <variable attributes="protected __hidden__" citdl="tuple" line="22" name="_MINIMUM_XMLPLUS_VERSION" />
      <variable attributes="__hidden__" citdl="_xmlplus.version_info" line="31" name="v" />
    </scope>
    <scope doc="distutils.bcppcompiler  Contains BorlandCCompiler, an implementation of the abstract CCompiler class" ilk="blob" lang="Python3" name="distutils.bcppcompiler">
      <scope classrefs="CCompiler" doc="Concrete class that implements an interface to the Borland C/C++ compiler, as defined by the CCompiler abstract class." ilk="class" line="27" lineend="395" name="BCPPCompiler">
        <variable citdl="dict" line="39" name="executables" />
        <variable citdl="list" line="47" name="src_extensions" />
        <variable attributes="__instancevar__" citdl="list" line="72" name="compile_options_debug" />
        <variable attributes="__instancevar__" citdl="str" line="66" name="cc" />
        <variable attributes="__instancevar__" citdl="str" line="67" name="linker" />
        <variable attributes="protected" citdl="list" line="42" name="_c_extensions" />
        <scope ilk="function" line="148" lineend="168" name="create_static_lib" signature="create_static_lib(objects, output_libname, output_dir=None, debug=0, target_lang=None)">
          <variable citdl="BCPPCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="objects" />
          <variable ilk="argument" name="output_libname" />
          <variable ilk="argument" name="output_dir" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="target_lang" />
          <variable citdl="self.library_filename()" line="156" name="output_filename" />
          <variable citdl="list" line="160" name="lib_args" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="55" lineend="78" name="__init__" signature="BCPPCompiler(verbose=0, dry_run=0, force=0)">
          <variable citdl="BCPPCompiler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="verbose" />
          <variable citdl="int" ilk="argument" name="dry_run" />
          <variable citdl="int" ilk="argument" name="force" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="74" name="ldflags_shared" />
        <variable attributes="__instancevar__" citdl="str" line="68" name="lib" />
        <variable citdl="str" line="32" name="compiler_type" />
        <scope ilk="function" line="363" lineend="393" name="preprocess" signature="preprocess(source, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None)">
          <variable citdl="BCPPCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="output_file" />
          <variable ilk="argument" name="macros" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable citdl="gen_preprocess_options()" line="373" name="pp_opts" />
          <variable citdl="gen_preprocess_options()" line="374" name="pp_args" />
        </scope>
        <scope ilk="function" line="310" lineend="333" name="find_library_file" returns="os.path.join()" signature="find_library_file(dirs, lib, debug=0)">
          <variable citdl="BCPPCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dirs" />
          <variable ilk="argument" name="lib" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable citdl="str" line="321" name="dlib" />
          <variable citdl="tuple" line="322" name="try_names" />
          <variable citdl="os.path.join()" line="328" name="libfile" />
        </scope>
        <scope ilk="function" line="336" lineend="359" name="object_filenames" returns="list" signature="object_filenames(source_filenames, strip_dir=0, output_dir=&apos;&apos;)">
          <variable citdl="BCPPCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="source_filenames" />
          <variable citdl="int" ilk="argument" name="strip_dir" />
          <variable citdl="str" ilk="argument" name="output_dir" />
          <variable citdl="list" line="341" name="obj_names" />
          <variable citdl="os.path.basename()" line="349" name="base" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="71" name="compile_options" />
        <variable citdl="str" line="48" name="obj_extension" />
        <variable attributes="protected" citdl="list" line="43" name="_cpp_extensions" />
        <variable attributes="__instancevar__" line="70" name="preprocess_options" />
        <scope ilk="function" line="173" lineend="303" name="link" signature="link(target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)">
          <variable citdl="BCPPCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="target_desc" />
          <variable citdl="list" ilk="argument" name="objects" />
          <variable citdl="os.path.join()" ilk="argument" name="output_filename" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable ilk="argument" name="export_symbols" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="build_temp" />
          <variable ilk="argument" name="target_lang" />
          <variable citdl="str" line="206" name="startup_obj" />
          <variable citdl="list" line="208" name="ld_args" />
          <variable citdl="os.path.join()" line="221" name="def_file" />
          <variable citdl="os.path.dirname()" line="225" name="temp_dir" />
          <variable citdl="list" line="227" name="contents" />
          <variable citdl="map()" line="234" name="objects2" />
          <variable citdl="list" line="238" name="resources" />
          <variable citdl="self.find_library_file()" line="272" name="libfile" />
        </scope>
        <variable citdl="str" line="52" name="exe_extension" />
        <variable attributes="__instancevar__" citdl="list" line="78" name="ldflags_exe_debug" />
        <variable attributes="__instancevar__" citdl="list" line="76" name="ldflags_static" />
        <variable citdl="str" line="51" name="static_lib_format" />
        <variable attributes="__instancevar__" citdl="list" line="75" name="ldflags_shared_debug" />
        <scope ilk="function" line="83" lineend="143" name="compile" returns="objects" signature="compile(sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)">
          <variable citdl="BCPPCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="sources" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="macros" />
          <variable ilk="argument" name="include_dirs" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="depends" />
          <variable citdl="list" line="90" name="compile_opts" />
          <variable citdl="os.path.normpath()" line="103" name="src" />
          <variable citdl="os.path.normpath()" line="104" name="obj" />
          <variable citdl="str" line="122" name="input_opt" />
          <variable citdl="os.path.normpath()" line="131" name="output_opt" />
        </scope>
        <variable citdl="str" line="49" name="static_lib_extension" />
        <variable citdl="str" line="50" name="shared_lib_extension" />
        <variable attributes="__instancevar__" citdl="list" line="77" name="ldflags_exe" />
      </scope>
      <scope classrefs="object" doc="Abstract base class to define the interface that must be implemented by real compiler classes.  Also has some utility methods used by several compiler classes." ilk="class" name="CCompiler" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" line="14" name="__revision__" />
      <scope doc="Generate linker options for searching library directories and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at least two types of compilers: the typical Unix compiler and Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <import module="log" />
      <scope doc="Return true if &apos;source&apos; exists and is more recently modified than &apos;target&apos;, or if &apos;source&apos; exists and &apos;target&apos; doesn&apos;t." ilk="function" name="newer" signature="newer(source, target)" />
      <import module="os" />
      <scope doc="Create a file with the specified name and write &apos;contents&apos; (a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
    </scope>
    <scope doc="A pure Python implementation of import.  References on import:" ilk="blob" lang="Python3" name="importlib">
      <variable citdl="list" line="21" name="__all__" />
      <scope doc="Import a module." ilk="function" name="__import__" signature="__import__(name, globals={}, locals={}, fromlist=[], level=0)" />
      <import module="_bootstrap" />
      <import module="_io" />
      <import module="_os" />
      <import module="_warnings" />
      <import module="errno" />
      <import module="imp" />
      <scope doc="Import a module." ilk="function" line="108" lineend="124" name="import_module" returns="_bootstrap._gcd_import()" signature="import_module(name, package=None)">
        <variable citdl="int" line="116" name="level" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="package" />
      </scope>
      <import module="machinery" />
      <import module="marshal" />
      <import module="os" />
      <import module="re" />
      <variable citdl="str" name="sep" />
      <import module="sys" />
      <import module="tokenize" />
      <import module="util" />
      <scope attributes="protected __hidden__" doc="Convert a 32-bit integer to little-endian." ilk="function" line="44" lineend="56" name="_w_long" returns="bytearray()" signature="_w_long(x)">
        <variable citdl="int()" ilk="argument" name="x" />
        <variable citdl="list" line="51" name="int_bytes" />
      </scope>
      <scope attributes="protected __hidden__" doc="Check if the directory contains something matching &apos;check&apos;." ilk="function" line="31" lineend="41" name="_case_ok" returns="bool" signature="_case_ok(directory, check)">
        <variable ilk="argument" name="directory" />
        <variable ilk="argument" name="check" />
      </scope>
      <scope attributes="protected __hidden__" doc="Convert 4 bytes in little-endian to an integer." ilk="function" line="59" lineend="69" name="_r_long" signature="_r_long(int_bytes)">
        <variable ilk="argument" name="int_bytes" />
        <variable line="65" name="x" />
      </scope>
    </scope>
    <scope doc="json speedups" ilk="blob" lang="Python3" name="_json">
      <scope doc="Return an ASCII-only JSON representation of a Python string" ilk="function" name="encode_basestring_ascii" signature="encode_basestring_ascii(basestring) -&gt; bytes" />
      <scope classrefs="object" doc="_iterencode(obj, _current_indent_level) -&gt; iterable" ilk="class" name="make_encoder" />
      <scope classrefs="object" doc="JSON scanner object" ilk="class" name="make_scanner" />
      <scope doc="Scan the string s for a JSON string." ilk="function" name="scanstring" signature="scanstring(basestring, end, strict=True) -&gt; (bytes, end)" />
    </scope>
    <scope doc="Implements the bdist_msi command." ilk="blob" lang="Python3" name="distutils.bdist_msi">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="object" ilk="class" name="Dialog" />
      <scope classrefs="object" ilk="class" name="Directory" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="object" ilk="class" name="Feature" />
      <scope classrefs="Dialog" doc="Dialog class with a fixed layout: controls at the top, then a ruler, then a list of buttons: back, next, cancel. Optionally a bitmap at the left." ilk="class" name="PyDialog" />
      <scope classrefs="Version" doc="Version numbering for anal retentives and software idealists. Implements the standard interface for version number classes as described above.  A version number consists of two or three" ilk="class" name="StrictVersion" />
      <scope ilk="function" name="add_data" signature="add_data(db, table, values)" />
      <scope classrefs="Command" ilk="class" name="bdist_msi" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <import module="msilib" />
      <import module="os" />
      <scope doc="Recursively remove an entire directory tree." ilk="function" name="remove_tree" signature="remove_tree(directory, verbose=1, dry_run=0)" />
      <import module="schema" />
      <import module="sequence" />
      <import module="sys" />
      <import module="text" />
    </scope>
    <scope doc="Fixer that changes buffer(...) into memoryview(...)." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_buffer">
      <scope classrefs="BaseFix" ilk="class" line="11" lineend="21" name="FixBuffer">
        <variable citdl="str" line="15" name="PATTERN" />
        <variable citdl="True" line="13" name="explicit" />
        <scope ilk="function" line="19" lineend="21" name="transform" signature="transform(node, results)">
          <variable citdl="FixBuffer" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="20" name="name" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="# ElementTree # $Id: ElementTree.py 2326 2005-03-17 07:45:21Z fredrik $ #" ilk="blob" lang="Python3" name="xml.etree.ElementTree">
      <scope ilk="function" line="459" lineend="462" name="Comment" returns="Element()" signature="Comment(text=None)">
        <variable ilk="argument" name="text" />
        <variable citdl="Element()" line="460" name="element" />
      </scope>
      <scope ilk="function" line="422" lineend="425" name="Element" returns="_ElementInterface" signature="Element(tag, attrib={}, **extra)">
        <variable citdl="dict" ilk="argument" name="attrib" />
        <variable ilk="argument" name="tag" />
        <variable attributes="kwargs" ilk="argument" name="extra" />
      </scope>
      <import module="ElementPath" />
      <scope classrefs="object" ilk="class" line="535" lineend="708" name="ElementTree">
        <scope ilk="function" line="650" lineend="659" name="write" signature="write(file, encoding=None)">
          <variable citdl="ElementTree" ilk="argument" name="self" />
          <variable citdl="open()" ilk="argument" name="file" />
          <variable ilk="argument" name="encoding" />
        </scope>
        <scope ilk="function" line="549" lineend="550" name="getroot" signature="getroot()">
          <variable citdl="ElementTree" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="593" lineend="595" name="getiterator" returns="self._root.getiterator()" signature="getiterator(tag=None)">
          <variable citdl="ElementTree" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="parser.close()" line="539" name="_root" />
        <scope ilk="function" line="623" lineend="627" name="findtext" returns="self._root.findtext()" signature="findtext(path, default=None)">
          <variable citdl="ElementTree" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="path" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope ilk="function" line="638" lineend="642" name="findall" returns="self._root.findall()" signature="findall(path)">
          <variable citdl="ElementTree" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="path" />
        </scope>
        <scope ilk="function" line="572" lineend="583" name="parse" returns="parser.close()" signature="parse(source, parser=None)">
          <variable citdl="ElementTree" ilk="argument" name="self" />
          <variable citdl="open()" ilk="argument" name="source" />
          <variable citdl="XMLTreeBuilder()" ilk="argument" name="parser" />
          <variable citdl="source.read()" line="578" name="data" />
        </scope>
        <scope attributes="protected" ilk="function" line="559" lineend="561" name="_setroot" signature="_setroot(element)">
          <variable citdl="ElementTree" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
        </scope>
        <scope attributes="protected" ilk="function" line="661" lineend="708" name="_write" signature="_write(file, node, encoding, namespaces)">
          <variable citdl="ElementTree" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="namespaces" />
          <variable citdl="node.tag" line="663" name="tag" />
          <variable citdl="list()" line="669" name="items" />
          <variable citdl="list" line="670" name="xmlns_items" />
        </scope>
        <scope ilk="function" line="605" lineend="609" name="find" returns="self._root.find()" signature="find(path)">
          <variable citdl="ElementTree" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="path" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="537" lineend="541" name="__init__" signature="ElementTree(element=None, file=None)">
          <variable citdl="ElementTree" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
          <variable ilk="argument" name="file" />
        </scope>
      </scope>
      <scope ilk="function" line="480" name="PI" signature="PI(target, text=None)" />
      <scope ilk="function" line="473" lineend="478" name="ProcessingInstruction" returns="Element()" signature="ProcessingInstruction(target, text=None)">
        <variable ilk="argument" name="text" />
        <variable ilk="argument" name="target" />
        <variable citdl="Element()" line="474" name="element" />
      </scope>
      <scope classrefs="object" ilk="class" line="492" lineend="524" name="QName">
        <scope ilk="function" line="521" lineend="524" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="QName" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="496" name="text" />
        <scope ilk="function" line="497" lineend="498" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="QName" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="501" lineend="504" name="__le__" returns="bool" signature="__le__(other)">
          <variable citdl="QName" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="509" lineend="512" name="__ge__" returns="bool" signature="__ge__(other)">
          <variable citdl="QName" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="513" lineend="516" name="__gt__" returns="bool" signature="__gt__(other)">
          <variable citdl="QName" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="499" lineend="500" name="__hash__" returns="hash()" signature="__hash__()">
          <variable citdl="QName" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="505" lineend="508" name="__lt__" returns="bool" signature="__lt__(other)">
          <variable citdl="QName" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="517" lineend="520" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="QName" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="493" lineend="496" name="__init__" signature="QName(text_or_uri, tag=None)">
          <variable citdl="QName" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="text_or_uri" />
          <variable ilk="argument" name="tag" />
        </scope>
      </scope>
      <scope ilk="function" line="441" lineend="446" name="SubElement" returns="parent.makeelement()" signature="SubElement(parent, tag, attrib={}, **extra)">
        <variable citdl="parent.makeelement()" line="444" name="element" />
        <variable citdl="dict" ilk="argument" name="attrib" />
        <variable ilk="argument" name="tag" />
        <variable ilk="argument" name="parent" />
        <variable attributes="kwargs" ilk="argument" name="extra" />
      </scope>
      <scope classrefs="object" ilk="class" line="1011" lineend="1086" name="TreeBuilder">
        <scope ilk="function" line="1079" lineend="1086" name="end" returns="_factory()" signature="end(tag)">
          <variable citdl="TreeBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
        </scope>
        <scope ilk="function" line="1063" lineend="1070" name="start" returns="elem" signature="start(tag, attrs)">
          <variable citdl="TreeBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <scope ilk="function" line="1052" lineend="1053" name="data" signature="data(data)">
          <variable citdl="TreeBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_ElementInterface" line="1020" name="_factory" />
        <scope attributes="protected" ilk="function" line="1034" lineend="1044" name="_flush" signature="_flush()">
          <variable citdl="TreeBuilder" ilk="argument" name="self" />
          <variable citdl="str.join()" line="1037" name="text" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="1015" name="_elem" />
        <scope attributes="__ctor__" ilk="function" line="1013" lineend="1020" name="__init__" signature="TreeBuilder(element_factory=None)">
          <variable citdl="TreeBuilder" ilk="argument" name="self" />
          <variable citdl="_ElementInterface" ilk="argument" name="element_factory" />
        </scope>
        <scope ilk="function" line="1029" lineend="1032" name="close" signature="close()">
          <variable citdl="TreeBuilder" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="1014" name="_data" />
        <variable attributes="protected __instancevar__" citdl="int" line="1017" name="_tail" />
        <variable attributes="protected __instancevar__" citdl="_factory()" line="1016" name="_last" />
      </scope>
      <variable citdl="str" line="119" name="VERSION" />
      <scope ilk="function" line="945" lineend="948" name="XML" returns="parser.close()" signature="XML(text)">
        <variable ilk="argument" name="text" />
        <variable citdl="XMLTreeBuilder()" line="946" name="parser" />
      </scope>
      <scope ilk="function" line="958" lineend="967" name="XMLID" returns="tuple" signature="XMLID(text)">
        <variable ilk="argument" name="text" />
        <variable citdl="XMLTreeBuilder()" line="959" name="parser" />
        <variable citdl="parser.close()" line="961" name="tree" />
        <variable citdl="dict" line="962" name="ids" />
        <variable citdl="elem.get()" line="964" name="id" />
      </scope>
      <scope classrefs="object" ilk="class" line="1239" name="XMLParser" />
      <scope classrefs="object" ilk="class" line="1099" lineend="1236" name="XMLTreeBuilder">
        <scope ilk="function" line="1223" lineend="1224" name="feed" signature="feed(data)">
          <variable citdl="XMLTreeBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="expat.ParserCreate()" line="1108" name="_parser" />
        <scope attributes="protected" ilk="function" line="1154" lineend="1161" name="_start_list" returns="self._target.start()" signature="_start_list(tag, attrib_in)">
          <variable citdl="XMLTreeBuilder" ilk="argument" name="self" />
          <variable citdl="fixname()" ilk="argument" name="tag" />
          <variable ilk="argument" name="attrib_in" />
          <variable citdl="XMLTreeBuilder._fixname" line="1155" name="fixname" />
          <variable citdl="dict" line="1157" name="attrib" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="TreeBuilder" line="1111" name="_target" />
        <variable attributes="protected __instancevar__" citdl="dict" line="1112" name="_names" />
        <scope ilk="function" line="1215" lineend="1216" name="doctype" signature="doctype(name, pubid, system)">
          <variable citdl="XMLTreeBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="pubid" />
          <variable ilk="argument" name="system" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="1133" name="entity" />
        <scope attributes="protected" ilk="function" line="1166" lineend="1167" name="_end" returns="self._target.end()" signature="_end(tag)">
          <variable citdl="XMLTreeBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
        </scope>
        <scope ilk="function" line="1232" lineend="1236" name="close" returns="self._target.close()" signature="close()">
          <variable citdl="XMLTreeBuilder" ilk="argument" name="self" />
          <variable citdl="self._target.close()" line="1234" name="tree" />
        </scope>
        <scope attributes="protected" ilk="function" line="1135" lineend="1144" name="_fixname" returns="str" signature="_fixname(key)">
          <variable citdl="XMLTreeBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="str" line="1138" name="name" />
        </scope>
        <scope attributes="protected" ilk="function" line="1163" lineend="1164" name="_data" returns="self._target.data()" signature="_data(text)">
          <variable citdl="XMLTreeBuilder" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
        </scope>
        <scope attributes="protected" ilk="function" line="1146" lineend="1152" name="_start" returns="self._target.start()" signature="_start(tag, attrib_in)">
          <variable citdl="XMLTreeBuilder" ilk="argument" name="self" />
          <variable citdl="fixname()" ilk="argument" name="tag" />
          <variable ilk="argument" name="attrib_in" />
          <variable citdl="XMLTreeBuilder._fixname" line="1147" name="fixname" />
          <variable citdl="dict" line="1149" name="attrib" />
        </scope>
        <scope attributes="protected" ilk="function" line="1169" lineend="1206" name="_default" signature="_default(text)">
          <import line="1176" module="xml.parsers" symbol="expat" />
          <variable citdl="XMLTreeBuilder" ilk="argument" name="self" />
          <variable citdl="text.strip()" ilk="argument" name="text" />
          <variable citdl="list" line="1170" name="prefix" />
          <variable citdl="len()" line="1193" name="n" />
          <variable line="1195" name="type" />
          <variable citdl="list" line="1200" name="pubid" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1101" lineend="1133" name="__init__" signature="XMLTreeBuilder(html=0, target=None)">
          <import line="1103" module="xml.parsers" symbol="expat" />
          <variable citdl="XMLTreeBuilder" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="html" />
          <variable citdl="TreeBuilder" ilk="argument" name="target" />
          <variable citdl="str" line="1130" name="encoding" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="1132" name="_doctype" />
      </scope>
      <variable citdl="list" line="73" name="__all__" />
      <scope ilk="function" line="734" lineend="741" name="dump" signature="dump(elem)">
        <variable line="739" name="tail" />
        <variable citdl="ElementTree" ilk="argument" name="elem" />
      </scope>
      <scope ilk="function" line="816" lineend="834" name="fixtag" returns="tuple" signature="fixtag(tag, namespaces)">
        <variable citdl="namespaces.get()" line="822" name="prefix" />
        <variable citdl="tag.text" ilk="argument" name="tag" />
        <variable ilk="argument" name="namespaces" />
        <variable citdl="tuple" line="829" name="xmlns" />
      </scope>
      <scope ilk="function" line="977" name="fromstring" signature="fromstring(text)" />
      <scope ilk="function" line="720" lineend="723" name="iselement" returns="isinstance()" signature="iselement(element)">
        <variable ilk="argument" name="element" />
      </scope>
      <scope classrefs="object" ilk="class" line="858" lineend="935" name="iterparse">
        <variable attributes="protected __instancevar__" citdl="XMLTreeBuilder()" line="867" name="_parser" />
        <scope ilk="function" line="934" lineend="935" name="__getitem__" returns="iterparse.__next__()" signature="__getitem__(index)">
          <variable citdl="iterparse" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="865" name="_index" />
        <variable attributes="protected __instancevar__" citdl="self._parser.close()" line="923" name="_root" />
        <scope ilk="function" line="905" lineend="927" name="__next__" signature="__next__()">
          <variable citdl="iterparse" ilk="argument" name="self" />
          <variable line="908" name="item" />
          <variable citdl="self._file.read()" line="919" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="open()" line="863" name="_file" />
        <scope ilk="function" line="931" lineend="932" name="__iter__" returns="iterparse" signature="__iter__()">
          <variable citdl="iterparse" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="864" name="_events" />
        <variable attributes="__instancevar__" citdl="self._root" line="866" name="root" />
        <scope attributes="__ctor__" ilk="function" line="860" lineend="903" name="__init__" signature="iterparse(source, events=None)">
          <variable citdl="iterparse" ilk="argument" name="self" />
          <variable citdl="open()" ilk="argument" name="source" />
          <variable citdl="list" ilk="argument" name="events" />
          <variable citdl="self._parser._parser" line="869" name="parser" />
          <variable citdl="self._events.append" line="870" name="append" />
          <scope ilk="function" line="901" lineend="902" name="handler" signature="handler(prefix, event=event, append=append)">
            <variable ilk="argument" name="prefix" />
            <variable citdl="event" ilk="argument" name="event" />
            <variable citdl="self._events.append" ilk="argument" name="append" />
          </scope>
        </scope>
      </scope>
      <scope ilk="function" line="844" lineend="847" name="parse" returns="ElementTree" signature="parse(source, parser=None)">
        <variable ilk="argument" name="source" />
        <variable ilk="argument" name="parser" />
        <variable citdl="ElementTree" line="845" name="tree" />
      </scope>
      <import module="re" />
      <import module="sys" />
      <scope ilk="function" line="988" lineend="998" name="tostring" returns="str.join()" signature="tostring(element, encoding=None)">
        <scope ilk="class" line="989" lineend="990" name="dummy" />
        <variable ilk="argument" name="encoding" />
        <variable citdl="list" line="991" name="data" />
        <variable citdl="dummy" line="992" name="file" />
        <variable ilk="argument" name="element" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="766" lineend="768" name="_raise_serialization_error" signature="_raise_serialization_error(text)">
        <variable ilk="argument" name="text" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="804" lineend="814" name="_escape_attrib" returns="text.replace()" signature="_escape_attrib(text)">
        <variable citdl="text.replace()" ilk="argument" name="text" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="758" name="_namespace_map" />
      <scope attributes="protected __hidden__" ilk="function" line="771" lineend="785" name="_encode_entity" returns="_encode()" signature="_encode_entity(text, pattern=_escape)">
        <variable ilk="argument" name="text" />
        <variable citdl="re.compile()" ilk="argument" name="pattern" />
        <scope ilk="function" line="773" lineend="781" name="escape_entities" returns="str.join()" signature="escape_entities(m, map=_escape_map)">
          <variable ilk="argument" name="m" />
          <variable citdl="dict" ilk="argument" name="map" />
          <variable citdl="list" line="774" name="out" />
          <variable citdl="out.append" line="775" name="append" />
          <variable citdl="ord()" line="777" name="text" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="751" name="_escape_map" />
      <scope attributes="protected __hidden__" ilk="class" line="134" lineend="402" name="_ElementInterface">
        <variable line="140" name="tag" />
        <variable line="150" name="attrib" />
        <variable line="156" name="text" />
        <variable line="163" name="tail" />
        <scope attributes="__ctor__" ilk="function" line="165" lineend="168" name="__init__" signature="_ElementInterface(tag, attrib)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable ilk="argument" name="attrib" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="168" name="_children" />
        <scope ilk="function" line="170" lineend="171" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="180" lineend="181" name="makeelement" returns="Element()" signature="makeelement(tag, attrib)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable ilk="argument" name="attrib" />
        </scope>
        <scope ilk="function" line="188" lineend="189" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="198" lineend="199" name="__getitem__" signature="__getitem__(index)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="209" lineend="211" name="__setitem__" signature="__setitem__(index, element)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="element" />
        </scope>
        <scope ilk="function" line="219" lineend="220" name="__delitem__" signature="__delitem__(index)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="229" lineend="230" name="__getslice__" returns="list" signature="__getslice__(start, stop)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="stop" />
        </scope>
        <scope ilk="function" line="240" lineend="243" name="__setslice__" signature="__setslice__(start, stop, elements)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="stop" />
          <variable ilk="argument" name="elements" />
        </scope>
        <scope ilk="function" line="251" lineend="252" name="__delslice__" signature="__delslice__(start, stop)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="stop" />
        </scope>
        <scope ilk="function" line="260" lineend="262" name="append" signature="append(element)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
        </scope>
        <scope ilk="function" line="270" lineend="272" name="insert" signature="insert(index, element)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="element" />
        </scope>
        <scope ilk="function" line="283" lineend="285" name="remove" signature="remove(element)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
        </scope>
        <scope ilk="function" line="294" lineend="295" name="getchildren" returns="list" signature="getchildren()">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="304" lineend="305" name="find" returns="ElementPath.find()" signature="find(path)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
        </scope>
        <scope ilk="function" line="318" lineend="319" name="findtext" returns="ElementPath.findtext()" signature="findtext(path, default=None)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope ilk="function" line="329" lineend="330" name="findall" returns="ElementPath.findall()" signature="findall(path)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
        </scope>
        <scope ilk="function" line="336" lineend="339" name="clear" signature="clear()">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="350" lineend="351" name="get" returns="self.attrib.get()" signature="get(key, default=None)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope ilk="function" line="359" lineend="360" name="set" signature="set(key, value)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="369" lineend="370" name="keys" returns="self.attrib.keys()" signature="keys()">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="379" lineend="380" name="items" returns="self.attrib.items()" signature="items()">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="394" lineend="402" name="getiterator" returns="list" signature="getiterator(tag=None)">
          <variable citdl="_ElementInterface" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable citdl="list" line="395" name="nodes" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="_ElementInterface" line="405" name="_Element" />
      <scope attributes="protected __hidden__" ilk="function" line="743" lineend="747" name="_encode" returns="s.encode()" signature="_encode(s, encoding)">
        <variable ilk="argument" name="s" />
        <variable ilk="argument" name="encoding" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="749" name="_escape" />
      <scope attributes="protected __hidden__" ilk="function" line="791" lineend="802" name="_encode_cdata" returns="text.encode()" signature="_encode_cdata(text, encoding)">
        <variable citdl="text.replace()" ilk="argument" name="text" />
        <variable ilk="argument" name="encoding" />
      </scope>
    </scope>
    <scope doc="SMTP/ESMTP client class.  This should follow RFC 821 (SMTP), RFC 1869 (ESMTP), RFC 2554 (SMTP" ilk="blob" lang="Python3" name="smtplib">
      <variable citdl="str" line="59" name="CRLF" />
      <scope classrefs="SMTP" doc="LMTP - Local Mail Transfer Protocol  The LMTP protocol, which is very similar to ESMTP, is heavily based" ilk="class" line="774" lineend="810" name="LMTP">
        <variable citdl="str" line="787" name="ehlo_msg" />
        <variable attributes="__instancevar__" citdl="socket.socket()" line="800" name="sock" />
        <scope doc="Connect to the LMTP daemon, on either a Unix or a TCP socket." ilk="function" line="793" lineend="810" name="connect" returns="SMTP.connect()" signature="connect(host=&apos;localhost&apos;, port=0)">
          <variable citdl="LMTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize a new instance." ilk="function" line="789" lineend="791" name="__init__" signature="LMTP(host=&apos;&apos;, port=LMTP_PORT, local_hostname=None)">
          <variable citdl="LMTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable ilk="argument" name="local_hostname" />
        </scope>
      </scope>
      <variable citdl="int" line="772" name="LMTP_PORT" />
      <variable citdl="SRE_Pattern" line="61" name="OLDSTYLE_AUTH" />
      <scope classrefs="object" doc="This class manages a connection to an SMTP or ESMTP server. SMTP Objects:     SMTP objects have the following attributes:" ilk="class" line="187" lineend="740" name="SMTP">
        <scope doc="SMTP &apos;ehlo&apos; command." ilk="function" line="381" lineend="430" name="ehlo" returns="tuple" signature="ehlo(name=&apos;&apos;)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="name" />
          <variable line="401" name="resp" />
          <variable citdl="OLDSTYLE_AUTH.match()" line="410" name="auth_match" />
          <variable citdl="re.match()" line="421" name="m" />
          <variable line="423" name="feature" />
          <variable line="424" name="params" />
        </scope>
        <variable citdl="str" line="219" name="ehlo_msg" />
        <variable citdl="msg" line="220" name="ehlo_resp" />
        <scope doc="SMTP &apos;help&apos; command." ilk="function" line="436" lineend="440" name="help" signature="help(args=&apos;&apos;)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="args" />
        </scope>
        <scope doc="Puts the connection to the SMTP server into TLS mode." ilk="function" line="600" lineend="634" name="starttls" returns="tuple" signature="starttls(keyfile=None, certfile=None)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="keyfile" />
          <variable ilk="argument" name="certfile" />
        </scope>
        <scope doc="Set the debug output level." ilk="function" line="260" lineend="267" name="set_debuglevel" signature="set_debuglevel(debuglevel)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="debuglevel" />
        </scope>
        <scope doc="SMTP &apos;rset&apos; command -- resets session." ilk="function" line="442" lineend="444" name="rset" returns="SMTP.docmd()" signature="rset()">
          <variable citdl="SMTP" ilk="argument" name="self" />
        </scope>
        <variable citdl="SSLFakeFile" line="217" name="file" />
        <scope doc="Close the connection to the SMTP server." ilk="function" line="726" lineend="733" name="close" signature="close()">
          <variable citdl="SMTP" ilk="argument" name="self" />
        </scope>
        <scope doc="SMTP &apos;helo&apos; command." ilk="function" line="371" lineend="379" name="helo" returns="tuple" signature="helo(name=&apos;&apos;)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="name" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize a new instance." ilk="function" line="223" lineend="258" name="__init__" signature="SMTP(host=&apos;&apos;, port=0, local_hostname=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable ilk="argument" name="local_hostname" />
          <variable citdl="socket._GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
          <variable citdl="socket.getfqdn()" line="248" name="fqdn" />
          <variable citdl="socket.gethostbyname()" line="253" name="addr" />
        </scope>
        <scope doc="Terminate the SMTP session." ilk="function" line="736" lineend="740" name="quit" returns="docmd()" signature="quit()">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable citdl="docmd()" line="738" name="res" />
        </scope>
        <scope doc="SMTP &apos;verify&apos; command -- checks for address validity." ilk="function" line="489" lineend="492" name="verify" returns="SMTP.getreply()" signature="verify(address)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="address" />
        </scope>
        <variable attributes="__instancevar__" citdl="ssl.wrap_socket()" line="295" name="sock" />
        <scope doc="Send `s&apos; to the server." ilk="function" line="300" lineend="312" name="send" signature="send(s)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable citdl="s.encode()" ilk="argument" name="s" />
        </scope>
        <scope doc="Get a reply from the server." ilk="function" line="322" lineend="363" name="getreply" returns="tuple" signature="getreply()">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable citdl="list" line="335" name="resp" />
          <variable citdl="str" line="340" name="line" />
          <variable citdl="list" line="348" name="code" />
          <variable citdl="int" line="352" name="errcode" />
          <variable citdl="str.join()" line="360" name="errmsg" />
        </scope>
        <scope doc="SMTP &apos;noop&apos; command -- doesn&apos;t do anything :&gt;" ilk="function" line="446" lineend="448" name="noop" returns="SMTP.docmd()" signature="noop()">
          <variable citdl="SMTP" ilk="argument" name="self" />
        </scope>
        <variable citdl="int" line="216" name="debuglevel" />
        <scope doc="SMTP &apos;mail&apos; command -- begins mail xfer session." ilk="function" line="450" lineend="456" name="mail" returns="SMTP.getreply()" signature="mail(sender, options=[])">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="sender" />
          <variable citdl="list" ilk="argument" name="options" />
          <variable citdl="str" line="452" name="optionlist" />
        </scope>
        <scope doc="SMTP &apos;rcpt&apos; command -- indicates 1 recipient for this mail." ilk="function" line="458" lineend="464" name="rcpt" returns="SMTP.getreply()" signature="rcpt(recip, options=[])">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="recip" />
          <variable citdl="list" ilk="argument" name="options" />
          <variable citdl="str" line="460" name="optionlist" />
        </scope>
        <variable citdl="msg" line="218" name="helo_resp" />
        <scope doc="This command performs an entire mail transaction." ilk="function" line="636" lineend="723" name="sendmail" returns="dict" signature="sendmail(from_addr, to_addrs, msg, mail_options=[], rcpt_options=[])">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="from_addr" />
          <variable citdl="list" ilk="argument" name="to_addrs" />
          <variable ilk="argument" name="msg" />
          <variable citdl="list" ilk="argument" name="mail_options" />
          <variable citdl="list" ilk="argument" name="rcpt_options" />
          <variable citdl="list" line="694" name="esmtp_opts" />
          <variable citdl="dict" line="707" name="senderrs" />
        </scope>
        <scope attributes="protected" ilk="function" line="269" lineend="273" name="_get_socket" returns="socket.create_connection()" signature="_get_socket(host, port, timeout)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="243" name="local_hostname" />
        <scope doc="Send a command to the server." ilk="function" line="314" lineend="320" name="putcmd" signature="putcmd(cmd, args=&apos;&apos;)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable citdl="str" ilk="argument" name="args" />
          <variable citdl="str" line="317" name="str" />
        </scope>
        <scope doc="Send a command, and return its response code." ilk="function" line="365" lineend="368" name="docmd" returns="SMTP.getreply()" signature="docmd(cmd, args=&apos;&apos;)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable citdl="str" ilk="argument" name="args" />
        </scope>
        <scope doc="SMTP &apos;DATA&apos; command -- sends message data to server." ilk="function" line="466" lineend="487" name="data" returns="tuple" signature="data(msg)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="str" line="480" name="q" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="236" name="esmtp_features" />
        <variable citdl="int" line="221" name="does_esmtp" />
        <scope doc="Call self.ehlo() and/or self.helo() if needed." ilk="function" line="503" lineend="518" name="ehlo_or_helo_if_needed" signature="ehlo_or_helo_if_needed()">
          <variable citdl="SMTP" ilk="argument" name="self" />
        </scope>
        <scope doc="Does the server support a given SMTP service extension?" ilk="function" line="432" lineend="434" name="has_extn" returns="bool" signature="has_extn(opt)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="opt" />
        </scope>
        <scope doc="SMTP &apos;expn&apos; command -- expands a mailing list." ilk="function" line="496" lineend="499" name="expn" returns="SMTP.getreply()" signature="expn(address)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="address" />
        </scope>
        <variable attributes="__instancevar__" citdl="socket._GLOBAL_DEFAULT_TIMEOUT" line="235" name="timeout" />
        <variable attributes="__instancevar__" citdl="int" line="237" name="default_port" />
        <scope doc="Log in on an SMTP server that requires authentication." ilk="function" line="520" lineend="598" name="login" returns="tuple" signature="login(user, password)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable ilk="argument" name="user" />
          <variable ilk="argument" name="password" />
          <scope ilk="function" line="542" lineend="546" name="encode_cram_md5" returns="encode_base64()" signature="encode_cram_md5(challenge, user, password)">
            <variable citdl="base64.decodebytes()" ilk="argument" name="challenge" />
            <variable ilk="argument" name="user" />
            <variable ilk="argument" name="password" />
            <variable citdl="str" line="544" name="response" />
          </scope>
          <scope ilk="function" line="548" lineend="550" name="encode_plain" returns="encode_base64()" signature="encode_plain(user, password)">
            <variable ilk="argument" name="user" />
            <variable ilk="argument" name="password" />
            <variable citdl="str" line="549" name="s" />
          </scope>
          <variable citdl="str" line="553" name="AUTH_PLAIN" />
          <variable citdl="str" line="554" name="AUTH_CRAM_MD5" />
          <variable citdl="str" line="555" name="AUTH_LOGIN" />
          <variable line="563" name="authlist" />
          <variable citdl="list" line="568" name="preferred_auths" />
          <variable citdl="method" line="571" name="authmethod" />
        </scope>
        <variable citdl="SMTP.verify" line="494" name="vrfy" />
        <scope doc="Connect to a host on a given port." ilk="function" line="275" lineend="298" name="connect" returns="tuple" signature="connect(host=&apos;localhost&apos;, port=0)">
          <variable citdl="SMTP" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable citdl="host.rfind()" line="287" name="i" />
        </scope>
      </scope>
      <scope classrefs="SMTPResponseException" doc="Authentication error.  Most probably the server didn&apos;t accept the username/password" ilk="class" line="124" name="SMTPAuthenticationError" />
      <scope classrefs="SMTPResponseException" doc="Error during connection establishment." ilk="class" line="118" name="SMTPConnectError" />
      <scope classrefs="SMTPResponseException" doc="The SMTP server didn&apos;t accept the data." ilk="class" line="115" name="SMTPDataError" />
      <scope classrefs="Exception" doc="Base class for all exceptions raised by this module." ilk="class" line="64" name="SMTPException" />
      <scope classrefs="SMTPResponseException" doc="The server refused our HELO reply." ilk="class" line="121" name="SMTPHeloError" />
      <scope classrefs="SMTPException" doc="All recipient addresses refused.  The errors for each recipient are accessible through the attribute" ilk="class" line="102" lineend="112" name="SMTPRecipientsRefused">
        <variable attributes="__instancevar__" citdl="tuple" line="112" name="args" />
        <variable attributes="__instancevar__" line="111" name="recipients" />
        <scope attributes="__ctor__" ilk="function" line="110" lineend="112" name="__init__" signature="SMTPRecipientsRefused(recipients)">
          <variable citdl="SMTPRecipientsRefused" ilk="argument" name="self" />
          <variable ilk="argument" name="recipients" />
        </scope>
      </scope>
      <scope classrefs="SMTPException" doc="Base class for all exceptions that include an SMTP error code.  These exceptions are generated in some instances when the SMTP" ilk="class" line="75" lineend="87" name="SMTPResponseException">
        <variable attributes="__instancevar__" line="86" name="smtp_error" />
        <variable attributes="__instancevar__" citdl="tuple" line="87" name="args" />
        <variable attributes="__instancevar__" line="85" name="smtp_code" />
        <scope attributes="__ctor__" ilk="function" line="84" lineend="87" name="__init__" signature="SMTPResponseException(code, msg)">
          <variable citdl="SMTPResponseException" ilk="argument" name="self" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="msg" />
        </scope>
      </scope>
      <scope classrefs="SMTPResponseException" doc="Sender address refused.  In addition to the attributes set by on all SMTPResponseException" ilk="class" line="89" lineend="100" name="SMTPSenderRefused">
        <variable attributes="__instancevar__" line="98" name="smtp_error" />
        <variable attributes="__instancevar__" citdl="tuple" line="100" name="args" />
        <variable attributes="__instancevar__" line="97" name="smtp_code" />
        <scope attributes="__ctor__" ilk="function" line="96" lineend="100" name="__init__" signature="SMTPSenderRefused(code, msg, sender)">
          <variable citdl="SMTPSenderRefused" ilk="argument" name="self" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="sender" />
        </scope>
        <variable attributes="__instancevar__" line="99" name="sender" />
      </scope>
      <scope classrefs="SMTPException" doc="Not connected to any SMTP server.  This exception is raised when the server unexpectedly disconnects," ilk="class" line="67" name="SMTPServerDisconnected" />
      <variable citdl="int" line="57" name="SMTP_PORT" />
      <scope classrefs="SMTP" doc="This is a subclass derived from SMTP that connects over an SSL encrypted socket (to use this class you need a socket module that was compiled with SSL support). If host is not specified, &apos;&apos; (the local host) is used. If port is" ilk="class" line="744" lineend="765" name="SMTP_SSL">
        <variable attributes="__instancevar__" line="756" name="certfile" />
        <scope attributes="protected" ilk="function" line="760" lineend="765" name="_get_socket" returns="socket.create_connection()" signature="_get_socket(host, port, timeout)">
          <variable citdl="SMTP_SSL" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="socket.create_connection()" line="762" name="new_socket" />
        </scope>
        <variable attributes="__instancevar__" citdl="SSLFakeFile" line="764" name="file" />
        <variable attributes="__instancevar__" citdl="int" line="758" name="default_port" />
        <variable attributes="__instancevar__" line="755" name="keyfile" />
        <scope attributes="__ctor__" ilk="function" line="752" lineend="758" name="__init__" signature="SMTP_SSL(host=&apos;&apos;, port=0, local_hostname=None, keyfile=None, certfile=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT)">
          <variable citdl="SMTP_SSL" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable ilk="argument" name="local_hostname" />
          <variable ilk="argument" name="keyfile" />
          <variable ilk="argument" name="certfile" />
          <variable citdl="socket._GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
        </scope>
      </scope>
      <variable citdl="int" line="58" name="SMTP_SSL_PORT" />
      <scope classrefs="object" doc="A fake file like object that really wraps a SSLObject.  It only supports what is needed in smtplib." ilk="class" line="164" lineend="182" name="SSLFakeFile">
        <scope ilk="function" line="181" lineend="182" name="close" signature="close()">
          <variable citdl="SSLFakeFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="172" lineend="179" name="readline" returns="str" signature="readline()">
          <variable citdl="SSLFakeFile" ilk="argument" name="self" />
          <variable citdl="str" line="173" name="str" />
          <variable citdl="self.sslobj.read()" line="174" name="chr" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="169" lineend="170" name="__init__" signature="SSLFakeFile(sslobj)">
          <variable citdl="SSLFakeFile" ilk="argument" name="self" />
          <variable ilk="argument" name="sslobj" />
        </scope>
        <variable attributes="__instancevar__" line="170" name="sslobj" />
      </scope>
      <variable citdl="list" line="52" name="__all__" />
      <import module="base64" />
      <import module="email" />
      <scope doc="Encode a string with base64." ilk="function" name="encode_base64" signature="encode_base64(s, maxlinelen=76, eol=&apos;\n&apos;)" />
      <import module="hmac" />
      <scope doc="Quote a subset of the email addresses defined by RFC 821." ilk="function" line="131" lineend="148" name="quoteaddr" returns="tuple" signature="quoteaddr(addr)">
        <variable citdl="tuple" line="136" name="m" />
        <variable ilk="argument" name="addr" />
      </scope>
      <scope doc="Quote data for email." ilk="function" line="150" lineend="157" name="quotedata" returns="re.sub()" signature="quotedata(data)">
        <variable ilk="argument" name="data" />
      </scope>
      <import module="re" />
      <import module="socket" />
      <import module="ssl" />
      <variable citdl="TextIOWrapper" name="stderr" />
      <variable attributes="__hidden__" line="823" name="toaddrs" />
      <scope attributes="__hidden__" ilk="function" line="818" lineend="820" name="prompt" signature="prompt(prompt)">
        <variable ilk="argument" name="prompt" />
      </scope>
      <variable attributes="__hidden__" citdl="prompt()" line="822" name="fromaddr" />
      <variable attributes="__hidden__" citdl="SMTP" line="833" name="server" />
      <variable attributes="protected __hidden__" citdl="True" line="162" name="_have_ssl" />
      <variable attributes="__hidden__" citdl="str" line="825" name="msg" />
      <variable attributes="__hidden__" citdl="sys.stdin.readline()" line="827" name="line" />
    </scope>
    <scope doc="distutils.command.config  Implements the Distutils &apos;config&apos; command, a (mostly) empty command class" ilk="blob" lang="Python3" name="distutils.command.config">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <variable citdl="dict" line="21" name="LANG_EXT" />
      <variable citdl="str" line="12" name="__revision__" />
      <scope classrefs="Command" ilk="class" line="23" lineend="333" name="config">
        <scope doc="Try to compile a source file built from &apos;body&apos; and &apos;headers&apos;." ilk="function" line="222" lineend="236" name="try_compile" returns="bool" signature="try_compile(body, headers=None, include_dirs=None, lang=&apos;c&apos;)">
          <import line="226" module="distutils.ccompiler" symbol="CompileError" />
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="body" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="include_dirs" />
          <variable citdl="str" ilk="argument" name="lang" />
          <variable citdl="False" line="230" name="ok" />
        </scope>
        <variable attributes="__instancevar__" line="55" name="cc" />
        <variable attributes="__instancevar__" citdl="int" line="62" name="dump_source" />
        <scope doc="Try to compile, link to an executable, and run a program built from &apos;body&apos; and &apos;headers&apos;." ilk="function" line="257" lineend="275" name="try_run" returns="bool" signature="try_run(body, headers=None, include_dirs=None, libraries=None, library_dirs=None, lang=&apos;c&apos;)">
          <import line="263" module="distutils.ccompiler" symbol="CompileError" />
          <import line="263" module="distutils.ccompiler" symbol="LinkError" />
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="body" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable citdl="str" ilk="argument" name="lang" />
          <variable citdl="True" line="269" name="ok" />
        </scope>
        <scope attributes="protected" ilk="function" line="122" lineend="127" name="_preprocess" returns="tuple" signature="_preprocess(body, headers, include_dirs, lang)">
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="body" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="lang" />
          <variable citdl="_gen_temp_sourcefile()" line="123" name="src" />
          <variable citdl="str" line="124" name="out" />
        </scope>
        <scope doc="Determine if the system header file named by &apos;header_file&apos; exists and can be found by the preprocessor; return true if so, false otherwise." ilk="function" line="326" lineend="333" name="check_header" returns="config.try_cpp()" signature="check_header(header, include_dirs=None, library_dirs=None, lang=&apos;c&apos;)">
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="header" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="library_dirs" />
          <variable citdl="str" ilk="argument" name="lang" />
        </scope>
        <scope doc="Construct a source file (just like &apos;try_cpp()&apos;), run it through the preprocessor, and return true if any line of the output matches &apos;pattern&apos;." ilk="function" line="193" lineend="220" name="search_cpp" returns="bool" signature="search_cpp(pattern, body=None, headers=None, include_dirs=None, lang=&apos;c&apos;)">
          <variable citdl="config" ilk="argument" name="self" />
          <variable citdl="re.compile()" ilk="argument" name="pattern" />
          <variable ilk="argument" name="body" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="include_dirs" />
          <variable citdl="str" ilk="argument" name="lang" />
          <variable citdl="open()" line="208" name="file" />
          <variable citdl="True" line="209" name="match" />
          <variable citdl="file.readline()" line="211" name="line" />
        </scope>
        <variable citdl="list" line="27" name="user_options" />
        <scope doc="Try to compile and link a source file, built from &apos;body&apos; and &apos;headers&apos;, to executable form." ilk="function" line="238" lineend="255" name="try_link" returns="bool" signature="try_link(body, headers=None, include_dirs=None, libraries=None, library_dirs=None, lang=&apos;c&apos;)">
          <import line="244" module="distutils.ccompiler" symbol="CompileError" />
          <import line="244" module="distutils.ccompiler" symbol="LinkError" />
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="body" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable citdl="str" ilk="argument" name="lang" />
          <variable citdl="True" line="249" name="ok" />
        </scope>
        <scope ilk="function" line="53" lineend="66" name="initialize_options" signature="initialize_options()">
          <variable citdl="config" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="138" lineend="151" name="_link" returns="tuple" signature="_link(body, headers, include_dirs, libraries, library_dirs, lang)">
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="body" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="lang" />
          <variable citdl="self.compiler.exe_extension" line="141" name="prog" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="57" name="libraries" />
        <scope attributes="protected" doc="Check that &apos;self.compiler&apos; really is a CCompiler object; if not, make it one." ilk="function" line="91" lineend="107" name="_check_compiler" signature="_check_compiler()">
          <import line="97" module="distutils.ccompiler" symbol="CCompiler" />
          <import line="97" module="distutils.ccompiler" symbol="new_compiler" />
          <variable citdl="config" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="129" lineend="136" name="_compile" returns="tuple" signature="_compile(body, headers, include_dirs, lang)">
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="body" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="lang" />
          <variable citdl="_gen_temp_sourcefile()" line="130" name="src" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="61" name="noisy" />
        <variable attributes="__instancevar__" citdl="list" line="56" name="include_dirs" />
        <scope ilk="function" line="84" lineend="85" name="run" signature="run()">
          <variable citdl="config" ilk="argument" name="self" />
        </scope>
        <variable citdl="str" line="25" name="description" />
        <scope doc="Determine if function &apos;func&apos; is available by constructing a source file that refers to &apos;func&apos;, and compiles and links it." ilk="function" line="282" lineend="310" name="check_func" returns="config.try_link()" signature="check_func(func, headers=None, include_dirs=None, libraries=None, library_dirs=None, decl=0, call=0)">
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable citdl="int" ilk="argument" name="decl" />
          <variable citdl="int" ilk="argument" name="call" />
          <variable citdl="list" line="298" name="body" />
        </scope>
        <scope attributes="protected" ilk="function" line="153" lineend="162" name="_clean" signature="_clean(*filenames)">
          <variable citdl="config" ilk="argument" name="self" />
          <variable attributes="varargs" citdl="list" ilk="argument" name="filenames" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="66" name="temp_files" />
        <scope doc="Determine if &apos;library&apos; is available to be linked against, without actually checking that any particular symbols are provided by it." ilk="function" line="312" lineend="324" name="check_lib" returns="config.try_link()" signature="check_lib(library, library_dirs=None, headers=None, include_dirs=None, other_libraries=[])">
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="library" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="include_dirs" />
          <variable citdl="list" ilk="argument" name="other_libraries" />
        </scope>
        <scope doc="Construct a source file from &apos;body&apos; (a string containing lines of C/C++ code) and &apos;headers&apos; (a list of header files to include) and run it through the preprocessor." ilk="function" line="175" lineend="191" name="try_cpp" returns="bool" signature="try_cpp(body=None, headers=None, include_dirs=None, lang=&apos;c&apos;)">
          <import line="182" module="distutils.ccompiler" symbol="CompileError" />
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="body" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="include_dirs" />
          <variable citdl="str" ilk="argument" name="lang" />
          <variable citdl="True" line="184" name="ok" />
        </scope>
        <variable attributes="__instancevar__" citdl="new_compiler()" line="54" name="compiler" />
        <scope ilk="function" line="68" lineend="82" name="finalize_options" signature="finalize_options()">
          <variable citdl="config" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="109" lineend="120" name="_gen_temp_sourcefile" returns="str" signature="_gen_temp_sourcefile(body, headers, lang)">
          <variable citdl="config" ilk="argument" name="self" />
          <variable ilk="argument" name="body" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="lang" />
          <variable citdl="str" line="110" name="filename" />
          <variable citdl="open()" line="111" name="file" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.library_dirs.split()" line="58" name="library_dirs" />
      </scope>
      <scope doc="Do any platform-specific customization of a CCompiler instance." ilk="function" name="customize_compiler" signature="customize_compiler(compiler)" />
      <scope doc="Dumps a file content into log.info." ilk="function" line="336" lineend="349" name="dump_file" signature="dump_file(filename, head=None)">
        <variable ilk="argument" name="head" />
        <variable citdl="open()" line="345" name="file" />
        <variable ilk="argument" name="filename" />
      </scope>
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
    </scope>
    <scope doc="Fixer for itertools.(imap|ifilter|izip) --&gt; (map|filter|zip) and itertools.ifilterfalse --&gt; itertools.filterfalse (bugs 2360-2363) " ilk="blob" lang="Python3" name="lib2to3.fixes.fix_itertools">
      <scope classrefs="BaseFix" ilk="class" name="FixItertools" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="This module provides access to the Windows registry API.  Functions:" ilk="blob" lang="Python3" name="winreg">
      <scope doc="Closes a previously opened registry key." ilk="function" name="CloseKey" signature="CloseKey(hkey)" />
      <scope doc="Establishes a connection to a predefined registry handle on another computer." ilk="function" name="ConnectRegistry" signature="ConnectRegistry(computer_name, key) -&gt; key" />
      <scope doc="Creates or opens the specified key." ilk="function" name="CreateKey" signature="CreateKey(key, sub_key) -&gt; key" />
      <scope doc="Deletes the specified key." ilk="function" name="DeleteKey" signature="DeleteKey(key, sub_key)" />
      <scope doc="Removes a named value from a registry key." ilk="function" name="DeleteValue" signature="DeleteValue(key, value)" />
      <scope doc="Disables registry reflection for 32-bit processes running on a 64-bit Operating System." ilk="function" name="DisableReflectionKey" />
      <scope doc="Restores registry reflection for the specified disabled key." ilk="function" name="EnableReflectionKey" />
      <scope doc="Enumerates subkeys of an open registry key." ilk="function" name="EnumKey" returns="str" signature="EnumKey(key, index) -&gt; string" />
      <scope doc="Enumerates values of an open registry key." ilk="function" name="EnumValue" returns="tuple" signature="EnumValue(key, index) -&gt; tuple" />
      <scope doc="Expand environment vars." ilk="function" name="ExpandEnvironmentStrings" returns="str" signature="ExpandEnvironmentStrings(string) -&gt; string" />
      <scope doc="Writes all the attributes of a key to the registry." ilk="function" name="FlushKey" signature="FlushKey(key)" />
      <scope classrefs="object" doc="PyHKEY Object - A Python object, representing a win32 registry key.  This object wraps a Windows HKEY object, automatically closing it when" ilk="class" name="HKEYType" />
      <variable citdl="int" name="HKEY_CLASSES_ROOT" />
      <variable citdl="int" name="HKEY_CURRENT_CONFIG" />
      <variable citdl="int" name="HKEY_CURRENT_USER" />
      <variable citdl="int" name="HKEY_DYN_DATA" />
      <variable citdl="int" name="HKEY_LOCAL_MACHINE" />
      <variable citdl="int" name="HKEY_PERFORMANCE_DATA" />
      <variable citdl="int" name="HKEY_USERS" />
      <variable citdl="int" name="KEY_ALL_ACCESS" />
      <variable citdl="int" name="KEY_CREATE_LINK" />
      <variable citdl="int" name="KEY_CREATE_SUB_KEY" />
      <variable citdl="int" name="KEY_ENUMERATE_SUB_KEYS" />
      <variable citdl="int" name="KEY_EXECUTE" />
      <variable citdl="int" name="KEY_NOTIFY" />
      <variable citdl="int" name="KEY_QUERY_VALUE" />
      <variable citdl="int" name="KEY_READ" />
      <variable citdl="int" name="KEY_SET_VALUE" />
      <variable citdl="int" name="KEY_WOW64_32KEY" />
      <variable citdl="int" name="KEY_WOW64_64KEY" />
      <variable citdl="int" name="KEY_WRITE" />
      <scope doc="Creates a subkey under the specified key" ilk="function" name="LoadKey" signature="LoadKey(key, sub_key, file_name)" />
      <scope doc="Opens the specified key." ilk="function" name="OpenKey" signature="OpenKey(key, sub_key, res = 0, sam = KEY_READ) -&gt; key" />
      <scope doc="See OpenKey()" ilk="function" name="OpenKeyEx" />
      <scope doc="Returns information about a key." ilk="function" name="QueryInfoKey" returns="tuple" signature="QueryInfoKey(key) -&gt; tuple" />
      <scope doc="Determines the reflection state for the specified key." ilk="function" name="QueryReflectionKey" returns="bool" signature="QueryReflectionKey(hkey) -&gt; bool" />
      <scope doc="retrieves the unnamed value for a key." ilk="function" name="QueryValue" returns="str" signature="QueryValue(key, sub_key) -&gt; string" />
      <scope doc="Retrieves the type and data for a specified value name associated with an open registry key." ilk="function" name="QueryValueEx" signature="QueryValueEx(key, value_name) -&gt; value,type_id" />
      <variable citdl="int" name="REG_BINARY" />
      <variable citdl="int" name="REG_CREATED_NEW_KEY" />
      <variable citdl="int" name="REG_DWORD" />
      <variable citdl="int" name="REG_DWORD_BIG_ENDIAN" />
      <variable citdl="int" name="REG_DWORD_LITTLE_ENDIAN" />
      <variable citdl="int" name="REG_EXPAND_SZ" />
      <variable citdl="int" name="REG_FULL_RESOURCE_DESCRIPTOR" />
      <variable citdl="int" name="REG_LEGAL_CHANGE_FILTER" />
      <variable citdl="int" name="REG_LEGAL_OPTION" />
      <variable citdl="int" name="REG_LINK" />
      <variable citdl="int" name="REG_MULTI_SZ" />
      <variable citdl="int" name="REG_NONE" />
      <variable citdl="int" name="REG_NOTIFY_CHANGE_ATTRIBUTES" />
      <variable citdl="int" name="REG_NOTIFY_CHANGE_LAST_SET" />
      <variable citdl="int" name="REG_NOTIFY_CHANGE_NAME" />
      <variable citdl="int" name="REG_NOTIFY_CHANGE_SECURITY" />
      <variable citdl="int" name="REG_NO_LAZY_FLUSH" />
      <variable citdl="int" name="REG_OPENED_EXISTING_KEY" />
      <variable citdl="int" name="REG_OPTION_BACKUP_RESTORE" />
      <variable citdl="int" name="REG_OPTION_CREATE_LINK" />
      <variable citdl="int" name="REG_OPTION_NON_VOLATILE" />
      <variable citdl="int" name="REG_OPTION_OPEN_LINK" />
      <variable citdl="int" name="REG_OPTION_RESERVED" />
      <variable citdl="int" name="REG_OPTION_VOLATILE" />
      <variable citdl="int" name="REG_REFRESH_HIVE" />
      <variable citdl="int" name="REG_RESOURCE_LIST" />
      <variable citdl="int" name="REG_RESOURCE_REQUIREMENTS_LIST" />
      <variable citdl="int" name="REG_SZ" />
      <variable citdl="int" name="REG_WHOLE_HIVE_VOLATILE" />
      <scope doc="Saves the specified key, and all its subkeys to the specified file." ilk="function" name="SaveKey" signature="SaveKey(key, file_name)" />
      <scope doc="Associates a value with a specified key." ilk="function" name="SetValue" signature="SetValue(key, sub_key, type, value)" />
      <scope doc="Stores data in the value field of an open registry key." ilk="function" name="SetValueEx" signature="SetValueEx(key, value_name, reserved, type, value)" />
      <scope classrefs="OSError" doc="MS-Windows OS system call failed." ilk="class" name="error" />
    </scope>
    <scope doc="An NNTP client class based on RFC 977: Network News Transfer Protocol.  Example:" ilk="blob" lang="Python3" name="nntplib">
      <variable citdl="bytes" line="88" name="CRLF" />
      <variable citdl="list" line="84" name="LONGRESP" />
      <scope classrefs="object" doc="# The class itself" ilk="class" line="93" lineend="592" name="NNTP">
        <variable attributes="__instancevar__" citdl="int" line="114" name="debugging" />
        <scope doc="Process a HELP command." ilk="function" line="364" lineend="369" name="help" returns="NNTP.longcmd()" signature="help(file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope doc="Process an XGTITLE command (optional server extension) Arguments: - group: group name wildcard (i.e." ilk="function" line="498" lineend="512" name="xgtitle" returns="tuple" signature="xgtitle(group, file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="group" />
          <variable ilk="argument" name="file" />
          <variable citdl="re.compile()" line="505" name="line_pat" />
          <variable citdl="list" line="507" name="lines" />
          <variable citdl="line_pat.search()" line="509" name="match" />
        </scope>
        <scope doc="Set the debugging level." ilk="function" line="180" lineend="186" name="set_debuglevel" signature="set_debuglevel(level)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope doc="Internal: send a command and get the response plus following text." ilk="function" line="264" lineend="267" name="longcmd" returns="NNTP.getlongresp()" signature="longcmd(line, file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope attributes="protected" ilk="function" line="551" lineend="566" name="_post" returns="NNTP.getresp()" signature="_post(command, f)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
          <variable ilk="argument" name="f" />
          <variable citdl="shortcmd()" line="552" name="resp" />
          <variable citdl="f.readline()" line="557" name="line" />
        </scope>
        <scope doc="Process an XOVER command (optional server extension) Arguments: - start: start of range - end: end of range Returns:" ilk="function" line="472" lineend="496" name="xover" returns="tuple" signature="xover(start, end, file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="end" />
          <variable ilk="argument" name="file" />
          <variable citdl="list" line="482" name="xover_lines" />
          <variable citdl="line.split()" line="484" name="elem" />
        </scope>
        <scope doc="Get descriptions for a range of groups." ilk="function" line="321" lineend="336" name="descriptions" returns="tuple" signature="descriptions(group_pattern)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="group_pattern" />
          <variable citdl="re.compile()" line="323" name="line_pat" />
          <variable citdl="list" line="331" name="lines" />
          <variable citdl="line_pat.search()" line="333" name="match" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.sock.makefile()" line="113" name="file" />
        <scope doc="Process an ARTICLE command." ilk="function" line="438" lineend="447" name="article" returns="NNTP.artcmd()" signature="article(id)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
        </scope>
        <scope doc="Process an IHAVE command." ilk="function" line="575" lineend="582" name="ihave" returns="NNTP._post()" signature="ihave(id, f)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="f" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="111" name="port" />
        <scope attributes="__ctor__" doc="Initialize an instance." ilk="function" line="94" lineend="163" name="__init__" signature="NNTP(host, port=NNTP_PORT, user=None, password=None, readermode=None, usenetrc=True)">
          <import line="139" module="netrc" />
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable ilk="argument" name="user" />
          <variable ilk="argument" name="password" />
          <variable ilk="argument" name="readermode" />
          <variable citdl="True" ilk="argument" name="usenetrc" />
          <variable citdl="int" line="122" name="readermode_afterauth" />
          <variable citdl="netrc.netrc()" line="140" name="credentials" />
          <variable citdl="credentials.authenticators()" line="141" name="auth" />
          <variable citdl="self.shortcmd()" line="149" name="resp" />
        </scope>
        <scope doc="Process a QUIT command and close the socket." ilk="function" line="584" lineend="592" name="quit" returns="shortcmd()" signature="quit()">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable citdl="shortcmd()" line="588" name="resp" />
        </scope>
        <scope doc="Get the welcome message from the server (this is read and squirreled away by __init__())." ilk="function" line="171" lineend="178" name="getwelcome" returns="self.shortcmd()" signature="getwelcome()">
          <variable citdl="NNTP" ilk="argument" name="self" />
        </scope>
        <scope doc="Process a GROUP command." ilk="function" line="338" lineend="362" name="group" returns="tuple" signature="group(name)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="shortcmd()" line="348" name="resp" />
          <variable citdl="resp.split()" line="351" name="words" />
          <variable citdl="int" line="352" name="count" />
          <variable citdl="len()" line="353" name="n" />
          <variable line="357" name="first" />
          <variable line="359" name="last" />
        </scope>
        <variable attributes="__instancevar__" citdl="socket.create_connection()" line="112" name="sock" />
        <scope doc="Process a NEXT command. No arguments." ilk="function" line="400" lineend="402" name="next" returns="NNTP.statcmd()" signature="next()">
          <variable citdl="NNTP" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal: return one line from the server, stripping CRLF." ilk="function" line="201" lineend="212" name="getline" returns="list" signature="getline()">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable citdl="list" line="204" name="line" />
        </scope>
        <scope doc="Internal: parse the response of a STAT, NEXT or LAST command." ilk="function" line="371" lineend="383" name="statparse" returns="tuple" signature="statparse(resp)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="resp" />
          <variable citdl="resp.split()" line="375" name="words" />
          <variable citdl="int" line="376" name="nr" />
          <variable citdl="str" line="377" name="id" />
          <variable citdl="len()" line="378" name="n" />
        </scope>
        <scope doc="Process an XPATH command (optional server extension) Arguments: - id: Message id of article Returns: resp: server response if successful" ilk="function" line="514" lineend="529" name="xpath" returns="tuple" signature="xpath(id)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
          <variable citdl="shortcmd()" line="521" name="resp" />
        </scope>
        <scope doc="Process a HEAD command." ilk="function" line="414" lineend="423" name="head" returns="NNTP.artcmd()" signature="head(id)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
        </scope>
        <scope doc="Process a SLAVE command." ilk="function" line="449" lineend="453" name="slave" returns="NNTP.shortcmd()" signature="slave()">
          <variable citdl="NNTP" ilk="argument" name="self" />
        </scope>
        <scope doc="Get a description for a single group." ilk="function" line="302" lineend="319" name="description" returns="str" signature="description(group)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="group" />
        </scope>
        <scope doc="Internal: get a response plus following text from the server." ilk="function" line="228" lineend="257" name="getlongresp" returns="tuple" signature="getlongresp(file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="open()" line="232" name="openedFile" />
          <variable citdl="getresp()" line="238" name="resp" />
          <variable citdl="list" line="241" name="list" />
          <variable citdl="getline()" line="243" name="line" />
        </scope>
        <scope doc="Process a POST command." ilk="function" line="568" lineend="573" name="post" returns="NNTP._post()" signature="post(f)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.shortcmd()" line="115" name="welcome" />
        <scope doc="Process a BODY command." ilk="function" line="425" lineend="436" name="body" returns="NNTP.artcmd()" signature="body(id, file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope doc="Internal: process a HEAD, BODY or ARTICLE command." ilk="function" line="408" lineend="412" name="artcmd" returns="tuple" signature="artcmd(line, file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope doc="Process a STAT command." ilk="function" line="390" lineend="398" name="stat" returns="NNTP.statcmd()" signature="stat(id)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
        </scope>
        <variable attributes="__instancevar__" line="110" name="host" />
        <scope doc="Internal: send one command to the server (through putline())." ilk="function" line="195" lineend="199" name="putcmd" signature="putcmd(line)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable citdl="bytes()" ilk="argument" name="line" />
        </scope>
        <scope doc="Process the DATE command." ilk="function" line="531" lineend="549" name="date" returns="tuple" signature="date()">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable citdl="shortcmd()" line="539" name="resp" />
          <variable citdl="resp.split()" line="542" name="elem" />
          <variable citdl="list" line="545" name="date" />
          <variable citdl="list" line="546" name="time" />
        </scope>
        <scope doc="Internal: process a STAT, NEXT or LAST command." ilk="function" line="385" lineend="388" name="statcmd" returns="NNTP.statparse()" signature="statcmd(line)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable citdl="shortcmd()" line="387" name="resp" />
        </scope>
        <scope doc="Process an XHDR command (optional server extension)." ilk="function" line="455" lineend="470" name="xhdr" returns="tuple" signature="xhdr(hdr, str, file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="hdr" />
          <variable ilk="argument" name="str" />
          <variable ilk="argument" name="file" />
          <variable citdl="re.compile()" line="463" name="pat" />
          <variable line="466" name="line" />
          <variable citdl="pat.match()" line="467" name="m" />
        </scope>
        <scope doc="Process a LAST command. No arguments." ilk="function" line="404" lineend="406" name="last" returns="NNTP.statcmd()" signature="last()">
          <variable citdl="NNTP" ilk="argument" name="self" />
        </scope>
        <scope doc="Process a LIST command." ilk="function" line="291" lineend="300" name="list" returns="tuple" signature="list(file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope doc="Internal: send a command and get the response." ilk="function" line="259" lineend="262" name="shortcmd" returns="NNTP.getresp()" signature="shortcmd(line)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <variable citdl="NNTP.set_debuglevel" line="187" name="debug" />
        <scope doc="Process a NEWGROUPS command." ilk="function" line="269" lineend="277" name="newgroups" returns="NNTP.longcmd()" signature="newgroups(date, time, file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="date" />
          <variable ilk="argument" name="time" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope doc="Process a NEWNEWS command." ilk="function" line="279" lineend="289" name="newnews" returns="NNTP.longcmd()" signature="newnews(group, date, time, file=None)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable ilk="argument" name="group" />
          <variable ilk="argument" name="date" />
          <variable ilk="argument" name="time" />
          <variable ilk="argument" name="file" />
          <variable citdl="str" line="288" name="cmd" />
        </scope>
        <scope doc="Internal: get a response from the server." ilk="function" line="214" lineend="226" name="getresp" returns="getline()" signature="getresp()">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable citdl="getline()" line="217" name="resp" />
          <variable citdl="list" line="219" name="c" />
        </scope>
        <scope doc="Internal: send one line to the server, appending CRLF." ilk="function" line="189" lineend="193" name="putline" signature="putline(line)">
          <variable citdl="NNTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="line" />
        </scope>
      </scope>
      <scope classrefs="NNTPError" doc="Error in response data" ilk="class" line="66" lineend="68" name="NNTPDataError" />
      <scope classrefs="Exception" doc="Base class for all nntplib exceptions" ilk="class" line="41" lineend="48" name="NNTPError">
        <variable attributes="__instancevar__" citdl="str" line="46" name="response" />
        <scope attributes="__ctor__" ilk="function" line="43" lineend="48" name="__init__" signature="NNTPError(*args)">
          <variable citdl="NNTPError" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
      </scope>
      <scope classrefs="NNTPError" doc="5xx errors" ilk="class" line="58" lineend="60" name="NNTPPermanentError" />
      <scope classrefs="NNTPError" doc="Response does not begin with [1-5]" ilk="class" line="62" lineend="64" name="NNTPProtocolError" />
      <scope classrefs="NNTPError" doc="Unexpected [123]xx reply" ilk="class" line="50" lineend="52" name="NNTPReplyError" />
      <scope classrefs="NNTPError" doc="4xx errors" ilk="class" line="54" lineend="56" name="NNTPTemporaryError" />
      <variable citdl="int" line="80" name="NNTP_PORT" />
      <variable citdl="list" line="35" name="__all__" />
      <scope classrefs="NNTPError" doc="Error in response data" ilk="class" line="75" name="error_data" />
      <scope classrefs="NNTPError" doc="5xx errors" ilk="class" line="73" name="error_perm" />
      <scope classrefs="NNTPError" doc="Response does not begin with [1-5]" ilk="class" line="74" name="error_proto" />
      <scope classrefs="NNTPError" doc="Unexpected [123]xx reply" ilk="class" line="71" name="error_reply" />
      <scope classrefs="NNTPError" doc="4xx errors" ilk="class" line="72" name="error_temp" />
      <import module="re" />
      <import module="socket" />
      <variable attributes="__hidden__" citdl="s.quit()" line="615" name="resp" />
      <variable attributes="__hidden__" citdl="str" line="602" name="newshost" />
      <variable attributes="__hidden__" citdl="NNTP" line="607" name="s" />
      <variable attributes="__hidden__" citdl="str" line="604" name="mode" />
    </scope>
    <scope doc="Read and write ZIP files.  XXX references to utf-8 need further investigation." ilk="blob" lang="Python3" name="zipfile">
      <scope classrefs="Exception" ilk="class" line="19" lineend="20" name="BadZipfile" />
      <scope classrefs="Exception" doc="Raised when writing a zipfile, the zipfile requires ZIP64 extensions and those extensions are disabled." ilk="class" line="23" name="LargeZipFile" />
      <scope classrefs="ZipFile" doc="Class to create ZIP archives with Python library files and packages." ilk="class" line="1257" lineend="1353" name="PyZipFile">
        <scope doc="Add all files from &quot;pathname&quot; to the ZIP archive." ilk="function" line="1260" lineend="1323" name="writepy" signature="writepy(pathname, basename=&apos;&apos;)">
          <variable citdl="PyZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="pathname" />
          <variable citdl="str" ilk="argument" name="basename" />
          <variable citdl="os.path.join()" line="1274" name="initname" />
          <variable citdl="os.listdir()" line="1287" name="dirlist" />
          <variable citdl="os.path.join()" line="1291" name="path" />
        </scope>
        <scope attributes="protected" doc="Given a module name path, return the correct file path and archive name, compiling if necessary." ilk="function" line="1325" lineend="1353" name="_get_codename" returns="tuple" signature="Return (filename, archivename) for the path.">
          <import line="1340" module="py_compile" />
          <variable citdl="PyZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="pathname" />
          <variable ilk="argument" name="basename" />
          <variable citdl="str" line="1332" name="file_py" />
          <variable citdl="str" line="1333" name="file_pyc" />
          <variable citdl="str" line="1334" name="file_pyo" />
          <variable citdl="str" line="1337" name="fname" />
          <variable citdl="str" line="1350" name="archivename" />
        </scope>
      </scope>
      <variable citdl="int" line="31" name="ZIP64_LIMIT" />
      <variable citdl="int" line="37" name="ZIP_DEFLATED" />
      <variable citdl="int" line="32" name="ZIP_FILECOUNT_LIMIT" />
      <variable citdl="int" line="33" name="ZIP_MAX_COMMENT" />
      <variable citdl="int" line="36" name="ZIP_STORED" />
      <scope classrefs="object" doc="File-like object for reading an archive member. Is returned by ZipFile.open()." ilk="class" line="446" lineend="642" name="ZipExtFile">
        <variable attributes="__instancevar__" citdl="zipinfo.compress_type" line="463" name="compress_type" />
        <scope doc="Return a list with all (following) lines." ilk="function" line="557" lineend="566" name="readlines" returns="list" signature="readlines(sizehint=-1)">
          <variable citdl="ZipExtFile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="sizehint" />
          <variable citdl="list" line="561" name="result" />
          <variable citdl="readline()" line="563" name="line" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="456" name="readbuffer" />
        <variable attributes="__instancevar__" citdl="int" line="471" name="compreadsize" />
        <variable attributes="__instancevar__" citdl="tuple" line="460" name="nlSeps" />
        <variable attributes="__instancevar__" citdl="list" line="457" name="linebuffer" />
        <scope ilk="function" line="493" lineend="494" name="close" signature="close()">
          <variable citdl="ZipExtFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="451" lineend="473" name="__init__" signature="ZipExtFile(fileobj, zipinfo, decrypt=None)">
          <variable citdl="ZipExtFile" ilk="argument" name="self" />
          <variable ilk="argument" name="fileobj" />
          <variable ilk="argument" name="zipinfo" />
          <variable ilk="argument" name="decrypt" />
        </scope>
        <variable attributes="__instancevar__" citdl="zipinfo.compress_size" line="464" name="compress_size" />
        <variable attributes="__instancevar__" citdl="True" line="466" name="closed" />
        <variable attributes="__instancevar__" citdl="str" line="455" name="rawbuffer" />
        <variable attributes="__instancevar__" citdl="int" line="454" name="bytes_read" />
        <scope ilk="function" line="568" lineend="642" name="read" returns="self.fileobj.read()" signature="read(size=None)">
          <variable citdl="ZipExtFile" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable citdl="zipinfo.compress_size" line="574" name="bytesToRead" />
          <variable citdl="len()" line="583" name="lr" />
          <variable citdl="list" line="601" name="data" />
          <variable citdl="bytes()" line="612" name="newdata" />
        </scope>
        <scope ilk="function" line="486" lineend="491" name="__next__" returns="self.readline()" signature="__next__()">
          <variable citdl="ZipExtFile" ilk="argument" name="self" />
          <variable citdl="self.readline()" line="487" name="nextline" />
        </scope>
        <variable attributes="__instancevar__" citdl="zlib.decompressobj()" line="473" name="dc" />
        <scope ilk="function" line="483" lineend="484" name="__iter__" returns="ZipExtFile" signature="__iter__()">
          <variable citdl="ZipExtFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="459" name="univ_newlines" />
        <variable attributes="__instancevar__" line="452" name="fileobj" />
        <scope doc="Read a line with approx. size." ilk="function" line="513" lineend="555" name="readline" returns="str" signature="readline(size=-1)">
          <variable citdl="ZipExtFile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="size" />
          <variable citdl="min()" line="527" name="nl" />
          <variable citdl="list" line="532" name="buf" />
          <variable citdl="list" line="545" name="s" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="458" name="eof" />
        <scope attributes="protected" ilk="function" line="496" lineend="511" name="_checkfornewline" returns="tuple" signature="_checkfornewline()">
          <variable citdl="ZipExtFile" ilk="argument" name="self" />
          <variable citdl="int" line="497" name="nl" />
          <variable citdl="int" line="497" name="nllen" />
        </scope>
        <variable attributes="__instancevar__" citdl="zipinfo.filename" line="468" name="name" />
        <scope ilk="function" line="475" lineend="481" name="set_univ_newlines" signature="set_univ_newlines(univ_newlines)">
          <variable citdl="ZipExtFile" ilk="argument" name="self" />
          <variable ilk="argument" name="univ_newlines" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="467" name="mode" />
        <variable attributes="__instancevar__" line="453" name="decrypter" />
        <variable attributes="__instancevar__" citdl="list" line="461" name="lastdiscard" />
      </scope>
      <scope classrefs="object" doc="Class with methods to open, read, write, close, list zip files.  z = ZipFile(file, mode=&quot;r&quot;, compression=ZIP_STORED, allowZip64=False)" ilk="class" line="645" lineend="1254" name="ZipFile">
        <variable attributes="__instancevar__" citdl="list" line="684" name="comment" />
        <scope doc="Return the instance of ZipInfo given &apos;name&apos;." ilk="function" line="837" lineend="844" name="getinfo" returns="self.NameToInfo.get()" signature="getinfo(name)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="self.NameToInfo.get()" line="839" name="info" />
        </scope>
        <scope doc="Close the file, and for mode &quot;w&quot; and &quot;a&quot; write the ending records." ilk="function" line="1147" lineend="1254" name="close" signature="close()">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable citdl="int" line="1154" name="count" />
          <variable citdl="self.fp.tell()" line="1155" name="pos1" />
          <variable citdl="zinfo.date_time" line="1158" name="dt" />
          <variable citdl="int" line="1159" name="dosdate" />
          <variable citdl="int" line="1160" name="dostime" />
          <variable citdl="list" line="1161" name="extra" />
          <variable citdl="zinfo.file_size" line="1166" name="file_size" />
          <variable citdl="zinfo.compress_size" line="1167" name="compress_size" />
          <variable citdl="long" line="1174" name="header_offset" />
          <variable citdl="zinfo.extra" line="1178" name="extra_data" />
          <variable citdl="zinfo.extract_version" line="1185" name="extract_version" />
          <variable citdl="max()" line="1186" name="create_version" />
          <variable citdl="struct.pack()" line="1193" name="centdir" />
          <variable citdl="self.fp.tell()" line="1215" name="pos2" />
          <variable citdl="int" line="1217" name="centDirCount" />
          <variable citdl="self.fp.tell()" line="1218" name="centDirSize" />
          <variable citdl="self.fp.tell()" line="1219" name="centDirOffset" />
          <variable citdl="struct.pack()" line="1224" name="zip64endrec" />
          <variable citdl="struct.pack()" line="1230" name="zip64locrec" />
          <variable citdl="str" line="1241" name="msg" />
          <variable citdl="struct.pack()" line="1245" name="endrec" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="676" name="_allowZip64" />
        <scope doc="Return file-like object for &apos;name&apos;." ilk="function" line="855" lineend="931" name="open" returns="ZipExtFile" signature="open(name, mode=&apos;r&apos;, pwd=None)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable ilk="argument" name="pwd" />
          <variable citdl="io.open()" line="866" name="zef_file" />
          <variable citdl="getinfo()" line="873" name="zinfo" />
          <variable citdl="zef_file.read()" line="881" name="fheader" />
          <variable citdl="zef_file.read()" line="886" name="fname" />
          <variable citdl="int" line="896" name="is_encrypted" />
          <variable citdl="_ZipDecrypter" line="897" name="zd" />
          <variable citdl="zef_file.read()" line="911" name="bytes" />
          <variable citdl="list()" line="912" name="h" />
          <variable citdl="int" line="915" name="check_byte" />
          <variable citdl="ZipExtFile" line="924" name="zef" />
        </scope>
        <scope attributes="__ctor__" doc="Open the ZIP file with mode read &quot;r&quot;, write &quot;w&quot; or append &quot;a&quot;." ilk="function" line="662" lineend="720" name="__init__" signature="ZipFile(file, mode=&apos;r&apos;, compression=ZIP_STORED, allowZip64=False)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable citdl="int" ilk="argument" name="compression" />
          <variable citdl="False" ilk="argument" name="allowZip64" />
          <variable citdl="dict" line="691" name="modeDict" />
        </scope>
        <scope doc="Put the bytes from filename into the archive under the name arcname." ilk="function" line="1019" lineend="1098" name="write" signature="write(filename, arcname=None, compress_type=None)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="os.path.normpath()" ilk="argument" name="arcname" />
          <variable ilk="argument" name="compress_type" />
          <variable citdl="os.stat()" line="1026" name="st" />
          <variable citdl="stat.S_ISDIR()" line="1027" name="isdir" />
          <variable citdl="time.localtime()" line="1028" name="mtime" />
          <variable citdl="list" line="1029" name="date_time" />
          <variable citdl="ZipInfo" line="1038" name="zinfo" />
          <variable citdl="zlib.compressobj()" line="1068" name="cmpr" />
          <variable citdl="cmpr.compress()" line="1073" name="buf" />
          <variable citdl="len()" line="1076" name="file_size" />
          <variable citdl="int" line="1077" name="CRC" />
          <variable citdl="len()" line="1080" name="compress_size" />
          <variable citdl="self.fp.tell()" line="1092" name="position" />
        </scope>
        <scope doc="Return a list of class ZipInfo instances for files in the archive." ilk="function" line="810" lineend="813" name="infolist" returns="list" signature="infolist()">
          <variable citdl="ZipFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="681" name="compression" />
        <scope doc="Extract a member from the archive to the current working directory, using its full name." ilk="function" line="933" lineend="945" name="extract" returns="self._extract_member()" signature="extract(member, path=None, pwd=None)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable citdl="getinfo()" ilk="argument" name="member" />
          <variable citdl="os.getcwd()" ilk="argument" name="path" />
          <variable ilk="argument" name="pwd" />
        </scope>
        <scope doc="Write a file into the archive." ilk="function" line="1100" lineend="1141" name="writestr" signature="writestr(zinfo_or_arcname, data)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="zinfo_or_arcname" />
          <variable citdl="co.compress()" ilk="argument" name="data" />
          <variable citdl="ZipInfo" line="1109" name="zinfo" />
          <variable citdl="zlib.compressobj()" line="1126" name="co" />
        </scope>
        <variable attributes="__instancevar__" citdl="getattr()" line="690" name="filename" />
        <variable attributes="__instancevar__" citdl="dict" line="679" name="NameToInfo" />
        <variable attributes="__instancevar__" line="755" name="start_dir" />
        <variable attributes="protected __instancevar__" citdl="False" line="677" name="_didModify" />
        <scope doc="Read all the files and check the CRC." ilk="function" line="824" lineend="835" name="testzip" returns="zinfo.filename" signature="testzip()">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable citdl="int" line="826" name="chunk_size" />
          <variable citdl="self.open()" line="831" name="f" />
        </scope>
        <variable attributes="__instancevar__" line="682" name="mode" />
        <variable citdl="io.open()" line="660" name="fp" />
        <scope doc="Return a list of file names in the archive." ilk="function" line="803" lineend="808" name="namelist" returns="list" signature="namelist()">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable citdl="list" line="805" name="l" />
        </scope>
        <scope attributes="protected" doc="Read in the table of contents for the ZIP file." ilk="function" line="733" lineend="800" name="_RealGetContents" signature="_RealGetContents()">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable citdl="io.open()" line="735" name="fp" />
          <variable citdl="_EndRecData()" line="736" name="endrec" />
          <variable line="741" name="size_cd" />
          <variable line="742" name="offset_cd" />
          <variable line="746" name="concat" />
          <variable line="752" name="inferred" />
          <variable citdl="fp.read()" line="757" name="data" />
          <variable citdl="int" line="759" name="total" />
          <variable citdl="struct.unpack()" line="761" name="centdir" />
          <variable citdl="filename.decode()" line="767" name="filename" />
          <variable line="768" name="flags" />
          <variable citdl="ZipInfo" line="776" name="x" />
        </scope>
        <scope attributes="protected" doc="Read the directory, making sure we close the file if the format is bad." ilk="function" line="722" lineend="731" name="_GetContents" signature="_GetContents()">
          <variable citdl="ZipFile" ilk="argument" name="self" />
        </scope>
        <scope doc="Return file bytes (as a string) for name." ilk="function" line="851" lineend="853" name="read" signature="read(name, pwd=None)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="pwd" />
        </scope>
        <scope doc="Print a table of contents for the zip file." ilk="function" line="815" lineend="822" name="printdir" signature="printdir(file=None)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="list" line="820" name="date" />
        </scope>
        <scope attributes="protected" doc="Check for errors before writing a file to the archive." ilk="function" line="996" lineend="1017" name="_writecheck" signature="_writecheck(zinfo)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="zinfo" />
        </scope>
        <scope doc="Call the &quot;close()&quot; method in case the user forgot." ilk="function" line="1143" lineend="1145" name="__del__" signature="__del__()">
          <variable citdl="ZipFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="683" name="pwd" />
        <scope doc="Set default password for encrypted files." ilk="function" line="846" lineend="849" name="setpassword" signature="setpassword(pwd)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="pwd" />
        </scope>
        <scope attributes="protected" doc="Extract the ZipInfo object &apos;member&apos; to a physical file on the path targetpath." ilk="function" line="959" lineend="994" name="_extract_member" returns="list" signature="_extract_member(member, targetpath, pwd)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="member" />
          <variable citdl="os.path.join()" ilk="argument" name="targetpath" />
          <variable ilk="argument" name="pwd" />
          <variable citdl="os.path.dirname()" line="979" name="upperdirs" />
          <variable citdl="open()" line="988" name="source" />
          <variable citdl="open()" line="989" name="target" />
        </scope>
        <scope doc="Extract all members from the archive to the current working directory." ilk="function" line="947" lineend="957" name="extractall" signature="extractall(path=None, members=None, pwd=None)">
          <variable citdl="ZipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable citdl="namelist()" ilk="argument" name="members" />
          <variable ilk="argument" name="pwd" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="680" name="filelist" />
        <variable attributes="protected __instancevar__" citdl="int" line="689" name="_filePassed" />
        <variable attributes="__instancevar__" citdl="int" line="678" name="debug" />
      </scope>
      <scope classrefs="object" doc="Class with attributes describing each file in the ZIP archive." ilk="class" line="248" lineend="385" name="ZipInfo">
        <variable attributes="__instancevar__" citdl="str" line="291" name="comment" />
        <variable attributes="__instancevar__" citdl="int" line="300" name="reserved" />
        <variable attributes="__instancevar__" citdl="str" line="292" name="extra" />
        <variable attributes="__instancevar__" line="382" name="header_offset" />
        <variable attributes="__instancevar__" citdl="int" line="290" name="compress_type" />
        <variable attributes="__instancevar__" line="373" name="file_size" />
        <scope attributes="__ctor__" ilk="function" line="273" lineend="304" name="__init__" signature="ZipInfo(filename=&apos;NoName&apos;, date_time=(1980, 1, 1, 0, 0, 0))">
          <variable citdl="ZipInfo" ilk="argument" name="self" />
          <variable citdl="filename.replace()" ilk="argument" name="filename" />
          <variable citdl="tuple" ilk="argument" name="date_time" />
          <variable citdl="filename.find()" line="278" name="null_byte" />
        </scope>
        <scope attributes="protected" ilk="function" line="345" lineend="349" name="_encodeFilenameFlags" returns="tuple" signature="_encodeFilenameFlags()">
          <variable citdl="ZipInfo" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="298" name="create_version" />
        <variable attributes="__instancevar__" citdl="list" line="287" name="filename" />
        <variable attributes="__instancevar__" line="377" name="compress_size" />
        <variable attributes="__instancevar__" citdl="int" line="294" name="create_system" />
        <variable attributes="__instancevar__" citdl="str" line="274" name="orig_filename" />
        <variable attributes="__instancevar__" citdl="int" line="304" name="external_attr" />
        <scope attributes="protected" ilk="function" line="351" lineend="385" name="_decodeExtra" signature="_decodeExtra()">
          <variable citdl="ZipInfo" ilk="argument" name="self" />
          <variable citdl="list" line="353" name="extra" />
          <variable citdl="struct.unpack" line="354" name="unpack" />
          <variable citdl="unpack()" line="359" name="counts" />
          <variable citdl="int" line="369" name="idx" />
          <variable citdl="self.header_offset" line="381" name="old" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="299" name="extract_version" />
        <variable attributes="__instancevar__" citdl="int" line="302" name="volume" />
        <variable attributes="__instancevar__" citdl="tuple" line="288" name="date_time" />
        <scope doc="Return the per-file header as a string." ilk="function" line="311" lineend="343" name="FileHeader" returns="filename.replace()" signature="FileHeader()">
          <variable citdl="ZipInfo" ilk="argument" name="self" />
          <variable citdl="tuple" line="313" name="dt" />
          <variable citdl="int" line="314" name="dosdate" />
          <variable citdl="int" line="315" name="dostime" />
          <variable citdl="int" line="318" name="CRC" />
          <variable citdl="self.compress_size" line="321" name="compress_size" />
          <variable citdl="long" line="322" name="file_size" />
          <variable citdl="str" line="324" name="extra" />
          <variable citdl="str" line="329" name="fmt" />
          <variable citdl="struct.pack()" line="338" name="header" />
        </scope>
        <variable citdl="tuple" line="251" name="__slots__" />
        <variable attributes="__instancevar__" citdl="int" line="301" name="flag_bits" />
        <variable attributes="__instancevar__" citdl="int" line="303" name="internal_attr" />
      </scope>
      <variable citdl="list" line="16" name="__all__" />
      <import module="binascii" />
      <scope doc="Compute a CRC-32 checksum of string." ilk="function" line="11" name="crc32" signature="crc32(string[, start])" />
      <scope classrefs="Exception" ilk="class" line="29" name="error" />
      <import module="io" />
      <scope doc="Quickly see if a file is a ZIP file by checking the magic number." ilk="function" line="141" lineend="155" name="is_zipfile" returns="bool" signature="is_zipfile(filename)">
        <variable citdl="_check_zipfile()" line="146" name="result" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope ilk="function" line="1356" lineend="1426" name="main" signature="main(args=None)">
        <variable citdl="os.path.join()" line="1397" name="tgt" />
        <scope ilk="function" line="1413" lineend="1419" name="addToZip" signature="addToZip(zf, path, zippath)">
          <variable ilk="argument" name="zf" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="zippath" />
        </scope>
        <variable citdl="ZipFile" line="1376" name="zf" />
        <variable citdl="list" ilk="argument" name="args" />
        <variable citdl="os.path.dirname()" line="1401" name="tgtdir" />
        <variable citdl="textwrap.dedent()" line="1358" name="USAGE" />
        <variable line="1394" name="out" />
      </scope>
      <import module="os" />
      <import module="shutil" />
      <variable citdl="int" line="69" name="sizeCentralDir" />
      <variable citdl="int" line="50" name="sizeEndCentDir" />
      <variable citdl="int" line="120" name="sizeEndCentDir64" />
      <variable citdl="int" line="114" name="sizeEndCentDir64Locator" />
      <variable citdl="int" line="96" name="sizeFileHeader" />
      <import module="stat" />
      <variable citdl="bytes" line="68" name="stringCentralDir" />
      <variable citdl="bytes" line="49" name="stringEndArchive" />
      <variable citdl="bytes" line="119" name="stringEndArchive64" />
      <variable citdl="bytes" line="113" name="stringEndArchive64Locator" />
      <variable citdl="bytes" line="95" name="stringFileHeader" />
      <import module="struct" />
      <variable citdl="str" line="67" name="structCentralDir" />
      <variable citdl="bytes" line="48" name="structEndArchive" />
      <variable citdl="str" line="118" name="structEndArchive64" />
      <variable citdl="str" line="112" name="structEndArchive64Locator" />
      <variable citdl="str" line="94" name="structFileHeader" />
      <import module="sys" />
      <import module="time" />
      <import module="zlib" />
      <variable attributes="protected __hidden__" citdl="int" line="63" name="_ECD_LOCATION" />
      <variable attributes="protected __hidden__" citdl="int" line="53" name="_ECD_DISK_NUMBER" />
      <variable attributes="protected __hidden__" citdl="int" line="75" name="_CD_EXTRACT_VERSION" />
      <scope attributes="protected __hidden__" doc="Class to handle decryption of files stored within a ZIP archive." ilk="class" line="388" lineend="444" name="_ZipDecrypter">
        <scope attributes="protected" doc="Generate a CRC-32 table." ilk="function" line="401" lineend="418" name="_GenerateCRCTable" returns="list" signature="_GenerateCRCTable()">
          <variable citdl="long" line="408" name="poly" />
          <variable citdl="list" line="409" name="table" />
          <variable citdl="int" line="411" name="crc" />
        </scope>
        <variable citdl="_GenerateCRCTable()" line="419" name="crctable" />
        <scope attributes="protected" doc="Compute the CRC32 primitive on one byte." ilk="function" line="421" lineend="423" name="_crc32" returns="int" signature="_crc32(ch, crc)">
          <variable citdl="_ZipDecrypter" ilk="argument" name="self" />
          <variable ilk="argument" name="ch" />
          <variable ilk="argument" name="crc" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="425" lineend="430" name="__init__" signature="_ZipDecrypter(pwd)">
          <variable citdl="_ZipDecrypter" ilk="argument" name="self" />
          <variable ilk="argument" name="pwd" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="426" name="key0" />
        <variable attributes="__instancevar__" citdl="int" line="427" name="key1" />
        <variable attributes="__instancevar__" citdl="int" line="428" name="key2" />
        <scope attributes="protected" ilk="function" line="432" lineend="436" name="_UpdateKeys" signature="_UpdateKeys(c)">
          <variable citdl="_ZipDecrypter" ilk="argument" name="self" />
          <variable ilk="argument" name="c" />
        </scope>
        <scope doc="Decrypt a single character." ilk="function" line="438" lineend="444" name="__call__" returns="int" signature="__call__(c)">
          <variable citdl="_ZipDecrypter" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="c" />
          <variable citdl="int" line="441" name="k" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="107" name="_FH_UNCOMPRESSED_SIZE" />
      <variable attributes="protected __hidden__" citdl="int" line="79" name="_CD_TIME" />
      <variable attributes="protected __hidden__" citdl="int" line="125" name="_CD64_EXTRACT_VERSION" />
      <scope attributes="protected __hidden__" ilk="function" line="133" lineend="139" name="_check_zipfile" returns="bool" signature="_check_zipfile(fp)">
        <variable ilk="argument" name="fp" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="102" name="_FH_COMPRESSION_METHOD" />
      <variable attributes="protected __hidden__" citdl="int" line="62" name="_ECD_COMMENT" />
      <variable attributes="protected __hidden__" citdl="int" line="54" name="_ECD_DISK_START" />
      <variable attributes="protected __hidden__" citdl="int" line="124" name="_CD64_CREATE_VERSION" />
      <variable attributes="protected __hidden__" citdl="int" line="56" name="_ECD_ENTRIES_TOTAL" />
      <variable attributes="protected __hidden__" citdl="int" line="86" name="_CD_COMMENT_LENGTH" />
      <variable attributes="protected __hidden__" citdl="int" line="84" name="_CD_FILENAME_LENGTH" />
      <variable attributes="protected __hidden__" citdl="int" line="108" name="_FH_FILENAME_LENGTH" />
      <variable attributes="protected __hidden__" citdl="int" line="123" name="_CD64_DIRECTORY_RECSIZE" />
      <variable attributes="protected __hidden__" citdl="int" line="126" name="_CD64_DISK_NUMBER" />
      <variable attributes="protected __hidden__" citdl="int" line="127" name="_CD64_DISK_NUMBER_START" />
      <variable attributes="protected __hidden__" citdl="int" line="122" name="_CD64_SIGNATURE" />
      <variable attributes="protected __hidden__" citdl="int" line="131" name="_CD64_OFFSET_START_CENTDIR" />
      <variable attributes="protected __hidden__" citdl="int" line="72" name="_CD_SIGNATURE" />
      <variable attributes="protected __hidden__" citdl="int" line="78" name="_CD_COMPRESS_TYPE" />
      <variable attributes="protected __hidden__" citdl="int" line="101" name="_FH_GENERAL_PURPOSE_FLAG_BITS" />
      <scope attributes="protected __hidden__" doc="Return data from the &quot;End of Central Directory&quot; record, or None." ilk="function" line="190" name="_EndRecData" returns="_EndRecData64()" signature="_EndRecData(fpin)">
        <variable ilk="argument" name="fpin" />
        <variable citdl="fpin.tell()" line="198" name="filesize" />
        <variable citdl="fpin.read()" line="207" name="data" />
        <variable citdl="list()" line="210" name="endrec" />
        <variable citdl="max()" line="225" name="maxCommentStart" />
        <variable citdl="data.rfind()" line="228" name="start" />
        <variable citdl="list" line="231" name="recData" />
        <variable citdl="list" line="233" name="comment" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="85" name="_CD_EXTRA_FIELD_LENGTH" />
      <variable attributes="protected __hidden__" citdl="int" line="57" name="_ECD_SIZE" />
      <variable attributes="protected __hidden__" citdl="int" line="104" name="_FH_LAST_MOD_DATE" />
      <scope attributes="protected __hidden__" doc="Read the ZIP64 end-of-archive records and use that to update endrec" ilk="function" line="157" lineend="187" name="_EndRecData64" signature="_EndRecData64(fpin, offset, endrec)">
        <variable ilk="argument" name="fpin" />
        <variable ilk="argument" name="offset" />
        <variable ilk="argument" name="endrec" />
        <variable citdl="fpin.read()" line="162" name="data" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="129" name="_CD64_NUMBER_ENTRIES_TOTAL" />
      <variable attributes="protected __hidden__" citdl="int" line="105" name="_FH_CRC" />
      <variable attributes="protected __hidden__" citdl="int" line="58" name="_ECD_OFFSET" />
      <variable attributes="protected __hidden__" citdl="int" line="99" name="_FH_EXTRACT_VERSION" />
      <variable attributes="protected __hidden__" citdl="int" line="130" name="_CD64_DIRECTORY_SIZE" />
      <variable attributes="protected __hidden__" citdl="int" line="59" name="_ECD_COMMENT_SIZE" />
      <variable attributes="protected __hidden__" citdl="int" line="89" name="_CD_EXTERNAL_FILE_ATTRIBUTES" />
      <variable attributes="protected __hidden__" citdl="int" line="98" name="_FH_SIGNATURE" />
      <variable attributes="protected __hidden__" citdl="int" line="52" name="_ECD_SIGNATURE" />
      <variable attributes="protected __hidden__" citdl="int" line="88" name="_CD_INTERNAL_FILE_ATTRIBUTES" />
      <variable attributes="protected __hidden__" citdl="int" line="74" name="_CD_CREATE_SYSTEM" />
      <variable attributes="protected __hidden__" citdl="int" line="55" name="_ECD_ENTRIES_THIS_DISK" />
      <variable attributes="protected __hidden__" citdl="int" line="81" name="_CD_CRC" />
      <variable attributes="protected __hidden__" citdl="int" line="80" name="_CD_DATE" />
      <variable attributes="protected __hidden__" citdl="int" line="128" name="_CD64_NUMBER_ENTRIES_THIS_DISK" />
      <variable attributes="protected __hidden__" citdl="int" line="76" name="_CD_EXTRACT_SYSTEM" />
      <variable attributes="__hidden__" line="13" name="zlib" />
      <variable attributes="protected __hidden__" citdl="int" line="109" name="_FH_EXTRA_FIELD_LENGTH" />
      <variable attributes="protected __hidden__" citdl="int" line="73" name="_CD_CREATE_VERSION" />
      <variable attributes="protected __hidden__" citdl="int" line="82" name="_CD_COMPRESSED_SIZE" />
      <variable attributes="protected __hidden__" citdl="int" line="106" name="_FH_COMPRESSED_SIZE" />
      <variable attributes="protected __hidden__" citdl="int" line="90" name="_CD_LOCAL_HEADER_OFFSET" />
      <variable attributes="protected __hidden__" citdl="int" line="83" name="_CD_UNCOMPRESSED_SIZE" />
      <variable attributes="protected __hidden__" citdl="int" line="103" name="_FH_LAST_MOD_TIME" />
      <variable attributes="protected __hidden__" citdl="int" line="77" name="_CD_FLAG_BITS" />
      <variable attributes="protected __hidden__" citdl="int" line="87" name="_CD_DISK_NUMBER_START" />
      <variable attributes="protected __hidden__" citdl="int" line="100" name="_FH_EXTRACT_SYSTEM" />
    </scope>
    <scope doc="distutils.cmd  Provides the Command class, the base class for the command classes" ilk="blob" lang="Python3" name="distutils.cmd">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" line="14" lineend="404" name="Command">
        <scope attributes="protected" ilk="function" line="246" lineend="251" name="_ensure_tested_string" signature="_ensure_tested_string(option, tester, what, error_fmt, default=None)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="tester" />
          <variable ilk="argument" name="what" />
          <variable ilk="argument" name="error_fmt" />
          <variable ilk="argument" name="default" />
          <variable citdl="_ensure_stringlike()" line="248" name="val" />
        </scope>
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" line="365" lineend="368" name="spawn" signature="spawn(cmd, search_path=1, level=1)">
          <import line="367" module="distutils.spawn" symbol="spawn" />
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable citdl="int" ilk="argument" name="search_path" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <variable attributes="__instancevar__" line="84" name="force" />
        <variable attributes="__instancevar__" citdl="dist.verbose" line="78" name="verbose" />
        <variable attributes="__instancevar__" citdl="int" line="94" name="finalized" />
        <variable citdl="list" line="44" name="sub_commands" />
        <variable attributes="protected __instancevar__" line="74" name="_dry_run" />
        <scope ilk="function" line="107" lineend="110" name="ensure_finalized" signature="ensure_finalized()">
          <variable citdl="Command" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Create and initialize a new Command object." ilk="function" line="49" lineend="94" name="__init__" signature="Command(dist)">
          <import line="56" module="distutils.dist" symbol="Distribution" />
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="dist" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="88" name="help" />
        <scope doc="Set default values for all the options that this command supports." ilk="function" line="125" lineend="136" name="initialize_options" signature="initialize_options()">
          <variable citdl="Command" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="153" lineend="165" name="dump_options" signature="dump_options(header=None, indent=&apos;&apos;)">
          <import line="154" module="distutils.fancy_getopt" symbol="longopt_xlate" />
          <variable citdl="Command" ilk="argument" name="self" />
          <variable citdl="self.get_command_name()" ilk="argument" name="header" />
          <variable citdl="str" ilk="argument" name="indent" />
          <variable citdl="list" line="160" name="option" />
          <variable citdl="getattr()" line="163" name="value" />
        </scope>
        <scope ilk="function" line="97" lineend="105" name="__getattr__" returns="getattr()" signature="__getattr__(attr)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
          <variable citdl="getattr()" line="99" name="myval" />
        </scope>
        <scope doc="Determine the sub-commands that are relevant in the current distribution (ie., that need to be run)." ilk="function" line="317" lineend="328" name="get_sub_commands" returns="list" signature="get_sub_commands()">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable citdl="list" line="324" name="commands" />
        </scope>
        <scope doc="Copy an entire directory tree respecting verbose, dry-run, and force flags." ilk="function" line="352" lineend="359" name="copy_tree" returns="dir_util.copy_tree()" signature="copy_tree(infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="infile" />
          <variable ilk="argument" name="outfile" />
          <variable citdl="int" ilk="argument" name="preserve_mode" />
          <variable citdl="int" ilk="argument" name="preserve_times" />
          <variable citdl="int" ilk="argument" name="preserve_symlinks" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <scope doc="If the current verbosity level is of greater than or equal to &apos;level&apos; print &apos;msg&apos; to stdout." ilk="function" line="180" lineend="184" name="announce" signature="announce(msg, level=1)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <scope doc="Run some other command: uses the &apos;run_command()&apos; method of Distribution, which creates and finalizes the command object if necessary and then invokes its &apos;run()&apos; method." ilk="function" line="310" lineend="315" name="run_command" signature="run_command(command)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
        </scope>
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding option values in some other command object." ilk="function" line="273" lineend="292" name="set_undefined_options" signature="set_undefined_options(src_cmd, *option_pairs)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="src_cmd" />
          <variable attributes="varargs" ilk="argument" name="option_pairs" />
          <variable citdl="self.distribution.get_command_obj()" line="288" name="src_cmd_obj" />
        </scope>
        <scope doc="A command&apos;s raison d&apos;etre: carry out the action it exists to perform, controlled by the options initialized in &apos;initialize_options()&apos;, customized by other commands, the setup script, the command-line, and config files, and finalized in" ilk="function" line="167" lineend="178" name="run" signature="run()">
          <variable citdl="Command" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="306" lineend="308" name="reinitialize_command" returns="self.distribution.reinitialize_command()" signature="reinitialize_command(command, reinit_subcommands=0)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
          <variable citdl="int" ilk="argument" name="reinit_subcommands" />
        </scope>
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" line="343" lineend="350" name="copy_file" returns="file_util.copy_file()" signature="copy_file(infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="infile" />
          <variable ilk="argument" name="outfile" />
          <variable citdl="int" ilk="argument" name="preserve_mode" />
          <variable citdl="int" ilk="argument" name="preserve_times" />
          <variable ilk="argument" name="link" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="333" lineend="335" name="warn" signature="warn(msg)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
        <scope ilk="function" line="259" lineend="262" name="ensure_dirname" signature="ensure_dirname(option)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
        </scope>
        <scope doc="Move a file respectin dry-run flag." ilk="function" line="361" lineend="363" name="move_file" returns="file_util.move_file()" signature="move_file(src, dst, level=1)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="src" />
          <variable ilk="argument" name="dst" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <scope doc="Ensure that &apos;option&apos; is a list of strings." ilk="function" line="225" lineend="244" name="ensure_string_list" signature="ensure_string_list(option)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable citdl="getattr()" line="231" name="val" />
          <variable citdl="False" line="238" name="ok" />
        </scope>
        <scope attributes="protected" ilk="function" line="209" lineend="217" name="_ensure_stringlike" returns="getattr()" signature="_ensure_stringlike(option, what, default=None)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="what" />
          <variable ilk="argument" name="default" />
          <variable citdl="getattr()" line="210" name="val" />
        </scope>
        <scope doc="Wrapper around Distribution&apos;s &apos;get_command_obj()&apos; method: find (create if necessary and &apos;create&apos; is true) the command object for &apos;command&apos;, call its &apos;ensure_finalized()&apos; method, and return the finalized command object." ilk="function" line="294" lineend="302" name="get_finalized_command" returns="self.distribution.get_command_obj()" signature="get_finalized_command(command, create=1)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="command" />
          <variable citdl="int" ilk="argument" name="create" />
          <variable citdl="self.distribution.get_command_obj()" line="300" name="cmd_obj" />
        </scope>
        <scope ilk="function" line="337" lineend="338" name="execute" signature="execute(func, args, msg=None, level=1)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="msg" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <scope doc="Ensure that &apos;option&apos; is a string; if not defined, set it to &apos;default&apos;." ilk="function" line="219" lineend="223" name="ensure_string" signature="ensure_string(option, default=None)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope ilk="function" line="340" lineend="341" name="mkpath" signature="mkpath(name, mode=777)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="mode" />
        </scope>
        <scope ilk="function" line="370" lineend="372" name="make_archive" returns="archive_util.make_archive()" signature="make_archive(base_name, format, root_dir=None, base_dir=None)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="base_name" />
          <variable ilk="argument" name="format" />
          <variable ilk="argument" name="root_dir" />
          <variable ilk="argument" name="base_dir" />
        </scope>
        <scope ilk="function" line="267" lineend="271" name="get_command_name" returns="self.command_name" signature="get_command_name()">
          <variable citdl="Command" ilk="argument" name="self" />
        </scope>
        <scope doc="Special case of &apos;execute()&apos; for operations that process one or more input files and generate one output file." ilk="function" line="374" lineend="404" name="make_file" signature="make_file(infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="infiles" />
          <variable ilk="argument" name="outfile" />
          <variable ilk="argument" name="func" />
          <variable ilk="argument" name="args" />
          <variable citdl="str" ilk="argument" name="exec_msg" />
          <variable citdl="str" ilk="argument" name="skip_msg" />
          <variable citdl="int" ilk="argument" name="level" />
        </scope>
        <scope doc="Set final values for all the options that this command supports." ilk="function" line="138" lineend="150" name="finalize_options" signature="finalize_options()">
          <variable citdl="Command" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="63" name="distribution" />
        <scope doc="Ensure that &apos;option&apos; is the name of an existing file." ilk="function" line="253" lineend="257" name="ensure_filename" signature="ensure_filename(option)">
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
        </scope>
        <scope doc="Print &apos;msg&apos; to stdout if the global DEBUG (taken from the DISTUTILS_DEBUG environment variable) flag is true." ilk="function" line="186" lineend="193" name="debug_print" signature="debug_print(msg)">
          <import line="190" module="distutils.debug" symbol="DEBUG" />
          <variable citdl="Command" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
      </scope>
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <variable citdl="str" line="7" name="__revision__" />
      <import module="archive_util" />
      <import module="dep_util" />
      <import module="dir_util" />
      <import module="file_util" />
      <scope classrefs="Command" doc="Common base class for installing some files in a subdirectory. Currently used by install_data and install_scripts." ilk="class" line="411" lineend="435" name="install_misc">
        <scope attributes="protected" ilk="function" line="422" lineend="423" name="_install_dir_from" signature="_install_dir_from(dirname)">
          <variable citdl="install_misc" ilk="argument" name="self" />
          <variable ilk="argument" name="dirname" />
        </scope>
        <scope ilk="function" line="418" lineend="420" name="initialize_options" signature="initialize_options()">
          <variable citdl="install_misc" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="419" name="install_dir" />
        <variable citdl="list" line="416" name="user_options" />
        <scope attributes="protected" ilk="function" line="425" lineend="432" name="_copy_files" signature="_copy_files(filelist)">
          <variable citdl="install_misc" ilk="argument" name="self" />
          <variable ilk="argument" name="filelist" />
        </scope>
        <scope ilk="function" line="434" lineend="435" name="get_outputs" returns="list" signature="get_outputs()">
          <variable citdl="install_misc" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="420" name="outfiles" />
      </scope>
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
      <import module="util" />
    </scope>
    <scope doc="This module provides some more Pythonic support for SSL.  Object types:" ilk="blob" lang="Python3" name="ssl">
      <variable citdl="int" name="AF_INET" />
      <variable citdl="int" name="CERT_NONE" />
      <variable citdl="int" name="CERT_OPTIONAL" />
      <variable citdl="int" name="CERT_REQUIRED" />
      <scope doc="Takes a certificate in binary DER format and returns the PEM version of it as a string." ilk="function" line="396" lineend="403" name="DER_cert_to_PEM_cert" returns="str" signature="DER_cert_to_PEM_cert(der_cert_bytes)">
        <variable ilk="argument" name="der_cert_bytes" />
        <variable citdl="str()" line="400" name="f" />
      </scope>
      <variable citdl="str" line="394" name="PEM_FOOTER" />
      <variable citdl="str" line="393" name="PEM_HEADER" />
      <scope doc="Takes a certificate in ASCII PEM format and returns the DER- encoded version of it as a byte sequence" ilk="function" line="405" lineend="416" name="PEM_cert_to_DER_cert" returns="base64.decodebytes()" signature="PEM_cert_to_DER_cert(pem_cert_string)">
        <variable citdl="list" line="415" name="d" />
        <variable ilk="argument" name="pem_cert_string" />
      </scope>
      <variable citdl="int" name="PROTOCOL_SSLv2" />
      <variable citdl="int" name="PROTOCOL_SSLv23" />
      <variable citdl="int" name="PROTOCOL_SSLv3" />
      <variable citdl="int" name="PROTOCOL_TLSv1" />
      <scope doc="Mix string into the OpenSSL PRNG state." ilk="function" name="RAND_add" signature="RAND_add(string, entropy)" />
      <scope doc="Queries the entropy gather daemon (EGD) on the socket named by &apos;path&apos;." ilk="function" name="RAND_egd" signature="RAND_egd(path) -&gt; bytes" />
      <scope doc="Returns 1 if the OpenSSL PRNG has been seeded with enough data and 0 if not." ilk="function" name="RAND_status" signature="RAND_status() -&gt; 0 or 1" />
      <variable citdl="int" name="SOCK_STREAM" />
      <scope classrefs="error" ilk="class" name="SSLError" />
      <scope classrefs="socket" doc="This class implements a subtype of socket.socket that wraps the underlying OS socket in an SSL context when necessary, and provides read and write methods over that channel." ilk="class" line="85" lineend="368" name="SSLSocket">
        <variable attributes="protected __instancevar__" citdl="False" line="110" name="_closed" />
        <variable attributes="__instancevar__" citdl="True" line="142" name="do_handshake_on_connect" />
        <variable attributes="__instancevar__" citdl="True" line="143" name="suppress_ragged_eofs" />
        <scope doc="Perform a TLS/SSL handshake." ilk="function" line="320" lineend="329" name="do_handshake" signature="do_handshake(block=False)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable citdl="False" ilk="argument" name="block" />
          <variable citdl="self.gettimeout()" line="323" name="timeout" />
        </scope>
        <scope doc="Accepts a new connection from a remote client, and returns a tuple containing that new connection wrapped with a server- side SSL channel, and the address of the remote client." ilk="function" line="350" lineend="364" name="accept" returns="tuple" signature="accept()">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="315" lineend="318" name="_real_close" signature="_real_close()">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="302" lineend="305" name="shutdown" signature="shutdown(how)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="how" />
        </scope>
        <variable attributes="__instancevar__" citdl="CERT_NONE" line="139" name="cert_reqs" />
        <scope ilk="function" line="287" lineend="293" name="recvfrom_into" returns="socket.recvfrom_into()" signature="recvfrom_into(buffer, nbytes=None, flags=0)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="buffer" />
          <variable ilk="argument" name="nbytes" />
          <variable citdl="int" ilk="argument" name="flags" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="91" lineend="143" name="__init__" signature="SSLSocket(sock=None, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version=PROTOCOL_SSLv23, ca_certs=None, do_handshake_on_connect=True, family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None, suppress_ragged_eofs=True)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="sock" />
          <variable ilk="argument" name="keyfile" />
          <variable ilk="argument" name="certfile" />
          <variable citdl="False" ilk="argument" name="server_side" />
          <variable citdl="CERT_NONE" ilk="argument" name="cert_reqs" />
          <variable citdl="PROTOCOL_SSLv23" ilk="argument" name="ssl_version" />
          <variable ilk="argument" name="ca_certs" />
          <variable citdl="True" ilk="argument" name="do_handshake_on_connect" />
          <variable citdl="AF_INET" ilk="argument" name="family" />
          <variable citdl="SOCK_STREAM" ilk="argument" name="type" />
          <variable citdl="int" ilk="argument" name="proto" />
          <variable ilk="argument" name="fileno" />
          <variable citdl="True" ilk="argument" name="suppress_ragged_eofs" />
          <variable citdl="self.gettimeout()" line="127" name="timeout" />
        </scope>
        <variable attributes="__instancevar__" line="138" name="certfile" />
        <scope doc="Returns a formatted version of the data in the certificate provided by the other end of the SSL channel." ilk="function" line="180" lineend="187" name="getpeercert" returns="self._sslobj.peer_certificate()" signature="getpeercert(binary_form=False)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable citdl="False" ilk="argument" name="binary_form" />
        </scope>
        <scope ilk="function" line="196" lineend="216" name="send" returns="socket.send()" signature="send(data, flags=0)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="int" ilk="argument" name="flags" />
          <variable citdl="self._sslobj.write()" line="205" name="v" />
        </scope>
        <scope doc="Write DATA to the underlying SSL channel." ilk="function" line="173" lineend="178" name="write" returns="self._sslobj.write()" signature="write(data)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="366" lineend="368" name="__del__" signature="__del__()">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="145" lineend="147" name="dup" signature="dup()">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="149" lineend="151" name="_checkClosed" signature="_checkClosed(msg=None)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
        <scope ilk="function" line="295" lineend="300" name="pending" returns="self._sslobj.pending()" signature="pending()">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="307" lineend="313" name="unwrap" returns="self._sslobj.shutdown()" signature="unwrap()">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable citdl="self._sslobj.shutdown()" line="309" name="s" />
        </scope>
        <scope doc="Read up to LEN bytes and return them." ilk="function" line="153" lineend="171" name="read" returns="self._sslobj.read()" signature="read(len=0, buffer=None)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="len" />
          <variable ilk="argument" name="buffer" />
          <variable citdl="self._sslobj.read()" line="160" name="v" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_ssl.sslwrap()" line="119" name="_sslobj" />
        <scope ilk="function" line="256" lineend="277" name="recv_into" returns="socket.recv_into()" signature="recv_into(buffer, nbytes=None, flags=0)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="buffer" />
          <variable citdl="int" ilk="argument" name="nbytes" />
          <variable citdl="int" ilk="argument" name="flags" />
          <variable citdl="read()" line="269" name="v" />
        </scope>
        <scope ilk="function" line="189" lineend="194" name="cipher" returns="self._sslobj.cipher()" signature="cipher()">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="238" lineend="254" name="recv" returns="SSLSocket.read()" signature="recv(buflen=1024, flags=0)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="buflen" />
          <variable citdl="int" ilk="argument" name="flags" />
        </scope>
        <variable attributes="__instancevar__" citdl="PROTOCOL_SSLv23" line="140" name="ssl_version" />
        <scope ilk="function" line="279" lineend="285" name="recvfrom" returns="socket.recvfrom()" signature="recvfrom(addr, buflen=1024, flags=0)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="addr" />
          <variable citdl="int" ilk="argument" name="buflen" />
          <variable citdl="int" ilk="argument" name="flags" />
        </scope>
        <scope ilk="function" line="218" lineend="224" name="sendto" returns="socket.sendto()" signature="sendto(data, addr, flags=0)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable ilk="argument" name="addr" />
          <variable citdl="int" ilk="argument" name="flags" />
        </scope>
        <variable attributes="__instancevar__" line="141" name="ca_certs" />
        <scope ilk="function" line="226" lineend="236" name="sendall" returns="socket.sendall()" signature="sendall(data, flags=0)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="int" ilk="argument" name="flags" />
          <variable citdl="len()" line="229" name="amount" />
          <variable citdl="int" line="230" name="count" />
          <variable citdl="send()" line="232" name="v" />
        </scope>
        <variable attributes="__instancevar__" line="137" name="keyfile" />
        <scope doc="Connects to remote ADDR, and then wraps the connection in an SSL channel." ilk="function" line="331" lineend="348" name="connect" signature="connect(addr)">
          <variable citdl="SSLSocket" ilk="argument" name="self" />
          <variable ilk="argument" name="addr" />
        </scope>
      </scope>
      <variable citdl="int" name="SSL_ERROR_EOF" />
      <variable citdl="int" name="SSL_ERROR_INVALID_ERROR_CODE" />
      <variable citdl="int" name="SSL_ERROR_SSL" />
      <variable citdl="int" name="SSL_ERROR_SYSCALL" />
      <variable citdl="int" name="SSL_ERROR_WANT_CONNECT" />
      <variable citdl="int" name="SSL_ERROR_WANT_READ" />
      <variable citdl="int" name="SSL_ERROR_WANT_WRITE" />
      <variable citdl="int" name="SSL_ERROR_WANT_X509_LOOKUP" />
      <variable citdl="int" name="SSL_ERROR_ZERO_RETURN" />
      <import module="_ssl" />
      <import module="base64" />
      <scope doc="Takes a date-time string in standard ASN1_print form (&quot;MON DAY 24HOUR:MINUTE:SEC YEAR TIMEZONE&quot;) and return a Python time value in seconds past the epoch." ilk="function" line="385" lineend="391" name="cert_time_to_seconds" returns="time.mktime()" signature="cert_time_to_seconds(cert_time)">
        <variable ilk="argument" name="cert_time" />
      </scope>
      <scope ilk="function" line="436" lineend="446" name="get_protocol_name" returns="str" signature="get_protocol_name(protocol_code)">
        <variable ilk="argument" name="protocol_code" />
      </scope>
      <scope doc="Retrieve the certificate from the server at the specified address, and return it as a PEM-encoded string." ilk="function" line="418" lineend="434" name="get_server_certificate" returns="DER_cert_to_PEM_cert()" signature="get_server_certificate(addr, ssl_version=1, ca_certs=None)">
        <variable ilk="argument" name="addr" />
        <variable citdl="PROTOCOL_SSLv3" ilk="argument" name="ssl_version" />
        <variable citdl="s.getpeercert()" line="432" name="dercert" />
        <variable citdl="wrap_socket()" line="429" name="s" />
        <variable citdl="CERT_REQUIRED" line="426" name="cert_reqs" />
        <variable ilk="argument" name="ca_certs" />
      </scope>
      <scope classrefs="socket" doc="A subclass of _socket.socket adding the makefile() method." ilk="class" name="socket" />
      <scope classrefs="IOError" ilk="class" name="socket_error" />
      <import module="textwrap" />
      <import module="traceback" />
      <scope ilk="function" line="371" lineend="381" name="wrap_socket" returns="SSLSocket" signature="wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=0, ssl_version=2, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True)">
        <variable ilk="argument" name="certfile" />
        <variable citdl="False" ilk="argument" name="server_side" />
        <variable citdl="PROTOCOL_SSLv23" ilk="argument" name="ssl_version" />
        <variable citdl="True" ilk="argument" name="do_handshake_on_connect" />
        <variable ilk="argument" name="sock" />
        <variable citdl="CERT_NONE" ilk="argument" name="cert_reqs" />
        <variable ilk="argument" name="ca_certs" />
        <variable ilk="argument" name="keyfile" />
        <variable citdl="True" ilk="argument" name="suppress_ragged_eofs" />
      </scope>
    </scope>
    <scope doc="Fix incompatible renames  Fixes:" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_renames">
      <scope classrefs="BaseFix" ilk="class" name="FixRenames" />
      <variable citdl="dict" name="LOOKUP" />
      <variable citdl="dict" name="MAPPING" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope ilk="function" name="alternates" signature="alternates(members)" />
      <scope doc="Follow an attribute chain." ilk="function" name="attr_chain" signature="attr_chain(obj, attr)" />
      <scope ilk="function" name="build_pattern" signature="build_pattern()" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Fast profiler" ilk="blob" lang="Python3" name="_lsprof">
      <scope classrefs="object" doc="Profiler(custom_timer=None, time_unit=None, subcalls=True, builtins=True)  Builds a profiler object using the specified timer function." ilk="class" name="Profiler" />
      <scope classrefs="object" ilk="class" name="profiler_entry" />
      <scope classrefs="object" ilk="class" name="profiler_subentry" />
    </scope>
    <scope doc="Bisection algorithms." ilk="blob" lang="Python3" name="bisect">
      <scope doc="Alias for bisect_right()." ilk="function" line="45" name="bisect" />
      <scope doc="Return the index where to insert item x in list a, assuming a is sorted." ilk="function" line="67" lineend="86" name="bisect_left" returns="int" signature="bisect_left(a, x[, lo[, hi]]) -&gt; index">
        <variable ilk="argument" name="a" />
        <variable ilk="argument" name="x" />
        <variable citdl="int" ilk="argument" name="hi" />
        <variable citdl="int" line="83" name="mid" />
        <variable citdl="int" ilk="argument" name="lo" />
      </scope>
      <scope doc="Return the index where to insert item x in list a, assuming a is sorted." ilk="function" line="24" lineend="43" name="bisect_right" returns="int" signature="bisect_right(a, x[, lo[, hi]]) -&gt; index">
        <variable ilk="argument" name="a" />
        <variable ilk="argument" name="x" />
        <variable citdl="int" ilk="argument" name="hi" />
        <variable citdl="int" line="40" name="mid" />
        <variable citdl="int" ilk="argument" name="lo" />
      </scope>
      <scope doc="Alias for insort_right()." ilk="function" line="22" name="insort" />
      <scope doc="Insert item x in list a, and keep it sorted assuming a is sorted." ilk="function" line="47" lineend="64" name="insort_left" signature="insort_left(a, x[, lo[, hi]])">
        <variable ilk="argument" name="a" />
        <variable ilk="argument" name="x" />
        <variable citdl="int" ilk="argument" name="hi" />
        <variable citdl="int" line="61" name="mid" />
        <variable citdl="int" ilk="argument" name="lo" />
      </scope>
      <scope doc="Insert item x in list a, and keep it sorted assuming a is sorted." ilk="function" line="3" lineend="20" name="insort_right" signature="insort_right(a, x[, lo[, hi]])">
        <variable ilk="argument" name="a" />
        <variable ilk="argument" name="x" />
        <variable citdl="len()" ilk="argument" name="hi" />
        <variable citdl="int" line="17" name="mid" />
        <variable citdl="int" ilk="argument" name="lo" />
      </scope>
    </scope>
    <scope doc="Macintosh binhex compression/decompression.  easy interface:" ilk="blob" lang="Python3" name="binhex">
      <scope classrefs="object" ilk="class" line="140" lineend="220" name="BinHex">
        <scope attributes="protected" ilk="function" line="157" lineend="174" name="_writeinfo" signature="_writeinfo(name, finfo)">
          <variable citdl="BinHex" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="finfo" />
          <variable citdl="len()" line="158" name="nl" />
          <variable citdl="bytes()" line="161" name="d" />
          <variable citdl="finfo.Type" line="162" name="tp" />
          <variable citdl="cr.encode()" line="162" name="cr" />
          <variable citdl="finfo.Type" line="167" name="d2" />
          <variable citdl="struct.pack()" line="170" name="d3" />
          <variable citdl="struct.pack()" line="171" name="d4" />
          <variable citdl="struct.pack()" line="172" name="info" />
        </scope>
        <variable attributes="__instancevar__" citdl="len()" line="152" name="dlen" />
        <scope ilk="function" line="196" lineend="200" name="close_data" signature="close_data()">
          <variable citdl="BinHex" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="len()" line="153" name="rlen" />
        <variable attributes="__instancevar__" citdl="_DID_DATA" line="155" name="state" />
        <scope attributes="protected" ilk="function" line="180" lineend="188" name="_writecrc" signature="_writecrc()">
          <variable citdl="BinHex" ilk="argument" name="self" />
          <variable citdl="str" line="184" name="fmt" />
        </scope>
        <scope ilk="function" line="190" lineend="194" name="write" signature="write(data)">
          <variable citdl="BinHex" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="149" name="crc" />
        <variable attributes="__instancevar__" citdl="_Rlecoderengine" line="148" name="ofp" />
        <scope ilk="function" line="202" lineend="208" name="write_rsrc" signature="write_rsrc(data)">
          <variable citdl="BinHex" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="210" lineend="220" name="close" signature="close()">
          <variable citdl="BinHex" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="176" lineend="178" name="_write" signature="_write(data)">
          <variable citdl="BinHex" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="141" lineend="155" name="__init__" signature="BinHex(name_finfo_dlen_rlen, ofp)">
          <variable citdl="BinHex" ilk="argument" name="self" />
          <variable ilk="argument" name="name_finfo_dlen_rlen" />
          <variable citdl="io.open()" ilk="argument" name="ofp" />
          <variable line="144" name="ofname" />
          <variable citdl="_Hqxcoderengine" line="147" name="hqxer" />
          <variable citdl="FInfo" line="151" name="finfo" />
        </scope>
      </scope>
      <scope classrefs="Exception" ilk="class" line="32" lineend="33" name="Error" />
      <scope classrefs="object" ilk="class" line="47" lineend="51" name="FInfo">
        <variable attributes="__instancevar__" citdl="int" line="51" name="Flags" />
        <variable attributes="__instancevar__" citdl="str" line="49" name="Type" />
        <scope attributes="__ctor__" ilk="function" line="48" lineend="51" name="__init__" signature="FInfo()">
          <variable citdl="FInfo" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="50" name="Creator" />
      </scope>
      <scope classrefs="object" ilk="class" line="340" lineend="438" name="HexBin">
        <variable attributes="__instancevar__" citdl="_Rledecoderengine" line="359" name="ifp" />
        <variable attributes="__instancevar__" citdl="min()" line="387" name="dlen" />
        <scope ilk="function" line="412" lineend="418" name="close_data" signature="close_data()">
          <variable citdl="HexBin" ilk="argument" name="self" />
          <variable citdl="_read()" line="416" name="dummy" />
        </scope>
        <scope attributes="protected" ilk="function" line="368" lineend="376" name="_checkcrc" signature="_checkcrc()">
          <variable citdl="HexBin" ilk="argument" name="self" />
          <variable citdl="int" line="369" name="filecrc" />
        </scope>
        <scope attributes="protected" ilk="function" line="363" lineend="366" name="_read" returns="self.ifp.read()" signature="_read(len)">
          <variable citdl="HexBin" ilk="argument" name="self" />
          <variable ilk="argument" name="len" />
          <variable citdl="self.ifp.read()" line="364" name="data" />
        </scope>
        <variable attributes="__instancevar__" citdl="min()" line="388" name="rlen" />
        <variable attributes="__instancevar__" citdl="int" line="360" name="crc" />
        <variable attributes="__instancevar__" citdl="_DID_DATA" line="396" name="state" />
        <scope attributes="protected" ilk="function" line="378" lineend="396" name="_readheader" signature="_readheader()">
          <variable citdl="HexBin" ilk="argument" name="self" />
          <variable citdl="_read()" line="379" name="len" />
          <variable citdl="_read()" line="380" name="fname" />
          <variable citdl="_read()" line="381" name="rest" />
          <variable citdl="list" line="384" name="type" />
          <variable citdl="list" line="385" name="creator" />
          <variable line="386" name="flags" />
        </scope>
        <scope ilk="function" line="398" lineend="410" name="read" returns="str" signature="read(*n)">
          <variable citdl="HexBin" ilk="argument" name="self" />
          <variable attributes="varargs" citdl="min()" ilk="argument" name="n" />
          <variable citdl="str" line="406" name="rv" />
        </scope>
        <scope ilk="function" line="420" lineend="431" name="read_rsrc" returns="HexBin._read()" signature="read_rsrc(*n)">
          <variable citdl="HexBin" ilk="argument" name="self" />
          <variable attributes="varargs" citdl="min()" ilk="argument" name="n" />
        </scope>
        <variable attributes="__instancevar__" citdl="_read()" line="390" name="FName" />
        <scope ilk="function" line="433" lineend="438" name="close" signature="close()">
          <variable citdl="HexBin" ilk="argument" name="self" />
          <variable citdl="read_rsrc()" line="435" name="dummy" />
        </scope>
        <variable attributes="__instancevar__" citdl="FInfo()" line="391" name="FInfo" />
        <scope attributes="__ctor__" ilk="function" line="341" lineend="361" name="__init__" signature="HexBin(ifp)">
          <variable citdl="HexBin" ilk="argument" name="self" />
          <variable citdl="io.open()" ilk="argument" name="ifp" />
          <variable citdl="ifp.read()" line="348" name="ch" />
          <variable citdl="_Hqxdecoderengine" line="358" name="hqxifp" />
        </scope>
      </scope>
      <variable citdl="int" line="40" name="LINELEN" />
      <variable citdl="int" line="39" name="REASONABLY_LARGE" />
      <variable citdl="bytes" line="41" name="RUNCHAR" />
      <variable citdl="list" line="30" name="__all__" />
      <import module="binascii" />
      <scope doc="create binhex-encoded copy of a file" ilk="function" line="222" lineend="242" name="binhex" signature="binhex(infilename, outfilename)">
        <variable citdl="openrsrc" line="227" name="ifp" />
        <variable citdl="ifp.read()" line="230" name="d" />
        <variable ilk="argument" name="inp" />
        <variable citdl="BinHex" line="225" name="ofp" />
        <variable citdl="getfileinfo()" line="224" name="finfo" />
        <variable ilk="argument" name="out" />
      </scope>
      <scope ilk="function" line="53" lineend="65" name="getfileinfo" returns="tuple" signature="getfileinfo(name)">
        <variable citdl="io.open()" line="55" name="fp" />
        <variable ilk="argument" name="name" />
        <variable citdl="fp.tell()" line="61" name="dsize" />
        <variable citdl="file.replace()" line="64" name="file" />
        <variable citdl="FInfo" line="54" name="finfo" />
        <variable citdl="fp.read()" line="57" name="data" />
      </scope>
      <scope doc="Decode binhexed file" ilk="function" line="440" lineend="466" name="hexbin" signature="hexbin(infilename, outfilename)">
        <variable citdl="HexBin" line="442" name="ifp" />
        <variable citdl="ifp.read_rsrc()" line="450" name="d" />
        <variable ilk="argument" name="inp" />
        <variable citdl="openrsrc" line="447" name="ofp" />
        <variable citdl="ifp.FInfo" line="443" name="finfo" />
        <variable citdl="ifp.FName" ilk="argument" name="out" />
      </scope>
      <import module="io" />
      <scope classrefs="object" ilk="class" line="67" lineend="78" name="openrsrc">
        <scope ilk="function" line="71" lineend="72" name="read" returns="str" signature="read(*args)">
          <variable citdl="openrsrc" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="74" lineend="75" name="write" signature="write(*args)">
          <variable citdl="openrsrc" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="68" lineend="69" name="__init__" signature="openrsrc(*args)">
          <variable citdl="openrsrc" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="77" lineend="78" name="close" signature="close()">
          <variable citdl="openrsrc" ilk="argument" name="self" />
        </scope>
      </scope>
      <import module="os" />
      <import module="struct" />
      <import module="sys" />
      <scope attributes="protected __hidden__" doc="Write data to the coder in 3-byte chunks" ilk="class" line="80" lineend="116" name="_Hqxcoderengine">
        <scope attributes="__ctor__" ilk="function" line="83" lineend="87" name="__init__" signature="_Hqxcoderengine(ofp)">
          <variable citdl="_Hqxcoderengine" ilk="argument" name="self" />
          <variable ilk="argument" name="ofp" />
        </scope>
        <variable attributes="__instancevar__" line="84" name="ofp" />
        <variable attributes="__instancevar__" citdl="str" line="85" name="data" />
        <variable attributes="__instancevar__" citdl="str" line="86" name="hqxdata" />
        <variable attributes="__instancevar__" citdl="int" line="87" name="linelen" />
        <scope ilk="function" line="89" lineend="98" name="write" signature="write(data)">
          <variable citdl="_Hqxcoderengine" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="data" />
          <variable citdl="len()" line="91" name="datalen" />
          <variable citdl="int" line="92" name="todo" />
        </scope>
        <scope attributes="protected" ilk="function" line="100" lineend="109" name="_flush" signature="_flush(force)">
          <variable citdl="_Hqxcoderengine" ilk="argument" name="self" />
          <variable ilk="argument" name="force" />
          <variable citdl="int" line="101" name="first" />
          <variable citdl="int" line="103" name="last" />
        </scope>
        <scope ilk="function" line="111" lineend="116" name="close" signature="close()">
          <variable citdl="_Hqxcoderengine" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Read data via the RLE-coder" ilk="class" line="286" lineend="338" name="_Rledecoderengine">
        <scope attributes="__ctor__" ilk="function" line="289" lineend="293" name="__init__" signature="_Rledecoderengine(ifp)">
          <variable citdl="_Rledecoderengine" ilk="argument" name="self" />
          <variable ilk="argument" name="ifp" />
        </scope>
        <variable attributes="__instancevar__" line="290" name="ifp" />
        <variable attributes="__instancevar__" citdl="str" line="291" name="pre_buffer" />
        <variable attributes="__instancevar__" citdl="list" line="292" name="post_buffer" />
        <variable attributes="__instancevar__" citdl="int" line="293" name="eof" />
        <scope ilk="function" line="295" lineend="300" name="read" returns="list" signature="read(wtd)">
          <variable citdl="_Rledecoderengine" ilk="argument" name="self" />
          <variable ilk="argument" name="wtd" />
          <variable citdl="list" line="298" name="rv" />
        </scope>
        <scope attributes="protected" ilk="function" line="302" lineend="335" name="_fill" signature="_fill(wtd)">
          <variable citdl="_Rledecoderengine" ilk="argument" name="self" />
          <variable ilk="argument" name="wtd" />
          <variable citdl="len()" line="321" name="mark" />
        </scope>
        <scope ilk="function" line="337" lineend="338" name="close" signature="close()">
          <variable citdl="_Rledecoderengine" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Write data to the RLE-coder in suitably large chunks" ilk="class" line="118" lineend="138" name="_Rlecoderengine">
        <scope attributes="__ctor__" ilk="function" line="121" lineend="123" name="__init__" signature="_Rlecoderengine(ofp)">
          <variable citdl="_Rlecoderengine" ilk="argument" name="self" />
          <variable ilk="argument" name="ofp" />
        </scope>
        <variable attributes="__instancevar__" line="122" name="ofp" />
        <variable attributes="__instancevar__" citdl="str" line="123" name="data" />
        <scope ilk="function" line="125" lineend="131" name="write" signature="write(data)">
          <variable citdl="_Rlecoderengine" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="binascii.rlecode_hqx()" line="129" name="rledata" />
        </scope>
        <scope ilk="function" line="133" lineend="138" name="close" signature="close()">
          <variable citdl="_Rlecoderengine" ilk="argument" name="self" />
          <variable citdl="binascii.rlecode_hqx()" line="135" name="rledata" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Read data via the decoder in 4-byte chunks" ilk="class" line="244" lineend="284" name="_Hqxdecoderengine">
        <scope attributes="__ctor__" ilk="function" line="247" lineend="249" name="__init__" signature="_Hqxdecoderengine(ifp)">
          <variable citdl="_Hqxdecoderengine" ilk="argument" name="self" />
          <variable ilk="argument" name="ifp" />
        </scope>
        <variable attributes="__instancevar__" line="248" name="ifp" />
        <variable attributes="__instancevar__" citdl="int" line="249" name="eof" />
        <scope doc="Read at least wtd bytes (or until EOF)" ilk="function" line="251" lineend="281" name="read" returns="str" signature="read(totalwtd)">
          <variable citdl="_Hqxdecoderengine" ilk="argument" name="self" />
          <variable ilk="argument" name="totalwtd" />
          <variable citdl="str" line="253" name="decdata" />
          <variable citdl="int" line="254" name="wtd" />
          <variable citdl="self.ifp.read()" line="261" name="data" />
          <variable citdl="self.ifp.read()" line="273" name="newdata" />
        </scope>
        <scope ilk="function" line="283" lineend="284" name="close" signature="close()">
          <variable citdl="_Hqxdecoderengine" ilk="argument" name="self" />
        </scope>
      </scope>
    </scope>
    <scope doc="Generate Python documentation in HTML or text for interactive use.  In the Python interpreter, do &quot;from pydoc import help&quot; to provide online" ilk="blob" lang="Python3" name="pydoc">
      <scope classrefs="object" ilk="class" line="308" lineend="359" name="Doc">
        <scope doc="Raise an exception for unimplemented types." ilk="function" line="327" lineend="331" name="fail" signature="fail(object, name=None, *args)">
          <variable citdl="Doc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="name" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="str" line="329" name="message" />
        </scope>
        <scope doc="Generate documentation for an object." ilk="function" line="309" lineend="325" name="document" returns="self.docother()" signature="document(object, name=None, *args)">
          <variable citdl="Doc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="name" />
          <variable attributes="varargs" citdl="tuple" ilk="argument" name="args" />
        </scope>
        <scope doc="Return the location of module docs or None" ilk="function" line="335" lineend="359" name="getdocloc" returns="tuple" signature="getdocloc(object)">
          <variable citdl="Doc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable citdl="str" line="339" name="file" />
          <variable citdl="os.environ.get()" line="343" name="docloc" />
          <variable citdl="os.path.join()" line="345" name="basedir" />
        </scope>
        <variable citdl="Doc.fail" line="333" name="docmodule" />
      </scope>
      <scope classrefs="Exception" doc="Errors that occurred while trying to import something to document it." ilk="class" line="230" lineend="238" name="ErrorDuringImport">
        <scope ilk="function" line="236" lineend="238" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="ErrorDuringImport" ilk="argument" name="self" />
          <variable citdl="self.exc.__name__" line="237" name="exc" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="232" lineend="234" name="__init__" signature="ErrorDuringImport(filename, exc_info)">
          <variable citdl="ErrorDuringImport" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="exc_info" />
        </scope>
        <variable attributes="__instancevar__" line="233" name="filename" />
      </scope>
      <scope classrefs="Doc" doc="Formatter class for HTML documentation." ilk="class" line="405" lineend="935" name="HTMLDoc">
        <scope doc="Make a link for a class." ilk="function" line="489" lineend="495" name="classlink" returns="tuple" signature="classlink(object, modname)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="modname" />
          <variable citdl="object.__name__" line="491" name="name" />
          <variable citdl="sys.modules.get()" line="491" name="module" />
        </scope>
        <scope doc="Format an argument default value as text." ilk="function" line="835" lineend="837" name="formatvalue" returns="HTMLDoc.grey()" signature="formatvalue(object)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
        <scope doc="Produce HTML documentation for a data object." ilk="function" line="916" lineend="919" name="docother" returns="str" signature="docother(object, name=None, mod=None, *ignored)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable attributes="varargs" ilk="argument" name="ignored" />
          <variable citdl="str" line="918" name="lhs" />
        </scope>
        <scope doc="Produce HTML for a class tree as given by inspect.getclasstree()." ilk="function" line="554" lineend="571" name="formattree" returns="HTMLDoc.classlink()" signature="formattree(tree, modname, parent=None)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="tree" />
          <variable ilk="argument" name="modname" />
          <variable ilk="argument" name="parent" />
          <variable citdl="str" line="556" name="result" />
          <variable citdl="list" line="563" name="parents" />
        </scope>
        <variable citdl="_repr_instance.escape" line="412" name="escape" />
        <scope doc="Produce HTML documentation for a function or method object." ilk="function" line="839" lineend="897" name="docroutine" returns="HTMLDoc.classlink()" signature="docroutine(object, name=None, mod=None, funcs={}, classes={}, methods={}, cl=None)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable citdl="object.__func__" ilk="argument" name="object" />
          <variable citdl="object.__name__" ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable citdl="dict" ilk="argument" name="funcs" />
          <variable citdl="dict" ilk="argument" name="classes" />
          <variable citdl="dict" ilk="argument" name="methods" />
          <variable ilk="argument" name="cl" />
          <variable citdl="object.__name__" line="842" name="realname" />
          <variable citdl="str" line="844" name="anchor" />
          <variable citdl="str" line="845" name="note" />
          <variable citdl="int" line="846" name="skipdocs" />
          <variable citdl="object.__self__.__class__" line="848" name="imclass" />
          <variable citdl="str" line="861" name="title" />
          <variable citdl="object.__name__" line="865" name="reallink" />
          <variable citdl="list" line="875" name="argspec" />
          <variable citdl="str" line="888" name="decl" />
          <variable citdl="markup()" line="894" name="doc" />
        </scope>
        <scope doc="Generate an HTML index for a directory of modules." ilk="function" line="925" lineend="935" name="index" returns="HTMLDoc.bigsection()" signature="index(dir, shadowed=None)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
          <variable citdl="dict" ilk="argument" name="shadowed" />
          <variable citdl="list" line="927" name="modpkgs" />
          <variable citdl="multicolumn()" line="934" name="contents" />
        </scope>
        <scope doc="Format a section with a heading." ilk="function" line="435" lineend="455" name="section" returns="tuple" signature="section(title, fgcol, bgcol, contents, width=6, prelude=&apos;&apos;, marginalia=None, gap=&apos;&amp;nbsp;&apos;)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="fgcol" />
          <variable ilk="argument" name="bgcol" />
          <variable ilk="argument" name="contents" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable citdl="str" ilk="argument" name="prelude" />
          <variable citdl="str" ilk="argument" name="marginalia" />
          <variable citdl="str" ilk="argument" name="gap" />
          <variable citdl="str" line="440" name="result" />
        </scope>
        <scope doc="Make a link for a module." ilk="function" line="497" lineend="499" name="modulelink" returns="tuple" signature="modulelink(object)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
        <variable attributes="protected" citdl="HTMLRepr" line="410" name="_repr_instance" />
        <scope doc="Produce html documentation for a property." ilk="function" line="912" lineend="914" name="docproperty" returns="HTMLDoc._docdescriptor()" signature="docproperty(object, name=None, mod=None, cl=None)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable ilk="argument" name="cl" />
        </scope>
        <scope doc="Format literal preformatted text." ilk="function" line="462" lineend="466" name="preformat" returns="replace()" signature="preformat(text)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable citdl="escape()" ilk="argument" name="text" />
        </scope>
        <scope doc="Make a link for an identifier, given name-to-URL mappings." ilk="function" line="482" lineend="487" name="namelink" returns="tuple" signature="namelink(name, *dicts)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable attributes="varargs" ilk="argument" name="dicts" />
        </scope>
        <scope attributes="protected" ilk="function" line="899" lineend="910" name="_docdescriptor" returns="str.join()" signature="_docdescriptor(name, value, mod)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="mod" />
          <variable citdl="list" line="900" name="results" />
          <variable citdl="results.append" line="901" name="push" />
          <variable citdl="markup()" line="906" name="doc" />
        </scope>
        <scope doc="Produce HTML documentation for a module object." ilk="function" line="573" lineend="695" name="docmodule" returns="str" signature="docmodule(object, name=None, mod=None, *ignored)">
          <import line="592" module="nturl2path" />
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable citdl="object.__name__" ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable attributes="varargs" ilk="argument" name="ignored" />
          <variable citdl="object.__all__" line="577" name="all" />
          <variable citdl="name.split()" line="580" name="parts" />
          <variable citdl="list" line="581" name="links" />
          <variable citdl="str.join()" line="586" name="linkedname" />
          <variable citdl="str.join()" line="587" name="head" />
          <variable citdl="inspect.getabsfile()" line="589" name="path" />
          <variable citdl="nturl2path.pathname2url()" line="590" name="url" />
          <variable citdl="str" line="594" name="filelink" />
          <variable citdl="list" line="597" name="info" />
          <variable citdl="str()" line="599" name="version" />
          <variable citdl="str" line="607" name="docloc" />
          <variable citdl="HTMLDoc.bigsection()" line="612" name="result" />
          <variable citdl="inspect.getmembers()" line="616" name="modules" />
          <variable citdl="dict" line="618" name="cdict" />
          <variable citdl="list" line="618" name="classes" />
          <variable citdl="base.__name__" line="628" name="key" />
          <variable citdl="base.__module__" line="628" name="modname" />
          <variable citdl="sys.modules.get()" line="629" name="module" />
          <variable citdl="list" line="634" name="funcs" />
          <variable citdl="dict" line="634" name="fdict" />
          <variable citdl="list" line="643" name="data" />
          <variable citdl="markup()" line="648" name="doc" />
          <variable citdl="list" line="653" name="modpkgs" />
          <variable citdl="list" line="657" name="contents" />
          <variable citdl="list" line="667" name="classlist" />
        </scope>
        <variable citdl="_repr_instance.repr" line="411" name="repr" />
        <scope doc="Produce html documentation for a data descriptor." ilk="function" line="921" lineend="923" name="docdata" returns="HTMLDoc._docdescriptor()" signature="docdata(object, name=None, mod=None, cl=None)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable ilk="argument" name="cl" />
        </scope>
        <scope doc="Make a link for a module or package to display in an index." ilk="function" line="501" lineend="514" name="modpkglink" returns="tuple" signature="modpkglink(modpkginfo)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="modpkginfo" />
          <variable citdl="str" line="507" name="url" />
          <variable citdl="name" line="511" name="text" />
        </scope>
        <scope doc="Format a section with a big heading." ilk="function" line="457" lineend="460" name="bigsection" returns="HTMLDoc.section()" signature="bigsection(title, *args)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="title" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope doc="Mark up some plain text, given a context of symbols to look for." ilk="function" line="516" lineend="550" name="markup" returns="str.join()" signature="markup(text, escape=None, funcs={}, classes={}, methods={})">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable citdl="_repr_instance.escape" ilk="argument" name="escape" />
          <variable citdl="dict" ilk="argument" name="funcs" />
          <variable citdl="dict" ilk="argument" name="classes" />
          <variable citdl="dict" ilk="argument" name="methods" />
          <variable citdl="list" line="520" name="results" />
          <variable citdl="int" line="521" name="here" />
          <variable citdl="re.compile()" line="522" name="pattern" />
          <variable citdl="pattern.search()" line="527" name="match" />
          <variable citdl="int()" line="534" name="url" />
        </scope>
        <scope ilk="function" line="480" lineend="480" name="grey" returns="str" signature="grey(text)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
        </scope>
        <scope doc="Format an HTML page." ilk="function" line="414" lineend="422" name="page" returns="tuple" signature="page(title, contents)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="contents" />
        </scope>
        <scope doc="Produce HTML documentation for a class object." ilk="function" line="697" lineend="833" name="docclass" returns="HTMLDoc.section()" signature="docclass(object, name=None, mod=None, funcs={}, classes={}, *ignored)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable citdl="object.__name__" ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable citdl="dict" ilk="argument" name="funcs" />
          <variable citdl="dict" ilk="argument" name="classes" />
          <variable attributes="varargs" ilk="argument" name="ignored" />
          <variable citdl="object.__name__" line="700" name="realname" />
          <variable citdl="object.__bases__" line="702" name="bases" />
          <variable citdl="list" line="704" name="contents" />
          <variable citdl="contents.append" line="705" name="push" />
          <scope ilk="class" line="708" lineend="714" name="HorizontalRule">
            <scope attributes="__ctor__" ilk="function" line="709" lineend="710" name="__init__" signature="HorizontalRule()">
              <variable citdl="HorizontalRule" ilk="argument" name="self" />
            </scope>
            <variable attributes="__instancevar__" citdl="int" line="710" name="needone" />
            <scope ilk="function" line="711" lineend="714" name="maybe" signature="maybe()">
              <variable citdl="HorizontalRule" ilk="argument" name="self" />
            </scope>
          </scope>
          <variable citdl="HorizontalRule" line="715" name="hr" />
          <variable citdl="deque" line="718" name="mro" />
          <scope ilk="function" line="727" lineend="736" name="spill" signature="spill(msg, attrs, predicate)">
            <variable ilk="argument" name="msg" />
            <variable ilk="argument" name="attrs" />
            <variable ilk="argument" name="predicate" />
          </scope>
          <scope ilk="function" line="738" lineend="745" name="spilldescriptors" signature="spilldescriptors(msg, attrs, predicate)">
            <variable ilk="argument" name="msg" />
            <variable ilk="argument" name="attrs" />
            <variable ilk="argument" name="predicate" />
          </scope>
          <scope ilk="function" line="747" lineend="766" name="spilldata" signature="spilldata(msg, attrs, predicate)">
            <variable ilk="argument" name="msg" />
            <variable ilk="argument" name="attrs" />
            <variable ilk="argument" name="predicate" />
            <variable citdl="self.docother()" line="753" name="base" />
            <variable citdl="getattr()" line="755" name="doc" />
          </scope>
          <variable citdl="spill()" line="768" name="attrs" />
          <variable citdl="dict" line="772" name="mdict" />
          <variable citdl="getattr()" line="775" name="value" />
          <variable citdl="mro.popleft()" line="785" name="thisclass" />
          <variable citdl="str" line="794" name="tag" />
          <variable citdl="str" line="820" name="title" />
          <variable citdl="list" line="826" name="parents" />
          <variable citdl="markup()" line="830" name="doc" />
        </scope>
        <scope doc="Format a list of items into a multi-column list." ilk="function" line="468" lineend="478" name="multicolumn" returns="str" signature="multicolumn(list, format, cols=4)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="list" />
          <variable ilk="argument" name="format" />
          <variable citdl="int" ilk="argument" name="cols" />
          <variable citdl="str" line="470" name="result" />
          <variable citdl="int" line="471" name="rows" />
        </scope>
        <scope doc="Format a page heading." ilk="function" line="424" lineend="433" name="heading" returns="tuple" signature="heading(title, fgcol, bgcol, extras=&apos;&apos;)">
          <variable citdl="HTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="fgcol" />
          <variable ilk="argument" name="bgcol" />
          <variable citdl="str" ilk="argument" name="extras" />
        </scope>
      </scope>
      <scope classrefs="Repr" doc="Class for safely making an HTML representation of a Python object." ilk="class" line="363" lineend="403" name="HTMLRepr">
        <scope ilk="function" line="397" lineend="401" name="repr_instance" returns="HTMLRepr.escape()" signature="repr_instance(x, level)">
          <variable citdl="HTMLRepr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
        </scope>
        <variable citdl="HTMLRepr.repr_string" line="395" name="repr_str" />
        <scope ilk="function" line="384" lineend="393" name="repr_string" returns="str" signature="repr_string(x, level)">
          <variable citdl="HTMLRepr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable citdl="cram()" line="385" name="test" />
          <variable citdl="repr()" line="386" name="testrepr" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="369" name="maxstring" />
        <scope ilk="function" line="374" lineend="375" name="repr" returns="Repr.repr()" signature="repr(object)">
          <variable citdl="HTMLRepr" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
        <scope ilk="function" line="377" lineend="382" name="repr1" returns="getattr()()" signature="repr1(x, level)">
          <variable citdl="HTMLRepr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable citdl="str.join()" line="379" name="methodname" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="368" name="maxdict" />
        <scope ilk="function" line="371" lineend="372" name="escape" returns="replace()" signature="escape(text)">
          <variable citdl="HTMLRepr" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="367" name="maxlist" />
        <scope attributes="__ctor__" ilk="function" line="365" lineend="369" name="__init__" signature="HTMLRepr()">
          <variable citdl="HTMLRepr" ilk="argument" name="self" />
        </scope>
        <variable citdl="HTMLRepr.repr_string" line="403" name="repr_unicode" />
      </scope>
      <scope classrefs="object" ilk="class" line="1527" lineend="1872" name="Helper">
        <scope ilk="function" line="1803" lineend="1808" name="listtopics" signature="listtopics()">
          <variable citdl="Helper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1788" lineend="1793" name="listkeywords" signature="listkeywords()">
          <variable citdl="Helper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1842" lineend="1845" name="showsymbol" signature="showsymbol(symbol)">
          <variable citdl="Helper" ilk="argument" name="self" />
          <variable ilk="argument" name="symbol" />
          <variable line="1843" name="target" />
        </scope>
        <scope ilk="function" line="1810" lineend="1840" name="showtopic" returns="Helper.showtopic()" signature="showtopic(topic, more_xrefs=&apos;&apos;)">
          <import line="1812" module="pydoc_data.topics" />
          <import line="1836" module="io" />
          <import line="1836" module="formatter" />
          <variable citdl="Helper" ilk="argument" name="self" />
          <variable ilk="argument" name="topic" />
          <variable citdl="str" ilk="argument" name="more_xrefs" />
          <variable citdl="self.topics.get()" line="1819" name="target" />
          <variable line="1828" name="doc" />
          <variable citdl="str" line="1834" name="xrefs" />
          <variable citdl="io.StringIO()" line="1837" name="buffer" />
        </scope>
        <variable citdl="symbols.get()" line="1603" name="topics" />
        <scope ilk="function" line="1775" lineend="1786" name="list" signature="list(items, columns=4, width=80)">
          <variable citdl="Helper" ilk="argument" name="self" />
          <variable citdl="()" ilk="argument" name="items" />
          <variable citdl="int" ilk="argument" name="columns" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable citdl="int" line="1777" name="colw" />
          <variable citdl="int" line="1778" name="rows" />
          <variable citdl="row" line="1781" name="i" />
        </scope>
        <variable attributes="__instancevar__" line="1697" name="input" />
        <scope doc="Read one line, using input() when appropriate." ilk="function" line="1731" lineend="1738" name="getline" returns="Helper.input()" signature="getline(prompt)">
          <variable citdl="Helper" ilk="argument" name="self" />
          <variable ilk="argument" name="prompt" />
        </scope>
        <variable citdl="dict" line="1584" name="symbols" />
        <variable citdl="dict" line="1540" name="keywords" />
        <scope ilk="function" line="1758" lineend="1773" name="intro" signature="intro()">
          <variable citdl="Helper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1706" lineend="1717" name="__call__" signature="__call__(request=None)">
          <variable citdl="Helper" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope ilk="function" line="1700" lineend="1704" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Helper" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected" citdl="dict" line="1573" name="_symbols_inverse" />
        <scope ilk="function" line="1847" lineend="1872" name="listmodules" signature="listmodules(key=&apos;&apos;)">
          <variable citdl="Helper" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="key" />
          <variable citdl="dict" line="1859" name="modules" />
          <scope ilk="function" line="1860" lineend="1864" name="callback" signature="callback(path, modname, desc, modules=modules)">
            <variable ilk="argument" name="path" />
            <variable citdl="list" ilk="argument" name="modname" />
            <variable ilk="argument" name="desc" />
            <variable citdl="dict" ilk="argument" name="modules" />
          </scope>
          <scope ilk="function" line="1865" lineend="1866" name="onerror" signature="onerror(modname)">
            <variable ilk="argument" name="modname" />
          </scope>
        </scope>
        <variable attributes="__instancevar__" line="1698" name="output" />
        <scope ilk="function" line="1795" lineend="1801" name="listsymbols" signature="listsymbols()">
          <variable citdl="Helper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1719" lineend="1729" name="interact" signature="interact()">
          <variable citdl="Helper" ilk="argument" name="self" />
          <variable citdl="self.getline()" line="1723" name="request" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1696" lineend="1698" name="__init__" signature="Helper(input, output)">
          <variable citdl="Helper" ilk="argument" name="self" />
          <variable ilk="argument" name="input" />
          <variable ilk="argument" name="output" />
        </scope>
        <scope ilk="function" line="1740" lineend="1756" name="help" signature="help(request)">
          <variable citdl="Helper" ilk="argument" name="self" />
          <variable citdl="request.strip()" ilk="argument" name="request" />
        </scope>
      </scope>
      <scope classrefs="object" doc="An interruptible scanner that searches module synopses." ilk="class" line="1900" lineend="1958" name="ModuleScanner">
        <variable attributes="__instancevar__" citdl="False" line="1905" name="quit" />
        <scope ilk="function" line="1903" lineend="1958" name="run" signature="run(callback, key=None, completer=None, onerror=None)">
          <import line="1938" module="io" />
          <variable citdl="ModuleScanner" ilk="argument" name="self" />
          <variable ilk="argument" name="callback" />
          <variable citdl="key.lower()" ilk="argument" name="key" />
          <variable ilk="argument" name="completer" />
          <variable ilk="argument" name="onerror" />
          <variable citdl="dict" line="1906" name="seen" />
          <variable citdl="str" line="1914" name="name" />
          <variable citdl="source_synopsis()" line="1915" name="desc" />
          <variable citdl="importer.find_module()" line="1927" name="loader" />
          <variable citdl="loader.get_source()" line="1933" name="source" />
          <variable citdl="getattr()" line="1941" name="path" />
          <variable citdl="loader.load_module()" line="1946" name="module" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" name="Repr" />
      <scope classrefs="object" doc="A generic tree iterator." ilk="class" line="1876" lineend="1897" name="Scanner">
        <variable attributes="__instancevar__" line="1882" name="descendp" />
        <scope ilk="function" line="1884" lineend="1897" name="next" returns="children.pop()" signature="next()">
          <variable citdl="Scanner" ilk="argument" name="self" />
          <variable citdl="self.roots.pop()" line="1888" name="root" />
          <variable citdl="children.pop()" line="1894" name="child" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="1880" name="state" />
        <scope attributes="__ctor__" ilk="function" line="1878" lineend="1882" name="__init__" signature="Scanner(roots, children, descendp)">
          <variable citdl="Scanner" ilk="argument" name="self" />
          <variable ilk="argument" name="roots" />
          <variable ilk="argument" name="children" />
          <variable ilk="argument" name="descendp" />
        </scope>
        <variable attributes="__instancevar__" line="1881" name="children" />
        <variable attributes="__instancevar__" citdl="list" line="1879" name="roots" />
      </scope>
      <scope classrefs="Doc" doc="Formatter class for text documentation." ilk="class" line="971" lineend="1311" name="TextDoc">
        <scope doc="Produce text documentation for a property." ilk="function" line="1293" lineend="1295" name="docproperty" returns="TextDoc._docdescriptor()" signature="docproperty(object, name=None, mod=None, cl=None)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable ilk="argument" name="cl" />
        </scope>
        <scope doc="Indent text by prepending a given prefix to each line." ilk="function" line="983" lineend="988" name="indent" returns="str" signature="indent(text, prefix=&apos;    &apos;)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable citdl="str" ilk="argument" name="prefix" />
          <variable citdl="list" line="986" name="lines" />
        </scope>
        <scope doc="Format a string in bold by overstriking." ilk="function" line="979" lineend="981" name="bold" returns="str.join()" signature="bold(text)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
        </scope>
        <scope attributes="protected" ilk="function" line="1280" lineend="1291" name="_docdescriptor" returns="str.join()" signature="_docdescriptor(name, value, mod)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="mod" />
          <variable citdl="list" line="1281" name="results" />
          <variable citdl="results.append" line="1282" name="push" />
          <variable citdl="str" line="1287" name="doc" />
        </scope>
        <scope doc="Produce text documentation for a given module object." ilk="function" line="1013" lineend="1111" name="docmodule" returns="TextDoc.section()" signature="docmodule(object, name=None, mod=None)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable citdl="object.__name__" ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable citdl="TextDoc.section()" line="1017" name="result" />
          <variable citdl="object.__all__" line="1020" name="all" />
          <variable citdl="str" line="1025" name="file" />
          <variable citdl="self.getdocloc()" line="1030" name="docloc" />
          <variable citdl="list" line="1037" name="classes" />
          <variable citdl="list" line="1044" name="funcs" />
          <variable citdl="list" line="1051" name="data" />
          <variable citdl="list" line="1056" name="modpkgs" />
          <variable citdl="set()" line="1057" name="modpkgs_names" />
          <variable citdl="list" line="1071" name="submodules" />
          <variable citdl="list" line="1081" name="classlist" />
          <variable citdl="list" line="1082" name="contents" />
          <variable citdl="str()" line="1101" name="version" />
        </scope>
        <scope doc="Format a section with a given heading." ilk="function" line="990" lineend="993" name="section" returns="TextDoc.bold()" signature="section(title, contents)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="contents" />
          <variable line="992" name="clean_contents" />
        </scope>
        <scope doc="Format an argument default value as text." ilk="function" line="1227" lineend="1229" name="formatvalue" returns="TextDoc.repr()" signature="formatvalue(object)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
        </scope>
        <scope doc="Produce text documentation for a data object." ilk="function" line="1301" lineend="1311" name="docother" returns="TextDoc.bold()" signature="docother(object, name=None, mod=None, parent=None, maxlen=None, doc=None)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable ilk="argument" name="parent" />
          <variable ilk="argument" name="maxlen" />
          <variable ilk="argument" name="doc" />
          <variable citdl="list" line="1303" name="repr" />
          <variable citdl="str" line="1305" name="line" />
          <variable citdl="len()" line="1306" name="chop" />
        </scope>
        <variable citdl="_repr_instance.repr" line="977" name="repr" />
        <scope doc="Produce text documentation for a data descriptor." ilk="function" line="1297" lineend="1299" name="docdata" returns="TextDoc._docdescriptor()" signature="docdata(object, name=None, mod=None, cl=None)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable ilk="argument" name="cl" />
        </scope>
        <scope doc="Produce text documentation for a given class object." ilk="function" line="1113" lineend="1225" name="docclass" returns="object.__name__" signature="docclass(object, name=None, mod=None)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable citdl="object.__name__" ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable citdl="object.__name__" line="1115" name="realname" />
          <variable citdl="object.__bases__" line="1117" name="bases" />
          <scope ilk="function" line="1119" lineend="1120" name="makename" returns="classname()" signature="makename(c, m=object.__module__)">
            <variable ilk="argument" name="c" />
            <variable citdl="object.__module__" ilk="argument" name="m" />
          </scope>
          <variable citdl="str" line="1123" name="title" />
          <variable citdl="map()" line="1127" name="parents" />
          <variable citdl="getdoc()" line="1130" name="doc" />
          <variable citdl="list" line="1131" name="contents" />
          <variable citdl="contents.append" line="1132" name="push" />
          <variable citdl="deque" line="1135" name="mro" />
          <scope ilk="class" line="1143" lineend="1149" name="HorizontalRule">
            <scope attributes="__ctor__" ilk="function" line="1144" lineend="1145" name="__init__" signature="HorizontalRule()">
              <variable citdl="HorizontalRule" ilk="argument" name="self" />
            </scope>
            <variable attributes="__instancevar__" citdl="int" line="1145" name="needone" />
            <scope ilk="function" line="1146" lineend="1149" name="maybe" signature="maybe()">
              <variable citdl="HorizontalRule" ilk="argument" name="self" />
            </scope>
          </scope>
          <variable citdl="HorizontalRule" line="1150" name="hr" />
          <scope ilk="function" line="1152" lineend="1160" name="spill" signature="spill(msg, attrs, predicate)">
            <variable ilk="argument" name="msg" />
            <variable ilk="argument" name="attrs" />
            <variable ilk="argument" name="predicate" />
          </scope>
          <scope ilk="function" line="1162" lineend="1169" name="spilldescriptors" signature="spilldescriptors(msg, attrs, predicate)">
            <variable ilk="argument" name="msg" />
            <variable ilk="argument" name="attrs" />
            <variable ilk="argument" name="predicate" />
          </scope>
          <scope ilk="function" line="1171" lineend="1183" name="spilldata" signature="spilldata(msg, attrs, predicate)">
            <variable ilk="argument" name="msg" />
            <variable ilk="argument" name="attrs" />
            <variable ilk="argument" name="predicate" />
            <variable citdl="getdoc()" line="1178" name="doc" />
          </scope>
          <variable citdl="spill()" line="1185" name="attrs" />
          <variable citdl="mro.popleft()" line="1191" name="thisclass" />
          <variable citdl="str" line="1200" name="tag" />
        </scope>
        <scope doc="Produce text documentation for a function or method object." ilk="function" line="1231" lineend="1278" name="docroutine" returns="inspect.formatargspec()" signature="docroutine(object, name=None, mod=None, cl=None)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable citdl="object.__func__" ilk="argument" name="object" />
          <variable citdl="object.__name__" ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable ilk="argument" name="cl" />
          <variable citdl="object.__name__" line="1233" name="realname" />
          <variable citdl="str" line="1235" name="note" />
          <variable citdl="int" line="1236" name="skipdocs" />
          <variable citdl="object.__self__.__class__" line="1238" name="imclass" />
          <variable citdl="str" line="1251" name="title" />
          <variable citdl="inspect.formatargspec()" line="1260" name="argspec" />
          <variable citdl="str" line="1272" name="decl" />
          <variable citdl="str" line="1277" name="doc" />
        </scope>
        <scope doc="Render in text a class tree as returned by inspect.getclasstree()." ilk="function" line="997" lineend="1011" name="formattree" returns="TextDoc.formattree()" signature="formattree(tree, modname, parent=None, prefix=&apos;&apos;)">
          <variable citdl="TextDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="tree" />
          <variable ilk="argument" name="modname" />
          <variable ilk="argument" name="parent" />
          <variable citdl="str" ilk="argument" name="prefix" />
          <variable citdl="str" line="999" name="result" />
          <variable citdl="map()" line="1005" name="parents" />
        </scope>
        <variable attributes="protected" citdl="TextRepr" line="976" name="_repr_instance" />
      </scope>
      <scope classrefs="Repr" doc="Class for safely making a text representation of a Python object." ilk="class" line="939" lineend="969" name="TextRepr">
        <scope ilk="function" line="965" lineend="969" name="repr_instance" returns="str" signature="repr_instance(x, level)">
          <variable citdl="TextRepr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
        </scope>
        <variable citdl="TextRepr.repr_string" line="963" name="repr_str" />
        <scope ilk="function" line="954" lineend="961" name="repr_string" returns="str" signature="repr_string(x, level)">
          <variable citdl="TextRepr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable citdl="cram()" line="955" name="test" />
          <variable citdl="repr()" line="956" name="testrepr" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="945" name="maxstring" />
        <scope ilk="function" line="947" lineend="952" name="repr1" returns="getattr()()" signature="repr1(x, level)">
          <variable citdl="TextRepr" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="level" />
          <variable citdl="str.join()" line="949" name="methodname" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="944" name="maxdict" />
        <variable attributes="__instancevar__" citdl="int" line="943" name="maxlist" />
        <scope attributes="__ctor__" ilk="function" line="941" lineend="945" name="__init__" signature="TextRepr()">
          <variable citdl="TextRepr" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="str" line="37" name="__author__" />
      <variable citdl="str" line="41" name="__credits__" />
      <variable citdl="str" line="38" name="__date__" />
      <variable citdl="str" line="40" name="__version__" />
      <variable citdl="dict" name="__warningregistry__" />
      <scope ilk="function" line="131" lineend="139" name="allmethods" returns="dict" signature="allmethods(cl)">
        <variable citdl="dict" line="132" name="methods" />
        <variable ilk="argument" name="cl" />
      </scope>
      <scope doc="Print all the one-line module summaries that contain a substring." ilk="function" line="1960" lineend="1971" name="apropos" signature="apropos(key)">
        <scope ilk="function" line="1966" lineend="1967" name="onerror" signature="onerror(modname)">
          <variable ilk="argument" name="modname" />
        </scope>
        <scope ilk="function" line="1962" lineend="1965" name="callback" signature="callback(path, modname, desc)">
          <variable ilk="argument" name="path" />
          <variable citdl="list" ilk="argument" name="modname" />
          <variable ilk="argument" name="desc" />
        </scope>
        <variable ilk="argument" name="key" />
      </scope>
      <import module="builtins" />
      <scope doc="Wrap inspect.classify_class_attrs, with fixup for data descriptors." ilk="function" line="172" lineend="179" name="classify_class_attrs" returns="list" signature="classify_class_attrs(object)">
        <variable citdl="str" line="177" name="kind" />
        <variable ilk="argument" name="object" />
        <variable citdl="list" line="174" name="results" />
      </scope>
      <scope doc="Get a class name and qualify it with a module name if necessary." ilk="function" line="94" lineend="99" name="classname" returns="object.__name__" signature="classname(object, modname)">
        <variable ilk="argument" name="modname" />
        <variable ilk="argument" name="object" />
        <variable citdl="object.__name__" line="96" name="name" />
      </scope>
      <scope doc="Command-line interface (looks at sys.argv to decide what to do)." ilk="function" line="2245" lineend="2326" name="cli" signature="cli()">
        <variable citdl="os.path.basename()" line="2302" name="cmd" />
        <scope classrefs="Exception" ilk="class" line="2248" lineend="2248" name="BadUsage" />
        <variable citdl="int" line="2260" name="writing" />
        <scope ilk="function" line="2276" lineend="2277" name="stopped" signature="stopped()" />
        <variable citdl="importfile()" line="2290" name="arg" />
        <scope ilk="function" line="2274" lineend="2275" name="ready" signature="ready(server)">
          <variable ilk="argument" name="server" />
        </scope>
        <variable citdl="os.path.dirname()" line="2253" name="scriptdir" />
        <variable citdl="int()" line="2271" name="port" />
      </scope>
      <scope doc="Omit part of a string if needed to make it fit in a maximum length." ilk="function" line="114" lineend="120" name="cram" returns="str" signature="cram(text, maxlen)">
        <variable citdl="max()" line="117" name="pre" />
        <variable ilk="argument" name="text" />
        <variable citdl="max()" line="118" name="post" />
        <variable ilk="argument" name="maxlen" />
      </scope>
      <scope classrefs="object" doc="deque(iterable[, maxlen]) --&gt; deque object  Build an ordered collection accessible from endpoints only." ilk="class" line="62" lineend="64" name="deque">
        <scope ilk="function" line="63" lineend="64" name="popleft" returns="self.pop()" signature="popleft()">
          <variable citdl="deque" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope doc="Produce a short description of the given thing." ilk="function" line="1419" lineend="1444" name="describe" returns="tuple" signature="describe(thing)">
        <variable ilk="argument" name="thing" />
      </scope>
      <scope doc="Display text documentation, given an object or a path to an object." ilk="function" line="1501" lineend="1506" name="doc" signature="doc(thing, title=&apos;Python Library Documentation: %s&apos;, forceload=0)" />
      <scope doc="Get the doc string or comments for an object." ilk="function" line="80" lineend="83" name="getdoc" returns="re.sub()" signature="getdoc(object)">
        <variable ilk="argument" name="object" />
        <variable citdl="inspect.getcomments()" line="82" name="result" />
      </scope>
      <scope doc="Decide what method to use for paging through text." ilk="function" line="1321" lineend="1350" name="getpager" returns="plainpager" signature="getpager()" />
      <scope doc="Graphical interface (starts web server and pops up a control window)." ilk="function" line="2055" lineend="2238" name="gui" signature="gui()">
        <scope ilk="class" line="2057" lineend="2223" name="GUI">
          <scope attributes="__ctor__" ilk="function" line="2058" lineend="2125" name="__init__" signature="GUI(window, port=7464)">
            <import line="2063" module="tkinter" />
            <import line="2123" module="threading" />
            <variable citdl="GUI" ilk="argument" name="self" />
            <variable ilk="argument" name="window" />
            <variable citdl="int" ilk="argument" name="port" />
            <variable citdl="tuple" line="2094" name="font" />
          </scope>
          <variable attributes="__instancevar__" line="2059" name="window" />
          <variable attributes="__instancevar__" line="2060" name="server" />
          <variable attributes="__instancevar__" citdl="ModuleScanner" line="2061" name="scanner" />
          <variable attributes="__instancevar__" citdl="tkinter.Frame()" line="2064" name="server_frm" />
          <variable attributes="__instancevar__" citdl="tkinter.Label()" line="2065" name="title_lbl" />
          <variable attributes="__instancevar__" citdl="tkinter.Button()" line="2067" name="open_btn" />
          <variable attributes="__instancevar__" citdl="tkinter.Button()" line="2069" name="quit_btn" />
          <variable attributes="__instancevar__" citdl="tkinter.Frame()" line="2072" name="search_frm" />
          <variable attributes="__instancevar__" citdl="tkinter.Label()" line="2073" name="search_lbl" />
          <variable attributes="__instancevar__" citdl="tkinter.Entry()" line="2074" name="search_ent" />
          <variable attributes="__instancevar__" citdl="tkinter.Button()" line="2076" name="stop_btn" />
          <variable attributes="__instancevar__" citdl="tkinter.Listbox()" line="2095" name="result_lst" />
          <variable attributes="__instancevar__" citdl="tkinter.Scrollbar()" line="2098" name="result_scr" />
          <variable attributes="__instancevar__" citdl="tkinter.Frame()" line="2102" name="result_frm" />
          <variable attributes="__instancevar__" citdl="tkinter.Button()" line="2103" name="goto_btn" />
          <variable attributes="__instancevar__" citdl="tkinter.Button()" line="2105" name="hide_btn" />
          <variable attributes="__instancevar__" citdl="self.window.winfo_width()" line="2111" name="minwidth" />
          <variable attributes="__instancevar__" citdl="self.window.winfo_height()" line="2112" name="minheight" />
          <variable attributes="__instancevar__" citdl="self.search_frm.winfo_reqheight()" line="2113" name="bigminheight" />
          <variable attributes="__instancevar__" citdl="self.search_frm.winfo_reqheight()" line="2117" name="bigheight" />
          <variable attributes="__instancevar__" citdl="self.window.winfo_width()" line="2117" name="bigwidth" />
          <variable attributes="__instancevar__" citdl="int" line="2118" name="expanded" />
          <scope ilk="function" line="2127" lineend="2132" name="ready" signature="ready(server)">
            <variable citdl="GUI" ilk="argument" name="self" />
            <variable ilk="argument" name="server" />
          </scope>
          <scope ilk="function" line="2134" lineend="2148" name="open" signature="open(event=None, url=None)">
            <import line="2137" module="webbrowser" />
            <import line="2143" module="ic" />
            <variable citdl="GUI" ilk="argument" name="self" />
            <variable ilk="argument" name="event" />
            <variable citdl="self.server.url" ilk="argument" name="url" />
            <variable citdl="os.system()" line="2147" name="rc" />
          </scope>
          <scope ilk="function" line="2150" lineend="2153" name="quit" signature="quit(event=None)">
            <variable citdl="GUI" ilk="argument" name="self" />
            <variable ilk="argument" name="event" />
          </scope>
          <scope ilk="function" line="2155" lineend="2171" name="search" signature="search(event=None)">
            <import line="2166" module="threading" />
            <variable citdl="GUI" ilk="argument" name="self" />
            <variable ilk="argument" name="event" />
            <variable citdl="self.search_ent.get()" line="2156" name="key" />
          </scope>
          <scope ilk="function" line="2173" lineend="2177" name="update" signature="update(path, modname, desc)">
            <variable citdl="GUI" ilk="argument" name="self" />
            <variable ilk="argument" name="path" />
            <variable citdl="list" ilk="argument" name="modname" />
            <variable ilk="argument" name="desc" />
          </scope>
          <scope ilk="function" line="2179" lineend="2182" name="stop" signature="stop(event=None)">
            <variable citdl="GUI" ilk="argument" name="self" />
            <variable ilk="argument" name="event" />
          </scope>
          <scope ilk="function" line="2184" lineend="2190" name="done" signature="done()">
            <variable citdl="GUI" ilk="argument" name="self" />
          </scope>
          <scope ilk="function" line="2192" lineend="2193" name="select" signature="select(event=None)">
            <variable citdl="GUI" ilk="argument" name="self" />
            <variable ilk="argument" name="event" />
          </scope>
          <scope ilk="function" line="2195" lineend="2199" name="goto" signature="goto(event=None)">
            <variable citdl="GUI" ilk="argument" name="self" />
            <variable ilk="argument" name="event" />
            <variable citdl="self.result_lst.curselection()" line="2196" name="selection" />
            <variable line="2198" name="modname" />
          </scope>
          <scope ilk="function" line="2201" lineend="2210" name="collapse" signature="collapse()">
            <variable citdl="GUI" ilk="argument" name="self" />
          </scope>
          <scope ilk="function" line="2212" lineend="2219" name="expand" signature="expand()">
            <variable citdl="GUI" ilk="argument" name="self" />
          </scope>
          <scope ilk="function" line="2221" lineend="2223" name="hide" signature="hide(event=None)">
            <variable citdl="GUI" ilk="argument" name="self" />
            <variable ilk="argument" name="event" />
          </scope>
        </scope>
        <variable citdl="tkinter.Tk()" line="2227" name="root" />
        <variable citdl="GUI" line="2233" name="gui" />
      </scope>
      <variable citdl="Helper" line="1874" name="help" />
      <variable citdl="HTMLDoc" line="1467" name="html" />
      <import module="imp" />
      <scope doc="Import a Python source file or compiled file given its path." ilk="function" line="240" lineend="257" name="importfile" returns="imp.load_module()" signature="importfile(path)">
        <variable citdl="imp.PY_SOURCE" line="245" name="kind" />
        <variable citdl="imp.get_magic()" line="242" name="magic" />
        <variable citdl="imp.load_module()" line="253" name="module" />
        <variable citdl="os.path.basename()" line="249" name="filename" />
        <variable citdl="open()" line="243" name="file" />
        <variable ilk="argument" name="path" />
      </scope>
      <import module="inspect" />
      <scope doc="Check if an object is of a type that probably means it&apos;s data." ilk="function" line="101" lineend="105" name="isdata" returns="bool" signature="isdata(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Guess whether a path refers to a package directory." ilk="function" line="183" lineend="189" name="ispackage" returns="bool" signature="ispackage(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope ilk="function" line="2242" lineend="2243" name="ispath" returns="isinstance()" signature="ispath(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope doc="Locate an object by name or dotted path, importing as necessary." ilk="function" line="1446" lineend="1462" name="locate" returns="getattr()" signature="locate(path, forceload=0)">
        <variable citdl="safeimport()" line="1451" name="nextmodule" />
        <variable citdl="safeimport()" line="1455" name="object" />
        <variable citdl="safeimport()" line="1449" name="module" />
        <variable citdl="int" line="1449" name="n" />
        <variable citdl="list" line="1448" name="parts" />
        <variable citdl="int" ilk="argument" name="forceload" />
        <variable ilk="argument" name="path" />
      </scope>
      <import module="os" />
      <scope doc="The first time this is called, determine what kind of pager to use." ilk="function" line="1315" lineend="1319" name="pager" signature="pager(text)">
        <variable ilk="argument" name="text" />
        <variable citdl="getpager()" line="1318" name="pager" />
      </scope>
      <scope doc="Convert sys.path into a list of absolute, existing, unique paths." ilk="function" line="68" lineend="78" name="pathdirs" returns="list" signature="pathdirs()">
        <variable citdl="list" line="70" name="dirs" />
        <variable citdl="os.path.normcase()" line="74" name="normdir" />
        <variable citdl="os.path.abspath()" line="73" name="dir" />
        <variable citdl="list" line="71" name="normdirs" />
      </scope>
      <scope doc="Page through text by feeding it to another program." ilk="function" line="1356" lineend="1363" name="pipepager" signature="pipepager(text, cmd)">
        <variable citdl="os.popen()" line="1358" name="pipe" />
        <variable ilk="argument" name="text" />
        <variable ilk="argument" name="cmd" />
      </scope>
      <import module="pkgutil" />
      <scope doc="Remove boldface formatting from text." ilk="function" line="1352" lineend="1354" name="plain" returns="re.sub()" signature="plain(text)">
        <variable ilk="argument" name="text" />
      </scope>
      <scope doc="Simply print unformatted text." ilk="function" line="1415" lineend="1417" name="plainpager" signature="plainpager(text)">
        <variable ilk="argument" name="text" />
      </scope>
      <import module="re" />
      <scope doc="Render text documentation, given an object or a path to an object." ilk="function" line="1479" lineend="1499" name="render_doc" returns="title" signature="render_doc(thing, title=&apos;Python Library Documentation: %s&apos;, forceload=0)">
        <variable citdl="type()" line="1497" name="object" />
        <variable citdl="inspect.getmodule()" line="1483" name="module" />
        <variable citdl="describe()" line="1482" name="desc" />
      </scope>
      <scope doc="Do a series of global replacements on a string." ilk="function" line="107" lineend="112" name="replace" signature="replace(text, *pairs)">
        <variable ilk="argument" name="text" />
        <variable attributes="varargs" citdl="list" ilk="argument" name="pairs" />
      </scope>
      <scope doc="Given an object or a path to an object, get the object and its name." ilk="function" line="1469" lineend="1477" name="resolve" returns="tuple" signature="resolve(thing, forceload=0)">
        <variable citdl="int" ilk="argument" name="forceload" />
        <variable ilk="argument" name="thing" />
        <variable citdl="locate()" line="1472" name="object" />
      </scope>
      <scope doc="Import a module; handle errors; return None if the module isn&apos;t found." ilk="function" line="259" lineend="304" name="safeimport" returns="__import__()" signature="safeimport(path, forceload=0, cache={})">
        <variable citdl="int" ilk="argument" name="forceload" />
        <variable ilk="argument" name="path" />
        <variable citdl="dict" ilk="argument" name="cache" />
        <variable citdl="list" line="279" name="subs" />
        <variable citdl="getattr()" line="284" name="module" />
      </scope>
      <scope ilk="function" line="1975" lineend="2051" name="serve" signature="serve(port, callback=None, completer=None)">
        <scope classrefs="http.server.BaseHTTPRequestHandler" ilk="class" line="1978" lineend="2021" name="DocHandler">
          <scope ilk="function" line="1979" lineend="1985" name="send_document" signature="send_document(title, contents)">
            <variable citdl="DocHandler" ilk="argument" name="self" />
            <variable ilk="argument" name="title" />
            <variable ilk="argument" name="contents" />
          </scope>
          <scope ilk="function" line="1987" lineend="2019" name="do_GET" signature="do_GET()">
            <variable citdl="DocHandler" ilk="argument" name="self" />
            <variable citdl="list" line="1988" name="path" />
            <variable citdl="locate()" line="1993" name="obj" />
            <variable citdl="html.heading()" line="2003" name="heading" />
            <scope ilk="function" line="2006" lineend="2007" name="bltinlink" returns="tuple" signature="bltinlink(name)">
              <variable ilk="argument" name="name" />
            </scope>
            <variable citdl="list" line="2008" name="names" />
            <variable citdl="html.heading()" line="2009" name="contents" />
            <variable citdl="list" line="2010" name="indices" />
            <variable citdl="dict" line="2013" name="seen" />
          </scope>
          <scope ilk="function" line="2021" lineend="2021" name="log_message" signature="log_message(*args)">
            <variable citdl="DocHandler" ilk="argument" name="self" />
            <variable attributes="varargs" ilk="argument" name="args" />
          </scope>
          <variable attributes="__instancevar__" citdl="email.message.Message" line="2044" name="MessageClass" />
        </scope>
        <variable ilk="argument" name="callback" />
        <scope classrefs="http.server.HTTPServer" ilk="class" line="2023" lineend="2040" name="DocServer">
          <scope attributes="__ctor__" ilk="function" line="2024" lineend="2029" name="__init__" signature="DocServer(port, callback)">
            <variable citdl="DocServer" ilk="argument" name="self" />
            <variable ilk="argument" name="port" />
            <variable ilk="argument" name="callback" />
            <variable citdl="bool" line="2025" name="host" />
          </scope>
          <variable attributes="__instancevar__" citdl="tuple" line="2026" name="address" />
          <variable attributes="__instancevar__" citdl="str" line="2027" name="url" />
          <variable attributes="__instancevar__" line="2028" name="callback" />
          <scope ilk="function" line="2031" lineend="2036" name="serve_until_quit" signature="serve_until_quit()">
            <import line="2032" module="select" />
            <variable citdl="DocServer" ilk="argument" name="self" />
          </scope>
          <variable attributes="__instancevar__" citdl="False" line="2033" name="quit" />
          <scope ilk="function" line="2038" lineend="2040" name="server_activate" signature="server_activate()">
            <variable citdl="DocServer" ilk="argument" name="self" />
          </scope>
          <variable attributes="__instancevar__" citdl="http.server.HTTPServer" line="2042" name="base" />
          <variable attributes="__instancevar__" citdl="serve.DocHandler" line="2043" name="handler" />
        </scope>
        <variable ilk="argument" name="completer" />
        <variable ilk="argument" name="port" />
      </scope>
      <scope ilk="function" line="191" lineend="206" name="source_synopsis" signature="source_synopsis(file)">
        <variable citdl="list" line="192" name="line" />
        <variable line="204" name="result" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope doc="Split a doc string into a synopsis line (if any) and the rest." ilk="function" line="85" lineend="92" name="splitdoc" returns="tuple" signature="splitdoc(doc)">
        <variable ilk="argument" name="doc" />
        <variable line="87" name="lines" />
      </scope>
      <scope doc="Remove the hexadecimal id from a Python object representation." ilk="function" line="123" lineend="126" name="stripid" returns="_re_stripid.sub()" signature="stripid(text)">
        <variable ilk="argument" name="text" />
      </scope>
      <scope doc="Get the one-line summary out of a module file." ilk="function" line="208" lineend="228" name="synopsis" returns="source_synopsis()" signature="synopsis(filename, cache={})">
        <variable citdl="inspect.getmoduleinfo()" line="213" name="info" />
        <variable citdl="dict" ilk="argument" name="cache" />
        <variable citdl="imp.load_module()" line="220" name="module" />
        <variable ilk="argument" name="filename" />
        <variable citdl="source_synopsis()" line="222" name="result" />
        <variable citdl="open()" line="215" name="file" />
        <variable line="210" name="mtime" />
      </scope>
      <import module="sys" />
      <scope doc="Page through text by invoking a program on a temporary file." ilk="function" line="1365" lineend="1375" name="tempfilepager" signature="tempfilepager(text, cmd)">
        <variable ilk="argument" name="text" />
        <variable ilk="argument" name="cmd" />
        <variable citdl="open()" line="1369" name="file" />
        <variable citdl="tempfile.mktemp()" line="1368" name="filename" />
      </scope>
      <variable citdl="TextDoc" line="1466" name="text" />
      <scope doc="Page through text on a text terminal." ilk="function" line="1377" lineend="1413" name="ttypager" signature="ttypager(text)">
        <variable line="1387" name="tty" />
        <variable citdl="tty.tcgetattr()" line="1383" name="old" />
        <variable ilk="argument" name="text" />
        <variable line="1379" name="lines" />
        <variable citdl="getchar()" line="1396" name="c" />
        <variable citdl="inc" line="1391" name="r" />
        <variable citdl="sys.stdin.fileno()" line="1382" name="fd" />
        <variable line="1385" name="getchar" />
      </scope>
      <scope doc="Decide whether to show documentation on a variable." ilk="function" line="158" lineend="170" name="visiblename" returns="bool" signature="visiblename(name, all=None)">
        <variable ilk="argument" name="all" />
        <variable ilk="argument" name="name" />
        <variable attributes="protected" citdl="tuple" line="161" name="_hidden_names" />
      </scope>
      <scope doc="Write HTML documentation to a file in the current directory." ilk="function" line="1508" lineend="1518" name="writedoc" signature="writedoc(thing, forceload=0)">
        <variable citdl="int" ilk="argument" name="forceload" />
        <variable ilk="argument" name="thing" />
        <variable citdl="html.page()" line="1512" name="page" />
        <variable citdl="open()" line="1513" name="file" />
      </scope>
      <scope doc="Write out HTML documentation for all modules in a directory tree." ilk="function" line="1520" name="writedocs" signature="writedocs(dir, pkgpath=&apos;&apos;, done=None)">
        <variable citdl="dict" ilk="argument" name="done" />
        <variable citdl="str" ilk="argument" name="pkgpath" />
        <variable ilk="argument" name="dir" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="128" lineend="129" name="_is_some_method" returns="inspect.ismethoddescriptor()" signature="_is_some_method(obj)">
        <variable ilk="argument" name="obj" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="122" name="_re_stripid" />
      <scope attributes="protected __hidden__" doc="Split sequence s via predicate, and return pair ([true], [false])." ilk="function" line="141" lineend="156" name="_split_list" returns="tuple" signature="_split_list(s, predicate)">
        <variable ilk="argument" name="s" />
        <variable ilk="argument" name="predicate" />
        <variable citdl="list" line="149" name="yes" />
        <variable citdl="list" line="150" name="no" />
      </scope>
    </scope>
    <scope doc="Thread module emulating a subset of Java&apos;s threading model." ilk="blob" lang="Python3" name="threading">
      <scope ilk="function" line="328" lineend="329" name="BoundedSemaphore" returns="_BoundedSemaphore()" signature="BoundedSemaphore(*args, **kwargs)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope ilk="function" line="160" lineend="161" name="Condition" returns="_Condition()" signature="Condition(*args, **kwargs)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope ilk="function" line="343" lineend="344" name="Event" returns="_Event()" signature="Event(*args, **kwargs)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope doc="(allocate() is an obsolete synonym)" ilk="function" line="80" name="Lock" signature="allocate_lock() -&gt; lock object" />
      <scope ilk="function" line="82" lineend="83" name="RLock" returns="_RLock()" signature="RLock(*args, **kwargs)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope ilk="function" line="280" lineend="281" name="Semaphore" returns="_Semaphore()" signature="Semaphore(*args, **kwargs)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <scope classrefs="_Verbose" ilk="class" line="399" lineend="692" name="Thread">
        <scope attributes="__hidden__" ilk="function" line="659" lineend="661" name="ident (property getter)" returns="_get_ident()" signature="ident (property getter)()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <variable attributes="private" citdl="_sys.exc_info" line="406" name="__exc_info" />
        <variable attributes="protected __instancevar__" citdl="Condition()" line="425" name="_block" />
        <scope attributes="protected" ilk="function" line="573" lineend="577" name="_stop" signature="_stop()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="426" name="_initialized" />
        <scope attributes="protected" doc="Remove current thread from the dict of currently running threads." ilk="function" line="579" lineend="612" name="_delete" signature="_delete()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="682" lineend="683" name="isDaemon" returns="self._set_daemon()" signature="isDaemon()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <variable attributes="private" citdl="False" line="401" name="__initialized" />
        <variable attributes="protected __instancevar__" citdl="_sys.stderr" line="429" name="_stderr" />
        <variable citdl="Thread.is_alive" line="667" name="isAlive" />
        <scope attributes="__hidden__" ilk="function" line="670" lineend="672" name="daemon (property getter)" returns="self._set_daemon()" signature="daemon (property getter)()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="411" lineend="429" name="__init__" signature="Thread(group=None, target=None, name=None, args=(), kwargs=None, verbose=None)">
          <variable citdl="Thread" ilk="argument" name="self" />
          <variable ilk="argument" name="group" />
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="name" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable citdl="dict" ilk="argument" name="kwargs" />
          <variable ilk="argument" name="verbose" />
        </scope>
        <variable attributes="protected __instancevar__" line="417" name="_target" />
        <variable attributes="protected __instancevar__" citdl="_get_ident()" line="422" name="_ident" />
        <scope ilk="function" line="688" lineend="689" name="getName" returns="str()" signature="getName()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="tuple" line="419" name="_args" />
        <scope attributes="protected" ilk="function" line="495" lineend="496" name="_set_ident" signature="_set_ident()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="475" lineend="493" name="_bootstrap" signature="_bootstrap()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="424" name="_stopped" />
        <scope ilk="function" line="663" lineend="665" name="is_alive" returns="bool" signature="is_alive()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="448" lineend="464" name="start" signature="start()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="654" lineend="656" name="name (property setter)" signature="name (property setter)(name)">
          <variable citdl="Thread" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="466" lineend="473" name="run" signature="run()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="691" lineend="692" name="setName" signature="setName(name)">
          <variable citdl="Thread" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="685" lineend="686" name="setDaemon" signature="setDaemon(daemonic)">
          <variable citdl="Thread" ilk="argument" name="self" />
          <variable ilk="argument" name="daemonic" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="675" lineend="680" name="daemon (property setter)" signature="daemon (property setter)(daemonic)">
          <variable citdl="Thread" ilk="argument" name="self" />
          <variable ilk="argument" name="daemonic" />
        </scope>
        <scope attributes="protected" ilk="function" line="431" lineend="433" name="_set_daemon" signature="_set_daemon()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Event()" line="423" name="_started" />
        <scope attributes="protected" ilk="function" line="498" lineend="571" name="_bootstrap_inner" signature="_bootstrap_inner()">
          <variable citdl="Thread" ilk="argument" name="self" />
          <variable citdl="exc_tb.tb_next" line="547" name="exc_tb" />
        </scope>
        <variable attributes="property" citdl="self._set_daemon()" line="670" name="daemon" />
        <variable attributes="property" citdl="_get_ident()" line="659" name="ident" />
        <scope ilk="function" line="614" lineend="646" name="join" signature="join(timeout=None)">
          <variable citdl="Thread" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="_time()" line="634" name="deadline" />
          <variable citdl="_time()" line="636" name="delay" />
        </scope>
        <variable attributes="property" citdl="str()" line="649" name="name" />
        <variable attributes="protected __instancevar__" citdl="str()" line="418" name="_name" />
        <scope attributes="__hidden__" ilk="function" line="649" lineend="651" name="name (property getter)" returns="str()" signature="name (property getter)()">
          <variable citdl="Thread" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="435" lineend="446" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="Thread" ilk="argument" name="self" />
          <variable citdl="str" line="437" name="status" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._set_daemon()" line="421" name="_daemonic" />
        <variable attributes="protected __instancevar__" citdl="dict" line="420" name="_kwargs" />
      </scope>
      <scope classrefs="Exception" ilk="class" line="29" name="ThreadError" />
      <scope ilk="function" line="696" lineend="697" name="Timer" returns="_Timer()" signature="Timer(*args, **kwargs)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
      </scope>
      <variable citdl="list" line="22" name="__all__" />
      <import module="_sys" />
      <scope ilk="function" line="806" name="activeCount" signature="activeCount()" />
      <scope ilk="function" line="802" lineend="804" name="active_count" returns="len()" signature="active_count()" />
      <scope ilk="function" line="800" name="currentThread" signature="currentThread()" />
      <scope ilk="function" line="793" lineend="798" name="current_thread" returns="_DummyThread" signature="current_thread()" />
      <scope classrefs="object" doc="deque(iterable[, maxlen]) --&gt; deque object  Build an ordered collection accessible from endpoints only." ilk="class" name="deque" />
      <scope ilk="function" line="812" lineend="814" name="enumerate" returns="list()" signature="enumerate()" />
      <scope classrefs="object" doc="Thread-local data" ilk="class" name="local" />
      <scope ilk="function" line="70" lineend="72" name="setprofile" signature="setprofile(func)">
        <variable attributes="protected" line="72" name="_profile_hook" />
        <variable ilk="argument" name="func" />
      </scope>
      <scope ilk="function" line="74" lineend="76" name="settrace" signature="settrace(func)">
        <variable ilk="argument" name="func" />
        <variable attributes="protected" line="76" name="_trace_hook" />
      </scope>
      <scope doc="Return the thread stack size used when creating new threads." ilk="function" name="stack_size" signature="stack_size([size]) -&gt; size" />
      <scope attributes="protected __hidden__" classrefs="_Semaphore" doc="Semaphore that checks that # releases is &lt;= # acquires" ilk="class" line="331" lineend="340" name="_BoundedSemaphore">
        <scope attributes="__ctor__" ilk="function" line="333" lineend="335" name="__init__" signature="_BoundedSemaphore(value=1, verbose=None)">
          <variable citdl="_BoundedSemaphore" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="value" />
          <variable ilk="argument" name="verbose" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="335" name="_initial_value" />
        <scope ilk="function" line="337" lineend="340" name="release" returns="_Semaphore.release()" signature="release()">
          <variable citdl="_BoundedSemaphore" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="Thread" doc="Call a function after a specified number of seconds:" ilk="class" line="699" lineend="723" name="_Timer">
        <scope attributes="__ctor__" ilk="function" line="707" lineend="713" name="__init__" signature="_Timer(interval, function, args=[], kwargs={})">
          <variable citdl="_Timer" ilk="argument" name="self" />
          <variable ilk="argument" name="interval" />
          <variable ilk="argument" name="function" />
          <variable citdl="list" ilk="argument" name="args" />
          <variable citdl="dict" ilk="argument" name="kwargs" />
        </scope>
        <variable attributes="__instancevar__" line="709" name="interval" />
        <variable attributes="__instancevar__" line="710" name="function" />
        <variable attributes="__instancevar__" citdl="list" line="711" name="args" />
        <variable attributes="__instancevar__" citdl="dict" line="712" name="kwargs" />
        <variable attributes="__instancevar__" citdl="Event()" line="713" name="finished" />
        <scope doc="Stop the timer if it hasn&apos;t finished yet" ilk="function" line="715" lineend="717" name="cancel" signature="cancel()">
          <variable citdl="_Timer" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="719" lineend="723" name="run" signature="run()">
          <variable citdl="_Timer" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="869" lineend="949" name="_test" signature="_test()">
        <scope classrefs="_Verbose" ilk="class" line="871" lineend="901" name="BoundedQueue">
          <scope attributes="__ctor__" ilk="function" line="873" lineend="879" name="__init__" signature="BoundedQueue(limit)">
            <variable citdl="BoundedQueue" ilk="argument" name="self" />
            <variable ilk="argument" name="limit" />
          </scope>
          <variable attributes="__instancevar__" citdl="RLock()" line="875" name="mon" />
          <variable attributes="__instancevar__" citdl="Condition()" line="876" name="rc" />
          <variable attributes="__instancevar__" citdl="Condition()" line="877" name="wc" />
          <variable attributes="__instancevar__" line="878" name="limit" />
          <variable attributes="__instancevar__" citdl="deque()" line="879" name="queue" />
          <scope ilk="function" line="881" lineend="890" name="put" signature="put(item)">
            <variable citdl="BoundedQueue" ilk="argument" name="self" />
            <variable ilk="argument" name="item" />
          </scope>
          <scope ilk="function" line="892" lineend="901" name="get" returns="self.queue.popleft()" signature="get()">
            <variable citdl="BoundedQueue" ilk="argument" name="self" />
            <variable citdl="self.queue.popleft()" line="897" name="item" />
          </scope>
        </scope>
        <scope classrefs="Thread" ilk="class" line="903" lineend="916" name="ProducerThread">
          <scope attributes="__ctor__" ilk="function" line="905" lineend="908" name="__init__" signature="ProducerThread(queue, quota)">
            <variable citdl="ProducerThread" ilk="argument" name="self" />
            <variable ilk="argument" name="queue" />
            <variable ilk="argument" name="quota" />
          </scope>
          <variable attributes="__instancevar__" line="907" name="queue" />
          <variable attributes="__instancevar__" line="908" name="quota" />
          <scope ilk="function" line="910" lineend="916" name="run" signature="run()">
            <import line="911" module="random" symbol="random" />
            <variable citdl="ProducerThread" ilk="argument" name="self" />
            <variable citdl="int" line="912" name="counter" />
          </scope>
        </scope>
        <scope classrefs="Thread" ilk="class" line="919" lineend="930" name="ConsumerThread">
          <scope attributes="__ctor__" ilk="function" line="921" lineend="924" name="__init__" signature="ConsumerThread(queue, count)">
            <variable citdl="ConsumerThread" ilk="argument" name="self" />
            <variable ilk="argument" name="queue" />
            <variable ilk="argument" name="count" />
          </scope>
          <variable attributes="__instancevar__" line="923" name="queue" />
          <variable attributes="__instancevar__" citdl="int" line="924" name="count" />
          <scope ilk="function" line="926" lineend="930" name="run" signature="run()">
            <variable citdl="ConsumerThread" ilk="argument" name="self" />
            <variable citdl="self.queue.get()" line="928" name="item" />
          </scope>
        </scope>
        <variable citdl="int" line="932" name="NP" />
        <variable citdl="int" line="933" name="QL" />
        <variable citdl="int" line="934" name="NI" />
        <variable citdl="BoundedQueue" line="936" name="Q" />
        <variable citdl="list" line="937" name="P" />
        <variable citdl="ProducerThread" line="939" name="t" />
        <variable citdl="ConsumerThread" line="942" name="C" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="753" lineend="757" name="_pickSomeNonDaemonThread" returns="t" signature="_pickSomeNonDaemonThread()" />
      <variable attributes="protected __hidden__" line="68" name="_trace_hook" />
      <scope attributes="protected __hidden__" classrefs="Thread" ilk="class" line="768" lineend="788" name="_DummyThread">
        <scope attributes="__ctor__" ilk="function" line="770" lineend="782" name="__init__" signature="_DummyThread()">
          <variable citdl="_DummyThread" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="784" lineend="785" name="_set_daemon" returns="bool" signature="_set_daemon()">
          <variable citdl="_DummyThread" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="787" lineend="788" name="join" signature="join(timeout=None)">
          <variable citdl="_DummyThread" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="_thread.start_new_thread" line="26" name="_start_new_thread" />
      <scope attributes="protected __hidden__" classrefs="_Verbose" ilk="class" line="346" lineend="382" name="_Event">
        <scope attributes="__ctor__" ilk="function" line="350" lineend="353" name="__init__" signature="_Event(verbose=None)">
          <variable citdl="_Event" ilk="argument" name="self" />
          <variable ilk="argument" name="verbose" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Condition()" line="352" name="_cond" />
        <variable attributes="protected __instancevar__" citdl="False" line="353" name="_flag" />
        <scope ilk="function" line="355" lineend="356" name="is_set" returns="bool" signature="is_set()">
          <variable citdl="_Event" ilk="argument" name="self" />
        </scope>
        <variable citdl="_Event.is_set" line="358" name="isSet" />
        <scope ilk="function" line="360" lineend="366" name="set" signature="set()">
          <variable citdl="_Event" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="368" lineend="373" name="clear" signature="clear()">
          <variable citdl="_Event" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="375" lineend="382" name="wait" returns="bool" signature="wait(timeout=None)">
          <variable citdl="_Event" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="_Verbose" ilk="class" line="85" lineend="157" name="_RLock">
        <scope attributes="__ctor__" ilk="function" line="87" lineend="91" name="__init__" signature="_RLock(verbose=None)">
          <variable citdl="_RLock" ilk="argument" name="self" />
          <variable ilk="argument" name="verbose" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="_allocate_lock()" line="89" name="_block" />
        <variable attributes="protected __instancevar__" citdl="_get_ident()" line="90" name="_owner" />
        <variable attributes="protected __instancevar__" citdl="int" line="91" name="_count" />
        <scope ilk="function" line="93" lineend="100" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="_RLock" ilk="argument" name="self" />
          <variable line="94" name="owner" />
        </scope>
        <scope ilk="function" line="102" lineend="118" name="acquire" returns="self._block.acquire()" signature="acquire(blocking=True)">
          <variable citdl="_RLock" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="blocking" />
          <variable citdl="_get_ident()" line="103" name="me" />
          <variable citdl="self._block.acquire()" line="109" name="rc" />
        </scope>
        <variable citdl="_RLock.acquire" line="120" name="__enter__" />
        <scope ilk="function" line="122" lineend="133" name="release" signature="release()">
          <variable citdl="_RLock" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="135" lineend="136" name="__exit__" signature="__exit__(t, v, tb)">
          <variable citdl="_RLock" ilk="argument" name="self" />
          <variable ilk="argument" name="t" />
          <variable ilk="argument" name="v" />
          <variable ilk="argument" name="tb" />
        </scope>
        <scope attributes="protected" ilk="function" line="140" lineend="144" name="_acquire_restore" signature="_acquire_restore(state)">
          <variable citdl="_RLock" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
        <scope attributes="protected" ilk="function" line="146" lineend="154" name="_release_save" returns="tuple" signature="_release_save()">
          <variable citdl="_RLock" ilk="argument" name="self" />
          <variable citdl="int" line="149" name="count" />
          <variable citdl="_get_ident()" line="151" name="owner" />
        </scope>
        <scope attributes="protected" ilk="function" line="156" lineend="157" name="_is_owned" returns="bool" signature="_is_owned()">
          <variable citdl="_RLock" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="_allocate_lock()" line="392" name="_active_limbo_lock" />
      <scope attributes="protected __hidden__" classrefs="object" ilk="class" line="59" lineend="63" name="_Verbose">
        <scope attributes="__ctor__" ilk="function" line="60" lineend="61" name="__init__" signature="_Verbose(verbose=None)">
          <variable citdl="_Verbose" ilk="argument" name="self" />
          <variable ilk="argument" name="verbose" />
        </scope>
        <scope attributes="protected" ilk="function" line="62" lineend="63" name="_note" signature="_note(*args)">
          <variable citdl="_Verbose" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="808" lineend="810" name="_enumerate" returns="list()" signature="_enumerate()" />
      <scope attributes="protected __hidden__" classrefs="_Verbose" ilk="class" line="163" lineend="277" name="_Condition">
        <scope attributes="__ctor__" ilk="function" line="165" lineend="188" name="__init__" signature="_Condition(lock=None, verbose=None)">
          <variable citdl="_Condition" ilk="argument" name="self" />
          <variable citdl="RLock()" ilk="argument" name="lock" />
          <variable ilk="argument" name="verbose" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="RLock()" line="169" name="_lock" />
        <variable attributes="__instancevar__" citdl="lock.acquire" line="171" name="acquire" />
        <variable attributes="__instancevar__" citdl="lock.release" line="172" name="release" />
        <variable attributes="protected __instancevar__" citdl="list" line="188" name="_waiters" />
        <scope ilk="function" line="190" lineend="191" name="__enter__" returns="self._lock.__enter__()" signature="__enter__()">
          <variable citdl="_Condition" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="193" lineend="194" name="__exit__" returns="self._lock.__exit__()" signature="__exit__(*args)">
          <variable citdl="_Condition" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="196" lineend="197" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="_Condition" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="199" lineend="200" name="_release_save" signature="_release_save()">
          <variable citdl="_Condition" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="202" lineend="203" name="_acquire_restore" signature="_acquire_restore(x)">
          <variable citdl="_Condition" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <scope attributes="protected" ilk="function" line="205" lineend="212" name="_is_owned" returns="bool" signature="_is_owned()">
          <variable citdl="_Condition" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="214" lineend="254" name="wait" signature="wait(timeout=None)">
          <variable citdl="_Condition" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="_allocate_lock()" line="217" name="waiter" />
          <variable citdl="_release_save()" line="220" name="saved_state" />
          <variable citdl="_time()" line="232" name="endtime" />
          <variable citdl="float" line="233" name="delay" />
          <variable citdl="waiter.acquire()" line="235" name="gotit" />
          <variable citdl="_time()" line="238" name="remaining" />
        </scope>
        <scope ilk="function" line="256" lineend="272" name="notify" signature="notify(n=1)">
          <variable citdl="_Condition" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="n" />
          <variable attributes="private" citdl="list" line="259" name="__waiters" />
          <variable citdl="list" line="260" name="waiters" />
        </scope>
        <scope ilk="function" line="274" lineend="275" name="notify_all" signature="notify_all()">
          <variable citdl="_Condition" ilk="argument" name="self" />
        </scope>
        <variable citdl="_Condition.notify_all" line="277" name="notifyAll" />
      </scope>
      <variable attributes="protected __hidden__" citdl="_thread.get_ident" line="28" name="_get_ident" />
      <scope attributes="protected __hidden__" ilk="function" line="833" lineend="864" name="_after_fork" signature="_after_fork()">
        <variable attributes="protected" citdl="_allocate_lock()" line="841" name="_active_limbo_lock" />
        <variable citdl="dict" line="844" name="new_active" />
        <variable citdl="current_thread()" line="845" name="current" />
        <variable citdl="_get_ident()" line="851" name="ident" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="_Verbose" ilk="class" line="283" lineend="325" name="_Semaphore">
        <scope attributes="__ctor__" ilk="function" line="287" lineend="292" name="__init__" signature="_Semaphore(value=1, verbose=None)">
          <variable citdl="_Semaphore" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="value" />
          <variable ilk="argument" name="verbose" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Condition()" line="291" name="_cond" />
        <variable attributes="protected __instancevar__" citdl="int" line="292" name="_value" />
        <scope ilk="function" line="294" lineend="311" name="acquire" returns="bool" signature="acquire(blocking=True)">
          <variable citdl="_Semaphore" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="blocking" />
          <variable citdl="False" line="295" name="rc" />
        </scope>
        <variable citdl="_Semaphore.acquire" line="313" name="__enter__" />
        <scope ilk="function" line="315" lineend="322" name="release" signature="release()">
          <variable citdl="_Semaphore" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="324" lineend="325" name="__exit__" signature="__exit__(t, v, tb)">
          <variable citdl="_Semaphore" ilk="argument" name="self" />
          <variable ilk="argument" name="t" />
          <variable ilk="argument" name="v" />
          <variable ilk="argument" name="tb" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="386" lineend="389" name="_newname" returns="str" signature="_newname(template=&apos;Thread-%d&apos;)">
        <variable citdl="str" ilk="argument" name="template" />
        <variable attributes="protected" citdl="int" line="388" name="_counter" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="385" name="_counter" />
      <variable attributes="protected __hidden__" line="67" name="_profile_hook" />
      <variable attributes="protected __hidden__" citdl="dict" line="394" name="_limbo" />
      <variable attributes="protected __hidden__" citdl="dict" line="393" name="_active" />
      <scope attributes="protected __hidden__" classrefs="Thread" ilk="class" line="728" lineend="751" name="_MainThread">
        <scope attributes="__ctor__" ilk="function" line="730" lineend="735" name="__init__" signature="_MainThread()">
          <variable citdl="_MainThread" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="737" lineend="738" name="_set_daemon" returns="bool" signature="_set_daemon()">
          <variable citdl="_MainThread" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="740" lineend="751" name="_exitfunc" signature="_exitfunc()">
          <variable citdl="_MainThread" ilk="argument" name="self" />
          <variable citdl="_pickSomeNonDaemonThread()" line="742" name="t" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" line="822" name="_shutdown" />
      <variable attributes="protected __hidden__" citdl="_thread.allocate_lock" line="27" name="_allocate_lock" />
      <variable attributes="protected __hidden__" citdl="False" line="39" name="_VERBOSE" />
    </scope>
    <scope doc="# Copyright (C) 2005 Martin v. Lwis # Licensed to PSF under a Contributor Agreement." ilk="blob" lang="Python3" name="msilib">
      <variable citdl="bool" line="7" name="AMD64" />
      <scope classrefs="object" ilk="class" line="383" lineend="387" name="Binary">
        <variable attributes="__instancevar__" line="385" name="name" />
        <scope attributes="__ctor__" ilk="function" line="384" lineend="385" name="__init__" signature="Binary(fname)">
          <variable citdl="Binary" ilk="argument" name="self" />
          <variable ilk="argument" name="fname" />
        </scope>
        <scope ilk="function" line="386" lineend="387" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Binary" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="187" lineend="220" name="CAB">
        <variable attributes="__instancevar__" citdl="list" line="190" name="files" />
        <variable attributes="__instancevar__" citdl="int" line="192" name="index" />
        <variable attributes="__instancevar__" line="189" name="name" />
        <variable attributes="__instancevar__" citdl="set()" line="191" name="filenames" />
        <scope ilk="function" line="194" lineend="201" name="gen_id" returns="tuple" signature="gen_id(file)">
          <variable citdl="CAB" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="str" line="195" name="logical" />
          <variable citdl="int" line="196" name="pos" />
        </scope>
        <scope ilk="function" line="203" lineend="210" name="append" returns="tuple" signature="append(full, file, logical)">
          <variable citdl="CAB" ilk="argument" name="self" />
          <variable ilk="argument" name="full" />
          <variable ilk="argument" name="file" />
          <variable citdl="gen_id()" ilk="argument" name="logical" />
        </scope>
        <scope ilk="function" line="212" lineend="220" name="commit" signature="commit(db)">
          <import line="213" module="tempfile" symbol="mktemp" />
          <variable citdl="CAB" ilk="argument" name="self" />
          <variable ilk="argument" name="db" />
          <variable citdl="mktemp()" line="214" name="filename" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="188" lineend="192" name="__init__" signature="CAB(name)">
          <variable citdl="CAB" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="402" lineend="418" name="Control">
        <variable attributes="__instancevar__" line="404" name="dlg" />
        <variable attributes="__instancevar__" line="405" name="name" />
        <scope ilk="function" line="412" lineend="414" name="mapping" signature="mapping(event, attribute)">
          <variable citdl="Control" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
          <variable ilk="argument" name="attribute" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="403" lineend="405" name="__init__" signature="Control(dlg, name)">
          <variable citdl="Control" ilk="argument" name="self" />
          <variable ilk="argument" name="dlg" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="407" lineend="410" name="event" signature="event(event, argument, condition=&apos;1&apos;, ordering=None)">
          <variable citdl="Control" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
          <variable ilk="argument" name="argument" />
          <variable citdl="str" ilk="argument" name="condition" />
          <variable ilk="argument" name="ordering" />
        </scope>
        <scope ilk="function" line="416" lineend="418" name="condition" signature="condition(action, condition)">
          <variable citdl="Control" ilk="argument" name="self" />
          <variable ilk="argument" name="action" />
          <variable ilk="argument" name="condition" />
        </scope>
      </scope>
      <scope doc="Wraps MsiCreateRecord" ilk="function" name="CreateRecord" signature="OpenDatabase(name, flags) -&gt; dbobj" />
      <scope classrefs="object" ilk="class" line="435" lineend="467" name="Dialog">
        <scope ilk="function" line="442" lineend="445" name="control" returns="Control" signature="control(name, type, x, y, w, h, attr, prop, text, next, help)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="w" />
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="prop" />
          <variable ilk="argument" name="text" />
          <variable ilk="argument" name="next" />
          <variable ilk="argument" name="help" />
        </scope>
        <scope ilk="function" line="466" lineend="467" name="checkbox" returns="Dialog.control()" signature="checkbox(name, x, y, w, h, attr, prop, text, next)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="w" />
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="prop" />
          <variable ilk="argument" name="text" />
          <variable ilk="argument" name="next" />
        </scope>
        <variable attributes="__instancevar__" line="438" name="name" />
        <variable attributes="__instancevar__" line="439" name="h" />
        <scope ilk="function" line="457" lineend="458" name="pushbutton" returns="Dialog.control()" signature="pushbutton(name, x, y, w, h, attr, text, next)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="w" />
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="text" />
          <variable ilk="argument" name="next" />
        </scope>
        <variable attributes="__instancevar__" line="437" name="db" />
        <scope ilk="function" line="451" lineend="452" name="bitmap" returns="Dialog.control()" signature="bitmap(name, x, y, w, h, text)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="w" />
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="text" />
        </scope>
        <scope ilk="function" line="460" lineend="464" name="radiogroup" returns="RadioButtonGroup" signature="radiogroup(name, x, y, w, h, attr, prop, text, next)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="w" />
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="prop" />
          <variable ilk="argument" name="text" />
          <variable ilk="argument" name="next" />
        </scope>
        <variable attributes="__instancevar__" line="439" name="w" />
        <scope ilk="function" line="447" lineend="449" name="text" returns="Dialog.control()" signature="text(name, x, y, w, h, attr, text)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="w" />
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="text" />
        </scope>
        <variable attributes="__instancevar__" line="439" name="y" />
        <variable attributes="__instancevar__" line="439" name="x" />
        <scope ilk="function" line="454" lineend="455" name="line" returns="Dialog.control()" signature="line(name, x, y, w, h)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="w" />
          <variable ilk="argument" name="h" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="436" lineend="440" name="__init__" signature="Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="db" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="w" />
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="first" />
          <variable ilk="argument" name="default" />
          <variable ilk="argument" name="cancel" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="223" lineend="381" name="Directory">
        <scope doc="Remove .pyc/.pyo files on uninstall" ilk="function" line="377" lineend="381" name="remove_pyc" signature="remove_pyc()">
          <variable citdl="Directory" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="287" lineend="317" name="make_short" returns="tuple" signature="make_short(file)">
          <variable citdl="Directory" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="file" />
          <variable citdl="file.split()" line="288" name="parts" />
          <variable citdl="list" line="290" name="suffix" />
          <variable citdl="list" line="293" name="prefix" />
          <variable citdl="int" line="304" name="pos" />
        </scope>
        <variable attributes="__instancevar__" citdl="make_id()" line="245" name="component" />
        <variable attributes="__instancevar__" citdl="dict" line="248" name="keyfiles" />
        <variable attributes="__instancevar__" line="242" name="basedir" />
        <variable attributes="__instancevar__" line="240" name="db" />
        <variable attributes="__instancevar__" citdl="set()" line="247" name="ids" />
        <variable attributes="__instancevar__" citdl="make_id()" line="244" name="logical" />
        <variable attributes="__instancevar__" line="249" name="componentflags" />
        <scope doc="Add an entry to the Component table, and make this component the current for this directory." ilk="function" line="258" lineend="285" name="start_component" signature="start_component(component=None, feature=None, flags=None, keyfile=None, uuid=None)">
          <variable citdl="Directory" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="component" />
          <variable citdl="current_feature" ilk="argument" name="feature" />
          <variable ilk="argument" name="flags" />
          <variable ilk="argument" name="keyfile" />
          <variable citdl="uuid.upper()" ilk="argument" name="uuid" />
          <variable citdl="self.cab.gen_id()" line="276" name="keyid" />
        </scope>
        <scope doc="Add a file to the current component of the directory, starting a new one one if there is no current component." ilk="function" line="319" lineend="366" name="add_file" signature="add_file(file, src=None, version=None, language=None)">
          <variable citdl="Directory" ilk="argument" name="self" />
          <variable citdl="os.path.basename()" ilk="argument" name="file" />
          <variable ilk="argument" name="src" />
          <variable ilk="argument" name="version" />
          <variable ilk="argument" name="language" />
          <variable citdl="os.path.join()" line="331" name="absolute" />
          <variable line="334" name="logical" />
          <variable citdl="make_short()" line="340" name="short" />
          <variable citdl="str" line="341" name="full" />
          <variable line="342" name="filesize" />
          <variable citdl="int" line="346" name="attributes" />
        </scope>
        <variable attributes="__instancevar__" line="241" name="cab" />
        <variable attributes="__instancevar__" citdl="os.path.join()" line="251" name="absolute" />
        <variable attributes="__instancevar__" citdl="set()" line="246" name="short_names" />
        <scope doc="Add a list of files to the current component as specified in the glob pattern." ilk="function" line="368" lineend="375" name="glob" returns="glob.glob1()" signature="glob(pattern, exclude=None)">
          <variable citdl="Directory" ilk="argument" name="self" />
          <variable ilk="argument" name="pattern" />
          <variable ilk="argument" name="exclude" />
          <variable citdl="glob.glob1()" line="371" name="files" />
        </scope>
        <scope attributes="__ctor__" doc="Create a new directory in the Directory table." ilk="function" line="224" lineend="256" name="__init__" signature="Directory(db, cab, basedir, physical, _logical, default, componentflags=None)">
          <variable citdl="Directory" ilk="argument" name="self" />
          <variable ilk="argument" name="db" />
          <variable ilk="argument" name="cab" />
          <variable ilk="argument" name="basedir" />
          <variable ilk="argument" name="physical" />
          <variable citdl="make_id()" ilk="argument" name="_logical" />
          <variable ilk="argument" name="default" />
          <variable ilk="argument" name="componentflags" />
          <variable citdl="int" line="233" name="index" />
          <variable citdl="str" line="235" name="logical" />
          <variable citdl="basedir.logical" line="252" name="blogical" />
        </scope>
        <variable attributes="__instancevar__" line="243" name="physical" />
      </scope>
      <scope doc="fcicreate(cabname,files) -&gt; None" ilk="function" name="FCICreate" signature="fcicreate(cabname,files) -&gt; None" />
      <scope classrefs="object" ilk="class" line="389" lineend="400" name="Feature">
        <variable attributes="__instancevar__" line="392" name="id" />
        <scope attributes="__ctor__" ilk="function" line="390" lineend="397" name="__init__" signature="Feature(db, id, title, desc, display, level=1, parent=None, directory=None, attributes=0)">
          <variable citdl="Feature" ilk="argument" name="self" />
          <variable ilk="argument" name="db" />
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="desc" />
          <variable ilk="argument" name="display" />
          <variable citdl="int" ilk="argument" name="level" />
          <variable citdl="parent.id" ilk="argument" name="parent" />
          <variable ilk="argument" name="directory" />
          <variable citdl="int" ilk="argument" name="attributes" />
        </scope>
        <scope ilk="function" line="398" lineend="400" name="set_current" signature="set_current()">
          <variable citdl="Feature" ilk="argument" name="self" />
          <variable citdl="Feature" line="400" name="current_feature" />
        </scope>
      </scope>
      <variable citdl="bool" line="8" name="Itanium" />
      <variable citdl="int" name="MSICOLINFO_NAMES" />
      <variable citdl="int" name="MSICOLINFO_TYPES" />
      <variable citdl="int" name="MSIDBOPEN_CREATE" />
      <variable citdl="int" name="MSIDBOPEN_CREATEDIRECT" />
      <variable citdl="int" name="MSIDBOPEN_DIRECT" />
      <variable citdl="int" name="MSIDBOPEN_PATCHFILE" />
      <variable citdl="int" name="MSIDBOPEN_READONLY" />
      <variable citdl="int" name="MSIDBOPEN_TRANSACT" />
      <scope classrefs="Exception" ilk="class" name="MSIError" />
      <variable citdl="int" name="MSIMODIFY_ASSIGN" />
      <variable citdl="int" name="MSIMODIFY_DELETE" />
      <variable citdl="int" name="MSIMODIFY_INSERT" />
      <variable citdl="int" name="MSIMODIFY_INSERT_TEMPORARY" />
      <variable citdl="int" name="MSIMODIFY_MERGE" />
      <variable citdl="int" name="MSIMODIFY_REFRESH" />
      <variable citdl="int" name="MSIMODIFY_REPLACE" />
      <variable citdl="int" name="MSIMODIFY_SEEK" />
      <variable citdl="int" name="MSIMODIFY_UPDATE" />
      <variable citdl="int" name="MSIMODIFY_VALIDATE" />
      <variable citdl="int" name="MSIMODIFY_VALIDATE_DELETE" />
      <variable citdl="int" name="MSIMODIFY_VALIDATE_FIELD" />
      <variable citdl="int" name="MSIMODIFY_VALIDATE_NEW" />
      <scope doc="Wraps MsiOpenDatabase" ilk="function" name="OpenDatabase" signature="OpenDatabase(name, flags) -&gt; dbobj" />
      <variable citdl="int" name="PID_APPNAME" />
      <variable citdl="int" name="PID_AUTHOR" />
      <variable citdl="int" name="PID_CHARCOUNT" />
      <variable citdl="int" name="PID_CODEPAGE" />
      <variable citdl="int" name="PID_COMMENTS" />
      <variable citdl="int" name="PID_CREATE_DTM" />
      <variable citdl="int" name="PID_KEYWORDS" />
      <variable citdl="int" name="PID_LASTAUTHOR" />
      <variable citdl="int" name="PID_LASTPRINTED" />
      <variable citdl="int" name="PID_LASTSAVE_DTM" />
      <variable citdl="int" name="PID_PAGECOUNT" />
      <variable citdl="int" name="PID_REVNUMBER" />
      <variable citdl="int" name="PID_SECURITY" />
      <variable citdl="int" name="PID_SUBJECT" />
      <variable citdl="int" name="PID_TEMPLATE" />
      <variable citdl="int" name="PID_TITLE" />
      <variable citdl="int" name="PID_WORDCOUNT" />
      <scope classrefs="Control" ilk="class" line="420" lineend="433" name="RadioButtonGroup">
        <variable attributes="__instancevar__" citdl="int" line="425" name="index" />
        <variable attributes="__instancevar__" line="422" name="dlg" />
        <variable attributes="__instancevar__" line="423" name="name" />
        <scope ilk="function" line="427" lineend="433" name="add" signature="add(name, x, y, w, h, text, value=None)">
          <variable citdl="RadioButtonGroup" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="w" />
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="text" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" line="424" name="property" />
        <scope attributes="__ctor__" ilk="function" line="421" lineend="425" name="__init__" signature="RadioButtonGroup(dlg, name, property)">
          <variable citdl="RadioButtonGroup" ilk="argument" name="self" />
          <variable ilk="argument" name="dlg" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="property" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="28" lineend="81" name="Table">
        <variable attributes="__instancevar__" line="30" name="name" />
        <variable attributes="__instancevar__" citdl="list" line="31" name="fields" />
        <scope ilk="function" line="78" lineend="81" name="create" signature="create(db)">
          <variable citdl="Table" ilk="argument" name="self" />
          <variable ilk="argument" name="db" />
          <variable citdl="db.OpenView()" line="79" name="v" />
        </scope>
        <scope ilk="function" line="33" lineend="34" name="add_field" signature="add_field(index, name, type)">
          <variable citdl="Table" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="type" />
        </scope>
        <scope ilk="function" line="36" lineend="76" name="sql" returns="tuple" signature="sql()">
          <variable citdl="Table" ilk="argument" name="self" />
          <variable citdl="list" line="37" name="fields" />
          <variable citdl="list" line="38" name="keys" />
          <variable citdl="int" line="43" name="unk" />
          <variable citdl="int" line="46" name="size" />
          <variable citdl="int" line="47" name="dtype" />
          <variable citdl="str" line="50" name="tname" />
          <variable citdl="str" line="66" name="flags" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="29" lineend="31" name="__init__" signature="Table(name)">
          <variable citdl="Table" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <scope doc="UuidCreate() -&gt; string" ilk="function" name="UuidCreate" returns="str" signature="UuidCreate() -&gt; string" />
      <variable citdl="bool" line="9" name="Win64" />
      <scope ilk="function" line="96" lineend="120" name="add_data" signature="add_data(db, table, values)">
        <variable line="98" name="count" />
        <variable ilk="argument" name="db" />
        <variable line="103" name="field" />
        <variable citdl="CreateRecord()" line="99" name="r" />
        <variable ilk="argument" name="values" />
        <variable citdl="db.OpenView()" line="97" name="v" />
        <variable ilk="argument" name="table" />
      </scope>
      <scope ilk="function" line="123" lineend="128" name="add_stream" signature="add_stream(db, name, path)">
        <variable ilk="argument" name="path" />
        <variable citdl="CreateRecord()" line="125" name="r" />
        <variable ilk="argument" name="db" />
        <variable ilk="argument" name="name" />
        <variable citdl="db.OpenView()" line="124" name="v" />
      </scope>
      <scope ilk="function" line="171" lineend="173" name="add_tables" signature="add_tables(db, module)">
        <variable ilk="argument" name="db" />
        <variable ilk="argument" name="module" />
      </scope>
      <scope doc="Change the sequence number of an action in a sequence list" ilk="function" line="84" lineend="94" name="change_sequence" signature="change_sequence(seq, action, seqno=&lt;class &apos;msilib._Unspecified&apos;&gt;, cond=&lt;class &apos;msilib._Unspecified&apos;&gt;)">
        <variable ilk="argument" name="action" />
        <variable citdl="_Unspecified" ilk="argument" name="seqno" />
        <variable citdl="_Unspecified" ilk="argument" name="cond" />
        <variable ilk="argument" name="seq" />
      </scope>
      <variable citdl="int" line="12" name="datasizemask" />
      <scope ilk="function" line="184" lineend="185" name="gen_uuid" returns="str" signature="gen_uuid()" />
      <scope ilk="function" line="130" lineend="169" name="init_database" returns="OpenDatabase()" signature="init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)">
        <variable citdl="ProductCode.upper()" ilk="argument" name="ProductCode" />
        <variable ilk="argument" name="name" />
        <variable citdl="OpenDatabase()" line="139" name="db" />
        <variable ilk="argument" name="ProductName" />
        <variable citdl="db.GetSummaryInformation()" line="146" name="si" />
        <variable ilk="argument" name="ProductVersion" />
        <variable ilk="argument" name="schema" />
        <variable ilk="argument" name="Manufacturer" />
      </scope>
      <variable citdl="int" line="25" name="knownbits" />
      <scope ilk="function" line="175" lineend="182" name="make_id" returns="str" signature="make_id(str)">
        <variable citdl="str.replace()" ilk="argument" name="str" />
      </scope>
      <import module="os" />
      <import module="re" />
      <import module="schema" />
      <import module="sequence" />
      <import module="string" />
      <import module="sys" />
      <import module="text" />
      <variable citdl="int" line="20" name="type_binary" />
      <variable citdl="int" line="23" name="type_key" />
      <variable citdl="int" line="14" name="type_localizable" />
      <variable citdl="int" line="17" name="type_long" />
      <variable citdl="int" line="22" name="type_nullable" />
      <variable citdl="int" line="18" name="type_short" />
      <variable citdl="int" line="19" name="type_string" />
      <variable citdl="int" line="13" name="type_valid" />
      <variable citdl="int" line="16" name="typemask" />
      <scope attributes="protected __hidden__" ilk="class" line="83" lineend="83" name="_Unspecified" />
      <variable attributes="protected __hidden__" citdl="set()" line="222" name="_directories" />
    </scope>
    <scope doc="# The most useful windows datatypes" ilk="blob" lang="Python3" name="ctypes.wintypes">
      <scope doc="# XXX Deprecated" ilk="function" name="ARRAY" signature="ARRAY(typ, len)" />
      <scope classrefs="_SimpleCData" ilk="class" name="ATOM" />
      <scope classrefs="Exception" ilk="class" name="ArgumentError" />
      <scope classrefs="_CData" doc="XXX to be provided" ilk="class" name="Array" />
      <scope classrefs="_SimpleCData" ilk="class" name="BOOL" />
      <scope classrefs="_SimpleCData" ilk="class" name="BOOLEAN" />
      <scope classrefs="_SimpleCData" ilk="class" name="BYTE" />
      <scope classrefs="Structure" doc="Structure with big endian byte order" ilk="class" name="BigEndianStructure" />
      <scope classrefs="object" doc="An instance of this class represents a loaded dll/shared library, exporting functions using the standard C calling convention (named &apos;cdecl&apos; on Windows)." ilk="class" name="CDLL" />
      <scope doc="CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False) -&gt; function prototype." ilk="function" name="CFUNCTYPE" signature="CFUNCTYPE(restype, *argtypes, **kw)" />
      <scope classrefs="_SimpleCData" ilk="class" name="COLORREF" />
      <variable citdl="int" name="DEFAULT_MODE" />
      <scope classrefs="_SimpleCData" ilk="class" name="DOUBLE" />
      <scope classrefs="_SimpleCData" ilk="class" name="DWORD" />
      <scope ilk="function" name="DllCanUnloadNow" signature="DllCanUnloadNow()" />
      <scope ilk="function" name="DllGetClassObject" signature="DllGetClassObject(rclsid, riid, ppv)" />
      <scope classrefs="Structure" ilk="class" name="FILETIME" />
      <scope classrefs="_SimpleCData" ilk="class" name="FLOAT" />
      <scope doc="Convert a win32 error code into a string." ilk="function" name="FormatError" returns="str" signature="FormatError([integer]) -&gt; string" />
      <variable citdl="_FuncPtr" name="GetLastError" />
      <scope classrefs="_SimpleCData" ilk="class" name="HACCEL" />
      <scope classrefs="_SimpleCData" ilk="class" name="HANDLE" />
      <scope classrefs="_SimpleCData" ilk="class" name="HBITMAP" />
      <scope classrefs="_SimpleCData" ilk="class" name="HBRUSH" />
      <scope classrefs="_SimpleCData" ilk="class" name="HCOLORSPACE" />
      <scope classrefs="_SimpleCData" ilk="class" name="HDC" />
      <scope classrefs="_SimpleCData" ilk="class" name="HDESK" />
      <scope classrefs="_SimpleCData" ilk="class" name="HDWP" />
      <scope classrefs="_SimpleCData" ilk="class" name="HENHMETAFILE" />
      <scope classrefs="_SimpleCData" ilk="class" name="HFONT" />
      <scope classrefs="_SimpleCData" ilk="class" name="HGDIOBJ" />
      <scope classrefs="_SimpleCData" ilk="class" name="HGLOBAL" />
      <scope classrefs="_SimpleCData" ilk="class" name="HHOOK" />
      <scope classrefs="_SimpleCData" ilk="class" name="HICON" />
      <scope classrefs="_SimpleCData" ilk="class" name="HINSTANCE" />
      <scope classrefs="_SimpleCData" ilk="class" name="HKEY" />
      <scope classrefs="_SimpleCData" ilk="class" name="HKL" />
      <scope classrefs="_SimpleCData" ilk="class" name="HLOCAL" />
      <scope classrefs="_SimpleCData" ilk="class" name="HMENU" />
      <scope classrefs="_SimpleCData" ilk="class" name="HMETAFILE" />
      <scope classrefs="_SimpleCData" ilk="class" name="HMODULE" />
      <scope classrefs="_SimpleCData" ilk="class" name="HMONITOR" />
      <scope classrefs="_SimpleCData" ilk="class" name="HPALETTE" />
      <scope classrefs="_SimpleCData" ilk="class" name="HPEN" />
      <scope classrefs="_SimpleCData" ilk="class" name="HRESULT" />
      <scope classrefs="_SimpleCData" ilk="class" name="HRGN" />
      <scope classrefs="_SimpleCData" ilk="class" name="HRSRC" />
      <scope classrefs="_SimpleCData" ilk="class" name="HSTR" />
      <scope classrefs="_SimpleCData" ilk="class" name="HTASK" />
      <scope classrefs="_SimpleCData" ilk="class" name="HWINSTA" />
      <scope classrefs="_SimpleCData" ilk="class" name="HWND" />
      <scope classrefs="_SimpleCData" ilk="class" name="INT" />
      <scope classrefs="_SimpleCData" ilk="class" name="LANGID" />
      <scope classrefs="_SimpleCData" ilk="class" name="LARGE_INTEGER" />
      <scope classrefs="_SimpleCData" ilk="class" name="LCID" />
      <scope classrefs="_SimpleCData" ilk="class" name="LCTYPE" />
      <scope classrefs="_SimpleCData" ilk="class" name="LGRPID" />
      <scope classrefs="_SimpleCData" ilk="class" name="LONG" />
      <scope classrefs="_SimpleCData" ilk="class" name="LPARAM" />
      <scope classrefs="_SimpleCData" ilk="class" name="LPCOLESTR" />
      <scope classrefs="_SimpleCData" ilk="class" name="LPCSTR" />
      <scope classrefs="_SimpleCData" ilk="class" name="LPCVOID" />
      <scope classrefs="_SimpleCData" ilk="class" name="LPCWSTR" />
      <scope classrefs="_SimpleCData" ilk="class" name="LPOLESTR" />
      <scope classrefs="_SimpleCData" ilk="class" name="LPSTR" />
      <scope classrefs="_SimpleCData" ilk="class" name="LPVOID" />
      <scope classrefs="_SimpleCData" ilk="class" name="LPWSTR" />
      <scope classrefs="object" ilk="class" name="LibraryLoader" />
      <scope classrefs="_CData" doc="Structure base class" ilk="class" name="LittleEndianStructure" />
      <variable citdl="int" name="MAX_PATH" />
      <scope classrefs="Structure" ilk="class" name="MSG" />
      <scope classrefs="_SimpleCData" ilk="class" name="OLESTR" />
      <scope classrefs="CDLL" doc="This class represents a dll exporting functions using the Windows stdcall calling convention, and returning HRESULT. HRESULT error values are automatically raised as WindowsError" ilk="class" name="OleDLL" />
      <scope classrefs="Structure" ilk="class" name="POINT" />
      <scope ilk="function" name="POINTER" />
      <scope classrefs="Structure" ilk="class" name="POINTL" />
      <scope ilk="function" name="PYFUNCTYPE" signature="PYFUNCTYPE(restype, *argtypes)" />
      <scope classrefs="CDLL" doc="This class represents the Python library itself.  It allows to access Python API functions.  The GIL is not released, and Python exceptions are handled correctly." ilk="class" name="PyDLL" />
      <scope classrefs="Structure" ilk="class" name="RECT" />
      <scope classrefs="Structure" ilk="class" name="RECTL" />
      <scope ilk="function" name="RGB" signature="RGB(red, green, blue)" />
      <variable citdl="int" name="RTLD_GLOBAL" />
      <variable citdl="int" name="RTLD_LOCAL" />
      <scope classrefs="_SimpleCData" ilk="class" name="SC_HANDLE" />
      <scope classrefs="_SimpleCData" ilk="class" name="SERVICE_STATUS_HANDLE" />
      <scope classrefs="_SimpleCData" ilk="class" name="SHORT" />
      <scope classrefs="Structure" ilk="class" name="SIZE" />
      <scope classrefs="Structure" ilk="class" name="SIZEL" />
      <scope classrefs="Structure" ilk="class" name="SMALL_RECT" />
      <scope doc="# XXX Deprecated" ilk="function" name="SetPointerType" signature="SetPointerType(pointer, cls)" />
      <scope classrefs="_CData" doc="Structure base class" ilk="class" name="Structure" />
      <scope classrefs="_SimpleCData" ilk="class" name="UINT" />
      <scope classrefs="_SimpleCData" ilk="class" name="ULARGE_INTEGER" />
      <scope classrefs="_SimpleCData" ilk="class" name="ULONG" />
      <scope classrefs="_SimpleCData" ilk="class" name="USHORT" />
      <scope classrefs="_CData" doc="Union base class" ilk="class" name="Union" />
      <scope classrefs="_SimpleCData" ilk="class" name="VARIANT_BOOL" />
      <scope classrefs="_SimpleCData" ilk="class" name="WCHAR" />
      <scope classrefs="Structure" ilk="class" name="WIN32_FIND_DATAA" />
      <scope classrefs="Structure" ilk="class" name="WIN32_FIND_DATAW" />
      <scope ilk="function" name="WINFUNCTYPE" signature="WINFUNCTYPE(restype, *argtypes, **kw)" />
      <scope classrefs="_SimpleCData" ilk="class" name="WORD" />
      <scope classrefs="_SimpleCData" ilk="class" name="WPARAM" />
      <scope classrefs="CDLL" doc="This class represents a dll exporting functions using the Windows stdcall calling convention." ilk="class" name="WinDLL" />
      <scope ilk="function" name="WinError" signature="WinError(code=None, descr=None)" />
      <variable citdl="list" name="__all__" />
      <scope doc="Return the address of the C instance internal buffer" ilk="function" name="addressof" returns="int" signature="addressof(C instance) -&gt; integer" />
      <scope doc="Return the alignment requirements of a C instance" ilk="function" name="alignment" returns="int" signature="alignment(C type) -&gt; integer alignment(C instance) -&gt; integer" />
      <scope doc="Return a pointer lookalike to a C instance, only usable as function argument" ilk="function" name="byref" signature="byref(C instance[, offset=0]) -&gt; byref-object" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_bool" />
      <scope ilk="function" name="c_buffer" signature="c_buffer(init, size=None)" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_byte" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_char" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_char_p" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_double" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_float" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_int" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_int16" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_int32" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_int64" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_int8" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_long" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_longdouble" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_longlong" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_short" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_size_t" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_ubyte" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_uint" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_uint16" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_uint32" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_uint64" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_uint8" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_ulong" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_ulonglong" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_ushort" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_void_p" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_voidp" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_wchar" />
      <scope classrefs="_SimpleCData" ilk="class" name="c_wchar_p" />
      <scope ilk="function" name="cast" signature="cast(obj, typ)" />
      <variable citdl="LibraryLoader" name="cdll" />
      <scope doc="create_string_buffer(aBytes) -&gt; character array create_string_buffer(anInteger) -&gt; character array create_string_buffer(aString, anInteger) -&gt; character array" ilk="function" name="create_string_buffer" returns="str" signature="create_string_buffer(aBytes) -&gt; character array create_string_buffer(anInteger) -&gt; character array create_string_buffer(aString, anInteger) -&gt; character array" />
      <scope doc="create_unicode_buffer(aString) -&gt; character array create_unicode_buffer(anInteger) -&gt; character array create_unicode_buffer(aString, anInteger) -&gt; character array" ilk="function" name="create_unicode_buffer" returns="str" signature="create_unicode_buffer(aString) -&gt; character array create_unicode_buffer(anInteger) -&gt; character array create_unicode_buffer(aString, anInteger) -&gt; character array" />
      <scope ilk="function" name="get_errno" />
      <scope ilk="function" name="get_last_error" />
      <import module="macholib" />
      <variable citdl="CFunctionType" name="memmove" />
      <variable citdl="CFunctionType" name="memset" />
      <variable citdl="LibraryLoader" name="oledll" />
      <scope ilk="function" name="pointer" />
      <scope classrefs="_SimpleCData" ilk="class" name="py_object" />
      <variable citdl="LibraryLoader" name="pydll" />
      <variable citdl="PyDLL" name="pythonapi" />
      <scope doc="Resize the memory buffer of a ctypes instance" ilk="function" name="resize" />
      <scope doc="Set the encoding and error handling ctypes uses when converting between unicode and strings." ilk="function" name="set_conversion_mode" signature="set_conversion_mode(encoding, errors) -&gt; (previous-encoding, previous-errors)" />
      <scope ilk="function" name="set_errno" />
      <scope ilk="function" name="set_last_error" />
      <scope doc="Return the size in bytes of a C instance" ilk="function" name="sizeof" returns="int" signature="sizeof(C type) -&gt; integer sizeof(C instance) -&gt; integer" />
      <scope doc="Return the string at addr." ilk="function" name="string_at" returns="str" signature="string_at(addr[, size]) -&gt; string" />
      <scope classrefs="Structure" ilk="class" name="tagMSG" />
      <scope classrefs="Structure" ilk="class" name="tagPOINT" />
      <scope classrefs="Structure" ilk="class" name="tagRECT" />
      <scope classrefs="Structure" ilk="class" name="tagSIZE" />
      <import module="util" />
      <variable citdl="LibraryLoader" name="windll" />
      <scope doc="Return the string at addr." ilk="function" name="wstring_at" returns="str" signature="wstring_at(addr[, size]) -&gt; string" />
    </scope>
    <scope doc="Locale support.  The module provides low-level access to the C lib&apos;s locale APIs" ilk="blob" lang="Python3" name="locale">
      <variable citdl="int" line="54" name="CHAR_MAX" />
      <scope classrefs="Exception" ilk="class" line="62" name="Error" />
      <variable citdl="int" line="55" name="LC_ALL" />
      <variable citdl="int" line="56" name="LC_COLLATE" />
      <variable citdl="int" line="57" name="LC_CTYPE" />
      <variable citdl="int" line="59" name="LC_MONETARY" />
      <variable citdl="int" line="60" name="LC_NUMERIC" />
      <variable citdl="int" line="61" name="LC_TIME" />
      <variable citdl="list" line="28" name="__all__" />
      <scope doc="Parses a string as a float according to the locale settings." ilk="function" line="295" lineend="306" name="atof" returns="atof.func()" signature="atof(string, func=&lt;class &apos;float&apos;&gt;)">
        <variable line="302" name="dd" />
        <variable citdl="string.replace()" ilk="argument" name="string" />
        <variable citdl="float" ilk="argument" name="func" />
        <variable line="298" name="ts" />
      </scope>
      <scope doc="Converts a string to an integer according to the locale settings." ilk="function" line="308" lineend="310" name="atoi" returns="atof()" signature="atoi(str)">
        <variable ilk="argument" name="str" />
      </scope>
      <import module="collections" />
      <scope doc="Formats val according to the currency settings in the current locale." ilk="function" line="246" lineend="289" name="currency" signature="currency(val, symbol=True, grouping=False, international=False)">
        <variable line="252" name="digits" />
        <variable line="264" name="separated" />
        <variable ilk="argument" name="val" />
        <variable citdl="localeconv()" line="249" name="conv" />
        <variable line="271" name="sign_pos" />
        <variable citdl="True" ilk="argument" name="symbol" />
        <variable line="272" name="sign" />
        <variable citdl="str" line="257" name="s" />
        <variable line="263" name="precedes" />
        <variable citdl="False" ilk="argument" name="international" />
        <variable line="262" name="smb" />
        <variable citdl="False" ilk="argument" name="grouping" />
      </scope>
      <import module="encodings" />
      <scope doc="Returns the locale-aware substitution of a %? specifier (percent)." ilk="function" line="183" lineend="194" name="format" returns="_format()" signature="format(percent, value, grouping=False, monetary=False, *additional)">
        <variable attributes="varargs" ilk="argument" name="additional" />
        <variable ilk="argument" name="percent" />
        <variable citdl="False" ilk="argument" name="monetary" />
        <variable ilk="argument" name="value" />
        <variable citdl="_percent_re.match()" line="190" name="match" />
        <variable citdl="False" ilk="argument" name="grouping" />
      </scope>
      <scope doc="Formats a string in the same way that the % formatting would use, but takes the current locale into account." ilk="function" line="220" lineend="244" name="format_string" returns="_percent_re.sub()" signature="format_string(f, val, grouping=False)">
        <variable citdl="list()" line="228" name="new_val" />
        <variable citdl="format()" ilk="argument" name="val" />
        <variable ilk="argument" name="f" />
        <variable citdl="int" line="229" name="i" />
        <variable line="231" name="starcount" />
        <variable citdl="_percent_re.sub()" line="225" name="new_f" />
        <variable citdl="perc.group()" line="238" name="key" />
        <variable citdl="list()" line="224" name="percents" />
        <variable citdl="False" ilk="argument" name="grouping" />
      </scope>
      <import module="functools" />
      <scope doc="Tries to determine the default locale settings and returns them as tuple (language code, encoding)." ilk="function" line="442" lineend="492" name="getdefaultlocale" returns="tuple" signature="getdefaultlocale(envvars=(&apos;LC_ALL&apos;, &apos;LC_CTYPE&apos;, &apos;LANG&apos;, &apos;LANGUAGE&apos;))">
        <variable citdl="tuple" ilk="argument" name="envvars" />
        <variable citdl="lookup()" line="485" name="localename" />
        <variable citdl="windows_locale.get()" line="476" name="code" />
        <variable citdl="os.environ.get" line="483" name="lookup" />
      </scope>
      <scope doc="Returns the current setting for the given locale category as tuple (language code, encoding)." ilk="function" line="495" lineend="511" name="getlocale" returns="_parse_localename()" signature="getlocale(category=2)">
        <variable citdl="int" ilk="argument" name="category" />
        <variable citdl="_setlocale()" line="508" name="localename" />
      </scope>
      <scope doc="Return the charset that the user is likely using." ilk="function" line="560" lineend="584" name="getpreferredencoding" returns="str" signature="getpreferredencoding(do_setlocale=True)">
        <variable citdl="True" ilk="argument" name="do_setlocale" />
        <variable citdl="setlocale()" line="564" name="oldloc" />
        <variable citdl="str" line="569" name="result" />
      </scope>
      <variable citdl="dict" line="711" name="locale_alias" />
      <variable citdl="dict" line="602" name="locale_encoding_alias" />
      <scope doc="() -&gt; dict." ilk="function" line="110" lineend="114" name="localeconv" returns="_localeconv()" signature="localeconv()">
        <variable citdl="_localeconv()" line="111" name="d" />
      </scope>
      <scope doc="Returns a normalized locale code for the given locale name." ilk="function" line="330" lineend="394" name="normalize" returns="localename.lower()" signature="normalize(localename)">
        <variable citdl="encoding.replace()" line="359" name="norm_encoding" />
        <variable citdl="localename.lower()" line="355" name="langname" />
        <variable citdl="str" line="356" name="encoding" />
        <variable citdl="str" line="361" name="lookup_name" />
        <variable citdl="str" line="375" name="defenc" />
        <variable ilk="argument" name="localename" />
        <variable citdl="locale_alias.get()" line="362" name="code" />
        <variable citdl="encoding" line="347" name="fullname" />
      </scope>
      <import module="re" />
      <scope doc="Sets the locale for category to the default setting." ilk="function" line="529" lineend="537" name="resetlocale" signature="resetlocale(category=0)">
        <variable citdl="int" ilk="argument" name="category" />
      </scope>
      <scope doc="Set the locale for the given category." ilk="function" line="513" lineend="527" name="setlocale" returns="_setlocale()" signature="setlocale(category, locale=None)">
        <variable ilk="argument" name="category" />
        <variable citdl="normalize()" ilk="argument" name="locale" />
      </scope>
      <scope doc="Convert float to integer, taking the locale into account." ilk="function" line="291" lineend="293" name="str" returns="format()" signature="str(val)">
        <variable ilk="argument" name="val" />
      </scope>
      <scope doc="string,string -&gt; int." ilk="function" line="100" name="strcoll" />
      <scope doc="Return a string that can be used as a key for locale-aware comparisons." ilk="function" line="98" name="strxfrm" signature="strxfrm(string) -&gt; string." />
      <import module="sys" />
      <variable citdl="dict" line="1517" name="windows_locale" />
      <variable attributes="protected __hidden__" citdl="dict" line="107" name="_override_localeconv" />
      <variable attributes="__hidden__" citdl="int" line="58" name="LC_MESSAGES" />
      <scope attributes="protected __hidden__" doc="Compares two strings according to the locale." ilk="function" line="34" lineend="38" name="_strcoll" returns="bool" signature="strcoll(string,string) -&gt; int.">
        <variable ilk="argument" name="a" />
        <variable ilk="argument" name="b" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="169" lineend="178" name="_strip_padding" returns="list" signature="_strip_padding(s, amount)">
        <variable ilk="argument" name="s" />
        <variable ilk="argument" name="amount" />
        <variable citdl="int" line="170" name="lpos" />
        <variable citdl="len()" line="174" name="rpos" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="196" lineend="218" name="_format" returns="tuple" signature="_format(percent, value, grouping=False, monetary=False, *additional)">
        <variable ilk="argument" name="percent" />
        <variable ilk="argument" name="value" />
        <variable citdl="False" ilk="argument" name="grouping" />
        <variable citdl="False" ilk="argument" name="monetary" />
        <variable attributes="varargs" ilk="argument" name="additional" />
        <variable citdl="_strip_padding()" line="198" name="formatted" />
        <variable citdl="int" line="203" name="seps" />
        <variable citdl="formatted.split()" line="204" name="parts" />
        <variable line="207" name="decimal_point" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="312" lineend="319" name="_test" signature="_test()">
        <variable citdl="format()" line="315" name="s1" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="123" lineend="133" name="_grouping_intervals" signature="_grouping_intervals(grouping)">
        <variable ilk="argument" name="grouping" />
        <variable citdl="interval" line="133" name="last_interval" />
      </scope>
      <variable attributes="protected __hidden__" citdl="localeconv" line="103" name="_localeconv" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="180" name="_percent_re" />
      <variable attributes="protected __hidden__" citdl="setlocale" line="328" name="_setlocale" />
      <scope attributes="protected __hidden__" doc="Builds a locale code from the given tuple (language code, encoding)." ilk="function" line="426" lineend="440" name="_build_localename" returns="encoding" signature="_build_localename(localetuple)">
        <variable ilk="argument" name="localetuple" />
        <variable citdl="str" line="436" name="language" />
      </scope>
      <scope attributes="protected __hidden__" doc="Test function." ilk="function" line="1730" lineend="1784" name="_print_locale" signature="_print_locale()">
        <variable citdl="dict" line="1734" name="categories" />
        <scope attributes="protected" ilk="function" line="1735" lineend="1738" name="_init_categories" signature="_init_categories(categories=categories)">
          <variable citdl="dict" ilk="argument" name="categories" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Parses the locale code for localename and returns the result as tuple (language code, encoding)." ilk="function" line="396" lineend="424" name="_parse_localename" returns="tuple" signature="_parse_localename(localename)">
        <variable ilk="argument" name="localename" />
        <variable citdl="normalize()" line="410" name="code" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="136" lineend="165" name="_group" returns="tuple" signature="_group(s, monetary=False)">
        <variable citdl="s.rstrip()" ilk="argument" name="s" />
        <variable citdl="False" ilk="argument" name="monetary" />
        <variable citdl="localeconv()" line="137" name="conv" />
        <variable line="138" name="thousands_sep" />
        <variable line="139" name="grouping" />
        <variable citdl="str" line="142" name="result" />
        <variable citdl="int" line="143" name="seps" />
        <variable citdl="s.rstrip()" line="145" name="stripped" />
        <variable citdl="list" line="146" name="right_spaces" />
        <variable citdl="s.rstrip()" line="150" name="left_spaces" />
        <variable citdl="list" line="151" name="groups" />
      </scope>
      <scope attributes="protected __hidden__" doc="Returns a string that behaves for cmp locale-aware." ilk="function" line="40" lineend="44" name="_strxfrm" signature="strxfrm(string) -&gt; string.">
        <variable ilk="argument" name="s" />
      </scope>
    </scope>
    <scope doc="Fixer that changes input(...) into eval(input(...))." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_input">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" ilk="class" line="13" lineend="26" name="FixInput">
        <variable citdl="str" line="15" name="PATTERN" />
        <scope ilk="function" line="19" lineend="26" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixInput" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="node.clone()" line="24" name="new" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <variable citdl="NodePattern" line="10" name="context" />
      <import module="fixer_base" />
      <import module="patcomp" />
    </scope>
    <scope doc="# -*-mode: python; fill-column: 75; tab-width: 8 -*- # # $Id: tix.py 73505 2009-06-22 14:17:00Z matthias.klose $" ilk="blob" lang="Python3" name="tkinter.tix">
      <variable citdl="str" line="47" name="ACROSSTOP" />
      <variable citdl="str" name="ACTIVE" />
      <variable citdl="str" name="ALL" />
      <variable citdl="str" name="ANCHOR" />
      <variable citdl="str" name="ARC" />
      <variable citdl="str" line="46" name="AUTO" />
      <scope ilk="function" name="At" signature="At(x, y=None)" />
      <scope doc="# Indices: # XXX I don&apos;t like these -- take them away" ilk="function" name="AtEnd" signature="AtEnd()" />
      <scope ilk="function" name="AtInsert" signature="AtInsert(*args)" />
      <scope ilk="function" name="AtSelFirst" signature="AtSelFirst()" />
      <scope ilk="function" name="AtSelLast" signature="AtSelLast()" />
      <variable citdl="str" line="45" name="BALLOON" />
      <variable citdl="str" name="BASELINE" />
      <variable citdl="str" name="BEVEL" />
      <variable citdl="str" name="BOTH" />
      <variable citdl="str" name="BOTTOM" />
      <variable citdl="str" name="BROWSE" />
      <variable citdl="str" name="BUTT" />
      <scope classrefs="TixWidget" doc="Balloon help widget.  Subwidget       Class" ilk="class" line="516" lineend="541" name="Balloon">
        <scope ilk="function" line="540" lineend="541" name="unbind_widget" signature="unbind_widget(widget)">
          <variable citdl="Balloon" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="525" lineend="533" name="__init__" signature="Balloon(master=None, cnf={}, **kw)">
          <variable citdl="Balloon" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="list" line="527" name="static" />
        </scope>
        <scope doc="Bind balloon widget to another." ilk="function" line="535" lineend="538" name="bind_widget" signature="bind_widget(widget, cnf={}, **kw)">
          <variable citdl="Balloon" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Misc" doc="Internal class." ilk="class" name="BaseWidget" />
      <scope classrefs="Image" doc="Widget which can display a bitmap." ilk="class" name="BitmapImage" />
      <scope classrefs="Variable" doc="Value holder for boolean variables." ilk="class" name="BooleanVar" />
      <scope classrefs="Widget" doc="Button widget." ilk="class" name="Button" />
      <scope classrefs="TixWidget" doc="ButtonBox - A container for pushbuttons. Subwidgets are the buttons added with the add method." ilk="class" line="543" lineend="560" name="ButtonBox">
        <scope doc="Add a button with given name to box." ilk="function" line="551" lineend="556" name="add" returns="self.tk.call()" signature="add(name, cnf={}, **kw)">
          <variable citdl="ButtonBox" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="self.tk.call()" line="554" name="btn" />
        </scope>
        <scope ilk="function" line="558" lineend="560" name="invoke" signature="invoke(name)">
          <variable citdl="ButtonBox" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="547" lineend="549" name="__init__" signature="ButtonBox(master=None, cnf={}, **kw)">
          <variable citdl="ButtonBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <variable citdl="str" name="CASCADE" />
      <variable citdl="str" name="CENTER" />
      <variable citdl="str" name="CHAR" />
      <variable citdl="str" name="CHECKBUTTON" />
      <variable citdl="str" name="CHORD" />
      <variable citdl="str" name="COMMAND" />
      <scope classrefs="TixWidget" doc="This file implements the Canvas Object View widget. This is a base class of IconView. It implements automatic placement/adjustment of the scrollbars according to the canvas objects inside the canvas subwidget." ilk="class" line="1769" lineend="1777" name="CObjView" />
      <variable citdl="str" name="CURRENT" />
      <scope classrefs="object" doc="Internal class. Stores function to call when some user defined Tcl function is called e.g. after an event occurred." ilk="class" name="CallWrapper" />
      <scope classrefs="Widget" doc="Canvas widget to display graphical elements like lines or text." ilk="class" name="Canvas" />
      <scope classrefs="TixWidget" doc="The CheckList widget displays a list of items to be selected by the user. CheckList acts similarly to the Tk checkbutton or radiobutton widgets, except it is" ilk="class" line="1557" lineend="1604" name="CheckList">
        <scope doc="Returns the current mode of the entry given by entryPath." ilk="function" line="1582" lineend="1584" name="getmode" returns="self.tk.call()" signature="getmode(entrypath)">
          <variable citdl="CheckList" ilk="argument" name="self" />
          <variable ilk="argument" name="entrypath" />
        </scope>
        <scope doc="This command calls the setmode method for all the entries in this Tree widget: if an entry has no child entries, its mode is set to none." ilk="function" line="1571" lineend="1576" name="autosetmode" signature="autosetmode()">
          <variable citdl="CheckList" ilk="argument" name="self" />
        </scope>
        <scope doc="Returns a list of items whose status matches status." ilk="function" line="1590" lineend="1595" name="getselection" returns="self.tk.splitlist()" signature="getselection(mode=&apos;on&apos;)">
          <variable citdl="CheckList" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable citdl="self.tk.split()" line="1594" name="c" />
        </scope>
        <scope doc="Returns the current status of entryPath." ilk="function" line="1597" lineend="1599" name="getstatus" returns="self.tk.call()" signature="getstatus(entrypath)">
          <variable citdl="CheckList" ilk="argument" name="self" />
          <variable ilk="argument" name="entrypath" />
        </scope>
        <scope doc="Sets the status of entryPath to be status." ilk="function" line="1601" lineend="1604" name="setstatus" signature="setstatus(entrypath, mode=&apos;on&apos;)">
          <variable citdl="CheckList" ilk="argument" name="self" />
          <variable ilk="argument" name="entrypath" />
          <variable citdl="str" ilk="argument" name="mode" />
        </scope>
        <scope doc="Close the entry given by entryPath if its mode is close." ilk="function" line="1578" lineend="1580" name="close" signature="close(entrypath)">
          <variable citdl="CheckList" ilk="argument" name="self" />
          <variable ilk="argument" name="entrypath" />
        </scope>
        <scope doc="Open the entry given by entryPath if its mode is open." ilk="function" line="1586" lineend="1588" name="open" signature="open(entrypath)">
          <variable citdl="CheckList" ilk="argument" name="self" />
          <variable ilk="argument" name="entrypath" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1564" lineend="1569" name="__init__" signature="CheckList(master=None, cnf={}, **kw)">
          <variable citdl="CheckList" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Checkbutton widget which is either in on- or off-state." ilk="class" name="Checkbutton" />
      <scope classrefs="TixWidget" doc="ComboBox - an Entry field with a dropdown menu. The user can select a choice by either typing in the entry subwdget or selecting from the listbox subwidget." ilk="class" line="562" lineend="604" name="ComboBox">
        <scope ilk="function" line="603" lineend="604" name="pick" signature="pick(index)">
          <variable citdl="ComboBox" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="600" lineend="601" name="insert" signature="insert(index, str)">
          <variable citdl="ComboBox" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="str" />
        </scope>
        <scope ilk="function" line="597" lineend="598" name="append_history" signature="append_history(str)">
          <variable citdl="ComboBox" ilk="argument" name="self" />
          <variable ilk="argument" name="str" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="576" lineend="590" name="__init__" signature="ComboBox(master=None, cnf={}, **kw)">
          <variable citdl="ComboBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="594" lineend="595" name="add_history" signature="add_history(str)">
          <variable citdl="ComboBox" ilk="argument" name="self" />
          <variable ilk="argument" name="str" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="Control - An entry field with value change arrows.  The user can adjust the value by pressing the two arrow buttons or by entering the value directly into the entry. The new value will be checked" ilk="class" line="606" lineend="637" name="Control">
        <scope ilk="function" line="627" lineend="628" name="decrement" signature="decrement()">
          <variable citdl="Control" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="633" lineend="634" name="invoke" signature="invoke()">
          <variable citdl="Control" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="630" lineend="631" name="increment" signature="increment()">
          <variable citdl="Control" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="620" lineend="625" name="__init__" signature="Control(master=None, cnf={}, **kw)">
          <variable citdl="Control" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="636" lineend="637" name="update" signature="update()">
          <variable citdl="Control" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="str" name="DISABLED" />
      <variable citdl="str" name="DOTBOX" />
      <scope classrefs="TixWidget" doc="Toplevel window, with popup popdown and center methods. It tells the window manager that it is a dialog window and should be treated specially. The exact treatment depends on the treatment of" ilk="class" line="1382" lineend="1405" name="DialogShell">
        <scope ilk="function" line="1401" lineend="1402" name="popup" signature="popup()">
          <variable citdl="DialogShell" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1398" lineend="1399" name="popdown" signature="popdown()">
          <variable citdl="DialogShell" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1391" lineend="1396" name="__init__" signature="DialogShell(master=None, cnf={}, **kw)">
          <variable citdl="DialogShell" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1404" lineend="1405" name="center" signature="center()">
          <variable citdl="DialogShell" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="DirList - displays a list view of a directory, its previous directories and its sub-directories. The user can choose one of the directories displayed in the list or change to another directory." ilk="class" line="639" lineend="658" name="DirList">
        <scope ilk="function" line="657" lineend="658" name="chdir" signature="chdir(dir)">
          <variable citdl="DirList" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="651" lineend="655" name="__init__" signature="DirList(master, cnf={}, **kw)">
          <variable citdl="DirList" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="DirSelectBox - Motif style file select box. It is generally used for the user to choose a file. FileSelectBox stores the files mostly" ilk="class" line="682" lineend="699" name="DirSelectBox">
        <scope attributes="__ctor__" ilk="function" line="696" lineend="699" name="__init__" signature="DirSelectBox(master, cnf={}, **kw)">
          <variable citdl="DirSelectBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="The DirSelectDialog widget presents the directories in the file system in a dialog window. The user can use this dialog window to navigate through the file system to select the desired directory." ilk="class" line="735" lineend="755" name="DirSelectDialog">
        <scope ilk="function" line="751" lineend="752" name="popup" signature="popup()">
          <variable citdl="DirSelectDialog" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="754" lineend="755" name="popdown" signature="popdown()">
          <variable citdl="DirSelectDialog" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="745" lineend="748" name="__init__" signature="DirSelectDialog(master, cnf={}, **kw)">
          <variable citdl="DirSelectDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="DirTree - Directory Listing in a hierarchical view. Displays a tree view of a directory, its previous directories and its sub-directories. The user can choose one of the directories displayed" ilk="class" line="660" lineend="680" name="DirTree">
        <scope ilk="function" line="679" lineend="680" name="chdir" signature="chdir(dir)">
          <variable citdl="DirTree" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="673" lineend="677" name="__init__" signature="DirTree(master, cnf={}, **kw)">
          <variable citdl="DirTree" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="object" doc="DisplayStyle - handle configuration options shared by (multiple) Display Items" ilk="class" line="470" lineend="509" name="DisplayStyle">
        <scope ilk="function" line="508" lineend="509" name="__getitem__" returns="self.tk.call()" signature="__getitem__(key)">
          <variable citdl="DisplayStyle" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope attributes="protected" ilk="function" line="486" lineend="494" name="_options" returns="tuple" signature="_options(cnf, kw)">
          <variable citdl="DisplayStyle" ilk="argument" name="self" />
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable ilk="argument" name="kw" />
          <variable citdl="tuple" line="491" name="opts" />
        </scope>
        <scope ilk="function" line="483" lineend="484" name="__str__" returns="self.tk.call()" signature="__str__()">
          <variable citdl="DisplayStyle" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="499" lineend="500" name="__setitem__" signature="__setitem__(key, value)">
          <variable citdl="DisplayStyle" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" citdl="master.tk" line="479" name="tk" />
        <variable attributes="__instancevar__" citdl="self.tk.call()" line="480" name="stylename" />
        <scope ilk="function" line="502" lineend="506" name="config" returns="_lst2dict()" signature="config(cnf={}, **kw)">
          <variable citdl="DisplayStyle" ilk="argument" name="self" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="474" lineend="481" name="__init__" signature="DisplayStyle(itemtype, cnf={}, **kw)">
          <variable citdl="DisplayStyle" ilk="argument" name="self" />
          <variable ilk="argument" name="itemtype" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="_default_root" line="475" name="master" />
        </scope>
        <scope ilk="function" line="496" lineend="497" name="delete" signature="delete()">
          <variable citdl="DisplayStyle" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Variable" doc="Value holder for float variables." ilk="class" name="DoubleVar" />
      <variable citdl="str" name="E" />
      <variable citdl="str" name="END" />
      <variable citdl="str" name="EW" />
      <variable citdl="int" name="EXCEPTION" />
      <variable citdl="str" name="EXTENDED" />
      <scope classrefs="Widget" doc="Entry widget which allows to display simple text." ilk="class" name="Entry" />
      <scope classrefs="object" doc="Container for the properties of an event.  Instances of this type are generated if one of the following events occurs:" ilk="class" name="Event" />
      <scope classrefs="TixWidget" doc="ExFileSelectBox - MS Windows style file select box. It provides an convenient method for the user to select files. " ilk="class" line="701" lineend="731" name="ExFileSelectBox">
        <scope ilk="function" line="727" lineend="728" name="filter" signature="filter()">
          <variable citdl="ExFileSelectBox" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="730" lineend="731" name="invoke" signature="invoke()">
          <variable citdl="ExFileSelectBox" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="716" lineend="725" name="__init__" signature="ExFileSelectBox(master, cnf={}, **kw)">
          <variable citdl="ExFileSelectBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="ExFileSelectDialog - MS Windows style file select dialog. It provides an convenient method for the user to select files. " ilk="class" line="759" lineend="777" name="ExFileSelectDialog">
        <scope ilk="function" line="773" lineend="774" name="popup" signature="popup()">
          <variable citdl="ExFileSelectDialog" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="776" lineend="777" name="popdown" signature="popdown()">
          <variable citdl="ExFileSelectDialog" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="768" lineend="771" name="__init__" signature="ExFileSelectDialog(master, cnf={}, **kw)">
          <variable citdl="ExFileSelectDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <variable citdl="int" name="FALSE" />
      <variable citdl="str" name="FIRST" />
      <variable citdl="str" name="FLAT" />
      <scope classrefs="TixWidget" doc="FileEntry - Entry field with button that invokes a FileSelectDialog. The user can type in the filename manually. Alternatively, the user can press the button widget that sits next to the entry, which will bring" ilk="class" line="828" lineend="851" name="FileEntry">
        <scope ilk="function" line="849" lineend="851" name="file_dialog" signature="file_dialog()">
          <variable citdl="FileEntry" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="846" lineend="847" name="invoke" signature="invoke()">
          <variable citdl="FileEntry" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="840" lineend="844" name="__init__" signature="FileEntry(master, cnf={}, **kw)">
          <variable citdl="FileEntry" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="ExFileSelectBox - Motif style file select box. It is generally used for the user to choose a file. FileSelectBox stores the files mostly" ilk="class" line="779" lineend="804" name="FileSelectBox">
        <scope ilk="function" line="803" lineend="804" name="invoke" signature="invoke()">
          <variable citdl="FileSelectBox" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="800" lineend="801" name="apply_filter" signature="apply_filter()">
          <variable citdl="FileSelectBox" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="793" lineend="798" name="__init__" signature="FileSelectBox(master, cnf={}, **kw)">
          <variable citdl="FileSelectBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="FileSelectDialog - Motif style file select dialog.  Subwidgets       Class" ilk="class" line="807" lineend="826" name="FileSelectDialog">
        <scope ilk="function" line="822" lineend="823" name="popup" signature="popup()">
          <variable citdl="FileSelectDialog" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="825" lineend="826" name="popdown" signature="popdown()">
          <variable citdl="FileSelectDialog" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="816" lineend="820" name="__init__" signature="FileSelectDialog(master, cnf={}, **kw)">
          <variable citdl="FileSelectDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope doc="# Called with a dictionary argument of the form # {&apos;*.c&apos;:&apos;C source files&apos;, &apos;*.txt&apos;:&apos;Text Files&apos;, &apos;*&apos;:&apos;All files&apos;} # returns a string which can be used to configure the fsbox file types # in an ExFileSelectBox." ilk="function" line="1761" lineend="1765" name="FileTypeList" returns="str" signature="FileTypeList(dict)">
        <variable citdl="str" line="1762" name="s" />
        <variable ilk="argument" name="dict" />
      </scope>
      <scope classrefs="object" doc="The Tix Form geometry manager  Widgets can be arranged by specifying attachments to other widgets." ilk="class" line="218" lineend="259" name="Form">
        <scope ilk="function" line="248" lineend="253" name="info" returns="self.tk.call()" signature="info(option=None)">
          <variable citdl="Form" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="option" />
        </scope>
        <scope ilk="function" line="235" lineend="236" name="forget" signature="forget()">
          <variable citdl="Form" ilk="argument" name="self" />
        </scope>
        <variable citdl="Form.config" line="227" name="form" />
        <scope ilk="function" line="229" lineend="230" name="__setitem__" signature="__setitem__(key, value)">
          <variable citdl="Form" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="238" lineend="246" name="grid" returns="tuple" signature="grid(xsize=0, ysize=0)">
          <variable citdl="Form" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="xsize" />
          <variable citdl="int" ilk="argument" name="ysize" />
          <variable citdl="self.tk.call()" line="240" name="x" />
          <variable citdl="self.tk.splitlist()" line="241" name="y" />
          <variable citdl="tuple" line="242" name="z" />
        </scope>
        <scope ilk="function" line="255" lineend="259" name="slaves" returns="map()" signature="slaves()">
          <variable citdl="Form" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="224" lineend="225" name="config" signature="config(cnf={}, **kw)">
          <variable citdl="Form" ilk="argument" name="self" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="232" lineend="233" name="check" returns="self.tk.call()" signature="check()">
          <variable citdl="Form" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Frame widget which may contain other widgets and can have a 3D border." ilk="class" name="Frame" />
      <variable citdl="str" name="GROOVE" />
      <scope classrefs="TixWidget" doc="The Tix Grid command creates a new window  and makes it into a tixGrid widget. Additional options, may be specified on the command line or in the option database to configure aspects such as its cursor" ilk="class" line="1780" lineend="1882" name="Grid">
        <scope doc="Return True if display item exists at (x,y)" ilk="function" line="1840" lineend="1842" name="info_exists" returns="bool()" signature="info_exists(x, y)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope doc="Return coordinate of cell nearest pixel coordinate (x,y)" ilk="function" line="1848" lineend="1850" name="nearest" returns="self._getints()" signature="nearest(x, y)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope ilk="function" line="1870" lineend="1871" name="xview_moveto" signature="xview_moveto(fraction)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="fraction" />
        </scope>
        <scope ilk="function" line="1859" lineend="1863" name="set" signature="set(x, y, itemtype=None, **kw)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="itemtype" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="self._options()" line="1860" name="args" />
        </scope>
        <scope doc="Scroll right (count&gt;0) or left &lt;count&gt; of units|pages" ilk="function" line="1872" lineend="1874" name="xview_scroll" signature="xview_scroll(count, what=&apos;units&apos;)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="count" />
          <variable citdl="str" ilk="argument" name="what" />
        </scope>
        <scope ilk="function" line="1868" lineend="1869" name="xview" returns="self._getdoubles()" signature="xview()">
          <variable citdl="Grid" ilk="argument" name="self" />
        </scope>
        <scope doc="Scroll down (count&gt;0) or up &lt;count&gt; of units|pages" ilk="function" line="1880" lineend="1882" name="yview_scroll" signature="yview_scroll(count, what=&apos;units&apos;)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="count" />
          <variable citdl="str" ilk="argument" name="what" />
        </scope>
        <scope ilk="function" line="1876" lineend="1877" name="yview" returns="self._getdoubles()" signature="yview()">
          <variable citdl="Grid" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="1800" name="cnf" />
        <scope doc="Delete rows between from_ and to inclusive." ilk="function" line="1814" lineend="1820" name="delete_row" signature="delete_row(from_, to=None)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="from_" />
          <variable ilk="argument" name="to" />
        </scope>
        <scope ilk="function" line="1844" lineend="1846" name="info_bbox" returns="self.tk.call()" signature="info_bbox(x, y)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope doc="Get the option value for cell at (x,y)" ilk="function" line="1831" lineend="1833" name="entrycget" returns="self.tk.call()" signature="entrycget(x, y, option)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="option" />
        </scope>
        <scope ilk="function" line="1835" lineend="1836" name="entryconfigure" returns="self.tk.call()" signature="entryconfigure(x, y, **kw)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope doc="Delete columns between from_ and to inclusive." ilk="function" line="1821" lineend="1827" name="delete_column" signature="delete_column(from_, to=None)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="from_" />
          <variable ilk="argument" name="to" />
        </scope>
        <scope doc="Get the (x,y) coordinate of the current anchor cell" ilk="function" line="1808" lineend="1810" name="anchor_get" returns="self._getints()" signature="anchor_get()">
          <variable citdl="Grid" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1878" lineend="1879" name="yview_moveto" signature="yview_moveto(fraction)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="fraction" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1798" lineend="1801" name="__init__" signature="Grid(master=None, cnf={}, **kw)">
          <variable citdl="Grid" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="list" line="1799" name="static" />
        </scope>
      </scope>
      <variable citdl="str" name="HIDDEN" />
      <scope classrefs="TixWidget" doc="HList - Hierarchy display  widget can be used to display any data that have a hierarchical structure, for example, file system directory trees. The list entries are indented and connected by branch lines" ilk="class" line="853" lineend="1044" name="HList">
        <scope ilk="function" line="1031" lineend="1032" name="selection_includes" returns="self.tk.call()" signature="selection_includes(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="1022" lineend="1023" name="nearest" returns="self.tk.call()" signature="nearest(y)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope ilk="function" line="908" lineend="909" name="dropsite_clear" signature="dropsite_clear()">
          <variable citdl="HList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="974" lineend="975" name="info_hidden" returns="self.tk.call()" signature="info_hidden(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="941" lineend="947" name="indicator_configure" returns="_lst2dict()" signature="indicator_configure(entry, cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="952" lineend="953" name="indicator_exists" returns="self.tk.call()" signature="indicator_exists(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="968" lineend="969" name="info_data" returns="self.tk.call()" signature="info_data(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="993" lineend="999" name="item_configure" returns="_lst2dict()" signature="item_configure(entry, col, cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable ilk="argument" name="col" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="868" lineend="872" name="add_child" returns="self.tk.call()" signature="add_child(parent=None, cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="parent" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="990" lineend="991" name="item_cget" returns="self.tk.call()" signature="item_cget(entry, col, opt)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable ilk="argument" name="col" />
          <variable ilk="argument" name="opt" />
        </scope>
        <scope ilk="function" line="896" lineend="897" name="delete_siblings" signature="delete_siblings(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="893" lineend="894" name="delete_offsprings" signature="delete_offsprings(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="1028" lineend="1029" name="selection_clear" signature="selection_clear(cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="861" lineend="863" name="__init__" signature="HList(master=None, cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="986" lineend="988" name="info_selection" returns="self.tk.splitlist()" signature="info_selection()">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="987" name="c" />
        </scope>
        <scope ilk="function" line="1037" lineend="1038" name="show_entry" returns="self.tk.call()" signature="show_entry(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="1034" lineend="1035" name="selection_set" signature="selection_set(first, last=None)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="first" />
          <variable ilk="argument" name="last" />
        </scope>
        <scope ilk="function" line="980" lineend="981" name="info_parent" returns="self.tk.call()" signature="info_parent(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="937" lineend="939" name="indicator_create" signature="indicator_create(entry, cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="955" lineend="956" name="indicator_delete" signature="indicator_delete(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="1008" lineend="1009" name="item_delete" signature="item_delete(entry, col)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable ilk="argument" name="col" />
        </scope>
        <scope ilk="function" line="928" lineend="929" name="header_delete" signature="header_delete(col)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="col" />
        </scope>
        <scope ilk="function" line="1043" lineend="1044" name="yview" signature="yview(*args)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="865" lineend="866" name="add" returns="self.tk.call()" signature="add(entry, cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="890" lineend="891" name="delete_entry" signature="delete_entry(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="877" lineend="878" name="anchor_clear" signature="anchor_clear()">
          <variable citdl="HList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="925" lineend="926" name="header_exists" returns="self.tk.call()" signature="header_exists(col)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="col" />
        </scope>
        <scope ilk="function" line="983" lineend="984" name="info_prev" returns="self.tk.call()" signature="info_prev(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="1040" lineend="1041" name="xview" signature="xview(*args)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="914" lineend="920" name="header_configure" returns="_lst2dict()" signature="header_configure(col, cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="col" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1005" lineend="1006" name="item_exists" returns="self.tk.call()" signature="item_exists(entry, col)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable ilk="argument" name="col" />
        </scope>
        <scope ilk="function" line="931" lineend="932" name="header_size" returns="self.tk.call()" signature="header_size(col)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="col" />
        </scope>
        <scope ilk="function" line="958" lineend="959" name="indicator_size" returns="self.tk.call()" signature="indicator_size(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="934" lineend="935" name="hide_entry" signature="hide_entry(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="874" lineend="875" name="anchor_set" signature="anchor_set(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="977" lineend="978" name="info_next" returns="self.tk.call()" signature="info_next(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="880" lineend="885" name="column_width" returns="self.tk.call()" signature="column_width(col=0, width=None, chars=None)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="col" />
          <variable ilk="argument" name="width" />
          <variable ilk="argument" name="chars" />
        </scope>
        <scope ilk="function" line="964" lineend="966" name="info_children" returns="self.tk.splitlist()" signature="info_children(entry=None)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable citdl="self.tk.call()" line="965" name="c" />
        </scope>
        <scope ilk="function" line="1014" lineend="1020" name="entryconfigure" returns="_lst2dict()" signature="entryconfigure(entry, cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="905" lineend="906" name="dropsite_set" signature="dropsite_set(index)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="971" lineend="972" name="info_exists" returns="self.tk.call()" signature="info_exists(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="899" lineend="900" name="dragsite_set" signature="dragsite_set(index)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="911" lineend="912" name="header_create" signature="header_create(col, cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="col" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="961" lineend="962" name="info_anchor" returns="self.tk.call()" signature="info_anchor()">
          <variable citdl="HList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1001" lineend="1003" name="item_create" signature="item_create(entry, col, cnf={}, **kw)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable ilk="argument" name="col" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1025" lineend="1026" name="see" signature="see(entry)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
        </scope>
        <scope ilk="function" line="902" lineend="903" name="dragsite_clear" signature="dragsite_clear()">
          <variable citdl="HList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="922" lineend="923" name="header_cget" returns="self.tk.call()" signature="header_cget(col, opt)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="col" />
          <variable ilk="argument" name="opt" />
        </scope>
        <scope ilk="function" line="1011" lineend="1012" name="entrycget" returns="self.tk.call()" signature="entrycget(entry, opt)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable ilk="argument" name="opt" />
        </scope>
        <scope ilk="function" line="887" lineend="888" name="delete_all" signature="delete_all()">
          <variable citdl="HList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="949" lineend="950" name="indicator_cget" returns="self.tk.call()" signature="indicator_cget(entry, opt)">
          <variable citdl="HList" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable ilk="argument" name="opt" />
        </scope>
      </scope>
      <variable citdl="str" name="HORIZONTAL" />
      <variable citdl="str" line="43" name="IMAGE" />
      <variable citdl="str" line="44" name="IMAGETEXT" />
      <variable citdl="str" line="42" name="IMMEDIATE" />
      <variable citdl="str" name="INSERT" />
      <variable citdl="str" name="INSIDE" />
      <scope classrefs="object" doc="Base class for images." ilk="class" name="Image" />
      <scope classrefs="TixWidget" doc="InputOnly - Invisible widget. Unix only.  Subwidgets - None" ilk="class" line="1046" lineend="1052" name="InputOnly">
        <scope attributes="__ctor__" ilk="function" line="1051" lineend="1052" name="__init__" signature="InputOnly(master=None, cnf={}, **kw)">
          <variable citdl="InputOnly" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Variable" doc="Value holder for integer variables." ilk="class" name="IntVar" />
      <variable citdl="str" name="LAST" />
      <variable citdl="str" name="LEFT" />
      <scope classrefs="Widget" doc="Label widget which can display text and bitmaps." ilk="class" name="Label" />
      <scope classrefs="TixWidget" doc="LabelEntry - Entry field with label. Packages an entry widget and a label into one mega widget. It can beused be used to simplify the creation of ``entry-form&apos;&apos; type of interface." ilk="class" line="1054" lineend="1068" name="LabelEntry">
        <scope attributes="__ctor__" ilk="function" line="1064" lineend="1068" name="__init__" signature="LabelEntry(master=None, cnf={}, **kw)">
          <variable citdl="LabelEntry" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="LabelFrame - Labelled Frame container. Packages a frame widget and a label into one mega widget. To create widgets inside a LabelFrame widget, one creates the new widgets relative to the" ilk="class" line="1070" lineend="1085" name="LabelFrame">
        <scope attributes="__ctor__" ilk="function" line="1081" lineend="1085" name="__init__" signature="LabelFrame(master=None, cnf={}, **kw)">
          <variable citdl="LabelFrame" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="A ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to display many windows in a limited space using a notebook metaphor. The notebook is divided into a stack of pages" ilk="class" line="1088" lineend="1121" name="ListNoteBook">
        <scope ilk="function" line="1120" lineend="1121" name="raise_page" signature="raise_page(name)">
          <variable citdl="ListNoteBook" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="1104" lineend="1107" name="add" signature="add(name, cnf={}, **kw)">
          <variable citdl="ListNoteBook" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1109" lineend="1110" name="page" returns="self.subwidget()" signature="page(name)">
          <variable citdl="ListNoteBook" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1096" lineend="1102" name="__init__" signature="ListNoteBook(master, cnf={}, **kw)">
          <variable citdl="ListNoteBook" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1112" lineend="1118" name="pages" returns="list" signature="pages()">
          <variable citdl="ListNoteBook" ilk="argument" name="self" />
          <variable citdl="self.tk.split()" line="1114" name="names" />
          <variable citdl="list" line="1115" name="ret" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="Listbox widget which can display a list of strings." ilk="class" name="Listbox" />
      <variable citdl="str" name="MITER" />
      <variable citdl="str" name="MOVETO" />
      <variable citdl="str" name="MULTIPLE" />
      <scope classrefs="Widget" doc="Menu widget which allows to display menu bars, pull-down menus and pop-up menus." ilk="class" name="Menu" />
      <scope classrefs="Widget" doc="Menubutton widget, obsolete since Tk8.0." ilk="class" name="Menubutton" />
      <scope classrefs="Widget" doc="Message widget to display multiline text. Obsolete since Label does it too." ilk="class" name="Message" />
      <scope classrefs="TixWidget" doc="The Meter widget can be used to show the progress of a background job which may take a long time to execute." ilk="class" line="1123" lineend="1130" name="Meter">
        <scope attributes="__ctor__" ilk="function" line="1128" lineend="1130" name="__init__" signature="Meter(master=None, cnf={}, **kw)">
          <variable citdl="Meter" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Internal class.  Base class which defines methods common for interior widgets." ilk="class" name="Misc" />
      <variable citdl="str" name="N" />
      <variable citdl="str" name="NE" />
      <variable citdl="int" name="NO" />
      <variable citdl="str" name="NONE" />
      <variable citdl="str" name="NORMAL" />
      <variable citdl="str" name="NS" />
      <variable citdl="str" name="NSEW" />
      <variable citdl="str" name="NUMERIC" />
      <variable citdl="str" name="NW" />
      <scope doc="Inhibit setting of default root window." ilk="function" name="NoDefaultRoot" signature="NoDefaultRoot()" />
      <scope classrefs="TixWidget" doc="NoteBook - Multi-page container widget (tabbed notebook metaphor).  Subwidgets       Class" ilk="class" line="1132" lineend="1170" name="NoteBook">
        <scope ilk="function" line="1169" lineend="1170" name="raised" returns="self.tk.call()" signature="raised()">
          <variable citdl="NoteBook" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1155" lineend="1156" name="page" returns="self.subwidget()" signature="page(name)">
          <variable citdl="NoteBook" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="1166" lineend="1167" name="raise_page" signature="raise_page(name)">
          <variable citdl="NoteBook" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="1145" lineend="1148" name="add" signature="add(name, cnf={}, **kw)">
          <variable citdl="NoteBook" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1158" lineend="1164" name="pages" returns="list" signature="pages()">
          <variable citdl="NoteBook" ilk="argument" name="self" />
          <variable citdl="self.tk.split()" line="1160" name="names" />
          <variable citdl="list" line="1161" name="ret" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1140" lineend="1143" name="__init__" signature="NoteBook(master=None, cnf={}, **kw)">
          <variable citdl="NoteBook" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1150" lineend="1153" name="delete" signature="delete(name)">
          <variable citdl="NoteBook" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" ilk="class" line="1172" lineend="1174" name="NoteBookFrame" />
      <variable citdl="int" name="OFF" />
      <variable citdl="int" name="ON" />
      <variable citdl="str" name="OUTSIDE" />
      <scope classrefs="TixWidget" doc="OptionMenu - creates a menu button of options.  Subwidget       Class" ilk="class" line="1176" lineend="1202" name="OptionMenu">
        <scope ilk="function" line="1201" lineend="1202" name="enable" signature="enable(name)">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="1198" lineend="1199" name="disable" signature="disable(name)">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="1192" lineend="1193" name="add_separator" signature="add_separator(name, cnf={}, **kw)">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1189" lineend="1190" name="add_command" signature="add_command(name, cnf={}, **kw)">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1184" lineend="1187" name="__init__" signature="OptionMenu(master, cnf={}, **kw)">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1195" lineend="1196" name="delete" signature="delete(name)">
          <variable citdl="OptionMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <scope doc="Returns the qualified path name for the widget." ilk="function" line="1751" lineend="1754" name="OptionName" returns="widget.tk.call()" signature="OptionName(widget)">
        <variable ilk="argument" name="widget" />
      </scope>
      <variable citdl="str" name="PAGES" />
      <variable citdl="str" name="PIESLICE" />
      <variable citdl="str" name="PROJECTING" />
      <scope classrefs="object" doc="Geometry manager Pack.  Base class to use the methods pack_* in every widget." ilk="class" name="Pack" />
      <scope classrefs="TixWidget" doc="PanedWindow - Multi-pane container widget allows the user to interactively manipulate the sizes of several panes. The panes can be arranged either vertically or horizontally.The" ilk="class" line="1204" lineend="1248" name="PanedWindow">
        <scope ilk="function" line="1243" lineend="1248" name="panes" returns="list" signature="panes()">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="1244" name="names" />
          <variable citdl="list" line="1245" name="ret" />
        </scope>
        <scope ilk="function" line="1225" lineend="1228" name="delete" signature="delete(name)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="1230" lineend="1231" name="forget" signature="forget(name)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="1219" lineend="1223" name="add" signature="add(name, cnf={}, **kw)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1233" lineend="1234" name="panecget" returns="self.tk.call()" signature="panecget(entry, opt)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable ilk="argument" name="opt" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1215" lineend="1216" name="__init__" signature="PanedWindow(master, cnf={}, **kw)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1236" lineend="1241" name="paneconfigure" returns="_lst2dict()" signature="paneconfigure(entry, cnf={}, **kw)">
          <variable citdl="PanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="entry" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Image" doc="Widget which can display colored images in GIF, PPM/PGM format." ilk="class" name="PhotoImage" />
      <scope classrefs="object" doc="Geometry manager Place.  Base class to use the methods place_* in every widget." ilk="class" name="Place" />
      <scope classrefs="TixWidget" doc="PopupMenu widget can be used as a replacement of the tk_popup command. The advantage of the Tix PopupMenu widget is it requires less application code to manipulate." ilk="class" line="1250" lineend="1274" name="PopupMenu">
        <scope ilk="function" line="1273" lineend="1274" name="post_widget" signature="post_widget(widget, x, y)">
          <variable citdl="PopupMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope ilk="function" line="1270" lineend="1271" name="unbind_widget" signature="unbind_widget(widget)">
          <variable citdl="PopupMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1262" lineend="1265" name="__init__" signature="PopupMenu(master, cnf={}, **kw)">
          <variable citdl="PopupMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1267" lineend="1268" name="bind_widget" signature="bind_widget(widget)">
          <variable citdl="PopupMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
        </scope>
      </scope>
      <variable citdl="str" name="RADIOBUTTON" />
      <variable citdl="str" name="RAISED" />
      <variable citdl="int" name="READABLE" />
      <variable citdl="str" name="RIDGE" />
      <variable citdl="str" name="RIGHT" />
      <variable citdl="str" name="ROUND" />
      <scope classrefs="Widget" doc="Radiobutton widget which shows only one of several buttons in on-state." ilk="class" name="Radiobutton" />
      <scope classrefs="TixWidget" doc="Internal widget to draw resize handles on Scrolled widgets." ilk="class" line="1276" lineend="1298" name="ResizeHandle">
        <scope ilk="function" line="1291" lineend="1292" name="detach_widget" signature="detach_widget(widget)">
          <variable citdl="ResizeHandle" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
        </scope>
        <scope ilk="function" line="1288" lineend="1289" name="attach_widget" signature="attach_widget(widget)">
          <variable citdl="ResizeHandle" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
        </scope>
        <scope ilk="function" line="1294" lineend="1295" name="hide" signature="hide(widget)">
          <variable citdl="ResizeHandle" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1278" lineend="1286" name="__init__" signature="ResizeHandle(master, cnf={}, **kw)">
          <variable citdl="ResizeHandle" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="list" line="1281" name="flags" />
        </scope>
        <scope ilk="function" line="1297" lineend="1298" name="show" signature="show(widget)">
          <variable citdl="ResizeHandle" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
        </scope>
      </scope>
      <variable citdl="str" name="S" />
      <variable citdl="str" name="SCROLL" />
      <variable citdl="str" name="SE" />
      <variable citdl="str" name="SEL" />
      <variable citdl="str" name="SEL_FIRST" />
      <variable citdl="str" name="SEL_LAST" />
      <variable citdl="str" name="SEPARATOR" />
      <variable citdl="str" name="SINGLE" />
      <variable citdl="str" name="SOLID" />
      <variable citdl="str" line="41" name="STATUS" />
      <variable citdl="str" name="SUNKEN" />
      <variable citdl="str" name="SW" />
      <scope classrefs="Widget" doc="Scale widget which can display a numerical scale." ilk="class" name="Scale" />
      <scope classrefs="Widget" doc="Scrollbar widget which displays a slider at a certain position." ilk="class" name="Scrollbar" />
      <scope classrefs="Grid" doc="Scrolled Grid widgets" ilk="class" line="1884" lineend="1891" name="ScrolledGrid">
        <variable attributes="__instancevar__" citdl="dict" line="1890" name="cnf" />
        <scope attributes="__ctor__" ilk="function" line="1888" lineend="1891" name="__init__" signature="ScrolledGrid(master=None, cnf={}, **kw)">
          <variable citdl="ScrolledGrid" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="list" line="1889" name="static" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="ScrolledHList - HList with automatic scrollbars." ilk="class" line="1300" lineend="1309" name="ScrolledHList">
        <scope attributes="__ctor__" ilk="function" line="1304" lineend="1309" name="__init__" signature="ScrolledHList(master, cnf={}, **kw)">
          <variable citdl="ScrolledHList" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="ScrolledListBox - Listbox with automatic scrollbars." ilk="class" line="1311" lineend="1319" name="ScrolledListBox">
        <scope attributes="__ctor__" ilk="function" line="1315" lineend="1319" name="__init__" signature="ScrolledListBox(master, cnf={}, **kw)">
          <variable citdl="ScrolledListBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="ScrolledTList - TList with automatic scrollbars." ilk="class" line="1331" lineend="1340" name="ScrolledTList">
        <scope attributes="__ctor__" ilk="function" line="1335" lineend="1340" name="__init__" signature="ScrolledTList(master, cnf={}, **kw)">
          <variable citdl="ScrolledTList" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="ScrolledText - Text with automatic scrollbars." ilk="class" line="1321" lineend="1329" name="ScrolledText">
        <scope attributes="__ctor__" ilk="function" line="1325" lineend="1329" name="__init__" signature="ScrolledText(master, cnf={}, **kw)">
          <variable citdl="ScrolledText" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="ScrolledWindow - Window with automatic scrollbars." ilk="class" line="1342" lineend="1350" name="ScrolledWindow">
        <scope attributes="__ctor__" ilk="function" line="1346" lineend="1350" name="__init__" signature="ScrolledWindow(master, cnf={}, **kw)">
          <variable citdl="ScrolledWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="Select - Container of button subwidgets. It can be used to provide radio-box or check-box style of selection options for the user. " ilk="class" line="1352" lineend="1372" name="Select">
        <scope ilk="function" line="1366" lineend="1369" name="add" signature="add(name, cnf={}, **kw)">
          <variable citdl="Select" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1371" lineend="1372" name="invoke" signature="invoke(name)">
          <variable citdl="Select" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1359" lineend="1364" name="__init__" signature="Select(master, cnf={}, **kw)">
          <variable citdl="Select" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="TixWidget" doc="Toplevel window.  Subwidgets - None" ilk="class" line="1374" lineend="1380" name="Shell">
        <scope attributes="__ctor__" ilk="function" line="1379" lineend="1380" name="__init__" signature="Shell(master=None, cnf={}, **kw)">
          <variable citdl="Shell" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="spinbox widget." ilk="class" name="Spinbox" />
      <scope classrefs="TixWidget" doc="StdButtonBox - Standard Button Box (OK, Apply, Cancel and Help)" ilk="class" line="1407" lineend="1420" name="StdButtonBox">
        <scope ilk="function" line="1418" lineend="1420" name="invoke" signature="invoke(name)">
          <variable citdl="StdButtonBox" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1410" lineend="1416" name="__init__" signature="StdButtonBox(master=None, cnf={}, **kw)">
          <variable citdl="StdButtonBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Variable" doc="Value holder for strings variables." ilk="class" name="StringVar" />
      <scope classrefs="Button" ilk="class" name="Studbutton" />
      <variable citdl="int" line="55" name="TCL_ALL_EVENTS" />
      <variable citdl="int" line="50" name="TCL_DONT_WAIT" />
      <variable citdl="int" line="52" name="TCL_FILE_EVENTS" />
      <variable citdl="int" line="54" name="TCL_IDLE_EVENTS" />
      <variable citdl="int" line="53" name="TCL_TIMER_EVENTS" />
      <variable citdl="int" line="51" name="TCL_WINDOW_EVENTS" />
      <variable citdl="str" line="40" name="TEXT" />
      <scope classrefs="TixWidget" doc="TList - Hierarchy display widget which can be used to display data in a tabular format. The list entries of a TList widget are similar to the entries in the Tk listbox widget. The main" ilk="class" line="1422" lineend="1509" name="TList">
        <scope ilk="function" line="1499" lineend="1500" name="selection_includes" returns="self.tk.call()" signature="selection_includes(index)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="1490" lineend="1491" name="nearest" returns="self.tk.call()" signature="nearest(x, y)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
        </scope>
        <scope ilk="function" line="1459" lineend="1460" name="dropsite_clear" signature="dropsite_clear()">
          <variable citdl="TList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1480" lineend="1482" name="info_selection" returns="self.tk.splitlist()" signature="info_selection()">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="1481" name="c" />
        </scope>
        <scope ilk="function" line="1435" lineend="1436" name="active_set" signature="active_set(index)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="1484" lineend="1485" name="info_size" returns="self.tk.call()" signature="info_size()">
          <variable citdl="TList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1493" lineend="1494" name="see" signature="see(index)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="1496" lineend="1497" name="selection_clear" signature="selection_clear(cnf={}, **kw)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1438" lineend="1439" name="active_clear" signature="active_clear()">
          <variable citdl="TList" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1432" lineend="1433" name="__init__" signature="TList(master=None, cnf={}, **kw)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1477" lineend="1478" name="info_right" returns="self.tk.call()" signature="info_right(index)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="1502" lineend="1503" name="selection_set" signature="selection_set(first, last=None)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="first" />
          <variable ilk="argument" name="last" />
        </scope>
        <scope ilk="function" line="1508" lineend="1509" name="yview" signature="yview(*args)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="1487" lineend="1488" name="info_up" returns="self.tk.call()" signature="info_up(index)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="1444" lineend="1445" name="anchor_clear" signature="anchor_clear()">
          <variable citdl="TList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1505" lineend="1506" name="xview" signature="xview(*args)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="1441" lineend="1442" name="anchor_set" signature="anchor_set(index)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="1471" lineend="1472" name="info_down" returns="self.tk.call()" signature="info_down(index)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="1456" lineend="1457" name="dropsite_set" signature="dropsite_set(index)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="1462" lineend="1463" name="insert" signature="insert(index, cnf={}, **kw)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="1450" lineend="1451" name="dragsite_set" signature="dragsite_set(index)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="1468" lineend="1469" name="info_anchor" returns="self.tk.call()" signature="info_anchor()">
          <variable citdl="TList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1474" lineend="1475" name="info_left" returns="self.tk.call()" signature="info_left(index)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="1453" lineend="1454" name="dragsite_clear" signature="dragsite_clear()">
          <variable citdl="TList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1465" lineend="1466" name="info_active" returns="self.tk.call()" signature="info_active()">
          <variable citdl="TList" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1447" lineend="1448" name="delete" signature="delete(from_, to=None)">
          <variable citdl="TList" ilk="argument" name="self" />
          <variable ilk="argument" name="from_" />
          <variable ilk="argument" name="to" />
        </scope>
      </scope>
      <variable citdl="str" name="TOP" />
      <variable citdl="int" name="TRUE" />
      <scope ilk="function" name="Tcl" signature="Tcl(screenName=None, baseName=None, className=&apos;Tk&apos;, useTk=0)" />
      <scope classrefs="Exception" ilk="class" name="TclError" />
      <variable citdl="float" name="TclVersion" />
      <scope classrefs="Widget" doc="Text widget which can display text in various forms." ilk="class" name="Text" />
      <scope classrefs="TixWidget" doc="Subwidget class.  This is used to mirror child widgets automatically created" ilk="class" line="407" lineend="458" name="TixSubWidget">
        <variable attributes="__instancevar__" citdl="int" line="444" name="destroy_physically" />
        <scope attributes="__ctor__" ilk="function" line="414" lineend="444" name="__init__" signature="TixSubWidget(master, name, destroy_physically=1, check_intermediate=1)">
          <variable citdl="TixSubWidget" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
          <variable citdl="int" ilk="argument" name="check_intermediate" />
          <variable citdl="list" line="417" name="path" />
          <variable citdl="list" line="420" name="plist" />
          <variable citdl="" line="429" name="parent" />
          <variable citdl="str.join()" line="431" name="n" />
          <variable citdl="master._nametowidget()" line="433" name="w" />
        </scope>
        <scope ilk="function" line="446" lineend="458" name="destroy" signature="destroy()">
          <variable citdl="TixSubWidget" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="A TixWidget class is used to package all (or most) Tix widgets.  Widget initialization is extended in two ways:" ilk="class" line="265" lineend="402" name="TixWidget">
        <scope doc="Return the named subwidget (which must have been created by the sub-class)." ilk="function" line="332" lineend="340" name="subwidget" returns="self._nametowidget()" signature="subwidget(name)">
          <variable citdl="TixWidget" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="self._subwidget_name()" line="335" name="n" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="316" name="subwidget_list" />
        <scope attributes="protected" doc="Get a subwidget name (returns a String, not a Widget !)" ilk="function" line="357" lineend="362" name="_subwidget_name" returns="self.tk.call()" signature="_subwidget_name(name)">
          <variable citdl="TixWidget" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="384" lineend="396" name="image_create" returns="master.tk.call()" signature="image_create(imgtype, cnf={}, master=None, **kw)">
          <variable citdl="TixWidget" ilk="argument" name="self" />
          <variable ilk="argument" name="imgtype" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable citdl="tkinter._default_root" ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="tuple" line="391" name="options" />
          <variable citdl="self._register()" line="394" name="v" />
        </scope>
        <variable attributes="__instancevar__" line="301" name="widgetName" />
        <scope doc="Set a variable without calling its action routine" ilk="function" line="328" lineend="330" name="set_silent" signature="set_silent(value)">
          <variable citdl="TixWidget" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Set configuration options for all subwidgets (and self)." ilk="function" line="372" lineend="382" name="config_all" signature="config_all(option, value)">
          <variable citdl="TixWidget" ilk="argument" name="self" />
          <variable citdl="repr()" ilk="argument" name="option" />
          <variable citdl="repr()" ilk="argument" name="value" />
          <variable citdl="_subwidget_names()" line="380" name="names" />
        </scope>
        <scope ilk="function" line="323" lineend="326" name="__getattr__" signature="__getattr__(name)">
          <variable citdl="TixWidget" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="protected" doc="Return the name of all subwidgets." ilk="function" line="364" lineend="370" name="_subwidget_names" returns="self.tk.split()" signature="_subwidget_names()">
          <variable citdl="TixWidget" ilk="argument" name="self" />
          <variable citdl="self.tk.call()" line="367" name="x" />
        </scope>
        <scope ilk="function" line="397" lineend="402" name="image_delete" signature="image_delete(imgname)">
          <variable citdl="TixWidget" ilk="argument" name="self" />
          <variable ilk="argument" name="imgname" />
        </scope>
        <scope doc="Return all subwidgets." ilk="function" line="342" lineend="355" name="subwidgets_all" returns="list" signature="subwidgets_all()">
          <variable citdl="TixWidget" ilk="argument" name="self" />
          <variable citdl="self._subwidget_names()" line="344" name="names" />
          <variable citdl="list" line="347" name="retlist" />
          <variable citdl="list" line="349" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="278" lineend="316" name="__init__" signature="TixWidget(master=None, widgetName=None, static_options=None, cnf={}, kw={})">
          <variable citdl="TixWidget" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="widgetName" />
          <variable citdl="list" ilk="argument" name="static_options" />
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable citdl="dict" ilk="argument" name="kw" />
          <variable citdl="tuple" line="288" name="extra" />
        </scope>
      </scope>
      <scope classrefs="Tk tixCommand" doc="Toplevel widget of Tix which represents mostly the main window of an application. It has an associated Tcl interpreter." ilk="class" line="195" lineend="215" name="Tk">
        <scope ilk="function" line="212" lineend="215" name="destroy" signature="destroy()">
          <variable citdl="Tk" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="198" lineend="210" name="__init__" signature="Tk(screenName=None, baseName=None, className=&apos;Tix&apos;)">
          <variable citdl="Tk" ilk="argument" name="self" />
          <variable ilk="argument" name="screenName" />
          <variable ilk="argument" name="baseName" />
          <variable citdl="str" ilk="argument" name="className" />
          <variable citdl="os.environ.get()" line="200" name="tixlib" />
        </scope>
      </scope>
      <variable citdl="float" name="TkVersion" />
      <scope classrefs="BaseWidget Wm" doc="Toplevel widget, e.g. for dialogs." ilk="class" name="Toplevel" />
      <scope classrefs="TixWidget" doc="Tree - The tixTree widget can be used to display hierachical data in a tree form. The user can adjust the view of the tree by opening or closing parts of the tree." ilk="class" line="1511" lineend="1553" name="Tree">
        <scope doc="Returns the current mode of the entry given by entryPath." ilk="function" line="1535" lineend="1537" name="getmode" returns="self.tk.call()" signature="getmode(entrypath)">
          <variable citdl="Tree" ilk="argument" name="self" />
          <variable ilk="argument" name="entrypath" />
        </scope>
        <scope doc="This command calls the setmode method for all the entries in this Tree widget: if an entry has no child entries, its mode is set to none." ilk="function" line="1524" lineend="1529" name="autosetmode" signature="autosetmode()">
          <variable citdl="Tree" ilk="argument" name="self" />
        </scope>
        <scope doc="This command is used to indicate whether the entry given by entryPath has children entries and whether the children are visible." ilk="function" line="1543" lineend="1553" name="setmode" signature="setmode(entrypath, mode=&apos;none&apos;)">
          <variable citdl="Tree" ilk="argument" name="self" />
          <variable ilk="argument" name="entrypath" />
          <variable citdl="str" ilk="argument" name="mode" />
        </scope>
        <scope doc="Close the entry given by entryPath if its mode is close." ilk="function" line="1531" lineend="1533" name="close" signature="close(entrypath)">
          <variable citdl="Tree" ilk="argument" name="self" />
          <variable ilk="argument" name="entrypath" />
        </scope>
        <scope doc="Open the entry given by entryPath if its mode is open." ilk="function" line="1539" lineend="1541" name="open" signature="open(entrypath)">
          <variable citdl="Tree" ilk="argument" name="self" />
          <variable ilk="argument" name="entrypath" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1517" lineend="1522" name="__init__" signature="Tree(master=None, cnf={}, **kw)">
          <variable citdl="Tree" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="dict" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <scope classrefs="Button" ilk="class" name="Tributton" />
      <variable citdl="str" name="UNDERLINE" />
      <variable citdl="str" name="UNITS" />
      <variable citdl="str" name="VERTICAL" />
      <scope classrefs="object" doc="Class to define value holders for e.g. buttons.  Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations" ilk="class" name="Variable" />
      <variable citdl="str" name="W" />
      <variable citdl="str" line="39" name="WINDOW" />
      <variable citdl="str" name="WORD" />
      <variable citdl="int" name="WRITABLE" />
      <scope classrefs="BaseWidget Pack Place Grid Form" doc="Internal class.  Base class for a widget which can be positioned with the geometry managers" ilk="class" name="Widget" />
      <scope classrefs="object" doc="Provides functions for the communication with the window manager." ilk="class" name="Wm" />
      <variable citdl="str" name="X" />
      <variable citdl="str" name="Y" />
      <variable citdl="int" name="YES" />
      <import module="_tkinter" />
      <import module="commondialog" />
      <import module="constants" />
      <import module="font" />
      <scope doc="Convert true and false to integer values 1 and 0." ilk="function" name="getboolean" signature="getboolean(s)" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number  Convert a string or number to a floating point number, if possible." ilk="class" name="getdouble" />
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer  Convert a string or number to an integer, if possible.  A floating" ilk="class" name="getint" />
      <scope ilk="function" name="image_names" signature="image_names()" />
      <scope ilk="function" name="image_types" signature="image_types()" />
      <scope doc="Run the main loop of Tcl." ilk="function" name="mainloop" signature="mainloop(n=0)" />
      <import module="os" />
      <import module="sys" />
      <scope classrefs="object" doc="The tix commands provide access to miscellaneous  elements of  Tix&apos;s  internal state and the Tix application context. Most of the information manipulated by these  commands pertains" ilk="class" line="63" lineend="193" name="tixCommand">
        <scope doc="Returns  the  current  value  of the configuration option given by option." ilk="function" line="86" lineend="91" name="tix_cget" returns="self.tk.call()" signature="tix_cget(option)">
          <variable citdl="tixCommand" ilk="argument" name="self" />
          <variable ilk="argument" name="option" />
        </scope>
        <scope doc="Returns the file selection dialog that may be shared among different calls from this application." ilk="function" line="119" lineend="131" name="tix_filedialog" returns="self.tk.call()" signature="tix_filedialog(dlgclass=None)">
          <variable citdl="tixCommand" ilk="argument" name="self" />
          <variable ilk="argument" name="dlgclass" />
        </scope>
        <scope doc="Query or modify the configuration options of the Tix application context." ilk="function" line="93" lineend="117" name="tix_configure" returns="tuple" signature="tix_configure(cnf=None, **kw)">
          <variable citdl="tixCommand" ilk="argument" name="self" />
          <variable citdl="_cnfmerge()" ilk="argument" name="cnf" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="self.tk.split()" line="115" name="x" />
        </scope>
        <scope doc="Tix maintains a list of directories under which the tix_getimage  and tix_getbitmap commands will search for image files." ilk="function" line="74" lineend="84" name="tix_addbitmapdir" returns="self.tk.call()" signature="tix_addbitmapdir(directory)">
          <variable citdl="tixCommand" ilk="argument" name="self" />
          <variable ilk="argument" name="directory" />
        </scope>
        <scope doc="Resets the scheme and fontset of the Tix application to newScheme and newFontSet, respectively." ilk="function" line="175" lineend="193" name="tix_resetoptions" returns="self.tk.call()" signature="tix_resetoptions(newScheme, newFontSet, newScmPrio=None)">
          <variable citdl="tixCommand" ilk="argument" name="self" />
          <variable ilk="argument" name="newScheme" />
          <variable ilk="argument" name="newFontSet" />
          <variable ilk="argument" name="newScmPrio" />
        </scope>
        <scope doc="Locates a bitmap file of the name name.xpm or name in one of the bitmap directories (see the tix_addbitmapdir command above)." ilk="function" line="133" lineend="142" name="tix_getbitmap" returns="self.tk.call()" signature="tix_getbitmap(name)">
          <variable citdl="tixCommand" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Locates an image file of the name name.xpm, name.xbm or name.ppm in one of the bitmap directories (see the addbitmapdir command above)." ilk="function" line="144" lineend="156" name="tix_getimage" returns="self.tk.call()" signature="tix_getimage(name)">
          <variable citdl="tixCommand" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Gets  the options  manitained  by  the  Tix scheme mechanism." ilk="function" line="158" lineend="173" name="tix_option_get" returns="self.tk.call()" signature="tix_option_get(name)">
          <variable citdl="tixCommand" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <import module="tkinter" />
      <import module="ttk" />
      <variable citdl="int" name="wantobjects" />
      <scope attributes="protected __hidden__" ilk="function" line="462" lineend="466" name="_lst2dict" returns="dict" signature="_lst2dict(lst)">
        <variable ilk="argument" name="lst" />
        <variable citdl="dict" line="463" name="dict" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="Menu TixSubWidget" ilk="class" line="1636" lineend="1638" name="_dummyMenu">
        <scope attributes="__ctor__" ilk="function" line="1637" lineend="1638" name="__init__" signature="_dummyMenu(master, name, destroy_physically=1)">
          <variable citdl="_dummyMenu" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="ComboBox TixSubWidget" ilk="class" line="1724" lineend="1727" name="_dummyFileComboBox">
        <scope attributes="__ctor__" ilk="function" line="1725" lineend="1727" name="__init__" signature="_dummyFileComboBox(master, name, destroy_physically=1)">
          <variable citdl="_dummyFileComboBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="FileSelectBox TixSubWidget" ilk="class" line="1716" lineend="1722" name="_dummyFileSelectBox">
        <scope attributes="__ctor__" ilk="function" line="1717" lineend="1722" name="__init__" signature="_dummyFileSelectBox(master, name, destroy_physically=1)">
          <variable citdl="_dummyFileSelectBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="Text TixSubWidget" ilk="class" line="1648" lineend="1650" name="_dummyText">
        <scope attributes="__ctor__" ilk="function" line="1649" lineend="1650" name="__init__" signature="_dummyText(master, name, destroy_physically=1)">
          <variable citdl="_dummyText" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="PanedWindow TixSubWidget" ilk="class" line="1741" lineend="1743" name="_dummyPanedWindow">
        <scope attributes="__ctor__" ilk="function" line="1742" lineend="1743" name="__init__" signature="_dummyPanedWindow(master, name, destroy_physically=1)">
          <variable citdl="_dummyPanedWindow" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="ComboBox TixSubWidget" ilk="class" line="1674" lineend="1689" name="_dummyComboBox">
        <scope attributes="__ctor__" ilk="function" line="1675" lineend="1689" name="__init__" signature="_dummyComboBox(master, name, destroy_physically=1)">
          <variable citdl="_dummyComboBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="Label TixSubWidget" ilk="class" line="1628" lineend="1630" name="_dummyLabel">
        <scope attributes="__ctor__" ilk="function" line="1629" lineend="1630" name="__init__" signature="_dummyLabel(master, name, destroy_physically=1)">
          <variable citdl="_dummyLabel" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="Button TixSubWidget" ilk="class" line="1612" lineend="1614" name="_dummyButton">
        <scope attributes="__ctor__" ilk="function" line="1613" lineend="1614" name="__init__" signature="_dummyButton(master, name, destroy_physically=1)">
          <variable citdl="_dummyButton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="ExFileSelectBox TixSubWidget" ilk="class" line="1704" lineend="1714" name="_dummyExFileSelectBox">
        <scope attributes="__ctor__" ilk="function" line="1705" lineend="1714" name="__init__" signature="_dummyExFileSelectBox(master, name, destroy_physically=1)">
          <variable citdl="_dummyExFileSelectBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="DirSelectBox TixSubWidget" ilk="class" line="1698" lineend="1702" name="_dummyDirSelectBox">
        <scope attributes="__ctor__" ilk="function" line="1699" lineend="1702" name="__init__" signature="_dummyDirSelectBox(master, name, destroy_physically=1)">
          <variable citdl="_dummyDirSelectBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="TList TixSubWidget" ilk="class" line="1670" lineend="1672" name="_dummyTList">
        <scope attributes="__ctor__" ilk="function" line="1671" lineend="1672" name="__init__" signature="_dummyTList(master, name, destroy_physically=1)">
          <variable citdl="_dummyTList" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="HList TixSubWidget" ilk="class" line="1659" lineend="1661" name="_dummyHList">
        <scope attributes="__ctor__" ilk="function" line="1660" lineend="1661" name="__init__" signature="_dummyHList(master, name, destroy_physically=1)">
          <variable citdl="_dummyHList" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="Frame TixSubWidget" ilk="class" line="1624" lineend="1626" name="_dummyFrame">
        <scope attributes="__ctor__" ilk="function" line="1625" lineend="1626" name="__init__" signature="_dummyFrame(master, name, destroy_physically=1)">
          <variable citdl="_dummyFrame" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="Entry TixSubWidget" ilk="class" line="1620" lineend="1622" name="_dummyEntry">
        <scope attributes="__ctor__" ilk="function" line="1621" lineend="1622" name="__init__" signature="_dummyEntry(master, name, destroy_physically=1)">
          <variable citdl="_dummyEntry" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="ScrolledListBox TixSubWidget" ilk="class" line="1652" lineend="1657" name="_dummyScrolledListBox">
        <scope attributes="__ctor__" ilk="function" line="1653" lineend="1657" name="__init__" signature="_dummyScrolledListBox(master, name, destroy_physically=1)">
          <variable citdl="_dummyScrolledListBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="NoteBookFrame TixSubWidget" ilk="class" line="1737" lineend="1739" name="_dummyNoteBookFrame">
        <scope attributes="__ctor__" ilk="function" line="1738" lineend="1739" name="__init__" signature="_dummyNoteBookFrame(master, name, destroy_physically=0)">
          <variable citdl="_dummyNoteBookFrame" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="Listbox TixSubWidget" ilk="class" line="1632" lineend="1634" name="_dummyListbox">
        <scope attributes="__ctor__" ilk="function" line="1633" lineend="1634" name="__init__" signature="_dummyListbox(master, name, destroy_physically=1)">
          <variable citdl="_dummyListbox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="ScrolledHList TixSubWidget" ilk="class" line="1663" lineend="1668" name="_dummyScrolledHList">
        <scope attributes="__ctor__" ilk="function" line="1664" lineend="1668" name="__init__" signature="_dummyScrolledHList(master, name, destroy_physically=1)">
          <variable citdl="_dummyScrolledHList" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="Scrollbar TixSubWidget" ilk="class" line="1644" lineend="1646" name="_dummyScrollbar">
        <scope attributes="__ctor__" ilk="function" line="1645" lineend="1646" name="__init__" signature="_dummyScrollbar(master, name, destroy_physically=1)">
          <variable citdl="_dummyScrollbar" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="DirList TixSubWidget" ilk="class" line="1691" lineend="1696" name="_dummyDirList">
        <scope attributes="__ctor__" ilk="function" line="1692" lineend="1696" name="__init__" signature="_dummyDirList(master, name, destroy_physically=1)">
          <variable citdl="_dummyDirList" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="Menubutton TixSubWidget" ilk="class" line="1640" lineend="1642" name="_dummyMenubutton">
        <scope attributes="__ctor__" ilk="function" line="1641" lineend="1642" name="__init__" signature="_dummyMenubutton(master, name, destroy_physically=1)">
          <variable citdl="_dummyMenubutton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="StdButtonBox TixSubWidget" ilk="class" line="1729" lineend="1735" name="_dummyStdButtonBox">
        <scope attributes="__ctor__" ilk="function" line="1730" lineend="1735" name="__init__" signature="_dummyStdButtonBox(master, name, destroy_physically=1)">
          <variable citdl="_dummyStdButtonBox" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="Checkbutton TixSubWidget" ilk="class" line="1616" lineend="1618" name="_dummyCheckbutton">
        <scope attributes="__ctor__" ilk="function" line="1617" lineend="1618" name="__init__" signature="_dummyCheckbutton(master, name, destroy_physically=1)">
          <variable citdl="_dummyCheckbutton" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable ilk="argument" name="name" />
          <variable citdl="int" ilk="argument" name="destroy_physically" />
        </scope>
      </scope>
    </scope>
    <scope doc="Fix changes imports of urllib which are now incompatible. This is rather similar to fix_imports, but because of the more complex nature of the fixing for urllib, it has its own fixer." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_urllib">
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" ilk="class" name="FixImports" />
      <scope classrefs="FixImports" ilk="class" line="71" lineend="180" name="FixUrllib">
        <scope doc="Transform for the basic import case." ilk="function" line="76" lineend="90" name="transform_import" signature="transform_import(node, results)">
          <variable citdl="FixUrllib" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="results.get()" line="81" name="import_mod" />
          <variable citdl="import_mod.prefix" line="82" name="pref" />
          <variable citdl="list" line="84" name="names" />
        </scope>
        <scope doc="Transform for calls to module members in code." ilk="function" line="152" lineend="167" name="transform_dot" signature="transform_dot(node, results)">
          <variable citdl="FixUrllib" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="results.get()" line="154" name="module_dot" />
          <variable citdl="results.get()" line="155" name="member" />
          <variable line="156" name="new_name" />
        </scope>
        <scope doc="Transform for imports of specific module elements." ilk="function" line="92" lineend="150" name="transform_member" signature="transform_member(node, results)">
          <variable citdl="FixUrllib" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="results.get()" line="97" name="mod_member" />
          <variable citdl="mod_member.prefix" line="98" name="pref" />
          <variable citdl="member.value" line="99" name="member" />
          <variable line="106" name="new_name" />
          <variable citdl="list" line="120" name="modules" />
          <variable citdl="dict" line="121" name="mod_dict" />
          <variable citdl="results.get()" line="122" name="members" />
          <variable citdl="list" line="135" name="new_nodes" />
          <variable line="137" name="elts" />
          <variable citdl="list" line="138" name="names" />
          <variable citdl="list" line="144" name="nodes" />
        </scope>
        <scope ilk="function" line="73" lineend="74" name="build_pattern" returns="str.join()" signature="build_pattern()">
          <variable citdl="FixUrllib" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="169" lineend="180" name="transform" signature="transform(node, results)">
          <variable citdl="FixUrllib" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
      </scope>
      <scope doc="Return an import statement in the form: from package import name_leafs" ilk="function" name="FromImport" signature="FromImport(package_name, name_leafs)" />
      <variable citdl="dict" line="12" name="MAPPING" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A newline literal" ilk="function" name="Newline" signature="Newline()" />
      <scope ilk="function" name="alternates" signature="alternates(members)" />
      <scope doc="Follow an attribute chain." ilk="function" name="attr_chain" signature="attr_chain(obj, attr)" />
      <scope ilk="function" line="48" lineend="68" name="build_pattern" signature="build_pattern()">
        <variable citdl="set()" line="49" name="bare" />
        <variable citdl="alternates()" line="53" name="members" />
      </scope>
      <import module="fixer_base" />
    </scope>
    <scope doc="allow programmer to define multiple exit functions to be executedupon normal program termination.  Two public functions, register and unregister, are defined." ilk="blob" lang="Python3" name="atexit">
      <scope doc="Register a function to be executed upon normal program termination" ilk="function" name="register" signature="register(func, *args, **kwargs) -&gt; func" />
      <scope doc="Unregister a exit function which was previously registered using atexit.register" ilk="function" name="unregister" signature="unregister(func) -&gt; None" />
    </scope>
    <scope doc="A library of useful helper classes to the SAX classes, for the convenience of application and driver writers." ilk="blob" lang="Python3" name="xml.sax.saxutils">
      <scope classrefs="XMLReader" doc="This class is designed to sit between an XMLReader and the client application&apos;s event handlers.  By default, it does nothing but pass requests up to the reader and events on to the handlers" ilk="class" line="160" lineend="267" name="XMLFilterBase">
        <scope ilk="function" line="252" lineend="253" name="setFeature" signature="setFeature(name, state)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="state" />
        </scope>
        <scope ilk="function" line="239" lineend="244" name="parse" signature="parse(source)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
        </scope>
        <scope ilk="function" line="185" lineend="186" name="setDocumentLocator" signature="setDocumentLocator(locator)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="locator" />
        </scope>
        <scope ilk="function" line="180" lineend="181" name="warning" signature="warning(exception)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="exception" />
        </scope>
        <scope ilk="function" line="215" lineend="216" name="ignorableWhitespace" signature="ignorableWhitespace(chars)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="chars" />
        </scope>
        <scope ilk="function" line="229" lineend="230" name="unparsedEntityDecl" signature="unparsedEntityDecl(name, publicId, systemId, ndata)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="publicId" />
          <variable ilk="argument" name="systemId" />
          <variable ilk="argument" name="ndata" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="168" lineend="170" name="__init__" signature="XMLFilterBase(parent=None)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="parent" />
        </scope>
        <scope ilk="function" line="234" lineend="235" name="resolveEntity" returns="self._ent_handler.resolveEntity()" signature="resolveEntity(publicId, systemId)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="publicId" />
          <variable ilk="argument" name="systemId" />
        </scope>
        <scope ilk="function" line="209" lineend="210" name="endElementNS" signature="endElementNS(name, qname)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="qname" />
        </scope>
        <scope ilk="function" line="266" lineend="267" name="setParent" signature="setParent(parent)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="parent" />
        </scope>
        <scope ilk="function" line="226" lineend="227" name="notationDecl" signature="notationDecl(name, publicId, systemId)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="publicId" />
          <variable ilk="argument" name="systemId" />
        </scope>
        <variable attributes="protected __instancevar__" line="170" name="_parent" />
        <scope ilk="function" line="188" lineend="189" name="startDocument" signature="startDocument()">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="194" lineend="195" name="startPrefixMapping" signature="startPrefixMapping(prefix, uri)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
          <variable ilk="argument" name="uri" />
        </scope>
        <scope ilk="function" line="197" lineend="198" name="endPrefixMapping" signature="endPrefixMapping(prefix)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <scope ilk="function" line="218" lineend="219" name="processingInstruction" signature="processingInstruction(target, data)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="203" lineend="204" name="endElement" signature="endElement(name)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="174" lineend="175" name="error" signature="error(exception)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="exception" />
        </scope>
        <scope ilk="function" line="200" lineend="201" name="startElement" signature="startElement(name, attrs)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <scope ilk="function" line="206" lineend="207" name="startElementNS" signature="startElementNS(name, qname, attrs)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="qname" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <scope ilk="function" line="212" lineend="213" name="characters" signature="characters(content)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="content" />
        </scope>
        <scope ilk="function" line="258" lineend="259" name="setProperty" signature="setProperty(name, value)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="249" lineend="250" name="getFeature" returns="self._parent.getFeature()" signature="getFeature(name)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="221" lineend="222" name="skippedEntity" signature="skippedEntity(name)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="255" lineend="256" name="getProperty" returns="self._parent.getProperty()" signature="getProperty(name)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="263" lineend="264" name="getParent" signature="getParent()">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="246" lineend="247" name="setLocale" signature="setLocale(locale)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="locale" />
        </scope>
        <scope ilk="function" line="177" lineend="178" name="fatalError" signature="fatalError(exception)">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
          <variable ilk="argument" name="exception" />
        </scope>
        <scope ilk="function" line="191" lineend="192" name="endDocument" signature="endDocument()">
          <variable citdl="XMLFilterBase" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="ContentHandler" ilk="class" line="79" lineend="157" name="XMLGenerator">
        <scope ilk="function" line="115" lineend="118" name="startPrefixMapping" signature="startPrefixMapping(prefix, uri)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
          <variable ilk="argument" name="uri" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="90" name="_encoding" />
        <scope ilk="function" line="120" lineend="122" name="endPrefixMapping" signature="endPrefixMapping(prefix)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <scope ilk="function" line="147" lineend="148" name="endElementNS" signature="endElementNS(name, qname)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="qname" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="87" name="_ns_contexts" />
        <scope ilk="function" line="156" lineend="157" name="processingInstruction" signature="processingInstruction(target, data)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="130" lineend="131" name="endElement" signature="endElement(name)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="protected __instancevar__" line="88" name="_current_context" />
        <scope ilk="function" line="124" lineend="128" name="startElement" signature="startElement(name, attrs)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <scope ilk="function" line="111" lineend="113" name="startDocument" signature="startDocument()">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="89" name="_undeclared_ns_maps" />
        <scope ilk="function" line="133" lineend="145" name="startElementNS" signature="startElementNS(name, qname, attrs)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="qname" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <scope ilk="function" line="150" lineend="151" name="characters" signature="characters(content)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="content" />
        </scope>
        <scope ilk="function" line="153" lineend="154" name="ignorableWhitespace" signature="ignorableWhitespace(content)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="content" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="sys.stdout" line="86" name="_out" />
        <scope attributes="protected" ilk="function" line="92" lineend="96" name="_write" signature="_write(text)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="81" lineend="90" name="__init__" signature="XMLGenerator(out=None, encoding=&apos;iso-8859-1&apos;)">
          <import line="83" module="sys" />
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable citdl="sys.stdout" ilk="argument" name="out" />
          <variable citdl="str" ilk="argument" name="encoding" />
        </scope>
        <scope attributes="protected" doc="Builds a qualified name from a (ns_url, localname) pair" ilk="function" line="98" lineend="107" name="_qname" returns="str" signature="_qname(name)">
          <variable citdl="XMLGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable line="102" name="prefix" />
        </scope>
      </scope>
      <scope doc="Escape &amp;, &lt;, and &gt; in a string of data." ilk="function" line="25" lineend="39" name="escape" returns="data.replace()" signature="escape(data, entities={})">
        <variable citdl="dict" ilk="argument" name="entities" />
        <variable citdl="data.replace()" ilk="argument" name="data" />
      </scope>
      <import module="handler" />
      <import module="os" />
      <scope doc="This function takes an InputSource and an optional base URL and returns a fully resolved InputSource object ready for reading." ilk="function" line="271" lineend="297" name="prepare_input_source" returns="xmlreader.InputSource()" signature="prepare_input_source(source, base=&apos;&apos;)">
        <variable citdl="xmlreader.InputSource()" ilk="argument" name="source" />
        <variable citdl="open()" line="278" name="f" />
        <variable citdl="source.getSystemId()" line="285" name="sysid" />
        <variable citdl="str" ilk="argument" name="base" />
        <variable citdl="os.path.join()" line="287" name="sysidfilename" />
        <variable citdl="os.path.dirname()" line="286" name="basehead" />
      </scope>
      <scope doc="Escape and quote an attribute value." ilk="function" line="55" lineend="76" name="quoteattr" returns="str" signature="quoteattr(data, entities={})">
        <variable citdl="dict" ilk="argument" name="entities" />
        <variable citdl="str" ilk="argument" name="data" />
      </scope>
      <scope doc="Unescape &amp;amp;, &amp;lt;, and &amp;gt; in a string of data." ilk="function" line="41" lineend="53" name="unescape" returns="data.replace()" signature="unescape(data, entities={})">
        <variable citdl="dict" ilk="argument" name="entities" />
        <variable citdl="data.replace()" ilk="argument" name="data" />
      </scope>
      <import module="urllib" />
      <import module="xmlreader" />
      <variable attributes="protected __hidden__" citdl="str" line="14" name="_error_handling" />
      <scope attributes="private __hidden__" doc="Replace substrings of a string using a dictionary." ilk="function" line="19" lineend="23" name="__dict_replace" returns="s.replace()" signature="__dict_replace(s, d)">
        <variable citdl="s.replace()" ilk="argument" name="s" />
        <variable ilk="argument" name="d" />
      </scope>
    </scope>
    <scope doc="Calendar printing functions  Note when comparing these calendars to the ones printed by cal(1): By" ilk="blob" lang="Python3" name="calendar">
      <scope classrefs="object" doc="Base calendar class. This class doesn&apos;t do any formatting. It simply provides data to subclasses." ilk="class" line="126" lineend="252" name="Calendar">
        <scope doc="Return an iterator for one month." ilk="function" line="151" lineend="166" name="itermonthdates" signature="itermonthdates(year, month)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
          <variable ilk="argument" name="month" />
          <variable citdl="datetime.date()" line="157" name="date" />
          <variable citdl="date.weekday()" line="159" name="days" />
          <variable citdl="datetime.timedelta()" line="161" name="oneday" />
        </scope>
        <variable attributes="protected __instancevar__" line="139" name="_firstweekday" />
        <scope doc="Return the data for the specified year ready for formatting (similar to yeardatescalendar())." ilk="function" line="242" lineend="252" name="yeardayscalendar" returns="list" signature="yeardayscalendar(year, width=3)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable citdl="list" line="248" name="months" />
        </scope>
        <variable citdl="int" line="141" name="firstweekday" />
        <scope doc="Like itermonthdates(), but will yield day numbers." ilk="function" line="179" lineend="188" name="itermonthdays" signature="itermonthdays(year, month)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
          <variable ilk="argument" name="month" />
        </scope>
        <scope doc="Return the data for the specified year ready for formatting." ilk="function" line="216" lineend="227" name="yeardatescalendar" returns="list" signature="yeardatescalendar(year, width=3)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable citdl="list" line="223" name="months" />
        </scope>
        <scope doc="Like itermonthdates(), but will yield (day number, weekday number) tuples." ilk="function" line="168" lineend="177" name="itermonthdays2" signature="itermonthdays2(year, month)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
          <variable ilk="argument" name="month" />
        </scope>
        <scope doc="Return a matrix representing a month&apos;s calendar." ilk="function" line="198" lineend="206" name="monthdays2calendar" returns="list" signature="monthdays2calendar(year, month)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
          <variable ilk="argument" name="month" />
          <variable citdl="list()" line="205" name="days" />
        </scope>
        <scope doc="Return a matrix (list of lists) representing a month&apos;s calendar." ilk="function" line="190" lineend="196" name="monthdatescalendar" returns="list" signature="monthdatescalendar(year, month)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
          <variable ilk="argument" name="month" />
          <variable citdl="list()" line="195" name="dates" />
        </scope>
        <scope ilk="function" line="138" lineend="139" name="setfirstweekday" signature="setfirstweekday(firstweekday)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable ilk="argument" name="firstweekday" />
        </scope>
        <scope doc="Return the data for the specified year ready for formatting (similar to yeardatescalendar())." ilk="function" line="229" lineend="240" name="yeardays2calendar" returns="list" signature="yeardays2calendar(year, width=3)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable citdl="list" line="236" name="months" />
        </scope>
        <scope ilk="function" line="135" lineend="136" name="getfirstweekday" returns="self._firstweekday" signature="getfirstweekday()">
          <variable citdl="Calendar" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a matrix representing a month&apos;s calendar." ilk="function" line="208" lineend="214" name="monthdayscalendar" returns="list" signature="monthdayscalendar(year, month)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
          <variable ilk="argument" name="month" />
          <variable citdl="list()" line="213" name="days" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="132" lineend="133" name="__init__" signature="Calendar(firstweekday=0)">
          <variable citdl="Calendar" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="firstweekday" />
        </scope>
        <scope doc="Return a iterator for one week of weekday numbers starting with the configured first one." ilk="function" line="143" lineend="149" name="iterweekdays" signature="iterweekdays()">
          <variable citdl="Calendar" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="int" line="589" name="EPOCH" />
      <variable citdl="int" name="FRIDAY" />
      <variable citdl="int" line="37" name="February" />
      <scope classrefs="Calendar" doc="This calendar returns complete HTML pages." ilk="class" line="372" lineend="481" name="HTMLCalendar">
        <scope doc="Return a month name as a table row." ilk="function" line="409" lineend="417" name="formatmonthname" returns="tuple" signature="formatmonthname(theyear, themonth, withyear=True)">
          <variable citdl="HTMLCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable ilk="argument" name="themonth" />
          <variable citdl="True" ilk="argument" name="withyear" />
          <variable citdl="str" line="414" name="s" />
        </scope>
        <scope doc="Return a formatted month as a table." ilk="function" line="419" lineend="436" name="formatmonth" returns="str.join()" signature="formatmonth(theyear, themonth, withyear=True)">
          <variable citdl="HTMLCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable ilk="argument" name="themonth" />
          <variable citdl="True" ilk="argument" name="withyear" />
          <variable citdl="list" line="423" name="v" />
          <variable citdl="v.append" line="424" name="a" />
        </scope>
        <scope doc="Return a header for a week as a table row." ilk="function" line="402" lineend="407" name="formatweekheader" returns="str" signature="formatweekheader()">
          <variable citdl="HTMLCalendar" ilk="argument" name="self" />
          <variable citdl="str.join()" line="406" name="s" />
        </scope>
        <scope doc="Return a weekday name as a table header." ilk="function" line="396" lineend="400" name="formatweekday" returns="tuple" signature="formatweekday(day)">
          <variable citdl="HTMLCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="day" />
        </scope>
        <scope doc="Return a complete week as a table row." ilk="function" line="389" lineend="394" name="formatweek" returns="str" signature="formatweek(theweek)">
          <variable citdl="HTMLCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theweek" />
          <variable citdl="str.join()" line="393" name="s" />
        </scope>
        <scope doc="Return a day as a table cell." ilk="function" line="380" lineend="387" name="formatday" returns="tuple" signature="formatday(day, weekday)">
          <variable citdl="HTMLCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="day" />
          <variable ilk="argument" name="weekday" />
        </scope>
        <variable citdl="list" line="378" name="cssclasses" />
        <scope doc="Return a formatted year as a complete HTML page." ilk="function" line="460" lineend="481" name="formatyearpage" signature="formatyearpage(theyear, width=3, css=&apos;calendar.css&apos;, encoding=None)">
          <variable citdl="HTMLCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable citdl="str" ilk="argument" name="css" />
          <variable citdl="sys.getdefaultencoding()" ilk="argument" name="encoding" />
          <variable citdl="list" line="466" name="v" />
          <variable citdl="v.append" line="467" name="a" />
        </scope>
        <scope doc="Return a formatted year as a table of tables." ilk="function" line="438" lineend="458" name="formatyear" returns="str.join()" signature="formatyear(theyear, width=3)">
          <variable citdl="HTMLCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable citdl="list" line="442" name="v" />
          <variable citdl="v.append" line="443" name="a" />
          <variable citdl="range()" line="450" name="months" />
        </scope>
      </scope>
      <scope classrefs="ValueError" doc="# Exceptions raised for bad input" ilk="class" line="21" lineend="25" name="IllegalMonthError">
        <scope ilk="function" line="24" lineend="25" name="__str__" returns="str" signature="__str__()">
          <variable citdl="IllegalMonthError" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="22" lineend="23" name="__init__" signature="IllegalMonthError(month)">
          <variable citdl="IllegalMonthError" ilk="argument" name="self" />
          <variable ilk="argument" name="month" />
        </scope>
        <variable attributes="__instancevar__" line="23" name="month" />
      </scope>
      <scope classrefs="ValueError" ilk="class" line="28" lineend="32" name="IllegalWeekdayError">
        <scope ilk="function" line="31" lineend="32" name="__str__" returns="str" signature="__str__()">
          <variable citdl="IllegalWeekdayError" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="30" name="weekday" />
        <scope attributes="__ctor__" ilk="function" line="29" lineend="30" name="__init__" signature="IllegalWeekdayError(weekday)">
          <variable citdl="IllegalWeekdayError" ilk="argument" name="self" />
          <variable ilk="argument" name="weekday" />
        </scope>
      </scope>
      <variable citdl="int" line="36" name="January" />
      <scope classrefs="HTMLCalendar" doc="This class can be passed a locale name in the constructor and will return month and weekday names in the specified locale. If this locale includes an encoding all strings containing month and weekday names will be returned" ilk="class" line="527" lineend="550" name="LocaleHTMLCalendar">
        <variable attributes="__instancevar__" citdl="_locale.getdefaultlocale()" line="538" name="locale" />
        <scope ilk="function" line="540" lineend="543" name="formatweekday" returns="tuple" signature="formatweekday(day)">
          <variable citdl="LocaleHTMLCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="day" />
          <variable line="542" name="s" />
        </scope>
        <scope ilk="function" line="545" lineend="550" name="formatmonthname" returns="tuple" signature="formatmonthname(theyear, themonth, withyear=True)">
          <variable citdl="LocaleHTMLCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable ilk="argument" name="themonth" />
          <variable citdl="True" ilk="argument" name="withyear" />
          <variable citdl="str" line="547" name="s" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="534" lineend="538" name="__init__" signature="LocaleHTMLCalendar(firstweekday=0, locale=None)">
          <variable citdl="LocaleHTMLCalendar" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="firstweekday" />
          <variable citdl="_locale.getdefaultlocale()" ilk="argument" name="locale" />
        </scope>
      </scope>
      <scope classrefs="TextCalendar" doc="This class can be passed a locale name in the constructor and will return month and weekday names in the specified locale. If this locale includes an encoding all strings containing month and weekday names will be returned" ilk="class" line="496" lineend="524" name="LocaleTextCalendar">
        <variable attributes="__instancevar__" citdl="_locale.getdefaultlocale()" line="508" name="locale" />
        <scope ilk="function" line="510" lineend="517" name="formatweekday" signature="formatweekday(day, width)">
          <variable citdl="LocaleTextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="day" />
          <variable ilk="argument" name="width" />
          <variable citdl="_localized_day" line="513" name="names" />
          <variable line="516" name="name" />
        </scope>
        <scope ilk="function" line="519" lineend="524" name="formatmonthname" returns="s.center()" signature="formatmonthname(theyear, themonth, width, withyear=True)">
          <variable citdl="LocaleTextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable ilk="argument" name="themonth" />
          <variable ilk="argument" name="width" />
          <variable citdl="True" ilk="argument" name="withyear" />
          <variable citdl="str" line="521" name="s" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="504" lineend="508" name="__init__" signature="LocaleTextCalendar(firstweekday=0, locale=None)">
          <variable citdl="LocaleTextCalendar" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="firstweekday" />
          <variable citdl="_locale.getdefaultlocale()" ilk="argument" name="locale" />
        </scope>
      </scope>
      <variable citdl="int" name="MONDAY" />
      <variable citdl="int" name="SATURDAY" />
      <variable citdl="int" name="SUNDAY" />
      <variable citdl="int" name="THURSDAY" />
      <variable citdl="int" name="TUESDAY" />
      <scope classrefs="Calendar" doc="Subclass of Calendar that outputs a calendar as a simple plain text similar to the UNIX program cal." ilk="class" line="255" lineend="369" name="TextCalendar">
        <scope doc="Return a formatted month name." ilk="function" line="299" lineend="306" name="formatmonthname" returns="s.center()" signature="formatmonthname(theyear, themonth, width, withyear=True)">
          <variable citdl="TextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable ilk="argument" name="themonth" />
          <variable ilk="argument" name="width" />
          <variable citdl="True" ilk="argument" name="withyear" />
          <variable citdl="str" line="303" name="s" />
        </scope>
        <scope doc="Return a month&apos;s calendar string (multi-line)." ilk="function" line="314" lineend="328" name="formatmonth" returns="formatmonthname()" signature="formatmonth(theyear, themonth, w=0, l=0)">
          <variable citdl="TextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable ilk="argument" name="themonth" />
          <variable citdl="int" ilk="argument" name="w" />
          <variable citdl="int" ilk="argument" name="l" />
          <variable citdl="s.rstrip()" line="320" name="s" />
        </scope>
        <scope doc="Return a header for a week." ilk="function" line="293" lineend="297" name="formatweekheader" returns="str.join()" signature="formatweekheader(width)">
          <variable citdl="TextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="width" />
        </scope>
        <scope doc="Print a month&apos;s calendar." ilk="function" line="308" lineend="312" name="prmonth" signature="prmonth(theyear, themonth, w=0, l=0)">
          <variable citdl="TextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable ilk="argument" name="themonth" />
          <variable citdl="int" ilk="argument" name="w" />
          <variable citdl="int" ilk="argument" name="l" />
        </scope>
        <scope doc="Returns a formatted week day name." ilk="function" line="283" lineend="291" name="formatweekday" signature="formatweekday(day, width)">
          <variable citdl="TextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="day" />
          <variable ilk="argument" name="width" />
          <variable citdl="_localized_day" line="288" name="names" />
        </scope>
        <scope doc="Returns a single week in a string (no newline)." ilk="function" line="277" lineend="281" name="formatweek" returns="str.join()" signature="formatweek(theweek, width)">
          <variable citdl="TextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theweek" />
          <variable ilk="argument" name="width" />
        </scope>
        <scope doc="Returns a formatted day." ilk="function" line="267" lineend="275" name="formatday" returns="s.center()" signature="formatday(day, weekday, width)">
          <variable citdl="TextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="day" />
          <variable ilk="argument" name="weekday" />
          <variable ilk="argument" name="width" />
          <variable citdl="str" line="272" name="s" />
        </scope>
        <scope doc="Print a year&apos;s calendar." ilk="function" line="367" lineend="369" name="pryear" signature="pryear(theyear, w=0, l=0, c=6, m=3)">
          <variable citdl="TextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable citdl="int" ilk="argument" name="w" />
          <variable citdl="int" ilk="argument" name="l" />
          <variable citdl="int" ilk="argument" name="c" />
          <variable citdl="int" ilk="argument" name="m" />
        </scope>
        <scope doc="Returns a year&apos;s calendar as a multi-line string." ilk="function" line="330" lineend="365" name="formatyear" returns="str.join()" signature="formatyear(theyear, w=2, l=1, c=6, m=3)">
          <variable citdl="TextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theyear" />
          <variable citdl="int" ilk="argument" name="w" />
          <variable citdl="int" ilk="argument" name="l" />
          <variable citdl="int" ilk="argument" name="c" />
          <variable citdl="int" ilk="argument" name="m" />
          <variable citdl="max()" line="337" name="colwidth" />
          <variable citdl="list" line="338" name="v" />
          <variable citdl="v.append" line="339" name="a" />
          <variable citdl="formatweekheader()" line="342" name="header" />
          <variable citdl="range()" line="345" name="months" />
          <variable line="347" name="names" />
          <variable line="351" name="headers" />
          <variable citdl="max()" line="355" name="height" />
          <variable citdl="list" line="357" name="weeks" />
        </scope>
        <scope doc="Print a single week (no newline)." ilk="function" line="261" lineend="265" name="prweek" signature="prweek(theweek, width)">
          <variable citdl="TextCalendar" ilk="argument" name="self" />
          <variable ilk="argument" name="theweek" />
          <variable ilk="argument" name="width" />
        </scope>
      </scope>
      <variable citdl="int" name="WEDNESDAY" />
      <variable citdl="list" line="12" name="__all__" />
      <import module="_locale" />
      <variable citdl="TextCalendar" line="554" name="c" />
      <scope doc="Returns a year&apos;s calendar as a multi-line string." ilk="function" line="569" name="calendar" />
      <import module="datetime" />
      <variable citdl="_localized_day" line="87" name="day_abbr" />
      <variable citdl="_localized_day" line="86" name="day_name" />
      <scope classrefs="object" ilk="class" line="484" lineend="493" name="different_locale">
        <variable attributes="__instancevar__" line="486" name="locale" />
        <scope ilk="function" line="492" lineend="493" name="__exit__" signature="__exit__(*args)">
          <variable citdl="different_locale" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="488" lineend="489" name="__enter__" signature="__enter__()">
          <variable citdl="different_locale" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="_locale.setlocale()" line="489" name="oldlocale" />
        <scope attributes="__ctor__" ilk="function" line="485" lineend="486" name="__init__" signature="different_locale(locale)">
          <variable citdl="different_locale" ilk="argument" name="self" />
          <variable ilk="argument" name="locale" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="Inappropriate argument value (of correct type)." ilk="class" line="18" name="error" />
      <scope ilk="function" line="556" name="firstweekday" />
      <scope doc="Prints multi-column formatting for year calendars" ilk="function" line="578" lineend="580" name="format" signature="format(cols, colwidth=20, spacing=6)">
        <variable citdl="int" ilk="argument" name="colwidth" />
        <variable citdl="int" ilk="argument" name="spacing" />
        <variable ilk="argument" name="cols" />
      </scope>
      <scope doc="Returns a string formatted from n strings, centered within n columns." ilk="function" line="583" lineend="586" name="formatstring" returns="spacing.join()" signature="formatstring(cols, colwidth=20, spacing=6)">
        <variable citdl="int" ilk="argument" name="colwidth" />
        <variable citdl="int" ilk="argument" name="spacing" />
        <variable ilk="argument" name="cols" />
      </scope>
      <scope doc="Return 1 for leap years, 0 for non-leap years." ilk="function" line="97" lineend="99" name="isleap" returns="bool" signature="isleap(year)">
        <variable ilk="argument" name="year" />
      </scope>
      <scope doc="Return number of leap years in range [y1, y2)." ilk="function" line="102" lineend="107" name="leapdays" returns="int" signature="leapdays(y1, y2)">
        <variable ilk="argument" name="y1" />
        <variable ilk="argument" name="y2" />
      </scope>
      <scope ilk="function" line="603" lineend="692" name="main" signature="main(args)">
        <variable citdl="optparse.OptionParser()" line="605" name="parser" />
        <variable citdl="sys.getdefaultencoding()" line="661" name="encoding" />
        <variable citdl="tuple" line="654" name="locale" />
        <variable ilk="argument" name="args" />
        <variable citdl="dict()" line="664" name="optdict" />
        <variable citdl="cal.formatyear()" line="682" name="result" />
        <variable citdl="HTMLCalendar" line="658" name="cal" />
      </scope>
      <variable citdl="list" line="40" name="mdays" />
      <scope doc="Return a month&apos;s calendar string (multi-line)." ilk="function" line="568" name="month" />
      <variable citdl="_localized_month" line="91" name="month_abbr" />
      <variable citdl="_localized_month" line="90" name="month_name" />
      <scope doc="Return a matrix representing a month&apos;s calendar." ilk="function" line="563" name="monthcalendar" />
      <scope doc="Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for year, month." ilk="function" line="116" lineend="123" name="monthrange" returns="tuple" signature="monthrange(year, month)">
        <variable ilk="argument" name="month" />
        <variable ilk="argument" name="year" />
        <variable citdl="isleap()" line="122" name="ndays" />
        <variable citdl="weekday()" line="121" name="day1" />
      </scope>
      <scope doc="Print a year&apos;s calendar." ilk="function" line="570" name="prcal" />
      <scope doc="Print a month&apos;s calendar." ilk="function" line="567" name="prmonth" />
      <scope doc="Print a single week (no newline)." ilk="function" line="564" name="prweek" />
      <scope ilk="function" line="558" lineend="561" name="setfirstweekday" signature="setfirstweekday(firstweekday)">
        <variable ilk="argument" name="firstweekday" />
      </scope>
      <import module="sys" />
      <scope doc="Unrelated but handy function to calculate Unix timestamp from GMT." ilk="function" line="593" lineend="600" name="timegm" returns="day" signature="timegm(tuple)">
        <variable citdl="hour" line="597" name="hours" />
        <variable citdl="hour" line="599" name="seconds" />
        <variable citdl="hour" line="598" name="minutes" />
        <variable citdl="day" line="596" name="days" />
        <variable ilk="argument" name="tuple" />
      </scope>
      <scope doc="Returns a single week in a string (no newline)." ilk="function" line="565" name="week" />
      <scope doc="Return weekday (0-6 ~ Mon-Sun) for year (1970-...), month (1-12), day (1-31)." ilk="function" line="110" lineend="113" name="weekday" signature="weekday(year, month, day)">
        <variable ilk="argument" name="month" />
        <variable ilk="argument" name="day" />
        <variable ilk="argument" name="year" />
      </scope>
      <scope doc="Return a header for a week." ilk="function" line="566" name="weekheader" />
      <variable attributes="protected __hidden__" citdl="int" line="574" name="_colwidth" />
      <scope attributes="protected __hidden__" ilk="class" line="47" lineend="63" name="_localized_month">
        <variable attributes="protected" citdl="list" line="49" name="_months" />
        <scope attributes="__ctor__" ilk="function" line="52" lineend="53" name="__init__" signature="_localized_month(format)">
          <variable citdl="_localized_month" ilk="argument" name="self" />
          <variable ilk="argument" name="format" />
        </scope>
        <variable attributes="__instancevar__" line="53" name="format" />
        <scope ilk="function" line="55" lineend="60" name="__getitem__" returns="list" signature="__getitem__(i)">
          <variable citdl="_localized_month" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable line="56" name="funcs" />
        </scope>
        <scope ilk="function" line="62" lineend="63" name="__len__" returns="int" signature="__len__()">
          <variable citdl="_localized_month" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="575" name="_spacing" />
      <variable attributes="protected __hidden__" line="590" name="_EPOCH_ORD" />
      <scope attributes="protected __hidden__" ilk="class" line="66" lineend="82" name="_localized_day">
        <variable attributes="protected" citdl="list" line="69" name="_days" />
        <scope attributes="__ctor__" ilk="function" line="71" lineend="72" name="__init__" signature="_localized_day(format)">
          <variable citdl="_localized_day" ilk="argument" name="self" />
          <variable ilk="argument" name="format" />
        </scope>
        <variable attributes="__instancevar__" line="72" name="format" />
        <scope ilk="function" line="74" lineend="79" name="__getitem__" returns="_localized_day.__getitem__.funcs()" signature="__getitem__(i)">
          <variable citdl="_localized_day" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable line="75" name="funcs" />
        </scope>
        <scope ilk="function" line="81" lineend="82" name="__len__" returns="int" signature="__len__()">
          <variable citdl="_localized_day" ilk="argument" name="self" />
        </scope>
      </scope>
    </scope>
    <scope doc="Fix function attribute names (f.func_x -&gt; f.__x__)." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_funcattrs">
      <scope classrefs="BaseFix" ilk="class" line="9" lineend="19" name="FixFuncattrs">
        <variable citdl="str" line="10" name="PATTERN" />
        <scope ilk="function" line="16" lineend="19" name="transform" signature="transform(node, results)">
          <variable citdl="FixFuncattrs" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="17" name="attr" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Mailcap file handling.  See RFC 1524." ilk="blob" lang="Python3" name="mailcap">
      <variable citdl="list" line="5" name="__all__" />
      <scope doc="Find a match for a mailcap entry." ilk="function" line="138" lineend="156" name="findmatch" returns="tuple" signature="findmatch(caps, MIMEtype, key=&apos;view&apos;, filename=&apos;/dev/null&apos;, plist=[])">
        <variable ilk="argument" name="MIMEtype" />
        <variable citdl="str" ilk="argument" name="filename" />
        <variable citdl="subst()" line="154" name="command" />
        <variable citdl="str" ilk="argument" name="key" />
        <variable citdl="lookup()" line="147" name="entries" />
        <variable citdl="subst()" line="151" name="test" />
        <variable ilk="argument" name="caps" />
        <variable citdl="list" ilk="argument" name="plist" />
      </scope>
      <scope ilk="function" line="202" lineend="208" name="findparam" returns="str" signature="findparam(name, plist)">
        <variable citdl="len()" line="204" name="n" />
        <variable ilk="argument" name="plist" />
        <variable citdl="str" ilk="argument" name="name" />
      </scope>
      <scope doc="Return a dictionary containing the mailcap database." ilk="function" line="9" lineend="32" name="getcaps" returns="dict" signature="getcaps()">
        <variable citdl="open()" line="22" name="fp" />
        <variable citdl="readmailcapfile()" line="25" name="morecaps" />
        <variable citdl="dict" line="19" name="caps" />
      </scope>
      <scope doc="Return a list of all mailcap files found on the system." ilk="function" line="34" lineend="48" name="listmailcapfiles" returns="list" signature="listmailcapfiles()">
        <variable citdl="str" line="42" name="home" />
        <variable citdl="str.split()" line="39" name="mailcaps" />
        <variable line="38" name="str" />
      </scope>
      <scope ilk="function" line="158" lineend="168" name="lookup" returns="filter()" signature="lookup(caps, MIMEtype, key=None)">
        <variable citdl="str" ilk="argument" name="MIMEtype" />
        <variable citdl="MIMEtype.split()" line="162" name="MIMEtypes" />
        <variable citdl="list" line="159" name="entries" />
        <variable ilk="argument" name="key" />
        <variable ilk="argument" name="caps" />
      </scope>
      <import module="os" />
      <scope doc="Separate one key-value pair in a mailcap entry." ilk="function" line="122" lineend="133" name="parsefield" returns="tuple" signature="parsefield(line, i, n)">
        <variable citdl="int" ilk="argument" name="i" />
        <variable line="124" name="start" />
        <variable ilk="argument" name="line" />
        <variable line="126" name="c" />
        <variable ilk="argument" name="n" />
      </scope>
      <scope doc="Parse one entry in a mailcap file and return a dictionary." ilk="function" line="91" lineend="120" name="parseline" returns="tuple" signature="parseline(line)">
        <variable citdl="int" line="98" name="i" />
        <variable citdl="dict" line="97" name="fields" />
        <variable citdl="list" line="105" name="rest" />
        <variable citdl="len()" line="98" name="n" />
        <variable line="105" name="key" />
        <variable citdl="field" line="110" name="fkey" />
        <variable ilk="argument" name="line" />
        <variable citdl="str" line="111" name="fvalue" />
        <variable line="105" name="view" />
      </scope>
      <scope doc="Read a mailcap file and return a dictionary keyed by MIME type." ilk="function" line="53" lineend="89" name="readmailcapfile" returns="dict" signature="readmailcapfile(fp)">
        <variable ilk="argument" name="fp" />
        <variable citdl="fp.readline()" line="69" name="nextline" />
        <variable citdl="dict" line="62" name="caps" />
        <variable line="83" name="key" />
        <variable citdl="fp.readline()" line="64" name="line" />
        <variable citdl="key.split()" line="80" name="types" />
      </scope>
      <scope ilk="function" line="235" lineend="252" name="show" signature="show(caps)">
        <variable citdl="e.keys()" line="248" name="keys" />
        <variable line="246" name="entries" />
        <variable citdl="caps.keys()" line="242" name="ckeys" />
        <variable citdl="getcaps()" ilk="argument" name="caps" />
      </scope>
      <scope ilk="function" line="170" lineend="200" name="subst" returns="str" signature="subst(field, MIMEtype, filename, plist=[])">
        <variable ilk="argument" name="MIMEtype" />
        <variable citdl="list" line="175" name="c" />
        <variable citdl="list" line="192" name="name" />
        <variable citdl="int" line="189" name="start" />
        <variable citdl="int" line="173" name="i" />
        <variable citdl="list" line="172" name="res" />
        <variable ilk="argument" name="filename" />
        <variable ilk="argument" name="field" />
        <variable citdl="len()" line="173" name="n" />
        <variable citdl="list" ilk="argument" name="plist" />
      </scope>
      <scope ilk="function" line="213" lineend="233" name="test" signature="test()">
        <variable line="224" name="MIMEtype" />
        <variable citdl="list" line="220" name="args" />
        <variable citdl="os.system()" line="231" name="sts" />
        <variable line="225" name="file" />
        <variable citdl="getcaps()" line="215" name="caps" />
      </scope>
    </scope>
    <scope doc="Tool for measuring execution time of small code snippets.  This module avoids a number of common traps for measuring execution" ilk="blob" lang="Python3" name="timeit">
      <scope classrefs="object" doc="Class for timing execution speed of small code snippets.  The constructor takes a statement to be timed, an additional" ilk="class" line="104" lineend="222" name="Timer">
        <variable attributes="__instancevar__" citdl="dict" line="134" name="src" />
        <scope doc="Time &apos;number&apos; executions of the main statement." ilk="function" line="177" lineend="196" name="timeit" returns="inner()" signature="timeit(number=default_number)">
          <variable citdl="Timer" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="number" />
          <variable citdl="itertools.repeat()" line="188" name="it" />
          <variable citdl="gc.isenabled()" line="191" name="gcold" />
          <variable citdl="inner()" line="193" name="timing" />
        </scope>
        <scope doc="Call timeit() a few times." ilk="function" line="198" lineend="222" name="repeat" returns="list" signature="repeat(repeat=default_repeat, number=default_number)">
          <variable citdl="Timer" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="repeat" />
          <variable citdl="int" ilk="argument" name="number" />
          <variable citdl="list" line="218" name="r" />
          <variable citdl="timeit()" line="220" name="t" />
        </scope>
        <scope doc="Helper to print a traceback from the timed code." ilk="function" line="150" lineend="175" name="print_exc" signature="print_exc(file=None)">
          <import line="167" module="linecache" />
          <import line="167" module="traceback" />
          <variable citdl="Timer" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
        <variable attributes="__instancevar__" citdl="time.clock" line="122" name="timer" />
        <variable attributes="__instancevar__" citdl="_template_func()" line="137" name="inner" />
        <scope attributes="__ctor__" doc="Constructor. See class doc string." ilk="function" line="120" lineend="148" name="__init__" signature="Timer(stmt=&apos;pass&apos;, setup=&apos;pass&apos;, timer=default_timer)">
          <variable citdl="Timer" ilk="argument" name="self" />
          <variable citdl="reindent()" ilk="argument" name="stmt" />
          <variable citdl="reindent()" ilk="argument" name="setup" />
          <variable citdl="time.clock" ilk="argument" name="timer" />
          <variable citdl="dict" line="123" name="ns" />
          <variable citdl="dict" line="128" name="src" />
          <variable citdl="compile()" line="135" name="code" />
          <variable attributes="protected" citdl="str" line="141" name="_setup" />
        </scope>
      </scope>
      <variable citdl="list" line="63" name="__all__" />
      <variable citdl="int" line="66" name="default_number" />
      <variable citdl="int" line="67" name="default_repeat" />
      <scope doc="Return the CPU time or real time since the start of the process or since the first call to clock()." ilk="function" line="71" name="default_timer" signature="clock() -&gt; floating point number" />
      <variable citdl="str" line="65" name="dummy_src_name" />
      <import module="gc" />
      <import module="itertools" />
      <scope doc="Main program, used when run as a script." ilk="function" line="234" lineend="324" name="main" returns="int" signature="main(args=None)">
        <variable citdl="int" line="262" name="repeat" />
        <variable citdl="min()" line="314" name="usec" />
        <variable citdl="int" line="263" name="verbose" />
        <variable citdl="list" line="261" name="setup" />
        <variable citdl="list" ilk="argument" name="args" />
        <variable citdl="min()" line="318" name="msec" />
        <variable citdl="int" line="260" name="number" />
        <variable citdl="str.join()" line="259" name="stmt" />
        <variable citdl="int" line="264" name="precision" />
        <variable citdl="t.repeat()" line="306" name="r" />
        <variable citdl="min()" line="322" name="sec" />
        <variable citdl="time.clock" line="258" name="timer" />
        <variable citdl="t.timeit()" line="297" name="x" />
        <variable citdl="min()" line="310" name="best" />
        <variable citdl="Timer" line="291" name="t" />
      </scope>
      <scope doc="Helper to reindent a multi-line statement." ilk="function" line="89" lineend="91" name="reindent" returns="src.replace()" signature="reindent(src, indent)">
        <variable ilk="argument" name="src" />
        <variable ilk="argument" name="indent" />
      </scope>
      <scope doc="Convenience function to create Timer object and call repeat method." ilk="function" line="229" lineend="232" name="repeat" signature="repeat(stmt=&apos;pass&apos;, setup=&apos;pass&apos;, timer=&lt;built-in function clock&gt;, repeat=3, number=1000000)">
        <variable citdl="str" ilk="argument" name="setup" />
        <variable citdl="int" ilk="argument" name="repeat" />
        <variable citdl="time.clock" ilk="argument" name="timer" />
        <variable citdl="str" ilk="argument" name="stmt" />
        <variable citdl="int" ilk="argument" name="number" />
      </scope>
      <import module="sys" />
      <variable citdl="str" line="79" name="template" />
      <import module="time" />
      <scope doc="Convenience function to create Timer object and call timeit method." ilk="function" line="224" lineend="227" name="timeit" signature="timeit(stmt=&apos;pass&apos;, setup=&apos;pass&apos;, timer=&lt;built-in function clock&gt;, number=1000000)">
        <variable citdl="str" ilk="argument" name="setup" />
        <variable citdl="time.clock" ilk="argument" name="timer" />
        <variable citdl="str" ilk="argument" name="stmt" />
        <variable citdl="int" ilk="argument" name="number" />
      </scope>
      <scope attributes="protected __hidden__" doc="Create a timer function. Used if the &quot;statement&quot; is a callable." ilk="function" line="93" lineend="102" name="_template_func" returns="_template_func.inner" signature="_template_func(setup, func)">
        <variable ilk="argument" name="setup" />
        <variable ilk="argument" name="func" />
        <scope ilk="function" line="95" lineend="101" name="inner" returns="_timer()" signature="inner(_it, _timer, _func=func)">
          <variable ilk="argument" name="_it" />
          <variable ilk="argument" name="_timer" />
          <variable ilk="argument" name="_func" />
          <variable attributes="protected" citdl="_timer()" line="97" name="_t0" />
          <variable attributes="protected" citdl="_timer()" line="100" name="_t1" />
        </scope>
      </scope>
      <variable attributes="__hidden__" line="61" name="itertools" />
    </scope>
    <scope doc="plistlib.py -- a tool to generate and parse MacOSX .plist files.  The property list (.plist) file format is a simple XML pickle supporting" ilk="blob" lang="Python3" name="plistlib">
      <scope classrefs="_BufferedIOBase" doc="BytesIO([buffer]) -&gt; object  Create a buffered I/O implementation using an in-memory bytes" ilk="class" name="BytesIO" />
      <scope classrefs="object" doc="Wrapper for binary data." ilk="class" line="326" lineend="353" name="Data">
        <scope ilk="function" line="336" lineend="339" name="fromBase64" returns="Data.fromBase64.cls()" signature="fromBase64(data)">
          <variable citdl="Data" ilk="argument" name="cls" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="__instancevar__" line="333" name="data" />
        <scope ilk="function" line="352" lineend="353" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="Data" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="344" lineend="350" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="Data" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="330" lineend="333" name="__init__" signature="Data(data)">
          <variable citdl="Data" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="341" lineend="342" name="asBase64" returns="_encodeBase64()" signature="asBase64(maxlinelength=76)">
          <variable citdl="Data" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="maxlinelength" />
        </scope>
      </scope>
      <scope classrefs="_InternalDict" ilk="class" line="283" lineend="289" name="Dict">
        <scope attributes="__ctor__" ilk="function" line="285" lineend="289" name="__init__" signature="Dict(**kwargs)">
          <import line="286" module="warnings" symbol="warn" />
          <variable citdl="Dict" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="111" lineend="143" name="DumbXMLWriter">
        <scope ilk="function" line="118" lineend="121" name="beginElement" signature="beginElement(element)">
          <variable citdl="DumbXMLWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="116" name="indent" />
        <scope ilk="function" line="123" lineend="127" name="endElement" signature="endElement(element)">
          <variable citdl="DumbXMLWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
        </scope>
        <scope ilk="function" line="129" lineend="134" name="simpleElement" signature="simpleElement(element, value=None)">
          <variable citdl="DumbXMLWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
          <variable citdl="_escape()" ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="136" lineend="143" name="writeln" signature="writeln(line)">
          <variable citdl="DumbXMLWriter" ilk="argument" name="self" />
          <variable citdl="line.encode()" ilk="argument" name="line" />
        </scope>
        <variable attributes="__instancevar__" line="113" name="file" />
        <variable attributes="__instancevar__" citdl="int" line="115" name="indentLevel" />
        <variable attributes="__instancevar__" citdl="list" line="114" name="stack" />
        <scope attributes="__ctor__" ilk="function" line="112" lineend="116" name="__init__" signature="DumbXMLWriter(file, indentLevel=0, indent=&apos;\t&apos;)">
          <variable citdl="DumbXMLWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="int" ilk="argument" name="indentLevel" />
          <variable citdl="str" ilk="argument" name="indent" />
        </scope>
      </scope>
      <variable citdl="bytes" line="187" name="PLISTHEADER" />
      <scope classrefs="_InternalDict" doc="This class has been deprecated. Use readPlist() and writePlist() functions instead, together with regular dict objects." ilk="class" line="292" lineend="314" name="Plist">
        <scope doc="Deprecated. Use the writePlist() function instead." ilk="function" line="312" lineend="314" name="write" signature="write(pathOrFile)">
          <variable citdl="Plist" ilk="argument" name="self" />
          <variable ilk="argument" name="pathOrFile" />
        </scope>
        <scope doc="Deprecated. Use the readPlist() function instead." ilk="function" line="310" lineend="309" name="fromFile" returns="cls()" signature="fromFile(pathOrFile)">
          <variable citdl="Plist" ilk="argument" name="cls" />
          <variable ilk="argument" name="pathOrFile" />
          <variable citdl="readPlist()" line="306" name="rootObject" />
          <variable citdl="cls()" line="307" name="plist" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="298" lineend="302" name="__init__" signature="Plist(**kwargs)">
          <import line="299" module="warnings" symbol="warn" />
          <variable citdl="Plist" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="356" lineend="433" name="PlistParser">
        <scope ilk="function" line="426" lineend="427" name="end_real" signature="end_real()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="424" lineend="425" name="end_integer" signature="end_integer()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="413" lineend="416" name="begin_array" signature="begin_array(attrs)">
          <variable citdl="PlistParser" ilk="argument" name="self" />
          <variable ilk="argument" name="attrs" />
          <variable citdl="list" line="414" name="a" />
        </scope>
        <scope ilk="function" line="422" lineend="423" name="end_false" signature="end_false()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="363" lineend="370" name="parse" signature="parse(fileobj)">
          <import line="364" module="xml.parsers.expat" symbol="ParserCreate" />
          <variable citdl="PlistParser" ilk="argument" name="self" />
          <variable ilk="argument" name="fileobj" />
          <variable citdl="ParserCreate()" line="365" name="parser" />
        </scope>
        <scope ilk="function" line="403" lineend="406" name="begin_dict" signature="begin_dict(attrs)">
          <variable citdl="PlistParser" ilk="argument" name="self" />
          <variable ilk="argument" name="attrs" />
          <variable citdl="_InternalDict" line="404" name="d" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="358" lineend="361" name="__init__" signature="PlistParser()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="417" lineend="418" name="end_array" signature="end_array()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="383" lineend="384" name="handleData" signature="handleData(data)">
          <variable citdl="PlistParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="396" lineend="399" name="getData" returns="str.join()" signature="getData()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
          <variable citdl="str.join()" line="397" name="data" />
        </scope>
        <scope ilk="function" line="407" lineend="408" name="end_dict" signature="end_dict()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="386" lineend="394" name="addObject" signature="addObject(value)">
          <variable citdl="PlistParser" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="430" lineend="431" name="end_data" signature="end_data()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="432" lineend="433" name="end_date" signature="end_date()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="428" lineend="429" name="end_string" signature="end_string()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="373" name="data" />
        <variable attributes="__instancevar__" citdl="list" line="359" name="stack" />
        <scope ilk="function" line="378" lineend="381" name="handleEndElement" signature="handleEndElement(element)">
          <variable citdl="PlistParser" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
          <variable citdl="getattr()" line="379" name="handler" />
        </scope>
        <scope ilk="function" line="372" lineend="376" name="handleBeginElement" signature="handleBeginElement(element, attrs)">
          <variable citdl="PlistParser" ilk="argument" name="self" />
          <variable ilk="argument" name="element" />
          <variable ilk="argument" name="attrs" />
          <variable citdl="getattr()" line="374" name="handler" />
        </scope>
        <scope ilk="function" line="410" lineend="411" name="end_key" signature="end_key()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="getData()" line="360" name="currentKey" />
        <variable attributes="__instancevar__" line="361" name="root" />
        <scope ilk="function" line="420" lineend="421" name="end_true" signature="end_true()">
          <variable citdl="PlistParser" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="DumbXMLWriter" ilk="class" line="192" lineend="249" name="PlistWriter">
        <scope ilk="function" line="245" lineend="249" name="writeArray" signature="writeArray(array)">
          <variable citdl="PlistWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="array" />
        </scope>
        <scope ilk="function" line="235" lineend="243" name="writeDict" signature="writeDict(d)">
          <variable citdl="PlistWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="d" />
          <variable citdl="sorted()" line="237" name="items" />
        </scope>
        <scope ilk="function" line="224" lineend="233" name="writeData" signature="writeData(data)">
          <variable citdl="PlistWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="len()" line="227" name="maxlinelength" />
        </scope>
        <scope ilk="function" line="199" lineend="222" name="writeValue" signature="writeValue(value)">
          <variable citdl="PlistWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="194" lineend="197" name="__init__" signature="PlistWriter(file, indentLevel=0, indent=&apos;\t&apos;, writeHeader=1)">
          <variable citdl="PlistWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="int" ilk="argument" name="indentLevel" />
          <variable citdl="str" ilk="argument" name="indent" />
          <variable citdl="int" ilk="argument" name="writeHeader" />
        </scope>
      </scope>
      <variable citdl="list" line="53" name="__all__" />
      <import module="binascii" />
      <import module="datetime" />
      <import module="re" />
      <scope doc="Read a .plist file." ilk="function" line="65" lineend="78" name="readPlist" returns="p.parse()" signature="readPlist(pathOrFile)">
        <variable citdl="True" line="70" name="didOpen" />
        <variable citdl="PlistParser()" line="74" name="p" />
        <variable citdl="open()" ilk="argument" name="pathOrFile" />
        <variable citdl="p.parse()" line="75" name="rootObject" />
      </scope>
      <scope doc="Read a plist data from a bytes object." ilk="function" line="97" lineend="100" name="readPlistFromBytes" returns="readPlist()" signature="readPlistFromBytes(data)">
        <variable ilk="argument" name="data" />
      </scope>
      <scope doc="Write &apos;rootObject&apos; to a .plist file." ilk="function" line="81" lineend="94" name="writePlist" signature="writePlist(rootObject, pathOrFile)">
        <variable citdl="False" line="85" name="didOpen" />
        <variable citdl="open()" ilk="argument" name="pathOrFile" />
        <variable citdl="PlistWriter()" line="89" name="writer" />
        <variable ilk="argument" name="rootObject" />
      </scope>
      <scope doc="Return &apos;rootObject&apos; as a plist-formatted bytes object." ilk="function" line="103" lineend="108" name="writePlistToBytes" returns="f.getvalue()" signature="writePlistToBytes(rootObject)">
        <variable citdl="BytesIO()" line="106" name="f" />
        <variable ilk="argument" name="rootObject" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="149" name="_dateParser" />
      <scope attributes="protected __hidden__" ilk="function" line="317" lineend="324" name="_encodeBase64" returns="str.join()" signature="_encodeBase64(s, maxlinelength=76)">
        <variable ilk="argument" name="s" />
        <variable citdl="int" ilk="argument" name="maxlinelength" />
        <variable citdl="int" line="319" name="maxbinsize" />
        <variable citdl="list" line="320" name="pieces" />
        <variable citdl="list" line="322" name="chunk" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="162" lineend="165" name="_dateToString" returns="tuple" signature="_dateToString(d)">
        <variable ilk="argument" name="d" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="151" lineend="160" name="_dateFromString" returns="datetime.datetime()" signature="_dateFromString(s)">
        <variable ilk="argument" name="s" />
        <variable citdl="tuple" line="152" name="order" />
        <variable line="153" name="gd" />
        <variable citdl="list" line="154" name="lst" />
        <variable line="156" name="val" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="dict" ilk="class" line="252" lineend="281" name="_InternalDict">
        <scope ilk="function" line="258" lineend="266" name="__getattr__" signature="__getattr__(attr)">
          <import line="263" module="warnings" symbol="warn" />
          <variable citdl="_InternalDict" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
          <variable line="260" name="value" />
        </scope>
        <scope ilk="function" line="268" lineend="272" name="__setattr__" signature="__setattr__(attr, value)">
          <import line="269" module="warnings" symbol="warn" />
          <variable citdl="_InternalDict" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="274" lineend="281" name="__delattr__" signature="__delattr__(attr)">
          <import line="279" module="warnings" symbol="warn" />
          <variable citdl="_InternalDict" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="170" name="_controlCharPat" />
      <scope attributes="protected __hidden__" ilk="function" line="174" lineend="184" name="_escape" returns="text.replace()" signature="_escape(text)">
        <variable citdl="text.replace()" ilk="argument" name="text" />
        <variable citdl="_controlCharPat.search()" line="175" name="m" />
      </scope>
    </scope>
    <scope doc="Response classes used by urllib.  The base class, addbase, defines a minimal file-like interface," ilk="blob" lang="Python3" name="urllib.response">
      <scope classrefs="object" doc="Base class for addinfo and addclosehook." ilk="class" line="9" lineend="49" name="addbase">
        <variable attributes="__instancevar__" line="16" name="fp" />
        <variable attributes="__instancevar__" citdl="self.fp.fileno" line="23" name="fileno" />
        <scope ilk="function" line="43" lineend="46" name="__enter__" returns="addbase" signature="__enter__()">
          <variable citdl="addbase" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="48" lineend="49" name="__exit__" signature="__exit__(type, value, traceback)">
          <variable citdl="addbase" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="traceback" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.fp.read" line="17" name="read" />
        <variable attributes="__instancevar__" citdl="self.fp.__next__" line="29" name="__next__" />
        <variable attributes="__instancevar__" citdl="self.fp.readlines" line="21" name="readlines" />
        <variable attributes="__instancevar__" citdl="self.fp.__iter__" line="27" name="__iter__" />
        <scope ilk="function" line="31" lineend="33" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="addbase" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="35" lineend="41" name="close" signature="close()">
          <variable citdl="addbase" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.fp.readline" line="18" name="readline" />
        <scope attributes="__ctor__" ilk="function" line="14" lineend="29" name="__init__" signature="addbase(fp)">
          <variable citdl="addbase" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
        </scope>
      </scope>
      <scope classrefs="addbase" doc="Class to add a close hook to an open file." ilk="class" line="51" lineend="64" name="addclosehook">
        <variable attributes="__instancevar__" line="56" name="closehook" />
        <scope ilk="function" line="59" lineend="64" name="close" signature="close()">
          <variable citdl="addclosehook" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="57" name="hookargs" />
        <scope attributes="__ctor__" ilk="function" line="54" lineend="57" name="__init__" signature="addclosehook(fp, closehook, *hookargs)">
          <variable citdl="addclosehook" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="closehook" />
          <variable attributes="varargs" ilk="argument" name="hookargs" />
        </scope>
      </scope>
      <scope classrefs="addbase" doc="class to add an info() method to an open file." ilk="class" line="66" lineend="74" name="addinfo">
        <scope ilk="function" line="73" lineend="74" name="info" signature="info()">
          <variable citdl="addinfo" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="71" name="headers" />
        <scope attributes="__ctor__" ilk="function" line="69" lineend="71" name="__init__" signature="addinfo(fp, headers)">
          <variable citdl="addinfo" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="headers" />
        </scope>
      </scope>
      <scope classrefs="addbase" doc="class to add info() and geturl() methods to an open file." ilk="class" line="76" lineend="92" name="addinfourl">
        <scope ilk="function" line="85" lineend="86" name="info" signature="info()">
          <variable citdl="addinfourl" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="91" lineend="92" name="geturl" signature="geturl()">
          <variable citdl="addinfourl" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="83" name="code" />
        <scope ilk="function" line="88" lineend="89" name="getcode" signature="getcode()">
          <variable citdl="addinfourl" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="82" name="url" />
        <variable attributes="__instancevar__" line="81" name="headers" />
        <scope attributes="__ctor__" ilk="function" line="79" lineend="83" name="__init__" signature="addinfourl(fp, headers, url, code=None)">
          <variable citdl="addinfourl" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="headers" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="code" />
        </scope>
      </scope>
    </scope>
    <scope ilk="blob" lang="Python3" name="urllib">
      <import module="error" />
      <import module="parse" />
      <import module="request" />
      <import module="response" />
    </scope>
    <scope doc="Base class for MIME specializations." ilk="blob" lang="Python3" name="email.mime.base">
      <scope classrefs="Message" doc="Base class for MIME specializations." ilk="class" line="13" lineend="26" name="MIMEBase">
        <scope attributes="__ctor__" doc="This constructor adds a Content-Type: and a MIME-Version: header." ilk="function" line="16" lineend="26" name="__init__" signature="MIMEBase(_maintype, _subtype, **_params)">
          <variable citdl="MIMEBase" ilk="argument" name="self" />
          <variable ilk="argument" name="_maintype" />
          <variable ilk="argument" name="_subtype" />
          <variable attributes="kwargs" ilk="argument" name="_params" />
          <variable citdl="str" line="24" name="ctype" />
        </scope>
      </scope>
      <variable citdl="list" line="7" name="__all__" />
      <import module="message" />
    </scope>
    <scope doc="Generic output formatting.  Formatter objects transform an abstract flow of formatting events into" ilk="blob" lang="Python3" name="formatter">
      <variable citdl="NoneType" line="24" name="AS_IS" />
      <scope classrefs="object" doc="The standard formatter.  This implementation has demonstrated wide applicability to many writers," ilk="class" line="61" lineend="292" name="AbstractFormatter">
        <variable attributes="__instancevar__" citdl="int" line="85" name="para_end" />
        <scope ilk="function" line="221" lineend="229" name="pop_alignment" signature="pop_alignment()">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="84" name="softspace" />
        <scope ilk="function" line="101" lineend="106" name="add_line_break" signature="add_line_break()">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="90" lineend="99" name="end_paragraph" signature="end_paragraph(blankline)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="blankline" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="88" name="have_label" />
        <scope ilk="function" line="256" lineend="261" name="push_margin" signature="push_margin(margin)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="margin" />
          <variable citdl="list" line="258" name="fstack" />
        </scope>
        <scope ilk="function" line="273" lineend="275" name="set_spacing" signature="set_spacing(spacing)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="spacing" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="75" lineend="88" name="__init__" signature="AbstractFormatter(writer)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="writer" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="86" name="parskip" />
        <variable attributes="__instancevar__" citdl="int" line="87" name="hard_break" />
        <scope ilk="function" line="286" lineend="288" name="pop_style" signature="pop_style(n=1)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="n" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="79" name="font_stack" />
        <variable attributes="__instancevar__" line="76" name="writer" />
        <variable attributes="__instancevar__" citdl="int" line="83" name="nospace" />
        <scope ilk="function" line="277" lineend="284" name="push_style" signature="push_style(*styles)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="styles" />
        </scope>
        <scope ilk="function" line="290" lineend="292" name="assert_line_data" signature="assert_line_data(flag=1)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="flag" />
        </scope>
        <variable attributes="__instancevar__" line="81" name="spacing" />
        <scope ilk="function" line="153" lineend="175" name="format_roman" returns="str" signature="format_roman(case, counter)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="case" />
          <variable ilk="argument" name="counter" />
          <variable citdl="list" line="154" name="ones" />
          <variable citdl="list" line="155" name="fives" />
          <variable citdl="int" line="156" name="index" />
          <variable citdl="str" line="156" name="label" />
          <variable citdl="str" line="166" name="s" />
          <variable citdl="int" line="167" name="x" />
        </scope>
        <scope ilk="function" line="177" lineend="195" name="add_flowing_data" signature="add_flowing_data(data)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable citdl="str.join()" ilk="argument" name="data" />
          <variable line="179" name="prespace" />
          <variable line="180" name="postspace" />
        </scope>
        <scope ilk="function" line="127" lineend="140" name="format_counter" returns="self.format_letter()" signature="format_counter(format, counter)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="format" />
          <variable ilk="argument" name="counter" />
          <variable citdl="str" line="128" name="label" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="78" name="align_stack" />
        <scope ilk="function" line="197" lineend="204" name="add_literal_data" signature="add_literal_data(data)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="231" lineend="245" name="push_font" signature="push_font(font)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="font" />
          <variable citdl="csize" line="239" name="size" />
          <variable citdl="ci" line="240" name="i" />
          <variable citdl="cb" line="241" name="b" />
          <variable citdl="ctt" line="242" name="tt" />
        </scope>
        <scope ilk="function" line="247" lineend="254" name="pop_font" signature="pop_font()">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable line="251" name="font" />
        </scope>
        <scope ilk="function" line="213" lineend="219" name="push_alignment" signature="push_alignment(align)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="align" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="82" name="style_stack" />
        <variable attributes="__instancevar__" citdl="list" line="80" name="margin_stack" />
        <variable attributes="__instancevar__" line="77" name="align" />
        <scope ilk="function" line="108" lineend="113" name="add_hor_rule" signature="add_hor_rule(*args, **kw)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="263" lineend="271" name="pop_margin" signature="pop_margin()">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable citdl="list" line="266" name="fstack" />
          <variable line="268" name="margin" />
        </scope>
        <scope ilk="function" line="142" lineend="151" name="format_letter" returns="str" signature="format_letter(case, counter)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="case" />
          <variable ilk="argument" name="counter" />
          <variable citdl="str" line="143" name="label" />
          <variable citdl="chr()" line="149" name="s" />
        </scope>
        <scope ilk="function" line="115" lineend="125" name="add_label_data" signature="add_label_data(format, counter, blankline=None)">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="format" />
          <variable ilk="argument" name="counter" />
          <variable ilk="argument" name="blankline" />
        </scope>
        <scope ilk="function" line="206" lineend="211" name="flush_softspace" signature="flush_softspace()">
          <variable citdl="AbstractFormatter" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="NullWriter" doc="A writer which can be used in debugging formatters, but not much else.  Each method simply announces itself by printing its name and" ilk="class" line="318" lineend="357" name="AbstractWriter">
        <scope ilk="function" line="335" lineend="336" name="new_spacing" signature="new_spacing(spacing)">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="spacing" />
        </scope>
        <scope ilk="function" line="356" lineend="357" name="send_literal_data" signature="send_literal_data(data)">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="329" lineend="330" name="new_font" signature="new_font(font)">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="font" />
        </scope>
        <scope ilk="function" line="353" lineend="354" name="send_flowing_data" signature="send_flowing_data(data)">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="326" lineend="327" name="new_alignment" signature="new_alignment(align)">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="align" />
        </scope>
        <scope ilk="function" line="344" lineend="345" name="send_line_break" signature="send_line_break()">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="332" lineend="333" name="new_margin" signature="new_margin(margin, level)">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="margin" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="350" lineend="351" name="send_label_data" signature="send_label_data(data)">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="341" lineend="342" name="send_paragraph" signature="send_paragraph(blankline)">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="blankline" />
        </scope>
        <scope ilk="function" line="347" lineend="348" name="send_hor_rule" signature="send_hor_rule(*args, **kw)">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="338" lineend="339" name="new_styles" signature="new_styles(styles)">
          <variable citdl="AbstractWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="styles" />
        </scope>
      </scope>
      <scope classrefs="NullWriter" doc="Simple writer class which writes output on the file object passed in as the file parameter or, if file is omitted, on standard output.  The output is simply word-wrapped to the number of columns specified by" ilk="class" line="360" lineend="424" name="DumbWriter">
        <scope ilk="function" line="375" lineend="377" name="reset" signature="reset()">
          <variable citdl="DumbWriter" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="371" name="maxcol" />
        <scope ilk="function" line="396" lineend="404" name="send_literal_data" signature="send_literal_data(data)">
          <variable citdl="DumbWriter" ilk="argument" name="self" />
          <variable citdl="data.expandtabs()" ilk="argument" name="data" />
          <variable citdl="data.rfind()" line="398" name="i" />
        </scope>
        <scope ilk="function" line="406" lineend="424" name="send_flowing_data" signature="send_flowing_data(data)">
          <variable citdl="DumbWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="int" line="408" name="atbreak" />
          <variable citdl="len()" line="409" name="col" />
          <variable citdl="int" line="410" name="maxcol" />
          <variable citdl="self.file.write" line="411" name="write" />
        </scope>
        <scope ilk="function" line="384" lineend="387" name="send_line_break" signature="send_line_break()">
          <variable citdl="DumbWriter" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="sys.stdout" line="370" name="file" />
        <scope ilk="function" line="379" lineend="382" name="send_paragraph" signature="send_paragraph(blankline)">
          <variable citdl="DumbWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="blankline" />
        </scope>
        <scope ilk="function" line="389" lineend="394" name="send_hor_rule" signature="send_hor_rule(*args, **kw)">
          <variable citdl="DumbWriter" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="376" name="col" />
        <scope attributes="__ctor__" ilk="function" line="369" lineend="373" name="__init__" signature="DumbWriter(file=None, maxcol=72)">
          <variable citdl="DumbWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="int" ilk="argument" name="maxcol" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="377" name="atbreak" />
      </scope>
      <scope classrefs="object" doc="A formatter which does nothing.  If the writer parameter is omitted, a NullWriter instance is created." ilk="class" line="27" lineend="58" name="NullFormatter">
        <scope ilk="function" line="49" lineend="49" name="push_alignment" signature="push_alignment(align)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="align" />
        </scope>
        <scope ilk="function" line="50" lineend="50" name="pop_alignment" signature="pop_alignment()">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="43" lineend="43" name="add_line_break" signature="add_line_break()">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="57" lineend="57" name="pop_style" signature="pop_style(n=1)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="n" />
        </scope>
        <scope ilk="function" line="56" lineend="56" name="push_style" signature="push_style(*styles)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="styles" />
        </scope>
        <scope ilk="function" line="54" lineend="54" name="pop_margin" signature="pop_margin()">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="42" lineend="42" name="end_paragraph" signature="end_paragraph(blankline)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="blankline" />
        </scope>
        <scope ilk="function" line="58" lineend="58" name="assert_line_data" signature="assert_line_data(flag=1)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="flag" />
        </scope>
        <variable attributes="__instancevar__" citdl="NullWriter()" line="41" name="writer" />
        <scope ilk="function" line="53" lineend="53" name="push_margin" signature="push_margin(margin)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="margin" />
        </scope>
        <scope ilk="function" line="44" lineend="44" name="add_hor_rule" signature="add_hor_rule(*args, **kw)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="46" lineend="46" name="add_flowing_data" signature="add_flowing_data(data)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="48" lineend="48" name="flush_softspace" signature="flush_softspace()">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="55" lineend="55" name="set_spacing" signature="set_spacing(spacing)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="spacing" />
        </scope>
        <scope ilk="function" line="45" lineend="45" name="add_label_data" signature="add_label_data(format, counter, blankline=None)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="format" />
          <variable ilk="argument" name="counter" />
          <variable ilk="argument" name="blankline" />
        </scope>
        <scope ilk="function" line="47" lineend="47" name="add_literal_data" signature="add_literal_data(data)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="51" lineend="51" name="push_font" signature="push_font(x)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="38" lineend="41" name="__init__" signature="NullFormatter(writer=None)">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
          <variable citdl="NullWriter()" ilk="argument" name="writer" />
        </scope>
        <scope ilk="function" line="52" lineend="52" name="pop_font" signature="pop_font()">
          <variable citdl="NullFormatter" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Minimal writer interface to use in testing &amp; inheritance.  A writer which only provides the interface definition; no actions are" ilk="class" line="295" lineend="315" name="NullWriter">
        <scope ilk="function" line="308" lineend="308" name="new_spacing" signature="new_spacing(spacing)">
          <variable citdl="NullWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="spacing" />
        </scope>
        <scope ilk="function" line="315" lineend="315" name="send_literal_data" signature="send_literal_data(data)">
          <variable citdl="NullWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="306" lineend="306" name="new_font" signature="new_font(font)">
          <variable citdl="NullWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="font" />
        </scope>
        <scope ilk="function" line="314" lineend="314" name="send_flowing_data" signature="send_flowing_data(data)">
          <variable citdl="NullWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="305" lineend="305" name="new_alignment" signature="new_alignment(align)">
          <variable citdl="NullWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="align" />
        </scope>
        <scope ilk="function" line="311" lineend="311" name="send_line_break" signature="send_line_break()">
          <variable citdl="NullWriter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="307" lineend="307" name="new_margin" signature="new_margin(margin, level)">
          <variable citdl="NullWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="margin" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope ilk="function" line="313" lineend="313" name="send_label_data" signature="send_label_data(data)">
          <variable citdl="NullWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="304" lineend="304" name="flush" signature="flush()">
          <variable citdl="NullWriter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="310" lineend="310" name="send_paragraph" signature="send_paragraph(blankline)">
          <variable citdl="NullWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="blankline" />
        </scope>
        <scope ilk="function" line="312" lineend="312" name="send_hor_rule" signature="send_hor_rule(*args, **kw)">
          <variable citdl="NullWriter" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <scope ilk="function" line="309" lineend="309" name="new_styles" signature="new_styles(styles)">
          <variable citdl="NullWriter" ilk="argument" name="self" />
          <variable ilk="argument" name="styles" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="303" lineend="303" name="__init__" signature="NullWriter()">
          <variable citdl="NullWriter" ilk="argument" name="self" />
        </scope>
      </scope>
      <import module="sys" />
      <scope ilk="function" line="427" lineend="441" name="test" signature="test(file=None)">
        <variable citdl="open()" line="431" name="fp" />
        <variable citdl="DumbWriter" line="428" name="w" />
        <variable ilk="argument" name="file" />
        <variable citdl="AbstractFormatter" line="429" name="f" />
      </scope>
    </scope>
    <scope doc="A package for parsing, handling, and generating email messages." ilk="blob" lang="Python3" name="email">
      <variable citdl="list" line="9" name="__all__" />
      <variable citdl="str" line="7" name="__version__" />
      <import module="_parseaddr" />
      <import module="base64mime" />
      <import module="charset" />
      <import module="encoders" />
      <import module="errors" />
      <import module="feedparser" />
      <import module="generator" />
      <import module="header" />
      <import module="iterators" />
      <import module="message" />
      <scope doc="Read a file and parse its contents into a Message object model." ilk="function" line="40" lineend="46" name="message_from_file" signature="message_from_file(fp, *args, **kws)">
        <variable ilk="argument" name="fp" />
        <variable attributes="kwargs" ilk="argument" name="kws" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <scope doc="Parse a string into a Message object model." ilk="function" line="31" lineend="37" name="message_from_string" signature="message_from_string(s, *args, **kws)">
        <variable ilk="argument" name="s" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kws" />
      </scope>
      <import module="mime" />
      <import module="parser" />
      <import module="quoprimime" />
      <import module="utils" />
    </scope>
    <scope doc="# Analogue of `multiprocessing.connection` which uses queues instead of sockets # # multiprocessing/dummy/connection.py" ilk="blob" lang="Python3" name="multiprocessing.dummy.connection">
      <scope ilk="function" line="31" lineend="34" name="Client" returns="Connection()" signature="Client(address)">
        <variable attributes="protected" citdl="Queue()" line="32" name="_out" />
        <variable attributes="protected" citdl="Queue()" line="32" name="_in" />
        <variable ilk="argument" name="address" />
      </scope>
      <scope classrefs="object" ilk="class" line="42" lineend="61" name="Connection">
        <variable attributes="__instancevar__" citdl="_out.put" line="47" name="send" />
        <variable attributes="protected __instancevar__" line="46" name="_in" />
        <scope ilk="function" line="60" lineend="61" name="close" signature="close()">
          <variable citdl="Connection" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="45" name="_out" />
        <scope ilk="function" line="50" lineend="58" name="poll" returns="bool" signature="poll(timeout=0.0)">
          <variable citdl="Connection" ilk="argument" name="self" />
          <variable citdl="float" ilk="argument" name="timeout" />
        </scope>
        <variable attributes="__instancevar__" citdl="_in.get" line="48" name="recv" />
        <scope attributes="__ctor__" ilk="function" line="44" lineend="48" name="__init__" signature="Connection(_in, _out)">
          <variable citdl="Connection" ilk="argument" name="self" />
          <variable ilk="argument" name="_in" />
          <variable ilk="argument" name="_out" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="17" lineend="28" name="Listener">
        <scope ilk="function" line="25" lineend="26" name="close" signature="close()">
          <variable citdl="Listener" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="22" lineend="23" name="accept" returns="Connection()" signature="accept()">
          <variable citdl="Listener" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Queue()" line="20" name="_backlog_queue" />
        <scope attributes="__ctor__" ilk="function" line="19" lineend="20" name="__init__" signature="Listener(address=None, family=None, backlog=1)">
          <variable citdl="Listener" ilk="argument" name="self" />
          <variable ilk="argument" name="address" />
          <variable ilk="argument" name="family" />
          <variable citdl="int" ilk="argument" name="backlog" />
        </scope>
        <variable citdl="property()" line="28" name="address" />
      </scope>
      <scope ilk="function" line="37" lineend="39" name="Pipe" returns="tuple" signature="Pipe(duplex=True)">
        <variable citdl="True" ilk="argument" name="duplex" />
        <variable citdl="Queue()" line="38" name="a" />
        <variable citdl="Queue()" line="38" name="b" />
      </scope>
      <scope classrefs="object" doc="Create a queue object with a given maximum size.  If maxsize is &lt;= 0, the queue size is infinite." ilk="class" name="Queue" />
      <variable citdl="list" line="9" name="__all__" />
      <variable citdl="list" line="14" name="families" />
    </scope>
    <scope doc="An FTP client class and some helper functions.  Based on RFC 959: File Transfer Protocol (FTP), by J. Postel and J. Reynolds" ilk="blob" lang="Python3" name="ftplib">
      <variable citdl="bytes" line="74" name="B_CRLF" />
      <variable citdl="str" line="73" name="CRLF" />
      <scope classrefs="Exception" doc="# Exception raised when an error or invalid response is received" ilk="class" line="60" lineend="60" name="Error" />
      <scope classrefs="object" doc="An FTP client class.  To create a connection, call the class using these arguments:" ilk="class" line="77" lineend="577" name="FTP">
        <scope doc="Rename a file." ilk="function" line="513" lineend="518" name="rename" returns="FTP.voidcmd()" signature="rename(fromname, toname)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="fromname" />
          <variable ilk="argument" name="toname" />
          <variable citdl="sendcmd()" line="515" name="resp" />
        </scope>
        <variable citdl="int" line="101" name="debugging" />
        <scope doc="Remove a directory." ilk="function" line="557" lineend="559" name="rmd" returns="FTP.voidcmd()" signature="rmd(dirname)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="dirname" />
        </scope>
        <variable citdl="str" line="108" name="encoding" />
        <scope doc="Set the debugging level." ilk="function" line="146" lineend="152" name="set_debuglevel" signature="set_debuglevel(level)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <scope doc="Send a command and return the response." ilk="function" line="242" lineend="245" name="sendcmd" returns="FTP.getresp()" signature="sendcmd(cmd)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
        </scope>
        <scope doc="Send a EPRT command with the current host and the given port number." ilk="function" line="262" lineend="273" name="sendeprt" returns="FTP.voidcmd()" signature="sendeprt(host, port)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
          <variable citdl="int" line="264" name="af" />
          <variable citdl="list" line="271" name="fields" />
          <variable citdl="str.join()" line="272" name="cmd" />
        </scope>
        <scope doc="Abort a file transfer. Uses out-of-band data." ilk="function" line="230" lineend="240" name="abort" signature="abort()">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="str" line="235" name="line" />
          <variable citdl="getmultiline()" line="238" name="resp" />
        </scope>
        <scope doc="Connect to host." ilk="function" line="122" lineend="137" name="connect" returns="self.getresp()" signature="connect(host=&apos;&apos;, port=0, timeout=-999)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable citdl="int" ilk="argument" name="timeout" />
        </scope>
        <variable citdl="self.sock.makefile()" line="105" name="file" />
        <scope doc="Close the connection without assuming anything about it." ilk="function" line="572" lineend="577" name="close" signature="close()">
          <variable citdl="FTP" ilk="argument" name="self" />
        </scope>
        <scope doc="Send new account name." ilk="function" line="484" lineend="487" name="acct" returns="FTP.voidcmd()" signature="acct(password)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="password" />
          <variable citdl="str" line="486" name="cmd" />
        </scope>
        <variable citdl="int" line="103" name="port" />
        <scope attributes="__ctor__" ilk="function" line="114" lineend="120" name="__init__" signature="FTP(host=&apos;&apos;, user=&apos;&apos;, passwd=&apos;&apos;, acct=&apos;&apos;, timeout=_GLOBAL_DEFAULT_TIMEOUT)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="host" />
          <variable citdl="str" ilk="argument" name="user" />
          <variable citdl="str" ilk="argument" name="passwd" />
          <variable citdl="str" ilk="argument" name="acct" />
          <variable citdl="_GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
        </scope>
        <scope doc="Retrieve the size of a file." ilk="function" line="541" lineend="550" name="size" returns="int()" signature="size(filename)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="sendcmd()" line="544" name="resp" />
          <variable line="546" name="s" />
        </scope>
        <scope doc="Quit, and close the connection." ilk="function" line="566" lineend="570" name="quit" returns="voidcmd()" signature="quit()">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="voidcmd()" line="568" name="resp" />
        </scope>
        <scope doc="Get the welcome message from the server." ilk="function" line="139" lineend="144" name="getwelcome" returns="self.getresp()" signature="getwelcome()">
          <variable citdl="FTP" ilk="argument" name="self" />
        </scope>
        <scope doc="Make a directory, return its full pathname." ilk="function" line="552" lineend="555" name="mkd" returns="parse257()" signature="mkd(dirname)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="dirname" />
          <variable citdl="sendcmd()" line="554" name="resp" />
        </scope>
        <scope ilk="function" line="301" lineend="306" name="makepasv" returns="tuple" signature="makepasv()">
          <variable citdl="FTP" ilk="argument" name="self" />
        </scope>
        <scope doc="Like ntransfercmd() but returns only the socket." ilk="function" line="356" lineend="358" name="transfercmd" signature="transfercmd(cmd, rest=None)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="rest" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.sock.family" line="134" name="af" />
        <variable citdl="socket.create_connection()" line="104" name="sock" />
        <scope ilk="function" line="196" lineend="206" name="getmultiline" returns="str" signature="getmultiline()">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="getline()" line="197" name="line" />
          <variable citdl="list" line="199" name="code" />
          <variable citdl="getline()" line="201" name="nextline" />
        </scope>
        <scope doc="Create a new socket and send a PORT command for it." ilk="function" line="275" lineend="299" name="makeport" returns="socket.socket()" signature="makeport()">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="str" line="277" name="msg" />
          <variable citdl="socket.socket()" line="278" name="sock" />
          <variable line="293" name="port" />
          <variable line="294" name="host" />
          <variable citdl="sendport()" line="296" name="resp" />
        </scope>
        <scope doc="Return a list of files in a given directory (default the current)." ilk="function" line="489" lineend="496" name="nlst" returns="list" signature="nlst(*args)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="str" line="491" name="cmd" />
          <variable citdl="list" line="494" name="files" />
        </scope>
        <scope doc="List a directory in long form." ilk="function" line="498" lineend="511" name="dir" signature="dir(*args)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable attributes="varargs" citdl="list" ilk="argument" name="args" />
          <variable citdl="str" line="504" name="cmd" />
          <variable line="505" name="func" />
        </scope>
        <scope ilk="function" line="162" lineend="168" name="sanitize" returns="repr()" signature="sanitize(s)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="s" />
          <variable citdl="len()" line="164" name="i" />
        </scope>
        <scope doc="Store a file in binary mode. A new port is created for you." ilk="function" line="435" lineend="457" name="storbinary" returns="FTP.voidresp()" signature="storbinary(cmd, fp, blocksize=8192, callback=None)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="fp" />
          <variable citdl="int" ilk="argument" name="blocksize" />
          <variable ilk="argument" name="callback" />
          <variable citdl="transfercmd()" line="450" name="conn" />
          <variable citdl="fp.read()" line="452" name="buf" />
        </scope>
        <scope doc="Change to a directory." ilk="function" line="528" lineend="539" name="cwd" returns="FTP.voidcmd()" signature="cwd(dirname)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="dirname" />
          <variable citdl="str" line="538" name="cmd" />
        </scope>
        <scope doc="Send a command and expect a response beginning with &apos;2&apos;." ilk="function" line="247" lineend="250" name="voidcmd" returns="FTP.voidresp()" signature="voidcmd(cmd)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
        </scope>
        <scope doc="Send a PORT command with the current host and the given port number." ilk="function" line="252" lineend="260" name="sendport" returns="FTP.voidcmd()" signature="sendport(host, port)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="port" />
          <variable citdl="host.split()" line="256" name="hbytes" />
          <variable citdl="list" line="257" name="pbytes" />
          <variable citdl="list" line="258" name="bytes" />
          <variable citdl="str.join()" line="259" name="cmd" />
        </scope>
        <variable citdl="self.getresp()" line="106" name="welcome" />
        <variable citdl="str" line="102" name="host" />
        <scope ilk="function" line="177" lineend="179" name="putcmd" signature="putcmd(line)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <variable citdl="int" line="107" name="passiveserver" />
        <scope doc="Expect a response beginning with &apos;2&apos;." ilk="function" line="223" lineend="228" name="voidresp" returns="getresp()" signature="voidresp()">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="getresp()" line="225" name="resp" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="213" name="lastresp" />
        <scope doc="Retrieve data in line mode. A new port is created for you." ilk="function" line="405" lineend="433" name="retrlines" returns="FTP.voidresp()" signature="retrlines(cmd, callback=None)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable citdl="print_line" ilk="argument" name="callback" />
          <variable citdl="sendcmd()" line="418" name="resp" />
          <variable citdl="transfercmd()" line="419" name="conn" />
          <variable citdl="conn.makefile()" line="420" name="fp" />
          <variable citdl="list" line="422" name="line" />
        </scope>
        <scope doc="Initiate a transfer over the data connection." ilk="function" line="308" lineend="354" name="ntransfercmd" returns="tuple" signature="ntransfercmd(cmd, rest=None)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="rest" />
          <variable citdl="parse150()" line="323" name="size" />
          <variable citdl="socket.create_connection()" line="326" name="conn" />
          <variable citdl="sendcmd()" line="329" name="resp" />
          <variable citdl="makeport()" line="341" name="sock" />
        </scope>
        <scope doc="Return current working directory." ilk="function" line="561" lineend="564" name="pwd" returns="parse257()" signature="pwd()">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="sendcmd()" line="563" name="resp" />
        </scope>
        <scope doc="Store a file in line mode. A new port is created for you." ilk="function" line="459" lineend="482" name="storlines" returns="FTP.voidresp()" signature="storlines(cmd, fp, callback=None)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="fp" />
          <variable ilk="argument" name="callback" />
          <variable citdl="transfercmd()" line="472" name="conn" />
          <variable citdl="list" line="474" name="buf" />
        </scope>
        <scope ilk="function" line="183" lineend="190" name="getline" returns="list" signature="getline()">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="list" line="184" name="line" />
        </scope>
        <scope doc="Use passive or active mode for data transfers." ilk="function" line="155" lineend="159" name="set_pasv" signature="set_pasv(val)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="val" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="116" name="timeout" />
        <variable citdl="FTP.set_debuglevel" line="153" name="debug" />
        <scope doc="Login, default anonymous." ilk="function" line="360" lineend="379" name="login" returns="sendcmd()" signature="login(user=&apos;&apos;, passwd=&apos;&apos;, acct=&apos;&apos;)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="user" />
          <variable citdl="str" ilk="argument" name="passwd" />
          <variable citdl="str" ilk="argument" name="acct" />
          <variable citdl="sendcmd()" line="374" name="resp" />
        </scope>
        <scope doc="Retrieve data in binary mode. A new port is created for you." ilk="function" line="381" lineend="403" name="retrbinary" returns="FTP.voidresp()" signature="retrbinary(cmd, callback, blocksize=8192, rest=None)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable ilk="argument" name="callback" />
          <variable citdl="int" ilk="argument" name="blocksize" />
          <variable ilk="argument" name="rest" />
          <variable citdl="transfercmd()" line="396" name="conn" />
          <variable citdl="conn.recv()" line="398" name="data" />
        </scope>
        <scope ilk="function" line="210" lineend="221" name="getresp" returns="getmultiline()" signature="getresp()">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="getmultiline()" line="211" name="resp" />
          <variable citdl="list" line="214" name="c" />
        </scope>
        <scope ilk="function" line="171" lineend="174" name="putline" signature="putline(line)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="line" />
        </scope>
        <scope doc="Delete a file." ilk="function" line="520" lineend="526" name="delete" returns="sendcmd()" signature="delete(filename)">
          <variable citdl="FTP" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="sendcmd()" line="522" name="resp" />
        </scope>
      </scope>
      <variable citdl="int" line="56" name="FTP_PORT" />
      <variable citdl="int" line="52" name="MSG_OOB" />
      <scope classrefs="object" doc="Class to parse &amp; provide access to &apos;netrc&apos; format files.  See the netrc(4) man page for information on the file format." ilk="class" line="695" lineend="797" name="Netrc">
        <variable attributes="private __instancevar__" citdl="dict" line="715" name="__macros" />
        <variable attributes="private" line="703" name="__defuser" />
        <variable attributes="private" line="704" name="__defpasswd" />
        <scope doc="Return a sequence of lines which define a named macro." ilk="function" line="795" lineend="797" name="get_macro" signature="get_macro(macro)">
          <variable citdl="Netrc" ilk="argument" name="self" />
          <variable ilk="argument" name="macro" />
        </scope>
        <scope doc="Returns login information for the named host." ilk="function" line="775" lineend="789" name="get_account" returns="tuple" signature="get_account(host)">
          <variable citdl="Netrc" ilk="argument" name="self" />
          <variable citdl="host.lower()" ilk="argument" name="host" />
          <variable line="783" name="user" />
          <variable line="787" name="passwd" />
          <variable line="788" name="acct" />
        </scope>
        <variable attributes="private __instancevar__" citdl="dict" line="714" name="__hosts" />
        <scope doc="Return a list of all defined macro names." ilk="function" line="791" lineend="793" name="get_macros" returns="self.__macros.keys()" signature="get_macros()">
          <variable citdl="Netrc" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a list of hosts mentioned in the .netrc file." ilk="function" line="771" lineend="773" name="get_hosts" returns="self.__hosts.keys()" signature="get_hosts()">
          <variable citdl="Netrc" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="707" lineend="769" name="__init__" signature="Netrc(filename=None)">
          <variable citdl="Netrc" ilk="argument" name="self" />
          <variable citdl="os.path.join()" ilk="argument" name="filename" />
          <variable citdl="open()" line="716" name="fp" />
          <variable citdl="int" line="717" name="in_macro" />
          <variable citdl="fp.readline()" line="719" name="line" />
          <variable citdl="line.split()" line="727" name="words" />
          <variable citdl="w2.lower()" line="728" name="host" />
          <variable citdl="int" line="729" name="default" />
          <variable citdl="int" line="730" name="i" />
          <variable line="732" name="w1" />
          <variable line="734" name="w2" />
          <variable citdl="ouser" line="743" name="user" />
          <variable citdl="opasswd" line="746" name="passwd" />
          <variable citdl="oacct" line="749" name="acct" />
          <variable line="752" name="macro_name" />
          <variable citdl="list" line="753" name="macro_lines" />
        </scope>
        <variable attributes="private" line="705" name="__defacct" />
      </scope>
      <variable citdl="list" line="49" name="__all__" />
      <variable citdl="tuple" line="69" name="all_errors" />
      <scope classrefs="Error" ilk="class" line="63" lineend="63" name="error_perm" />
      <scope classrefs="Error" ilk="class" line="64" lineend="64" name="error_proto" />
      <scope classrefs="Error" ilk="class" line="61" lineend="61" name="error_reply" />
      <scope classrefs="Error" ilk="class" line="62" lineend="62" name="error_temp" />
      <scope doc="Copy file from one FTP-instance to another." ilk="function" line="676" lineend="692" name="ftpcp" signature="ftpcp(source, sourcename, target, targetname=&apos;&apos;, type=&apos;I&apos;)">
        <variable ilk="argument" name="target" />
        <variable ilk="argument" name="sourcename" />
        <variable citdl="str" ilk="argument" name="type" />
        <variable citdl="target.sendcmd()" line="687" name="treply" />
        <variable ilk="argument" name="source" />
        <variable citdl="source.sendcmd()" line="689" name="sreply" />
        <variable citdl="str" ilk="argument" name="targetname" />
      </scope>
      <import module="os" />
      <scope doc="Parse the &apos;150&apos; response for a RETR request." ilk="function" line="582" lineend="601" name="parse150" returns="int()" signature="parse150(resp)">
        <variable citdl="m.group()" line="597" name="s" />
        <variable citdl="_150_re.match()" line="594" name="m" />
        <variable ilk="argument" name="resp" />
        <variable attributes="protected" citdl="re.compile()" line="592" name="_150_re" />
      </scope>
      <scope doc="Parse the &apos;227&apos; response for a PASV request." ilk="function" line="606" lineend="623" name="parse227" returns="tuple" signature="parse227(resp)">
        <variable ilk="argument" name="resp" />
        <variable citdl="_227_re.search()" line="617" name="m" />
        <variable attributes="protected" citdl="re.compile()" line="616" name="_227_re" />
        <variable citdl="str.join()" line="621" name="host" />
        <variable citdl="m.groups()" line="620" name="numbers" />
        <variable citdl="int()" line="622" name="port" />
      </scope>
      <scope doc="Parse the &apos;229&apos; response for a EPSV request." ilk="function" line="626" lineend="645" name="parse229" returns="tuple" signature="parse229(resp, peer)">
        <variable citdl="resp.find()" line="635" name="right" />
        <variable ilk="argument" name="resp" />
        <variable line="643" name="host" />
        <variable line="640" name="parts" />
        <variable ilk="argument" name="peer" />
        <variable citdl="int()" line="644" name="port" />
        <variable citdl="resp.find()" line="633" name="left" />
      </scope>
      <scope doc="Parse the &apos;257&apos; response for a MKD or PWD request." ilk="function" line="648" lineend="668" name="parse257" returns="str" signature="parse257(resp)">
        <variable citdl="int" line="658" name="i" />
        <variable ilk="argument" name="resp" />
        <variable citdl="str" line="657" name="dirname" />
        <variable line="661" name="c" />
        <variable citdl="len()" line="659" name="n" />
      </scope>
      <scope doc="Default retrlines callback to print a line." ilk="function" line="671" lineend="673" name="print_line" signature="print_line(line)">
        <variable ilk="argument" name="line" />
      </scope>
      <import module="socket" />
      <import module="sys" />
      <scope doc="Test program." ilk="function" line="801" lineend="853" name="test" signature="test()">
        <variable citdl="int" line="814" name="debugging" />
        <variable citdl="FTP" line="824" name="ftp" />
        <variable citdl="ftp.sendcmd()" line="847" name="resp" />
        <variable citdl="str" line="845" name="cmd" />
        <variable citdl="str" line="826" name="userid" />
        <variable citdl="Netrc" line="828" name="netrc" />
        <variable line="823" name="host" />
        <variable citdl="list" line="815" name="rcfile" />
      </scope>
      <variable attributes="protected __hidden__" line="604" name="_227_re" />
      <variable attributes="protected __hidden__" line="580" name="_150_re" />
      <variable attributes="__hidden__" citdl="SOCKS" line="43" name="socket" />
    </scope>
    <scope ilk="blob" lang="Python3" name="build_class" />
    <scope doc="Read/write support for Maildir, mbox, MH, Babyl, and MMDF mailboxes." ilk="blob" lang="Python3" name="mailbox">
      <scope classrefs="_singlefileMailbox" doc="An Rmail-style Babyl mailbox." ilk="class" line="1143" lineend="1361" name="Babyl">
        <variable attributes="protected" citdl="frozenset()" line="1146" name="_special_labels" />
        <scope doc="Replace the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="1167" lineend="1171" name="__setitem__" signature="__setitem__(key, message)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="message" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._file.tell()" line="1259" name="_file_length" />
        <variable attributes="protected __instancevar__" citdl="dict()" line="1152" name="_labels" />
        <scope attributes="protected" doc="Called before writing each message to file f." ilk="function" line="1267" lineend="1269" name="_pre_message_hook" signature="_pre_message_hook(f)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
        </scope>
        <scope doc="Return a Message representation or raise a KeyError." ilk="function" line="1173" lineend="1196" name="get_message" returns="BabylMessage()" signature="get_message(key)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="io.StringIO()" line="1178" name="original_headers" />
          <variable citdl="self._file.readline()" line="1180" name="line" />
          <variable citdl="io.StringIO()" line="1184" name="visible_headers" />
          <variable line="1190" name="body" />
          <variable citdl="BabylMessage()" line="1192" name="msg" />
        </scope>
        <scope attributes="protected" doc="Write message contents and return (start, stop)." ilk="function" line="1275" lineend="1361" name="_install_message" returns="tuple" signature="_install_message(message)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="self._file.tell()" line="1277" name="start" />
          <variable citdl="list" line="1279" name="special_labels" />
          <variable citdl="list" line="1280" name="labels" />
          <variable citdl="io.StringIO()" line="1296" name="orig_buffer" />
          <variable citdl="email.generator.Generator()" line="1297" name="orig_generator" />
          <variable citdl="orig_buffer.readline()" line="1301" name="line" />
          <variable citdl="io.StringIO()" line="1307" name="vis_buffer" />
          <variable citdl="email.generator.Generator()" line="1308" name="vis_generator" />
          <variable citdl="orig_buffer.read()" line="1323" name="buffer" />
          <variable citdl="message.find()" line="1328" name="body_start" />
          <variable citdl="message.tell()" line="1341" name="original_pos" />
          <variable citdl="True" line="1342" name="first_pass" />
          <variable citdl="self._file.tell()" line="1360" name="stop" />
        </scope>
        <scope attributes="protected" doc="Called before writing the mailbox to file f." ilk="function" line="1261" lineend="1265" name="_pre_mailbox_hook" signature="_pre_mailbox_hook(f)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
        </scope>
        <scope doc="Remove the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="1161" lineend="1165" name="remove" signature="remove(key)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope attributes="protected" doc="Called after writing each message to file f." ilk="function" line="1271" lineend="1273" name="_post_message_hook" signature="_post_message_hook(f)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
        </scope>
        <scope doc="Add message and return assigned key." ilk="function" line="1154" lineend="1159" name="add" returns="_singlefileMailbox.add()" signature="add(message)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="_singlefileMailbox.add()" line="1156" name="key" />
        </scope>
        <scope attributes="protected" doc="Generate key-to-(start, stop) table of contents." ilk="function" line="1231" lineend="1259" name="_generate_toc" signature="_generate_toc()">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable citdl="list" line="1233" name="starts" />
          <variable citdl="list" line="1233" name="stops" />
          <variable citdl="int" line="1235" name="next_pos" />
          <variable citdl="list" line="1236" name="label_lists" />
          <variable citdl="int" line="1238" name="line_pos" />
          <variable citdl="self._file.readline()" line="1239" name="line" />
          <variable citdl="list" line="1245" name="labels" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="len()" line="1257" name="_next_key" />
        <scope doc="Return a string representation or raise a KeyError." ilk="function" line="1198" lineend="1215" name="get_string" returns="original_headers.getvalue()" signature="get_string(key)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="io.StringIO()" line="1203" name="original_headers" />
          <variable citdl="self._file.readline()" line="1205" name="line" />
        </scope>
        <scope doc="Return a list of user-defined labels in the mailbox." ilk="function" line="1222" lineend="1229" name="get_labels" returns="list()" signature="get_labels()">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable citdl="set()" line="1225" name="labels" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict()" line="1255" name="_toc" />
        <scope doc="Return a file-like representation or raise a KeyError." ilk="function" line="1217" lineend="1220" name="get_file" returns="io.StringIO()" signature="get_file(key)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize a Babyl mailbox." ilk="function" line="1149" lineend="1152" name="__init__" signature="Babyl(path, factory=None, create=True)">
          <variable citdl="Babyl" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="factory" />
          <variable citdl="True" ilk="argument" name="create" />
        </scope>
      </scope>
      <scope classrefs="Message" doc="Message with Babyl-specific properties." ilk="class" line="1688" lineend="1778" name="BabylMessage">
        <variable attributes="protected __instancevar__" citdl="list()" line="1693" name="_labels" />
        <scope doc="Set the Message representation of visible headers." ilk="function" line="1724" lineend="1726" name="set_visible" signature="set_visible(visible)">
          <variable citdl="BabylMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="visible" />
        </scope>
        <scope doc="Return a Message representation of visible headers." ilk="function" line="1720" lineend="1722" name="get_visible" returns="Message" signature="get_visible()">
          <variable citdl="BabylMessage" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Message" line="1694" name="_visible" />
        <scope doc="Set the list of labels on the message." ilk="function" line="1701" lineend="1703" name="set_labels" signature="set_labels(labels)">
          <variable citdl="BabylMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="labels" />
        </scope>
        <scope doc="Remove label from the list of labels on the message." ilk="function" line="1713" lineend="1718" name="remove_label" signature="remove_label(label)">
          <variable citdl="BabylMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="label" />
        </scope>
        <scope doc="Return a list of labels on the message." ilk="function" line="1697" lineend="1699" name="get_labels" returns="list" signature="get_labels()">
          <variable citdl="BabylMessage" ilk="argument" name="self" />
        </scope>
        <scope doc="Update and/or sensibly generate a set of visible headers." ilk="function" line="1728" lineend="1737" name="update_visible" signature="update_visible()">
          <variable citdl="BabylMessage" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Copy Babyl-specific state to message insofar as possible." ilk="function" line="1739" lineend="1778" name="_explain_to" signature="_explain_to(message)">
          <variable citdl="BabylMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="set()" line="1742" name="labels" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize an BabylMessage instance." ilk="function" line="1691" lineend="1695" name="__init__" signature="BabylMessage(message=None)">
          <variable citdl="BabylMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope doc="Add label to list of labels on the message." ilk="function" line="1705" lineend="1711" name="add_label" signature="add_label(label)">
          <variable citdl="BabylMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="label" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="Raised for module-specific errors." ilk="class" line="1959" name="Error" />
      <scope classrefs="Error" doc="Another process caused an action to fail." ilk="class" line="1968" name="ExternalClashError" />
      <scope classrefs="Error" doc="A file appears to have an invalid format." ilk="class" line="1971" name="FormatError" />
      <scope classrefs="Mailbox" doc="An MH mailbox." ilk="class" line="835" lineend="1140" name="MH">
        <scope doc="Return a list of folder names." ilk="function" line="1017" lineend="1023" name="list_folders" returns="list" signature="list_folders()">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable citdl="list" line="1019" name="result" />
        </scope>
        <scope doc="Lock the mailbox." ilk="function" line="993" lineend="998" name="lock" signature="lock()">
          <variable citdl="MH" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="open()" line="996" name="_file" />
        <scope doc="Unlock the mailbox if it is locked." ilk="function" line="1000" lineend="1006" name="unlock" signature="unlock()">
          <variable citdl="MH" ilk="argument" name="self" />
        </scope>
        <scope doc="Remove the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="873" lineend="893" name="remove" signature="remove(key)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="os.path.join()" line="875" name="path" />
          <variable citdl="open()" line="877" name="f" />
        </scope>
        <scope doc="Write any pending changes to the disk." ilk="function" line="1008" name="flush" signature="flush()">
          <variable citdl="MH" ilk="argument" name="self" />
        </scope>
        <scope doc="Flush and close the mailbox." ilk="function" line="1012" lineend="1015" name="close" signature="close()">
          <variable citdl="MH" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a name-to-key-list dictionary to define each sequence." ilk="function" line="1047" lineend="1072" name="get_sequences" returns="dict" signature="get_sequences()">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable citdl="dict" line="1049" name="results" />
          <variable citdl="open()" line="1050" name="f" />
          <variable citdl="set()" line="1052" name="all_keys" />
          <variable citdl="set()" line="1056" name="keys" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize an MH instance." ilk="function" line="838" lineend="848" name="__init__" signature="MH(path, factory=None, create=True)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="factory" />
          <variable citdl="True" ilk="argument" name="create" />
        </scope>
        <scope doc="Return True if the keyed message exists, False otherwise." ilk="function" line="985" lineend="987" name="__contains__" returns="os.path.exists()" signature="__contains__(key)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Create a folder and return an MH instance representing it." ilk="function" line="1030" lineend="1033" name="add_folder" returns="MH" signature="add_folder(folder)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="folder" />
        </scope>
        <scope doc="Delete the named folder, which must be empty." ilk="function" line="1035" lineend="1045" name="remove_folder" signature="remove_folder(folder)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="folder" />
          <variable citdl="os.path.join()" line="1037" name="path" />
          <variable citdl="os.listdir()" line="1038" name="entries" />
        </scope>
        <scope attributes="protected" doc="Inspect a new MHMessage and update sequences appropriately." ilk="function" line="1128" lineend="1140" name="_dump_sequences" signature="_dump_sequences(message, key)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable ilk="argument" name="key" />
          <variable citdl="message.get_sequences()" line="1130" name="pending_sequences" />
          <variable citdl="get_sequences()" line="1131" name="all_sequences" />
        </scope>
        <scope doc="Add message and return assigned key." ilk="function" line="850" lineend="871" name="add" returns="max()" signature="add(message)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="self.keys()" line="852" name="keys" />
          <variable citdl="int" line="854" name="new_key" />
          <variable citdl="os.path.join()" line="857" name="new_path" />
          <variable citdl="_create_carefully()" line="858" name="f" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="1119" name="_next_key" />
        <scope doc="Return a string representation or raise a KeyError." ilk="function" line="946" lineend="967" name="get_string" returns="f.read()" signature="get_string(key)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="open()" line="950" name="f" />
        </scope>
        <scope doc="Return an MH instance for the named folder." ilk="function" line="1025" lineend="1028" name="get_folder" returns="MH" signature="get_folder(folder)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="folder" />
        </scope>
        <scope doc="Return a count of messages in the mailbox." ilk="function" line="989" lineend="991" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="MH" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a Message representation or raise a KeyError." ilk="function" line="919" lineend="944" name="get_message" returns="MHMessage()" signature="get_message(key)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="open()" line="923" name="f" />
          <variable citdl="MHMessage()" line="935" name="msg" />
        </scope>
        <scope doc="Replace the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="895" lineend="917" name="__setitem__" signature="__setitem__(key, message)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="message" />
          <variable citdl="os.path.join()" line="897" name="path" />
          <variable citdl="open()" line="899" name="f" />
        </scope>
        <scope doc="Return an iterator over keys." ilk="function" line="980" lineend="983" name="iterkeys" returns="iter()" signature="iterkeys()">
          <variable citdl="MH" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="848" name="_locked" />
        <scope doc="Return a file-like representation or raise a KeyError." ilk="function" line="969" lineend="978" name="get_file" returns="_ProxyFile()" signature="get_file(key)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="open()" line="972" name="f" />
        </scope>
        <scope doc="Set sequences using the given name-to-key-list dictionary." ilk="function" line="1074" lineend="1101" name="set_sequences" signature="set_sequences(sequences)">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable ilk="argument" name="sequences" />
          <variable citdl="open()" line="1076" name="f" />
          <variable citdl="key" line="1083" name="prev" />
          <variable citdl="False" line="1084" name="completing" />
        </scope>
        <scope doc="Re-name messages to eliminate numbering gaps. Invalidates keys." ilk="function" line="1103" lineend="1126" name="pack" signature="pack()">
          <variable citdl="MH" ilk="argument" name="self" />
          <variable citdl="get_sequences()" line="1105" name="sequences" />
          <variable citdl="int" line="1106" name="prev" />
          <variable citdl="list" line="1107" name="changes" />
        </scope>
      </scope>
      <scope classrefs="Message" doc="Message with MH-specific properties." ilk="class" line="1618" lineend="1685" name="MHMessage">
        <scope doc="Add sequence to list of sequences including the message." ilk="function" line="1634" lineend="1640" name="add_sequence" signature="add_sequence(sequence)">
          <variable citdl="MHMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize an MHMessage instance." ilk="function" line="1621" lineend="1624" name="__init__" signature="MHMessage(message=None)">
          <variable citdl="MHMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope doc="Remove sequence from the list of sequences including the message." ilk="function" line="1642" lineend="1647" name="remove_sequence" signature="remove_sequence(sequence)">
          <variable citdl="MHMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="sequence" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list()" line="1623" name="_sequences" />
        <scope doc="Return a list of sequences that include the message." ilk="function" line="1626" lineend="1628" name="get_sequences" returns="list" signature="get_sequences()">
          <variable citdl="MHMessage" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Copy MH-specific state to message insofar as possible." ilk="function" line="1649" lineend="1685" name="_explain_to" signature="_explain_to(message)">
          <variable citdl="MHMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="set()" line="1652" name="sequences" />
        </scope>
        <scope doc="Set the list of sequences that include the message." ilk="function" line="1630" lineend="1632" name="set_sequences" signature="set_sequences(sequences)">
          <variable citdl="MHMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="sequences" />
        </scope>
      </scope>
      <scope classrefs="_mboxMMDF" doc="An MMDF mailbox." ilk="class" line="790" lineend="832" name="MMDF">
        <variable attributes="protected __instancevar__" citdl="MMDFMessage" line="795" name="_message_factory" />
        <scope attributes="protected" doc="Called before writing each message to file f." ilk="function" line="798" lineend="800" name="_pre_message_hook" signature="_pre_message_hook(f)">
          <variable citdl="MMDF" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._file.tell()" line="832" name="_file_length" />
        <scope attributes="protected" doc="Called after writing each message to file f." ilk="function" line="802" lineend="804" name="_post_message_hook" signature="_post_message_hook(f)">
          <variable citdl="MMDF" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
        </scope>
        <scope attributes="protected" doc="Generate key-to-(start, stop) table of contents." ilk="function" line="806" lineend="832" name="_generate_toc" signature="_generate_toc()">
          <variable citdl="MMDF" ilk="argument" name="self" />
          <variable citdl="list" line="808" name="starts" />
          <variable citdl="list" line="808" name="stops" />
          <variable citdl="self._file.tell()" line="810" name="next_pos" />
          <variable citdl="int" line="812" name="line_pos" />
          <variable citdl="self._file.readline()" line="813" name="line" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="len()" line="830" name="_next_key" />
        <variable attributes="protected __instancevar__" citdl="dict()" line="829" name="_toc" />
        <scope attributes="__ctor__" doc="Initialize an MMDF mailbox." ilk="function" line="793" lineend="796" name="__init__" signature="MMDF(path, factory=None, create=True)">
          <variable citdl="MMDF" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="factory" />
          <variable citdl="True" ilk="argument" name="create" />
        </scope>
      </scope>
      <scope classrefs="_mboxMMDFMessage" doc="Message with MMDF-specific properties." ilk="class" line="1781" name="MMDFMessage" />
      <scope classrefs="object" doc="A group of messages in a particular place." ilk="class" line="34" lineend="216" name="Mailbox">
        <scope doc="Lock the mailbox." ilk="function" line="177" lineend="179" name="lock" signature="lock()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Delete an arbitrary (key, message) pair and return it." ilk="function" line="149" lineend="154" name="popitem" returns="tuple" signature="popitem()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Delete the keyed message and return it, or default." ilk="function" line="140" lineend="147" name="pop" signature="pop(key, default=None)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
          <variable line="143" name="result" />
        </scope>
        <variable attributes="protected __instancevar__" line="40" name="_factory" />
        <scope doc="Unlock the mailbox if it is locked." ilk="function" line="181" lineend="183" name="unlock" signature="unlock()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Write any pending changes to the disk." ilk="function" line="173" lineend="175" name="flush" signature="flush()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Flush and close the mailbox." ilk="function" line="185" lineend="187" name="close" signature="close()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize a Mailbox instance." ilk="function" line="37" lineend="40" name="__init__" signature="Mailbox(path, factory=None, create=True)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="factory" />
          <variable citdl="True" ilk="argument" name="create" />
        </scope>
        <scope doc="Return True if the keyed message exists, False otherwise." ilk="function" line="127" lineend="129" name="__contains__" signature="__contains__(key)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope attributes="protected" doc="Dump message contents to target file." ilk="function" line="189" lineend="216" name="_dump_message" signature="_dump_message(message, target, mangle_from_=False)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable citdl="message.replace()" ilk="argument" name="message" />
          <variable ilk="argument" name="target" />
          <variable citdl="False" ilk="argument" name="mangle_from_" />
          <variable citdl="io.StringIO()" line="194" name="buffer" />
          <variable citdl="email.generator.Generator()" line="195" name="gen" />
          <variable citdl="buffer.read()" line="198" name="data" />
          <variable citdl="message.readline()" line="208" name="line" />
        </scope>
        <scope doc="Add message and return assigned key." ilk="function" line="42" lineend="44" name="add" signature="add(message)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope doc="Return an iterator over all messages." ilk="function" line="98" lineend="105" name="itervalues" signature="itervalues()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable line="102" name="value" />
        </scope>
        <scope doc="Return a count of messages in the mailbox." ilk="function" line="131" lineend="133" name="__len__" signature="__len__()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a string representation or raise a KeyError." ilk="function" line="82" lineend="84" name="get_string" signature="get_string(key)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="71" lineend="76" name="__getitem__" returns="self.get_message()" signature="__getitem__(key)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return the keyed message, or default if it doesn&apos;t exist." ilk="function" line="64" lineend="69" name="get" returns="self.__getitem__()" signature="get(key, default=None)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope doc="Return a list of keys." ilk="function" line="94" lineend="96" name="keys" returns="list()" signature="keys()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a Message representation or raise a KeyError." ilk="function" line="78" lineend="80" name="get_message" signature="get_message(key)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Change the messages that correspond to certain keys." ilk="function" line="156" lineend="171" name="update" signature="update(arg=None)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="arg.items()" line="159" name="source" />
          <variable citdl="False" line="164" name="bad_key" />
        </scope>
        <scope ilk="function" line="107" lineend="108" name="__iter__" returns="Mailbox.itervalues()" signature="__iter__()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Return an iterator over (key, message) tuples." ilk="function" line="114" lineend="121" name="iteritems" signature="iteritems()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable line="118" name="value" />
        </scope>
        <scope doc="Return an iterator over keys." ilk="function" line="90" lineend="92" name="iterkeys" signature="iterkeys()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="50" lineend="51" name="__delitem__" signature="__delitem__(key)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return a list of (key, message) tuples. Memory intensive." ilk="function" line="123" lineend="125" name="items" returns="list()" signature="items()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Delete all messages." ilk="function" line="135" lineend="138" name="clear" signature="clear()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Replace the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="60" lineend="62" name="__setitem__" signature="__setitem__(key, message)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope doc="Remove the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="46" lineend="48" name="remove" signature="remove(key)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return a list of messages. Memory intensive." ilk="function" line="110" lineend="112" name="values" returns="list()" signature="values()">
          <variable citdl="Mailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="If the keyed message exists, remove it." ilk="function" line="53" lineend="58" name="discard" signature="discard(key)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return a file-like representation or raise a KeyError." ilk="function" line="86" lineend="88" name="get_file" signature="get_file(key)">
          <variable citdl="Mailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="os.path.abspath()" line="39" name="_path" />
      </scope>
      <scope classrefs="Mailbox" doc="A qmail-style Maildir mailbox." ilk="class" line="219" lineend="525" name="Maildir">
        <scope doc="Return a list of folder names." ilk="function" line="388" lineend="395" name="list_folders" returns="list" signature="list_folders()">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable citdl="list" line="390" name="result" />
        </scope>
        <scope doc="Lock the mailbox." ilk="function" line="376" name="lock" signature="lock()">
          <variable citdl="Maildir" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="iter()" line="518" name="_onetime_keys" />
        <scope attributes="protected" doc="Create a file in the tmp subdirectory and open and return it." ilk="function" line="442" lineend="468" name="_create_tmp" returns="_create_carefully()" signature="_create_tmp()">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable citdl="time.time()" line="444" name="now" />
          <variable citdl="hostname.replace()" line="445" name="hostname" />
          <variable citdl="str" line="450" name="uniq" />
          <variable citdl="os.path.join()" line="452" name="path" />
        </scope>
        <scope doc="Unlock the mailbox if it is locked." ilk="function" line="380" name="unlock" signature="unlock()">
          <variable citdl="Maildir" ilk="argument" name="self" />
        </scope>
        <variable citdl="str" line="222" name="colon" />
        <scope doc="Write any pending changes to disk." ilk="function" line="370" lineend="374" name="flush" signature="flush()">
          <variable citdl="Maildir" ilk="argument" name="self" />
        </scope>
        <scope doc="Flush and close the mailbox." ilk="function" line="384" name="close" signature="close()">
          <variable citdl="Maildir" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="235" name="_toc" />
        <variable attributes="protected __instancevar__" citdl="time.time()" line="236" name="_last_read" />
        <scope attributes="__ctor__" doc="Initialize a Maildir instance." ilk="function" line="224" lineend="236" name="__init__" signature="Maildir(dirname, factory=None, create=True)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="dirname" />
          <variable ilk="argument" name="factory" />
          <variable citdl="True" ilk="argument" name="create" />
        </scope>
        <scope attributes="protected" doc="Use TOC to return subpath for given key, or raise a KeyError." ilk="function" line="501" lineend="512" name="_lookup" signature="_lookup(key)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return True if the keyed message exists, False otherwise." ilk="function" line="360" lineend="363" name="__contains__" returns="bool" signature="__contains__(key)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Create a folder and return a Maildir instance representing it." ilk="function" line="403" lineend="411" name="add_folder" signature="add_folder(folder)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="folder" />
          <variable citdl="os.path.join()" line="405" name="path" />
          <variable citdl="" line="406" name="result" />
          <variable citdl="os.path.join()" line="407" name="maildirfolder_path" />
        </scope>
        <scope doc="Add message and return assigned key." ilk="function" line="241" lineend="275" name="add" signature="add(message)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="self._create_tmp()" line="243" name="tmp_file" />
          <variable citdl="message.get_subdir()" line="249" name="subdir" />
          <variable citdl="str" line="250" name="suffix" />
          <variable line="256" name="uniq" />
          <variable citdl="os.path.join()" line="257" name="dest" />
        </scope>
        <scope doc="Return the next message in a one-time iteration." ilk="function" line="515" lineend="525" name="next" signature="next()">
          <variable citdl="Maildir" ilk="argument" name="self" />
        </scope>
        <scope doc="Delete the named folder, which must be empty." ilk="function" line="413" lineend="430" name="remove_folder" signature="remove_folder(folder)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="folder" />
          <variable citdl="os.path.join()" line="415" name="path" />
        </scope>
        <scope doc="Return a string representation or raise a KeyError." ilk="function" line="337" lineend="343" name="get_string" returns="f.read()" signature="get_string(key)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="open()" line="339" name="f" />
        </scope>
        <scope doc="Return a Maildir instance for the named folder." ilk="function" line="397" lineend="401" name="get_folder" returns="Maildir" signature="get_folder(folder)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="folder" />
        </scope>
        <scope doc="Return a count of messages in the mailbox." ilk="function" line="365" lineend="368" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="Maildir" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a Message representation or raise a KeyError." ilk="function" line="319" lineend="335" name="get_message" returns="MaildirMessage()" signature="get_message(key)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="self._lookup()" line="321" name="subpath" />
          <variable citdl="open()" line="322" name="f" />
          <variable citdl="self._factory()" line="325" name="msg" />
        </scope>
        <scope attributes="protected" doc="Update table of contents mapping." ilk="function" line="470" lineend="499" name="_refresh" signature="_refresh()">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable citdl="os.path.getmtime()" line="472" name="new_mtime" />
          <variable citdl="os.path.getmtime()" line="473" name="cur_mtime" />
          <scope ilk="function" line="480" lineend="487" name="update_dir" signature="update_dir(subdir)">
            <variable ilk="argument" name="subdir" />
            <variable citdl="os.path.join()" line="481" name="path" />
            <variable citdl="os.path.join()" line="483" name="p" />
            <variable line="486" name="uniq" />
          </scope>
          <variable citdl="int()" line="498" name="now" />
        </scope>
        <scope doc="Replace the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="294" lineend="317" name="__setitem__" signature="__setitem__(key, message)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="message" />
          <variable citdl="self._lookup()" line="296" name="old_subpath" />
          <variable citdl="add()" line="297" name="temp_key" />
          <variable citdl="self._lookup()" line="298" name="temp_subpath" />
          <variable citdl="self._lookup()" line="301" name="dominant_subpath" />
          <variable citdl="os.path.dirname()" line="305" name="subdir" />
          <variable citdl="str" line="307" name="suffix" />
          <variable citdl="os.path.join()" line="311" name="new_path" />
        </scope>
        <scope doc="Return an iterator over keys." ilk="function" line="350" lineend="358" name="iterkeys" signature="iterkeys()">
          <variable citdl="Maildir" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected" citdl="int" line="440" name="_count" />
        <scope doc="Remove the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="277" lineend="281" name="remove" signature="remove(key)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Delete old files in &quot;tmp&quot;." ilk="function" line="432" lineend="438" name="clean" signature="clean()">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable citdl="time.time()" line="434" name="now" />
          <variable citdl="os.path.join()" line="436" name="path" />
        </scope>
        <scope doc="If the keyed message exists, remove it." ilk="function" line="283" lineend="292" name="discard" signature="discard(key)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return a file-like representation or raise a KeyError." ilk="function" line="345" lineend="348" name="get_file" returns="_ProxyFile()" signature="get_file(key)">
          <variable citdl="Maildir" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="open()" line="347" name="f" />
        </scope>
      </scope>
      <scope classrefs="Message" doc="Message with Maildir-specific properties." ilk="class" line="1396" lineend="1500" name="MaildirMessage">
        <scope doc="Unset the given string flag(s) without changing others." ilk="function" line="1432" lineend="1435" name="remove_flag" signature="remove_flag(flag)">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="flag" />
        </scope>
        <scope doc="Return as a string the flags that are set." ilk="function" line="1417" lineend="1422" name="get_flags" returns="str" signature="get_flags()">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the given flag(s) without changing others." ilk="function" line="1428" lineend="1430" name="add_flag" signature="add_flag(flag)">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="flag" />
        </scope>
        <scope doc="Return delivery date of message, in seconds since the epoch." ilk="function" line="1437" lineend="1439" name="get_date" returns="time.time()" signature="get_date()">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
        </scope>
        <scope doc="Return &apos;new&apos; or &apos;cur&apos;." ilk="function" line="1406" lineend="1408" name="get_subdir" returns="str" signature="get_subdir()">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
        </scope>
        <scope doc="Set delivery date of message, in seconds since the epoch." ilk="function" line="1441" lineend="1446" name="set_date" signature="set_date(date)">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="date" />
        </scope>
        <scope doc="Get the message&apos;s &quot;info&quot; as a string." ilk="function" line="1448" lineend="1450" name="get_info" returns="str" signature="get_info()">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the given flags and unset all others." ilk="function" line="1424" lineend="1426" name="set_flags" signature="set_flags(flags)">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="flags" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize a MaildirMessage instance." ilk="function" line="1399" lineend="1404" name="__init__" signature="MaildirMessage(message=None)">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope doc="Set the message&apos;s &quot;info&quot; string." ilk="function" line="1452" lineend="1457" name="set_info" signature="set_info(info)">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="info" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="float()" line="1403" name="_date" />
        <variable attributes="protected __instancevar__" citdl="str" line="1402" name="_info" />
        <scope attributes="protected" doc="Copy Maildir-specific state to message insofar as possible." ilk="function" line="1459" lineend="1500" name="_explain_to" signature="_explain_to(message)">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="set()" line="1466" name="flags" />
        </scope>
        <scope doc="Set subdir to &apos;new&apos; or &apos;cur&apos;." ilk="function" line="1410" lineend="1415" name="set_subdir" signature="set_subdir(subdir)">
          <variable citdl="MaildirMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="subdir" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="1401" name="_subdir" />
      </scope>
      <scope classrefs="Message" doc="Message with mailbox-format-specific properties." ilk="class" line="1364" lineend="1393" name="Message">
        <scope attributes="protected" doc="Assume the non-format-specific state of message." ilk="function" line="1382" lineend="1386" name="_become_message" signature="_become_message(message)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize a Message instance." ilk="function" line="1367" lineend="1380" name="__init__" signature="Message(message=None)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope attributes="protected" doc="Copy format-specific state to message insofar as possible." ilk="function" line="1388" lineend="1393" name="_explain_to" signature="_explain_to(message)">
          <variable citdl="Message" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
      </scope>
      <scope classrefs="Error" doc="The specified mailbox does not exist and won&apos;t be created." ilk="class" line="1962" name="NoSuchMailboxError" />
      <scope classrefs="Error" doc="The specified mailbox is not empty and deletion was requested." ilk="class" line="1965" name="NotEmptyError" />
      <variable citdl="list" line="30" name="__all__" />
      <import module="calendar" />
      <import module="copy" />
      <import module="email" />
      <import module="errno" />
      <variable citdl="NoneType" line="28" name="fcntl" />
      <import module="io" />
      <scope classrefs="_mboxMMDF" doc="A classic mbox mailbox." ilk="class" line="756" lineend="787" name="mbox">
        <variable attributes="protected __instancevar__" citdl="mboxMessage" line="763" name="_message_factory" />
        <scope attributes="protected" doc="Called before writing each message to file f." ilk="function" line="766" lineend="769" name="_pre_message_hook" signature="_pre_message_hook(f)">
          <variable citdl="mbox" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._file.tell()" line="787" name="_file_length" />
        <variable attributes="protected" citdl="True" line="759" name="_mangle_from_" />
        <scope attributes="protected" doc="Generate key-to-(start, stop) table of contents." ilk="function" line="771" lineend="787" name="_generate_toc" signature="_generate_toc()">
          <variable citdl="mbox" ilk="argument" name="self" />
          <variable citdl="list" line="773" name="starts" />
          <variable citdl="list" line="773" name="stops" />
          <variable citdl="self._file.tell()" line="776" name="line_pos" />
          <variable citdl="self._file.readline()" line="777" name="line" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="len()" line="786" name="_next_key" />
        <variable attributes="protected __instancevar__" citdl="dict()" line="785" name="_toc" />
        <scope attributes="__ctor__" doc="Initialize an mbox mailbox." ilk="function" line="761" lineend="764" name="__init__" signature="mbox(path, factory=None, create=True)">
          <variable citdl="mbox" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="factory" />
          <variable citdl="True" ilk="argument" name="create" />
        </scope>
      </scope>
      <scope classrefs="_mboxMMDFMessage" doc="Message with mbox-specific properties." ilk="class" line="1614" name="mboxMessage" />
      <import module="os" />
      <import module="socket" />
      <import module="sys" />
      <import module="time" />
      <scope attributes="protected __hidden__" classrefs="Message" doc="Message with mbox- or MMDF-specific properties." ilk="class" line="1503" lineend="1611" name="_mboxMMDFMessage">
        <scope attributes="__ctor__" doc="Initialize an mboxMMDFMessage instance." ilk="function" line="1506" lineend="1513" name="__init__" signature="_mboxMMDFMessage(message=None)">
          <variable citdl="_mboxMMDFMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="message.get_unixfrom()" line="1510" name="unixfrom" />
        </scope>
        <scope doc="Return contents of &quot;From &quot; line." ilk="function" line="1515" lineend="1517" name="get_from" returns="self._from" signature="get_from()">
          <variable citdl="_mboxMMDFMessage" ilk="argument" name="self" />
        </scope>
        <scope doc="Set &quot;From &quot; line, formatting and appending time_ if specified." ilk="function" line="1519" lineend="1525" name="set_from" signature="set_from(from_, time_=None)">
          <variable citdl="_mboxMMDFMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="from_" />
          <variable citdl="time.gmtime()" ilk="argument" name="time_" />
        </scope>
        <variable attributes="protected __instancevar__" line="1525" name="_from" />
        <scope doc="Return as a string the flags that are set." ilk="function" line="1527" lineend="1529" name="get_flags" returns="self.get()" signature="get_flags()">
          <variable citdl="_mboxMMDFMessage" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the given flags and unset all others." ilk="function" line="1531" lineend="1551" name="set_flags" signature="set_flags(flags)">
          <variable citdl="_mboxMMDFMessage" ilk="argument" name="self" />
          <variable citdl="set()" ilk="argument" name="flags" />
          <variable citdl="str" line="1534" name="status_flags" />
          <variable citdl="str" line="1534" name="xstatus_flags" />
        </scope>
        <scope doc="Set the given flag(s) without changing others." ilk="function" line="1553" lineend="1555" name="add_flag" signature="add_flag(flag)">
          <variable citdl="_mboxMMDFMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="flag" />
        </scope>
        <scope doc="Unset the given string flag(s) without changing others." ilk="function" line="1557" lineend="1560" name="remove_flag" signature="remove_flag(flag)">
          <variable citdl="_mboxMMDFMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="flag" />
        </scope>
        <scope attributes="protected" doc="Copy mbox- or MMDF-specific state to message insofar as possible." ilk="function" line="1562" lineend="1611" name="_explain_to" signature="_explain_to(message)">
          <variable citdl="_mboxMMDFMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="set()" line="1565" name="flags" />
          <variable citdl="str.join()" line="1578" name="maybe_date" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="_ProxyFile" doc="A read-only wrapper of part of a file." ilk="class" line="1848" lineend="1878" name="_PartialFile">
        <scope attributes="__ctor__" doc="Initialize a _PartialFile." ilk="function" line="1851" lineend="1855" name="__init__" signature="_PartialFile(f, start=None, stop=None)">
          <variable citdl="_PartialFile" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
          <variable ilk="argument" name="start" />
          <variable ilk="argument" name="stop" />
        </scope>
        <variable attributes="protected __instancevar__" line="1854" name="_start" />
        <variable attributes="protected __instancevar__" line="1855" name="_stop" />
        <scope doc="Return the position with respect to start." ilk="function" line="1857" lineend="1859" name="tell" returns="_ProxyFile.tell()" signature="tell()">
          <variable citdl="_PartialFile" ilk="argument" name="self" />
        </scope>
        <scope doc="Change position, possibly with respect to start or stop." ilk="function" line="1861" lineend="1869" name="seek" signature="seek(offset, whence=0)">
          <variable citdl="_PartialFile" ilk="argument" name="self" />
          <variable ilk="argument" name="offset" />
          <variable citdl="int" ilk="argument" name="whence" />
        </scope>
        <variable attributes="protected __instancevar__" line="1864" name="_pos" />
        <scope attributes="protected" doc="Read size bytes using read_method, honoring start and stop." ilk="function" line="1871" lineend="1878" name="_read" returns="str" signature="_read(size, read_method)">
          <variable citdl="_PartialFile" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
          <variable ilk="argument" name="read_method" />
          <variable line="1873" name="remaining" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Create a file if it doesn&apos;t exist and open for reading and writing." ilk="function" line="1933" lineend="1939" name="_create_carefully" returns="open()" signature="_create_carefully(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="os.open()" line="1935" name="fd" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="Mailbox" doc="A single-file mailbox." ilk="class" line="528" lineend="696" name="_singlefileMailbox">
        <scope attributes="__ctor__" doc="Initialize a single-file mailbox." ilk="function" line="531" lineend="551" name="__init__" signature="_singlefileMailbox(path, factory=None, create=True)">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="factory" />
          <variable citdl="True" ilk="argument" name="create" />
          <variable citdl="open()" line="535" name="f" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="open()" line="546" name="_file" />
        <variable attributes="protected __instancevar__" citdl="dict" line="547" name="_toc" />
        <variable attributes="protected __instancevar__" citdl="int" line="548" name="_next_key" />
        <variable attributes="protected __instancevar__" citdl="True" line="549" name="_pending" />
        <variable attributes="protected __instancevar__" citdl="False" line="550" name="_locked" />
        <variable attributes="protected __instancevar__" citdl="self._file.tell()" line="551" name="_file_length" />
        <scope doc="Add message and return assigned key." ilk="function" line="553" lineend="559" name="add" returns="int" signature="add(message)">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope doc="Remove the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="561" lineend="565" name="remove" signature="remove(key)">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Replace the keyed message; raise KeyError if it doesn&apos;t exist." ilk="function" line="567" lineend="571" name="__setitem__" signature="__setitem__(key, message)">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope doc="Return an iterator over keys." ilk="function" line="573" lineend="577" name="iterkeys" signature="iterkeys()">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Return True if the keyed message exists, False otherwise." ilk="function" line="579" lineend="582" name="__contains__" returns="bool" signature="__contains__(key)">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Return a count of messages in the mailbox." ilk="function" line="584" lineend="587" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Lock the mailbox." ilk="function" line="589" lineend="593" name="lock" signature="lock()">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Unlock the mailbox if it is locked." ilk="function" line="595" lineend="599" name="unlock" signature="unlock()">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
        </scope>
        <scope doc="Write any pending changes to disk." ilk="function" line="601" lineend="657" name="flush" signature="flush()">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable citdl="self._file.tell()" line="614" name="cur_len" />
          <variable citdl="_create_temporary()" line="620" name="new_file" />
          <variable citdl="dict" line="622" name="new_toc" />
          <variable citdl="new_file.tell()" line="628" name="new_start" />
          <variable citdl="self._file.read()" line="630" name="buffer" />
        </scope>
        <scope attributes="protected" doc="Called before writing the mailbox to file f." ilk="function" line="659" name="_pre_mailbox_hook" signature="_pre_mailbox_hook(f)">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
        </scope>
        <scope attributes="protected" doc="Called before writing each message to file f." ilk="function" line="663" name="_pre_message_hook" signature="_pre_message_hook(f)">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
        </scope>
        <scope attributes="protected" doc="Called after writing each message to file f." ilk="function" line="667" name="_post_message_hook" signature="_post_message_hook(f)">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
        </scope>
        <scope doc="Flush and close the mailbox." ilk="function" line="671" lineend="676" name="close" signature="close()">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="678" lineend="686" name="_lookup" signature="Return (start, stop) or raise KeyError.">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope attributes="protected" doc="Append message to mailbox and return (start, stop) offsets." ilk="function" line="688" lineend="696" name="_append_message" returns="self._install_message()" signature="_append_message(message)">
          <variable citdl="_singlefileMailbox" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="self._install_message()" line="692" name="offsets" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="_singlefileMailbox" doc="An mbox or MMDF mailbox." ilk="class" line="700" lineend="753" name="_mboxMMDF">
        <variable attributes="protected" citdl="True" line="703" name="_mangle_from_" />
        <scope doc="Return a Message representation or raise a KeyError." ilk="function" line="705" lineend="713" name="get_message" returns="self._message_factory()" signature="get_message(key)">
          <variable citdl="_mboxMMDF" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable line="709" name="from_line" />
          <variable citdl="self._file.read()" line="710" name="string" />
          <variable citdl="self._message_factory()" line="711" name="msg" />
        </scope>
        <scope doc="Return a string representation or raise a KeyError." ilk="function" line="715" lineend="722" name="get_string" returns="string.replace()" signature="get_string(key, from_=False)">
          <variable citdl="_mboxMMDF" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="False" ilk="argument" name="from_" />
          <variable citdl="self._file.read()" line="721" name="string" />
        </scope>
        <scope doc="Return a file-like representation or raise a KeyError." ilk="function" line="724" lineend="730" name="get_file" returns="_PartialFile()" signature="get_file(key, from_=False)">
          <variable citdl="_mboxMMDF" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="False" ilk="argument" name="from_" />
        </scope>
        <scope attributes="protected" doc="Format a message and blindly write to self._file." ilk="function" line="732" lineend="753" name="_install_message" returns="tuple" signature="_install_message(message)">
          <variable citdl="_mboxMMDF" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="message" />
          <variable citdl="list" line="734" name="from_line" />
          <variable citdl="message.find()" line="736" name="newline" />
          <variable citdl="self._file.tell()" line="749" name="start" />
          <variable citdl="self._file.tell()" line="752" name="stop" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Create a temp file based on path and open for reading and writing." ilk="function" line="1941" lineend="1945" name="_create_temporary" returns="_create_carefully()" signature="_create_temporary(path)">
        <variable ilk="argument" name="path" />
      </scope>
      <scope attributes="protected __hidden__" doc="Lock file f using lockf and dot locking." ilk="function" line="1881" lineend="1924" name="_lock_file" signature="_lock_file(f, dotlock=True)">
        <variable ilk="argument" name="f" />
        <variable citdl="True" ilk="argument" name="dotlock" />
        <variable citdl="True" line="1883" name="dotlock_done" />
        <variable citdl="_create_temporary()" line="1896" name="pre_lock" />
      </scope>
      <scope attributes="protected __hidden__" doc="Ensure changes to file f are physically on disk." ilk="function" line="1947" lineend="1951" name="_sync_flush" signature="_sync_flush(f)">
        <variable ilk="argument" name="f" />
      </scope>
      <scope attributes="protected __hidden__" doc="Close file f, ensuring all changes are physically on disk." ilk="function" line="1953" lineend="1956" name="_sync_close" signature="_sync_close(f)">
        <variable ilk="argument" name="f" />
      </scope>
      <scope attributes="protected __hidden__" doc="A read-only wrapper of a file." ilk="class" line="1785" lineend="1845" name="_ProxyFile">
        <scope attributes="__ctor__" doc="Initialize a _ProxyFile." ilk="function" line="1788" lineend="1794" name="__init__" signature="_ProxyFile(f, pos=None)">
          <variable citdl="_ProxyFile" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
          <variable ilk="argument" name="pos" />
        </scope>
        <variable attributes="protected __instancevar__" line="1790" name="_file" />
        <variable attributes="protected __instancevar__" citdl="self._file.tell()" line="1792" name="_pos" />
        <scope doc="Read bytes." ilk="function" line="1796" lineend="1798" name="read" returns="self._read()" signature="read(size=None)">
          <variable citdl="_ProxyFile" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
        </scope>
        <scope doc="Read a line." ilk="function" line="1800" lineend="1802" name="readline" returns="self._read()" signature="readline(size=None)">
          <variable citdl="_ProxyFile" ilk="argument" name="self" />
          <variable ilk="argument" name="size" />
        </scope>
        <scope doc="Read multiple lines." ilk="function" line="1804" lineend="1813" name="readlines" returns="list" signature="readlines(sizehint=None)">
          <variable citdl="_ProxyFile" ilk="argument" name="self" />
          <variable ilk="argument" name="sizehint" />
          <variable citdl="list" line="1806" name="result" />
        </scope>
        <scope doc="Iterate over lines." ilk="function" line="1815" lineend="1821" name="__iter__" signature="__iter__()">
          <variable citdl="_ProxyFile" ilk="argument" name="self" />
          <variable citdl="readline()" line="1818" name="line" />
        </scope>
        <scope doc="Return the position." ilk="function" line="1823" lineend="1825" name="tell" returns="f.tell()" signature="tell()">
          <variable citdl="_ProxyFile" ilk="argument" name="self" />
        </scope>
        <scope doc="Change position." ilk="function" line="1827" lineend="1832" name="seek" signature="seek(offset, whence=0)">
          <variable citdl="_ProxyFile" ilk="argument" name="self" />
          <variable ilk="argument" name="offset" />
          <variable citdl="int" ilk="argument" name="whence" />
        </scope>
        <scope doc="Close the file." ilk="function" line="1834" lineend="1836" name="close" signature="close()">
          <variable citdl="_ProxyFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Read size bytes using read_method." ilk="function" line="1838" lineend="1845" name="_read" returns="read_method()" signature="_read(size, read_method)">
          <variable citdl="_ProxyFile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="size" />
          <variable ilk="argument" name="read_method" />
          <variable citdl="read_method()" line="1843" name="result" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" doc="Unlock file f using lockf and dot locking." ilk="function" line="1926" lineend="1931" name="_unlock_file" signature="_unlock_file(f)">
        <variable ilk="argument" name="f" />
      </scope>
    </scope>
    <scope doc="create and manipulate C data types in Python" ilk="blob" lang="Python3" name="ctypes">
      <scope doc="# XXX Deprecated" ilk="function" line="311" lineend="312" name="ARRAY" signature="ARRAY(typ, len)">
        <variable ilk="argument" name="typ" />
        <variable ilk="argument" name="len" />
      </scope>
      <scope classrefs="Exception" ilk="class" name="ArgumentError" />
      <scope classrefs="_CData" doc="XXX to be provided" ilk="class" name="Array" />
      <scope classrefs="Structure" doc="Structure with big endian byte order" ilk="class" name="BigEndianStructure" />
      <scope classrefs="object" doc="An instance of this class represents a loaded dll/shared library, exporting functions using the standard C calling convention (named &apos;cdecl&apos; on Windows)." ilk="class" line="317" lineend="371" name="CDLL">
        <variable attributes="protected __instancevar__" citdl="CDLL.__init__._FuncPtr" line="347" name="_FuncPtr" />
        <scope ilk="function" line="354" lineend="358" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="CDLL" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="367" lineend="371" name="__getitem__" returns="_FuncPtr()" signature="__getitem__(name_or_ordinal)">
          <variable citdl="CDLL" ilk="argument" name="self" />
          <variable ilk="argument" name="name_or_ordinal" />
          <variable citdl="_FuncPtr()" line="368" name="func" />
        </scope>
        <scope ilk="function" line="360" lineend="365" name="__getattr__" returns="self.__getitem__()" signature="__getattr__(name)">
          <variable citdl="CDLL" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="self.__getitem__()" line="363" name="func" />
        </scope>
        <variable attributes="protected __instancevar__" line="337" name="_name" />
        <variable attributes="protected" citdl="_FUNCFLAG_CDECL" line="331" name="_func_flags_" />
        <variable attributes="protected __instancevar__" citdl="_dlopen()" line="350" name="_handle" />
        <scope attributes="__ctor__" ilk="function" line="334" lineend="352" name="__init__" signature="CDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)">
          <variable citdl="CDLL" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="RTLD_GLOBAL" ilk="argument" name="mode" />
          <variable ilk="argument" name="handle" />
          <variable citdl="False" ilk="argument" name="use_errno" />
          <variable citdl="False" ilk="argument" name="use_last_error" />
          <variable citdl="_FUNCFLAG_CDECL" line="338" name="flags" />
          <scope attributes="protected" classrefs="_CFuncPtr" ilk="class" line="344" lineend="346" name="_FuncPtr">
            <variable attributes="protected" citdl="_FUNCFLAG_CDECL" line="345" name="_flags_" />
            <variable attributes="protected" citdl="c_int" line="346" name="_restype_" />
          </scope>
        </scope>
        <variable attributes="protected" citdl="c_int" line="332" name="_func_restype_" />
      </scope>
      <scope doc="CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False) -&gt; function prototype." ilk="function" line="75" lineend="106" name="CFUNCTYPE" returns="CFUNCTYPE.CFunctionType" signature="CFUNCTYPE(restype, *argtypes, **kw)">
        <variable citdl="_FUNCFLAG_CDECL" line="91" name="flags" />
        <scope classrefs="_CFuncPtr" ilk="class" line="101" lineend="104" name="CFunctionType">
          <variable attributes="protected" line="102" name="_argtypes_" />
          <variable attributes="protected" line="103" name="_restype_" />
          <variable attributes="protected" citdl="_FUNCFLAG_CDECL" line="104" name="_flags_" />
        </scope>
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable ilk="argument" name="restype" />
        <variable attributes="varargs" ilk="argument" name="argtypes" />
      </scope>
      <variable citdl="int" line="22" name="DEFAULT_MODE" />
      <scope ilk="function" line="517" lineend="522" name="DllCanUnloadNow" returns="ccom.DllCanUnloadNow()" signature="DllCanUnloadNow()">
        <variable citdl="__import__()" line="519" name="ccom" />
      </scope>
      <scope ilk="function" line="509" lineend="515" name="DllGetClassObject" returns="ccom.DllGetClassObject()" signature="DllGetClassObject(rclsid, riid, ppv)">
        <variable citdl="__import__()" line="511" name="ccom" />
        <variable ilk="argument" name="riid" />
        <variable ilk="argument" name="ppv" />
        <variable ilk="argument" name="rclsid" />
      </scope>
      <scope doc="Convert a win32 error code into a string." ilk="function" name="FormatError" returns="str" signature="FormatError([integer]) -&gt; string" />
      <variable citdl="_FuncPtr" line="446" name="GetLastError" />
      <scope classrefs="_SimpleCData" ilk="class" line="391" lineend="402" name="HRESULT">
        <variable attributes="protected" citdl="str" line="392" name="_type_" />
        <variable attributes="protected" citdl="_check_HRESULT" line="402" name="_check_retval_" />
      </scope>
      <scope classrefs="object" ilk="class" line="413" lineend="428" name="LibraryLoader">
        <variable attributes="protected __instancevar__" line="415" name="_dlltype" />
        <scope ilk="function" line="427" lineend="428" name="LoadLibrary" returns="LibraryLoader._dlltype()" signature="LoadLibrary(name)">
          <variable citdl="LibraryLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="424" lineend="425" name="__getitem__" returns="getattr()" signature="__getitem__(name)">
          <variable citdl="LibraryLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="414" lineend="415" name="__init__" signature="LibraryLoader(dlltype)">
          <variable citdl="LibraryLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="dlltype" />
        </scope>
        <scope ilk="function" line="417" lineend="422" name="__getattr__" returns="_dlltype()" signature="__getattr__(name)">
          <variable citdl="LibraryLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="_dlltype()" line="420" name="dll" />
        </scope>
      </scope>
      <scope classrefs="_CData" doc="Structure base class" ilk="class" name="LittleEndianStructure" />
      <scope classrefs="CDLL" doc="This class represents a dll exporting functions using the Windows stdcall calling convention, and returning HRESULT. HRESULT error values are automatically raised as WindowsError" ilk="class" line="404" lineend="411" name="OleDLL">
        <variable attributes="protected" citdl="_FUNCFLAG_CDECL" line="410" name="_func_flags_" />
        <variable attributes="protected" citdl="HRESULT" line="411" name="_func_restype_" />
      </scope>
      <scope ilk="function" name="POINTER" />
      <scope ilk="function" line="477" lineend="482" name="PYFUNCTYPE" returns="PYFUNCTYPE.CFunctionType" signature="PYFUNCTYPE(restype, *argtypes)">
        <scope classrefs="_CFuncPtr" ilk="class" line="478" lineend="481" name="CFunctionType">
          <variable attributes="protected" line="479" name="_argtypes_" />
          <variable attributes="protected" line="480" name="_restype_" />
          <variable attributes="protected" citdl="int" line="481" name="_flags_" />
        </scope>
        <variable ilk="argument" name="restype" />
        <variable attributes="varargs" ilk="argument" name="argtypes" />
      </scope>
      <scope classrefs="CDLL" doc="This class represents the Python library itself.  It allows to access Python API functions.  The GIL is not released, and Python exceptions are handled correctly." ilk="class" line="373" lineend="378" name="PyDLL">
        <variable attributes="protected" citdl="int" line="378" name="_func_flags_" />
      </scope>
      <variable citdl="int" name="RTLD_GLOBAL" />
      <variable citdl="int" name="RTLD_LOCAL" />
      <scope doc="# XXX Deprecated" ilk="function" line="301" lineend="308" name="SetPointerType" signature="SetPointerType(pointer, cls)">
        <variable ilk="argument" name="pointer" />
        <variable ilk="argument" name="cls" />
      </scope>
      <scope classrefs="_CData" doc="Structure base class" ilk="class" name="Structure" />
      <scope classrefs="_CData" doc="Union base class" ilk="class" name="Union" />
      <scope ilk="function" line="116" lineend="133" name="WINFUNCTYPE" returns="WINFUNCTYPE.WinFunctionType" signature="WINFUNCTYPE(restype, *argtypes, **kw)">
        <scope classrefs="_CFuncPtr" ilk="class" line="128" lineend="131" name="WinFunctionType">
          <variable attributes="protected" line="129" name="_argtypes_" />
          <variable attributes="protected" line="130" name="_restype_" />
          <variable attributes="protected" citdl="_FUNCFLAG_CDECL" line="131" name="_flags_" />
        </scope>
        <variable ilk="argument" name="restype" />
        <variable attributes="varargs" ilk="argument" name="argtypes" />
        <variable citdl="_FUNCFLAG_CDECL" line="118" name="flags" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable citdl="CFUNCTYPE.__doc__.replace()" line="135" name="__doc__" />
      </scope>
      <scope classrefs="CDLL" doc="This class represents a dll exporting functions using the Windows stdcall calling convention." ilk="class" line="382" lineend="386" name="WinDLL">
        <variable attributes="protected" citdl="_FUNCFLAG_CDECL" line="386" name="_func_flags_" />
      </scope>
      <scope ilk="function" line="451" lineend="456" name="WinError" returns="WindowsError()" signature="WinError(code=None, descr=None)">
        <variable citdl="GetLastError()" ilk="argument" name="code" />
        <variable ilk="argument" name="descr" />
      </scope>
      <variable citdl="str" line="5" name="__version__" />
      <import module="_endian" />
      <import module="_os" />
      <import module="_sys" />
      <scope doc="Return the address of the C instance internal buffer" ilk="function" name="addressof" returns="int" signature="addressof(C instance) -&gt; integer" />
      <scope doc="Return the alignment requirements of a C instance" ilk="function" name="alignment" returns="int" signature="alignment(C type) -&gt; integer alignment(C instance) -&gt; integer" />
      <scope doc="Return a pointer lookalike to a C instance, only usable as function argument" ilk="function" name="byref" signature="byref(C instance[, offset=0]) -&gt; byref-object" />
      <scope classrefs="_SimpleCData" ilk="class" line="257" lineend="258" name="c_bool">
        <variable attributes="protected" citdl="str" line="258" name="_type_" />
      </scope>
      <scope ilk="function" line="67" lineend="72" name="c_buffer" returns="create_string_buffer()" signature="c_buffer(init, size=None)">
        <variable ilk="argument" name="init" />
        <variable ilk="argument" name="size" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="230" lineend="231" name="c_byte">
        <variable attributes="protected" citdl="str" line="231" name="_type_" />
        <variable attributes="__instancevar__" citdl="c_byte" line="232" name="__ctype_le__" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="235" lineend="236" name="c_char">
        <variable attributes="protected" citdl="str" line="236" name="_type_" />
        <variable attributes="__instancevar__" citdl="c_char" line="237" name="__ctype_le__" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="240" lineend="249" name="c_char_p">
        <variable attributes="protected" citdl="str" line="241" name="_type_" />
        <scope ilk="function" line="248" lineend="249" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="c_char_p" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="198" lineend="199" name="c_double">
        <variable attributes="protected" citdl="str" line="199" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="194" lineend="195" name="c_float">
        <variable attributes="protected" citdl="str" line="195" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="186" lineend="187" name="c_int">
        <variable attributes="protected" citdl="str" line="187" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="530" name="c_int16" />
      <scope classrefs="_SimpleCData" ilk="class" line="531" name="c_int32" />
      <scope classrefs="_SimpleCData" ilk="class" line="532" name="c_int64" />
      <scope classrefs="_SimpleCData" ilk="class" line="527" name="c_int8" />
      <scope classrefs="_SimpleCData" ilk="class" line="173" lineend="174" name="c_long">
        <variable attributes="protected" citdl="str" line="174" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="202" name="c_longdouble" />
      <scope classrefs="_SimpleCData" ilk="class" line="212" lineend="213" name="c_longlong">
        <variable attributes="protected" citdl="str" line="213" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="165" lineend="166" name="c_short">
        <variable attributes="protected" citdl="str" line="166" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="461" name="c_size_t" />
      <scope classrefs="_SimpleCData" ilk="class" line="223" lineend="224" name="c_ubyte">
        <variable attributes="protected" citdl="str" line="224" name="_type_" />
        <variable attributes="__instancevar__" citdl="c_ubyte" line="225" name="__ctype_le__" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="190" lineend="191" name="c_uint">
        <variable attributes="protected" citdl="str" line="191" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="534" name="c_uint16" />
      <scope classrefs="_SimpleCData" ilk="class" line="535" name="c_uint32" />
      <scope classrefs="_SimpleCData" ilk="class" line="536" name="c_uint64" />
      <scope classrefs="_SimpleCData" ilk="class" line="528" name="c_uint8" />
      <scope classrefs="_SimpleCData" ilk="class" line="177" lineend="178" name="c_ulong">
        <variable attributes="protected" citdl="str" line="178" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="216" lineend="217" name="c_ulonglong">
        <variable attributes="protected" citdl="str" line="217" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="169" lineend="170" name="c_ushort">
        <variable attributes="protected" citdl="str" line="170" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="252" lineend="253" name="c_void_p">
        <variable attributes="protected" citdl="str" line="253" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="254" name="c_voidp" />
      <scope classrefs="_SimpleCData" ilk="class" line="275" lineend="276" name="c_wchar">
        <variable attributes="protected" citdl="str" line="276" name="_type_" />
      </scope>
      <scope classrefs="_SimpleCData" ilk="class" line="272" lineend="273" name="c_wchar_p">
        <variable attributes="protected" citdl="str" line="273" name="_type_" />
      </scope>
      <scope ilk="function" line="485" lineend="486" name="cast" returns="_cast()" signature="cast(obj, typ)">
        <variable ilk="argument" name="typ" />
        <variable ilk="argument" name="obj" />
      </scope>
      <variable citdl="LibraryLoader" line="430" name="cdll" />
      <scope doc="create_string_buffer(aBytes) -&gt; character array create_string_buffer(anInteger) -&gt; character array create_string_buffer(aString, anInteger) -&gt; character array" ilk="function" line="49" lineend="65" name="create_string_buffer" returns="buftype()" signature="create_string_buffer(aBytes) -&gt; character array create_string_buffer(anInteger) -&gt; character array create_string_buffer(aString, anInteger) -&gt; character array">
        <variable citdl="c_char" line="57" name="buftype" />
        <variable ilk="argument" name="init" />
        <variable citdl="buftype()" line="58" name="buf" />
        <variable citdl="len()" ilk="argument" name="size" />
      </scope>
      <scope doc="create_unicode_buffer(aString) -&gt; character array create_unicode_buffer(anInteger) -&gt; character array create_unicode_buffer(aString, anInteger) -&gt; character array" ilk="function" line="280" lineend="296" name="create_unicode_buffer" returns="buftype()" signature="create_unicode_buffer(aString) -&gt; character array create_unicode_buffer(anInteger) -&gt; character array create_unicode_buffer(aString, anInteger) -&gt; character array">
        <variable citdl="c_wchar" line="288" name="buftype" />
        <variable ilk="argument" name="init" />
        <variable citdl="buftype()" line="289" name="buf" />
        <variable citdl="len()" ilk="argument" name="size" />
      </scope>
      <scope ilk="function" name="get_errno" />
      <scope ilk="function" name="get_last_error" />
      <import module="macholib" />
      <variable citdl="CFunctionType" line="472" name="memmove" />
      <variable citdl="CFunctionType" line="475" name="memset" />
      <variable citdl="LibraryLoader" line="443" name="oledll" />
      <scope ilk="function" name="pointer" />
      <scope classrefs="_SimpleCData" ilk="class" line="156" lineend="162" name="py_object">
        <variable attributes="protected" citdl="str" line="157" name="_type_" />
        <scope ilk="function" line="158" lineend="162" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="py_object" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="LibraryLoader" line="431" name="pydll" />
      <variable citdl="PyDLL" line="434" name="pythonapi" />
      <scope doc="Resize the memory buffer of a ctypes instance" ilk="function" name="resize" />
      <scope doc="Set the encoding and error handling ctypes uses when converting between unicode and strings." ilk="function" name="set_conversion_mode" signature="set_conversion_mode(encoding, errors) -&gt; (previous-encoding, previous-errors)" />
      <scope ilk="function" name="set_errno" />
      <scope ilk="function" name="set_last_error" />
      <scope doc="Return the size in bytes of a C instance" ilk="function" name="sizeof" returns="int" signature="sizeof(C type) -&gt; integer sizeof(C instance) -&gt; integer" />
      <scope doc="Return the string at addr." ilk="function" line="489" lineend="493" name="string_at" returns="_string_at()" signature="string_at(addr[, size]) -&gt; string">
        <variable ilk="argument" name="ptr" />
        <variable citdl="int" ilk="argument" name="size" />
      </scope>
      <import module="util" />
      <variable citdl="LibraryLoader" line="442" name="windll" />
      <import module="wintypes" />
      <scope doc="Return the string at addr." ilk="function" line="501" lineend="505" name="wstring_at" returns="_wstring_at()" signature="wstring_at(addr[, size]) -&gt; string">
        <variable ilk="argument" name="ptr" />
        <variable citdl="int" ilk="argument" name="size" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="144" lineend="154" name="_check_size" signature="_check_size(typ, typecode=None)">
        <import line="147" module="struct" symbol="calcsize" />
        <variable ilk="argument" name="typ" />
        <variable citdl="typ._type_" ilk="argument" name="typecode" />
        <variable citdl="calcsize()" line="151" name="required" />
        <variable citdl="sizeof()" line="151" name="actual" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="74" name="_c_functype_cache" />
      <variable attributes="protected __hidden__" citdl="PYFUNCTYPE()()" line="500" name="_wstring_at" />
      <variable attributes="protected __hidden__" citdl="dict" line="115" name="_win_functype_cache" />
      <variable attributes="protected __hidden__" citdl="PYFUNCTYPE()()" line="484" name="_cast" />
      <variable attributes="protected __hidden__" citdl="_FUNCFLAG_CDECL" line="113" name="_FUNCFLAG_STDCALL" />
      <variable attributes="protected __hidden__" citdl="PYFUNCTYPE()()" line="488" name="_string_at" />
    </scope>
    <scope doc="Here&apos;s a sample session to show how to use this module. At the moment, this is the only documentation. " ilk="blob" lang="Python3" name="http.cookies">
      <scope classrefs="dict" doc="# At long last, here is the cookie class. #   Using this class is almost just like using a dictionary. # See this module&apos;s docstring for example usage." ilk="class" name="BaseCookie" />
      <scope classrefs="Exception" doc="# Define an exception visible to External modules" ilk="class" name="CookieError" />
      <scope classrefs="dict" ilk="class" name="Morsel" />
      <scope classrefs="BaseCookie" doc="SimpleCookie SimpleCookie supports strings as cookie values.  When setting the value using the dictionary assignment notation, SimpleCookie" ilk="class" name="SimpleCookie" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="dumps" signature="dumps(obj, protocol=None, *, fix_imports=True)" />
      <scope ilk="function" name="loads" signature="loads(s, *, fix_imports=True, encoding=&apos;ASCII&apos;, errors=&apos;strict&apos;)" />
      <import module="re" />
      <import module="string" />
      <import module="warnings" />
    </scope>
    <scope doc="Drag-and-drop support for Tkinter.  This is very preliminary.  I currently only support dnd *within* one" ilk="blob" lang="Python3" name="tkinter.dnd">
      <scope classrefs="object" ilk="class" line="118" lineend="201" name="DndHandler">
        <variable attributes="__instancevar__" citdl="str" line="136" name="release_pattern" />
        <variable attributes="__instancevar__" citdl="attr()" line="133" name="target" />
        <scope ilk="function" line="151" lineend="176" name="on_motion" signature="on_motion(event)">
          <variable citdl="DndHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
          <variable citdl="event.y_root" line="152" name="y" />
          <variable citdl="event.x_root" line="152" name="x" />
          <variable citdl="target_widget.master" line="153" name="target_widget" />
          <variable line="154" name="source" />
          <variable citdl="attr()" line="155" name="new_target" />
          <variable citdl="target_widget.dnd_accept" line="158" name="attr" />
          <variable line="166" name="old_target" />
        </scope>
        <scope ilk="function" line="142" lineend="149" name="__del__" signature="__del__()">
          <variable citdl="DndHandler" ilk="argument" name="self" />
          <variable citdl="event.widget._root()" line="143" name="root" />
        </scope>
        <variable attributes="__instancevar__" citdl="event.num" line="134" name="initial_button" />
        <scope ilk="function" line="178" lineend="179" name="on_release" signature="on_release(event)">
          <variable citdl="DndHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <variable attributes="__instancevar__" line="132" name="source" />
        <scope ilk="function" line="184" lineend="201" name="finish" signature="finish(event, commit=0)">
          <variable citdl="DndHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
          <variable citdl="int" ilk="argument" name="commit" />
          <variable citdl="attr()" line="185" name="target" />
          <variable line="186" name="source" />
          <variable citdl="event.widget" line="187" name="widget" />
          <variable citdl="event.widget._root()" line="188" name="root" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="137" name="save_cursor" />
        <scope ilk="function" line="181" lineend="182" name="cancel" signature="cancel(event=None)">
          <variable citdl="DndHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <variable citdl="event.widget._root()" line="120" name="root" />
        <variable attributes="__instancevar__" citdl="event.widget" line="135" name="initial_widget" />
        <scope attributes="__ctor__" ilk="function" line="122" lineend="140" name="__init__" signature="DndHandler(source, event)">
          <variable citdl="DndHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="event" />
          <variable citdl="event.widget._root()" line="125" name="root" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="208" lineend="266" name="Icon">
        <variable attributes="__instancevar__" line="212" name="canvas" />
        <variable attributes="__instancevar__" citdl="event.x" line="243" name="x_off" />
        <variable attributes="__instancevar__" line="211" name="name" />
        <scope ilk="function" line="248" lineend="250" name="move" signature="move(event)">
          <variable citdl="Icon" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope ilk="function" line="252" lineend="253" name="putback" signature="putback()">
          <variable citdl="Icon" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="265" lineend="266" name="dnd_end" signature="dnd_end(target, event)">
          <variable citdl="Icon" ilk="argument" name="self" />
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope ilk="function" line="214" lineend="228" name="attach" signature="attach(canvas, x=10, y=10)">
          <variable citdl="Icon" ilk="argument" name="self" />
          <variable ilk="argument" name="canvas" />
          <variable citdl="int" ilk="argument" name="x" />
          <variable citdl="int" ilk="argument" name="y" />
          <variable citdl="tkinter.Label()" line="222" name="label" />
          <variable citdl="canvas.create_window()" line="224" name="id" />
        </scope>
        <variable attributes="__instancevar__" citdl="event.y" line="244" name="y_off" />
        <scope ilk="function" line="240" lineend="246" name="press" signature="press(event)">
          <variable citdl="Icon" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <variable attributes="__instancevar__" citdl="tkinter.Label()" line="226" name="label" />
        <scope ilk="function" line="255" lineend="263" name="where" returns="tuple" signature="where(canvas, event)">
          <variable citdl="Icon" ilk="argument" name="self" />
          <variable ilk="argument" name="canvas" />
          <variable ilk="argument" name="event" />
          <variable citdl="canvas.winfo_rootx()" line="257" name="x_org" />
          <variable citdl="canvas.winfo_rooty()" line="258" name="y_org" />
          <variable citdl="canvas.winfo_rootx()" line="260" name="x" />
          <variable citdl="event.y_root" line="261" name="y" />
        </scope>
        <variable attributes="__instancevar__" citdl="canvas.create_window()" line="227" name="id" />
        <scope attributes="__ctor__" ilk="function" line="210" lineend="212" name="__init__" signature="Icon(name)">
          <variable citdl="Icon" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="230" lineend="238" name="detach" signature="detach()">
          <variable citdl="Icon" ilk="argument" name="self" />
          <variable line="231" name="canvas" />
          <variable citdl="canvas.create_window()" line="234" name="id" />
          <variable citdl="tkinter.Label()" line="235" name="label" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="268" lineend="300" name="Tester">
        <variable attributes="__instancevar__" citdl="tkinter.Canvas()" line="272" name="canvas" />
        <scope ilk="function" line="292" lineend="295" name="dnd_leave" signature="dnd_leave(source, event)">
          <variable citdl="Tester" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope ilk="function" line="287" lineend="290" name="dnd_motion" signature="dnd_motion(source, event)">
          <variable citdl="Tester" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="event" />
        </scope>
        <variable attributes="__instancevar__" citdl="tkinter.Toplevel()" line="271" name="top" />
        <variable attributes="__instancevar__" citdl="self.canvas.create_rectangle()" line="284" name="dndid" />
        <scope ilk="function" line="276" lineend="277" name="dnd_accept" returns="Tester" signature="dnd_accept(source, event)">
          <variable citdl="Tester" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope ilk="function" line="297" lineend="300" name="dnd_commit" signature="dnd_commit(source, event)">
          <variable citdl="Tester" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope ilk="function" line="279" lineend="285" name="dnd_enter" signature="dnd_enter(source, event)">
          <variable citdl="Tester" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="event" />
          <variable citdl="x1" line="283" name="dx" />
          <variable citdl="y2" line="283" name="dy" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="270" lineend="274" name="__init__" signature="Tester(root)">
          <variable citdl="Tester" ilk="argument" name="self" />
          <variable ilk="argument" name="root" />
        </scope>
      </scope>
      <scope ilk="function" line="108" lineend="113" name="dnd_start" returns="DndHandler()" signature="dnd_start(source, event)">
        <variable ilk="argument" name="source" />
        <variable ilk="argument" name="event" />
        <variable citdl="DndHandler()" line="109" name="h" />
      </scope>
      <scope ilk="function" line="302" lineend="318" name="test" signature="test()">
        <variable citdl="Icon" line="312" name="i1" />
        <variable citdl="Icon" line="314" name="i3" />
        <variable citdl="Icon" line="313" name="i2" />
        <variable citdl="Tester" line="308" name="t2" />
        <variable citdl="Tester" line="310" name="t3" />
        <variable citdl="Tester" line="306" name="t1" />
        <variable citdl="tkinter.Tk()" line="303" name="root" />
      </scope>
      <import module="tkinter" />
    </scope>
    <scope doc="Registration facilities for DOM. This module should not be used directly. Instead, the functions getDOMImplementation and registerDOMImplementation should be imported from xml.dom." ilk="blob" lang="Python3" name="xml.dom.domreg">
      <scope classrefs="tuple" ilk="class" name="EmptyNodeList" />
      <scope classrefs="list" ilk="class" name="NodeList" />
      <variable citdl="tuple" name="StringTypes" />
      <scope ilk="function" name="defproperty" signature="defproperty(klass, name, doc)" />
      <scope doc="Return a suitable DOM implementation." ilk="function" line="39" lineend="80" name="getDOMImplementation" returns="mod.getDOMImplementation()" signature="getDOMImplementation(name = None, features = ()) -&gt; DOM implementation.">
        <variable citdl="__import__()" line="54" name="mod" />
        <variable citdl="creator()" line="68" name="dom" />
        <variable citdl="_parse_feature_string()" ilk="argument" name="features" />
        <variable ilk="argument" name="name" />
        <variable line="53" name="creator" />
      </scope>
      <scope doc="Register the factory function with the name." ilk="function" line="21" lineend="30" name="registerDOMImplementation" signature="registerDOMImplementation(name, factory)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="factory" />
      </scope>
      <variable citdl="dict" line="19" name="registered" />
      <variable citdl="dict" line="11" name="well_known_implementations" />
      <scope attributes="protected __hidden__" ilk="function" line="82" lineend="99" name="_parse_feature_string" returns="tuple()" signature="_parse_feature_string(s)">
        <variable ilk="argument" name="s" />
        <variable citdl="list" line="83" name="features" />
        <variable citdl="s.split()" line="84" name="parts" />
        <variable citdl="int" line="85" name="i" />
        <variable citdl="len()" line="86" name="length" />
        <variable line="88" name="feature" />
        <variable line="92" name="version" />
        <variable line="94" name="v" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="32" lineend="37" name="_good_enough" returns="int" signature="_good_enough(dom, features) -&gt; Return 1 if the dom offers the features">
        <variable ilk="argument" name="dom" />
        <variable ilk="argument" name="features" />
      </scope>
    </scope>
    <scope doc="Wrapper functions for Tcl/Tk.  Tkinter provides classes which allow the display, positioning and" ilk="blob" lang="Python3" name="tkinter">
      <variable citdl="str" name="ACTIVE" />
      <variable citdl="str" name="ALL" />
      <variable citdl="str" name="ANCHOR" />
      <variable citdl="str" name="ARC" />
      <scope ilk="function" name="At" signature="At(x, y=None)" />
      <scope doc="# Indices: # XXX I don&apos;t like these -- take them away" ilk="function" name="AtEnd" signature="AtEnd()" />
      <scope ilk="function" name="AtInsert" signature="AtInsert(*args)" />
      <scope ilk="function" name="AtSelFirst" signature="AtSelFirst()" />
      <scope ilk="function" name="AtSelLast" signature="AtSelLast()" />
      <variable citdl="str" name="BASELINE" />
      <variable citdl="str" name="BEVEL" />
      <variable citdl="str" name="BOTH" />
      <variable citdl="str" name="BOTTOM" />
      <variable citdl="str" name="BROWSE" />
      <variable citdl="str" name="BUTT" />
      <scope classrefs="Misc" doc="Internal class." ilk="class" name="BaseWidget" />
      <scope classrefs="Image" doc="Widget which can display a bitmap." ilk="class" name="BitmapImage" />
      <scope classrefs="Variable" doc="Value holder for boolean variables." ilk="class" name="BooleanVar" />
      <scope classrefs="Widget" doc="Button widget." ilk="class" name="Button" />
      <variable citdl="str" name="CASCADE" />
      <variable citdl="str" name="CENTER" />
      <variable citdl="str" name="CHAR" />
      <variable citdl="str" name="CHECKBUTTON" />
      <variable citdl="str" name="CHORD" />
      <variable citdl="str" name="COMMAND" />
      <variable citdl="str" name="CURRENT" />
      <scope classrefs="object" doc="Internal class. Stores function to call when some user defined Tcl function is called e.g. after an event occurred." ilk="class" name="CallWrapper" />
      <scope classrefs="Widget" doc="Canvas widget to display graphical elements like lines or text." ilk="class" name="Canvas" />
      <scope classrefs="Widget" doc="Checkbutton widget which is either in on- or off-state." ilk="class" name="Checkbutton" />
      <variable citdl="str" name="DISABLED" />
      <variable citdl="str" name="DOTBOX" />
      <scope classrefs="Variable" doc="Value holder for float variables." ilk="class" name="DoubleVar" />
      <variable citdl="str" name="E" />
      <variable citdl="str" name="END" />
      <variable citdl="str" name="EW" />
      <variable citdl="int" name="EXCEPTION" />
      <variable citdl="str" name="EXTENDED" />
      <scope classrefs="Widget" doc="Entry widget which allows to display simple text." ilk="class" name="Entry" />
      <scope classrefs="object" doc="Container for the properties of an event.  Instances of this type are generated if one of the following events occurs:" ilk="class" name="Event" />
      <variable citdl="int" name="FALSE" />
      <variable citdl="str" name="FIRST" />
      <variable citdl="str" name="FLAT" />
      <scope classrefs="Widget" doc="Frame widget which may contain other widgets and can have a 3D border." ilk="class" name="Frame" />
      <variable citdl="str" name="GROOVE" />
      <scope classrefs="object" doc="Geometry manager Grid.  Base class to use the methods grid_* in every widget." ilk="class" name="Grid" />
      <variable citdl="str" name="HIDDEN" />
      <variable citdl="str" name="HORIZONTAL" />
      <variable citdl="str" name="INSERT" />
      <variable citdl="str" name="INSIDE" />
      <scope classrefs="object" doc="Base class for images." ilk="class" name="Image" />
      <scope classrefs="Variable" doc="Value holder for integer variables." ilk="class" name="IntVar" />
      <variable citdl="str" name="LAST" />
      <variable citdl="str" name="LEFT" />
      <scope classrefs="Widget" doc="Label widget which can display text and bitmaps." ilk="class" name="Label" />
      <scope classrefs="Widget" doc="labelframe widget." ilk="class" name="LabelFrame" />
      <scope classrefs="Widget" doc="Listbox widget which can display a list of strings." ilk="class" name="Listbox" />
      <variable citdl="str" name="MITER" />
      <variable citdl="str" name="MOVETO" />
      <variable citdl="str" name="MULTIPLE" />
      <scope classrefs="Widget" doc="Menu widget which allows to display menu bars, pull-down menus and pop-up menus." ilk="class" name="Menu" />
      <scope classrefs="Widget" doc="Menubutton widget, obsolete since Tk8.0." ilk="class" name="Menubutton" />
      <scope classrefs="Widget" doc="Message widget to display multiline text. Obsolete since Label does it too." ilk="class" name="Message" />
      <scope classrefs="object" doc="Internal class.  Base class which defines methods common for interior widgets." ilk="class" name="Misc" />
      <variable citdl="str" name="N" />
      <variable citdl="str" name="NE" />
      <variable citdl="int" name="NO" />
      <variable citdl="str" name="NONE" />
      <variable citdl="str" name="NORMAL" />
      <variable citdl="str" name="NS" />
      <variable citdl="str" name="NSEW" />
      <variable citdl="str" name="NUMERIC" />
      <variable citdl="str" name="NW" />
      <scope doc="Inhibit setting of default root window." ilk="function" name="NoDefaultRoot" signature="NoDefaultRoot()" />
      <variable citdl="int" name="OFF" />
      <variable citdl="int" name="ON" />
      <variable citdl="str" name="OUTSIDE" />
      <scope classrefs="Menubutton" doc="OptionMenu which allows the user to select a value from a menu." ilk="class" name="OptionMenu" />
      <variable citdl="str" name="PAGES" />
      <variable citdl="str" name="PIESLICE" />
      <variable citdl="str" name="PROJECTING" />
      <scope classrefs="object" doc="Geometry manager Pack.  Base class to use the methods pack_* in every widget." ilk="class" name="Pack" />
      <scope classrefs="Widget" doc="panedwindow widget." ilk="class" name="PanedWindow" />
      <scope classrefs="Image" doc="Widget which can display colored images in GIF, PPM/PGM format." ilk="class" name="PhotoImage" />
      <scope classrefs="object" doc="Geometry manager Place.  Base class to use the methods place_* in every widget." ilk="class" name="Place" />
      <variable citdl="str" name="RADIOBUTTON" />
      <variable citdl="str" name="RAISED" />
      <variable citdl="int" name="READABLE" />
      <variable citdl="str" name="RIDGE" />
      <variable citdl="str" name="RIGHT" />
      <variable citdl="str" name="ROUND" />
      <scope classrefs="Widget" doc="Radiobutton widget which shows only one of several buttons in on-state." ilk="class" name="Radiobutton" />
      <variable citdl="str" name="S" />
      <variable citdl="str" name="SCROLL" />
      <variable citdl="str" name="SE" />
      <variable citdl="str" name="SEL" />
      <variable citdl="str" name="SEL_FIRST" />
      <variable citdl="str" name="SEL_LAST" />
      <variable citdl="str" name="SEPARATOR" />
      <variable citdl="str" name="SINGLE" />
      <variable citdl="str" name="SOLID" />
      <variable citdl="str" name="SUNKEN" />
      <variable citdl="str" name="SW" />
      <scope classrefs="Widget" doc="Scale widget which can display a numerical scale." ilk="class" name="Scale" />
      <scope classrefs="Widget" doc="Scrollbar widget which displays a slider at a certain position." ilk="class" name="Scrollbar" />
      <scope classrefs="Widget" doc="spinbox widget." ilk="class" name="Spinbox" />
      <scope classrefs="Variable" doc="Value holder for strings variables." ilk="class" name="StringVar" />
      <scope classrefs="Button" ilk="class" name="Studbutton" />
      <variable citdl="str" name="TOP" />
      <variable citdl="int" name="TRUE" />
      <scope ilk="function" name="Tcl" signature="Tcl(screenName=None, baseName=None, className=&apos;Tk&apos;, useTk=0)" />
      <scope classrefs="Exception" ilk="class" name="TclError" />
      <variable citdl="float" name="TclVersion" />
      <scope classrefs="Widget" doc="Text widget which can display text in various forms." ilk="class" name="Text" />
      <scope classrefs="Misc Wm" doc="Toplevel widget of Tk which represents mostly the main window of an appliation. It has an associated Tcl interpreter." ilk="class" name="Tk" />
      <variable citdl="float" name="TkVersion" />
      <scope classrefs="BaseWidget Wm" doc="Toplevel widget, e.g. for dialogs." ilk="class" name="Toplevel" />
      <scope classrefs="Button" ilk="class" name="Tributton" />
      <variable citdl="str" name="UNDERLINE" />
      <variable citdl="str" name="UNITS" />
      <variable citdl="str" name="VERTICAL" />
      <scope classrefs="object" doc="Class to define value holders for e.g. buttons.  Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations" ilk="class" name="Variable" />
      <variable citdl="str" name="W" />
      <variable citdl="str" name="WORD" />
      <variable citdl="int" name="WRITABLE" />
      <scope classrefs="BaseWidget Pack Place Grid Form" doc="Internal class.  Base class for a widget which can be positioned with the geometry managers" ilk="class" name="Widget" />
      <scope classrefs="object" doc="Provides functions for the communication with the window manager." ilk="class" name="Wm" />
      <variable citdl="str" name="X" />
      <variable citdl="str" name="Y" />
      <variable citdl="int" name="YES" />
      <variable citdl="str" name="__version__" />
      <import module="_fix" />
      <import module="_tkinter" />
      <import module="commondialog" />
      <import module="constants" />
      <import module="dialog" />
      <import module="dnd" />
      <import module="filedialog" />
      <import module="font" />
      <scope doc="Convert true and false to integer values 1 and 0." ilk="function" name="getboolean" signature="getboolean(s)" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number  Convert a string or number to a floating point number, if possible." ilk="class" name="getdouble" />
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer  Convert a string or number to an integer, if possible.  A floating" ilk="class" name="getint" />
      <scope ilk="function" name="image_names" signature="image_names()" />
      <scope ilk="function" name="image_types" signature="image_types()" />
      <scope doc="Run the main loop of Tcl." ilk="function" name="mainloop" signature="mainloop(n=0)" />
      <import module="messagebox" />
      <import module="scrolledtext" />
      <import module="simpledialog" />
      <import module="sys" />
      <import module="tix" />
      <import module="ttk" />
      <variable citdl="int" name="wantobjects" />
    </scope>
    <scope doc="wsgiref -- a WSGI (PEP 333) Reference Library  Current Contents:" ilk="blob" lang="Python3" name="wsgiref">
      <import module="handlers" />
      <import module="headers" />
      <import module="util" />
    </scope>
    <scope doc="Functional tools for creating and using iterators.  Infinite iterators:" ilk="blob" lang="Python3" name="itertools">
      <scope classrefs="object" doc="chain(*iterables) --&gt; chain object  Return a chain object whose .__next__() method returns elements from the" ilk="class" name="chain" />
      <scope classrefs="object" doc="combinations(iterable, r) --&gt; combinations object  Return successive r-length combinations of elements in the iterable." ilk="class" name="combinations" />
      <scope classrefs="object" doc="combinations_with_replacement(iterable, r) --&gt; combinations_with_replacement object  Return successive r-length combinations of elements in the iterable" ilk="class" name="combinations_with_replacement" />
      <scope classrefs="object" doc="compress(data, selectors) --&gt; iterator over selected data  Return data elements corresponding to true selector elements." ilk="class" name="compress" />
      <scope classrefs="object" doc="count(start=0, step=1]) --&gt; count object  Return a count object whose .__next__() method returns consecutive values." ilk="class" name="count" />
      <scope classrefs="object" doc="cycle(iterable) --&gt; cycle object  Return elements from the iterable until it is exhausted." ilk="class" name="cycle" />
      <scope classrefs="object" doc="dropwhile(predicate, iterable) --&gt; dropwhile object  Drop items from the iterable while predicate(item) is true." ilk="class" name="dropwhile" />
      <scope classrefs="object" doc="filterfalse(function or None, sequence) --&gt; filterfalse object  Return those items of sequence for which function(item) is false." ilk="class" name="filterfalse" />
      <scope classrefs="object" doc="groupby(iterable[, keyfunc]) -&gt; create an iterator which returns (key, sub-iterator) grouped by each value of key(value)." ilk="class" name="groupby" />
      <scope classrefs="object" doc="islice(iterable, [start,] stop [, step]) --&gt; islice object  Return an iterator whose next() method returns selected values from an" ilk="class" name="islice" />
      <scope classrefs="object" doc="permutations(iterable[, r]) --&gt; permutations object  Return successive r-length permutations of elements in the iterable." ilk="class" name="permutations" />
      <scope classrefs="object" doc="product(*iterables) --&gt; product object  Cartesian product of input iterables.  Equivalent to nested for-loops." ilk="class" name="product" />
      <scope classrefs="object" doc="repeat(object [,times]) -&gt; create an iterator which returns the object for the specified number of times.  If not specified, returns the object endlessly." ilk="class" name="repeat" />
      <scope classrefs="object" doc="starmap(function, sequence) --&gt; starmap object  Return an iterator whose values are returned from the function evaluated" ilk="class" name="starmap" />
      <scope classrefs="object" doc="takewhile(predicate, iterable) --&gt; takewhile object  Return successive entries from an iterable as long as the " ilk="class" name="takewhile" />
      <scope doc="tee(iterable, n=2) --&gt; tuple of n independent iterators." ilk="function" name="tee" signature="tee(iterable, n=2) --&gt; tuple of n independent iterators." />
      <scope classrefs="object" doc="zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --&gt; zip_longest object  Return an zip_longest object whose .__next__() method returns a tuple where" ilk="class" name="zip_longest" />
    </scope>
    <scope doc="distutils.spawn  Provides the &apos;spawn()&apos; function, a front-end to various platform-" ilk="blob" lang="Python3" name="distutils.spawn">
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <variable citdl="str" line="9" name="__revision__" />
      <scope doc="Tries to find &apos;executable&apos; in the directories listed in &apos;path&apos;." ilk="function" line="146" lineend="169" name="find_executable" returns="str" signature="find_executable(executable, path=None)">
        <variable citdl="path.split()" line="155" name="paths" />
        <variable citdl="str" ilk="argument" name="executable" />
        <variable citdl="os.path.join()" line="163" name="f" />
        <variable ilk="argument" name="path" />
      </scope>
      <import module="log" />
      <import module="os" />
      <scope doc="Run another program, specified as a command list &apos;cmd&apos;, in a new process." ilk="function" line="17" lineend="41" name="spawn" signature="spawn(cmd, search_path=1, verbose=0, dry_run=0)">
        <variable ilk="argument" name="cmd" />
        <variable citdl="int" ilk="argument" name="search_path" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable citdl="int" ilk="argument" name="verbose" />
      </scope>
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="99" lineend="144" name="_spawn_posix" signature="_spawn_posix(cmd, search_path=1, verbose=0, dry_run=0)">
        <import line="122" module="errno" />
        <variable ilk="argument" name="cmd" />
        <variable citdl="int" ilk="argument" name="search_path" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable citdl="int" line="103" name="exec_fn" />
        <variable citdl="os.fork()" line="104" name="pid" />
        <variable citdl="os.WEXITSTATUS()" line="132" name="exit_status" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="59" lineend="77" name="_spawn_nt" signature="_spawn_nt(cmd, search_path=1, verbose=0, dry_run=0)">
        <variable citdl="_nt_quote_args()" ilk="argument" name="cmd" />
        <variable citdl="int" ilk="argument" name="search_path" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable citdl="find_executable()" line="60" name="executable" />
        <variable citdl="os.spawnv()" line="69" name="rc" />
      </scope>
      <scope attributes="protected __hidden__" doc="Quote command-line arguments for DOS/Windows conventions." ilk="function" line="43" lineend="57" name="_nt_quote_args" signature="_nt_quote_args(args)">
        <variable ilk="argument" name="args" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="79" lineend="97" name="_spawn_os2" signature="_spawn_os2(cmd, search_path=1, verbose=0, dry_run=0)">
        <variable ilk="argument" name="cmd" />
        <variable citdl="int" ilk="argument" name="search_path" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable citdl="find_executable()" line="80" name="executable" />
        <variable citdl="os.spawnv()" line="88" name="rc" />
      </scope>
    </scope>
    <scope doc="opcode module - potentially shared between dis and other modules which operate on bytecodes (e.g. peephole optimizers)." ilk="blob" lang="Python3" name="opcode">
      <variable citdl="int" line="170" name="EXTENDED_ARG" />
      <variable citdl="int" line="108" name="HAVE_ARGUMENT" />
      <variable citdl="list" line="7" name="__all__" />
      <variable citdl="tuple" line="11" name="cmp_op" />
      <variable citdl="list" line="19" name="hascompare" />
      <variable citdl="list" line="14" name="hasconst" />
      <variable citdl="list" line="20" name="hasfree" />
      <variable citdl="list" line="17" name="hasjabs" />
      <variable citdl="list" line="16" name="hasjrel" />
      <variable citdl="list" line="18" name="haslocal" />
      <variable citdl="list" line="15" name="hasname" />
      <variable citdl="dict" line="22" name="opmap" />
      <variable citdl="list" line="23" name="opname" />
      <scope attributes="__hidden__" ilk="function" line="27" lineend="29" name="def_op" signature="def_op(name, op)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="op" />
      </scope>
      <scope attributes="__hidden__" ilk="function" line="35" lineend="37" name="jrel_op" signature="jrel_op(name, op)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="op" />
      </scope>
      <scope attributes="__hidden__" ilk="function" line="31" lineend="33" name="name_op" signature="name_op(name, op)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="op" />
      </scope>
      <scope attributes="__hidden__" ilk="function" line="39" lineend="41" name="jabs_op" signature="jabs_op(name, op)">
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="op" />
      </scope>
    </scope>
    <scope doc="Optimized C implementation for the Python pickle module." ilk="blob" lang="Python3" name="_pickle">
      <scope classrefs="Exception" ilk="class" name="PickleError" />
      <scope classrefs="object" doc="Pickler(file, protocol=None) This takes a binary file for writing a pickle data stream. " ilk="class" name="Pickler" />
      <scope classrefs="PickleError" ilk="class" name="PicklingError" />
      <scope classrefs="object" doc="Unpickler(file, *, encoding=&apos;ASCII&apos;, errors=&apos;strict&apos;) This takes a binary file for reading a pickle data stream. " ilk="class" name="Unpickler" />
      <scope classrefs="PickleError" ilk="class" name="UnpicklingError" />
    </scope>
    <scope doc="Class for printing reports on profiled python code." ilk="blob" lang="Python3" name="pstats">
      <scope doc="Convert a cmp= function into a key= function" ilk="function" line="473" lineend="480" name="CmpToKey" returns="CmpToKey.K" signature="CmpToKey(mycmp)">
        <scope classrefs="object" ilk="class" line="475" lineend="479" name="K">
          <scope attributes="__ctor__" ilk="function" line="476" lineend="477" name="__init__" signature="K(obj)">
            <variable citdl="K" ilk="argument" name="self" />
            <variable ilk="argument" name="obj" />
          </scope>
          <variable attributes="__instancevar__" line="477" name="obj" />
          <scope ilk="function" line="478" lineend="479" name="__lt__" returns="bool" signature="__lt__(other)">
            <variable citdl="K" ilk="argument" name="self" />
            <variable ilk="argument" name="other" />
          </scope>
        </scope>
        <variable ilk="argument" name="mycmp" />
      </scope>
      <scope classrefs="object" doc="This class is used for creating reports from data generated by the Profile class.  It is a &quot;friend&quot; of that class, and imports data either by direct access to members of Profile class, or by reading in a dictionary" ilk="class" line="43" lineend="450" name="Stats">
        <scope ilk="function" line="117" name="load_stats" signature="load_stats(arg)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable citdl="time.ctime()" ilk="argument" name="arg" />
          <variable citdl="open()" line="120" name="f" />
          <variable citdl="os.stat()" line="124" name="file_stats" />
        </scope>
        <variable attributes="__instancevar__" citdl="sys.stdout" line="78" name="stream" />
        <variable attributes="__instancevar__" citdl="dict" line="96" name="all_callees" />
        <variable attributes="__instancevar__" citdl="int" line="99" name="total_tt" />
        <scope ilk="function" line="321" lineend="343" name="get_print_list" returns="tuple" signature="get_print_list(sel_list)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable ilk="argument" name="sel_list" />
          <variable citdl="int" line="322" name="width" />
          <variable citdl="self.stats.keys()" line="324" name="list" />
          <variable citdl="str" line="325" name="msg" />
          <variable citdl="len()" line="333" name="count" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="229" name="sort_type" />
        <scope ilk="function" line="138" lineend="146" name="get_top_level_stats" signature="get_top_level_stats()">
          <variable citdl="Stats" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="73" lineend="93" name="__init__" signature="Stats(*args, **kwds)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable attributes="varargs" citdl="list" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
          <variable citdl="kwds.keys()" line="83" name="keys" />
          <variable citdl="str.join()" line="85" name="extras" />
          <variable line="88" name="arg" />
        </scope>
        <scope ilk="function" line="405" lineend="428" name="print_call_line" signature="print_call_line(name_size, source, call_dict, arrow=&apos;-&gt;&apos;)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable ilk="argument" name="name_size" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="call_dict" />
          <variable citdl="str" ilk="argument" name="arrow" />
          <variable citdl="sorted()" line="410" name="clist" />
          <variable citdl="str" line="411" name="indent" />
          <variable citdl="func_std_string()" line="413" name="name" />
          <variable line="414" name="value" />
          <variable citdl="str" line="418" name="substats" />
          <variable citdl="int" line="423" name="left_width" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="104" name="stats" />
        <scope ilk="function" line="300" lineend="319" name="eval_print_amount" returns="tuple" signature="eval_print_amount(sel, list, msg)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable ilk="argument" name="sel" />
          <variable ilk="argument" name="list" />
          <variable citdl="str" ilk="argument" name="msg" />
          <variable citdl="list" line="301" name="new_list" />
          <variable citdl="int()" line="308" name="count" />
        </scope>
        <scope ilk="function" line="434" lineend="450" name="print_line" signature="print_line(func)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable ilk="argument" name="func" />
          <variable citdl="str()" line="436" name="c" />
        </scope>
        <scope ilk="function" line="148" lineend="172" name="add" returns="Stats" signature="add(*arg_list)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="arg_list" />
          <variable citdl="" line="151" name="other" />
          <variable citdl="tuple" line="168" name="old_func_stat" />
        </scope>
        <scope ilk="function" line="95" lineend="115" name="init" signature="init(arg)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="int" line="107" name="trouble" />
        </scope>
        <scope ilk="function" line="393" lineend="403" name="print_call_heading" signature="print_call_heading(name_size, column_title)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable ilk="argument" name="name_size" />
          <variable ilk="argument" name="column_title" />
          <variable citdl="isinstance()" line="396" name="subheader" />
          <variable citdl="next()" line="399" name="value" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="97" name="files" />
        <scope ilk="function" line="248" lineend="251" name="reverse_order" returns="Stats" signature="reverse_order()">
          <variable citdl="Stats" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="105" name="sort_arg_dict" />
        <scope ilk="function" line="430" lineend="432" name="print_title" signature="print_title()">
          <variable citdl="Stats" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="100" name="total_calls" />
        <variable attributes="__instancevar__" citdl="int" line="102" name="max_name_len" />
        <scope ilk="function" line="216" lineend="246" name="sort_stats" returns="Stats" signature="sort_stats(*field)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable attributes="varargs" citdl="list" ilk="argument" name="field" />
          <variable citdl="get_sort_arg_defs()" line="227" name="sort_arg_defs" />
          <variable citdl="tuple" line="228" name="sort_tuple" />
          <variable citdl="str" line="230" name="connector" />
          <variable citdl="list" line="236" name="stats_list" />
        </scope>
        <scope ilk="function" line="382" lineend="391" name="print_callers" returns="Stats" signature="print_callers(*amount)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="amount" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="101" name="prim_calls" />
        <variable attributes="__instancevar__" citdl="int" line="98" name="fcn_list" />
        <variable attributes="__instancevar__" citdl="dict" line="103" name="top_level" />
        <scope doc="Expand all abbreviations that are unique." ilk="function" line="197" lineend="214" name="get_sort_arg_defs" returns="dict" signature="get_sort_arg_defs()">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable citdl="dict" line="201" name="bad_list" />
          <variable citdl="word" line="203" name="fragment" />
        </scope>
        <scope ilk="function" line="345" lineend="365" name="print_stats" returns="Stats" signature="print_stats(*amount)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="amount" />
          <variable citdl="str" line="349" name="indent" />
        </scope>
        <scope ilk="function" line="253" lineend="280" name="strip_dirs" returns="Stats" signature="strip_dirs()">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable citdl="dict" line="254" name="oldstats" />
          <variable citdl="int" line="256" name="max_name_len" />
          <variable citdl="func_strip_path()" line="258" name="newfunc" />
          <variable citdl="dict" line="261" name="newcallers" />
          <variable citdl="dict" line="271" name="old_top" />
        </scope>
        <scope ilk="function" line="367" lineend="380" name="print_callees" returns="Stats" signature="print_callees(*amount)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="amount" />
        </scope>
        <scope ilk="function" line="282" name="calc_callees" signature="calc_callees()">
          <variable citdl="Stats" ilk="argument" name="self" />
        </scope>
        <scope doc="Write the profile data to a file we know how to load back." ilk="function" line="174" lineend="180" name="dump_stats" signature="dump_stats(filename)">
          <variable citdl="Stats" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="open()" line="176" name="f" />
        </scope>
        <variable citdl="dict" line="184" name="sort_arg_dict_default" />
      </scope>
      <scope classrefs="object" doc="This class provides a generic function for comparing any two tuples. Each instance records a list of tuple-indices (from most significant to least significant), and sort direction (ascending or decending) for" ilk="class" line="452" lineend="471" name="TupleComp">
        <scope ilk="function" line="463" lineend="471" name="compare" returns="direction" signature="compare(left, right)">
          <variable citdl="TupleComp" ilk="argument" name="self" />
          <variable ilk="argument" name="left" />
          <variable ilk="argument" name="right" />
          <variable line="465" name="l" />
          <variable line="466" name="r" />
        </scope>
        <variable attributes="__instancevar__" line="461" name="comp_select_list" />
        <scope attributes="__ctor__" ilk="function" line="460" lineend="461" name="__init__" signature="TupleComp(comp_select_list)">
          <variable citdl="TupleComp" ilk="argument" name="self" />
          <variable ilk="argument" name="comp_select_list" />
        </scope>
      </scope>
      <variable citdl="list" line="41" name="__all__" />
      <scope doc="Combine two caller lists in a single list." ilk="function" line="517" lineend="528" name="add_callers" returns="dict" signature="add_callers(target, source)">
        <variable citdl="dict" line="519" name="new_callers" />
        <variable ilk="argument" name="source" />
        <variable ilk="argument" name="target" />
      </scope>
      <scope doc="Add together all the stats for two profile entries." ilk="function" line="510" lineend="515" name="add_func_stats" returns="tuple" signature="add_func_stats(target, source)">
        <variable ilk="argument" name="source" />
        <variable ilk="argument" name="target" />
      </scope>
      <scope doc="Sum the caller statistics to get total number of calls received." ilk="function" line="530" lineend="535" name="count_calls" returns="int" signature="count_calls(callers)">
        <variable ilk="argument" name="callers" />
        <variable citdl="int" line="532" name="nc" />
      </scope>
      <scope ilk="function" line="541" lineend="542" name="f8" returns="str" signature="f8(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope ilk="function" line="490" lineend="491" name="func_get_function_name" signature="func_get_function_name(func)">
        <variable ilk="argument" name="func" />
      </scope>
      <scope ilk="function" line="493" lineend="502" name="func_std_string" returns="str" signature="func_std_string(func_name)">
        <variable ilk="argument" name="func_name" />
        <variable line="496" name="name" />
      </scope>
      <scope ilk="function" line="486" lineend="488" name="func_strip_path" returns="tuple" signature="func_strip_path(func_name)">
        <variable ilk="argument" name="func_name" />
      </scope>
      <import module="marshal" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
      <import module="time" />
      <scope attributes="__hidden__" classrefs="cmd.Cmd" ilk="class" line="555" lineend="679" name="ProfileBrowser">
        <scope attributes="__ctor__" ilk="function" line="556" lineend="564" name="__init__" signature="ProfileBrowser(profile=None)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="profile" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="558" name="prompt" />
        <variable attributes="__instancevar__" citdl="Stats" line="560" name="stats" />
        <variable attributes="__instancevar__" citdl="sys.stdout" line="561" name="stream" />
        <scope ilk="function" line="566" lineend="589" name="generic" returns="int" signature="generic(fn, line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="fn" />
          <variable ilk="argument" name="line" />
          <variable citdl="line.split()" line="567" name="args" />
          <variable citdl="list" line="568" name="processed" />
          <variable citdl="float()" line="576" name="frac" />
        </scope>
        <scope ilk="function" line="590" lineend="596" name="generic_help" signature="generic_help()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="598" lineend="600" name="do_add" returns="int" signature="do_add(line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope ilk="function" line="601" lineend="602" name="help_add" signature="help_add()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="604" lineend="605" name="do_callees" returns="ProfileBrowser.generic()" signature="do_callees(line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope ilk="function" line="606" lineend="608" name="help_callees" signature="help_callees()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="610" lineend="611" name="do_callers" returns="ProfileBrowser.generic()" signature="do_callers(line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope ilk="function" line="612" lineend="614" name="help_callers" signature="help_callers()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="616" lineend="618" name="do_EOF" returns="int" signature="do_EOF(line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope ilk="function" line="619" lineend="620" name="help_EOF" signature="help_EOF()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="622" lineend="623" name="do_quit" returns="int" signature="do_quit(line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope ilk="function" line="624" lineend="625" name="help_quit" signature="help_quit()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="627" lineend="639" name="do_read" returns="int" signature="do_read(line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="line" />
        </scope>
        <scope ilk="function" line="640" lineend="641" name="help_read" signature="help_read()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="643" lineend="645" name="do_reverse" returns="int" signature="do_reverse(line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope ilk="function" line="646" lineend="647" name="help_reverse" signature="help_reverse()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="649" lineend="657" name="do_sort" returns="int" signature="do_sort(line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable citdl="self.stats.get_sort_arg_defs()" line="650" name="abbrevs" />
        </scope>
        <scope ilk="function" line="658" lineend="660" name="help_sort" signature="help_sort()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="661" lineend="662" name="complete_sort" returns="list" signature="complete_sort(text, *args)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="664" lineend="665" name="do_stats" returns="ProfileBrowser.generic()" signature="do_stats(line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope ilk="function" line="666" lineend="668" name="help_stats" signature="help_stats()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="670" lineend="672" name="do_strip" returns="int" signature="do_strip(line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope ilk="function" line="673" lineend="674" name="help_strip" signature="help_strip()">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="676" lineend="679" name="postcmd" signature="postcmd(stop, line)">
          <variable citdl="ProfileBrowser" ilk="argument" name="self" />
          <variable ilk="argument" name="stop" />
          <variable ilk="argument" name="line" />
        </scope>
      </scope>
      <variable attributes="__hidden__" line="683" name="initprofile" />
      <variable attributes="__hidden__" citdl="ProfileBrowser" line="687" name="browser" />
    </scope>
    <scope doc="A Python debugger." ilk="blob" lang="Python3" name="pdb">
      <scope classrefs="Bdb Cmd" ilk="class" line="59" lineend="1217" name="Pdb">
        <scope ilk="function" line="480" lineend="495" name="do_enable" signature="do_enable(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="arg.split()" line="481" name="args" />
          <variable citdl="int()" line="484" name="i" />
          <variable line="493" name="bp" />
        </scope>
        <scope ilk="function" line="111" lineend="115" name="forget" signature="forget()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable citdl="Pdb.do_clear" line="614" name="do_cl" />
        <scope ilk="function" line="1039" lineend="1040" name="help_list" signature="help_list()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.curframe.f_locals" line="124" name="curframe_locals" />
        <scope ilk="function" line="725" lineend="735" name="do_args" signature="do_args(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="self.curframe.f_code" line="726" name="co" />
          <variable citdl="self.curframe.f_locals" line="727" name="dict" />
          <variable citdl="co.co_argcount" line="728" name="n" />
          <variable line="732" name="name" />
        </scope>
        <scope ilk="function" line="1062" lineend="1064" name="help_pp" signature="help_pp()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="965" lineend="968" name="help_disable" signature="help_disable()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.canonic()" line="68" name="mainpyfile" />
        <variable attributes="__instancevar__" citdl="dict" line="67" name="aliases" />
        <variable attributes="__instancevar__" citdl="dict" line="100" name="commands_silent" />
        <scope ilk="function" line="653" lineend="655" name="do_next" returns="int" signature="do_next(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable citdl="Pdb.do_retval" line="743" name="do_rv" />
        <scope ilk="function" line="892" lineend="893" name="help_help" signature="help_help()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1009" lineend="1010" name="help_return" signature="help_return()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="170" name="currentbp" />
        <scope ilk="function" line="929" lineend="930" name="help_break" signature="help_break()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1001" lineend="1002" name="help_next" signature="help_next()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="648" lineend="650" name="do_step" returns="int" signature="do_step(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="719" lineend="723" name="do_EOF" returns="int" signature="do_EOF(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope doc="Check whether specified line seems to be executable." ilk="function" line="462" lineend="478" name="checkline" returns="int" signature="checkline(filename, lineno)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="lineno" />
          <variable citdl="line.strip()" line="468" name="line" />
        </scope>
        <scope ilk="function" line="621" lineend="629" name="do_up" signature="do_up(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable citdl="Pdb.do_where" line="619" name="do_bt" />
        <scope doc="This method is called when there is the remote possibility that we ever need to stop in this function." ilk="function" line="141" lineend="148" name="user_call" signature="user_call(frame, argument_list)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="argument_list" />
        </scope>
        <variable citdl="Pdb.do_quit" line="717" name="do_exit" />
        <scope doc="Call every command that was set for the current active breakpoint (if there is one)." ilk="function" line="160" lineend="182" name="bp_commands" returns="int" signature="bp_commands(frame)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable citdl="self.currentbp" line="169" name="currentbp" />
          <variable citdl="self.lastcmd" line="171" name="lastcmd_back" />
        </scope>
        <variable citdl="Pdb.do_p" line="762" name="do_print" />
        <scope doc="arg is bp number followed by ignore count." ilk="function" line="539" lineend="569" name="do_ignore" signature="do_ignore(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="arg.split()" line="541" name="args" />
          <variable citdl="int()" line="543" name="bpnum" />
          <variable citdl="int" line="549" name="count" />
          <variable line="553" name="bp" />
          <variable citdl="str" line="561" name="reply" />
        </scope>
        <scope ilk="function" line="643" lineend="645" name="do_until" returns="int" signature="do_until(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="215" lineend="238" name="default" signature="default(line)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="line" />
          <variable citdl="self.curframe.f_locals" line="217" name="locals" />
          <variable citdl="self.curframe.f_globals" line="218" name="globals" />
          <variable citdl="compile()" line="220" name="code" />
          <variable citdl="sys.stdout" line="221" name="save_stdout" />
          <variable citdl="sys.stdin" line="222" name="save_stdin" />
          <variable citdl="sys.displayhook" line="223" name="save_displayhook" />
          <variable citdl="t" line="236" name="exc_type_name" />
        </scope>
        <scope ilk="function" line="1166" lineend="1167" name="help_pdb" signature="help_pdb()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1127" lineend="1129" name="help_unalias" signature="help_unalias()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="616" lineend="617" name="do_where" signature="do_where(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="770" lineend="813" name="do_list" signature="do_list(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="int()" line="772" name="last" />
          <variable citdl="eval()" line="775" name="x" />
          <variable citdl="max()" line="778" name="first" />
          <variable citdl="self.curframe.f_code.co_filename" line="794" name="filename" />
          <variable citdl="self.get_file_breaks()" line="795" name="breaklist" />
          <variable citdl="linecache.getline()" line="798" name="line" />
          <variable citdl="str" line="804" name="s" />
        </scope>
        <variable citdl="Pdb.help_q" line="1093" name="help_exit" />
        <scope doc="Handles one command line during command list definition." ilk="function" line="277" name="handle_command_def" returns="int" signature="handle_command_def(line)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable line="286" name="cmdlist" />
          <variable citdl="Pdb.default" line="293" name="func" />
        </scope>
        <scope doc="Interpret the argument as though it had been typed in response to the prompt." ilk="function" line="265" lineend="275" name="onecmd" returns="cmd.Cmd.onecmd()" signature="onecmd(line)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <variable citdl="cmd.Cmd.do_help" line="307" name="do_h" />
        <scope ilk="function" line="764" lineend="768" name="do_pp" signature="do_pp(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="945" lineend="946" name="help_clear" signature="help_clear()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="334" lineend="414" name="do_break" signature="do_break(arg, temporary=0)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="int" ilk="argument" name="temporary" />
          <variable citdl="self.defaultFile()" line="345" name="filename" />
          <variable citdl="int()" line="346" name="lineno" />
          <variable line="347" name="cond" />
          <variable citdl="arg.find()" line="348" name="comma" />
          <variable citdl="arg.rfind()" line="354" name="colon" />
          <variable citdl="ok" line="355" name="funcname" />
          <variable citdl="self.lookupmodule()" line="358" name="f" />
          <variable citdl="eval()" line="377" name="func" />
          <variable citdl="func.__code__" line="385" name="code" />
          <variable citdl="self.checkline()" line="405" name="line" />
          <variable citdl="self.set_break()" line="408" name="err" />
          <variable line="411" name="bp" />
        </scope>
        <scope ilk="function" line="670" lineend="672" name="do_return" returns="int" signature="do_return(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="711" lineend="714" name="do_quit" returns="int" signature="do_quit(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable attributes="__instancevar__" line="112" name="lineno" />
        <scope ilk="function" line="960" lineend="963" name="help_enable" signature="help_enable()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope doc="This function is called when a return trap is set here." ilk="function" line="184" lineend="188" name="user_return" signature="user_return(frame, return_value)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="return_value" />
        </scope>
        <scope ilk="function" line="985" lineend="986" name="help_step" signature="help_step()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="426" lineend="427" name="do_tbreak" signature="do_tbreak(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="855" lineend="859" name="do_unalias" signature="do_unalias(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="arg.split()" line="856" name="args" />
        </scope>
        <variable citdl="Pdb.do_list" line="814" name="do_l" />
        <scope attributes="protected" ilk="function" line="1193" lineend="1217" name="_runscript" signature="_runscript(filename)">
          <import line="1199" module="__main__" />
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="str" line="1215" name="statement" />
        </scope>
        <scope ilk="function" line="996" lineend="999" name="help_unt" signature="help_unt()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="905" lineend="909" name="help_w" signature="help_w()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable citdl="list" line="862" name="commands_resuming" />
        <variable attributes="__instancevar__" citdl="dict" line="97" name="commands" />
        <scope ilk="function" line="201" lineend="205" name="interaction" signature="interaction(frame, traceback)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="traceback" />
        </scope>
        <scope ilk="function" line="738" lineend="742" name="do_retval" signature="do_retval(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="514" lineend="537" name="do_condition" signature="do_condition(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="arg.split()" line="516" name="args" />
          <variable citdl="int()" line="518" name="bpnum" />
          <variable line="524" name="cond" />
          <variable line="528" name="bp" />
        </scope>
        <scope doc="Produce a reasonable default." ilk="function" line="417" lineend="422" name="defaultFile" returns="str" signature="defaultFile()">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable citdl="str" line="419" name="filename" />
        </scope>
        <scope ilk="function" line="1131" lineend="1164" name="help_commands" signature="help_commands()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="680" lineend="696" name="do_jump" signature="do_jump(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable citdl="int()" ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="816" lineend="841" name="do_whatis" signature="do_whatis(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="eval()" line="818" name="value" />
          <variable citdl="t.__name__" line="823" name="exc_type_name" />
          <variable citdl="value.__code__" line="827" name="code" />
        </scope>
        <scope ilk="function" line="1099" lineend="1101" name="help_EOF" signature="help_EOF()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="98" name="commands_doprompt" />
        <scope ilk="function" line="956" lineend="958" name="help_tbreak" signature="help_tbreak()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="948" lineend="954" name="help_cl" signature="help_cl()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="873" lineend="878" name="print_stack_trace" signature="print_stack_trace()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="114" name="curindex" />
        <scope ilk="function" line="1051" lineend="1052" name="help_args" signature="help_args()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope doc="Handle alias expansion and &apos;;;&apos; separator." ilk="function" line="240" lineend="263" name="precmd" returns="line.replace()" signature="precmd(line)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable citdl="line.replace()" ilk="argument" name="line" />
          <variable citdl="line.split()" line="244" name="args" />
          <variable citdl="int" line="247" name="ii" />
          <variable citdl="line.find()" line="257" name="marker" />
          <variable line="260" name="next" />
        </scope>
        <scope ilk="function" line="1012" lineend="1014" name="help_r" signature="help_r()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="988" lineend="991" name="help_s" signature="help_s()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1058" lineend="1060" name="help_p" signature="help_p()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1089" lineend="1091" name="help_q" signature="help_q()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="978" lineend="983" name="help_condition" signature="help_condition()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="924" lineend="927" name="help_u" signature="help_u()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable citdl="Pdb.help_run" line="1084" name="help_restart" />
        <scope doc="Helper function for break/clear parsing -- may be overridden." ilk="function" line="1169" lineend="1191" name="lookupmodule" returns="str" signature="lookupmodule(filename)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="filename" />
          <variable citdl="os.path.join()" line="1177" name="f" />
          <variable citdl="os.readlink()" line="1187" name="dirname" />
          <variable citdl="os.path.join()" line="1188" name="fullname" />
        </scope>
        <scope ilk="function" line="902" lineend="903" name="help_where" signature="help_where()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="932" lineend="943" name="help_b" signature="help_b()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1022" lineend="1024" name="help_c" signature="help_c()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1054" lineend="1056" name="help_a" signature="help_a()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="497" lineend="512" name="do_disable" signature="do_disable(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="arg.split()" line="498" name="args" />
          <variable citdl="int()" line="501" name="i" />
          <variable line="510" name="bp" />
        </scope>
        <scope ilk="function" line="916" lineend="919" name="help_d" signature="help_d()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="632" lineend="640" name="do_down" signature="do_down(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="1029" lineend="1031" name="help_j" signature="help_j()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1026" lineend="1027" name="help_jump" signature="help_jump()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="895" lineend="900" name="help_h" signature="help_h()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1004" lineend="1007" name="help_n" signature="help_n()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1042" lineend="1049" name="help_l" signature="help_l()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="284" name="cmdqueue" />
        <variable attributes="__instancevar__" line="115" name="curframe" />
        <scope doc="Defines a list of commands associated to a breakpoint." ilk="function" line="309" lineend="332" name="do_commands" signature="do_commands(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="int()" line="315" name="bnum" />
          <variable citdl="str" line="327" name="prompt_back" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.lastcmd" line="175" name="lastcmd" />
        <variable attributes="__instancevar__" citdl="True" line="102" name="commands_defining" />
        <scope doc="Three possibilities, tried in this order: clear -&gt; clear all breaks, ask for confirmation clear file:lineno -&gt; clear all breaks at file:lineno clear bpno bpno ..." ilk="function" line="571" lineend="613" name="do_clear" signature="do_clear(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="arg" />
          <variable citdl="str" line="578" name="reply" />
          <variable citdl="arg.rfind()" line="587" name="i" />
          <variable citdl="list" line="588" name="filename" />
          <variable citdl="int()" line="591" name="lineno" />
          <variable citdl="self.clear_break()" line="593" name="err" />
          <variable citdl="arg.split()" line="598" name="numberlist" />
        </scope>
        <variable citdl="Pdb.do_run" line="668" name="do_restart" />
        <scope ilk="function" line="107" lineend="109" name="reset" signature="reset()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable citdl="Pdb.do_down" line="641" name="do_d" />
        <variable citdl="Pdb.do_break" line="424" name="do_b" />
        <variable citdl="Pdb.do_continue" line="678" name="do_c" />
        <variable citdl="Pdb.do_args" line="736" name="do_a" />
        <scope ilk="function" line="880" lineend="887" name="print_stack_entry" signature="print_stack_entry(frame_lineno, prompt_prefix=line_prefix)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame_lineno" />
          <variable citdl="str" ilk="argument" name="prompt_prefix" />
        </scope>
        <scope ilk="function" line="970" lineend="976" name="help_ignore" signature="help_ignore()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="117" lineend="125" name="setup" signature="setup(f, t)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
          <variable ilk="argument" name="t" />
        </scope>
        <variable citdl="Pdb.do_jump" line="697" name="do_j" />
        <scope ilk="function" line="429" lineend="460" name="lineinfo" returns="tuple" signature="lineinfo(identifier)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="identifier" />
          <variable citdl="tuple" line="430" name="failed" />
          <variable citdl="identifier.split()" line="432" name="idstring" />
          <variable line="435" name="id" />
          <variable citdl="id.split()" line="442" name="parts" />
          <variable citdl="self.lookupmodule()" line="449" name="fname" />
          <variable line="451" name="item" />
          <variable citdl="self.lookupmodule()" line="455" name="f" />
          <variable citdl="find_function()" line="459" name="answer" />
        </scope>
        <variable citdl="Pdb.do_where" line="618" name="do_w" />
        <variable citdl="Pdb.do_up" line="630" name="do_u" />
        <variable citdl="Pdb.do_return" line="673" name="do_r" />
        <variable citdl="Pdb.do_step" line="651" name="do_s" />
        <scope ilk="function" line="756" lineend="760" name="do_p" signature="do_p(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable citdl="Pdb.do_quit" line="716" name="do_q" />
        <scope ilk="function" line="1077" lineend="1082" name="help_run" signature="help_run()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope doc="This function is called when we stop or break at this line." ilk="function" line="150" lineend="158" name="user_line" signature="user_line(frame)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
        </scope>
        <scope attributes="protected" ilk="function" line="745" lineend="754" name="_getval" returns="eval()" signature="_getval(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="t.__name__" line="751" name="exc_type_name" />
        </scope>
        <scope ilk="function" line="1103" lineend="1125" name="help_alias" signature="help_alias()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="843" lineend="853" name="do_alias" signature="do_alias(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="arg.split()" line="844" name="args" />
          <variable citdl="sorted()" line="846" name="keys" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="69" name="_wait_for_mainpyfile" />
        <variable attributes="__instancevar__" citdl="str" line="66" name="prompt" />
        <scope ilk="function" line="1066" lineend="1075" name="help_exec" signature="help_exec()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1086" lineend="1087" name="help_quit" signature="help_quit()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope doc="This function is called if an exception occurs, but only if we are to stop at or just below this level." ilk="function" line="190" lineend="197" name="user_exception" signature="user_exception(frame, exc_info)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="frame" />
          <variable ilk="argument" name="exc_info" />
          <variable citdl="exc_type.__name__" line="195" name="exc_type_name" />
        </scope>
        <scope ilk="function" line="993" lineend="994" name="help_until" signature="help_until()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="61" lineend="104" name="__init__" signature="Pdb(completekey=&apos;tab&apos;, stdin=None, stdout=None, skip=None)">
          <import line="72" module="readline" />
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="completekey" />
          <variable ilk="argument" name="stdin" />
          <variable ilk="argument" name="stdout" />
          <variable ilk="argument" name="skip" />
          <variable line="79" name="envHome" />
          <variable citdl="open()" line="81" name="rcFile" />
        </scope>
        <variable citdl="Pdb.do_next" line="656" name="do_n" />
        <scope ilk="function" line="128" lineend="137" name="execRcLines" signature="execRcLines()">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable citdl="list" line="131" name="rcLines" />
          <variable citdl="list" line="135" name="line" />
        </scope>
        <scope ilk="function" line="1033" lineend="1037" name="help_debug" signature="help_debug()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="1019" lineend="1020" name="help_cont" signature="help_cont()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="699" lineend="709" name="do_debug" signature="do_debug(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="self.curframe.f_globals" line="701" name="globals" />
          <variable citdl="self.curframe.f_locals" line="702" name="locals" />
          <variable citdl="" line="703" name="p" />
        </scope>
        <scope ilk="function" line="675" lineend="677" name="do_continue" returns="int" signature="do_continue(arg)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="65" name="use_rawinput" />
        <variable attributes="__instancevar__" citdl="list" line="77" name="rcLines" />
        <scope ilk="function" line="913" lineend="914" name="help_down" signature="help_down()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <scope doc="Restart program by raising an exception to be caught in the main debugger loop." ilk="function" line="658" lineend="666" name="do_run" signature="do_run(arg)">
          <import line="662" module="shlex" />
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable citdl="list" line="663" name="argv0" />
        </scope>
        <variable citdl="Pdb.do_until" line="646" name="do_unt" />
        <scope ilk="function" line="921" lineend="922" name="help_up" signature="help_up()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="113" name="stack" />
        <scope ilk="function" line="1095" lineend="1097" name="help_whatis" signature="help_whatis()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable citdl="Pdb.help_w" line="911" name="help_bt" />
        <scope doc="Custom displayhook for the exec in default(), which prevents assignment of the _ variable in the builtins." ilk="function" line="207" lineend="213" name="displayhook" signature="displayhook(obj)">
          <variable citdl="Pdb" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
        </scope>
        <scope ilk="function" line="1016" lineend="1017" name="help_continue" signature="help_continue()">
          <variable citdl="Pdb" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int()" line="104" name="commands_bnum" />
        <variable attributes="protected __instancevar__" citdl="int" line="712" name="_user_requested_quit" />
      </scope>
      <scope classrefs="object" ilk="class" name="Repr" />
      <scope classrefs="Exception" doc="Causes a debugger to be restarted for the debugged python program." ilk="class" line="18" lineend="20" name="Restart" />
      <variable citdl="str" line="1259" name="TESTCMD" />
      <variable citdl="list" line="28" name="__all__" />
      <import module="bdb" />
      <import module="cmd" />
      <scope ilk="function" line="31" lineend="49" name="find_function" returns="tuple" signature="find_function(funcname, filename)">
        <variable citdl="open()" line="34" name="fp" />
        <variable ilk="argument" name="filename" />
        <variable citdl="int" line="38" name="lineno" />
        <variable citdl="re.compile()" line="32" name="cre" />
        <variable citdl="tuple" line="39" name="answer" />
        <variable citdl="fp.readline()" line="41" name="line" />
        <variable ilk="argument" name="funcname" />
      </scope>
      <scope doc="# print help" ilk="function" line="1265" lineend="1274" name="help" signature="help()">
        <variable citdl="os.path.join()" line="1267" name="fullname" />
        <variable citdl="os.system()" line="1269" name="sts" />
      </scope>
      <variable citdl="str" line="57" name="line_prefix" />
      <import module="linecache" />
      <scope ilk="function" line="1276" lineend="1316" name="main" signature="main()">
        <variable citdl="Pdb" line="1295" name="pdb" />
        <variable line="1281" name="mainpyfile" />
        <variable line="1313" name="t" />
      </scope>
      <import module="os" />
      <scope ilk="function" line="1253" lineend="1254" name="pm" signature="pm()" />
      <scope ilk="function" line="1239" lineend="1251" name="post_mortem" signature="post_mortem(t=None)">
        <variable citdl="Pdb" line="1249" name="p" />
        <variable ilk="argument" name="t" />
      </scope>
      <import module="pprint" />
      <import module="re" />
      <scope ilk="function" line="1221" lineend="1222" name="run" signature="run(statement, globals=None, locals=None)">
        <variable ilk="argument" name="globals" />
        <variable ilk="argument" name="locals" />
        <variable ilk="argument" name="statement" />
      </scope>
      <scope ilk="function" line="1231" lineend="1232" name="runcall" signature="runcall(*args, **kwds)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwds" />
      </scope>
      <scope ilk="function" line="1227" lineend="1229" name="runctx" signature="runctx(statement, globals, locals)">
        <variable ilk="argument" name="globals" />
        <variable ilk="argument" name="locals" />
        <variable ilk="argument" name="statement" />
      </scope>
      <scope ilk="function" line="1224" lineend="1225" name="runeval" signature="runeval(expression, globals=None, locals=None)">
        <variable ilk="argument" name="globals" />
        <variable ilk="argument" name="expression" />
        <variable ilk="argument" name="locals" />
      </scope>
      <scope ilk="function" line="1234" lineend="1235" name="set_trace" signature="set_trace()" />
      <import module="sys" />
      <scope ilk="function" line="1261" lineend="1262" name="test" signature="test()" />
      <import module="traceback" />
      <variable attributes="protected __hidden__" citdl="_repr.repr" line="26" name="_saferepr" />
      <variable attributes="protected __hidden__" citdl="Repr()" line="24" name="_repr" />
    </scope>
    <scope doc="Python unit testing framework, based on Erich Gamma&apos;s JUnit and Kent Beck&apos;s Smalltalk testing framework. " ilk="blob" lang="Python3" name="unittest">
      <scope doc="Convert a cmp= function into a key= function" ilk="function" name="CmpToKey" signature="CmpToKey(mycmp)" />
      <scope classrefs="TestCase" doc="A test case that wraps a test function.  This is useful for slipping pre-existing test functions into the" ilk="class" name="FunctionTestCase" />
      <scope classrefs="Exception" doc="Raise this exception in a test to skip it.  Usually you can use TestResult.skip() or one of the skipping decorators" ilk="class" name="SkipTest" />
      <scope classrefs="object" doc="A class whose instances are single test cases.  By default, the test code itself should be placed in a method named" ilk="class" name="TestCase" />
      <scope classrefs="object" doc="This class is responsible for loading tests according to various criteria and returning them wrapped in a TestSuite" ilk="class" name="TestLoader" />
      <scope classrefs="object" doc="A command-line program that runs a set of tests; this is primarily for making test modules conveniently executable." ilk="class" name="TestProgram" />
      <scope classrefs="object" doc="Holder for test result information.  Test results are automatically managed by the TestCase and TestSuite" ilk="class" name="TestResult" />
      <scope classrefs="object" doc="A test suite is a composite test consisting of a number of TestCases.  For use, create an instance of TestSuite, then add test case instances." ilk="class" name="TestSuite" />
      <scope classrefs="object" doc="A test runner class that displays results in textual form.  It prints out the names of tests as they are run, errors as they" ilk="class" name="TextTestRunner" />
      <variable citdl="list" name="__all__" />
      <variable citdl="TestLoader" name="defaultTestLoader" />
      <import module="difflib" />
      <scope ilk="function" name="expectedFailure" signature="expectedFailure(func)" />
      <scope ilk="function" name="findTestCases" signature="findTestCases(module, prefix=&apos;test&apos;, sortUsing=&lt;function three_way_cmp at 0x03441228&gt;, suiteClass=&lt;class &apos;unittest.TestSuite&apos;&gt;)" />
      <import module="functools" />
      <scope ilk="function" name="getTestCaseNames" signature="getTestCaseNames(testCaseClass, prefix, sortUsing=&lt;function three_way_cmp at 0x03441228&gt;)" />
      <scope classrefs="object" doc="A command-line program that runs a set of tests; this is primarily for making test modules conveniently executable." ilk="class" name="main" />
      <scope ilk="function" name="makeSuite" signature="makeSuite(testCaseClass, prefix=&apos;test&apos;, sortUsing=&lt;function three_way_cmp at 0x03441228&gt;, suiteClass=&lt;class &apos;unittest.TestSuite&apos;&gt;)" />
      <import module="os" />
      <import module="pprint" />
      <import module="re" />
      <scope doc="Unconditionally skip a test." ilk="function" name="skip" signature="skip(reason)" />
      <scope doc="Skip a test if the condition is true." ilk="function" name="skipIf" signature="skipIf(condition, reason)" />
      <scope doc="Skip a test unless the condition is true." ilk="function" name="skipUnless" signature="skipUnless(condition, reason)" />
      <import module="sys" />
      <scope doc="Return -1 if x &lt; y, 0 if x == y and 1 if x &gt; y" ilk="function" name="three_way_cmp" signature="three_way_cmp(x, y)" />
      <import module="time" />
      <import module="traceback" />
      <import module="types" />
      <import module="warnings" />
    </scope>
    <scope doc="Python interfaces to XML parsers.  This package contains one module:" ilk="blob" lang="Python3" name="xml.parsers">
      <import module="expat" />
    </scope>
    <scope doc="A ScrolledText widget feels like a text widget but also has a vertical scroll bar on its right.  (Later, options may be added to add a horizontal bar as well, to make the bars disappear" ilk="blob" lang="Python3" name="tkinter.scrolledtext">
      <variable citdl="str" name="BOTH" />
      <scope classrefs="Widget" doc="Frame widget which may contain other widgets and can have a 3D border." ilk="class" name="Frame" />
      <scope classrefs="object" doc="Geometry manager Grid.  Base class to use the methods grid_* in every widget." ilk="class" name="Grid" />
      <variable citdl="str" name="LEFT" />
      <scope classrefs="object" doc="Geometry manager Pack.  Base class to use the methods pack_* in every widget." ilk="class" name="Pack" />
      <scope classrefs="object" doc="Geometry manager Place.  Base class to use the methods place_* in every widget." ilk="class" name="Place" />
      <variable citdl="str" name="RIGHT" />
      <scope classrefs="Widget" doc="Scrollbar widget which displays a slider at a certain position." ilk="class" name="Scrollbar" />
      <scope classrefs="Text" ilk="class" line="19" lineend="38" name="ScrolledText">
        <variable attributes="__instancevar__" citdl="Frame()" line="21" name="frame" />
        <scope ilk="function" line="37" lineend="38" name="__str__" returns="str()" signature="__str__()">
          <variable citdl="ScrolledText" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="20" lineend="35" name="__init__" signature="ScrolledText(master=None, **kw)">
          <variable citdl="ScrolledText" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable line="31" name="methods" />
        </scope>
        <variable attributes="__instancevar__" citdl="Scrollbar()" line="22" name="vbar" />
      </scope>
      <scope classrefs="Widget" doc="Text widget which can display text in various forms." ilk="class" name="Text" />
      <variable citdl="str" name="Y" />
      <variable citdl="list" line="14" name="__all__" />
      <scope ilk="function" line="41" lineend="49" name="example" signature="example()">
        <variable citdl="ScrolledText" line="45" name="stext" />
      </scope>
    </scope>
    <scope doc="Class representing application/* type MIME documents." ilk="blob" lang="Python3" name="email.mime.application">
      <scope classrefs="MIMENonMultipart" doc="Class for generating application/* MIME documents." ilk="class" line="13" lineend="36" name="MIMEApplication">
        <scope attributes="__ctor__" doc="Create an application/* type MIME document." ilk="function" line="16" lineend="36" name="__init__" signature="MIMEApplication(_data, _subtype=&apos;octet-stream&apos;, _encoder=encoders.encode_base64, **_params)">
          <variable citdl="MIMEApplication" ilk="argument" name="self" />
          <variable ilk="argument" name="_data" />
          <variable citdl="str" ilk="argument" name="_subtype" />
          <variable citdl="encoders.encode_base64" ilk="argument" name="_encoder" />
          <variable attributes="kwargs" ilk="argument" name="_params" />
        </scope>
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME multipart/* type messages." ilk="class" name="MIMENonMultipart" />
      <variable citdl="list" line="7" name="__all__" />
      <import module="encoders" />
    </scope>
    <scope doc="# Mimic the sqlite3 console shell&apos;s .dump command # Author: Paul Kippes &lt;kippesp@gmail.com&gt;" ilk="blob" lang="Python3" name="sqlite3.dump">
      <scope attributes="protected __hidden__" doc="Returns an iterator to the dump of the database in an SQL text format." ilk="function" line="4" lineend="63" name="_iterdump" signature="_iterdump(connection)">
        <variable ilk="argument" name="connection" />
        <variable citdl="connection.cursor()" line="13" name="cu" />
        <variable citdl="str" line="17" name="q" />
        <variable citdl="cu.execute()" line="23" name="schema_res" />
        <variable citdl="cu.execute()" line="43" name="res" />
        <variable citdl="list" line="44" name="column_names" />
        <variable citdl="cu.execute()" line="48" name="query_res" />
      </scope>
    </scope>
    <scope doc="Utilities needed to emulate Python&apos;s interactive interpreter." ilk="blob" lang="Python3" name="code">
      <scope classrefs="object" doc="Instances of this class have __call__ methods identical in signature to compile_command; the difference is that if the instance compiles program text containing a __future__ statement," ilk="class" name="CommandCompiler" />
      <scope classrefs="InteractiveInterpreter" doc="Closely emulate the behavior of the interactive Python interpreter.  This class builds on InteractiveInterpreter and adds prompting" ilk="class" line="158" lineend="261" name="InteractiveConsole">
        <variable attributes="__instancevar__" citdl="list" line="182" name="buffer" />
        <scope doc="Closely emulate the interactive Python console." ilk="function" line="184" lineend="227" name="interact" signature="interact(banner=None)">
          <variable citdl="InteractiveConsole" ilk="argument" name="self" />
          <variable ilk="argument" name="banner" />
          <variable citdl="str" line="203" name="cprt" />
          <variable citdl="int" line="210" name="more" />
          <variable citdl="sys.ps2" line="214" name="prompt" />
          <variable citdl="self.raw_input()" line="218" name="line" />
        </scope>
        <scope doc="Reset the input buffer." ilk="function" line="180" lineend="182" name="resetbuffer" signature="resetbuffer()">
          <variable citdl="InteractiveConsole" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="177" name="filename" />
        <scope doc="Push a line to the interpreter." ilk="function" line="229" lineend="248" name="push" returns="self.runsource()" signature="push(line)">
          <variable citdl="InteractiveConsole" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable citdl="str.join()" line="244" name="source" />
          <variable citdl="self.runsource()" line="245" name="more" />
        </scope>
        <scope doc="Write a prompt and read a line." ilk="function" line="250" lineend="261" name="raw_input" returns="input()" signature="raw_input(prompt=&apos;&apos;)">
          <variable citdl="InteractiveConsole" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="prompt" />
        </scope>
        <scope attributes="__ctor__" doc="Constructor." ilk="function" line="166" lineend="178" name="__init__" signature="InteractiveConsole(locals=None, filename=&apos;&lt;console&gt;&apos;)">
          <variable citdl="InteractiveConsole" ilk="argument" name="self" />
          <variable ilk="argument" name="locals" />
          <variable citdl="str" ilk="argument" name="filename" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Base class for InteractiveConsole.  This class deals with parsing and interpreter state (the user&apos;s" ilk="class" line="15" lineend="155" name="InteractiveInterpreter">
        <scope doc="Write a string." ilk="function" line="148" lineend="155" name="write" signature="write(data)">
          <variable citdl="InteractiveInterpreter" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="Execute a code object." ilk="function" line="77" lineend="94" name="runcode" signature="runcode(code)">
          <variable citdl="InteractiveInterpreter" ilk="argument" name="self" />
          <variable ilk="argument" name="code" />
        </scope>
        <scope doc="Display the exception that just occurred." ilk="function" line="125" lineend="146" name="showtraceback" signature="showtraceback()">
          <variable citdl="InteractiveInterpreter" ilk="argument" name="self" />
          <variable citdl="traceback.extract_tb()" line="138" name="tblist" />
          <variable citdl="traceback.format_list()" line="140" name="lines" />
        </scope>
        <scope doc="Display the syntax error that just occurred." ilk="function" line="96" lineend="123" name="showsyntaxerror" signature="showsyntaxerror(filename=None)">
          <variable citdl="InteractiveInterpreter" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="SyntaxError()" line="120" name="value" />
          <variable citdl="traceback.format_exception_only()" line="122" name="lines" />
        </scope>
        <variable attributes="__instancevar__" citdl="CommandCompiler()" line="36" name="compile" />
        <scope doc="Compile and run some source in the interpreter." ilk="function" line="38" lineend="75" name="runsource" returns="bool" signature="runsource(source, filename=&apos;&lt;input&gt;&apos;, symbol=&apos;single&apos;)">
          <variable citdl="InteractiveInterpreter" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable citdl="str" ilk="argument" name="filename" />
          <variable citdl="str" ilk="argument" name="symbol" />
          <variable citdl="compile()" line="63" name="code" />
        </scope>
        <scope attributes="__ctor__" doc="Constructor." ilk="function" line="24" lineend="36" name="__init__" signature="InteractiveInterpreter(locals=None)">
          <variable citdl="InteractiveInterpreter" ilk="argument" name="self" />
          <variable citdl="dict" ilk="argument" name="locals" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="35" name="locals" />
      </scope>
      <variable citdl="list" line="12" name="__all__" />
      <scope doc="Compile a command and determine whether it is incomplete." ilk="function" name="compile_command" signature="compile_command(source, filename=&apos;&lt;input&gt;&apos;, symbol=&apos;single&apos;)" />
      <scope doc="Closely emulate the interactive Python interpreter." ilk="function" line="265" lineend="287" name="interact" signature="interact(banner=None, readfunc=None, local=None)">
        <variable ilk="argument" name="local" />
        <variable ilk="argument" name="banner" />
        <variable ilk="argument" name="readfunc" />
        <variable citdl="InteractiveConsole" line="279" name="console" />
      </scope>
      <import module="sys" />
      <import module="traceback" />
    </scope>
    <scope doc="Utilities to support packages." ilk="blob" lang="Python3" name="pkgutil">
      <scope classrefs="object" doc="PEP 302 Importer that wraps Python&apos;s &quot;classic&quot; import algorithm  ImpImporter(dirname) produces a PEP 302 importer that searches that" ilk="class" line="159" lineend="218" name="ImpImporter">
        <scope ilk="function" line="188" lineend="218" name="iter_modules" signature="iter_modules(prefix=&apos;&apos;)">
          <import line="193" module="inspect" />
          <variable citdl="ImpImporter" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="prefix" />
          <variable citdl="dict" line="192" name="yielded" />
          <variable citdl="os.listdir()" line="195" name="filenames" />
          <variable citdl="inspect.getmodulename()" line="199" name="modname" />
          <variable citdl="os.path.join()" line="203" name="path" />
          <variable citdl="True" line="204" name="ispkg" />
          <variable citdl="inspect.getmodulename()" line="209" name="subname" />
        </scope>
        <variable attributes="__instancevar__" line="171" name="path" />
        <scope attributes="__ctor__" ilk="function" line="170" lineend="171" name="__init__" signature="ImpImporter(path=None)">
          <variable citdl="ImpImporter" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
        </scope>
        <scope ilk="function" line="173" lineend="186" name="find_module" returns="ImpLoader()" signature="find_module(fullname, path=None)">
          <variable citdl="ImpImporter" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="list" ilk="argument" name="path" />
          <variable line="175" name="subname" />
        </scope>
      </scope>
      <scope classrefs="object" doc="PEP 302 Loader that wraps Python&apos;s &quot;classic&quot; import algorithm" ilk="class" line="221" lineend="313" name="ImpLoader">
        <scope attributes="protected" ilk="function" line="303" lineend="304" name="_get_delegate" signature="_get_delegate()">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
        </scope>
        <variable citdl="compile()" line="224" name="code" />
        <scope ilk="function" line="283" lineend="300" name="get_source" returns="f.read()" signature="get_source(fullname=None)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable citdl="_fix_name()" ilk="argument" name="fullname" />
          <variable line="286" name="mod_type" />
          <variable citdl="open()" line="295" name="f" />
        </scope>
        <scope attributes="protected" ilk="function" line="246" lineend="252" name="_reopen" signature="_reopen()">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable line="248" name="mod_type" />
        </scope>
        <scope ilk="function" line="262" lineend="264" name="is_package" returns="bool" signature="is_package(fullname)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable citdl="_fix_name()" ilk="argument" name="fullname" />
        </scope>
        <scope ilk="function" line="243" lineend="244" name="get_data" signature="get_data(pathname)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="pathname" />
        </scope>
        <variable attributes="__instancevar__" line="228" name="filename" />
        <scope ilk="function" line="232" lineend="241" name="load_module" returns="imp.load_module()" signature="load_module(fullname)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable citdl="imp.load_module()" line="235" name="mod" />
        </scope>
        <variable attributes="__instancevar__" line="230" name="etc" />
        <scope attributes="protected" ilk="function" line="254" lineend="260" name="_fix_name" signature="_fix_name(fullname)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.file.read()" line="290" name="source" />
        <variable attributes="__instancevar__" citdl="open()" line="227" name="file" />
        <scope ilk="function" line="306" lineend="313" name="get_filename" signature="get_filename(fullname=None)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable citdl="_fix_name()" ilk="argument" name="fullname" />
          <variable line="308" name="mod_type" />
        </scope>
        <scope ilk="function" line="266" lineend="281" name="get_code" returns="compile()" signature="get_code(fullname=None)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable citdl="_fix_name()" ilk="argument" name="fullname" />
          <variable line="269" name="mod_type" />
          <variable citdl="self.get_source()" line="271" name="source" />
        </scope>
        <variable attributes="__instancevar__" line="229" name="fullname" />
        <scope attributes="__ctor__" ilk="function" line="226" lineend="230" name="__init__" signature="ImpLoader(fullname, file, filename, etc)">
          <variable citdl="ImpLoader" ilk="argument" name="self" />
          <variable ilk="argument" name="fullname" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="etc" />
        </scope>
      </scope>
      <scope classrefs="object" doc="module(name[, doc])  Create a module object." ilk="class" name="ModuleType" />
      <variable citdl="list" line="9" name="__all__" />
      <scope doc="Extend a package&apos;s path." ilk="function" line="470" lineend="540" name="extend_path" returns="list" signature="extend_path(path, name)">
        <variable citdl="os.path.join()" line="525" name="pkgfile" />
        <variable citdl="os.path.join()" line="520" name="initfile" />
        <variable ilk="argument" name="name" />
        <variable citdl="open()" line="528" name="f" />
        <variable citdl="str" line="510" name="init_py" />
        <variable citdl="os.path.join()" line="508" name="pname" />
        <variable citdl="os.path.join()" line="517" name="subdir" />
        <variable citdl="list" ilk="argument" name="path" />
        <variable citdl="line.rstrip()" line="534" name="line" />
        <variable citdl="str" line="509" name="sname_pkg" />
      </scope>
      <scope doc="Find a PEP 302 &quot;loader&quot; object for fullname" ilk="function" line="454" lineend="467" name="find_loader" returns="importer.find_module()" signature="find_loader(fullname)">
        <variable ilk="argument" name="fullname" />
        <variable citdl="importer.find_module()" line="463" name="loader" />
      </scope>
      <scope doc="Get a resource from a package." ilk="function" line="542" lineend="577" name="get_data" returns="loader.get_data()" signature="get_data(package, resource)">
        <variable citdl="os.path.join()" line="576" name="resource_name" />
        <variable ilk="argument" name="resource" />
        <variable ilk="argument" name="package" />
        <variable citdl="get_loader()" line="564" name="loader" />
        <variable citdl="resource.split()" line="574" name="parts" />
        <variable citdl="loader.load_module()" line="567" name="mod" />
      </scope>
      <scope doc="Retrieve a PEP 302 importer for the given path item" ilk="function" line="354" lineend="385" name="get_importer" returns="path_hook()" signature="get_importer(path_item)">
        <variable citdl="path_hook()" line="368" name="importer" />
        <variable ilk="argument" name="path_item" />
      </scope>
      <scope doc="Get a PEP 302 &quot;loader&quot; object for module_or_name" ilk="function" line="429" lineend="452" name="get_loader" returns="getattr()" signature="get_loader(module_or_name)">
        <variable ilk="argument" name="module_or_name" />
        <variable citdl="module.__name__" line="449" name="fullname" />
        <variable line="445" name="module" />
        <variable citdl="getattr()" line="446" name="loader" />
      </scope>
      <import module="imp" />
      <scope ilk="function" line="151" lineend="154" name="iter_importer_modules" returns="list" signature="iter_importer_modules(*args, **kw)">
        <variable ilk="argument" name="importer" />
        <variable citdl="str" ilk="argument" name="prefix" />
      </scope>
      <scope doc="Yield PEP 302 importers for the given module name" ilk="function" line="388" lineend="427" name="iter_importers" signature="iter_importers(fullname=&apos;&apos;)">
        <variable citdl="getattr()" line="419" name="path" />
        <variable citdl="str" ilk="argument" name="fullname" />
        <variable citdl="str.join()" line="416" name="pkg" />
      </scope>
      <scope doc="or, if path is None, all top-level modules on sys.path." ilk="function" line="126" lineend="147" name="iter_modules" signature="Yields (module_loader, name, ispkg) for all submodules on path,">
        <variable ilk="argument" name="path" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <variable citdl="iter_importers()" line="138" name="importers" />
        <variable citdl="dict" line="142" name="yielded" />
      </scope>
      <scope ilk="function" line="320" lineend="346" name="iter_zipimport_modules" signature="iter_zipimport_modules(importer, prefix=&apos;&apos;)">
        <variable citdl="sorted()" line="321" name="dirlist" />
        <variable attributes="protected" citdl="importer.prefix" line="322" name="_prefix" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <variable citdl="dict" line="324" name="yielded" />
        <variable ilk="argument" name="importer" />
        <variable citdl="inspect.getmodulename()" line="340" name="modname" />
        <variable citdl="len()" line="323" name="plen" />
        <variable line="330" name="fn" />
      </scope>
      <import module="os" />
      <scope ilk="function" line="15" lineend="25" name="read_code" returns="marshal.load()" signature="read_code(stream)">
        <variable citdl="stream.read()" line="20" name="magic" />
        <variable ilk="argument" name="stream" />
      </scope>
      <scope doc="Make a trivial single-dispatch generic function" ilk="function" line="28" lineend="65" name="simplegeneric" returns="simplegeneric.wrapper" signature="simplegeneric(func)">
        <scope ilk="function" line="56" lineend="60" name="register" signature="register(typ, func=None)">
          <variable ilk="argument" name="typ" />
          <variable ilk="argument" name="func" />
        </scope>
        <variable citdl="dict" line="30" name="registry" />
        <variable ilk="argument" name="func" />
        <scope ilk="function" line="31" lineend="50" name="wrapper" returns="simplegeneric.func()" signature="wrapper(*args, **kw)">
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable line="32" name="ob" />
          <variable citdl="list" line="38" name="mro" />
          <scope classrefs="ob.__class__ object" ilk="class" line="41" lineend="42" name="cls" />
          <variable citdl="func.__name__" line="52" name="__name__" />
          <variable citdl="dict" line="62" name="__dict__" />
          <variable citdl="func.__doc__" line="63" name="__doc__" />
          <variable citdl="simplegeneric.register" line="64" name="register" />
        </scope>
      </scope>
      <import module="sys" />
      <scope doc="on path, or, if path is None, all accessible modules." ilk="function" line="68" lineend="123" name="walk_packages" signature="Yields (module_loader, name, ispkg) for all modules recursively">
        <variable ilk="argument" name="onerror" />
        <variable citdl="list" ilk="argument" name="path" />
        <variable citdl="str" ilk="argument" name="prefix" />
        <scope ilk="function" line="97" lineend="100" name="seen" returns="bool" signature="seen(p, m={})">
          <variable ilk="argument" name="p" />
          <variable citdl="dict" ilk="argument" name="m" />
        </scope>
      </scope>
      <import module="zipimport" />
      <scope classrefs="object" doc="zipimporter(archivepath) -&gt; zipimporter object  Create a new zipimporter instance. &apos;archivepath&apos; must be a path to" ilk="class" name="zipimporter" />
    </scope>
    <scope doc="This module tries to retrieve as much platform-identifying data as possible. It makes this information available via function APIs. " ilk="blob" lang="Python3" name="platform">
      <variable citdl="str" line="90" name="__copyright__" />
      <variable citdl="str" line="111" name="__version__" />
      <scope doc="Queries the given executable (defaults to the Python interpreter binary) for various architecture information." ilk="function" line="938" lineend="1021" name="architecture" returns="tuple" signature="architecture(...)">
        <variable citdl="sys.executable" ilk="argument" name="executable" />
        <variable citdl="list" line="989" name="fileout" />
        <variable citdl="_syscmd_file()" line="972" name="output" />
        <variable citdl="str" ilk="argument" name="bits" />
        <variable citdl="str" ilk="argument" name="linkage" />
        <variable citdl="struct.calcsize()" line="964" name="size" />
      </scope>
      <scope doc="Tries to determine the name of the Linux OS distribution name." ilk="function" line="329" lineend="345" name="dist" returns="linux_distribution()" signature="dist(distname=&apos;&apos;, version=&apos;&apos;, id=&apos;&apos;, supported_dists=(&apos;SuSE&apos;, &apos;debian&apos;, &apos;fedora&apos;, &apos;redhat&apos;, &apos;centos&apos;, &apos;mandrake&apos;, &apos;mandriva&apos;, &apos;rocks&apos;, &apos;slackware&apos;, &apos;yellowdog&apos;, &apos;gentoo&apos;, &apos;UnitedLinux&apos;, &apos;turbolinux&apos;))">
        <variable citdl="str" ilk="argument" name="distname" />
        <variable citdl="str" ilk="argument" name="version" />
        <variable citdl="str" ilk="argument" name="id" />
        <variable citdl="tuple" ilk="argument" name="supported_dists" />
      </scope>
      <scope doc="Version interface for Jython." ilk="function" line="736" lineend="767" name="java_ver" returns="tuple" signature="java_ver(release=&apos;&apos;, vendor=&apos;&apos;, vminfo=(&apos;&apos;, &apos;&apos;, &apos;&apos;), osinfo=(&apos;&apos;, &apos;&apos;, &apos;&apos;))">
        <variable citdl="tuple" ilk="argument" name="osinfo" />
        <variable citdl="_java_getprop()" line="757" name="vm_name" />
        <variable citdl="_java_getprop()" line="763" name="os_name" />
        <variable citdl="str" ilk="argument" name="vendor" />
        <variable citdl="tuple" ilk="argument" name="vminfo" />
        <variable citdl="_java_getprop()" line="762" name="os_arch" />
        <variable citdl="_java_getprop()" line="764" name="os_version" />
        <variable citdl="_java_getprop()" line="758" name="vm_vendor" />
        <variable citdl="str" ilk="argument" name="release" />
        <variable citdl="_java_getprop()" line="759" name="vm_release" />
      </scope>
      <scope doc="Tries to determine the libc version that the file executable (which defaults to the Python interpreter) is linked against." ilk="function" line="123" lineend="174" name="libc_ver" returns="tuple" signature="libc_ver(...)">
        <variable line="146" name="binary" />
        <variable citdl="sys.executable" ilk="argument" name="executable" />
        <variable citdl="int" ilk="argument" name="chunksize" />
        <variable citdl="str" ilk="argument" name="lib" />
        <variable citdl="open()" line="145" name="f" />
        <variable citdl="_libc_search.search()" line="149" name="m" />
        <variable citdl="int" line="147" name="pos" />
        <variable citdl="glibcversion" ilk="argument" name="version" />
      </scope>
      <scope doc="Tries to determine the name of the Linux OS distribution name." ilk="function" line="273" lineend="325" name="linux_distribution" returns="tuple" signature="linux_distribution(distname=&apos;&apos;, version=&apos;&apos;, id=&apos;&apos;, supported_dists=(&apos;SuSE&apos;, &apos;debian&apos;, &apos;fedora&apos;, &apos;redhat&apos;, &apos;centos&apos;, &apos;mandrake&apos;, &apos;mandriva&apos;, &apos;rocks&apos;, &apos;slackware&apos;, &apos;yellowdog&apos;, &apos;gentoo&apos;, &apos;UnitedLinux&apos;, &apos;turbolinux&apos;), full_distribution_name=1)">
        <variable citdl="f.readline()" line="315" name="firstline" />
        <variable citdl="tuple" ilk="argument" name="supported_dists" />
        <variable citdl="int" ilk="argument" name="full_distribution_name" />
        <variable citdl="_distname" ilk="argument" name="distname" />
        <variable citdl="open()" line="314" name="f" />
        <variable citdl="_release_filename.match()" line="304" name="m" />
        <variable citdl="os.listdir()" line="298" name="etc" />
        <variable citdl="str" ilk="argument" name="version" />
        <variable citdl="_id" ilk="argument" name="id" />
      </scope>
      <scope doc="Get MacOS version information and return it as tuple (release, versioninfo, machine) with versioninfo being a tuple (version, dev_stage, non_release_version)." ilk="function" line="679" lineend="723" name="mac_ver" returns="tuple" signature="mac_ver(release=&apos;&apos;, versioninfo=(&apos;&apos;, &apos;&apos;, &apos;&apos;), machine=&apos;&apos;)">
        <variable citdl="int" line="704" name="major" />
        <variable citdl="int" line="706" name="patch" />
        <variable citdl="{}.get()" ilk="argument" name="machine" />
        <variable citdl="str" ilk="argument" name="release" />
        <variable citdl="tuple" ilk="argument" name="versioninfo" />
        <variable citdl="int" line="705" name="minor" />
      </scope>
      <scope doc="Returns the machine type, e.g." ilk="function" line="1201" lineend="1208" name="machine" signature="machine()" />
      <scope doc="Returns the computer&apos;s network name (which may not be fully qualified)" ilk="function" line="1173" lineend="1181" name="node" signature="node()" />
      <import module="os" />
      <scope doc="Returns a single string identifying the underlying platform with as much useful information as possible (but no more :)." ilk="function" line="1415" lineend="1493" name="platform" returns="_platform_cache.get()" signature="platform(aliased=0, terse=0)">
        <variable citdl="int" ilk="argument" name="aliased" />
        <variable citdl="int" ilk="argument" name="terse" />
        <variable citdl="_platform()" line="1450" name="platform" />
        <variable citdl="str" line="1442" name="processor" />
        <variable citdl="_platform_cache.get()" line="1434" name="result" />
      </scope>
      <scope doc="Portable popen() interface." ilk="function" line="401" lineend="432" name="popen" returns="popen.popen()" signature="popen(cmd, mode=&apos;r&apos;, bufsize=None)">
        <variable ilk="argument" name="cmd" />
        <variable ilk="argument" name="bufsize" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="_popen" line="407" name="popen" />
      </scope>
      <scope doc="Returns the (true) processor name, e.g." ilk="function" line="1210" lineend="1220" name="processor" signature="processor()" />
      <scope doc="Returns a string identifying the Python implementation branch." ilk="function" line="1368" lineend="1380" name="python_branch" signature="python_branch()" />
      <scope doc="Returns a tuple (buildno, builddate) stating the Python build number and date as strings." ilk="function" line="1395" lineend="1401" name="python_build" returns="list" signature="python_build()" />
      <scope doc="Returns a string identifying the compiler used for compiling Python." ilk="function" line="1403" lineend="1409" name="python_compiler" signature="python_compiler()" />
      <scope doc="Returns a string identifying the Python implementation." ilk="function" line="1335" lineend="1345" name="python_implementation" signature="python_implementation()" />
      <scope doc="Returns a string identifying the Python implementation revision." ilk="function" line="1382" lineend="1393" name="python_revision" signature="python_revision()" />
      <scope doc="Returns the Python version as string &apos;major.minor.patchlevel&apos;" ilk="function" line="1347" lineend="1355" name="python_version" signature="python_version()" />
      <scope doc="Returns the Python version as tuple (major, minor, patchlevel) of strings." ilk="function" line="1357" lineend="1366" name="python_version_tuple" returns="tuple()" signature="python_version_tuple()" />
      <import module="re" />
      <scope doc="Returns the system&apos;s release, e.g." ilk="function" line="1183" lineend="1190" name="release" signature="release()" />
      <import module="sys" />
      <scope doc="Returns the system/OS name, e.g." ilk="function" line="1164" lineend="1171" name="system" signature="system()" />
      <scope doc="marketing names used for some systems." ilk="function" line="771" lineend="821" name="system_alias" returns="tuple" signature="Returns (system,release,version) aliased to common">
        <variable citdl="str.join()" ilk="argument" name="release" />
        <variable citdl="int()" line="794" name="major" />
        <variable citdl="str" ilk="argument" name="version" />
        <variable citdl="str" ilk="argument" name="system" />
        <variable citdl="release.split()" line="791" name="l" />
      </scope>
      <scope doc="Fairly portable uname interface." ilk="function" line="1027" lineend="1160" name="uname" returns="tuple" signature="uname()">
        <variable citdl="_node()" line="1060" name="node" />
        <variable citdl="str" line="1057" name="system" />
        <variable citdl="int" line="1063" name="use_syscmd_ver" />
        <variable citdl="str" line="1061" name="machine" />
        <variable citdl="str" line="1059" name="version" />
        <variable citdl="int" line="1040" name="no_os_uname" />
        <variable citdl="str" line="1058" name="release" />
        <variable citdl="str" line="1045" name="processor" />
        <variable attributes="protected" citdl="tuple" line="1159" name="_uname_cache" />
      </scope>
      <scope doc="Returns the system&apos;s release version, e.g." ilk="function" line="1192" lineend="1199" name="version" signature="version()" />
      <scope doc="Get additional version information from the Windows Registry and return a tuple (version,csd,ptype) referring to version number, CSD level and OS type (multi/single processor)." ilk="function" line="526" lineend="661" name="win32_ver" returns="tuple" signature="win32_ver(release=&apos;&apos;, version=&apos;&apos;, csd=&apos;&apos;, ptype=&apos;&apos;)">
        <variable citdl="winreg.CloseKey" line="574" name="RegCloseKey" />
        <variable citdl="RegOpenKeyEx()" line="637" name="keyCurVer" />
        <variable citdl="winreg.HKEY_LOCAL_MACHINE" line="575" name="HKEY_LOCAL_MACHINE" />
        <variable citdl="str" ilk="argument" name="csd" />
        <variable citdl="int" line="578" name="VER_NT_WORKSTATION" />
        <variable citdl="sys.getwindowsversion" line="571" name="GetVersionEx" />
        <variable citdl="int" line="577" name="VER_PLATFORM_WIN32_NT" />
        <variable citdl="str" ilk="argument" name="ptype" />
        <variable citdl="winreg.OpenKeyEx" line="573" name="RegOpenKeyEx" />
        <variable citdl="winreg.QueryValueEx" line="572" name="RegQueryValueEx" />
        <variable citdl="str" ilk="argument" name="version" />
        <variable line="649" name="build" />
        <variable line="616" name="productType" />
        <variable citdl="str" ilk="argument" name="release" />
        <variable citdl="int" line="576" name="VER_PLATFORM_WIN32_WINDOWS" />
        <variable citdl="str" line="586" name="regkey" />
      </scope>
      <variable attributes="__hidden__" citdl="bool" line="1499" name="terse" />
      <scope attributes="protected __hidden__" doc="Interface to the system&apos;s uname command." ilk="function" line="883" lineend="899" name="_syscmd_uname" returns="str" signature="_syscmd_uname(option, default=&apos;&apos;)">
        <variable ilk="argument" name="option" />
        <variable citdl="str" ilk="argument" name="default" />
        <variable citdl="os.popen()" line="891" name="f" />
        <variable line="894" name="output" />
        <variable citdl="f.close()" line="895" name="rc" />
      </scope>
      <scope attributes="protected __hidden__" doc="Normalize the version and build strings and return a single version string using the format major.minor.build (or patchlevel)." ilk="function" line="434" lineend="449" name="_norm_version" returns="str.join()" signature="_norm_version(version, build=&apos;&apos;)">
        <variable citdl="str.join()" ilk="argument" name="version" />
        <variable citdl="str" ilk="argument" name="build" />
        <variable citdl="version.split()" line="439" name="l" />
        <variable citdl="map()" line="443" name="ints" />
        <variable citdl="list()" line="445" name="strings" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="226" name="_release_filename" />
      <scope attributes="protected __hidden__" doc="Tries some special tricks to get the distribution information in case the default method fails." ilk="function" line="176" lineend="224" name="_dist_try_harder" returns="tuple" signature="_dist_try_harder(distname, version, id)">
        <variable citdl="str" ilk="argument" name="distname" />
        <variable citdl="list" ilk="argument" name="version" />
        <variable ilk="argument" name="id" />
        <variable line="187" name="info" />
        <variable citdl="line.split()" line="190" name="tv" />
        <variable citdl="value.split()" line="198" name="values" />
        <variable citdl="line.split()" line="206" name="pkg" />
        <variable citdl="os.listdir()" line="214" name="verfiles" />
      </scope>
      <scope attributes="protected __hidden__" doc="Helper to format the platform string in a filename compatible format e.g." ilk="function" line="825" lineend="855" name="_platform" returns="str.join()" signature="_platform(*args)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable citdl="platform.replace()" line="831" name="platform" />
        <variable citdl="platform.replace()" line="848" name="cleaned" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="1229" name="_ironpython_sys_version_parser" />
      <variable attributes="protected __hidden__" citdl="dict" line="930" name="_default_architecture" />
      <variable attributes="protected __hidden__" line="1025" name="_uname_cache" />
      <scope attributes="protected __hidden__" ilk="function" line="246" lineend="271" name="_parse_release_file" returns="tuple" signature="_parse_release_file(firstline)">
        <variable ilk="argument" name="firstline" />
        <variable citdl="str" line="251" name="version" />
        <variable citdl="str" line="252" name="id" />
        <variable citdl="_release_version.match()" line="255" name="m" />
        <variable line="266" name="l" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="117" name="_libc_search" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="227" name="_lsb_release_version" />
      <scope attributes="protected __hidden__" doc="Read a value for name from the registry key." ilk="function" line="507" lineend="524" name="_win32_getvalue" returns="str" signature="_win32_getvalue(key, name, default=&apos;&apos;)">
        <import line="516" module="win32api" symbol="RegQueryValueEx" />
        <import line="519" module="winreg" />
        <variable ilk="argument" name="key" />
        <variable ilk="argument" name="name" />
        <variable citdl="str" ilk="argument" name="default" />
        <variable citdl="winreg.QueryValueEx" line="520" name="RegQueryValueEx" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="663" lineend="673" name="_mac_ver_lookup" returns="list" signature="_mac_ver_lookup(selectors, default=None)">
        <import line="665" module="_gestalt" symbol="gestalt" />
        <variable ilk="argument" name="selectors" />
        <variable ilk="argument" name="default" />
        <variable citdl="list" line="666" name="l" />
        <variable citdl="l.append" line="667" name="append" />
      </scope>
      <variable attributes="protected __hidden__" citdl="tuple" line="241" name="_supported_dists" />
      <variable attributes="__hidden__" citdl="bool" line="1500" name="aliased" />
      <scope attributes="protected __hidden__" doc="Helper to determine the node name of this machine." ilk="function" line="857" lineend="870" name="_node" returns="str" signature="_node(default=&apos;&apos;)">
        <import line="862" module="socket" />
        <variable citdl="str" ilk="argument" name="default" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="231" name="_release_version" />
      <variable attributes="protected __hidden__" citdl="dict" line="1240" name="_sys_version_cache" />
      <scope attributes="protected __hidden__" doc="Interface to the system&apos;s file command." ilk="function" line="901" lineend="924" name="_syscmd_file" returns="str" signature="_syscmd_file(target, default=&apos;&apos;)">
        <variable citdl="_follow_symlinks()" ilk="argument" name="target" />
        <variable citdl="str" ilk="argument" name="default" />
        <variable citdl="os.popen()" line="916" name="f" />
        <variable line="919" name="output" />
        <variable citdl="f.close()" line="920" name="rc" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="1235" name="_pypy_sys_version_parser" />
      <scope attributes="protected __hidden__" doc="Tries to figure out the OS version used and returns a tuple (system,release,version)." ilk="function" line="455" lineend="505" name="_syscmd_ver" returns="tuple" signature="_syscmd_ver(system=&apos;&apos;, release=&apos;&apos;, version=&apos;&apos;, supported_platforms=(&apos;win32&apos;, &apos;win16&apos;, &apos;dos&apos;, &apos;os2&apos;))">
        <variable citdl="str" ilk="argument" name="system" />
        <variable citdl="list" ilk="argument" name="release" />
        <variable citdl="_norm_version()" ilk="argument" name="version" />
        <variable citdl="tuple" ilk="argument" name="supported_platforms" />
        <variable citdl="popen()" line="475" name="pipe" />
        <variable citdl="pipe.read()" line="476" name="info" />
        <variable citdl="_ver_output.match()" line="494" name="m" />
      </scope>
      <scope attributes="protected __hidden__" doc="Fairly portable (alternative) popen implementation." ilk="class" line="347" lineend="399" name="_popen">
        <variable citdl="str" line="358" name="tmpfile" />
        <variable citdl="open()" line="359" name="pipe" />
        <variable line="360" name="bufsize" />
        <variable citdl="str" line="361" name="mode" />
        <scope attributes="__ctor__" ilk="function" line="363" lineend="372" name="__init__" signature="_popen(cmd, mode=&apos;r&apos;, bufsize=None)">
          <import line="367" module="tempfile" />
          <variable citdl="_popen" ilk="argument" name="self" />
          <variable ilk="argument" name="cmd" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable ilk="argument" name="bufsize" />
        </scope>
        <scope ilk="function" line="374" lineend="376" name="read" returns="self.pipe.read()" signature="read()">
          <variable citdl="_popen" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="378" lineend="381" name="readlines" returns="self.pipe.readlines()" signature="readlines()">
          <variable citdl="_popen" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="383" lineend="396" name="close" returns="self.pipe.close()" signature="close(remove=os.unlink, error=os.error)">
          <variable citdl="_popen" ilk="argument" name="self" />
          <variable citdl="os.unlink" ilk="argument" name="remove" />
          <variable citdl="os.error" ilk="argument" name="error" />
          <variable citdl="self.pipe.close()" line="388" name="rc" />
        </scope>
        <variable citdl="_popen.close" line="399" name="__del__" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="1413" name="_platform_cache" />
      <scope attributes="protected __hidden__" ilk="function" line="675" lineend="677" name="_bcd2str" returns="list" signature="_bcd2str(bcd)">
        <variable ilk="argument" name="bcd" />
      </scope>
      <scope attributes="protected __hidden__" doc="In case filepath is a symlink, follow it until a real file is reached." ilk="function" line="872" lineend="881" name="_follow_symlinks" returns="os.path.abspath()" signature="_follow_symlinks(filepath)">
        <variable citdl="os.path.abspath()" ilk="argument" name="filepath" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="1224" name="_sys_version_parser" />
      <variable attributes="protected __hidden__" line="936" name="_architecture_split" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="451" name="_ver_output" />
      <scope attributes="protected __hidden__" doc="Returns a parsed version of Python&apos;s sys.version as tuple (name, version, branch, revision, buildno, builddate, compiler) referring to the Python implementation name, version, branch, revision, build number, build date/time as string and the compiler" ilk="function" line="1242" lineend="1333" name="_sys_version" returns="_sys_version_cache.get()" signature="_sys_version(sys_version=None)">
        <variable citdl="sys.version" ilk="argument" name="sys_version" />
        <variable citdl="tuple" line="1267" name="result" />
        <variable citdl="str" line="1274" name="name" />
        <variable citdl="_sys_version_parser.match()" line="1275" name="match" />
        <variable citdl="str" line="1281" name="buildno" />
        <variable citdl="str" line="1282" name="builddate" />
        <variable citdl="sys.platform" line="1293" name="compiler" />
        <variable citdl="str" line="1321" name="branch" />
        <variable citdl="str" line="1322" name="revision" />
        <variable citdl="version.split()" line="1325" name="l" />
        <variable citdl="str.join()" line="1328" name="version" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="725" lineend="734" name="_java_getprop" returns="System.getProperty()" signature="_java_getprop(name, default)">
        <import line="727" module="java.lang" symbol="System" />
        <variable ilk="argument" name="name" />
        <variable ilk="argument" name="default" />
        <variable citdl="System.getProperty()" line="729" name="value" />
      </scope>
    </scope>
    <scope doc="Internal support module for sre" ilk="blob" lang="Python3" name="sre_constants">
      <variable citdl="str" line="33" name="ANY" />
      <variable citdl="str" line="34" name="ANY_ALL" />
      <variable citdl="str" line="35" name="ASSERT" />
      <variable citdl="str" line="36" name="ASSERT_NOT" />
      <variable citdl="str" line="37" name="AT" />
      <variable citdl="dict" line="130" name="ATCODES" />
      <variable citdl="str" line="67" name="AT_BEGINNING" />
      <variable citdl="str" line="68" name="AT_BEGINNING_LINE" />
      <variable citdl="str" line="69" name="AT_BEGINNING_STRING" />
      <variable citdl="str" line="70" name="AT_BOUNDARY" />
      <variable citdl="str" line="72" name="AT_END" />
      <variable citdl="str" line="73" name="AT_END_LINE" />
      <variable citdl="str" line="74" name="AT_END_STRING" />
      <variable citdl="dict" line="172" name="AT_LOCALE" />
      <variable citdl="str" line="75" name="AT_LOC_BOUNDARY" />
      <variable citdl="str" line="76" name="AT_LOC_NON_BOUNDARY" />
      <variable citdl="dict" line="167" name="AT_MULTILINE" />
      <variable citdl="str" line="71" name="AT_NON_BOUNDARY" />
      <variable citdl="dict" line="177" name="AT_UNICODE" />
      <variable citdl="str" line="77" name="AT_UNI_BOUNDARY" />
      <variable citdl="str" line="78" name="AT_UNI_NON_BOUNDARY" />
      <variable citdl="str" line="38" name="BIGCHARSET" />
      <variable citdl="str" line="39" name="BRANCH" />
      <variable citdl="str" line="40" name="CALL" />
      <variable citdl="str" line="41" name="CATEGORY" />
      <variable citdl="str" line="81" name="CATEGORY_DIGIT" />
      <variable citdl="str" line="87" name="CATEGORY_LINEBREAK" />
      <variable citdl="str" line="90" name="CATEGORY_LOC_NOT_WORD" />
      <variable citdl="str" line="89" name="CATEGORY_LOC_WORD" />
      <variable citdl="str" line="82" name="CATEGORY_NOT_DIGIT" />
      <variable citdl="str" line="88" name="CATEGORY_NOT_LINEBREAK" />
      <variable citdl="str" line="84" name="CATEGORY_NOT_SPACE" />
      <variable citdl="str" line="86" name="CATEGORY_NOT_WORD" />
      <variable citdl="str" line="83" name="CATEGORY_SPACE" />
      <variable citdl="str" line="91" name="CATEGORY_UNI_DIGIT" />
      <variable citdl="str" line="97" name="CATEGORY_UNI_LINEBREAK" />
      <variable citdl="str" line="92" name="CATEGORY_UNI_NOT_DIGIT" />
      <variable citdl="str" line="98" name="CATEGORY_UNI_NOT_LINEBREAK" />
      <variable citdl="str" line="94" name="CATEGORY_UNI_NOT_SPACE" />
      <variable citdl="str" line="96" name="CATEGORY_UNI_NOT_WORD" />
      <variable citdl="str" line="93" name="CATEGORY_UNI_SPACE" />
      <variable citdl="str" line="95" name="CATEGORY_UNI_WORD" />
      <variable citdl="str" line="85" name="CATEGORY_WORD" />
      <variable citdl="str" line="42" name="CHARSET" />
      <variable citdl="dict" line="137" name="CHCODES" />
      <variable citdl="dict" line="182" name="CH_LOCALE" />
      <variable citdl="dict" line="193" name="CH_UNICODE" />
      <variable citdl="str" line="30" name="FAILURE" />
      <variable citdl="str" line="43" name="GROUPREF" />
      <variable citdl="str" line="45" name="GROUPREF_EXISTS" />
      <variable citdl="str" line="44" name="GROUPREF_IGNORE" />
      <variable citdl="str" line="46" name="IN" />
      <variable citdl="str" line="48" name="INFO" />
      <variable citdl="str" line="47" name="IN_IGNORE" />
      <variable citdl="str" line="49" name="JUMP" />
      <variable citdl="str" line="50" name="LITERAL" />
      <variable citdl="str" line="51" name="LITERAL_IGNORE" />
      <variable citdl="int" line="16" name="MAGIC" />
      <variable citdl="str" line="52" name="MARK" />
      <variable citdl="int" line="20" name="MAXREPEAT" />
      <variable citdl="str" line="53" name="MAX_REPEAT" />
      <variable citdl="str" line="54" name="MAX_UNTIL" />
      <variable citdl="str" line="55" name="MIN_REPEAT" />
      <variable citdl="str" line="64" name="MIN_REPEAT_ONE" />
      <variable citdl="str" line="56" name="MIN_UNTIL" />
      <variable citdl="str" line="57" name="NEGATE" />
      <variable citdl="str" line="58" name="NOT_LITERAL" />
      <variable citdl="str" line="59" name="NOT_LITERAL_IGNORE" />
      <variable citdl="dict" line="100" name="OPCODES" />
      <variable citdl="dict" line="160" name="OP_IGNORE" />
      <variable citdl="str" line="60" name="RANGE" />
      <variable citdl="str" line="61" name="REPEAT" />
      <variable citdl="str" line="62" name="REPEAT_ONE" />
      <variable citdl="int" line="213" name="SRE_FLAG_ASCII" />
      <variable citdl="int" line="212" name="SRE_FLAG_DEBUG" />
      <variable citdl="int" line="209" name="SRE_FLAG_DOTALL" />
      <variable citdl="int" line="206" name="SRE_FLAG_IGNORECASE" />
      <variable citdl="int" line="207" name="SRE_FLAG_LOCALE" />
      <variable citdl="int" line="208" name="SRE_FLAG_MULTILINE" />
      <variable citdl="int" line="205" name="SRE_FLAG_TEMPLATE" />
      <variable citdl="int" line="210" name="SRE_FLAG_UNICODE" />
      <variable citdl="int" line="211" name="SRE_FLAG_VERBOSE" />
      <variable citdl="int" line="218" name="SRE_INFO_CHARSET" />
      <variable citdl="int" line="217" name="SRE_INFO_LITERAL" />
      <variable citdl="int" line="216" name="SRE_INFO_PREFIX" />
      <variable citdl="str" line="63" name="SUBPATTERN" />
      <variable citdl="str" line="31" name="SUCCESS" />
      <scope classrefs="Exception" ilk="class" line="25" lineend="26" name="error" />
      <scope ilk="function" line="147" lineend="153" name="makedict" returns="dict" signature="makedict(list)">
        <variable citdl="int" line="149" name="i" />
        <variable ilk="argument" name="list" />
        <variable citdl="dict" line="148" name="d" />
      </scope>
      <scope attributes="__hidden__" ilk="function" line="221" lineend="225" name="dump" signature="dump(f, d, prefix)">
        <variable ilk="argument" name="f" />
        <variable ilk="argument" name="d" />
        <variable ilk="argument" name="prefix" />
        <variable citdl="d.items()" line="222" name="items" />
      </scope>
      <variable attributes="__hidden__" citdl="open()" line="226" name="f" />
    </scope>
    <scope doc="JSON (JavaScript Object Notation) &lt;http://json.org&gt; is a subset of JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data interchange format." ilk="blob" lang="Python3" name="json">
      <scope classrefs="object" doc="Simple JSON &lt;http://json.org&gt; decoder  Performs the following translations in decoding by default:" ilk="class" name="JSONDecoder" />
      <scope classrefs="object" doc="Extensible JSON &lt;http://json.org&gt; encoder for Python data structures.  Supports the following objects and types by default:" ilk="class" name="JSONEncoder" />
      <variable citdl="list" line="101" name="__all__" />
      <variable citdl="str" line="106" name="__author__" />
      <variable citdl="str" line="100" name="__version__" />
      <import module="decoder" />
      <scope doc="Serialize ``obj`` as a JSON formatted stream to ``fp`` (a ``.write()``-supporting file-like object)." ilk="function" line="121" lineend="179" name="dump" signature="dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, **kw)">
        <variable ilk="argument" name="fp" />
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="default" />
        <variable citdl="True" ilk="argument" name="check_circular" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable citdl="False" ilk="argument" name="skipkeys" />
        <variable citdl="True" ilk="argument" name="allow_nan" />
        <variable ilk="argument" name="indent" />
        <variable citdl="True" ilk="argument" name="ensure_ascii" />
        <variable ilk="argument" name="separators" />
        <variable citdl="_default_encoder.iterencode()" line="168" name="iterable" />
        <variable citdl="JSONEncoder" ilk="argument" name="cls" />
      </scope>
      <scope doc="Serialize ``obj`` to a JSON formatted ``str``." ilk="function" line="182" lineend="233" name="dumps" returns="_default_encoder.encode()" signature="dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, **kw)">
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="default" />
        <variable citdl="True" ilk="argument" name="check_circular" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable citdl="False" ilk="argument" name="skipkeys" />
        <variable citdl="True" ilk="argument" name="allow_nan" />
        <variable ilk="argument" name="indent" />
        <variable citdl="True" ilk="argument" name="ensure_ascii" />
        <variable ilk="argument" name="separators" />
        <variable citdl="JSONEncoder" ilk="argument" name="cls" />
      </scope>
      <import module="encoder" />
      <scope doc="Deserialize ``fp`` (a ``.read()``-supporting file-like object containing a JSON document) to a Python object." ilk="function" line="239" lineend="256" name="load" returns="loads()" signature="load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)">
        <variable ilk="argument" name="fp" />
        <variable ilk="argument" name="parse_constant" />
        <variable ilk="argument" name="parse_float" />
        <variable ilk="argument" name="object_hook" />
        <variable ilk="argument" name="parse_int" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable ilk="argument" name="object_pairs_hook" />
        <variable ilk="argument" name="cls" />
      </scope>
      <scope doc="Deserialize ``s`` (a ``str`` instance containing a JSON document) to a Python object." ilk="function" line="259" lineend="304" name="loads" returns="_default_decoder.decode()" signature="loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)">
        <variable ilk="argument" name="parse_constant" />
        <variable ilk="argument" name="parse_float" />
        <variable ilk="argument" name="object_hook" />
        <variable ilk="argument" name="encoding" />
        <variable ilk="argument" name="parse_int" />
        <variable ilk="argument" name="s" />
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable ilk="argument" name="object_pairs_hook" />
        <variable citdl="JSONDecoder" ilk="argument" name="cls" />
      </scope>
      <import module="scanner" />
      <import module="tool" />
      <variable attributes="protected __hidden__" citdl="JSONEncoder()" line="111" name="_default_encoder" />
      <variable attributes="protected __hidden__" citdl="JSONDecoder()" line="236" name="_default_decoder" />
    </scope>
    <scope doc="Configuration functions for the logging package for Python. The core package is based on PEP 282 and comments thereto in comp.lang.python, and influenced by Apache&apos;s log4j system." ilk="blob" lang="Python3" name="logging.config">
      <variable citdl="int" line="38" name="DEFAULT_LOGGING_CONFIG_PORT" />
      <variable citdl="int" line="41" name="RESET_ERROR" />
      <scope classrefs="BaseRequestHandler" doc="Define self.rfile and self.wfile for stream sockets." ilk="class" name="StreamRequestHandler" />
      <scope classrefs="ThreadingMixIn TCPServer" ilk="class" name="ThreadingTCPServer" />
      <scope doc="Read the logging configuration from a ConfigParser-format file." ilk="function" line="52" lineend="84" name="fileConfig" signature="fileConfig(fname, defaults=None, disable_existing_loggers=True)">
        <variable ilk="argument" name="fname" />
        <variable citdl="True" ilk="argument" name="disable_existing_loggers" />
        <variable citdl="_install_handlers()" line="81" name="handlers" />
        <variable citdl="_create_formatters()" line="73" name="formatters" />
        <variable ilk="argument" name="defaults" />
        <variable citdl="configparser.ConfigParser()" line="67" name="cp" />
      </scope>
      <scope doc="Start up a socket server on the specified port, and listen for new configurations." ilk="function" line="267" lineend="366" name="listen" returns="threading.Thread()" signature="listen(port=9030)">
        <scope classrefs="StreamRequestHandler" doc="Handler for a logging configuration request." ilk="class" line="280" lineend="326" name="ConfigStreamHandler">
          <scope doc="Handle a request." ilk="function" line="287" lineend="326" name="handle" signature="handle()">
            <import line="295" module="tempfile" />
            <variable citdl="ConfigStreamHandler" ilk="argument" name="self" />
            <variable citdl="self.connection" line="297" name="conn" />
            <variable citdl="conn.recv()" line="298" name="chunk" />
            <variable line="300" name="slen" />
            <variable citdl="tempfile.mktemp()" line="309" name="file" />
            <variable citdl="open()" line="310" name="f" />
            <variable line="324" name="errcode" />
          </scope>
        </scope>
        <scope classrefs="ThreadingTCPServer" doc="A simple TCP socket-based logging config receiver." ilk="class" line="328" lineend="354" name="ConfigSocketReceiver">
          <variable citdl="int" line="333" name="allow_reuse_address" />
          <scope attributes="__ctor__" ilk="function" line="335" lineend="341" name="__init__" signature="ConfigSocketReceiver(host=&apos;localhost&apos;, port=DEFAULT_LOGGING_CONFIG_PORT, handler=None)">
            <variable citdl="ConfigSocketReceiver" ilk="argument" name="self" />
            <variable citdl="str" ilk="argument" name="host" />
            <variable citdl="int" ilk="argument" name="port" />
            <variable ilk="argument" name="handler" />
          </scope>
          <variable attributes="__instancevar__" citdl="int" line="339" name="abort" />
          <variable attributes="__instancevar__" citdl="int" line="341" name="timeout" />
          <scope ilk="function" line="343" lineend="354" name="serve_until_stopped" signature="serve_until_stopped()">
            <import line="344" module="select" />
            <variable citdl="ConfigSocketReceiver" ilk="argument" name="self" />
            <variable citdl="int" line="345" name="abort" />
          </scope>
        </scope>
        <scope ilk="function" line="356" lineend="362" name="serve" signature="serve(rcvr, hdlr, port)">
          <variable ilk="argument" name="rcvr" />
          <variable ilk="argument" name="hdlr" />
          <variable ilk="argument" name="port" />
          <variable citdl="rcvr()" line="357" name="server" />
          <variable attributes="protected" citdl="rcvr()" line="360" name="_listener" />
        </scope>
        <variable citdl="int" ilk="argument" name="port" />
      </scope>
      <import module="logging" />
      <import module="os" />
      <import module="socket" />
      <scope doc="Stop the listening server which was created with a call to listen()." ilk="function" line="368" lineend="377" name="stopListening" signature="stopListening()">
        <variable attributes="protected" line="376" name="_listener" />
      </scope>
      <import module="struct" />
      <import module="sys" />
      <import module="thread" />
      <import module="threading" />
      <import module="traceback" />
      <scope attributes="protected __hidden__" doc="Resolve a dotted name to a global object." ilk="function" line="87" lineend="99" name="_resolve" returns="__import__()" signature="_resolve(name)">
        <variable citdl="name.split()" ilk="argument" name="name" />
        <variable citdl="name.pop()" line="90" name="used" />
        <variable citdl="getattr()" line="91" name="found" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="101" lineend="102" name="_strip_spaces" returns="map()" signature="_strip_spaces(alist)">
        <variable ilk="argument" name="alist" />
      </scope>
      <variable attributes="__hidden__" line="33" name="thread" />
      <scope attributes="protected __hidden__" doc="Install and return handlers" ilk="function" line="133" lineend="173" name="_install_handlers" returns="dict" signature="_install_handlers(cp, formatters)">
        <variable ilk="argument" name="cp" />
        <variable ilk="argument" name="formatters" />
        <variable citdl="hlist.split()" line="135" name="hlist" />
        <variable citdl="dict" line="140" name="handlers" />
        <variable citdl="list" line="141" name="fixups" />
        <variable citdl="hand" line="143" name="sectname" />
        <variable citdl="_resolve()" line="144" name="klass" />
        <variable citdl="cp.options()" line="145" name="opts" />
        <variable citdl="cp.get()" line="147" name="fmt" />
        <variable citdl="cp.get()" line="154" name="args" />
        <variable citdl="klass()" line="156" name="h" />
        <variable citdl="cp.get()" line="158" name="level" />
        <variable citdl="cp.get()" line="164" name="target" />
      </scope>
      <scope attributes="protected __hidden__" doc="Create and return formatters" ilk="function" line="104" lineend="130" name="_create_formatters" returns="dict" signature="_create_formatters(cp)">
        <variable ilk="argument" name="cp" />
        <variable citdl="_strip_spaces()" line="106" name="flist" />
        <variable citdl="dict" line="111" name="formatters" />
        <variable citdl="form" line="113" name="sectname" />
        <variable citdl="cp.options()" line="114" name="opts" />
        <variable citdl="cp.get()" line="116" name="fs" />
        <variable citdl="cp.get()" line="120" name="dfs" />
        <variable citdl="_resolve()" line="123" name="c" />
        <variable citdl="cp.get()" line="125" name="class_name" />
        <variable citdl="c()" line="128" name="f" />
      </scope>
      <variable attributes="protected __hidden__" line="50" name="_listener" />
      <scope attributes="protected __hidden__" doc="Create and install loggers" ilk="function" line="176" lineend="264" name="_install_loggers" signature="_install_loggers(cp, handlers, disable_existing_loggers)">
        <variable ilk="argument" name="cp" />
        <variable ilk="argument" name="handlers" />
        <variable ilk="argument" name="disable_existing_loggers" />
        <variable citdl="cp.get()" line="180" name="llist" />
        <variable citdl="str" line="184" name="sectname" />
        <variable citdl="logging.root" line="185" name="root" />
        <variable citdl="logging.root" line="186" name="log" />
        <variable citdl="cp.options()" line="187" name="opts" />
        <variable citdl="cp.get()" line="189" name="level" />
        <variable citdl="cp.get()" line="193" name="hlist" />
        <variable citdl="list()" line="209" name="existing" />
        <variable citdl="list" line="217" name="child_loggers" />
        <variable citdl="cp.get()" line="221" name="qn" />
        <variable citdl="int" line="224" name="propagate" />
        <variable citdl="logging.getLogger()" line="227" name="logger" />
        <variable citdl="existing.index()" line="229" name="i" />
        <variable citdl="cp.get()" line="230" name="prefixed" />
        <variable citdl="len()" line="231" name="pflen" />
        <variable citdl="len()" line="232" name="num_existing" />
      </scope>
    </scope>
    <scope doc="Tokenization help for Python programs.  generate_tokens(readline) is a generator that breaks a stream of" ilk="blob" lang="Python3" name="lib2to3.pgen2.tokenize">
      <variable citdl="int" name="AMPER" />
      <variable citdl="int" name="AMPEREQUAL" />
      <variable citdl="int" name="AT" />
      <variable citdl="int" name="BACKQUOTE" />
      <variable citdl="bytes" name="BOM_UTF8" />
      <variable citdl="str" name="Binnumber" />
      <variable citdl="str" name="Bracket" />
      <variable citdl="int" name="CIRCUMFLEX" />
      <variable citdl="int" name="CIRCUMFLEXEQUAL" />
      <variable citdl="int" name="COLON" />
      <variable citdl="int" name="COMMA" />
      <variable citdl="int" name="COMMENT" />
      <variable citdl="str" name="Comment" />
      <variable citdl="str" name="ContStr" />
      <variable citdl="int" name="DEDENT" />
      <variable citdl="int" name="DOT" />
      <variable citdl="int" name="DOUBLESLASH" />
      <variable citdl="int" name="DOUBLESLASHEQUAL" />
      <variable citdl="int" name="DOUBLESTAR" />
      <variable citdl="int" name="DOUBLESTAREQUAL" />
      <variable citdl="str" name="Decnumber" />
      <variable citdl="str" name="Double" />
      <variable citdl="str" name="Double3" />
      <variable citdl="int" name="ENDMARKER" />
      <variable citdl="int" name="EQEQUAL" />
      <variable citdl="int" name="EQUAL" />
      <variable citdl="int" name="ERRORTOKEN" />
      <variable citdl="str" name="Expfloat" />
      <variable citdl="str" name="Exponent" />
      <variable citdl="str" name="Floatnumber" />
      <variable citdl="str" name="Funny" />
      <variable citdl="int" name="GREATER" />
      <variable citdl="int" name="GREATEREQUAL" />
      <variable citdl="str" name="Hexnumber" />
      <variable citdl="int" name="INDENT" />
      <scope ilk="function" name="ISEOF" signature="ISEOF(x)" />
      <scope ilk="function" name="ISNONTERMINAL" signature="ISNONTERMINAL(x)" />
      <scope ilk="function" name="ISTERMINAL" signature="ISTERMINAL(x)" />
      <variable citdl="str" name="Ignore" />
      <variable citdl="str" name="Imagnumber" />
      <variable citdl="str" name="Intnumber" />
      <variable citdl="int" name="LBRACE" />
      <variable citdl="int" name="LEFTSHIFT" />
      <variable citdl="int" name="LEFTSHIFTEQUAL" />
      <variable citdl="int" name="LESS" />
      <variable citdl="int" name="LESSEQUAL" />
      <variable citdl="int" name="LPAR" />
      <variable citdl="int" name="LSQB" />
      <variable citdl="int" name="MINEQUAL" />
      <variable citdl="int" name="MINUS" />
      <variable citdl="int" name="NAME" />
      <variable citdl="int" name="NEWLINE" />
      <variable citdl="int" name="NL" />
      <variable citdl="int" name="NOTEQUAL" />
      <variable citdl="int" name="NT_OFFSET" />
      <variable citdl="int" name="NUMBER" />
      <variable citdl="int" name="N_TOKENS" />
      <variable citdl="str" name="Name" />
      <variable citdl="str" name="Number" />
      <variable citdl="int" name="OP" />
      <variable citdl="str" name="Octnumber" />
      <variable citdl="str" name="Operator" />
      <variable citdl="int" name="PERCENT" />
      <variable citdl="int" name="PERCENTEQUAL" />
      <variable citdl="int" name="PLUS" />
      <variable citdl="int" name="PLUSEQUAL" />
      <variable citdl="str" name="PlainToken" />
      <variable citdl="str" name="Pointfloat" />
      <variable citdl="str" name="PseudoExtras" />
      <variable citdl="str" name="PseudoToken" />
      <variable citdl="int" name="RARROW" />
      <variable citdl="int" name="RBRACE" />
      <variable citdl="int" name="RIGHTSHIFT" />
      <variable citdl="int" name="RIGHTSHIFTEQUAL" />
      <variable citdl="int" name="RPAR" />
      <variable citdl="int" name="RSQB" />
      <variable citdl="int" name="SEMI" />
      <variable citdl="int" name="SLASH" />
      <variable citdl="int" name="SLASHEQUAL" />
      <variable citdl="int" name="STAR" />
      <variable citdl="int" name="STAREQUAL" />
      <variable citdl="int" name="STRING" />
      <variable citdl="str" name="Single" />
      <variable citdl="str" name="Single3" />
      <variable citdl="str" name="Special" />
      <scope classrefs="Exception" ilk="class" name="StopTokenizing" />
      <variable citdl="str" name="String" />
      <variable citdl="int" name="TILDE" />
      <variable citdl="str" name="Token" />
      <scope classrefs="Exception" ilk="class" name="TokenError" />
      <variable citdl="str" name="Triple" />
      <scope classrefs="object" ilk="class" name="Untokenizer" />
      <variable citdl="int" name="VBAR" />
      <variable citdl="int" name="VBAREQUAL" />
      <variable citdl="str" name="Whitespace" />
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="__author__" />
      <variable citdl="str" name="__credits__" />
      <scope ilk="function" name="any" signature="any(*choices)" />
      <variable citdl="SRE_Pattern" name="cookie_re" />
      <scope doc="The detect_encoding() function is used to detect the encoding that should be used to decode a Python source file." ilk="function" name="detect_encoding" signature="detect_encoding(readline)" />
      <variable citdl="SRE_Pattern" name="double3prog" />
      <variable citdl="dict" name="endprogs" />
      <scope doc="The generate_tokens() generator requires one argment, readline, which must be a callable object which provides the same interface as the readline() method of built-in file objects." ilk="function" name="generate_tokens" signature="generate_tokens(readline)" />
      <scope ilk="function" name="group" signature="group(*choices)" />
      <scope doc="Looks up a codec tuple in the Python codec registry and returns a CodecInfo object." ilk="function" name="lookup" signature="lookup(encoding) -&gt; CodecInfo" />
      <scope ilk="function" name="maybe" signature="maybe(*choices)" />
      <scope ilk="function" name="printtoken" signature="printtoken(type, token, xxx_todo_changeme, xxx_todo_changeme1, line)" />
      <variable citdl="SRE_Pattern" name="pseudoprog" />
      <import module="re" />
      <variable citdl="SRE_Pattern" name="single3prog" />
      <variable citdl="dict" name="single_quoted" />
      <import module="string" />
      <variable citdl="str" name="t" />
      <variable citdl="int" name="tabsize" />
      <variable citdl="dict" name="tok_name" />
      <scope doc="The tokenize() function accepts two parameters: one representing the input stream, and one providing an output mechanism for tokenize()." ilk="function" name="tokenize" signature="tokenize(readline, tokeneater=&lt;function printtoken at 0x02441DF8&gt;)" />
      <scope doc="# backwards compatible interface" ilk="function" name="tokenize_loop" signature="tokenize_loop(readline, tokeneater)" />
      <variable citdl="SRE_Pattern" name="tokenprog" />
      <variable citdl="dict" name="triple_quoted" />
      <scope doc="Transform tokens back into Python source code." ilk="function" name="untokenize" signature="untokenize(iterable)" />
    </scope>
    <scope doc="# This is the Python mapping for interface NodeFilter from # DOM2-Traversal-Range. It contains only constants." ilk="blob" lang="Python3" name="xml.dom.NodeFilter">
      <scope classrefs="object" doc="This is the DOM2 NodeFilter interface. It contains only constants." ilk="class" line="4" lineend="27" name="NodeFilter">
        <variable citdl="int" line="17" name="SHOW_ENTITY_REFERENCE" />
        <variable citdl="int" line="9" name="FILTER_REJECT" />
        <variable citdl="int" line="13" name="SHOW_ELEMENT" />
        <variable citdl="int" line="16" name="SHOW_CDATA_SECTION" />
        <variable citdl="int" line="8" name="FILTER_ACCEPT" />
        <variable citdl="int" line="23" name="SHOW_DOCUMENT_FRAGMENT" />
        <scope ilk="function" line="26" lineend="27" name="acceptNode" signature="acceptNode(node)">
          <variable citdl="NodeFilter" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
        </scope>
        <variable citdl="int" line="19" name="SHOW_PROCESSING_INSTRUCTION" />
        <variable citdl="int" line="21" name="SHOW_DOCUMENT" />
        <variable citdl="int" line="20" name="SHOW_COMMENT" />
        <variable citdl="long" line="12" name="SHOW_ALL" />
        <variable citdl="int" line="10" name="FILTER_SKIP" />
        <variable citdl="int" line="18" name="SHOW_ENTITY" />
        <variable citdl="int" line="24" name="SHOW_NOTATION" />
        <variable citdl="int" line="14" name="SHOW_ATTRIBUTE" />
        <variable citdl="int" line="15" name="SHOW_TEXT" />
        <variable citdl="int" line="22" name="SHOW_DOCUMENT_TYPE" />
      </scope>
    </scope>
    <scope doc="Fixer that changes &apos;a ,b&apos; into &apos;a, b&apos;.  This also changes &apos;{a :b}&apos; into &apos;{a: b}&apos;, but does not touch other" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_ws_comma">
      <scope classrefs="BaseFix" ilk="class" line="12" lineend="39" name="FixWsComma">
        <variable citdl="str" line="16" name="PATTERN" />
        <variable citdl="True" line="14" name="explicit" />
        <scope ilk="function" line="24" lineend="39" name="transform" returns="node.clone()" signature="transform(node, results)">
          <variable citdl="FixWsComma" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="node.clone()" line="25" name="new" />
          <variable citdl="False" line="26" name="comma" />
          <variable citdl="child.prefix" line="29" name="prefix" />
        </scope>
        <variable citdl="pytree.Leaf()" line="21" name="COLON" />
        <variable citdl="pytree.Leaf()" line="20" name="COMMA" />
        <variable citdl="tuple" line="22" name="SEPS" />
      </scope>
      <import module="fixer_base" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="This module defines the data structures used to represent a grammar.  These are a bit arcane because they are derived from the data" ilk="blob" lang="Python3" name="lib2to3.pgen2.grammar">
      <scope classrefs="object" doc="Pgen parsing tables tables conversion class.  Once initialized, this class supplies the grammar tables for the" ilk="class" line="22" lineend="126" name="Grammar">
        <scope doc="Load the grammar tables from a pickle file." ilk="function" line="93" lineend="98" name="load" signature="load(filename)">
          <variable citdl="Grammar" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="open()" line="95" name="f" />
          <variable citdl="pickle.load()" line="96" name="d" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="83" name="tokens" />
        <variable attributes="__instancevar__" citdl="dict" line="84" name="symbol2label" />
        <scope doc="Dump the grammar tables to a pickle file." ilk="function" line="87" lineend="91" name="dump" signature="dump(filename)">
          <variable citdl="Grammar" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="open()" line="89" name="f" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="80" name="dfas" />
        <variable attributes="__instancevar__" citdl="list" line="81" name="labels" />
        <scope doc="Dump the grammar tables to standard output, for debugging." ilk="function" line="113" lineend="126" name="report" signature="report()">
          <import line="115" module="pprint" symbol="pprint" />
          <variable citdl="Grammar" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="79" name="states" />
        <variable attributes="__instancevar__" citdl="int" line="85" name="start" />
        <variable attributes="__instancevar__" citdl="dict" line="78" name="number2symbol" />
        <variable attributes="__instancevar__" citdl="dict" line="82" name="keywords" />
        <scope doc="Copy the grammar." ilk="function" line="100" lineend="111" name="copy" returns="self.__class__()" signature="copy()">
          <variable citdl="Grammar" ilk="argument" name="self" />
          <variable citdl="self.__class__()" line="104" name="new" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="77" name="symbol2number" />
        <scope attributes="__ctor__" ilk="function" line="76" lineend="85" name="__init__" signature="Grammar()">
          <variable citdl="Grammar" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="str" name="line" />
      <variable citdl="str" name="name" />
      <variable citdl="str" name="op" />
      <variable citdl="dict" line="180" name="opmap" />
      <variable citdl="str" line="131" name="opmap_raw" />
      <import module="pickle" />
      <import module="token" />
      <import module="tokenize" />
    </scope>
    <scope doc="Miscellaneous utilities." ilk="blob" lang="Python3" name="email.utils">
      <variable citdl="str" line="46" name="COMMASPACE" />
      <variable citdl="str" line="49" name="CRLF" />
      <variable citdl="str" line="47" name="EMPTYSTRING" />
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <variable citdl="str" line="50" name="TICK" />
      <variable citdl="str" line="48" name="UEMPTYSTRING" />
      <variable citdl="list" line="7" name="__all__" />
      <import module="base64" />
      <scope ilk="function" line="290" lineend="303" name="collapse_rfc2231_value" returns="unquote()" signature="collapse_rfc2231_value(value, errors=&apos;replace&apos;, fallback_charset=&apos;us-ascii&apos;)">
        <variable citdl="str" ilk="argument" name="fallback_charset" />
        <variable citdl="str" ilk="argument" name="errors" />
        <variable ilk="argument" name="value" />
        <variable citdl="bytes()" line="298" name="rawbytes" />
      </scope>
      <scope doc="Decode parameters list according to RFC 2231." ilk="function" line="234" lineend="288" name="decode_params" returns="list" signature="decode_params(params)">
        <variable citdl="False" line="266" name="extended" />
        <variable citdl="list" line="241" name="new_params" />
        <variable citdl="rfc2231_continuation.match()" line="255" name="mo" />
        <variable citdl="quote()" line="254" name="value" />
        <variable citdl="urllib.parse.unquote()" line="279" name="s" />
        <variable citdl="int()" line="259" name="num" />
        <variable citdl="list" ilk="argument" name="params" />
        <variable citdl="True" line="251" name="encoded" />
        <variable citdl="dict" line="245" name="rfc2231_params" />
      </scope>
      <scope doc="Decode string according to RFC 2231" ilk="function" line="208" lineend="213" name="decode_rfc2231" returns="tuple" signature="decode_rfc2231(s)">
        <variable ilk="argument" name="s" />
        <variable citdl="s.split()" line="210" name="parts" />
      </scope>
      <variable citdl="SRE_Pattern" line="86" name="ecre" />
      <scope doc="Encode string according to RFC 2231." ilk="function" line="216" lineend="228" name="encode_rfc2231" returns="tuple" signature="encode_rfc2231(s, charset=None, language=None)">
        <variable citdl="urllib.parse.quote()" ilk="argument" name="s" />
        <variable ilk="argument" name="charset" />
        <variable citdl="str" ilk="argument" name="language" />
      </scope>
      <variable citdl="SRE_Pattern" line="53" name="escapesre" />
      <scope doc="The inverse of parseaddr(), this takes a 2-tuple of the form (realname, email_address) and returns the string value suitable for an RFC 2822 From, To or Cc header." ilk="function" line="59" lineend="74" name="formataddr" returns="tuple" signature="formataddr(pair)">
        <variable ilk="argument" name="pair" />
        <variable citdl="str" line="69" name="quotes" />
        <variable citdl="escapesre.sub()" line="72" name="name" />
      </scope>
      <scope doc="Returns a date string as specified by RFC 2822, e.g.:" ilk="function" line="98" lineend="147" name="formatdate" returns="tuple" signature="formatdate(timeval=None, localtime=False, usegmt=False)">
        <variable citdl="time.time()" ilk="argument" name="timeval" />
        <variable citdl="str" line="133" name="zone" />
        <variable citdl="str" line="130" name="sign" />
        <variable citdl="False" ilk="argument" name="usegmt" />
        <variable citdl="time.timezone" line="123" name="offset" />
        <variable citdl="time.localtime()" line="119" name="now" />
        <variable citdl="False" ilk="argument" name="localtime" />
      </scope>
      <scope doc="Return a list of (REALNAME, EMAIL) for each fieldvalue." ilk="function" line="78" lineend="82" name="getaddresses" returns="a.addresslist" signature="getaddresses(fieldvalues)">
        <variable citdl="_AddressList()" line="81" name="a" />
        <variable citdl="COMMASPACE.join()" line="80" name="all" />
        <variable ilk="argument" name="fieldvalues" />
      </scope>
      <scope doc="Returns a string suitable for RFC 2822 compliant Message-ID, e.g:" ilk="function" line="151" lineend="169" name="make_msgid" returns="tuple" signature="make_msgid(idstring=None)">
        <variable citdl="time.strftime()" line="160" name="utcdate" />
        <variable citdl="random.randrange()" line="162" name="randint" />
        <variable citdl="str" line="168" name="msgid" />
        <variable citdl="os.getpid()" line="161" name="pid" />
        <variable citdl="time.time()" line="159" name="timeval" />
        <variable citdl="str" ilk="argument" name="idstring" />
        <variable citdl="socket.getfqdn()" line="167" name="idhost" />
      </scope>
      <scope doc="Turn a 10-tuple as returned by parsedate_tz() into a UTC timestamp." ilk="function" name="mktime_tz" signature="mktime_tz(data)" />
      <import module="os" />
      <scope ilk="function" line="188" lineend="192" name="parseaddr" returns="tuple" signature="parseaddr(addr)">
        <variable ilk="argument" name="addr" />
        <variable line="189" name="addrs" />
      </scope>
      <scope doc="# These functions are in the standalone mimelib version only because they&apos;ve # subsequently been fixed in the latest Python versions." ilk="function" line="176" lineend="179" name="parsedate" returns="_parsedate()" signature="parsedate(data)">
        <variable ilk="argument" name="data" />
      </scope>
      <scope ilk="function" line="182" lineend="185" name="parsedate_tz" returns="_parsedate_tz()" signature="parsedate_tz(data)">
        <variable ilk="argument" name="data" />
      </scope>
      <scope doc="Add quotes around a string." ilk="function" name="quote" signature="quote(str)" />
      <import module="random" />
      <import module="re" />
      <variable citdl="SRE_Pattern" line="231" name="rfc2231_continuation" />
      <import module="socket" />
      <variable citdl="SRE_Pattern" line="52" name="specialsre" />
      <import module="time" />
      <scope doc="Remove quotes from a string." ilk="function" line="196" lineend="203" name="unquote" returns="list" signature="unquote(str)">
        <variable ilk="argument" name="str" />
      </scope>
      <import module="urllib" />
      <import module="warnings" />
    </scope>
    <scope doc="Convert a NT pathname to a file URL and vice versa." ilk="blob" lang="Python3" name="nturl2path">
      <scope doc="OS-specific conversion from a file system path to a relative URL of the &apos;file&apos; scheme; not recommended for general use." ilk="function" line="35" lineend="63" name="pathname2url" returns="str" signature="pathname2url(p)">
        <variable citdl="p.split()" line="52" name="comp" />
        <variable citdl="urllib.parse.quote()" line="57" name="drive" />
        <variable citdl="str" ilk="argument" name="p" />
        <variable citdl="p.split()" line="50" name="components" />
        <variable citdl="str" line="54" name="error" />
        <variable citdl="str" line="59" name="path" />
      </scope>
      <scope doc="OS-specific conversion from a relative URL of the &apos;file&apos; scheme to a file system path; not recommended for general use." ilk="function" line="3" lineend="33" name="url2pathname" returns="str" signature="url2pathname(url)">
        <variable citdl="url.replace()" ilk="argument" name="url" />
        <variable citdl="url.split()" line="23" name="comp" />
        <variable line="27" name="drive" />
        <variable citdl="url.split()" line="20" name="components" />
        <variable citdl="url.replace()" line="25" name="error" />
        <variable citdl="str" line="29" name="path" />
      </scope>
    </scope>
    <scope doc="Header encoding and decoding functionality." ilk="blob" lang="Python3" name="email.header">
      <variable citdl="bytes" line="24" name="BSPACE" />
      <scope classrefs="object" doc="Map character sets to their email properties.  This class provides information about the requirements imposed on email" ilk="class" name="Charset" />
      <variable citdl="str" line="26" name="EMPTYSTRING" />
      <scope classrefs="object" ilk="class" line="151" lineend="329" name="Header">
        <scope ilk="function" line="229" lineend="230" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="Header" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="192" name="_maxlinelen" />
        <variable attributes="protected __instancevar__" citdl="Charset()" line="185" name="_charset" />
        <scope doc="Return the string value of the header." ilk="function" line="199" lineend="219" name="__str__" returns="EMPTYSTRING.join()" signature="__str__()">
          <variable citdl="Header" ilk="argument" name="self" />
          <variable citdl="list" line="202" name="uchunks" />
          <variable citdl="charset" line="203" name="lastcs" />
          <variable citdl="charset" line="209" name="nextcs" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="187" name="_chunks" />
        <variable attributes="protected __instancevar__" citdl="int" line="194" name="_headerlen" />
        <scope doc="Append a string to the MIME header." ilk="function" line="232" lineend="270" name="append" signature="append(s, charset=None, errors=&apos;strict&apos;)">
          <variable citdl="Header" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <variable citdl="Charset()" ilk="argument" name="charset" />
          <variable citdl="str" ilk="argument" name="errors" />
          <variable citdl="charset.input_codec" line="261" name="input_charset" />
          <variable citdl="s.encode()" line="262" name="input_bytes" />
          <variable citdl="charset.output_codec" line="268" name="output_charset" />
          <variable citdl="input_bytes.decode()" line="269" name="output_string" />
        </scope>
        <scope attributes="protected" ilk="function" line="313" lineend="329" name="_normalize" signature="_normalize()">
          <variable citdl="Header" ilk="argument" name="self" />
          <variable citdl="list" line="316" name="chunks" />
          <variable citdl="charset" line="317" name="last_charset" />
          <variable citdl="list" line="318" name="last_chunk" />
        </scope>
        <scope doc="Encode a message header into an RFC-compliant format." ilk="function" line="272" lineend="311" name="encode" returns="str()" signature="encode(splitchars=&apos;;, \t&apos;, maxlinelen=None)">
          <variable citdl="Header" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="splitchars" />
          <variable citdl="int" ilk="argument" name="maxlinelen" />
          <variable citdl="_ValueFormatter()" line="302" name="formatter" />
          <variable citdl="string.splitlines()" line="305" name="lines" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="186" name="_continuation_ws" />
        <scope ilk="function" line="223" lineend="227" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="Header" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__ctor__" doc="Create a MIME-compliant header that can contain many character sets." ilk="function" line="152" lineend="197" name="__init__" signature="Header(s=None, charset=None, maxlinelen=None, header_name=None, continuation_ws=&apos; &apos;, errors=&apos;strict&apos;)">
          <variable citdl="Header" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <variable citdl="Charset()" ilk="argument" name="charset" />
          <variable citdl="int" ilk="argument" name="maxlinelen" />
          <variable ilk="argument" name="header_name" />
          <variable citdl="str" ilk="argument" name="continuation_ws" />
          <variable citdl="str" ilk="argument" name="errors" />
        </scope>
      </scope>
      <scope classrefs="MessageParseError" doc="Error while parsing headers." ilk="class" name="HeaderParseError" />
      <variable citdl="int" line="27" name="MAXLINELEN" />
      <variable citdl="str" line="22" name="NL" />
      <variable citdl="str" line="23" name="SPACE" />
      <variable citdl="str" line="25" name="SPACE8" />
      <variable citdl="Charset" line="29" name="USASCII" />
      <variable citdl="Charset" line="30" name="UTF8" />
      <variable citdl="list" line="7" name="__all__" />
      <import module="binascii" />
      <scope doc="Decode a message header value without converting charset." ilk="function" line="56" lineend="124" name="decode_header" returns="list" signature="decode_header(header)">
        <variable citdl="bytes()" line="94" name="word" />
        <variable citdl="list" line="88" name="decoded_words" />
        <variable line="82" name="encoding" />
        <variable citdl="list" line="107" name="collapsed" />
        <variable line="81" name="charset" />
        <variable line="114" name="last_charset" />
        <variable citdl="email.base64mime.decode()" line="108" name="last_word" />
        <variable ilk="argument" name="header" />
        <variable citdl="ecre.split()" line="75" name="parts" />
        <variable citdl="list" line="73" name="words" />
        <variable citdl="parts.pop()" line="83" name="encoded" />
        <variable line="77" name="unencoded" />
      </scope>
      <variable citdl="SRE_Pattern" line="33" name="ecre" />
      <import module="email" />
      <variable citdl="SRE_Pattern" line="47" name="fcre" />
      <scope doc="Create a Header from a sequence of pairs as returned by decode_header()" ilk="function" line="128" lineend="147" name="make_header" returns="Header()" signature="make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=&apos; &apos;)">
        <variable ilk="argument" name="maxlinelen" />
        <variable ilk="argument" name="header_name" />
        <variable citdl="Header()" line="140" name="h" />
        <variable citdl="Charset()" line="145" name="charset" />
        <variable ilk="argument" name="decoded_seq" />
        <variable citdl="str" ilk="argument" name="continuation_ws" />
      </scope>
      <import module="re" />
      <scope attributes="protected __hidden__" ilk="function" line="536" lineend="544" name="_spliterator" signature="_spliterator(character, string)">
        <variable ilk="argument" name="character" />
        <variable ilk="argument" name="string" />
        <variable citdl="list()" line="537" name="parts" />
        <variable citdl="parts.pop()" line="539" name="part" />
        <variable line="540" name="splitparts" />
        <variable line="541" name="nextpart" />
      </scope>
      <variable attributes="protected __hidden__" citdl="email.quoprimime._max_append" line="52" name="_max_append" />
      <scope attributes="protected __hidden__" ilk="class" line="333" lineend="532" name="_ValueFormatter">
        <scope attributes="__ctor__" ilk="function" line="334" lineend="340" name="__init__" signature="_ValueFormatter(headerlen, maxlen, continuation_ws, splitchars)">
          <variable citdl="_ValueFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="headerlen" />
          <variable ilk="argument" name="maxlen" />
          <variable ilk="argument" name="continuation_ws" />
          <variable ilk="argument" name="splitchars" />
        </scope>
        <variable attributes="protected __instancevar__" line="335" name="_maxlen" />
        <variable attributes="protected __instancevar__" line="336" name="_continuation_ws" />
        <variable attributes="protected __instancevar__" citdl="len()" line="337" name="_continuation_ws_len" />
        <variable attributes="protected __instancevar__" line="338" name="_splitchars" />
        <variable attributes="protected __instancevar__" citdl="list" line="339" name="_lines" />
        <variable attributes="protected __instancevar__" citdl="_Accumulator()" line="340" name="_current_line" />
        <scope ilk="function" line="342" lineend="344" name="__str__" returns="NL.join()" signature="__str__()">
          <variable citdl="_ValueFormatter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="346" lineend="352" name="newline" signature="newline()">
          <variable citdl="_ValueFormatter" ilk="argument" name="self" />
          <variable citdl="self._current_line.pop()" line="347" name="end_of_line" />
        </scope>
        <scope ilk="function" line="354" lineend="355" name="add_transition" signature="add_transition()">
          <variable citdl="_ValueFormatter" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="357" lineend="413" name="feed" signature="feed(string, charset)">
          <variable citdl="_ValueFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
          <variable ilk="argument" name="charset" />
          <variable citdl="charset.header_encode()" line="360" name="encoded_string" />
          <variable line="374" name="ch" />
          <variable citdl="charset.header_encode_lines()" line="393" name="encoded_lines" />
          <variable citdl="encoded_lines.pop()" line="397" name="first_line" />
          <variable citdl="encoded_lines.pop()" line="406" name="last_line" />
        </scope>
        <scope attributes="protected" ilk="function" line="415" lineend="419" name="_maxlengths" signature="_maxlengths()">
          <variable citdl="_ValueFormatter" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="421" lineend="532" name="_ascii_split" signature="_ascii_split(string, ch)">
          <variable citdl="_ValueFormatter" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
          <variable ilk="argument" name="ch" />
          <variable citdl="_Accumulator()" line="422" name="holding" />
          <variable line="447" name="part" />
          <variable citdl="len()" line="463" name="holding_prelen" />
          <variable citdl="holding.pop()" line="472" name="save_part" />
          <variable citdl="len()" line="482" name="holding_len" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="class" line="547" lineend="578" name="_Accumulator">
        <scope attributes="__ctor__" ilk="function" line="548" lineend="550" name="__init__" signature="_Accumulator(initial_size=0)">
          <variable citdl="_Accumulator" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="initial_size" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="549" name="_initial_size" />
        <variable attributes="protected __instancevar__" citdl="list" line="550" name="_current" />
        <scope ilk="function" line="552" lineend="553" name="push" signature="push(string)">
          <variable citdl="_Accumulator" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope ilk="function" line="555" lineend="558" name="pop" returns="self._current.pop()" signature="pop()">
          <variable citdl="_Accumulator" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="560" lineend="563" name="__len__" returns="sum()" signature="__len__()">
          <variable citdl="_Accumulator" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="565" lineend="569" name="__str__" returns="EMPTYSTRING.join()" signature="__str__()">
          <variable citdl="_Accumulator" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="571" lineend="575" name="reset" signature="reset(string=None)">
          <variable citdl="_Accumulator" ilk="argument" name="self" />
          <variable ilk="argument" name="string" />
        </scope>
        <scope ilk="function" line="577" lineend="578" name="is_onlyws" returns="bool" signature="is_onlyws()">
          <variable citdl="_Accumulator" ilk="argument" name="self" />
        </scope>
      </scope>
    </scope>
    <scope doc="&quot;Executable documentation&quot; for the pickle module.  Extensive comments about the pickle protocols and pickle-machine opcodes" ilk="blob" lang="Python3" name="pickletools">
      <scope classrefs="object" ilk="class" line="171" lineend="203" name="ArgumentDescriptor">
        <variable attributes="__instancevar__" line="192" name="name" />
        <variable attributes="__instancevar__" line="203" name="doc" />
        <variable attributes="__instancevar__" line="198" name="n" />
        <variable citdl="tuple" line="172" name="__slots__" />
        <variable attributes="__instancevar__" line="200" name="reader" />
        <scope attributes="__ctor__" ilk="function" line="190" lineend="203" name="__init__" signature="ArgumentDescriptor(name, n, reader, doc)">
          <variable citdl="ArgumentDescriptor" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="n" />
          <variable ilk="argument" name="reader" />
          <variable ilk="argument" name="doc" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="825" lineend="882" name="OpcodeInfo">
        <variable attributes="__instancevar__" line="863" name="code" />
        <variable attributes="__instancevar__" line="859" name="name" />
        <variable attributes="__instancevar__" line="879" name="proto" />
        <variable attributes="__instancevar__" line="876" name="stack_after" />
        <variable attributes="__instancevar__" line="882" name="doc" />
        <variable citdl="tuple" line="827" name="__slots__" />
        <variable attributes="__instancevar__" line="871" name="stack_before" />
        <variable attributes="__instancevar__" line="866" name="arg" />
        <scope attributes="__ctor__" ilk="function" line="856" lineend="882" name="__init__" signature="OpcodeInfo(name, code, arg, stack_before, stack_after, proto, doc)">
          <variable citdl="OpcodeInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="arg" />
          <variable ilk="argument" name="stack_before" />
          <variable ilk="argument" name="stack_after" />
          <variable ilk="argument" name="proto" />
          <variable ilk="argument" name="doc" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="694" lineend="721" name="StackObject">
        <variable attributes="__instancevar__" line="709" name="name" />
        <variable attributes="__instancevar__" line="718" name="doc" />
        <variable attributes="__instancevar__" line="715" name="obtype" />
        <variable citdl="tuple" line="695" name="__slots__" />
        <scope ilk="function" line="720" lineend="721" name="__repr__" signature="__repr__()">
          <variable citdl="StackObject" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="707" lineend="718" name="__init__" signature="StackObject(name, obtype, doc)">
          <variable citdl="StackObject" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="obtype" />
          <variable ilk="argument" name="doc" />
        </scope>
      </scope>
      <variable citdl="int" line="168" name="TAKEN_FROM_ARGUMENT1" />
      <variable citdl="int" line="169" name="TAKEN_FROM_ARGUMENT4" />
      <variable citdl="int" line="164" name="UP_TO_NEWLINE" />
      <variable citdl="list" line="17" name="__all__" />
      <variable citdl="dict" line="2324" name="__test__" />
      <variable citdl="StackObject" line="785" name="anyobject" />
      <variable citdl="tuple" line="19" name="bytes_types" />
      <variable citdl="dict" line="1775" name="code2op" />
      <import module="codecs" />
      <variable citdl="ArgumentDescriptor" line="548" name="decimalnl_long" />
      <variable citdl="ArgumentDescriptor" line="535" name="decimalnl_short" />
      <scope doc="Decode a long from a two&apos;s complement little-endian binary string." ilk="function" name="decode_long" signature="decode_long(data)" />
      <scope doc="Produce a symbolic disassembly of a pickle." ilk="function" line="1907" lineend="2041" name="dis" signature="dis(pickle, out=None, memo=None, indentlevel=4)">
        <variable citdl="list" line="1950" name="markstack" />
        <variable citdl="markstack.pop()" line="1976" name="markpos" />
        <variable citdl="int" line="1949" name="maxproto" />
        <variable citdl="str" line="1967" name="markmsg" />
        <variable citdl="str" line="1952" name="errormsg" />
        <variable citdl="str" line="1951" name="indentchunk" />
        <variable citdl="opcode.stack_after" line="1963" name="after" />
        <variable citdl="dict" ilk="argument" name="memo" />
        <variable citdl="int" line="1964" name="numtopop" />
        <variable citdl="int" ilk="argument" name="indentlevel" />
        <variable citdl="str" line="1957" name="line" />
        <variable citdl="opcode.stack_before" line="1962" name="before" />
        <variable ilk="argument" name="pickle" />
        <variable citdl="list" line="1946" name="stack" />
        <variable ilk="argument" name="out" />
      </scope>
      <variable citdl="ArgumentDescriptor" line="597" name="float8" />
      <variable citdl="ArgumentDescriptor" line="568" name="floatnl" />
      <scope doc="Generate all the opcodes in a pickle." ilk="function" line="1824" lineend="1875" name="genops" signature="genops(pickle)">
        <variable citdl="pickle.read()" line="1859" name="code" />
        <variable citdl="pickle.tell" line="1853" name="getpos" />
        <variable citdl="getpos()" line="1858" name="pos" />
        <variable citdl="code2op.get()" line="1860" name="opcode" />
        <variable citdl="opcode.arg.reader()" line="1869" name="arg" />
        <variable citdl="io.BytesIO()" ilk="argument" name="pickle" />
      </scope>
      <variable citdl="ArgumentDescriptor" line="261" name="int4" />
      <variable citdl="ArgumentDescriptor" line="640" name="long1" />
      <variable citdl="ArgumentDescriptor" line="674" name="long4" />
      <variable citdl="StackObject" line="790" name="markobject" />
      <variable citdl="list" line="885" name="opcodes" />
      <scope doc="Optimize a pickle string by removing unused PUT opcodes" ilk="function" line="1880" lineend="1902" name="optimize" returns="str.join()" signature="optimize(p)">
        <variable citdl="list" line="1883" name="puts" />
        <variable citdl="int" line="1896" name="i" />
        <variable line="1898" name="j" />
        <variable citdl="pos" line="1884" name="prevpos" />
        <variable citdl="list" line="1895" name="s" />
        <variable ilk="argument" name="p" />
        <variable citdl="arg" line="1890" name="prevarg" />
        <variable citdl="set()" line="1882" name="gets" />
      </scope>
      <import module="pickle" />
      <variable citdl="StackObject" line="740" name="pybool" />
      <variable citdl="StackObject" line="755" name="pybytes" />
      <variable citdl="StackObject" line="780" name="pydict" />
      <variable citdl="StackObject" line="745" name="pyfloat" />
      <variable citdl="StackObject" line="724" name="pyint" />
      <variable citdl="StackObject" line="734" name="pyinteger_or_bool" />
      <variable citdl="StackObject" line="775" name="pylist" />
      <variable citdl="StackObject" line="729" name="pylong" />
      <variable citdl="StackObject" line="765" name="pynone" />
      <variable citdl="StackObject" line="750" name="pystring" />
      <variable citdl="StackObject" line="770" name="pytuple" />
      <variable citdl="StackObject" line="760" name="pyunicode" />
      <import module="re" />
      <scope doc="&gt;&gt;&gt; import io" ilk="function" line="518" lineend="532" name="read_decimalnl_long" returns="int()" signature="read_decimalnl_long(f)">
        <variable citdl="list" line="529" name="s" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_decimalnl_short(io.BytesIO(b&quot;1234\n56&quot;)) 1234" ilk="function" line="489" lineend="516" name="read_decimalnl_short" returns="int()" signature="read_decimalnl_short(f)">
        <variable citdl="read_stringnl()" line="501" name="s" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io, struct &gt;&gt;&gt; raw = struct.pack(&quot;&gt;d&quot;, -1.25) &gt;&gt;&gt; raw b&apos;\xbf\xf4\x00\x00\x00\x00\x00\x00&apos;" ilk="function" line="581" lineend="594" name="read_float8" signature="read_float8(f)">
        <variable citdl="f.read()" line="591" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_floatnl(io.BytesIO(b&quot;-1.25\n6&quot;)) -1.25" ilk="function" line="559" lineend="566" name="read_floatnl" returns="float()" signature="read_floatnl(f)">
        <variable citdl="read_stringnl()" line="565" name="s" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_int4(io.BytesIO(b&apos;\xff\x00\x00\x00&apos;)) 255 &gt;&gt;&gt; read_int4(io.BytesIO(b&apos;\x00\x00\x00\x80&apos;)) == -(2**31)" ilk="function" line="247" lineend="259" name="read_int4" signature="read_int4(f)">
        <variable citdl="f.read()" line="256" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_long1(io.BytesIO(b&quot;\x00&quot;)) 0 &gt;&gt;&gt; read_long1(io.BytesIO(b&quot;\x02\xff\x00&quot;))" ilk="function" line="619" lineend="638" name="read_long1" returns="decode_long()" signature="read_long1(f)">
        <variable citdl="read_uint1()" line="634" name="n" />
        <variable citdl="f.read()" line="635" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_long4(io.BytesIO(b&quot;\x02\x00\x00\x00\xff\x00&quot;)) 255 &gt;&gt;&gt; read_long4(io.BytesIO(b&quot;\x02\x00\x00\x00\xff\x7f&quot;))" ilk="function" line="651" lineend="672" name="read_long4" returns="decode_long()" signature="read_long4(f)">
        <variable citdl="read_int4()" line="666" name="n" />
        <variable citdl="f.read()" line="669" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_string1(io.BytesIO(b&quot;\x00&quot;)) &apos;&apos; &gt;&gt;&gt; read_string1(io.BytesIO(b&quot;\x03abcdef&quot;))" ilk="function" line="395" lineend="410" name="read_string1" returns="data.decode()" signature="read_string1(f)">
        <variable citdl="read_uint1()" line="404" name="n" />
        <variable citdl="f.read()" line="406" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_string4(io.BytesIO(b&quot;\x00\x00\x00\x00abc&quot;)) &apos;&apos; &gt;&gt;&gt; read_string4(io.BytesIO(b&quot;\x03\x00\x00\x00abcdef&quot;))" ilk="function" line="361" lineend="381" name="read_string4" returns="data.decode()" signature="read_string4(f)">
        <variable citdl="read_int4()" line="374" name="n" />
        <variable citdl="f.read()" line="377" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_stringnl(io.BytesIO(b&quot;&apos;abcd&apos;\nefg\n&quot;)) &apos;abcd&apos;" ilk="function" line="268" lineend="313" name="read_stringnl" returns="list" signature="read_stringnl(f, decode=True, stripquotes=True)">
        <variable citdl="True" ilk="argument" name="decode" />
        <variable citdl="True" ilk="argument" name="stripquotes" />
        <variable citdl="list" line="295" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="325" lineend="326" name="read_stringnl_noescape" returns="read_stringnl()" signature="read_stringnl_noescape(f)">
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_stringnl_noescape_pair(io.BytesIO(b&quot;Q ueue\nEmpty\njunk&quot;)) &apos;Queue Empty&apos;" ilk="function" line="339" lineend="346" name="read_stringnl_noescape_pair" returns="tuple" signature="read_stringnl_noescape_pair(f)">
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_uint1(io.BytesIO(b&apos;\xff&apos;)) 255" ilk="function" line="207" lineend="217" name="read_uint1" signature="read_uint1(f)">
        <variable citdl="f.read()" line="214" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_uint2(io.BytesIO(b&apos;\xff\x00&apos;)) 255 &gt;&gt;&gt; read_uint2(io.BytesIO(b&apos;\xff\xff&apos;))" ilk="function" line="226" lineend="238" name="read_uint2" signature="read_uint2(f)">
        <variable citdl="f.read()" line="235" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; s = &apos;abcd\uabcd&apos; &gt;&gt;&gt; enc = s.encode(&apos;utf-8&apos;) &gt;&gt;&gt; enc" ilk="function" line="449" lineend="474" name="read_unicodestring4" returns="str()" signature="read_unicodestring4(f)">
        <variable citdl="read_int4()" line="467" name="n" />
        <variable citdl="f.read()" line="470" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_unicodestringnl(io.BytesIO(b&quot;abc\\uabcd\njunk&quot;)) == &apos;abc\uabcd&apos; True" ilk="function" line="424" lineend="436" name="read_unicodestringnl" returns="str()" signature="read_unicodestringnl(f)">
        <variable citdl="f.readline()" line="431" name="data" />
        <variable ilk="argument" name="f" />
      </scope>
      <variable citdl="StackObject" line="804" name="stackslice" />
      <variable citdl="ArgumentDescriptor" line="412" name="string1" />
      <variable citdl="ArgumentDescriptor" line="383" name="string4" />
      <variable citdl="ArgumentDescriptor" line="315" name="stringnl" />
      <variable citdl="ArgumentDescriptor" line="328" name="stringnl_noescape" />
      <variable citdl="ArgumentDescriptor" line="348" name="stringnl_noescape_pair" />
      <variable citdl="ArgumentDescriptor" line="219" name="uint1" />
      <variable citdl="ArgumentDescriptor" line="240" name="uint2" />
      <variable citdl="ArgumentDescriptor" line="476" name="unicodestring4" />
      <variable citdl="ArgumentDescriptor" line="438" name="unicodestringnl" />
      <variable attributes="__hidden__" citdl="OpcodeInfo" line="884" name="I" />
      <scope attributes="protected __hidden__" ilk="function" line="2328" lineend="2330" name="_test" returns="doctest.testmod()" signature="_test()">
        <import line="2329" module="doctest" />
      </scope>
      <scope attributes="__hidden__" ilk="function" line="1780" lineend="1816" name="assure_pickle_consistency" signature="assure_pickle_consistency(verbose=False)">
        <variable citdl="False" ilk="argument" name="verbose" />
        <variable citdl="code2op.copy()" line="1782" name="copy" />
        <variable citdl="picklecode.decode()" line="1788" name="picklecode" />
        <variable line="1799" name="d" />
        <variable citdl="list" line="1813" name="msg" />
      </scope>
      <variable attributes="protected __hidden__" citdl="str" line="2295" name="_memo_test" />
      <variable attributes="protected __hidden__" citdl="str" line="2048" name="_dis_test" />
      <variable attributes="__hidden__" citdl="dict" line="1755" name="code2i" />
      <scope attributes="protected __hidden__" ilk="class" line="2044" lineend="2046" name="_Example">
        <scope attributes="__ctor__" ilk="function" line="2045" lineend="2046" name="__init__" signature="_Example(value)">
          <variable citdl="_Example" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" line="2046" name="value" />
      </scope>
      <variable attributes="__hidden__" citdl="dict" line="1754" name="name2i" />
    </scope>
    <scope doc="Implements the bdist_msi command." ilk="blob" lang="Python3" name="distutils.command.bdist_msi">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="object" ilk="class" name="Dialog" />
      <scope classrefs="object" ilk="class" name="Directory" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="object" ilk="class" name="Feature" />
      <scope classrefs="Dialog" doc="Dialog class with a fixed layout: controls at the top, then a ruler, then a list of buttons: back, next, cancel. Optionally a bitmap at the left." ilk="class" name="PyDialog" />
      <scope classrefs="Version" doc="Version numbering for anal retentives and software idealists. Implements the standard interface for version number classes as described above.  A version number consists of two or three" ilk="class" name="StrictVersion" />
      <scope ilk="function" name="add_data" signature="add_data(db, table, values)" />
      <scope classrefs="Command" ilk="class" name="bdist_msi" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <import module="msilib" />
      <import module="os" />
      <scope doc="Recursively remove an entire directory tree." ilk="function" name="remove_tree" signature="remove_tree(directory, verbose=1, dry_run=0)" />
      <import module="schema" />
      <import module="sequence" />
      <import module="sys" />
      <import module="text" />
    </scope>
    <scope doc="The functions in this module allow compression and decompression using the zlib library, which is based on GNU zip. " ilk="blob" lang="Python3" name="zlib">
      <variable citdl="int" name="DEFLATED" />
      <variable citdl="int" name="DEF_MEM_LEVEL" />
      <variable citdl="int" name="MAX_WBITS" />
      <variable citdl="str" name="ZLIB_VERSION" />
      <variable citdl="int" name="Z_BEST_COMPRESSION" />
      <variable citdl="int" name="Z_BEST_SPEED" />
      <variable citdl="int" name="Z_DEFAULT_COMPRESSION" />
      <variable citdl="int" name="Z_DEFAULT_STRATEGY" />
      <variable citdl="int" name="Z_FILTERED" />
      <variable citdl="int" name="Z_FINISH" />
      <variable citdl="int" name="Z_FULL_FLUSH" />
      <variable citdl="int" name="Z_HUFFMAN_ONLY" />
      <variable citdl="int" name="Z_NO_FLUSH" />
      <variable citdl="int" name="Z_SYNC_FLUSH" />
      <variable citdl="str" name="__version__" />
      <scope doc="Compute an Adler-32 checksum of string." ilk="function" name="adler32" signature="adler32(string[, start])" />
      <scope doc="Returned compressed string." ilk="function" name="compress" signature="compress(string[, level])" />
      <scope doc="Return a compressor object." ilk="function" name="compressobj" returns="Compress" signature="compressobj([level])" />
      <scope doc="Compute a CRC-32 checksum of string." ilk="function" name="crc32" signature="crc32(string[, start])" />
      <scope doc="Return decompressed string." ilk="function" name="decompress" signature="decompress(string[, wbits[, bufsize]])" />
      <scope doc="Return a decompressor object." ilk="function" name="decompressobj" returns="Decompress" signature="decompressobj([wbits])" />
      <scope classrefs="Exception" ilk="class" name="error" />
      <scope attributes="__hidden__" ilk="class" name="Compress">
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="T.__new__(S, ...) -&gt; a new object with type S, a subtype of T" ilk="function" name="__new__" signature="T.__new__(S, ...) -&gt; a new object with type S, a subtype of T" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce_ex__" />
        <scope doc="__sizeof__() -&gt; size of object in memory, in bytes" ilk="function" name="__sizeof__" signature="__sizeof__() -&gt; size of object in memory, in bytes" />
        <scope doc="Abstract classes can override this to customize issubclass()." ilk="function" name="__subclasshook__" />
        <scope doc="Return a string containing data compressed." ilk="function" name="compress" signature="compress(data)" />
        <scope doc="Return a string containing any remaining compressed data." ilk="function" name="flush" signature="flush( [mode] )" />
      </scope>
      <scope attributes="__hidden__" ilk="class" name="Decompress">
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="T.__new__(S, ...) -&gt; a new object with type S, a subtype of T" ilk="function" name="__new__" signature="T.__new__(S, ...) -&gt; a new object with type S, a subtype of T" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce_ex__" />
        <scope doc="__sizeof__() -&gt; size of object in memory, in bytes" ilk="function" name="__sizeof__" signature="__sizeof__() -&gt; size of object in memory, in bytes" />
        <scope doc="Abstract classes can override this to customize issubclass()." ilk="function" name="__subclasshook__" />
        <scope doc="Return a string containing the decompressed" ilk="function" name="decompress" signature="decompress(data, max_length)" />
        <scope doc="Return a string containing any remaining" ilk="function" name="flush" signature="flush( [length] )" />
      </scope>
    </scope>
    <scope doc="Utilities for with-statement contexts.  See PEP 343." ilk="blob" lang="Python3" name="contextlib">
      <scope classrefs="object" doc="Helper for @contextmanager decorator." ilk="class" line="9" lineend="51" name="GeneratorContextManager">
        <scope ilk="function" line="15" lineend="19" name="__enter__" returns="next()" signature="__enter__()">
          <variable citdl="GeneratorContextManager" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="21" lineend="51" name="__exit__" returns="bool" signature="__exit__(type, value, traceback)">
          <variable citdl="GeneratorContextManager" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable citdl="type()" ilk="argument" name="value" />
          <variable ilk="argument" name="traceback" />
        </scope>
        <variable attributes="__instancevar__" line="13" name="gen" />
        <scope attributes="__ctor__" ilk="function" line="12" lineend="13" name="__init__" signature="GeneratorContextManager(gen)">
          <variable citdl="GeneratorContextManager" ilk="argument" name="self" />
          <variable ilk="argument" name="gen" />
        </scope>
      </scope>
      <variable citdl="list" line="7" name="__all__" />
      <scope classrefs="object" doc="Context to automatically close something at the end of a block.  Code like this:" ilk="class" line="133" lineend="155" name="closing">
        <variable attributes="__instancevar__" line="151" name="thing" />
        <scope ilk="function" line="152" lineend="153" name="__enter__" signature="__enter__()">
          <variable citdl="closing" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="154" lineend="155" name="__exit__" signature="__exit__(*exc_info)">
          <variable citdl="closing" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="exc_info" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="150" lineend="151" name="__init__" signature="closing(thing)">
          <variable citdl="closing" ilk="argument" name="self" />
          <variable ilk="argument" name="thing" />
        </scope>
      </scope>
      <scope doc="@contextmanager decorator." ilk="function" line="54" lineend="85" name="contextmanager" returns="contextmanager.helper" signature="contextmanager(func)">
        <scope ilk="function" line="83" lineend="84" name="helper" returns="GeneratorContextManager" signature="helper(*args, **kwds)">
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
        <variable ilk="argument" name="func" />
      </scope>
      <scope doc="Combine multiple context managers into a single nested context manager." ilk="function" line="89" lineend="130" name="nested" signature="nested(*args, **kwds)">
        <variable attributes="varargs" ilk="argument" name="managers" />
        <variable citdl="sys.exc_info()" line="107" name="exc" />
        <variable citdl="list" line="105" name="exits" />
        <variable citdl="list" line="106" name="vars" />
        <variable citdl="exits.pop()" line="110" name="exit" />
        <variable citdl="mgr.__enter__" line="111" name="enter" />
      </scope>
      <import module="sys" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <scope doc="Decorator factory to apply update_wrapper() to a wrapper function" ilk="function" name="wraps" signature="wraps(wrapped, assigned=(&apos;__module__&apos;, &apos;__name__&apos;, &apos;__doc__&apos;), updated=(&apos;__dict__&apos;,))" />
    </scope>
    <scope doc="Implementation of JSONDecoder" ilk="blob" lang="Python3" name="json.decoder">
      <variable citdl="dict" line="64" name="BACKSLASH" />
      <variable citdl="int" line="16" name="FLAGS" />
      <scope ilk="function" line="217" lineend="251" name="JSONArray" returns="tuple" signature="JSONArray(s_and_end, scan_once, context, _w=&lt;built-in method match of _sre.SRE_Pattern object at 0x022C99E0&gt;)">
        <variable line="222" name="end" />
        <variable citdl="WHITESPACE.match" ilk="argument" name="_w" />
        <variable ilk="argument" name="scan_once" />
        <variable citdl="list" line="219" name="values" />
        <variable ilk="argument" name="context" />
        <variable attributes="protected" citdl="values.append" line="227" name="_append" />
        <variable ilk="argument" name="s_and_end" />
        <variable citdl="list" line="220" name="nextchar" />
      </scope>
      <scope classrefs="object" doc="Simple JSON &lt;http://json.org&gt; decoder  Performs the following translations in decoding by default:" ilk="class" line="254" lineend="344" name="JSONDecoder">
        <variable attributes="__instancevar__" citdl="JSONObject" line="314" name="parse_object" />
        <variable attributes="__instancevar__" citdl="_CONSTANTS.__getitem__" line="311" name="parse_constant" />
        <variable attributes="__instancevar__" citdl="make_scanner()" line="317" name="scan_once" />
        <variable attributes="__instancevar__" citdl="float" line="309" name="parse_float" />
        <variable attributes="__instancevar__" line="308" name="object_hook" />
        <variable attributes="__instancevar__" citdl="int" line="310" name="parse_int" />
        <variable attributes="__instancevar__" citdl="py_scanstring" line="316" name="parse_string" />
        <scope doc="Return the Python representation of ``s`` (a ``str`` or ``unicode`` instance containing a JSON document)" ilk="function" line="320" lineend="329" name="decode" returns="obj" signature="decode(s, _w=WHITESPACE.match)">
          <variable citdl="JSONDecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <variable citdl="WHITESPACE.match" ilk="argument" name="_w" />
          <variable line="326" name="end" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="312" name="strict" />
        <variable attributes="__instancevar__" citdl="JSONArray" line="315" name="parse_array" />
        <variable attributes="__instancevar__" line="313" name="object_pairs_hook" />
        <scope attributes="__ctor__" doc="``object_hook``, if specified, will be called with the result of every JSON object decoded and its return value will be used in place of the given ``dict``." ilk="function" line="284" lineend="317" name="__init__" signature="JSONDecoder(object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)">
          <variable citdl="JSONDecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="object_hook" />
          <variable ilk="argument" name="parse_float" />
          <variable ilk="argument" name="parse_int" />
          <variable ilk="argument" name="parse_constant" />
          <variable citdl="True" ilk="argument" name="strict" />
          <variable ilk="argument" name="object_pairs_hook" />
        </scope>
        <scope doc="Decode a JSON document from ``s`` (a ``str`` or ``unicode`` beginning with a JSON document) and return a 2-tuple of the Python representation and the index in ``s`` where the document ended." ilk="function" line="331" lineend="344" name="raw_decode" returns="tuple" signature="raw_decode(s, idx=0)">
          <variable citdl="JSONDecoder" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <variable citdl="int" ilk="argument" name="idx" />
        </scope>
      </scope>
      <scope ilk="function" line="149" lineend="215" name="JSONObject" returns="tuple" signature="JSONObject(s_and_end, strict, scan_once, object_hook, object_pairs_hook, _w=&lt;built-in method match of _sre.SRE_Pattern object at 0x022C99E0&gt;, _ws=&apos; \t\n\r&apos;)">
        <variable citdl="object_hook()" line="152" name="pairs" />
        <variable ilk="argument" name="scan_once" />
        <variable ilk="argument" name="object_hook" />
        <variable citdl="WHITESPACE.match" ilk="argument" name="_w" />
        <variable citdl="pairs.append" line="153" name="pairs_append" />
        <variable citdl="str" ilk="argument" name="_ws" />
        <variable ilk="argument" name="strict" />
        <variable citdl="object_pairs_hook()" line="210" name="result" />
        <variable line="160" name="end" />
        <variable ilk="argument" name="s_and_end" />
        <variable citdl="list" line="156" name="nextchar" />
        <variable ilk="argument" name="object_pairs_hook" />
      </scope>
      <variable citdl="float" name="NaN" />
      <variable citdl="float" name="NegInf" />
      <variable citdl="float" name="PosInf" />
      <variable citdl="SRE_Pattern" line="63" name="STRINGCHUNK" />
      <variable citdl="SRE_Pattern" line="145" name="WHITESPACE" />
      <variable citdl="str" line="146" name="WHITESPACE_STR" />
      <variable citdl="list" line="14" name="__all__" />
      <import module="binascii" />
      <scope doc="Scan the string s for a JSON string." ilk="function" line="12" name="c_scanstring" signature="scanstring(basestring, end, strict=True) -&gt; (bytes, end)" />
      <scope ilk="function" line="41" lineend="51" name="errmsg" returns="fmt.format()" signature="errmsg(msg, doc, pos, end=None)">
        <variable ilk="argument" name="msg" />
        <variable ilk="argument" name="doc" />
        <variable citdl="str" line="45" name="fmt" />
        <variable ilk="argument" name="end" />
        <variable ilk="argument" name="pos" />
      </scope>
      <scope ilk="function" line="28" lineend="38" name="linecol" returns="tuple" signature="linecol(doc, pos)">
        <variable ilk="argument" name="doc" />
        <variable citdl="str" line="30" name="newline" />
        <variable ilk="argument" name="pos" />
        <variable citdl="doc.rindex()" line="35" name="colno" />
        <variable citdl="doc.count()" line="33" name="lineno" />
      </scope>
      <scope classrefs="object" doc="JSON scanner object" ilk="class" name="make_scanner" />
      <scope doc="Scan the string s for a JSON string." ilk="function" line="69" lineend="139" name="py_scanstring" returns="tuple" signature="py_scanstring(s, end, strict=True, _b={&apos;r&apos;: &apos;\r&apos;, &apos;&quot;&apos;: &apos;&quot;&apos;, &apos;t&apos;: &apos;\t&apos;, &apos;f&apos;: &apos;\x0c&apos;, &apos;b&apos;: &apos;\x08&apos;, &apos;\\&apos;: &apos;\\&apos;, &apos;/&apos;: &apos;/&apos;, &apos;n&apos;: &apos;\n&apos;}, _m=&lt;built-in method match of _sre.SRE_Pattern object at 0x027C51A0&gt;)">
        <variable citdl="int" line="81" name="begin" />
        <variable citdl="chunk.end()" ilk="argument" name="end" />
        <variable citdl="_m()" line="83" name="chunk" />
        <variable citdl="STRINGCHUNK.match" ilk="argument" name="_m" />
        <variable citdl="chr()" line="112" name="char" />
        <variable citdl="True" ilk="argument" name="strict" />
        <variable ilk="argument" name="s" />
        <variable citdl="list" line="129" name="esc2" />
        <variable attributes="protected" citdl="chunks.append" line="80" name="_append" />
        <variable citdl="chunk.end()" line="119" name="next_end" />
        <variable citdl="int" line="123" name="uni" />
        <variable citdl="int()" line="132" name="uni2" />
        <variable citdl="list" line="105" name="esc" />
        <variable citdl="dict" ilk="argument" name="_b" />
        <variable citdl="list" line="79" name="chunks" />
        <variable citdl="str" line="99" name="msg" />
      </scope>
      <import module="re" />
      <scope doc="Scan the string s for a JSON string." ilk="function" line="143" name="scanstring" signature="scanstring(basestring, end, strict=True) -&gt; (bytes, end)" />
      <import module="struct" />
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="18" lineend="23" name="_floatconstants" returns="tuple" signature="_floatconstants()">
        <variable attributes="protected" citdl="binascii.unhexlify()" line="19" name="_BYTES" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="56" name="_CONSTANTS" />
    </scope>
    <scope doc="distutils.command.build_py  Implements the Distutils &apos;build_py&apos; command." ilk="blob" lang="Python3" name="distutils.command.build_py">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="object" doc="Mixin class for commands that run 2to3. To configure 2to3, setup scripts may either change the class variables, or inherit from individual commands" ilk="class" name="Mixin2to3" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" name="__revision__" />
      <scope classrefs="Command" ilk="class" name="build_py" />
      <scope classrefs="build_py Mixin2to3" ilk="class" name="build_py_2to3" />
      <scope doc="Return &apos;pathname&apos; as a name that will work on the native filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope doc="Return a list of paths matching a pathname pattern." ilk="function" name="glob" signature="glob(pathname)" />
      <import module="log" />
      <import module="os" />
      <import module="sys" />
    </scope>
    <scope doc="Append module search paths for third-party packages to sys.path.  ****************************************************************" ilk="blob" lang="Python3" name="site">
      <variable citdl="bool" line="63" name="ENABLE_USER_SITE" />
      <variable citdl="list" line="60" name="PREFIXES" />
      <variable citdl="str" line="66" name="USER_BASE" />
      <variable citdl="str" line="65" name="USER_SITE" />
      <scope doc="Set all module&apos; __file__ attribute to an absolute path" ilk="function" line="74" lineend="82" name="abs__file__" signature="abs__file__()" />
      <scope doc="Append ./build/lib.&lt;platform&gt; in case we&apos;re running in the build dir (especially for Guido :-)" ilk="function" line="105" lineend="113" name="addbuilddir" signature="addbuilddir()">
        <variable citdl="os.path.join()" line="109" name="s" />
      </scope>
      <scope doc="Process a .pth file within the site-packages directory: For each line in the file, either combine it with sitedir to a path and add that to known_paths, or execute it if it starts with &apos;import &apos;." ilk="function" line="129" lineend="158" name="addpackage" signature="addpackage(sitedir, name, known_paths)">
        <variable citdl="int" line="136" name="reset" />
        <variable ilk="argument" name="name" />
        <variable citdl="open()" line="141" name="f" />
        <variable ilk="argument" name="sitedir" />
        <variable ilk="argument" name="known_paths" />
        <variable citdl="os.path.join()" line="139" name="fullname" />
        <variable citdl="line.rstrip()" line="151" name="line" />
      </scope>
      <scope doc="Add &apos;sitedir&apos; argument to sys.path if missing and handle .pth files in &apos;sitedir&apos;" ilk="function" line="161" lineend="181" name="addsitedir" returns="_init_pathinfo()" signature="addsitedir(sitedir, known_paths=None)">
        <variable citdl="int" line="166" name="reset" />
        <variable ilk="argument" name="sitedir" />
        <variable citdl="os.listdir()" line="173" name="names" />
        <variable citdl="_init_pathinfo()" ilk="argument" name="known_paths" />
      </scope>
      <scope doc="Add site-packages (and possibly site-python) to sys.path" ilk="function" line="248" lineend="285" name="addsitepackages" signature="addsitepackages(known_paths)">
        <variable citdl="list" line="250" name="sitedirs" />
        <variable citdl="list" line="251" name="seen" />
        <variable ilk="argument" name="known_paths" />
      </scope>
      <scope doc="Add a per user site-package to sys.path" ilk="function" line="209" lineend="245" name="addusersitepackages" signature="addusersitepackages(known_paths)">
        <variable ilk="argument" name="known_paths" />
        <variable line="233" name="USER_BASE" />
        <variable citdl="str" line="232" name="base" />
        <scope ilk="function" line="224" lineend="225" name="joinuser" returns="os.path.expanduser()" signature="joinuser(*args)">
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable citdl="os.path.join()" line="234" name="USER_SITE" />
        <variable citdl="os.environ.get()" line="222" name="env_base" />
      </scope>
      <scope doc="On Windows, some default encodings are not provided by Python, while they are always available as &quot;mbcs&quot; in each locale." ilk="function" line="434" lineend="447" name="aliasmbcs" signature="aliasmbcs()">
        <variable line="440" name="enc" />
      </scope>
      <import module="builtins" />
      <scope doc="Check if user site directory is safe for inclusion" ilk="function" line="184" lineend="206" name="check_enableusersite" returns="bool" signature="check_enableusersite()" />
      <scope doc="Run custom site specific code, if available." ilk="function" line="469" lineend="481" name="execsitecustomize" signature="execsitecustomize()" />
      <scope doc="Run custom user specific code, if available." ilk="function" line="484" lineend="489" name="execusercustomize" signature="execusercustomize()" />
      <scope ilk="function" line="492" lineend="518" name="main" signature="main()">
        <variable citdl="check_enableusersite()" line="501" name="ENABLE_USER_SITE" />
        <variable citdl="removeduppaths()" line="496" name="known_paths" />
      </scope>
      <scope ilk="function" line="69" lineend="71" name="makepath" returns="tuple" signature="makepath(*paths)">
        <variable attributes="varargs" ilk="argument" name="paths" />
        <variable citdl="os.path.abspath()" line="70" name="dir" />
      </scope>
      <import module="os" />
      <scope doc="Remove duplicate entries from sys.path along with making them absolute" ilk="function" line="85" lineend="101" name="removeduppaths" returns="set()" signature="removeduppaths()">
        <variable citdl="list" line="90" name="L" />
        <variable citdl="set()" line="91" name="known_paths" />
      </scope>
      <scope doc="The OS/2 EMX port has optional extension modules that do double duty as DLLs (and must use the .DLL file extension) for other extensions." ilk="function" line="288" lineend="302" name="setBEGINLIBPATH" signature="setBEGINLIBPATH()">
        <variable citdl="os.path.join()" line="296" name="dllpath" />
        <variable line="297" name="libpath" />
      </scope>
      <scope doc="Set &apos;copyright&apos; and &apos;credits&apos; in builtins" ilk="function" line="400" lineend="415" name="setcopyright" signature="setcopyright()">
        <variable citdl="os.path.dirname()" line="411" name="here" />
      </scope>
      <scope doc="Set the string encoding used by the Unicode implementation." ilk="function" line="449" lineend="466" name="setencoding" signature="setencoding()">
        <variable citdl="locale.getdefaultlocale()" line="457" name="loc" />
        <variable citdl="str" line="453" name="encoding" />
      </scope>
      <scope ilk="function" line="431" lineend="432" name="sethelper" signature="sethelper()" />
      <scope doc="Define new built-ins &apos;quit&apos; and &apos;exit&apos;." ilk="function" line="305" lineend="336" name="setquit" signature="setquit()">
        <scope classrefs="object" ilk="class" line="317" lineend="334" name="Quitter">
          <scope attributes="__ctor__" ilk="function" line="318" lineend="319" name="__init__" signature="Quitter(name)">
            <variable citdl="Quitter" ilk="argument" name="self" />
            <variable ilk="argument" name="name" />
          </scope>
          <variable attributes="__instancevar__" line="319" name="name" />
          <scope ilk="function" line="320" lineend="321" name="__repr__" returns="tuple" signature="__repr__()">
            <variable citdl="Quitter" ilk="argument" name="self" />
          </scope>
          <scope ilk="function" line="322" lineend="334" name="__call__" signature="__call__(code=None)">
            <variable citdl="Quitter" ilk="argument" name="self" />
            <variable ilk="argument" name="code" />
            <variable citdl="int" line="326" name="fd" />
          </scope>
        </scope>
        <variable citdl="str" line="311" name="eof" />
      </scope>
      <import module="sys" />
      <scope attributes="protected __hidden__" classrefs="object" doc="Define the built-in &apos;help&apos;." ilk="class" line="418" lineend="429" name="_Helper">
        <scope ilk="function" line="424" lineend="425" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="_Helper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="427" lineend="429" name="__call__" returns="pydoc.help()" signature="__call__(*args, **kwds)">
          <import line="428" module="pydoc" />
          <variable citdl="_Helper" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="522" lineend="569" name="_script" signature="_script()">
        <import line="567" module="textwrap" />
        <variable citdl="str" line="523" name="help" />
        <variable citdl="list" line="537" name="args" />
        <variable citdl="list" line="550" name="buffer" />
      </scope>
      <scope attributes="protected __hidden__" doc="Return a set containing all existing directory entries from sys.path" ilk="function" line="116" lineend="126" name="_init_pathinfo" returns="set()" signature="_init_pathinfo()">
        <variable citdl="set()" line="118" name="d" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="object" doc="interactive prompt objects for printing the license text, a list of contributors and the copyright notice." ilk="class" line="339" lineend="398" name="_Printer">
        <variable citdl="int" line="343" name="MAXLINES" />
        <scope attributes="__ctor__" ilk="function" line="345" lineend="350" name="__init__" signature="_Printer(name, data, files=(), dirs=())">
          <variable citdl="_Printer" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="data" />
          <variable citdl="tuple" ilk="argument" name="files" />
          <variable citdl="tuple" ilk="argument" name="dirs" />
        </scope>
        <variable attributes="private __instancevar__" line="346" name="__name" />
        <variable attributes="private __instancevar__" line="347" name="__data" />
        <variable attributes="private __instancevar__" citdl="tuple" line="348" name="__files" />
        <variable attributes="private __instancevar__" citdl="tuple" line="349" name="__dirs" />
        <variable attributes="private __instancevar__" citdl="data.split()" line="350" name="__lines" />
        <scope attributes="private" ilk="function" line="352" lineend="371" name="__setup" signature="__setup()">
          <variable citdl="_Printer" ilk="argument" name="self" />
          <variable citdl="fp.read()" line="355" name="data" />
          <variable citdl="os.path.join()" line="358" name="filename" />
          <variable citdl="open()" line="360" name="fp" />
        </scope>
        <variable attributes="private __instancevar__" citdl="len()" line="371" name="__linecnt" />
        <scope ilk="function" line="373" lineend="378" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="_Printer" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="380" lineend="398" name="__call__" signature="__call__()">
          <variable citdl="_Printer" ilk="argument" name="self" />
          <variable citdl="str" line="382" name="prompt" />
          <variable citdl="int" line="383" name="lineno" />
          <variable citdl="input()" line="392" name="key" />
        </scope>
      </scope>
    </scope>
    <scope doc="Class representing message/* MIME documents." ilk="blob" lang="Python3" name="email.mime.message">
      <scope classrefs="MIMENonMultipart" doc="Class representing message/* MIME documents." ilk="class" line="14" lineend="34" name="MIMEMessage">
        <scope attributes="__ctor__" doc="Create a message/* type MIME document." ilk="function" line="17" lineend="34" name="__init__" signature="MIMEMessage(_msg, _subtype=&apos;rfc822&apos;)">
          <variable citdl="MIMEMessage" ilk="argument" name="self" />
          <variable ilk="argument" name="_msg" />
          <variable citdl="str" ilk="argument" name="_subtype" />
        </scope>
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME multipart/* type messages." ilk="class" name="MIMENonMultipart" />
      <variable citdl="list" line="7" name="__all__" />
      <import module="message" />
    </scope>
    <scope doc="The io module provides the Python interfaces to stream handling. The builtin open function is defined in this module. " ilk="blob" lang="Python3" name="io">
      <scope classrefs="IOError" doc="Exception raised when I/O would block on a non-blocking I/O stream" ilk="class" name="BlockingIOError" />
      <scope classrefs="_BufferedIOBase IOBase" ilk="class" line="84" lineend="85" name="BufferedIOBase" />
      <scope classrefs="_BufferedIOBase" doc="A buffered reader and writer object together.  A buffered reader object and buffered writer object put together to" ilk="class" name="BufferedRWPair" />
      <scope classrefs="_BufferedIOBase" doc="A buffered interface to random access streams.  The constructor creates a reader and writer for a seekable stream," ilk="class" name="BufferedRandom" />
      <scope classrefs="_BufferedIOBase" doc="Create a new buffered reader using the given readable raw IO object." ilk="class" name="BufferedReader" />
      <scope classrefs="_BufferedIOBase" doc="A buffer for a writeable sequential RawIO object.  The constructor creates a BufferedWriter for the given writeable raw" ilk="class" name="BufferedWriter" />
      <scope classrefs="_BufferedIOBase" doc="BytesIO([buffer]) -&gt; object  Create a buffered I/O implementation using an in-memory bytes" ilk="class" name="BytesIO" />
      <variable citdl="int" name="DEFAULT_BUFFER_SIZE" />
      <scope classrefs="_RawIOBase" doc="file(name: str[, mode: str]) -&gt; file IO object  Open a file.  The mode can be &apos;r&apos;, &apos;w&apos; or &apos;a&apos; for reading (default)," ilk="class" name="FileIO" />
      <scope classrefs="_IOBase" doc="# Declaring ABCs in C is tricky so we do it here. # Method descriptions and default implementations are inherited from the C # version however." ilk="class" line="78" lineend="79" name="IOBase" />
      <scope classrefs="object" doc="Codec used when reading a file in universal newlines mode.  It wraps another incremental decoder, translating \r\n and \r into \n.  It also records the types of newlines encountered.  When used with" ilk="class" name="IncrementalNewlineDecoder" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" line="68" name="OpenWrapper" />
      <scope classrefs="_RawIOBase IOBase" ilk="class" line="81" lineend="82" name="RawIOBase" />
      <variable citdl="int" line="72" name="SEEK_CUR" />
      <variable citdl="int" line="73" name="SEEK_END" />
      <variable citdl="int" line="71" name="SEEK_SET" />
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <scope classrefs="_TextIOBase IOBase" ilk="class" line="87" lineend="88" name="TextIOBase" />
      <scope classrefs="_TextIOBase" doc="Character and line based layer over a BufferedIOBase object, buffer.  encoding gives the name of the encoding that the stream will be" ilk="class" name="TextIOWrapper" />
      <scope classrefs="ValueError IOError" ilk="class" name="UnsupportedOperation" />
      <variable citdl="list" line="53" name="__all__" />
      <variable citdl="str" line="46" name="__author__" />
      <import module="_io" />
      <import module="abc" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="open" />
    </scope>
    <scope doc="# tk common colour chooser dialogue # # this module provides an interface to the native color dialogue" ilk="blob" lang="Python3" name="tkinter.colorchooser">
      <scope classrefs="Dialog" doc="Ask for a color" ilk="class" line="28" lineend="52" name="Chooser">
        <scope attributes="protected" ilk="function" line="33" lineend="41" name="_fixoptions" signature="_fixoptions()">
          <variable citdl="Chooser" ilk="argument" name="self" />
          <variable line="36" name="color" />
        </scope>
        <variable citdl="str" line="31" name="command" />
        <scope attributes="protected" ilk="function" line="43" lineend="52" name="_fixresult" returns="tuple" signature="_fixresult(widget, result)">
          <variable citdl="Chooser" ilk="argument" name="self" />
          <variable ilk="argument" name="widget" />
          <variable ilk="argument" name="result" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" name="Dialog" />
      <scope doc="Ask for a color" ilk="function" line="58" lineend="65" name="askcolor" signature="askcolor(color=None, **options)">
        <variable ilk="argument" name="color" />
        <variable attributes="kwargs" citdl="options.copy()" ilk="argument" name="options" />
      </scope>
    </scope>
    <scope doc="Python wrapper for Expat parser." ilk="blob" lang="Python3" name="pyexpat">
      <variable citdl="str" name="EXPAT_VERSION" />
      <scope doc="Returns string error for given number." ilk="function" name="ErrorString" returns="str" signature="ErrorString(errno) -&gt; string" />
      <scope classrefs="Exception" ilk="class" name="ExpatError" />
      <scope doc="Return a new XML parser object." ilk="function" name="ParserCreate" returns="xmlparser" signature="ParserCreate([encoding[, namespace_separator]]) -&gt; parser" />
      <scope classrefs="object" doc="XML parser" ilk="class" name="XMLParserType" />
      <variable citdl="int" name="XML_PARAM_ENTITY_PARSING_ALWAYS" />
      <variable citdl="int" name="XML_PARAM_ENTITY_PARSING_NEVER" />
      <variable citdl="int" name="XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE" />
      <variable citdl="str" name="__version__" />
      <scope classrefs="Exception" ilk="class" name="error" />
      <import module="errors" />
      <variable citdl="PyCapsule" name="expat_CAPI" />
      <variable citdl="list" name="features" />
      <import module="model" />
      <variable citdl="str" name="native_encoding" />
      <variable citdl="tuple" name="version_info" />
      <scope attributes="__hidden__" doc="XML parser" ilk="class" name="xmlparser" />
    </scope>
    <scope doc="Routines to help recognizing sound files.  Function whathdr() recognizes various types of sound file headers." ilk="blob" lang="Python3" name="sndhdr">
      <variable citdl="list" line="33" name="__all__" />
      <scope ilk="function" line="183" lineend="184" name="get_long_be" returns="int" signature="get_long_be(b)">
        <variable ilk="argument" name="b" />
      </scope>
      <scope ilk="function" line="186" lineend="187" name="get_long_le" returns="int" signature="get_long_le(b)">
        <variable ilk="argument" name="b" />
      </scope>
      <scope ilk="function" line="189" lineend="190" name="get_short_be" returns="int" signature="get_short_be(b)">
        <variable ilk="argument" name="b" />
      </scope>
      <scope ilk="function" line="192" lineend="193" name="get_short_le" returns="int" signature="get_short_le(b)">
        <variable ilk="argument" name="b" />
      </scope>
      <scope ilk="function" line="200" lineend="213" name="test" signature="test()">
        <variable citdl="int" line="202" name="recursive" />
      </scope>
      <scope ilk="function" line="152" lineend="156" name="test_8svx" returns="tuple" signature="test_8svx(h, f)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="58" lineend="74" name="test_aifc" returns="tuple" signature="test_aifc(h, f)">
        <variable citdl="aifc.open()" line="70" name="a" />
        <variable ilk="argument" name="h" />
        <variable citdl="str" line="63" name="fmt" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="79" lineend="107" name="test_au" returns="tuple" signature="test_au(h, f)">
        <variable citdl="func()" line="87" name="hdr_size" />
        <variable citdl="func()" line="91" name="nchannels" />
        <variable citdl="func()" line="89" name="encoding" />
        <variable ilk="argument" name="h" />
        <variable citdl="str" line="86" name="filetype" />
        <variable ilk="argument" name="f" />
        <variable citdl="func()" line="104" name="nframe" />
        <variable citdl="int" line="92" name="sample_size" />
        <variable citdl="func()" line="90" name="rate" />
        <variable citdl="get_long_be" line="81" name="func" />
        <variable citdl="func()" line="102" name="frame_size" />
        <variable citdl="int" line="94" name="sample_bits" />
        <variable citdl="func()" line="88" name="data_size" />
      </scope>
      <scope ilk="function" line="112" lineend="120" name="test_hcom" returns="tuple" signature="test_hcom(h, f)">
        <variable ilk="argument" name="h" />
        <variable citdl="int" line="117" name="rate" />
        <variable citdl="get_long_be()" line="115" name="divisor" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="170" lineend="174" name="test_sndr" returns="tuple" signature="test_sndr(h, f)">
        <variable ilk="argument" name="h" />
        <variable citdl="get_short_le()" line="172" name="rate" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="161" lineend="165" name="test_sndt" returns="tuple" signature="test_sndt(h, f)">
        <variable ilk="argument" name="h" />
        <variable citdl="get_short_le()" line="164" name="rate" />
        <variable citdl="get_long_le()" line="163" name="nsamples" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="125" lineend="134" name="test_voc" returns="tuple" signature="test_voc(h, f)">
        <variable ilk="argument" name="h" />
        <variable citdl="int" line="129" name="rate" />
        <variable citdl="get_short_le()" line="128" name="sbseek" />
        <variable citdl="int" line="131" name="ratecode" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="139" lineend="147" name="test_wav" returns="tuple" signature="test_wav(h, f)">
        <variable citdl="get_short_le()" line="143" name="style" />
        <variable citdl="get_short_le()" line="144" name="nchannels" />
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
        <variable citdl="get_long_le()" line="145" name="rate" />
        <variable citdl="get_short_le()" line="146" name="sample_bits" />
      </scope>
      <scope ilk="function" line="215" lineend="234" name="testall" signature="testall(list, recursive, toplevel)">
        <variable ilk="argument" name="toplevel" />
        <variable ilk="argument" name="list" />
        <variable ilk="argument" name="recursive" />
        <variable citdl="glob.glob()" line="224" name="names" />
      </scope>
      <variable citdl="list" line="56" name="tests" />
      <scope doc="Guess the type of a sound file." ilk="function" line="35" lineend="38" name="what" returns="whathdr()" signature="what(filename)">
        <variable citdl="whathdr()" line="37" name="res" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Recognize sound headers." ilk="function" line="41" lineend="49" name="whathdr" returns="tf()" signature="whathdr(filename)">
        <variable citdl="f.read()" line="44" name="h" />
        <variable citdl="tf()" line="46" name="res" />
        <variable ilk="argument" name="filename" />
      </scope>
    </scope>
    <scope doc="Fixer that turns &apos;long&apos; into &apos;int&apos; everywhere." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_long">
      <scope classrefs="BaseFix" ilk="class" line="12" lineend="19" name="FixLong">
        <variable citdl="str" line="14" name="PATTERN" />
        <scope ilk="function" line="16" lineend="19" name="transform" signature="transform(node, results)">
          <variable citdl="FixLong" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
      </scope>
      <import module="fixer_base" />
      <scope doc="Check that something isn&apos;t an attribute or function name etc." ilk="function" name="is_probably_builtin" signature="is_probably_builtin(node)" />
    </scope>
    <scope doc="A multi-producer, multi-consumer queue." ilk="blob" lang="Python3" name="queue">
      <scope classrefs="Exception" doc="Exception raised by Queue.get(block=0)/get_nowait()." ilk="class" line="13" lineend="15" name="Empty" />
      <scope classrefs="Exception" doc="Exception raised by Queue.put(block=0)/put_nowait()." ilk="class" line="17" lineend="19" name="Full" />
      <scope classrefs="Queue" doc="Variant of Queue that retrieves most recently added entries first." ilk="class" line="248" lineend="261" name="LifoQueue">
        <variable attributes="__instancevar__" citdl="list" line="252" name="queue" />
        <scope attributes="protected" ilk="function" line="254" lineend="255" name="_qsize" returns="LifoQueue._qsize.len()" signature="_qsize(len=len)">
          <variable citdl="LifoQueue" ilk="argument" name="self" />
          <variable citdl="len" ilk="argument" name="len" />
        </scope>
        <scope attributes="protected" ilk="function" line="251" lineend="252" name="_init" signature="_init(maxsize)">
          <variable citdl="LifoQueue" ilk="argument" name="self" />
          <variable ilk="argument" name="maxsize" />
        </scope>
        <scope attributes="protected" ilk="function" line="257" lineend="258" name="_put" signature="_put(item)">
          <variable citdl="LifoQueue" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope attributes="protected" ilk="function" line="260" lineend="261" name="_get" returns="self.queue.pop()" signature="_get()">
          <variable citdl="LifoQueue" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Queue" doc="Variant of Queue that retrieves open entries in priority order (lowest first).  Entries are typically tuples of the form:  (priority number, data)." ilk="class" line="229" lineend="245" name="PriorityQueue">
        <variable attributes="__instancevar__" citdl="list" line="236" name="queue" />
        <scope attributes="protected" ilk="function" line="238" lineend="239" name="_qsize" returns="PriorityQueue._qsize.len()" signature="_qsize(len=len)">
          <variable citdl="PriorityQueue" ilk="argument" name="self" />
          <variable citdl="len" ilk="argument" name="len" />
        </scope>
        <scope attributes="protected" ilk="function" line="235" lineend="236" name="_init" signature="_init(maxsize)">
          <variable citdl="PriorityQueue" ilk="argument" name="self" />
          <variable ilk="argument" name="maxsize" />
        </scope>
        <scope attributes="protected" ilk="function" line="241" lineend="242" name="_put" signature="_put(item, heappush=heapq.heappush)">
          <variable citdl="PriorityQueue" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable citdl="heapq.heappush" ilk="argument" name="heappush" />
        </scope>
        <scope attributes="protected" ilk="function" line="244" lineend="245" name="_get" returns="PriorityQueue._get.heappop()" signature="_get(heappop=heapq.heappop)">
          <variable citdl="PriorityQueue" ilk="argument" name="self" />
          <variable citdl="heapq.heappop" ilk="argument" name="heappop" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Create a queue object with a given maximum size.  If maxsize is &lt;= 0, the queue size is infinite." ilk="class" line="21" lineend="226" name="Queue">
        <scope doc="Return the approximate size of the queue (not reliable!)." ilk="function" line="86" lineend="91" name="qsize" returns="self._qsize()" signature="qsize()">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="self._qsize()" line="89" name="n" />
        </scope>
        <scope doc="Blocks until all items in the Queue have been gotten and processed." ilk="function" line="70" lineend="84" name="join" signature="join()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="221" lineend="222" name="_put" signature="_put(item)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <scope doc="Remove and return an item from the queue." ilk="function" line="167" lineend="199" name="get" returns="self._get()" signature="get(block=True, timeout=None)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="block" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="_time()" line="189" name="endtime" />
          <variable citdl="_time()" line="191" name="remaining" />
          <variable citdl="self._get()" line="195" name="item" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="43" name="unfinished_tasks" />
        <variable attributes="__instancevar__" citdl="_threading.Condition()" line="36" name="not_empty" />
        <scope doc="Remove and return an item from the queue without blocking." ilk="function" line="201" lineend="207" name="get_nowait" returns="Queue.get()" signature="get_nowait()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="214" lineend="215" name="_init" signature="_init(maxsize)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable ilk="argument" name="maxsize" />
        </scope>
        <variable attributes="__instancevar__" citdl="deque()" line="215" name="queue" />
        <scope attributes="protected" ilk="function" line="225" lineend="226" name="_get" returns="self.queue.popleft()" signature="_get()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="27" name="maxsize" />
        <variable attributes="__instancevar__" citdl="_threading.Condition()" line="42" name="all_tasks_done" />
        <scope doc="Return True if the queue is full, False otherwise (not reliable!)." ilk="function" line="110" lineend="122" name="full" returns="bool" signature="full()">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="bool" line="120" name="n" />
        </scope>
        <scope doc="Return True if the queue is empty, False otherwise (not reliable!)." ilk="function" line="93" lineend="108" name="empty" returns="bool" signature="empty()">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="bool" line="106" name="n" />
        </scope>
        <scope doc="Put an item into the queue without blocking." ilk="function" line="159" lineend="165" name="put_nowait" returns="Queue.put()" signature="put_nowait(item)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
        </scope>
        <variable attributes="__instancevar__" citdl="_threading.Condition()" line="39" name="not_full" />
        <scope doc="Put an item into the queue." ilk="function" line="124" lineend="157" name="put" signature="put(item, block=True, timeout=None)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable citdl="True" ilk="argument" name="block" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="_time()" line="147" name="endtime" />
          <variable citdl="_time()" line="149" name="remaining" />
        </scope>
        <variable attributes="__instancevar__" citdl="_threading.Lock()" line="33" name="mutex" />
        <scope doc="Indicate that a formerly enqueued task is complete." ilk="function" line="45" lineend="68" name="task_done" signature="task_done()">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="int" line="61" name="unfinished" />
        </scope>
        <scope attributes="protected" ilk="function" line="217" lineend="218" name="_qsize" returns="Queue._qsize.len()" signature="_qsize(len=len)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="len" ilk="argument" name="len" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="26" lineend="43" name="__init__" signature="Queue(maxsize=0)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="maxsize" />
        </scope>
      </scope>
      <variable citdl="list" line="11" name="__all__" />
      <import module="_threading" />
      <scope classrefs="object" doc="deque(iterable[, maxlen]) --&gt; deque object  Build an ordered collection accessible from endpoints only." ilk="class" name="deque" />
      <import module="heapq" />
    </scope>
    <scope doc="Fixer for generator.throw(E, V, T).  g.throw(E)       -&gt; g.throw(E)" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_throw">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" name="ArgList" signature="ArgList(args, lparen=Leaf(7, &apos;(&apos;), rparen=Leaf(8, &apos;)&apos;))" />
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" ilk="class" line="16" lineend="56" name="FixThrow">
        <variable citdl="str" line="18" name="PATTERN" />
        <scope ilk="function" line="26" lineend="56" name="transform" signature="transform(node, results)">
          <variable citdl="FixThrow" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="self.syms" line="27" name="syms" />
          <variable line="29" name="exc" />
          <variable citdl="val.clone()" line="35" name="val" />
          <variable citdl="list" line="41" name="args" />
          <variable line="46" name="throw_args" />
          <variable line="49" name="tb" />
          <variable citdl="Call()" line="52" name="e" />
          <variable citdl="list" line="53" name="with_tb" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Does the node represent a tuple literal?" ilk="function" name="is_tuple" signature="is_tuple(node)" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="# Module implementing queues # # multiprocessing/queues.py" ilk="blob" lang="Python3" name="multiprocessing.queues">
      <scope classrefs="Semaphore" ilk="class" name="BoundedSemaphore" />
      <scope classrefs="object" ilk="class" name="Condition" />
      <scope classrefs="Exception" doc="Exception raised by Queue.get(block=0)/get_nowait()." ilk="class" name="Empty" />
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs" ilk="class" name="Finalize" />
      <scope classrefs="Exception" doc="Exception raised by Queue.put(block=0)/put_nowait()." ilk="class" name="Full" />
      <scope classrefs="Queue" ilk="class" line="271" lineend="318" name="JoinableQueue">
        <scope ilk="function" line="312" lineend="318" name="join" signature="join()">
          <variable citdl="JoinableQueue" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="281" lineend="283" name="__setstate__" signature="__setstate__(state)">
          <variable citdl="JoinableQueue" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
        <scope ilk="function" line="302" lineend="310" name="task_done" signature="task_done()">
          <variable citdl="JoinableQueue" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Condition()" line="276" name="_cond" />
        <variable attributes="protected __instancevar__" citdl="Semaphore()" line="275" name="_unfinished_tasks" />
        <scope ilk="function" line="285" lineend="300" name="put" signature="put(obj, block=True, timeout=None)">
          <variable citdl="JoinableQueue" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable citdl="True" ilk="argument" name="block" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <scope ilk="function" line="278" lineend="279" name="__getstate__" returns="tuple" signature="__getstate__()">
          <variable citdl="JoinableQueue" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="273" lineend="276" name="__init__" signature="JoinableQueue(maxsize=0)">
          <variable citdl="JoinableQueue" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="maxsize" />
        </scope>
      </scope>
      <scope classrefs="SemLock" ilk="class" name="Lock" />
      <scope doc="Returns two connection object connected by a pipe" ilk="function" name="Pipe" signature="Pipe(duplex=True)" />
      <scope classrefs="object" ilk="class" line="30" lineend="259" name="Queue">
        <scope ilk="function" line="111" lineend="113" name="qsize" returns="_multiprocessing.SemLock.SEM_VALUE_MAX" signature="qsize()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="67" name="_closed" />
        <variable attributes="protected __instancevar__" citdl="Finalize()" line="65" name="_jointhread" />
        <variable attributes="protected __instancevar__" citdl="Lock()" line="40" name="_wlock" />
        <scope ilk="function" line="127" lineend="131" name="close" signature="close()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="32" lineend="48" name="__init__" signature="Queue(maxsize=0)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="maxsize" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="threading.Thread()" line="64" name="_thread" />
        <variable attributes="protected __instancevar__" citdl="collections.deque()" line="63" name="_buffer" />
        <scope attributes="protected" ilk="function" line="206" lineend="259" name="_feed" signature="_feed(notempty, send, writelock, close)">
          <import line="208" module=".util" symbol="is_exiting" />
          <import line="256" module="traceback" />
          <variable citdl="Queue" ilk="argument" name="buffer" />
          <variable ilk="argument" name="notempty" />
          <variable ilk="argument" name="send" />
          <variable ilk="argument" name="writelock" />
          <variable ilk="argument" name="close" />
          <variable citdl="notempty.acquire" line="210" name="nacquire" />
          <variable citdl="notempty.release" line="211" name="nrelease" />
          <variable citdl="notempty.wait" line="212" name="nwait" />
          <variable citdl="buffer.popleft" line="213" name="bpopleft" />
          <variable citdl="_sentinel" line="214" name="sentinel" />
          <variable citdl="writelock.acquire" line="216" name="wacquire" />
          <variable citdl="writelock.release" line="217" name="wrelease" />
          <variable citdl="bpopleft()" line="231" name="obj" />
        </scope>
        <scope ilk="function" line="87" lineend="109" name="get" returns="_recv()" signature="get(block=True, timeout=None)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="block" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="_recv()" line="91" name="res" />
          <variable citdl="time.time()" line="99" name="deadline" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="os.getpid()" line="38" name="_opid" />
        <variable attributes="protected __instancevar__" citdl="self._writer.send" line="69" name="_send" />
        <scope attributes="protected" ilk="function" line="147" lineend="182" name="_start_thread" signature="_start_thread()">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable citdl="bool" line="170" name="created_by_this_process" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="35" name="_maxsize" />
        <scope ilk="function" line="50" lineend="53" name="__getstate__" returns="tuple" signature="__getstate__()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="115" lineend="116" name="empty" returns="bool" signature="empty()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Finalize()" line="68" name="_close" />
        <scope ilk="function" line="118" lineend="119" name="full" returns="self._sem._semlock._is_zero()" signature="full()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="121" lineend="122" name="get_nowait" returns="Queue.get()" signature="get_nowait()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="55" lineend="58" name="__setstate__" signature="__setstate__(state)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
        <scope ilk="function" line="133" lineend="137" name="join_thread" signature="join_thread()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Lock()" line="37" name="_rlock" />
        <scope ilk="function" line="139" lineend="145" name="cancel_join_thread" signature="cancel_join_thread()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._reader.poll" line="71" name="_poll" />
        <scope attributes="protected" ilk="function" line="186" lineend="193" name="_finalize_join" signature="_finalize_join()">
          <variable citdl="Queue" ilk="argument" name="twr" />
          <variable citdl="twr()" line="188" name="thread" />
        </scope>
        <scope ilk="function" line="73" lineend="85" name="put" signature="put(obj, block=True, timeout=None)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable citdl="True" ilk="argument" name="block" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <scope attributes="protected" ilk="function" line="60" lineend="71" name="_after_fork" signature="_after_fork()">
          <variable citdl="Queue" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._reader.recv" line="70" name="_recv" />
        <variable attributes="protected __instancevar__" citdl="threading.Condition()" line="62" name="_notempty" />
        <variable attributes="protected __instancevar__" citdl="BoundedSemaphore()" line="43" name="_sem" />
        <scope attributes="protected" ilk="function" line="196" lineend="203" name="_finalize_close" signature="_finalize_close(notempty)">
          <variable citdl="Queue" ilk="argument" name="buffer" />
          <variable ilk="argument" name="notempty" />
        </scope>
        <scope ilk="function" line="124" lineend="125" name="put_nowait" returns="Queue.put()" signature="put_nowait(obj)">
          <variable citdl="Queue" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="True" line="66" name="_joincancelled" />
      </scope>
      <scope classrefs="SemLock" ilk="class" name="Semaphore" />
      <scope classrefs="object" ilk="class" line="324" lineend="369" name="SimpleQueue">
        <scope ilk="function" line="342" lineend="344" name="__setstate__" signature="__setstate__(state)">
          <variable citdl="SimpleQueue" ilk="argument" name="self" />
          <variable ilk="argument" name="state" />
        </scope>
        <variable attributes="__instancevar__" citdl="SimpleQueue._make_methods.get" line="355" name="get" />
        <variable attributes="__instancevar__" citdl="self._writer.send" line="359" name="put" />
        <variable attributes="protected __instancevar__" citdl="Lock()" line="330" name="_wlock" />
        <scope attributes="__ctor__" ilk="function" line="326" lineend="333" name="__init__" signature="SimpleQueue()">
          <variable citdl="SimpleQueue" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="346" lineend="369" name="_make_methods" signature="_make_methods()">
          <variable citdl="SimpleQueue" ilk="argument" name="self" />
          <variable citdl="self._reader.recv" line="347" name="recv" />
          <variable citdl="self._rlock.acquire" line="348" name="racquire" />
          <variable citdl="self._rlock.release" line="348" name="rrelease" />
          <scope ilk="function" line="349" lineend="354" name="get" returns="SimpleQueue._make_methods.recv()" signature="get()" />
          <variable citdl="self._writer.send" line="361" name="send" />
          <variable citdl="self._wlock.acquire" line="362" name="wacquire" />
          <variable citdl="self._wlock.release" line="362" name="wrelease" />
          <scope ilk="function" line="363" lineend="368" name="put" returns="SimpleQueue._make_methods.send()" signature="put(obj)">
            <variable ilk="argument" name="obj" />
          </scope>
        </scope>
        <variable attributes="protected __instancevar__" citdl="Lock()" line="328" name="_rlock" />
        <scope ilk="function" line="338" lineend="340" name="__getstate__" returns="tuple" signature="__getstate__()">
          <variable citdl="SimpleQueue" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="335" lineend="336" name="empty" returns="bool" signature="empty()">
          <variable citdl="SimpleQueue" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="list" line="9" name="__all__" />
      <import module="_multiprocessing" />
      <scope ilk="function" name="assert_spawning" signature="assert_spawning(self)" />
      <import module="atexit" />
      <import module="collections" />
      <scope ilk="function" name="debug" signature="debug(msg, *args)" />
      <scope ilk="function" name="info" signature="info(msg, *args)" />
      <import module="os" />
      <scope ilk="function" name="register_after_fork" signature="register_after_fork(obj, func)" />
      <import module="sys" />
      <import module="threading" />
      <import module="time" />
      <import module="weakref" />
      <variable attributes="protected __hidden__" citdl="object()" line="261" name="_sentinel" />
    </scope>
    <scope doc="A dumb and slow but simple dbm clone.  For database spam, spam.dir contains the index (a text file)," ilk="blob" lang="Python3" name="dbm.dumb">
      <variable citdl="list" line="28" name="__all__" />
      <import module="_io" />
      <import module="_os" />
      <import module="collections" />
      <scope classrefs="EnvironmentError" doc="I/O operation failed." ilk="class" line="32" name="error" />
      <scope doc="Open the database file, filename, and return corresponding object." ilk="function" line="240" lineend="265" name="open" returns="_Database" signature="open(file, flag=None, mode=438)">
        <variable citdl="_os.umask()" line="257" name="um" />
        <variable ilk="argument" name="flag" />
        <variable citdl="int" ilk="argument" name="mode" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="collections.MutableMapping" ilk="class" line="34" lineend="237" name="_Database">
        <variable attributes="protected" line="44" name="_os" />
        <variable attributes="protected" line="45" name="_io" />
        <scope attributes="__ctor__" ilk="function" line="47" lineend="74" name="__init__" signature="_Database(filebasename, mode)">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable ilk="argument" name="filebasename" />
          <variable ilk="argument" name="mode" />
          <variable citdl="_io.open()" line="69" name="f" />
        </scope>
        <variable attributes="protected __instancevar__" line="48" name="_mode" />
        <variable attributes="protected __instancevar__" citdl="str" line="55" name="_dirfile" />
        <variable attributes="protected __instancevar__" citdl="str" line="61" name="_datfile" />
        <variable attributes="protected __instancevar__" citdl="str" line="62" name="_bakfile" />
        <variable attributes="protected __instancevar__" citdl="dict" line="65" name="_index" />
        <scope attributes="protected" ilk="function" line="77" lineend="89" name="_update" signature="_update()">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable citdl="_io.open()" line="80" name="f" />
          <variable citdl="line.rstrip()" line="85" name="line" />
          <variable citdl="key.encode()" line="87" name="key" />
        </scope>
        <scope attributes="protected" ilk="function" line="94" lineend="117" name="_commit" signature="_commit()">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable citdl="self._io.open()" line="111" name="f" />
        </scope>
        <variable citdl="_Database._commit" line="119" name="sync" />
        <scope ilk="function" line="121" lineend="129" name="__getitem__" returns="f.read()" signature="__getitem__(key)">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable citdl="key.encode()" ilk="argument" name="key" />
          <variable citdl="_io.open()" line="125" name="f" />
          <variable citdl="f.read()" line="127" name="dat" />
        </scope>
        <scope attributes="protected" ilk="function" line="135" lineend="144" name="_addval" returns="tuple" signature="_addval(val)">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable ilk="argument" name="val" />
          <variable citdl="_io.open()" line="136" name="f" />
          <variable citdl="int" line="138" name="pos" />
          <variable citdl="int" line="139" name="npos" />
        </scope>
        <scope attributes="protected" ilk="function" line="150" lineend="155" name="_setval" returns="tuple" signature="_setval(pos, val)">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable ilk="argument" name="pos" />
          <variable ilk="argument" name="val" />
          <variable citdl="_io.open()" line="151" name="f" />
        </scope>
        <scope attributes="protected" ilk="function" line="160" lineend="165" name="_addkey" signature="_addkey(key, pos_and_siz_pair)">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="pos_and_siz_pair" />
          <variable citdl="_io.open()" line="162" name="f" />
        </scope>
        <scope ilk="function" line="167" lineend="190" name="__setitem__" signature="__setitem__(key, val)">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable citdl="key.encode()" ilk="argument" name="key" />
          <variable citdl="val.encode()" ilk="argument" name="val" />
          <variable citdl="int" line="182" name="oldblocks" />
          <variable citdl="int" line="183" name="newblocks" />
        </scope>
        <scope ilk="function" line="200" lineend="209" name="__delitem__" signature="__delitem__(key)">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable citdl="key.encode()" ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="211" lineend="212" name="keys" returns="list()" signature="keys()">
          <variable citdl="_Database" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="214" lineend="215" name="items" returns="list" signature="items()">
          <variable citdl="_Database" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="217" lineend="220" name="__contains__" returns="bool" signature="__contains__(key)">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable citdl="key.encode()" ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="222" lineend="223" name="iterkeys" returns="iter()" signature="iterkeys()">
          <variable citdl="_Database" ilk="argument" name="self" />
        </scope>
        <variable citdl="_Database.iterkeys" line="224" name="__iter__" />
        <scope ilk="function" line="226" lineend="227" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="_Database" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="229" lineend="231" name="close" signature="close()">
          <variable citdl="_Database" ilk="argument" name="self" />
        </scope>
        <variable citdl="_Database.close" line="233" name="__del__" />
        <scope attributes="protected" ilk="function" line="235" lineend="237" name="_chmod" signature="_chmod(file)">
          <variable citdl="_Database" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="30" name="_BLOCKSIZE" />
    </scope>
    <scope doc="An XML-RPC client interface for Python.  The marshalling and response parser code can also be used to" ilk="blob" lang="Python3" name="xmlrpc.client">
      <variable citdl="int" line="179" name="APPLICATION_ERROR" />
      <scope classrefs="object" doc="Wrapper for binary data." ilk="class" line="390" lineend="429" name="Binary">
        <scope ilk="function" line="416" lineend="419" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="Binary" ilk="argument" name="self" />
          <variable citdl="other.data" ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="base64.decodebytes()" line="401" name="data" />
        <scope ilk="function" line="408" lineend="409" name="__str__" returns="str()" signature="__str__()">
          <variable citdl="Binary" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="421" lineend="422" name="decode" signature="decode(data)">
          <variable citdl="Binary" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="424" lineend="429" name="encode" signature="encode(out)">
          <variable citdl="Binary" ilk="argument" name="self" />
          <variable ilk="argument" name="out" />
          <variable citdl="base64.encodebytes()" line="426" name="encoded" />
        </scope>
        <scope ilk="function" line="411" lineend="414" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="Binary" ilk="argument" name="self" />
          <variable citdl="other.data" ilk="argument" name="other" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="393" lineend="401" name="__init__" signature="Binary(data=None)">
          <variable citdl="Binary" ilk="argument" name="self" />
          <variable citdl="bytes()" ilk="argument" name="data" />
        </scope>
      </scope>
      <scope classrefs="int" doc="bool(x) -&gt; bool  Returns True when the argument x is true, False otherwise." ilk="class" name="Boolean" />
      <scope classrefs="object" doc="DateTime wrapper for an ISO 8601 string or time tuple or localtime integer value to generate &apos;dateTime.iso8601&apos; XML-RPC value." ilk="class" line="292" lineend="369" name="DateTime">
        <scope ilk="function" line="345" lineend="347" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="DateTime" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="304" lineend="323" name="make_comparable" returns="tuple" signature="make_comparable(other)">
          <variable citdl="DateTime" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="int" line="306" name="s" />
          <variable citdl="other.strftime()" line="307" name="o" />
          <variable citdl="other.__class__.__name__" line="318" name="otype" />
        </scope>
        <scope ilk="function" line="357" lineend="358" name="__str__" returns="_strftime()" signature="__str__()">
          <variable citdl="DateTime" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="300" name="value" />
        <scope ilk="function" line="363" lineend="364" name="decode" signature="decode(data)">
          <variable citdl="DateTime" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="329" lineend="331" name="__le__" returns="bool" signature="__le__(other)">
          <variable citdl="DateTime" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="337" lineend="339" name="__ge__" returns="bool" signature="__ge__(other)">
          <variable citdl="DateTime" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="349" lineend="350" name="timetuple" returns="time.strptime()" signature="timetuple()">
          <variable citdl="DateTime" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="333" lineend="335" name="__gt__" returns="bool" signature="__gt__(other)">
          <variable citdl="DateTime" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="366" lineend="369" name="encode" signature="encode(out)">
          <variable citdl="DateTime" ilk="argument" name="self" />
          <variable ilk="argument" name="out" />
        </scope>
        <scope ilk="function" line="325" lineend="327" name="__lt__" returns="bool" signature="__lt__(other)">
          <variable citdl="DateTime" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="341" lineend="343" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="DateTime" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="298" lineend="302" name="__init__" signature="DateTime(value=0)">
          <variable citdl="DateTime" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="360" lineend="361" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="DateTime" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="Base class for client errors." ilk="class" line="198" lineend="201" name="Error">
        <scope ilk="function" line="200" lineend="201" name="__str__" returns="repr()" signature="__str__()">
          <variable citdl="Error" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="442" lineend="458" name="ExpatParser">
        <scope ilk="function" line="453" lineend="454" name="feed" signature="feed(data)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="expat.ParserCreate()" line="445" name="_parser" />
        <scope ilk="function" line="456" lineend="458" name="close" signature="close()">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="444" lineend="451" name="__init__" signature="ExpatParser(target)">
          <variable citdl="ExpatParser" ilk="argument" name="self" />
          <variable ilk="argument" name="target" />
          <variable line="450" name="encoding" />
        </scope>
        <variable attributes="protected __instancevar__" line="446" name="_target" />
      </scope>
      <variable citdl="NoneType" line="881" name="FastMarshaller" />
      <variable citdl="NoneType" name="FastParser" />
      <variable citdl="NoneType" name="FastUnmarshaller" />
      <scope classrefs="Error" doc="Indicates an XML-RPC fault package." ilk="class" line="245" lineend="254" name="Fault">
        <variable attributes="__instancevar__" line="249" name="faultCode" />
        <variable attributes="__instancevar__" line="250" name="faultString" />
        <scope ilk="function" line="251" lineend="254" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="Fault" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="247" lineend="250" name="__init__" signature="Fault(faultCode, faultString, **extra)">
          <variable citdl="Fault" ilk="argument" name="self" />
          <variable ilk="argument" name="faultCode" />
          <variable ilk="argument" name="faultString" />
          <variable attributes="kwargs" ilk="argument" name="extra" />
        </scope>
      </scope>
      <variable citdl="int" line="190" name="INTERNAL_ERROR" />
      <variable citdl="int" line="186" name="INVALID_ENCODING_CHAR" />
      <variable citdl="int" line="189" name="INVALID_METHOD_PARAMS" />
      <variable citdl="int" line="187" name="INVALID_XMLRPC" />
      <variable citdl="int" line="169" name="MAXINT" />
      <variable citdl="int" line="188" name="METHOD_NOT_FOUND" />
      <variable citdl="int" line="170" name="MININT" />
      <scope classrefs="object" doc="Generate an XML-RPC params chunk from a Python data structure.  Create a Marshaller instance for each set of parameters, and use" ilk="class" line="470" lineend="637" name="Marshaller">
        <variable attributes="__instancevar__" line="627" name="write" />
        <scope ilk="function" line="544" lineend="550" name="dump_int" signature="dump_int(value, write)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
        </scope>
        <scope ilk="function" line="579" lineend="582" name="dump_unicode" signature="dump_unicode(value, write, escape=escape)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
          <variable citdl="escape" ilk="argument" name="escape" />
        </scope>
        <variable attributes="__instancevar__" line="486" name="encoding" />
        <scope ilk="function" line="553" lineend="556" name="dump_bool" signature="dump_bool(value, write)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
        </scope>
        <scope attributes="private" ilk="function" line="518" lineend="536" name="__dump" signature="__dump(value, write)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
          <variable line="520" name="f" />
        </scope>
        <variable citdl="dict" line="489" name="dispatch" />
        <scope ilk="function" line="599" lineend="614" name="dump_struct" signature="dump_struct(value, write, escape=escape)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
          <variable citdl="escape" ilk="argument" name="escape" />
          <variable citdl="id()" line="600" name="i" />
          <variable citdl="Marshaller.__dump" line="604" name="dump" />
        </scope>
        <scope ilk="function" line="491" lineend="516" name="dumps" returns="str.join()" signature="dumps(values)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="values" />
          <variable citdl="list" line="492" name="out" />
          <variable citdl="out.append" line="493" name="write" />
          <variable citdl="self.__dump" line="494" name="dump" />
          <variable citdl="str.join()" line="515" name="result" />
        </scope>
        <scope ilk="function" line="573" lineend="576" name="dump_string" signature="dump_string(value, write, escape=escape)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
          <variable citdl="escape" ilk="argument" name="escape" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="487" name="allow_none" />
        <scope ilk="function" line="559" lineend="564" name="dump_long" signature="dump_long(value, write)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
        </scope>
        <scope ilk="function" line="538" lineend="541" name="dump_nil" signature="dump_nil(value, write)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
        </scope>
        <scope ilk="function" line="618" lineend="621" name="dump_datetime" signature="dump_datetime(value, write)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
        </scope>
        <scope ilk="function" line="567" lineend="570" name="dump_double" signature="dump_double(value, write)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
        </scope>
        <scope ilk="function" line="585" lineend="595" name="dump_array" signature="dump_array(value, write)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
          <variable citdl="id()" line="586" name="i" />
          <variable citdl="Marshaller.__dump" line="590" name="dump" />
        </scope>
        <variable attributes="__instancevar__" line="485" name="data" />
        <variable attributes="__instancevar__" citdl="dict" line="484" name="memo" />
        <scope attributes="__ctor__" ilk="function" line="483" lineend="487" name="__init__" signature="Marshaller(encoding=None, allow_none=False)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="False" ilk="argument" name="allow_none" />
        </scope>
        <scope ilk="function" line="624" lineend="632" name="dump_instance" signature="dump_instance(value, write)">
          <variable citdl="Marshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="write" />
        </scope>
      </scope>
      <scope classrefs="object" doc="server -&gt; a object used to boxcar method calls  server should be a ServerProxy object." ilk="class" line="842" lineend="876" name="MultiCall">
        <variable attributes="private __instancevar__" citdl="list" line="861" name="__call_list" />
        <variable citdl="MultiCall.__repr__" line="866" name="__str__" />
        <scope ilk="function" line="868" lineend="869" name="__getattr__" returns="_MultiCallMethod" signature="__getattr__(name)">
          <variable citdl="MultiCall" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="private __instancevar__" line="860" name="__server" />
        <scope ilk="function" line="863" lineend="864" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="MultiCall" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="871" lineend="876" name="__call__" returns="MultiCallIterator" signature="__call__()">
          <variable citdl="MultiCall" ilk="argument" name="self" />
          <variable citdl="list" line="872" name="marshalled_list" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="859" lineend="861" name="__init__" signature="MultiCall(server)">
          <variable citdl="MultiCall" ilk="argument" name="self" />
          <variable ilk="argument" name="server" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Iterates over the results of a multicall. Exceptions are thrown in response to xmlrpc faults." ilk="class" line="826" lineend="840" name="MultiCallIterator">
        <scope ilk="function" line="833" lineend="840" name="__getitem__" signature="__getitem__(i)">
          <variable citdl="MultiCallIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable line="834" name="item" />
        </scope>
        <variable attributes="__instancevar__" line="831" name="results" />
        <scope attributes="__ctor__" ilk="function" line="830" lineend="831" name="__init__" signature="MultiCallIterator(results)">
          <variable citdl="MultiCallIterator" ilk="argument" name="self" />
          <variable ilk="argument" name="results" />
        </scope>
      </scope>
      <variable citdl="int" line="184" name="NOT_WELLFORMED_ERROR" />
      <variable citdl="int" line="177" name="PARSE_ERROR" />
      <scope classrefs="Error" doc="Indicates an HTTP protocol error." ilk="class" line="213" lineend="224" name="ProtocolError">
        <variable attributes="__instancevar__" line="217" name="url" />
        <variable attributes="__instancevar__" line="218" name="errcode" />
        <variable attributes="__instancevar__" line="220" name="headers" />
        <variable attributes="__instancevar__" line="219" name="errmsg" />
        <scope attributes="__ctor__" ilk="function" line="215" lineend="220" name="__init__" signature="ProtocolError(url, errcode, errmsg, headers)">
          <variable citdl="ProtocolError" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="errcode" />
          <variable ilk="argument" name="errmsg" />
          <variable ilk="argument" name="headers" />
        </scope>
        <scope ilk="function" line="221" lineend="224" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="ProtocolError" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Error" doc="Indicates a broken response package." ilk="class" line="232" lineend="234" name="ResponseError" />
      <variable citdl="int" line="178" name="SERVER_ERROR" />
      <variable citdl="int" line="180" name="SYSTEM_ERROR" />
      <scope classrefs="Transport" doc="Handles an HTTPS transaction to an XML-RPC server." ilk="class" line="1174" lineend="1196" name="SafeTransport">
        <scope ilk="function" line="1179" lineend="1196" name="send_request" returns="http.client.HTTPSConnection()" signature="send_request(host, handler, request_body, debug)">
          <import line="1180" module="socket" />
          <variable citdl="SafeTransport" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="handler" />
          <variable ilk="argument" name="request_body" />
          <variable ilk="argument" name="debug" />
          <variable citdl="http.client.HTTPSConnection()" line="1186" name="connection" />
          <variable citdl="dict" line="1189" name="headers" />
        </scope>
      </scope>
      <scope classrefs="object" doc="uri [,options] -&gt; a logical connection to an XML-RPC server  uri is the connection point on the server, given as" ilk="class" line="1296" name="Server" />
      <scope classrefs="object" doc="uri [,options] -&gt; a logical connection to an XML-RPC server  uri is the connection point on the server, given as" ilk="class" line="1215" lineend="1289" name="ServerProxy">
        <variable attributes="private __instancevar__" citdl="False" line="1259" name="__allow_none" />
        <variable attributes="private __instancevar__" citdl="str" line="1257" name="__encoding" />
        <variable citdl="ServerProxy.__repr__" line="1285" name="__str__" />
        <scope ilk="function" line="1287" lineend="1289" name="__getattr__" returns="_Method" signature="__getattr__(name)">
          <variable citdl="ServerProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="private" ilk="function" line="1261" lineend="1277" name="__request" returns="self.__transport.request()" signature="__request(methodname, params)">
          <variable citdl="ServerProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="methodname" />
          <variable ilk="argument" name="params" />
          <variable line="1264" name="request" />
          <variable citdl="self.__transport.request()" line="1267" name="response" />
        </scope>
        <variable attributes="private __instancevar__" citdl="False" line="1258" name="__verbose" />
        <variable attributes="private __instancevar__" citdl="SafeTransport" line="1255" name="__transport" />
        <variable attributes="private __instancevar__" citdl="str" line="1248" name="__handler" />
        <scope attributes="__ctor__" ilk="function" line="1237" lineend="1259" name="__init__" signature="ServerProxy(uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False)">
          <import line="1242" module="urllib.parse" />
          <variable citdl="ServerProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="uri" />
          <variable citdl="SafeTransport" ilk="argument" name="transport" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="False" ilk="argument" name="verbose" />
          <variable citdl="False" ilk="argument" name="allow_none" />
          <variable citdl="False" ilk="argument" name="use_datetime" />
        </scope>
        <scope ilk="function" line="1279" lineend="1282" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="ServerProxy" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="int" line="181" name="TRANSPORT_ERROR" />
      <scope classrefs="object" doc="Handles an HTTP transaction to an XML-RPC server." ilk="class" line="1037" lineend="1169" name="Transport">
        <scope ilk="function" line="1119" lineend="1121" name="make_connection" signature="make_connection(host)">
          <variable citdl="Transport" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="1068" name="verbose" />
        <scope ilk="function" line="1133" lineend="1145" name="send_request" returns="http.client.HTTPConnection()" signature="send_request(host, handler, request_body, debug)">
          <variable citdl="Transport" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="handler" />
          <variable ilk="argument" name="request_body" />
          <variable ilk="argument" name="debug" />
          <variable citdl="http.client.HTTPConnection()" line="1135" name="connection" />
          <variable citdl="dict" line="1138" name="headers" />
        </scope>
        <scope ilk="function" line="1055" lineend="1070" name="request" returns="self.parse_response()" signature="request(host, handler, request_body, verbose=False)">
          <variable citdl="Transport" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable ilk="argument" name="handler" />
          <variable ilk="argument" name="request_body" />
          <variable citdl="False" ilk="argument" name="verbose" />
          <variable citdl="self.send_request()" line="1058" name="http_conn" />
          <variable citdl="http_conn.getresponse()" line="1059" name="resp" />
        </scope>
        <scope ilk="function" line="1077" lineend="1079" name="getparser" returns="Transport.getparser()" signature="getparser()">
          <variable citdl="Transport" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="1044" name="_use_datetime" />
        <variable citdl="str" line="1041" name="user_agent" />
        <scope ilk="function" line="1153" lineend="1169" name="parse_response" returns="u.close()" signature="parse_response(file)">
          <variable citdl="Transport" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="file.read()" line="1159" name="response" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1043" lineend="1044" name="__init__" signature="Transport(use_datetime=False)">
          <variable citdl="Transport" ilk="argument" name="self" />
          <variable citdl="False" ilk="argument" name="use_datetime" />
        </scope>
        <scope ilk="function" line="1091" lineend="1111" name="get_host_info" returns="tuple" signature="get_host_info(host)">
          <import line="1097" module="urllib.parse" />
          <import line="1101" module="base64" />
          <variable citdl="Transport" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable citdl="dict" line="1093" name="x509" />
          <variable citdl="urllib.parse.unquote_to_bytes()" line="1102" name="auth" />
          <variable citdl="list" line="1105" name="extra_headers" />
        </scope>
      </scope>
      <variable citdl="int" line="185" name="UNSUPPORTED_ENCODING" />
      <scope classrefs="object" doc="Unmarshal an XML-RPC response, based on incoming XML event messages (start, data, end).  Call close() to get the resulting data structure." ilk="class" line="644" lineend="810" name="Unmarshaller">
        <variable attributes="protected __instancevar__" citdl="str" line="662" name="_encoding" />
        <scope ilk="function" line="805" lineend="809" name="end_methodName" signature="end_methodName(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable citdl="_decode()" ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="790" lineend="794" name="end_value" signature="end_value(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable citdl="dict" line="720" name="dispatch" />
        <variable attributes="protected __instancevar__" citdl="False" line="664" name="_use_datetime" />
        <variable attributes="protected __instancevar__" citdl="_decode()" line="661" name="_methodname" />
        <scope ilk="function" line="782" lineend="787" name="end_dateTime" signature="end_dateTime(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="_datetime_type()" line="783" name="value" />
        </scope>
        <scope ilk="function" line="668" lineend="674" name="close" returns="tuple()" signature="close()">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self._stack.append" line="663" name="append" />
        <scope ilk="function" line="682" lineend="683" name="xml" signature="xml(encoding, standalone)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="encoding" />
          <variable ilk="argument" name="standalone" />
        </scope>
        <scope ilk="function" line="696" lineend="703" name="end" returns="Unmarshaller.end.f()" signature="end(tag)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable line="699" name="f" />
        </scope>
        <scope ilk="function" line="801" lineend="802" name="end_fault" signature="end_fault(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="686" lineend="691" name="start" signature="start(tag, attrs)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <scope ilk="function" line="737" lineend="739" name="end_int" signature="end_int(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="656" lineend="666" name="__init__" signature="Unmarshaller(use_datetime=False)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable citdl="False" ilk="argument" name="use_datetime" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="658" name="_stack" />
        <scope ilk="function" line="775" lineend="779" name="end_base64" signature="end_base64(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="Binary" line="776" name="value" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="657" name="_type" />
        <scope ilk="function" line="744" lineend="746" name="end_double" signature="end_double(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="749" lineend="753" name="end_string" signature="end_string(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable citdl="_decode()" ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="691" name="_value" />
        <scope ilk="function" line="797" lineend="798" name="end_params" signature="end_params(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="757" lineend="761" name="end_array" signature="end_array(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="self._marks.pop()" line="758" name="mark" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="660" name="_data" />
        <scope ilk="function" line="693" lineend="694" name="data" signature="data(text)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
        </scope>
        <scope ilk="function" line="722" lineend="724" name="end_nil" signature="end_nil(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="764" lineend="772" name="end_struct" signature="end_struct(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="self._marks.pop()" line="765" name="mark" />
          <variable citdl="dict" line="767" name="dict" />
          <variable citdl="list" line="768" name="items" />
        </scope>
        <scope ilk="function" line="708" lineend="715" name="end_dispatch" returns="Unmarshaller.end_dispatch.f()" signature="end_dispatch(tag, data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable ilk="argument" name="data" />
          <variable line="711" name="f" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="659" name="_marks" />
        <scope ilk="function" line="727" lineend="734" name="end_boolean" signature="end_boolean(data)">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="676" lineend="677" name="getmethodname" signature="getmethodname()">
          <variable citdl="Unmarshaller" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="tuple" line="437" name="WRAPPERS" />
      <variable citdl="str" line="166" name="__version__" />
      <import module="base64" />
      <scope classrefs="int" doc="bool(x) -&gt; bool  Returns True when the argument x is true, False otherwise." ilk="class" line="263" name="boolean" />
      <import module="datetime" />
      <scope doc="data [,options] -&gt; marshalled data" ilk="function" line="925" lineend="991" name="dumps" returns="tuple" signature="dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False)">
        <variable citdl="methodname.encode()" ilk="argument" name="methodname" />
        <variable citdl="str" ilk="argument" name="encoding" />
        <variable citdl="FastMarshaller()" line="958" name="m" />
        <variable citdl="str" line="965" name="xmlheader" />
        <variable citdl="int" ilk="argument" name="methodresponse" />
        <variable citdl="False" ilk="argument" name="allow_none" />
        <variable ilk="argument" name="params" />
        <variable citdl="tuple" line="962" name="data" />
      </scope>
      <scope ilk="function" line="154" lineend="157" name="escape" returns="s.replace()" signature="escape(s)">
        <variable citdl="s.replace()" ilk="argument" name="s" />
      </scope>
      <import module="expat" />
      <scope doc="Create an instance of the fastest available parser, and attach it to an unmarshalling object." ilk="function" line="889" lineend="910" name="getparser" returns="tuple" signature="getparser() -&gt; parser, unmarshaller">
        <variable citdl="_datetime_type" line="899" name="mkdatetime" />
        <variable citdl="FastParser()" line="903" name="parser" />
        <variable citdl="FastUnmarshaller()" line="902" name="target" />
        <variable citdl="False" ilk="argument" name="use_datetime" />
      </scope>
      <import module="http" />
      <import module="io" />
      <scope doc="data -&gt; unmarshalled data, method name" ilk="function" line="1002" lineend="1014" name="loads" returns="tuple" signature="loads(data, use_datetime=False)">
        <variable ilk="argument" name="data" />
        <variable citdl="False" ilk="argument" name="use_datetime" />
      </scope>
      <import module="operator" />
      <import module="re" />
      <import module="time" />
      <scope attributes="protected __hidden__" ilk="function" line="278" lineend="290" name="_strftime" returns="tuple" signature="_strftime(value)">
        <variable citdl="time.time()" ilk="argument" name="value" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="377" lineend="379" name="_datetime_type" returns="datetime.datetime()" signature="_datetime_type(data)">
        <variable ilk="argument" name="data" />
        <variable citdl="time.strptime()" line="378" name="t" />
      </scope>
      <variable attributes="__hidden__" citdl="MultiCall" line="1314" name="multi" />
      <scope attributes="protected __hidden__" ilk="class" line="815" lineend="824" name="_MultiCallMethod">
        <scope attributes="__ctor__" ilk="function" line="818" lineend="820" name="__init__" signature="_MultiCallMethod(call_list, name)">
          <variable citdl="_MultiCallMethod" ilk="argument" name="self" />
          <variable ilk="argument" name="call_list" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="private __instancevar__" line="819" name="__call_list" />
        <variable attributes="private __instancevar__" line="820" name="__name" />
        <scope ilk="function" line="821" lineend="822" name="__getattr__" returns="_MultiCallMethod" signature="__getattr__(name)">
          <variable citdl="_MultiCallMethod" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="823" lineend="824" name="__call__" signature="__call__(*args)">
          <variable citdl="_MultiCallMethod" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="148" lineend="152" name="_decode" returns="str()" signature="_decode(data, encoding, is8bit=re.compile(&apos;[\x80-\xff]&apos;).search)">
        <variable citdl="str()" ilk="argument" name="data" />
        <variable ilk="argument" name="encoding" />
        <variable ilk="argument" name="is8bit" />
      </scope>
      <variable attributes="__hidden__" citdl="ServerProxy" line="1306" name="server" />
      <variable attributes="__hidden__" line="146" name="datetime" />
      <scope attributes="protected __hidden__" ilk="function" line="371" lineend="375" name="_datetime" returns="DateTime" signature="_datetime(data)">
        <variable ilk="argument" name="data" />
        <variable citdl="DateTime" line="373" name="value" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="159" lineend="164" name="_stringify" returns="string.decode()" signature="_stringify(string)">
        <variable ilk="argument" name="string" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="431" lineend="435" name="_binary" returns="Binary" signature="_binary(data)">
        <variable ilk="argument" name="data" />
        <variable citdl="Binary" line="433" name="value" />
      </scope>
      <scope attributes="protected __hidden__" ilk="class" line="1020" lineend="1029" name="_Method">
        <scope attributes="__ctor__" ilk="function" line="1023" lineend="1025" name="__init__" signature="_Method(send, name)">
          <variable citdl="_Method" ilk="argument" name="self" />
          <variable ilk="argument" name="send" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="private __instancevar__" line="1024" name="__send" />
        <variable attributes="private __instancevar__" line="1025" name="__name" />
        <scope ilk="function" line="1026" lineend="1027" name="__getattr__" returns="_Method" signature="__getattr__(name)">
          <variable citdl="_Method" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="1028" lineend="1029" name="__call__" returns="_Method.__send()" signature="__call__(*args)">
          <variable citdl="_Method" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
      </scope>
    </scope>
    <scope doc="#-*- coding: ISO-8859-1 -*- # pysqlite2/__init__.py: the pysqlite2 package. #" ilk="blob" lang="Python3" name="sqlite3">
      <scope classrefs="object" doc="memoryview(object)  Create a new memoryview object which references the given object." ilk="class" name="Binary" />
      <scope classrefs="object" ilk="class" name="Cache" />
      <scope classrefs="object" doc="SQLite database connection object." ilk="class" name="Connection" />
      <scope classrefs="object" doc="SQLite database cursor class." ilk="class" name="Cursor" />
      <scope classrefs="DatabaseError" ilk="class" name="DataError" />
      <scope classrefs="Error" ilk="class" name="DatabaseError" />
      <scope classrefs="object" doc="date(year, month, day) --&gt; date object" ilk="class" name="Date" />
      <scope ilk="function" name="DateFromTicks" signature="DateFromTicks(ticks)" />
      <scope classrefs="Exception" ilk="class" name="Error" />
      <scope classrefs="DatabaseError" ilk="class" name="IntegrityError" />
      <scope classrefs="Error" ilk="class" name="InterfaceError" />
      <scope classrefs="DatabaseError" ilk="class" name="InternalError" />
      <scope classrefs="DatabaseError" ilk="class" name="NotSupportedError" />
      <scope classrefs="DatabaseError" ilk="class" name="OperationalError" />
      <scope classrefs="object" ilk="class" name="OptimizedUnicode" />
      <variable citdl="int" name="PARSE_COLNAMES" />
      <variable citdl="int" name="PARSE_DECLTYPES" />
      <scope classrefs="object" ilk="class" name="PrepareProtocol" />
      <scope classrefs="DatabaseError" ilk="class" name="ProgrammingError" />
      <scope classrefs="object" ilk="class" name="Row" />
      <variable citdl="int" name="SQLITE_ALTER_TABLE" />
      <variable citdl="int" name="SQLITE_ANALYZE" />
      <variable citdl="int" name="SQLITE_ATTACH" />
      <variable citdl="int" name="SQLITE_CREATE_INDEX" />
      <variable citdl="int" name="SQLITE_CREATE_TABLE" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_INDEX" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_TABLE" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_TRIGGER" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_VIEW" />
      <variable citdl="int" name="SQLITE_CREATE_TRIGGER" />
      <variable citdl="int" name="SQLITE_CREATE_VIEW" />
      <variable citdl="int" name="SQLITE_DELETE" />
      <variable citdl="int" name="SQLITE_DENY" />
      <variable citdl="int" name="SQLITE_DETACH" />
      <variable citdl="int" name="SQLITE_DROP_INDEX" />
      <variable citdl="int" name="SQLITE_DROP_TABLE" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_INDEX" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_TABLE" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_TRIGGER" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_VIEW" />
      <variable citdl="int" name="SQLITE_DROP_TRIGGER" />
      <variable citdl="int" name="SQLITE_DROP_VIEW" />
      <variable citdl="int" name="SQLITE_IGNORE" />
      <variable citdl="int" name="SQLITE_INSERT" />
      <variable citdl="int" name="SQLITE_OK" />
      <variable citdl="int" name="SQLITE_PRAGMA" />
      <variable citdl="int" name="SQLITE_READ" />
      <variable citdl="int" name="SQLITE_REINDEX" />
      <variable citdl="int" name="SQLITE_SELECT" />
      <variable citdl="int" name="SQLITE_TRANSACTION" />
      <variable citdl="int" name="SQLITE_UPDATE" />
      <scope classrefs="object" ilk="class" name="Statement" />
      <scope classrefs="object" doc="time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --&gt; a time object  All arguments are optional. tzinfo may be None, or an instance of" ilk="class" name="Time" />
      <scope ilk="function" name="TimeFromTicks" signature="TimeFromTicks(ticks)" />
      <scope classrefs="date" doc="datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])  The year, month and day arguments are required. tzinfo may be None, or an" ilk="class" name="Timestamp" />
      <scope ilk="function" name="TimestampFromTicks" signature="TimestampFromTicks(ticks)" />
      <scope classrefs="Exception" ilk="class" name="Warning" />
      <scope doc="adapt(obj, protocol, alternate) -&gt; adapt obj to given protocol. Non-standard." ilk="function" name="adapt" signature="adapt(obj, protocol, alternate) -&gt; adapt obj to given protocol. Non-standard." />
      <variable citdl="dict" name="adapters" />
      <variable citdl="str" name="apilevel" />
      <scope doc="Checks if a string contains a complete SQL statement." ilk="function" name="complete_statement" signature="complete_statement(sql)" />
      <scope doc="Opens a connection to the SQLite database file *database*." ilk="function" name="connect" signature="connect(database[, timeout, isolation_level, detect_types, factory])" />
      <variable citdl="dict" name="converters" />
      <import module="datetime" />
      <import module="dbapi2" />
      <scope doc="Enable or disable callback functions throwing errors to stderr." ilk="function" name="enable_callback_tracebacks" signature="enable_callback_tracebacks(flag)" />
      <scope doc="Enable or disable shared cache mode for the calling thread." ilk="function" name="enable_shared_cache" signature="enable_shared_cache(do_enable)" />
      <variable citdl="str" name="paramstyle" />
      <scope doc="Registers an adapter with pysqlite&apos;s adapter registry." ilk="function" name="register_adapter" signature="register_adapter(type, callable)" />
      <scope doc="Registers a converter with pysqlite. Non-standard." ilk="function" name="register_converter" signature="register_converter(typename, callable)" />
      <variable citdl="str" name="sqlite_version" />
      <variable citdl="tuple" name="sqlite_version_info" />
      <variable citdl="int" name="threadsafety" />
      <import module="time" />
      <variable citdl="str" name="version" />
      <variable citdl="tuple" name="version_info" />
    </scope>
    <scope doc="The Tab Nanny despises ambiguous indentation.  She knows no mercy.  tabnanny -- Detection of ambiguous indentation" ilk="blob" lang="Python3" name="tabnanny">
      <scope classrefs="Exception" doc="Raised by tokeneater() if detecting an ambiguous indent. Captured and handled in check()." ilk="class" line="60" lineend="72" name="NannyNag">
        <scope ilk="function" line="67" lineend="68" name="get_lineno" signature="get_lineno()">
          <variable citdl="NannyNag" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="71" lineend="72" name="get_line" signature="get_line()">
          <variable citdl="NannyNag" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="69" lineend="70" name="get_msg" signature="get_msg()">
          <variable citdl="NannyNag" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="66" name="lineno" />
        <variable attributes="__instancevar__" line="66" name="msg" />
        <variable attributes="__instancevar__" line="66" name="line" />
        <scope attributes="__ctor__" ilk="function" line="65" lineend="66" name="__init__" signature="NannyNag(lineno, msg, line)">
          <variable citdl="NannyNag" ilk="argument" name="self" />
          <variable ilk="argument" name="lineno" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="line" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="132" lineend="264" name="Whitespace">
        <scope ilk="function" line="214" lineend="223" name="not_equal_witness" returns="list" signature="not_equal_witness(other)">
          <variable citdl="Whitespace" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="max()" line="215" name="n" />
          <variable citdl="list" line="217" name="a" />
        </scope>
        <scope ilk="function" line="184" lineend="203" name="indent_level" returns="trailing" signature="indent_level(tabsize)">
          <variable citdl="Whitespace" ilk="argument" name="self" />
          <variable ilk="argument" name="tabsize" />
          <variable citdl="int" line="200" name="il" />
        </scope>
        <scope ilk="function" line="238" lineend="249" name="less" returns="bool" signature="less(other)">
          <variable citdl="Whitespace" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="max()" line="243" name="n" />
        </scope>
        <variable attributes="__instancevar__" citdl="bool" line="176" name="is_simple" />
        <scope ilk="function" line="207" lineend="208" name="equal" returns="bool" signature="equal(other)">
          <variable citdl="Whitespace" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="173" name="n" />
        <variable attributes="__instancevar__" line="156" name="raw" />
        <scope attributes="__ctor__" ilk="function" line="155" lineend="176" name="__init__" signature="Whitespace(ws)">
          <variable citdl="Whitespace" ilk="argument" name="self" />
          <variable ilk="argument" name="ws" />
          <variable citdl="Whitespace.S" line="157" name="S" />
          <variable citdl="Whitespace.T" line="157" name="T" />
          <variable citdl="list" line="158" name="count" />
          <variable citdl="int" line="159" name="b" />
          <variable citdl="int" line="162" name="n" />
          <variable citdl="int" line="166" name="nt" />
        </scope>
        <scope ilk="function" line="255" lineend="264" name="not_less_witness" returns="list" signature="not_less_witness(other)">
          <variable citdl="Whitespace" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="max()" line="256" name="n" />
          <variable citdl="list" line="258" name="a" />
        </scope>
        <scope ilk="function" line="180" lineend="182" name="longest_run_of_spaces" returns="max()" signature="longest_run_of_spaces()">
          <variable citdl="Whitespace" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="174" name="nt" />
        <variable attributes="__instancevar__" citdl="tuple" line="175" name="norm" />
      </scope>
      <variable citdl="list" line="30" name="__all__" />
      <variable citdl="str" line="21" name="__version__" />
      <scope doc="If file_or_dir is a directory and not a symbolic link, then recursively descend the directory tree named by file_or_dir, checking all .py files along the way." ilk="function" line="74" lineend="130" name="check" signature="check(file_or_dir)">
        <variable citdl="open()" line="97" name="f" />
        <variable citdl="nag.get_lineno()" line="117" name="badline" />
        <variable citdl="os.listdir()" line="87" name="names" />
        <variable citdl="str" ilk="argument" name="file" />
        <variable citdl="nag.get_line()" line="118" name="line" />
        <variable citdl="os.path.join()" line="89" name="fullname" />
      </scope>
      <scope ilk="function" line="35" lineend="40" name="errprint" signature="errprint(*args)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable citdl="str" line="36" name="sep" />
      </scope>
      <variable citdl="int" line="33" name="filename_only" />
      <scope ilk="function" line="266" lineend="271" name="format_witnesses" returns="str" signature="format_witnesses(w)">
        <variable citdl="str" line="268" name="prefix" />
        <variable citdl="map()" line="267" name="firsts" />
        <variable ilk="argument" name="w" />
      </scope>
      <import module="getopt" />
      <scope ilk="function" line="42" lineend="58" name="main" signature="main()">
        <variable citdl="int" line="51" name="filename_only" />
        <variable citdl="int" line="53" name="verbose" />
      </scope>
      <import module="os" />
      <scope ilk="function" line="273" lineend="325" name="process_tokens" signature="process_tokens(tokens)">
        <variable citdl="tokenize.DEDENT" line="275" name="DEDENT" />
        <variable citdl="tuple" line="277" name="JUNK" />
        <variable citdl="tokenize.INDENT" line="274" name="INDENT" />
        <variable citdl="Whitespace" line="292" name="thisguy" />
        <variable citdl="tokenize.NEWLINE" line="276" name="NEWLINE" />
        <variable ilk="argument" name="tokens" />
        <variable citdl="list" line="278" name="indents" />
        <variable line="294" name="witness" />
        <variable citdl="format_witnesses()" line="295" name="msg" />
        <variable citdl="int" line="279" name="check_equal" />
      </scope>
      <import module="sys" />
      <import module="tokenize" />
      <variable citdl="int" line="32" name="verbose" />
    </scope>
    <scope doc="A generally useful event scheduler class.  Each instance of this class manages its own queue." ilk="blob" lang="Python3" name="sched">
      <scope classrefs="Event" ilk="class" name="Event" />
      <variable citdl="list" name="__all__" />
      <import module="heapq" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <scope classrefs="object" ilk="class" name="scheduler" />
    </scope>
    <scope doc="distutils.archive_util  Utility functions for creating archive files (tarballs, zip files," ilk="blob" lang="Python3" name="distutils.archive_util">
      <variable citdl="dict" line="121" name="ARCHIVE_FORMATS" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <variable citdl="str" line="6" name="__revision__" />
      <scope doc="Returns the first format from the &apos;format&apos; list that is unknown." ilk="function" line="129" lineend="137" name="check_archive_formats" returns="format" signature="check_archive_formats(formats)">
        <variable ilk="argument" name="formats" />
      </scope>
      <import module="log" />
      <scope doc="Create an archive file (eg. zip or tar)." ilk="function" line="139" lineend="181" name="make_archive" returns="func()" signature="make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0)">
        <variable line="167" name="format_info" />
        <variable ilk="argument" name="root_dir" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="os.path.abspath()" ilk="argument" name="base_name" />
        <variable ilk="argument" name="format" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable line="171" name="func" />
        <variable citdl="dict" line="164" name="kwargs" />
        <variable citdl="os.getcwd()" line="154" name="save_cwd" />
        <variable citdl="func()" line="175" name="filename" />
        <variable citdl="os.curdir" ilk="argument" name="base_dir" />
      </scope>
      <scope doc="Create a (possibly compressed) tar file from all the files under &apos;base_dir&apos;." ilk="function" line="17" lineend="66" name="make_tarball" returns="str" signature="make_tarball(base_name, base_dir, compress=&apos;gzip&apos;, verbose=0, dry_run=0)">
        <variable citdl="str" line="37" name="archive_name" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable ilk="argument" name="base_name" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable citdl="list" line="60" name="cmd" />
        <variable citdl="str" ilk="argument" name="compress" />
        <variable citdl="dict" line="28" name="tar_compression" />
        <variable citdl="str" line="58" name="compressed_name" />
        <variable citdl="dict" line="29" name="compress_ext" />
        <variable citdl="tarfile.open()" line="48" name="tar" />
        <variable ilk="argument" name="base_dir" />
      </scope>
      <scope doc="Create a zip file from all the files under &apos;base_dir&apos;." ilk="function" line="68" lineend="119" name="make_zipfile" returns="str" signature="make_zipfile(base_name, base_dir, verbose=0, dry_run=0)">
        <variable citdl="zipfile.ZipFile()" line="108" name="zip" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable ilk="argument" name="base_name" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable line="80" name="zipfile" />
        <variable citdl="str" line="89" name="zipoptions" />
        <variable citdl="os.path.normpath()" line="113" name="path" />
        <variable citdl="str" line="82" name="zip_filename" />
        <variable ilk="argument" name="base_dir" />
      </scope>
      <scope doc="Create a directory and any missing ancestor directories." ilk="function" name="mkpath" signature="mkpath(name, mode=511, verbose=1, dry_run=0)" />
      <import module="os" />
      <scope doc="Run another program, specified as a command list &apos;cmd&apos;, in a new process." ilk="function" name="spawn" signature="spawn(cmd, search_path=1, verbose=0, dry_run=0)" />
      <import module="sys" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
    </scope>
    <scope doc="This module provides access to some objects used or maintained by the interpreter and to functions that interact strongly with the interpreter. " ilk="blob" lang="Python3" name="sys">
      <scope doc="Print an object to sys.stdout and also save it in builtins._" ilk="function" name="__displayhook__" signature="displayhook(object) -&gt; None" />
      <scope doc="Handle an exception by displaying it with a traceback on sys.stderr." ilk="function" name="__excepthook__" signature="excepthook(exctype, value, traceback) -&gt; None" />
      <variable citdl="TextIOWrapper" name="__stderr__" />
      <variable citdl="TextIOWrapper" name="__stdin__" />
      <variable citdl="TextIOWrapper" name="__stdout__" />
      <variable citdl="int" name="api_version" />
      <variable citdl="list" name="argv" />
      <variable citdl="tuple" name="builtin_module_names" />
      <variable citdl="str" name="byteorder" />
      <scope doc="Call func(*args), while tracing is enabled." ilk="function" name="call_tracing" returns="object" signature="call_tracing(func, args) -&gt; object" />
      <scope doc="Return a tuple of function call statistics, if CALL_PROFILE was defined when Python was built." ilk="function" name="callstats" returns="tuple" signature="callstats() -&gt; tuple of integers" />
      <variable citdl="str" name="copyright" />
      <scope doc="Print an object to sys.stdout and also save it in builtins._" ilk="function" name="displayhook" signature="displayhook(object) -&gt; None" />
      <variable citdl="int" name="dllhandle" />
      <variable citdl="bool" name="dont_write_bytecode" />
      <scope doc="Return information about the most recent exception caught by an except clause in the current stack frame or in an older stack frame." ilk="function" name="exc_info" signature="exc_info() -&gt; (type, value, traceback)" />
      <scope doc="Handle an exception by displaying it with a traceback on sys.stderr." ilk="function" name="excepthook" signature="excepthook(exctype, value, traceback) -&gt; None" />
      <variable citdl="str" name="exec_prefix" />
      <variable citdl="str" name="executable" />
      <scope doc="Exit the interpreter by raising SystemExit(status)." ilk="function" name="exit" signature="exit([status])" />
      <variable citdl="flags" name="flags" />
      <variable citdl="floatinfo" name="float_info" />
      <variable citdl="str" name="float_repr_style" />
      <scope doc="getcheckinterval() -&gt; current check interval; see setcheckinterval()." ilk="function" name="getcheckinterval" signature="getcheckinterval() -&gt; current check interval; see setcheckinterval()." />
      <scope doc="Return the current default string encoding used by the Unicode implementation." ilk="function" name="getdefaultencoding" returns="str" signature="getdefaultencoding() -&gt; string" />
      <scope doc="Return the encoding used to convert Unicode filenames in operating system filenames." ilk="function" name="getfilesystemencoding" returns="str" signature="getfilesystemencoding() -&gt; string" />
      <scope doc="Return the profiling function set with sys.setprofile." ilk="function" name="getprofile" signature="getprofile()" />
      <scope doc="Return the current value of the recursion limit, the maximum depth of the Python interpreter stack." ilk="function" name="getrecursionlimit" signature="getrecursionlimit()" />
      <scope doc="Return the reference count of object." ilk="function" name="getrefcount" returns="int" signature="getrefcount(object) -&gt; integer" />
      <scope doc="Return the size of object in bytes." ilk="function" name="getsizeof" returns="int" signature="getsizeof(object, default) -&gt; int" />
      <scope doc="Return the global debug tracing function set with sys.settrace." ilk="function" name="gettrace" signature="gettrace()" />
      <scope doc="Return information about the running version of Windows." ilk="function" name="getwindowsversion" signature="getwindowsversion()" />
      <variable citdl="int" name="hexversion" />
      <variable citdl="int_info" name="int_info" />
      <scope doc="``Intern&apos;&apos; the given string." ilk="function" name="intern" returns="str" signature="intern(string) -&gt; string" />
      <variable citdl="int" name="maxsize" />
      <variable citdl="int" name="maxunicode" />
      <variable citdl="list" name="meta_path" />
      <variable citdl="dict" name="modules" />
      <variable citdl="list" name="path" />
      <variable citdl="list" name="path_hooks" />
      <variable citdl="dict" name="path_importer_cache" />
      <variable citdl="str" name="platform" />
      <variable citdl="str" name="prefix" />
      <scope doc="Tell the Python interpreter to check for asynchronous events every n instructions." ilk="function" name="setcheckinterval" signature="setcheckinterval(n)" />
      <scope doc="Set the encoding used to convert Unicode filenames in operating system filenames." ilk="function" name="setfilesystemencoding" signature="setfilesystemencoding(string) -&gt; None" />
      <scope doc="Set the profiling function." ilk="function" name="setprofile" signature="setprofile(function)" />
      <scope doc="Set the maximum depth of the Python interpreter stack to n." ilk="function" name="setrecursionlimit" signature="setrecursionlimit(n)" />
      <scope doc="Set the global debug tracing function." ilk="function" name="settrace" signature="settrace(function)" />
      <variable citdl="TextIOWrapper" name="stderr" />
      <variable citdl="TextIOWrapper" name="stdin" />
      <variable citdl="TextIOWrapper" name="stdout" />
      <variable citdl="tuple" name="subversion" />
      <variable citdl="str" name="version" />
      <variable citdl="version_info" name="version_info" />
      <variable citdl="list" name="warnoptions" />
      <variable citdl="str" name="winver" />
    </scope>
    <scope doc="distutils.emxccompiler  Provides the EMXCCompiler class, a subclass of UnixCCompiler that" ilk="blob" lang="Python3" name="distutils.emxccompiler">
      <variable citdl="str" line="238" name="CONFIG_H_NOTOK" />
      <variable citdl="str" line="237" name="CONFIG_H_OK" />
      <variable citdl="str" line="239" name="CONFIG_H_UNCERTAIN" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="UnixCCompiler" ilk="class" line="31" lineend="228" name="EMXCCompiler">
        <variable citdl="str" line="34" name="obj_extension" />
        <variable citdl="str" line="37" name="static_lib_format" />
        <scope ilk="function" line="209" lineend="228" name="find_library_file" returns="os.path.join()" signature="find_library_file(dirs, lib, debug=0)">
          <variable citdl="EMXCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dirs" />
          <variable ilk="argument" name="lib" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable citdl="str" line="210" name="shortlib" />
          <variable citdl="str" line="211" name="longlib" />
          <variable citdl="list" line="215" name="emx_dirs" />
          <variable citdl="os.path.join()" line="220" name="shortlibp" />
          <variable citdl="os.path.join()" line="221" name="longlibp" />
        </scope>
        <variable citdl="str" line="39" name="res_extension" />
        <scope ilk="function" line="182" lineend="203" name="object_filenames" returns="list" signature="object_filenames(source_filenames, strip_dir=0, output_dir=&apos;&apos;)">
          <variable citdl="EMXCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="source_filenames" />
          <variable citdl="int" ilk="argument" name="strip_dir" />
          <variable citdl="str" ilk="argument" name="output_dir" />
          <variable citdl="list" line="187" name="obj_names" />
          <variable citdl="os.path.basename()" line="195" name="base" />
        </scope>
        <variable citdl="str" line="35" name="static_lib_extension" />
        <scope attributes="__ctor__" ilk="function" line="42" lineend="73" name="__init__" signature="EMXCCompiler(verbose=0, dry_run=0, force=0)">
          <variable citdl="EMXCCompiler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="verbose" />
          <variable citdl="int" ilk="argument" name="dry_run" />
          <variable citdl="int" ilk="argument" name="force" />
        </scope>
        <variable citdl="str" line="33" name="compiler_type" />
        <scope ilk="function" line="91" lineend="174" name="link" signature="link(target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)">
          <variable citdl="EMXCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="target_desc" />
          <variable citdl="copy.copy()" ilk="argument" name="objects" />
          <variable ilk="argument" name="output_filename" />
          <variable ilk="argument" name="output_dir" />
          <variable citdl="copy.copy()" ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable ilk="argument" name="export_symbols" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable citdl="copy.copy()" ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="build_temp" />
          <variable ilk="argument" name="target_lang" />
          <variable citdl="os.path.dirname()" line="126" name="temp_dir" />
          <variable citdl="os.path.join()" line="132" name="def_file" />
          <variable citdl="list" line="135" name="contents" />
        </scope>
        <variable citdl="str" line="36" name="shared_lib_extension" />
        <scope attributes="protected" ilk="function" line="77" lineend="89" name="_compile" signature="_compile(obj, src, ext, cc_args, extra_postargs, pp_opts)">
          <variable citdl="EMXCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="src" />
          <variable ilk="argument" name="ext" />
          <variable ilk="argument" name="cc_args" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="pp_opts" />
        </scope>
        <variable citdl="str" line="40" name="exe_extension" />
        <variable citdl="str" line="38" name="shared_lib_format" />
        <variable attributes="__instancevar__" citdl="list" line="73" name="dll_libraries" />
      </scope>
      <scope classrefs="CCompiler" ilk="class" name="UnixCCompiler" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" line="22" name="__revision__" />
      <scope doc="Check if the current Python installation (specifically, pyconfig.h) appears amenable to building extensions with GCC." ilk="function" line="241" lineend="287" name="check_config_h" returns="tuple" signature="check_config_h()">
        <variable citdl="f.read()" line="273" name="s" />
        <variable citdl="sysconfig.get_config_h_filename()" line="268" name="fn" />
        <variable citdl="open()" line="272" name="f" />
      </scope>
      <import module="copy" />
      <scope doc="Generate linker options for searching library directories and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at least two types of compilers: the typical Unix compiler and Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <scope doc="Try to find out the versions of gcc and ld." ilk="function" line="290" lineend="313" name="get_versions" returns="tuple" signature="get_versions()">
        <variable citdl="StrictVersion()" line="305" name="gcc_version" />
        <variable line="312" name="ld_version" />
        <variable citdl="find_executable()" line="298" name="gcc_exe" />
        <variable citdl="re.search()" line="303" name="result" />
        <variable citdl="out.read()" line="301" name="out_string" />
        <variable citdl="os.popen()" line="300" name="out" />
      </scope>
      <import module="log" />
      <import module="os" />
      <import module="sys" />
      <scope doc="Create a file with the specified name and write &apos;contents&apos; (a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
    </scope>
    <scope doc="XML-RPC Servers.  This module can be used to create simple XML-RPC servers" ilk="blob" lang="Python3" name="xmlrpc.server">
      <scope classrefs="StreamRequestHandler" doc="HTTP request handler base class.  The following explanation of HTTP serves to guide you through the" ilk="class" name="BaseHTTPRequestHandler" />
      <scope classrefs="SimpleXMLRPCDispatcher" doc="Simple handler for XML-RPC data passed through CGI." ilk="class" line="538" lineend="601" name="CGIXMLRPCRequestHandler">
        <scope doc="Handle a single XML-RPC request passed through a CGI post method." ilk="function" line="581" lineend="601" name="handle_request" signature="handle_request(request_text=None)">
          <variable citdl="CGIXMLRPCRequestHandler" ilk="argument" name="self" />
          <variable citdl="sys.stdin.read()" ilk="argument" name="request_text" />
          <variable citdl="int" line="595" name="length" />
        </scope>
        <scope doc="Handle a single XML-RPC request" ilk="function" line="544" lineend="554" name="handle_xmlrpc" signature="handle_xmlrpc(request_text)">
          <variable citdl="CGIXMLRPCRequestHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="request_text" />
          <variable citdl="self._marshaled_dispatch()" line="547" name="response" />
        </scope>
        <scope doc="Handle a single HTTP GET request." ilk="function" line="556" lineend="579" name="handle_get" signature="handle_get()">
          <variable citdl="CGIXMLRPCRequestHandler" ilk="argument" name="self" />
          <variable citdl="int" line="563" name="code" />
          <variable citdl="dict" line="566" name="response" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="541" lineend="542" name="__init__" signature="CGIXMLRPCRequestHandler(allow_none=False, encoding=None)">
          <variable citdl="CGIXMLRPCRequestHandler" ilk="argument" name="self" />
          <variable citdl="False" ilk="argument" name="allow_none" />
          <variable ilk="argument" name="encoding" />
        </scope>
      </scope>
      <scope classrefs="CGIXMLRPCRequestHandler XMLRPCDocGenerator" doc="Handler for XML-RPC data and documentation requests passed through CGI" ilk="class" line="846" lineend="869" name="DocCGIXMLRPCRequestHandler">
        <scope doc="Handles the HTTP GET request." ilk="function" line="851" lineend="865" name="handle_get" signature="handle_get()">
          <variable citdl="DocCGIXMLRPCRequestHandler" ilk="argument" name="self" />
          <variable line="858" name="response" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="867" lineend="869" name="__init__" signature="DocCGIXMLRPCRequestHandler()">
          <variable citdl="DocCGIXMLRPCRequestHandler" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="SimpleXMLRPCRequestHandler" doc="XML-RPC and documentation request handler class.  Handles all HTTP POST requests and attempts to decode them as" ilk="class" line="799" lineend="829" name="DocXMLRPCRequestHandler">
        <scope doc="Handles the HTTP GET request." ilk="function" line="809" lineend="829" name="do_GET" signature="do_GET()">
          <variable citdl="DocXMLRPCRequestHandler" ilk="argument" name="self" />
          <variable line="820" name="response" />
        </scope>
      </scope>
      <scope classrefs="SimpleXMLRPCServer XMLRPCDocGenerator" doc="XML-RPC and HTML documentation server.  Adds the ability to serve server documentation to the capabilities" ilk="class" line="831" lineend="844" name="DocXMLRPCServer">
        <scope attributes="__ctor__" ilk="function" line="839" lineend="844" name="__init__" signature="DocXMLRPCServer(addr, requestHandler=DocXMLRPCRequestHandler, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True)">
          <variable citdl="DocXMLRPCServer" ilk="argument" name="self" />
          <variable ilk="argument" name="addr" />
          <variable citdl="DocXMLRPCRequestHandler" ilk="argument" name="requestHandler" />
          <variable citdl="True" ilk="argument" name="logRequests" />
          <variable citdl="False" ilk="argument" name="allow_none" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="True" ilk="argument" name="bind_and_activate" />
        </scope>
      </scope>
      <scope classrefs="Error" doc="Indicates an XML-RPC fault package." ilk="class" name="Fault" />
      <scope classrefs="HTMLDoc" doc="Class used to generate pydoc HTML document for a server" ilk="class" line="607" lineend="716" name="ServerHTMLDoc">
        <scope doc="Produce HTML documentation for a function or method object." ilk="function" line="651" lineend="691" name="docroutine" returns="tuple" signature="docroutine(object, name, mod=None, funcs={}, classes={}, methods={}, cl=None)">
          <variable citdl="ServerHTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="object" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="mod" />
          <variable citdl="dict" ilk="argument" name="funcs" />
          <variable citdl="dict" ilk="argument" name="classes" />
          <variable citdl="dict" ilk="argument" name="methods" />
          <variable ilk="argument" name="cl" />
          <variable citdl="str" line="655" name="anchor" />
          <variable citdl="str" line="656" name="note" />
          <variable citdl="str" line="658" name="title" />
          <variable citdl="inspect.formatargspec()" line="665" name="argspec" />
          <variable citdl="pydoc.getdoc()" line="681" name="docstring" />
          <variable citdl="str" line="685" name="decl" />
          <variable citdl="markup()" line="688" name="doc" />
        </scope>
        <scope doc="Mark up some plain text, given a context of symbols to look for." ilk="function" line="610" lineend="649" name="markup" returns="str.join()" signature="markup(text, escape=None, funcs={}, classes={}, methods={})">
          <variable citdl="ServerHTMLDoc" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable citdl="self.escape" ilk="argument" name="escape" />
          <variable citdl="dict" ilk="argument" name="funcs" />
          <variable citdl="dict" ilk="argument" name="classes" />
          <variable citdl="dict" ilk="argument" name="methods" />
          <variable citdl="list" line="614" name="results" />
          <variable citdl="int" line="615" name="here" />
          <variable citdl="re.compile()" line="621" name="pattern" />
          <variable citdl="pattern.search()" line="626" name="match" />
          <variable citdl="int()" line="633" name="url" />
        </scope>
        <scope doc="Produce HTML documentation for an XML-RPC server." ilk="function" line="693" lineend="716" name="docserver" returns="self.bigsection()" signature="docserver(server_name, package_documentation, methods)">
          <variable citdl="ServerHTMLDoc" ilk="argument" name="self" />
          <variable citdl="self.escape()" ilk="argument" name="server_name" />
          <variable ilk="argument" name="package_documentation" />
          <variable ilk="argument" name="methods" />
          <variable citdl="dict" line="696" name="fdict" />
          <variable citdl="self.escape()" line="702" name="head" />
          <variable citdl="self.heading()" line="703" name="result" />
          <variable citdl="markup()" line="705" name="doc" />
          <variable citdl="list" line="709" name="contents" />
          <variable citdl="sorted()" line="710" name="method_items" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Mix-in class that dispatches XML-RPC requests.  This class is used to register XML-RPC method handlers" ilk="class" line="154" lineend="410" name="SimpleXMLRPCDispatcher">
        <variable attributes="__instancevar__" citdl="dict" line="163" name="funcs" />
        <scope doc="Registers the XML-RPC multicall method in the system namespace." ilk="function" line="226" lineend="232" name="register_multicall_functions" signature="register_multicall_functions()">
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Dispatches an XML-RPC method from marshalled (XML) data." ilk="function" line="234" lineend="269" name="_marshaled_dispatch" returns="response.encode()" signature="_marshaled_dispatch(data, dispatch_method=None)">
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable ilk="argument" name="dispatch_method" />
          <variable citdl="dumps()" line="251" name="response" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="166" name="encoding" />
        <scope doc="Returns a string containing documentation for the specified method." ilk="function" line="302" lineend="332" name="system_methodHelp" returns="str" signature="system.methodHelp(&apos;add&apos;) =&gt; &quot;Adds two integers together&quot;">
          <import line="331" module="pydoc" />
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="method_name" />
          <variable citdl="resolve_dotted_attribute()" line="307" name="method" />
        </scope>
        <scope doc="Returns a list describing the signature of the method." ilk="function" line="289" lineend="300" name="system_methodSignature" returns="str" signature="system.methodSignature(&apos;add&apos;) =&gt; [double, int, int]">
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="method_name" />
        </scope>
        <variable attributes="__instancevar__" line="164" name="instance" />
        <variable attributes="__instancevar__" citdl="False" line="202" name="allow_dotted_names" />
        <scope doc="Registers a function to respond to XML-RPC requests." ilk="function" line="204" lineend="213" name="register_function" signature="register_function(function, name=None)">
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="function" />
          <variable citdl="function.__name__" ilk="argument" name="name" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="162" lineend="166" name="__init__" signature="SimpleXMLRPCDispatcher(allow_none=False, encoding=None)">
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
          <variable citdl="False" ilk="argument" name="allow_none" />
          <variable ilk="argument" name="encoding" />
        </scope>
        <scope doc="Allows the caller to package multiple XML-RPC calls into a single request." ilk="function" line="334" lineend="364" name="system_multicall" returns="list" signature="system.multicall([{&apos;methodName&apos;: &apos;add&apos;, &apos;params&apos;: [2, 2]}, ...]) =&gt; [[4], ...]">
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="call_list" />
          <variable citdl="list" line="344" name="results" />
          <variable line="346" name="method_name" />
          <variable line="347" name="params" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="165" name="allow_none" />
        <scope attributes="protected" doc="Dispatches the XML-RPC method." ilk="function" line="366" lineend="410" name="_dispatch" returns="self.instance._dispatch()" signature="_dispatch(method, params)">
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="method" />
          <variable ilk="argument" name="params" />
          <variable citdl="resolve_dotted_attribute()" line="387" name="func" />
        </scope>
        <scope doc="Returns a list of the methods supported by the server." ilk="function" line="271" lineend="287" name="system_listMethods" returns="sorted()" signature="system.listMethods() =&gt; [&apos;add&apos;, &apos;subtract&apos;, &apos;multiple&apos;]">
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
          <variable citdl="set()" line="276" name="methods" />
        </scope>
        <scope doc="Registers the XML-RPC introspection methods in the system namespace." ilk="function" line="215" lineend="224" name="register_introspection_functions" signature="register_introspection_functions()">
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
        </scope>
        <scope doc="Registers an instance to respond to XML-RPC requests." ilk="function" line="168" lineend="202" name="register_instance" signature="register_instance(instance, allow_dotted_names=False)">
          <variable citdl="SimpleXMLRPCDispatcher" ilk="argument" name="self" />
          <variable ilk="argument" name="instance" />
          <variable citdl="False" ilk="argument" name="allow_dotted_names" />
        </scope>
      </scope>
      <scope classrefs="BaseHTTPRequestHandler" doc="Simple XML-RPC request handler class.  Handles all HTTP POST requests and attempts to decode them as" ilk="class" line="412" lineend="502" name="SimpleXMLRPCRequestHandler">
        <scope ilk="function" line="423" lineend="428" name="is_rpc_path_valid" returns="bool" signature="is_rpc_path_valid()">
          <variable citdl="SimpleXMLRPCRequestHandler" ilk="argument" name="self" />
        </scope>
        <variable citdl="tuple" line="421" name="rpc_paths" />
        <scope doc="Handles the HTTP POST request." ilk="function" line="430" lineend="484" name="do_POST" signature="do_POST()">
          <variable citdl="SimpleXMLRPCRequestHandler" ilk="argument" name="self" />
          <variable citdl="int" line="447" name="max_chunk_size" />
          <variable citdl="int()" line="448" name="size_remaining" />
          <variable citdl="list" line="449" name="L" />
          <variable citdl="min()" line="451" name="chunk_size" />
          <variable citdl="str.join()" line="454" name="data" />
          <variable citdl="self.server._marshaled_dispatch()" line="461" name="response" />
        </scope>
        <scope ilk="function" line="486" lineend="496" name="report_404" signature="report_404()">
          <variable citdl="SimpleXMLRPCRequestHandler" ilk="argument" name="self" />
          <variable citdl="str" line="489" name="response" />
        </scope>
        <scope doc="Selectively log an accepted request." ilk="function" line="498" lineend="502" name="log_request" signature="log_request(code=&apos;-&apos;, size=&apos;-&apos;)">
          <variable citdl="SimpleXMLRPCRequestHandler" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="code" />
          <variable citdl="str" ilk="argument" name="size" />
        </scope>
      </scope>
      <scope classrefs="TCPServer SimpleXMLRPCDispatcher" doc="Simple XML-RPC server.  Simple XML-RPC server that allows functions and a single instance" ilk="class" line="504" lineend="536" name="SimpleXMLRPCServer">
        <variable citdl="True" line="515" name="allow_reuse_address" />
        <variable attributes="protected" citdl="False" line="521" name="_send_traceback_header" />
        <scope attributes="__ctor__" ilk="function" line="523" lineend="536" name="__init__" signature="SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True)">
          <variable citdl="SimpleXMLRPCServer" ilk="argument" name="self" />
          <variable ilk="argument" name="addr" />
          <variable citdl="SimpleXMLRPCRequestHandler" ilk="argument" name="requestHandler" />
          <variable citdl="True" ilk="argument" name="logRequests" />
          <variable citdl="False" ilk="argument" name="allow_none" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="True" ilk="argument" name="bind_and_activate" />
          <variable citdl="fcntl.fcntl()" line="534" name="flags" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="525" name="logRequests" />
      </scope>
      <scope classrefs="object" doc="Generates documentation for an XML-RPC server.  This class is designed as mix-in and should not" ilk="class" line="718" lineend="797" name="XMLRPCDocGenerator">
        <scope doc="Generates HTML documentation for the server using introspection for installed functions and instances that do not implement the _dispatch method." ilk="function" line="748" lineend="797" name="generate_html_documentation" returns="documenter.page()" signature="generate_html_documentation() =&gt; html documentation for the server">
          <variable citdl="XMLRPCDocGenerator" ilk="argument" name="self" />
          <variable citdl="dict" line="759" name="methods" />
          <variable citdl="tuple()" line="763" name="method" />
          <variable citdl="tuple()" line="765" name="method_info" />
          <variable citdl="ServerHTMLDoc" line="790" name="documenter" />
          <variable citdl="documenter.docserver()" line="791" name="documentation" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="727" name="server_name" />
        <scope doc="Set the name of the generated HTML server documentation" ilk="function" line="738" lineend="741" name="set_server_name" signature="set_server_name(server_name)">
          <variable citdl="XMLRPCDocGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="server_name" />
        </scope>
        <scope doc="Set the documentation string for the entire server." ilk="function" line="743" lineend="746" name="set_server_documentation" signature="set_server_documentation(server_documentation)">
          <variable citdl="XMLRPCDocGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="server_documentation" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="731" name="server_title" />
        <variable attributes="__instancevar__" citdl="str" line="728" name="server_documentation" />
        <scope doc="Set the HTML title of the generated server documentation" ilk="function" line="733" lineend="736" name="set_server_title" signature="set_server_title(server_title)">
          <variable citdl="XMLRPCDocGenerator" ilk="argument" name="self" />
          <variable ilk="argument" name="server_title" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="725" lineend="731" name="__init__" signature="XMLRPCDocGenerator()">
          <variable citdl="XMLRPCDocGenerator" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope doc="data [,options] -&gt; marshalled data" ilk="function" name="dumps" signature="dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False)" />
      <variable citdl="NoneType" line="120" name="fcntl" />
      <import module="http" />
      <import module="inspect" />
      <scope doc="Returns a list of attribute strings, found in the specified object, which represent callable attributes" ilk="function" line="146" lineend="152" name="list_public_methods" returns="list" signature="list_public_methods(obj)">
        <variable ilk="argument" name="obj" />
      </scope>
      <scope doc="data -&gt; unmarshalled data, method name" ilk="function" name="loads" signature="loads(data, use_datetime=False)" />
      <import module="os" />
      <import module="pydoc" />
      <import module="re" />
      <scope doc="Resolves a dotted attribute name to an object." ilk="function" line="122" lineend="144" name="resolve_dotted_attribute" returns="getattr()" signature="resolve_dotted_attribute(a, &apos;b.c.d&apos;) =&gt; a.b.c.d">
        <variable citdl="True" ilk="argument" name="allow_dotted_names" />
        <variable citdl="getattr()" ilk="argument" name="obj" />
        <variable ilk="argument" name="attr" />
        <variable citdl="list" line="133" name="attrs" />
      </scope>
      <import module="socketserver" />
      <import module="sys" />
      <import module="traceback" />
      <variable attributes="__hidden__" citdl="SimpleXMLRPCServer" line="874" name="server" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_symtable">
      <variable citdl="int" name="CELL" />
      <variable citdl="int" name="DEF_BOUND" />
      <variable citdl="int" name="DEF_DOUBLESTAR" />
      <variable citdl="int" name="DEF_FREE" />
      <variable citdl="int" name="DEF_FREE_CLASS" />
      <variable citdl="int" name="DEF_FREE_GLOBAL" />
      <variable citdl="int" name="DEF_GLOBAL" />
      <variable citdl="int" name="DEF_IMPORT" />
      <variable citdl="int" name="DEF_INTUPLE" />
      <variable citdl="int" name="DEF_LOCAL" />
      <variable citdl="int" name="DEF_PARAM" />
      <variable citdl="int" name="DEF_STAR" />
      <variable citdl="int" name="FREE" />
      <variable citdl="int" name="GLOBAL_EXPLICIT" />
      <variable citdl="int" name="GLOBAL_IMPLICIT" />
      <variable citdl="int" name="LOCAL" />
      <variable citdl="int" name="OPT_IMPORT_STAR" />
      <variable citdl="int" name="OPT_TOPLEVEL" />
      <variable citdl="int" name="SCOPE_MASK" />
      <variable citdl="int" name="SCOPE_OFF" />
      <variable citdl="int" name="TYPE_CLASS" />
      <variable citdl="int" name="TYPE_FUNCTION" />
      <variable citdl="int" name="TYPE_MODULE" />
      <variable citdl="int" name="USE" />
      <scope doc="Return symbol and scope dictionaries used internally by compiler." ilk="function" name="symtable" />
    </scope>
    <scope doc="Weak-reference support module." ilk="blob" lang="Python3" name="_weakref">
      <scope classrefs="object" ilk="class" name="CallableProxyType" />
      <scope classrefs="object" ilk="class" name="ProxyType" />
      <scope classrefs="object" ilk="class" name="ReferenceType" />
      <scope doc="return the number of weak references" ilk="function" name="getweakrefcount" signature="getweakrefcount(object)" />
      <scope doc="return a list of all weak reference objects" ilk="function" name="getweakrefs" signature="getweakrefs(object)" />
      <scope doc="create a proxy object that weakly" ilk="function" name="proxy" signature="proxy(object[, callback])" />
      <scope classrefs="object" ilk="class" name="ref" />
    </scope>
    <scope doc="# Dummy file to make this a package." ilk="blob" lang="Python3" name="idlelib" />
    <scope ilk="blob" lang="Python3" name="_md5">
      <scope doc="Return a new MD5 hash object; optionally initialized with a string." ilk="function" name="md5" />
    </scope>
    <scope doc="distutils.errors  Provides exceptions used by the Distutils modules.  Note that Distutils" ilk="blob" lang="Python3" name="distutils.errors">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" line="81" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" line="87" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" line="33" lineend="36" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" line="77" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" line="22" lineend="27" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" line="13" lineend="15" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" line="64" lineend="67" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" line="38" lineend="42" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" line="29" lineend="31" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" line="69" lineend="72" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" line="17" lineend="20" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" line="44" lineend="51" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" line="58" lineend="62" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" line="53" lineend="56" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" line="74" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" line="90" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" line="94" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" line="84" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" line="98" name="UnknownFileError" />
      <variable citdl="str" line="11" name="__revision__" />
    </scope>
    <scope doc="Exception classes raised by urllib.  The base exception class is URLError, which inherits from IOError.  It" ilk="blob" lang="Python3" name="urllib.error">
      <scope classrefs="URLError" doc="# exception raised when downloaded size does not match content-length" ilk="class" line="56" lineend="59" name="ContentTooShortError">
        <variable attributes="__instancevar__" line="59" name="content" />
        <scope attributes="__ctor__" ilk="function" line="57" lineend="59" name="__init__" signature="ContentTooShortError(message, content)">
          <variable citdl="ContentTooShortError" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable ilk="argument" name="content" />
        </scope>
      </scope>
      <scope classrefs="URLError addinfourl" doc="Raised when HTTP error occurs, but also acts like non-error return" ilk="class" line="35" lineend="53" name="HTTPError">
        <variable attributes="__instancevar__" line="43" name="fp" />
        <variable attributes="__instancevar__" line="40" name="code" />
        <variable attributes="__instancevar__" line="42" name="hdrs" />
        <scope ilk="function" line="52" lineend="53" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="HTTPError" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="44" name="filename" />
        <variable attributes="__instancevar__" line="41" name="msg" />
        <variable attributes="private" citdl="urllib.response.addinfourl.__init__" line="37" name="__super_init" />
        <scope attributes="__ctor__" ilk="function" line="39" lineend="50" name="__init__" signature="HTTPError(url, code, msg, hdrs, fp)">
          <variable citdl="HTTPError" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable ilk="argument" name="code" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="hdrs" />
          <variable ilk="argument" name="fp" />
        </scope>
      </scope>
      <scope classrefs="IOError" ilk="class" line="20" lineend="33" name="URLError">
        <variable attributes="__instancevar__" line="28" name="reason" />
        <variable attributes="__instancevar__" citdl="tuple" line="27" name="args" />
        <scope ilk="function" line="32" lineend="33" name="__str__" returns="str" signature="__str__()">
          <variable citdl="URLError" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="26" lineend="30" name="__init__" signature="URLError(reason, filename=None)">
          <variable citdl="URLError" ilk="argument" name="self" />
          <variable ilk="argument" name="reason" />
          <variable ilk="argument" name="filename" />
        </scope>
        <variable attributes="__instancevar__" line="30" name="filename" />
      </scope>
      <import module="urllib" />
    </scope>
    <scope doc="Generic dylib path manipulation" ilk="blob" lang="Python3" name="ctypes.macholib.dylib">
      <variable citdl="SRE_Pattern" line="9" name="DYLIB_RE" />
      <variable citdl="list" line="7" name="__all__" />
      <scope doc="A dylib name can take one of the following four forms: Location/Name.SomeVersion_Suffix.dylib Location/Name.SomeVersion.dylib Location/Name_Suffix.dylib" ilk="function" line="19" lineend="42" name="dylib_info" returns="is_dylib.groupdict()" signature="dylib_info(filename)">
        <variable citdl="DYLIB_RE.match()" line="39" name="is_dylib" />
        <variable ilk="argument" name="filename" />
      </scope>
      <import module="re" />
      <scope ilk="function" line="45" lineend="60" name="test_dylib_info" signature="test_dylib_info()">
        <scope ilk="function" line="46" lineend="52" name="d" returns="dict()" signature="d(location=None, name=None, shortname=None, version=None, suffix=None)">
          <variable ilk="argument" name="location" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="shortname" />
          <variable ilk="argument" name="version" />
          <variable ilk="argument" name="suffix" />
        </scope>
      </scope>
    </scope>
    <scope doc="distutils.msvccompiler  Contains MSVCCompiler, an implementation of the abstract CCompiler class" ilk="blob" lang="Python3" name="distutils.msvccompiler">
      <scope classrefs="object" doc="Abstract base class to define the interface that must be implemented by real compiler classes.  Also has some utility methods used by several compiler classes." ilk="class" name="CCompiler" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <variable citdl="tuple" line="52" name="HKEYS" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompiler" doc="Concrete class that implements an interface to Microsoft Visual C++, as defined by the CCompiler abstract class." ilk="class" line="199" lineend="634" name="MSVCCompiler">
        <variable citdl="dict" line="210" name="executables" />
        <variable citdl="list" line="220" name="src_extensions" />
        <variable attributes="protected" citdl="list" line="213" name="_c_extensions" />
        <variable attributes="__instancevar__" citdl="self.find_exe()" line="252" name="cc" />
        <scope ilk="function" line="538" lineend="540" name="runtime_library_dir_option" signature="runtime_library_dir_option(dir)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.find_exe()" line="253" name="linker" />
        <variable attributes="__instancevar__" citdl="self.find_exe()" line="255" name="rc" />
        <variable attributes="private __instancevar__" citdl="get_build_version()" line="240" name="__product" />
        <scope ilk="function" line="542" lineend="543" name="library_option" returns="self.library_filename()" signature="library_option(lib)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="lib" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="245" name="initialized" />
        <variable attributes="private __instancevar__" citdl="MacroExpander" line="237" name="__macros" />
        <scope ilk="function" line="427" lineend="449" name="create_static_lib" signature="create_static_lib(objects, output_libname, output_dir=None, debug=0, target_lang=None)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="objects" />
          <variable ilk="argument" name="output_libname" />
          <variable ilk="argument" name="output_dir" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="target_lang" />
          <variable citdl="self.library_filename()" line="437" name="output_filename" />
          <variable citdl="list" line="441" name="lib_args" />
        </scope>
        <scope ilk="function" line="535" lineend="536" name="library_dir_option" returns="str" signature="library_dir_option(dir)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dir" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="229" lineend="245" name="__init__" signature="MSVCCompiler(verbose=0, dry_run=0, force=0)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="verbose" />
          <variable citdl="int" ilk="argument" name="dry_run" />
          <variable citdl="int" ilk="argument" name="force" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="287" name="compile_options_debug" />
        <scope doc="Set environment variable &apos;name&apos; to an MSVC path type value." ilk="function" line="622" lineend="634" name="set_path_env_var" signature="set_path_env_var(name)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="get_msvc_paths()" line="630" name="p" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="296" name="ldflags_shared" />
        <variable attributes="__instancevar__" citdl="self.find_exe()" line="254" name="lib" />
        <variable attributes="private __instancevar__" citdl="get_build_version()" line="231" name="__version" />
        <scope doc="Return path to an MSVC executable program." ilk="function" line="564" lineend="584" name="find_exe" returns="os.path.join()" signature="find_exe(exe)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="exe" />
          <variable citdl="os.path.join()" line="574" name="fn" />
        </scope>
        <scope ilk="function" line="546" lineend="560" name="find_library_file" returns="os.path.join()" signature="find_library_file(dirs, lib, debug=0)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="dirs" />
          <variable ilk="argument" name="lib" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable citdl="list" line="550" name="try_names" />
          <variable citdl="os.path.join()" line="555" name="libfile" />
        </scope>
        <variable attributes="protected" citdl="list" line="216" name="_mc_extensions" />
        <variable attributes="__instancevar__" citdl="list" line="285" name="compile_options" />
        <variable citdl="str" line="223" name="obj_extension" />
        <scope doc="Get a list of devstudio directories (include, lib or path)." ilk="function" line="586" lineend="620" name="get_msvc_paths" returns="list" signature="get_msvc_paths(path, platform=&apos;x86&apos;)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="path" />
          <variable citdl="str" ilk="argument" name="platform" />
          <variable citdl="str" line="597" name="key" />
          <variable citdl="read_values()" line="604" name="d" />
        </scope>
        <variable attributes="protected" citdl="list" line="214" name="_cpp_extensions" />
        <variable attributes="protected" citdl="list" line="215" name="_rc_extensions" />
        <variable attributes="__instancevar__" line="283" name="preprocess_options" />
        <variable citdl="str" line="203" name="compiler_type" />
        <variable attributes="private __instancevar__" citdl="get_build_architecture()" line="232" name="__arch" />
        <variable attributes="private __instancevar__" citdl="str" line="236" name="__root" />
        <scope ilk="function" line="452" lineend="528" name="link" signature="link(target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="target_desc" />
          <variable ilk="argument" name="objects" />
          <variable citdl="os.path.join()" ilk="argument" name="output_filename" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable ilk="argument" name="export_symbols" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="build_temp" />
          <variable ilk="argument" name="target_lang" />
          <variable citdl="self._fix_lib_args()" line="470" name="fixed_args" />
          <variable citdl="gen_lib_options()" line="478" name="lib_opts" />
          <variable citdl="list" line="487" name="ldflags" />
          <variable citdl="list" line="496" name="export_opts" />
          <variable citdl="list" line="500" name="ld_args" />
          <variable citdl="os.path.join()" line="511" name="implib_file" />
        </scope>
        <scope ilk="function" line="247" lineend="307" name="initialize" signature="initialize()">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
        </scope>
        <variable citdl="str" line="227" name="exe_extension" />
        <variable attributes="__instancevar__" citdl="list" line="305" name="ldflags_static" />
        <variable citdl="str" line="226" name="static_lib_format" />
        <variable attributes="__instancevar__" citdl="self.find_exe()" line="256" name="mc" />
        <variable attributes="private __instancevar__" citdl="self.get_msvc_paths()" line="248" name="__paths" />
        <variable attributes="__instancevar__" citdl="list" line="298" name="ldflags_shared_debug" />
        <scope ilk="function" line="342" lineend="424" name="compile" returns="objects" signature="compile(sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="sources" />
          <variable ilk="argument" name="output_dir" />
          <variable ilk="argument" name="macros" />
          <variable ilk="argument" name="include_dirs" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="depends" />
          <variable citdl="self._setup_compile()" line="348" name="compile_info" />
          <variable citdl="list" line="352" name="compile_opts" />
          <variable citdl="os.path.abspath()" line="368" name="src" />
          <variable citdl="os.path.abspath()" line="371" name="input_opt" />
          <variable citdl="obj" line="377" name="output_opt" />
          <variable citdl="os.path.dirname()" line="396" name="h_dir" />
          <variable citdl="os.path.dirname()" line="397" name="rc_dir" />
          <variable citdl="os.path.join()" line="403" name="rc_file" />
        </scope>
        <variable citdl="str" line="222" name="res_extension" />
        <variable citdl="str" line="224" name="static_lib_extension" />
        <scope ilk="function" line="311" lineend="339" name="object_filenames" returns="list" signature="object_filenames(source_filenames, strip_dir=0, output_dir=&apos;&apos;)">
          <variable citdl="MSVCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="source_filenames" />
          <variable citdl="int" ilk="argument" name="strip_dir" />
          <variable citdl="str" ilk="argument" name="output_dir" />
          <variable citdl="list" line="318" name="obj_names" />
          <variable citdl="os.path.basename()" line="321" name="base" />
        </scope>
        <variable citdl="str" line="225" name="shared_lib_extension" />
      </scope>
      <scope classrefs="object" ilk="class" line="104" lineend="147" name="MacroExpander">
        <scope ilk="function" line="109" lineend="114" name="set_macro" signature="set_macro(macro, path, key)">
          <variable citdl="MacroExpander" ilk="argument" name="self" />
          <variable ilk="argument" name="macro" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="key" />
          <variable citdl="read_values()" line="111" name="d" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="106" name="macros" />
        <scope ilk="function" line="144" lineend="147" name="sub" returns="s.replace()" signature="sub(s)">
          <variable citdl="MacroExpander" ilk="argument" name="self" />
          <variable citdl="s.replace()" ilk="argument" name="s" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="105" lineend="107" name="__init__" signature="MacroExpander(version)">
          <variable citdl="MacroExpander" ilk="argument" name="self" />
          <variable ilk="argument" name="version" />
        </scope>
        <scope ilk="function" line="116" lineend="142" name="load_macros" signature="load_macros(version)">
          <variable citdl="MacroExpander" ilk="argument" name="self" />
          <variable ilk="argument" name="version" />
          <variable citdl="str" line="117" name="vsbase" />
          <variable citdl="str" line="120" name="net" />
          <variable citdl="str" line="134" name="p" />
          <variable citdl="RegOpenKeyEx()" line="137" name="h" />
          <variable citdl="RegEnumKey()" line="140" name="key" />
          <variable citdl="read_values()" line="141" name="d" />
        </scope>
      </scope>
      <scope classrefs="CCompiler" doc="Concrete class that implements an interface to Microsoft Visual C++, as defined by the CCompiler abstract class." ilk="class" line="639" name="OldMSVCCompiler" />
      <scope doc="Enumerates subkeys of an open registry key." ilk="function" line="29" name="RegEnumKey" returns="str" signature="EnumKey(key, index) -&gt; string" />
      <scope doc="Enumerates values of an open registry key." ilk="function" line="30" name="RegEnumValue" returns="tuple" signature="EnumValue(key, index) -&gt; tuple" />
      <scope classrefs="OSError" doc="MS-Windows OS system call failed." ilk="class" line="31" name="RegError" />
      <scope doc="See OpenKey()" ilk="function" line="28" name="RegOpenKeyEx" />
      <variable citdl="str" line="11" name="__revision__" />
      <scope ilk="function" line="95" lineend="102" name="convert_mbcs" returns="dec()" signature="convert_mbcs(s)">
        <variable citdl="dec()" ilk="argument" name="s" />
        <variable citdl="getattr()" line="96" name="dec" />
      </scope>
      <scope doc="Generate linker options for searching library directories and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at least two types of compilers: the typical Unix compiler and Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <scope doc="Return the processor architecture." ilk="function" line="171" lineend="182" name="get_build_architecture" returns="str" signature="get_build_architecture()">
        <variable citdl="sys.version.find()" line="178" name="i" />
        <variable citdl="str" line="177" name="prefix" />
        <variable citdl="sys.version.find()" line="181" name="j" />
      </scope>
      <scope doc="Return the version of MSVC that was used to build Python." ilk="function" line="149" lineend="169" name="get_build_version" returns="int()" signature="get_build_version()">
        <variable citdl="sys.version.find()" line="156" name="i" />
        <variable citdl="int()" line="161" name="majorVersion" />
        <variable citdl="str" line="155" name="prefix" />
        <variable citdl="int" line="162" name="minorVersion" />
      </scope>
      <import module="hkey_mod" />
      <import module="log" />
      <scope doc="Return a list of normalized paths with duplicates removed." ilk="function" line="184" lineend="196" name="normalize_and_reduce_paths" returns="list" signature="normalize_and_reduce_paths(paths)">
        <variable citdl="os.path.normpath()" line="192" name="np" />
        <variable ilk="argument" name="paths" />
        <variable citdl="list" line="190" name="reduced_paths" />
      </scope>
      <import module="os" />
      <scope doc="Return list of registry keys." ilk="function" line="57" lineend="72" name="read_keys" returns="list" signature="read_keys(base, key)">
        <variable citdl="RegOpenKeyEx()" line="60" name="handle" />
        <variable citdl="int" line="64" name="i" />
        <variable citdl="RegEnumKey()" line="67" name="k" />
        <variable citdl="list" line="63" name="L" />
        <variable ilk="argument" name="base" />
        <variable ilk="argument" name="key" />
      </scope>
      <scope doc="Return dict of registry keys and values." ilk="function" line="74" lineend="93" name="read_values" returns="dict" signature="read_values(base, key)">
        <variable citdl="RegOpenKeyEx()" line="80" name="handle" />
        <variable citdl="dict" line="83" name="d" />
        <variable citdl="int" line="84" name="i" />
        <variable ilk="argument" name="base" />
        <variable ilk="argument" name="key" />
        <variable citdl="name.lower()" line="90" name="name" />
      </scope>
      <import module="sys" />
      <import module="winreg" />
      <variable attributes="protected __hidden__" citdl="True" line="21" name="_can_read_reg" />
      <variable attributes="__hidden__" citdl="winreg" line="26" name="hkey_mod" />
    </scope>
    <scope doc="Functions that read and write gzipped files.  The user of the file doesn&apos;t have to worry about the compression," ilk="blob" lang="Python3" name="gzip">
      <variable citdl="int" line="14" name="FCOMMENT" />
      <variable citdl="int" line="14" name="FEXTRA" />
      <variable citdl="int" line="14" name="FHCRC" />
      <variable citdl="int" line="14" name="FNAME" />
      <variable citdl="int" line="14" name="FTEXT" />
      <scope classrefs="object" doc="The GzipFile class simulates most of the methods of a file object with the exception of the readinto() and truncate() methods." ilk="class" line="47" lineend="481" name="GzipFile">
        <scope ilk="function" line="362" lineend="366" name="flush" signature="flush(zlib_mode=zlib.Z_SYNC_FLUSH)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="zlib.Z_SYNC_FLUSH" ilk="argument" name="zlib_mode" />
        </scope>
        <scope ilk="function" line="447" lineend="459" name="readlines" returns="list" signature="readlines(sizehint=0)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="sys.maxsize" ilk="argument" name="sizehint" />
          <variable citdl="list" line="451" name="L" />
          <variable citdl="readline()" line="453" name="line" />
        </scope>
        <scope attributes="protected" ilk="function" line="148" lineend="153" name="_init_write" signature="_init_write(filename)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
        </scope>
        <variable attributes="__instancevar__" citdl="read32()" line="131" name="mtime" />
        <scope ilk="function" line="338" lineend="351" name="close" signature="close()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="262" lineend="265" name="_unread" signature="_unread(buf)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="buf" />
        </scope>
        <scope attributes="protected" ilk="function" line="179" lineend="181" name="_init_read" signature="_init_read()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="153" name="bufsize" />
        <scope ilk="function" line="393" lineend="414" name="seek" signature="seek(offset, whence=0)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="offset" />
          <variable citdl="int" ilk="argument" name="whence" />
          <variable citdl="int" line="402" name="count" />
          <variable citdl="bytes()" line="403" name="chunk" />
        </scope>
        <scope attributes="__ctor__" doc="Constructor for the GzipFile class." ilk="function" line="56" lineend="134" name="__init__" signature="GzipFile(filename=None, mode=None, compresslevel=9, fileobj=None, mtime=None)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="fileobj.name" ilk="argument" name="filename" />
          <variable citdl="fileobj.mode" ilk="argument" name="mode" />
          <variable citdl="int" ilk="argument" name="compresslevel" />
          <variable citdl="builtins.open()" ilk="argument" name="fileobj" />
          <variable ilk="argument" name="mtime" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="151" name="size" />
        <scope attributes="protected" ilk="function" line="183" lineend="214" name="_read_gzip_header" signature="_read_gzip_header()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="self.fileobj.read()" line="184" name="magic" />
          <variable citdl="ord()" line="187" name="method" />
          <variable citdl="ord()" line="190" name="flag" />
          <variable citdl="ord()" line="198" name="xlen" />
          <variable citdl="self.fileobj.read()" line="204" name="s" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="113" name="extrasize" />
        <variable attributes="__instancevar__" citdl="str" line="112" name="extrabuf" />
        <variable citdl="int" line="54" name="max_read_chunk" />
        <scope ilk="function" line="475" lineend="478" name="__enter__" returns="GzipFile" signature="__enter__()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="323" lineend="336" name="_read_eof" signature="_read_eof()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="read32()" line="330" name="crc32" />
          <variable citdl="read32()" line="331" name="isize" />
        </scope>
        <variable attributes="property" citdl="fileobj.name" line="137" name="filename" />
        <scope ilk="function" line="217" lineend="228" name="write" signature="write(data)">
          <import line="219" module="errno" />
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="353" lineend="360" name="__del__" signature="__del__()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="137" lineend="142" name="filename (property getter)" returns="str" signature="filename (property getter)()">
          <import line="138" module="warnings" />
          <variable citdl="GzipFile" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the uncompressed stream file position indicator to the beginning of the file" ilk="function" line="382" lineend="391" name="rewind" signature="rewind()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="317" lineend="321" name="_add_read_data" signature="_add_read_data(data)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="379" lineend="380" name="tell" returns="int" signature="tell()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="109" name="mode" />
        <scope ilk="function" line="480" lineend="481" name="__exit__" signature="__exit__(*args)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="468" lineend="473" name="__next__" returns="readline()" signature="__next__()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="readline()" line="469" name="line" />
        </scope>
        <scope ilk="function" line="376" lineend="377" name="isatty" returns="bool" signature="isatty()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="230" lineend="260" name="read" returns="str" signature="read(size=-1)">
          <import line="232" module="errno" />
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="size" />
          <variable citdl="min()" line="238" name="readsize" />
          <variable citdl="list" line="255" name="chunk" />
        </scope>
        <scope attributes="protected" ilk="function" line="155" lineend="177" name="_write_gzip_header" signature="_write_gzip_header()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="self.name.encode()" line="161" name="fname" />
          <variable citdl="int" line="166" name="flags" />
          <variable citdl="time.time()" line="170" name="mtime" />
        </scope>
        <variable attributes="__instancevar__" citdl="zlib.compressobj()" line="121" name="compress" />
        <variable attributes="__instancevar__" citdl="zlib.decompressobj()" line="286" name="decompress" />
        <scope ilk="function" line="465" lineend="466" name="__iter__" returns="GzipFile" signature="__iter__()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="builtins.open()" line="129" name="fileobj" />
        <variable attributes="__instancevar__" citdl="int" line="130" name="offset" />
        <scope ilk="function" line="461" lineend="463" name="writelines" signature="writelines(L)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable ilk="argument" name="L" />
        </scope>
        <scope ilk="function" line="416" lineend="445" name="readline" returns="str.join()" signature="readline(size=-1)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="sys.maxsize" ilk="argument" name="size" />
          <variable citdl="int" line="419" name="readsize" />
          <variable citdl="list" line="422" name="bufs" />
          <variable citdl="read()" line="424" name="c" />
          <variable citdl="sys.maxsize" line="425" name="i" />
        </scope>
        <scope doc="Invoke the underlying file object&apos;s fileno() method." ilk="function" line="368" lineend="374" name="fileno" returns="self.fileobj.fileno()" signature="fileno()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="116" name="min_readsize" />
        <variable attributes="__instancevar__" citdl="fileobj.name" line="114" name="name" />
        <variable attributes="__instancevar__" citdl="list" line="152" name="writebuf" />
        <scope attributes="protected" ilk="function" line="267" lineend="315" name="_read" signature="_read(size=1024)">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="size" />
          <variable citdl="self.fileobj.tell()" line="277" name="pos" />
          <variable citdl="self.fileobj.read()" line="290" name="buf" />
          <variable citdl="self.decompress.decompress()" line="296" name="uncompress" />
        </scope>
        <variable line="53" name="myfileobj" />
        <variable attributes="protected __instancevar__" citdl="True" line="111" name="_new_member" />
        <variable attributes="__instancevar__" citdl="int" line="150" name="crc" />
        <scope ilk="function" line="144" lineend="146" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="GzipFile" ilk="argument" name="self" />
          <variable citdl="repr()" line="145" name="s" />
        </scope>
      </scope>
      <scope doc="Return the low-order 32 bits, as a non-negative int" ilk="function" line="26" lineend="28" name="LOWU32" returns="int" signature="LOWU32(i)">
        <variable ilk="argument" name="i" />
      </scope>
      <variable citdl="int" line="16" name="READ" />
      <scope doc="Return i as an unsigned integer, assuming it fits in 32 bits." ilk="function" line="18" lineend="24" name="U32" signature="U32(i)">
        <variable ilk="argument" name="i" />
      </scope>
      <variable citdl="int" line="16" name="WRITE" />
      <variable citdl="list" line="12" name="__all__" />
      <import module="builtins" />
      <scope doc="Shorthand for GzipFile(filename, mode, compresslevel)." ilk="function" line="38" lineend="45" name="open" returns="GzipFile()" signature="open(filename, mode=&apos;rb&apos;, compresslevel=9)">
        <variable citdl="int" ilk="argument" name="compresslevel" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope ilk="function" line="35" lineend="36" name="read32" signature="read32(input)">
        <variable ilk="argument" name="input" />
      </scope>
      <import module="struct" />
      <import module="sys" />
      <import module="time" />
      <scope ilk="function" line="30" lineend="33" name="write32u" signature="write32u(output, value)">
        <variable ilk="argument" name="output" />
        <variable ilk="argument" name="value" />
      </scope>
      <import module="zlib" />
      <scope attributes="protected __hidden__" ilk="function" line="484" lineend="520" name="_test" signature="_test()">
        <variable citdl="list" line="488" name="args" />
        <variable citdl="bool" line="489" name="decompress" />
        <variable citdl="sys.stdin.buffer" line="497" name="f" />
        <variable citdl="sys.stdout.buffer" line="498" name="g" />
        <variable citdl="f.read()" line="513" name="chunk" />
      </scope>
    </scope>
    <scope doc="Bisection algorithms.  This module provides support for maintaining a list in sorted order without" ilk="blob" lang="Python3" name="_bisect">
      <scope doc="Alias for bisect_right()." ilk="function" name="bisect" />
      <scope doc="Return the index where to insert item x in list a, assuming a is sorted." ilk="function" name="bisect_left" signature="bisect_left(a, x[, lo[, hi]]) -&gt; index" />
      <scope doc="Return the index where to insert item x in list a, assuming a is sorted." ilk="function" name="bisect_right" signature="bisect_right(a, x[, lo[, hi]]) -&gt; index" />
      <scope doc="Alias for insort_right()." ilk="function" name="insort" />
      <scope doc="Insert item x in list a, and keep it sorted assuming a is sorted." ilk="function" name="insort_left" signature="insort_left(a, x[, lo[, hi]])" />
      <scope doc="Insert item x in list a, and keep it sorted assuming a is sorted." ilk="function" name="insort_right" signature="insort_right(a, x[, lo[, hi]])" />
    </scope>
    <scope doc="distutils  The main package for the Python Module Distribution Utilities.  Normally" ilk="blob" lang="Python3" name="distutils">
      <variable citdl="str" line="11" name="__revision__" />
      <variable citdl="str" line="18" name="__version__" />
      <import module="archive_util" />
      <import module="bdist_msi" />
      <import module="ccompiler" />
      <import module="cmd" />
      <import module="command" />
      <import module="config" />
      <import module="core" />
      <import module="debug" />
      <import module="dep_util" />
      <import module="dir_util" />
      <import module="dist" />
      <import module="errors" />
      <import module="extension" />
      <import module="fancy_getopt" />
      <import module="file_util" />
      <import module="filelist" />
      <import module="log" />
      <import module="msvc9compiler" />
      <import module="msvccompiler" />
      <import module="spawn" />
      <import module="sysconfig" />
      <import module="util" />
      <import module="version" />
    </scope>
    <scope doc="HTML character entity references." ilk="blob" lang="Python3" name="html.entities">
      <variable citdl="dict" line="260" name="codepoint2name" />
      <variable citdl="dict" line="264" name="entitydefs" />
      <variable citdl="dict" line="4" name="name2codepoint" />
    </scope>
    <scope ilk="blob" lang="Python3" name="audioop">
      <scope ilk="function" name="add" />
      <scope ilk="function" name="adpcm2lin" />
      <scope ilk="function" name="alaw2lin" />
      <scope ilk="function" name="avg" />
      <scope ilk="function" name="avgpp" />
      <scope ilk="function" name="bias" />
      <scope ilk="function" name="cross" />
      <scope classrefs="Exception" ilk="class" name="error" />
      <scope ilk="function" name="findfactor" />
      <scope ilk="function" name="findfit" />
      <scope ilk="function" name="findmax" />
      <scope ilk="function" name="getsample" />
      <scope ilk="function" name="lin2adpcm" />
      <scope ilk="function" name="lin2alaw" />
      <scope ilk="function" name="lin2lin" />
      <scope ilk="function" name="lin2ulaw" />
      <scope ilk="function" name="max" />
      <scope ilk="function" name="maxpp" />
      <scope ilk="function" name="minmax" />
      <scope ilk="function" name="mul" />
      <scope ilk="function" name="ratecv" />
      <scope ilk="function" name="reverse" />
      <scope ilk="function" name="rms" />
      <scope ilk="function" name="tomono" />
      <scope ilk="function" name="tostereo" />
      <scope ilk="function" name="ulaw2lin" />
    </scope>
    <scope doc="Stuff to parse AIFF-C and AIFF files.  Unless explicitly stated otherwise, the description below is true" ilk="blob" lang="Python3" name="aifc">
      <scope classrefs="object" ilk="class" line="243" lineend="479" name="Aifc_read">
        <variable attributes="protected __instancevar__" citdl="_read_long()" line="422" name="_nframes" />
        <scope ilk="function" line="355" lineend="356" name="getcompname" returns="self._compname" signature="getcompname()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="361" lineend="364" name="getparams" returns="tuple" signature="getparams()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="377" lineend="381" name="setpos" signature="setpos(pos)">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
          <variable ilk="argument" name="pos" />
        </scope>
        <scope ilk="function" line="327" lineend="328" name="getfp" signature="getfp()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="284" name="_file" />
        <scope attributes="protected" ilk="function" line="404" lineend="406" name="_alaw2lin" returns="audioop.alaw2lin()" signature="_alaw2lin(data)">
          <import line="405" module="audioop" />
          <variable citdl="Aifc_read" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="425" name="_framesize" />
        <scope attributes="protected" ilk="function" line="420" lineend="458" name="_read_comm_chunk" signature="_read_comm_chunk(chunk)">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
          <variable ilk="argument" name="chunk" />
          <variable citdl="int" line="428" name="kludge" />
          <variable citdl="ord()" line="437" name="length" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Aifc_read._alaw2lin" line="281" name="_convert" />
        <scope ilk="function" line="334" lineend="335" name="close" signature="close()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="318" lineend="322" name="__init__" signature="Aifc_read(f)">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
          <variable citdl="builtins.open()" ilk="argument" name="f" />
        </scope>
        <variable attributes="protected __instancevar__" line="416" name="_adpcmstate" />
        <scope ilk="function" line="346" lineend="347" name="getsampwidth" returns="self._sampwidth" signature="getsampwidth()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Chunk()" line="307" name="_ssnd_chunk" />
        <scope ilk="function" line="352" lineend="353" name="getcomptype" returns="self._comptype" signature="getcomptype()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="290" name="_aifc" />
        <scope ilk="function" line="330" lineend="332" name="rewind" signature="rewind()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="383" lineend="398" name="readframes" returns="self._ssnd_chunk.read()" signature="readframes(nframes)">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
          <variable ilk="argument" name="nframes" />
          <variable citdl="self._ssnd_chunk.read()" line="386" name="dummy" />
          <variable citdl="self._framesize" line="387" name="pos" />
          <variable citdl="self._ssnd_chunk.read()" line="393" name="data" />
        </scope>
        <scope ilk="function" line="279" lineend="316" name="initfp" signature="initfp(file)">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="Chunk()" line="285" name="chunk" />
          <variable citdl="chunk.read()" line="288" name="formdata" />
          <variable citdl="chunk.getname()" line="302" name="chunkname" />
          <variable citdl="chunk.read()" line="308" name="dummy" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="295" name="_comm_chunk_read" />
        <scope ilk="function" line="337" lineend="338" name="tell" returns="int" signature="tell()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="423" name="_sampwidth" />
        <scope ilk="function" line="343" lineend="344" name="getnframes" returns="self._nframes" signature="getnframes()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="297" name="_ssnd_seek_needed" />
        <scope attributes="protected" ilk="function" line="408" lineend="410" name="_ulaw2lin" returns="audioop.ulaw2lin()" signature="_ulaw2lin(data)">
          <import line="409" module="audioop" />
          <variable citdl="Aifc_read" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int()" line="424" name="_framerate" />
        <variable attributes="protected __instancevar__" citdl="_read_short()" line="421" name="_nchannels" />
        <variable attributes="protected __instancevar__" citdl="_read_string()" line="443" name="_compname" />
        <scope attributes="protected" ilk="function" line="412" lineend="418" name="_adpcm2lin" signature="_adpcm2lin(data)">
          <import line="413" module="audioop" />
          <variable citdl="Aifc_read" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="chunk.read()" line="434" name="_comptype" />
        <scope ilk="function" line="349" lineend="350" name="getframerate" returns="self._framerate" signature="getframerate()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="283" name="_soundpos" />
        <variable attributes="protected __instancevar__" citdl="int" line="280" name="_version" />
        <scope ilk="function" line="366" lineend="369" name="getmarkers" returns="list" signature="getmarkers()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="371" lineend="375" name="getmark" returns="marker" signature="getmark(id)">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
        </scope>
        <scope attributes="protected" ilk="function" line="460" lineend="479" name="_readmark" signature="_readmark(chunk)">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
          <variable ilk="argument" name="chunk" />
          <variable citdl="_read_short()" line="461" name="nmarkers" />
          <variable citdl="_read_short()" line="466" name="id" />
          <variable citdl="_read_long()" line="467" name="pos" />
          <variable citdl="_read_string()" line="468" name="name" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="282" name="_markers" />
        <scope ilk="function" line="340" lineend="341" name="getnchannels" returns="self._nchannels" signature="getnchannels()">
          <variable citdl="Aifc_read" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="481" lineend="844" name="Aifc_write">
        <variable attributes="protected __instancevar__" citdl="int" line="533" name="_nframes" />
        <scope ilk="function" line="614" lineend="615" name="getcompname" returns="str" signature="getcompname()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="792" lineend="803" name="_write_form_length" returns="len()" signature="_write_form_length(datalength)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="datalength" />
          <variable citdl="len()" line="794" name="commlength" />
          <variable citdl="int" line="797" name="verslength" />
        </scope>
        <scope ilk="function" line="635" lineend="639" name="getparams" returns="tuple" signature="getparams()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="548" lineend="551" name="aiff" signature="aiff()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="525" name="_file" />
        <scope ilk="function" line="558" lineend="563" name="setnchannels" signature="setnchannels(nchannels)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="nchannels" />
        </scope>
        <scope ilk="function" line="553" lineend="556" name="aifc" signature="aifc()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="749" lineend="790" name="_write_header" signature="_write_header(initlength)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="initlength" />
          <variable citdl="self._write_form_length()" line="768" name="commlength" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="536" name="_datalength" />
        <variable attributes="protected __instancevar__" citdl="Aifc_write._lin2alaw" line="529" name="_convert" />
        <scope ilk="function" line="683" lineend="696" name="close" signature="close()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="511" lineend="522" name="__init__" signature="Aifc_write(f)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable citdl="builtins.open()" ilk="argument" name="f" />
          <variable citdl="str" line="513" name="filename" />
        </scope>
        <variable attributes="protected __instancevar__" line="713" name="_adpcmstate" />
        <scope ilk="function" line="594" lineend="597" name="setnframes" signature="setnframes(nframes)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="nframes" />
        </scope>
        <scope ilk="function" line="668" lineend="675" name="writeframesraw" signature="writeframesraw(data)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable citdl="_convert()" ilk="argument" name="data" />
          <variable citdl="int" line="670" name="nframes" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="len()" line="535" name="_datawritten" />
        <scope ilk="function" line="577" lineend="580" name="getsampwidth" returns="int" signature="getsampwidth()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="641" lineend="652" name="setmark" signature="setmark(id, pos, name)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="pos" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="611" lineend="612" name="getcomptype" returns="str" signature="getcomptype()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="706" lineend="708" name="_lin2ulaw" returns="audioop.lin2ulaw()" signature="_lin2ulaw(data)">
          <import line="707" module="audioop" />
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="520" name="_aifc" />
        <scope ilk="function" line="524" lineend="539" name="initfp" signature="initfp(file)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope ilk="function" line="622" lineend="633" name="setparams" signature="setparams(params)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="params" />
        </scope>
        <scope ilk="function" line="665" lineend="666" name="tell" returns="int" signature="tell()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._file.tell()" line="787" name="_ssnd_length_pos" />
        <variable attributes="protected __instancevar__" citdl="int" line="531" name="_sampwidth" />
        <variable attributes="protected __instancevar__" citdl="int" line="538" name="_marklength" />
        <scope ilk="function" line="541" lineend="543" name="__del__" signature="__del__()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="710" lineend="715" name="_lin2adpcm" signature="_lin2adpcm(data)">
          <import line="711" module="audioop" />
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="534" name="_nframeswritten" />
        <variable attributes="protected __instancevar__" citdl="int" line="532" name="_framerate" />
        <variable attributes="protected __instancevar__" citdl="self._file.tell()" line="767" name="_form_length_pos" />
        <scope attributes="protected" ilk="function" line="702" lineend="704" name="_lin2alaw" returns="audioop.lin2alaw()" signature="_lin2alaw(data)">
          <import line="703" module="audioop" />
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope attributes="protected" ilk="function" line="717" lineend="737" name="_ensure_header_written" signature="_ensure_header_written(datasize)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="datasize" />
        </scope>
        <scope ilk="function" line="599" lineend="600" name="getnframes" returns="int" signature="getnframes()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="527" name="_comptype" />
        <variable attributes="protected __instancevar__" citdl="int" line="530" name="_nchannels" />
        <variable attributes="protected __instancevar__" citdl="str" line="528" name="_compname" />
        <scope attributes="protected" ilk="function" line="827" lineend="844" name="_writemarkers" signature="_writemarkers()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable citdl="len()" line="831" name="length" />
        </scope>
        <scope attributes="protected" ilk="function" line="805" lineend="825" name="_patchheader" signature="_patchheader()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable citdl="self._file.tell()" line="806" name="curpos" />
          <variable citdl="len()" line="808" name="datalength" />
          <variable citdl="_write_form_length()" line="818" name="dummy" />
        </scope>
        <scope ilk="function" line="589" lineend="592" name="getframerate" returns="int" signature="getframerate()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="582" lineend="587" name="setframerate" signature="setframerate(framerate)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="framerate" />
        </scope>
        <scope ilk="function" line="677" lineend="681" name="writeframes" signature="writeframes(data)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="long" line="526" name="_version" />
        <variable attributes="protected __instancevar__" citdl="self._file.tell()" line="779" name="_nframes_pos" />
        <scope ilk="function" line="660" lineend="663" name="getmarkers" returns="list" signature="getmarkers()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="654" lineend="658" name="getmark" returns="marker" signature="getmark(id)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
        </scope>
        <scope attributes="protected" ilk="function" line="739" lineend="747" name="_init_compression" signature="_init_compression()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="537" name="_markers" />
        <scope ilk="function" line="602" lineend="609" name="setcomptype" signature="setcomptype(comptype, compname)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="comptype" />
          <variable ilk="argument" name="compname" />
        </scope>
        <scope ilk="function" line="570" lineend="575" name="setsampwidth" signature="setsampwidth(sampwidth)">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
          <variable ilk="argument" name="sampwidth" />
        </scope>
        <scope ilk="function" line="565" lineend="568" name="getnchannels" returns="int" signature="getnchannels()">
          <variable citdl="Aifc_write" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" name="Chunk" />
      <scope classrefs="Exception" ilk="class" line="142" lineend="143" name="Error" />
      <variable citdl="list" line="140" name="__all__" />
      <import module="builtins" />
      <scope ilk="function" line="846" lineend="857" name="open" returns="Aifc_read" signature="open(f, mode=None)">
        <variable citdl="f.mode" ilk="argument" name="mode" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="859" name="openfp" signature="openfp(f, mode=None)" />
      <import module="struct" />
      <scope attributes="protected __hidden__" ilk="function" line="165" lineend="173" name="_read_string" returns="file.read()" signature="_read_string(file)">
        <variable ilk="argument" name="file" />
        <variable citdl="ord()" line="166" name="length" />
        <variable citdl="file.read()" line="168" name="data" />
        <variable citdl="file.read()" line="172" name="dummy" />
      </scope>
      <variable attributes="protected __hidden__" citdl="float" line="175" name="_HUGE_VAL" />
      <variable attributes="__hidden__" citdl="open()" line="877" name="g" />
      <scope attributes="protected __hidden__" ilk="function" line="153" lineend="157" name="_read_ulong" signature="_read_ulong(file)">
        <variable ilk="argument" name="file" />
      </scope>
      <variable attributes="__hidden__" citdl="open()" line="866" name="f" />
      <scope attributes="protected __hidden__" ilk="function" line="147" lineend="151" name="_read_long" signature="_read_long(file)">
        <variable ilk="argument" name="file" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="159" lineend="163" name="_read_short" signature="_read_short(file)">
        <variable ilk="argument" name="file" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="197" lineend="198" name="_write_long" signature="_write_long(f, x)">
        <variable ilk="argument" name="f" />
        <variable ilk="argument" name="x" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="177" lineend="192" name="_read_float" returns="pow()" signature="_read_float(f)">
        <variable citdl="_read_ulong()" ilk="argument" name="f" />
        <variable citdl="_read_short()" line="178" name="expon" />
        <variable citdl="int" line="179" name="sign" />
        <variable citdl="_read_ulong()" line="183" name="himant" />
        <variable citdl="_read_ulong()" line="184" name="lomant" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="200" lineend="206" name="_write_string" signature="_write_string(f, s)">
        <variable ilk="argument" name="f" />
        <variable ilk="argument" name="s" />
      </scope>
      <variable attributes="protected __hidden__" citdl="long" line="145" name="_AIFC_version" />
      <variable attributes="__hidden__" line="875" name="gn" />
      <scope attributes="protected __hidden__" ilk="function" line="208" lineend="239" name="_write_float" signature="_write_float(f, x)">
        <import line="209" module="math" />
        <variable ilk="argument" name="f" />
        <variable citdl="int" ilk="argument" name="x" />
        <variable citdl="int" line="211" name="sign" />
        <variable citdl="int" line="216" name="expon" />
        <variable citdl="int" line="217" name="himant" />
        <variable citdl="int" line="218" name="lomant" />
        <variable citdl="math.ldexp()" line="228" name="fmant" />
        <variable citdl="math.floor()" line="232" name="fsmant" />
      </scope>
      <variable attributes="__hidden__" citdl="f.readframes()" line="880" name="data" />
      <variable attributes="__hidden__" line="865" name="fn" />
      <scope attributes="protected __hidden__" ilk="function" line="194" lineend="195" name="_write_short" signature="_write_short(f, x)">
        <variable ilk="argument" name="f" />
        <variable ilk="argument" name="x" />
      </scope>
    </scope>
    <scope doc="Fixer that changes os.getcwdu() to os.getcwd()." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_getcwdu">
      <scope classrefs="BaseFix" ilk="class" line="10" lineend="18" name="FixGetcwdu">
        <variable citdl="str" line="12" name="PATTERN" />
        <scope ilk="function" line="16" lineend="18" name="transform" signature="transform(node, results)">
          <variable citdl="FixGetcwdu" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="17" name="name" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Fixer that changes raw_input(...) into input(...)." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_raw_input">
      <scope classrefs="BaseFix" ilk="class" line="8" lineend="16" name="FixRawInput">
        <variable citdl="str" line="10" name="PATTERN" />
        <scope ilk="function" line="14" lineend="16" name="transform" signature="transform(node, results)">
          <variable citdl="FixRawInput" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="15" name="name" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope ilk="blob" lang="Python3" name="email.mime">
      <import module="application" />
      <import module="base" />
      <import module="image" />
      <import module="message" />
      <import module="nonmultipart" />
    </scope>
    <scope ilk="blob" lang="Python3" name="msvcrt">
      <variable citdl="str" name="CRT_ASSEMBLY_VERSION" />
      <variable citdl="str" name="LIBRARIES_ASSEMBLY_NAME_PREFIX" />
      <variable citdl="int" name="LK_LOCK" />
      <variable citdl="int" name="LK_NBLCK" />
      <variable citdl="int" name="LK_NBRLCK" />
      <variable citdl="int" name="LK_RLCK" />
      <variable citdl="int" name="LK_UNLCK" />
      <variable citdl="int" name="SEM_FAILCRITICALERRORS" />
      <variable citdl="int" name="SEM_NOALIGNMENTFAULTEXCEPT" />
      <variable citdl="int" name="SEM_NOGPFAULTERRORBOX" />
      <variable citdl="int" name="SEM_NOOPENFILEERRORBOX" />
      <scope ilk="function" name="SetErrorMode" />
      <variable citdl="str" name="VC_ASSEMBLY_PUBLICKEYTOKEN" />
      <scope doc="Return the file handle for the file descriptor fd." ilk="function" name="get_osfhandle" returns="file" signature="get_osfhandle(fd) -&gt; file handle" />
      <scope doc="Read a keypress and return the resulting character." ilk="function" name="getch" signature="getch() -&gt; key character" />
      <scope doc="Similar to getch(), but the keypress will be echoed if it represents a printable character." ilk="function" name="getche" signature="getche() -&gt; key character" />
      <scope doc="Wide char variant of getch(), returning a Unicode value." ilk="function" name="getwch" returns="unicode" signature="getwch() -&gt; Unicode key character" />
      <scope doc="Wide char variant of getche(), returning a Unicode value." ilk="function" name="getwche" returns="unicode" signature="getwche() -&gt; Unicode key character" />
      <scope doc="Force the malloc() heap to clean itself up and return unused blocks to the operating system." ilk="function" name="heapmin" signature="heapmin() -&gt; None" />
      <scope doc="Return true if a keypress is waiting to be read." ilk="function" name="kbhit" returns="bool" signature="kbhit() -&gt; bool" />
      <scope doc="Lock part of a file based on file descriptor fd from the C runtime." ilk="function" name="locking" signature="locking(fd, mode, nbytes) -&gt; None" />
      <scope doc="Create a C runtime file descriptor from the file handle handle." ilk="function" name="open_osfhandle" returns="file" signature="open_osfhandle(handle, flags) -&gt; file descriptor" />
      <scope doc="Print the character char to the console without buffering." ilk="function" name="putch" signature="putch(char) -&gt; None" />
      <scope doc="Wide char variant of putch(), accepting a Unicode value." ilk="function" name="putwch" signature="putwch(unicode_char) -&gt; None" />
      <scope doc="Set the line-end translation mode for the file descriptor fd." ilk="function" name="setmode" signature="setmode(fd, mode) -&gt; Previous mode" />
      <scope doc="Cause the character char to be &quot;pushed back&quot; into the console buffer; it will be the next character read by getch() or getche()." ilk="function" name="ungetch" signature="ungetch(char) -&gt; None" />
      <scope doc="Wide char variant of ungetch(), accepting a Unicode value." ilk="function" name="ungetwch" signature="ungetwch(unicode_char) -&gt; None" />
    </scope>
    <scope doc="distutils.command.register  Implements the Distutils &apos;register&apos; command (register with the repository)." ilk="blob" lang="Python3" name="distutils.command.register">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="Command" doc="Base command that knows how to handle the .pypirc file" ilk="class" name="PyPIRCCommand" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" name="__revision__" />
      <import module="getpass" />
      <import module="io" />
      <import module="log" />
      <import module="os" />
      <scope classrefs="PyPIRCCommand" ilk="class" name="register" />
      <import module="string" />
      <import module="urllib" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
    </scope>
    <scope doc="Functions to convert between Python values and C structs. Python bytes objects are used to hold the data representing the C struct and also as format strings (explained below) to describe the layout of data" ilk="blob" lang="Python3" name="struct">
      <scope classrefs="object" doc="Compiled struct object" ilk="class" name="Struct" />
      <scope doc="Return size of C struct described by format string fmt." ilk="function" name="calcsize" />
      <scope classrefs="Exception" ilk="class" name="error" />
      <scope doc="Return bytes containing values v1, v2, ..." ilk="function" name="pack" />
      <scope doc="Pack the values v1, v2, ... according to fmt." ilk="function" name="pack_into" />
      <scope doc="Unpack the bytes containing packed C structure data, according to fmt." ilk="function" name="unpack" />
      <scope doc="Unpack the buffer, containing packed C structure data, according to fmt, starting at offset." ilk="function" name="unpack_from" />
    </scope>
    <scope ilk="blob" lang="Python3" name="mmap">
      <variable citdl="int" name="ACCESS_COPY" />
      <variable citdl="int" name="ACCESS_READ" />
      <variable citdl="int" name="ACCESS_WRITE" />
      <variable citdl="int" name="ALLOCATIONGRANULARITY" />
      <variable citdl="int" name="PAGESIZE" />
      <scope classrefs="EnvironmentError" ilk="class" name="error" />
      <scope classrefs="object" doc="Windows: mmap(fileno, length[, tagname[, access[, offset]]])  Maps length bytes from the file specified by the file handle fileno," ilk="class" name="mmap" />
    </scope>
    <scope doc="Command-line tool to validate and pretty-print JSON  Usage::" ilk="blob" lang="Python3" name="json.tool">
      <import module="json" />
      <scope ilk="function" line="16" lineend="33" name="main" signature="main()">
        <variable citdl="sys.stdout" line="19" name="outfile" />
        <variable citdl="json.load()" line="29" name="obj" />
        <variable citdl="open()" line="18" name="infile" />
      </scope>
      <import module="sys" />
    </scope>
    <scope ilk="blob" lang="Python3" name="collections">
      <scope classrefs="Sequence" doc="This unifies bytes and bytearray.  XXX Should add all their methods." ilk="class" name="ByteString" />
      <scope classrefs="object" ilk="class" name="Callable" />
      <scope classrefs="object" ilk="class" name="Container" />
      <scope classrefs="dict" doc="Dict subclass for counting hashable items.  Sometimes called a bag or multiset.  Elements are stored as dictionary keys and their counts are stored as dictionary values." ilk="class" name="Counter" />
      <scope classrefs="object" ilk="class" name="Hashable" />
      <scope classrefs="MappingView Set" ilk="class" name="ItemsView" />
      <scope classrefs="object" ilk="class" name="Iterable" />
      <scope classrefs="Iterable" ilk="class" name="Iterator" />
      <scope classrefs="MappingView Set" ilk="class" name="KeysView" />
      <scope classrefs="Sized Iterable Container" ilk="class" name="Mapping" />
      <scope classrefs="Sized" ilk="class" name="MappingView" />
      <scope classrefs="Mapping" ilk="class" name="MutableMapping" />
      <scope classrefs="Sequence" ilk="class" name="MutableSequence" />
      <scope classrefs="Set" ilk="class" name="MutableSet" />
      <scope classrefs="dict MutableMapping" doc="Dictionary that remembers insertion order" ilk="class" name="OrderedDict" />
      <scope classrefs="Sized Iterable Container" doc="All the operations on a read-only sequence.  Concrete subclasses must override __new__ or __init__," ilk="class" name="Sequence" />
      <scope classrefs="Sized Iterable Container" doc="A set is a finite, iterable container.  This class provides concrete generic implementations of all" ilk="class" name="Set" />
      <scope classrefs="object" ilk="class" name="Sized" />
      <scope classrefs="MutableMapping" ilk="class" name="UserDict" />
      <scope classrefs="MutableSequence" doc="A more or less complete user-defined wrapper around list objects." ilk="class" name="UserList" />
      <scope classrefs="Sequence" ilk="class" name="UserString" />
      <scope classrefs="MappingView" ilk="class" name="ValuesView" />
      <variable citdl="list" name="__all__" />
      <import module="_abcoll" />
      <import module="_heapq" />
      <import module="_sys" />
      <scope classrefs="object" ilk="class" name="bytearray_iterator" />
      <scope classrefs="object" ilk="class" name="bytes_iterator" />
      <scope classrefs="dict" doc="defaultdict(default_factory) --&gt; dict with default factory  The default factory is called without arguments to produce" ilk="class" name="defaultdict" />
      <scope classrefs="object" doc="deque(iterable[, maxlen]) --&gt; deque object  Build an ordered collection accessible from endpoints only." ilk="class" name="deque" />
      <scope classrefs="object" ilk="class" name="dict_itemiterator" />
      <scope classrefs="object" ilk="class" name="dict_items" />
      <scope classrefs="object" ilk="class" name="dict_keyiterator" />
      <scope classrefs="object" ilk="class" name="dict_keys" />
      <scope classrefs="object" ilk="class" name="dict_proxy" />
      <scope classrefs="object" ilk="class" name="dict_valueiterator" />
      <scope classrefs="object" ilk="class" name="dict_values" />
      <scope classrefs="object" ilk="class" name="list_iterator" />
      <scope classrefs="object" ilk="class" name="list_reverseiterator" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <scope classrefs="object" ilk="class" name="range_iterator" />
      <scope classrefs="object" ilk="class" name="set_iterator" />
      <scope classrefs="object" ilk="class" name="str_iterator" />
      <scope classrefs="object" ilk="class" name="tuple_iterator" />
      <scope classrefs="object" doc="zip(iter1 [,iter2 [...]]) --&gt; zip object  Return a zip object whose .__next__() method returns a tuple where" ilk="class" name="zip_iterator" />
    </scope>
    <scope doc="Fixer for StandardError -&gt; Exception." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_standarderror">
      <scope classrefs="BaseFix" ilk="class" line="11" lineend="18" name="FixStandarderror">
        <variable citdl="str" line="13" name="PATTERN" />
        <scope ilk="function" line="17" lineend="18" name="transform" returns="Name()" signature="transform(node, results)">
          <variable citdl="FixStandarderror" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="# Module for starting a process object using os.fork() or CreateProcess() # # multiprocessing/forking.py" ilk="blob" lang="Python3" name="multiprocessing.forking">
      <scope classrefs="object" doc="Connection type whose constructor signature is      Connection(handle, readable=True, writable=True)." ilk="class" name="Connection" />
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs" ilk="class" name="Finalize" />
      <scope classrefs="_Pickler" ilk="class" line="33" lineend="43" name="ForkingPickler">
        <scope ilk="function" line="36" lineend="43" name="register" signature="register(type, reduce)">
          <variable citdl="ForkingPickler" ilk="argument" name="cls" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="reduce" />
          <scope ilk="function" line="37" lineend="42" name="dispatcher" signature="dispatcher(self, obj)">
            <variable ilk="argument" name="self" />
            <variable ilk="argument" name="obj" />
            <variable citdl="reduce()" line="38" name="rv" />
          </scope>
        </scope>
        <variable citdl="Pickler.dispatch.copy()" line="34" name="dispatch" />
      </scope>
      <variable citdl="int" name="HIGHEST_PROTOCOL" />
      <scope classrefs="object" ilk="class" name="Pickler" />
      <scope classrefs="object" doc="Connection type whose constructor signature is      Connection(handle, readable=True, writable=True)." ilk="class" name="PipeConnection" />
      <scope classrefs="object" doc="Start a subprocess to run the code of a process object" ilk="class" line="202" lineend="274" name="Popen">
        <variable attributes="__instancevar__" citdl="_subprocess.GetExitCodeProcess()" line="227" name="returncode" />
        <variable attributes="__instancevar__" line="226" name="pid" />
        <scope ilk="function" line="246" lineend="247" name="duplicate_for_child" returns="duplicate()" signature="duplicate_for_child()">
          <variable citdl="Popen" ilk="argument" name="handle" />
        </scope>
        <scope ilk="function" line="268" lineend="274" name="terminate" signature="terminate()">
          <variable citdl="Popen" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="hp" line="228" name="_handle" />
        <variable attributes="protected" citdl="_thread._local()" line="206" name="_tls" />
        <scope ilk="function" line="265" lineend="266" name="poll" returns="Popen.wait()" signature="poll()">
          <variable citdl="Popen" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="242" lineend="243" name="thread_is_spawning" returns="bool" signature="thread_is_spawning()" />
        <scope attributes="__ctor__" ilk="function" line="208" lineend="239" name="__init__" signature="Popen(process_obj)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="process_obj" />
          <variable citdl="duplicate()" line="213" name="rhandle" />
          <variable citdl="list" line="217" name="cmd" />
          <variable citdl="get_preparation_data()" line="231" name="prep_data" />
          <variable citdl="os.fdopen()" line="232" name="to_child" />
        </scope>
        <scope ilk="function" line="249" lineend="263" name="wait" returns="_subprocess.GetExitCodeProcess()" signature="wait(timeout=None)">
          <variable citdl="Popen" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="max()" line="252" name="msecs" />
          <variable citdl="_subprocess.WaitForSingleObject()" line="256" name="res" />
          <variable citdl="signal.SIGTERM" line="258" name="code" />
        </scope>
      </scope>
      <variable citdl="int" line="165" name="TERMINATE" />
      <variable citdl="bool" line="166" name="WINEXE" />
      <variable citdl="list" line="15" name="__all__" />
      <import module="_subprocess" />
      <import module="_thread" />
      <scope ilk="function" line="21" lineend="25" name="assert_spawning" signature="assert_spawning(self)">
        <variable ilk="argument" name="self" />
      </scope>
      <scope ilk="function" line="81" name="close" />
      <scope ilk="function" line="158" lineend="159" name="dump" signature="dump(obj, file, protocol=None)">
        <variable ilk="argument" name="protocol" />
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="file" />
      </scope>
      <scope ilk="function" line="189" lineend="194" name="duplicate" signature="duplicate(handle, target_process=None, inheritable=False)">
        <variable citdl="_subprocess.GetCurrentProcess()" ilk="argument" name="target_process" />
        <variable ilk="argument" name="handle" />
        <variable citdl="False" ilk="argument" name="inheritable" />
      </scope>
      <scope ilk="function" line="79" name="exit" />
      <scope doc="Run code for process object if this in not the main process" ilk="function" line="291" lineend="297" name="freeze_support" signature="freeze_support()" />
      <scope doc="Returns prefix of command line used for spawning a child process" ilk="function" line="300" lineend="323" name="get_command_line" returns="list" signature="get_command_line()">
        <variable citdl="str" line="322" name="prog" />
      </scope>
      <scope doc="Return info about parent needed by child to unpickle process object" ilk="function" line="348" lineend="376" name="get_preparation_data" returns="dict()" signature="get_preparation_data(name)">
        <variable ilk="argument" name="name" />
        <variable citdl="getattr()" line="367" name="main_path" />
        <variable citdl="dict()" line="354" name="d" />
      </scope>
      <scope doc="Return whether commandline indicates we are forking" ilk="function" line="280" lineend="288" name="is_forking" returns="bool" signature="is_forking(argv)">
        <variable ilk="argument" name="argv" />
      </scope>
      <scope ilk="function" name="load" signature="load(file, *, fix_imports=True, encoding=&apos;ASCII&apos;, errors=&apos;strict&apos;)" />
      <scope doc="Run code specifed by data received over pipe" ilk="function" line="326" lineend="345" name="main" signature="main()">
        <variable citdl="int()" line="332" name="handle" />
        <variable citdl="load()" line="339" name="self" />
        <variable citdl="load()" line="337" name="preparation_data" />
        <variable citdl="msvcrt.open_osfhandle()" line="333" name="fd" />
        <variable citdl="os.fdopen()" line="334" name="from_parent" />
        <variable citdl="self._bootstrap()" line="344" name="exitcode" />
      </scope>
      <import module="msvcrt" />
      <variable citdl="list" line="398" name="old_main_modules" />
      <import module="os" />
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application of the given arguments and keywords." ilk="class" name="partial" />
      <scope doc="Try to get current process ready to unpickle process object" ilk="function" line="400" lineend="470" name="prepare" signature="prepare(data)">
        <variable citdl="list" line="440" name="dirs" />
        <variable ilk="argument" name="data" />
        <variable citdl="os.path.basename()" line="432" name="main_name" />
        <variable line="431" name="main_path" />
        <variable citdl="imp.load_module()" line="452" name="main_module" />
      </scope>
      <import module="process" />
      <scope ilk="function" line="382" lineend="389" name="reduce_connection" returns="tuple" signature="reduce_connection(conn)">
        <variable ilk="argument" name="conn" />
      </scope>
      <scope ilk="function" line="181" lineend="183" name="set_executable" signature="set_executable(exe)">
        <variable attributes="protected" line="183" name="_python_exe" />
        <variable ilk="argument" name="exe" />
      </scope>
      <import module="signal" />
      <import module="sys" />
      <import module="time" />
      <import module="util" />
      <scope classrefs="object" ilk="class" name="win32" />
      <scope attributes="protected __hidden__" ilk="function" line="45" lineend="49" name="_reduce_method" returns="tuple" signature="_reduce_method(m)">
        <variable ilk="argument" name="m" />
      </scope>
      <scope attributes="protected __hidden__" ilk="class" line="50" lineend="52" name="_C">
        <scope ilk="function" line="51" lineend="52" name="f" signature="f()">
          <variable citdl="_C" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable attributes="protected __hidden__" citdl="sys.executable" line="177" name="_python_exe" />
      <scope attributes="protected __hidden__" ilk="function" line="56" lineend="57" name="_reduce_method_descriptor" returns="tuple" signature="_reduce_method_descriptor(m)">
        <variable ilk="argument" name="m" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="68" lineend="69" name="_rebuild_partial" returns="partial()" signature="_rebuild_partial(func, args, keywords)">
        <variable ilk="argument" name="func" />
        <variable ilk="argument" name="args" />
        <variable ilk="argument" name="keywords" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="66" lineend="67" name="_reduce_partial" returns="tuple" signature="_reduce_partial(p)">
        <variable ilk="argument" name="p" />
      </scope>
    </scope>
    <scope doc="This modules handles dialog boxes.  It contains the following public symbols:" ilk="blob" lang="Python3" name="tkinter.simpledialog">
      <variable citdl="str" name="ACTIVE" />
      <variable citdl="str" name="ALL" />
      <variable citdl="str" name="ANCHOR" />
      <variable citdl="str" name="ARC" />
      <scope ilk="function" name="At" signature="At(x, y=None)" />
      <scope doc="# Indices: # XXX I don&apos;t like these -- take them away" ilk="function" name="AtEnd" signature="AtEnd()" />
      <scope ilk="function" name="AtInsert" signature="AtInsert(*args)" />
      <scope ilk="function" name="AtSelFirst" signature="AtSelFirst()" />
      <scope ilk="function" name="AtSelLast" signature="AtSelLast()" />
      <variable citdl="str" name="BASELINE" />
      <variable citdl="str" name="BEVEL" />
      <variable citdl="str" name="BOTH" />
      <variable citdl="str" name="BOTTOM" />
      <variable citdl="str" name="BROWSE" />
      <variable citdl="str" name="BUTT" />
      <scope classrefs="Misc" doc="Internal class." ilk="class" name="BaseWidget" />
      <scope classrefs="Image" doc="Widget which can display a bitmap." ilk="class" name="BitmapImage" />
      <scope classrefs="Variable" doc="Value holder for boolean variables." ilk="class" name="BooleanVar" />
      <scope classrefs="Widget" doc="Button widget." ilk="class" name="Button" />
      <variable citdl="str" name="CASCADE" />
      <variable citdl="str" name="CENTER" />
      <variable citdl="str" name="CHAR" />
      <variable citdl="str" name="CHECKBUTTON" />
      <variable citdl="str" name="CHORD" />
      <variable citdl="str" name="COMMAND" />
      <variable citdl="str" name="CURRENT" />
      <scope classrefs="object" doc="Internal class. Stores function to call when some user defined Tcl function is called e.g. after an event occurred." ilk="class" name="CallWrapper" />
      <scope classrefs="Widget" doc="Canvas widget to display graphical elements like lines or text." ilk="class" name="Canvas" />
      <scope classrefs="Widget" doc="Checkbutton widget which is either in on- or off-state." ilk="class" name="Checkbutton" />
      <variable citdl="str" name="DISABLED" />
      <variable citdl="str" name="DOTBOX" />
      <scope classrefs="Toplevel" doc="Class to open dialogs.  This class is intended as a base class for custom dialogs" ilk="class" line="114" lineend="249" name="Dialog">
        <scope doc="create dialog body." ilk="function" line="179" lineend="186" name="body" signature="body(master)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
        </scope>
        <scope ilk="function" line="209" lineend="221" name="ok" signature="ok(event=None)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope doc="add standard button box." ilk="function" line="188" lineend="204" name="buttonbox" signature="buttonbox()">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable citdl="Frame()" line="194" name="box" />
          <variable citdl="Button()" line="196" name="w" />
        </scope>
        <variable attributes="__instancevar__" line="143" name="parent" />
        <scope ilk="function" line="223" lineend="228" name="cancel" signature="cancel(event=None)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <variable attributes="__instancevar__" line="145" name="result" />
        <scope doc="process the data" ilk="function" line="242" lineend="249" name="apply" signature="apply()">
          <variable citdl="Dialog" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="Dialog" line="148" name="initial_focus" />
        <scope doc="Destroy the window" ilk="function" line="171" lineend="174" name="destroy" signature="destroy()">
          <variable citdl="Dialog" ilk="argument" name="self" />
        </scope>
        <scope doc="validate the data" ilk="function" line="233" lineend="240" name="validate" returns="int" signature="validate()">
          <variable citdl="Dialog" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Initialize a dialog." ilk="function" line="121" lineend="169" name="__init__" signature="Dialog(parent, title=None)">
          <variable citdl="Dialog" ilk="argument" name="self" />
          <variable ilk="argument" name="parent" />
          <variable ilk="argument" name="title" />
          <variable citdl="Frame()" line="147" name="body" />
        </scope>
      </scope>
      <scope classrefs="Variable" doc="Value holder for float variables." ilk="class" name="DoubleVar" />
      <variable citdl="str" name="E" />
      <variable citdl="str" name="END" />
      <variable citdl="str" name="EW" />
      <variable citdl="int" name="EXCEPTION" />
      <variable citdl="str" name="EXTENDED" />
      <scope classrefs="Widget" doc="Entry widget which allows to display simple text." ilk="class" name="Entry" />
      <scope classrefs="object" doc="Container for the properties of an event.  Instances of this type are generated if one of the following events occurs:" ilk="class" name="Event" />
      <variable citdl="int" name="FALSE" />
      <variable citdl="str" name="FIRST" />
      <variable citdl="str" name="FLAT" />
      <scope classrefs="Widget" doc="Frame widget which may contain other widgets and can have a 3D border." ilk="class" name="Frame" />
      <variable citdl="str" name="GROOVE" />
      <scope classrefs="object" doc="Geometry manager Grid.  Base class to use the methods grid_* in every widget." ilk="class" name="Grid" />
      <variable citdl="str" name="HIDDEN" />
      <variable citdl="str" name="HORIZONTAL" />
      <variable citdl="str" name="INSERT" />
      <variable citdl="str" name="INSIDE" />
      <scope classrefs="object" doc="Base class for images." ilk="class" name="Image" />
      <scope classrefs="Variable" doc="Value holder for integer variables." ilk="class" name="IntVar" />
      <variable citdl="str" name="LAST" />
      <variable citdl="str" name="LEFT" />
      <scope classrefs="Widget" doc="Label widget which can display text and bitmaps." ilk="class" name="Label" />
      <scope classrefs="Widget" doc="labelframe widget." ilk="class" name="LabelFrame" />
      <scope classrefs="Widget" doc="Listbox widget which can display a list of strings." ilk="class" name="Listbox" />
      <variable citdl="str" name="MITER" />
      <variable citdl="str" name="MOVETO" />
      <variable citdl="str" name="MULTIPLE" />
      <scope classrefs="Widget" doc="Menu widget which allows to display menu bars, pull-down menus and pop-up menus." ilk="class" name="Menu" />
      <scope classrefs="Widget" doc="Menubutton widget, obsolete since Tk8.0." ilk="class" name="Menubutton" />
      <scope classrefs="Widget" doc="Message widget to display multiline text. Obsolete since Label does it too." ilk="class" name="Message" />
      <scope classrefs="object" doc="Internal class.  Base class which defines methods common for interior widgets." ilk="class" name="Misc" />
      <variable citdl="str" name="N" />
      <variable citdl="str" name="NE" />
      <variable citdl="int" name="NO" />
      <variable citdl="str" name="NONE" />
      <variable citdl="str" name="NORMAL" />
      <variable citdl="str" name="NS" />
      <variable citdl="str" name="NSEW" />
      <variable citdl="str" name="NUMERIC" />
      <variable citdl="str" name="NW" />
      <scope doc="Inhibit setting of default root window." ilk="function" name="NoDefaultRoot" signature="NoDefaultRoot()" />
      <variable citdl="int" name="OFF" />
      <variable citdl="int" name="ON" />
      <variable citdl="str" name="OUTSIDE" />
      <scope classrefs="Menubutton" doc="OptionMenu which allows the user to select a value from a menu." ilk="class" name="OptionMenu" />
      <variable citdl="str" name="PAGES" />
      <variable citdl="str" name="PIESLICE" />
      <variable citdl="str" name="PROJECTING" />
      <scope classrefs="object" doc="Geometry manager Pack.  Base class to use the methods pack_* in every widget." ilk="class" name="Pack" />
      <scope classrefs="Widget" doc="panedwindow widget." ilk="class" name="PanedWindow" />
      <scope classrefs="Image" doc="Widget which can display colored images in GIF, PPM/PGM format." ilk="class" name="PhotoImage" />
      <scope classrefs="object" doc="Geometry manager Place.  Base class to use the methods place_* in every widget." ilk="class" name="Place" />
      <variable citdl="str" name="RADIOBUTTON" />
      <variable citdl="str" name="RAISED" />
      <variable citdl="int" name="READABLE" />
      <variable citdl="str" name="RIDGE" />
      <variable citdl="str" name="RIGHT" />
      <variable citdl="str" name="ROUND" />
      <scope classrefs="Widget" doc="Radiobutton widget which shows only one of several buttons in on-state." ilk="class" name="Radiobutton" />
      <variable citdl="str" name="S" />
      <variable citdl="str" name="SCROLL" />
      <variable citdl="str" name="SE" />
      <variable citdl="str" name="SEL" />
      <variable citdl="str" name="SEL_FIRST" />
      <variable citdl="str" name="SEL_LAST" />
      <variable citdl="str" name="SEPARATOR" />
      <variable citdl="str" name="SINGLE" />
      <variable citdl="str" name="SOLID" />
      <variable citdl="str" name="SUNKEN" />
      <variable citdl="str" name="SW" />
      <scope classrefs="Widget" doc="Scale widget which can display a numerical scale." ilk="class" name="Scale" />
      <scope classrefs="Widget" doc="Scrollbar widget which displays a slider at a certain position." ilk="class" name="Scrollbar" />
      <scope classrefs="object" ilk="class" line="31" lineend="111" name="SimpleDialog">
        <scope ilk="function" line="103" lineend="107" name="wm_delete_window" signature="wm_delete_window()">
          <variable citdl="SimpleDialog" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="49" name="default" />
        <variable attributes="__instancevar__" citdl="Frame()" line="45" name="frame" />
        <scope ilk="function" line="97" lineend="101" name="return_event" signature="return_event(event)">
          <variable citdl="SimpleDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="event" />
        </scope>
        <scope attributes="protected" ilk="function" line="61" lineend="88" name="_set_transient" signature="_set_transient(master, relx=0.5, rely=0.29999999999999999)">
          <variable citdl="SimpleDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="float" ilk="argument" name="relx" />
          <variable citdl="float" ilk="argument" name="rely" />
          <variable citdl="Toplevel()" line="62" name="widget" />
          <variable citdl="master.winfo_width()" line="67" name="m_width" />
          <variable citdl="master.winfo_height()" line="68" name="m_height" />
          <variable citdl="int" line="69" name="m_x" />
          <variable citdl="master.winfo_rooty()" line="70" name="m_y" />
          <variable citdl="widget.winfo_reqwidth()" line="75" name="w_width" />
          <variable citdl="widget.winfo_reqheight()" line="76" name="w_height" />
          <variable citdl="widget.winfo_reqwidth()" line="77" name="x" />
          <variable citdl="widget.winfo_reqheight()" line="78" name="y" />
        </scope>
        <scope ilk="function" line="90" lineend="95" name="go" signature="go()">
          <variable citdl="SimpleDialog" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="47" name="num" />
        <scope ilk="function" line="109" lineend="111" name="done" signature="done(num)">
          <variable citdl="SimpleDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="num" />
        </scope>
        <variable attributes="__instancevar__" line="48" name="cancel" />
        <variable attributes="__instancevar__" citdl="Message()" line="43" name="message" />
        <variable attributes="__instancevar__" citdl="Toplevel()" line="37" name="root" />
        <scope attributes="__ctor__" ilk="function" line="33" lineend="59" name="__init__" signature="SimpleDialog(master, text=&apos;&apos;, buttons=[], default=None, cancel=None, title=None, class_=None)">
          <variable citdl="SimpleDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="str" ilk="argument" name="text" />
          <variable citdl="list" ilk="argument" name="buttons" />
          <variable ilk="argument" name="default" />
          <variable ilk="argument" name="cancel" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="class_" />
          <variable line="52" name="s" />
          <variable citdl="Button()" line="53" name="b" />
        </scope>
      </scope>
      <scope classrefs="Widget" doc="spinbox widget." ilk="class" name="Spinbox" />
      <scope classrefs="Variable" doc="Value holder for strings variables." ilk="class" name="StringVar" />
      <scope classrefs="Button" ilk="class" name="Studbutton" />
      <variable citdl="str" name="TOP" />
      <variable citdl="int" name="TRUE" />
      <scope ilk="function" name="Tcl" signature="Tcl(screenName=None, baseName=None, className=&apos;Tk&apos;, useTk=0)" />
      <scope classrefs="Exception" ilk="class" name="TclError" />
      <variable citdl="float" name="TclVersion" />
      <scope classrefs="Widget" doc="Text widget which can display text in various forms." ilk="class" name="Text" />
      <scope classrefs="Misc Wm" doc="Toplevel widget of Tk which represents mostly the main window of an appliation. It has an associated Tcl interpreter." ilk="class" name="Tk" />
      <variable citdl="float" name="TkVersion" />
      <scope classrefs="BaseWidget Wm" doc="Toplevel widget, e.g. for dialogs." ilk="class" name="Toplevel" />
      <scope classrefs="Button" ilk="class" name="Tributton" />
      <variable citdl="str" name="UNDERLINE" />
      <variable citdl="str" name="UNITS" />
      <variable citdl="str" name="VERTICAL" />
      <scope classrefs="object" doc="Class to define value holders for e.g. buttons.  Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations" ilk="class" name="Variable" />
      <variable citdl="str" name="W" />
      <variable citdl="str" name="WORD" />
      <variable citdl="int" name="WRITABLE" />
      <scope classrefs="BaseWidget Pack Place Grid Form" doc="Internal class.  Base class for a widget which can be positioned with the geometry managers" ilk="class" name="Widget" />
      <scope classrefs="object" doc="Provides functions for the communication with the window manager." ilk="class" name="Wm" />
      <variable citdl="str" name="X" />
      <variable citdl="str" name="Y" />
      <variable citdl="int" name="YES" />
      <scope doc="get a float from the user" ilk="function" line="349" lineend="361" name="askfloat" returns="d.result" signature="askfloat(title, prompt, **kw)">
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable ilk="argument" name="prompt" />
        <variable citdl="_QueryFloat" line="360" name="d" />
        <variable ilk="argument" name="title" />
      </scope>
      <scope doc="get an integer from the user" ilk="function" line="330" lineend="342" name="askinteger" returns="d.result" signature="askinteger(title, prompt, **kw)">
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable ilk="argument" name="prompt" />
        <variable citdl="_QueryInteger" line="341" name="d" />
        <variable ilk="argument" name="title" />
      </scope>
      <scope doc="get a string from the user" ilk="function" line="381" lineend="393" name="askstring" returns="d.result" signature="askstring(title, prompt, **kw)">
        <variable attributes="kwargs" ilk="argument" name="kw" />
        <variable ilk="argument" name="prompt" />
        <variable citdl="_QueryString" line="392" name="d" />
        <variable ilk="argument" name="title" />
      </scope>
      <import module="commondialog" />
      <import module="constants" />
      <import module="dialog" />
      <import module="dnd" />
      <import module="filedialog" />
      <import module="font" />
      <scope doc="Convert true and false to integer values 1 and 0." ilk="function" name="getboolean" signature="getboolean(s)" />
      <scope classrefs="object" doc="float(x) -&gt; floating point number  Convert a string or number to a floating point number, if possible." ilk="class" name="getdouble" />
      <scope classrefs="object" doc="int(x[, base]) -&gt; integer  Convert a string or number to an integer, if possible.  A floating" ilk="class" name="getint" />
      <scope ilk="function" name="image_names" signature="image_names()" />
      <scope ilk="function" name="image_types" signature="image_types()" />
      <scope doc="Run the main loop of Tcl." ilk="function" name="mainloop" signature="mainloop(n=0)" />
      <import module="messagebox" />
      <import module="scrolledtext" />
      <import module="sys" />
      <import module="tix" />
      <import module="tkinter" />
      <import module="ttk" />
      <variable citdl="int" name="wantobjects" />
      <scope attributes="__hidden__" ilk="function" line="399" lineend="421" name="test" signature="test()">
        <variable citdl="Tk()" line="400" name="root" />
        <scope ilk="function" line="401" lineend="416" name="doit" signature="doit(root=root)">
          <variable citdl="Tk()" ilk="argument" name="root" />
          <variable citdl="SimpleDialog" line="402" name="d" />
        </scope>
        <variable citdl="Button()" line="417" name="t" />
        <variable citdl="Button()" line="419" name="q" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="Dialog" ilk="class" line="255" lineend="322" name="_QueryDialog">
        <scope attributes="__ctor__" ilk="function" line="257" lineend="271" name="__init__" signature="_QueryDialog(title, prompt, initialvalue=None, minvalue=None, maxvalue=None, parent=None)">
          <variable citdl="_QueryDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="title" />
          <variable ilk="argument" name="prompt" />
          <variable ilk="argument" name="initialvalue" />
          <variable ilk="argument" name="minvalue" />
          <variable ilk="argument" name="maxvalue" />
          <variable citdl="tkinter._default_root" ilk="argument" name="parent" />
        </scope>
        <variable attributes="__instancevar__" line="265" name="prompt" />
        <variable attributes="__instancevar__" line="266" name="minvalue" />
        <variable attributes="__instancevar__" line="267" name="maxvalue" />
        <variable attributes="__instancevar__" line="269" name="initialvalue" />
        <scope ilk="function" line="273" lineend="275" name="destroy" signature="destroy()">
          <variable citdl="_QueryDialog" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="Entry()" line="274" name="entry" />
        <scope ilk="function" line="277" lineend="289" name="body" returns="Entry()" signature="body(master)">
          <variable citdl="_QueryDialog" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="Label()" line="279" name="w" />
        </scope>
        <scope ilk="function" line="291" lineend="322" name="validate" returns="int" signature="validate()">
          <variable citdl="_QueryDialog" ilk="argument" name="self" />
          <variable citdl="self.getresult()" line="293" name="result" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.getresult()" line="320" name="result" />
      </scope>
      <scope attributes="protected __hidden__" classrefs="_QueryDialog" ilk="class" line="325" lineend="328" name="_QueryInteger">
        <variable citdl="str" line="326" name="errormessage" />
        <scope ilk="function" line="327" lineend="328" name="getresult" returns="int()" signature="getresult()">
          <variable citdl="_QueryInteger" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="_QueryDialog" ilk="class" line="344" lineend="347" name="_QueryFloat">
        <variable citdl="str" line="345" name="errormessage" />
        <scope ilk="function" line="346" lineend="347" name="getresult" returns="float()" signature="getresult()">
          <variable citdl="_QueryFloat" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="_QueryDialog" ilk="class" line="363" lineend="379" name="_QueryString">
        <scope attributes="__ctor__" ilk="function" line="364" lineend="370" name="__init__" signature="_QueryString(*args, **kw)">
          <variable citdl="_QueryString" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
        <variable attributes="private __instancevar__" line="366" name="__show" />
        <scope ilk="function" line="372" lineend="376" name="body" returns="_QueryDialog.body()" signature="body(master)">
          <variable citdl="_QueryString" ilk="argument" name="self" />
          <variable ilk="argument" name="master" />
          <variable citdl="_QueryDialog.body()" line="373" name="entry" />
        </scope>
        <scope ilk="function" line="378" lineend="379" name="getresult" returns="self.entry.get()" signature="getresult()">
          <variable citdl="_QueryString" ilk="argument" name="self" />
        </scope>
      </scope>
    </scope>
    <scope ilk="blob" lang="Python3" name="msilib.text">
      <variable citdl="list" line="3" name="ActionText" />
      <variable citdl="list" line="76" name="UIText" />
      <variable citdl="str" line="1" name="dirname" />
      <import module="msilib" />
      <import module="os" />
      <variable citdl="list" line="129" name="tables" />
    </scope>
    <scope doc="distutils.cygwinccompiler  Provides the CygwinCCompiler class, a subclass of UnixCCompiler that" ilk="blob" lang="Python3" name="distutils.cygwinccompiler">
      <variable citdl="str" line="319" name="CONFIG_H_NOTOK" />
      <variable citdl="str" line="318" name="CONFIG_H_OK" />
      <variable citdl="str" line="320" name="CONFIG_H_UNCERTAIN" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="UnixCCompiler" doc="Handles the Cygwin port of the GNU C compiler to Windows." ilk="class" line="87" lineend="270" name="CygwinCCompiler">
        <variable citdl="str" line="91" name="obj_extension" />
        <variable citdl="str" line="94" name="static_lib_format" />
        <variable attributes="__instancevar__" citdl="str" line="125" name="linker_dll" />
        <variable citdl="str" line="92" name="static_lib_extension" />
        <variable citdl="str" line="95" name="shared_lib_format" />
        <scope attributes="__ctor__" ilk="function" line="98" lineend="155" name="__init__" signature="CygwinCCompiler(verbose=0, dry_run=0, force=0)">
          <variable citdl="CygwinCCompiler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="verbose" />
          <variable citdl="int" ilk="argument" name="dry_run" />
          <variable citdl="int" ilk="argument" name="force" />
          <variable citdl="str" line="132" name="shared_option" />
        </scope>
        <variable citdl="str" line="90" name="compiler_type" />
        <scope doc="Link the objects." ilk="function" line="172" lineend="246" name="link" signature="link(target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)">
          <variable citdl="CygwinCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="target_desc" />
          <variable citdl="copy.copy()" ilk="argument" name="objects" />
          <variable ilk="argument" name="output_filename" />
          <variable ilk="argument" name="output_dir" />
          <variable citdl="copy.copy()" ilk="argument" name="libraries" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable ilk="argument" name="export_symbols" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable citdl="copy.copy()" ilk="argument" name="extra_preargs" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="build_temp" />
          <variable ilk="argument" name="target_lang" />
          <variable citdl="os.path.dirname()" line="197" name="temp_dir" />
          <variable citdl="os.path.join()" line="203" name="def_file" />
          <variable citdl="os.path.join()" line="204" name="lib_file" />
          <variable citdl="list" line="207" name="contents" />
        </scope>
        <variable citdl="str" line="93" name="shared_lib_extension" />
        <scope attributes="protected" doc="Compiles the source by spawing GCC and windres if needed." ilk="function" line="157" lineend="170" name="_compile" signature="_compile(obj, src, ext, cc_args, extra_postargs, pp_opts)">
          <variable citdl="CygwinCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="src" />
          <variable ilk="argument" name="ext" />
          <variable ilk="argument" name="cc_args" />
          <variable ilk="argument" name="extra_postargs" />
          <variable ilk="argument" name="pp_opts" />
        </scope>
        <variable citdl="str" line="96" name="exe_extension" />
        <scope doc="Adds supports for rc and res files." ilk="function" line="250" lineend="270" name="object_filenames" returns="list" signature="object_filenames(source_filenames, strip_dir=0, output_dir=&apos;&apos;)">
          <variable citdl="CygwinCCompiler" ilk="argument" name="self" />
          <variable ilk="argument" name="source_filenames" />
          <variable citdl="int" ilk="argument" name="strip_dir" />
          <variable citdl="str" ilk="argument" name="output_dir" />
          <variable citdl="list" line="254" name="obj_names" />
          <variable citdl="os.path.basename()" line="262" name="base" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="149" name="dll_libraries" />
      </scope>
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="Version" doc="Version numbering for anarchists and software realists. Implements the standard interface for version number classes as described above.  A version number consists of a series of numbers," ilk="class" name="LooseVersion" />
      <scope classrefs="CygwinCCompiler" doc="Handles the Mingw32 port of the GNU C compiler to Windows." ilk="class" line="273" lineend="312" name="Mingw32CCompiler">
        <variable attributes="__instancevar__" citdl="list" line="308" name="dll_libraries" />
        <scope attributes="__ctor__" ilk="function" line="278" lineend="312" name="__init__" signature="Mingw32CCompiler(verbose=0, dry_run=0, force=0)">
          <variable citdl="Mingw32CCompiler" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="verbose" />
          <variable citdl="int" ilk="argument" name="dry_run" />
          <variable citdl="int" ilk="argument" name="force" />
          <variable citdl="str" line="285" name="shared_option" />
          <variable citdl="str" line="292" name="entry_point" />
        </scope>
        <variable citdl="str" line="276" name="compiler_type" />
      </scope>
      <variable citdl="int" name="PIPE" />
      <scope classrefs="object" ilk="class" name="Popen" />
      <variable citdl="SRE_Pattern" line="362" name="RE_VERSION" />
      <scope classrefs="CCompiler" ilk="class" name="UnixCCompiler" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" line="48" name="__revision__" />
      <scope doc="Check if the current Python installation appears amenable to building extensions with GCC." ilk="function" line="322" lineend="360" name="check_config_h" returns="tuple" signature="check_config_h()">
        <variable citdl="sysconfig.get_config_h_filename()" line="351" name="fn" />
      </scope>
      <import module="copy" />
      <scope doc="Tries to find &apos;executable&apos; in the directories listed in &apos;path&apos;." ilk="function" name="find_executable" signature="find_executable(executable, path=None)" />
      <scope doc="Generate linker options for searching library directories and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at least two types of compilers: the typical Unix compiler and Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <scope doc="Include the appropriate MSVC runtime library if Python was built with MSVC 7.0 or later." ilk="function" line="64" lineend="84" name="get_msvcr" returns="list" signature="get_msvcr()">
        <variable citdl="list" line="70" name="msc_ver" />
        <variable citdl="sys.version.find()" line="68" name="msc_pos" />
      </scope>
      <scope doc="Try to find out the versions of gcc, ld and dllwrap." ilk="function" line="385" lineend="391" name="get_versions" returns="tuple()" signature="get_versions()">
        <variable citdl="list" line="390" name="commands" />
      </scope>
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
      <scope doc="Create a file with the specified name and write &apos;contents&apos; (a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
      <scope attributes="protected __hidden__" doc="Find the version of an executable by running `cmd` in the shell." ilk="function" line="364" lineend="383" name="_find_exe_version" returns="LooseVersion()" signature="_find_exe_version(cmd)">
        <variable ilk="argument" name="cmd" />
        <variable line="370" name="executable" />
        <variable line="373" name="out" />
        <variable citdl="out.read()" line="375" name="out_string" />
        <variable citdl="RE_VERSION.search()" line="378" name="result" />
      </scope>
    </scope>
    <scope doc="zipimport provides support for importing Python modules from Zip archives.  This module exports three objects:" ilk="blob" lang="Python3" name="zipimport">
      <scope classrefs="ImportError" ilk="class" name="ZipImportError" />
      <scope classrefs="object" doc="zipimporter(archivepath) -&gt; zipimporter object  Create a new zipimporter instance. &apos;archivepath&apos; must be a path to" ilk="class" name="zipimporter" />
    </scope>
    <scope doc="distutils.command.install_scripts  Implements the Distutils &apos;install_scripts&apos; command, for installing" ilk="blob" lang="Python3" name="distutils.command.install_scripts">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <variable citdl="int" name="ST_MODE" />
      <variable citdl="str" name="__revision__" />
      <scope classrefs="Command" ilk="class" name="install_scripts" />
      <import module="log" />
      <import module="os" />
    </scope>
    <scope doc="# This directory is a Python package." ilk="blob" lang="Python3" name="xmlrpc">
      <import module="client" />
      <import module="server" />
    </scope>
    <scope doc="# Support for the API of the multiprocessing package using threads # # multiprocessing/dummy/__init__.py" ilk="blob" lang="Python3" name="multiprocessing.dummy">
      <scope ilk="function" line="105" lineend="106" name="Array" returns="array.array()" signature="Array(typecode, sequence, lock=True)">
        <variable citdl="True" ilk="argument" name="lock" />
        <variable ilk="argument" name="sequence" />
        <variable ilk="argument" name="typecode" />
      </scope>
      <scope ilk="function" name="BoundedSemaphore" signature="BoundedSemaphore(*args, **kwargs)" />
      <scope classrefs="_Condition" ilk="class" line="61" lineend="66" name="Condition">
        <variable citdl="threading._Condition.notify_all.__func__" line="64" name="notify_all" />
      </scope>
      <scope classrefs="Thread" ilk="class" line="35" lineend="55" name="DummyProcess">
        <scope attributes="__hidden__" ilk="function" line="51" lineend="55" name="exitcode (property getter)" returns="int" signature="exitcode (property getter)()">
          <variable citdl="DummyProcess" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="weakref.WeakKeyDictionary()" line="40" name="_children" />
        <variable attributes="protected __instancevar__" line="39" name="_pid" />
        <variable attributes="protected __instancevar__" citdl="True" line="41" name="_start_called" />
        <variable attributes="protected __instancevar__" citdl="current_process()" line="42" name="_parent" />
        <scope ilk="function" line="44" lineend="48" name="start" signature="start()">
          <variable citdl="DummyProcess" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="37" lineend="42" name="__init__" signature="DummyProcess(group=None, target=None, name=None, args=(), kwargs={})">
          <variable citdl="DummyProcess" ilk="argument" name="self" />
          <variable ilk="argument" name="group" />
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="name" />
          <variable citdl="tuple" ilk="argument" name="args" />
          <variable citdl="dict" ilk="argument" name="kwargs" />
        </scope>
        <variable attributes="property" citdl="int" line="51" name="exitcode" />
      </scope>
      <scope ilk="function" name="Event" signature="Event(*args, **kwargs)" />
      <scope classrefs="object" doc="Create a queue object with a given maximum size.  If maxsize is &lt;= 0, the queue size is infinite." ilk="class" line="130" name="JoinableQueue" />
      <scope doc="(allocate() is an obsolete synonym)" ilk="function" name="Lock" signature="allocate_lock() -&gt; lock object" />
      <scope ilk="function" line="120" lineend="121" name="Manager" signature="Manager()" />
      <scope classrefs="object" ilk="class" line="90" lineend="100" name="Namespace">
        <scope ilk="function" line="93" lineend="100" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Namespace" ilk="argument" name="self" />
          <variable citdl="list()" line="94" name="items" />
          <variable citdl="list" line="95" name="temp" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="91" lineend="92" name="__init__" signature="Namespace(**kwds)">
          <variable citdl="Namespace" ilk="argument" name="self" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
      </scope>
      <scope ilk="function" name="Pipe" signature="Pipe(duplex=True)" />
      <scope ilk="function" line="126" lineend="128" name="Pool" returns="ThreadPool()" signature="Pool(processes=None, initializer=None, initargs=())">
        <variable citdl="tuple" ilk="argument" name="initargs" />
        <variable ilk="argument" name="processes" />
        <variable ilk="argument" name="initializer" />
      </scope>
      <scope classrefs="Thread" ilk="class" line="72" name="Process" />
      <scope classrefs="object" doc="Create a queue object with a given maximum size.  If maxsize is &lt;= 0, the queue size is infinite." ilk="class" name="Queue" />
      <scope ilk="function" name="RLock" signature="RLock(*args, **kwargs)" />
      <scope ilk="function" name="Semaphore" signature="Semaphore(*args, **kwargs)" />
      <scope classrefs="ProcessError" ilk="class" name="TimeoutError" />
      <scope classrefs="object" ilk="class" line="108" lineend="118" name="Value">
        <variable attributes="protected __instancevar__" line="110" name="_typecode" />
        <variable citdl="property()" line="116" name="value" />
        <variable attributes="protected __instancevar__" line="111" name="_value" />
        <scope attributes="protected" ilk="function" line="112" lineend="113" name="_get" signature="_get()">
          <variable citdl="Value" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="117" lineend="118" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="Value" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="114" lineend="115" name="_set" signature="_set(value)">
          <variable citdl="Value" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="109" lineend="111" name="__init__" signature="Value(typecode, value, lock=True)">
          <variable citdl="Value" ilk="argument" name="self" />
          <variable ilk="argument" name="typecode" />
          <variable ilk="argument" name="value" />
          <variable citdl="True" ilk="argument" name="lock" />
        </scope>
      </scope>
      <variable citdl="list" line="9" name="__all__" />
      <scope ilk="function" line="76" lineend="81" name="active_children" returns="list()" signature="active_children()">
        <variable line="77" name="children" />
      </scope>
      <import module="array" />
      <import module="connection" />
      <scope doc="Returns the number of CPUs in the system" ilk="function" name="cpu_count" signature="cpu_count()" />
      <scope ilk="function" line="73" name="current_process" signature="current_process()" />
      <scope classrefs="object" doc="dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object&apos;s     (key, value) pairs" ilk="class" line="102" name="dict" />
      <scope ilk="function" line="83" lineend="84" name="freeze_support" signature="freeze_support()" />
      <import module="itertools" />
      <scope classrefs="object" doc="list() -&gt; new empty list list(iterable) -&gt; new list initialized from iterable&apos;s items" ilk="class" line="103" name="list" />
      <scope ilk="function" line="123" lineend="124" name="shutdown" signature="shutdown()" />
      <import module="sys" />
      <import module="threading" />
      <import module="weakref" />
    </scope>
    <scope doc="Miscellaneous WSGI-related Utilities" ilk="blob" lang="Python3" name="wsgiref.util">
      <scope classrefs="object" doc="Wrapper to convert file-like objects to iterables" ilk="class" line="11" lineend="33" name="FileWrapper">
        <scope ilk="function" line="20" lineend="24" name="__getitem__" returns="self.filelike.read()" signature="__getitem__(key)">
          <variable citdl="FileWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="self.filelike.read()" line="21" name="data" />
        </scope>
        <scope ilk="function" line="29" lineend="33" name="__next__" returns="self.filelike.read()" signature="__next__()">
          <variable citdl="FileWrapper" ilk="argument" name="self" />
          <variable citdl="self.filelike.read()" line="30" name="data" />
        </scope>
        <scope ilk="function" line="26" lineend="27" name="__iter__" returns="FileWrapper" signature="__iter__()">
          <variable citdl="FileWrapper" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="16" name="blksize" />
        <variable attributes="__instancevar__" line="15" name="filelike" />
        <variable attributes="__instancevar__" citdl="filelike.close" line="18" name="close" />
        <scope attributes="__ctor__" ilk="function" line="14" lineend="18" name="__init__" signature="FileWrapper(filelike, blksize=8192)">
          <variable citdl="FileWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="filelike" />
          <variable citdl="int" ilk="argument" name="blksize" />
        </scope>
      </scope>
      <variable citdl="list" line="5" name="__all__" />
      <scope doc="Return the application&apos;s base URI (no PATH_INFO or QUERY_STRING)" ilk="function" line="50" lineend="68" name="application_uri" returns="str" signature="application_uri(environ)">
        <variable citdl="str" line="52" name="url" />
        <variable ilk="argument" name="environ" />
      </scope>
      <scope doc="Return a guess for whether &apos;wsgi.url_scheme&apos; should be &apos;http&apos; or &apos;https&apos;" ilk="function" line="42" lineend="48" name="guess_scheme" returns="str" signature="guess_scheme(environ)">
        <variable ilk="argument" name="environ" />
      </scope>
      <scope doc="Return true if &apos;header_name&apos; is an HTTP/1.1 &quot;Hop-by-Hop&quot; header" ilk="function" line="171" lineend="173" name="is_hop_by_hop" returns="_hoppish()" signature="is_hop_by_hop(header_name)">
        <variable ilk="argument" name="header_name" />
      </scope>
      <import module="posixpath" />
      <scope doc="Return the full request URI, optionally including the query string" ilk="function" line="70" lineend="81" name="request_uri" returns="application_uri()" signature="request_uri(environ, include_query=True)">
        <variable citdl="True" ilk="argument" name="include_query" />
        <variable citdl="application_uri()" line="72" name="url" />
        <variable ilk="argument" name="environ" />
        <variable citdl="quote()" line="74" name="path_info" />
      </scope>
      <scope doc="Update &apos;environ&apos; with trivial defaults for testing purposes" ilk="function" line="124" lineend="160" name="setup_testing_defaults" signature="setup_testing_defaults(environ)">
        <variable ilk="argument" name="environ" />
      </scope>
      <scope doc="Shift a name from PATH_INFO to SCRIPT_NAME, returning it" ilk="function" line="83" lineend="122" name="shift_path_info" signature="shift_path_info(environ)">
        <variable citdl="path_info.split()" line="100" name="path_parts" />
        <variable ilk="argument" name="environ" />
        <variable citdl="environ.get()" line="96" name="path_info" />
        <variable citdl="environ.get()" line="105" name="script_name" />
        <variable line="102" name="name" />
      </scope>
      <variable attributes="protected __hidden__" citdl="{}.__contains__" line="165" name="_hoppish" />
    </scope>
    <scope doc="Text wrapping and filling." ilk="blob" lang="Python3" name="textwrap">
      <scope classrefs="object" doc="Object for wrapping/filling text.  The public interface consists of the wrap() and fill() methods; the other methods are just there for subclasses to override in order to tweak the default behaviour." ilk="class" line="24" lineend="302" name="TextWrapper">
        <scope attributes="protected" doc="Correct for sentence endings buried in &apos;chunks&apos;. Eg." ilk="function" line="156" lineend="172" name="_fix_sentence_endings" signature="_fix_sentence_endings(chunks : [string])">
          <variable citdl="TextWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="chunks" />
          <variable citdl="int" line="165" name="i" />
          <variable citdl="self.sentence_end_re.search" line="166" name="patsearch" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="113" name="drop_whitespace" />
        <variable citdl="re.compile()" line="77" name="wordsep_re" />
        <variable attributes="__instancevar__" citdl="str" line="108" name="subsequent_indent" />
        <scope doc="Reformat the single paragraph in &apos;text&apos; so it fits in lines of no more than &apos;self.width&apos; columns, and return a list of wrapped lines." ilk="function" line="280" lineend="293" name="wrap" returns="TextWrapper._wrap_chunks()" signature="wrap(text : string) -&gt; [string]">
          <variable citdl="TextWrapper" ilk="argument" name="self" />
          <variable citdl="_munge_whitespace()" ilk="argument" name="text" />
          <variable citdl="_split()" line="290" name="chunks" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="114" name="break_on_hyphens" />
        <scope attributes="__ctor__" ilk="function" line="96" lineend="114" name="__init__" signature="TextWrapper(width=70, initial_indent=&apos;&apos;, subsequent_indent=&apos;&apos;, expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True)">
          <variable citdl="TextWrapper" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="width" />
          <variable citdl="str" ilk="argument" name="initial_indent" />
          <variable citdl="str" ilk="argument" name="subsequent_indent" />
          <variable citdl="True" ilk="argument" name="expand_tabs" />
          <variable citdl="True" ilk="argument" name="replace_whitespace" />
          <variable citdl="False" ilk="argument" name="fix_sentence_endings" />
          <variable citdl="True" ilk="argument" name="break_long_words" />
          <variable citdl="True" ilk="argument" name="drop_whitespace" />
          <variable citdl="True" ilk="argument" name="break_on_hyphens" />
        </scope>
        <scope doc="Reformat the single paragraph in &apos;text&apos; to fit in lines of no more than &apos;self.width&apos; columns, and return a new string containing the entire wrapped paragraph." ilk="function" line="295" lineend="302" name="fill" returns="str.join()" signature="fill(text : string) -&gt; string">
          <variable citdl="TextWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="109" name="expand_tabs" />
        <scope attributes="protected" doc="_handle_long_word(chunks : [string], cur_line : [string], cur_len : int, width : int)" ilk="function" line="174" lineend="199" name="_handle_long_word" signature="_handle_long_word(reversed_chunks, cur_line, cur_len, width)">
          <variable citdl="TextWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="reversed_chunks" />
          <variable ilk="argument" name="cur_line" />
          <variable ilk="argument" name="cur_len" />
          <variable ilk="argument" name="width" />
          <variable citdl="int" line="185" name="space_left" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="106" name="width" />
        <variable citdl="ord()" line="67" name="uspace" />
        <variable citdl="re.compile()" line="86" name="wordsep_simple_re" />
        <variable attributes="__instancevar__" citdl="str" line="107" name="initial_indent" />
        <variable attributes="__instancevar__" citdl="True" line="112" name="break_long_words" />
        <scope attributes="protected" doc="Munge whitespace in text: expand tabs and convert all other whitespace characters to spaces." ilk="function" line="120" lineend="131" name="_munge_whitespace" returns="text.expandtabs()" signature="_munge_whitespace(text : string) -&gt; string">
          <variable citdl="TextWrapper" ilk="argument" name="self" />
          <variable citdl="text.expandtabs()" ilk="argument" name="text" />
        </scope>
        <variable citdl="re.compile()" line="90" name="sentence_end_re" />
        <scope attributes="protected" doc="Wrap a sequence of text chunks and return a list of lines of length &apos;self.width&apos; or less." ilk="function" line="207" lineend="275" name="_wrap_chunks" returns="list" signature="_wrap_chunks(chunks : [string]) -&gt; [string]">
          <variable citdl="TextWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="chunks" />
          <variable citdl="list" line="220" name="lines" />
          <variable citdl="list" line="232" name="cur_line" />
          <variable citdl="int" line="233" name="cur_len" />
          <variable citdl="str" line="237" name="indent" />
          <variable citdl="len()" line="242" name="width" />
          <variable citdl="len()" line="250" name="l" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="110" name="replace_whitespace" />
        <variable attributes="__instancevar__" citdl="False" line="111" name="fix_sentence_endings" />
        <variable citdl="dict" line="66" name="unicode_whitespace_trans" />
        <scope attributes="protected" doc="Split the text to wrap into indivisible chunks." ilk="function" line="134" lineend="154" name="_split" returns="self.wordsep_simple_re.split()" signature="_split(text : string) -&gt; [string]">
          <variable citdl="TextWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="text" />
          <variable citdl="self.wordsep_simple_re.split()" line="150" name="chunks" />
        </scope>
      </scope>
      <variable citdl="list" line="12" name="__all__" />
      <variable citdl="str" line="8" name="__revision__" />
      <scope doc="Remove any common leading whitespace from every line in `text`." ilk="function" line="338" lineend="384" name="dedent" returns="_whitespace_only_re.sub()" signature="dedent(text)">
        <variable citdl="re.sub()" ilk="argument" name="text" />
        <variable citdl="_leading_whitespace_re.findall()" line="355" name="indents" />
        <variable citdl="indent" line="353" name="margin" />
      </scope>
      <scope doc="Fill a single paragraph of text, returning a new string." ilk="function" line="320" lineend="330" name="fill" returns="w.fill()" signature="fill(text, width=70, **kwargs)">
        <variable ilk="argument" name="text" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
        <variable citdl="TextWrapper" line="329" name="w" />
        <variable citdl="int" ilk="argument" name="width" />
      </scope>
      <import module="re" />
      <import module="string" />
      <scope doc="Wrap a single paragraph of text, returning a list of wrapped lines." ilk="function" line="307" lineend="318" name="wrap" returns="w.wrap()" signature="wrap(text, width=70, **kwargs)">
        <variable ilk="argument" name="text" />
        <variable attributes="kwargs" ilk="argument" name="kwargs" />
        <variable citdl="TextWrapper" line="317" name="w" />
        <variable citdl="int" ilk="argument" name="width" />
      </scope>
      <variable attributes="protected __hidden__" citdl="re.compile()" line="335" name="_whitespace_only_re" />
      <variable attributes="protected __hidden__" citdl="re.compile()" line="336" name="_leading_whitespace_re" />
      <variable attributes="protected __hidden__" citdl="str" line="22" name="_whitespace" />
    </scope>
    <scope doc="Abstract base classes related to import." ilk="blob" lang="Python3" name="importlib.abc">
      <scope classrefs="object" doc="Abstract base class for import finders." ilk="class" name="Finder" />
      <scope classrefs="Loader" doc="Abstract base class for loaders which support inspection about the modules they can load. " ilk="class" name="InspectLoader" />
      <scope classrefs="object" doc="Abstract base class for import loaders." ilk="class" name="Loader" />
      <scope classrefs="PyLoader ResourceLoader InspectLoader" doc="Abstract base class to assist in loading source code by requiring only back-end storage methods to be implemented. " ilk="class" name="PyLoader" />
      <scope classrefs="PyPycLoader PyLoader" doc="Abstract base class to assist in loading source and bytecode by requiring only back-end storage methods to be implemented. " ilk="class" name="PyPycLoader" />
      <scope classrefs="Loader" doc="Abstract base class for loaders which can return data from their back-end storage. " ilk="class" name="ResourceLoader" />
      <import module="_bootstrap" />
      <import module="abc" />
      <import module="machinery" />
      <import module="types" />
    </scope>
    <scope doc="This module provides mechanisms to use signal handlers in Python.  Functions:" ilk="blob" lang="Python3" name="signal">
      <variable citdl="int" name="NSIG" />
      <variable citdl="int" name="SIGABRT" />
      <variable citdl="int" name="SIGBREAK" />
      <variable citdl="int" name="SIGFPE" />
      <variable citdl="int" name="SIGILL" />
      <variable citdl="int" name="SIGINT" />
      <variable citdl="int" name="SIGSEGV" />
      <variable citdl="int" name="SIGTERM" />
      <variable citdl="int" name="SIG_DFL" />
      <variable citdl="int" name="SIG_IGN" />
      <scope doc="The default handler for SIGINT installed by Python." ilk="function" name="default_int_handler" signature="default_int_handler(...)" />
      <scope doc="Return the current action for the given signal." ilk="function" name="getsignal" signature="getsignal(sig) -&gt; action" />
      <scope doc="Sets the fd to be written to (with &apos;\0&apos;) when a signal comes in." ilk="function" name="set_wakeup_fd" signature="set_wakeup_fd(fd) -&gt; fd" />
      <scope doc="Set the action for the given signal." ilk="function" name="signal" signature="signal(sig, action) -&gt; action" />
    </scope>
    <scope doc="Stuff to parse Sun and NeXT audio files.  An audio file consists of a header followed by the data.  The structure" ilk="blob" lang="Python3" name="sunau">
      <variable citdl="int" line="115" name="AUDIO_FILE_ENCODING_ADPCM_G721" />
      <variable citdl="int" line="116" name="AUDIO_FILE_ENCODING_ADPCM_G722" />
      <variable citdl="int" line="117" name="AUDIO_FILE_ENCODING_ADPCM_G723_3" />
      <variable citdl="int" line="118" name="AUDIO_FILE_ENCODING_ADPCM_G723_5" />
      <variable citdl="int" line="119" name="AUDIO_FILE_ENCODING_ALAW_8" />
      <variable citdl="int" line="114" name="AUDIO_FILE_ENCODING_DOUBLE" />
      <variable citdl="int" line="113" name="AUDIO_FILE_ENCODING_FLOAT" />
      <variable citdl="int" line="110" name="AUDIO_FILE_ENCODING_LINEAR_16" />
      <variable citdl="int" line="111" name="AUDIO_FILE_ENCODING_LINEAR_24" />
      <variable citdl="int" line="112" name="AUDIO_FILE_ENCODING_LINEAR_32" />
      <variable citdl="int" line="109" name="AUDIO_FILE_ENCODING_LINEAR_8" />
      <variable citdl="int" line="108" name="AUDIO_FILE_ENCODING_MULAW_8" />
      <variable citdl="int" line="107" name="AUDIO_FILE_MAGIC" />
      <variable citdl="int" line="122" name="AUDIO_UNKNOWN_SIZE" />
      <scope classrefs="object" ilk="class" line="151" lineend="278" name="Au_read">
        <variable attributes="protected __instancevar__" citdl="int()" line="177" name="_encoding" />
        <scope ilk="function" line="233" lineend="239" name="getcompname" returns="str" signature="getcompname()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="241" lineend="244" name="getparams" returns="tuple" signature="getparams()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="271" lineend="275" name="setpos" signature="setpos(pos)">
          <variable citdl="Au_read" ilk="argument" name="self" />
          <variable ilk="argument" name="pos" />
        </scope>
        <scope ilk="function" line="206" lineend="207" name="getfp" signature="getfp()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="164" name="_file" />
        <variable attributes="protected __instancevar__" citdl="int" line="183" name="_framesize" />
        <variable attributes="protected __instancevar__" citdl="int()" line="169" name="_hdr_size" />
        <scope ilk="function" line="277" lineend="278" name="close" signature="close()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="153" lineend="157" name="__init__" signature="Au_read(f)">
          <import line="155" module="builtins" />
          <variable citdl="Au_read" ilk="argument" name="self" />
          <variable citdl="builtins.open()" ilk="argument" name="f" />
        </scope>
        <scope ilk="function" line="212" lineend="213" name="getsampwidth" returns="int" signature="getsampwidth()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int()" line="174" name="_data_size" />
        <scope ilk="function" line="225" lineend="231" name="getcomptype" returns="str" signature="getcomptype()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="264" lineend="266" name="rewind" signature="rewind()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="252" lineend="262" name="readframes" returns="self._file.read()" signature="readframes(nframes)">
          <import line="259" module="audioop" />
          <variable citdl="Au_read" ilk="argument" name="self" />
          <variable ilk="argument" name="nframes" />
          <variable citdl="self._file.read()" line="255" name="data" />
        </scope>
        <scope ilk="function" line="163" lineend="204" name="initfp" signature="initfp(file)">
          <variable citdl="Au_read" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable citdl="int()" line="166" name="magic" />
        </scope>
        <scope ilk="function" line="268" lineend="269" name="tell" returns="int" signature="tell()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="182" name="_sampwidth" />
        <scope ilk="function" line="159" lineend="161" name="__del__" signature="__del__()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int()" line="194" name="_framerate" />
        <scope ilk="function" line="218" lineend="223" name="getnframes" returns="int()" signature="getnframes()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int()" line="195" name="_nchannels" />
        <scope ilk="function" line="215" lineend="216" name="getframerate" returns="int()" signature="getframerate()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="165" name="_soundpos" />
        <scope ilk="function" line="246" lineend="247" name="getmarkers" signature="getmarkers()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="249" lineend="250" name="getmark" signature="getmark(id)">
          <variable citdl="Au_read" ilk="argument" name="self" />
          <variable ilk="argument" name="id" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="file.read()" line="198" name="_info" />
        <scope ilk="function" line="209" lineend="210" name="getnchannels" returns="int()" signature="getnchannels()">
          <variable citdl="Au_read" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="280" lineend="459" name="Au_write">
        <variable attributes="protected __instancevar__" citdl="long" line="298" name="_nframes" />
        <scope ilk="function" line="358" lineend="364" name="getcompname" returns="str" signature="getcompname()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="374" lineend="377" name="getparams" returns="tuple" signature="getparams()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="293" name="_file" />
        <scope ilk="function" line="305" lineend="310" name="setnchannels" signature="setnchannels(nchannels)">
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable ilk="argument" name="nchannels" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="297" name="_framesize" />
        <scope attributes="protected" ilk="function" line="420" lineend="453" name="_write_header" signature="_write_header()">
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable citdl="int" line="423" name="encoding" />
          <variable citdl="len()" line="440" name="header_size" />
          <variable citdl="long" line="444" name="length" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="301" name="_datalength" />
        <scope ilk="function" line="398" lineend="404" name="close" signature="close()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="282" lineend="286" name="__init__" signature="Au_write(f)">
          <import line="284" module="builtins" />
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable citdl="builtins.open()" ilk="argument" name="f" />
        </scope>
        <scope ilk="function" line="339" lineend="344" name="setnframes" signature="setnframes(nframes)">
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable ilk="argument" name="nframes" />
        </scope>
        <scope ilk="function" line="382" lineend="390" name="writeframesraw" signature="writeframesraw(data)">
          <import line="386" module="audioop" />
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable citdl="audioop.lin2ulaw()" ilk="argument" name="data" />
          <variable citdl="len()" line="384" name="nframes" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="300" name="_datawritten" />
        <scope ilk="function" line="324" lineend="327" name="getsampwidth" returns="int" signature="getsampwidth()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="355" lineend="356" name="getcomptype" returns="str" signature="getcomptype()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="292" lineend="303" name="initfp" signature="initfp(file)">
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
        <scope ilk="function" line="366" lineend="372" name="setparams" signature="setparams(params)">
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable ilk="argument" name="params" />
        </scope>
        <scope ilk="function" line="379" lineend="380" name="tell" returns="int" signature="tell()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="317" lineend="322" name="setsampwidth" signature="setsampwidth(sampwidth)">
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable ilk="argument" name="sampwidth" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="296" name="_sampwidth" />
        <scope ilk="function" line="288" lineend="290" name="__del__" signature="__del__()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="294" name="_framerate" />
        <scope attributes="protected" ilk="function" line="410" lineend="418" name="_ensure_header_written" signature="_ensure_header_written()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="346" lineend="347" name="getnframes" returns="int" signature="getnframes()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="295" name="_nchannels" />
        <variable attributes="protected __instancevar__" citdl="str" line="303" name="_comptype" />
        <scope attributes="protected" ilk="function" line="455" lineend="459" name="_patchheader" signature="_patchheader()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="334" lineend="337" name="getframerate" returns="int" signature="getframerate()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="329" lineend="332" name="setframerate" signature="setframerate(framerate)">
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable ilk="argument" name="framerate" />
        </scope>
        <scope ilk="function" line="392" lineend="396" name="writeframes" signature="writeframes(data)">
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="299" name="_nframeswritten" />
        <scope ilk="function" line="349" lineend="353" name="setcomptype" signature="setcomptype(type, name)">
          <variable citdl="Au_write" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="str" line="302" name="_info" />
        <scope ilk="function" line="312" lineend="315" name="getnchannels" returns="int" signature="getnchannels()">
          <variable citdl="Au_write" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="Exception" ilk="class" line="131" lineend="132" name="Error" />
      <scope ilk="function" line="461" lineend="472" name="open" returns="Au_read" signature="open(f, mode=None)">
        <variable citdl="f.mode" ilk="argument" name="mode" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="474" name="openfp" signature="openfp(f, mode=None)" />
      <scope attributes="protected __hidden__" ilk="function" line="143" lineend="149" name="_write_u32" signature="_write_u32(file, x)">
        <variable ilk="argument" name="file" />
        <variable citdl="d" ilk="argument" name="x" />
        <variable citdl="list" line="144" name="data" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="134" lineend="141" name="_read_u32" returns="ord()" signature="_read_u32(file)">
        <variable ilk="argument" name="file" />
        <variable citdl="int" line="135" name="x" />
        <variable citdl="file.read()" line="137" name="byte" />
      </scope>
      <variable attributes="protected __hidden__" citdl="list" line="124" name="_simple_encodings" />
    </scope>
    <scope doc="distutils.command.install  Implements the Distutils &apos;install&apos; command." ilk="blob" lang="Python3" name="distutils.command.install">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <variable citdl="NoneType" name="DEBUG" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <variable citdl="bool" line="24" name="HAS_USER_SITE" />
      <variable citdl="dict" line="47" name="INSTALL_SCHEMES" />
      <variable citdl="tuple" line="117" name="SCHEME_KEYS" />
      <variable citdl="str" line="22" name="USER_BASE" />
      <variable citdl="str" line="23" name="USER_SITE" />
      <variable citdl="dict" line="31" name="WINDOWS_SCHEME" />
      <variable citdl="str" line="5" name="__revision__" />
      <scope doc="Return &apos;pathname&apos; with &apos;new_root&apos; prepended." ilk="function" name="change_root" signature="change_root(new_root, pathname)" />
      <scope doc="Return &apos;pathname&apos; as a name that will work on the native filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope doc="With no arguments, return a dictionary of all configuration variables relevant for the current platform." ilk="function" name="get_config_vars" signature="get_config_vars(*args)" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope classrefs="Command" ilk="class" line="120" lineend="690" name="install">
        <variable attributes="__instancevar__" citdl="int" line="242" name="force" />
        <variable attributes="__instancevar__" citdl="int" line="234" name="install_path_file" />
        <scope doc="Change the install direcories pointed by name using root." ilk="function" line="558" lineend="562" name="change_roots" signature="change_roots(*names)">
          <variable citdl="install" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="names" />
          <variable citdl="name" line="561" name="attr" />
        </scope>
        <variable citdl="list" line="686" name="sub_commands" />
        <scope doc="Set `path_file` and `extra_dirs` using `extra_path`." ilk="function" line="528" lineend="556" name="handle_extra_path" signature="handle_extra_path()">
          <variable citdl="install" ilk="argument" name="self" />
          <variable line="538" name="path_file" />
          <variable citdl="str" line="548" name="extra_dirs" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="244" name="warn_dir" />
        <variable attributes="__instancevar__" citdl="os.path.normpath()" line="197" name="prefix" />
        <scope doc="Calls `os.path.expanduser` on install_base, install_platbase and root." ilk="function" line="511" lineend="514" name="expand_basedirs" signature="expand_basedirs()">
          <variable citdl="install" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.distribution.extra_path" line="233" name="extra_path" />
        <variable attributes="__instancevar__" line="199" name="home" />
        <variable citdl="dict" line="190" name="negative_opt" />
        <scope doc="Dumps the list of user options." ilk="function" line="412" lineend="429" name="dump_dirs" signature="dump_dirs(msg)">
          <import line="416" module="distutils.fancy_getopt" symbol="longopt_xlate" />
          <variable citdl="install" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="opt_name.translate()" line="419" name="opt_name" />
          <variable citdl="bool" line="425" name="val" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="331" name="config_vars" />
        <variable citdl="list" line="124" name="user_options" />
        <variable attributes="__instancevar__" citdl="convert_path()" line="556" name="extra_dirs" />
        <scope doc="Initializes options." ilk="function" line="193" lineend="261" name="initialize_options" signature="initialize_options()">
          <variable citdl="install" ilk="argument" name="self" />
        </scope>
        <scope doc="Returns true if the current distribution has any headers to install." ilk="function" line="669" lineend="672" name="has_headers" returns="self.distribution.has_headers()" signature="has_headers()">
          <variable citdl="install" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.path.normpath()" line="198" name="exec_prefix" />
        <scope doc="Sets the install directories by applying the install schemes." ilk="function" line="493" lineend="500" name="select_scheme" signature="select_scheme(name)">
          <variable citdl="install" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable line="496" name="scheme" />
          <variable citdl="key" line="498" name="attrname" />
        </scope>
        <variable attributes="__instancevar__" line="215" name="install_headers" />
        <variable attributes="__instancevar__" line="219" name="install_userbase" />
        <scope attributes="protected" ilk="function" line="502" lineend="509" name="_expand_attrs" signature="_expand_attrs(attrs)">
          <variable citdl="install" ilk="argument" name="self" />
          <variable ilk="argument" name="attrs" />
          <variable citdl="getattr()" line="504" name="val" />
        </scope>
        <scope doc="Create directories under ~." ilk="function" line="564" lineend="572" name="create_home_path" signature="create_home_path()">
          <variable citdl="install" ilk="argument" name="self" />
          <variable citdl="convert_path()" line="568" name="home" />
        </scope>
        <scope doc="Returns true if the current distribution has any Python modules to install." ilk="function" line="663" lineend="667" name="has_lib" returns="self.distribution.has_pure_modules()" signature="has_lib()">
          <variable citdl="install" ilk="argument" name="self" />
        </scope>
        <scope doc="Assembles the outputs of all the sub-commands." ilk="function" line="634" lineend="649" name="get_outputs" returns="list" signature="get_outputs()">
          <variable citdl="install" ilk="argument" name="self" />
          <variable citdl="list" line="636" name="outputs" />
          <variable citdl="self.get_finalized_command()" line="638" name="cmd" />
        </scope>
        <scope doc="Returns true if the current distribution has any data to." ilk="function" line="679" lineend="682" name="has_data" returns="self.distribution.has_data_files()" signature="has_data()">
          <variable citdl="install" ilk="argument" name="self" />
        </scope>
        <scope doc="Finalizes options for posix platforms." ilk="function" line="431" lineend="469" name="finalize_unix" signature="finalize_unix()">
          <variable citdl="install" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="220" name="install_usersite" />
        <variable attributes="__instancevar__" line="217" name="install_scripts" />
        <scope doc="Runs the command." ilk="function" line="576" lineend="618" name="run" signature="run()">
          <variable citdl="install" ilk="argument" name="self" />
          <variable line="582" name="build_plat" />
          <variable citdl="self.get_outputs()" line="599" name="outputs" />
          <variable citdl="len()" line="601" name="root_len" />
          <variable citdl="map()" line="609" name="sys_path" />
          <variable citdl="os.path.normcase()" line="611" name="install_lib" />
        </scope>
        <variable citdl="str" line="122" name="description" />
        <scope doc="Returns the inputs of all the sub-commands" ilk="function" line="651" lineend="659" name="get_inputs" returns="list" signature="get_inputs()">
          <variable citdl="install" ilk="argument" name="self" />
          <variable citdl="list" line="654" name="inputs" />
          <variable citdl="self.get_finalized_command()" line="656" name="cmd" />
        </scope>
        <scope doc="Finalizes options for non-posix platforms" ilk="function" line="471" lineend="491" name="finalize_other" signature="finalize_other()">
          <variable citdl="install" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.path.normpath()" line="206" name="install_platbase" />
        <variable attributes="__instancevar__" line="213" name="install_purelib" />
        <variable attributes="__instancevar__" citdl="int" line="243" name="skip_build" />
        <variable citdl="list" line="183" name="boolean_options" />
        <variable attributes="__instancevar__" citdl="int" line="200" name="user" />
        <variable attributes="__instancevar__" citdl="os.path.normpath()" line="205" name="install_base" />
        <scope doc="Call `convert_path` over `names`." ilk="function" line="522" lineend="526" name="convert_paths" signature="convert_paths(*names)">
          <variable citdl="install" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="names" />
          <variable citdl="name" line="525" name="attr" />
        </scope>
        <scope doc="Creates the .pth file" ilk="function" line="620" lineend="629" name="create_path_file" signature="create_path_file()">
          <variable citdl="install" ilk="argument" name="self" />
          <variable citdl="os.path.join()" line="622" name="filename" />
        </scope>
        <variable attributes="__instancevar__" line="223" name="optimize" />
        <variable attributes="__instancevar__" line="393" name="install_libbase" />
        <variable attributes="__instancevar__" line="218" name="install_data" />
        <scope doc="Calls `os.path.expanduser` on install dirs." ilk="function" line="516" lineend="520" name="expand_dirs" signature="expand_dirs()">
          <variable citdl="install" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="252" name="build_base" />
        <variable attributes="__instancevar__" line="214" name="install_platlib" />
        <scope doc="Returns true if the current distribution has any scripts to." ilk="function" line="674" lineend="677" name="has_scripts" returns="self.distribution.has_scripts()" signature="has_scripts()">
          <variable citdl="install" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="222" name="compile" />
        <variable attributes="__instancevar__" line="261" name="record" />
        <variable attributes="__instancevar__" line="555" name="path_file" />
        <scope doc="Finalizes options." ilk="function" line="270" lineend="407" name="finalize_options" signature="finalize_options()">
          <import line="357" module="pprint" symbol="pprint" />
          <variable citdl="install" ilk="argument" name="self" />
          <variable line="329" name="py_version" />
        </scope>
        <variable attributes="__instancevar__" citdl="os.path.join()" line="216" name="install_lib" />
        <variable attributes="__instancevar__" line="207" name="root" />
        <variable attributes="__instancevar__" line="253" name="build_lib" />
      </scope>
      <import module="log" />
      <import module="os" />
      <scope doc="Perform shell/Perl-style variable substitution on &apos;string&apos;." ilk="function" name="subst_vars" signature="subst_vars(s, local_vars)" />
      <import module="sys" />
      <scope doc="Create a file with the specified name and write &apos;contents&apos; (a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
    </scope>
    <scope doc="A parser for HTML and XHTML." ilk="blob" lang="Python3" name="html.parser">
      <scope classrefs="Exception" doc="Exception raised for all parse errors." ilk="class" line="49" lineend="64" name="HTMLParseError">
        <variable attributes="__instancevar__" line="54" name="msg" />
        <scope ilk="function" line="58" lineend="64" name="__str__" returns="str" signature="__str__()">
          <variable citdl="HTMLParseError" ilk="argument" name="self" />
          <variable citdl="str" line="59" name="result" />
        </scope>
        <variable attributes="__instancevar__" line="55" name="lineno" />
        <scope attributes="__ctor__" ilk="function" line="52" lineend="56" name="__init__" signature="HTMLParseError(msg, position=(None, None))">
          <variable citdl="HTMLParseError" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="tuple" ilk="argument" name="position" />
        </scope>
        <variable attributes="__instancevar__" line="56" name="offset" />
      </scope>
      <scope classrefs="ParserBase" doc="Find tags and other markup and call handler functions.  Usage:" ilk="class" line="67" lineend="388" name="HTMLParser">
        <scope doc="Feed data to the parser." ilk="function" line="101" lineend="108" name="feed" signature="feed(data)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="321" lineend="323" name="handle_startendtag" signature="handle_startendtag(tag, attrs)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <scope ilk="function" line="354" lineend="355" name="handle_pi" signature="handle_pi(data)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="338" lineend="339" name="handle_entityref" signature="handle_entityref(name)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Handle any buffered data." ilk="function" line="110" lineend="112" name="close" signature="close()">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="326" lineend="327" name="handle_starttag" signature="handle_starttag(tag, attrs)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <scope ilk="function" line="346" lineend="347" name="handle_comment" signature="handle_comment(data)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="132" lineend="209" name="goahead" signature="goahead(end)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="end" />
          <variable citdl="str" line="133" name="rawdata" />
          <variable citdl="self.updatepos()" line="134" name="i" />
          <variable citdl="len()" line="135" name="n" />
          <variable citdl="charref.match()" line="137" name="match" />
          <variable citdl="match.start()" line="139" name="j" />
          <variable citdl="rawdata.startswith" line="145" name="startswith" />
          <variable citdl="match.end()" line="148" name="k" />
          <variable citdl="list" line="170" name="name" />
        </scope>
        <scope ilk="function" line="123" lineend="124" name="set_cdata_mode" signature="set_cdata_mode()">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="re.compile()" line="98" name="interesting" />
        <scope doc="Return full source of start tag: &apos;&lt;...&gt;&apos;." ilk="function" line="119" lineend="121" name="get_starttag_text" signature="get_starttag_text()">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="275" lineend="302" name="check_for_whole_start_tag" returns="m.end()" signature="check_for_whole_start_tag(i)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable citdl="list" line="276" name="rawdata" />
          <variable citdl="locatestarttagend.match()" line="277" name="m" />
          <variable citdl="m.end()" line="279" name="j" />
          <variable citdl="list" line="280" name="next" />
        </scope>
        <scope ilk="function" line="350" lineend="351" name="handle_decl" signature="handle_decl(decl)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="decl" />
        </scope>
        <scope ilk="function" line="126" lineend="127" name="clear_cdata_mode" signature="clear_cdata_mode()">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="224" lineend="271" name="parse_starttag" returns="self.check_for_whole_start_tag()" signature="parse_starttag(i)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable citdl="self.check_for_whole_start_tag()" line="226" name="endpos" />
          <variable citdl="list" line="229" name="rawdata" />
          <variable citdl="list" line="233" name="attrs" />
          <variable citdl="tagfind.match()" line="234" name="match" />
          <variable citdl="m.end()" line="236" name="k" />
          <variable citdl="attrfind.match()" line="240" name="m" />
          <variable citdl="self.unescape()" line="245" name="attrvalue" />
          <variable line="253" name="end" />
          <variable citdl="self.__starttag_text.count()" line="257" name="lineno" />
          <variable citdl="len()" line="258" name="offset" />
        </scope>
        <scope ilk="function" line="330" lineend="331" name="handle_endtag" signature="handle_endtag(tag)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="tag" />
        </scope>
        <scope ilk="function" line="334" lineend="335" name="handle_charref" signature="handle_charref(name)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="97" name="lasttag" />
        <scope ilk="function" line="212" lineend="221" name="parse_pi" returns="match.end()" signature="parse_pi(i)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable citdl="list" line="213" name="rawdata" />
          <variable citdl="piclose.search()" line="215" name="match" />
          <variable citdl="match.start()" line="218" name="j" />
        </scope>
        <scope ilk="function" line="357" lineend="358" name="unknown_decl" signature="unknown_decl(data)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="Reset this instance. Loses all unprocessed data." ilk="function" line="94" lineend="99" name="reset" signature="reset()">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="362" lineend="388" name="unescape" returns="re.sub()" signature="unescape(s)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <scope ilk="function" line="365" lineend="385" name="replaceEntities" returns="str" signature="replaceEntities(s)">
            <import line="377" module="html.entities" />
            <variable citdl="list" ilk="argument" name="s" />
            <variable citdl="int()" line="370" name="c" />
            <variable citdl="dict" line="379" name="entitydefs" />
          </scope>
        </scope>
        <variable citdl="tuple" line="87" name="CDATA_CONTENT_ELEMENTS" />
        <variable attributes="private" citdl="list" line="117" name="__starttag_text" />
        <scope ilk="function" line="305" lineend="318" name="parse_endtag" returns="match.end()" signature="parse_endtag(i)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable citdl="list" line="306" name="rawdata" />
          <variable citdl="endendtag.search()" line="308" name="match" />
          <variable citdl="match.end()" line="311" name="j" />
          <variable citdl="match.group()" line="315" name="tag" />
        </scope>
        <variable line="361" name="entitydefs" />
        <variable attributes="__instancevar__" citdl="str" line="96" name="rawdata" />
        <scope attributes="__ctor__" doc="Initialize and reset this instance." ilk="function" line="90" lineend="92" name="__init__" signature="HTMLParser()">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="114" lineend="115" name="error" signature="error(message)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope ilk="function" line="342" lineend="343" name="handle_data" signature="handle_data(data)">
          <variable citdl="HTMLParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
      </scope>
      <import module="_markupbase" />
      <variable citdl="SRE_Pattern" line="27" name="attrfind" />
      <variable citdl="SRE_Pattern" line="21" name="charref" />
      <variable citdl="SRE_Pattern" line="25" name="commentclose" />
      <variable citdl="SRE_Pattern" line="45" name="endendtag" />
      <variable citdl="SRE_Pattern" line="46" name="endtagfind" />
      <variable citdl="SRE_Pattern" line="20" name="entityref" />
      <variable citdl="SRE_Pattern" line="18" name="incomplete" />
      <variable citdl="SRE_Pattern" line="17" name="interesting_cdata" />
      <variable citdl="SRE_Pattern" line="16" name="interesting_normal" />
      <variable citdl="SRE_Pattern" line="31" name="locatestarttagend" />
      <variable citdl="SRE_Pattern" line="24" name="piclose" />
      <import module="re" />
      <variable citdl="SRE_Pattern" line="23" name="starttagopen" />
      <variable citdl="SRE_Pattern" line="26" name="tagfind" />
    </scope>
    <scope doc="Conversions to/from quoted-printable transport encoding as per RFC 1521." ilk="blob" lang="Python3" name="quopri">
      <variable citdl="bytes" line="12" name="EMPTYSTRING" />
      <variable citdl="bytes" line="9" name="ESCAPE" />
      <variable citdl="bytes" line="11" name="HEX" />
      <variable citdl="int" line="10" name="MAXLINESIZE" />
      <variable citdl="list" line="7" name="__all__" />
      <scope doc="Decode a string of qp-encoded data" ilk="function" line="17" name="a2b_qp" />
      <scope doc="Encode a string using quoted-printable encoding." ilk="function" line="18" name="b2a_qp" signature="b2a_qp(data, quotetabs=0, istext=1, header=0) -&gt; s;" />
      <scope doc="Read &apos;input&apos;, apply quoted-printable decoding, and write to &apos;output&apos;." ilk="function" line="119" lineend="160" name="decode" signature="decode(input, output, header=0)">
        <variable citdl="list" line="143" name="c" />
        <variable citdl="int" line="136" name="partial" />
        <variable ilk="argument" name="output" />
        <variable citdl="int" line="134" name="i" />
        <variable citdl="a2b_qp()" line="126" name="odata" />
        <variable citdl="len()" line="134" name="n" />
        <variable citdl="int" ilk="argument" name="header" />
        <variable citdl="str" line="130" name="new" />
        <variable ilk="argument" name="input" />
        <variable citdl="input.readline()" line="132" name="line" />
        <variable citdl="input.read()" line="125" name="data" />
      </scope>
      <scope ilk="function" line="162" lineend="169" name="decodestring" returns="a2b_qp()" signature="decodestring(s, header=0)">
        <variable citdl="int" ilk="argument" name="header" />
        <variable ilk="argument" name="s" />
        <variable citdl="BytesIO()" line="167" name="outfp" />
        <variable citdl="BytesIO()" line="166" name="infp" />
      </scope>
      <scope doc="Read &apos;input&apos;, apply quoted-printable encoding, and write to &apos;output&apos;." ilk="function" line="44" lineend="106" name="encode" signature="encode(input, output, quotetabs, header=0)">
        <variable citdl="bytes()" line="84" name="c" />
        <variable citdl="list" line="76" name="outline" />
        <variable citdl="str" line="78" name="stripped" />
        <variable citdl="b2a_qp()" line="57" name="odata" />
        <variable citdl="list" line="71" name="prevline" />
        <scope ilk="function" line="61" lineend="69" name="write" signature="write(s, output=output, lineEnd=&apos;\n&apos;)">
          <variable ilk="argument" name="s" />
          <variable ilk="argument" name="output" />
          <variable citdl="str" ilk="argument" name="lineEnd" />
        </scope>
        <variable citdl="int" ilk="argument" name="header" />
        <variable ilk="argument" name="quotetabs" />
        <variable ilk="argument" name="output" />
        <variable citdl="input.readline()" line="73" name="line" />
        <variable citdl="input.read()" line="56" name="data" />
        <variable citdl="list" line="96" name="thisline" />
        <variable ilk="argument" name="input" />
      </scope>
      <scope ilk="function" line="108" lineend="115" name="encodestring" returns="outfp.getvalue()" signature="encodestring(s, quotetabs=0, header=0)">
        <variable citdl="int" ilk="argument" name="quotetabs" />
        <variable ilk="argument" name="s" />
        <variable citdl="BytesIO()" line="113" name="outfp" />
        <variable citdl="BytesIO()" line="112" name="infp" />
        <variable citdl="int" ilk="argument" name="header" />
      </scope>
      <scope doc="Return true if the byte ordinal &apos;c&apos; is a hexadecimal digit in ASCII." ilk="function" line="174" lineend="177" name="ishex" returns="bool" signature="ishex(c)">
        <variable ilk="argument" name="c" />
      </scope>
      <scope ilk="function" line="197" lineend="239" name="main" signature="main()">
        <variable citdl="int" line="210" name="tabs" />
        <variable citdl="sys.stdin.buffer" line="222" name="fp" />
        <variable citdl="int" line="209" name="deco" />
        <variable citdl="list" line="218" name="args" />
        <variable citdl="int" line="219" name="sts" />
      </scope>
      <scope doc="Decide whether a particular byte ordinal needs to be quoted." ilk="function" line="21" lineend="34" name="needsquoting" returns="bool" signature="needsquoting(c, quotetabs, header)">
        <variable ilk="argument" name="quotetabs" />
        <variable ilk="argument" name="c" />
        <variable ilk="argument" name="header" />
      </scope>
      <scope doc="Quote a single character." ilk="function" line="36" lineend="40" name="quote" returns="bytes()" signature="quote(c)">
        <variable citdl="ord()" ilk="argument" name="c" />
      </scope>
      <scope doc="Get the integer value of a hexadecimal number." ilk="function" line="179" lineend="193" name="unhex" returns="ord()" signature="unhex(s)">
        <variable citdl="ord()" line="185" name="i" />
        <variable ilk="argument" name="s" />
        <variable citdl="ord()" line="181" name="bits" />
        <variable citdl="bytes()" line="183" name="c" />
      </scope>
    </scope>
    <scope doc="Fixer that transforms `xyzzy` into repr(xyzzy)." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_repr">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" ilk="class" line="11" lineend="22" name="FixRepr">
        <variable citdl="str" line="13" name="PATTERN" />
        <scope ilk="function" line="17" lineend="22" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixRepr" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="parenthesize()" line="18" name="expr" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope ilk="function" name="parenthesize" signature="parenthesize(node)" />
    </scope>
    <scope doc="A simple log mechanism styled after PEP 282." ilk="blob" lang="Python3" name="distutils.log">
      <variable citdl="int" line="6" name="DEBUG" />
      <variable citdl="int" line="9" name="ERROR" />
      <variable citdl="int" line="10" name="FATAL" />
      <variable citdl="int" line="7" name="INFO" />
      <scope classrefs="object" ilk="class" line="14" lineend="49" name="Log">
        <scope ilk="function" line="39" lineend="40" name="info" signature="info(msg, *args)">
          <variable citdl="Log" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="33" lineend="34" name="log" signature="log(level, msg, *args)">
          <variable citdl="Log" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="45" lineend="46" name="error" signature="error(msg, *args)">
          <variable citdl="Log" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="42" lineend="43" name="warn" signature="warn(msg, *args)">
          <variable citdl="Log" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="36" lineend="37" name="debug" signature="debug(msg, *args)">
          <variable citdl="Log" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope attributes="protected" ilk="function" line="19" lineend="31" name="_log" signature="_log(level, msg, args)">
          <variable citdl="Log" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="args" />
          <variable citdl="sys.stderr" line="27" name="stream" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="17" name="threshold" />
        <scope ilk="function" line="48" lineend="49" name="fatal" signature="fatal(msg, *args)">
          <variable citdl="Log" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="16" lineend="17" name="__init__" signature="Log(threshold=WARN)">
          <variable citdl="Log" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="threshold" />
        </scope>
      </scope>
      <variable citdl="int" line="8" name="WARN" />
      <scope ilk="function" line="53" name="debug" />
      <scope ilk="function" line="56" name="error" />
      <scope ilk="function" line="57" name="fatal" />
      <scope ilk="function" line="54" name="info" />
      <scope ilk="function" line="52" name="log" />
      <scope ilk="function" line="59" lineend="63" name="set_threshold" returns="_global_log.threshold" signature="set_threshold(level)">
        <variable citdl="_global_log.threshold" line="61" name="old" />
        <variable ilk="argument" name="level" />
      </scope>
      <scope ilk="function" line="65" lineend="71" name="set_verbosity" signature="set_verbosity(v)">
        <variable ilk="argument" name="v" />
      </scope>
      <import module="sys" />
      <scope ilk="function" line="55" name="warn" />
      <variable attributes="protected __hidden__" citdl="Log" line="51" name="_global_log" />
    </scope>
    <scope doc="Provides classes to represent module version numbers (one class for each style of version numbering).  There are currently two such classes implemented: StrictVersion and LooseVersion." ilk="blob" lang="Python3" name="distutils.version">
      <scope classrefs="Version" doc="Version numbering for anarchists and software realists. Implements the standard interface for version number classes as described above.  A version number consists of a series of numbers," ilk="class" line="273" lineend="346" name="LooseVersion">
        <scope ilk="function" line="329" lineend="330" name="__str__" signature="__str__()">
          <variable citdl="LooseVersion" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="317" name="vstring" />
        <variable citdl="re.compile()" line="306" name="component_re" />
        <scope ilk="function" line="313" lineend="326" name="parse" signature="parse(vstring)">
          <variable citdl="LooseVersion" ilk="argument" name="self" />
          <variable ilk="argument" name="vstring" />
          <variable citdl="list" line="318" name="components" />
        </scope>
        <scope attributes="protected" ilk="function" line="337" lineend="346" name="_cmp" returns="int" signature="_cmp(other)">
          <variable citdl="LooseVersion" ilk="argument" name="self" />
          <variable citdl="" ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="326" name="version" />
        <scope ilk="function" line="333" lineend="334" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="LooseVersion" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="308" lineend="310" name="__init__" signature="LooseVersion(vstring=None)">
          <variable citdl="LooseVersion" ilk="argument" name="self" />
          <variable ilk="argument" name="vstring" />
        </scope>
      </scope>
      <scope classrefs="Version" doc="Version numbering for anal retentives and software idealists. Implements the standard interface for version number classes as described above.  A version number consists of two or three" ilk="class" line="99" lineend="204" name="StrictVersion">
        <scope ilk="function" line="159" lineend="169" name="__str__" returns="str.join()" signature="__str__()">
          <variable citdl="StrictVersion" ilk="argument" name="self" />
          <variable citdl="str.join()" line="162" name="vstring" />
        </scope>
        <scope ilk="function" line="140" lineend="156" name="parse" signature="parse(vstring)">
          <variable citdl="StrictVersion" ilk="argument" name="self" />
          <variable ilk="argument" name="vstring" />
          <variable citdl="self.version_re.match()" line="141" name="match" />
        </scope>
        <scope attributes="protected" ilk="function" line="172" lineend="204" name="_cmp" returns="int" signature="_cmp(other)">
          <variable citdl="StrictVersion" ilk="argument" name="self" />
          <variable citdl="" ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="tuple()" line="149" name="version" />
        <variable attributes="__instancevar__" citdl="tuple" line="154" name="prerelease" />
        <variable citdl="re.compile()" line="136" name="version_re" />
      </scope>
      <scope classrefs="object" doc="Abstract base class for version numbering classes.  Just provides constructor (__init__) and reproducer (__repr__), because those seem to be the same for all version numbering classes; and route" ilk="class" line="31" lineend="79" name="Version">
        <scope ilk="function" line="51" lineend="55" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="52" name="c" />
        </scope>
        <scope ilk="function" line="75" lineend="79" name="__ge__" returns="bool" signature="__ge__(other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="76" name="c" />
        </scope>
        <scope ilk="function" line="63" lineend="67" name="__le__" returns="bool" signature="__le__(other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="64" name="c" />
        </scope>
        <scope ilk="function" line="42" lineend="43" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="Version" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="69" lineend="73" name="__gt__" returns="bool" signature="__gt__(other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="70" name="c" />
        </scope>
        <scope ilk="function" line="57" lineend="61" name="__lt__" returns="bool" signature="__lt__(other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="58" name="c" />
        </scope>
        <scope ilk="function" line="45" lineend="49" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable citdl="self._cmp()" line="46" name="c" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="38" lineend="40" name="__init__" signature="Version(vstring=None)">
          <variable citdl="Version" ilk="argument" name="self" />
          <variable ilk="argument" name="vstring" />
        </scope>
      </scope>
      <import module="re" />
    </scope>
    <scope doc="Fixer for dict methods.  d.keys() -&gt; list(d.keys())" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_dict">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" name="ArgList" signature="ArgList(args, lparen=Leaf(7, &apos;(&apos;), rparen=Leaf(8, &apos;)&apos;))" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A period (.) leaf" ilk="function" name="Dot" signature="Dot()" />
      <scope classrefs="BaseFix" ilk="class" line="42" lineend="105" name="FixDict">
        <variable citdl="str" line="84" name="P2" />
        <variable citdl="patcomp.compile_pattern()" line="87" name="p2" />
        <variable citdl="str" line="81" name="P1" />
        <scope ilk="function" line="89" lineend="105" name="in_special_context" returns="bool" signature="in_special_context(node, isiter)">
          <variable citdl="FixDict" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="isiter" />
          <variable citdl="dict" line="92" name="results" />
        </scope>
        <variable citdl="str" line="43" name="PATTERN" />
        <scope ilk="function" line="53" lineend="79" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixDict" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="list" line="54" name="head" />
          <variable line="55" name="method" />
          <variable citdl="list" line="56" name="tail" />
          <variable citdl="self.syms" line="57" name="syms" />
          <variable citdl="method.value" line="58" name="method_name" />
          <variable citdl="method_name.startswith()" line="59" name="isiter" />
          <variable citdl="method_name.startswith()" line="60" name="isview" />
          <variable citdl="self.in_special_context()" line="66" name="special" />
          <variable citdl="list" line="67" name="args" />
          <variable citdl="pytree.Node()" line="72" name="new" />
        </scope>
        <variable citdl="patcomp.compile_pattern()" line="82" name="p1" />
      </scope>
      <scope ilk="function" name="LParen" signature="LParen()" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope ilk="function" name="RParen" signature="RParen()" />
      <import module="fixer_base" />
      <import module="fixer_util" />
      <variable citdl="set" line="39" name="iter_exempt" />
      <import module="patcomp" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="# Module to allow connection and socket objects to be transferred # between processes #" ilk="blob" lang="Python3" name="multiprocessing.reduction">
      <scope doc="Returns a connection to the address of a `Listener`" ilk="function" name="Client" signature="Client(address, family=None, authkey=None)" />
      <scope classrefs="_Pickler" ilk="class" name="ForkingPickler" />
      <scope classrefs="object" doc="Returns a listener object.  This is a wrapper for a bound socket which is &apos;listening&apos; for" ilk="class" name="Listener" />
      <scope classrefs="object" doc="Start a subprocess to run the code of a process object" ilk="class" name="Popen" />
      <variable citdl="list" line="10" name="__all__" />
      <import module="_multiprocessing" />
      <import module="_subprocess" />
      <scope ilk="function" name="close" />
      <scope doc="Return process object representing the current process" ilk="function" name="current_process" signature="current_process()" />
      <scope ilk="function" name="debug" signature="debug(msg, *args)" />
      <scope ilk="function" name="duplicate" signature="duplicate(handle, target_process=None, inheritable=False)" />
      <scope ilk="function" line="155" lineend="159" name="fromfd" returns="socket.fromfd()" signature="fromfd(fd, family, type_, proto=0)">
        <variable ilk="argument" name="type_" />
        <variable ilk="argument" name="fd" />
        <variable citdl="socket.socket()" line="156" name="s" />
        <variable ilk="argument" name="family" />
        <variable citdl="int" ilk="argument" name="proto" />
      </scope>
      <import module="os" />
      <scope ilk="function" line="143" lineend="146" name="rebuild_connection" returns="_multiprocessing.Connection()" signature="rebuild_connection(reduced_handle, readable, writable)">
        <variable ilk="argument" name="writable" />
        <variable ilk="argument" name="reduced_handle" />
        <variable ilk="argument" name="readable" />
        <variable citdl="rebuild_handle()" line="144" name="handle" />
      </scope>
      <scope ilk="function" line="124" lineend="133" name="rebuild_handle" returns="recv_handle()" signature="rebuild_handle(pickled_data)">
        <variable ilk="argument" name="pickled_data" />
        <variable citdl="Client()" line="129" name="conn" />
        <variable citdl="recv_handle()" line="131" name="new_handle" />
      </scope>
      <scope ilk="function" line="183" lineend="186" name="rebuild_pipe_connection" returns="_multiprocessing.PipeConnection()" signature="rebuild_pipe_connection(reduced_handle, readable, writable)">
        <variable ilk="argument" name="writable" />
        <variable ilk="argument" name="reduced_handle" />
        <variable ilk="argument" name="readable" />
        <variable citdl="rebuild_handle()" line="184" name="handle" />
      </scope>
      <scope ilk="function" line="165" lineend="169" name="rebuild_socket" returns="fromfd()" signature="rebuild_socket(reduced_handle, family, type_, proto)">
        <variable ilk="argument" name="family" />
        <variable ilk="argument" name="proto" />
        <variable ilk="argument" name="reduced_handle" />
        <variable attributes="protected" citdl="fromfd()" line="167" name="_sock" />
        <variable ilk="argument" name="type_" />
        <variable citdl="rebuild_handle()" line="166" name="fd" />
      </scope>
      <scope ilk="function" line="56" lineend="57" name="recv_handle" returns="_multiprocessing.recvfd()" signature="recv_handle(conn)">
        <variable ilk="argument" name="conn" />
      </scope>
      <scope ilk="function" line="139" lineend="141" name="reduce_connection" returns="tuple" signature="reduce_connection(conn)">
        <variable citdl="reduce_handle()" line="140" name="rh" />
        <variable ilk="argument" name="conn" />
      </scope>
      <scope ilk="function" line="116" lineend="122" name="reduce_handle" returns="tuple" signature="reduce_handle(handle)">
        <variable ilk="argument" name="handle" />
        <variable citdl="duplicate()" line="119" name="dup_handle" />
      </scope>
      <scope ilk="function" line="179" lineend="181" name="reduce_pipe_connection" returns="tuple" signature="reduce_pipe_connection(conn)">
        <variable citdl="reduce_handle()" line="180" name="rh" />
        <variable ilk="argument" name="conn" />
      </scope>
      <scope ilk="function" line="161" lineend="163" name="reduce_socket" returns="tuple" signature="reduce_socket(s)">
        <variable citdl="reduce_handle()" line="162" name="reduced_handle" />
        <variable ilk="argument" name="s" />
      </scope>
      <scope ilk="function" name="register_after_fork" signature="register_after_fork(obj, func)" />
      <scope ilk="function" line="53" lineend="54" name="send_handle" signature="send_handle(conn, handle, destination_pid)">
        <variable ilk="argument" name="destination_pid" />
        <variable ilk="argument" name="handle" />
        <variable ilk="argument" name="conn" />
      </scope>
      <import module="socket" />
      <scope ilk="function" name="sub_debug" signature="sub_debug(msg, *args)" />
      <import module="sys" />
      <import module="threading" />
      <scope classrefs="object" ilk="class" name="win32" />
      <variable attributes="protected __hidden__" citdl="set()" line="63" name="_cache" />
      <scope attributes="protected __hidden__" ilk="function" line="93" lineend="109" name="_serve" signature="_serve()">
        <import line="94" module=".util" symbol="is_exiting" />
        <import line="94" module=".util" symbol="sub_warning" />
        <import line="106" module="traceback" />
        <variable citdl="_listener.accept()" line="98" name="conn" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="76" lineend="91" name="_get_listener" returns="Listener()" signature="_get_listener()">
        <variable attributes="protected" citdl="Listener()" line="84" name="_listener" />
        <variable citdl="threading.Thread()" line="85" name="t" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="65" lineend="71" name="_reset" signature="_reset(obj)">
        <variable ilk="argument" name="obj" />
        <variable attributes="protected" citdl="threading.Lock()" line="70" name="_lock" />
        <variable attributes="protected" line="71" name="_listener" />
      </scope>
    </scope>
    <scope doc="Pathname and path-related operations for the Macintosh." ilk="blob" lang="Python3" name="macpath">
      <variable citdl="int" name="SF_APPEND" />
      <variable citdl="int" name="SF_ARCHIVED" />
      <variable citdl="int" name="SF_IMMUTABLE" />
      <variable citdl="int" name="SF_NOUNLINK" />
      <variable citdl="int" name="SF_SNAPSHOT" />
      <variable citdl="int" name="ST_ATIME" />
      <variable citdl="int" name="ST_CTIME" />
      <variable citdl="int" name="ST_DEV" />
      <variable citdl="int" name="ST_GID" />
      <variable citdl="int" name="ST_INO" />
      <variable citdl="int" name="ST_MODE" />
      <variable citdl="int" name="ST_MTIME" />
      <variable citdl="int" name="ST_NLINK" />
      <variable citdl="int" name="ST_SIZE" />
      <variable citdl="int" name="ST_UID" />
      <variable citdl="int" name="S_ENFMT" />
      <variable citdl="int" name="S_IEXEC" />
      <variable citdl="int" name="S_IFBLK" />
      <variable citdl="int" name="S_IFCHR" />
      <variable citdl="int" name="S_IFDIR" />
      <variable citdl="int" name="S_IFIFO" />
      <variable citdl="int" name="S_IFLNK" />
      <scope ilk="function" name="S_IFMT" signature="S_IFMT(mode)" />
      <variable citdl="int" name="S_IFREG" />
      <variable citdl="int" name="S_IFSOCK" />
      <scope ilk="function" name="S_IMODE" signature="S_IMODE(mode)" />
      <variable citdl="int" name="S_IREAD" />
      <variable citdl="int" name="S_IRGRP" />
      <variable citdl="int" name="S_IROTH" />
      <variable citdl="int" name="S_IRUSR" />
      <variable citdl="int" name="S_IRWXG" />
      <variable citdl="int" name="S_IRWXO" />
      <variable citdl="int" name="S_IRWXU" />
      <scope ilk="function" name="S_ISBLK" signature="S_ISBLK(mode)" />
      <scope ilk="function" name="S_ISCHR" signature="S_ISCHR(mode)" />
      <scope ilk="function" name="S_ISDIR" signature="S_ISDIR(mode)" />
      <scope ilk="function" name="S_ISFIFO" signature="S_ISFIFO(mode)" />
      <variable citdl="int" name="S_ISGID" />
      <scope ilk="function" name="S_ISLNK" signature="S_ISLNK(mode)" />
      <scope ilk="function" name="S_ISREG" signature="S_ISREG(mode)" />
      <scope ilk="function" name="S_ISSOCK" signature="S_ISSOCK(mode)" />
      <variable citdl="int" name="S_ISUID" />
      <variable citdl="int" name="S_ISVTX" />
      <variable citdl="int" name="S_IWGRP" />
      <variable citdl="int" name="S_IWOTH" />
      <variable citdl="int" name="S_IWRITE" />
      <variable citdl="int" name="S_IWUSR" />
      <variable citdl="int" name="S_IXGRP" />
      <variable citdl="int" name="S_IXOTH" />
      <variable citdl="int" name="S_IXUSR" />
      <variable citdl="int" name="UF_APPEND" />
      <variable citdl="int" name="UF_IMMUTABLE" />
      <variable citdl="int" name="UF_NODUMP" />
      <variable citdl="int" name="UF_NOUNLINK" />
      <variable citdl="int" name="UF_OPAQUE" />
      <variable citdl="list" name="__all__" />
      <scope doc="Return an absolute path." ilk="function" name="abspath" signature="abspath(path)" />
      <variable citdl="NoneType" name="altsep" />
      <scope ilk="function" name="basename" signature="basename(s)" />
      <scope doc="Given a list of pathnames, returns the longest common leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <variable citdl="str" name="curdir" />
      <variable citdl="str" name="defpath" />
      <variable citdl="str" name="devnull" />
      <scope ilk="function" name="dirname" signature="dirname(s)" />
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Dummy to retain interface-compatibility with other operating systems." ilk="function" name="expanduser" signature="expanduser(path)" />
      <scope doc="Dummy to retain interface-compatibility with other operating systems." ilk="function" name="expandvars" signature="expandvars(path)" />
      <variable citdl="str" name="extsep" />
      <import module="genericpath" />
      <scope doc="Return the last access time of a file, reported by os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Return true if a path is absolute." ilk="function" name="isabs" signature="isabs(s)" />
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Return true if the pathname refers to a symbolic link." ilk="function" name="islink" signature="islink(s)" />
      <scope ilk="function" name="ismount" signature="ismount(s)" />
      <scope ilk="function" name="join" signature="join(s, *p)" />
      <scope doc="Test whether a path exists." ilk="function" name="lexists" signature="lexists(path)" />
      <scope classrefs="Exception" doc="Path cannot be normalized" ilk="class" name="norm_error" />
      <scope ilk="function" name="normcase" signature="normcase(path)" />
      <scope doc="Normalize a pathname." ilk="function" name="normpath" signature="normpath(s)" />
      <import module="os" />
      <variable citdl="str" name="pardir" />
      <variable citdl="str" name="pathsep" />
      <scope doc="# realpath is a no-op on systems without islink support" ilk="function" name="realpath" signature="realpath(path)" />
      <variable citdl="str" name="sep" />
      <scope doc="Split a pathname into two parts: the directory leading up to the final bit, and the basename (the filename, without colons, in that directory)." ilk="function" name="split" signature="split(s)" />
      <scope doc="Split a pathname into a drive specification and the rest of the path." ilk="function" name="splitdrive" signature="splitdrive(p)" />
      <scope doc="Split the extension from a pathname." ilk="function" name="splitext" signature="splitext(p)" />
      <variable citdl="bool" name="supports_unicode_filenames" />
    </scope>
    <scope doc="Guess the MIME type of a file.  This module defines two useful functions:" ilk="blob" lang="Python3" name="mimetypes">
      <scope classrefs="object" doc="MIME-types datastore.  This datastore can handle information from mime.types-style files" ilk="class" line="50" lineend="221" name="MimeTypes">
        <scope doc="Guess the type of a file based on its URL." ilk="function" line="89" lineend="149" name="guess_type" returns="tuple" signature="guess_type(url, strict=True)">
          <variable citdl="MimeTypes" ilk="argument" name="self" />
          <variable ilk="argument" name="url" />
          <variable citdl="True" ilk="argument" name="strict" />
          <variable citdl="url.find()" line="116" name="comma" />
          <variable citdl="url.find()" line="120" name="semi" />
          <variable citdl="list" line="122" name="type" />
          <variable line="132" name="encoding" />
          <variable line="136" name="types_map" />
        </scope>
        <scope doc="Guess the extension for a file based on its MIME type." ilk="function" line="170" lineend="186" name="guess_extension" signature="guess_extension(type, strict=True)">
          <variable citdl="MimeTypes" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable citdl="True" ilk="argument" name="strict" />
          <variable citdl="guess_all_extensions()" line="183" name="extensions" />
        </scope>
        <variable attributes="__instancevar__" citdl="tuple" line="63" name="types_map" />
        <variable attributes="__instancevar__" citdl="encodings_map.copy()" line="61" name="encodings_map" />
        <variable attributes="__instancevar__" citdl="tuple" line="64" name="types_map_inv" />
        <scope doc="Add a mapping between a type and an extension." ilk="function" line="72" lineend="87" name="add_type" signature="add_type(type, ext, strict=True)">
          <variable citdl="MimeTypes" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="ext" />
          <variable citdl="True" ilk="argument" name="strict" />
          <variable line="85" name="exts" />
        </scope>
        <scope doc="Read a single mime.types-format file." ilk="function" line="200" lineend="221" name="readfp" signature="readfp(fp, strict=True)">
          <variable citdl="MimeTypes" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
          <variable citdl="True" ilk="argument" name="strict" />
          <variable citdl="fp.readline()" line="209" name="line" />
          <variable citdl="line.split()" line="212" name="words" />
          <variable line="219" name="type" />
          <variable citdl="list" line="219" name="suffixes" />
        </scope>
        <scope doc="Guess the extensions for a file based on its MIME type." ilk="function" line="151" lineend="168" name="guess_all_extensions" signature="guess_all_extensions(type, strict=True)">
          <variable citdl="MimeTypes" ilk="argument" name="self" />
          <variable citdl="type.lower()" ilk="argument" name="type" />
          <variable citdl="True" ilk="argument" name="strict" />
          <variable line="163" name="extensions" />
        </scope>
        <scope doc="Read a single mime.types-format file, specified by pathname." ilk="function" line="188" lineend="198" name="read" signature="read(filename, strict=True)">
          <variable citdl="MimeTypes" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="True" ilk="argument" name="strict" />
          <variable citdl="open()" line="196" name="fp" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="58" lineend="70" name="__init__" signature="MimeTypes(filenames=(), strict=True)">
          <variable citdl="MimeTypes" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="filenames" />
          <variable citdl="True" ilk="argument" name="strict" />
        </scope>
        <variable attributes="__instancevar__" citdl="suffix_map.copy()" line="62" name="suffix_map" />
      </scope>
      <variable citdl="list" line="29" name="__all__" />
      <scope doc="Add a mapping between a type and an extension." ilk="function" line="279" lineend="293" name="add_type" returns="_db.add_type()" signature="add_type(type, ext, strict=True)">
        <variable citdl="True" ilk="argument" name="strict" />
        <variable ilk="argument" name="ext" />
        <variable ilk="argument" name="type" />
      </scope>
      <variable citdl="dict" name="common_types" />
      <variable citdl="dict" name="encodings_map" />
      <scope doc="Guess the extensions for a file based on its MIME type." ilk="function" line="246" lineend="261" name="guess_all_extensions" returns="_db.guess_all_extensions()" signature="guess_all_extensions(type, strict=True)">
        <variable citdl="True" ilk="argument" name="strict" />
        <variable ilk="argument" name="type" />
      </scope>
      <scope doc="Guess the extension for a file based on its MIME type." ilk="function" line="263" lineend="277" name="guess_extension" returns="_db.guess_extension()" signature="guess_extension(type, strict=True)">
        <variable citdl="True" ilk="argument" name="strict" />
        <variable ilk="argument" name="type" />
      </scope>
      <scope doc="Guess the type of a file based on its URL." ilk="function" line="223" lineend="243" name="guess_type" returns="_db.guess_type()" signature="guess_type(url, strict=True)">
        <variable ilk="argument" name="url" />
        <variable citdl="True" ilk="argument" name="strict" />
      </scope>
      <scope ilk="function" line="296" lineend="311" name="init" signature="init(files=None)">
        <variable citdl="list" ilk="argument" name="files" />
        <variable line="308" name="types_map" />
        <variable citdl="db.encodings_map" line="306" name="encodings_map" />
        <variable attributes="protected" citdl="MimeTypes" line="311" name="_db" />
        <variable citdl="MimeTypes" line="300" name="db" />
        <variable citdl="True" line="299" name="inited" />
        <variable line="309" name="common_types" />
        <variable citdl="db.suffix_map" line="307" name="suffix_map" />
      </scope>
      <variable citdl="bool" line="46" name="inited" />
      <variable citdl="list" line="34" name="knownfiles" />
      <import module="os" />
      <import module="posixpath" />
      <scope ilk="function" line="314" lineend="321" name="read_mime_types" signature="read_mime_types(file)">
        <variable citdl="MimeTypes" line="319" name="db" />
        <variable ilk="argument" name="file" />
        <variable citdl="open()" line="316" name="f" />
      </scope>
      <variable citdl="dict" name="suffix_map" />
      <variable citdl="dict" name="types_map" />
      <import module="urllib" />
      <variable attributes="__hidden__" citdl="guess_extension()" line="532" name="guess" />
      <variable attributes="__hidden__" citdl="int" line="522" name="extension" />
      <variable attributes="protected __hidden__" line="47" name="_db" />
      <variable attributes="__hidden__" citdl="str" line="498" name="USAGE" />
      <variable attributes="__hidden__" citdl="int" line="521" name="strict" />
      <scope attributes="__hidden__" ilk="function" line="510" lineend="513" name="usage" signature="usage(code, msg=&apos;&apos;)">
        <variable ilk="argument" name="code" />
        <variable citdl="str" ilk="argument" name="msg" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="324" lineend="487" name="_default_mime_types" signature="_default_mime_types()">
        <variable citdl="dict" line="330" name="suffix_map" />
        <variable citdl="dict" line="337" name="encodings_map" />
        <variable citdl="dict" line="348" name="types_map" />
        <variable citdl="dict" line="479" name="common_types" />
      </scope>
    </scope>
    <scope doc="Interface to the Expat non-validating XML parser." ilk="blob" lang="Python3" name="xml.parsers.expat">
      <variable citdl="str" name="EXPAT_VERSION" />
      <scope doc="Returns string error for given number." ilk="function" name="ErrorString" returns="str" signature="ErrorString(errno) -&gt; string" />
      <scope classrefs="Exception" ilk="class" name="ExpatError" />
      <scope doc="Return a new XML parser object." ilk="function" name="ParserCreate" signature="ParserCreate([encoding[, namespace_separator]]) -&gt; parser" />
      <scope classrefs="object" doc="XML parser" ilk="class" name="XMLParserType" />
      <variable citdl="int" name="XML_PARAM_ENTITY_PARSING_ALWAYS" />
      <variable citdl="int" name="XML_PARAM_ENTITY_PARSING_NEVER" />
      <variable citdl="int" name="XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE" />
      <variable citdl="str" line="2" name="__version__" />
      <scope classrefs="Exception" ilk="class" name="error" />
      <import module="errors" />
      <variable citdl="PyCapsule" name="expat_CAPI" />
      <variable citdl="list" name="features" />
      <import module="model" />
      <variable citdl="str" name="native_encoding" />
      <variable citdl="tuple" name="version_info" />
    </scope>
    <scope doc="Fixer for it.next() -&gt; next(it), per PEP 3114." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_next">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" ilk="class" line="17" lineend="74" name="FixNext">
        <variable citdl="str" line="18" name="PATTERN" />
        <variable citdl="str" line="33" name="order" />
        <variable attributes="__instancevar__" citdl="True" line="41" name="shadowed_next" />
        <scope ilk="function" line="45" lineend="74" name="transform" signature="transform(node, results)">
          <variable citdl="FixNext" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="list" line="48" name="base" />
          <variable citdl="results.get()" line="49" name="attr" />
          <variable citdl="results.get()" line="50" name="name" />
          <variable citdl="Name()" line="60" name="n" />
          <variable line="67" name="head" />
        </scope>
        <scope ilk="function" line="35" lineend="43" name="start_tree" signature="start_tree(tree, filename)">
          <variable citdl="FixNext" ilk="argument" name="self" />
          <variable ilk="argument" name="tree" />
          <variable ilk="argument" name="filename" />
          <variable citdl="find_binding()" line="38" name="n" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <variable citdl="str" line="14" name="bind_warning" />
      <scope ilk="function" line="92" lineend="97" name="find_assign" returns="find_assign()" signature="find_assign(node)">
        <variable ilk="argument" name="node" />
      </scope>
      <scope doc="Returns the node which binds variable name, otherwise None." ilk="function" name="find_binding" signature="find_binding(name, node, package=None)" />
      <import module="fixer_base" />
      <scope ilk="function" line="80" lineend="90" name="is_assign_target" returns="bool" signature="is_assign_target(node)">
        <variable ilk="argument" name="node" />
        <variable citdl="find_assign()" line="81" name="assign" />
      </scope>
      <scope ilk="function" line="99" lineend="102" name="is_subtree" returns="bool" signature="is_subtree(root, node)">
        <variable ilk="argument" name="node" />
        <variable ilk="argument" name="root" />
      </scope>
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="Fixer for execfile.  This converts usages of the execfile function into calls to the built-in" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_execfile">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" name="ArgList" signature="ArgList(args, lparen=Leaf(7, &apos;(&apos;), rparen=Leaf(8, &apos;)&apos;))" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope doc="A period (.) leaf" ilk="function" name="Dot" signature="Dot()" />
      <scope classrefs="BaseFix" ilk="class" line="15" lineend="51" name="FixExecfile">
        <variable citdl="str" line="17" name="PATTERN" />
        <scope ilk="function" line="23" lineend="51" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixExecfile" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="25" name="filename" />
          <variable citdl="results.get()" line="26" name="globals" />
          <variable citdl="results.get()" line="27" name="locals" />
          <variable line="31" name="execfile_paren" />
          <variable citdl="ArgList()" line="33" name="open_args" />
          <variable citdl="Node()" line="34" name="open_call" />
          <variable citdl="list" line="35" name="read" />
          <variable citdl="list" line="37" name="open_expr" />
          <variable citdl="filename.clone()" line="40" name="filename_arg" />
          <variable citdl="String()" line="42" name="exec_str" />
          <variable citdl="list" line="43" name="compile_args" />
          <variable citdl="Call()" line="44" name="compile_call" />
          <variable citdl="list" line="46" name="args" />
        </scope>
      </scope>
      <scope ilk="function" name="LParen" signature="LParen()" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes." ilk="class" name="Node" />
      <scope ilk="function" name="RParen" signature="RParen()" />
      <scope doc="A string leaf" ilk="function" name="String" signature="String(string, prefix=None)" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    <scope doc="A class supporting chat-style (command/response) protocols.  This class adds support for &apos;chat&apos; style protocols - where one side" ilk="blob" lang="Python3" name="asynchat">
      <scope classrefs="dispatcher" doc="This is an abstract class.  You must derive from this class, and add the two methods collect_incoming_data() and found_terminator()" ilk="class" line="65" lineend="274" name="async_chat">
        <variable attributes="__instancevar__" citdl="deque()" line="94" name="producer_fifo" />
        <scope ilk="function" line="228" name="initiate_send" signature="initiate_send()">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable line="230" name="first" />
          <variable citdl="int" line="241" name="obs" />
          <variable citdl="bytes()" line="243" name="data" />
          <variable citdl="self.send()" line="257" name="num_sent" />
        </scope>
        <variable citdl="str" line="78" name="encoding" />
        <variable citdl="int" line="72" name="ac_out_buffer_size" />
        <scope ilk="function" line="117" lineend="118" name="get_terminator" returns="bytes()" signature="get_terminator()">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="125" lineend="191" name="handle_read" signature="handle_read()">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable citdl="bytes()" line="128" name="data" />
          <variable citdl="len()" line="143" name="lb" />
          <variable citdl="get_terminator()" line="144" name="terminator" />
          <variable citdl="get_terminator()" line="151" name="n" />
          <variable citdl="len()" line="169" name="terminator_len" />
          <variable citdl="find_prefix_at_end()" line="170" name="index" />
        </scope>
        <scope doc="predicate for inclusion in the writable for select()" ilk="function" line="220" lineend="222" name="writable" returns="bool" signature="writable()">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="108" lineend="109" name="found_terminator" signature="found_terminator()">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="bytes()" line="115" name="terminator" />
        <scope attributes="__ctor__" ilk="function" line="80" lineend="95" name="__init__" signature="async_chat(sock=None, map=None)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable ilk="argument" name="sock" />
          <variable ilk="argument" name="map" />
        </scope>
        <scope ilk="function" line="270" lineend="274" name="discard_buffers" signature="discard_buffers()">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="100" lineend="101" name="_collect_incoming_data" signature="_collect_incoming_data(data)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="predicate for inclusion in the readable for select()" ilk="function" line="212" lineend="218" name="readable" returns="int" signature="readable()">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="103" lineend="106" name="_get_data" returns="str.join()" signature="_get_data()">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable citdl="str.join()" line="104" name="d" />
        </scope>
        <scope doc="Set the input delimiter." ilk="function" line="111" lineend="115" name="set_terminator" signature="set_terminator(term)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable citdl="bytes()" ilk="argument" name="term" />
        </scope>
        <scope ilk="function" line="196" lineend="197" name="handle_close" signature="handle_close()">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="97" lineend="98" name="collect_incoming_data" signature="collect_incoming_data(data)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="208" lineend="210" name="push_with_producer" signature="push_with_producer(producer)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable ilk="argument" name="producer" />
        </scope>
        <scope doc="automatically close this channel once the outgoing queue is empty" ilk="function" line="224" lineend="226" name="close_when_done" signature="close_when_done()">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="82" name="ac_in_buffer" />
        <variable attributes="__instancevar__" citdl="list" line="90" name="incoming" />
        <scope ilk="function" line="193" lineend="194" name="handle_write" signature="handle_write()">
          <variable citdl="async_chat" ilk="argument" name="self" />
        </scope>
        <variable citdl="int" line="71" name="ac_in_buffer_size" />
        <variable citdl="int" line="77" name="use_encoding" />
        <scope ilk="function" line="199" lineend="206" name="push" signature="push(data)">
          <variable citdl="async_chat" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="int" line="200" name="sabs" />
        </scope>
      </scope>
      <import module="asyncore" />
      <scope ilk="function" line="52" lineend="63" name="buffer" returns="list" signature="buffer(obj, start=None, stop=None)">
        <variable citdl="int" ilk="argument" name="start" />
        <variable citdl="len()" ilk="argument" name="stop" />
        <variable ilk="argument" name="obj" />
        <variable citdl="list" line="61" name="x" />
      </scope>
      <scope classrefs="object" doc="deque(iterable[, maxlen]) --&gt; deque object  Build an ordered collection accessible from endpoints only." ilk="class" name="deque" />
      <scope classrefs="object" ilk="class" line="292" lineend="315" name="fifo">
        <variable attributes="__instancevar__" citdl="deque()" line="295" name="list" />
        <scope ilk="function" line="311" lineend="315" name="pop" returns="tuple" signature="pop()">
          <variable citdl="fifo" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="302" lineend="303" name="is_empty" returns="bool" signature="is_empty()">
          <variable citdl="fifo" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="293" lineend="297" name="__init__" signature="fifo(list=None)">
          <variable citdl="fifo" ilk="argument" name="self" />
          <variable ilk="argument" name="list" />
        </scope>
        <scope ilk="function" line="308" lineend="309" name="push" signature="push(data)">
          <variable citdl="fifo" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="299" lineend="300" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="fifo" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="305" lineend="306" name="first" signature="first()">
          <variable citdl="fifo" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope ilk="function" line="332" lineend="336" name="find_prefix_at_end" returns="len()" signature="find_prefix_at_end(haystack, needle)">
        <variable ilk="argument" name="haystack" />
        <variable ilk="argument" name="needle" />
        <variable citdl="len()" line="333" name="l" />
      </scope>
      <scope classrefs="object" ilk="class" line="276" lineend="290" name="simple_producer">
        <variable attributes="__instancevar__" citdl="int" line="280" name="buffer_size" />
        <variable attributes="__instancevar__" citdl="list" line="279" name="data" />
        <scope attributes="__ctor__" ilk="function" line="278" lineend="280" name="__init__" signature="simple_producer(data, buffer_size=512)">
          <variable citdl="simple_producer" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="int" ilk="argument" name="buffer_size" />
        </scope>
        <scope ilk="function" line="282" lineend="290" name="more" returns="list" signature="more()">
          <variable citdl="simple_producer" ilk="argument" name="self" />
          <variable citdl="list" line="284" name="result" />
        </scope>
      </scope>
      <import module="socket" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_sha512">
      <scope doc="Return a new SHA-384 hash object; optionally initialized with a string." ilk="function" name="sha384" />
      <scope doc="Return a new SHA-512 hash object; optionally initialized with a string." ilk="function" name="sha512" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_multiprocessing">
      <scope classrefs="object" doc="Connection type whose constructor signature is      Connection(handle, readable=True, writable=True)." ilk="class" name="Connection" />
      <scope classrefs="object" doc="Connection type whose constructor signature is      Connection(handle, readable=True, writable=True)." ilk="class" name="PipeConnection" />
      <scope classrefs="object" doc="Semaphore/Mutex type" ilk="class" name="SemLock" />
      <scope doc="Return address of obj assuming obj supports buffer inteface" ilk="function" name="address_of_buffer" returns="int" signature="address_of_buffer(obj) -&gt; int" />
      <variable citdl="dict" name="flags" />
      <scope classrefs="object" ilk="class" name="win32" />
    </scope>
    <scope doc="Main program for 2to3." ilk="blob" lang="Python3" name="lib2to3.main">
      <scope classrefs="MultiprocessRefactoringTool" doc="Prints output to stdout." ilk="class" line="24" name="StdoutRefactoringTool">
        <variable attributes="__instancevar__" line="30" name="nobackups" />
        <variable attributes="__instancevar__" line="31" name="show_diffs" />
        <scope ilk="function" line="34" lineend="36" name="log_error" signature="log_error(msg, *args, **kwargs)">
          <variable citdl="StdoutRefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
        <scope ilk="function" line="38" lineend="55" name="write_file" signature="write_file(new_text, filename, old_text, encoding)">
          <variable citdl="StdoutRefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="new_text" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="old_text" />
          <variable ilk="argument" name="encoding" />
          <variable citdl="str" line="41" name="backup" />
          <variable line="52" name="write" />
        </scope>
        <scope ilk="function" line="57" name="print_output" signature="print_output(old, new, filename, equal)">
          <variable citdl="StdoutRefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="old" />
          <variable ilk="argument" name="new" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="equal" />
          <variable citdl="diff_texts()" line="63" name="diff_lines" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="29" lineend="32" name="__init__" signature="StdoutRefactoringTool(fixers, options, explicit, nobackups, show_diffs)">
          <variable citdl="StdoutRefactoringTool" ilk="argument" name="self" />
          <variable ilk="argument" name="fixers" />
          <variable ilk="argument" name="options" />
          <variable ilk="argument" name="explicit" />
          <variable ilk="argument" name="nobackups" />
          <variable ilk="argument" name="show_diffs" />
        </scope>
      </scope>
      <scope doc="Return a unified diff of two strings." ilk="function" line="15" lineend="21" name="diff_texts" returns="difflib.unified_diff()" signature="diff_texts(a, b, filename)">
        <variable citdl="a.splitlines()" ilk="argument" name="a" />
        <variable citdl="b.splitlines()" ilk="argument" name="b" />
        <variable ilk="argument" name="filename" />
      </scope>
      <import module="difflib" />
      <import module="logging" />
      <scope doc="Main program." ilk="function" line="76" lineend="173" name="main" returns="int()" signature="main(fixer_pkg, args=None)">
        <variable citdl="StdoutRefactoringTool" line="154" name="rt" />
        <variable citdl="avail_fixes.union()" line="150" name="requested" />
        <variable ilk="argument" name="fixer_pkg" />
        <variable citdl="optparse.OptionParser()" line="87" name="parser" />
        <variable line="136" name="level" />
        <variable ilk="argument" name="args" />
        <variable citdl="set()" line="142" name="explicit" />
        <variable citdl="set()" line="140" name="avail_fixes" />
        <variable citdl="requested.difference()" line="153" name="fixer_names" />
        <variable citdl="dict" line="111" name="flags" />
        <variable citdl="True" line="144" name="all_present" />
        <variable citdl="True" line="110" name="refactor_stdin" />
        <variable citdl="set()" line="141" name="unwanted_fixes" />
      </scope>
      <import module="optparse" />
      <import module="os" />
      <import module="refactor" />
      <import module="shutil" />
      <import module="sys" />
      <scope ilk="function" line="72" lineend="73" name="warn" signature="warn(msg)">
        <variable ilk="argument" name="msg" />
      </scope>
    </scope>
    <scope doc="Optional fixer to transform set() calls to set literals." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_set_literal">
      <scope classrefs="BaseFix" ilk="class" line="12" lineend="52" name="FixSetLiteral">
        <variable citdl="str" line="16" name="PATTERN" />
        <variable citdl="True" line="14" name="explicit" />
        <scope ilk="function" line="26" lineend="52" name="transform" returns="pytree.Node()" signature="transform(node, results)">
          <variable citdl="FixSetLiteral" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="results.get()" line="27" name="single" />
          <variable citdl="pytree.Node()" line="30" name="fake" />
          <variable citdl="pytree.Node()" line="32" name="items" />
          <variable citdl="list" line="37" name="literal" />
          <variable citdl="pytree.Node()" line="42" name="maker" />
          <variable line="47" name="n" />
        </scope>
      </scope>
      <import module="fixer_base" />
      <import module="pytree" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="email package exception classes." ilk="blob" lang="Python3" name="email.errors">
      <scope classrefs="MessageParseError" doc="Couldn&apos;t find terminating boundary." ilk="class" line="21" name="BoundaryError" />
      <scope classrefs="MessageError" doc="An illegal charset was given." ilk="class" line="29" name="CharsetError" />
      <scope classrefs="MessageDefect" doc="A message had a continuation line as its first header line." ilk="class" line="47" name="FirstHeaderLineIsContinuationDefect" />
      <scope classrefs="MessageParseError" doc="Error while parsing headers." ilk="class" line="17" name="HeaderParseError" />
      <scope classrefs="MessageDefect" doc="Found a header that was missing a colon, or was otherwise malformed." ilk="class" line="53" name="MalformedHeaderDefect" />
      <scope classrefs="object" doc="Base class for a message defect." ilk="class" line="35" lineend="39" name="MessageDefect">
        <variable attributes="__instancevar__" line="39" name="line" />
        <scope attributes="__ctor__" ilk="function" line="38" lineend="39" name="__init__" signature="MessageDefect(line=None)">
          <variable citdl="MessageDefect" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
      </scope>
      <scope classrefs="Exception" doc="Base class for errors in the email package." ilk="class" line="9" name="MessageError" />
      <scope classrefs="MessageError" doc="Base class for message parsing errors." ilk="class" line="13" name="MessageParseError" />
      <scope classrefs="MessageDefect" doc="A &apos;Unix-from&apos; header was found in the middle of a header block." ilk="class" line="50" name="MisplacedEnvelopeHeaderDefect" />
      <scope classrefs="MessageError TypeError" doc="Conversion to a multipart is prohibited." ilk="class" line="25" name="MultipartConversionError" />
      <scope classrefs="MessageDefect" doc="A message claimed to be a multipart but no subparts were found." ilk="class" line="56" name="MultipartInvariantViolationDefect" />
      <scope classrefs="MessageDefect" doc="A message claimed to be a multipart but had no boundary parameter." ilk="class" line="41" name="NoBoundaryInMultipartDefect" />
      <scope classrefs="MessageDefect" doc="The claimed start boundary was never found." ilk="class" line="44" name="StartBoundaryNotFoundDefect" />
    </scope>
    <scope doc="# Module providing the `SyncManager` class for dealing # with shared objects #" ilk="blob" lang="Python3" name="multiprocessing.managers">
      <scope classrefs="BaseProxy" ilk="class" name="AcquirerProxy" />
      <scope ilk="function" name="Array" signature="Array(typecode, sequence, lock=True)" />
      <scope classrefs="BaseProxy" ilk="class" name="ArrayProxy" />
      <scope classrefs="bytes" ilk="class" name="AuthenticationString" />
      <scope doc="Return an auto-proxy for `token`" ilk="function" name="AutoProxy" signature="AutoProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True)" />
      <scope classrefs="BaseProxy" ilk="class" name="BaseListProxy" />
      <scope classrefs="object" doc="Base class for managers" ilk="class" name="BaseManager" />
      <scope classrefs="object" doc="A base for proxies of shared objects" ilk="class" name="BaseProxy" />
      <scope classrefs="AcquirerProxy" ilk="class" name="ConditionProxy" />
      <scope classrefs="BaseProxy" ilk="class" name="DictProxy" />
      <scope classrefs="BaseProxy" ilk="class" name="EventProxy" />
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs" ilk="class" name="Finalize" />
      <scope classrefs="_Pickler" ilk="class" name="ForkingPickler" />
      <scope classrefs="BaseProxy" ilk="class" name="IteratorProxy" />
      <scope classrefs="BaseListProxy" ilk="class" name="ListProxy" />
      <scope doc="Return an proxy type whose methods are given by `exposed`" ilk="function" name="MakeProxyType" signature="MakeProxyType(name, exposed, _cache={(&apos;ArrayProxy&apos;, (&apos;__len__&apos;, &apos;__getitem__&apos;, &apos;__setitem__&apos;, &apos;__getslice__&apos;, &apos;__setslice__&apos;)): &lt;class &apos;multiprocessing.managers.ArrayProxy&apos;&gt;, (&apos;DictProxy&apos;, (&apos;__contains__&apos;, &apos;__delitem__&apos;, &apos;__getitem__&apos;, &apos;__len__&apos;, &apos;__setitem__&apos;, &apos;clear&apos;, &apos;copy&apos;, &apos;get&apos;, &apos;has_key&apos;, &apos;items&apos;, &apos;keys&apos;, &apos;pop&apos;, &apos;popitem&apos;, &apos;setdefault&apos;, &apos;update&apos;, &apos;values&apos;)): &lt;class &apos;multiprocessing.managers.DictProxy&apos;&gt;, (&apos;BaseListProxy&apos;, (&apos;__add__&apos;, &apos;__contains__&apos;, &apos;__delitem__&apos;, &apos;__delslice__&apos;, &apos;__getitem__&apos;, &apos;__getslice__&apos;, &apos;__len__&apos;, &apos;__mul__&apos;, &apos;__reversed__&apos;, &apos;__rmul__&apos;, &apos;__setitem__&apos;, &apos;__setslice__&apos;, &apos;append&apos;, &apos;count&apos;, &apos;extend&apos;, &apos;index&apos;, &apos;insert&apos;, &apos;pop&apos;, &apos;remove&apos;, &apos;reverse&apos;, &apos;sort&apos;, &apos;__imul__&apos;)): &lt;class &apos;multiprocessing.managers.BaseListProxy&apos;&gt;, (&apos;PoolProxy&apos;, (&apos;apply&apos;, &apos;apply_async&apos;, &apos;close&apos;, &apos;imap&apos;, &apos;imap_unordered&apos;, &apos;join&apos;, &apos;map&apos;, &apos;map_async&apos;, &apos;terminate&apos;)): &lt;class &apos;multiprocessing.managers.PoolProxy&apos;&gt;})" />
      <scope classrefs="object" ilk="class" name="Namespace" />
      <scope classrefs="BaseProxy" ilk="class" name="NamespaceProxy" />
      <scope classrefs="PickleError" ilk="class" name="PicklingError" />
      <scope doc="Returns a process pool object" ilk="function" name="Pool" signature="Pool(processes=None, initializer=None, initargs=())" />
      <scope classrefs="BaseProxy" ilk="class" name="PoolProxy" />
      <scope classrefs="object" doc="Start a subprocess to run the code of a process object" ilk="class" name="Popen" />
      <scope classrefs="object" doc="Process objects represent activity that is run in a separate process  The class is analagous to `threading.Thread`" ilk="class" name="Process" />
      <scope classrefs="set" ilk="class" name="ProcessLocalSet" />
      <scope doc="Function used for unpickling proxy objects." ilk="function" name="RebuildProxy" signature="RebuildProxy(func, token, serializer, kwds)" />
      <scope classrefs="Exception" ilk="class" name="RemoteError" />
      <scope classrefs="object" doc="Server class which runs in a process controlled by a manager object" ilk="class" name="Server" />
      <scope classrefs="object" ilk="class" name="State" />
      <scope classrefs="BaseManager" doc="Subclass of `BaseManager` which supports a number of shared object types.  The types registered are those intended for the synchronization" ilk="class" name="SyncManager" />
      <scope classrefs="object" doc="Type to uniquely indentify a shared object" ilk="class" name="Token" />
      <scope classrefs="object" ilk="class" name="Value" />
      <scope classrefs="BaseProxy" ilk="class" name="ValueProxy" />
      <variable citdl="list" name="__all__" />
      <scope doc="Return list of process objects corresponding to live child processes" ilk="function" name="active_children" signature="active_children()" />
      <scope doc="Return a list of names of methods of `obj`" ilk="function" name="all_methods" signature="all_methods(obj)" />
      <import module="array" />
      <scope ilk="function" name="assert_spawning" signature="assert_spawning(self)" />
      <import module="connection" />
      <scope ilk="function" name="convert_to_error" signature="convert_to_error(kind, result)" />
      <import module="copyreg" />
      <scope doc="Return process object representing the current process" ilk="function" name="current_process" signature="current_process()" />
      <scope doc="Send a message to manager using connection `c` and return response" ilk="function" name="dispatch" signature="dispatch(c, id, methodname, args=(), kwds={})" />
      <scope ilk="function" name="exit" />
      <scope doc="Like print_exc() but return a string." ilk="function" name="format_exc" signature="format_exc(limit=None, chain=True)" />
      <scope ilk="function" name="info" signature="info(msg, *args)" />
      <variable citdl="dict" name="listener_client" />
      <import module="os" />
      <scope doc="Return a list of names of methods of `obj` which do not start with &apos;_&apos;" ilk="function" name="public_methods" signature="public_methods(obj)" />
      <import module="queue" />
      <scope ilk="function" name="rebuild_as_list" signature="rebuild_as_list(obj)" />
      <scope ilk="function" name="reduce_array" signature="reduce_array(a)" />
      <import module="sys" />
      <import module="threading" />
      <import module="util" />
      <scope classrefs="object" ilk="class" name="view_type" />
      <variable citdl="list" name="view_types" />
      <import module="weakref" />
    </scope>
    <scope doc="Support module for CGI (Common Gateway Interface) scripts.  This module defines a number of utilities for use by CGI scripts" ilk="blob" lang="Python3" name="cgi">
      <scope classrefs="object" doc="Store a sequence of fields, reading multipart/form-data.  This class provides naming, typing, files stored on disk, and" ilk="class" line="336" lineend="749" name="FieldStorage">
        <variable attributes="__instancevar__" citdl="dict" line="445" name="disposition_options" />
        <scope doc="Return list of received values." ilk="function" line="552" lineend="561" name="getlist" returns="list" signature="getlist(key)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable line="555" name="value" />
        </scope>
        <scope doc="Dictionary style get() method, including &apos;value&apos; lookup." ilk="function" line="530" lineend="539" name="getvalue" returns="value.value" signature="getvalue(key, default=None)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
          <variable line="533" name="value" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="487" name="done" />
        <variable attributes="__instancevar__" citdl="StringIO()" line="635" name="file" />
        <variable attributes="__instancevar__" citdl="int" line="410" name="strict_parsing" />
        <variable citdl="int" line="631" name="bufsize" />
        <scope attributes="__ctor__" doc="Constructor. Read multipart/* until last part." ilk="function" line="379" lineend="493" name="__init__" signature="FieldStorage(fp=None, headers=None, outerboundary=&apos;&apos;, environ=os.environ, keep_blank_values=0, strict_parsing=0)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="StringIO()" ilk="argument" name="fp" />
          <variable citdl="dict" ilk="argument" name="headers" />
          <variable citdl="str" ilk="argument" name="outerboundary" />
          <variable citdl="os.environ" ilk="argument" name="environ" />
          <variable citdl="int" ilk="argument" name="keep_blank_values" />
          <variable citdl="int" ilk="argument" name="strict_parsing" />
          <variable citdl="str" line="408" name="method" />
          <variable citdl="str" line="416" name="qs" />
          <variable citdl="dict" line="441" name="pdict" />
          <variable citdl="str" line="441" name="cdisp" />
          <variable citdl="str" line="468" name="ctype" />
          <variable citdl="int" line="476" name="clen" />
        </scope>
        <variable attributes="private __instancevar__" line="660" name="__file" />
        <scope doc="Dictionary style __contains__ method." ilk="function" line="569" lineend="573" name="__contains__" returns="any()" signature="__contains__(key)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope doc="Internal: read a part that is itself multipart." ilk="function" line="595" lineend="620" name="read_multi" signature="read_multi(environ, keep_blank_values, strict_parsing)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="environ" />
          <variable ilk="argument" name="keep_blank_values" />
          <variable ilk="argument" name="strict_parsing" />
          <variable citdl="str" line="597" name="ib" />
          <variable line="605" name="FieldStorageClass" />
          <variable citdl="self.__class__" line="607" name="klass" />
          <variable citdl="email.parser.FeedParser()" line="608" name="parser" />
          <variable citdl="parser.close()" line="612" name="full_msg" />
          <variable citdl="full_msg.get_payload()" line="614" name="msgs" />
          <variable citdl="StringIO()" line="616" name="fp" />
          <variable citdl="klass()" line="617" name="part" />
        </scope>
        <scope doc="Overridable: return a readable &amp; writable file." ilk="function" line="725" lineend="749" name="make_file" returns="tempfile.TemporaryFile()" signature="make_file()">
          <import line="748" module="tempfile" />
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="503" lineend="514" name="__getattr__" returns="self.file.read()" signature="__getattr__(name)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="self.file.read()" line="508" name="value" />
        </scope>
        <variable attributes="__instancevar__" line="449" name="filename" />
        <variable attributes="__instancevar__" citdl="int" line="409" name="keep_blank_values" />
        <scope doc="Internal: read lines until outerboundary." ilk="function" line="672" lineend="702" name="read_lines_to_outerboundary" signature="read_lines_to_outerboundary()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="str" line="674" name="next" />
          <variable citdl="str" line="675" name="last" />
          <variable citdl="str" line="676" name="delim" />
          <variable citdl="True" line="677" name="last_line_lfend" />
          <variable citdl="list" line="679" name="line" />
          <variable citdl="line.strip()" line="684" name="strippedline" />
          <variable citdl="str" line="690" name="odelim" />
        </scope>
        <scope doc="Internal: read lines until EOF or outerboundary." ilk="function" line="646" lineend="652" name="read_lines" signature="read_lines()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal: read data in query string format." ilk="function" line="582" lineend="591" name="read_urlencoded" signature="read_urlencoded()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="self.fp.read()" line="584" name="qs" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="471" name="type" />
        <scope doc="Dictionary style len(x) support." ilk="function" line="575" lineend="577" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="sys.stdin" line="436" name="fp" />
        <scope doc="Dictionary style indexing." ilk="function" line="516" lineend="528" name="__getitem__" returns="list" signature="__getitem__(key)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="list" line="520" name="found" />
        </scope>
        <scope doc="Dictionary style keys() method." ilk="function" line="563" lineend="567" name="keys" returns="FieldStorage.list()" signature="keys()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <scope doc="Internal: skip lines until outer boundary if defined." ilk="function" line="704" lineend="723" name="skip_lines" signature="skip_lines()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="str" line="708" name="next" />
          <variable citdl="str" line="709" name="last" />
          <variable citdl="line.endswith()" line="710" name="last_line_lfend" />
          <variable citdl="self.fp.readline()" line="712" name="line" />
          <variable citdl="line.strip()" line="717" name="strippedline" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="473" name="innerboundary" />
        <scope ilk="function" line="500" lineend="501" name="__iter__" returns="iter()" signature="__iter__()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="444" name="disposition" />
        <variable attributes="__instancevar__" line="413" name="qs_on_post" />
        <variable attributes="__instancevar__" citdl="str" line="438" name="outerboundary" />
        <scope attributes="private" ilk="function" line="654" lineend="661" name="__write" signature="__write(line)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
          <variable citdl="self.__file.getvalue()" line="658" name="data" />
        </scope>
        <scope doc="Internal: read lines until EOF." ilk="function" line="663" lineend="670" name="read_lines_to_eof" signature="read_lines_to_eof()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="self.fp.readline()" line="666" name="line" />
        </scope>
        <scope doc="Internal: read binary data." ilk="function" line="633" lineend="644" name="read_binary" signature="read_binary()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable citdl="int()" line="636" name="todo" />
          <variable citdl="self.fp.read()" line="639" name="data" />
        </scope>
        <scope ilk="function" line="579" lineend="580" name="__nonzero__" returns="bool()" signature="__nonzero__()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="446" name="name" />
        <scope doc="Internal: read an atomic part." ilk="function" line="622" lineend="629" name="read_single" signature="read_single()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="486" name="list" />
        <variable attributes="__instancevar__" citdl="dict" line="437" name="headers" />
        <variable attributes="__instancevar__" citdl="int" line="484" name="length" />
        <variable line="593" name="FieldStorageClass" />
        <scope doc="Return a printable representation." ilk="function" line="495" lineend="498" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="472" name="type_options" />
        <scope doc="Return the first value received." ilk="function" line="541" lineend="550" name="getfirst" returns="value.value" signature="getfirst(key, default=None)">
          <variable citdl="FieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
          <variable line="544" name="value" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Like FieldStorage, for use when no file uploads are possible." ilk="class" line="311" lineend="333" name="MiniFieldStorage">
        <variable citdl="dict" line="322" name="disposition_options" />
        <variable line="319" name="file" />
        <variable line="317" name="list" />
        <variable attributes="__instancevar__" line="328" name="value" />
        <variable line="316" name="filename" />
        <variable citdl="dict" line="323" name="headers" />
        <scope doc="Return printable representation." ilk="function" line="331" lineend="333" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="MiniFieldStorage" ilk="argument" name="self" />
        </scope>
        <variable line="321" name="disposition" />
        <variable citdl="dict" line="320" name="type_options" />
        <variable line="318" name="type" />
        <scope attributes="__ctor__" doc="Constructor from field name and value." ilk="function" line="325" lineend="328" name="__init__" signature="MiniFieldStorage(name, value)">
          <variable citdl="MiniFieldStorage" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" line="327" name="name" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <variable citdl="list" line="42" name="__all__" />
      <variable citdl="str" line="28" name="__version__" />
      <scope classrefs="object" doc="attrgetter(attr, ...) --&gt; attrgetter object  Return a callable object that fetches the given attribute(s) from its operand." ilk="class" name="attrgetter" />
      <scope doc="Write a log message to the log file. See initlog() for docs." ilk="function" line="89" lineend="91" name="dolog" signature="dolog(fmt, *args)">
        <variable ilk="argument" name="fmt" />
        <variable attributes="varargs" ilk="argument" name="args" />
      </scope>
      <import module="email" />
      <scope doc="Replace special characters &quot;&amp;&quot;, &quot;&lt;&quot; and &quot;&gt;&quot; to HTML-safe sequences." ilk="function" line="901" lineend="910" name="escape" returns="s.replace()" signature="escape(s, quote=None)">
        <variable ilk="argument" name="quote" />
        <variable citdl="s.replace()" ilk="argument" name="s" />
      </scope>
      <scope doc="Write a log message, if there is a log file." ilk="function" line="54" lineend="87" name="initlog" signature="initlog(*allargs)">
        <variable citdl="open()" line="80" name="logfp" />
        <variable attributes="varargs" ilk="argument" name="allargs" />
        <variable citdl="dolog" line="84" name="log" />
      </scope>
      <scope doc="Write a log message, if there is a log file." ilk="function" line="97" name="log" signature="log(*allargs)" />
      <variable citdl="str" line="51" name="logfile" />
      <variable citdl="NoneType" line="52" name="logfp" />
      <variable citdl="int" line="105" name="maxlen" />
      <scope doc="Dummy function, assigned to log when logging is disabled." ilk="function" line="93" lineend="95" name="nolog" signature="nolog(*allargs)">
        <variable attributes="varargs" ilk="argument" name="allargs" />
      </scope>
      <import module="os" />
      <scope doc="Parse a query in the environment or from a file (default stdin)" ilk="function" line="107" lineend="157" name="parse" returns="parse_multipart()" signature="parse(fp=None, environ=os.environ, keep_blank_values=0, strict_parsing=0)">
        <variable citdl="sys.stdin" ilk="argument" name="fp" />
        <variable citdl="str" line="139" name="qs" />
        <variable citdl="int" ilk="argument" name="keep_blank_values" />
        <variable citdl="os.environ" ilk="argument" name="environ" />
        <variable citdl="int" ilk="argument" name="strict_parsing" />
        <variable citdl="int()" line="136" name="clength" />
      </scope>
      <scope doc="Parse a Content-type like header." ilk="function" line="287" lineend="305" name="parse_header" returns="tuple" signature="parse_header(line)">
        <variable citdl="dict" line="295" name="pdict" />
        <variable citdl="p.find()" line="297" name="i" />
        <variable citdl="list" line="300" name="value" />
        <variable citdl="_parseparam()" line="293" name="parts" />
        <variable citdl="parts.__next__()" line="294" name="key" />
        <variable ilk="argument" name="line" />
        <variable line="299" name="name" />
      </scope>
      <scope doc="Parse multipart input." ilk="function" line="175" lineend="272" name="parse_multipart" returns="dict" signature="parse_multipart(fp, pdict)">
        <variable ilk="argument" name="fp" />
        <variable ilk="argument" name="pdict" />
        <variable citdl="list" line="233" name="lines" />
        <variable citdl="dict" line="211" name="partdict" />
        <variable citdl="int" line="215" name="bytes" />
        <variable line="264" name="name" />
        <variable citdl="str" line="209" name="nextpart" />
        <variable citdl="http.client.parse_headers()" line="219" name="headers" />
        <variable citdl="str" line="212" name="terminator" />
        <variable citdl="list" line="235" name="line" />
        <variable citdl="headers.get()" line="220" name="clength" />
        <variable citdl="fp.read()" line="216" name="data" />
        <variable citdl="str" line="202" name="boundary" />
        <variable citdl="str" line="210" name="lastpart" />
      </scope>
      <scope doc="Parse a query given as a string argument." ilk="function" line="163" lineend="167" name="parse_qs" returns="urllib.parse.parse_qs()" signature="parse_qs(qs, keep_blank_values=0, strict_parsing=0)">
        <variable citdl="int" ilk="argument" name="keep_blank_values" />
        <variable citdl="int" ilk="argument" name="strict_parsing" />
        <variable ilk="argument" name="qs" />
      </scope>
      <scope doc="Parse a query given as a string argument." ilk="function" line="169" lineend="173" name="parse_qsl" returns="urllib.parse.parse_qsl()" signature="parse_qsl(qs, keep_blank_values=0, strict_parsing=0)">
        <variable citdl="int" ilk="argument" name="keep_blank_values" />
        <variable citdl="int" ilk="argument" name="strict_parsing" />
        <variable ilk="argument" name="qs" />
      </scope>
      <scope ilk="function" line="847" lineend="852" name="print_arguments" signature="print_arguments()" />
      <scope doc="Dump the current directory as HTML." ilk="function" line="835" lineend="845" name="print_directory" signature="print_directory()">
        <variable citdl="os.getcwd()" line="840" name="pwd" />
      </scope>
      <scope doc="Dump the shell environment as HTML." ilk="function" line="808" lineend="817" name="print_environ" signature="print_environ(environ=os.environ)">
        <variable citdl="sorted()" line="810" name="keys" />
        <variable citdl="os.environ" ilk="argument" name="environ" />
      </scope>
      <scope doc="Dump a list of environment variables used by CGI as HTML." ilk="function" line="854" lineend="895" name="print_environ_usage" signature="print_environ_usage()" />
      <scope ilk="function" line="794" lineend="806" name="print_exception" signature="print_exception(type=None, value=None, tb=None, limit=None)">
        <variable ilk="argument" name="tb" />
        <variable citdl="traceback.format_tb()" line="800" name="list" />
        <variable ilk="argument" name="limit" />
        <variable ilk="argument" name="value" />
        <variable ilk="argument" name="type" />
      </scope>
      <scope doc="Dump the contents of a form as HTML." ilk="function" line="819" lineend="833" name="print_form" signature="print_form(form)">
        <variable citdl="sorted()" line="821" name="keys" />
        <variable line="829" name="value" />
        <variable ilk="argument" name="form" />
      </scope>
      <import module="sys" />
      <scope doc="Robust test CGI script, usable as main program." ilk="function" line="755" lineend="792" name="test" signature="test(environ=os.environ)">
        <variable citdl="int" line="784" name="maxlen" />
        <variable citdl="os.environ" ilk="argument" name="environ" />
        <scope ilk="function" line="774" lineend="775" name="g" signature="g(f=f)">
          <variable citdl="test.f" ilk="argument" name="f" />
        </scope>
        <variable citdl="FieldStorage" line="766" name="form" />
        <scope ilk="function" line="772" lineend="773" name="f" signature="f()" />
      </scope>
      <import module="urllib" />
      <scope ilk="function" line="912" lineend="914" name="valid_boundary" returns="re.match()" signature="valid_boundary(s, _vb_pattern=&apos;^[ -~]{0,200}[!-~]$&apos;)">
        <variable ilk="argument" name="s" />
        <variable citdl="str" ilk="argument" name="_vb_pattern" />
      </scope>
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <scope attributes="protected __hidden__" ilk="function" line="275" lineend="285" name="_parseparam" signature="_parseparam(s)">
        <variable citdl="list" ilk="argument" name="s" />
        <variable citdl="s.find()" line="278" name="end" />
        <variable citdl="list" line="283" name="f" />
      </scope>
    </scope>
    <scope doc="Get useful information from live Python objects.  This module encapsulates the interface provided by the internal special" ilk="blob" lang="Python3" name="inspect">
      <scope classrefs="tuple" doc="ArgInfo(args, varargs, keywords, locals)" ilk="class" line="819" name="ArgInfo" />
      <scope classrefs="tuple" doc="ArgSpec(args, varargs, keywords, defaults)" ilk="class" line="770" name="ArgSpec" />
      <scope classrefs="tuple" doc="Arguments(args, varargs, varkw)" ilk="class" line="729" name="Arguments" />
      <scope classrefs="tuple" doc="Attribute(name, kind, defining_class, object)" ilk="class" line="257" name="Attribute" />
      <scope classrefs="object" doc="Provide a tokeneater() method to detect the end of a code block." ilk="class" line="620" lineend="657" name="BlockFinder">
        <variable attributes="__instancevar__" citdl="int" line="623" name="indent" />
        <variable attributes="__instancevar__" citdl="False" line="625" name="started" />
        <variable attributes="__instancevar__" citdl="False" line="624" name="islambda" />
        <variable attributes="__instancevar__" citdl="True" line="626" name="passline" />
        <scope ilk="function" line="629" lineend="657" name="tokeneater" signature="tokeneater(type, token, srowcol, erowcol, line)">
          <variable citdl="BlockFinder" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="token" />
          <variable ilk="argument" name="srowcol" />
          <variable ilk="argument" name="erowcol" />
          <variable ilk="argument" name="line" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="627" name="last" />
        <scope attributes="__ctor__" ilk="function" line="622" lineend="627" name="__init__" signature="BlockFinder()">
          <variable citdl="BlockFinder" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="int" line="46" name="CO_GENERATOR" />
      <variable citdl="int" line="46" name="CO_NESTED" />
      <variable citdl="int" line="45" name="CO_NEWLOCALS" />
      <variable citdl="int" line="46" name="CO_NOFREE" />
      <variable citdl="int" line="45" name="CO_OPTIMIZED" />
      <variable citdl="int" line="45" name="CO_VARARGS" />
      <variable citdl="int" line="45" name="CO_VARKEYWORDS" />
      <scope classrefs="Exception" ilk="class" line="618" lineend="618" name="EndOfBlock" />
      <scope classrefs="tuple" doc="FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)" ilk="class" line="793" name="FullArgSpec" />
      <scope classrefs="tuple" doc="ModuleInfo(name, suffix, mode, module_type)" ilk="class" line="420" name="ModuleInfo" />
      <variable citdl="int" line="49" name="TPFLAGS_IS_ABSTRACT" />
      <scope classrefs="tuple" doc="Traceback(filename, lineno, function, code_context, index)" ilk="class" line="931" name="Traceback" />
      <variable citdl="str" line="30" name="__author__" />
      <variable citdl="str" line="31" name="__date__" />
      <scope classrefs="object" doc="attrgetter(attr, ...) --&gt; attrgetter object  Return a callable object that fetches the given attribute(s) from its operand." ilk="class" name="attrgetter" />
      <scope doc="Return list of attribute-descriptor tuples." ilk="function" line="259" lineend="327" name="classify_class_attrs" returns="list" signature="classify_class_attrs(cls)">
        <variable citdl="str" line="314" name="kind" />
        <variable citdl="getattr()" line="291" name="obj" />
        <variable citdl="getmro()" line="283" name="mro" />
        <variable citdl="dir()" line="284" name="names" />
        <variable citdl="getattr()" line="310" name="obj_via_getattr" />
        <variable citdl="getattr()" line="296" name="homecls" />
        <variable ilk="argument" name="cls" />
        <variable citdl="list" line="285" name="result" />
      </scope>
      <scope doc="Clean up indentation from docstrings." ilk="function" line="367" lineend="394" name="cleandoc" returns="str.join()" signature="cleandoc(doc)">
        <variable citdl="len()" line="380" name="content" />
        <variable ilk="argument" name="doc" />
        <variable citdl="min()" line="378" name="margin" />
        <variable citdl="len()" line="382" name="indent" />
        <variable line="373" name="lines" />
      </scope>
      <scope doc="Return a frame object from the call stack." ilk="function" line="994" name="currentframe" signature="_getframe([depth]) -&gt; frameobject" />
      <import module="dis" />
      <scope doc="Return the entire source file and starting line number for an object." ilk="function" line="510" lineend="571" name="findsource" returns="tuple" signature="findsource(object)">
        <variable citdl="re.compile()" line="533" name="pat" />
        <variable citdl="object.__name__" line="532" name="name" />
        <variable citdl="object.co_firstlineno" line="565" name="lnum" />
        <variable citdl="object.__code__" ilk="argument" name="object" />
        <variable citdl="linecache.getlines()" line="522" name="lines" />
        <variable citdl="getmodule()" line="520" name="module" />
        <variable citdl="list" line="537" name="candidates" />
        <variable citdl="getsourcefile()" line="517" name="file" />
        <variable citdl="pat.match()" line="539" name="match" />
      </scope>
      <scope ilk="function" line="844" lineend="849" name="formatannotation" returns="annotation.__module__" signature="formatannotation(annotation, base_module=None)">
        <variable ilk="argument" name="annotation" />
        <variable ilk="argument" name="base_module" />
      </scope>
      <scope ilk="function" line="851" lineend="855" name="formatannotationrelativeto" returns="formatannotationrelativeto._formatannotation" signature="formatannotationrelativeto(object)">
        <scope attributes="protected" ilk="function" line="853" lineend="854" name="_formatannotation" returns="formatannotation()" signature="_formatannotation(annotation)">
          <variable ilk="argument" name="annotation" />
        </scope>
        <variable ilk="argument" name="object" />
        <variable citdl="getattr()" line="852" name="module" />
      </scope>
      <scope doc="Format an argument spec from the values returned by getargspec or getfullargspec." ilk="function" line="857" lineend="903" name="formatargspec" returns="str" signature="formatargspec(args, varargs=None, varkw=None, defaults=None, kwonlyargs=(), kwonlydefaults={}, annotations={}, formatarg=&lt;class &apos;str&apos;&gt;, formatvarargs=&lt;function &lt;lambda&gt; at 0x020C20C0&gt;, formatvarkw=&lt;function &lt;lambda&gt; at 0x020C2108&gt;, formatvalue=&lt;function &lt;lambda&gt; at 0x020C2150&gt;, formatreturns=&lt;function &lt;lambda&gt; at 0x020C2198&gt;, formatannotation=&lt;function formatannotation at 0x020C2030&gt;, join=&lt;function joinseq at 0x020BCD68&gt;)">
        <variable citdl="tuple" ilk="argument" name="kwonlyargs" />
        <variable ilk="argument" name="formatvalue" />
        <variable citdl="joinseq" ilk="argument" name="join" />
        <variable ilk="argument" name="formatvarkw" />
        <scope ilk="function" line="874" lineend="878" name="formatargandannotation" returns="formatarg()" signature="formatargandannotation(arg)">
          <variable ilk="argument" name="arg" />
          <variable citdl="formatarg()" line="875" name="result" />
        </scope>
        <variable citdl="strseq()" line="883" name="spec" />
        <variable ilk="argument" name="args" />
        <variable citdl="len()" line="881" name="firstdefault" />
        <variable citdl="list" line="879" name="specs" />
        <variable citdl="str" ilk="argument" name="formatarg" />
        <variable ilk="argument" name="formatvarargs" />
        <variable citdl="str" line="900" name="result" />
        <variable ilk="argument" name="defaults" />
        <variable ilk="argument" name="varargs" />
        <variable citdl="dict" ilk="argument" name="kwonlydefaults" />
        <variable citdl="formatannotation" ilk="argument" name="formatannotation" />
        <variable ilk="argument" name="varkw" />
        <variable citdl="dict" ilk="argument" name="annotations" />
        <variable ilk="argument" name="formatreturns" />
      </scope>
      <scope doc="Format an argument spec from the 4 values returned by getargvalues." ilk="function" line="905" lineend="927" name="formatargvalues" returns="str" signature="formatargvalues(args, varargs, varkw, locals, formatarg=&lt;class &apos;str&apos;&gt;, formatvarargs=&lt;function &lt;lambda&gt; at 0x020C2228&gt;, formatvarkw=&lt;function &lt;lambda&gt; at 0x020C2270&gt;, formatvalue=&lt;function &lt;lambda&gt; at 0x020C22B8&gt;, join=&lt;function joinseq at 0x020BCD68&gt;)">
        <scope ilk="function" line="917" lineend="919" name="convert" returns="formatargvalues.convert.formatvalue()" signature="convert(name, locals=locals, formatarg=formatarg, formatvalue=formatvalue)">
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="locals" />
          <variable citdl="str" ilk="argument" name="formatarg" />
          <variable ilk="argument" name="formatvalue" />
        </scope>
        <variable ilk="argument" name="args" />
        <variable citdl="joinseq" ilk="argument" name="join" />
        <variable ilk="argument" name="formatvarkw" />
        <variable ilk="argument" name="formatvalue" />
        <variable citdl="str" ilk="argument" name="formatarg" />
        <variable ilk="argument" name="varargs" />
        <variable ilk="argument" name="formatvarargs" />
        <variable ilk="argument" name="varkw" />
        <variable citdl="list" line="920" name="specs" />
        <variable ilk="argument" name="locals" />
      </scope>
      <scope doc="Return an absolute path to the source or compiled file for an object." ilk="function" line="452" lineend="459" name="getabsfile" returns="os.path.normcase()" signature="getabsfile(object, _filename=None)">
        <variable citdl="getsourcefile()" ilk="argument" name="_filename" />
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Get information about the arguments accepted by a code object." ilk="function" line="731" lineend="739" name="getargs" returns="Arguments()" signature="getargs(co)">
        <variable ilk="argument" name="co" />
      </scope>
      <scope doc="Get the names and default values of a function&apos;s arguments." ilk="function" line="772" lineend="791" name="getargspec" returns="ArgSpec()" signature="getargspec(func)">
        <variable ilk="argument" name="func" />
      </scope>
      <scope doc="Get information about arguments passed into a particular frame." ilk="function" line="821" lineend="829" name="getargvalues" returns="ArgInfo()" signature="getargvalues(frame)">
        <variable ilk="argument" name="frame" />
      </scope>
      <scope doc="Extract the block of code at the top of the given list of lines." ilk="function" line="659" lineend="668" name="getblock" returns="list" signature="getblock(lines)">
        <variable citdl="BlockFinder" line="661" name="blockfinder" />
        <variable citdl="tokenize.generate_tokens()" line="663" name="tokens" />
        <variable ilk="argument" name="lines" />
      </scope>
      <scope doc="Arrange the given list of classes into a hierarchy of nested lists." ilk="function" line="703" lineend="726" name="getclasstree" returns="walktree()" signature="getclasstree(classes, unique=False)">
        <variable citdl="False" ilk="argument" name="unique" />
        <variable ilk="argument" name="classes" />
        <variable citdl="dict" line="712" name="children" />
        <variable citdl="list" line="713" name="roots" />
      </scope>
      <scope doc="Get lines of comments immediately preceding an object&apos;s source code." ilk="function" line="573" lineend="616" name="getcomments" returns="str.join()" signature="getcomments(object)">
        <variable line="606" name="comment" />
        <variable citdl="lnum" line="591" name="end" />
        <variable ilk="argument" name="object" />
        <variable citdl="list" line="590" name="comments" />
        <variable citdl="int" line="585" name="start" />
        <variable citdl="indentsize()" line="599" name="indent" />
      </scope>
      <scope doc="Get the documentation string for an object." ilk="function" line="353" lineend="365" name="getdoc" returns="cleandoc()" signature="getdoc(object)">
        <variable citdl="object.__doc__" line="360" name="doc" />
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Work out which source or compiled file an object was defined in." ilk="function" line="396" lineend="418" name="getfile" returns="object.co_filename" signature="getfile(object)">
        <variable citdl="object.f_code" ilk="argument" name="object" />
      </scope>
      <scope doc="Get information about a frame or traceback object." ilk="function" line="933" lineend="964" name="getframeinfo" returns="Traceback()" signature="getframeinfo(frame, context=1)">
        <variable citdl="frame.tb_lineno" line="960" name="index" />
        <variable citdl="frame.tb_frame" ilk="argument" name="frame" />
        <variable citdl="list" line="955" name="lines" />
        <variable citdl="getsourcefile()" line="949" name="filename" />
        <variable citdl="max()" line="951" name="start" />
        <variable citdl="frame.tb_lineno" line="942" name="lineno" />
        <variable citdl="int" ilk="argument" name="context" />
      </scope>
      <scope doc="Get the names and default values of a function&apos;s arguments." ilk="function" line="796" lineend="817" name="getfullargspec" returns="FullArgSpec()" signature="getfullargspec(func)">
        <variable citdl="func.__func__" ilk="argument" name="func" />
      </scope>
      <scope doc="Get a list of records for a traceback&apos;s frame and all lower frames." ilk="function" line="982" lineend="991" name="getinnerframes" returns="list" signature="getinnerframes(tb, context=1)">
        <variable citdl="list" line="987" name="framelist" />
        <variable citdl="tb.tb_next" ilk="argument" name="tb" />
        <variable citdl="int" ilk="argument" name="context" />
      </scope>
      <scope doc="Get the line number from a frame object, allowing for optimization." ilk="function" line="966" lineend="969" name="getlineno" returns="frame.f_lineno" signature="getlineno(frame)">
        <variable ilk="argument" name="frame" />
      </scope>
      <scope doc="Return all members of an object as (name, value) pairs sorted by name." ilk="function" line="243" lineend="255" name="getmembers" returns="list" signature="getmembers(object, predicate=None)">
        <variable ilk="argument" name="predicate" />
        <variable ilk="argument" name="object" />
        <variable citdl="list" line="246" name="results" />
        <variable citdl="getattr()" line="249" name="value" />
      </scope>
      <scope doc="Return the module an object was defined in, or None if not found." ilk="function" line="464" lineend="508" name="getmodule" returns="sys.modules.get()" signature="getmodule(object, _filename=None)">
        <variable citdl="module.__file__" line="484" name="f" />
        <variable ilk="argument" name="_filename" />
        <variable ilk="argument" name="object" />
        <variable line="504" name="builtin" />
        <variable citdl="getabsfile()" line="475" name="file" />
        <variable citdl="getattr()" line="506" name="builtinobject" />
        <variable line="496" name="main" />
        <variable citdl="getattr()" line="500" name="mainobject" />
      </scope>
      <scope doc="Get the module name, suffix, mode, and module type for a given file." ilk="function" line="422" lineend="430" name="getmoduleinfo" returns="ModuleInfo()" signature="getmoduleinfo(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="list" line="425" name="suffixes" />
        <variable citdl="os.path.basename()" line="424" name="filename" />
      </scope>
      <scope doc="Return the module name for a given file, or None." ilk="function" line="432" lineend="435" name="getmodulename" signature="getmodulename(path)">
        <variable citdl="getmoduleinfo()" line="434" name="info" />
        <variable ilk="argument" name="path" />
      </scope>
      <scope doc="Return tuple of base classes (including cls) in method resolution order." ilk="function" line="338" lineend="345" name="getmro" returns="cls.__mro__" signature="getmro(cls)">
        <variable citdl="list" line="343" name="result" />
        <variable ilk="argument" name="cls" />
      </scope>
      <scope doc="Get a list of records for a frame and all higher (calling) frames." ilk="function" line="971" lineend="980" name="getouterframes" returns="list" signature="getouterframes(frame, context=1)">
        <variable citdl="frame.f_back" ilk="argument" name="frame" />
        <variable citdl="list" line="976" name="framelist" />
        <variable citdl="int" ilk="argument" name="context" />
      </scope>
      <scope doc="Return the text of the source code for an object." ilk="function" line="683" lineend="690" name="getsource" returns="str.join()" signature="getsource(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return the Python source file an object was defined in, if it exists." ilk="function" line="437" lineend="450" name="getsourcefile" returns="str" signature="getsourcefile(object)">
        <variable ilk="argument" name="object" />
        <variable citdl="list" line="439" name="filename" />
      </scope>
      <scope doc="Return a list of source lines and starting line number for an object." ilk="function" line="670" lineend="681" name="getsourcelines" returns="tuple" signature="getsourcelines(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <import module="imp" />
      <scope doc="Return the indent size, in spaces, at the start of a line of text." ilk="function" line="348" lineend="351" name="indentsize" returns="len()" signature="indentsize(line)">
        <variable citdl="line.expandtabs()" line="350" name="expline" />
        <variable ilk="argument" name="line" />
      </scope>
      <scope doc="Return true if the object is an abstract base class (ABC)." ilk="function" line="239" lineend="241" name="isabstract" returns="bool()" signature="isabstract(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a built-in function or method." ilk="function" line="223" lineend="230" name="isbuiltin" returns="isinstance()" signature="isbuiltin(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a class." ilk="function" line="60" lineend="66" name="isclass" returns="isinstance()" signature="isclass(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a code object." ilk="function" line="205" lineend="221" name="iscode" returns="isinstance()" signature="iscode(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a data descriptor." ilk="function" line="98" lineend="106" name="isdatadescriptor" returns="hasattr()" signature="isdatadescriptor(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a frame object." ilk="function" line="191" lineend="203" name="isframe" returns="isinstance()" signature="isframe(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a user-defined function." ilk="function" line="142" lineend="153" name="isfunction" returns="isinstance()" signature="isfunction(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a generator." ilk="function" line="164" lineend="179" name="isgenerator" returns="isinstance()" signature="isgenerator(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a user-defined generator function." ilk="function" line="155" lineend="162" name="isgeneratorfunction" returns="bool()" signature="isgeneratorfunction(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a getset descriptor." ilk="function" line="135" lineend="140" name="isgetsetdescriptor" returns="bool" signature="isgetsetdescriptor(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a member descriptor." ilk="function" line="118" lineend="123" name="ismemberdescriptor" returns="bool" signature="ismemberdescriptor(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is an instance method." ilk="function" line="68" lineend="76" name="ismethod" returns="isinstance()" signature="ismethod(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a method descriptor." ilk="function" line="78" lineend="96" name="ismethoddescriptor" returns="bool" signature="ismethoddescriptor(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a module." ilk="function" line="52" lineend="58" name="ismodule" returns="isinstance()" signature="ismodule(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is any kind of function or method." ilk="function" line="232" lineend="237" name="isroutine" returns="isbuiltin()" signature="isroutine(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope doc="Return true if the object is a traceback." ilk="function" line="181" lineend="189" name="istraceback" returns="isinstance()" signature="istraceback(object)">
        <variable ilk="argument" name="object" />
      </scope>
      <scope ilk="function" line="831" lineend="835" name="joinseq" returns="str" signature="joinseq(seq)">
        <variable ilk="argument" name="seq" />
      </scope>
      <import module="linecache" />
      <variable citdl="dict" line="461" name="modulesbyfile" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <import module="os" />
      <import module="re" />
      <scope doc="Return a list of records for the stack above the caller&apos;s frame." ilk="function" line="998" lineend="1000" name="stack" returns="getouterframes()" signature="stack(context=1)">
        <variable citdl="int" ilk="argument" name="context" />
      </scope>
      <import module="string" />
      <scope doc="Recursively walk a sequence, stringifying each element." ilk="function" line="837" lineend="842" name="strseq" returns="strseq.join()" signature="strseq(object, convert, join=&lt;function joinseq at 0x020BCD68&gt;)">
        <variable ilk="argument" name="convert" />
        <variable ilk="argument" name="object" />
        <variable citdl="joinseq" ilk="argument" name="join" />
      </scope>
      <import module="sys" />
      <import module="tokenize" />
      <scope doc="Return a list of records for the stack below the current exception." ilk="function" line="1002" lineend="1004" name="trace" returns="getinnerframes()" signature="trace(context=1)">
        <variable citdl="int" ilk="argument" name="context" />
      </scope>
      <import module="types" />
      <scope doc="Recursive helper function for getclasstree()." ilk="function" line="693" lineend="701" name="walktree" returns="list" signature="walktree(classes, children, parent)">
        <variable ilk="argument" name="classes" />
        <variable ilk="argument" name="children" />
        <variable ilk="argument" name="parent" />
        <variable citdl="list" line="695" name="results" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="330" lineend="336" name="_searchbases" signature="_searchbases(cls, accum)">
        <variable ilk="argument" name="cls" />
        <variable ilk="argument" name="accum" />
      </scope>
      <scope attributes="protected __hidden__" doc="Get information about the arguments accepted by a code object." ilk="function" line="741" lineend="767" name="_getfullargs" returns="tuple" signature="_getfullargs(co)">
        <variable ilk="argument" name="co" />
        <variable citdl="co.co_argcount" line="752" name="nargs" />
        <variable citdl="co.co_varnames" line="753" name="names" />
        <variable citdl="co.co_kwonlyargcount" line="754" name="nkwargs" />
        <variable citdl="list()" line="755" name="args" />
        <variable citdl="list()" line="756" name="kwonlyargs" />
        <variable citdl="int" line="757" name="step" />
        <variable line="760" name="varargs" />
        <variable line="764" name="varkw" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="462" name="_filesbymodname" />
    </scope>
    <scope doc="#-*- coding: ISO-8859-1 -*- # pysqlite2/dbapi2.py: the DB-API 2.0 interface #" ilk="blob" lang="Python3" name="sqlite3.dbapi2">
      <scope classrefs="object" doc="memoryview(object)  Create a new memoryview object which references the given object." ilk="class" line="53" name="Binary" />
      <scope classrefs="object" ilk="class" name="Cache" />
      <scope classrefs="object" doc="SQLite database connection object." ilk="class" name="Connection" />
      <scope classrefs="object" doc="SQLite database cursor class." ilk="class" name="Cursor" />
      <scope classrefs="DatabaseError" ilk="class" name="DataError" />
      <scope classrefs="Error" ilk="class" name="DatabaseError" />
      <scope classrefs="object" doc="date(year, month, day) --&gt; date object" ilk="class" line="35" name="Date" />
      <scope ilk="function" line="41" lineend="42" name="DateFromTicks" returns="Date()" signature="DateFromTicks(ticks)">
        <variable ilk="argument" name="ticks" />
      </scope>
      <scope classrefs="Exception" ilk="class" name="Error" />
      <scope classrefs="DatabaseError" ilk="class" name="IntegrityError" />
      <scope classrefs="Error" ilk="class" name="InterfaceError" />
      <scope classrefs="DatabaseError" ilk="class" name="InternalError" />
      <scope classrefs="DatabaseError" ilk="class" name="NotSupportedError" />
      <scope classrefs="DatabaseError" ilk="class" name="OperationalError" />
      <scope classrefs="object" ilk="class" name="OptimizedUnicode" />
      <variable citdl="int" name="PARSE_COLNAMES" />
      <variable citdl="int" name="PARSE_DECLTYPES" />
      <scope classrefs="object" ilk="class" name="PrepareProtocol" />
      <scope classrefs="DatabaseError" ilk="class" name="ProgrammingError" />
      <scope classrefs="object" ilk="class" name="Row" />
      <variable citdl="int" name="SQLITE_ALTER_TABLE" />
      <variable citdl="int" name="SQLITE_ANALYZE" />
      <variable citdl="int" name="SQLITE_ATTACH" />
      <variable citdl="int" name="SQLITE_CREATE_INDEX" />
      <variable citdl="int" name="SQLITE_CREATE_TABLE" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_INDEX" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_TABLE" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_TRIGGER" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_VIEW" />
      <variable citdl="int" name="SQLITE_CREATE_TRIGGER" />
      <variable citdl="int" name="SQLITE_CREATE_VIEW" />
      <variable citdl="int" name="SQLITE_DELETE" />
      <variable citdl="int" name="SQLITE_DENY" />
      <variable citdl="int" name="SQLITE_DETACH" />
      <variable citdl="int" name="SQLITE_DROP_INDEX" />
      <variable citdl="int" name="SQLITE_DROP_TABLE" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_INDEX" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_TABLE" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_TRIGGER" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_VIEW" />
      <variable citdl="int" name="SQLITE_DROP_TRIGGER" />
      <variable citdl="int" name="SQLITE_DROP_VIEW" />
      <variable citdl="int" name="SQLITE_IGNORE" />
      <variable citdl="int" name="SQLITE_INSERT" />
      <variable citdl="int" name="SQLITE_OK" />
      <variable citdl="int" name="SQLITE_PRAGMA" />
      <variable citdl="int" name="SQLITE_READ" />
      <variable citdl="int" name="SQLITE_REINDEX" />
      <variable citdl="int" name="SQLITE_SELECT" />
      <variable citdl="int" name="SQLITE_TRANSACTION" />
      <variable citdl="int" name="SQLITE_UPDATE" />
      <scope classrefs="object" ilk="class" name="Statement" />
      <scope classrefs="object" doc="time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --&gt; a time object  All arguments are optional. tzinfo may be None, or an instance of" ilk="class" line="37" name="Time" />
      <scope ilk="function" line="44" lineend="45" name="TimeFromTicks" returns="Time()" signature="TimeFromTicks(ticks)">
        <variable ilk="argument" name="ticks" />
      </scope>
      <scope classrefs="date" doc="datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])  The year, month and day arguments are required. tzinfo may be None, or an" ilk="class" line="39" name="Timestamp" />
      <scope ilk="function" line="47" lineend="48" name="TimestampFromTicks" returns="Timestamp()" signature="TimestampFromTicks(ticks)">
        <variable ilk="argument" name="ticks" />
      </scope>
      <scope classrefs="Exception" ilk="class" name="Warning" />
      <scope doc="adapt(obj, protocol, alternate) -&gt; adapt obj to given protocol. Non-standard." ilk="function" name="adapt" signature="adapt(obj, protocol, alternate) -&gt; adapt obj to given protocol. Non-standard." />
      <variable citdl="dict" name="adapters" />
      <variable citdl="str" line="33" name="apilevel" />
      <scope doc="Checks if a string contains a complete SQL statement." ilk="function" name="complete_statement" signature="complete_statement(sql)" />
      <scope doc="Opens a connection to the SQLite database file *database*." ilk="function" name="connect" signature="connect(database[, timeout, isolation_level, detect_types, factory])" />
      <variable citdl="dict" name="converters" />
      <import module="datetime" />
      <scope doc="Enable or disable callback functions throwing errors to stderr." ilk="function" name="enable_callback_tracebacks" signature="enable_callback_tracebacks(flag)" />
      <scope doc="Enable or disable shared cache mode for the calling thread." ilk="function" name="enable_shared_cache" signature="enable_shared_cache(do_enable)" />
      <variable citdl="str" line="29" name="paramstyle" />
      <scope doc="Registers an adapter with pysqlite&apos;s adapter registry." ilk="function" name="register_adapter" signature="register_adapter(type, callable)" />
      <scope doc="Registers a converter with pysqlite. Non-standard." ilk="function" name="register_converter" signature="register_converter(typename, callable)" />
      <variable citdl="str" name="sqlite_version" />
      <variable citdl="tuple" line="51" name="sqlite_version_info" />
      <variable citdl="int" line="31" name="threadsafety" />
      <import module="time" />
      <variable citdl="str" name="version" />
      <variable citdl="tuple" line="50" name="version_info" />
      <scope attributes="__hidden__" ilk="function" line="55" lineend="82" name="register_adapters_and_converters" signature="register_adapters_and_converters()">
        <scope ilk="function" line="56" lineend="57" name="adapt_date" returns="val.isoformat()" signature="adapt_date(val)">
          <variable ilk="argument" name="val" />
        </scope>
        <scope ilk="function" line="59" lineend="60" name="adapt_datetime" returns="val.isoformat()" signature="adapt_datetime(val)">
          <variable ilk="argument" name="val" />
        </scope>
        <scope ilk="function" line="62" lineend="63" name="convert_date" returns="datetime.date()" signature="convert_date(val)">
          <variable ilk="argument" name="val" />
        </scope>
        <scope ilk="function" line="65" lineend="76" name="convert_timestamp" returns="datetime.datetime()" signature="convert_timestamp(val)">
          <variable citdl="datetime.datetime()" ilk="argument" name="val" />
          <variable citdl="timepart.split()" line="68" name="timepart_full" />
          <variable citdl="int()" line="71" name="microseconds" />
        </scope>
      </scope>
    </scope>
    <scope doc="Tools that operate on functions." ilk="blob" lang="Python3" name="_functools">
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application of the given arguments and keywords." ilk="class" name="partial" />
      <scope doc="Apply a function of two arguments cumulatively to the items of a sequence, from left to right, so as to reduce the sequence to a single value." ilk="function" name="reduce" signature="reduce(function, sequence[, initial]) -&gt; value" />
    </scope>
    <scope doc="This module provides socket operations and some related functions. On Unix, it supports IP (Internet Protocol) and Unix domain sockets. On other systems, it only supports IP. Functions specific for a" ilk="blob" lang="Python3" name="socket">
      <variable citdl="int" name="AF_APPLETALK" />
      <variable citdl="int" name="AF_DECnet" />
      <variable citdl="int" name="AF_INET" />
      <variable citdl="int" name="AF_INET6" />
      <variable citdl="int" name="AF_IPX" />
      <variable citdl="int" name="AF_IRDA" />
      <variable citdl="int" name="AF_SNA" />
      <variable citdl="int" name="AF_UNSPEC" />
      <variable citdl="int" name="AI_ADDRCONFIG" />
      <variable citdl="int" name="AI_ALL" />
      <variable citdl="int" name="AI_CANONNAME" />
      <variable citdl="int" name="AI_NUMERICHOST" />
      <variable citdl="int" name="AI_NUMERICSERV" />
      <variable citdl="int" name="AI_PASSIVE" />
      <variable citdl="int" name="AI_V4MAPPED" />
      <variable citdl="PyCapsule" name="CAPI" />
      <variable citdl="int" name="EAI_AGAIN" />
      <variable citdl="int" name="EAI_BADFLAGS" />
      <variable citdl="int" name="EAI_FAIL" />
      <variable citdl="int" name="EAI_FAMILY" />
      <variable citdl="int" name="EAI_MEMORY" />
      <variable citdl="int" name="EAI_NODATA" />
      <variable citdl="int" name="EAI_NONAME" />
      <variable citdl="int" name="EAI_SERVICE" />
      <variable citdl="int" name="EAI_SOCKTYPE" />
      <variable citdl="int" name="EBADF" />
      <variable citdl="int" name="INADDR_ALLHOSTS_GROUP" />
      <variable citdl="int" name="INADDR_ANY" />
      <variable citdl="int" name="INADDR_BROADCAST" />
      <variable citdl="int" name="INADDR_LOOPBACK" />
      <variable citdl="int" name="INADDR_MAX_LOCAL_GROUP" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INADDR_UNSPEC_GROUP" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_USERRESERVED" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DONTFRAG" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_RECVRTHDR" />
      <variable citdl="int" name="IPV6_RECVTCLASS" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_TCLASS" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IPV6_V6ONLY" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <variable citdl="int" name="MSG_CTRUNC" />
      <variable citdl="int" name="MSG_DONTROUTE" />
      <variable citdl="int" name="MSG_OOB" />
      <variable citdl="int" name="MSG_PEEK" />
      <variable citdl="int" name="MSG_TRUNC" />
      <variable citdl="int" name="NI_DGRAM" />
      <variable citdl="int" name="NI_MAXHOST" />
      <variable citdl="int" name="NI_MAXSERV" />
      <variable citdl="int" name="NI_NAMEREQD" />
      <variable citdl="int" name="NI_NOFQDN" />
      <variable citdl="int" name="NI_NUMERICHOST" />
      <variable citdl="int" name="NI_NUMERICSERV" />
      <variable citdl="int" name="RCVALL_MAX" />
      <variable citdl="int" name="RCVALL_OFF" />
      <variable citdl="int" name="RCVALL_ON" />
      <variable citdl="int" name="RCVALL_SOCKETLEVELONLY" />
      <variable citdl="int" name="SHUT_RD" />
      <variable citdl="int" name="SHUT_RDWR" />
      <variable citdl="int" name="SHUT_WR" />
      <variable citdl="int" name="SIO_RCVALL" />
      <variable citdl="int" name="SOCK_DGRAM" />
      <variable citdl="int" name="SOCK_RAW" />
      <variable citdl="int" name="SOCK_RDM" />
      <variable citdl="int" name="SOCK_SEQPACKET" />
      <variable citdl="int" name="SOCK_STREAM" />
      <variable citdl="int" name="SOL_IP" />
      <variable citdl="int" name="SOL_SOCKET" />
      <variable citdl="int" name="SOL_TCP" />
      <variable citdl="int" name="SOL_UDP" />
      <variable citdl="int" name="SOMAXCONN" />
      <variable citdl="int" name="SO_ACCEPTCONN" />
      <variable citdl="int" name="SO_BROADCAST" />
      <variable citdl="int" name="SO_DEBUG" />
      <variable citdl="int" name="SO_DONTROUTE" />
      <variable citdl="int" name="SO_ERROR" />
      <variable citdl="int" name="SO_EXCLUSIVEADDRUSE" />
      <variable citdl="int" name="SO_KEEPALIVE" />
      <variable citdl="int" name="SO_LINGER" />
      <variable citdl="int" name="SO_OOBINLINE" />
      <variable citdl="int" name="SO_RCVBUF" />
      <variable citdl="int" name="SO_RCVLOWAT" />
      <variable citdl="int" name="SO_RCVTIMEO" />
      <variable citdl="int" name="SO_REUSEADDR" />
      <variable citdl="int" name="SO_SNDBUF" />
      <variable citdl="int" name="SO_SNDLOWAT" />
      <variable citdl="int" name="SO_SNDTIMEO" />
      <variable citdl="int" name="SO_TYPE" />
      <variable citdl="int" name="SO_USELOOPBACK" />
      <scope classrefs="RawIOBase" doc="Raw I/O implementation for stream sockets.  This class supports the makefile() method on sockets.  It provides" ilk="class" name="SocketIO" />
      <scope classrefs="object" doc="socket([family[, type[, proto]]]) -&gt; socket object  Open a socket of the given type.  The family argument specifies the" ilk="class" name="SocketType" />
      <variable citdl="int" name="TCP_MAXSEG" />
      <variable citdl="int" name="TCP_NODELAY" />
      <variable citdl="list" name="__all__" />
      <import module="_socket" />
      <scope doc="Connect to *address* and return the socket object." ilk="function" name="create_connection" signature="create_connection(address, timeout=&lt;object object at 0x028CE358&gt;)" />
      <scope doc="Duplicate an integer socket file descriptor." ilk="function" name="dup" returns="int" signature="dup(integer) -&gt; integer" />
      <scope classrefs="IOError" ilk="class" name="error" />
      <variable citdl="dict" name="errorTab" />
      <scope doc="Create a socket object from a duplicate of the given file descriptor." ilk="function" name="fromfd" signature="fromfd(fd, family, type[, proto]) -&gt; socket object" />
      <scope classrefs="error" ilk="class" name="gaierror" />
      <scope doc="-&gt; list of (family, socktype, proto, canonname, sockaddr)" ilk="function" name="getaddrinfo" signature="getaddrinfo(host, port [, family, socktype, proto, flags])" />
      <scope doc="Returns the default timeout in floating seconds for new socket objects." ilk="function" name="getdefaulttimeout" signature="getdefaulttimeout() -&gt; timeout" />
      <scope doc="Get fully qualified domain name from name." ilk="function" name="getfqdn" signature="getfqdn(name=&apos;&apos;)" />
      <scope doc="Return the true host name, a list of aliases, and a list of IP addresses, for a host." ilk="function" name="gethostbyaddr" signature="gethostbyaddr(host) -&gt; (name, aliaslist, addresslist)" />
      <scope doc="Return the IP address (a string of the form &apos;255.255.255.255&apos;) for a host." ilk="function" name="gethostbyname" signature="gethostbyname(host) -&gt; address" />
      <scope doc="Return the true host name, a list of aliases, and a list of IP addresses, for a host." ilk="function" name="gethostbyname_ex" signature="gethostbyname_ex(host) -&gt; (name, aliaslist, addresslist)" />
      <scope doc="Return the current host name." ilk="function" name="gethostname" returns="str" signature="gethostname() -&gt; string" />
      <scope doc="Get host and port for a sockaddr." ilk="function" name="getnameinfo" signature="getnameinfo(sockaddr, flags) --&gt; (host, port)" />
      <scope doc="Return the protocol number for the named protocol." ilk="function" name="getprotobyname" returns="int" signature="getprotobyname(name) -&gt; integer" />
      <scope doc="Return a port number from a service name and protocol name." ilk="function" name="getservbyname" returns="int" signature="getservbyname(servicename[, protocolname]) -&gt; integer" />
      <scope doc="Return the service name from a port number and protocol name." ilk="function" name="getservbyport" returns="str" signature="getservbyport(port[, protocolname]) -&gt; string" />
      <variable citdl="bool" name="has_ipv6" />
      <scope classrefs="error" ilk="class" name="herror" />
      <scope doc="Convert a 32-bit integer from host to network byte order." ilk="function" name="htonl" returns="int" signature="htonl(integer) -&gt; integer" />
      <scope doc="Convert a 16-bit integer from host to network byte order." ilk="function" name="htons" returns="int" signature="htons(integer) -&gt; integer" />
      <scope doc="Convert an IP address in string format (123.45.67.89) to the 32-bit packed binary format used in low-level network functions." ilk="function" name="inet_aton" signature="inet_aton(string) -&gt; bytes giving packed 32-bit IP representation" />
      <scope doc="Convert an IP address from 32-bit packed binary format to string format" ilk="function" name="inet_ntoa" signature="inet_ntoa(packed_ip) -&gt; ip_address_string" />
      <import module="io" />
      <scope doc="Convert a 32-bit integer from network to host byte order." ilk="function" name="ntohl" returns="int" signature="ntohl(integer) -&gt; integer" />
      <scope doc="Convert a 16-bit integer from network to host byte order." ilk="function" name="ntohs" returns="int" signature="ntohs(integer) -&gt; integer" />
      <import module="os" />
      <scope doc="Set the default timeout in floating seconds for new socket objects." ilk="function" name="setdefaulttimeout" signature="setdefaulttimeout(timeout)" />
      <scope classrefs="socket" doc="A subclass of _socket.socket adding the makefile() method." ilk="class" name="socket" />
      <import module="sys" />
      <scope classrefs="error" ilk="class" name="timeout" />
    </scope>
    <scope doc="Recognize image file formats based on their first few bytes." ilk="blob" lang="Python3" name="imghdr">
      <variable citdl="list" line="3" name="__all__" />
      <scope ilk="function" line="119" lineend="132" name="test" signature="test()">
        <variable citdl="int" line="121" name="recursive" />
      </scope>
      <scope ilk="function" line="109" lineend="111" name="test_bmp" returns="str" signature="test_bmp(h, f)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="GIF (&apos;87 and &apos;89 variants)" ilk="function" line="50" lineend="53" name="test_gif" returns="str" signature="GIF (&apos;87 and &apos;89 variants)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="JPEG data in JFIF or Exif format" ilk="function" line="37" lineend="40" name="test_jpeg" returns="str" signature="test_jpeg(h, f)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="PBM (portable bitmap)" ilk="function" line="71" lineend="75" name="test_pbm" returns="str" signature="PBM (portable bitmap)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="PGM (portable graymap)" ilk="function" line="79" lineend="83" name="test_pgm" returns="str" signature="PGM (portable graymap)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="44" lineend="46" name="test_png" returns="str" signature="test_png(h, f)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="PPM (portable pixmap)" ilk="function" line="87" lineend="91" name="test_ppm" returns="str" signature="PPM (portable pixmap)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="Sun raster file" ilk="function" line="95" lineend="98" name="test_rast" returns="str" signature="test_rast(h, f)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="SGI image library" ilk="function" line="64" lineend="67" name="test_rgb" returns="str" signature="test_rgb(h, f)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="TIFF (can be in Motorola or Intel byte order)" ilk="function" line="57" lineend="60" name="test_tiff" returns="str" signature="TIFF (can be in Motorola or Intel byte order)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope doc="X bitmap (X10 or X11)" ilk="function" line="102" lineend="105" name="test_xbm" returns="str" signature="test_xbm(h, f)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="f" />
      </scope>
      <scope ilk="function" line="134" lineend="153" name="testall" signature="testall(list, recursive, toplevel)">
        <variable ilk="argument" name="toplevel" />
        <variable ilk="argument" name="list" />
        <variable ilk="argument" name="recursive" />
        <variable citdl="glob.glob()" line="143" name="names" />
      </scope>
      <variable citdl="list" line="35" name="tests" />
      <scope ilk="function" line="9" lineend="28" name="what" returns="tf()" signature="what(file, h=None)">
        <variable citdl="f.read()" ilk="argument" name="h" />
        <variable citdl="tf()" line="23" name="res" />
        <variable citdl="file.tell()" line="15" name="location" />
        <variable ilk="argument" name="file" />
        <variable citdl="open()" line="12" name="f" />
      </scope>
    </scope>
    <scope doc="An object-oriented interface to .netrc files." ilk="blob" lang="Python3" name="netrc">
      <scope classrefs="Exception" doc="Exception raised on syntax errors in the .netrc file." ilk="class" line="10" lineend="19" name="NetrcParseError">
        <variable attributes="__instancevar__" line="15" name="msg" />
        <scope ilk="function" line="18" lineend="19" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="NetrcParseError" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="14" name="lineno" />
        <scope attributes="__ctor__" ilk="function" line="12" lineend="16" name="__init__" signature="NetrcParseError(msg, filename=None, lineno=None)">
          <variable citdl="NetrcParseError" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="lineno" />
        </scope>
        <variable attributes="__instancevar__" line="13" name="filename" />
      </scope>
      <variable citdl="list" line="7" name="__all__" />
      <scope classrefs="object" ilk="class" line="22" lineend="111" name="netrc">
        <scope doc="Return a (user, account, password) tuple for given host." ilk="function" line="88" lineend="95" name="authenticators" signature="authenticators(host)">
          <variable citdl="netrc" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
        </scope>
        <variable attributes="__instancevar__" citdl="dict" line="30" name="macros" />
        <variable attributes="__instancevar__" citdl="dict" line="29" name="hosts" />
        <scope doc="Dump the class data in the format of a .netrc file." ilk="function" line="97" lineend="111" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="netrc" ilk="argument" name="self" />
          <variable citdl="str" line="99" name="rep" />
          <variable line="101" name="attrs" />
        </scope>
        <scope attributes="protected" ilk="function" line="34" lineend="86" name="_parse" signature="_parse(file, fp)">
          <variable citdl="netrc" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
          <variable ilk="argument" name="fp" />
          <variable citdl="shlex.shlex()" line="35" name="lexer" />
          <variable citdl="lexer.get_token()" line="39" name="toplevel" />
          <variable citdl="lexer.get_token()" line="43" name="entryname" />
          <variable citdl="lexer.instream.readline()" line="51" name="line" />
          <variable citdl="lexer.get_token()" line="62" name="login" />
          <variable citdl="lexer.get_token()" line="63" name="account" />
          <variable citdl="lexer.get_token()" line="66" name="tt" />
          <variable citdl="lexer.get_token()" line="83" name="password" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="23" lineend="32" name="__init__" signature="netrc(file=None)">
          <variable citdl="netrc" ilk="argument" name="self" />
          <variable citdl="os.path.join()" ilk="argument" name="file" />
        </scope>
      </scope>
      <import module="os" />
      <import module="shlex" />
    </scope>
    <scope doc="Parse (absolute and relative) URLs.  See RFC 1808: &quot;Relative Uniform Resource Locators&quot;, by R. Fielding," ilk="blob" lang="Python3" name="urllib.parse">
      <variable citdl="int" name="MAX_CACHE_SIZE" />
      <scope classrefs="ParseResult ResultMixin" ilk="class" name="ParseResult" />
      <scope classrefs="defaultdict" doc="A mapping from bytes (in range(0,256)) to strings.  String values are percent-encoded byte values, unless the key &lt; 128, and" ilk="class" name="Quoter" />
      <scope classrefs="object" doc="Shared methods for the parsed result objects." ilk="class" name="ResultMixin" />
      <scope classrefs="SplitResult ResultMixin" ilk="class" name="SplitResult" />
      <variable citdl="list" name="__all__" />
      <scope doc="Clear the parse cache." ilk="function" name="clear_cache" signature="clear_cache()" />
      <import module="collections" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <variable citdl="list" name="non_hierarchical" />
      <scope doc="Parse a query given as a string argument." ilk="function" name="parse_qs" signature="parse_qs(qs, keep_blank_values=False, strict_parsing=False)" />
      <scope doc="Parse a query given as a string argument." ilk="function" name="parse_qsl" signature="parse_qsl(qs, keep_blank_values=False, strict_parsing=False)" />
      <scope doc="Each part of a URL, e.g." ilk="function" name="quote" signature="quote(&apos;abc def&apos;) -&gt; &apos;abc%20def&apos;" />
      <scope doc="Like quote(), but accepts a bytes object rather than a str, and does not perform string-to-bytes encoding." ilk="function" name="quote_from_bytes" signature="quote_from_bytes(bs, safe=&apos;/&apos;)" />
      <scope doc="Like quote(), but also replace &apos; &apos; with &apos;+&apos;, as required for quoting HTML form values." ilk="function" name="quote_plus" signature="quote_plus(string, safe=&apos;&apos;, encoding=None, errors=None)" />
      <variable citdl="str" name="scheme_chars" />
      <scope doc="&apos;/path&apos;, [&apos;attr1=value1&apos;, &apos;attr2=value2&apos;, ...]." ilk="function" name="splitattr" signature="splitattr(&apos;/path;attr1=value1;attr2=value2;...&apos;) -&gt;" />
      <scope doc="splithost(&apos;//host[:port]/path&apos;) --&gt; &apos;host[:port]&apos;, &apos;/path&apos;." ilk="function" name="splithost" signature="splithost(&apos;//host[:port]/path&apos;) --&gt; &apos;host[:port]&apos;, &apos;/path&apos;." />
      <scope doc="Split host and port, returning numeric port." ilk="function" name="splitnport" signature="splitnport(host, defport=-1)" />
      <scope doc="splitpasswd(&apos;user:passwd&apos;) -&gt; &apos;user&apos;, &apos;passwd&apos;." ilk="function" name="splitpasswd" signature="splitpasswd(&apos;user:passwd&apos;) -&gt; &apos;user&apos;, &apos;passwd&apos;." />
      <scope doc="splitport(&apos;host:port&apos;) --&gt; &apos;host&apos;, &apos;port&apos;." ilk="function" name="splitport" signature="splitport(&apos;host:port&apos;) --&gt; &apos;host&apos;, &apos;port&apos;." />
      <scope doc="splitquery(&apos;/path?query&apos;) --&gt; &apos;/path&apos;, &apos;query&apos;." ilk="function" name="splitquery" signature="splitquery(&apos;/path?query&apos;) --&gt; &apos;/path&apos;, &apos;query&apos;." />
      <scope doc="splittag(&apos;/path#tag&apos;) --&gt; &apos;/path&apos;, &apos;tag&apos;." ilk="function" name="splittag" signature="splittag(&apos;/path#tag&apos;) --&gt; &apos;/path&apos;, &apos;tag&apos;." />
      <scope doc="splittype(&apos;type:opaquestring&apos;) --&gt; &apos;type&apos;, &apos;opaquestring&apos;." ilk="function" name="splittype" signature="splittype(&apos;type:opaquestring&apos;) --&gt; &apos;type&apos;, &apos;opaquestring&apos;." />
      <scope doc="splituser(&apos;user[:passwd]@host[:port]&apos;) --&gt; &apos;user[:passwd]&apos;, &apos;host[:port]&apos;." ilk="function" name="splituser" signature="splituser(&apos;user[:passwd]@host[:port]&apos;) --&gt; &apos;user[:passwd]&apos;, &apos;host[:port]&apos;." />
      <scope doc="splitvalue(&apos;attr=value&apos;) --&gt; &apos;attr&apos;, &apos;value&apos;." ilk="function" name="splitvalue" signature="splitvalue(&apos;attr=value&apos;) --&gt; &apos;attr&apos;, &apos;value&apos;." />
      <import module="sys" />
      <scope ilk="function" name="test" signature="test()" />
      <variable citdl="str" name="test_input" />
      <scope doc="to_bytes(u&quot;URL&quot;) --&gt; &apos;URL&apos;." ilk="function" name="to_bytes" signature="to_bytes(u&quot;URL&quot;) --&gt; &apos;URL&apos;." />
      <scope doc="Replace %xx escapes by their single-character equivalent." ilk="function" name="unquote" signature="unquote(string, encoding=&apos;utf-8&apos;, errors=&apos;replace&apos;)" />
      <scope doc="Like unquote(), but also replace plus signs by spaces, as required for unquoting HTML form values." ilk="function" name="unquote_plus" signature="unquote_plus(string, encoding=&apos;utf-8&apos;, errors=&apos;replace&apos;)" />
      <scope doc="unquote_to_bytes(&apos;abc%20def&apos;) -&gt; b&apos;abc def&apos;." ilk="function" name="unquote_to_bytes" signature="unquote_to_bytes(&apos;abc%20def&apos;) -&gt; b&apos;abc def&apos;." />
      <scope doc="unwrap(&apos;&lt;URL:type://host/path&gt;&apos;) --&gt; &apos;type://host/path&apos;." ilk="function" name="unwrap" signature="unwrap(&apos;&lt;URL:type://host/path&gt;&apos;) --&gt; &apos;type://host/path&apos;." />
      <scope doc="Removes any existing fragment from URL." ilk="function" name="urldefrag" signature="urldefrag(url)" />
      <scope doc="Encode a sequence of two-element tuples or dictionary into a URL query string." ilk="function" name="urlencode" signature="urlencode(query, doseq=False)" />
      <scope doc="Join a base URL and a possibly relative URL to form an absolute interpretation of the latter." ilk="function" name="urljoin" signature="urljoin(base, url, allow_fragments=True)" />
      <scope doc="Parse a URL into 6 components: &lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;fragment&gt; Return a 6-tuple: (scheme, netloc, path, params, query, fragment)." ilk="function" name="urlparse" signature="urlparse(url, scheme=&apos;&apos;, allow_fragments=True)" />
      <scope doc="Parse a URL into 5 components: &lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt; Return a 5-tuple: (scheme, netloc, path, query, fragment)." ilk="function" name="urlsplit" signature="urlsplit(url, scheme=&apos;&apos;, allow_fragments=True)" />
      <scope doc="Put a parsed URL back together again." ilk="function" name="urlunparse" signature="urlunparse(components)" />
      <scope ilk="function" name="urlunsplit" signature="urlunsplit(components)" />
      <variable citdl="list" name="uses_fragment" />
      <variable citdl="list" name="uses_netloc" />
      <variable citdl="list" name="uses_params" />
      <variable citdl="list" name="uses_query" />
      <variable citdl="list" name="uses_relative" />
    </scope>
    <scope doc="Token constants (from &quot;token.h&quot;)." ilk="blob" lang="Python3" name="lib2to3.pgen2.token">
      <variable citdl="int" line="28" name="AMPER" />
      <variable citdl="int" line="51" name="AMPEREQUAL" />
      <variable citdl="int" line="59" name="AT" />
      <variable citdl="int" line="34" name="BACKQUOTE" />
      <variable citdl="int" line="42" name="CIRCUMFLEX" />
      <variable citdl="int" line="53" name="CIRCUMFLEXEQUAL" />
      <variable citdl="int" line="20" name="COLON" />
      <variable citdl="int" line="21" name="COMMA" />
      <variable citdl="int" line="61" name="COMMENT" />
      <variable citdl="int" line="15" name="DEDENT" />
      <variable citdl="int" line="32" name="DOT" />
      <variable citdl="int" line="57" name="DOUBLESLASH" />
      <variable citdl="int" line="58" name="DOUBLESLASHEQUAL" />
      <variable citdl="int" line="45" name="DOUBLESTAR" />
      <variable citdl="int" line="56" name="DOUBLESTAREQUAL" />
      <variable citdl="int" line="9" name="ENDMARKER" />
      <variable citdl="int" line="37" name="EQEQUAL" />
      <variable citdl="int" line="31" name="EQUAL" />
      <variable citdl="int" line="64" name="ERRORTOKEN" />
      <variable citdl="int" line="30" name="GREATER" />
      <variable citdl="int" line="40" name="GREATEREQUAL" />
      <variable citdl="int" line="14" name="INDENT" />
      <scope ilk="function" line="81" lineend="82" name="ISEOF" returns="bool" signature="ISEOF(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope ilk="function" line="78" lineend="79" name="ISNONTERMINAL" returns="bool" signature="ISNONTERMINAL(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <scope ilk="function" line="75" lineend="76" name="ISTERMINAL" returns="bool" signature="ISTERMINAL(x)">
        <variable ilk="argument" name="x" />
      </scope>
      <variable citdl="int" line="35" name="LBRACE" />
      <variable citdl="int" line="43" name="LEFTSHIFT" />
      <variable citdl="int" line="54" name="LEFTSHIFTEQUAL" />
      <variable citdl="int" line="29" name="LESS" />
      <variable citdl="int" line="39" name="LESSEQUAL" />
      <variable citdl="int" line="16" name="LPAR" />
      <variable citdl="int" line="18" name="LSQB" />
      <variable citdl="int" line="47" name="MINEQUAL" />
      <variable citdl="int" line="24" name="MINUS" />
      <variable citdl="int" line="10" name="NAME" />
      <variable citdl="int" line="13" name="NEWLINE" />
      <variable citdl="int" line="62" name="NL" />
      <variable citdl="int" line="38" name="NOTEQUAL" />
      <variable citdl="int" line="66" name="NT_OFFSET" />
      <variable citdl="int" line="11" name="NUMBER" />
      <variable citdl="int" line="65" name="N_TOKENS" />
      <variable citdl="int" line="60" name="OP" />
      <variable citdl="int" line="33" name="PERCENT" />
      <variable citdl="int" line="50" name="PERCENTEQUAL" />
      <variable citdl="int" line="23" name="PLUS" />
      <variable citdl="int" line="46" name="PLUSEQUAL" />
      <variable citdl="int" line="63" name="RARROW" />
      <variable citdl="int" line="36" name="RBRACE" />
      <variable citdl="int" line="44" name="RIGHTSHIFT" />
      <variable citdl="int" line="55" name="RIGHTSHIFTEQUAL" />
      <variable citdl="int" line="17" name="RPAR" />
      <variable citdl="int" line="19" name="RSQB" />
      <variable citdl="int" line="22" name="SEMI" />
      <variable citdl="int" line="26" name="SLASH" />
      <variable citdl="int" line="49" name="SLASHEQUAL" />
      <variable citdl="int" line="25" name="STAR" />
      <variable citdl="int" line="48" name="STAREQUAL" />
      <variable citdl="int" line="12" name="STRING" />
      <variable citdl="int" line="41" name="TILDE" />
      <variable citdl="int" line="27" name="VBAR" />
      <variable citdl="int" line="52" name="VBAREQUAL" />
      <variable citdl="dict" line="69" name="tok_name" />
    </scope>
    <scope doc="TELNET client class.  Based on RFC 854: TELNET Protocol Specification, by J. Postel and" ilk="blob" lang="Python3" name="telnetlib">
      <variable citdl="bytes" line="62" name="AO" />
      <variable citdl="bytes" line="109" name="AUTHENTICATION" />
      <variable citdl="bytes" line="63" name="AYT" />
      <variable citdl="bytes" line="72" name="BINARY" />
      <variable citdl="bytes" line="91" name="BM" />
      <variable citdl="bytes" line="60" name="BRK" />
      <variable citdl="bytes" line="118" name="CHARSET" />
      <variable citdl="bytes" line="120" name="COM_PORT_OPTION" />
      <variable citdl="int" line="44" name="DEBUGLEVEL" />
      <variable citdl="bytes" line="92" name="DET" />
      <variable citdl="bytes" line="59" name="DM" />
      <variable citdl="bytes" line="52" name="DO" />
      <variable citdl="bytes" line="51" name="DONT" />
      <variable citdl="bytes" line="64" name="EC" />
      <variable citdl="bytes" line="73" name="ECHO" />
      <variable citdl="bytes" line="65" name="EL" />
      <variable citdl="bytes" line="110" name="ENCRYPT" />
      <variable citdl="bytes" line="97" name="EOR" />
      <variable citdl="bytes" line="129" name="EXOPL" />
      <variable citdl="bytes" line="125" name="FORWARD_X" />
      <variable citdl="bytes" line="66" name="GA" />
      <variable citdl="bytes" line="50" name="IAC" />
      <variable citdl="bytes" line="61" name="IP" />
      <variable citdl="bytes" line="123" name="KERMIT" />
      <variable citdl="bytes" line="105" name="LFLOW" />
      <variable citdl="bytes" line="106" name="LINEMODE" />
      <variable citdl="bytes" line="90" name="LOGOUT" />
      <variable citdl="bytes" line="76" name="NAMS" />
      <variable citdl="bytes" line="82" name="NAOCRD" />
      <variable citdl="bytes" line="85" name="NAOFFD" />
      <variable citdl="bytes" line="84" name="NAOHTD" />
      <variable citdl="bytes" line="83" name="NAOHTS" />
      <variable citdl="bytes" line="80" name="NAOL" />
      <variable citdl="bytes" line="88" name="NAOLFD" />
      <variable citdl="bytes" line="81" name="NAOP" />
      <variable citdl="bytes" line="87" name="NAOVTD" />
      <variable citdl="bytes" line="86" name="NAOVTS" />
      <variable citdl="bytes" line="103" name="NAWS" />
      <variable citdl="bytes" line="111" name="NEW_ENVIRON" />
      <variable citdl="bytes" line="130" name="NOOPT" />
      <variable citdl="bytes" line="58" name="NOP" />
      <variable citdl="bytes" line="108" name="OLD_ENVIRON" />
      <variable citdl="bytes" line="99" name="OUTMRK" />
      <variable citdl="bytes" line="128" name="PRAGMA_HEARTBEAT" />
      <variable citdl="bytes" line="126" name="PRAGMA_LOGON" />
      <variable citdl="bytes" line="74" name="RCP" />
      <variable citdl="bytes" line="79" name="RCTE" />
      <variable citdl="bytes" line="119" name="RSP" />
      <variable citdl="bytes" line="67" name="SB" />
      <variable citdl="bytes" line="57" name="SE" />
      <variable citdl="bytes" line="124" name="SEND_URL" />
      <variable citdl="bytes" line="75" name="SGA" />
      <variable citdl="bytes" line="95" name="SNDLOC" />
      <variable citdl="bytes" line="127" name="SSPI_LOGON" />
      <variable citdl="bytes" line="77" name="STATUS" />
      <variable citdl="bytes" line="93" name="SUPDUP" />
      <variable citdl="bytes" line="94" name="SUPDUPOUTPUT" />
      <variable citdl="bytes" line="121" name="SUPPRESS_LOCAL_ECHO" />
      <variable citdl="int" line="47" name="TELNET_PORT" />
      <variable citdl="bytes" line="122" name="TLS" />
      <variable citdl="bytes" line="78" name="TM" />
      <variable citdl="bytes" line="116" name="TN3270E" />
      <variable citdl="bytes" line="104" name="TSPEED" />
      <variable citdl="bytes" line="100" name="TTYLOC" />
      <variable citdl="bytes" line="96" name="TTYPE" />
      <variable citdl="bytes" line="98" name="TUID" />
      <scope classrefs="object" doc="Telnet interface class.  An instance of this class represents a connection to a telnet" ilk="class" line="132" lineend="625" name="Telnet">
        <scope doc="Set the debug level." ilk="function" line="245" lineend="251" name="set_debuglevel" signature="set_debuglevel(debuglevel)">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable ilk="argument" name="debuglevel" />
        </scope>
        <scope doc="Return any data available in the cooked queue (very lazy)." ilk="function" line="385" lineend="396" name="read_very_lazy" returns="str" signature="read_very_lazy()">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="list" line="392" name="buf" />
        </scope>
        <scope doc="Return any data available in the SB ... SE queue." ilk="function" line="398" lineend="408" name="read_sb_data" returns="str" signature="read_sb_data()">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="str" line="406" name="buf" />
        </scope>
        <scope doc="Read until one from a list of a regular expressions matches." ilk="function" line="570" lineend="625" name="expect" returns="tuple" signature="expect(list, timeout=None)">
          <import line="597" module="re" />
          <import line="600" module="time" symbol="time" />
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="list" />
          <variable ilk="argument" name="timeout" />
          <variable line="592" name="re" />
          <variable citdl="range()" line="594" name="indices" />
          <variable citdl="time()" line="601" name="time_start" />
          <variable line="605" name="m" />
          <variable citdl="m.end()" line="607" name="e" />
          <variable citdl="list" line="608" name="text" />
          <variable citdl="time()" line="614" name="elapsed" />
          <variable citdl="tuple" line="617" name="s_args" />
        </scope>
        <scope doc="Close the connection." ilk="function" line="253" lineend="260" name="close" signature="close()">
          <variable citdl="Telnet" ilk="argument" name="self" />
        </scope>
        <scope doc="Test whether data is available on the socket." ilk="function" line="521" lineend="523" name="sock_avail" returns="bool" signature="sock_avail()">
          <variable citdl="Telnet" ilk="argument" name="self" />
        </scope>
        <scope doc="Provide a callback function called after each receipt of a telnet option." ilk="function" line="410" lineend="412" name="set_option_negotiation_callback" signature="set_option_negotiation_callback(callback)">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable ilk="argument" name="callback" />
        </scope>
        <scope doc="Connect to a host." ilk="function" line="211" lineend="225" name="open" signature="open(host, port=0, timeout=socket._GLOBAL_DEFAULT_TIMEOUT)">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable citdl="socket._GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="197" name="port" />
        <scope attributes="__ctor__" doc="Constructor." ilk="function" line="187" lineend="209" name="__init__" signature="Telnet(host=None, port=0, timeout=socket._GLOBAL_DEFAULT_TIMEOUT)">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable citdl="socket._GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
        </scope>
        <scope doc="Fill raw queue from exactly one recv() system call." ilk="function" line="504" lineend="519" name="fill_rawq" signature="fill_rawq()">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="self.sock.recv()" line="516" name="buf" />
        </scope>
        <scope doc="Interaction function, emulates a very dumb telnet client." ilk="function" line="525" lineend="545" name="interact" signature="interact()">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="read_eager()" line="534" name="text" />
          <variable line="542" name="line" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="199" name="sock" />
        <scope doc="Read at least one byte of cooked data unless EOF is hit." ilk="function" line="331" lineend="344" name="read_some" returns="str" signature="read_some()">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="list" line="342" name="buf" />
        </scope>
        <scope doc="Write a string to the socket, doubling any IAC characters." ilk="function" line="270" lineend="280" name="write" signature="write(buffer)">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="buffer.replace()" ilk="argument" name="buffer" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="206" name="sbdataq" />
        <scope doc="Print a debug message, when the debug level is &gt; 0." ilk="function" line="231" lineend="243" name="msg" signature="msg(msg, *args)">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="201" name="irawq" />
        <scope doc="Return the socket object used internally." ilk="function" line="262" lineend="264" name="get_socket" returns="socket.create_connection()" signature="get_socket()">
          <variable citdl="Telnet" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="200" name="rawq" />
        <scope doc="Get next char from raw queue." ilk="function" line="486" lineend="502" name="rawq_getchar" returns="list" signature="rawq_getchar()">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="list" line="497" name="c" />
        </scope>
        <scope doc="Multithreaded version of interact()." ilk="function" line="547" lineend="555" name="mt_interact" signature="mt_interact()">
          <import line="549" module="_thread" />
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="sys.stdin.readline()" line="552" name="line" />
        </scope>
        <scope doc="Destructor -- close the connection." ilk="function" line="227" lineend="229" name="__del__" signature="__del__()">
          <variable citdl="Telnet" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="195" name="debuglevel" />
        <scope doc="Transfer from raw queue to cooked queue." ilk="function" line="414" lineend="484" name="process_rawq" signature="process_rawq()">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="list" line="421" name="buf" />
          <variable citdl="self.rawq_getchar()" line="424" name="c" />
          <variable citdl="list" line="462" name="cmd" />
          <variable citdl="self.rawq_getchar()" line="464" name="opt" />
        </scope>
        <scope doc="Helper for mt_interact() -- this executes in the other thread." ilk="function" line="557" lineend="568" name="listener" signature="listener()">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="read_eager()" line="561" name="data" />
        </scope>
        <scope doc="Process and return data that&apos;s already in the queues (lazy)." ilk="function" line="374" lineend="383" name="read_lazy" returns="self.read_very_lazy()" signature="read_lazy()">
          <variable citdl="Telnet" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="196" name="host" />
        <variable attributes="__instancevar__" citdl="str" line="202" name="cookedq" />
        <variable attributes="__instancevar__" citdl="str" line="204" name="iacseq" />
        <scope doc="Return the fileno() of the socket object used internally." ilk="function" line="266" lineend="268" name="fileno" returns="self.sock.fileno()" signature="fileno()">
          <variable citdl="Telnet" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="203" name="eof" />
        <scope doc="Read readily available data." ilk="function" line="360" lineend="372" name="read_eager" returns="self.read_very_lazy()" signature="read_eager()">
          <variable citdl="Telnet" ilk="argument" name="self" />
        </scope>
        <scope doc="Read all data until EOF; block until connection closed." ilk="function" line="321" lineend="329" name="read_all" returns="str" signature="read_all()">
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable citdl="list" line="327" name="buf" />
        </scope>
        <scope doc="Read everything that&apos;s possible without blocking in I/O (eager)." ilk="function" line="346" lineend="358" name="read_very_eager" returns="self.read_very_lazy()" signature="read_very_eager()">
          <variable citdl="Telnet" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="socket._GLOBAL_DEFAULT_TIMEOUT" line="198" name="timeout" />
        <variable attributes="__instancevar__" line="207" name="option_callback" />
        <variable attributes="__instancevar__" citdl="int" line="205" name="sb" />
        <scope doc="Read until a given string is encountered or until timeout." ilk="function" line="282" lineend="319" name="read_until" returns="list" signature="read_until(match, timeout=None)">
          <import line="302" module="time" symbol="time" />
          <variable citdl="Telnet" ilk="argument" name="self" />
          <variable ilk="argument" name="match" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="len()" line="290" name="n" />
          <variable citdl="self.cookedq.find()" line="292" name="i" />
          <variable citdl="list" line="295" name="buf" />
          <variable citdl="tuple" line="298" name="s_reply" />
          <variable citdl="tuple" line="299" name="s_args" />
          <variable citdl="time()" line="303" name="time_start" />
          <variable citdl="time()" line="315" name="elapsed" />
        </scope>
      </scope>
      <variable citdl="bytes" line="101" name="VT3270REGIME" />
      <variable citdl="bytes" line="54" name="WILL" />
      <variable citdl="bytes" line="53" name="WONT" />
      <variable citdl="bytes" line="102" name="X3PAD" />
      <variable citdl="bytes" line="89" name="XASCII" />
      <variable citdl="bytes" line="117" name="XAUTH" />
      <variable citdl="bytes" line="107" name="XDISPLOC" />
      <variable citdl="list" line="41" name="__all__" />
      <import module="select" />
      <import module="socket" />
      <import module="sys" />
      <scope doc="Test program for telnetlib." ilk="function" line="628" lineend="654" name="test" signature="test()">
        <variable citdl="Telnet" line="650" name="tn" />
        <variable line="645" name="portstr" />
        <variable citdl="str" line="640" name="host" />
        <variable citdl="int" line="643" name="port" />
        <variable citdl="int" line="636" name="debuglevel" />
      </scope>
      <variable citdl="bytes" line="55" name="theNULL" />
    </scope>
    <scope doc="Generic framework path manipulation" ilk="blob" lang="Python3" name="ctypes.macholib.framework">
      <variable citdl="SRE_Pattern" line="9" name="STRICT_FRAMEWORK_RE" />
      <variable citdl="list" line="7" name="__all__" />
      <scope doc="A framework name can take one of the following four forms: Location/Name.framework/Versions/SomeVersion/Name_Suffix Location/Name.framework/Versions/SomeVersion/Name Location/Name.framework/Name_Suffix" ilk="function" line="19" lineend="42" name="framework_info" returns="is_framework.groupdict()" signature="framework_info(filename)">
        <variable citdl="STRICT_FRAMEWORK_RE.match()" line="39" name="is_framework" />
        <variable ilk="argument" name="filename" />
      </scope>
      <import module="re" />
      <scope ilk="function" line="44" lineend="62" name="test_framework_info" signature="test_framework_info()">
        <scope ilk="function" line="45" lineend="51" name="d" returns="dict()" signature="d(location=None, name=None, shortname=None, version=None, suffix=None)">
          <variable ilk="argument" name="location" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="shortname" />
          <variable ilk="argument" name="version" />
          <variable ilk="argument" name="suffix" />
        </scope>
      </scope>
    </scope>
    <scope doc="An RFC 2821 smtp proxy.  Usage: %(program)s [options] [localhost:localport [remotehost:remoteport]]" ilk="blob" lang="Python3" name="smtpd">
      <variable citdl="str" line="96" name="COMMASPACE" />
      <variable citdl="Devnull" line="93" name="DEBUGSTREAM" />
      <scope classrefs="SMTPServer" ilk="class" line="318" lineend="330" name="DebuggingServer">
        <scope ilk="function" line="320" lineend="330" name="process_message" signature="process_message(peer, mailfrom, rcpttos, data)">
          <variable citdl="DebuggingServer" ilk="argument" name="self" />
          <variable ilk="argument" name="peer" />
          <variable ilk="argument" name="mailfrom" />
          <variable ilk="argument" name="rcpttos" />
          <variable ilk="argument" name="data" />
          <variable citdl="int" line="321" name="inheaders" />
          <variable citdl="data.split()" line="322" name="lines" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="88" lineend="90" name="Devnull">
        <scope ilk="function" line="89" lineend="89" name="write" signature="write(msg)">
          <variable citdl="Devnull" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
        <scope ilk="function" line="90" lineend="90" name="flush" signature="flush()">
          <variable citdl="Devnull" ilk="argument" name="self" />
        </scope>
      </scope>
      <variable citdl="str" line="95" name="EMPTYSTRING" />
      <scope classrefs="PureProxy" ilk="class" line="375" lineend="450" name="MailmanProxy">
        <scope ilk="function" line="376" lineend="450" name="process_message" signature="process_message(peer, mailfrom, rcpttos, data)">
          <import line="377" module="io" symbol="StringIO" />
          <import line="378" module="Mailman" symbol="Utils" />
          <import line="379" module="Mailman" symbol="Message" />
          <import line="380" module="Mailman" symbol="MailList" />
          <variable citdl="MailmanProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="peer" />
          <variable ilk="argument" name="mailfrom" />
          <variable ilk="argument" name="rcpttos" />
          <variable ilk="argument" name="data" />
          <variable citdl="list" line="384" name="listnames" />
          <variable line="386" name="local" />
          <variable citdl="local.split()" line="394" name="parts" />
          <variable line="397" name="listname" />
          <variable citdl="str" line="399" name="command" />
          <variable citdl="self._deliver()" line="414" name="refused" />
          <variable citdl="dict" line="418" name="mlists" />
          <variable citdl="StringIO()" line="419" name="s" />
          <variable citdl="Message.Message()" line="420" name="msg" />
          <variable citdl="mlists.get()" line="430" name="mlist" />
        </scope>
      </scope>
      <variable citdl="str" line="94" name="NEWLINE" />
      <scope classrefs="object" ilk="class" line="454" lineend="456" name="Options">
        <variable citdl="int" line="455" name="setuid" />
        <variable citdl="str" line="456" name="classname" />
      </scope>
      <scope classrefs="SMTPServer" ilk="class" line="334" lineend="371" name="PureProxy">
        <scope ilk="function" line="335" lineend="347" name="process_message" signature="process_message(peer, mailfrom, rcpttos, data)">
          <variable citdl="PureProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="peer" />
          <variable ilk="argument" name="mailfrom" />
          <variable ilk="argument" name="rcpttos" />
          <variable citdl="NEWLINE.join()" ilk="argument" name="data" />
          <variable citdl="data.split()" line="336" name="lines" />
          <variable citdl="int" line="338" name="i" />
          <variable citdl="self._deliver()" line="345" name="refused" />
        </scope>
        <scope attributes="protected" ilk="function" line="349" lineend="371" name="_deliver" returns="s.sendmail()" signature="_deliver(mailfrom, rcpttos, data)">
          <import line="350" module="smtplib" />
          <variable citdl="PureProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="mailfrom" />
          <variable ilk="argument" name="rcpttos" />
          <variable ilk="argument" name="data" />
          <variable citdl="e.recipients" line="351" name="refused" />
          <variable citdl="smtplib.SMTP()" line="353" name="s" />
          <variable citdl="getattr()" line="367" name="errcode" />
          <variable citdl="getattr()" line="368" name="errmsg" />
        </scope>
      </scope>
      <scope classrefs="async_chat" ilk="class" line="108" lineend="268" name="SMTPChannel">
        <variable attributes="private __instancevar__" citdl="str" line="122" name="__data" />
        <scope ilk="function" line="134" lineend="135" name="collect_incoming_data" signature="collect_incoming_data(data)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="138" lineend="184" name="found_terminator" signature="found_terminator()">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable citdl="EMPTYSTRING.join()" line="139" name="line" />
          <variable citdl="getattr()" line="146" name="method" />
          <variable citdl="line.find()" line="147" name="i" />
          <variable citdl="line.upper()" line="149" name="command" />
          <variable line="150" name="arg" />
          <variable citdl="list" line="166" name="data" />
          <variable citdl="self.__server.process_message()" line="173" name="status" />
        </scope>
        <scope ilk="function" line="222" lineend="233" name="smtp_MAIL" signature="smtp_MAIL(arg)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable line="224" name="address" />
        </scope>
        <scope ilk="function" line="203" lineend="206" name="smtp_QUIT" signature="smtp_QUIT(arg)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable citdl="int" line="110" name="DATA" />
        <variable attributes="private __instancevar__" citdl="int" line="119" name="__greeting" />
        <variable attributes="private __instancevar__" citdl="int" line="118" name="__state" />
        <variable attributes="private __instancevar__" line="115" name="__conn" />
        <scope ilk="function" line="197" lineend="201" name="smtp_NOOP" signature="smtp_NOOP(arg)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="187" lineend="195" name="smtp_HELO" signature="smtp_HELO(arg)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <scope ilk="function" line="235" lineend="246" name="smtp_RCPT" signature="smtp_RCPT(arg)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
          <variable line="240" name="address" />
        </scope>
        <variable attributes="private __instancevar__" citdl="socket.getfqdn()" line="123" name="__fqdn" />
        <variable attributes="private __instancevar__" line="114" name="__server" />
        <scope attributes="__ctor__" ilk="function" line="112" lineend="127" name="__init__" signature="SMTPChannel(server, conn, addr)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="server" />
          <variable ilk="argument" name="conn" />
          <variable ilk="argument" name="addr" />
        </scope>
        <variable attributes="private __instancevar__" citdl="list" line="117" name="__line" />
        <scope ilk="function" line="259" lineend="268" name="smtp_DATA" signature="smtp_DATA(arg)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable citdl="int" line="109" name="COMMAND" />
        <scope ilk="function" line="248" lineend="257" name="smtp_RSET" signature="smtp_RSET(arg)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="arg" />
        </scope>
        <variable attributes="private __instancevar__" citdl="list" line="121" name="__rcpttos" />
        <variable attributes="private __instancevar__" citdl="conn.getpeername()" line="124" name="__peer" />
        <scope attributes="private" ilk="function" line="209" lineend="220" name="__getaddr" returns="list" signature="__getaddr(keyword, arg)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="keyword" />
          <variable ilk="argument" name="arg" />
          <variable citdl="list" line="210" name="address" />
          <variable citdl="len()" line="211" name="keylen" />
        </scope>
        <variable attributes="private __instancevar__" line="116" name="__addr" />
        <scope ilk="function" line="130" lineend="131" name="push" signature="push(msg)">
          <variable citdl="SMTPChannel" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
        <variable attributes="private __instancevar__" line="120" name="__mailfrom" />
      </scope>
      <scope classrefs="dispatcher" ilk="class" line="272" lineend="314" name="SMTPServer">
        <scope ilk="function" line="286" lineend="289" name="handle_accept" signature="handle_accept()">
          <variable citdl="SMTPServer" ilk="argument" name="self" />
          <variable citdl="SMTPChannel" line="289" name="channel" />
        </scope>
        <scope doc="Override this abstract method to handle messages from the client." ilk="function" line="292" lineend="314" name="process_message" signature="process_message(peer, mailfrom, rcpttos, data)">
          <variable citdl="SMTPServer" ilk="argument" name="self" />
          <variable ilk="argument" name="peer" />
          <variable ilk="argument" name="mailfrom" />
          <variable ilk="argument" name="rcpttos" />
          <variable ilk="argument" name="data" />
        </scope>
        <variable attributes="protected __instancevar__" line="274" name="_localaddr" />
        <scope attributes="__ctor__" ilk="function" line="273" lineend="284" name="__init__" signature="SMTPServer(localaddr, remoteaddr)">
          <variable citdl="SMTPServer" ilk="argument" name="self" />
          <variable ilk="argument" name="localaddr" />
          <variable ilk="argument" name="remoteaddr" />
        </scope>
        <variable attributes="protected __instancevar__" line="275" name="_remoteaddr" />
      </scope>
      <variable citdl="list" line="82" name="__all__" />
      <variable citdl="str" line="85" name="__version__" />
      <import module="asynchat" />
      <import module="asyncore" />
      <import module="errno" />
      <import module="getopt" />
      <import module="os" />
      <scope ilk="function" line="460" lineend="513" name="parseargs" returns="Options" signature="parseargs()">
        <variable citdl="remotespec.find()" line="497" name="i" />
        <variable citdl="str" line="486" name="remotespec" />
        <variable citdl="Options" line="469" name="options" />
        <variable citdl="sys.stderr" line="481" name="DEBUGSTREAM" />
        <variable citdl="str" line="485" name="localspec" />
      </scope>
      <variable citdl="str" line="84" name="program" />
      <import module="socket" />
      <import module="sys" />
      <import module="time" />
      <scope ilk="function" line="100" lineend="104" name="usage" signature="usage(code, msg=&apos;&apos;)">
        <variable citdl="str" ilk="argument" name="msg" />
        <variable ilk="argument" name="code" />
      </scope>
      <variable attributes="__hidden__" line="526" name="nobody" />
      <variable attributes="__hidden__" citdl="options.classname" line="533" name="classname" />
      <variable attributes="__hidden__" citdl="getattr()" line="540" name="class_" />
      <variable attributes="__hidden__" citdl="class_()" line="541" name="proxy" />
      <variable attributes="__hidden__" citdl="classname.rfind()" line="535" name="lastdot" />
      <variable attributes="__hidden__" citdl="parseargs()" line="518" name="options" />
      <variable attributes="__hidden__" citdl="__import__()" line="536" name="mod" />
    </scope>
    <scope doc="Base class for MIME multipart/* type messages." ilk="blob" lang="Python3" name="email.mime.multipart">
      <scope classrefs="Message" doc="Base class for MIME specializations." ilk="class" name="MIMEBase" />
      <scope classrefs="MIMEBase" doc="Base class for MIME multipart/* type messages." ilk="class" line="13" lineend="47" name="MIMEMultipart">
        <scope attributes="__ctor__" doc="Creates a multipart/* type message." ilk="function" line="16" lineend="47" name="__init__" signature="MIMEMultipart(_subtype=&apos;mixed&apos;, boundary=None, _subparts=None, **_params)">
          <variable citdl="MIMEMultipart" ilk="argument" name="self" />
          <variable citdl="str" ilk="argument" name="_subtype" />
          <variable ilk="argument" name="boundary" />
          <variable ilk="argument" name="_subparts" />
          <variable attributes="kwargs" ilk="argument" name="_params" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="41" name="_payload" />
      </scope>
      <variable citdl="list" line="7" name="__all__" />
    </scope>
    <scope doc="This module contains functions that can read and write Python values in a binary format. The format is specific to Python, but independent of machine architecture issues." ilk="blob" lang="Python3" name="marshal">
      <scope doc="Write the value on the open file." ilk="function" name="dump" signature="dump(value, file[, version])" />
      <scope doc="Return the string that would be written to a file by dump(value, file)." ilk="function" name="dumps" signature="dumps(value[, version])" />
      <scope doc="Read one value from the open file and return it." ilk="function" name="load" signature="load(file)" />
      <scope doc="Convert the string to a value." ilk="function" name="loads" signature="loads(string)" />
      <variable citdl="int" name="version" />
    </scope>
    <scope doc="Record of phased-in incompatible language changes.  Each line is of the form:" ilk="blob" lang="Python3" name="__future__">
      <variable citdl="int" line="70" name="CO_FUTURE_ABSOLUTE_IMPORT" />
      <variable citdl="int" line="74" name="CO_FUTURE_BARRY_AS_BDFL" />
      <variable citdl="int" line="69" name="CO_FUTURE_DIVISION" />
      <variable citdl="int" line="72" name="CO_FUTURE_PRINT_FUNCTION" />
      <variable citdl="int" line="73" name="CO_FUTURE_UNICODE_LITERALS" />
      <variable citdl="int" line="71" name="CO_FUTURE_WITH_STATEMENT" />
      <variable citdl="int" line="68" name="CO_GENERATOR_ALLOWED" />
      <variable citdl="int" line="67" name="CO_NESTED" />
      <variable citdl="list" line="61" name="__all__" />
      <variable citdl="_Feature" line="116" name="absolute_import" />
      <variable citdl="list" line="50" name="all_feature_names" />
      <variable citdl="_Feature" line="132" name="barry_as_FLUFL" />
      <variable citdl="_Feature" line="112" name="division" />
      <variable citdl="_Feature" line="108" name="generators" />
      <variable citdl="_Feature" line="104" name="nested_scopes" />
      <variable citdl="_Feature" line="124" name="print_function" />
      <variable citdl="_Feature" line="128" name="unicode_literals" />
      <variable citdl="_Feature" line="120" name="with_statement" />
      <scope attributes="protected __hidden__" ilk="class" line="76" lineend="102" name="_Feature">
        <scope attributes="__ctor__" ilk="function" line="77" lineend="80" name="__init__" signature="_Feature(optionalRelease, mandatoryRelease, compiler_flag)">
          <variable citdl="_Feature" ilk="argument" name="self" />
          <variable ilk="argument" name="optionalRelease" />
          <variable ilk="argument" name="mandatoryRelease" />
          <variable ilk="argument" name="compiler_flag" />
        </scope>
        <variable attributes="__instancevar__" line="78" name="optional" />
        <variable attributes="__instancevar__" line="79" name="mandatory" />
        <variable attributes="__instancevar__" line="80" name="compiler_flag" />
        <scope doc="Return first release in which this feature was recognized." ilk="function" line="82" lineend="88" name="getOptionalRelease" signature="getOptionalRelease()">
          <variable citdl="_Feature" ilk="argument" name="self" />
        </scope>
        <scope doc="Return release in which this feature will become mandatory." ilk="function" line="90" lineend="97" name="getMandatoryRelease" signature="getMandatoryRelease()">
          <variable citdl="_Feature" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="99" lineend="102" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="_Feature" ilk="argument" name="self" />
        </scope>
      </scope>
    </scope>
    <scope doc="Documentation" ilk="blob" lang="Python3" name="_msi">
      <scope doc="Wraps MsiCreateRecord" ilk="function" name="CreateRecord" signature="OpenDatabase(name, flags) -&gt; dbobj" />
      <scope doc="fcicreate(cabname,files) -&gt; None" ilk="function" name="FCICreate" signature="fcicreate(cabname,files) -&gt; None" />
      <variable citdl="int" name="MSICOLINFO_NAMES" />
      <variable citdl="int" name="MSICOLINFO_TYPES" />
      <variable citdl="int" name="MSIDBOPEN_CREATE" />
      <variable citdl="int" name="MSIDBOPEN_CREATEDIRECT" />
      <variable citdl="int" name="MSIDBOPEN_DIRECT" />
      <variable citdl="int" name="MSIDBOPEN_PATCHFILE" />
      <variable citdl="int" name="MSIDBOPEN_READONLY" />
      <variable citdl="int" name="MSIDBOPEN_TRANSACT" />
      <scope classrefs="Exception" ilk="class" name="MSIError" />
      <variable citdl="int" name="MSIMODIFY_ASSIGN" />
      <variable citdl="int" name="MSIMODIFY_DELETE" />
      <variable citdl="int" name="MSIMODIFY_INSERT" />
      <variable citdl="int" name="MSIMODIFY_INSERT_TEMPORARY" />
      <variable citdl="int" name="MSIMODIFY_MERGE" />
      <variable citdl="int" name="MSIMODIFY_REFRESH" />
      <variable citdl="int" name="MSIMODIFY_REPLACE" />
      <variable citdl="int" name="MSIMODIFY_SEEK" />
      <variable citdl="int" name="MSIMODIFY_UPDATE" />
      <variable citdl="int" name="MSIMODIFY_VALIDATE" />
      <variable citdl="int" name="MSIMODIFY_VALIDATE_DELETE" />
      <variable citdl="int" name="MSIMODIFY_VALIDATE_FIELD" />
      <variable citdl="int" name="MSIMODIFY_VALIDATE_NEW" />
      <scope doc="Wraps MsiOpenDatabase" ilk="function" name="OpenDatabase" signature="OpenDatabase(name, flags) -&gt; dbobj" />
      <variable citdl="int" name="PID_APPNAME" />
      <variable citdl="int" name="PID_AUTHOR" />
      <variable citdl="int" name="PID_CHARCOUNT" />
      <variable citdl="int" name="PID_CODEPAGE" />
      <variable citdl="int" name="PID_COMMENTS" />
      <variable citdl="int" name="PID_CREATE_DTM" />
      <variable citdl="int" name="PID_KEYWORDS" />
      <variable citdl="int" name="PID_LASTAUTHOR" />
      <variable citdl="int" name="PID_LASTPRINTED" />
      <variable citdl="int" name="PID_LASTSAVE_DTM" />
      <variable citdl="int" name="PID_PAGECOUNT" />
      <variable citdl="int" name="PID_REVNUMBER" />
      <variable citdl="int" name="PID_SECURITY" />
      <variable citdl="int" name="PID_SUBJECT" />
      <variable citdl="int" name="PID_TEMPLATE" />
      <variable citdl="int" name="PID_TITLE" />
      <variable citdl="int" name="PID_WORDCOUNT" />
      <scope doc="UuidCreate() -&gt; string" ilk="function" name="UuidCreate" returns="str" signature="UuidCreate() -&gt; string" />
    </scope>
    <scope ilk="blob" lang="Python3" name="distutils.debug">
      <variable citdl="NoneType" line="7" name="DEBUG" />
      <variable citdl="str" line="3" name="__revision__" />
      <import module="os" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_multibytecodec">
      <scope classrefs="object" ilk="class" name="MultibyteIncrementalDecoder" />
      <scope classrefs="object" ilk="class" name="MultibyteIncrementalEncoder" />
      <scope classrefs="object" ilk="class" name="MultibyteStreamReader" />
      <scope classrefs="object" ilk="class" name="MultibyteStreamWriter" />
    </scope>
    <scope doc="distutils.dir_util  Utility functions for manipulating directories and directory trees." ilk="blob" lang="Python3" name="distutils.dir_util">
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <variable citdl="str" line="5" name="__revision__" />
      <scope doc="Copy an entire directory tree &apos;src&apos; to a new location &apos;dst&apos;." ilk="function" line="99" lineend="163" name="copy_tree" returns="list" signature="copy_tree(src, dst, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=1, dry_run=0)">
        <variable ilk="argument" name="src" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable citdl="int" ilk="argument" name="preserve_times" />
        <variable ilk="argument" name="dst" />
        <variable citdl="int" ilk="argument" name="update" />
        <variable citdl="os.readlink()" line="145" name="link_dest" />
        <variable citdl="os.listdir()" line="126" name="names" />
        <variable citdl="int" ilk="argument" name="preserve_symlinks" />
        <variable citdl="list" line="138" name="outputs" />
        <variable citdl="os.path.join()" line="141" name="src_name" />
        <variable citdl="int" ilk="argument" name="preserve_mode" />
        <variable citdl="os.path.join()" line="142" name="dst_name" />
      </scope>
      <scope doc="Create all the empty directories under &apos;base_dir&apos; needed to put &apos;files&apos; there." ilk="function" line="80" lineend="97" name="create_tree" signature="create_tree(base_dir, files, mode=511, verbose=1, dry_run=0)">
        <variable ilk="argument" name="files" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable citdl="set()" line="91" name="need_dir" />
        <variable citdl="int" ilk="argument" name="mode" />
        <variable ilk="argument" name="base_dir" />
      </scope>
      <scope doc="Take the full path &apos;path&apos;, and make it a relative path." ilk="function" line="201" lineend="209" name="ensure_relative" returns="drive" signature="ensure_relative(path)">
        <variable citdl="list" ilk="argument" name="path" />
      </scope>
      <import module="log" />
      <scope doc="Create a directory and any missing ancestor directories." ilk="function" line="18" lineend="78" name="mkpath" returns="list" signature="mkpath(name, mode=511, verbose=1, dry_run=0)">
        <variable citdl="os.path.join()" line="60" name="head" />
        <variable citdl="list" line="42" name="created_dirs" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable citdl="os.path.abspath()" line="61" name="abs_head" />
        <variable citdl="list" line="49" name="tails" />
        <variable citdl="int" ilk="argument" name="mode" />
        <variable citdl="os.path.normpath()" ilk="argument" name="name" />
      </scope>
      <import module="os" />
      <scope doc="Recursively remove an entire directory tree." ilk="function" line="175" lineend="199" name="remove_tree" signature="remove_tree(directory, verbose=1, dry_run=0)">
        <variable ilk="argument" name="directory" />
        <variable citdl="os.path.abspath()" line="194" name="abspath" />
        <variable citdl="list" line="188" name="cmdtuples" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="int" ilk="argument" name="dry_run" />
      </scope>
      <import module="sys" />
      <scope attributes="protected __hidden__" doc="Helper for remove_tree()." ilk="function" line="165" lineend="173" name="_build_cmdtuple" signature="_build_cmdtuple(path, cmdtuples)">
        <variable ilk="argument" name="path" />
        <variable ilk="argument" name="cmdtuples" />
        <variable citdl="os.path.join()" line="168" name="real_f" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="13" name="_path_created" />
    </scope>
    <scope doc="distutils.command  Package containing implementation of all the standard Distutils" ilk="blob" lang="Python3" name="distutils.command">
      <variable citdl="list" line="8" name="__all__" />
      <variable citdl="str" line="6" name="__revision__" />
      <import module="bdist" />
      <import module="bdist_msi" />
      <import module="bdist_wininst" />
      <import module="build_clib" />
      <import module="build_ext" />
      <import module="build_py" />
      <import module="install" />
      <import module="install_headers" />
      <import module="install_lib" />
      <import module="register" />
      <import module="upload" />
    </scope>
    <scope doc="An XML Reader is the SAX 2 name for an XML parser. XML Parsers should be based on this code." ilk="blob" lang="Python3" name="xml.sax.xmlreader">
      <scope classrefs="object" ilk="class" line="276" lineend="334" name="AttributesImpl">
        <scope ilk="function" line="301" lineend="304" name="getQNameByName" signature="getQNameByName(name)">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="293" lineend="294" name="getValueByQName" signature="getValueByQName(name)">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="315" lineend="316" name="__getitem__" signature="__getitem__(name)">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="321" lineend="322" name="__contains__" returns="bool" signature="__contains__(name)">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="296" lineend="299" name="getNameByQName" signature="getNameByQName(name)">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="284" lineend="285" name="getLength" returns="len()" signature="getLength()">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="287" lineend="288" name="getType" returns="str" signature="getType(name)">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="309" lineend="310" name="getQNames" returns="list()" signature="getQNames()">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="290" lineend="291" name="getValue" signature="getValue(name)">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="318" lineend="319" name="keys" returns="list()" signature="keys()">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="333" lineend="334" name="values" returns="list()" signature="values()">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="312" lineend="313" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="330" lineend="331" name="items" returns="list()" signature="items()">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="324" lineend="325" name="get" returns="self._attrs.get()" signature="get(name, alternative=None)">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="alternative" />
        </scope>
        <scope ilk="function" line="327" lineend="328" name="copy" returns="self.__class__()" signature="copy()">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="306" lineend="307" name="getNames" returns="list()" signature="getNames()">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Non-NS-aware implementation." ilk="function" line="278" lineend="282" name="__init__" signature="AttributesImpl(attrs)">
          <variable citdl="AttributesImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <variable attributes="protected __instancevar__" line="282" name="_attrs" />
      </scope>
      <scope classrefs="AttributesImpl" ilk="class" line="338" lineend="369" name="AttributesNSImpl">
        <scope ilk="function" line="362" lineend="363" name="getQNameByName" signature="getQNameByName(name)">
          <variable citdl="AttributesNSImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="348" lineend="353" name="getValueByQName" signature="getValueByQName(name)">
          <variable citdl="AttributesNSImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope ilk="function" line="355" lineend="360" name="getNameByQName" returns="nsname" signature="getNameByQName(name)">
          <variable citdl="AttributesNSImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="protected __instancevar__" line="346" name="_qnames" />
        <scope ilk="function" line="365" lineend="366" name="getQNames" returns="list()" signature="getQNames()">
          <variable citdl="AttributesNSImpl" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="368" lineend="369" name="copy" returns="self.__class__()" signature="copy()">
          <variable citdl="AttributesNSImpl" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="NS-aware implementation." ilk="function" line="340" lineend="346" name="__init__" signature="AttributesNSImpl(attrs, qnames)">
          <variable citdl="AttributesNSImpl" ilk="argument" name="self" />
          <variable ilk="argument" name="attrs" />
          <variable ilk="argument" name="qnames" />
        </scope>
        <variable attributes="protected __instancevar__" line="345" name="_attrs" />
      </scope>
      <scope classrefs="XMLReader" doc="This interface adds three extra methods to the XMLReader interface that allow XML parsers to support incremental parsing. Support for this interface is optional, since not all" ilk="class" line="91" lineend="159" name="IncrementalParser">
        <scope doc="This method gives the raw XML data in the data parameter to the parser and makes it parse the data, emitting the corresponding events." ilk="function" line="127" lineend="134" name="feed" signature="feed(data)">
          <variable citdl="IncrementalParser" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="This method is called after close has been called to reset the parser so that it is ready to parse new documents." ilk="function" line="154" lineend="159" name="reset" signature="reset()">
          <variable citdl="IncrementalParser" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="112" name="_bufsize" />
        <scope ilk="function" line="115" lineend="125" name="parse" signature="parse(source)">
          <import line="116" module="." symbol="saxutils" />
          <variable citdl="IncrementalParser" ilk="argument" name="self" />
          <variable citdl="saxutils.prepare_input_source()" ilk="argument" name="source" />
          <variable citdl="source.getByteStream()" line="120" name="file" />
          <variable citdl="file.read()" line="121" name="buffer" />
        </scope>
        <scope doc="This method is called by the parse implementation to allow the SAX 2.0 driver to prepare itself for parsing." ilk="function" line="136" lineend="139" name="prepareParser" signature="prepareParser(source)">
          <variable citdl="IncrementalParser" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
        </scope>
        <scope doc="This method is called when the entire XML document has been passed to the parser through the feed method, to notify the parser that there are no more data." ilk="function" line="141" lineend="152" name="close" signature="close()">
          <variable citdl="IncrementalParser" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="111" lineend="113" name="__init__" signature="IncrementalParser(bufsize=2**16)">
          <variable citdl="IncrementalParser" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="bufsize" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Encapsulation of the information needed by the XMLReader to read entities. " ilk="class" line="187" lineend="272" name="InputSource">
        <scope doc="Returns the public identifier of this InputSource." ilk="function" line="214" lineend="216" name="getPublicId" signature="getPublicId()">
          <variable citdl="InputSource" ilk="argument" name="self" />
        </scope>
        <variable attributes="private __instancevar__" line="205" name="__public_id" />
        <scope doc="Sets the public identifier of this InputSource." ilk="function" line="210" lineend="212" name="setPublicId" signature="setPublicId(public_id)">
          <variable citdl="InputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="public_id" />
        </scope>
        <scope doc="Get the character encoding of this InputSource." ilk="function" line="236" lineend="238" name="getEncoding" signature="getEncoding()">
          <variable citdl="InputSource" ilk="argument" name="self" />
        </scope>
        <scope doc="Get the character stream for this input source." ilk="function" line="270" lineend="272" name="getCharacterStream" signature="getCharacterStream()">
          <variable citdl="InputSource" ilk="argument" name="self" />
        </scope>
        <variable attributes="private __instancevar__" line="204" name="__system_id" />
        <variable attributes="private __instancevar__" line="208" name="__charfile" />
        <scope doc="Returns the system identifier of this InputSource." ilk="function" line="222" lineend="224" name="getSystemId" signature="getSystemId()">
          <variable citdl="InputSource" ilk="argument" name="self" />
        </scope>
        <scope doc="Set the character stream for this input source." ilk="function" line="260" lineend="268" name="setCharacterStream" signature="setCharacterStream(charfile)">
          <variable citdl="InputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="charfile" />
        </scope>
        <variable attributes="private __instancevar__" line="207" name="__bytefile" />
        <scope doc="Sets the system identifier of this InputSource." ilk="function" line="218" lineend="220" name="setSystemId" signature="setSystemId(system_id)">
          <variable citdl="InputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="system_id" />
        </scope>
        <variable attributes="private __instancevar__" line="206" name="__encoding" />
        <scope doc="Sets the character encoding of this InputSource." ilk="function" line="226" lineend="234" name="setEncoding" signature="setEncoding(encoding)">
          <variable citdl="InputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="encoding" />
        </scope>
        <scope doc="Set the byte stream (a Python file-like object which does not perform byte-to-character conversion) for this input source." ilk="function" line="240" lineend="251" name="setByteStream" signature="setByteStream(bytefile)">
          <variable citdl="InputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="bytefile" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="203" lineend="208" name="__init__" signature="InputSource(system_id=None)">
          <variable citdl="InputSource" ilk="argument" name="self" />
          <variable ilk="argument" name="system_id" />
        </scope>
        <scope doc="Get the byte stream for this input source." ilk="function" line="253" lineend="258" name="getByteStream" signature="getByteStream()">
          <variable citdl="InputSource" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Interface for associating a SAX event with a document location. A locator object will return valid results only during calls to DocumentHandler methods; at any other time, the" ilk="class" line="163" lineend="183" name="Locator">
        <scope doc="Return the public identifier for the current event." ilk="function" line="177" lineend="179" name="getPublicId" signature="getPublicId()">
          <variable citdl="Locator" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the system identifier for the current event." ilk="function" line="181" lineend="183" name="getSystemId" signature="getSystemId()">
          <variable citdl="Locator" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the line number where the current event ends." ilk="function" line="173" lineend="175" name="getLineNumber" returns="int" signature="getLineNumber()">
          <variable citdl="Locator" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the column number where the current event ends." ilk="function" line="169" lineend="171" name="getColumnNumber" returns="int" signature="getColumnNumber()">
          <variable citdl="Locator" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="SAXException" doc="Exception class for an unrecognized identifier.  An XMLReader will raise this exception when it is confronted with an" ilk="class" name="SAXNotRecognizedException" />
      <scope classrefs="SAXException" doc="Exception class for an unsupported operation.  An XMLReader will raise this exception when a service it cannot" ilk="class" name="SAXNotSupportedException" />
      <scope classrefs="object" doc="Interface for reading an XML document using callbacks.  XMLReader is the interface that an XML parser&apos;s SAX2 driver must" ilk="class" line="11" lineend="89" name="XMLReader">
        <scope doc="Sets the state of a SAX2 feature." ilk="function" line="79" lineend="81" name="setFeature" signature="setFeature(name, state)">
          <variable citdl="XMLReader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="state" />
        </scope>
        <scope doc="Registers a new object to receive document content events." ilk="function" line="38" lineend="40" name="setContentHandler" signature="setContentHandler(handler)">
          <variable citdl="XMLReader" ilk="argument" name="self" />
          <variable ilk="argument" name="handler" />
        </scope>
        <scope doc="Looks up and returns the state of a SAX2 feature." ilk="function" line="75" lineend="77" name="getFeature" signature="getFeature(name)">
          <variable citdl="XMLReader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Register an object to resolve external entities." ilk="function" line="54" lineend="56" name="setEntityResolver" signature="setEntityResolver(resolver)">
          <variable citdl="XMLReader" ilk="argument" name="self" />
          <variable ilk="argument" name="resolver" />
        </scope>
        <scope doc="Allow an application to set the locale for errors and warnings." ilk="function" line="66" lineend="73" name="setLocale" signature="setLocale(locale)">
          <variable citdl="XMLReader" ilk="argument" name="self" />
          <variable ilk="argument" name="locale" />
        </scope>
        <scope doc="Returns the current ErrorHandler." ilk="function" line="58" lineend="60" name="getErrorHandler" returns="handler.ErrorHandler()" signature="getErrorHandler()">
          <variable citdl="XMLReader" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="handler.ContentHandler()" line="25" name="_cont_handler" />
        <variable attributes="protected __instancevar__" citdl="handler.DTDHandler()" line="26" name="_dtd_handler" />
        <scope doc="Register an object to receive error-message events." ilk="function" line="62" lineend="64" name="setErrorHandler" signature="setErrorHandler(handler)">
          <variable citdl="XMLReader" ilk="argument" name="self" />
          <variable ilk="argument" name="handler" />
        </scope>
        <scope doc="Parse an XML document from a system identifier or an InputSource." ilk="function" line="30" lineend="32" name="parse" signature="parse(source)">
          <variable citdl="XMLReader" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="handler.ErrorHandler()" line="28" name="_err_handler" />
        <scope doc="Returns the current EntityResolver." ilk="function" line="50" lineend="52" name="getEntityResolver" returns="handler.EntityResolver()" signature="getEntityResolver()">
          <variable citdl="XMLReader" ilk="argument" name="self" />
        </scope>
        <scope doc="Returns the current ContentHandler." ilk="function" line="34" lineend="36" name="getContentHandler" returns="handler.ContentHandler()" signature="getContentHandler()">
          <variable citdl="XMLReader" ilk="argument" name="self" />
        </scope>
        <scope doc="Register an object to receive basic DTD-related events." ilk="function" line="46" lineend="48" name="setDTDHandler" signature="setDTDHandler(handler)">
          <variable citdl="XMLReader" ilk="argument" name="self" />
          <variable ilk="argument" name="handler" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="handler.EntityResolver()" line="27" name="_ent_handler" />
        <scope doc="Sets the value of a SAX2 property." ilk="function" line="87" lineend="89" name="setProperty" signature="setProperty(name, value)">
          <variable citdl="XMLReader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Returns the current DTD handler." ilk="function" line="42" lineend="44" name="getDTDHandler" returns="handler.DTDHandler()" signature="getDTDHandler()">
          <variable citdl="XMLReader" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="24" lineend="28" name="__init__" signature="XMLReader()">
          <variable citdl="XMLReader" ilk="argument" name="self" />
        </scope>
        <scope doc="Looks up and returns the value of a SAX2 property." ilk="function" line="83" lineend="85" name="getProperty" signature="getProperty(name)">
          <variable citdl="XMLReader" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <import module="handler" />
      <scope attributes="protected __hidden__" ilk="function" line="372" lineend="375" name="_test" signature="_test()" />
    </scope>
    <scope doc="Helper class to quickly write a loop over all standard input files.  Typical use is:" ilk="blob" lang="Python3" name="fileinput">
      <variable citdl="int" line="89" name="DEFAULT_BUFSIZE" />
      <scope classrefs="object" doc="class FileInput([files[, inplace[, backup[, mode[, openhook]]]]])  Class FileInput is the implementation of the module; its methods" ilk="class" line="185" lineend="378" name="FileInput" signature="class FileInput([files[, inplace[, backup[, mode[, openhook]]]]])">
        <scope ilk="function" line="267" lineend="291" name="nextfile" signature="nextfile()">
          <variable citdl="FileInput" ilk="argument" name="self" />
          <variable line="268" name="savestdout" />
          <variable line="273" name="output" />
          <variable line="278" name="file" />
          <variable line="283" name="backupfilename" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="open()" line="218" name="_file" />
        <scope ilk="function" line="237" lineend="239" name="close" signature="close()">
          <variable citdl="FileInput" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="219" name="_isstdin" />
        <scope attributes="__ctor__" ilk="function" line="198" lineend="232" name="__init__" signature="FileInput(files=None, inplace=False, backup=&apos;&apos;, bufsize=0, mode=&apos;r&apos;, openhook=None)">
          <variable citdl="FileInput" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="files" />
          <variable citdl="False" ilk="argument" name="inplace" />
          <variable citdl="str" ilk="argument" name="backup" />
          <variable citdl="int" ilk="argument" name="bufsize" />
          <variable citdl="str" ilk="argument" name="mode" />
          <variable ilk="argument" name="openhook" />
        </scope>
        <variable attributes="protected __instancevar__" line="232" name="_openhook" />
        <variable attributes="protected __instancevar__" citdl="list" line="221" name="_buffer" />
        <variable attributes="protected __instancevar__" citdl="int" line="212" name="_bufsize" />
        <variable attributes="protected __instancevar__" citdl="str" line="211" name="_backup" />
        <variable attributes="protected __instancevar__" citdl="str" line="227" name="_mode" />
        <variable attributes="protected __instancevar__" citdl="list" line="209" name="_files" />
        <scope ilk="function" line="356" lineend="357" name="filename" returns="str" signature="filename()">
          <variable citdl="FileInput" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="362" lineend="363" name="filelineno" returns="int" signature="filelineno()">
          <variable citdl="FileInput" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="359" lineend="360" name="lineno" returns="int" signature="lineno()">
          <variable citdl="FileInput" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="259" lineend="265" name="__getitem__" returns="FileInput.__next__()" signature="__getitem__(i)">
          <variable citdl="FileInput" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
        </scope>
        <scope ilk="function" line="377" lineend="378" name="isstdin" returns="bool" signature="isstdin()">
          <variable citdl="FileInput" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="234" lineend="235" name="__del__" signature="__del__()">
          <variable citdl="FileInput" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="220" name="_backupfilename" />
        <variable attributes="protected __instancevar__" citdl="int" line="213" name="_savestdout" />
        <scope ilk="function" line="244" lineend="257" name="__next__" returns="self.readline()" signature="__next__()">
          <variable citdl="FileInput" ilk="argument" name="self" />
          <variable citdl="self.readline()" line="246" name="line" />
        </scope>
        <scope ilk="function" line="241" lineend="242" name="__iter__" returns="FileInput" signature="__iter__()">
          <variable citdl="FileInput" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="293" lineend="354" name="readline" returns="str" signature="readline()">
          <variable citdl="FileInput" ilk="argument" name="self" />
          <variable line="295" name="line" />
          <variable line="326" name="perm" />
          <variable citdl="int" line="330" name="mode" />
          <variable citdl="os.open()" line="334" name="fd" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="False" line="210" name="_inplace" />
        <scope ilk="function" line="365" lineend="372" name="fileno" returns="self._file.fileno()" signature="fileno()">
          <variable citdl="FileInput" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="222" name="_bufindex" />
        <variable attributes="protected __instancevar__" citdl="int" line="216" name="_lineno" />
        <scope ilk="function" line="374" lineend="375" name="isfirstline" returns="bool" signature="isfirstline()">
          <variable citdl="FileInput" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="214" name="_output" />
        <variable attributes="protected __instancevar__" citdl="str" line="215" name="_filename" />
        <variable attributes="protected __instancevar__" citdl="int" line="217" name="_filelineno" />
      </scope>
      <variable citdl="list" line="84" name="__all__" />
      <scope doc="Close the sequence." ilk="function" line="107" lineend="113" name="close" signature="close()">
        <variable line="110" name="state" />
        <variable attributes="protected" line="111" name="_state" />
      </scope>
      <scope doc="Return the line number in the current file." ilk="function" line="148" lineend="156" name="filelineno" returns="_state.filelineno()" signature="filelineno()" />
      <scope doc="Return the name of the file currently being read." ilk="function" line="129" lineend="136" name="filename" returns="_state.filename()" signature="filename()" />
      <scope doc="Return the file number of the current file." ilk="function" line="158" lineend="165" name="fileno" returns="_state.fileno()" signature="fileno()" />
      <scope ilk="function" line="381" lineend="390" name="hook_compressed" returns="open()" signature="hook_compressed(filename, mode)">
        <variable line="382" name="ext" />
        <variable ilk="argument" name="mode" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope ilk="function" line="393" lineend="397" name="hook_encoded" returns="hook_encoded.openhook" signature="hook_encoded(encoding)">
        <scope ilk="function" line="395" lineend="396" name="openhook" returns="codecs.open()" signature="openhook(filename, mode)">
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="mode" />
        </scope>
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope doc="Create an instance of the FileInput class." ilk="function" line="91" lineend="105" name="input" returns="FileInput()" signature="input(files=None, inplace=False, backup=&quot;&quot;, bufsize=0, mode=&quot;r&quot;, openhook=None)">
        <variable ilk="argument" name="files" />
        <variable ilk="argument" name="openhook" />
        <variable attributes="protected" citdl="FileInput()" line="104" name="_state" />
        <variable citdl="False" ilk="argument" name="inplace" />
        <variable citdl="str" ilk="argument" name="mode" />
        <variable citdl="int" ilk="argument" name="bufsize" />
        <variable citdl="str" ilk="argument" name="backup" />
      </scope>
      <scope doc="Returns true the line just read is the first line of its file, otherwise returns false." ilk="function" line="167" lineend="174" name="isfirstline" returns="_state.isfirstline()" signature="isfirstline()" />
      <scope doc="Returns true if the last line was read from sys.stdin, otherwise returns false." ilk="function" line="176" lineend="183" name="isstdin" returns="_state.isstdin()" signature="isstdin()" />
      <scope doc="Return the cumulative line number of the line that has just been read." ilk="function" line="138" lineend="146" name="lineno" returns="_state.lineno()" signature="lineno()" />
      <scope doc="Close the current file so that the next iteration will read the first line from the next file (if any); lines not read from the file will not count towards the cumulative line count." ilk="function" line="115" lineend="127" name="nextfile" returns="_state.nextfile()" signature="nextfile()" />
      <import module="os" />
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="400" lineend="413" name="_test" signature="_test()">
        <import line="401" module="getopt" />
        <variable citdl="False" line="402" name="inplace" />
        <variable citdl="a" line="403" name="backup" />
        <variable citdl="list" line="409" name="line" />
      </scope>
      <variable attributes="protected __hidden__" line="87" name="_state" />
    </scope>
    <scope doc="Operator interface.  This module exports a set of functions implemented in C corresponding" ilk="blob" lang="Python3" name="operator">
      <scope doc="Same as abs(a)." ilk="function" name="__abs__" signature="abs(a)" />
      <scope doc="Same as a + b." ilk="function" name="__add__" signature="add(a, b)" />
      <scope doc="Same as a &amp; b." ilk="function" name="__and__" signature="and_(a, b)" />
      <scope doc="Same as a + b, for a and b sequences." ilk="function" name="__concat__" signature="concat(a, b)" />
      <scope doc="Same as b in a (note reversed operands)." ilk="function" name="__contains__" signature="contains(a, b)" />
      <scope doc="Same as del a[b]." ilk="function" name="__delitem__" signature="delitem(a, b)" />
      <scope doc="Same as a==b." ilk="function" name="__eq__" signature="eq(a, b)" />
      <scope doc="Same as a // b." ilk="function" name="__floordiv__" signature="floordiv(a, b)" />
      <scope doc="Same as a&gt;=b." ilk="function" name="__ge__" signature="ge(a, b)" />
      <scope doc="Same as a[b]." ilk="function" name="__getitem__" signature="getitem(a, b)" />
      <scope doc="Same as a&gt;b." ilk="function" name="__gt__" signature="gt(a, b)" />
      <scope doc="Same as a += b." ilk="function" name="__iadd__" signature="iadd(a, b) -&gt; a" />
      <scope doc="Same as a &amp;= b." ilk="function" name="__iand__" signature="iand(a, b) -&gt; a" />
      <scope doc="Same as a += b, for a and b sequences." ilk="function" name="__iconcat__" signature="iconcat(a, b) -&gt; a" />
      <scope doc="Same as a //= b." ilk="function" name="__ifloordiv__" signature="ifloordiv(a, b) -&gt; a" />
      <scope doc="Same as a &lt;&lt;= b." ilk="function" name="__ilshift__" signature="ilshift(a, b) -&gt; a" />
      <scope doc="Same as a %= b." ilk="function" name="__imod__" signature="imod(a, b) -&gt; a" />
      <scope doc="Same as a *= b." ilk="function" name="__imul__" signature="imul(a, b) -&gt; a" />
      <scope doc="Same as a.__index__()" ilk="function" name="__index__" signature="index(a)" />
      <scope doc="Same as ~a." ilk="function" name="__inv__" signature="inv(a)" />
      <scope doc="Same as ~a." ilk="function" name="__invert__" signature="invert(a)" />
      <scope doc="Same as a |= b." ilk="function" name="__ior__" signature="ior(a, b) -&gt; a" />
      <scope doc="Same as a **= b." ilk="function" name="__ipow__" signature="ipow(a, b) -&gt; a" />
      <scope doc="Same as a &gt;&gt;= b." ilk="function" name="__irshift__" signature="irshift(a, b) -&gt; a" />
      <scope doc="Same as a -= b." ilk="function" name="__isub__" signature="isub(a, b) -&gt; a" />
      <scope doc="Same as a /= b" ilk="function" name="__itruediv__" signature="itruediv(a, b) -&gt; a" />
      <scope doc="Same as a ^= b." ilk="function" name="__ixor__" signature="ixor(a, b) -&gt; a" />
      <scope doc="Same as a&lt;=b." ilk="function" name="__le__" signature="le(a, b)" />
      <scope doc="Same as a &lt;&lt; b." ilk="function" name="__lshift__" signature="lshift(a, b)" />
      <scope doc="Same as a&lt;b." ilk="function" name="__lt__" signature="lt(a, b)" />
      <scope doc="Same as a % b." ilk="function" name="__mod__" signature="mod(a, b)" />
      <scope doc="Same as a * b." ilk="function" name="__mul__" signature="mul(a, b)" />
      <scope doc="Same as a!=b." ilk="function" name="__ne__" signature="ne(a, b)" />
      <scope doc="Same as -a." ilk="function" name="__neg__" signature="neg(a)" />
      <scope doc="Same as not a." ilk="function" name="__not__" signature="not_(a)" />
      <scope doc="Same as a | b." ilk="function" name="__or__" signature="or_(a, b)" />
      <scope doc="Same as +a." ilk="function" name="__pos__" signature="pos(a)" />
      <scope doc="Same as a ** b." ilk="function" name="__pow__" signature="pow(a, b)" />
      <scope doc="Same as a &gt;&gt; b." ilk="function" name="__rshift__" signature="rshift(a, b)" />
      <scope doc="Same as a[b] = c." ilk="function" name="__setitem__" signature="setitem(a, b, c)" />
      <scope doc="Same as a - b." ilk="function" name="__sub__" signature="sub(a, b)" />
      <scope doc="Same as a / b." ilk="function" name="__truediv__" signature="truediv(a, b)" />
      <scope doc="Same as a ^ b." ilk="function" name="__xor__" signature="xor(a, b)" />
      <scope doc="Same as abs(a)." ilk="function" name="abs" signature="abs(a)" />
      <scope doc="Same as a + b." ilk="function" name="add" signature="add(a, b)" />
      <scope doc="Same as a &amp; b." ilk="function" name="and_" signature="and_(a, b)" />
      <scope classrefs="object" doc="attrgetter(attr, ...) --&gt; attrgetter object  Return a callable object that fetches the given attribute(s) from its operand." ilk="class" name="attrgetter" />
      <scope doc="Same as a + b, for a and b sequences." ilk="function" name="concat" signature="concat(a, b)" />
      <scope doc="Same as b in a (note reversed operands)." ilk="function" name="contains" signature="contains(a, b)" />
      <scope doc="Return the number of times b occurs in a." ilk="function" name="countOf" signature="countOf(a, b)" />
      <scope doc="Same as del a[b]." ilk="function" name="delitem" signature="delitem(a, b)" />
      <scope doc="Same as a==b." ilk="function" name="eq" signature="eq(a, b)" />
      <scope doc="Same as a // b." ilk="function" name="floordiv" signature="floordiv(a, b)" />
      <scope doc="Same as a&gt;=b." ilk="function" name="ge" signature="ge(a, b)" />
      <scope doc="Same as a[b]." ilk="function" name="getitem" signature="getitem(a, b)" />
      <scope doc="Same as a&gt;b." ilk="function" name="gt" signature="gt(a, b)" />
      <scope doc="Same as a += b." ilk="function" name="iadd" signature="iadd(a, b) -&gt; a" />
      <scope doc="Same as a &amp;= b." ilk="function" name="iand" signature="iand(a, b) -&gt; a" />
      <scope doc="Same as a += b, for a and b sequences." ilk="function" name="iconcat" signature="iconcat(a, b) -&gt; a" />
      <scope doc="Same as a //= b." ilk="function" name="ifloordiv" signature="ifloordiv(a, b) -&gt; a" />
      <scope doc="Same as a &lt;&lt;= b." ilk="function" name="ilshift" signature="ilshift(a, b) -&gt; a" />
      <scope doc="Same as a %= b." ilk="function" name="imod" signature="imod(a, b) -&gt; a" />
      <scope doc="Same as a *= b." ilk="function" name="imul" signature="imul(a, b) -&gt; a" />
      <scope doc="Same as a.__index__()" ilk="function" name="index" signature="index(a)" />
      <scope doc="Return the first index of b in a." ilk="function" name="indexOf" signature="indexOf(a, b)" />
      <scope doc="Same as ~a." ilk="function" name="inv" signature="inv(a)" />
      <scope doc="Same as ~a." ilk="function" name="invert" signature="invert(a)" />
      <scope doc="Same as a |= b." ilk="function" name="ior" signature="ior(a, b) -&gt; a" />
      <scope doc="Same as a **= b." ilk="function" name="ipow" signature="ipow(a, b) -&gt; a" />
      <scope doc="Same as a &gt;&gt;= b." ilk="function" name="irshift" signature="irshift(a, b) -&gt; a" />
      <scope doc="Same as a is b." ilk="function" name="is_" signature="is_(a, b)" />
      <scope doc="Same as a is not b." ilk="function" name="is_not" signature="is_not(a, b)" />
      <scope doc="Same as a -= b." ilk="function" name="isub" signature="isub(a, b) -&gt; a" />
      <scope classrefs="object" doc="itemgetter(item, ...) --&gt; itemgetter object  Return a callable object that fetches the given item(s) from its operand." ilk="class" name="itemgetter" />
      <scope doc="Same as a /= b" ilk="function" name="itruediv" signature="itruediv(a, b) -&gt; a" />
      <scope doc="Same as a ^= b." ilk="function" name="ixor" signature="ixor(a, b) -&gt; a" />
      <scope doc="Same as a&lt;=b." ilk="function" name="le" signature="le(a, b)" />
      <scope doc="Same as a &lt;&lt; b." ilk="function" name="lshift" signature="lshift(a, b)" />
      <scope doc="Same as a&lt;b." ilk="function" name="lt" signature="lt(a, b)" />
      <scope classrefs="object" doc="methodcaller(name, ...) --&gt; methodcaller object  Return a callable object that calls the given method on its operand." ilk="class" name="methodcaller" />
      <scope doc="Same as a % b." ilk="function" name="mod" signature="mod(a, b)" />
      <scope doc="Same as a * b." ilk="function" name="mul" signature="mul(a, b)" />
      <scope doc="Same as a!=b." ilk="function" name="ne" signature="ne(a, b)" />
      <scope doc="Same as -a." ilk="function" name="neg" signature="neg(a)" />
      <scope doc="Same as not a." ilk="function" name="not_" signature="not_(a)" />
      <scope doc="Same as a | b." ilk="function" name="or_" signature="or_(a, b)" />
      <scope doc="Same as +a." ilk="function" name="pos" signature="pos(a)" />
      <scope doc="Same as a ** b." ilk="function" name="pow" signature="pow(a, b)" />
      <scope doc="Same as a &gt;&gt; b." ilk="function" name="rshift" signature="rshift(a, b)" />
      <scope doc="Same as a[b] = c." ilk="function" name="setitem" signature="setitem(a, b, c)" />
      <scope doc="Same as a - b." ilk="function" name="sub" signature="sub(a, b)" />
      <scope doc="Same as a / b." ilk="function" name="truediv" signature="truediv(a, b)" />
      <scope doc="Return True if a is true, False otherwise." ilk="function" name="truth" signature="truth(a)" />
      <scope doc="Same as a ^ b." ilk="function" name="xor" signature="xor(a, b)" />
    </scope>
    <scope ilk="blob" lang="Python3" name="xml.dom.pulldom">
      <variable citdl="str" line="12" name="CHARACTERS" />
      <variable citdl="str" line="7" name="COMMENT" />
      <scope classrefs="object" ilk="class" line="205" lineend="288" name="DOMEventStream">
        <scope ilk="function" line="214" lineend="218" name="reset" signature="reset()">
          <variable citdl="DOMEventStream" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="PullDOM" line="215" name="pulldom" />
        <scope ilk="function" line="226" lineend="230" name="__next__" returns="getEvent()" signature="__next__()">
          <variable citdl="DOMEventStream" ilk="argument" name="self" />
          <variable citdl="getEvent()" line="227" name="rc" />
        </scope>
        <variable attributes="__instancevar__" citdl="function" line="250" name="getEvent" />
        <scope ilk="function" line="220" lineend="224" name="__getitem__" returns="getEvent()" signature="__getitem__(pos)">
          <variable citdl="DOMEventStream" ilk="argument" name="self" />
          <variable ilk="argument" name="pos" />
          <variable citdl="getEvent()" line="221" name="rc" />
        </scope>
        <variable attributes="__instancevar__" line="207" name="stream" />
        <scope doc="Explicitly release parsing objects" ilk="function" line="283" lineend="288" name="clear" signature="clear()">
          <variable citdl="DOMEventStream" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="208" name="parser" />
        <scope ilk="function" line="232" lineend="233" name="__iter__" returns="DOMEventStream" signature="__iter__()">
          <variable citdl="DOMEventStream" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Fallback replacement for getEvent() using the standard SAX2 interface, which means we slurp the SAX events into memory (no performance gain, but we are compatible to all SAX parsers)." ilk="function" line="265" lineend="273" name="_slurp" returns="self._emit()" signature="_slurp()">
          <variable citdl="DOMEventStream" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="235" lineend="248" name="expandNode" signature="expandNode(node)">
          <variable citdl="DOMEventStream" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable citdl="getEvent()" line="236" name="event" />
          <variable citdl="list" line="237" name="parents" />
        </scope>
        <scope attributes="protected" doc="Fallback replacement for getEvent() that emits the events that _slurp() read previously." ilk="function" line="275" lineend="281" name="_emit" signature="_emit()">
          <variable citdl="DOMEventStream" ilk="argument" name="self" />
          <variable line="279" name="rc" />
        </scope>
        <variable attributes="__instancevar__" line="209" name="bufsize" />
        <scope attributes="__ctor__" ilk="function" line="206" lineend="212" name="__init__" signature="DOMEventStream(stream, parser, bufsize)">
          <variable citdl="DOMEventStream" ilk="argument" name="self" />
          <variable ilk="argument" name="stream" />
          <variable ilk="argument" name="parser" />
          <variable ilk="argument" name="bufsize" />
        </scope>
      </scope>
      <variable citdl="str" line="9" name="END_DOCUMENT" />
      <variable citdl="str" line="6" name="END_ELEMENT" />
      <scope classrefs="object" ilk="class" line="197" lineend="203" name="ErrorHandler">
        <scope ilk="function" line="198" lineend="199" name="warning" signature="warning(exception)">
          <variable citdl="ErrorHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="exception" />
        </scope>
        <scope ilk="function" line="202" lineend="203" name="fatalError" signature="fatalError(exception)">
          <variable citdl="ErrorHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="exception" />
        </scope>
        <scope ilk="function" line="200" lineend="201" name="error" signature="error(exception)">
          <variable citdl="ErrorHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="exception" />
        </scope>
      </scope>
      <variable citdl="str" line="11" name="IGNORABLE_WHITESPACE" />
      <variable citdl="str" line="10" name="PROCESSING_INSTRUCTION" />
      <scope classrefs="ContentHandler" ilk="class" line="14" lineend="195" name="PullDOM">
        <scope ilk="function" line="132" lineend="139" name="comment" signature="comment(s)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
          <variable citdl="self.document.createComment()" line="134" name="node" />
          <variable citdl="list" line="138" name="event" />
        </scope>
        <scope ilk="function" line="34" lineend="37" name="pop" signature="pop()">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable line="35" name="result" />
        </scope>
        <scope ilk="function" line="39" lineend="40" name="setDocumentLocator" signature="setDocumentLocator(locator)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="locator" />
        </scope>
        <scope ilk="function" line="150" lineend="153" name="ignorableWhitespace" signature="ignorableWhitespace(chars)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="chars" />
          <variable citdl="self.document.createTextNode()" line="151" name="node" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="18" lineend="32" name="__init__" signature="PullDOM(documentFactory=None)">
          <import line="19" module="xml.dom" symbol="XML_NAMESPACE" />
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="documentFactory" />
        </scope>
        <scope ilk="function" line="109" lineend="111" name="endElementNS" signature="endElementNS(name, tagName)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="tagName" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="32" name="pending_events" />
        <variable attributes="protected __instancevar__" citdl="self._ns_contexts.pop()" line="31" name="_current_context" />
        <scope ilk="function" line="160" lineend="163" name="startDocument" signature="startDocument()">
          <import line="162" module="xml.dom.minidom" />
          <variable citdl="PullDOM" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="21" name="firstEvent" />
        <variable citdl="self.documentFactory.createDocument()" line="16" name="document" />
        <scope ilk="function" line="42" lineend="47" name="startPrefixMapping" signature="startPrefixMapping(prefix, uri)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
          <variable ilk="argument" name="uri" />
        </scope>
        <scope ilk="function" line="49" lineend="50" name="endPrefixMapping" signature="endPrefixMapping(prefix)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="list" line="30" name="_ns_contexts" />
        <scope ilk="function" line="141" lineend="148" name="processingInstruction" signature="processingInstruction(target, data)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="data" />
          <variable citdl="self.document.createProcessingInstruction()" line="143" name="node" />
          <variable citdl="list" line="147" name="event" />
        </scope>
        <scope ilk="function" line="128" lineend="130" name="endElement" signature="endElement(name)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="protected" line="15" name="_locator" />
        <scope ilk="function" line="113" lineend="126" name="startElement" signature="startElement(name, attrs)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="attrs" />
          <variable citdl="self.buildDocument()" line="115" name="node" />
          <variable citdl="self.document.createAttribute()" line="120" name="attr" />
        </scope>
        <scope ilk="function" line="52" lineend="107" name="startElementNS" signature="startElementNS(name, tagName, attrs)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="localname" ilk="argument" name="tagName" />
          <variable ilk="argument" name="attrs" />
          <variable citdl="str" line="54" name="xmlns_uri" />
          <variable citdl="getattr()" line="55" name="xmlns_attrs" />
          <variable line="66" name="prefix" />
          <variable citdl="self.buildDocument()" line="72" name="node" />
          <variable citdl="a_localname" line="87" name="qname" />
          <variable citdl="self.document.createAttributeNS()" line="90" name="attr" />
        </scope>
        <scope ilk="function" line="165" lineend="187" name="buildDocument" returns="node.firstChild" signature="buildDocument(uri, tagname)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="uri" />
          <variable ilk="argument" name="tagname" />
          <variable citdl="self.documentFactory.createDocument()" line="168" name="node" />
          <variable citdl="self.document.createComment()" line="177" name="n" />
        </scope>
        <scope ilk="function" line="155" lineend="158" name="characters" signature="characters(chars)">
          <variable citdl="PullDOM" ilk="argument" name="self" />
          <variable ilk="argument" name="chars" />
          <variable citdl="self.document.createTextNode()" line="156" name="node" />
        </scope>
        <variable attributes="__instancevar__" citdl="xml.dom.minidom.Document.implementation" line="20" name="documentFactory" />
        <variable attributes="__instancevar__" citdl="e" line="22" name="lastEvent" />
        <scope doc="Explicitly release parsing structures" ilk="function" line="193" lineend="195" name="clear" signature="clear()">
          <variable citdl="PullDOM" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="23" name="elementStack" />
        <variable attributes="protected __instancevar__" citdl="list" line="44" name="_xmlns_attrs" />
        <scope ilk="function" line="189" lineend="191" name="endDocument" signature="endDocument()">
          <variable citdl="PullDOM" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.elementStack.append" line="24" name="push" />
      </scope>
      <scope classrefs="PullDOM" ilk="class" line="290" lineend="320" name="SAX2DOM">
        <scope ilk="function" line="298" lineend="302" name="startElement" signature="startElement(name, attrs)">
          <variable citdl="SAX2DOM" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="attrs" />
          <variable line="300" name="curNode" />
          <variable line="301" name="parentNode" />
        </scope>
        <scope ilk="function" line="310" lineend="314" name="ignorableWhitespace" signature="ignorableWhitespace(chars)">
          <variable citdl="SAX2DOM" ilk="argument" name="self" />
          <variable ilk="argument" name="chars" />
          <variable line="312" name="node" />
          <variable line="313" name="parentNode" />
        </scope>
        <scope ilk="function" line="292" lineend="296" name="startElementNS" signature="startElementNS(name, tagName, attrs)">
          <variable citdl="SAX2DOM" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="tagName" />
          <variable ilk="argument" name="attrs" />
          <variable line="294" name="curNode" />
          <variable line="295" name="parentNode" />
        </scope>
        <scope ilk="function" line="316" lineend="320" name="characters" signature="characters(chars)">
          <variable citdl="SAX2DOM" ilk="argument" name="self" />
          <variable ilk="argument" name="chars" />
          <variable line="318" name="node" />
          <variable line="319" name="parentNode" />
        </scope>
        <scope ilk="function" line="304" lineend="308" name="processingInstruction" signature="processingInstruction(target, data)">
          <variable citdl="SAX2DOM" ilk="argument" name="self" />
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="data" />
          <variable line="306" name="node" />
          <variable line="307" name="parentNode" />
        </scope>
      </scope>
      <variable citdl="str" line="8" name="START_DOCUMENT" />
      <variable citdl="str" line="5" name="START_ELEMENT" />
      <variable citdl="int" line="323" name="default_bufsize" />
      <scope ilk="function" line="325" lineend="334" name="parse" returns="DOMEventStream" signature="parse(stream_or_string, parser=None, bufsize=None)">
        <variable citdl="xml.sax.make_parser()" ilk="argument" name="parser" />
        <variable ilk="argument" name="stream_or_string" />
        <variable citdl="int" ilk="argument" name="bufsize" />
        <variable citdl="open()" line="329" name="stream" />
      </scope>
      <scope ilk="function" line="336" lineend="346" name="parseString" returns="DOMEventStream" signature="parseString(string, parser=None)">
        <variable citdl="xml.sax.make_parser()" ilk="argument" name="parser" />
        <variable citdl="StringIO()" line="343" name="buf" />
        <variable citdl="len()" line="342" name="bufsize" />
        <variable ilk="argument" name="string" />
      </scope>
      <import module="types" />
      <import module="xml" />
    </scope>
    <scope doc="Thread-local objects.  (Note that this module provides a Python version of the threading.local" ilk="blob" lang="Python3" name="_threading_local">
      <scope ilk="function" name="RLock" signature="RLock(*args, **kwargs)" />
      <variable citdl="list" line="135" name="__all__" />
      <scope ilk="function" name="current_thread" signature="current_thread()" />
      <scope classrefs="_localbase" ilk="class" line="185" lineend="240" name="local">
        <scope ilk="function" line="214" lineend="240" name="__del__" signature="__del__()">
          <import line="215" module="threading" />
          <variable citdl="local" ilk="argument" name="self" />
          <variable citdl="object.__getattribute__()" line="217" name="key" />
          <variable citdl="threading._enumerate()" line="222" name="threads" />
          <variable citdl="dict" line="231" name="__dict__" />
        </scope>
        <scope ilk="function" line="205" lineend="212" name="__delattr__" returns="object.__delattr__()" signature="__delattr__(name)">
          <variable citdl="local" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="object.__getattribute__()" line="206" name="lock" />
        </scope>
        <scope ilk="function" line="196" lineend="203" name="__setattr__" returns="object.__setattr__()" signature="__setattr__(name, value)">
          <variable citdl="local" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
          <variable citdl="object.__getattribute__()" line="197" name="lock" />
        </scope>
        <scope ilk="function" line="187" lineend="194" name="__getattribute__" returns="object.__getattribute__()" signature="__getattribute__(name)">
          <variable citdl="local" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable citdl="object.__getattribute__()" line="188" name="lock" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="object" ilk="class" line="147" lineend="166" name="_localbase">
        <variable citdl="tuple" line="148" name="__slots__" />
        <scope ilk="function" line="150" lineend="166" name="__new__" returns="object.__new__()" signature="__new__(*args, **kw)">
          <variable citdl="_localbase" ilk="argument" name="cls" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="object.__new__()" line="151" name="self" />
          <variable citdl="tuple" line="152" name="key" />
          <variable citdl="object.__getattribute__()" line="163" name="dict" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="168" lineend="183" name="_patch" signature="_patch(self)">
        <variable ilk="argument" name="self" />
        <variable citdl="object.__getattribute__()" line="169" name="key" />
        <variable citdl="dict" line="170" name="d" />
        <variable citdl="type()" line="178" name="cls" />
      </scope>
    </scope>
    <scope doc="distutils.command.install_data  Implements the Distutils &apos;install_data&apos; command, for installing" ilk="blob" lang="Python3" name="distutils.command.install_data">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <variable citdl="str" line="8" name="__revision__" />
      <scope doc="Return &apos;pathname&apos; with &apos;new_root&apos; prepended." ilk="function" name="change_root" signature="change_root(new_root, pathname)" />
      <scope doc="Return &apos;pathname&apos; as a name that will work on the native filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope classrefs="Command" ilk="class" line="14" lineend="81" name="install_data">
        <variable citdl="list" line="18" name="user_options" />
        <variable attributes="__instancevar__" citdl="int" line="33" name="force" />
        <variable citdl="str" line="16" name="description" />
        <scope ilk="function" line="77" lineend="78" name="get_inputs" returns="self.distribution.data_files" signature="get_inputs()">
          <variable citdl="install_data" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="29" lineend="35" name="initialize_options" signature="initialize_options()">
          <variable citdl="install_data" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="30" name="install_dir" />
        <variable attributes="__instancevar__" citdl="int" line="35" name="warn_dir" />
        <scope ilk="function" line="44" lineend="75" name="run" signature="run()">
          <variable citdl="install_data" ilk="argument" name="self" />
          <variable citdl="convert_path()" line="49" name="f" />
          <variable citdl="change_root()" line="58" name="dir" />
          <variable citdl="convert_path()" line="73" name="data" />
        </scope>
        <variable citdl="list" line="27" name="boolean_options" />
        <scope ilk="function" line="37" lineend="41" name="finalize_options" signature="finalize_options()">
          <variable citdl="install_data" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="80" lineend="81" name="get_outputs" returns="list" signature="get_outputs()">
          <variable citdl="install_data" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="31" name="outfiles" />
        <variable attributes="__instancevar__" citdl="self.distribution.data_files" line="34" name="data_files" />
        <variable attributes="__instancevar__" line="32" name="root" />
      </scope>
      <import module="os" />
    </scope>
    <scope doc="Fixer for except statements with named exceptions.  The following cases will be converted:" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_except">
      <scope doc="Build an assignment statement" ilk="function" name="Assign" signature="Assign(target, source)" />
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope classrefs="BaseFix" ilk="class" line="36" lineend="92" name="FixExcept">
        <variable citdl="str" line="38" name="PATTERN" />
        <scope ilk="function" line="46" lineend="92" name="transform" returns="pytree.Node()" signature="transform(node, results)">
          <variable citdl="FixExcept" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="self.syms" line="47" name="syms" />
          <variable citdl="list" line="49" name="tail" />
          <variable citdl="list" line="51" name="try_cleanup" />
          <variable citdl="Name()" line="59" name="new_N" />
          <variable citdl="N.clone()" line="60" name="target" />
          <variable citdl="e_suite.children" line="69" name="suite_stmts" />
          <variable citdl="Assign()" line="77" name="assign" />
          <variable citdl="list" line="91" name="children" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope ilk="function" line="30" lineend="34" name="find_excepts" signature="find_excepts(nodes)">
        <variable ilk="argument" name="nodes" />
      </scope>
      <import module="fixer_base" />
      <scope doc="Does the node represent a list literal?" ilk="function" name="is_list" signature="is_list(node)" />
      <scope doc="Does the node represent a tuple literal?" ilk="function" name="is_tuple" signature="is_tuple(node)" />
      <import module="pytree" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="distutils.command.check  Implements the Distutils &apos;check&apos; command." ilk="blob" lang="Python3" name="distutils.command.check">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <variable citdl="bool" line="29" name="HAS_DOCUTILS" />
      <variable citdl="str" line="5" name="__revision__" />
      <scope classrefs="Command" doc="This command checks the meta-data of the package." ilk="class" line="35" lineend="144" name="check">
        <scope attributes="protected" doc="Returns warnings when the provided data doesn&apos;t compile." ilk="function" line="120" lineend="144" name="_check_rst_data" returns="reporter.messages" signature="_check_rst_data(data)">
          <variable citdl="check" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="StringIO()" line="122" name="source_path" />
          <variable citdl="Parser()" line="123" name="parser" />
          <variable line="124" name="settings" />
          <variable citdl="SilentReporter" line="128" name="reporter" />
          <variable citdl="nodes.document()" line="136" name="document" />
        </scope>
        <variable citdl="list" line="39" name="user_options" />
        <scope doc="Runs the command." ilk="function" line="63" lineend="77" name="run" signature="run()">
          <variable citdl="check" ilk="argument" name="self" />
        </scope>
        <variable citdl="str" line="38" name="description" />
        <scope doc="Sets default values for options." ilk="function" line="48" lineend="53" name="initialize_options" signature="initialize_options()">
          <variable citdl="check" ilk="argument" name="self" />
        </scope>
        <scope doc="Checks if the long string fields are reST-compliant." ilk="function" line="109" lineend="118" name="check_restructuredtext" signature="check_restructuredtext()">
          <variable citdl="check" ilk="argument" name="self" />
          <variable citdl="self.distribution.get_long_description()" line="111" name="data" />
          <variable line="113" name="line" />
          <variable citdl="str" line="115" name="warning" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="50" name="restructuredtext" />
        <scope doc="Ensures that all required elements of meta-data are supplied." ilk="function" line="79" lineend="107" name="check_metadata" signature="check_metadata()">
          <variable citdl="check" ilk="argument" name="self" />
          <variable citdl="self.distribution.metadata" line="87" name="metadata" />
          <variable citdl="list" line="89" name="missing" />
        </scope>
        <scope doc="Counts the number of warnings that occurs." ilk="function" line="58" lineend="61" name="warn" returns="Command.warn()" signature="warn(msg)">
          <variable citdl="check" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="52" name="strict" />
        <variable citdl="list" line="46" name="boolean_options" />
        <scope ilk="function" line="55" lineend="56" name="finalize_options" signature="finalize_options()">
          <variable citdl="check" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="53" name="_warnings" />
        <variable attributes="__instancevar__" citdl="int" line="51" name="metadata" />
      </scope>
      <scope attributes="__hidden__" classrefs="Reporter" ilk="class" line="18" lineend="27" name="SilentReporter">
        <scope attributes="__ctor__" ilk="function" line="20" lineend="24" name="__init__" signature="SilentReporter(source, report_level, halt_level, stream=None, debug=0, encoding=&apos;ascii&apos;, error_handler=&apos;replace&apos;)">
          <variable citdl="SilentReporter" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="report_level" />
          <variable ilk="argument" name="halt_level" />
          <variable ilk="argument" name="stream" />
          <variable citdl="int" ilk="argument" name="debug" />
          <variable citdl="str" ilk="argument" name="encoding" />
          <variable citdl="str" ilk="argument" name="error_handler" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="22" name="messages" />
        <scope ilk="function" line="26" lineend="27" name="system_message" signature="system_message(level, message, *children, **kwargs)">
          <variable citdl="SilentReporter" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
          <variable ilk="argument" name="message" />
          <variable attributes="varargs" ilk="argument" name="children" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
      </scope>
    </scope>
    <scope doc="This module makes available standard errno system symbols.  The value of each symbol is the corresponding integer value," ilk="blob" lang="Python3" name="errno">
      <variable citdl="int" name="E2BIG" />
      <variable citdl="int" name="EACCES" />
      <variable citdl="int" name="EADDRINUSE" />
      <variable citdl="int" name="EADDRNOTAVAIL" />
      <variable citdl="int" name="EAFNOSUPPORT" />
      <variable citdl="int" name="EAGAIN" />
      <variable citdl="int" name="EALREADY" />
      <variable citdl="int" name="EBADF" />
      <variable citdl="int" name="EBUSY" />
      <variable citdl="int" name="ECHILD" />
      <variable citdl="int" name="ECONNABORTED" />
      <variable citdl="int" name="ECONNREFUSED" />
      <variable citdl="int" name="ECONNRESET" />
      <variable citdl="int" name="EDEADLK" />
      <variable citdl="int" name="EDEADLOCK" />
      <variable citdl="int" name="EDESTADDRREQ" />
      <variable citdl="int" name="EDOM" />
      <variable citdl="int" name="EDQUOT" />
      <variable citdl="int" name="EEXIST" />
      <variable citdl="int" name="EFAULT" />
      <variable citdl="int" name="EFBIG" />
      <variable citdl="int" name="EHOSTDOWN" />
      <variable citdl="int" name="EHOSTUNREACH" />
      <variable citdl="int" name="EILSEQ" />
      <variable citdl="int" name="EINPROGRESS" />
      <variable citdl="int" name="EINTR" />
      <variable citdl="int" name="EINVAL" />
      <variable citdl="int" name="EIO" />
      <variable citdl="int" name="EISCONN" />
      <variable citdl="int" name="EISDIR" />
      <variable citdl="int" name="ELOOP" />
      <variable citdl="int" name="EMFILE" />
      <variable citdl="int" name="EMLINK" />
      <variable citdl="int" name="EMSGSIZE" />
      <variable citdl="int" name="ENAMETOOLONG" />
      <variable citdl="int" name="ENETDOWN" />
      <variable citdl="int" name="ENETRESET" />
      <variable citdl="int" name="ENETUNREACH" />
      <variable citdl="int" name="ENFILE" />
      <variable citdl="int" name="ENOBUFS" />
      <variable citdl="int" name="ENODEV" />
      <variable citdl="int" name="ENOENT" />
      <variable citdl="int" name="ENOEXEC" />
      <variable citdl="int" name="ENOLCK" />
      <variable citdl="int" name="ENOMEM" />
      <variable citdl="int" name="ENOPROTOOPT" />
      <variable citdl="int" name="ENOSPC" />
      <variable citdl="int" name="ENOSYS" />
      <variable citdl="int" name="ENOTCONN" />
      <variable citdl="int" name="ENOTDIR" />
      <variable citdl="int" name="ENOTEMPTY" />
      <variable citdl="int" name="ENOTSOCK" />
      <variable citdl="int" name="ENOTTY" />
      <variable citdl="int" name="ENXIO" />
      <variable citdl="int" name="EOPNOTSUPP" />
      <variable citdl="int" name="EPERM" />
      <variable citdl="int" name="EPFNOSUPPORT" />
      <variable citdl="int" name="EPIPE" />
      <variable citdl="int" name="EPROTONOSUPPORT" />
      <variable citdl="int" name="EPROTOTYPE" />
      <variable citdl="int" name="ERANGE" />
      <variable citdl="int" name="EREMOTE" />
      <variable citdl="int" name="EROFS" />
      <variable citdl="int" name="ESHUTDOWN" />
      <variable citdl="int" name="ESOCKTNOSUPPORT" />
      <variable citdl="int" name="ESPIPE" />
      <variable citdl="int" name="ESRCH" />
      <variable citdl="int" name="ESTALE" />
      <variable citdl="int" name="ETIMEDOUT" />
      <variable citdl="int" name="ETOOMANYREFS" />
      <variable citdl="int" name="EUSERS" />
      <variable citdl="int" name="EWOULDBLOCK" />
      <variable citdl="int" name="EXDEV" />
      <variable citdl="int" name="WSABASEERR" />
      <variable citdl="int" name="WSAEACCES" />
      <variable citdl="int" name="WSAEADDRINUSE" />
      <variable citdl="int" name="WSAEADDRNOTAVAIL" />
      <variable citdl="int" name="WSAEAFNOSUPPORT" />
      <variable citdl="int" name="WSAEALREADY" />
      <variable citdl="int" name="WSAEBADF" />
      <variable citdl="int" name="WSAECONNABORTED" />
      <variable citdl="int" name="WSAECONNREFUSED" />
      <variable citdl="int" name="WSAECONNRESET" />
      <variable citdl="int" name="WSAEDESTADDRREQ" />
      <variable citdl="int" name="WSAEDISCON" />
      <variable citdl="int" name="WSAEDQUOT" />
      <variable citdl="int" name="WSAEFAULT" />
      <variable citdl="int" name="WSAEHOSTDOWN" />
      <variable citdl="int" name="WSAEHOSTUNREACH" />
      <variable citdl="int" name="WSAEINPROGRESS" />
      <variable citdl="int" name="WSAEINTR" />
      <variable citdl="int" name="WSAEINVAL" />
      <variable citdl="int" name="WSAEISCONN" />
      <variable citdl="int" name="WSAELOOP" />
      <variable citdl="int" name="WSAEMFILE" />
      <variable citdl="int" name="WSAEMSGSIZE" />
      <variable citdl="int" name="WSAENAMETOOLONG" />
      <variable citdl="int" name="WSAENETDOWN" />
      <variable citdl="int" name="WSAENETRESET" />
      <variable citdl="int" name="WSAENETUNREACH" />
      <variable citdl="int" name="WSAENOBUFS" />
      <variable citdl="int" name="WSAENOPROTOOPT" />
      <variable citdl="int" name="WSAENOTCONN" />
      <variable citdl="int" name="WSAENOTEMPTY" />
      <variable citdl="int" name="WSAENOTSOCK" />
      <variable citdl="int" name="WSAEOPNOTSUPP" />
      <variable citdl="int" name="WSAEPFNOSUPPORT" />
      <variable citdl="int" name="WSAEPROCLIM" />
      <variable citdl="int" name="WSAEPROTONOSUPPORT" />
      <variable citdl="int" name="WSAEPROTOTYPE" />
      <variable citdl="int" name="WSAEREMOTE" />
      <variable citdl="int" name="WSAESHUTDOWN" />
      <variable citdl="int" name="WSAESOCKTNOSUPPORT" />
      <variable citdl="int" name="WSAESTALE" />
      <variable citdl="int" name="WSAETIMEDOUT" />
      <variable citdl="int" name="WSAETOOMANYREFS" />
      <variable citdl="int" name="WSAEUSERS" />
      <variable citdl="int" name="WSAEWOULDBLOCK" />
      <variable citdl="int" name="WSANOTINITIALISED" />
      <variable citdl="int" name="WSASYSNOTREADY" />
      <variable citdl="int" name="WSAVERNOTSUPPORTED" />
      <variable citdl="dict" name="errorcode" />
    </scope>
    <scope doc="# A higher level module for using sockets (or Windows named pipes) # # multiprocessing/connection.py" ilk="blob" lang="Python3" name="multiprocessing.connection">
      <scope classrefs="ProcessError" ilk="class" name="AuthenticationError" />
      <variable citdl="int" line="29" name="BUFSIZE" />
      <variable citdl="bytes" line="363" name="CHALLENGE" />
      <variable citdl="float" line="31" name="CONNECTION_TIMEOUT" />
      <scope doc="Returns a connection to the address of a `Listener`" ilk="function" line="135" lineend="152" name="Client" returns="PipeClient()" signature="Client(address, family=None, authkey=None)">
        <variable ilk="argument" name="authkey" />
        <variable citdl="SocketClient()" line="141" name="c" />
        <variable citdl="address_type()" ilk="argument" name="family" />
        <variable ilk="argument" name="address" />
      </scope>
      <scope classrefs="object" ilk="class" line="396" lineend="409" name="ConnectionWrapper">
        <variable attributes="protected __instancevar__" line="400" name="_loads" />
        <variable attributes="protected __instancevar__" line="399" name="_dumps" />
        <scope ilk="function" line="404" lineend="406" name="send" signature="send(obj)">
          <variable citdl="ConnectionWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable citdl="_dumps()" line="405" name="s" />
        </scope>
        <variable attributes="protected __instancevar__" line="398" name="_conn" />
        <scope ilk="function" line="407" lineend="409" name="recv" returns="ConnectionWrapper._loads()" signature="recv()">
          <variable citdl="ConnectionWrapper" ilk="argument" name="self" />
          <variable citdl="self._conn.recv_bytes()" line="408" name="s" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="397" lineend="403" name="__init__" signature="ConnectionWrapper(conn, dumps, loads)">
          <variable citdl="ConnectionWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="conn" />
          <variable ilk="argument" name="dumps" />
          <variable ilk="argument" name="loads" />
          <variable citdl="getattr()" line="402" name="obj" />
        </scope>
      </scope>
      <variable citdl="bytes" line="365" name="FAILURE" />
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs" ilk="class" name="Finalize" />
      <scope classrefs="object" doc="Returns a listener object.  This is a wrapper for a bound socket which is &apos;listening&apos; for" ilk="class" line="91" lineend="132" name="Listener">
        <variable citdl="property()" line="132" name="last_accepted" />
        <variable attributes="protected __instancevar__" citdl="SocketListener()" line="104" name="_listener" />
        <scope doc="Accept a connection on the bound socket or named pipe of `self`." ilk="function" line="113" lineend="123" name="accept" returns="self._listener.accept()" signature="accept()">
          <variable citdl="Listener" ilk="argument" name="self" />
          <variable citdl="self._listener.accept()" line="119" name="c" />
        </scope>
        <variable attributes="protected __instancevar__" line="111" name="_authkey" />
        <variable citdl="property()" line="131" name="address" />
        <scope doc="Close the bound socket or named pipe of `self`." ilk="function" line="125" lineend="129" name="close" returns="self._listener.close()" signature="close()">
          <variable citdl="Listener" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="98" lineend="111" name="__init__" signature="Listener(address=None, family=None, backlog=1, authkey=None)">
          <variable citdl="Listener" ilk="argument" name="self" />
          <variable citdl="arbitrary_address()" ilk="argument" name="address" />
          <variable citdl="address_type()" ilk="argument" name="family" />
          <variable citdl="int" ilk="argument" name="backlog" />
          <variable ilk="argument" name="authkey" />
        </scope>
      </scope>
      <variable citdl="int" line="361" name="MESSAGE_LENGTH" />
      <scope doc="Returns pair of connection objects at either end of a pipe" ilk="function" line="178" lineend="214" name="Pipe" returns="tuple" signature="Pipe(duplex=True)">
        <variable citdl="win32.PIPE_ACCESS_DUPLEX" line="184" name="openmode" />
        <variable citdl="True" ilk="argument" name="duplex" />
        <variable citdl="int" line="186" name="obsize" />
        <variable citdl="win32.CreateNamedPipe()" line="192" name="h1" />
        <variable citdl="int" line="185" name="access" />
        <variable citdl="win32.CreateFile()" line="198" name="h2" />
        <variable citdl="arbitrary_address()" line="182" name="address" />
        <variable citdl="_multiprocessing.PipeConnection()" line="212" name="c2" />
        <variable citdl="int" line="186" name="ibsize" />
        <variable citdl="_multiprocessing.PipeConnection()" line="211" name="c1" />
      </scope>
      <scope doc="Return a connection object connected to the pipe given by `address`" ilk="function" line="331" lineend="355" name="PipeClient" returns="_multiprocessing.PipeConnection()" signature="PipeClient(address)">
        <variable citdl="win32.CreateFile()" line="339" name="h" />
        <variable citdl="_init_timeout()" line="335" name="t" />
        <variable ilk="argument" name="address" />
      </scope>
      <scope classrefs="object" doc="Representation of a named pipe" ilk="class" line="285" lineend="329" name="PipeListener">
        <scope attributes="protected" ilk="function" line="326" lineend="329" name="_finalize_pipe_listener" signature="_finalize_pipe_listener(address)">
          <variable citdl="PipeListener" ilk="argument" name="queue" />
          <variable ilk="argument" name="address" />
        </scope>
        <variable attributes="protected __instancevar__" line="290" name="_address" />
        <scope ilk="function" line="308" lineend="323" name="accept" returns="_multiprocessing.PipeConnection()" signature="accept()">
          <variable citdl="PipeListener" ilk="argument" name="self" />
          <variable citdl="win32.CreateNamedPipe()" line="309" name="newhandle" />
          <variable citdl="self._handle_queue.pop()" line="317" name="handle" />
        </scope>
        <variable attributes="protected __instancevar__" line="299" name="_last_accepted" />
        <variable attributes="__instancevar__" citdl="Finalize()" line="303" name="close" />
        <variable attributes="protected __instancevar__" citdl="list" line="298" name="_handle_queue" />
        <scope attributes="__ctor__" ilk="function" line="289" lineend="305" name="__init__" signature="PipeListener(address, backlog=None)">
          <variable citdl="PipeListener" ilk="argument" name="self" />
          <variable ilk="argument" name="address" />
          <variable ilk="argument" name="backlog" />
          <variable citdl="win32.CreateNamedPipe()" line="291" name="handle" />
        </scope>
      </scope>
      <scope doc="Return a connection object connected to the socket given by `address`" ilk="function" line="253" lineend="277" name="SocketClient" returns="_multiprocessing.Connection()" signature="SocketClient(address)">
        <variable citdl="address_type()" line="257" name="family" />
        <variable citdl="socket.socket()" line="258" name="s" />
        <variable citdl="duplicate()" line="274" name="fd" />
        <variable citdl="_init_timeout()" line="259" name="t" />
        <variable ilk="argument" name="address" />
        <variable citdl="_multiprocessing.Connection()" line="275" name="conn" />
      </scope>
      <scope classrefs="object" doc="Representation of a socket which is bound to an address and listening" ilk="class" line="220" lineend="250" name="SocketListener">
        <variable attributes="protected __instancevar__" citdl="self._socket.getsockname()" line="229" name="_address" />
        <variable attributes="protected __instancevar__" line="231" name="_last_accepted" />
        <variable attributes="protected __instancevar__" citdl="socket.socket()" line="225" name="_socket" />
        <scope ilk="function" line="240" lineend="245" name="accept" returns="_multiprocessing.Connection()" signature="accept()">
          <variable citdl="SocketListener" ilk="argument" name="self" />
          <variable citdl="duplicate()" line="242" name="fd" />
          <variable citdl="_multiprocessing.Connection()" line="243" name="conn" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="Finalize()" line="234" name="_unlink" />
        <scope ilk="function" line="247" lineend="250" name="close" signature="close()">
          <variable citdl="SocketListener" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="230" name="_family" />
        <scope attributes="__ctor__" ilk="function" line="224" lineend="238" name="__init__" signature="SocketListener(address, family, backlog=1)">
          <variable citdl="SocketListener" ilk="argument" name="self" />
          <variable ilk="argument" name="address" />
          <variable ilk="argument" name="family" />
          <variable citdl="int" ilk="argument" name="backlog" />
        </scope>
      </scope>
      <variable citdl="bytes" line="364" name="WELCOME" />
      <scope ilk="function" line="425" lineend="428" name="XmlClient" returns="ConnectionWrapper" signature="XmlClient(*args, **kwds)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable attributes="kwargs" ilk="argument" name="kwds" />
      </scope>
      <scope classrefs="Listener" ilk="class" line="418" lineend="423" name="XmlListener">
        <scope ilk="function" line="419" lineend="423" name="accept" returns="ConnectionWrapper" signature="accept()">
          <import alias="xmlrpclib" line="421" module="xmlrpc.client" />
          <variable citdl="XmlListener" ilk="argument" name="self" />
          <variable citdl="Listener.accept()" line="422" name="obj" />
        </scope>
      </scope>
      <variable citdl="list" line="9" name="__all__" />
      <import module="_multiprocessing" />
      <scope doc="Return the types of the address" ilk="function" line="72" lineend="85" name="address_type" returns="str" signature="address_type(address)">
        <variable ilk="argument" name="address" />
      </scope>
      <scope ilk="function" line="380" lineend="390" name="answer_challenge" signature="answer_challenge(connection, authkey)">
        <variable ilk="argument" name="authkey" />
        <variable ilk="argument" name="connection" />
        <variable citdl="list" line="383" name="message" />
        <variable line="386" name="digest" />
        <variable citdl="connection.recv_bytes()" line="388" name="response" />
      </scope>
      <scope doc="Return an arbitrary free address for the given family" ilk="function" line="57" lineend="69" name="arbitrary_address" returns="tuple" signature="arbitrary_address(family)">
        <variable ilk="argument" name="family" />
      </scope>
      <scope ilk="function" name="close" />
      <scope doc="Return process object representing the current process" ilk="function" name="current_process" signature="current_process()" />
      <scope ilk="function" name="debug" signature="debug(msg, *args)" />
      <variable citdl="str" line="35" name="default_family" />
      <scope ilk="function" line="367" lineend="378" name="deliver_challenge" signature="deliver_challenge(connection, authkey)">
        <variable ilk="argument" name="authkey" />
        <variable ilk="argument" name="connection" />
        <variable citdl="os.urandom()" line="370" name="message" />
        <variable line="372" name="digest" />
        <variable citdl="connection.recv_bytes()" line="373" name="response" />
      </scope>
      <scope ilk="function" name="duplicate" signature="duplicate(handle, target_process=None, inheritable=False)" />
      <import module="errno" />
      <variable citdl="list" line="36" name="families" />
      <scope ilk="function" name="get_temp_dir" signature="get_temp_dir()" />
      <import module="itertools" />
      <import module="os" />
      <import module="socket" />
      <scope ilk="function" name="sub_debug" signature="sub_debug(msg, *args)" />
      <import module="sys" />
      <import module="tempfile" />
      <import module="time" />
      <scope classrefs="object" ilk="class" name="win32" />
      <scope attributes="protected __hidden__" ilk="function" line="47" lineend="48" name="_init_timeout" returns="time.time()" signature="_init_timeout(timeout=CONNECTION_TIMEOUT)">
        <variable citdl="float" ilk="argument" name="timeout" />
      </scope>
      <variable attributes="protected __hidden__" citdl="itertools.count()" line="33" name="_mmap_counter" />
      <scope attributes="protected __hidden__" ilk="function" line="411" lineend="412" name="_xml_dumps" signature="_xml_dumps(obj)">
        <variable ilk="argument" name="obj" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="414" lineend="416" name="_xml_loads" returns="obj" signature="_xml_loads(s)">
        <variable ilk="argument" name="s" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="50" lineend="51" name="_check_timeout" returns="bool" signature="_check_timeout(t)">
        <variable ilk="argument" name="t" />
      </scope>
    </scope>
    <scope doc="Implementation module for socket operations.  See the socket module for documentation." ilk="blob" lang="Python3" name="_socket">
      <variable citdl="int" name="AF_APPLETALK" />
      <variable citdl="int" name="AF_DECnet" />
      <variable citdl="int" name="AF_INET" />
      <variable citdl="int" name="AF_INET6" />
      <variable citdl="int" name="AF_IPX" />
      <variable citdl="int" name="AF_IRDA" />
      <variable citdl="int" name="AF_SNA" />
      <variable citdl="int" name="AF_UNSPEC" />
      <variable citdl="int" name="AI_ADDRCONFIG" />
      <variable citdl="int" name="AI_ALL" />
      <variable citdl="int" name="AI_CANONNAME" />
      <variable citdl="int" name="AI_NUMERICHOST" />
      <variable citdl="int" name="AI_NUMERICSERV" />
      <variable citdl="int" name="AI_PASSIVE" />
      <variable citdl="int" name="AI_V4MAPPED" />
      <variable citdl="PyCapsule" name="CAPI" />
      <variable citdl="int" name="EAI_AGAIN" />
      <variable citdl="int" name="EAI_BADFLAGS" />
      <variable citdl="int" name="EAI_FAIL" />
      <variable citdl="int" name="EAI_FAMILY" />
      <variable citdl="int" name="EAI_MEMORY" />
      <variable citdl="int" name="EAI_NODATA" />
      <variable citdl="int" name="EAI_NONAME" />
      <variable citdl="int" name="EAI_SERVICE" />
      <variable citdl="int" name="EAI_SOCKTYPE" />
      <variable citdl="int" name="INADDR_ALLHOSTS_GROUP" />
      <variable citdl="int" name="INADDR_ANY" />
      <variable citdl="int" name="INADDR_BROADCAST" />
      <variable citdl="int" name="INADDR_LOOPBACK" />
      <variable citdl="int" name="INADDR_MAX_LOCAL_GROUP" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INADDR_UNSPEC_GROUP" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_USERRESERVED" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DONTFRAG" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_RECVRTHDR" />
      <variable citdl="int" name="IPV6_RECVTCLASS" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_TCLASS" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IPV6_V6ONLY" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <variable citdl="int" name="MSG_CTRUNC" />
      <variable citdl="int" name="MSG_DONTROUTE" />
      <variable citdl="int" name="MSG_OOB" />
      <variable citdl="int" name="MSG_PEEK" />
      <variable citdl="int" name="MSG_TRUNC" />
      <variable citdl="int" name="NI_DGRAM" />
      <variable citdl="int" name="NI_MAXHOST" />
      <variable citdl="int" name="NI_MAXSERV" />
      <variable citdl="int" name="NI_NAMEREQD" />
      <variable citdl="int" name="NI_NOFQDN" />
      <variable citdl="int" name="NI_NUMERICHOST" />
      <variable citdl="int" name="NI_NUMERICSERV" />
      <variable citdl="int" name="RCVALL_MAX" />
      <variable citdl="int" name="RCVALL_OFF" />
      <variable citdl="int" name="RCVALL_ON" />
      <variable citdl="int" name="RCVALL_SOCKETLEVELONLY" />
      <variable citdl="int" name="SHUT_RD" />
      <variable citdl="int" name="SHUT_RDWR" />
      <variable citdl="int" name="SHUT_WR" />
      <variable citdl="int" name="SIO_RCVALL" />
      <variable citdl="int" name="SOCK_DGRAM" />
      <variable citdl="int" name="SOCK_RAW" />
      <variable citdl="int" name="SOCK_RDM" />
      <variable citdl="int" name="SOCK_SEQPACKET" />
      <variable citdl="int" name="SOCK_STREAM" />
      <variable citdl="int" name="SOL_IP" />
      <variable citdl="int" name="SOL_SOCKET" />
      <variable citdl="int" name="SOL_TCP" />
      <variable citdl="int" name="SOL_UDP" />
      <variable citdl="int" name="SOMAXCONN" />
      <variable citdl="int" name="SO_ACCEPTCONN" />
      <variable citdl="int" name="SO_BROADCAST" />
      <variable citdl="int" name="SO_DEBUG" />
      <variable citdl="int" name="SO_DONTROUTE" />
      <variable citdl="int" name="SO_ERROR" />
      <variable citdl="int" name="SO_EXCLUSIVEADDRUSE" />
      <variable citdl="int" name="SO_KEEPALIVE" />
      <variable citdl="int" name="SO_LINGER" />
      <variable citdl="int" name="SO_OOBINLINE" />
      <variable citdl="int" name="SO_RCVBUF" />
      <variable citdl="int" name="SO_RCVLOWAT" />
      <variable citdl="int" name="SO_RCVTIMEO" />
      <variable citdl="int" name="SO_REUSEADDR" />
      <variable citdl="int" name="SO_SNDBUF" />
      <variable citdl="int" name="SO_SNDLOWAT" />
      <variable citdl="int" name="SO_SNDTIMEO" />
      <variable citdl="int" name="SO_TYPE" />
      <variable citdl="int" name="SO_USELOOPBACK" />
      <scope classrefs="object" doc="socket([family[, type[, proto]]]) -&gt; socket object  Open a socket of the given type.  The family argument specifies the" ilk="class" name="SocketType" />
      <variable citdl="int" name="TCP_MAXSEG" />
      <variable citdl="int" name="TCP_NODELAY" />
      <scope doc="Duplicate an integer socket file descriptor." ilk="function" name="dup" returns="int" signature="dup(integer) -&gt; integer" />
      <scope classrefs="IOError" ilk="class" name="error" />
      <scope classrefs="error" ilk="class" name="gaierror" />
      <scope doc="-&gt; list of (family, socktype, proto, canonname, sockaddr)" ilk="function" name="getaddrinfo" signature="getaddrinfo(host, port [, family, socktype, proto, flags])" />
      <scope doc="Returns the default timeout in floating seconds for new socket objects." ilk="function" name="getdefaulttimeout" signature="getdefaulttimeout() -&gt; timeout" />
      <scope doc="Return the true host name, a list of aliases, and a list of IP addresses, for a host." ilk="function" name="gethostbyaddr" signature="gethostbyaddr(host) -&gt; (name, aliaslist, addresslist)" />
      <scope doc="Return the IP address (a string of the form &apos;255.255.255.255&apos;) for a host." ilk="function" name="gethostbyname" signature="gethostbyname(host) -&gt; address" />
      <scope doc="Return the true host name, a list of aliases, and a list of IP addresses, for a host." ilk="function" name="gethostbyname_ex" signature="gethostbyname_ex(host) -&gt; (name, aliaslist, addresslist)" />
      <scope doc="Return the current host name." ilk="function" name="gethostname" returns="str" signature="gethostname() -&gt; string" />
      <scope doc="Get host and port for a sockaddr." ilk="function" name="getnameinfo" signature="getnameinfo(sockaddr, flags) --&gt; (host, port)" />
      <scope doc="Return the protocol number for the named protocol." ilk="function" name="getprotobyname" returns="int" signature="getprotobyname(name) -&gt; integer" />
      <scope doc="Return a port number from a service name and protocol name." ilk="function" name="getservbyname" returns="int" signature="getservbyname(servicename[, protocolname]) -&gt; integer" />
      <scope doc="Return the service name from a port number and protocol name." ilk="function" name="getservbyport" returns="str" signature="getservbyport(port[, protocolname]) -&gt; string" />
      <variable citdl="bool" name="has_ipv6" />
      <scope classrefs="error" ilk="class" name="herror" />
      <scope doc="Convert a 32-bit integer from host to network byte order." ilk="function" name="htonl" returns="int" signature="htonl(integer) -&gt; integer" />
      <scope doc="Convert a 16-bit integer from host to network byte order." ilk="function" name="htons" returns="int" signature="htons(integer) -&gt; integer" />
      <scope doc="Convert an IP address in string format (123.45.67.89) to the 32-bit packed binary format used in low-level network functions." ilk="function" name="inet_aton" signature="inet_aton(string) -&gt; bytes giving packed 32-bit IP representation" />
      <scope doc="Convert an IP address from 32-bit packed binary format to string format" ilk="function" name="inet_ntoa" signature="inet_ntoa(packed_ip) -&gt; ip_address_string" />
      <scope doc="Convert a 32-bit integer from network to host byte order." ilk="function" name="ntohl" returns="int" signature="ntohl(integer) -&gt; integer" />
      <scope doc="Convert a 16-bit integer from network to host byte order." ilk="function" name="ntohs" returns="int" signature="ntohs(integer) -&gt; integer" />
      <scope doc="Set the default timeout in floating seconds for new socket objects." ilk="function" name="setdefaulttimeout" signature="setdefaulttimeout(timeout)" />
      <scope classrefs="object" doc="socket([family[, type[, proto]]]) -&gt; socket object  Open a socket of the given type.  The family argument specifies the" ilk="class" name="socket" />
      <scope classrefs="error" ilk="class" name="timeout" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_sha256">
      <scope doc="Return a new SHA-224 hash object; optionally initialized with a string." ilk="function" name="sha224" />
      <scope doc="Return a new SHA-256 hash object; optionally initialized with a string." ilk="function" name="sha256" />
    </scope>
    <scope doc="This module contains the core classes of version 2.0 of SAX for Python. This file provides only default classes with absolutely minimum functionality, from which drivers and applications can be subclassed." ilk="blob" lang="Python3" name="xml.sax.handler">
      <scope classrefs="object" doc="Interface for receiving logical document content events.  This is the main callback interface in SAX, and the one most" ilk="class" line="47" name="ContentHandler">
        <scope doc="Begin the scope of a prefix-URI Namespace mapping." ilk="function" line="96" name="startPrefixMapping" signature="startPrefixMapping(prefix, uri)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
          <variable ilk="argument" name="uri" />
        </scope>
        <scope doc="Receive notification of a skipped entity." ilk="function" line="193" name="skippedEntity" signature="skippedEntity(name)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="End the scope of a prefix-URI mapping." ilk="function" line="119" name="endPrefixMapping" signature="endPrefixMapping(prefix)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <scope doc="Signals the end of an element in namespace mode." ilk="function" line="152" name="endElementNS" signature="endElementNS(name, qname)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="qname" />
        </scope>
        <scope doc="Receive notification of a processing instruction." ilk="function" line="182" name="processingInstruction" signature="processingInstruction(target, data)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope doc="Signals the end of an element in non-namespace mode." ilk="function" line="134" name="endElement" signature="endElement(name)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="protected __instancevar__" line="55" name="_locator" />
        <scope doc="Signals the start of an element in non-namespace mode." ilk="function" line="126" name="startElement" signature="startElement(name, attrs)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <scope doc="Called by the parser to give the application a locator for locating the origin of document events." ilk="function" line="57" lineend="78" name="setDocumentLocator" signature="setDocumentLocator(locator)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="locator" />
        </scope>
        <scope doc="Receive notification of the beginning of a document." ilk="function" line="80" name="startDocument" signature="startDocument()">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Signals the start of an element in namespace mode." ilk="function" line="140" name="startElementNS" signature="startElementNS(name, qname, attrs)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="qname" />
          <variable ilk="argument" name="attrs" />
        </scope>
        <scope doc="Receive notification of character data." ilk="function" line="158" name="characters" signature="characters(content)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="content" />
        </scope>
        <scope doc="Receive notification of the end of a document." ilk="function" line="87" name="endDocument" signature="endDocument()">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
        </scope>
        <scope doc="Receive notification of ignorable whitespace in element content." ilk="function" line="168" name="ignorableWhitespace" signature="ignorableWhitespace(whitespace)">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="whitespace" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="54" lineend="55" name="__init__" signature="ContentHandler()">
          <variable citdl="ContentHandler" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Handle DTD events.  This interface specifies only those DTD events required for basic" ilk="class" line="208" name="DTDHandler">
        <scope doc="Handle a notation declaration event." ilk="function" line="214" name="notationDecl" signature="notationDecl(name, publicId, systemId)">
          <variable citdl="DTDHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="publicId" />
          <variable ilk="argument" name="systemId" />
        </scope>
        <scope doc="Handle an unparsed entity declaration event." ilk="function" line="217" name="unparsedEntityDecl" signature="unparsedEntityDecl(name, publicId, systemId, ndata)">
          <variable citdl="DTDHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="publicId" />
          <variable ilk="argument" name="systemId" />
          <variable ilk="argument" name="ndata" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Basic interface for resolving entities. If you create an object implementing this interface, then register the object with your Parser, the parser will call the method in your object to" ilk="class" line="223" lineend="234" name="EntityResolver">
        <scope doc="Resolve the system identifier of an entity and return either the system identifier to read from as a string, or an InputSource to read from." ilk="function" line="230" lineend="234" name="resolveEntity" signature="resolveEntity(publicId, systemId)">
          <variable citdl="EntityResolver" ilk="argument" name="self" />
          <variable ilk="argument" name="publicId" />
          <variable ilk="argument" name="systemId" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Basic interface for SAX error handlers.  If you create an object that implements this interface, then" ilk="class" line="22" lineend="42" name="ErrorHandler">
        <scope doc="Handle a warning." ilk="function" line="40" lineend="42" name="warning" signature="warning(exception)">
          <variable citdl="ErrorHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="exception" />
        </scope>
        <scope doc="Handle a non-recoverable error." ilk="function" line="36" lineend="38" name="fatalError" signature="fatalError(exception)">
          <variable citdl="ErrorHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="exception" />
        </scope>
        <scope doc="Handle a recoverable error." ilk="function" line="32" lineend="34" name="error" signature="error(exception)">
          <variable citdl="ErrorHandler" ilk="argument" name="self" />
          <variable ilk="argument" name="exception" />
        </scope>
      </scope>
      <variable citdl="list" line="280" name="all_features" />
      <variable citdl="list" line="337" name="all_properties" />
      <variable citdl="str" line="268" name="feature_external_ges" />
      <variable citdl="str" line="273" name="feature_external_pes" />
      <variable citdl="str" line="249" name="feature_namespace_prefixes" />
      <variable citdl="str" line="243" name="feature_namespaces" />
      <variable citdl="str" line="256" name="feature_string_interning" />
      <variable citdl="str" line="262" name="feature_validation" />
      <variable citdl="str" line="299" name="property_declaration_handler" />
      <variable citdl="str" line="305" name="property_dom_node" />
      <variable citdl="str" line="318" name="property_encoding" />
      <variable citdl="str" line="329" name="property_interning_dict" />
      <variable citdl="str" line="294" name="property_lexical_handler" />
      <variable citdl="str" line="312" name="property_xml_string" />
      <variable citdl="str" line="12" name="version" />
    </scope>
    <scope doc="The machinery of importlib: finders, loaders, hooks, etc." ilk="blob" lang="Python3" name="importlib.machinery">
      <scope classrefs="object" doc="Meta path import for built-in modules.  All methods are either class or static methods to avoid the need to" ilk="class" name="BuiltinImporter" />
      <scope classrefs="object" doc="Meta path import for frozen modules.  All methods are either class or static methods to avoid the need to" ilk="class" name="FrozenImporter" />
      <scope classrefs="object" doc="Meta path finder for sys.(path|path_hooks|path_importer_cache)." ilk="class" name="PathFinder" />
    </scope>
    <scope doc="distutils.command.build_scripts  Implements the Distutils &apos;build_scripts&apos; command." ilk="blob" lang="Python3" name="distutils.command.build_scripts">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="object" doc="Mixin class for commands that run 2to3. To configure 2to3, setup scripts may either change the class variables, or inherit from individual commands" ilk="class" name="Mixin2to3" />
      <variable citdl="int" name="ST_MODE" />
      <variable citdl="str" name="__revision__" />
      <scope classrefs="Command" ilk="class" name="build_scripts" />
      <scope classrefs="build_scripts Mixin2to3" ilk="class" name="build_scripts_2to3" />
      <scope doc="Return &apos;pathname&apos; as a name that will work on the native filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <variable citdl="SRE_Pattern" name="first_line_re" />
      <import module="log" />
      <scope doc="Return true if &apos;source&apos; exists and is more recently modified than &apos;target&apos;, or if &apos;source&apos; exists and &apos;target&apos; doesn&apos;t." ilk="function" name="newer" signature="newer(source, target)" />
      <import module="os" />
      <import module="re" />
      <import module="sysconfig" />
    </scope>
    <scope doc="_warnings provides basic warning filtering support. It is a helper module to speed up interpreter start-up." ilk="blob" lang="Python3" name="_warnings">
      <variable citdl="str" name="default_action" />
      <variable citdl="list" name="filters" />
      <variable citdl="dict" name="once_registry" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <scope doc="Low-level inferface to warnings functionality." ilk="function" name="warn_explicit" />
    </scope>
    <scope doc="# ElementTree # $Id: ElementInclude.py 1862 2004-06-18 07:31:02Z Fredrik $ #" ilk="blob" lang="Python3" name="xml.etree.ElementInclude">
      <import module="ElementTree" />
      <scope classrefs="SyntaxError" ilk="class" line="62" lineend="63" name="FatalIncludeError" />
      <variable citdl="str" line="54" name="XINCLUDE" />
      <variable citdl="str" line="57" name="XINCLUDE_FALLBACK" />
      <variable citdl="str" line="56" name="XINCLUDE_INCLUDE" />
      <import module="copy" />
      <scope ilk="function" line="77" lineend="86" name="default_loader" returns="file.read()" signature="default_loader(href, parse, encoding=None)">
        <variable ilk="argument" name="parse" />
        <variable ilk="argument" name="href" />
        <variable citdl="file.read()" line="80" name="data" />
        <variable citdl="open()" line="78" name="file" />
        <variable ilk="argument" name="encoding" />
      </scope>
      <scope ilk="function" line="99" lineend="143" name="include" signature="include(elem, loader=None)">
        <variable citdl="loader()" line="111" name="node" />
        <variable line="105" name="e" />
        <variable citdl="int" line="103" name="i" />
        <variable citdl="loader()" line="121" name="text" />
        <variable ilk="argument" name="elem" />
        <variable citdl="default_loader" ilk="argument" name="loader" />
        <variable citdl="e.get()" line="109" name="parse" />
        <variable citdl="e.get()" line="108" name="href" />
      </scope>
    </scope>
    <scope doc="Fixer that changes map(F, ...) into list(map(F, ...)) unless there exists a &apos;from future_builtins import map&apos; statement in the top-level namespace." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_map">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="ConditionalFix" ilk="class" line="28" lineend="90" name="FixMap">
        <variable citdl="str" line="30" name="PATTERN" />
        <variable citdl="str" line="56" name="skip_on" />
        <scope ilk="function" line="58" lineend="90" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixMap" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="node.clone()" line="64" name="new" />
          <variable line="76" name="args" />
        </scope>
      </scope>
      <scope doc="A list comprehension of the form [xp for fp in it if test]." ilk="function" name="ListComp" signature="ListComp(xp, fp, it, test=None)" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Returns true if node is in an environment where all that is required of it is being itterable (ie, it doesn&apos;t matter if it returns a list or an itterator)." ilk="function" name="in_special_context" signature="in_special_context(node)" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="Fixer that changes filter(F, X) into list(filter(F, X)).  We avoid the transformation if the filter() call is directly contained" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_filter">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="ConditionalFix" ilk="class" line="21" lineend="75" name="FixFilter">
        <variable citdl="str" line="23" name="PATTERN" />
        <variable citdl="str" line="50" name="skip_on" />
        <scope ilk="function" line="52" lineend="75" name="transform" returns="Call()" signature="transform(node, results)">
          <variable citdl="FixFilter" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="ListComp()" line="57" name="new" />
        </scope>
      </scope>
      <scope doc="A list comprehension of the form [xp for fp in it if test]." ilk="function" name="ListComp" signature="ListComp(xp, fp, it, test=None)" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Returns true if node is in an environment where all that is required of it is being itterable (ie, it doesn&apos;t matter if it returns a list or an itterator)." ilk="function" name="in_special_context" signature="in_special_context(node)" />
      <import module="token" />
    </scope>
    <scope doc="Macintosh-specific module for conversion between pathnames and URLs.  Do not import directly; use urllib instead." ilk="blob" lang="Python3" name="macurl2path">
      <variable citdl="list" line="8" name="__all__" />
      <import module="os" />
      <scope doc="OS-specific conversion from a file system path to a relative URL of the &apos;file&apos; scheme; not recommended for general use." ilk="function" line="52" lineend="73" name="pathname2url" returns="str" signature="pathname2url(pathname)">
        <variable ilk="argument" name="pathname" />
        <variable citdl="map()" line="57" name="components" />
      </scope>
      <scope ilk="function" line="79" lineend="94" name="test" signature="test()" />
      <scope doc="OS-specific conversion from a relative URL of the &apos;file&apos; scheme to a file system path; not recommended for general use." ilk="function" line="10" lineend="50" name="url2pathname" returns="urllib.parse.unquote()" signature="url2pathname(pathname)">
        <variable citdl="int" line="26" name="i" />
        <variable citdl="str.join()" line="40" name="rv" />
        <variable citdl="list" ilk="argument" name="pathname" />
        <variable citdl="pathname.split()" line="24" name="components" />
        <variable line="16" name="tp" />
      </scope>
      <import module="urllib" />
      <scope attributes="protected __hidden__" ilk="function" line="75" lineend="77" name="_pncomp2url" returns="urllib.parse.quote()" signature="_pncomp2url(component)">
        <variable ilk="argument" name="component" />
      </scope>
    </scope>
    <scope doc="Python implementation of the io module." ilk="blob" lang="Python3" name="_pyio">
      <scope classrefs="IOError" doc="Exception raised when I/O would block on a non-blocking I/O stream." ilk="class" name="BlockingIOError" />
      <scope classrefs="IOBase" doc="Base class for buffered IO objects.  The main difference with RawIOBase is that the read() method" ilk="class" name="BufferedIOBase" />
      <scope classrefs="BufferedIOBase" doc="A buffered reader and writer object together.  A buffered reader object and buffered writer object put together to" ilk="class" name="BufferedRWPair" />
      <scope classrefs="BufferedWriter BufferedReader" doc="A buffered interface to random access streams.  The constructor creates a reader and writer for a seekable stream," ilk="class" name="BufferedRandom" />
      <scope classrefs="_BufferedIOMixin" doc="BufferedReader(raw[, buffer_size])  A buffer for a readable, sequential BaseRawIO object." ilk="class" name="BufferedReader" />
      <scope classrefs="_BufferedIOMixin" doc="A buffer for a writeable sequential RawIO object.  The constructor creates a BufferedWriter for the given writeable raw" ilk="class" name="BufferedWriter" />
      <scope classrefs="BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer." ilk="class" name="BytesIO" />
      <variable citdl="int" name="DEFAULT_BUFFER_SIZE" />
      <scope classrefs="object" doc="Helper for builtins.open.__doc__" ilk="class" name="DocDescriptor" />
      <scope classrefs="_RawIOBase" doc="file(name: str[, mode: str]) -&gt; file IO object  Open a file.  The mode can be &apos;r&apos;, &apos;w&apos; or &apos;a&apos; for reading (default)," ilk="class" name="FileIO" />
      <scope classrefs="object" doc="The abstract base class for all I/O classes, acting on streams of bytes. There is no public constructor. " ilk="class" name="IOBase" />
      <scope classrefs="IncrementalDecoder" doc="Codec used when reading a file in universal newlines mode.  It wraps another incremental decoder, translating \r\n and \r into \n.  It also records the types of newlines encountered.  When used with" ilk="class" name="IncrementalNewlineDecoder" />
      <scope doc="(allocate() is an obsolete synonym)" ilk="function" name="Lock" signature="allocate_lock() -&gt; lock object" />
      <scope classrefs="object" doc="open(file, mode=&apos;r&apos;, buffering=None, encoding=None, errors=None, newline=None, closefd=True)  Open file and return a stream.  Raise IOError upon failure." ilk="class" name="OpenWrapper" />
      <scope classrefs="IOBase" doc="Base class for raw binary I/O." ilk="class" name="RawIOBase" />
      <variable citdl="int" name="SEEK_CUR" />
      <variable citdl="int" name="SEEK_END" />
      <variable citdl="int" name="SEEK_SET" />
      <scope classrefs="TextIOWrapper" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <scope classrefs="IOBase" doc="Base class for text I/O.  This class provides a character and line based interface to stream" ilk="class" name="TextIOBase" />
      <scope classrefs="TextIOBase" doc="Character and line based layer over a BufferedIOBase object, buffer.  encoding gives the name of the encoding that the stream will be" ilk="class" name="TextIOWrapper" />
      <scope classrefs="ValueError IOError" ilk="class" name="UnsupportedOperation" />
      <variable citdl="list" name="__all__" />
      <import module="abc" />
      <import module="codecs" />
      <import module="io" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="open" signature="open(file: (&lt;class &apos;str&apos;&gt;, &lt;class &apos;bytes&apos;&gt;), mode: str=&apos;r&apos;, buffering: int=None, encoding: str=None, errors: str=None, newline: str=None, closefd: bool=True) -&gt; &apos;IOBase&apos;" />
      <import module="os" />
      <import module="warnings" />
    </scope>
    <scope doc="Middleware to check for obedience to the WSGI specification.  Some of the things this checks:" ilk="blob" lang="Python3" name="wsgiref.validate">
      <scope classrefs="object" ilk="class" line="226" lineend="243" name="ErrorWrapper">
        <variable attributes="__instancevar__" line="229" name="errors" />
        <scope ilk="function" line="238" lineend="240" name="writelines" signature="writelines(seq)">
          <variable citdl="ErrorWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="seq" />
        </scope>
        <scope ilk="function" line="231" lineend="233" name="write" signature="write(s)">
          <variable citdl="ErrorWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <scope ilk="function" line="235" lineend="236" name="flush" signature="flush()">
          <variable citdl="ErrorWrapper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="242" lineend="243" name="close" signature="close()">
          <variable citdl="ErrorWrapper" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="228" lineend="229" name="__init__" signature="ErrorWrapper(wsgi_errors)">
          <variable citdl="ErrorWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="wsgi_errors" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="192" lineend="224" name="InputWrapper">
        <scope ilk="function" line="197" lineend="201" name="read" returns="self.input.read()" signature="read(*args)">
          <variable citdl="InputWrapper" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="self.input.read()" line="199" name="v" />
        </scope>
        <scope ilk="function" line="208" lineend="214" name="readlines" returns="self.input.readlines()" signature="readlines(*args)">
          <variable citdl="InputWrapper" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable citdl="self.input.readlines()" line="210" name="lines" />
        </scope>
        <scope ilk="function" line="216" lineend="221" name="__iter__" signature="__iter__()">
          <variable citdl="InputWrapper" ilk="argument" name="self" />
          <variable citdl="readline()" line="218" name="line" />
        </scope>
        <scope ilk="function" line="223" lineend="224" name="close" signature="close()">
          <variable citdl="InputWrapper" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="195" name="input" />
        <scope ilk="function" line="203" lineend="206" name="readline" returns="self.input.readline()" signature="readline()">
          <variable citdl="InputWrapper" ilk="argument" name="self" />
          <variable citdl="self.input.readline()" line="204" name="v" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="194" lineend="195" name="__init__" signature="InputWrapper(wsgi_input)">
          <variable citdl="InputWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="wsgi_input" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="263" lineend="294" name="IteratorWrapper">
        <variable attributes="__instancevar__" citdl="iter()" line="267" name="iterator" />
        <scope ilk="function" line="289" lineend="294" name="__del__" signature="__del__()">
          <variable citdl="IteratorWrapper" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="274" lineend="282" name="__next__" returns="next()" signature="__next__()">
          <variable citdl="IteratorWrapper" ilk="argument" name="self" />
          <variable citdl="next()" line="277" name="v" />
        </scope>
        <variable attributes="__instancevar__" line="269" name="check_start_response" />
        <scope ilk="function" line="271" lineend="272" name="__iter__" returns="IteratorWrapper" signature="__iter__()">
          <variable citdl="IteratorWrapper" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="268" name="closed" />
        <scope ilk="function" line="284" lineend="287" name="close" signature="close()">
          <variable citdl="IteratorWrapper" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="265" lineend="269" name="__init__" signature="IteratorWrapper(wsgi_iterator, check_start_response)">
          <variable citdl="IteratorWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="wsgi_iterator" />
          <variable ilk="argument" name="check_start_response" />
        </scope>
        <variable attributes="__instancevar__" line="266" name="original_iterator" />
      </scope>
      <scope classrefs="object" ilk="class" line="254" lineend="261" name="PartialIteratorWrapper">
        <scope ilk="function" line="259" lineend="261" name="__iter__" returns="IteratorWrapper()" signature="__iter__()">
          <variable citdl="PartialIteratorWrapper" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="257" name="iterator" />
        <scope attributes="__ctor__" ilk="function" line="256" lineend="257" name="__init__" signature="PartialIteratorWrapper(wsgi_iterator)">
          <variable citdl="PartialIteratorWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="wsgi_iterator" />
        </scope>
      </scope>
      <scope classrefs="Warning" doc="Raised in response to WSGI-spec-related warnings" ilk="class" line="121" name="WSGIWarning" />
      <scope classrefs="object" ilk="class" line="245" lineend="252" name="WriteWrapper">
        <scope ilk="function" line="250" lineend="252" name="__call__" signature="__call__(s)">
          <variable citdl="WriteWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="s" />
        </scope>
        <variable attributes="__instancevar__" line="248" name="writer" />
        <scope attributes="__ctor__" ilk="function" line="247" lineend="248" name="__init__" signature="WriteWrapper(wsgi_writer)">
          <variable citdl="WriteWrapper" ilk="argument" name="self" />
          <variable ilk="argument" name="wsgi_writer" />
        </scope>
      </scope>
      <variable citdl="list" line="111" name="__all__" />
      <scope ilk="function" line="126" lineend="128" name="assert_" signature="assert_(cond, *args)">
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable ilk="argument" name="cond" />
      </scope>
      <variable citdl="SRE_Pattern" line="119" name="bad_header_value_re" />
      <scope ilk="function" line="414" lineend="428" name="check_content_type" signature="check_content_type(status, headers)">
        <variable citdl="check_string_type()" ilk="argument" name="status" />
        <variable ilk="argument" name="headers" />
        <variable citdl="tuple" line="419" name="NO_MESSAGE_BODY" />
        <variable citdl="check_string_type()" line="421" name="name" />
        <variable citdl="int()" line="416" name="code" />
      </scope>
      <scope ilk="function" line="296" lineend="358" name="check_environ" signature="check_environ(environ)">
        <variable ilk="argument" name="environ" />
      </scope>
      <scope ilk="function" line="367" lineend="371" name="check_errors" signature="check_errors(wsgi_errors)">
        <variable ilk="argument" name="wsgi_errors" />
      </scope>
      <scope ilk="function" line="430" lineend="432" name="check_exc_info" signature="check_exc_info(exc_info)">
        <variable ilk="argument" name="exc_info" />
      </scope>
      <scope ilk="function" line="387" lineend="412" name="check_headers" signature="check_headers(headers)">
        <variable ilk="argument" name="headers" />
        <variable citdl="dict" line="391" name="header_names" />
        <variable citdl="check_string_type()" line="398" name="name" />
        <variable citdl="check_string_type()" line="399" name="value" />
      </scope>
      <scope ilk="function" line="361" lineend="365" name="check_input" signature="check_input(wsgi_input)">
        <variable ilk="argument" name="wsgi_input" />
      </scope>
      <scope ilk="function" line="435" lineend="440" name="check_iterator" signature="check_iterator(iterator)">
        <variable ilk="argument" name="iterator" />
      </scope>
      <scope ilk="function" line="373" lineend="385" name="check_status" signature="check_status(status)">
        <variable citdl="check_string_type()" ilk="argument" name="status" />
        <variable line="376" name="status_code" />
        <variable citdl="int()" line="379" name="status_int" />
      </scope>
      <scope ilk="function" line="130" lineend="135" name="check_string_type" returns="str()" signature="check_string_type(value, title)">
        <variable ilk="argument" name="value" />
        <variable ilk="argument" name="title" />
      </scope>
      <variable citdl="SRE_Pattern" line="118" name="header_re" />
      <import module="re" />
      <import module="sys" />
      <scope doc="When applied between a WSGI server and a WSGI application, this middleware will check for WSGI compliancy on a number of levels." ilk="function" line="137" lineend="190" name="validator" returns="validator.lint_app" signature="validator(application)">
        <variable ilk="argument" name="application" />
        <scope ilk="function" line="149" lineend="188" name="lint_app" returns="IteratorWrapper()" signature="lint_app(*args, **kw)">
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="list" line="158" name="start_response_started" />
          <scope ilk="function" line="160" lineend="177" name="start_response_wrapper" returns="WriteWrapper()" signature="start_response_wrapper(*args, **kw)">
            <variable attributes="varargs" ilk="argument" name="args" />
            <variable attributes="kwargs" ilk="argument" name="kw" />
            <variable line="164" name="status" />
            <variable line="165" name="headers" />
            <variable line="167" name="exc_info" />
          </scope>
          <variable citdl="application()" line="182" name="iterator" />
        </scope>
      </scope>
      <import module="warnings" />
    </scope>
    <scope doc="Functions to convert between Python values and C structs. Python bytes objects are used to hold the data representing the C struct and also as format strings (explained below) to describe the layout of data" ilk="blob" lang="Python3" name="_struct">
      <scope classrefs="object" doc="Compiled struct object" ilk="class" name="Struct" />
      <variable citdl="bytes" name="__version__" />
      <scope doc="Return size of C struct described by format string fmt." ilk="function" name="calcsize" />
      <scope classrefs="Exception" ilk="class" name="error" />
      <scope doc="Return bytes containing values v1, v2, ..." ilk="function" name="pack" />
      <scope doc="Pack the values v1, v2, ... according to fmt." ilk="function" name="pack_into" />
      <scope doc="Unpack the bytes containing packed C structure data, according to fmt." ilk="function" name="unpack" />
      <scope doc="Unpack the buffer, containing packed C structure data, according to fmt, starting at offset." ilk="function" name="unpack_from" />
    </scope>
    <scope doc="Implementation of the UUencode and UUdecode functions.  encode(in_file, out_file [,name, mode])" ilk="blob" lang="Python3" name="uu">
      <scope classrefs="Exception" ilk="class" line="39" lineend="40" name="Error" />
      <variable citdl="list" line="37" name="__all__" />
      <import module="binascii" />
      <scope doc="Decode uuencoded file" ilk="function" line="83" lineend="147" name="decode" signature="decode(in_file, out_file=None, mode=None, quiet=False)">
        <variable citdl="open()" line="122" name="fp" />
        <variable citdl="False" line="118" name="opened" />
        <variable citdl="in_file.readline()" line="96" name="hdr" />
        <variable citdl="binascii.a2b_uu()" line="135" name="data" />
        <variable citdl="False" ilk="argument" name="quiet" />
        <variable citdl="int()" ilk="argument" name="mode" />
        <variable citdl="in_file.readline()" line="132" name="s" />
        <variable citdl="sys.stdin.buffer" ilk="argument" name="in_file" />
        <variable citdl="int" line="138" name="nbytes" />
        <variable citdl="hdr.split()" line="101" name="hdrfields" />
        <variable citdl="sys.stdout.buffer" ilk="argument" name="out_file" />
      </scope>
      <scope doc="Uuencode file" ilk="function" line="42" lineend="80" name="encode" signature="encode(in_file, out_file, name=None, mode=None)">
        <variable citdl="sys.stdin.buffer" ilk="argument" name="in_file" />
        <variable citdl="in_file.read()" line="76" name="data" />
        <variable citdl="open()" ilk="argument" name="out_file" />
        <variable citdl="os.path.basename()" ilk="argument" name="name" />
        <variable citdl="int" ilk="argument" name="mode" />
      </scope>
      <import module="os" />
      <import module="sys" />
      <scope doc="uuencode/uudecode main program" ilk="function" line="149" lineend="185" name="test" signature="test()">
        <variable citdl="open()" line="163" name="input" />
        <variable citdl="optparse.OptionParser()" line="153" name="parser" />
        <variable citdl="open()" line="164" name="output" />
      </scope>
    </scope>
    <scope doc="minidom.py -- a lightweight DOM implementation.  parse(&quot;foo.xml&quot;)" ilk="blob" lang="Python3" name="xml.dom.minidom">
      <scope classrefs="Node" ilk="class" name="Attr" />
      <scope classrefs="object" doc="The attribute list is a transient interface to the underlying dictionaries.  Mutations here will change the underlying element&apos;s dictionary." ilk="class" name="AttributeList" />
      <scope classrefs="Text" ilk="class" name="CDATASection" />
      <scope classrefs="Childless Node" ilk="class" name="CharacterData" />
      <scope classrefs="object" doc="Mixin that makes childless-ness easy to implement and avoids the complexity of the Node methods that deal with children." ilk="class" name="Childless" />
      <scope classrefs="CharacterData" ilk="class" name="Comment" />
      <scope classrefs="DOMImplementationLS" ilk="class" name="DOMImplementation" />
      <scope classrefs="object" ilk="class" name="DOMImplementationLS" />
      <scope classrefs="Node DocumentLS" ilk="class" name="Document" />
      <scope classrefs="Node" ilk="class" name="DocumentFragment" />
      <scope classrefs="object" doc="Mixin to create documents that conform to the load/save spec." ilk="class" name="DocumentLS" />
      <scope classrefs="Identified Childless Node" ilk="class" name="DocumentType" />
      <variable citdl="NoneType" name="EMPTY_NAMESPACE" />
      <variable citdl="NoneType" name="EMPTY_PREFIX" />
      <scope classrefs="Node" ilk="class" name="Element" />
      <scope classrefs="object" doc="Object that represents content-model information for an element.  This implementation is not expected to be used in practice; DOM" ilk="class" name="ElementInfo" />
      <scope classrefs="tuple" ilk="class" name="EmptyNodeList" />
      <scope classrefs="Identified Node" ilk="class" name="Entity" />
      <scope classrefs="object" doc="Mix-in class that supports the publicId and systemId attributes." ilk="class" name="Identified" />
      <scope classrefs="object" doc="The attribute list is a transient interface to the underlying dictionaries.  Mutations here will change the underlying element&apos;s dictionary." ilk="class" name="NamedNodeMap" />
      <scope classrefs="Node" ilk="class" name="Node" />
      <scope classrefs="list" ilk="class" name="NodeList" />
      <scope classrefs="Identified Childless Node" ilk="class" name="Notation" />
      <scope classrefs="Childless Node" ilk="class" name="ProcessingInstruction" />
      <scope classrefs="object" ilk="class" name="ReadOnlySequentialNamedNodeMap" />
      <variable citdl="tuple" name="StringTypes" />
      <scope classrefs="CharacterData" ilk="class" name="Text" />
      <scope classrefs="object" ilk="class" name="TypeInfo" />
      <variable citdl="str" name="XMLNS_NAMESPACE" />
      <import module="codecs" />
      <scope ilk="function" name="defproperty" signature="defproperty(klass, name, doc)" />
      <import module="domreg" />
      <scope ilk="function" name="getDOMImplementation" signature="getDOMImplementation(features=None)" />
      <import module="io" />
      <scope doc="Parse a file into a DOM by filename or file object." ilk="function" name="parse" signature="parse(file, parser=None, bufsize=None)" />
      <scope doc="Parse a file into a DOM from a string." ilk="function" name="parseString" signature="parseString(string, parser=None)" />
      <import module="xml" />
    </scope>
    <scope doc="Safely evaluate Python string literals without using eval()." ilk="blob" lang="Python3" name="lib2to3.pgen2.literals">
      <scope ilk="function" line="19" lineend="38" name="escape" returns="chr()" signature="escape(m)">
        <variable citdl="int()" line="30" name="i" />
        <variable citdl="simple_escapes.get()" line="22" name="esc" />
        <variable ilk="argument" name="m" />
        <variable citdl="list" line="26" name="hexes" />
      </scope>
      <scope ilk="function" line="40" lineend="48" name="evalString" returns="re.sub()" signature="evalString(s)">
        <variable citdl="int" line="42" name="q" />
        <variable citdl="list" ilk="argument" name="s" />
      </scope>
      <import module="re" />
      <variable citdl="dict" line="8" name="simple_escapes" />
      <scope ilk="function" line="50" lineend="56" name="test" signature="test()">
        <variable citdl="chr()" line="52" name="c" />
        <variable citdl="evalString()" line="54" name="e" />
        <variable citdl="repr()" line="53" name="s" />
      </scope>
    </scope>
    <scope doc="distutils.extension  Provides the Extension class, used to describe C/C++ extension" ilk="blob" lang="Python3" name="distutils.extension">
      <scope classrefs="object" doc="Just a collection of attributes that describes an extension module and everything needed to build it (hopefully in a portable way, but there are hooks that let you be as unportable as you need)." ilk="class" line="22" lineend="134" name="Extension">
        <variable attributes="__instancevar__" citdl="list" line="122" name="extra_link_args" />
        <variable attributes="__instancevar__" line="112" name="name" />
        <variable attributes="__instancevar__" citdl="list" line="115" name="define_macros" />
        <variable attributes="__instancevar__" line="113" name="sources" />
        <variable attributes="__instancevar__" line="127" name="optional" />
        <variable attributes="__instancevar__" citdl="list" line="120" name="extra_objects" />
        <variable attributes="__instancevar__" citdl="list" line="119" name="runtime_library_dirs" />
        <variable attributes="__instancevar__" citdl="list" line="118" name="libraries" />
        <variable attributes="__instancevar__" line="126" name="language" />
        <variable attributes="__instancevar__" citdl="list" line="125" name="depends" />
        <variable attributes="__instancevar__" citdl="list" line="123" name="export_symbols" />
        <variable attributes="__instancevar__" citdl="list" line="121" name="extra_compile_args" />
        <variable attributes="__instancevar__" citdl="list" line="116" name="undef_macros" />
        <variable attributes="__instancevar__" citdl="list" line="124" name="swig_opts" />
        <variable attributes="__instancevar__" citdl="list" line="117" name="library_dirs" />
        <scope attributes="__ctor__" ilk="function" line="89" lineend="134" name="__init__" signature="Extension(name, sources, include_dirs=None, define_macros=None, undef_macros=None, library_dirs=None, libraries=None, runtime_library_dirs=None, extra_objects=None, extra_compile_args=None, extra_link_args=None, export_symbols=None, swig_opts=None, depends=None, language=None, optional=None, **kw)">
          <variable citdl="Extension" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="sources" />
          <variable ilk="argument" name="include_dirs" />
          <variable ilk="argument" name="define_macros" />
          <variable ilk="argument" name="undef_macros" />
          <variable ilk="argument" name="library_dirs" />
          <variable ilk="argument" name="libraries" />
          <variable ilk="argument" name="runtime_library_dirs" />
          <variable ilk="argument" name="extra_objects" />
          <variable ilk="argument" name="extra_compile_args" />
          <variable ilk="argument" name="extra_link_args" />
          <variable ilk="argument" name="export_symbols" />
          <variable ilk="argument" name="swig_opts" />
          <variable ilk="argument" name="depends" />
          <variable ilk="argument" name="language" />
          <variable ilk="argument" name="optional" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="list" line="131" name="options" />
          <variable citdl="list" line="133" name="msg" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="114" name="include_dirs" />
      </scope>
      <variable citdl="str" line="6" name="__revision__" />
      <import module="os" />
      <scope doc="Reads a Setup file and returns Extension instances." ilk="function" line="136" lineend="232" name="read_setup_file" returns="list" signature="read_setup_file(filename)">
        <variable citdl="TextFile()" line="149" name="file" />
        <variable citdl="parse_makefile()" line="145" name="vars" />
        <variable citdl="value.find()" line="195" name="equals" />
        <variable line="174" name="module" />
        <variable ilk="argument" name="filename" />
        <variable citdl="list" line="185" name="switch" />
        <variable citdl="Extension" line="175" name="ext" />
        <variable citdl="list" line="152" name="extensions" />
        <variable citdl="list" line="185" name="value" />
        <variable citdl="split_quoted()" line="166" name="words" />
        <variable citdl="expand_makefile_vars()" line="155" name="line" />
        <variable citdl="ext.extra_link_args" line="176" name="append_next_word" />
        <variable line="184" name="suffix" />
      </scope>
      <import module="sys" />
      <import module="warnings" />
    </scope>
    <scope doc="Conversion functions between RGB and other color systems.  This modules provides two functions for each color system ABC:" ilk="blob" lang="Python3" name="colorsys">
      <variable citdl="float" line="30" name="ONE_SIXTH" />
      <variable citdl="float" line="29" name="ONE_THIRD" />
      <variable citdl="float" line="31" name="TWO_THIRD" />
      <variable citdl="list" line="24" name="__all__" />
      <scope ilk="function" line="90" lineend="98" name="hls_to_rgb" returns="tuple" signature="hls_to_rgb(h, l, s)">
        <variable ilk="argument" name="h" />
        <variable ilk="argument" name="s" />
        <variable citdl="float" line="97" name="m1" />
        <variable ilk="argument" name="l" />
        <variable citdl="float" line="94" name="m2" />
      </scope>
      <scope ilk="function" line="135" lineend="156" name="hsv_to_rgb" returns="tuple" signature="hsv_to_rgb(h, s, v)">
        <variable citdl="int()" line="139" name="f" />
        <variable citdl="int()" line="138" name="i" />
        <variable ilk="argument" name="h" />
        <variable citdl="int()" line="141" name="q" />
        <variable citdl="float" line="140" name="p" />
        <variable ilk="argument" name="s" />
        <variable citdl="int()" line="142" name="t" />
        <variable ilk="argument" name="v" />
      </scope>
      <scope ilk="function" line="67" lineend="88" name="rgb_to_hls" returns="tuple" signature="rgb_to_hls(r, g, b)">
        <variable ilk="argument" name="b" />
        <variable ilk="argument" name="g" />
        <variable citdl="max()" line="80" name="bc" />
        <variable citdl="max()" line="82" name="h" />
        <variable citdl="min()" line="69" name="minc" />
        <variable citdl="max()" line="71" name="l" />
        <variable citdl="max()" line="75" name="s" />
        <variable ilk="argument" name="r" />
        <variable citdl="max()" line="79" name="gc" />
        <variable citdl="max()" line="78" name="rc" />
        <variable citdl="max()" line="68" name="maxc" />
      </scope>
      <scope ilk="function" line="116" lineend="133" name="rgb_to_hsv" returns="tuple" signature="rgb_to_hsv(r, g, b)">
        <variable ilk="argument" name="b" />
        <variable ilk="argument" name="g" />
        <variable citdl="max()" line="125" name="bc" />
        <variable citdl="min()" line="127" name="h" />
        <variable citdl="min()" line="118" name="minc" />
        <variable citdl="max()" line="123" name="rc" />
        <variable citdl="max()" line="122" name="s" />
        <variable ilk="argument" name="r" />
        <variable citdl="max()" line="124" name="gc" />
        <variable citdl="max()" line="119" name="v" />
        <variable citdl="max()" line="117" name="maxc" />
      </scope>
      <scope ilk="function" line="37" lineend="41" name="rgb_to_yiq" returns="tuple" signature="rgb_to_yiq(r, g, b)">
        <variable ilk="argument" name="b" />
        <variable ilk="argument" name="g" />
        <variable citdl="float" line="39" name="i" />
        <variable citdl="float" line="40" name="q" />
        <variable ilk="argument" name="r" />
        <variable citdl="float" line="38" name="y" />
      </scope>
      <scope ilk="function" line="43" lineend="59" name="yiq_to_rgb" returns="tuple" signature="yiq_to_rgb(y, i, q)">
        <variable citdl="float" line="46" name="b" />
        <variable citdl="float" line="45" name="g" />
        <variable ilk="argument" name="i" />
        <variable ilk="argument" name="q" />
        <variable citdl="float" line="44" name="r" />
        <variable ilk="argument" name="y" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="100" lineend="108" name="_v" returns="float" signature="_v(m1, m2, hue)">
        <variable ilk="argument" name="m1" />
        <variable ilk="argument" name="m2" />
        <variable citdl="float" ilk="argument" name="hue" />
      </scope>
    </scope>
    <scope doc="Simple API for XML (SAX) implementation for Python.  This module provides an implementation of the SAX 2 interface;" ilk="blob" lang="Python3" name="xml.sax">
      <scope classrefs="object" doc="Interface for receiving logical document content events.  This is the main callback interface in SAX, and the one most" ilk="class" name="ContentHandler" />
      <scope classrefs="object" doc="Basic interface for SAX error handlers.  If you create an object that implements this interface, then" ilk="class" name="ErrorHandler" />
      <scope classrefs="object" doc="Encapsulation of the information needed by the XMLReader to read entities. " ilk="class" name="InputSource" />
      <scope classrefs="Exception" doc="Encapsulate an XML error or warning. This class can contain basic error or warning information from either the XML parser or the application: you can subclass it to provide additional" ilk="class" name="SAXException" />
      <scope classrefs="SAXException" doc="Exception class for an unrecognized identifier.  An XMLReader will raise this exception when it is confronted with an" ilk="class" name="SAXNotRecognizedException" />
      <scope classrefs="SAXException" doc="Exception class for an unsupported operation.  An XMLReader will raise this exception when a service it cannot" ilk="class" name="SAXNotSupportedException" />
      <scope classrefs="SAXException" doc="Encapsulate an XML parse error or warning.  This exception will include information for locating the error in" ilk="class" name="SAXParseException" />
      <scope classrefs="SAXNotSupportedException" doc="Exception class for a missing driver.  An XMLReader module (driver) should raise this exception when it" ilk="class" name="SAXReaderNotAvailable" />
      <import module="_exceptions" />
      <variable citdl="list" line="51" name="default_parser_list" />
      <import module="expatreader" />
      <import module="handler" />
      <scope doc="Creates and returns a SAX parser." ilk="function" line="68" lineend="90" name="make_parser" returns="_create_parser()" signature="make_parser(parser_list=[])">
        <variable citdl="list" ilk="argument" name="parser_list" />
      </scope>
      <scope ilk="function" line="29" lineend="33" name="parse" signature="parse(source, handler, errorHandler=&lt;xml.sax.handler.ErrorHandler object at 0x024EF150&gt;)">
        <variable ilk="argument" name="source" />
        <variable ilk="argument" name="handler" />
        <variable citdl="make_parser()" line="30" name="parser" />
        <variable citdl="ErrorHandler()" ilk="argument" name="errorHandler" />
      </scope>
      <scope ilk="function" line="35" lineend="46" name="parseString" signature="parseString(string, handler, errorHandler=&lt;xml.sax.handler.ErrorHandler object at 0x02988090&gt;)">
        <variable ilk="argument" name="handler" />
        <variable citdl="make_parser()" line="40" name="parser" />
        <variable ilk="argument" name="string" />
        <variable citdl="ErrorHandler()" ilk="argument" name="errorHandler" />
        <variable citdl="InputSource()" line="44" name="inpsrc" />
      </scope>
      <import module="saxutils" />
      <import module="xmlreader" />
      <variable attributes="protected __hidden__" citdl="str" line="63" name="_key" />
      <scope attributes="protected __hidden__" ilk="function" line="101" lineend="103" name="_create_parser" returns="drv_module.create_parser()" signature="_create_parser(parser_name)">
        <variable ilk="argument" name="parser_name" />
        <variable citdl="__import__()" line="102" name="drv_module" />
      </scope>
      <variable attributes="protected __hidden__" citdl="int" line="54" name="_false" />
    </scope>
    <scope doc="Module implements the Mersenne Twister random number generator." ilk="blob" lang="Python3" name="_random">
      <scope classrefs="object" doc="Random() -&gt; create a random number generator with its own internal state." ilk="class" name="Random" />
    </scope>
    <scope doc="This is an interface to Python&apos;s internal parser." ilk="blob" lang="Python3" name="parser">
      <scope classrefs="Exception" ilk="class" name="ParserError" />
      <scope classrefs="object" doc="Intermediate representation of a Python parse tree." ilk="class" name="STType" />
      <variable citdl="str" name="__copyright__" />
      <variable citdl="str" name="__version__" />
      <scope doc="Compiles an ST object into a code object." ilk="function" name="compilest" />
      <scope doc="Creates an ST object from an expression." ilk="function" name="expr" />
      <scope doc="Determines if an ST object was created from an expression." ilk="function" name="isexpr" />
      <scope doc="Determines if an ST object was created from a suite." ilk="function" name="issuite" />
      <scope doc="Creates an ST object from a tree representation." ilk="function" name="sequence2st" />
      <scope doc="Creates a list-tree representation of an ST." ilk="function" name="st2list" />
      <scope doc="Creates a tuple-tree representation of an ST." ilk="function" name="st2tuple" />
      <scope doc="Creates an ST object from a suite." ilk="function" name="suite" />
      <scope doc="Creates an ST object from a tree representation." ilk="function" name="tuple2st" />
    </scope>
    <scope doc="Fixer for basestring -&gt; str." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_basestring">
      <scope classrefs="BaseFix" ilk="class" line="8" lineend="13" name="FixBasestring">
        <variable citdl="str" line="10" name="PATTERN" />
        <scope ilk="function" line="12" lineend="13" name="transform" returns="Name()" signature="transform(node, results)">
          <variable citdl="FixBasestring" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope ilk="blob" lang="Python3" name="_sha1">
      <scope doc="Return a new SHA1 hash object; optionally initialized with a string." ilk="function" name="sha1" />
    </scope>
    <scope doc="Fixer for __nonzero__ -&gt; __bool__ methods." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_nonzero">
      <scope classrefs="BaseFix" ilk="class" line="8" lineend="20" name="FixNonzero">
        <variable citdl="str" line="9" name="PATTERN" />
        <scope ilk="function" line="17" lineend="20" name="transform" signature="transform(node, results)">
          <variable citdl="FixNonzero" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="18" name="name" />
          <variable citdl="Name()" line="19" name="new" />
        </scope>
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    <scope doc="Base class for MIME type messages that are not multipart." ilk="blob" lang="Python3" name="email.mime.nonmultipart">
      <scope classrefs="Message" doc="Base class for MIME specializations." ilk="class" name="MIMEBase" />
      <scope classrefs="MIMEBase" doc="Base class for MIME multipart/* type messages." ilk="class" line="14" lineend="22" name="MIMENonMultipart">
        <scope ilk="function" line="17" lineend="22" name="attach" signature="attach(payload)">
          <variable citdl="MIMENonMultipart" ilk="argument" name="self" />
          <variable ilk="argument" name="payload" />
        </scope>
      </scope>
      <variable citdl="list" line="7" name="__all__" />
      <import module="errors" />
    </scope>
    <scope doc="Fixer for sys.exc_{type, value, traceback}  sys.exc_type -&gt; sys.exc_info()[0]" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_sys_exc">
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" ilk="class" line="14" lineend="29" name="FixSysExc">
        <variable citdl="list" line="16" name="exc_info" />
        <scope ilk="function" line="21" lineend="29" name="transform" returns="Node()" signature="transform(node, results)">
          <variable citdl="FixSysExc" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable line="22" name="sys_attr" />
          <variable citdl="Number()" line="23" name="index" />
          <variable citdl="Call()" line="25" name="call" />
          <variable citdl="Attr()" line="26" name="attr" />
        </scope>
        <variable citdl="str.join()" line="17" name="PATTERN" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes." ilk="class" name="Node" />
      <scope ilk="function" name="Number" signature="Number(n, prefix=None)" />
      <scope doc="A numeric or string subscript" ilk="function" name="Subscript" signature="Subscript(index_node)" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    <scope doc="Internationalization and localization support.  This module provides internationalization (I18N) and localization (L10N)" ilk="blob" lang="Python3" name="gettext">
      <scope ilk="function" line="539" name="Catalog" signature="Catalog(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None)" />
      <variable citdl="int" name="ENOENT" />
      <scope classrefs="NullTranslations" ilk="class" line="239" lineend="365" name="GNUTranslations">
        <scope ilk="function" line="332" lineend="344" name="lngettext" returns="self._fallback.lngettext()" signature="lngettext(msgid1, msgid2, n)">
          <variable citdl="GNUTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="msgid1" />
          <variable ilk="argument" name="msgid2" />
          <variable ilk="argument" name="n" />
          <variable line="334" name="tmsg" />
        </scope>
        <variable attributes="protected __instancevar__" line="293" name="_charset" />
        <variable citdl="long" line="242" name="BE_MAGIC" />
        <variable citdl="long" line="241" name="LE_MAGIC" />
        <scope ilk="function" line="346" lineend="353" name="gettext" returns="self._catalog.get()" signature="gettext(message)">
          <variable citdl="GNUTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="object()" line="347" name="missing" />
          <variable citdl="self._catalog.get()" line="348" name="tmsg" />
        </scope>
        <scope ilk="function" line="355" lineend="365" name="ngettext" returns="self._fallback.ngettext()" signature="ngettext(msgid1, msgid2, n)">
          <variable citdl="GNUTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="msgid1" />
          <variable ilk="argument" name="msgid2" />
          <variable ilk="argument" name="n" />
          <variable line="357" name="tmsg" />
        </scope>
        <scope ilk="function" line="321" lineend="330" name="lgettext" returns="tmsg.encode()" signature="lgettext(message)">
          <variable citdl="GNUTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
          <variable citdl="object()" line="322" name="missing" />
          <variable citdl="self._catalog.get()" line="323" name="tmsg" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="250" name="_catalog" />
        <scope attributes="protected" doc="Override this method to support alternative .mo formats." ilk="function" line="244" lineend="319" name="_parse" signature="_parse(fp)">
          <variable citdl="GNUTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
          <variable citdl="struct.unpack" line="246" name="unpack" />
          <variable citdl="getattr()" line="247" name="filename" />
          <variable citdl="fp.read()" line="252" name="buf" />
          <variable citdl="len()" line="253" name="buflen" />
          <variable line="255" name="magic" />
          <variable citdl="str" line="258" name="ii" />
          <variable citdl="mlen" line="268" name="mend" />
          <variable citdl="toff" line="270" name="tend" />
          <variable citdl="list" line="272" name="msg" />
          <variable citdl="list" line="273" name="tmsg" />
          <variable line="279" name="lastk" />
          <variable line="281" name="item" />
          <variable line="286" name="k" />
          <variable citdl="v.split()" line="287" name="v" />
          <variable line="296" name="plural" />
          <variable citdl="str" line="307" name="charset" />
          <variable citdl="str()" line="312" name="msgid1" />
        </scope>
        <variable attributes="__instancevar__" citdl="c2py()" line="251" name="plural" />
      </scope>
      <scope classrefs="object" ilk="class" line="169" lineend="236" name="NullTranslations">
        <scope ilk="function" line="213" lineend="214" name="info" returns="dict" signature="info()">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="205" lineend="211" name="lngettext" returns="self._fallback.lngettext()" signature="lngettext(msgid1, msgid2, n)">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="msgid1" />
          <variable ilk="argument" name="msgid2" />
          <variable ilk="argument" name="n" />
        </scope>
        <variable attributes="protected __instancevar__" line="172" name="_charset" />
        <scope ilk="function" line="181" lineend="185" name="add_fallback" signature="add_fallback(fallback)">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="fallback" />
        </scope>
        <scope ilk="function" line="216" lineend="217" name="charset" signature="charset()">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="187" lineend="190" name="gettext" returns="self._fallback.gettext()" signature="gettext(message)">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope ilk="function" line="197" lineend="203" name="ngettext" returns="self._fallback.ngettext()" signature="ngettext(msgid1, msgid2, n)">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="msgid1" />
          <variable ilk="argument" name="msgid2" />
          <variable ilk="argument" name="n" />
        </scope>
        <scope ilk="function" line="219" lineend="220" name="output_charset" signature="output_charset()">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="173" name="_output_charset" />
        <scope ilk="function" line="192" lineend="195" name="lgettext" returns="self._fallback.lgettext()" signature="lgettext(message)">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="message" />
        </scope>
        <scope ilk="function" line="225" lineend="236" name="install" signature="install(names=None)">
          <import line="226" module="builtins" />
          <variable citdl="NullTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="names" />
        </scope>
        <variable attributes="protected __instancevar__" line="174" name="_fallback" />
        <variable attributes="protected __instancevar__" citdl="dict" line="171" name="_info" />
        <scope ilk="function" line="222" lineend="223" name="set_output_charset" signature="set_output_charset(charset)">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="charset" />
        </scope>
        <scope attributes="protected" ilk="function" line="178" lineend="179" name="_parse" signature="_parse(fp)">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="170" lineend="176" name="__init__" signature="NullTranslations(fp=None)">
          <variable citdl="NullTranslations" ilk="argument" name="self" />
          <variable ilk="argument" name="fp" />
        </scope>
      </scope>
      <variable citdl="list" line="53" name="__all__" />
      <scope ilk="function" line="468" lineend="472" name="bind_textdomain_codeset" returns="_localecodesets.get()" signature="bind_textdomain_codeset(domain, codeset=None)">
        <variable ilk="argument" name="domain" />
        <variable ilk="argument" name="codeset" />
      </scope>
      <scope ilk="function" line="461" lineend="465" name="bindtextdomain" returns="_localedirs.get()" signature="bindtextdomain(domain, localedir=None)">
        <variable ilk="argument" name="domain" />
        <variable ilk="argument" name="localedir" />
      </scope>
      <scope doc="Gets a C expression as used in PO files for plural forms and returns a Python lambda function that implements an equivalent expression." ilk="function" line="75" lineend="122" name="c2py" returns="eval()" signature="c2py(plural)">
        <variable citdl="list" line="84" name="danger" />
        <variable citdl="re.compile()" line="95" name="expr" />
        <variable citdl="tokenize.generate_tokens()" line="82" name="tokens" />
        <variable citdl="expr.sub()" line="116" name="s" />
        <scope ilk="function" line="101" lineend="103" name="repl" returns="tuple" signature="repl(x)">
          <variable ilk="argument" name="x" />
        </scope>
        <variable citdl="plural.replace()" ilk="argument" name="plural" />
        <variable citdl="list" line="106" name="stack" />
      </scope>
      <import module="copy" />
      <scope ilk="function" line="475" lineend="481" name="dgettext" returns="t.gettext()" signature="dgettext(domain, message)">
        <variable ilk="argument" name="domain" />
        <variable ilk="argument" name="message" />
        <variable citdl="translation()" line="477" name="t" />
      </scope>
      <scope ilk="function" line="491" lineend="500" name="dngettext" returns="t.ngettext()" signature="dngettext(domain, msgid1, msgid2, n)">
        <variable ilk="argument" name="msgid2" />
        <variable ilk="argument" name="domain" />
        <variable ilk="argument" name="msgid1" />
        <variable citdl="translation()" line="493" name="t" />
        <variable ilk="argument" name="n" />
      </scope>
      <scope doc="# Locate a .mo file using the gettext strategy" ilk="function" line="369" lineend="402" name="find" returns="list" signature="find(domain, localedir=None, languages=None, all=False)">
        <variable ilk="argument" name="domain" />
        <variable citdl="os.environ.get()" line="376" name="val" />
        <variable citdl="list" line="383" name="nelangs" />
        <variable citdl="False" ilk="argument" name="all" />
        <variable citdl="list" ilk="argument" name="languages" />
        <variable citdl="os.path.join()" ilk="argument" name="localedir" />
        <variable citdl="list" line="390" name="result" />
        <variable citdl="os.path.join()" line="396" name="mofile" />
      </scope>
      <scope ilk="function" line="513" lineend="514" name="gettext" returns="dgettext()" signature="gettext(message)">
        <variable ilk="argument" name="message" />
      </scope>
      <scope ilk="function" line="440" lineend="442" name="install" signature="install(domain, localedir=None, codeset=None, names=None)">
        <variable ilk="argument" name="localedir" />
        <variable ilk="argument" name="domain" />
        <variable ilk="argument" name="names" />
        <variable ilk="argument" name="codeset" />
        <variable citdl="translation()" line="441" name="t" />
      </scope>
      <scope ilk="function" line="483" lineend="489" name="ldgettext" returns="t.lgettext()" signature="ldgettext(domain, message)">
        <variable ilk="argument" name="domain" />
        <variable ilk="argument" name="message" />
        <variable citdl="translation()" line="485" name="t" />
      </scope>
      <scope ilk="function" line="502" lineend="511" name="ldngettext" returns="t.lngettext()" signature="ldngettext(domain, msgid1, msgid2, n)">
        <variable ilk="argument" name="msgid2" />
        <variable ilk="argument" name="domain" />
        <variable ilk="argument" name="msgid1" />
        <variable citdl="translation()" line="504" name="t" />
        <variable ilk="argument" name="n" />
      </scope>
      <scope ilk="function" line="516" lineend="517" name="lgettext" returns="ldgettext()" signature="lgettext(message)">
        <variable ilk="argument" name="message" />
      </scope>
      <scope ilk="function" line="522" lineend="523" name="lngettext" returns="ldngettext()" signature="lngettext(msgid1, msgid2, n)">
        <variable ilk="argument" name="msgid2" />
        <variable ilk="argument" name="msgid1" />
        <variable ilk="argument" name="n" />
      </scope>
      <import module="locale" />
      <scope ilk="function" line="519" lineend="520" name="ngettext" returns="dngettext()" signature="ngettext(msgid1, msgid2, n)">
        <variable ilk="argument" name="msgid2" />
        <variable ilk="argument" name="msgid1" />
        <variable ilk="argument" name="n" />
      </scope>
      <import module="os" />
      <import module="re" />
      <import module="struct" />
      <import module="sys" />
      <scope doc="Implements the C expression:" ilk="function" line="61" lineend="72" name="test" signature="test(condition, true, false)">
        <variable ilk="argument" name="false" />
        <variable ilk="argument" name="true" />
        <variable ilk="argument" name="condition" />
      </scope>
      <scope ilk="function" line="454" lineend="458" name="textdomain" signature="textdomain(domain=None)">
        <variable ilk="argument" name="domain" />
        <variable attributes="protected" line="457" name="_current_domain" />
      </scope>
      <scope ilk="function" line="409" lineend="437" name="translation" returns="NullTranslations" signature="translation(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None)">
        <variable ilk="argument" name="domain" />
        <variable citdl="os.path.abspath()" line="422" name="key" />
        <variable ilk="argument" name="languages" />
        <variable citdl="GNUTranslations" ilk="argument" name="class_" />
        <variable ilk="argument" name="localedir" />
        <variable citdl="_translations.get()" line="420" name="result" />
        <variable ilk="argument" name="codeset" />
        <variable citdl="False" ilk="argument" name="fallback" />
        <variable citdl="find()" line="413" name="mofiles" />
        <variable citdl="_translations.setdefault()" line="423" name="t" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="447" name="_localedirs" />
      <scope attributes="protected __hidden__" ilk="function" line="126" lineend="165" name="_expand_lang" returns="list" signature="_expand_lang(locale)">
        <import line="127" module="locale" symbol="normalize" />
        <variable citdl="list" ilk="argument" name="locale" />
        <variable citdl="int" line="129" name="COMPONENT_CODESET" />
        <variable citdl="int" line="130" name="COMPONENT_TERRITORY" />
        <variable citdl="int" line="131" name="COMPONENT_MODIFIER" />
        <variable citdl="int" line="133" name="mask" />
        <variable citdl="locale.find()" line="134" name="pos" />
        <variable citdl="list" line="136" name="modifier" />
        <variable citdl="list" line="143" name="codeset" />
        <variable citdl="list" line="150" name="territory" />
        <variable citdl="normalize()" line="155" name="language" />
        <variable citdl="list" line="156" name="ret" />
        <variable citdl="normalize()" line="159" name="val" />
      </scope>
      <variable attributes="protected __hidden__" citdl="str" line="451" name="_current_domain" />
      <variable attributes="protected __hidden__" citdl="dict" line="449" name="_localecodesets" />
      <variable attributes="protected __hidden__" citdl="os.path.join()" line="58" name="_default_localedir" />
      <variable attributes="protected __hidden__" citdl="dict" line="407" name="_translations" />
    </scope>
    <scope doc="Python parse tree definitions.  This is a very concrete parse tree; we need to keep every token and" ilk="blob" lang="Python3" name="lib2to3.pytree">
      <scope classrefs="object" doc="Abstract base class for Node and Leaf.  This provides some default functionality and boilerplate using the" ilk="class" line="34" lineend="228" name="Base">
        <scope doc="Return the line number which generated the invocant node." ilk="function" line="156" lineend="163" name="get_lineno" returns="node.lineno" signature="get_lineno()">
          <variable citdl="Base" ilk="argument" name="self" />
          <variable citdl="Base" line="158" name="node" />
        </scope>
        <scope attributes="__hidden__" doc="The node immediately preceding the invocant in their parent&apos;s children list." ilk="function" line="201" lineend="214" name="prev_sibling (property getter)" signature="prev_sibling (property getter)()">
          <variable citdl="Base" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" line="184" name="next_sibling" />
        <scope doc="Return a post-order iterator for the tree." ilk="function" line="97" lineend="103" name="post_order" signature="post_order()">
          <variable citdl="Base" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="227" lineend="228" name="__str__" signature="__str__()">
          <variable citdl="Base" ilk="argument" name="self" />
        </scope>
        <scope doc="Replace this node with a new one in the parent." ilk="function" line="133" lineend="154" name="replace" signature="replace(new)">
          <variable citdl="Base" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="new" />
          <variable citdl="list" line="139" name="l_children" />
          <variable citdl="True" line="140" name="found" />
        </scope>
        <variable attributes="__instancevar__" line="121" name="prefix" />
        <variable citdl="tuple" line="48" name="children" />
        <scope doc="Set the prefix for the node (see Leaf class)." ilk="function" line="113" lineend="121" name="set_prefix" signature="set_prefix(prefix)">
          <variable citdl="Base" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <scope doc="Constructor that prevents Base from being instantiated." ilk="function" line="51" lineend="54" name="__new__" returns="object.__new__()" signature="__new__(*args, **kwds)">
          <variable citdl="Base" ilk="argument" name="cls" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
        <variable line="46" name="type" />
        <scope doc="Compare two nodes for inequality." ilk="function" line="68" lineend="76" name="__ne__" returns="NotImplemented" signature="__ne__(other)">
          <variable citdl="Base" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Return the string immediately following the invocant node." ilk="function" line="216" lineend="224" name="get_suffix" returns="str" signature="get_suffix()">
          <variable citdl="Base" ilk="argument" name="self" />
          <variable line="221" name="next_sib" />
        </scope>
        <variable line="47" name="parent" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" line="105" lineend="111" name="pre_order" signature="pre_order()">
          <variable citdl="Base" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a cloned (deep) copy of self." ilk="function" line="89" lineend="95" name="clone" signature="clone()">
          <variable citdl="Base" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Compare two nodes for equality." ilk="function" line="78" lineend="87" name="_eq" signature="_eq(other)">
          <variable citdl="Base" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Compare two nodes for equality." ilk="function" line="56" lineend="64" name="__eq__" returns="NotImplemented" signature="__eq__(other)">
          <variable citdl="Base" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope doc="Return the prefix for the node (see Leaf class)." ilk="function" line="123" lineend="131" name="get_prefix" signature="get_prefix()">
          <variable citdl="Base" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" doc="The node immediately following the invocant in their parent&apos;s children list." ilk="function" line="184" lineend="198" name="next_sibling (property getter)" signature="next_sibling (property getter)()">
          <variable citdl="Base" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="165" lineend="168" name="changed" signature="changed()">
          <variable citdl="Base" ilk="argument" name="self" />
        </scope>
        <variable citdl="True" line="49" name="was_changed" />
        <scope doc="Remove the node from the tree." ilk="function" line="170" lineend="181" name="remove" returns="i" signature="remove()">
          <variable citdl="Base" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" line="201" name="prev_sibling" />
        <variable line="66" name="__hash__" />
      </scope>
      <scope classrefs="object" doc="A pattern is a tree matching pattern.  It looks for a specific node type (token or symbol), and" ilk="class" line="425" lineend="508" name="BasePattern">
        <scope doc="Constructor that prevents BasePattern from being instantiated." ilk="function" line="446" lineend="449" name="__new__" returns="object.__new__()" signature="__new__(*args, **kwds)">
          <variable citdl="BasePattern" ilk="argument" name="cls" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
        <variable line="443" name="content" />
        <scope doc="Does this pattern exactly match a sequence of nodes?" ilk="function" line="490" lineend="498" name="match_seq" returns="bool" signature="match_seq(nodes, results=None)">
          <variable citdl="BasePattern" ilk="argument" name="self" />
          <variable ilk="argument" name="nodes" />
          <variable ilk="argument" name="results" />
        </scope>
        <scope ilk="function" line="451" lineend="455" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="BasePattern" ilk="argument" name="self" />
          <variable citdl="list" line="452" name="args" />
        </scope>
        <scope doc="Generator yielding all matches for this pattern." ilk="function" line="500" lineend="508" name="generate_matches" signature="generate_matches(nodes)">
          <variable citdl="BasePattern" ilk="argument" name="self" />
          <variable ilk="argument" name="nodes" />
          <variable citdl="dict" line="506" name="r" />
        </scope>
        <variable line="442" name="type" />
        <scope doc="A subclass can define this as a hook for optimizations." ilk="function" line="457" lineend="463" name="optimize" returns="BasePattern" signature="optimize()">
          <variable citdl="BasePattern" ilk="argument" name="self" />
        </scope>
        <scope doc="Does this pattern exactly match a node?" ilk="function" line="465" lineend="488" name="match" returns="bool" signature="match(node, results=None)">
          <variable citdl="BasePattern" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="dict" line="479" name="r" />
        </scope>
        <variable line="444" name="name" />
      </scope>
      <variable citdl="int" line="20" name="HUGE" />
      <scope classrefs="Base" doc="Concrete implementation for leaf nodes." ilk="class" line="335" lineend="403" name="Leaf">
        <scope doc="Return a post-order iterator for the tree." ilk="function" line="385" lineend="387" name="post_order" signature="post_order()">
          <variable citdl="Leaf" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a pre-order iterator for the tree." ilk="function" line="389" lineend="391" name="pre_order" signature="pre_order()">
          <variable citdl="Leaf" ilk="argument" name="self" />
        </scope>
        <variable citdl="int" line="342" name="column" />
        <variable citdl="Leaf.__unicode__" line="374" name="__str__" />
        <variable attributes="protected" citdl="str" line="340" name="_prefix" />
        <scope attributes="__hidden__" doc="The whitespace and comments preceding this token in the input." ilk="function" line="394" lineend="398" name="prefix (property getter)" returns="str" signature="prefix (property getter)()">
          <variable citdl="Leaf" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="355" name="value" />
        <scope attributes="__hidden__" ilk="function" line="401" lineend="403" name="prefix (property setter)" signature="prefix (property setter)(prefix)">
          <variable citdl="Leaf" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <scope doc="Return a pretty string representation." ilk="function" line="365" lineend="371" name="__unicode__" returns="self.prefix" signature="__unicode__()">
          <variable citdl="Leaf" ilk="argument" name="self" />
        </scope>
        <variable attributes="property" citdl="str" line="394" name="prefix" />
        <variable citdl="int" line="341" name="lineno" />
        <scope attributes="protected" doc="Compare two nodes for equality." ilk="function" line="376" lineend="378" name="_eq" returns="bool" signature="_eq(other)">
          <variable citdl="Leaf" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" line="354" name="type" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" line="380" lineend="383" name="clone" returns="Leaf" signature="clone()">
          <variable citdl="Leaf" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Initializer." ilk="function" line="344" lineend="357" name="__init__" signature="Leaf(type, value, context=None, prefix=None)">
          <variable citdl="Leaf" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <scope doc="Return a canonical string representation." ilk="function" line="359" lineend="363" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="Leaf" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="BasePattern" ilk="class" line="511" lineend="552" name="LeafPattern">
        <scope attributes="protected" doc="Match the pattern&apos;s content to the node&apos;s children." ilk="function" line="539" lineend="552" name="_submatch" returns="bool" signature="_submatch(node, results=None)">
          <variable citdl="LeafPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
        <variable attributes="__instancevar__" line="531" name="name" />
        <variable attributes="__instancevar__" line="530" name="content" />
        <scope doc="Override match() to insist on a leaf node." ilk="function" line="533" lineend="537" name="match" returns="bool" signature="match(node, results=None)">
          <variable citdl="LeafPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
        <variable attributes="__instancevar__" line="529" name="type" />
        <scope attributes="__ctor__" doc="Initializer. Takes optional type, content, and name." ilk="function" line="513" lineend="531" name="__init__" signature="LeafPattern(type=None, content=None, name=None)">
          <variable citdl="LeafPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="content" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <scope classrefs="BasePattern" ilk="class" line="801" lineend="833" name="NegatedPattern">
        <variable attributes="__instancevar__" line="814" name="content" />
        <scope ilk="function" line="820" lineend="822" name="match_seq" returns="bool" signature="match_seq(nodes)">
          <variable citdl="NegatedPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="nodes" />
        </scope>
        <scope ilk="function" line="816" lineend="818" name="match" returns="bool" signature="match(node)">
          <variable citdl="NegatedPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
        </scope>
        <scope attributes="__ctor__" doc="Initializer." ilk="function" line="803" lineend="814" name="__init__" signature="NegatedPattern(content=None)">
          <variable citdl="NegatedPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="content" />
        </scope>
        <scope ilk="function" line="824" lineend="833" name="generate_matches" signature="generate_matches(nodes)">
          <variable citdl="NegatedPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="nodes" />
        </scope>
      </scope>
      <scope classrefs="Base" doc="Concrete implementation for interior nodes." ilk="class" line="231" lineend="332" name="Node">
        <scope doc="Return a post-order iterator for the tree." ilk="function" line="278" lineend="283" name="post_order" signature="post_order()">
          <variable citdl="Node" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a canonical string representation." ilk="function" line="253" lineend="257" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="Node" ilk="argument" name="self" />
        </scope>
        <scope doc="Equivalent to &apos;node.children.append(child)&apos;." ilk="function" line="325" lineend="332" name="append_child" signature="append_child(child)">
          <variable citdl="Node" ilk="argument" name="self" />
          <variable ilk="argument" name="child" />
        </scope>
        <scope doc="Return a pre-order iterator for the tree." ilk="function" line="285" lineend="290" name="pre_order" signature="pre_order()">
          <variable citdl="Node" ilk="argument" name="self" />
        </scope>
        <scope doc="Return a cloned (deep) copy of self." ilk="function" line="274" lineend="276" name="clone" returns="Node" signature="clone()">
          <variable citdl="Node" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" doc="The whitespace and comments preceding this node in the input." ilk="function" line="293" lineend="299" name="prefix (property getter)" returns="str" signature="prefix (property getter)()">
          <variable citdl="Node" ilk="argument" name="self" />
        </scope>
        <scope attributes="__hidden__" ilk="function" line="302" lineend="304" name="prefix (property setter)" signature="prefix (property setter)(prefix)">
          <variable citdl="Node" ilk="argument" name="self" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <variable citdl="str" line="293" name="prefix" />
        <scope doc="Equivalent to &apos;node.children[i] = child&apos;." ilk="function" line="306" lineend="314" name="set_child" signature="set_child(i, child)">
          <variable citdl="Node" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="child" />
        </scope>
        <scope attributes="__ctor__" doc="Initializer." ilk="function" line="235" lineend="251" name="__init__" signature="Node(type, children, context=None, prefix=None)">
          <variable citdl="Node" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="children" />
          <variable ilk="argument" name="context" />
          <variable ilk="argument" name="prefix" />
        </scope>
        <scope doc="Equivalent to &apos;node.children.insert(i, child)&apos;." ilk="function" line="316" lineend="323" name="insert_child" signature="insert_child(i, child)">
          <variable citdl="Node" ilk="argument" name="self" />
          <variable ilk="argument" name="i" />
          <variable ilk="argument" name="child" />
        </scope>
        <scope attributes="protected" doc="Compare two nodes for equality." ilk="function" line="270" lineend="272" name="_eq" returns="bool" signature="_eq(other)">
          <variable citdl="Node" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" line="245" name="type" />
        <variable attributes="__instancevar__" citdl="list()" line="246" name="children" />
        <scope doc="Return a pretty string representation." ilk="function" line="259" lineend="265" name="__unicode__" returns="str.join()" signature="__unicode__()">
          <variable citdl="Node" ilk="argument" name="self" />
        </scope>
        <variable citdl="Node.__unicode__" line="268" name="__str__" />
      </scope>
      <scope classrefs="BasePattern" ilk="class" line="555" lineend="613" name="NodePattern">
        <variable citdl="False" line="557" name="wildcards" />
        <scope attributes="protected" doc="Match the pattern&apos;s content to the node&apos;s children." ilk="function" line="588" lineend="613" name="_submatch" returns="bool" signature="_submatch(node, results=None)">
          <variable citdl="NodePattern" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
        <variable attributes="__instancevar__" line="586" name="name" />
        <variable attributes="__instancevar__" citdl="list()" line="585" name="content" />
        <variable attributes="__instancevar__" line="584" name="type" />
        <scope attributes="__ctor__" doc="Initializer. Takes optional type, content, and name." ilk="function" line="559" lineend="586" name="__init__" signature="NodePattern(type=None, content=None, name=None)">
          <variable citdl="NodePattern" ilk="argument" name="self" />
          <variable ilk="argument" name="type" />
          <variable citdl="list()" ilk="argument" name="content" />
          <variable ilk="argument" name="name" />
        </scope>
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline" ilk="class" name="StringIO" />
      <scope classrefs="BasePattern" doc="A wildcard pattern can match zero or more nodes.  This has all the flexibility needed to implement patterns like:" ilk="class" line="616" lineend="798" name="WildcardPattern">
        <variable attributes="__instancevar__" line="663" name="name" />
        <variable attributes="__instancevar__" citdl="int" line="661" name="min" />
        <scope attributes="protected" doc="Helper to iteratively yield the matches." ilk="function" line="741" lineend="768" name="_iterative_matches" signature="_iterative_matches(nodes)">
          <variable citdl="WildcardPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="nodes" />
          <variable citdl="len()" line="743" name="nodelen" />
          <variable citdl="list" line="747" name="results" />
          <variable citdl="list" line="756" name="new_results" />
          <variable citdl="dict" line="763" name="r" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="662" name="max" />
        <scope attributes="protected" doc="Helper to recursively yield the matches." ilk="function" line="786" lineend="798" name="_recursive_matches" signature="_recursive_matches(nodes, count)">
          <variable citdl="WildcardPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="nodes" />
          <variable ilk="argument" name="count" />
          <variable citdl="dict" line="795" name="r" />
        </scope>
        <variable attributes="__instancevar__" citdl="tuple()" line="660" name="content" />
        <scope doc="Does this pattern exactly match a sequence of nodes?" ilk="function" line="688" lineend="697" name="match_seq" returns="bool" signature="match_seq(nodes, results=None)">
          <variable citdl="WildcardPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="nodes" />
          <variable ilk="argument" name="results" />
        </scope>
        <scope doc="Does this pattern exactly match a node?" ilk="function" line="684" lineend="686" name="match" returns="self.match_seq()" signature="match(node, results=None)">
          <variable citdl="WildcardPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
        </scope>
        <scope attributes="protected" doc="Special optimized matcher for bare_name." ilk="function" line="770" lineend="784" name="_bare_name_matches" returns="tuple" signature="_bare_name_matches(nodes)">
          <variable citdl="WildcardPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="nodes" />
          <variable citdl="int" line="772" name="count" />
          <variable citdl="dict" line="773" name="r" />
          <variable citdl="False" line="774" name="done" />
          <variable citdl="len()" line="775" name="max" />
        </scope>
        <scope doc="Optimize certain stacked wildcard patterns." ilk="function" line="665" lineend="682" name="optimize" returns="subpattern.optimize()" signature="optimize()">
          <variable citdl="WildcardPattern" ilk="argument" name="self" />
          <variable line="667" name="subpattern" />
        </scope>
        <scope attributes="__ctor__" doc="Initializer." ilk="function" line="630" lineend="663" name="__init__" signature="WildcardPattern(content=None, min=0, max=HUGE, name=None)">
          <variable citdl="WildcardPattern" ilk="argument" name="self" />
          <variable citdl="tuple()" ilk="argument" name="content" />
          <variable citdl="int" ilk="argument" name="min" />
          <variable citdl="int" ilk="argument" name="max" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope doc="Generator yielding matches for a sequence of nodes." ilk="function" line="699" lineend="739" name="generate_matches" signature="generate_matches(nodes)">
          <variable citdl="WildcardPattern" ilk="argument" name="self" />
          <variable ilk="argument" name="nodes" />
          <variable citdl="dict" line="714" name="r" />
          <variable citdl="sys.stderr" line="724" name="save_stderr" />
        </scope>
      </scope>
      <variable citdl="str" line="13" name="__author__" />
      <scope doc="Convert raw node information to a Node or Leaf instance." ilk="function" line="406" lineend="422" name="convert" returns="Leaf" signature="convert(gr, raw_node)">
        <variable ilk="argument" name="raw_node" />
        <variable ilk="argument" name="gr" />
      </scope>
      <scope doc="Generator yielding matches for a sequence of patterns and nodes." ilk="function" line="836" lineend="861" name="generate_matches" signature="generate_matches(patterns, nodes)">
        <variable ilk="argument" name="patterns" />
        <variable ilk="argument" name="nodes" />
        <variable citdl="dict" line="858" name="r" />
        <variable citdl="list" line="852" name="rest" />
        <variable line="852" name="p" />
      </scope>
      <import module="sys" />
      <scope ilk="function" line="23" lineend="31" name="type_repr" returns="_type_reprs.setdefault()" signature="type_repr(type_num)">
        <variable ilk="argument" name="type_num" />
      </scope>
      <import module="warnings" />
      <variable attributes="protected __hidden__" citdl="dict" line="22" name="_type_reprs" />
    </scope>
    <scope doc="Abstract Base Classes (ABCs) for collections, according to PEP 3119.  DON&apos;T USE THIS MODULE DIRECTLY!  The classes here should be imported" ilk="blob" lang="Python3" name="_abcoll">
      <scope classrefs="type" doc="Metaclass for defining Abstract Base Classes (ABCs).  Use this metaclass to create an ABC.  An ABC can be subclassed" ilk="class" name="ABCMeta" />
      <scope classrefs="Sequence" doc="This unifies bytes and bytearray.  XXX Should add all their methods." ilk="class" line="554" name="ByteString" />
      <scope classrefs="object" ilk="class" line="144" lineend="155" name="Callable">
        <scope ilk="function" line="147" lineend="148" name="__call__" returns="bool" signature="__call__(*args, **kwds)">
          <variable citdl="Callable" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
        <scope ilk="function" line="151" lineend="155" name="__subclasshook__" returns="NotImplemented" signature="__subclasshook__(C)">
          <variable citdl="Callable" ilk="argument" name="cls" />
          <variable ilk="argument" name="C" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="130" lineend="141" name="Container">
        <scope ilk="function" line="137" lineend="141" name="__subclasshook__" returns="NotImplemented" signature="__subclasshook__(C)">
          <variable citdl="Container" ilk="argument" name="cls" />
          <variable ilk="argument" name="C" />
        </scope>
        <scope ilk="function" line="133" lineend="134" name="__contains__" returns="bool" signature="__contains__(x)">
          <variable citdl="Container" ilk="argument" name="self" />
          <variable ilk="argument" name="x" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="54" lineend="68" name="Hashable">
        <scope ilk="function" line="57" lineend="58" name="__hash__" returns="int" signature="__hash__()">
          <variable citdl="Hashable" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="61" lineend="68" name="__subclasshook__" returns="NotImplemented" signature="__subclasshook__(C)">
          <variable citdl="Hashable" ilk="argument" name="cls" />
          <variable ilk="argument" name="C" />
        </scope>
      </scope>
      <scope classrefs="MappingView Set" ilk="class" line="410" lineend="423" name="ItemsView">
        <scope ilk="function" line="421" lineend="423" name="__iter__" signature="__iter__()">
          <variable citdl="ItemsView" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="412" lineend="419" name="__contains__" returns="bool" signature="__contains__(item)">
          <variable citdl="ItemsView" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable line="415" name="v" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="71" lineend="83" name="Iterable">
        <scope ilk="function" line="74" lineend="76" name="__iter__" signature="__iter__()">
          <variable citdl="Iterable" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="79" lineend="83" name="__subclasshook__" returns="NotImplemented" signature="__subclasshook__(C)">
          <variable citdl="Iterable" ilk="argument" name="cls" />
          <variable ilk="argument" name="C" />
        </scope>
      </scope>
      <scope classrefs="Iterable" ilk="class" line="86" lineend="100" name="Iterator">
        <scope ilk="function" line="92" lineend="93" name="__iter__" returns="Iterator" signature="__iter__()">
          <variable citdl="Iterator" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="89" lineend="90" name="__next__" signature="__next__()">
          <variable citdl="Iterator" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="96" lineend="100" name="__subclasshook__" returns="NotImplemented" signature="__subclasshook__(C)">
          <variable citdl="Iterator" ilk="argument" name="cls" />
          <variable ilk="argument" name="C" />
        </scope>
      </scope>
      <scope classrefs="MappingView Set" ilk="class" line="398" lineend="405" name="KeysView">
        <scope ilk="function" line="403" lineend="405" name="__iter__" signature="__iter__()">
          <variable citdl="KeysView" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="400" lineend="401" name="__contains__" returns="bool" signature="__contains__(key)">
          <variable citdl="KeysView" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
      </scope>
      <scope classrefs="Sized Iterable Container" ilk="class" line="349" lineend="383" name="Mapping">
        <scope ilk="function" line="382" lineend="383" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="Mapping" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="352" lineend="353" name="__getitem__" signature="__getitem__(key)">
          <variable citdl="Mapping" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="361" lineend="367" name="__contains__" returns="bool" signature="__contains__(key)">
          <variable citdl="Mapping" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="369" lineend="370" name="keys" returns="KeysView()" signature="keys()">
          <variable citdl="Mapping" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="372" lineend="373" name="items" returns="ItemsView()" signature="items()">
          <variable citdl="Mapping" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="355" lineend="359" name="get" signature="get(key, default=None)">
          <variable citdl="Mapping" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope ilk="function" line="375" lineend="376" name="values" returns="ValuesView()" signature="values()">
          <variable citdl="Mapping" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="378" lineend="380" name="__eq__" returns="isinstance()" signature="__eq__(other)">
          <variable citdl="Mapping" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
      </scope>
      <scope classrefs="Sized" ilk="class" line="386" lineend="395" name="MappingView">
        <scope ilk="function" line="391" lineend="392" name="__len__" returns="len()" signature="__len__()">
          <variable citdl="MappingView" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="394" lineend="395" name="__repr__" returns="str.format()" signature="__repr__()">
          <variable citdl="MappingView" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="388" lineend="389" name="__init__" signature="MappingView(mapping)">
          <variable citdl="MappingView" ilk="argument" name="self" />
          <variable ilk="argument" name="mapping" />
        </scope>
        <variable attributes="protected __instancevar__" line="389" name="_mapping" />
      </scope>
      <scope classrefs="Mapping" ilk="class" line="443" lineend="500" name="MutableMapping">
        <scope ilk="function" line="450" lineend="451" name="__delitem__" signature="__delitem__(key)">
          <variable citdl="MutableMapping" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <scope ilk="function" line="495" lineend="500" name="setdefault" signature="setdefault(key, default=None)">
          <variable citdl="MutableMapping" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="default" />
        </scope>
        <scope ilk="function" line="475" lineend="480" name="clear" signature="clear()">
          <variable citdl="MutableMapping" ilk="argument" name="self" />
        </scope>
        <variable attributes="private" citdl="object()" line="453" name="__marker" />
        <scope ilk="function" line="482" lineend="493" name="update" signature="update(other=(), **kwds)">
          <variable citdl="MutableMapping" ilk="argument" name="self" />
          <variable citdl="tuple" ilk="argument" name="other" />
          <variable attributes="kwargs" ilk="argument" name="kwds" />
        </scope>
        <scope ilk="function" line="455" lineend="464" name="pop" returns="object()" signature="pop(key, default=__marker)">
          <variable citdl="MutableMapping" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="object()" ilk="argument" name="default" />
          <variable line="457" name="value" />
        </scope>
        <scope ilk="function" line="446" lineend="447" name="__setitem__" signature="__setitem__(key, value)">
          <variable citdl="MutableMapping" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="466" lineend="473" name="popitem" returns="tuple" signature="popitem()">
          <variable citdl="MutableMapping" ilk="argument" name="self" />
          <variable citdl="next()" line="468" name="key" />
          <variable line="471" name="value" />
        </scope>
      </scope>
      <scope classrefs="Sequence" ilk="class" line="565" lineend="601" name="MutableSequence">
        <scope ilk="function" line="572" lineend="573" name="__delitem__" signature="__delitem__(index)">
          <variable citdl="MutableSequence" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="582" lineend="585" name="reverse" signature="reverse()">
          <variable citdl="MutableSequence" ilk="argument" name="self" />
          <variable citdl="len()" line="583" name="n" />
        </scope>
        <scope ilk="function" line="587" lineend="589" name="extend" signature="extend(values)">
          <variable citdl="MutableSequence" ilk="argument" name="self" />
          <variable ilk="argument" name="values" />
        </scope>
        <scope ilk="function" line="576" lineend="577" name="insert" signature="insert(index, value)">
          <variable citdl="MutableSequence" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="596" lineend="597" name="remove" signature="remove(value)">
          <variable citdl="MutableSequence" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="568" lineend="569" name="__setitem__" signature="__setitem__(index, value)">
          <variable citdl="MutableSequence" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="599" lineend="601" name="__iadd__" returns="MutableSequence" signature="__iadd__(values)">
          <variable citdl="MutableSequence" ilk="argument" name="self" />
          <variable ilk="argument" name="values" />
        </scope>
        <scope ilk="function" line="591" lineend="594" name="pop" signature="pop(index=-1)">
          <variable citdl="MutableSequence" ilk="argument" name="self" />
          <variable citdl="int" ilk="argument" name="index" />
          <variable line="592" name="v" />
        </scope>
        <scope ilk="function" line="579" lineend="580" name="append" signature="append(value)">
          <variable citdl="MutableSequence" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
      </scope>
      <scope classrefs="Set" ilk="class" line="282" lineend="341" name="MutableSet">
        <scope ilk="function" line="338" lineend="341" name="__isub__" returns="self" signature="__isub__()" />
        <scope ilk="function" line="323" lineend="326" name="__iand__" returns="self" signature="__iand__()" />
        <scope doc="This is slow (creates N new iterators!) but effective." ilk="function" line="310" lineend="316" name="clear" signature="clear()">
          <variable citdl="MutableSet" ilk="argument" name="self" />
        </scope>
        <scope doc="Return the popped value. Raise KeyError if empty." ilk="function" line="300" lineend="308" name="pop" returns="next()" signature="pop()">
          <variable citdl="MutableSet" ilk="argument" name="self" />
          <variable citdl="iter()" line="302" name="it" />
          <variable citdl="next()" line="304" name="value" />
        </scope>
        <scope ilk="function" line="318" lineend="321" name="__ior__" returns="self" signature="__ior__()" />
        <scope doc="Add an element." ilk="function" line="285" lineend="287" name="add" signature="add(value)">
          <variable citdl="MutableSet" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Remove an element. If not a member, raise a KeyError." ilk="function" line="294" lineend="298" name="remove" signature="remove(value)">
          <variable citdl="MutableSet" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="Remove an element. Do not raise an exception if absent." ilk="function" line="290" lineend="292" name="discard" signature="discard(value)">
          <variable citdl="MutableSet" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="328" lineend="336" name="__ixor__" returns="self" signature="__ixor__()">
          <variable citdl="self._from_iterable()" line="330" name="it" />
        </scope>
      </scope>
      <scope classrefs="Sized Iterable Container" doc="All the operations on a read-only sequence.  Concrete subclasses must override __new__ or __init__," ilk="class" line="508" lineend="547" name="Sequence">
        <scope ilk="function" line="546" lineend="547" name="count" returns="sum()" signature="count(value)">
          <variable citdl="Sequence" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="540" lineend="544" name="index" returns="i" signature="index(value)">
          <variable citdl="Sequence" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="536" lineend="538" name="__reversed__" signature="__reversed__()">
          <variable citdl="Sequence" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="517" lineend="518" name="__getitem__" signature="__getitem__(index)">
          <variable citdl="Sequence" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="530" lineend="534" name="__contains__" returns="bool" signature="__contains__(value)">
          <variable citdl="Sequence" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope ilk="function" line="520" name="__iter__" signature="__iter__()">
          <variable citdl="Sequence" ilk="argument" name="self" />
          <variable citdl="int" line="521" name="i" />
          <variable line="524" name="v" />
        </scope>
      </scope>
      <scope classrefs="Sized Iterable Container" doc="A set is a finite, iterable container.  This class provides concrete generic implementations of all" ilk="class" line="161" lineend="277" name="Set">
        <scope ilk="function" line="203" lineend="204" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="220" lineend="224" name="isdisjoint" returns="bool" signature="isdisjoint(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="240" lineend="245" name="__xor__" returns="NotImplemented" signature="__xor__(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable citdl="_from_iterable()" ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="173" lineend="181" name="__le__" returns="NotImplemented" signature="__le__(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="protected" doc="Construct an instance of the class from any iterable input." ilk="function" line="207" lineend="213" name="_from_iterable" returns="Set._from_iterable.cls()" signature="_from_iterable(it)">
          <variable citdl="Set" ilk="argument" name="cls" />
          <variable ilk="argument" name="it" />
        </scope>
        <scope attributes="protected" doc="Compute the hash value of a set." ilk="function" line="247" lineend="277" name="_hash" returns="len()" signature="_hash()">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable citdl="sys.maxsize" line="262" name="MAX" />
          <variable citdl="sys.maxsize" line="263" name="MASK" />
          <variable citdl="len()" line="264" name="n" />
          <variable citdl="len()" line="265" name="h" />
          <variable citdl="hash()" line="268" name="hx" />
        </scope>
        <scope ilk="function" line="188" lineend="191" name="__gt__" returns="NotImplemented" signature="__gt__(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="215" lineend="218" name="__and__" returns="NotImplemented" signature="__and__(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="232" lineend="238" name="__sub__" returns="NotImplemented" signature="__sub__(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable citdl="_from_iterable()" ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="183" lineend="186" name="__lt__" returns="NotImplemented" signature="__lt__(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="198" lineend="201" name="__eq__" returns="NotImplemented" signature="__eq__(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="193" lineend="196" name="__ge__" returns="NotImplemented" signature="__ge__(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="226" lineend="230" name="__or__" returns="NotImplemented" signature="__or__(other)">
          <variable citdl="Set" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable line="229" name="chain" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="116" lineend="127" name="Sized">
        <scope ilk="function" line="123" lineend="127" name="__subclasshook__" returns="NotImplemented" signature="__subclasshook__(C)">
          <variable citdl="Sized" ilk="argument" name="cls" />
          <variable ilk="argument" name="C" />
        </scope>
        <scope ilk="function" line="119" lineend="120" name="__len__" returns="int" signature="__len__()">
          <variable citdl="Sized" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="MappingView" ilk="class" line="428" lineend="438" name="ValuesView">
        <scope ilk="function" line="436" lineend="438" name="__iter__" signature="__iter__()">
          <variable citdl="ValuesView" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="430" lineend="434" name="__contains__" returns="bool" signature="__contains__(value)">
          <variable citdl="ValuesView" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
      </scope>
      <variable citdl="list" line="14" name="__all__" />
      <scope doc="A decorator indicating abstract methods." ilk="function" name="abstractmethod" signature="abstractmethod(funcobj)" />
      <scope classrefs="object" ilk="class" line="32" name="bytearray_iterator" />
      <scope classrefs="object" ilk="class" line="31" name="bytes_iterator" />
      <scope classrefs="object" ilk="class" line="36" name="dict_itemiterator" />
      <scope classrefs="object" ilk="class" line="47" name="dict_items" />
      <scope classrefs="object" ilk="class" line="34" name="dict_keyiterator" />
      <scope classrefs="object" ilk="class" line="45" name="dict_keys" />
      <scope classrefs="object" ilk="class" line="49" name="dict_proxy" />
      <scope classrefs="object" ilk="class" line="35" name="dict_valueiterator" />
      <scope classrefs="object" ilk="class" line="46" name="dict_values" />
      <scope classrefs="object" ilk="class" line="37" name="list_iterator" />
      <scope classrefs="object" ilk="class" line="38" name="list_reverseiterator" />
      <scope classrefs="object" ilk="class" line="39" name="range_iterator" />
      <scope classrefs="object" ilk="class" line="40" name="set_iterator" />
      <scope classrefs="object" ilk="class" line="41" name="str_iterator" />
      <import module="sys" />
      <scope classrefs="object" ilk="class" line="42" name="tuple_iterator" />
      <scope classrefs="object" doc="zip(iter1 [,iter2 [...]]) --&gt; zip object  Return a zip object whose .__next__() method returns a tuple where" ilk="class" line="43" name="zip_iterator" />
    </scope>
    <scope doc="Parser for command line options.  This module helps scripts to parse the command line arguments in" ilk="blob" lang="Python3" name="getopt">
      <scope classrefs="Exception" ilk="class" line="39" lineend="48" name="GetoptError">
        <variable citdl="str" line="40" name="opt" />
        <variable citdl="str" line="41" name="msg" />
        <scope ilk="function" line="47" lineend="48" name="__str__" returns="str" signature="__str__()">
          <variable citdl="GetoptError" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="42" lineend="45" name="__init__" signature="GetoptError(msg, opt=&apos;&apos;)">
          <variable citdl="GetoptError" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="str" ilk="argument" name="opt" />
        </scope>
      </scope>
      <variable citdl="list" line="35" name="__all__" />
      <scope ilk="function" line="145" lineend="162" name="do_longs" returns="tuple" signature="do_longs(opts, opt, longopts, args)">
        <variable citdl="list" ilk="argument" name="opt" />
        <variable citdl="opt.index()" line="147" name="i" />
        <variable citdl="list" ilk="argument" name="args" />
        <variable ilk="argument" name="longopts" />
        <variable ilk="argument" name="opts" />
        <variable citdl="list" line="149" name="optarg" />
      </scope>
      <scope ilk="function" line="188" lineend="201" name="do_shorts" returns="tuple" signature="do_shorts(opts, optstring, shortopts, args)">
        <variable line="190" name="opt" />
        <variable citdl="list" ilk="argument" name="optstring" />
        <variable citdl="list" ilk="argument" name="args" />
        <variable ilk="argument" name="shortopts" />
        <variable ilk="argument" name="opts" />
        <variable citdl="list" line="197" name="optarg" />
      </scope>
      <scope classrefs="Exception" ilk="class" line="50" name="error" />
      <scope doc="Parses command line options and parameter list." ilk="function" line="52" lineend="93" name="getopt" returns="tuple" signature="getopt(args, options[, long_options]) -&gt; opts, args">
        <variable ilk="argument" name="shortopts" />
        <variable citdl="list" ilk="argument" name="args" />
        <variable citdl="list" ilk="argument" name="longopts" />
        <variable citdl="list" line="79" name="opts" />
      </scope>
      <scope doc="This function works like getopt(), except that GNU style scanning mode is used by default." ilk="function" line="95" lineend="143" name="gnu_getopt" returns="tuple" signature="getopt(args, options[, long_options]) -&gt; opts, args">
        <variable citdl="list" line="111" name="prog_args" />
        <variable citdl="list" ilk="argument" name="args" />
        <variable citdl="list" ilk="argument" name="longopts" />
        <variable citdl="True" line="120" name="all_options_first" />
        <variable citdl="list" ilk="argument" name="shortopts" />
        <variable citdl="list" line="110" name="opts" />
      </scope>
      <scope doc="# Return: #   has_arg? #   full option name" ilk="function" line="167" lineend="186" name="long_has_args" returns="tuple" signature="long_has_args(opt, longopts)">
        <variable ilk="argument" name="opt" />
        <variable citdl="list" line="168" name="possibilities" />
        <variable citdl="unique_match.endswith()" line="183" name="has_arg" />
        <variable ilk="argument" name="longopts" />
        <variable citdl="list" line="182" name="unique_match" />
      </scope>
      <import module="os" />
      <scope ilk="function" line="203" lineend="207" name="short_has_arg" returns="shortopts.startswith()" signature="short_has_arg(opt, shortopts)">
        <variable ilk="argument" name="opt" />
        <variable ilk="argument" name="shortopts" />
      </scope>
    </scope>
    <scope doc="Class representing audio/* type MIME documents." ilk="blob" lang="Python3" name="email.mime.audio">
      <scope classrefs="_BufferedIOBase" doc="BytesIO([buffer]) -&gt; object  Create a buffered I/O implementation using an in-memory bytes" ilk="class" name="BytesIO" />
      <scope classrefs="MIMENonMultipart" doc="Class for generating audio/* MIME documents." ilk="class" line="42" lineend="73" name="MIMEAudio">
        <scope attributes="__ctor__" doc="Create an audio/* type MIME document." ilk="function" line="45" lineend="73" name="__init__" signature="MIMEAudio(_audiodata, _subtype=None, _encoder=encoders.encode_base64, **_params)">
          <variable citdl="MIMEAudio" ilk="argument" name="self" />
          <variable ilk="argument" name="_audiodata" />
          <variable citdl="_whatsnd()" ilk="argument" name="_subtype" />
          <variable citdl="encoders.encode_base64" ilk="argument" name="_encoder" />
          <variable attributes="kwargs" ilk="argument" name="_params" />
        </scope>
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME multipart/* type messages." ilk="class" name="MIMENonMultipart" />
      <variable citdl="list" line="7" name="__all__" />
      <import module="encoders" />
      <import module="sndhdr" />
      <variable attributes="protected __hidden__" citdl="dict" line="17" name="_sndhdr_MIMEmap" />
      <scope attributes="protected __hidden__" doc="Try to identify a sound file type." ilk="function" line="25" lineend="38" name="_whatsnd" returns="_sndhdr_MIMEmap.get()" signature="_whatsnd(data)">
        <variable ilk="argument" name="data" />
        <variable citdl="list" line="32" name="hdr" />
        <variable citdl="BytesIO()" line="33" name="fakefile" />
        <variable citdl="testfn()" line="35" name="res" />
      </scope>
    </scope>
    <scope doc="This module provides access to operating system functionality that is standardized by the C Standard and the POSIX standard (a thinly disguised Unix interface).  Refer to the library manual and" ilk="blob" lang="Python3" name="nt">
      <variable citdl="int" name="F_OK" />
      <variable citdl="int" name="O_APPEND" />
      <variable citdl="int" name="O_BINARY" />
      <variable citdl="int" name="O_CREAT" />
      <variable citdl="int" name="O_EXCL" />
      <variable citdl="int" name="O_NOINHERIT" />
      <variable citdl="int" name="O_RANDOM" />
      <variable citdl="int" name="O_RDONLY" />
      <variable citdl="int" name="O_RDWR" />
      <variable citdl="int" name="O_SEQUENTIAL" />
      <variable citdl="int" name="O_SHORT_LIVED" />
      <variable citdl="int" name="O_TEMPORARY" />
      <variable citdl="int" name="O_TEXT" />
      <variable citdl="int" name="O_TRUNC" />
      <variable citdl="int" name="O_WRONLY" />
      <variable citdl="int" name="P_DETACH" />
      <variable citdl="int" name="P_NOWAIT" />
      <variable citdl="int" name="P_NOWAITO" />
      <variable citdl="int" name="P_OVERLAY" />
      <variable citdl="int" name="P_WAIT" />
      <variable citdl="int" name="R_OK" />
      <variable citdl="int" name="TMP_MAX" />
      <variable citdl="int" name="W_OK" />
      <variable citdl="int" name="X_OK" />
      <scope doc="Abort the interpreter immediately." ilk="function" name="abort" signature="abort() -&gt; does not return!" />
      <scope doc="Use the real uid/gid to test for access to a path." ilk="function" name="access" returns="bool" signature="access(path, mode) -&gt; True if granted, False otherwise" />
      <scope doc="Change the current working directory to the specified path." ilk="function" name="chdir" signature="chdir(path)" />
      <scope doc="Change the access permissions of a file." ilk="function" name="chmod" signature="chmod(path, mode)" />
      <scope doc="Close a file descriptor (for low level IO)." ilk="function" name="close" signature="close(fd)" />
      <scope doc="Closes all file descriptors in [fd_low, fd_high), ignoring errors." ilk="function" name="closerange" signature="closerange(fd_low, fd_high)" />
      <scope doc="Return a string describing the encoding of the device if the output is a terminal; else return None." ilk="function" name="device_encoding" returns="str" signature="device_encoding(fd) -&gt; str" />
      <scope doc="Return a duplicate of a file descriptor." ilk="function" name="dup" signature="dup(fd) -&gt; fd2" />
      <scope doc="Duplicate file descriptor." ilk="function" name="dup2" signature="dup2(old_fd, new_fd)" />
      <variable citdl="dict" name="environ" />
      <scope classrefs="EnvironmentError" doc="OS system call failed." ilk="class" name="error" />
      <scope doc="Execute an executable path with arguments, replacing current process." ilk="function" name="execv" signature="execv(path, args)" />
      <scope doc="Execute a path with arguments and environment, replacing current process." ilk="function" name="execve" signature="execve(path, args, env)" />
      <scope doc="Like stat(), but for an open file descriptor." ilk="function" name="fstat" signature="fstat(fd) -&gt; stat result" />
      <scope doc="force write of file with filedescriptor to disk." ilk="function" name="fsync" signature="fsync(fildes)" />
      <scope doc="Return a unicode string representing the current working directory." ilk="function" name="getcwd" signature="getcwd() -&gt; path" />
      <scope doc="Return a bytes string representing the current working directory." ilk="function" name="getcwdb" signature="getcwdb() -&gt; path" />
      <scope doc="Return the current process id" ilk="function" name="getpid" signature="getpid() -&gt; pid" />
      <scope doc="Return True if the file descriptor &apos;fd&apos; is an open file descriptor connected to the slave end of a terminal." ilk="function" name="isatty" returns="bool" signature="isatty(fd) -&gt; bool" />
      <scope doc="Return a list containing the names of the entries in the directory." ilk="function" name="listdir" signature="listdir(path) -&gt; list_of_strings" />
      <scope doc="Set the current position of a file descriptor." ilk="function" name="lseek" signature="lseek(fd, pos, how) -&gt; newpos" />
      <scope doc="Like stat(path), but do not follow symbolic links." ilk="function" name="lstat" signature="lstat(path) -&gt; stat result" />
      <scope doc="Create a directory." ilk="function" name="mkdir" signature="mkdir(path [, mode=0777])" />
      <scope doc="Open a file (for low level IO)." ilk="function" name="open" signature="open(filename, flag [, mode=0777]) -&gt; fd" />
      <scope doc="Create a pipe." ilk="function" name="pipe" signature="pipe() -&gt; (read_end, write_end)" />
      <scope doc="Change or add an environment variable." ilk="function" name="putenv" signature="putenv(key, value)" />
      <scope doc="Read a file descriptor." ilk="function" name="read" returns="str" signature="read(fd, buffersize) -&gt; string" />
      <scope doc="Remove a file (same as unlink(path))." ilk="function" name="remove" signature="remove(path)" />
      <scope doc="Rename a file or directory." ilk="function" name="rename" signature="rename(old, new)" />
      <scope doc="Remove a directory." ilk="function" name="rmdir" signature="rmdir(path)" />
      <scope doc="Execute the program &apos;path&apos; in a new process." ilk="function" name="spawnv" signature="spawnv(mode, path, args)" />
      <scope doc="Execute the program &apos;path&apos; in a new process." ilk="function" name="spawnve" signature="spawnve(mode, path, args, env)" />
      <scope doc="Start a file with its associated" ilk="function" name="startfile" signature="startfile(filepath [, operation])" />
      <scope doc="Perform a stat system call on the given path." ilk="function" name="stat" signature="stat(path) -&gt; stat result" />
      <scope doc="Determine whether os.[lf]stat represents time stamps as float objects." ilk="function" name="stat_float_times" signature="stat_float_times([newval]) -&gt; oldval" />
      <scope classrefs="object" doc="stat_result: Result from stat or lstat.  This object may be accessed either as a tuple of" ilk="class" name="stat_result" />
      <scope classrefs="object" doc="statvfs_result: Result from statvfs or fstatvfs.  This object may be accessed either as a tuple of" ilk="class" name="statvfs_result" />
      <scope doc="Translate an error code to a message string." ilk="function" name="strerror" returns="str" signature="strerror(code) -&gt; string" />
      <scope doc="Execute the command (a string) in a subshell." ilk="function" name="system" signature="system(command) -&gt; exit_status" />
      <scope doc="Return a tuple of floating point numbers indicating process times." ilk="function" name="times" signature="times() -&gt; (utime, stime, cutime, cstime, elapsed_time)" />
      <scope doc="Set the current numeric umask and return the previous umask." ilk="function" name="umask" signature="umask(new_mask) -&gt; old_mask" />
      <scope doc="Remove a file (same as remove(path))." ilk="function" name="unlink" signature="unlink(path)" />
      <scope doc="Return n random bytes suitable for cryptographic use." ilk="function" name="urandom" returns="str" signature="urandom(n) -&gt; str" />
      <scope doc="Set the access and modified time of the file to the given values." ilk="function" name="utime" signature="utime(path, (atime, mtime)) utime(path, None)" />
      <scope doc="Wait for completion of a given process." ilk="function" name="waitpid" signature="waitpid(pid, options) -&gt; (pid, status &lt;&lt; 8)" />
      <scope doc="Write a string to a file descriptor." ilk="function" name="write" signature="write(fd, string) -&gt; byteswritten" />
    </scope>
    <scope doc="Different kinds of SAX Exceptions" ilk="blob" lang="Python3" name="xml.sax._exceptions">
      <scope classrefs="Exception" doc="Encapsulate an XML error or warning. This class can contain basic error or warning information from either the XML parser or the application: you can subclass it to provide additional" ilk="class" line="9" lineend="41" name="SAXException">
        <variable attributes="protected __instancevar__" line="23" name="_exception" />
        <scope doc="Return the embedded exception, or None if there was none." ilk="function" line="30" lineend="32" name="getException" signature="getException()">
          <variable citdl="SAXException" ilk="argument" name="self" />
        </scope>
        <scope doc="Avoids weird error messages if someone does exception[ix] by mistake, since Exception has __getitem__ defined." ilk="function" line="38" lineend="41" name="__getitem__" signature="__getitem__(ix)">
          <variable citdl="SAXException" ilk="argument" name="self" />
          <variable ilk="argument" name="ix" />
        </scope>
        <variable attributes="protected __instancevar__" line="22" name="_msg" />
        <scope doc="Return a message for this exception." ilk="function" line="26" lineend="28" name="getMessage" signature="getMessage()">
          <variable citdl="SAXException" ilk="argument" name="self" />
        </scope>
        <scope doc="Create a string representation of the exception." ilk="function" line="34" lineend="36" name="__str__" signature="__str__()">
          <variable citdl="SAXException" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" doc="Creates an exception." ilk="function" line="19" lineend="24" name="__init__" signature="SAXException(msg, exception=None)">
          <variable citdl="SAXException" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="exception" />
        </scope>
      </scope>
      <scope classrefs="SAXException" doc="Exception class for an unrecognized identifier.  An XMLReader will raise this exception when it is confronted with an" ilk="class" line="105" name="SAXNotRecognizedException" />
      <scope classrefs="SAXException" doc="Exception class for an unsupported operation.  An XMLReader will raise this exception when a service it cannot" ilk="class" line="115" name="SAXNotSupportedException" />
      <scope classrefs="SAXException" doc="Encapsulate an XML parse error or warning.  This exception will include information for locating the error in" ilk="class" line="46" lineend="100" name="SAXParseException">
        <scope doc="Get the public identifier of the entity where the exception occurred." ilk="function" line="81" lineend="83" name="getPublicId" returns="self._locator.getPublicId()" signature="getPublicId()">
          <variable citdl="SAXParseException" ilk="argument" name="self" />
        </scope>
        <scope doc="The column number of the end of the text where the exception occurred." ilk="function" line="72" lineend="75" name="getColumnNumber" returns="self._locator.getColumnNumber()" signature="getColumnNumber()">
          <variable citdl="SAXParseException" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._locator.getLineNumber()" line="70" name="_linenum" />
        <scope doc="Create a string representation of the exception." ilk="function" line="89" lineend="100" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="SAXParseException" ilk="argument" name="self" />
          <variable citdl="getSystemId()" line="91" name="sysid" />
          <variable citdl="str" line="94" name="linenum" />
          <variable citdl="getColumnNumber()" line="97" name="colnum" />
        </scope>
        <scope doc="Get the system identifier of the entity where the exception occurred." ilk="function" line="85" lineend="87" name="getSystemId" returns="self._locator.getSystemId()" signature="getSystemId()">
          <variable citdl="SAXParseException" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" line="62" name="_locator" />
        <scope doc="The line number of the end of the text where the exception occurred." ilk="function" line="77" lineend="79" name="getLineNumber" returns="self._locator.getLineNumber()" signature="getLineNumber()">
          <variable citdl="SAXParseException" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="self._locator.getSystemId()" line="68" name="_systemId" />
        <variable attributes="protected __instancevar__" citdl="self._locator.getColumnNumber()" line="69" name="_colnum" />
        <scope attributes="__ctor__" doc="Creates the exception. The exception parameter is allowed to be None." ilk="function" line="59" lineend="70" name="__init__" signature="SAXParseException(msg, exception, locator)">
          <variable citdl="SAXParseException" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="exception" />
          <variable ilk="argument" name="locator" />
        </scope>
      </scope>
      <scope classrefs="SAXNotSupportedException" doc="Exception class for a missing driver.  An XMLReader module (driver) should raise this exception when it" ilk="class" line="125" name="SAXReaderNotAvailable" />
    </scope>
    <scope doc="Path operations common to more than one OS Do not use directly.  The OS specific modules import the appropriate functions from this module themselves." ilk="blob" lang="Python3" name="genericpath">
      <variable citdl="list" line="9" name="__all__" />
      <scope doc="Given a list of pathnames, returns the longest common leading component" ilk="function" line="68" lineend="76" name="commonprefix" returns="str" signature="commonprefix(m)">
        <variable citdl="max()" line="72" name="s2" />
        <variable citdl="min()" line="71" name="s1" />
        <variable ilk="argument" name="m" />
      </scope>
      <scope doc="Test whether a path exists." ilk="function" line="15" lineend="21" name="exists" returns="bool" signature="exists(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="os.stat()" line="18" name="st" />
      </scope>
      <scope doc="Return the last access time of a file, reported by os.stat()." ilk="function" line="57" lineend="59" name="getatime" signature="getatime(filename)">
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Return the metadata change time of a file, reported by os.stat()." ilk="function" line="62" lineend="64" name="getctime" signature="getctime(filename)">
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Return the last modification time of a file, reported by os.stat()." ilk="function" line="52" lineend="54" name="getmtime" signature="getmtime(filename)">
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" line="47" lineend="49" name="getsize" signature="getsize(filename)">
        <variable ilk="argument" name="filename" />
      </scope>
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" line="38" lineend="44" name="isdir" returns="bool" signature="isdir(s)">
        <variable ilk="argument" name="s" />
        <variable citdl="os.stat()" line="41" name="st" />
      </scope>
      <scope doc="Test whether a path is a regular file" ilk="function" line="26" lineend="32" name="isfile" returns="stat.S_ISREG()" signature="isfile(path)">
        <variable ilk="argument" name="path" />
        <variable citdl="os.stat()" line="29" name="st" />
      </scope>
      <import module="os" />
      <import module="stat" />
      <scope attributes="protected __hidden__" doc="Split the extension from a pathname." ilk="function" line="85" lineend="106" name="_splitext" returns="tuple" signature="_splitext(p, sep, altsep, extsep)">
        <variable ilk="argument" name="p" />
        <variable ilk="argument" name="sep" />
        <variable ilk="argument" name="altsep" />
        <variable ilk="argument" name="extsep" />
        <variable citdl="p.rfind()" line="92" name="sepIndex" />
        <variable citdl="p.rfind()" line="94" name="altsepIndex" />
        <variable citdl="p.rfind()" line="97" name="dotIndex" />
        <variable citdl="p.rfind()" line="100" name="filenameIndex" />
      </scope>
    </scope>
    <scope doc="Constants/functions for interpreting results of os.stat() and os.lstat().  Suggested usage: from stat import *" ilk="blob" lang="Python3" name="stat">
      <variable citdl="int" line="92" name="SF_APPEND" />
      <variable citdl="int" line="90" name="SF_ARCHIVED" />
      <variable citdl="int" line="91" name="SF_IMMUTABLE" />
      <variable citdl="int" line="93" name="SF_NOUNLINK" />
      <variable citdl="int" line="94" name="SF_SNAPSHOT" />
      <variable citdl="int" line="15" name="ST_ATIME" />
      <variable citdl="int" line="17" name="ST_CTIME" />
      <variable citdl="int" line="10" name="ST_DEV" />
      <variable citdl="int" line="13" name="ST_GID" />
      <variable citdl="int" line="9" name="ST_INO" />
      <variable citdl="int" line="8" name="ST_MODE" />
      <variable citdl="int" line="16" name="ST_MTIME" />
      <variable citdl="int" line="11" name="ST_NLINK" />
      <variable citdl="int" line="14" name="ST_SIZE" />
      <variable citdl="int" line="12" name="ST_UID" />
      <variable citdl="int" line="65" name="S_ENFMT" />
      <variable citdl="int" line="69" name="S_IEXEC" />
      <variable citdl="int" line="32" name="S_IFBLK" />
      <variable citdl="int" line="31" name="S_IFCHR" />
      <variable citdl="int" line="30" name="S_IFDIR" />
      <variable citdl="int" line="34" name="S_IFIFO" />
      <variable citdl="int" line="35" name="S_IFLNK" />
      <scope ilk="function" line="24" lineend="25" name="S_IFMT" returns="int" signature="S_IFMT(mode)">
        <variable ilk="argument" name="mode" />
      </scope>
      <variable citdl="int" line="33" name="S_IFREG" />
      <variable citdl="int" line="36" name="S_IFSOCK" />
      <scope ilk="function" line="21" lineend="22" name="S_IMODE" returns="int" signature="S_IMODE(mode)">
        <variable ilk="argument" name="mode" />
      </scope>
      <variable citdl="int" line="67" name="S_IREAD" />
      <variable citdl="int" line="75" name="S_IRGRP" />
      <variable citdl="int" line="79" name="S_IROTH" />
      <variable citdl="int" line="71" name="S_IRUSR" />
      <variable citdl="int" line="74" name="S_IRWXG" />
      <variable citdl="int" line="78" name="S_IRWXO" />
      <variable citdl="int" line="70" name="S_IRWXU" />
      <scope ilk="function" line="46" lineend="47" name="S_ISBLK" returns="bool" signature="S_ISBLK(mode)">
        <variable ilk="argument" name="mode" />
      </scope>
      <scope ilk="function" line="43" lineend="44" name="S_ISCHR" returns="bool" signature="S_ISCHR(mode)">
        <variable ilk="argument" name="mode" />
      </scope>
      <scope ilk="function" line="40" lineend="41" name="S_ISDIR" returns="bool" signature="S_ISDIR(mode)">
        <variable ilk="argument" name="mode" />
      </scope>
      <scope ilk="function" line="52" lineend="53" name="S_ISFIFO" returns="bool" signature="S_ISFIFO(mode)">
        <variable ilk="argument" name="mode" />
      </scope>
      <variable citdl="int" line="64" name="S_ISGID" />
      <scope ilk="function" line="55" lineend="56" name="S_ISLNK" returns="bool" signature="S_ISLNK(mode)">
        <variable ilk="argument" name="mode" />
      </scope>
      <scope ilk="function" line="49" lineend="50" name="S_ISREG" returns="bool" signature="S_ISREG(mode)">
        <variable ilk="argument" name="mode" />
      </scope>
      <scope ilk="function" line="58" lineend="59" name="S_ISSOCK" returns="bool" signature="S_ISSOCK(mode)">
        <variable ilk="argument" name="mode" />
      </scope>
      <variable citdl="int" line="63" name="S_ISUID" />
      <variable citdl="int" line="66" name="S_ISVTX" />
      <variable citdl="int" line="76" name="S_IWGRP" />
      <variable citdl="int" line="80" name="S_IWOTH" />
      <variable citdl="int" line="68" name="S_IWRITE" />
      <variable citdl="int" line="72" name="S_IWUSR" />
      <variable citdl="int" line="77" name="S_IXGRP" />
      <variable citdl="int" line="81" name="S_IXOTH" />
      <variable citdl="int" line="73" name="S_IXUSR" />
      <variable citdl="int" line="87" name="UF_APPEND" />
      <variable citdl="int" line="86" name="UF_IMMUTABLE" />
      <variable citdl="int" line="85" name="UF_NODUMP" />
      <variable citdl="int" line="89" name="UF_NOUNLINK" />
      <variable citdl="int" line="88" name="UF_OPAQUE" />
    </scope>
    <scope doc="distutils.command.bdist_dumb  Implements the Distutils &apos;bdist_dumb&apos; command (create a &quot;dumb&quot; built" ilk="blob" lang="Python3" name="distutils.command.bdist_dumb">
      <scope classrefs="Exception" doc="Some compile/link operation failed." ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot; of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options" ilk="class" name="Command" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files." ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error." ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the" ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil." ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to &apos;fancy_getopt()&apos; is bogus." ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option" ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don&apos;t know how to do something on the current platform (but we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script, such as invalid keyword arguments to &apos;setup()&apos;." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template." ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files." ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type." ilk="class" name="UnknownFileError" />
      <variable citdl="str" line="7" name="__revision__" />
      <scope classrefs="Command" ilk="class" line="17" lineend="120" name="bdist_dumb">
        <variable attributes="__instancevar__" citdl="int" line="50" name="keep_temp" />
        <variable attributes="__instancevar__" line="48" name="plat_name" />
        <scope ilk="function" line="72" lineend="120" name="run" signature="run()">
          <variable citdl="bdist_dumb" ilk="argument" name="self" />
          <variable citdl="self.reinitialize_command()" line="76" name="install" />
          <variable citdl="archive_basename.replace()" line="86" name="archive_basename" />
          <variable citdl="os.path.join()" line="94" name="pseudoinstall_root" />
          <variable citdl="os.path.join()" line="96" name="archive_root" />
          <variable citdl="self.make_archive()" line="110" name="filename" />
          <variable citdl="get_python_version()" line="113" name="pyversion" />
        </scope>
        <variable citdl="str" line="19" name="description" />
        <scope ilk="function" line="46" lineend="53" name="initialize_options" signature="initialize_options()">
          <variable citdl="bdist_dumb" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" line="49" name="format" />
        <variable citdl="list" line="21" name="user_options" />
        <variable attributes="__instancevar__" citdl="int" line="53" name="relative" />
        <variable attributes="__instancevar__" citdl="int" line="52" name="skip_build" />
        <variable attributes="__instancevar__" citdl="os.path.join()" line="47" name="bdist_dir" />
        <variable citdl="list" line="40" name="boolean_options" />
        <scope ilk="function" line="55" lineend="70" name="finalize_options" signature="finalize_options()">
          <variable citdl="bdist_dumb" ilk="argument" name="self" />
          <variable line="57" name="bdist_base" />
        </scope>
        <variable citdl="dict" line="42" name="default_format" />
        <variable attributes="__instancevar__" line="51" name="dist_dir" />
      </scope>
      <scope doc="Take the full path &apos;path&apos;, and make it a relative path." ilk="function" name="ensure_relative" signature="ensure_relative(path)" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <import module="os" />
      <scope doc="Recursively remove an entire directory tree." ilk="function" name="remove_tree" signature="remove_tree(directory, verbose=1, dry_run=0)" />
    </scope>
    <scope doc="HTTP cookie handling for web clients.  This module has (now fairly distant) origins in Gisle Aas&apos; Perl module" ilk="blob" lang="Python3" name="http.cookiejar">
      <scope classrefs="object" doc="# Used as second parameter to dict.get() method, to distinguish absent # dict key from one with a None value." ilk="class" line="1195" lineend="1195" name="Absent" />
      <scope classrefs="object" doc="HTTP Cookie.  This class represents both Netscape and RFC 2965 cookies." ilk="class" line="704" lineend="799" name="Cookie">
        <variable attributes="__instancevar__" line="758" name="comment" />
        <variable attributes="__instancevar__" citdl="domain.lower()" line="746" name="domain" />
        <variable attributes="__instancevar__" line="755" name="secure" />
        <scope ilk="function" line="777" lineend="785" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="Cookie" ilk="argument" name="self" />
          <variable citdl="str" line="778" name="p" />
          <variable citdl="domain.lower()" line="780" name="limit" />
          <variable citdl="str" line="782" name="namevalue" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="copy.copy()" line="762" name="_rest" />
        <variable attributes="__instancevar__" line="743" name="port" />
        <variable attributes="__instancevar__" citdl="False" line="760" name="rfc2109" />
        <scope ilk="function" line="768" lineend="769" name="set_nonstandard_attr" signature="set_nonstandard_attr(name, value)">
          <variable citdl="Cookie" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="__instancevar__" line="752" name="domain_initial_dot" />
        <variable attributes="__instancevar__" citdl="int()" line="740" name="version" />
        <variable attributes="__instancevar__" line="744" name="port_specified" />
        <scope attributes="__ctor__" ilk="function" line="722" lineend="762" name="__init__" signature="Cookie(version, name, value, port, port_specified, domain, domain_specified, domain_initial_dot, path, path_specified, secure, expires, discard, comment, comment_url, rest, rfc2109=False)">
          <variable citdl="Cookie" ilk="argument" name="self" />
          <variable citdl="int()" ilk="argument" name="version" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="value" />
          <variable ilk="argument" name="port" />
          <variable ilk="argument" name="port_specified" />
          <variable ilk="argument" name="domain" />
          <variable ilk="argument" name="domain_specified" />
          <variable ilk="argument" name="domain_initial_dot" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="path_specified" />
          <variable ilk="argument" name="secure" />
          <variable citdl="int()" ilk="argument" name="expires" />
          <variable ilk="argument" name="discard" />
          <variable ilk="argument" name="comment" />
          <variable ilk="argument" name="comment_url" />
          <variable ilk="argument" name="rest" />
          <variable citdl="False" ilk="argument" name="rfc2109" />
        </scope>
        <variable attributes="__instancevar__" line="754" name="path_specified" />
        <scope ilk="function" line="764" lineend="765" name="has_nonstandard_attr" returns="bool" signature="has_nonstandard_attr(name)">
          <variable citdl="Cookie" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <variable attributes="__instancevar__" citdl="int()" line="756" name="expires" />
        <variable attributes="__instancevar__" line="747" name="domain_specified" />
        <variable attributes="__instancevar__" line="753" name="path" />
        <scope ilk="function" line="766" lineend="767" name="get_nonstandard_attr" returns="self._rest.get()" signature="get_nonstandard_attr(name, default=None)">
          <variable citdl="Cookie" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="default" />
        </scope>
        <variable attributes="__instancevar__" line="741" name="name" />
        <variable attributes="__instancevar__" line="742" name="value" />
        <scope ilk="function" line="787" lineend="799" name="__repr__" returns="str" signature="__repr__()">
          <variable citdl="Cookie" ilk="argument" name="self" />
          <variable citdl="list" line="788" name="args" />
          <variable citdl="getattr()" line="795" name="attr" />
        </scope>
        <variable attributes="__instancevar__" line="757" name="discard" />
        <scope ilk="function" line="771" lineend="775" name="is_expired" returns="bool" signature="is_expired(now=None)">
          <variable citdl="Cookie" ilk="argument" name="self" />
          <variable citdl="time.time()" ilk="argument" name="now" />
        </scope>
        <variable attributes="__instancevar__" line="759" name="comment_url" />
      </scope>
      <scope classrefs="object" doc="Collection of HTTP cookies.  You may not need to know about this class: try" ilk="class" line="1197" lineend="1718" name="CookieJar">
        <variable citdl="re.compile()" line="1208" name="dots_re" />
        <scope doc="Set a cookie, without checking whether or not it should be set." ilk="function" line="1613" lineend="1624" name="set_cookie" signature="set_cookie(cookie)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable citdl="dict" line="1615" name="c" />
          <variable line="1619" name="c2" />
          <variable line="1621" name="c3" />
        </scope>
        <variable citdl="re.compile()" line="1206" name="strict_domain_re" />
        <scope doc="Add correct Cookie: header to request (urllib.request.Request object)." ilk="function" line="1307" lineend="1338" name="add_cookie_header" signature="add_cookie_header(request)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable citdl="_cookies_for_request()" line="1319" name="cookies" />
          <variable citdl="_cookie_attrs()" line="1321" name="attrs" />
        </scope>
        <variable citdl="re.compile()" line="1204" name="non_word_re" />
        <scope attributes="protected" doc="Return list of tuples containing normalised cookie information." ilk="function" line="1340" lineend="1435" name="_normalized_cookie_tuples" returns="list" signature="_normalized_cookie_tuples(attrs_set)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="attrs_set" />
          <variable citdl="list" line="1353" name="cookie_tuples" />
          <variable citdl="tuple" line="1355" name="boolean_attrs" />
          <variable citdl="tuple" line="1356" name="value_attrs" />
          <variable citdl="False" line="1372" name="max_age_set" />
          <variable citdl="True" line="1374" name="bad_cookie" />
          <variable citdl="dict" line="1376" name="standard" />
          <variable citdl="dict" line="1377" name="rest" />
          <variable citdl="k.lower()" line="1379" name="lc" />
          <variable citdl="k.lower()" line="1382" name="k" />
          <variable citdl="int()" line="1386" name="v" />
        </scope>
        <scope doc="Discard all session cookies." ilk="function" line="1667" lineend="1680" name="clear_session_cookies" signature="clear_session_cookies()">
          <variable citdl="CookieJar" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="dict" line="1218" name="_cookies" />
        <scope doc="Return sequence of Cookie objects extracted from response object." ilk="function" line="1546" lineend="1598" name="make_cookies" returns="list" signature="make_cookies(response, request)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="response" />
          <variable ilk="argument" name="request" />
          <variable citdl="response.info()" line="1549" name="headers" />
          <variable citdl="headers.get_all()" line="1550" name="rfc2965_hdrs" />
          <variable citdl="headers.get_all()" line="1551" name="ns_hdrs" />
          <variable citdl="self._policy.rfc2965" line="1553" name="rfc2965" />
          <variable citdl="self._policy.netscape" line="1554" name="netscape" />
          <variable citdl="_cookies_from_attrs_set()" line="1563" name="cookies" />
          <variable citdl="_cookies_from_attrs_set()" line="1572" name="ns_cookies" />
          <variable citdl="dict" line="1586" name="lookup" />
          <scope ilk="function" line="1590" lineend="1592" name="no_matching_rfc2965" returns="bool" signature="no_matching_rfc2965(ns_cookie, lookup=lookup)">
            <variable ilk="argument" name="ns_cookie" />
            <variable citdl="dict" ilk="argument" name="lookup" />
            <variable citdl="tuple" line="1591" name="key" />
          </scope>
        </scope>
        <variable citdl="re.compile()" line="1205" name="quote_re" />
        <variable attributes="protected __instancevar__" citdl="_threading.RLock()" line="1217" name="_cookies_lock" />
        <scope doc="Extract cookies from response, where allowable given the request." ilk="function" line="1626" lineend="1638" name="extract_cookies" signature="extract_cookies(response, request)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="response" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope attributes="protected" doc="Return a list of cookie-attributes to be returned to server." ilk="function" line="1248" lineend="1305" name="_cookie_attrs" returns="list" signature="_cookie_attrs(cookies)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="cookies" />
          <variable citdl="False" line="1260" name="version_set" />
          <variable citdl="list" line="1262" name="attrs" />
          <variable citdl="cookie.version" line="1270" name="version" />
          <variable citdl="cookie.value" line="1281" name="value" />
          <variable citdl="cookie.domain" line="1294" name="domain" />
          <variable citdl="str" line="1300" name="p" />
        </scope>
        <scope doc="Discard all expired cookies." ilk="function" line="1682" lineend="1699" name="clear_expired_cookies" signature="clear_expired_cookies()">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable citdl="time.time()" line="1694" name="now" />
        </scope>
        <scope attributes="protected" ilk="function" line="1534" lineend="1544" name="_process_rfc2109_cookies" signature="_process_rfc2109_cookies(cookies)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="cookies" />
          <variable citdl="getattr()" line="1535" name="rfc2109_as_ns" />
        </scope>
        <scope doc="Return number of contained cookies." ilk="function" line="1704" lineend="1708" name="__len__" returns="int" signature="__len__()">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable citdl="int" line="1706" name="i" />
        </scope>
        <variable citdl="re.compile()" line="1210" name="magic_re" />
        <scope doc="Set a cookie if policy says it&apos;s OK to do so." ilk="function" line="1600" lineend="1611" name="set_cookie_if_ok" signature="set_cookie_if_ok(cookie, request)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope attributes="protected" ilk="function" line="1437" lineend="1523" name="_cookie_from_cookie_tuple" returns="Cookie" signature="_cookie_from_cookie_tuple(tup, request)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="tup" />
          <variable ilk="argument" name="request" />
          <variable citdl="erhn" line="1442" name="domain" />
          <variable citdl="list" line="1443" name="path" />
          <variable citdl="request_port()" line="1444" name="port" />
          <variable citdl="standard.get()" line="1445" name="expires" />
          <variable citdl="int()" line="1448" name="version" />
          <variable citdl="standard.get()" line="1450" name="secure" />
          <variable citdl="True" line="1452" name="discard" />
          <variable citdl="standard.get()" line="1453" name="comment" />
          <variable citdl="standard.get()" line="1454" name="comment_url" />
          <variable citdl="True" line="1458" name="path_specified" />
          <variable citdl="path.rfind()" line="1463" name="i" />
          <variable citdl="bool" line="1473" name="domain_specified" />
          <variable citdl="False" line="1475" name="domain_initial_dot" />
          <variable citdl="False" line="1485" name="port_specified" />
        </scope>
        <variable citdl="re.compile()" line="1207" name="domain_re" />
        <scope ilk="function" line="1701" lineend="1702" name="__iter__" returns="deepvalues()" signature="__iter__()">
          <variable citdl="CookieJar" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="1223" lineend="1239" name="_cookies_for_domain" returns="list" signature="_cookies_for_domain(domain, request)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="domain" />
          <variable ilk="argument" name="request" />
          <variable citdl="list" line="1224" name="cookies" />
          <variable line="1228" name="cookies_by_path" />
          <variable line="1232" name="cookies_by_name" />
        </scope>
        <scope attributes="protected" ilk="function" line="1525" lineend="1532" name="_cookies_from_attrs_set" returns="list" signature="_cookies_from_attrs_set(attrs_set, request)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="attrs_set" />
          <variable ilk="argument" name="request" />
          <variable citdl="_normalized_cookie_tuples()" line="1526" name="cookie_tuples" />
          <variable citdl="list" line="1528" name="cookies" />
          <variable citdl="_cookie_from_cookie_tuple()" line="1530" name="cookie" />
        </scope>
        <scope ilk="function" line="1715" lineend="1718" name="__str__" returns="tuple" signature="__str__()">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable citdl="list" line="1716" name="r" />
        </scope>
        <scope ilk="function" line="1220" lineend="1221" name="set_policy" signature="set_policy(policy)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="policy" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="DefaultCookiePolicy" line="1215" name="_policy" />
        <scope ilk="function" line="1710" lineend="1713" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable citdl="list" line="1711" name="r" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="1212" lineend="1218" name="__init__" signature="CookieJar(policy=None)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="policy" />
        </scope>
        <scope doc="Clear some cookies." ilk="function" line="1640" lineend="1665" name="clear" signature="clear(domain=None, path=None, name=None)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="domain" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="protected" doc="Return a list of cookies to be returned to server." ilk="function" line="1241" lineend="1246" name="_cookies_for_request" returns="list" signature="_cookies_for_request(request)">
          <variable citdl="CookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="request" />
          <variable citdl="list" line="1243" name="cookies" />
        </scope>
      </scope>
      <scope classrefs="object" doc="Defines which cookies get accepted from and returned to server.  May also modify cookies, though this is probably a bad idea." ilk="class" line="802" lineend="832" name="CookiePolicy">
        <scope doc="Return false if cookies should not be returned, given cookie path." ilk="function" line="829" lineend="832" name="path_return_ok" returns="bool" signature="path_return_ok(path, request)">
          <variable citdl="CookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope doc="Return false if cookies should not be returned, given cookie domain." ilk="function" line="824" lineend="827" name="domain_return_ok" returns="bool" signature="domain_return_ok(domain, request)">
          <variable citdl="CookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="domain" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope doc="Return true if (and only if) cookie should be accepted from server." ilk="function" line="811" lineend="818" name="set_ok" signature="set_ok(cookie, request)">
          <variable citdl="CookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope doc="Return true if (and only if) cookie should be returned to server." ilk="function" line="820" lineend="822" name="return_ok" signature="return_ok(cookie, request)">
          <variable citdl="CookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
        </scope>
      </scope>
      <variable citdl="list" line="82" name="DAYS" />
      <variable citdl="str" line="55" name="DEFAULT_HTTP_PORT" />
      <scope classrefs="CookiePolicy" doc="Implements the standard rules for accepting and returning cookies." ilk="class" line="835" lineend="1169" name="DefaultCookiePolicy">
        <scope ilk="function" line="974" lineend="1031" name="set_ok_domain" returns="bool" signature="set_ok_domain(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
          <variable citdl="cookie.domain" line="983" name="domain" />
          <variable citdl="domain.rfind()" line="988" name="i" />
          <variable citdl="domain.rfind()" line="989" name="j" />
          <variable citdl="list" line="991" name="tld" />
          <variable citdl="list" line="992" name="sld" />
          <variable citdl="list" line="1001" name="undotted_domain" />
          <variable citdl="bool" line="1004" name="embedded_dots" />
          <variable citdl="list" line="1025" name="host_prefix" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="865" name="strict_ns_domain" />
        <scope ilk="function" line="1081" lineend="1091" name="return_ok_verifiability" returns="bool" signature="return_ok_verifiability(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope doc="Set the sequence of allowed domains, or None." ilk="function" line="894" lineend="898" name="set_allowed_domains" signature="set_allowed_domains(allowed_domains)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable citdl="tuple()" ilk="argument" name="allowed_domains" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="tuple()" line="876" name="_allowed_domains" />
        <scope doc="Return the sequence of blocked domains (as a tuple)." ilk="function" line="878" lineend="880" name="blocked_domains" returns="tuple" signature="blocked_domains()">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="942" lineend="952" name="set_ok_verifiability" returns="bool" signature="set_ok_verifiability(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope attributes="__ctor__" doc="Constructor arguments should be passed as keyword arguments only." ilk="function" line="845" lineend="876" name="__init__" signature="DefaultCookiePolicy(blocked_domains=None, allowed_domains=None, netscape=True, rfc2965=False, rfc2109_as_netscape=None, hide_cookie2=False, strict_domain=False, strict_rfc2965_unverifiable=True, strict_ns_unverifiable=False, strict_ns_domain=DomainLiberal, strict_ns_set_initial_dollar=False, strict_ns_set_path=False)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="blocked_domains" />
          <variable citdl="tuple()" ilk="argument" name="allowed_domains" />
          <variable citdl="True" ilk="argument" name="netscape" />
          <variable citdl="False" ilk="argument" name="rfc2965" />
          <variable ilk="argument" name="rfc2109_as_netscape" />
          <variable citdl="False" ilk="argument" name="hide_cookie2" />
          <variable citdl="False" ilk="argument" name="strict_domain" />
          <variable citdl="True" ilk="argument" name="strict_rfc2965_unverifiable" />
          <variable citdl="False" ilk="argument" name="strict_ns_unverifiable" />
          <variable citdl="int" ilk="argument" name="strict_ns_domain" />
          <variable citdl="False" ilk="argument" name="strict_ns_set_initial_dollar" />
          <variable citdl="False" ilk="argument" name="strict_ns_set_path" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="863" name="strict_rfc2965_unverifiable" />
        <variable citdl="int" line="840" name="DomainRFC2965Match" />
        <variable attributes="__instancevar__" line="860" name="rfc2109_as_netscape" />
        <variable attributes="__instancevar__" citdl="False" line="859" name="rfc2965" />
        <scope ilk="function" line="1119" lineend="1139" name="return_ok_domain" returns="bool" signature="return_ok_domain(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
          <variable citdl="cookie.domain" line="1121" name="domain" />
        </scope>
        <scope ilk="function" line="1163" lineend="1169" name="path_return_ok" returns="bool" signature="path_return_ok(path, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="path" />
          <variable ilk="argument" name="request" />
          <variable citdl="request_path()" line="1165" name="req_path" />
        </scope>
        <scope ilk="function" line="927" lineend="940" name="set_ok_version" returns="bool" signature="set_ok_version(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope ilk="function" line="1072" lineend="1079" name="return_ok_version" returns="bool" signature="return_ok_version(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="866" name="strict_ns_set_initial_dollar" />
        <variable attributes="__instancevar__" citdl="False" line="861" name="hide_cookie2" />
        <variable citdl="int" line="843" name="DomainStrict" />
        <scope ilk="function" line="1141" lineend="1161" name="domain_return_ok" returns="bool" signature="domain_return_ok(domain, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="domain" />
          <variable ilk="argument" name="request" />
          <variable citdl="str" line="1146" name="req_host" />
          <variable citdl="str" line="1148" name="erhn" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="862" name="strict_domain" />
        <scope ilk="function" line="900" lineend="906" name="is_not_allowed" returns="bool" signature="is_not_allowed(domain)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="domain" />
        </scope>
        <scope doc="If you override .return_ok(), be sure to call this method." ilk="function" line="1054" lineend="1070" name="return_ok" returns="bool" signature="return_ok(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
          <variable citdl="n" line="1066" name="fn_name" />
          <variable citdl="getattr()" line="1067" name="fn" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="867" name="strict_ns_set_path" />
        <scope ilk="function" line="1099" lineend="1103" name="return_ok_expires" returns="bool" signature="return_ok_expires(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
        </scope>
        <variable citdl="int" line="839" name="DomainStrictNonDomain" />
        <variable citdl="int" line="842" name="DomainLiberal" />
        <scope ilk="function" line="885" lineend="889" name="is_blocked" returns="bool" signature="is_blocked(domain)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="domain" />
        </scope>
        <variable attributes="__instancevar__" citdl="True" line="858" name="netscape" />
        <scope ilk="function" line="1093" lineend="1097" name="return_ok_secure" returns="bool" signature="return_ok_secure(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope ilk="function" line="954" lineend="961" name="set_ok_name" returns="bool" signature="set_ok_name(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
        </scope>
        <scope doc="If you override .set_ok(), be sure to call this method." ilk="function" line="908" lineend="925" name="set_ok" returns="bool" signature="set_ok(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
          <variable citdl="n" line="920" name="fn_name" />
          <variable citdl="getattr()" line="921" name="fn" />
        </scope>
        <scope doc="Return None, or the sequence of allowed domains (as a tuple)." ilk="function" line="891" lineend="893" name="allowed_domains" returns="tuple()" signature="allowed_domains()">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
        </scope>
        <variable citdl="int" line="838" name="DomainStrictNoDots" />
        <scope ilk="function" line="1105" lineend="1117" name="return_ok_port" returns="bool" signature="return_ok_port(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
          <variable citdl="request_port()" line="1107" name="req_port" />
        </scope>
        <variable attributes="__instancevar__" citdl="False" line="864" name="strict_ns_unverifiable" />
        <scope doc="Set the sequence of blocked domains." ilk="function" line="881" lineend="883" name="set_blocked_domains" signature="set_blocked_domains(blocked_domains)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="blocked_domains" />
        </scope>
        <scope ilk="function" line="1033" lineend="1052" name="set_ok_port" returns="bool" signature="set_ok_port(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
          <variable citdl="request_port()" line="1035" name="req_port" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="tuple()" line="870" name="_blocked_domains" />
        <scope ilk="function" line="963" lineend="972" name="set_ok_path" returns="bool" signature="set_ok_path(cookie, request)">
          <variable citdl="DefaultCookiePolicy" ilk="argument" name="self" />
          <variable ilk="argument" name="cookie" />
          <variable ilk="argument" name="request" />
          <variable citdl="request_path()" line="965" name="req_path" />
        </scope>
      </scope>
      <variable citdl="int" line="73" name="EPOCH_YEAR" />
      <variable citdl="SRE_Pattern" line="635" name="ESCAPED_CHAR_RE" />
      <scope classrefs="CookieJar" doc="CookieJar that can be loaded from and saved to a file." ilk="class" line="1724" lineend="1782" name="FileCookieJar">
        <scope doc="Load cookies from a file." ilk="function" line="1746" lineend="1756" name="load" signature="load(filename=None, ignore_discard=False, ignore_expires=False)">
          <variable citdl="FileCookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="False" ilk="argument" name="ignore_discard" />
          <variable citdl="False" ilk="argument" name="ignore_expires" />
          <variable citdl="open()" line="1752" name="f" />
        </scope>
        <variable attributes="__instancevar__" citdl="bool()" line="1740" name="delayload" />
        <scope doc="Clear all cookies and reload cookies from a saved file." ilk="function" line="1758" lineend="1782" name="revert" signature="revert(filename=None, ignore_discard=False, ignore_expires=False)">
          <variable citdl="FileCookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="False" ilk="argument" name="ignore_discard" />
          <variable citdl="False" ilk="argument" name="ignore_expires" />
          <variable citdl="copy.deepcopy()" line="1773" name="old_state" />
        </scope>
        <variable attributes="__instancevar__" line="1739" name="filename" />
        <scope doc="Save cookies to a file." ilk="function" line="1742" lineend="1744" name="save" signature="save(filename=None, ignore_discard=False, ignore_expires=False)">
          <variable citdl="FileCookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="False" ilk="argument" name="ignore_discard" />
          <variable citdl="False" ilk="argument" name="ignore_expires" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="copy.deepcopy()" line="1774" name="_cookies" />
        <scope attributes="__ctor__" doc="Cookies are NOT loaded from the named file until either the .load() or .revert() method is called." ilk="function" line="1727" lineend="1740" name="__init__" signature="FileCookieJar(filename=None, delayload=False, policy=None)">
          <variable citdl="FileCookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="False" ilk="argument" name="delayload" />
          <variable ilk="argument" name="policy" />
        </scope>
      </scope>
      <variable citdl="SRE_Pattern" line="327" name="HEADER_ESCAPE_RE" />
      <variable citdl="SRE_Pattern" line="413" name="HEADER_JOIN_ESCAPE_RE" />
      <variable citdl="SRE_Pattern" line="325" name="HEADER_QUOTED_VALUE_RE" />
      <variable citdl="SRE_Pattern" line="324" name="HEADER_TOKEN_RE" />
      <variable citdl="SRE_Pattern" line="326" name="HEADER_VALUE_RE" />
      <variable citdl="str" line="634" name="HTTP_PATH_SAFE" />
      <variable citdl="SRE_Pattern" line="492" name="IPV4_RE" />
      <variable citdl="SRE_Pattern" line="270" name="ISO_DATE_RE" />
      <variable citdl="SRE_Pattern" line="197" name="LOOSE_HTTP_DATE_RE" />
      <scope classrefs="FileCookieJar" doc="The LWPCookieJar saves a sequence of&quot;Set-Cookie3&quot; lines. &quot;Set-Cookie3&quot; is the format used by the libwww-perl libary, not known to be compatible with any browser, but which is easy to read and" ilk="class" line="1813" lineend="1934" name="LWPCookieJar">
        <scope ilk="function" line="1842" lineend="1855" name="save" signature="save(filename=None, ignore_discard=False, ignore_expires=False)">
          <variable citdl="LWPCookieJar" ilk="argument" name="self" />
          <variable citdl="self.filename" ilk="argument" name="filename" />
          <variable citdl="False" ilk="argument" name="ignore_discard" />
          <variable citdl="False" ilk="argument" name="ignore_expires" />
          <variable citdl="open()" line="1847" name="f" />
        </scope>
        <scope attributes="protected" ilk="function" line="1857" lineend="1934" name="_really_load" signature="_really_load(f, filename, ignore_discard, ignore_expires)">
          <variable citdl="LWPCookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="ignore_discard" />
          <variable ilk="argument" name="ignore_expires" />
          <variable citdl="f.readline()" line="1858" name="magic" />
          <variable citdl="str" line="1860" name="msg" />
          <variable citdl="time.time()" line="1864" name="now" />
          <variable citdl="str" line="1866" name="header" />
          <variable citdl="tuple" line="1867" name="boolean_attrs" />
          <variable citdl="tuple" line="1869" name="value_attrs" />
          <variable citdl="f.readline()" line="1876" name="line" />
          <variable citdl="dict" line="1884" name="standard" />
          <variable citdl="dict" line="1885" name="rest" />
          <variable citdl="k.lower()" line="1890" name="lc" />
          <variable citdl="k.lower()" line="1895" name="k" />
          <variable citdl="True" line="1897" name="v" />
          <variable citdl="standard.get" line="1904" name="h" />
          <variable citdl="h()" line="1905" name="expires" />
          <variable citdl="h()" line="1906" name="discard" />
          <variable citdl="h()" line="1911" name="domain" />
          <variable citdl="domain.startswith()" line="1912" name="domain_specified" />
          <variable citdl="Cookie" line="1913" name="c" />
        </scope>
        <scope doc="Return cookies as a string of &quot; &quot;-separated &quot;Set-Cookie3&quot; headers." ilk="function" line="1826" lineend="1840" name="as_lwp_str" returns="str.join()" signature="as_lwp_str(ignore_discard=True, ignore_expires=True)">
          <variable citdl="LWPCookieJar" ilk="argument" name="self" />
          <variable citdl="True" ilk="argument" name="ignore_discard" />
          <variable citdl="True" ilk="argument" name="ignore_expires" />
          <variable citdl="time.time()" line="1832" name="now" />
          <variable citdl="list" line="1833" name="r" />
        </scope>
      </scope>
      <scope classrefs="IOError" doc="# derives from IOError for backwards-compatibility with Python 2.4.0" ilk="class" line="1722" lineend="1722" name="LoadError" />
      <variable citdl="str" line="56" name="MISSING_FILENAME_TEXT" />
      <variable citdl="list" line="83" name="MONTHS" />
      <variable citdl="list" line="85" name="MONTHS_LOWER" />
      <scope classrefs="FileCookieJar" doc="WARNING: you may want to backup your browser&apos;s cookies file if you use this class to save cookies.  I *think* it works, but there have been bugs in the past!" ilk="class" line="1937" lineend="2078" name="MozillaCookieJar">
        <variable citdl="str" line="1969" name="header" />
        <scope ilk="function" line="2042" lineend="2078" name="save" signature="save(filename=None, ignore_discard=False, ignore_expires=False)">
          <variable citdl="MozillaCookieJar" ilk="argument" name="self" />
          <variable citdl="self.filename" ilk="argument" name="filename" />
          <variable citdl="False" ilk="argument" name="ignore_discard" />
          <variable citdl="False" ilk="argument" name="ignore_expires" />
          <variable citdl="open()" line="2047" name="f" />
          <variable citdl="time.time()" line="2050" name="now" />
          <variable citdl="str" line="2056" name="secure" />
          <variable citdl="str" line="2058" name="initial_dot" />
          <variable citdl="str()" line="2061" name="expires" />
          <variable citdl="cookie.name" line="2068" name="name" />
          <variable citdl="cookie.name" line="2069" name="value" />
        </scope>
        <scope attributes="protected" ilk="function" line="1976" lineend="2040" name="_really_load" signature="_really_load(f, filename, ignore_discard, ignore_expires)">
          <variable citdl="MozillaCookieJar" ilk="argument" name="self" />
          <variable ilk="argument" name="f" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="ignore_discard" />
          <variable ilk="argument" name="ignore_expires" />
          <variable citdl="time.time()" line="1977" name="now" />
          <variable citdl="f.readline()" line="1979" name="magic" />
          <variable citdl="list" line="1988" name="line" />
          <variable citdl="bool" line="2001" name="secure" />
          <variable citdl="bool" line="2002" name="domain_specified" />
          <variable citdl="value" line="2007" name="name" />
          <variable line="2008" name="value" />
          <variable citdl="domain.startswith()" line="2010" name="initial_dot" />
          <variable citdl="True" line="2013" name="discard" />
          <variable line="2015" name="expires" />
          <variable citdl="Cookie" line="2019" name="c" />
        </scope>
        <variable citdl="re.compile()" line="1968" name="magic_re" />
      </scope>
      <variable citdl="SRE_Pattern" line="192" name="STRICT_DATE_RE" />
      <variable citdl="SRE_Pattern" line="124" name="TIMEZONE_RE" />
      <variable citdl="dict" line="122" name="UTC_ZONES" />
      <variable citdl="SRE_Pattern" line="195" name="WEEKDAY_RE" />
      <variable citdl="list" line="28" name="__all__" />
      <import module="_threading" />
      <import module="copy" />
      <variable citdl="SRE_Pattern" line="577" name="cut_port_re" />
      <variable citdl="bool" line="42" name="debug" />
      <scope doc="Iterates over nested mapping, depth-first, in sorted order by key." ilk="function" line="1176" lineend="1190" name="deepvalues" signature="deepvalues(mapping)">
        <variable citdl="vals_sorted_by_key()" line="1178" name="values" />
        <variable citdl="False" ilk="argument" name="mapping" />
      </scope>
      <scope doc="Return True if domain A domain-matches domain B, according to RFC 2965." ilk="function" line="508" lineend="545" name="domain_match" returns="bool" signature="domain_match(A, B)">
        <variable citdl="A.lower()" ilk="argument" name="A" />
        <variable citdl="A.rfind()" line="537" name="i" />
        <variable citdl="B.lower()" ilk="argument" name="B" />
      </scope>
      <scope doc="Return a tuple (request-host, effective request-host name)." ilk="function" line="594" lineend="603" name="eff_request_host" returns="tuple" signature="eff_request_host(request)">
        <variable ilk="argument" name="request" />
        <variable citdl="request_host()" line="600" name="erhn" />
      </scope>
      <scope doc="Escape any invalid characters in HTTP URL, and uppercase all escapes." ilk="function" line="638" lineend="650" name="escape_path" returns="urllib.parse.quote()" signature="escape_path(path)">
        <variable citdl="urllib.parse.quote()" ilk="argument" name="path" />
      </scope>
      <import module="http" />
      <scope doc="Returns time in seconds since epoch of time represented by a string." ilk="function" line="214" lineend="268" name="http2time" returns="_str2time()" signature="http2time(text)">
        <variable citdl="WEEKDAY_RE.sub()" ilk="argument" name="text" />
        <variable citdl="tuple" line="248" name="tt" />
        <variable citdl="LOOSE_HTTP_DATE_RE.search()" line="244" name="m" />
        <variable citdl="MONTHS_LOWER.index()" line="247" name="mon" />
        <variable citdl="m.groups()" line="246" name="g" />
      </scope>
      <scope doc="Return True if text is a host domain name." ilk="function" line="493" lineend="506" name="is_HDN" returns="bool" signature="is_HDN(text)">
        <variable ilk="argument" name="text" />
      </scope>
      <scope doc="RFC 2965, section 3.3.6:" ilk="function" line="687" lineend="701" name="is_third_party" returns="bool" signature="is_third_party(request)">
        <variable ilk="argument" name="request" />
        <variable citdl="request_host()" line="697" name="req_host" />
      </scope>
      <scope doc="As for http2time, but parses the ISO 8601 formats:" ilk="function" line="286" lineend="313" name="iso2time" returns="_str2time()" signature="iso2time(text)">
        <variable citdl="text.lstrip()" ilk="argument" name="text" />
        <variable citdl="ISO_DATE_RE.search()" line="305" name="m" />
      </scope>
      <scope doc="Do the inverse (almost) of the conversion done by split_header_words." ilk="function" line="414" lineend="437" name="join_header_words" returns="str.join()" signature="join_header_words(lists)">
        <variable citdl="list" line="426" name="headers" />
        <variable citdl="str" line="434" name="k" />
        <variable citdl="list" line="428" name="attr" />
        <variable ilk="argument" name="lists" />
        <variable citdl="HEADER_JOIN_ESCAPE_RE.sub()" line="432" name="v" />
      </scope>
      <scope doc="Return True if text is a sort-of-like a host domain name." ilk="function" line="547" lineend="555" name="liberal_is_HDN" returns="bool" signature="liberal_is_HDN(text)">
        <variable ilk="argument" name="text" />
      </scope>
      <variable citdl="NoneType" line="43" name="logger" />
      <scope doc="Return string representation of Cookie in an the LWP cookie file format." ilk="function" line="1785" lineend="1811" name="lwp_cookie_str" returns="join_header_words()" signature="lwp_cookie_str(cookie)">
        <variable citdl="sorted()" line="1805" name="keys" />
        <variable citdl="list" line="1791" name="h" />
        <variable ilk="argument" name="cookie" />
      </scope>
      <variable citdl="str" name="month" />
      <scope ilk="function" line="125" lineend="137" name="offset_from_tz_string" returns="int()" signature="offset_from_tz_string(tz)">
        <variable citdl="TIMEZONE_RE.search()" line="130" name="m" />
        <variable ilk="argument" name="tz" />
        <variable citdl="int()" line="126" name="offset" />
      </scope>
      <scope doc="Ad-hoc parser for Netscape protocol cookie-attributes." ilk="function" line="439" lineend="489" name="parse_ns_headers" returns="list" signature="parse_ns_headers(ns_headers)">
        <variable ilk="argument" name="ns_headers" />
        <variable citdl="list" line="460" name="pairs" />
        <variable citdl="tuple" line="454" name="known_attrs" />
        <variable citdl="k.lower()" line="471" name="lc" />
        <variable citdl="k.lstrip()" line="466" name="k" />
        <variable citdl="param.rstrip()" line="463" name="param" />
        <variable citdl="list" line="458" name="result" />
        <variable citdl="list" line="466" name="v" />
        <variable citdl="True" line="461" name="version_set" />
      </scope>
      <import module="re" />
      <scope doc="Return reach of host h, as defined by RFC 2965, section 1." ilk="function" line="652" lineend="685" name="reach" returns="str" signature="reach(h)">
        <variable citdl="h.find()" line="678" name="i" />
        <variable ilk="argument" name="h" />
        <variable citdl="list" line="681" name="b" />
      </scope>
      <scope doc="Return request-host, as defined by RFC 2965." ilk="function" line="578" lineend="592" name="request_host" returns="host.lower()" signature="request_host(request)">
        <variable citdl="request.get_full_url()" line="585" name="url" />
        <variable citdl="request.get_header()" line="586" name="host" />
        <variable ilk="argument" name="request" />
      </scope>
      <scope doc="request-URI, as defined by RFC 2965." ilk="function" line="605" lineend="616" name="request_path" returns="str" signature="request_path(request)">
        <variable citdl="request.get_full_url()" line="607" name="url" />
        <variable citdl="escape_path()" line="610" name="path" />
        <variable citdl="urllib.parse.urlunparse()" line="612" name="req_path" />
        <variable ilk="argument" name="request" />
      </scope>
      <scope ilk="function" line="618" lineend="630" name="request_port" returns="list" signature="request_port(request)">
        <variable citdl="host.find()" line="620" name="i" />
        <variable citdl="request.get_host()" line="619" name="host" />
        <variable ilk="argument" name="request" />
        <variable citdl="str()" line="622" name="port" />
      </scope>
      <scope doc="Parse header values into a list of lists containing key,value pairs." ilk="function" line="328" lineend="411" name="split_header_words" returns="list" signature="split_header_words(header_values)">
        <variable ilk="argument" name="header_values" />
        <variable citdl="list" line="377" name="pairs" />
        <variable citdl="m.group()" line="382" name="name" />
        <variable citdl="unmatched()" line="381" name="text" />
        <variable citdl="HEADER_TOKEN_RE.search()" line="379" name="m" />
        <variable citdl="m.group()" line="386" name="value" />
        <variable citdl="text" line="376" name="orig_text" />
        <variable citdl="list" line="374" name="result" />
      </scope>
      <import module="time" />
      <scope doc="Return a string representing time in seconds since epoch, t." ilk="function" line="88" lineend="103" name="time2isoz" returns="tuple" signature="time2isoz(t=None)">
        <variable citdl="time.time()" ilk="argument" name="t" />
      </scope>
      <scope doc="Return a string representing time in seconds since epoch, t." ilk="function" line="105" lineend="119" name="time2netscape" returns="tuple" signature="time2netscape(t=None)">
        <variable citdl="time.time()" ilk="argument" name="t" />
      </scope>
      <scope doc="Unrelated but handy function to calculate Unix timestamp from GMT." ilk="function" name="timegm" signature="timegm(tuple)" />
      <scope doc="Return unmatched part of re.Match object." ilk="function" line="319" lineend="322" name="unmatched" returns="list" signature="unmatched(match)">
        <variable ilk="argument" name="match" />
      </scope>
      <scope ilk="function" line="636" lineend="637" name="uppercase_escaped_char" returns="str" signature="uppercase_escaped_char(match)">
        <variable ilk="argument" name="match" />
      </scope>
      <import module="urllib" />
      <scope doc="For blocking/accepting domains." ilk="function" line="557" lineend="575" name="user_domain_match" returns="bool" signature="user_domain_match(A, B)">
        <variable citdl="A.lower()" ilk="argument" name="A" />
        <variable citdl="B.lower()" ilk="argument" name="B" />
        <variable citdl="B.startswith()" line="570" name="initial_dot" />
      </scope>
      <scope ilk="function" line="1172" lineend="1174" name="vals_sorted_by_key" returns="map()" signature="vals_sorted_by_key(adict)">
        <variable citdl="sorted()" line="1173" name="keys" />
        <variable ilk="argument" name="adict" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="59" lineend="67" name="_warn_unhandled_exception" signature="_warn_unhandled_exception()">
        <import line="63" module="io" />
        <import line="63" module="warnings" />
        <import line="63" module="traceback" />
        <variable citdl="io.StringIO()" line="64" name="f" />
        <variable citdl="f.getvalue()" line="66" name="msg" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="74" lineend="80" name="_timegm" returns="timegm()" signature="_timegm(tt)">
        <variable ilk="argument" name="tt" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="139" lineend="190" name="_str2time" returns="offset_from_tz_string()" signature="_str2time(day, mon, yr, hr, min, sec, tz)">
        <variable citdl="int()" ilk="argument" name="day" />
        <variable citdl="int()" ilk="argument" name="mon" />
        <variable citdl="int()" ilk="argument" name="yr" />
        <variable citdl="int" ilk="argument" name="hr" />
        <variable citdl="int" ilk="argument" name="min" />
        <variable citdl="int" ilk="argument" name="sec" />
        <variable citdl="tz.upper()" ilk="argument" name="tz" />
        <variable citdl="int()" line="147" name="imon" />
        <variable line="168" name="cur_yr" />
        <variable citdl="int" line="169" name="m" />
        <variable citdl="int()" line="170" name="tmp" />
        <variable citdl="_timegm()" line="178" name="t" />
        <variable citdl="offset_from_tz_string()" line="185" name="offset" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="45" lineend="52" name="_debug" returns="logger.debug()" signature="_debug(*args)">
        <import line="50" module="logging" />
        <variable attributes="varargs" ilk="argument" name="args" />
        <variable citdl="logging.getLogger()" line="51" name="logger" />
      </scope>
    </scope>
    <scope doc="Non-terminal symbols of Python grammar (from &quot;graminit.h&quot;)." ilk="blob" lang="Python3" name="symbol">
      <variable citdl="int" line="70" name="and_expr" />
      <variable citdl="int" line="63" name="and_test" />
      <variable citdl="int" line="86" name="arglist" />
      <variable citdl="int" line="87" name="argument" />
      <variable citdl="int" line="72" name="arith_expr" />
      <variable citdl="int" line="48" name="assert_stmt" />
      <variable citdl="int" line="76" name="atom" />
      <variable citdl="int" line="29" name="augassign" />
      <variable citdl="int" line="33" name="break_stmt" />
      <variable citdl="int" line="85" name="classdef" />
      <variable citdl="int" line="89" name="comp_for" />
      <variable citdl="int" line="90" name="comp_if" />
      <variable citdl="int" line="88" name="comp_iter" />
      <variable citdl="int" line="66" name="comp_op" />
      <variable citdl="int" line="65" name="comparison" />
      <variable citdl="int" line="49" name="compound_stmt" />
      <variable citdl="int" line="34" name="continue_stmt" />
      <variable citdl="int" line="18" name="decorated" />
      <variable citdl="int" line="16" name="decorator" />
      <variable citdl="int" line="17" name="decorators" />
      <variable citdl="int" line="30" name="del_stmt" />
      <variable citdl="int" line="84" name="dictorsetmaker" />
      <variable citdl="int" line="42" name="dotted_as_name" />
      <variable citdl="int" line="44" name="dotted_as_names" />
      <variable citdl="int" line="45" name="dotted_name" />
      <variable citdl="int" line="92" name="encoding_decl" />
      <variable citdl="int" line="15" name="eval_input" />
      <variable citdl="int" line="56" name="except_clause" />
      <variable citdl="int" line="68" name="expr" />
      <variable citdl="int" line="28" name="expr_stmt" />
      <variable citdl="int" line="82" name="exprlist" />
      <variable citdl="int" line="74" name="factor" />
      <variable citdl="int" line="14" name="file_input" />
      <variable citdl="int" line="32" name="flow_stmt" />
      <variable citdl="int" line="52" name="for_stmt" />
      <variable citdl="int" line="19" name="funcdef" />
      <variable citdl="int" line="46" name="global_stmt" />
      <variable citdl="int" line="50" name="if_stmt" />
      <variable citdl="int" line="41" name="import_as_name" />
      <variable citdl="int" line="43" name="import_as_names" />
      <variable citdl="int" line="40" name="import_from" />
      <variable citdl="int" line="39" name="import_name" />
      <variable citdl="int" line="38" name="import_stmt" />
      <variable citdl="int" line="60" name="lambdef" />
      <variable citdl="int" line="61" name="lambdef_nocond" />
      <scope ilk="function" line="102" lineend="107" name="main" signature="main()" />
      <variable citdl="int" line="47" name="nonlocal_stmt" />
      <variable citdl="int" line="64" name="not_test" />
      <variable citdl="int" line="62" name="or_test" />
      <variable citdl="int" line="20" name="parameters" />
      <variable citdl="int" line="31" name="pass_stmt" />
      <variable citdl="int" line="75" name="power" />
      <variable citdl="int" line="37" name="raise_stmt" />
      <variable citdl="int" line="35" name="return_stmt" />
      <variable citdl="int" line="71" name="shift_expr" />
      <variable citdl="int" line="26" name="simple_stmt" />
      <variable citdl="int" line="13" name="single_input" />
      <variable citdl="int" line="81" name="sliceop" />
      <variable citdl="int" line="27" name="small_stmt" />
      <variable citdl="int" line="67" name="star_expr" />
      <variable citdl="int" line="25" name="stmt" />
      <variable citdl="int" line="80" name="subscript" />
      <variable citdl="int" line="79" name="subscriptlist" />
      <variable citdl="int" line="57" name="suite" />
      <variable citdl="dict" line="96" name="sym_name" />
      <variable citdl="int" line="73" name="term" />
      <variable citdl="int" line="58" name="test" />
      <variable citdl="int" line="59" name="test_nocond" />
      <variable citdl="int" line="83" name="testlist" />
      <variable citdl="int" line="91" name="testlist1" />
      <variable citdl="int" line="77" name="testlist_comp" />
      <variable citdl="int" line="22" name="tfpdef" />
      <variable citdl="int" line="78" name="trailer" />
      <variable citdl="int" line="53" name="try_stmt" />
      <variable citdl="int" line="21" name="typedargslist" />
      <variable citdl="int" line="23" name="varargslist" />
      <variable citdl="int" line="24" name="vfpdef" />
      <variable citdl="int" line="51" name="while_stmt" />
      <variable citdl="int" line="55" name="with_item" />
      <variable citdl="int" line="54" name="with_stmt" />
      <variable citdl="int" line="69" name="xor_expr" />
      <variable citdl="int" line="93" name="yield_expr" />
      <variable citdl="int" line="36" name="yield_stmt" />
    </scope>
    <scope doc="Remove __future__ imports  from __future__ import foo is replaced with an empty line." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_future">
      <scope doc="A blank line" ilk="function" name="BlankLine" signature="BlankLine()" />
      <scope classrefs="BaseFix" ilk="class" line="11" lineend="20" name="FixFuture">
        <variable citdl="str" line="12" name="PATTERN" />
        <variable citdl="int" line="15" name="run_order" />
        <scope ilk="function" line="17" lineend="20" name="transform" returns="BlankLine()" signature="transform(node, results)">
          <variable citdl="FixFuture" ilk="argument" name="self" />
          <variable ilk="argument" name="node" />
          <variable ilk="argument" name="results" />
          <variable citdl="BlankLine()" line="18" name="new" />
        </scope>
      </scope>
      <import module="fixer_base" />
    </scope>
    <scope doc="distutils.file_util  Utility functions for operating on single files." ilk="blob" lang="Python3" name="distutils.file_util">
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc. Typically this is for problems that we detect before IOError or OSError could be raised." ilk="class" name="DistutilsFileError" />
      <variable citdl="str" line="6" name="__revision__" />
      <scope doc="Copy a file &apos;src&apos; to &apos;dst&apos;." ilk="function" line="69" lineend="165" name="copy_file" returns="tuple" signature="copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=1, dry_run=0)">
        <variable ilk="argument" name="src" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="int" ilk="argument" name="dry_run" />
        <variable citdl="int" ilk="argument" name="preserve_times" />
        <variable citdl="os.path.join()" ilk="argument" name="dst" />
        <variable citdl="int" ilk="argument" name="update" />
        <variable citdl="os.stat()" line="156" name="st" />
        <variable ilk="argument" name="link" />
        <variable line="120" name="action" />
        <variable citdl="int" ilk="argument" name="preserve_mode" />
        <variable citdl="os.path.dirname()" line="109" name="dir" />
      </scope>
      <import module="log" />
      <scope doc="Move a file &apos;src&apos; to &apos;dst&apos;." ilk="function" line="169" lineend="229" name="move_file" returns="os.path.join()" signature="move_file(src, dst, verbose=1, dry_run=0)">
        <variable ilk="argument" name="src" />
        <variable citdl="os.path.join()" ilk="argument" name="dst" />
        <variable citdl="int" ilk="argument" name="verbose" />
        <variable citdl="True" line="204" name="copy_it" />
        <variable citdl="int" ilk="argument" name="dry_run" />
      </scope>
      <import module="os" />
      <scope doc="Create a file with the specified name and write &apos;contents&apos; (a sequence of strings without line terminators) to it." ilk="function" line="232" lineend="239" name="write_file" signature="write_file(filename, contents)">
        <variable citdl="open()" line="236" name="f" />
        <variable ilk="argument" name="contents" />
        <variable ilk="argument" name="filename" />
      </scope>
      <scope attributes="protected __hidden__" doc="Copy the file &apos;src&apos; to &apos;dst&apos;; both must be filenames." ilk="function" line="18" lineend="67" name="_copy_file_contents" signature="_copy_file_contents(src, dst, buffer_size=16*1024)">
        <variable ilk="argument" name="src" />
        <variable ilk="argument" name="dst" />
        <variable citdl="int" ilk="argument" name="buffer_size" />
        <variable citdl="open()" line="27" name="fsrc" />
        <variable citdl="open()" line="28" name="fdst" />
        <variable citdl="fsrc.read()" line="50" name="buf" />
      </scope>
      <variable attributes="protected __hidden__" citdl="dict" line="13" name="_copy_action" />
    </scope>
    <scope doc="W3C Document Object Model implementation for Python.  The Python mapping of the Document Object Model is documented in the" ilk="blob" lang="Python3" name="xml.dom">
      <scope classrefs="Exception" doc="Abstract base class for DOM exceptions. Exceptions with specific codes are specializations of this class." ilk="class" line="61" lineend="72" name="DOMException">
        <scope attributes="protected" ilk="function" line="71" lineend="72" name="_get_code" returns="self.code" signature="_get_code()">
          <variable citdl="DOMException" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="65" lineend="69" name="__init__" signature="DOMException(*args, **kw)">
          <variable citdl="DOMException" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
        </scope>
      </scope>
      <variable citdl="int" line="44" name="DOMSTRING_SIZE_ERR" />
      <scope classrefs="DOMException" ilk="class" line="78" lineend="79" name="DomstringSizeErr">
        <variable citdl="int" line="79" name="code" />
      </scope>
      <variable citdl="NoneType" line="136" name="EMPTY_NAMESPACE" />
      <variable citdl="NoneType" line="137" name="EMPTY_PREFIX" />
      <variable citdl="int" line="45" name="HIERARCHY_REQUEST_ERR" />
      <scope classrefs="DOMException" ilk="class" line="81" lineend="82" name="HierarchyRequestErr">
        <variable citdl="int" line="82" name="code" />
      </scope>
      <variable citdl="int" line="43" name="INDEX_SIZE_ERR" />
      <variable citdl="int" line="52" name="INUSE_ATTRIBUTE_ERR" />
      <variable citdl="int" line="57" name="INVALID_ACCESS_ERR" />
      <variable citdl="int" line="47" name="INVALID_CHARACTER_ERR" />
      <variable citdl="int" line="55" name="INVALID_MODIFICATION_ERR" />
      <variable citdl="int" line="53" name="INVALID_STATE_ERR" />
      <scope classrefs="DOMException" ilk="class" line="75" lineend="76" name="IndexSizeErr">
        <variable citdl="int" line="76" name="code" />
      </scope>
      <scope classrefs="DOMException" ilk="class" line="102" lineend="103" name="InuseAttributeErr">
        <variable citdl="int" line="103" name="code" />
      </scope>
      <scope classrefs="DOMException" ilk="class" line="117" lineend="118" name="InvalidAccessErr">
        <variable citdl="int" line="118" name="code" />
      </scope>
      <scope classrefs="DOMException" ilk="class" line="87" lineend="88" name="InvalidCharacterErr">
        <variable citdl="int" line="88" name="code" />
      </scope>
      <scope classrefs="DOMException" ilk="class" line="111" lineend="112" name="InvalidModificationErr">
        <variable citdl="int" line="112" name="code" />
      </scope>
      <scope classrefs="DOMException" ilk="class" line="105" lineend="106" name="InvalidStateErr">
        <variable citdl="int" line="106" name="code" />
      </scope>
      <variable citdl="int" line="56" name="NAMESPACE_ERR" />
      <variable citdl="int" line="50" name="NOT_FOUND_ERR" />
      <variable citdl="int" line="51" name="NOT_SUPPORTED_ERR" />
      <variable citdl="int" line="48" name="NO_DATA_ALLOWED_ERR" />
      <variable citdl="int" line="49" name="NO_MODIFICATION_ALLOWED_ERR" />
      <scope classrefs="DOMException" ilk="class" line="114" lineend="115" name="NamespaceErr">
        <variable citdl="int" line="115" name="code" />
      </scope>
      <scope classrefs="DOMException" ilk="class" line="90" lineend="91" name="NoDataAllowedErr">
        <variable citdl="int" line="91" name="code" />
      </scope>
      <scope classrefs="DOMException" ilk="class" line="93" lineend="94" name="NoModificationAllowedErr">
        <variable citdl="int" line="94" name="code" />
      </scope>
      <scope classrefs="object" doc="Class giving the NodeType constants." ilk="class" line="18" lineend="39" name="Node">
        <variable citdl="int" line="35" name="COMMENT_NODE" />
        <variable citdl="int" line="36" name="DOCUMENT_NODE" />
        <variable citdl="int" line="37" name="DOCUMENT_TYPE_NODE" />
        <variable citdl="int" line="34" name="PROCESSING_INSTRUCTION_NODE" />
        <variable citdl="int" line="33" name="ENTITY_NODE" />
        <variable citdl="int" line="31" name="CDATA_SECTION_NODE" />
        <variable citdl="int" line="30" name="TEXT_NODE" />
        <variable citdl="int" line="32" name="ENTITY_REFERENCE_NODE" />
        <variable citdl="int" line="39" name="NOTATION_NODE" />
        <variable citdl="int" line="29" name="ATTRIBUTE_NODE" />
        <variable citdl="int" line="28" name="ELEMENT_NODE" />
        <variable citdl="int" line="38" name="DOCUMENT_FRAGMENT_NODE" />
      </scope>
      <import module="NodeFilter" />
      <scope classrefs="DOMException" ilk="class" line="96" lineend="97" name="NotFoundErr">
        <variable citdl="int" line="97" name="code" />
      </scope>
      <scope classrefs="DOMException" ilk="class" line="99" lineend="100" name="NotSupportedErr">
        <variable citdl="int" line="100" name="code" />
      </scope>
      <variable citdl="int" line="54" name="SYNTAX_ERR" />
      <scope classrefs="DOMException" ilk="class" line="108" lineend="109" name="SyntaxErr">
        <variable citdl="int" line="109" name="code" />
      </scope>
      <scope classrefs="object" doc="Class giving the operation constants for UserDataHandler.handle()." ilk="class" line="123" lineend="131" name="UserDataHandler">
        <variable citdl="int" line="128" name="NODE_CLONED" />
        <variable citdl="int" line="130" name="NODE_DELETED" />
        <variable citdl="int" line="129" name="NODE_IMPORTED" />
        <variable citdl="int" line="131" name="NODE_RENAMED" />
      </scope>
      <variable citdl="int" line="58" name="VALIDATION_ERR" />
      <scope classrefs="DOMException" ilk="class" line="120" lineend="121" name="ValidationErr">
        <variable citdl="int" line="121" name="code" />
      </scope>
      <variable citdl="int" line="46" name="WRONG_DOCUMENT_ERR" />
      <scope classrefs="DOMException" ilk="class" line="84" lineend="85" name="WrongDocumentErr">
        <variable citdl="int" line="85" name="code" />
      </scope>
      <variable citdl="str" line="135" name="XHTML_NAMESPACE" />
      <variable citdl="str" line="134" name="XMLNS_NAMESPACE" />
      <variable citdl="str" line="133" name="XML_NAMESPACE" />
      <import module="domreg" />
      <import module="expatbuilder" />
      <scope doc="Return a suitable DOM implementation." ilk="function" name="getDOMImplementation" signature="getDOMImplementation(name = None, features = ()) -&gt; DOM implementation." />
      <import module="minicompat" />
      <import module="minidom" />
      <import module="pulldom" />
      <scope doc="Register the factory function with the name." ilk="function" name="registerDOMImplementation" signature="registerDOMImplementation(name, factory)" />
      <import module="xmlbuilder" />
    </scope>
    <scope doc="This module is always available. It provides access to mathematical functions for complex numbers." ilk="blob" lang="Python3" name="cmath">
      <scope doc="Return the arc cosine of x." ilk="function" name="acos" signature="acos(x)" />
      <scope doc="Return the hyperbolic arccosine of x." ilk="function" name="acosh" signature="acosh(x)" />
      <scope doc="Return the arc sine of x." ilk="function" name="asin" signature="asin(x)" />
      <scope doc="Return the hyperbolic arc sine of x." ilk="function" name="asinh" signature="asinh(x)" />
      <scope doc="Return the arc tangent of x." ilk="function" name="atan" signature="atan(x)" />
      <scope doc="Return the hyperbolic arc tangent of x." ilk="function" name="atanh" signature="atanh(x)" />
      <scope doc="Return the cosine of x." ilk="function" name="cos" signature="cos(x)" />
      <scope doc="Return the hyperbolic cosine of x." ilk="function" name="cosh" signature="cosh(x)" />
      <variable citdl="float" name="e" />
      <scope doc="Return the exponential value e**x." ilk="function" name="exp" signature="exp(x)" />
      <scope doc="Checks if the real or imaginary part of z is infinite." ilk="function" name="isinf" returns="bool" signature="isinf(z) -&gt; bool" />
      <scope doc="Checks if the real or imaginary part of z not a number (NaN)" ilk="function" name="isnan" returns="bool" signature="isnan(z) -&gt; bool" />
      <scope doc="If the base not specified, returns the natural logarithm (base e) of x." ilk="function" name="log" signature="log(x[, base]) -&gt; the logarithm of x to the given base." />
      <scope doc="Return the base-10 logarithm of x." ilk="function" name="log10" signature="log10(x)" />
      <scope doc="Return argument, also known as the phase angle, of a complex." ilk="function" name="phase" returns="float" signature="phase(z) -&gt; float" />
      <variable citdl="float" name="pi" />
      <scope doc="Convert a complex from rectangular coordinates to polar coordinates." ilk="function" name="polar" signature="polar(z) -&gt; r: float, phi: float" />
      <scope doc="Convert from polar coordinates to rectangular coordinates." ilk="function" name="rect" signature="rect(r, phi) -&gt; z: complex" />
      <scope doc="Return the sine of x." ilk="function" name="sin" signature="sin(x)" />
      <scope doc="Return the hyperbolic sine of x." ilk="function" name="sinh" signature="sinh(x)" />
      <scope doc="Return the square root of x." ilk="function" name="sqrt" signature="sqrt(x)" />
      <scope doc="Return the tangent of x." ilk="function" name="tan" signature="tan(x)" />
      <scope doc="Return the hyperbolic tangent of x." ilk="function" name="tanh" signature="tanh(x)" />
    </scope>
    <scope doc="This module provides various functions to manipulate time values.  There are two standard representations of time.  One is the number" ilk="blob" lang="Python3" name="time">
      <variable citdl="int" name="accept2dyear" />
      <variable citdl="int" name="altzone" />
      <scope doc="Convert a time tuple to a string, e.g." ilk="function" name="asctime" returns="str" signature="asctime([tuple]) -&gt; string" />
      <scope doc="Return the CPU time or real time since the start of the process or since the first call to clock()." ilk="function" name="clock" signature="clock() -&gt; floating point number" />
      <scope doc="Convert a time in seconds since the Epoch to a string in local time." ilk="function" name="ctime" returns="str" signature="ctime(seconds) -&gt; string" />
      <variable citdl="int" name="daylight" />
      <scope doc="tm_sec, tm_wday, tm_yday, tm_isdst)" ilk="function" name="gmtime" signature="gmtime([seconds]) -&gt; (tm_year, tm_mon, tm_mday, tm_hour, tm_min," />
      <scope doc="tm_sec,tm_wday,tm_yday,tm_isdst)" ilk="function" name="localtime" signature="localtime([seconds]) -&gt; (tm_year,tm_mon,tm_mday,tm_hour,tm_min," />
      <scope doc="Convert a time tuple in local time to seconds since the Epoch." ilk="function" name="mktime" signature="mktime(tuple) -&gt; floating point number" />
      <scope doc="Delay execution for a given number of seconds." ilk="function" name="sleep" signature="sleep(seconds)" />
      <scope doc="Convert a time tuple to a string according to a format specification." ilk="function" name="strftime" returns="str" signature="strftime(format[, tuple]) -&gt; string" />
      <scope doc="Parse a string to a time tuple according to a format specification." ilk="function" name="strptime" signature="strptime(string, format) -&gt; struct_time" />
      <scope classrefs="object" ilk="class" name="struct_time" />
      <scope doc="Return the current time in seconds since the Epoch." ilk="function" name="time" signature="time() -&gt; floating point number" />
      <variable citdl="int" name="timezone" />
      <variable citdl="tuple" name="tzname" />
    </scope>
    <scope doc="text_file  provides the TextFile class, which gives an interface to text files" ilk="blob" lang="Python3" name="distutils.text_file">
      <scope classrefs="object" doc="Provides a file-like object that takes care of all the things you commonly want to do when processing a text file that has some line-by-line syntax: strip comments (as long as &quot;#&quot; is your" ilk="class" line="12" lineend="284" name="TextFile">
        <variable attributes="__instancevar__" citdl="int" line="103" name="current_line" />
        <variable attributes="__instancevar__" citdl="io.open()" line="102" name="file" />
        <scope ilk="function" line="125" lineend="135" name="gen_error" returns="str.join()" signature="gen_error(msg, line=None)">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable citdl="int" ilk="argument" name="line" />
          <variable citdl="list" line="126" name="outmsg" />
        </scope>
        <scope ilk="function" line="137" lineend="138" name="error" signature="error(msg, line=None)">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope doc="Read and return the list of all logical lines remaining in the current file." ilk="function" line="270" lineend="278" name="readlines" returns="list" signature="readlines()">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable citdl="list" line="273" name="lines" />
          <variable citdl="readline()" line="275" name="line" />
        </scope>
        <variable attributes="__instancevar__" line="101" name="filename" />
        <scope doc="line in the current file." ilk="function" line="140" lineend="148" name="warn" signature="Print (to stderr) a warning message tied to the current logical">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable ilk="argument" name="msg" />
          <variable ilk="argument" name="line" />
        </scope>
        <variable attributes="__instancevar__" citdl="list" line="108" name="linebuf" />
        <variable citdl="dict" line="69" name="default_options" />
        <scope doc="Close the current file and forget everything we know about it (filename, current line number)." ilk="function" line="117" lineend="123" name="close" signature="close()">
          <variable citdl="TextFile" ilk="argument" name="self" />
        </scope>
        <scope doc="Read and return a single logical line from the current file (or from an internal buffer if lines have previously been &quot;unread&quot; with &apos;unreadline()&apos;)." ilk="function" line="150" lineend="268" name="readline" returns="line.strip()" signature="readline()">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable citdl="line.lstrip()" line="165" name="line" />
          <variable citdl="list" line="169" name="buildup_line" />
          <variable citdl="line.find()" line="187" name="pos" />
          <variable citdl="bool" line="200" name="eol" />
        </scope>
        <scope doc="Open a new file named &apos;filename&apos;." ilk="function" line="110" lineend="115" name="open" signature="open(filename)">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
        </scope>
        <scope doc="Push &apos;line&apos; (a string) onto an internal buffer that will be checked by future &apos;readline()&apos; calls." ilk="function" line="280" lineend="284" name="unreadline" signature="unreadline(line)">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope attributes="__ctor__" doc="Construct a new TextFile object." ilk="function" line="77" lineend="108" name="__init__" signature="TextFile(filename=None, file=None, **options)">
          <variable citdl="TextFile" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable ilk="argument" name="file" />
          <variable attributes="kwargs" ilk="argument" name="options" />
        </scope>
      </scope>
      <variable citdl="str" line="7" name="__revision__" />
      <import module="io" />
      <import module="os" />
      <import module="sys" />
    </scope>
    <scope doc="A POP3 client class.  Based on the J. Myers POP3 draft, Jan. 96" ilk="blob" lang="Python3" name="poplib">
      <variable citdl="bytes" line="31" name="CR" />
      <variable citdl="bytes" line="33" name="CRLF" />
      <variable citdl="bytes" line="32" name="LF" />
      <scope classrefs="object" doc="This class supports both the minimal and optional command sets. Arguments can be strings or integers (where appropriate) (e.g.: retr(1) and retr(&apos;1&apos;) both work equally well." ilk="class" line="36" lineend="313" name="POP3">
        <variable citdl="str" line="78" name="encoding" />
        <scope ilk="function" line="171" lineend="172" name="set_debuglevel" signature="set_debuglevel(level)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="level" />
        </scope>
        <variable attributes="__instancevar__" citdl="self.sock.makefile()" line="85" name="file" />
        <scope attributes="protected" ilk="function" line="89" lineend="90" name="_create_socket" returns="socket.create_connection()" signature="_create_socket(timeout)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="83" name="port" />
        <scope attributes="__ctor__" ilk="function" line="80" lineend="87" name="__init__" signature="POP3(host, port=POP3_PORT, timeout=socket._GLOBAL_DEFAULT_TIMEOUT)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable citdl="socket._GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
        </scope>
        <scope doc="Signoff: commit changes on server, unlock mailbox, close connection." ilk="function" line="251" lineend="260" name="quit" returns="val" signature="quit()">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable citdl="_shortcmd()" line="254" name="resp" />
        </scope>
        <scope ilk="function" line="167" lineend="168" name="getwelcome" returns="self._getresp()" signature="getwelcome()">
          <variable citdl="POP3" ilk="argument" name="self" />
        </scope>
        <scope doc="Send password, return response" ilk="function" line="185" lineend="192" name="pass_" returns="POP3._shortcmd()" signature="pass_(pswd)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="pswd" />
        </scope>
        <variable citdl="re.compile()" line="272" name="timestamp" />
        <scope attributes="protected" ilk="function" line="127" lineend="132" name="_getresp" returns="resp" signature="_getresp()">
          <variable citdl="POP3" ilk="argument" name="self" />
        </scope>
        <scope doc="Retrieve message header of message number &apos;which&apos; and first &apos;howmuch&apos; lines of message body." ilk="function" line="295" lineend="301" name="top" returns="POP3._longcmd()" signature="top(which, howmuch)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="which" />
          <variable ilk="argument" name="howmuch" />
        </scope>
        <variable attributes="__instancevar__" citdl="self._create_socket()" line="84" name="sock" />
        <scope doc="Unmark all messages marked for deletion." ilk="function" line="246" lineend="248" name="rset" returns="POP3._shortcmd()" signature="rset()">
          <variable citdl="POP3" ilk="argument" name="self" />
        </scope>
        <scope doc="Retrieve whole message number &apos;which&apos;." ilk="function" line="222" lineend="227" name="retr" returns="POP3._longcmd()" signature="retr(which)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="which" />
        </scope>
        <scope doc="Does nothing." ilk="function" line="238" lineend="243" name="noop" returns="POP3._shortcmd()" signature="noop()">
          <variable citdl="POP3" ilk="argument" name="self" />
        </scope>
        <scope doc="Authorisation" ilk="function" line="274" lineend="292" name="apop" returns="POP3._shortcmd()" signature="apop(user, password)">
          <import line="289" module="hashlib" />
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="user" />
          <variable ilk="argument" name="password" />
          <variable citdl="bytes()" line="285" name="secret" />
          <variable citdl="self.timestamp.match()" line="286" name="m" />
          <variable citdl="m.group()" line="290" name="digest" />
        </scope>
        <scope attributes="protected" ilk="function" line="109" lineend="121" name="_getline" returns="tuple" signature="_getline()">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable citdl="self.file.readline()" line="110" name="line" />
          <variable citdl="len()" line="113" name="octets" />
        </scope>
        <scope doc="Get mailbox status." ilk="function" line="195" lineend="205" name="stat" returns="tuple" signature="stat()">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable citdl="_shortcmd()" line="200" name="retval" />
          <variable citdl="retval.split()" line="201" name="rets" />
          <variable citdl="int()" line="203" name="numMessages" />
          <variable citdl="int()" line="204" name="sizeMessages" />
        </scope>
        <scope attributes="protected" ilk="function" line="160" lineend="162" name="_longcmd" returns="POP3._getlongresp()" signature="_longcmd(line)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope doc="Delete message number &apos;which&apos;." ilk="function" line="230" lineend="235" name="dele" returns="POP3._shortcmd()" signature="dele(which)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="which" />
        </scope>
        <scope attributes="protected" ilk="function" line="99" lineend="102" name="_putcmd" signature="_putcmd(line)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable citdl="bytes()" ilk="argument" name="line" />
        </scope>
        <scope attributes="protected" ilk="function" line="92" lineend="94" name="_putline" signature="_putline(line)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <variable attributes="__instancevar__" citdl="self._getresp()" line="87" name="welcome" />
        <variable attributes="__instancevar__" line="82" name="host" />
        <scope doc="Not sure what this does." ilk="function" line="267" lineend="269" name="rpop" returns="POP3._shortcmd()" signature="rpop(user)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="user" />
        </scope>
        <scope doc="Send user name, return response" ilk="function" line="177" lineend="182" name="user" returns="POP3._shortcmd()" signature="user(user)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="user" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="int" line="86" name="_debugging" />
        <scope doc="Request listing, return result." ilk="function" line="208" lineend="219" name="list" returns="POP3._longcmd()" signature="list(which=None)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="which" />
        </scope>
        <scope attributes="protected" ilk="function" line="137" lineend="148" name="_getlongresp" returns="tuple" signature="_getlongresp()">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable citdl="_getresp()" line="138" name="resp" />
          <variable citdl="list" line="139" name="list" />
          <variable citdl="int" line="139" name="octets" />
          <variable citdl="int" line="143" name="o" />
          <variable citdl="list" line="144" name="line" />
        </scope>
        <scope attributes="protected" ilk="function" line="153" lineend="155" name="_shortcmd" returns="POP3._getresp()" signature="_shortcmd(line)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="line" />
        </scope>
        <scope doc="Return message digest (unique id) list." ilk="function" line="304" lineend="313" name="uidl" returns="POP3._longcmd()" signature="uidl(which=None)">
          <variable citdl="POP3" ilk="argument" name="self" />
          <variable ilk="argument" name="which" />
        </scope>
      </scope>
      <variable citdl="int" line="25" name="POP3_PORT" />
      <scope classrefs="POP3" doc="POP3 client class over SSL connection  Instantiate with: POP3_SSL(hostname, port=995, keyfile=None, certfile=None)" ilk="class" line="321" lineend="343" name="POP3_SSL">
        <variable attributes="__instancevar__" line="338" name="certfile" />
        <scope attributes="protected" ilk="function" line="341" lineend="343" name="_create_socket" returns="ssl.wrap_socket()" signature="_create_socket(timeout)">
          <variable citdl="POP3_SSL" ilk="argument" name="self" />
          <variable ilk="argument" name="timeout" />
          <variable citdl="POP3._create_socket()" line="342" name="sock" />
        </scope>
        <variable attributes="__instancevar__" line="337" name="keyfile" />
        <scope attributes="__ctor__" ilk="function" line="334" lineend="339" name="__init__" signature="POP3_SSL(host, port=POP3_SSL_PORT, keyfile=None, certfile=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT)">
          <variable citdl="POP3_SSL" ilk="argument" name="self" />
          <variable ilk="argument" name="host" />
          <variable citdl="int" ilk="argument" name="port" />
          <variable ilk="argument" name="keyfile" />
          <variable ilk="argument" name="certfile" />
          <variable citdl="socket._GLOBAL_DEFAULT_TIMEOUT" ilk="argument" name="timeout" />
        </scope>
      </scope>
      <variable citdl="int" line="28" name="POP3_SSL_PORT" />
      <variable citdl="list" line="18" name="__all__" />
      <scope classrefs="Exception" ilk="class" line="22" lineend="22" name="error_proto" />
      <import module="re" />
      <import module="socket" />
      <import module="ssl" />
      <variable attributes="__hidden__" citdl="POP3" line="349" name="a" />
    </scope>
  </file>
</codeintel>

