<?xml version="1.0" encoding="utf-8"?>
<codeintel version="2.0" file="php-4.3.cix" name="PHP 4.3.11" description="Cix data for PHP 4.3.11">
  <file lang="PHP" mtime="1200955033" path="php-4.3.cix">
    <scope ilk="blob" lang="PHP" name="*" id="global">
      <scope name="abs" docs="Returns the absolute value of number." ilk="function" signature="number abs ( mixed $number )" returns="number"/>
      <scope name="acos" docs="Returns the arc cosine of arg in radians. acos() is the complementary function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos()&amp;#039; range." ilk="function" signature="float acos ( float $arg )" returns="float"/>
      <scope name="acosh" docs="Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg." ilk="function" signature="float acosh ( float $arg )" returns="float"/>
      <scope name="addcslashes" docs="Returns a string with backslashes before characters that are listed in charlist parameter." ilk="function" signature="string addcslashes ( string $str , string $charlist )" returns="string"/>
      <scope name="addslashes" docs="Returns a string with backslashes before characters that need to be quoted in database queries etc. These characters are single quote (&amp;#039;), double quote (&amp;quot;), backslash (\) and NUL (the NULL byte)." ilk="function" signature="string addslashes ( string $str )" returns="string"/>
      <scope name="aggregate_methods_by_list" docs="Aggregates methods from a class to an existing object using a list of method names." ilk="function" signature="void aggregate_methods_by_list ( object $object , string $class_name , array $methods_list [, bool $exclude ] )" returns="void"/>
      <scope name="aggregate_methods_by_regexp" docs="Aggregates methods from a class to an existing object using a regular expression to match method names." ilk="function" signature="void aggregate_methods_by_regexp ( object $object , string $class_name , string $regexp [, bool $exclude ] )" returns="void"/>
      <scope name="aggregate_methods" docs="Aggregates all methods defined in a class to an existing object, except for the class constructor, or methods whose names start with an underscore character (_) which are considered private to the aggregated class." ilk="function" signature="void aggregate_methods ( object $object , string $class_name )" returns="void"/>
      <scope name="aggregate_properties_by_list" docs="Aggregates properties from a class to an existing object using a list of property names." ilk="function" signature="void aggregate_properties_by_list ( object $object , string $class_name , array $properties_list [, bool $exclude ] )" returns="void"/>
      <scope name="aggregate_properties_by_regexp" docs="Aggregates properties from a class to an existing object using a regular expression to match their names." ilk="function" signature="void aggregate_properties_by_regexp ( object $object , string $class_name , string $regexp [, bool $exclude ] )" returns="void"/>
      <scope name="aggregate_properties" docs="Aggregates all properties defined in a class to an existing object, except for properties whose names start with an underscore character (_) which are considered private to the aggregated class." ilk="function" signature="void aggregate_properties ( object $object , string $class_name )" returns="void"/>
      <scope name="aggregate" docs="Aggregates methods and properties defined in a class to an existing object. Methods and properties with names starting with an underscore character (_) are considered private to the aggregated class and are not used, constructors are also excluded from the aggregation procedure." ilk="function" signature="void aggregate ( object $object , string $class_name )" returns="void"/>
      <scope name="aggregation_info" docs="Undocumented function." ilk="function" signature="aggregation_info()"/>
      <scope name="apache_child_terminate" docs="apache_child_terminate() will register the Apache process executing the current PHP request for termination once execution of PHP code it is completed. It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system." ilk="function" signature="bool apache_child_terminate ( void )" returns="bool"/>
      <scope name="apache_get_modules" docs="Get a list of loaded Apache modules." ilk="function" signature="array apache_get_modules ( void )" returns="array"/>
      <scope name="apache_get_version" docs="Fetch the Apache version." ilk="function" signature="string apache_get_version ( void )" returns="string"/>
      <scope name="apache_getenv" docs="Get an Apache environment variable as specified by variable." ilk="function" signature="string apache_getenv ( string $variable [, bool $walk_to_top ] )" returns="string"/>
      <scope name="apache_lookup_uri" docs="This performs a partial request for a URI. It goes just far enough to obtain all the important information about the given resource." ilk="function" signature="object apache_lookup_uri ( string $filename )" returns="object"/>
      <scope name="apache_note" docs="apache_note() is an Apache-specific function which gets and sets values in a request&amp;#039;s notes table." ilk="function" signature="string apache_note ( string $note_name [, string $note_value ] )" returns="string"/>
      <scope name="apache_request_headers" docs="Fetches all HTTP requests from the current request." ilk="function" signature="array apache_request_headers ( void )" returns="array"/>
      <scope name="apache_response_headers" docs="Fetch all HTTP response headers." ilk="function" signature="array apache_response_headers ( void )" returns="array"/>
      <scope name="apache_setenv" docs="apache_setenv() sets the value of the Apache environment variable specified by variable." ilk="function" signature="bool apache_setenv ( string $variable , string $value [, bool $walk_to_top ] )" returns="bool"/>
      <scope name="array_change_key_case" docs="Returns an array with all keys from input lowercased or uppercased. Numbered indices are left as is." ilk="function" signature="array array_change_key_case ( array $input [, int $case ] )" returns="array"/>
      <scope name="array_chunk" docs="Chunks an array into size large chunks. The last chunk may contain less than size elements." ilk="function" signature="array array_chunk ( array $input , int $size [, bool $preserve_keys ] )" returns="array"/>
      <scope name="array_count_values" docs="array_count_values() returns an array using the values of the input array as keys and their frequency in input as values." ilk="function" signature="array array_count_values ( array $input )" returns="array"/>
      <scope name="array_diff_assoc" docs="Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are used in the comparision." ilk="function" signature="array array_diff_assoc ( array $array1 , array $array2 [, array $... ] )" returns="array"/>
      <scope name="array_diff" docs="Compares array1 against array2 and returns the difference." ilk="function" signature="array array_diff ( array $array1 , array $array2 [, array $ ... ] )" returns="array"/>
      <scope name="array_fill" docs="Fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter." ilk="function" signature="array array_fill ( int $start_index , int $num , mixed $value )" returns="array"/>
      <scope name="array_filter" docs="Iterates over each value in the input array passing them to the callback function. If the callback function returns true, the current value from input is returned into the result array. Array keys are preserved." ilk="function" signature="array array_filter ( array $input [, callback $callback ] )" returns="array"/>
      <scope name="array_flip" docs="array_flip() returns an array in flip order, i.e. keys from trans become values and values from trans become keys." ilk="function" signature="array array_flip ( array $trans )" returns="array"/>
      <scope name="array_intersect_assoc" docs="array1 The array with master values to check." ilk="function" signature="array array_intersect_assoc ( array $array1 , array $array2 [, array $ ... ] )" returns="array"/>
      <scope name="array_intersect" docs="array_intersect() returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved." ilk="function" signature="array array_intersect ( array $array1 , array $array2 [, array $ ... ] )" returns="array"/>
      <scope name="array_key_exists" docs="array_key_exists() returns TRUE if the given key is set in the array. key can be any value possible for an array index. array_key_exists() also works on objects." ilk="function" signature="bool array_key_exists ( mixed $key , array $search )" returns="bool"/>
      <scope name="array_keys" docs="array_keys() returns the keys, numeric and string, from the input array." ilk="function" signature="array array_keys ( array $input [, mixed $search_value [, bool $strict ]] )" returns="array"/>
      <scope name="array_map" docs="array_map() returns an array containing all the elements of arr1 after applying the callback function to each one. The number of parameters that the callback function accepts should match the number of arrays passed to the array_map()" ilk="function" signature="array array_map ( callback $callback , array $arr1 [, array $... ] )" returns="array"/>
      <scope name="array_merge_recursive" docs="array_merge_recursive() merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array." ilk="function" signature="array array_merge_recursive ( array $array1 [, array $... ] )" returns="array"/>
      <scope name="array_merge" docs="array_merge() merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array." ilk="function" signature="array array_merge ( array $array1 [, array $array2 [, array $... ]] )" returns="array"/>
      <scope name="array_multisort" docs="Returns TRUE on success or FALSE on failure." ilk="function" signature="bool array_multisort ( array $ar1 [, mixed $arg [, mixed $... [, array $... ]]] )" returns="bool"/>
      <scope name="array_pad" docs="array_pad() returns a copy of the input padded to size specified by pad_size with value pad_value. If pad_size is positive then the array is padded on the right, if it&amp;#039;s negative then on the left. If the absolute value of pad_size is less than or equal to the length of the input then no padding takes place. It is possible to add most 1048576 elements at a time." ilk="function" signature="array array_pad ( array $input , int $pad_size , mixed $pad_value )" returns="array"/>
      <scope name="array_pop" docs="array_pop() pops and returns the last value of the array, shortening the array by one element. If array is empty (or is not an array), NULL will be returned." ilk="function" signature="mixed array_pop ( array &amp;$array )" returns="mixed"/>
      <scope name="array_push" docs="array_push() treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as: &amp;lt;?php$array[]&amp;nbsp;=&amp;nbsp;$var;?&amp;gt; repeated for each var." ilk="function" signature="int array_push ( array &amp;$array , mixed $var [, mixed $... ] )" returns="int"/>
      <scope name="array_rand" docs="array_rand() is rather useful when you want to pick one or more random entries out of an array. It takes an input array and an optional argument num_req which specifies how many entries you want to pick - if not specified, it defaults to 1." ilk="function" signature="mixed array_rand ( array $input [, int $num_req ] )" returns="mixed"/>
      <scope name="array_reduce" docs="array_reduce() applies iteratively the function function to the elements of the array input, so as to reduce the array to a single value. If the optional initial is available, it will be used at the beginning of the process, or as a final result in case the array is empty. If the array is empty and initial is not passed, array_reduce() returns NULL." ilk="function" signature="mixed array_reduce ( array $input , callback $function [, int $initial ] )" returns="mixed"/>
      <scope name="array_reverse" docs="array_reverse() takes input array and returns a new array with the order of the elements reversed, preserving the keys if preserve_keys is TRUE." ilk="function" signature="array array_reverse ( array $array [, bool $preserve_keys ] )" returns="array"/>
      <scope name="array_search" docs="Searches haystack for needle and returns the key if it is found in the array, FALSE otherwise." ilk="function" signature="mixed array_search ( mixed $needle , array $haystack [, bool $strict ] )" returns="mixed"/>
      <scope name="array_shift" docs="array_shift() shifts the first value of the array off and returns it, shortening the array by one element and moving everything down. All numerical array keys will be modified to start counting from zero while literal keys won&amp;#039;t be touched. If array is empty (or is not an array), NULL will be returned." ilk="function" signature="mixed array_shift ( array &amp;$array )" returns="mixed"/>
      <scope name="array_slice" docs="array_slice() returns the sequence of elements from the array array as specified by the offset and length parameters." ilk="function" signature="array array_slice ( array $array , int $offset [, int $length [, bool $preserve_keys ]] )" returns="array"/>
      <scope name="array_splice" docs="array_splice() removes the elements designated by offset and length from the input array, and replaces them with the elements of the replacement array, if supplied. It returns an array containing the extracted elements. Note that numeric keys in input are not preserved." ilk="function" signature="array array_splice ( array &amp;$input , int $offset [, int $length [, array $replacement ]] )" returns="array"/>
      <scope name="array_sum" docs="array_sum() returns the sum of values in an array as an integer or float." ilk="function" signature="number array_sum ( array $array )" returns="number"/>
      <scope name="array_unique" docs="array_unique() takes input array and returns a new array without duplicate values." ilk="function" signature="array array_unique ( array $array )" returns="array"/>
      <scope name="array_unshift" docs="array_unshift() prepends passed elements to the front of the array. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won&amp;#039;t be touched." ilk="function" signature="int array_unshift ( array &amp;$array , mixed $var [, mixed $... ] )" returns="int"/>
      <scope name="array_values" docs="array_values() returns all the values from the input array and indexes numerically the array." ilk="function" signature="array array_values ( array $input )" returns="array"/>
      <scope name="array_walk" docs="array_walk() is not affected by the internal array pointer of array. array_walk() will walk through the entire array regardless of pointer position." ilk="function" signature="bool array_walk ( array &amp;$array , callback $funcname [, mixed $userdata ] )" returns="bool"/>
      <scope name="arsort" docs="This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant." ilk="function" signature="bool arsort ( array &amp;$array [, int $sort_flags ] )" returns="bool"/>
      <scope name="asin" docs="Returns the arc sine of arg in radians. asin() is the complementary function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin()&amp;#039;s range." ilk="function" signature="float asin ( float $arg )" returns="float"/>
      <scope name="asinh" docs="Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg." ilk="function" signature="float asinh ( float $arg )" returns="float"/>
      <scope name="asort" docs="This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant." ilk="function" signature="bool asort ( array &amp;$array [, int $sort_flags ] )" returns="bool"/>
      <scope name="assert_options" docs="Set the various assert() control options or just query their current settings." ilk="function" signature="mixed assert_options ( int $what [, mixed $value ] )" returns="mixed"/>
      <scope name="assert" docs="assert() will check the given assertion and take appropriate action if its result is FALSE." ilk="function" signature="bool assert ( mixed $assertion )" returns="bool"/>
      <scope name="atan" docs="Returns the arc tangent of arg in radians. atan() is the complementary function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan()&amp;#039;s range." ilk="function" signature="float atan ( float $arg )" returns="float"/>
      <scope name="atan2" docs="y Dividend parameter" ilk="function" signature="float atan2 ( float $y , float $x )" returns="float"/>
      <scope name="atanh" docs="Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg." ilk="function" signature="float atanh ( float $arg )" returns="float"/>
      <scope name="base_convert" docs="Returns a string containing number represented in base tobase. The base in which number is given is specified in frombase. Both frombase and tobase have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35." ilk="function" signature="string base_convert ( string $number , int $frombase , int $tobase )" returns="string"/>
      <scope name="base64_decode" docs="Decodes a base64 encoded data." ilk="function" signature="string base64_decode ( string $data [, bool $strict ] )" returns="string"/>
      <scope name="base64_encode" docs="Encodes the given data with base64." ilk="function" signature="string base64_encode ( string $data )" returns="string"/>
      <scope name="basename" docs="Given a string containing a path to a file, this function will return the base name of the file." ilk="function" signature="string basename ( string $path [, string $suffix ] )" returns="string"/>
      <scope name="bcadd" docs="Sums left_operand and right_operand." ilk="function" signature="string bcadd ( string $left_operand , string $right_operand [, int $scale ] )" returns="string"/>
      <scope name="bccomp" docs="Compares the left_operand to the right_operand and returns the result as an integer." ilk="function" signature="int bccomp ( string $left_operand , string $right_operand [, int $scale ] )" returns="int"/>
      <scope name="bcdiv" docs="Divides the left_operand by the right_operand." ilk="function" signature="string bcdiv ( string $left_operand , string $right_operand [, int $scale ] )" returns="string"/>
      <scope name="bcmod" docs="Get the modulus of the left_operand using modulus." ilk="function" signature="string bcmod ( string $left_operand , string $modulus )" returns="string"/>
      <scope name="bcmul" docs="Multiply the left_operand by the right_operand." ilk="function" signature="string bcmul ( string $left_operand , string $right_operand [, int $scale ] )" returns="string"/>
      <scope name="bcpow" docs="Raise left_operand to the power right_operand." ilk="function" signature="string bcpow ( string $left_operand , string $right_operand [, int $scale ] )" returns="string"/>
      <scope name="bcscale" docs="Sets the default scale parameter for all subsequent bc math functions that do not explicitly specify a scale parameter." ilk="function" signature="bool bcscale ( int $scale )" returns="bool"/>
      <scope name="bcsqrt" docs="Return the square root of the operand." ilk="function" signature="string bcsqrt ( string $operand [, int $scale ] )" returns="string"/>
      <scope name="bcsub" docs="Subtracts the right_operand from the left_operand." ilk="function" signature="string bcsub ( string $left_operand , string $right_operand [, int $scale ] )" returns="string"/>
      <scope name="bin2hex" docs="Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first." ilk="function" signature="string bin2hex ( string $str )" returns="string"/>
      <scope name="bind_textdomain_codeset" docs="With bind_textdomain_codeset(), you can set in which encoding will be messages from domain returned by gettext() and similar functions." ilk="function" signature="string bind_textdomain_codeset ( string $domain , string $codeset )" returns="string"/>
      <scope name="bindec" docs="Returns the decimal equivalent of the binary number represented by the binary_string argument." ilk="function" signature="number bindec ( string $binary_string )" returns="number"/>
      <scope name="bindtextdomain" docs="The bindtextdomain() function sets the path for a domain." ilk="function" signature="string bindtextdomain ( string $domain , string $directory )" returns="string"/>
      <scope name="bzclose" docs="Closes the given bzip2 file pointer." ilk="function" signature="int bzclose ( resource $bz )" returns="int"/>
      <scope name="bzcompress" docs="bzcompress() compresses the given string and returns it as bzip2 encoded data." ilk="function" signature="mixed bzcompress ( string $source [, int $blocksize [, int $workfactor ]] )" returns="mixed"/>
      <scope name="bzdecompress" docs="bzdecompress() decompresses the given string containing bzip2 encoded data." ilk="function" signature="mixed bzdecompress ( string $source [, int $small ] )" returns="mixed"/>
      <scope name="bzerrno" docs="Returns the error number of any bzip2 error returned by the given file pointer." ilk="function" signature="int bzerrno ( resource $bz )" returns="int"/>
      <scope name="bzerror" docs="Returns the error number and error string of any bzip2 error returned by the given file pointer." ilk="function" signature="array bzerror ( resource $bz )" returns="array"/>
      <scope name="bzerrstr" docs="Gets the error string of any bzip2 error returned by the given file pointer." ilk="function" signature="string bzerrstr ( resource $bz )" returns="string"/>
      <scope name="bzflush" docs="Forces a write of all buffered bzip2 data for the file pointer bz." ilk="function" signature="int bzflush ( resource $bz )" returns="int"/>
      <scope name="bzopen" docs="bzopen() opens a bzip2 (.bz2) file for reading or writing." ilk="function" signature="resource bzopen ( string $filename , string $mode )" returns="resource"/>
      <scope name="bzread" docs="bzread() reads from the given bzip2 file pointer." ilk="function" signature="string bzread ( resource $bz [, int $length ] )" returns="string"/>
      <scope name="bzwrite" docs="bzwrite() writes a string into the given bzip2 file stream." ilk="function" signature="int bzwrite ( resource $bz , string $data [, int $length ] )" returns="int"/>
      <scope name="cal_days_in_month" docs="This function will return the number of days in the month of year for the specified calendar." ilk="function" signature="int cal_days_in_month ( int $calendar , int $month , int $year )" returns="int"/>
      <scope name="cal_from_jd" docs="cal_from_jd() converts the Julian day given in jd into a date of the specified calendar. Supported calendar values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH." ilk="function" signature="array cal_from_jd ( int $jd , int $calendar )" returns="array"/>
      <scope name="cal_info" docs="cal_info() returns information on the specified calendar." ilk="function" signature="array cal_info ([ int $calendar ] )" returns="array"/>
      <scope name="cal_to_jd" docs="cal_to_jd() calculates the Julian day count for a date in the specified calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH." ilk="function" signature="int cal_to_jd ( int $calendar , int $month , int $day , int $year )" returns="int"/>
      <scope name="call_user_func_array" docs="Call a user defined function with the parameters in param_arr." ilk="function" signature="mixed call_user_func_array ( callback $function , array $param_arr )" returns="mixed"/>
      <scope name="call_user_func" docs="Call a user defined function given by the function parameter." ilk="function" signature="mixed call_user_func ( callback $function [, mixed $parameter [, mixed $... ]] )" returns="mixed"/>
      <scope name="call_user_method_array" docs="The call_user_method_array() function is deprecated as of PHP 4.1.0, use the call_user_func_array() variety with the array(&amp;amp;$obj, &amp;quot;method_name&amp;quot;) syntax instead." ilk="function" signature="mixed call_user_method_array ( string $method_name , object &amp;$obj , array $paramarr )" returns="mixed"/>
      <scope name="call_user_method" docs="The call_user_method() function is deprecated as of PHP 4.1.0, use the call_user_func() variety with the array(&amp;amp;$obj, &amp;quot;method_name&amp;quot;) syntax instead." ilk="function" signature="mixed call_user_method ( string $method_name , object &amp;$obj [, mixed $parameter [, mixed $... ]] )" returns="mixed"/>
      <scope name="ceil" docs="value The value to round" ilk="function" signature="float ceil ( float $value )" returns="float"/>
      <scope name="chdir" docs="Changes PHP&amp;#039;s current directory to directory." ilk="function" signature="bool chdir ( string $directory )" returns="bool"/>
      <scope name="checkdate" docs="Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined." ilk="function" signature="bool checkdate ( int $month , int $day , int $year )" returns="bool"/>
      <scope name="checkdnsrr" docs="Searches DNS for records of type type corresponding to host." ilk="function" signature="int checkdnsrr ( string $host [, string $type ] )" returns="int"/>
      <scope name="chgrp" docs="Attempts to change the group of the file filename to group." ilk="function" signature="bool chgrp ( string $filename , mixed $group )" returns="bool"/>
      <scope name="chmod" docs="Attempts to change the mode of the specified file to that given in mode." ilk="function" signature="bool chmod ( string $filename , int $mode )" returns="bool"/>
      <scope name="chop" docs="Undocumented function." ilk="function" signature="chop()"/>
      <scope name="chown" docs="Attempts to change the owner of the file filename to user user. Only the superuser may change the owner of a file." ilk="function" signature="bool chown ( string $filename , mixed $user )" returns="bool"/>
      <scope name="chr" docs="Returns a one-character string containing the character specified by ascii." ilk="function" signature="string chr ( int $ascii )" returns="string"/>
      <scope name="chroot" docs="Changes the root directory of the current process to directory." ilk="function" signature="bool chroot ( string $directory )" returns="bool"/>
      <scope name="chunk_split" docs="Can be used to split a string into smaller chunks which is useful for e.g. converting base64_encode() output to match RFC 2045 semantics. It inserts end every chunklen characters." ilk="function" signature="string chunk_split ( string $body [, int $chunklen [, string $end ]] )" returns="string"/>
      <scope name="class_exists" docs="This function checks whether or not the given class has been defined." ilk="function" signature="bool class_exists ( string $class_name [, bool $autoload ] )" returns="bool"/>
      <scope name="clearstatcache" docs="When you use stat(), lstat(), or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance. However, in certain cases, you may want to clear the cached information. For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script&amp;#039;s operation, you may elect to clear the status cache. In these cases, you can use the clearstatcache() function to clear the information that PHP caches about a file." ilk="function" signature="void clearstatcache ( void )" returns="void"/>
      <scope name="closedir" docs="Closes the directory stream indicated by dir_handle. The stream must have previously been opened by opendir()." ilk="function" signature="void closedir ( resource $dir_handle )" returns="void"/>
      <scope name="closelog" docs="closelog() closes the descriptor being used to write to the system logger. The use of closelog() is optional." ilk="function" signature="bool closelog ( void )" returns="bool"/>
      <scope name="com_addref" docs="Increases the components reference counter." ilk="function" signature="void com_addref ( void )" returns="void"/>
      <scope name="com_event_sink" docs="Instructs COM to sink events generated by comobject into the PHP object sinkobject. PHP will attempt to use the default dispinterface type specified by the typelibrary associated with comobject, but you may override this choice by setting sinkinterface to the name of the dispinterface that you want to use." ilk="function" signature="bool com_event_sink ( variant $comobject , object $sinkobject [, mixed $sinkinterface ] )" returns="bool"/>
      <scope name="com_get" docs="Returns the value of the property of the COM component referenced by com_object. Returns FALSE on error." ilk="function" signature="mixed com_get ( resource $com_object , string $property )" returns="mixed"/>
      <scope name="com_invoke" docs="com_invoke() invokes the method named function_name of the COM component referenced by com_object. com_invoke() returns FALSE on error, returns the function_name&amp;#039;s return value on success. All the extra parameters function_parameters are passed to the method function_name." ilk="function" signature="mixed com_invoke ( resource $com_object , string $function_name [, mixed $function_parameters ] )" returns="mixed"/>
      <scope name="com_isenum" docs="Checks to see if a COM object can be enumerated using the Next() method hack. Returns TRUE if it can, FALSE if it cannot. See COM class for more details on these methods." ilk="function" signature="bool com_isenum ( variant $com_module )" returns="bool"/>
      <scope name="com_load_typelib" docs="Loads a type-library and registers its constants in the engine, as though they were defined using define(). The case_insensitive behaves in the same way as the parameter with the same name in the define() function." ilk="function" signature="bool com_load_typelib ( string $typelib_name [, bool $case_insensitive ] )" returns="bool"/>
      <scope name="com_load" docs="Equivalent to using the new operator to create an instance of the COM class. You should do that instead of calling this function." ilk="function" signature="resource com_load ( string $module_name [, string $ server_name [, int $ codepage ]] )" returns="resource"/>
      <scope name="com_message_pump" docs="This function will sleep for up to timeoutms milliseconds, or until a message arrives in the queue. If a message or messages arrives before the timeout, they will be dispatched, and the function will return TRUE. If the timeout occurs and no messages were processed, the return value will be FALSE. If you do not specify a value for timeoutms, then 0 will be assumed. A 0 value means that no waiting will be performed; if there are messages pending they will be dispatched as before; if there are no messages pending, the function will return FALSE immediately without sleeping." ilk="function" signature="bool com_message_pump ([ int $timeoutms ] )" returns="bool"/>
      <scope name="com_print_typeinfo" docs="The purpose of this function is to help generate a skeleton class for use as an event sink. You may also use it to generate a dump of any COM object, provided that it supports enough of the introspection interfaces, and that you know the name of the interface you want to display." ilk="function" signature="bool com_print_typeinfo ( object $comobject [, string $dispinterface [, bool $wantsink ]] )" returns="bool"/>
      <scope name="com_propget" docs="Undocumented function." ilk="function" signature="com_propget()"/>
      <scope name="com_propput" docs="Undocumented function." ilk="function" signature="com_propput()"/>
      <scope name="com_propset" docs="Undocumented function." ilk="function" signature="com_propset()"/>
      <scope name="com_release" docs="Decreases the components reference counter." ilk="function" signature="void com_release ( void )" returns="void"/>
      <scope name="com_set" docs="Sets the value of the property of the COM component referenced by com_object. Returns the newly set value if succeeded, FALSE on error." ilk="function" signature="void com_set ( resource $com_object , string $property , mixed $value )" returns="void"/>
      <scope name="compact" docs="compact() takes a variable number of parameters. Each parameter can be either a string containing the name of the variable, or an array of variable names. The array can contain other arrays of variable names inside it; compact() handles it recursively." ilk="function" signature="array compact ( mixed $varname [, mixed $... ] )" returns="array"/>
      <scope name="connection_aborted" docs="Checks whether the client disconnected." ilk="function" signature="int connection_aborted ( void )" returns="int"/>
      <scope name="connection_status" docs="Gets the connection status bitfield." ilk="function" signature="int connection_status ( void )" returns="int"/>
      <scope name="constant" docs="name The constant name." ilk="function" signature="mixed constant ( string $name )" returns="mixed"/>
      <scope name="convert_cyr_string" docs="Converts from one Cyrillic character set to another." ilk="function" signature="string convert_cyr_string ( string $str , string $from , string $to )" returns="string"/>
      <scope name="copy" docs="This function will make a physical copy including the content if it exists and returns the new object or an error object." ilk="function" signature="hw_api_content copy ( array $parameter )" returns="hw_api_content"/>
      <scope name="cos" docs="cos() returns the cosine of the arg parameter. The arg parameter is in radians." ilk="function" signature="float cos ( float $arg )" returns="float"/>
      <scope name="cosh" docs="Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2." ilk="function" signature="float cosh ( float $arg )" returns="float"/>
      <scope name="count_chars" docs="Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways." ilk="function" signature="mixed count_chars ( string $string [, int $mode ] )" returns="mixed"/>
      <scope name="count" docs="Returns the number of attributes." ilk="function" signature="int count ( array $parameter )" returns="int"/>
      <scope name="cpdf_add_annotation" docs="Adds a note at the specified point." ilk="function" signature="bool cpdf_add_annotation ( int $pdf_document , float $llx , float $lly , float $urx , float $ury , string $title , string $content [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_add_outline" docs="Adds a bookmark with text text that points to the current page." ilk="function" signature="int cpdf_add_outline ( int $pdf_document , int $lastoutline , int $sublevel , int $open , int $pagenr , string $text )" returns="int"/>
      <scope name="cpdf_arc" docs="Draws an arc." ilk="function" signature="bool cpdf_arc ( int $pdf_document , float $x_coor , float $y_coor , float $radius , float $start , float $end [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_begin_text" docs="Starts a text section." ilk="function" signature="bool cpdf_begin_text ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_circle" docs="Draws a circle." ilk="function" signature="bool cpdf_circle ( int $pdf_document , float $x_coor , float $y_coor , float $radius [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_clip" docs="Clips all drawing to the current path." ilk="function" signature="bool cpdf_clip ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_close" docs="Closes the PDF document." ilk="function" signature="bool cpdf_close ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_closepath_fill_stroke" docs="Closes, fills the interior of the current path with the current fill color and draws current path." ilk="function" signature="bool cpdf_closepath_fill_stroke ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_closepath_stroke" docs="Closes the current path and draws a line along it." ilk="function" signature="bool cpdf_closepath_stroke ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_closepath" docs="Closes the current path." ilk="function" signature="bool cpdf_closepath ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_continue_text" docs="Outputs the string in text in the next line." ilk="function" signature="bool cpdf_continue_text ( int $pdf_document , string $text )" returns="bool"/>
      <scope name="cpdf_curveto" docs="Draws a Bezier curve from the current point to the point (x3, y3) using (x1, y1) and (x2, y2) as control points." ilk="function" signature="bool cpdf_curveto ( int $pdf_document , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_end_text" docs="Ends a text section which was started with cpdf_begin_text()." ilk="function" signature="bool cpdf_end_text ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_fill_stroke" docs="Fills the interior of the current path with the current fill color and draws current path." ilk="function" signature="bool cpdf_fill_stroke ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_fill" docs="Fills the interior of the current path with the current fill color." ilk="function" signature="bool cpdf_fill ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_finalize_page" docs="Ends the page which number is page_number." ilk="function" signature="bool cpdf_finalize_page ( int $pdf_document , int $page_number )" returns="bool"/>
      <scope name="cpdf_finalize" docs="Ends the PDF document." ilk="function" signature="bool cpdf_finalize ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_global_set_document_limits" docs="Sets several document limits. This function has to be called before cpdf_open() to take effect. It sets the limits for any document open afterwards." ilk="function" signature="bool cpdf_global_set_document_limits ( int $maxpages , int $maxfonts , int $maximages , int $maxannotations , int $maxobjects )" returns="bool"/>
      <scope name="cpdf_import_jpeg" docs="Opens a JPEG image." ilk="function" signature="bool cpdf_import_jpeg ( int $pdf_document , string $file_name , float $x_coor , float $y_coor , float $angle , float $width , float $height , float $x_scale , float $y_scale , int $gsave [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_lineto" docs="The cpdf_lineto() function draws a line from the current point to the specified point." ilk="function" signature="bool cpdf_lineto ( int $pdf_document , float $x_coor , float $y_coor [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_moveto" docs="Sets the current point to the given coordinates." ilk="function" signature="bool cpdf_moveto ( int $pdf_document , float $x_coor , float $y_coor [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_newpath" docs="Starts a new path on the document." ilk="function" signature="bool cpdf_newpath ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_open" docs="Opens a new PDF document." ilk="function" signature="int cpdf_open ( int $compression [, string $filename [, array $doc_limits ]] )" returns="int"/>
      <scope name="cpdf_output_buffer" docs="Outputs the pdf document to stdout." ilk="function" signature="bool cpdf_output_buffer ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_page_init" docs="Starts a new page." ilk="function" signature="bool cpdf_page_init ( int $pdf_document , int $page_number , int $orientation , float $height , float $width [, float $unit ] )" returns="bool"/>
      <scope name="cpdf_place_inline_image" docs="Places an image created with the PHP image functions on the page. The image can be scaled at the same time." ilk="function" signature="bool cpdf_place_inline_image ( int $pdf_document , int $image , float $x_coor , float $y_coor , float $angle , float $width , float $height , int $gsave [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_rect" docs="Draws a rectangle." ilk="function" signature="bool cpdf_rect ( int $pdf_document , float $x_coor , float $y_coor , float $width , float $height [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_restore" docs="Restores the environment saved with cpdf_save(). It works like the postscript command grestore. Very useful if you want to translate or rotate an object without effecting other objects." ilk="function" signature="bool cpdf_restore ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_rlineto" docs="The cpdf_rlineto() function draws a line from the current point to the given relative point." ilk="function" signature="bool cpdf_rlineto ( int $pdf_document , float $x_coor , float $y_coor [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_rmoveto" docs="Set the current point relative to the given coordinates." ilk="function" signature="bool cpdf_rmoveto ( int $pdf_document , float $x_coor , float $y_coor [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_rotate_text" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="bool cpdf_rotate_text ( int $pdfdoc , float $angle )" returns="bool"/>
      <scope name="cpdf_rotate" docs="Sets the rotation in degrees to angle." ilk="function" signature="bool cpdf_rotate ( int $pdf_document , float $angle )" returns="bool"/>
      <scope name="cpdf_save_to_file" docs="Outputs the PDF document into a file if it has been created in memory." ilk="function" signature="bool cpdf_save_to_file ( int $pdf_document , string $filename )" returns="bool"/>
      <scope name="cpdf_save" docs="Saves the current environment. It works like the postscript command gsave. Very useful if you want to translate or rotate an object without effecting other objects." ilk="function" signature="bool cpdf_save ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_scale" docs="Sets the scaling factor in both directions." ilk="function" signature="bool cpdf_scale ( int $pdf_document , float $x_scale , float $y_scale )" returns="bool"/>
      <scope name="cpdf_set_action_url" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="bool cpdf_set_action_url ( int $pdfdoc , float $xll , float $yll , float $xur , float $xur , string $url [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_set_char_spacing" docs="Sets the spacing between characters." ilk="function" signature="bool cpdf_set_char_spacing ( int $pdf_document , float $space )" returns="bool"/>
      <scope name="cpdf_set_creator" docs="Sets the creator of a PDF document." ilk="function" signature="bool cpdf_set_creator ( int $pdf_document , string $creator )" returns="bool"/>
      <scope name="cpdf_set_current_page" docs="Sets the page on which all operations are performed. One can switch between pages until a page is finished with cpdf_finalize_page()." ilk="function" signature="bool cpdf_set_current_page ( int $pdf_document , int $page_number )" returns="bool"/>
      <scope name="cpdf_set_font_directories" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="bool cpdf_set_font_directories ( int $pdfdoc , string $pfmdir , string $pfbdir )" returns="bool"/>
      <scope name="cpdf_set_font_map_file" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="bool cpdf_set_font_map_file ( int $pdfdoc , string $filename )" returns="bool"/>
      <scope name="cpdf_set_font" docs="Sets the current font face, font size and encoding." ilk="function" signature="bool cpdf_set_font ( int $pdf_document , string $font_name , float $size , string $encoding )" returns="bool"/>
      <scope name="cpdf_set_horiz_scaling" docs="Sets the horizontal scaling to scale percent." ilk="function" signature="bool cpdf_set_horiz_scaling ( int $pdf_document , float $scale )" returns="bool"/>
      <scope name="cpdf_set_keywords" docs="Sets the keywords of the PDF document." ilk="function" signature="bool cpdf_set_keywords ( int $pdf_document , string $keywords )" returns="bool"/>
      <scope name="cpdf_set_leading" docs="Sets the distance between text lines. This will be used if text is output by cpdf_continue_text()." ilk="function" signature="bool cpdf_set_leading ( int $pdf_document , float $distance )" returns="bool"/>
      <scope name="cpdf_set_page_animation" docs="Sets the transition between following pages." ilk="function" signature="bool cpdf_set_page_animation ( int $pdf_document , int $transition , float $duration , float $direction , int $orientation , int $inout )" returns="bool"/>
      <scope name="cpdf_set_subject" docs="Sets the subject of the PDF document." ilk="function" signature="bool cpdf_set_subject ( int $pdf_document , string $subject )" returns="bool"/>
      <scope name="cpdf_set_text_matrix" docs="Sets a matrix which describes a transformation applied on the current text font." ilk="function" signature="bool cpdf_set_text_matrix ( int $pdf_document , array $matrix )" returns="bool"/>
      <scope name="cpdf_set_text_pos" docs="Sets the position of text for the next cpdf_show() call." ilk="function" signature="bool cpdf_set_text_pos ( int $pdf_document , float $x_coor , float $y_coor [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_set_text_rendering" docs="Determines how the text is rendered." ilk="function" signature="bool cpdf_set_text_rendering ( int $pdf_document , int $rendermode )" returns="bool"/>
      <scope name="cpdf_set_text_rise" docs="Sets the text rising to value units." ilk="function" signature="bool cpdf_set_text_rise ( int $pdf_document , float $value )" returns="bool"/>
      <scope name="cpdf_set_title" docs="Sets the title of a PDF document." ilk="function" signature="bool cpdf_set_title ( int $pdf_document , string $title )" returns="bool"/>
      <scope name="cpdf_set_viewer_preferences" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="bool cpdf_set_viewer_preferences ( int $pdfdoc , array $preferences )" returns="bool"/>
      <scope name="cpdf_set_word_spacing" docs="Sets the spacing between words." ilk="function" signature="bool cpdf_set_word_spacing ( int $pdf_document , float $space )" returns="bool"/>
      <scope name="cpdf_setdash" docs="Sets the dash pattern to the given one. If both parameters are 0, a solid line is set." ilk="function" signature="bool cpdf_setdash ( int $pdf_document , float $white , float $black )" returns="bool"/>
      <scope name="cpdf_setflat" docs="Sets the flatness." ilk="function" signature="bool cpdf_setflat ( int $pdf_document , float $value )" returns="bool"/>
      <scope name="cpdf_setgray_fill" docs="Sets the current gray value to fill a path." ilk="function" signature="bool cpdf_setgray_fill ( int $pdf_document , float $value )" returns="bool"/>
      <scope name="cpdf_setgray_stroke" docs="Sets the current drawing color to the given gray value." ilk="function" signature="bool cpdf_setgray_stroke ( int $pdf_document , float $gray_value )" returns="bool"/>
      <scope name="cpdf_setgray" docs="Sets the current drawing and filling color to the given gray value." ilk="function" signature="bool cpdf_setgray ( int $pdf_document , float $gray_value )" returns="bool"/>
      <scope name="cpdf_setlinecap" docs="Sets the linecap parameter." ilk="function" signature="bool cpdf_setlinecap ( int $pdf_document , int $value )" returns="bool"/>
      <scope name="cpdf_setlinejoin" docs="Set the linejoin parameter." ilk="function" signature="bool cpdf_setlinejoin ( int $pdf_document , int $value )" returns="bool"/>
      <scope name="cpdf_setlinewidth" docs="Set the line width." ilk="function" signature="bool cpdf_setlinewidth ( int $pdf_document , float $width )" returns="bool"/>
      <scope name="cpdf_setmiterlimit" docs="Sets the miter limit." ilk="function" signature="bool cpdf_setmiterlimit ( int $pdf_document , float $value )" returns="bool"/>
      <scope name="cpdf_setrgbcolor_fill" docs="Sets the current rgb color value to fill a path." ilk="function" signature="bool cpdf_setrgbcolor_fill ( int $pdf_document , float $red_value , float $green_value , float $blue_value )" returns="bool"/>
      <scope name="cpdf_setrgbcolor_stroke" docs="Sets the current drawing color to the given rgb color value." ilk="function" signature="bool cpdf_setrgbcolor_stroke ( int $pdf_document , float $red_value , float $green_value , float $blue_value )" returns="bool"/>
      <scope name="cpdf_setrgbcolor" docs="Sets the current drawing and filling color to the given rgb color value." ilk="function" signature="bool cpdf_setrgbcolor ( int $pdf_document , float $red_value , float $green_value , float $blue_value )" returns="bool"/>
      <scope name="cpdf_show_xy" docs="Outputs the string text at the given position." ilk="function" signature="bool cpdf_show_xy ( int $pdf_document , string $text , float $x_coor , float $y_coor [, int $mode ] )" returns="bool"/>
      <scope name="cpdf_show" docs="Outputs a text at the current position." ilk="function" signature="bool cpdf_show ( int $pdf_document , string $text )" returns="bool"/>
      <scope name="cpdf_stringwidth" docs="Returns the width of the string in text." ilk="function" signature="float cpdf_stringwidth ( int $pdf_document , string $text )" returns="float"/>
      <scope name="cpdf_stroke" docs="Draws a line along current path." ilk="function" signature="bool cpdf_stroke ( int $pdf_document )" returns="bool"/>
      <scope name="cpdf_text" docs="Outputs the string text at the given position." ilk="function" signature="bool cpdf_text ( int $pdf_document , string $text [, float $x_coor ], float $y_coor [, int $mode [, float $orientation [, int $alignmode ]]] )" returns="bool"/>
      <scope name="cpdf_translate" docs="Sets the origin of coordinate system to the specified point." ilk="function" signature="bool cpdf_translate ( int $pdf_document , float $x_coor , float $y_coor )" returns="bool"/>
      <scope name="crack_check" docs="Performs an obscure check with the given password on the specified dictionary." ilk="function" signature="bool crack_check ( resource $dictionary , string $password )" returns="bool"/>
      <scope name="crack_closedict" docs="crack_closedict() closes the specified dictionary identifier." ilk="function" signature="bool crack_closedict ([ resource $dictionary ] )" returns="bool"/>
      <scope name="crack_getlastmessage" docs="crack_getlastmessage() returns the message from the last obscure check." ilk="function" signature="string crack_getlastmessage ( void )" returns="string"/>
      <scope name="crack_opendict" docs="crack_opendict() opens the specified CrackLib dictionary for use with crack_check()." ilk="function" signature="resource crack_opendict ( string $dictionary )" returns="resource"/>
      <scope name="crc32" docs="Generates the cyclic redundancy checksum polynomial of 32-bit lengths of the str. This is usually used to validate the integrity of data being transmitted." ilk="function" signature="int crc32 ( string $str )" returns="int"/>
      <scope name="create_function" docs="Creates an anonymous function from the parameters passed, and returns a unique name for it." ilk="function" signature="string create_function ( string $args , string $code )" returns="string"/>
      <scope name="crypt" docs="crypt() will return an encrypted string using the standard Unix DES-based encryption algorithm or alternative algorithms that may be available on the system." ilk="function" signature="string crypt ( string $str [, string $salt ] )" returns="string"/>
      <scope name="ctype_alnum" docs="Checks if all of the characters in the provided string, text, are alphanumeric. In the standard C locale letters are just [A-Za-z]." ilk="function" signature="bool ctype_alnum ( string $text )" returns="bool"/>
      <scope name="ctype_alpha" docs="Checks if all of the characters in the provided string, text, are alphabetic. In the standard C locale letters are just [A-Za-z] and ctype_alpha() is equivalent to (ctype_upper($text) " ilk="function" signature="bool ctype_alpha ( string $text )" returns="bool"/>
      <scope name="ctype_cntrl" docs="Checks if all of the characters in the provided string, text, are control characters. Control characters are e.g. line feed, tab, escape." ilk="function" signature="bool ctype_cntrl ( string $text )" returns="bool"/>
      <scope name="ctype_digit" docs="Checks if all of the characters in the provided string, text, are numerical." ilk="function" signature="bool ctype_digit ( string $text )" returns="bool"/>
      <scope name="ctype_graph" docs="Checks if all of the characters in the provided string, text, creates visible output." ilk="function" signature="bool ctype_graph ( string $text )" returns="bool"/>
      <scope name="ctype_lower" docs="Checks if all of the characters in the provided string, text, are lowercase letters." ilk="function" signature="bool ctype_lower ( string $text )" returns="bool"/>
      <scope name="ctype_print" docs="Checks if all of the characters in the provided string, text, are printable." ilk="function" signature="bool ctype_print ( string $text )" returns="bool"/>
      <scope name="ctype_punct" docs="Checks if all of the characters in the provided string, text, are punctuation character." ilk="function" signature="bool ctype_punct ( string $text )" returns="bool"/>
      <scope name="ctype_space" docs="Checks if all of the characters in the provided string, text, creates whitespace." ilk="function" signature="bool ctype_space ( string $text )" returns="bool"/>
      <scope name="ctype_upper" docs="Checks if all of the characters in the provided string, text, are uppercase characters." ilk="function" signature="bool ctype_upper ( string $text )" returns="bool"/>
      <scope name="ctype_xdigit" docs="Checks if all of the characters in the provided string, text, are hexadecimal &amp;#039;digits&amp;#039;." ilk="function" signature="bool ctype_xdigit ( string $text )" returns="bool"/>
      <scope name="curl_close" docs="Closes a cURL session and frees all resources. The cURL handle, ch, is also deleted." ilk="function" signature="void curl_close ( resource $ch )" returns="void"/>
      <scope name="curl_errno" docs="Returns the error number for the last cURL operation." ilk="function" signature="int curl_errno ( resource $ch )" returns="int"/>
      <scope name="curl_error" docs="Returns a clear text error message for the last cURL operation." ilk="function" signature="string curl_error ( resource $ch )" returns="string"/>
      <scope name="curl_exec" docs="Execute the given cURL session." ilk="function" signature="mixed curl_exec ( resource $ch )" returns="mixed"/>
      <scope name="curl_getinfo" docs="Gets information about the last transfer," ilk="function" signature="mixed curl_getinfo ( resource $ch [, int $opt ] )" returns="mixed"/>
      <scope name="curl_init" docs="Initializes a new session and return a cURL handle for use with the curl_setopt(), curl_exec(), and curl_close() functions." ilk="function" signature="resource curl_init ([ string $url ] )" returns="resource"/>
      <scope name="curl_setopt" docs="Sets an option on the given cURL session handle." ilk="function" signature="bool curl_setopt ( resource $ch , int $option , mixed $value )" returns="bool"/>
      <scope name="curl_version" docs="Returns information about the cURL version." ilk="function" signature="array curl_version ([ int $age ] )" returns="array"/>
      <scope name="current" docs="Every array has an internal pointer to its &amp;quot;current&amp;quot; element, which is initialized to the first element inserted into the array." ilk="function" signature="mixed current ( array &amp;$array )" returns="mixed"/>
      <scope name="cyrus_authenticate" docs="Undocumented function." ilk="function" signature="void cyrus_authenticate ( resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password ]]]]]]] )" returns="void"/>
      <scope name="cyrus_bind" docs="Undocumented function." ilk="function" signature="bool cyrus_bind ( resource $connection , array $callbacks )" returns="bool"/>
      <scope name="cyrus_close" docs="Undocumented function." ilk="function" signature="bool cyrus_close ( resource $connection )" returns="bool"/>
      <scope name="cyrus_connect" docs="Undocumented function." ilk="function" signature="resource cyrus_connect ([ string $host [, string $port [, int $flags ]]] )" returns="resource"/>
      <scope name="cyrus_query" docs="Undocumented function." ilk="function" signature="array cyrus_query ( resource $connection , string $query )" returns="array"/>
      <scope name="cyrus_unbind" docs="Undocumented function." ilk="function" signature="bool cyrus_unbind ( resource $connection , string $trigger_name )" returns="bool"/>
      <scope name="date" docs="Returns a string formatted according to the given format string using the given integer timestamp or the current time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time()." ilk="function" signature="string date ( string $format [, int $timestamp ] )" returns="string"/>
      <scope name="dba_close" docs="dba_close() closes the established database and frees all resources of the specified database handle." ilk="function" signature="void dba_close ( resource $handle )" returns="void"/>
      <scope name="dba_delete" docs="dba_delete() deletes the specified entry from the database." ilk="function" signature="bool dba_delete ( string $key , resource $handle )" returns="bool"/>
      <scope name="dba_exists" docs="dba_exists() checks whether the specified key exists in the database." ilk="function" signature="bool dba_exists ( string $key , resource $handle )" returns="bool"/>
      <scope name="dba_fetch" docs="dba_fetch() fetches the data specified by key from the database specified with handle." ilk="function" signature="string dba_fetch ( string $key , resource $handle )" returns="string"/>
      <scope name="dba_firstkey" docs="dba_firstkey() returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database." ilk="function" signature="string dba_firstkey ( resource $handle )" returns="string"/>
      <scope name="dba_handlers" docs="dba_handlers() list all the handlers supported by this extension." ilk="function" signature="array dba_handlers ([ bool $full_info ] )" returns="array"/>
      <scope name="dba_insert" docs="dba_insert() inserts the entry described with key and value into the database." ilk="function" signature="bool dba_insert ( string $key , string $value , resource $handle )" returns="bool"/>
      <scope name="dba_list" docs="dba_list() list all open database files." ilk="function" signature="array dba_list ( void )" returns="array"/>
      <scope name="dba_nextkey" docs="dba_nextkey() returns the next key of the database and advances the internal key pointer." ilk="function" signature="string dba_nextkey ( resource $handle )" returns="string"/>
      <scope name="dba_open" docs="dba_open() establishes a database instance for path with mode using handler." ilk="function" signature="resource dba_open ( string $path , string $mode [, string $handler [, mixed $... ]] )" returns="resource"/>
      <scope name="dba_optimize" docs="dba_optimize() optimizes the underlying database." ilk="function" signature="bool dba_optimize ( resource $handle )" returns="bool"/>
      <scope name="dba_popen" docs="dba_popen() establishes a persistent database instance for path with mode using handler." ilk="function" signature="resource dba_popen ( string $path , string $mode [, string $handler [, mixed $... ]] )" returns="resource"/>
      <scope name="dba_replace" docs="dba_replace() replaces or inserts the entry described with key and value into the database specified by handle." ilk="function" signature="bool dba_replace ( string $key , string $value , resource $handle )" returns="bool"/>
      <scope name="dba_sync" docs="dba_sync() synchronizes the database. This will probably trigger a physical write to the disk, if supported." ilk="function" signature="bool dba_sync ( resource $handle )" returns="bool"/>
      <scope name="dbase_add_record" docs="Adds the given data to the database." ilk="function" signature="bool dbase_add_record ( int $dbase_identifier , array $record )" returns="bool"/>
      <scope name="dbase_close" docs="Closes the given database link identifier." ilk="function" signature="bool dbase_close ( int $dbase_identifier )" returns="bool"/>
      <scope name="dbase_create" docs="dbase_create() creates a dBase database with the given definition." ilk="function" signature="int dbase_create ( string $filename , array $fields )" returns="int"/>
      <scope name="dbase_delete_record" docs="Marks the given record to be deleted from the database." ilk="function" signature="bool dbase_delete_record ( int $dbase_identifier , int $record_number )" returns="bool"/>
      <scope name="dbase_get_record_with_names" docs="Gets a record from a dBase database as an associative array." ilk="function" signature="array dbase_get_record_with_names ( int $dbase_identifier , int $record_number )" returns="array"/>
      <scope name="dbase_get_record" docs="Gets a record from a database as an indexed array." ilk="function" signature="array dbase_get_record ( int $dbase_identifier , int $record_number )" returns="array"/>
      <scope name="dbase_numfields" docs="Gets the number of fields (columns) in the specified database." ilk="function" signature="int dbase_numfields ( int $dbase_identifier )" returns="int"/>
      <scope name="dbase_numrecords" docs="Gets the number of records (rows) in the specified database." ilk="function" signature="int dbase_numrecords ( int $dbase_identifier )" returns="int"/>
      <scope name="dbase_open" docs="dbase_open() opens a dBase database with the given access mode." ilk="function" signature="int dbase_open ( string $filename , int $mode )" returns="int"/>
      <scope name="dbase_pack" docs="Packs the specified database by permanently deleting all records marked for deletion using dbase_delete_record()." ilk="function" signature="bool dbase_pack ( int $dbase_identifier )" returns="bool"/>
      <scope name="dbase_replace_record" docs="Replaces the given record in the database with the given data." ilk="function" signature="bool dbase_replace_record ( int $dbase_identifier , array $record , int $record_number )" returns="bool"/>
      <scope name="dblist" docs="Describes the GDBM version." ilk="function" signature="string dblist ( void )" returns="string"/>
      <scope name="dbmclose" docs="Unlocks and closes the specified database." ilk="function" signature="bool dbmclose ( resource $dbm_identifier )" returns="bool"/>
      <scope name="dbmdelete" docs="Deletes the value for key in the database." ilk="function" signature="bool dbmdelete ( resource $dbm_identifier , string $key )" returns="bool"/>
      <scope name="dbmexists" docs="Returns TRUE if there is a value associated with the key." ilk="function" signature="bool dbmexists ( resource $dbm_identifier , string $key )" returns="bool"/>
      <scope name="dbmfetch" docs="Gets the value associated with the given key." ilk="function" signature="string dbmfetch ( resource $dbm_identifier , string $key )" returns="string"/>
      <scope name="dbmfirstkey" docs="Returns the first key in the database. Note that no particular order is guaranteed since the database may be built using a hash-table, which doesn&amp;#039;t guarantee any ordering." ilk="function" signature="string dbmfirstkey ( resource $dbm_identifier )" returns="string"/>
      <scope name="dbminsert" docs="Adds the value to the database with the specified key." ilk="function" signature="int dbminsert ( resource $dbm_identifier , string $key , string $value )" returns="int"/>
      <scope name="dbmnextkey" docs="Returns the next key after key." ilk="function" signature="string dbmnextkey ( resource $dbm_identifier , string $key )" returns="string"/>
      <scope name="dbmopen" docs="Opens the specified DBM database in the given mode." ilk="function" signature="resource dbmopen ( string $filename , string $flags )" returns="resource"/>
      <scope name="dbmreplace" docs="Replaces the value for the specified key in the database." ilk="function" signature="int dbmreplace ( resource $dbm_identifier , string $key , string $value )" returns="int"/>
      <scope name="dbx_close" docs="link_identifier The DBX link object to close." ilk="function" signature="int dbx_close ( object $link_identifier )" returns="int"/>
      <scope name="dbx_compare" docs="dbx_compare() is a helper function for dbx_sort() to ease the make and use of the custom sorting function." ilk="function" signature="int dbx_compare ( array $row_a , array $row_b , string $column_key [, int $flags ] )" returns="int"/>
      <scope name="dbx_connect" docs="Opens a connection to a database." ilk="function" signature="object dbx_connect ( mixed $module , string $host , string $database , string $username , string $password [, int $persistent ] )" returns="object"/>
      <scope name="dbx_error" docs="dbx_error() returns the last error message." ilk="function" signature="string dbx_error ( object $link_identifier )" returns="string"/>
      <scope name="dbx_escape_string" docs="Escape the given string so that it can safely be used in an sql-statement." ilk="function" signature="string dbx_escape_string ( object $link_identifier , string $text )" returns="string"/>
      <scope name="dbx_query" docs="Sends a query and fetch all results." ilk="function" signature="mixed dbx_query ( object $link_identifier , string $sql_statement [, int $flags ] )" returns="mixed"/>
      <scope name="dbx_sort" docs="Sort a result from a dbx_query() call with a custom sort function." ilk="function" signature="bool dbx_sort ( object $result , string $user_compare_function )" returns="bool"/>
      <scope name="dcgettext" docs="This function allows you to override the current domain for a single message lookup." ilk="function" signature="string dcgettext ( string $domain , string $message , int $category )" returns="string"/>
      <scope name="dcngettext" docs="This function allows you to override the current domain for a single plural message lookup." ilk="function" signature="string dcngettext ( string $domain , string $msgid1 , string $msgid2 , int $n , int $category )" returns="string"/>
      <scope name="deaggregate" docs="Removes the methods and properties from classes that were aggregated to an object." ilk="function" signature="void deaggregate ( object $object [, string $class_name ] )" returns="void"/>
      <scope name="debug_backtrace" docs="debug_backtrace() generates a PHP backtrace." ilk="function" signature="array debug_backtrace ( void )" returns="array"/>
      <scope name="debug_zval_dump" docs="Dumps a string representation of an internal zend value to output." ilk="function" signature="void debug_zval_dump ( mixed $variable )" returns="void"/>
      <scope name="decbin" docs="Returns a string containing a binary representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to a string of 32 1&amp;#039;s." ilk="function" signature="string decbin ( int $number )" returns="string"/>
      <scope name="dechex" docs="Returns a string containing a hexadecimal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to &amp;quot;ffffffff&amp;quot;." ilk="function" signature="string dechex ( int $number )" returns="string"/>
      <scope name="decoct" docs="Returns a string containing an octal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to &amp;quot;37777777777&amp;quot;." ilk="function" signature="string decoct ( int $number )" returns="string"/>
      <scope name="define_syslog_variables" docs="Initializes all constants used in the syslog functions." ilk="function" signature="void define_syslog_variables ( void )" returns="void"/>
      <scope name="define" docs="Defines a named constant at runtime." ilk="function" signature="bool define ( string $name , mixed $value [, bool $case_insensitive ] )" returns="bool"/>
      <scope name="defined" docs="Checks whether the given constant exists and is defined." ilk="function" signature="bool defined ( string $name )" returns="bool"/>
      <scope name="deg2rad" docs="This function converts number from degrees to the radian equivalent." ilk="function" signature="float deg2rad ( float $number )" returns="float"/>
      <scope name="dgettext" docs="The dgettext() function allows you to override the current domain for a single message lookup." ilk="function" signature="string dgettext ( string $domain , string $message )" returns="string"/>
      <scope name="dio_close" docs="The function dio_close() closes the file descriptor fd." ilk="function" signature="void dio_close ( resource $fd )" returns="void"/>
      <scope name="dio_fcntl" docs="The dio_fcntl() function performs the operation specified by cmd on the file descriptor fd. Some commands require additional arguments args to be supplied." ilk="function" signature="mixed dio_fcntl ( resource $fd , int $cmd [, mixed $args ] )" returns="mixed"/>
      <scope name="dio_open" docs="dio_open() opens a file and returns a new file descriptor for it." ilk="function" signature="resource dio_open ( string $filename , int $flags [, int $mode ] )" returns="resource"/>
      <scope name="dio_read" docs="The function dio_read() reads and returns len bytes from file with descriptor fd." ilk="function" signature="string dio_read ( resource $fd [, int $len ] )" returns="string"/>
      <scope name="dio_seek" docs="The function dio_seek() is used to change the file position of the given file descriptor." ilk="function" signature="int dio_seek ( resource $fd , int $pos [, int $whence ] )" returns="int"/>
      <scope name="dio_stat" docs="dio_stat() returns information about the given file descriptor." ilk="function" signature="array dio_stat ( resource $fd )" returns="array"/>
      <scope name="dio_tcsetattr" docs="dio_tcsetattr() sets the terminal attributes and baud rate of the open fd." ilk="function" signature="bool dio_tcsetattr ( resource $fd , array $options )" returns="bool"/>
      <scope name="dio_truncate" docs="dio_truncate() truncates a file to at most offset bytes in size." ilk="function" signature="bool dio_truncate ( resource $fd , int $offset )" returns="bool"/>
      <scope name="dio_write" docs="dio_write() writes up to len bytes from data to file fd." ilk="function" signature="int dio_write ( resource $fd , string $data [, int $len ] )" returns="int"/>
      <scope name="dirname" docs="Given a string containing a path to a file, this function will return the name of the directory." ilk="function" signature="string dirname ( string $path )" returns="string"/>
      <scope name="disk_free_space" docs="Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition." ilk="function" signature="float disk_free_space ( string $directory )" returns="float"/>
      <scope name="disk_total_space" docs="Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition." ilk="function" signature="float disk_total_space ( string $directory )" returns="float"/>
      <scope name="diskfreespace" docs="Undocumented function." ilk="function" signature="diskfreespace()"/>
      <scope name="dl" docs="Loads the PHP extension given by the parameter library." ilk="function" signature="int dl ( string $library )" returns="int"/>
      <scope name="dngettext" docs="The dngettext() function allows you to override the current domain for a single plural message lookup." ilk="function" signature="string dngettext ( string $domain , string $msgid1 , string $msgid2 , int $n )" returns="string"/>
      <scope name="domxml_new_doc" docs="Creates a new Dom document from scratch and returns it." ilk="function" signature="DomDocument domxml_new_doc ( string $version )" returns="DomDocument"/>
      <scope name="domxml_open_file" docs="The function parses the XML document in the given file." ilk="function" signature="DomDocument domxml_open_file ( string $filename [, int $mode [, array &amp;$error ]] )" returns="DomDocument"/>
      <scope name="domxml_open_mem" docs="The function parses the XML document in the given string." ilk="function" signature="DomDocument domxml_open_mem ( string $str [, int $mode [, array &amp;$error ]] )" returns="DomDocument"/>
      <scope name="domxml_version" docs="Gets the version of the XML library currently used." ilk="function" signature="string domxml_version ( void )" returns="string"/>
      <scope name="domxml_xmltree" docs="The function parses the XML document in str and returns a tree PHP objects as the parsed document." ilk="function" signature="DomDocument domxml_xmltree ( string $str )" returns="DomDocument"/>
      <scope name="domxml_xslt_stylesheet_doc" docs="Creates a DomXsltStylesheet object from the given XSL document." ilk="function" signature="DomXsltStylesheet domxml_xslt_stylesheet_doc ( DomDocument $xsl_doc )" returns="DomXsltStylesheet"/>
      <scope name="domxml_xslt_stylesheet_file" docs="Creates a DomXsltStylesheet object from the given XSL file." ilk="function" signature="DomXsltStylesheet domxml_xslt_stylesheet_file ( string $xsl_file )" returns="DomXsltStylesheet"/>
      <scope name="domxml_xslt_stylesheet" docs="Creates a DomXsltStylesheet object from the given XSL buffer." ilk="function" signature="DomXsltStylesheet domxml_xslt_stylesheet ( string $xsl_buf )" returns="DomXsltStylesheet"/>
      <scope name="domxml_xslt_version" docs="Gets the XSLT library version." ilk="function" signature="int domxml_xslt_version ( void )" returns="int"/>
      <scope name="doubleval" docs="Undocumented function." ilk="function" signature="doubleval()"/>
      <scope name="each" docs="Returns the current key and value pair from the array array and advances the array cursor. This pair is returned in a four-element array, with the keys 0, 1, key, and value. Elements 0 and key contain the key name of the array element, and 1 and value contain the data." ilk="function" signature="array each ( array &amp;$array )" returns="array"/>
      <scope name="easter_date" docs="Returns the Unix timestamp corresponding to midnight on Easter of the given year." ilk="function" signature="int easter_date ([ int $year ] )" returns="int"/>
      <scope name="easter_days" docs="Returns the number of days after March 21 on which Easter falls for a given year. If no year is specified, the current year is assumed." ilk="function" signature="int easter_days ([ int $year [, int $method ]] )" returns="int"/>
      <scope name="end" docs="end() advances array&amp;#039;s internal pointer to the last element, and returns its value." ilk="function" signature="mixed end ( array &amp;$array )" returns="mixed"/>
      <scope name="ereg_replace" docs="pattern A POSIX extended regular expression." ilk="function" signature="string ereg_replace ( string $pattern , string $replacement , string $string )" returns="string"/>
      <scope name="ereg" docs="pattern Case sensitive regular expression." ilk="function" signature="int ereg ( string $pattern , string $string [, array &amp;$regs ] )" returns="int"/>
      <scope name="eregi_replace" docs="This function is identical to ereg_replace() except that this ignores case distinction when matching alphabetic characters." ilk="function" signature="string eregi_replace ( string $pattern , string $replacement , string $string )" returns="string"/>
      <scope name="eregi" docs="This function is identical to ereg() except that it ignores case distinction when matching alphabetic characters." ilk="function" signature="int eregi ( string $pattern , string $string [, array &amp;$regs ] )" returns="int"/>
      <scope name="error_log" docs="Sends an error message to the web server&amp;#039;s error log, a TCP port or to a file." ilk="function" signature="bool error_log ( string $message [, int $message_type [, string $destination [, string $extra_headers ]]] )" returns="bool"/>
      <scope name="error_reporting" docs="The error_reporting() function sets the error_reporting directive at runtime. PHP has many levels of errors, using this function sets that level for the duration (runtime) of your script." ilk="function" signature="int error_reporting ([ int $level ] )" returns="int"/>
      <scope name="escapeshellarg" docs="escapeshellarg() adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument. This function should be used to escape individual arguments to shell functions coming from user input. The shell functions include exec(), system() and the backtick operator." ilk="function" signature="string escapeshellarg ( string $arg )" returns="string"/>
      <scope name="escapeshellcmd" docs="escapeshellcmd() escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands. This function should be used to make sure that any data coming from user input is escaped before this data is passed to the exec() or system() functions, or to the backtick operator." ilk="function" signature="string escapeshellcmd ( string $command )" returns="string"/>
      <scope name="exec" docs="exec() executes the given command." ilk="function" signature="string exec ( string $command [, array &amp;$output [, int &amp;$return_var ]] )" returns="string"/>
      <scope name="exif_imagetype" docs="exif_imagetype() reads the first bytes of an image and checks its signature." ilk="function" signature="int exif_imagetype ( string $filename )" returns="int"/>
      <scope name="exif_read_data" docs="exif_read_data() reads the EXIF headers from a JPEG or TIFF image file. This way you can read meta data generated by digital cameras." ilk="function" signature="array exif_read_data ( string $filename [, string $sections [, bool $arrays [, bool $thumbnail ]]] )" returns="array"/>
      <scope name="exif_tagname" docs="index The image index" ilk="function" signature="string exif_tagname ( string $index )" returns="string"/>
      <scope name="exif_thumbnail" docs="exif_thumbnail() reads the embedded thumbnail of a TIFF or JPEG image." ilk="function" signature="string exif_thumbnail ( string $filename [, int &amp;$width [, int &amp;$height [, int &amp;$imagetype ]]] )" returns="string"/>
      <scope name="exp" docs="Returns e raised to the power of arg." ilk="function" signature="float exp ( float $arg )" returns="float"/>
      <scope name="explode" docs="Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter." ilk="function" signature="array explode ( string $delimiter , string $string [, int $limit ] )" returns="array"/>
      <scope name="expm1" docs="expm1() returns the equivalent to &amp;#039;exp(arg) - 1&amp;#039; computed in a way that is accurate even if the value of arg is near zero, a case where &amp;#039;exp (arg) - 1&amp;#039; would be inaccurate due to subtraction of two numbers that are nearly equal." ilk="function" signature="float expm1 ( float $arg )" returns="float"/>
      <scope name="extension_loaded" docs="Finds out whether the extension is loaded." ilk="function" signature="bool extension_loaded ( string $name )" returns="bool"/>
      <scope name="extract" docs="Rar::extract() extracts entry&amp;#039;s data to the dir. It will create new file in the specified dir with the name identical to the entry&amp;#039;s name." ilk="function" signature="bool extract ( string $dir [, string $filepath ] )" returns="bool"/>
      <scope name="ezmlm_hash" docs="addr The email address that&amp;#039;s being hashed." ilk="function" signature="int ezmlm_hash ( string $addr )" returns="int"/>
      <scope name="fbsql_affected_rows" docs="fbsql_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query associated with link_identifier." ilk="function" signature="int fbsql_affected_rows ([ resource $link_identifier ] )" returns="int"/>
      <scope name="fbsql_autocommit" docs="Returns the current autocommit status." ilk="function" signature="bool fbsql_autocommit ( resource $link_identifier [, bool $OnOff ] )" returns="bool"/>
      <scope name="fbsql_blob_size" docs="Returns the size of the given BLOB." ilk="function" signature="int fbsql_blob_size ( string $blob_handle [, resource $link_identifier ] )" returns="int"/>
      <scope name="fbsql_change_user" docs="fbsql_change_user() changes the logged in user of the specified connection. If the new user and password authorization fails, the current connected user stays active." ilk="function" signature="bool fbsql_change_user ( string $user , string $password [, string $database [, resource $link_identifier ]] )" returns="bool"/>
      <scope name="fbsql_clob_size" docs="Returns the size of the given CLOB." ilk="function" signature="int fbsql_clob_size ( string $clob_handle [, resource $link_identifier ] )" returns="int"/>
      <scope name="fbsql_close" docs="Closes the connection to the FrontBase server that&amp;#039;s associated with the specified link identifier." ilk="function" signature="bool fbsql_close ([ resource $link_identifier ] )" returns="bool"/>
      <scope name="fbsql_commit" docs="Ends the current transaction by writing all inserts, updates and deletes to the disk and unlocking all row and table locks held by the transaction. This command is only needed if autocommit is set to false." ilk="function" signature="bool fbsql_commit ([ resource $link_identifier ] )" returns="bool"/>
      <scope name="fbsql_connect" docs="fbsql_connect() establishes a connection to a FrontBase server." ilk="function" signature="resource fbsql_connect ([ string $hostname [, string $username [, string $password ]]] )" returns="resource"/>
      <scope name="fbsql_create_blob" docs="Creates a BLOB from the given data." ilk="function" signature="string fbsql_create_blob ( string $blob_data [, resource $link_identifier ] )" returns="string"/>
      <scope name="fbsql_create_clob" docs="Creates a CLOB from the given data." ilk="function" signature="string fbsql_create_clob ( string $clob_data [, resource $link_identifier ] )" returns="string"/>
      <scope name="fbsql_create_db" docs="Attempts to create a new database on the specied server." ilk="function" signature="bool fbsql_create_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )" returns="bool"/>
      <scope name="fbsql_data_seek" docs="Moves the internal row pointer of the FrontBase result associated with the specified result identifier to point to the specified row number." ilk="function" signature="bool fbsql_data_seek ( resource $result , int $row_number )" returns="bool"/>
      <scope name="fbsql_database_password" docs="Sets and retrieves the database password used by the connection. If a database is protected by a database password, the user must call this function before calling fbsql_select_db()." ilk="function" signature="string fbsql_database_password ( resource $link_identifier [, string $database_password ] )" returns="string"/>
      <scope name="fbsql_database" docs="Get or set the database name used with the connection." ilk="function" signature="string fbsql_database ( resource $link_identifier [, string $database ] )" returns="string"/>
      <scope name="fbsql_db_query" docs="Selects a database and executes a query on it." ilk="function" signature="resource fbsql_db_query ( string $database , string $query [, resource $link_identifier ] )" returns="resource"/>
      <scope name="fbsql_db_status" docs="Gets the current status of the specified database." ilk="function" signature="int fbsql_db_status ( string $database_name [, resource $link_identifier ] )" returns="int"/>
      <scope name="fbsql_drop_db" docs="fbsql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier." ilk="function" signature="bool fbsql_drop_db ( string $database_name [, resource $link_identifier ] )" returns="bool"/>
      <scope name="fbsql_errno" docs="Returns the numerical value of the error message from previous FrontBase operation." ilk="function" signature="int fbsql_errno ([ resource $link_identifier ] )" returns="int"/>
      <scope name="fbsql_error" docs="Returns the error message from previous FrontBase operation." ilk="function" signature="string fbsql_error ([ resource $link_identifier ] )" returns="string"/>
      <scope name="fbsql_fetch_array" docs="fbsql_fetch_array() is a combination of fbsql_fetch_row() and fbsql_fetch_assoc()." ilk="function" signature="array fbsql_fetch_array ( resource $result [, int $result_type ] )" returns="array"/>
      <scope name="fbsql_fetch_assoc" docs="Calling fbsql_fetch_assoc() is equivalent to calling fbsql_fetch_array() with FBSQL_ASSOC as second parameter. It only returns an associative array." ilk="function" signature="array fbsql_fetch_assoc ( resource $result )" returns="array"/>
      <scope name="fbsql_fetch_field" docs="Used in order to obtain information about fields in a certain query result." ilk="function" signature="object fbsql_fetch_field ( resource $result [, int $field_offset ] )" returns="object"/>
      <scope name="fbsql_fetch_lengths" docs="Stores the lengths of each result column in the last row returned by fbsql_fetch_row(), fbsql_fetch_array() and fbsql_fetch_object() in an array." ilk="function" signature="array fbsql_fetch_lengths ( resource $result )" returns="array"/>
      <scope name="fbsql_fetch_object" docs="fbsql_fetch_object() is similar to fbsql_fetch_array(), with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names)." ilk="function" signature="object fbsql_fetch_object ( resource $result )" returns="object"/>
      <scope name="fbsql_fetch_row" docs="fbsql_fetch_row() fetches one row of data from the result associated with the specified result identifier." ilk="function" signature="array fbsql_fetch_row ( resource $result )" returns="array"/>
      <scope name="fbsql_field_flags" docs="Gets the flags associated with the specified field in a result." ilk="function" signature="string fbsql_field_flags ( resource $result [, int $field_offset ] )" returns="string"/>
      <scope name="fbsql_field_len" docs="Returns the length of the specified field." ilk="function" signature="int fbsql_field_len ( resource $result [, int $field_offset ] )" returns="int"/>
      <scope name="fbsql_field_name" docs="Returns the name of the specified field index." ilk="function" signature="string fbsql_field_name ( resource $result [, int $field_index ] )" returns="string"/>
      <scope name="fbsql_field_seek" docs="Seeks to the specified field offset. If the next call to fbsql_fetch_field() doesn&amp;#039;t include a field offset, the field offset specified in fbsql_field_seek() will be returned." ilk="function" signature="bool fbsql_field_seek ( resource $result [, int $field_offset ] )" returns="bool"/>
      <scope name="fbsql_field_table" docs="Returns the name of the table that the specified field is in." ilk="function" signature="string fbsql_field_table ( resource $result [, int $field_offset ] )" returns="string"/>
      <scope name="fbsql_field_type" docs="fbsql_field_type() is similar to the fbsql_field_name() function, but the field type is returned instead." ilk="function" signature="string fbsql_field_type ( resource $result [, int $field_offset ] )" returns="string"/>
      <scope name="fbsql_free_result" docs="Frees all memory associated with the given result identifier." ilk="function" signature="bool fbsql_free_result ( resource $result )" returns="bool"/>
      <scope name="fbsql_get_autostart_info" docs="link_identifierA FrontBase link identifierreturned by fbsql_connect() or fbsql_pconnect()." ilk="function" signature="array fbsql_get_autostart_info ([ resource $link_identifier ] )" returns="array"/>
      <scope name="fbsql_hostname" docs="Gets or sets the host name used with a connection." ilk="function" signature="string fbsql_hostname ( resource $link_identifier [, string $host_name ] )" returns="string"/>
      <scope name="fbsql_insert_id" docs="Gets the id generated from the previous INSERT operation which created a DEFAULT UNIQUE value." ilk="function" signature="int fbsql_insert_id ([ resource $link_identifier ] )" returns="int"/>
      <scope name="fbsql_list_dbs" docs="Return a result pointer containing the databases available from the current fbsql daemon. Use the fbsql_tablename() to traverse this result pointer." ilk="function" signature="resource fbsql_list_dbs ([ resource $link_identifier ] )" returns="resource"/>
      <scope name="fbsql_list_fields" docs="Retrieves information about the given table." ilk="function" signature="resource fbsql_list_fields ( string $database_name , string $table_name [, resource $link_identifier ] )" returns="resource"/>
      <scope name="fbsql_list_tables" docs="Returns a result pointer describing the database." ilk="function" signature="resource fbsql_list_tables ( string $database [, resource $link_identifier ] )" returns="resource"/>
      <scope name="fbsql_next_result" docs="When sending more than one SQL statement to the server or executing a stored procedure with multiple results will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the words from the new result set." ilk="function" signature="bool fbsql_next_result ( resource $result )" returns="bool"/>
      <scope name="fbsql_num_fields" docs="Returns the number of fields in the given result set." ilk="function" signature="int fbsql_num_fields ( resource $result )" returns="int"/>
      <scope name="fbsql_num_rows" docs="Gets the number of rows in the given result set." ilk="function" signature="int fbsql_num_rows ( resource $result )" returns="int"/>
      <scope name="fbsql_password" docs="Get or set the user password used with a connection." ilk="function" signature="string fbsql_password ( resource $link_identifier [, string $password ] )" returns="string"/>
      <scope name="fbsql_pconnect" docs="Establishes a persistent connection to a FrontBase server." ilk="function" signature="resource fbsql_pconnect ([ string $hostname [, string $username [, string $password ]]] )" returns="resource"/>
      <scope name="fbsql_query" docs="Sends a query to the currently active database on the server." ilk="function" signature="resource fbsql_query ( string $query [, resource $link_identifier [, int $batch_size ]] )" returns="resource"/>
      <scope name="fbsql_read_blob" docs="Reads BLOB data from the database." ilk="function" signature="string fbsql_read_blob ( string $blob_handle [, resource $link_identifier ] )" returns="string"/>
      <scope name="fbsql_read_clob" docs="Reads CLOB data from the database." ilk="function" signature="string fbsql_read_clob ( string $clob_handle [, resource $link_identifier ] )" returns="string"/>
      <scope name="fbsql_result" docs="Returns the contents of one cell from a FrontBase result set." ilk="function" signature="mixed fbsql_result ( resource $result [, int $row [, mixed $field ]] )" returns="mixed"/>
      <scope name="fbsql_rollback" docs="Ends the current transaction by rolling back all statements issued since last commit." ilk="function" signature="bool fbsql_rollback ([ resource $link_identifier ] )" returns="bool"/>
      <scope name="fbsql_select_db" docs="Sets the current active database on the given link identifier." ilk="function" signature="bool fbsql_select_db ([ string $database_name [, resource $link_identifier ]] )" returns="bool"/>
      <scope name="fbsql_set_lob_mode" docs="Sets the mode for retrieving LOB data from the database." ilk="function" signature="bool fbsql_set_lob_mode ( resource $result , int $lob_mode )" returns="bool"/>
      <scope name="fbsql_set_transaction" docs="Sets the transaction locking and isolation." ilk="function" signature="void fbsql_set_transaction ( resource $link_identifier , int $locking , int $isolation )" returns="void"/>
      <scope name="fbsql_start_db" docs="Start a database on local or remote server." ilk="function" signature="bool fbsql_start_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )" returns="bool"/>
      <scope name="fbsql_stop_db" docs="Stops a database on local or remote server." ilk="function" signature="bool fbsql_stop_db ( string $database_name [, resource $link_identifier ] )" returns="bool"/>
      <scope name="fbsql_table_name" docs="fbsql_table_name() gets the name of the current table in the given result set." ilk="function" signature="string fbsql_table_name ( resource $result , int $index )" returns="string"/>
      <scope name="fbsql_tablename" docs="Undocumented function." ilk="function" signature="fbsql_tablename()"/>
      <scope name="fbsql_username" docs="Get or set the username used for the connection." ilk="function" signature="string fbsql_username ( resource $link_identifier [, string $username ] )" returns="string"/>
      <scope name="fbsql_warnings" docs="Enables or disables FrontBase warnings." ilk="function" signature="bool fbsql_warnings ([ bool $OnOff ] )" returns="bool"/>
      <scope name="fclose" docs="The file pointed to by handle is closed." ilk="function" signature="bool fclose ( resource $handle )" returns="bool"/>
      <scope name="fdf_add_doc_javascript" docs="Adds a script to the FDF, which Acrobat then adds to the doc-level scripts of a document, once the FDF is imported into it." ilk="function" signature="bool fdf_add_doc_javascript ( resource $fdf_document , string $script_name , string $script_code )" returns="bool"/>
      <scope name="fdf_add_template" docs="Undocumented function." ilk="function" signature="bool fdf_add_template ( resource $fdf_document , int $newpage , string $filename , string $template , int $rename )" returns="bool"/>
      <scope name="fdf_close" docs="Closes the FDF document." ilk="function" signature="void fdf_close ( resource $fdf_document )" returns="void"/>
      <scope name="fdf_create" docs="Creates a new FDF document." ilk="function" signature="resource fdf_create ( void )" returns="resource"/>
      <scope name="fdf_enum_values" docs="Undocumented function." ilk="function" signature="bool fdf_enum_values ( resource $fdf_document , callback $function [, mixed $userdata ] )" returns="bool"/>
      <scope name="fdf_errno" docs="Gets the error code set by the last FDF function call." ilk="function" signature="int fdf_errno ( void )" returns="int"/>
      <scope name="fdf_error" docs="Gets a textual description for the FDF error code given in error_code." ilk="function" signature="string fdf_error ([ int $error_code ] )" returns="string"/>
      <scope name="fdf_get_ap" docs="Gets the appearance of a field (i.e. the value of the /AP key) and stores it in a file." ilk="function" signature="bool fdf_get_ap ( resource $fdf_document , string $field , int $face , string $filename )" returns="bool"/>
      <scope name="fdf_get_attachment" docs="Extracts a file uploaded by means of the &amp;quot;file selection&amp;quot; field fieldname and stores it under savepath." ilk="function" signature="array fdf_get_attachment ( resource $fdf_document , string $fieldname , string $savepath )" returns="array"/>
      <scope name="fdf_get_encoding" docs="Gets the value of the /Encoding key." ilk="function" signature="string fdf_get_encoding ( resource $fdf_document )" returns="string"/>
      <scope name="fdf_get_file" docs="Gets the value of the /F key." ilk="function" signature="string fdf_get_file ( resource $fdf_document )" returns="string"/>
      <scope name="fdf_get_flags" docs="Undocumented function." ilk="function" signature="int fdf_get_flags ( resource $fdf_document , string $fieldname , int $whichflags )" returns="int"/>
      <scope name="fdf_get_opt" docs="Undocumented function." ilk="function" signature="mixed fdf_get_opt ( resource $fdf_document , string $fieldname [, int $element ] )" returns="mixed"/>
      <scope name="fdf_get_status" docs="Gets the value of the /STATUS key." ilk="function" signature="string fdf_get_status ( resource $fdf_document )" returns="string"/>
      <scope name="fdf_get_value" docs="Gets the value for the requested field." ilk="function" signature="mixed fdf_get_value ( resource $fdf_document , string $fieldname [, int $which ] )" returns="mixed"/>
      <scope name="fdf_get_version" docs="Return the FDF version for the given document, or the toolkit API version number if no parameter is given." ilk="function" signature="string fdf_get_version ([ resource $fdf_document ] )" returns="string"/>
      <scope name="fdf_header" docs="This is a convenience function to set appropriate HTTP headers for FDF output. It sets the Content-type: to application/vnd.fdf." ilk="function" signature="void fdf_header ( void )" returns="void"/>
      <scope name="fdf_next_field_name" docs="Gets the name of the field after the given field. This name can be used with several functions." ilk="function" signature="string fdf_next_field_name ( resource $fdf_document [, string $fieldname ] )" returns="string"/>
      <scope name="fdf_open_string" docs="Reads form data from a string." ilk="function" signature="resource fdf_open_string ( string $fdf_data )" returns="resource"/>
      <scope name="fdf_open" docs="Opens a file with form data." ilk="function" signature="resource fdf_open ( string $filename )" returns="resource"/>
      <scope name="fdf_remove_item" docs="Undocumented function." ilk="function" signature="bool fdf_remove_item ( resource $fdf_document , string $fieldname , int $item )" returns="bool"/>
      <scope name="fdf_save_string" docs="Returns the FDF document as a string." ilk="function" signature="string fdf_save_string ( resource $fdf_document )" returns="string"/>
      <scope name="fdf_save" docs="Saves a FDF document." ilk="function" signature="bool fdf_save ( resource $fdf_document [, string $filename ] )" returns="bool"/>
      <scope name="fdf_set_ap" docs="Sets the appearance of a field (i.e. the value of the /AP key)." ilk="function" signature="bool fdf_set_ap ( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number )" returns="bool"/>
      <scope name="fdf_set_encoding" docs="Sets the character encoding for the FDF document." ilk="function" signature="bool fdf_set_encoding ( resource $fdf_document , string $encoding )" returns="bool"/>
      <scope name="fdf_set_file" docs="Selects a different PDF document to display the form results in then the form it originated from." ilk="function" signature="bool fdf_set_file ( resource $fdf_document , string $url [, string $target_frame ] )" returns="bool"/>
      <scope name="fdf_set_flags" docs="Sets certain flags of the given field." ilk="function" signature="bool fdf_set_flags ( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags )" returns="bool"/>
      <scope name="fdf_set_javascript_action" docs="Sets a javascript action for the given field." ilk="function" signature="bool fdf_set_javascript_action ( resource $fdf_document , string $fieldname , int $trigger , string $script )" returns="bool"/>
      <scope name="fdf_set_on_import_javascript" docs="fdf_add_doc_javascript() fdf_set_javascript_action()" ilk="function" signature="bool fdf_set_on_import_javascript ( resource $fdf_document , string $script , bool $before_data_import )" returns="bool"/>
      <scope name="fdf_set_opt" docs="Sets options of the given field." ilk="function" signature="bool fdf_set_opt ( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2 )" returns="bool"/>
      <scope name="fdf_set_status" docs="Sets the value of the /STATUS key. When a client receives a FDF with a status set it will present the value in an alert box." ilk="function" signature="bool fdf_set_status ( resource $fdf_document , string $status )" returns="bool"/>
      <scope name="fdf_set_submit_form_action" docs="Sets a submit form action for the given field." ilk="function" signature="bool fdf_set_submit_form_action ( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags )" returns="bool"/>
      <scope name="fdf_set_target_frame" docs="Sets the target frame to display a result PDF defined with fdf_save_file() in." ilk="function" signature="bool fdf_set_target_frame ( resource $fdf_document , string $frame_name )" returns="bool"/>
      <scope name="fdf_set_value" docs="Sets the value for the given field." ilk="function" signature="bool fdf_set_value ( resource $fdf_document , string $fieldname , mixed $value [, int $isName ] )" returns="bool"/>
      <scope name="fdf_set_version" docs="Sets the FDF version for the given document." ilk="function" signature="bool fdf_set_version ( resource $fdf_document , string $version )" returns="bool"/>
      <scope name="feof" docs="Tests for end-of-file on a file pointer." ilk="function" signature="bool feof ( resource $handle )" returns="bool"/>
      <scope name="fflush" docs="This function forces a write of all buffered output to the resource pointed to by the file handle." ilk="function" signature="bool fflush ( resource $handle )" returns="bool"/>
      <scope name="fgetc" docs="Gets a character from the given file pointer." ilk="function" signature="string fgetc ( resource $handle )" returns="string"/>
      <scope name="fgetcsv" docs="Similar to fgets() except that fgetcsv() parses the line it reads for fields in CSV format and returns an array containing the fields read." ilk="function" signature="array fgetcsv ( resource $handle [, int $length [, string $delimiter [, string $enclosure [, string $escape ]]]] )" returns="array"/>
      <scope name="fgets" docs="Gets a line from file pointer." ilk="function" signature="string fgets ( resource $handle [, int $length ] )" returns="string"/>
      <scope name="fgetss" docs="Identical to fgets(), except that fgetss() attempts to strip any HTML and PHP tags from the text it reads." ilk="function" signature="string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )" returns="string"/>
      <scope name="file_exists" docs="Checks whether a file or directory exists." ilk="function" signature="bool file_exists ( string $filename )" returns="bool"/>
      <scope name="file_get_contents" docs="This function is similar to file(), except that file_get_contents() returns the file in a string, starting at the specified offset up to maxlen bytes. On failure, file_get_contents() will return FALSE." ilk="function" signature="string file_get_contents ( string $filename [, int $flags [, resource $context [, int $offset [, int $maxlen ]]]] )" returns="string"/>
      <scope name="file" docs="Reads an entire file into an array." ilk="function" signature="array file ( string $filename [, int $flags [, resource $context ]] )" returns="array"/>
      <scope name="fileatime" docs="filename Path to the file." ilk="function" signature="int fileatime ( string $filename )" returns="int"/>
      <scope name="filectime" docs="Gets the inode change time of a file." ilk="function" signature="int filectime ( string $filename )" returns="int"/>
      <scope name="filegroup" docs="Gets the file group. The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name." ilk="function" signature="int filegroup ( string $filename )" returns="int"/>
      <scope name="fileinode" docs="Gets the file inode." ilk="function" signature="int fileinode ( string $filename )" returns="int"/>
      <scope name="filemtime" docs="This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed." ilk="function" signature="int filemtime ( string $filename )" returns="int"/>
      <scope name="fileowner" docs="Gets the file owner." ilk="function" signature="int fileowner ( string $filename )" returns="int"/>
      <scope name="fileperms" docs="Gets permissions for the given file." ilk="function" signature="int fileperms ( string $filename )" returns="int"/>
      <scope name="filepro_fieldcount" docs="Returns the number of fields (columns) in the opened filePro database." ilk="function" signature="int filepro_fieldcount ( void )" returns="int"/>
      <scope name="filepro_fieldname" docs="Returns the name of the field corresponding to field_number." ilk="function" signature="string filepro_fieldname ( int $field_number )" returns="string"/>
      <scope name="filepro_fieldtype" docs="Returns the edit type of the field corresponding to field_number." ilk="function" signature="string filepro_fieldtype ( int $field_number )" returns="string"/>
      <scope name="filepro_fieldwidth" docs="Returns the width of the field corresponding to field_number." ilk="function" signature="int filepro_fieldwidth ( int $field_number )" returns="int"/>
      <scope name="filepro_retrieve" docs="Returns the data from the specified location in the database." ilk="function" signature="string filepro_retrieve ( int $row_number , int $field_number )" returns="string"/>
      <scope name="filepro_rowcount" docs="Returns the number of rows in the opened filePro database." ilk="function" signature="int filepro_rowcount ( void )" returns="int"/>
      <scope name="filepro" docs="This reads and verifies the map file, storing the field count and info." ilk="function" signature="bool filepro ( string $directory )" returns="bool"/>
      <scope name="filesize" docs="Gets the size for the given file." ilk="function" signature="int filesize ( string $filename )" returns="int"/>
      <scope name="filetype" docs="Returns the type of the given file." ilk="function" signature="string filetype ( string $filename )" returns="string"/>
      <scope name="floatval" docs="Gets the float value of var." ilk="function" signature="float floatval ( mixed $var )" returns="float"/>
      <scope name="flock" docs="flock() allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows)." ilk="function" signature="bool flock ( resource $handle , int $operation [, int &amp;$wouldblock ] )" returns="bool"/>
      <scope name="floor" docs="number The numeric value to round" ilk="function" signature="float floor ( float $value )" returns="float"/>
      <scope name="flush" docs="Object oriented style:" ilk="function" signature="mixed flush ([ bool $empty ] )" returns="mixed"/>
      <scope name="fmod" docs="Returns the floating point remainder of dividing the dividend (x) by the divisor (y). The reminder (r) is defined as: x = i * y + r, for some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y." ilk="function" signature="float fmod ( float $x , float $y )" returns="float"/>
      <scope name="fnmatch" docs="fnmatch() checks if the passed string would match the given shell wildcard pattern." ilk="function" signature="bool fnmatch ( string $pattern , string $string [, int $flags ] )" returns="bool"/>
      <scope name="fopen" docs="fopen() binds a named resource, specified by filename, to a stream." ilk="function" signature="resource fopen ( string $filename , string $mode [, bool $use_include_path [, resource $context ]] )" returns="resource"/>
      <scope name="fpassthru" docs="Reads to EOF on the given file pointer from the current position and writes the results to the output buffer." ilk="function" signature="int fpassthru ( resource $handle )" returns="int"/>
      <scope name="fputs" docs="Undocumented function." ilk="function" signature="fputs()"/>
      <scope name="fread" docs="fread() reads up to length bytes from the file pointer referenced by handle. Reading stops as soon as one of the following conditions is met: length bytes have been read EOF (end of file) is reached a packet becomes available (for network streams) 8192 bytes have been read (after opening userspace stream)" ilk="function" signature="string fread ( resource $handle , int $length )" returns="string"/>
      <scope name="frenchtojd" docs="Converts a date from the French Republican Calendar to a Julian Day Count." ilk="function" signature="int frenchtojd ( int $month , int $day , int $year )" returns="int"/>
      <scope name="fribidi_log2vis" docs="Converts a logical string to a visual one." ilk="function" signature="string fribidi_log2vis ( string $str , string $direction , int $charset )" returns="string"/>
      <scope name="fscanf" docs="The function fscanf() is similar to sscanf(), but it takes its input from a file associated with handle and interprets the input according to the specified format, which is described in the documentation for sprintf()." ilk="function" signature="mixed fscanf ( resource $handle , string $format [, mixed &amp;$... ] )" returns="mixed"/>
      <scope name="fseek" docs="Sets the file position indicator for the file referenced by handle. The new position, measured in bytes from the beginning of the file, is obtained by adding offset to the position specified by whence." ilk="function" signature="int fseek ( resource $handle , int $offset [, int $whence ] )" returns="int"/>
      <scope name="fsockopen" docs="Initiates a socket connection to the resource specified by hostname." ilk="function" signature="resource fsockopen ( string $hostname [, int $port [, int &amp;$errno [, string &amp;$errstr [, float $timeout ]]]] )" returns="resource"/>
      <scope name="fstat" docs="Gathers the statistics of the file opened by the file pointer handle. This function is similar to the stat() function except that it operates on an open file pointer instead of a filename." ilk="function" signature="array fstat ( resource $handle )" returns="array"/>
      <scope name="ftell" docs="Tells the file pointer read/write position." ilk="function" signature="int ftell ( resource $handle )" returns="int"/>
      <scope name="ftok" docs="The function converts the pathname of an existing accessible file and a project identifier into an integer for use with for example shmop_open() and other System V IPC keys." ilk="function" signature="int ftok ( string $pathname , string $proj )" returns="int"/>
      <scope name="ftp_cdup" docs="Changes to the parent directory." ilk="function" signature="bool ftp_cdup ( resource $ftp_stream )" returns="bool"/>
      <scope name="ftp_chdir" docs="Changes the current directory to the specified one." ilk="function" signature="bool ftp_chdir ( resource $ftp_stream , string $directory )" returns="bool"/>
      <scope name="ftp_close" docs="ftp_close() closes the given link identifier and releases the resource." ilk="function" signature="bool ftp_close ( resource $ftp_stream )" returns="bool"/>
      <scope name="ftp_connect" docs="ftp_connect() opens an FTP connection to the specified host." ilk="function" signature="resource ftp_connect ( string $host [, int $port [, int $timeout ]] )" returns="resource"/>
      <scope name="ftp_delete" docs="ftp_delete() deletes the file specified by path from the FTP server." ilk="function" signature="bool ftp_delete ( resource $ftp_stream , string $path )" returns="bool"/>
      <scope name="ftp_exec" docs="Sends a SITE EXEC command request to the FTP server." ilk="function" signature="bool ftp_exec ( resource $ftp_stream , string $command )" returns="bool"/>
      <scope name="ftp_fget" docs="ftp_fget() retrieves remote_file from the FTP server, and writes it to the given file pointer." ilk="function" signature="bool ftp_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos ] )" returns="bool"/>
      <scope name="ftp_fput" docs="ftp_fput() uploads the data from a file pointer to a remote file on the FTP server." ilk="function" signature="bool ftp_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos ] )" returns="bool"/>
      <scope name="ftp_get_option" docs="This function returns the value for the requested option from the specified FTP connection." ilk="function" signature="mixed ftp_get_option ( resource $ftp_stream , int $option )" returns="mixed"/>
      <scope name="ftp_get" docs="ftp_get() retrieves a remote file from the FTP server, and saves it into a local file." ilk="function" signature="bool ftp_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos ] )" returns="bool"/>
      <scope name="ftp_login" docs="Logs in to the given FTP stream." ilk="function" signature="bool ftp_login ( resource $ftp_stream , string $username , string $password )" returns="bool"/>
      <scope name="ftp_mdtm" docs="ftp_mdtm() gets the last modified time for a remote file." ilk="function" signature="int ftp_mdtm ( resource $ftp_stream , string $remote_file )" returns="int"/>
      <scope name="ftp_mkdir" docs="Creates the specified directory on the FTP server." ilk="function" signature="string ftp_mkdir ( resource $ftp_stream , string $directory )" returns="string"/>
      <scope name="ftp_nb_continue" docs="Continues retrieving/sending a file non-blocking." ilk="function" signature="int ftp_nb_continue ( resource $ftp_stream )" returns="int"/>
      <scope name="ftp_nb_fget" docs="ftp_nb_fget() retrieves a remote file from the FTP server." ilk="function" signature="int ftp_nb_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos ] )" returns="int"/>
      <scope name="ftp_nb_fput" docs="ftp_nb_fput() uploads the data from a file pointer to a remote file on the FTP server." ilk="function" signature="int ftp_nb_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos ] )" returns="int"/>
      <scope name="ftp_nb_get" docs="ftp_nb_get() retrieves a remote file from the FTP server, and saves it into a local file." ilk="function" signature="int ftp_nb_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos ] )" returns="int"/>
      <scope name="ftp_nb_put" docs="ftp_nb_put() stores a local file on the FTP server." ilk="function" signature="int ftp_nb_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos ] )" returns="int"/>
      <scope name="ftp_nlist" docs="ftp_stream The link identifier of the FTP connection." ilk="function" signature="array ftp_nlist ( resource $ftp_stream , string $directory )" returns="array"/>
      <scope name="ftp_pasv" docs="ftp_pasv() turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall." ilk="function" signature="bool ftp_pasv ( resource $ftp_stream , bool $pasv )" returns="bool"/>
      <scope name="ftp_put" docs="ftp_put() stores a local file on the FTP server." ilk="function" signature="bool ftp_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos ] )" returns="bool"/>
      <scope name="ftp_pwd" docs="" ilk="function" signature="string ftp_pwd ( resource $ftp_stream )" returns="string"/>
      <scope name="ftp_quit" docs="Undocumented function." ilk="function" signature="ftp_quit()"/>
      <scope name="ftp_rawlist" docs="ftp_rawlist() executes the FTP LIST command, and returns the result as an array." ilk="function" signature="array ftp_rawlist ( resource $ftp_stream , string $directory [, bool $recursive ] )" returns="array"/>
      <scope name="ftp_rename" docs="ftp_rename() renames a file or a directory on the FTP server." ilk="function" signature="bool ftp_rename ( resource $ftp_stream , string $oldname , string $newname )" returns="bool"/>
      <scope name="ftp_rmdir" docs="Removes the specified directory on the FTP server." ilk="function" signature="bool ftp_rmdir ( resource $ftp_stream , string $directory )" returns="bool"/>
      <scope name="ftp_set_option" docs="This function controls various runtime options for the specified FTP stream." ilk="function" signature="bool ftp_set_option ( resource $ftp_stream , int $option , mixed $value )" returns="bool"/>
      <scope name="ftp_site" docs="ftp_site() sends the given SITE command to the FTP server." ilk="function" signature="bool ftp_site ( resource $ftp_stream , string $command )" returns="bool"/>
      <scope name="ftp_size" docs="ftp_size() returns the size of the given file in bytes." ilk="function" signature="int ftp_size ( resource $ftp_stream , string $remote_file )" returns="int"/>
      <scope name="ftp_ssl_connect" docs="ftp_ssl_connect() opens a SSL-FTP connection to the specified host." ilk="function" signature="resource ftp_ssl_connect ( string $host [, int $port [, int $timeout ]] )" returns="resource"/>
      <scope name="ftp_systype" docs="Returns the system type identifier of the remote FTP server." ilk="function" signature="string ftp_systype ( resource $ftp_stream )" returns="string"/>
      <scope name="ftruncate" docs="Takes the filepointer, handle, and truncates the file to length, size." ilk="function" signature="bool ftruncate ( resource $handle , int $size )" returns="bool"/>
      <scope name="func_get_arg" docs="Gets the specified argument from a user-defined function&amp;#039;s argument list." ilk="function" signature="mixed func_get_arg ( int $arg_num )" returns="mixed"/>
      <scope name="func_get_args" docs="Gets an array of the function&amp;#039;s argument list." ilk="function" signature="array func_get_args ( void )" returns="array"/>
      <scope name="func_num_args" docs="Gets the number of arguments passed to the function." ilk="function" signature="int func_num_args ( void )" returns="int"/>
      <scope name="function_exists" docs="Checks the list of defined functions, both built-in (internal) and user-defined, for function_name." ilk="function" signature="bool function_exists ( string $function_name )" returns="bool"/>
      <scope name="fwrite" docs="handle A file system pointer resourcethat is typically created using fopen()." ilk="function" signature="int fwrite ( resource $handle , string $string [, int $length ] )" returns="int"/>
      <scope name="gd_info" docs="Gets information about the version and capabilities of the installed GD library." ilk="function" signature="array gd_info ( void )" returns="array"/>
      <scope name="get_browser" docs="Attempts to determine the capabilities of the user&amp;#039;s browser, by looking up the browser&amp;#039;s information in the browscap.ini file." ilk="function" signature="mixed get_browser ([ string $user_agent [, bool $return_array ]] )" returns="mixed"/>
      <scope name="get_cfg_var" docs="Gets the value of a PHP configuration option." ilk="function" signature="string get_cfg_var ( string $option )" returns="string"/>
      <scope name="get_class_methods" docs="Gets the class methods names." ilk="function" signature="array get_class_methods ( mixed $class_name )" returns="array"/>
      <scope name="get_class_vars" docs="Get the default properties of the given class." ilk="function" signature="array get_class_vars ( string $class_name )" returns="array"/>
      <scope name="get_class" docs="Gets the name of the class of the given object." ilk="function" signature="string get_class ([ object $object ] )" returns="string"/>
      <scope name="get_current_user" docs="Returns the username as a string." ilk="function" signature="string get_current_user ( void )" returns="string"/>
      <scope name="get_declared_classes" docs="Gets the declared classes." ilk="function" signature="array get_declared_classes ( void )" returns="array"/>
      <scope name="get_defined_constants" docs="Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the define() function." ilk="function" signature="array get_defined_constants ([ mixed $categorize ] )" returns="array"/>
      <scope name="get_defined_functions" docs="Gets an array of all defined functions." ilk="function" signature="array get_defined_functions ( void )" returns="array"/>
      <scope name="get_defined_vars" docs="This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars() is called." ilk="function" signature="array get_defined_vars ( void )" returns="array"/>
      <scope name="get_extension_funcs" docs="This function returns the names of all the functions defined in the module indicated by module_name." ilk="function" signature="array get_extension_funcs ( string $module_name )" returns="array"/>
      <scope name="get_html_translation_table" docs="get_html_translation_table() will return the translation table that is used internally for htmlspecialchars() and htmlentities()." ilk="function" signature="array get_html_translation_table ([ int $table [, int $quote_style ]] )" returns="array"/>
      <scope name="get_include_path" docs="Returns the path, as a string." ilk="function" signature="string get_include_path ( void )" returns="string"/>
      <scope name="get_included_files" docs="Gets the names of all files that have been included using include(), include_once(), require() or require_once()." ilk="function" signature="array get_included_files ( void )" returns="array"/>
      <scope name="get_loaded_extensions" docs="This function returns the names of all the modules compiled and loaded in the PHP interpreter." ilk="function" signature="array get_loaded_extensions ([ bool $zend_extensions=FALSE ] )" returns="array"/>
      <scope name="get_magic_quotes_gpc" docs="Returns the current configuration setting of magic_quotes_gpc" ilk="function" signature="int get_magic_quotes_gpc ( void )" returns="int"/>
      <scope name="get_magic_quotes_runtime" docs="Returns 0 if magic quotes runtime is off, 1 otherwise." ilk="function" signature="int get_magic_quotes_runtime ( void )" returns="int"/>
      <scope name="get_meta_tags" docs="Opens filename and parses it line by line for &amp;lt;meta&amp;gt; tags in the file. The parsing stops at &amp;lt;/head&amp;gt;." ilk="function" signature="array get_meta_tags ( string $filename [, bool $use_include_path ] )" returns="array"/>
      <scope name="get_object_vars" docs="Gets the properties of the given object." ilk="function" signature="array get_object_vars ( object $object )" returns="array"/>
      <scope name="get_parent_class" docs="Retrieves the parent class name for object or class." ilk="function" signature="string get_parent_class ([ mixed $object ] )" returns="string"/>
      <scope name="get_required_files" docs="Undocumented function." ilk="function" signature="get_required_files()"/>
      <scope name="get_resource_type" docs="This function gets the type of the given resource." ilk="function" signature="string get_resource_type ( resource $handle )" returns="string"/>
      <scope name="getallheaders" docs="Fetches all HTTP requests from the current request." ilk="function" signature="array getallheaders ( void )" returns="array"/>
      <scope name="getcwd" docs="Gets the current working directory." ilk="function" signature="string getcwd ( void )" returns="string"/>
      <scope name="getdate" docs="Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given." ilk="function" signature="array getdate ([ int $timestamp ] )" returns="array"/>
      <scope name="getenv" docs="Gets the value of an environment variable." ilk="function" signature="string getenv ( string $varname )" returns="string"/>
      <scope name="gethostbyaddr" docs="Returns the host name of the Internet host specified by ip_address." ilk="function" signature="string gethostbyaddr ( string $ip_address )" returns="string"/>
      <scope name="gethostbyname" docs="Returns the IP address of the Internet host specified by hostname." ilk="function" signature="string gethostbyname ( string $hostname )" returns="string"/>
      <scope name="gethostbynamel" docs="Returns a list of IP addresses to which the Internet host specified by hostname resolves." ilk="function" signature="array gethostbynamel ( string $hostname )" returns="array"/>
      <scope name="getimagesize" docs="The getimagesize() function will determine the size of any given image file and return the dimensions along with the file type and a height/width text string to be used inside a normal HTML IMG tag and the correspondant HTTP content type." ilk="function" signature="array getimagesize ( string $filename [, array &amp;$imageinfo ] )" returns="array"/>
      <scope name="getlastmod" docs="Gets the time of the last modification of the current page." ilk="function" signature="int getlastmod ( void )" returns="int"/>
      <scope name="getmxrr" docs="Searches DNS for MX records corresponding to hostname." ilk="function" signature="bool getmxrr ( string $hostname , array &amp;$mxhosts [, array &amp;$weight ] )" returns="bool"/>
      <scope name="getmygid" docs="Returns the group ID of the current script, or FALSE on error." ilk="function" signature="int getmygid ( void )" returns="int"/>
      <scope name="getmyinode" docs="Gets the inode of the current script." ilk="function" signature="int getmyinode ( void )" returns="int"/>
      <scope name="getmypid" docs="Gets the current PHP process ID." ilk="function" signature="int getmypid ( void )" returns="int"/>
      <scope name="getmyuid" docs="Returns the user ID of the current script, or FALSE on error." ilk="function" signature="int getmyuid ( void )" returns="int"/>
      <scope name="getopt" docs="Parses options passed to the script." ilk="function" signature="array getopt ( string $options [, array $longopts ] )" returns="array"/>
      <scope name="getprotobyname" docs="getprotobyname() returns the protocol number associated with the protocol name as per /etc/protocols." ilk="function" signature="int getprotobyname ( string $name )" returns="int"/>
      <scope name="getprotobynumber" docs="getprotobynumber() returns the protocol name associated with protocol number as per /etc/protocols." ilk="function" signature="string getprotobynumber ( int $number )" returns="string"/>
      <scope name="getrandmax" docs="The largest possible random value returned by rand()" ilk="function" signature="int getrandmax ( void )" returns="int"/>
      <scope name="getrusage" docs="This is an interface to getrusage(2). It gets data returned from the system call." ilk="function" signature="array getrusage ([ int $who ] )" returns="array"/>
      <scope name="getservbyname" docs="getservbyname() returns the Internet port which corresponds to service for the specified protocol as per /etc/services." ilk="function" signature="int getservbyname ( string $service , string $protocol )" returns="int"/>
      <scope name="getservbyport" docs="getservbyport() returns the Internet service associated with port for the specified protocol as per /etc/services." ilk="function" signature="string getservbyport ( int $port , string $protocol )" returns="string"/>
      <scope name="gettext" docs="Looks up a message in the current domain." ilk="function" signature="string gettext ( string $message )" returns="string"/>
      <scope name="gettimeofday" docs="This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call." ilk="function" signature="mixed gettimeofday ([ bool $return_float ] )" returns="mixed"/>
      <scope name="gettype" docs="Returns the type of the PHP variable var." ilk="function" signature="string gettype ( mixed $var )" returns="string"/>
      <scope name="glob" docs="The glob() function searches for all the pathnames matching pattern according to the rules used by the libc glob() function, which is similar to the rules used by common shells." ilk="function" signature="array glob ( string $pattern [, int $flags ] )" returns="array"/>
      <scope name="gmdate" docs="Identical to the date() function except that the time returned is Greenwich Mean Time (GMT)." ilk="function" signature="string gmdate ( string $format [, int $timestamp ] )" returns="string"/>
      <scope name="gmmktime" docs="Identical to mktime() except the passed parameters represents a GMT date. gmmktime() internally uses mktime() so only times valid in derived local time can be used." ilk="function" signature="int gmmktime ([ int $hour [, int $minute [, int $second [, int $month [, int $day [, int $year [, int $is_dst ]]]]]]] )" returns="int"/>
      <scope name="gmp_abs" docs="Get the absolute value of a number." ilk="function" signature="resource gmp_abs ( resource $a )" returns="resource"/>
      <scope name="gmp_add" docs="Add two numbers." ilk="function" signature="resource gmp_add ( resource $a , resource $b )" returns="resource"/>
      <scope name="gmp_and" docs="Calculates logical AND of two GMP numbers." ilk="function" signature="resource gmp_and ( resource $a , resource $b )" returns="resource"/>
      <scope name="gmp_clrbit" docs="Clears (sets to 0) bit index in a. The index starts at 0." ilk="function" signature="void gmp_clrbit ( resource &amp;$a , int $index )" returns="void"/>
      <scope name="gmp_cmp" docs="Compares two numbers." ilk="function" signature="int gmp_cmp ( resource $a , resource $b )" returns="int"/>
      <scope name="gmp_com" docs="Returns the one&amp;#039;s complement of a." ilk="function" signature="resource gmp_com ( resource $a )" returns="resource"/>
      <scope name="gmp_div_q" docs="Divides a by b and returns the integer result." ilk="function" signature="resource gmp_div_q ( resource $a , resource $b [, int $round ] )" returns="resource"/>
      <scope name="gmp_div_qr" docs="The function divides n by d." ilk="function" signature="array gmp_div_qr ( resource $n , resource $d [, int $round ] )" returns="array"/>
      <scope name="gmp_div_r" docs="Calculates remainder of the integer division of n by d. The remainder has the sign of the n argument, if not zero." ilk="function" signature="resource gmp_div_r ( resource $n , resource $d [, int $round ] )" returns="resource"/>
      <scope name="gmp_div" docs="Undocumented function." ilk="function" signature="gmp_div()"/>
      <scope name="gmp_divexact" docs="Divides n by d, using fast &amp;quot;exact division&amp;quot; algorithm. This function produces correct results only when it is known in advance that d divides n." ilk="function" signature="resource gmp_divexact ( resource $n , resource $d )" returns="resource"/>
      <scope name="gmp_fact" docs="Calculates factorial (a!) of a." ilk="function" signature="resource gmp_fact ( int $a )" returns="resource"/>
      <scope name="gmp_gcd" docs="Calculate greatest common divisor of a and b. The result is always positive even if either of, or both, input operands are negative." ilk="function" signature="resource gmp_gcd ( resource $a , resource $b )" returns="resource"/>
      <scope name="gmp_gcdext" docs="Calculates g, s, and t, such that a*s + b*t = g = gcd(a,b), where gcd is the greatest common divisor. Returns an array with respective elements g, s and t." ilk="function" signature="array gmp_gcdext ( resource $a , resource $b )" returns="array"/>
      <scope name="gmp_hamdist" docs="Returns the hamming distance between a and b. Both operands should be non-negative." ilk="function" signature="int gmp_hamdist ( resource $a , resource $b )" returns="int"/>
      <scope name="gmp_init" docs="Creates a GMP number from an integer or string." ilk="function" signature="resource gmp_init ( mixed $number [, int $base ] )" returns="resource"/>
      <scope name="gmp_intval" docs="This function allows to convert GMP number to integer." ilk="function" signature="int gmp_intval ( resource $gmpnumber )" returns="int"/>
      <scope name="gmp_invert" docs="Computes the inverse of a modulo b." ilk="function" signature="resource gmp_invert ( resource $a , resource $b )" returns="resource"/>
      <scope name="gmp_jacobi" docs="Computes &amp;raquo; Jacobi symbol of a and p. p should be odd and must be positive." ilk="function" signature="int gmp_jacobi ( resource $a , resource $p )" returns="int"/>
      <scope name="gmp_legendre" docs="Compute the &amp;raquo; Legendre symbol of a and p. p should be odd and must be positive." ilk="function" signature="int gmp_legendre ( resource $a , resource $p )" returns="int"/>
      <scope name="gmp_mod" docs="Calculates n modulo d. The result is always non-negative, the sign of d is ignored." ilk="function" signature="resource gmp_mod ( resource $n , resource $d )" returns="resource"/>
      <scope name="gmp_mul" docs="Multiplies a by b and returns the result." ilk="function" signature="resource gmp_mul ( resource $a , resource $b )" returns="resource"/>
      <scope name="gmp_neg" docs="Returns the negative value of a number." ilk="function" signature="resource gmp_neg ( resource $a )" returns="resource"/>
      <scope name="gmp_or" docs="Calculates logical inclusive OR of two GMP numbers." ilk="function" signature="resource gmp_or ( resource $a , resource $b )" returns="resource"/>
      <scope name="gmp_perfect_square" docs="Check if a number is a perfect square." ilk="function" signature="bool gmp_perfect_square ( resource $a )" returns="bool"/>
      <scope name="gmp_popcount" docs="Get the population count." ilk="function" signature="int gmp_popcount ( resource $a )" returns="int"/>
      <scope name="gmp_pow" docs="Raise base into power exp." ilk="function" signature="resource gmp_pow ( resource $base , int $exp )" returns="resource"/>
      <scope name="gmp_powm" docs="Calculate (base raised into power exp) modulo mod. If exp is negative, result is undefined." ilk="function" signature="resource gmp_powm ( resource $base , resource $exp , resource $mod )" returns="resource"/>
      <scope name="gmp_prob_prime" docs="The function uses Miller-Rabin&amp;#039;s probabilistic test to check if a number is a prime." ilk="function" signature="int gmp_prob_prime ( resource $a [, int $reps ] )" returns="int"/>
      <scope name="gmp_random" docs="Generate a random number. The number will be between zero and the number of bits per limb multiplied by limiter. If limiter is negative, negative numbers are generated." ilk="function" signature="resource gmp_random ( int $limiter )" returns="resource"/>
      <scope name="gmp_scan0" docs="Scans a, starting with bit start, towards more significant bits, until the first clear bit is found." ilk="function" signature="int gmp_scan0 ( resource $a , int $start )" returns="int"/>
      <scope name="gmp_scan1" docs="Scans a, starting with bit start, towards more significant bits, until the first set bit is found." ilk="function" signature="int gmp_scan1 ( resource $a , int $start )" returns="int"/>
      <scope name="gmp_setbit" docs="Sets bit index in a." ilk="function" signature="void gmp_setbit ( resource &amp;$a , int $index [, bool $set_clear ] )" returns="void"/>
      <scope name="gmp_sign" docs="Checks the sign of a number." ilk="function" signature="int gmp_sign ( resource $a )" returns="int"/>
      <scope name="gmp_sqrt" docs="Calculates square root of a." ilk="function" signature="resource gmp_sqrt ( resource $a )" returns="resource"/>
      <scope name="gmp_sqrtrem" docs="Calculate the square root of a number, with remainder." ilk="function" signature="array gmp_sqrtrem ( resource $a )" returns="array"/>
      <scope name="gmp_strval" docs="Convert GMP number to string representation in base base. The default base is 10." ilk="function" signature="string gmp_strval ( resource $gmpnumber [, int $base ] )" returns="string"/>
      <scope name="gmp_sub" docs="Subtracts b from a and returns the result." ilk="function" signature="resource gmp_sub ( resource $a , resource $b )" returns="resource"/>
      <scope name="gmp_xor" docs="Calculates logical exclusive OR (XOR) of two GMP numbers." ilk="function" signature="resource gmp_xor ( resource $a , resource $b )" returns="resource"/>
      <scope name="gmstrftime" docs="Behaves the same as strftime() except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints &amp;quot;Dec 31 1998 20:00:00&amp;quot;, while the second prints &amp;quot;Jan 01 1999 01:00:00&amp;quot;." ilk="function" signature="string gmstrftime ( string $format [, int $timestamp ] )" returns="string"/>
      <scope name="gregoriantojd" docs="Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D." ilk="function" signature="int gregoriantojd ( int $month , int $day , int $year )" returns="int"/>
      <scope name="gzclose" docs="Closes the given gz-file pointer." ilk="function" signature="bool gzclose ( resource $zp )" returns="bool"/>
      <scope name="gzcompress" docs="This function compress the given string using the ZLIB data format." ilk="function" signature="string gzcompress ( string $data [, int $level ] )" returns="string"/>
      <scope name="gzdeflate" docs="This function compress the given string using the DEFLATE data format." ilk="function" signature="string gzdeflate ( string $data [, int $level ] )" returns="string"/>
      <scope name="gzencode" docs="This function returns a compressed version of the input data compatible with the output of the gzip program." ilk="function" signature="string gzencode ( string $data [, int $level [, int $encoding_mode ]] )" returns="string"/>
      <scope name="gzeof" docs="Tests the given GZ file pointer for EOF (end-of-file)." ilk="function" signature="int gzeof ( resource $zp )" returns="int"/>
      <scope name="gzfile" docs="This function is identical to readgzfile(), except that it returns the file in an array." ilk="function" signature="array gzfile ( string $filename [, int $use_include_path ] )" returns="array"/>
      <scope name="gzgetc" docs="Returns a string containing a single (uncompressed) character read from the given gz-file pointer." ilk="function" signature="string gzgetc ( resource $zp )" returns="string"/>
      <scope name="gzgets" docs="Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a newline, or on EOF (whichever comes first)." ilk="function" signature="string gzgets ( resource $zp , int $length )" returns="string"/>
      <scope name="gzgetss" docs="Identical to gzgets(), except that gzgetss() attempts to strip any HTML and PHP tags from the text it reads." ilk="function" signature="string gzgetss ( resource $zp , int $length [, string $allowable_tags ] )" returns="string"/>
      <scope name="gzinflate" docs="This function inflate a deflated string." ilk="function" signature="string gzinflate ( string $data [, int $length ] )" returns="string"/>
      <scope name="gzopen" docs="Opens a gzip (.gz) file for reading or writing." ilk="function" signature="resource gzopen ( string $filename , string $mode [, int $use_include_path ] )" returns="resource"/>
      <scope name="gzpassthru" docs="Reads to EOF on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output." ilk="function" signature="int gzpassthru ( resource $zp )" returns="int"/>
      <scope name="gzputs" docs="Undocumented function." ilk="function" signature="gzputs()"/>
      <scope name="gzread" docs="gzread() reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first." ilk="function" signature="string gzread ( resource $zp , int $length )" returns="string"/>
      <scope name="gzrewind" docs="Sets the file position indicator of the given gz-file pointer to the beginning of the file stream." ilk="function" signature="bool gzrewind ( resource $zp )" returns="bool"/>
      <scope name="gzseek" docs="Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent to calling (in C) gzseek(zp, offset, SEEK_SET)." ilk="function" signature="int gzseek ( resource $zp , int $offset )" returns="int"/>
      <scope name="gztell" docs="Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream." ilk="function" signature="int gztell ( resource $zp )" returns="int"/>
      <scope name="gzuncompress" docs="This function uncompress a compressed string." ilk="function" signature="string gzuncompress ( string $data [, int $length ] )" returns="string"/>
      <scope name="gzwrite" docs="gzwrite() writes the contents of string to the given gz-file." ilk="function" signature="int gzwrite ( resource $zp , string $string [, int $length ] )" returns="int"/>
      <scope name="header" docs="header() is used to send a raw HTTP header. See the &amp;raquo; HTTP/1.1 specification for more information on HTTP headers." ilk="function" signature="void header ( string $string [, bool $replace [, int $http_response_code ]] )" returns="void"/>
      <scope name="headers_sent" docs="Checks if or where headers have been sent." ilk="function" signature="bool headers_sent ([ string &amp;$file [, int &amp;$line ]] )" returns="bool"/>
      <scope name="hebrev" docs="Converts logical Hebrew text to visual text." ilk="function" signature="string hebrev ( string $hebrew_text [, int $max_chars_per_line ] )" returns="string"/>
      <scope name="hebrevc" docs="This function is similar to hebrev() with the difference that it converts newlines (\n) to &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;." ilk="function" signature="string hebrevc ( string $hebrew_text [, int $max_chars_per_line ] )" returns="string"/>
      <scope name="hexdec" docs="Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number." ilk="function" signature="number hexdec ( string $hex_string )" returns="number"/>
      <scope name="highlight_file" docs="Prints out or returns a syntax highlighted version of the code contained in filename using the colors defined in the built-in syntax highlighter for PHP." ilk="function" signature="mixed highlight_file ( string $filename [, bool $return ] )" returns="mixed"/>
      <scope name="highlight_string" docs="str The PHP code to be highligthed. This should include the opening tag." ilk="function" signature="mixed highlight_string ( string $str [, bool $return ] )" returns="mixed"/>
      <scope name="html_entity_decode" docs="html_entity_decode() is the opposite of htmlentities() in that it converts all HTML entities to their applicable characters from string." ilk="function" signature="string html_entity_decode ( string $string [, int $quote_style [, string $charset ]] )" returns="string"/>
      <scope name="htmlentities" docs="This function is identical to htmlspecialchars() in all ways, except with htmlentities(), all characters which have HTML character entity equivalents are translated into these entities." ilk="function" signature="string htmlentities ( string $string [, int $quote_style [, string $charset [, bool $double_encode ]]] )" returns="string"/>
      <scope name="htmlspecialchars" docs="Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with some of these conversions made; the translations made are those most useful for everyday web programming. If you require all HTML character entities to be translated, use htmlentities() instead." ilk="function" signature="string htmlspecialchars ( string $string [, int $quote_style [, string $charset [, bool $double_encode ]]] )" returns="string"/>
      <scope name="hw_array2objrec" docs="Converts an object_array into an object record. Multiple attributes like &amp;#039;Title&amp;#039; in different languages are treated properly." ilk="function" signature="string hw_array2objrec ( array $object_array )" returns="string"/>
      <scope name="hw_changeobject" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="bool hw_changeobject ( int $link , int $objid , array $attributes )" returns="bool"/>
      <scope name="hw_children" docs="Returns an array of object ids. Each id belongs to a child of the collection with ID objectID. The array contains all children both documents and collections." ilk="function" signature="array hw_children ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_childrenobj" docs="Returns an array of object records. Each object record belongs to a child of the collection with ID objectID. The array contains all children both documents and collections." ilk="function" signature="array hw_childrenobj ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_close" docs="Returns FALSE if connection is not a valid connection index, otherwise TRUE. Closes down the connection to a Hyperwave server with the given connection index." ilk="function" signature="bool hw_close ( int $connection )" returns="bool"/>
      <scope name="hw_connect" docs="Opens a connection to a Hyperwave server and returns a connection index on success, or FALSE if the connection could not be made. Each of the arguments should be a quoted string, except for the port number. The username and password arguments are optional and can be left out. In such a case no identification with the server will be done. It is similar to identify as user anonymous. This function returns a connection index that is needed by other Hyperwave functions. You can have multiple connections open at once. Keep in mind, that the password is not encrypted." ilk="function" signature="int hw_connect ( string $host , int $port [, string $username ], string $password )" returns="int"/>
      <scope name="hw_connection_info" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="void hw_connection_info ( int $link )" returns="void"/>
      <scope name="hw_cp" docs="Copies the objects with object ids as specified in the second parameter to the collection with the id destination id." ilk="function" signature="int hw_cp ( int $connection , array $object_id_array , int $destination_id )" returns="int"/>
      <scope name="hw_deleteobject" docs="Deletes the object with the given object id in the second parameter. It will delete all instances of the object." ilk="function" signature="bool hw_deleteobject ( int $connection , int $object_to_delete )" returns="bool"/>
      <scope name="hw_docbyanchor" docs="Returns an th object id of the document to which anchorID belongs." ilk="function" signature="int hw_docbyanchor ( int $connection , int $anchorID )" returns="int"/>
      <scope name="hw_docbyanchorobj" docs="Returns an th object record of the document to which anchorID belongs." ilk="function" signature="string hw_docbyanchorobj ( int $connection , int $anchorID )" returns="string"/>
      <scope name="hw_document_attributes" docs="Returns the object record of the document." ilk="function" signature="string hw_document_attributes ( int $hw_document )" returns="string"/>
      <scope name="hw_document_bodytag" docs="Returns the BODY tag of the document. If the document is an HTML document the BODY tag should be printed before the document." ilk="function" signature="string hw_document_bodytag ( int $hw_document [, string $prefix ] )" returns="string"/>
      <scope name="hw_document_content" docs="Returns the content of the document. If the document is an HTML document the content is everything after the BODY tag. Information from the HEAD and BODY tag is in the stored in the object record." ilk="function" signature="string hw_document_content ( int $hw_document )" returns="string"/>
      <scope name="hw_document_setcontent" docs="Sets or replaces the content of the document. If the document is an HTML document the content is everything after the BODY tag. Information from the HEAD and BODY tag is in the stored in the object record. If you provide this information in the content of the document too, the Hyperwave server will change the object record accordingly when the document is inserted. Probably not a very good idea. If this functions fails the document will retain its old content." ilk="function" signature="bool hw_document_setcontent ( int $hw_document , string $content )" returns="bool"/>
      <scope name="hw_document_size" docs="Returns the size in bytes of the document." ilk="function" signature="int hw_document_size ( int $hw_document )" returns="int"/>
      <scope name="hw_dummy" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="string hw_dummy ( int $link , int $id , int $msgid )" returns="string"/>
      <scope name="hw_edittext" docs="Uploads the text document to the server. The object record of the document may not be modified while the document is edited. This function will only works for pure text documents. It will not open a special data connection and therefore blocks the control connection during the transfer." ilk="function" signature="bool hw_edittext ( int $connection , int $hw_document )" returns="bool"/>
      <scope name="hw_error" docs="Returns the last error number. If the return value is 0 no error has occurred. The error relates to the last command." ilk="function" signature="int hw_error ( int $connection )" returns="int"/>
      <scope name="hw_errormsg" docs="Returns a string containing the last error message or &amp;#039;No Error&amp;#039;. If FALSE is returned, this function failed. The message relates to the last command." ilk="function" signature="string hw_errormsg ( int $connection )" returns="string"/>
      <scope name="hw_free_document" docs="Frees the memory occupied by the Hyperwave document." ilk="function" signature="bool hw_free_document ( int $hw_document )" returns="bool"/>
      <scope name="hw_getanchors" docs="Returns an array of object ids with anchors of the document with object ID objectID." ilk="function" signature="array hw_getanchors ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_getanchorsobj" docs="Returns an array of object records with anchors of the document with object ID objectID." ilk="function" signature="array hw_getanchorsobj ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_getandlock" docs="Returns the object record for the object with ID objectID. It will also lock the object, so other users cannot access it until it is unlocked." ilk="function" signature="string hw_getandlock ( int $connection , int $objectID )" returns="string"/>
      <scope name="hw_getchildcoll" docs="Returns an array of object ids. Each object ID belongs to a child collection of the collection with ID objectID. The function will not return child documents." ilk="function" signature="array hw_getchildcoll ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_getchildcollobj" docs="Returns an array of object records. Each object records belongs to a child collection of the collection with ID objectID. The function will not return child documents." ilk="function" signature="array hw_getchildcollobj ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_getchilddoccoll" docs="Returns array of object ids for child documents of a collection." ilk="function" signature="array hw_getchilddoccoll ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_getchilddoccollobj" docs="Returns an array of object records for child documents of a collection." ilk="function" signature="array hw_getchilddoccollobj ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_getobject" docs="Returns the object record for the object with ID objectID if the second parameter is an integer. If the second parameter is an array of integer the function will return an array of object records. In such a case the last parameter is also evaluated which is a query string." ilk="function" signature="mixed hw_getobject ( int $connection , mixed $objectID [, string $query ] )" returns="mixed"/>
      <scope name="hw_getobjectbyquery" docs="Searches for objects on the whole server and returns an array of object ids. The maximum number of matches is limited to max_hits. If max_hits is set to -1 the maximum number of matches is unlimited." ilk="function" signature="array hw_getobjectbyquery ( int $connection , string $query , int $max_hits )" returns="array"/>
      <scope name="hw_getobjectbyquerycoll" docs="Searches for objects in collection with ID objectID and returns an array of object ids. The maximum number of matches is limited to max_hits. If max_hits is set to -1 the maximum number of matches is unlimited." ilk="function" signature="array hw_getobjectbyquerycoll ( int $connection , int $objectID , string $query , int $max_hits )" returns="array"/>
      <scope name="hw_getobjectbyquerycollobj" docs="Searches for objects in collection with ID objectID and returns an array of object records. The maximum number of matches is limited to max_hits. If max_hits is set to -1 the maximum number of matches is unlimited." ilk="function" signature="array hw_getobjectbyquerycollobj ( int $connection , int $objectID , string $query , int $max_hits )" returns="array"/>
      <scope name="hw_getobjectbyqueryobj" docs="Searches for objects on the whole server and returns an array of object records. The maximum number of matches is limited to max_hits. If max_hits is set to -1 the maximum number of matches is unlimited." ilk="function" signature="array hw_getobjectbyqueryobj ( int $connection , string $query , int $max_hits )" returns="array"/>
      <scope name="hw_getparents" docs="Returns an indexed array of object ids. Each object id belongs to a parent of the object with ID objectID." ilk="function" signature="array hw_getparents ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_getparentsobj" docs="Returns an indexed array of object records plus an associated array with statistical information about the object records. The associated array is the last entry of the returned array. Each object record belongs to a parent of the object with ID objectID." ilk="function" signature="array hw_getparentsobj ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_getrellink" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="string hw_getrellink ( int $link , int $rootid , int $sourceid , int $destid )" returns="string"/>
      <scope name="hw_getremote" docs="Returns a remote document. Remote documents in Hyperwave notation are documents retrieved from an external source. Common remote documents are for example external web pages or queries in a database. In order to be able to access external sources through remote documents Hyperwave introduces the HGI (Hyperwave Gateway Interface) which is similar to the CGI. Currently, only ftp, http-servers and some databases can be accessed by the HGI. Calling hw_getremote() returns the document from the external source. If you want to use this function you should be very familiar with HGIs. You should also consider to use PHP instead of Hyperwave to access external sources. Adding database support by a Hyperwave gateway should be more difficult than doing it in PHP." ilk="function" signature="int hw_getremote ( int $connection , int $objectID )" returns="int"/>
      <scope name="hw_getremotechildren" docs="Returns the children of a remote document. Children of a remote document are remote documents itself. This makes sense if a database query has to be narrowed and is explained in Hyperwave Programmers&amp;#039; Guide. If the number of children is 1 the function will return the document itself formatted by the Hyperwave Gateway Interface (HGI). If the number of children is greater than 1 it will return an array of object record with each maybe the input value for another call to hw_getremotechildren(). Those object records are virtual and do not exist in the Hyperwave server, therefore they do not have a valid object ID. How exactly such an object record looks like is up to the HGI. If you want to use this function you should be very familiar with HGIs. You should also consider to use PHP instead of Hyperwave to access external sources. Adding database support by a Hyperwave gateway should be more difficult than doing it in PHP." ilk="function" signature="mixed hw_getremotechildren ( int $connection , string $object_record )" returns="mixed"/>
      <scope name="hw_getsrcbydestobj" docs="Returns the object records of all anchors pointing to the object with ID objectID. The object can either be a document or an anchor of type destination." ilk="function" signature="array hw_getsrcbydestobj ( int $connection , int $objectID )" returns="array"/>
      <scope name="hw_gettext" docs="Returns the document with object ID objectID. If the document has anchors which can be inserted, they will be inserted already. The optional parameter rootID/prefix can be a string or an integer. If it is an integer it determines how links are inserted into the document. The default is 0 and will result in links that are constructed from the name of the link&amp;#039;s destination object. This is useful for web applications. If a link points to an object with name &amp;#039;internet_movie&amp;#039; the HTML link will be &amp;lt;A HREF=&amp;quot;/internet_movie&amp;quot;&amp;gt;. The actual location of the source and destination object in the document hierarchy is disregarded. You will have to set up your web browser, to rewrite that URL to for example &amp;#039;/my_script.php3/internet_movie&amp;#039;. &amp;#039;my_script.php3&amp;#039; will have to evaluate $PATH_INFO and retrieve the document. All links will have the prefix &amp;#039;/my_script.php3/&amp;#039;. If you do not want this you can set the optional parameter rootID/prefix to any prefix which is used instead. Is this case it has to be a string." ilk="function" signature="int hw_gettext ( int $connection , int $objectID [, mixed $ rootID/prefix ] )" returns="int"/>
      <scope name="hw_getusername" docs="Returns the username of the connection." ilk="function" signature="string hw_getusername ( int $connection )" returns="string"/>
      <scope name="hw_identify" docs="Identifies as user with username and password. Identification is only valid for the current session. I do not think this function will be needed very often. In most cases it will be easier to identify with the opening of the connection." ilk="function" signature="string hw_identify ( int $link , string $username , string $password )" returns="string"/>
      <scope name="hw_incollections" docs="Checks whether a set of objects (documents or collections) specified by the object_id_array is part of the collections listed in collection_id_array. When the fourth parameter return_collections is 0, the subset of object ids that is part of the collections (i.e., the documents or collections that are children of one or more collections of collection ids or their subcollections, recursively) is returned as an array. When the fourth parameter is 1, however, the set of collections that have one or more objects of this subset as children are returned as an array. This option allows a client to, e.g., highlight the part of the collection hierarchy that contains the matches of a previous query, in a graphical overview." ilk="function" signature="array hw_incollections ( int $connection , array $object_id_array , array $collection_id_array , int $return_collections )" returns="array"/>
      <scope name="hw_info" docs="Returns information about the current connection. The returned string has the following format: &amp;lt;Serverstring&amp;gt;, &amp;lt;Host&amp;gt;, &amp;lt;Port&amp;gt;, &amp;lt;Username&amp;gt;, &amp;lt;Port of Client&amp;gt;, &amp;lt;Byte swapping&amp;gt;" ilk="function" signature="string hw_info ( int $connection )" returns="string"/>
      <scope name="hw_inscoll" docs="Inserts a new collection with attributes as in object_array into collection with object ID objectID." ilk="function" signature="int hw_inscoll ( int $connection , int $objectID , array $object_array )" returns="int"/>
      <scope name="hw_insdoc" docs="Inserts a new document with attributes as in object_record into collection with object ID parentID. This function inserts either an object record only or an object record and a pure ascii text in text if text is given. If you want to insert a general document of any kind use hw_insertdocument() instead." ilk="function" signature="int hw_insdoc ( resource $connection , int $parentID , string $object_record [, string $text ] )" returns="int"/>
      <scope name="hw_insertanchors" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="bool hw_insertanchors ( int $hwdoc , array $anchorecs , array $dest [, array $urlprefixes ] )" returns="bool"/>
      <scope name="hw_insertdocument" docs="Uploads a document into the collection with parent_id. The document has to be created before with hw_new_document(). Make sure that the object record of the new document contains at least the attributes: Type, DocumentType, Title and Name. Possibly you also want to set the MimeType. The functions returns the object id of the new document or FALSE." ilk="function" signature="int hw_insertdocument ( int $connection , int $parent_id , int $hw_document )" returns="int"/>
      <scope name="hw_insertobject" docs="Inserts an object into the server. The object can be any valid hyperwave object. See the HG-CSP documentation for a detailed information on how the parameters have to be." ilk="function" signature="int hw_insertobject ( int $connection , string $object_rec , string $parameter )" returns="int"/>
      <scope name="hw_mapid" docs="Maps a global object id on any hyperwave server, even those you did not connect to with hw_connect(), onto a virtual object id. This virtual object id can then be used as any other object id, e.g. to obtain the object record with hw_getobject(). The server id is the first part of the global object id (GOid) of the object which is actually the IP number as an integer." ilk="function" signature="int hw_mapid ( int $connection , int $server_id , int $object_id )" returns="int"/>
      <scope name="hw_modifyobject" docs="This command allows to remove, add, or modify individual attributes of an object record. The object is specified by the Object ID object_to_change. The first array remove is a list of attributes to remove. The second array add is a list of attributes to add. In order to modify an attribute one will have to remove the old one and add a new one. hw_modifyobject() will always remove the attributes before it adds attributes unless the value of the attribute to remove is not a string or array." ilk="function" signature="bool hw_modifyobject ( int $connection , int $object_to_change , array $remove , array $add [, int $mode ] )" returns="bool"/>
      <scope name="hw_mv" docs="Moves the objects with object ids as specified in the second parameter from the collection with id source_id to the collection with the id destination_id. If the destination id is 0 the objects will be unlinked from the source collection. If this is the last instance of that object it will be deleted. If you want to delete all instances at once, use hw_deleteobject()." ilk="function" signature="int hw_mv ( int $connection , array $object_id_array , int $source_id , int $destination_id )" returns="int"/>
      <scope name="hw_new_document" docs="Returns a new Hyperwave document with document data set to document_data and object record set to object_record. The length of the document_data has to passed in document_sizeThis function does not insert the document into the Hyperwave server." ilk="function" signature="int hw_new_document ( string $object_record , string $document_data , int $document_size )" returns="int"/>
      <scope name="hw_objrec2array" docs="Converts an object_record into an object array. The keys of the resulting array are the attributes names. Multi-value attributes like &amp;#039;Title&amp;#039; in different languages form its own array. The keys of this array are the left part to the colon of the attribute value. This left part must be two characters long. Other multi-value attributes without a prefix form an indexed array. If the optional parameter is missing the attributes &amp;#039;Title&amp;#039;, &amp;#039;Description&amp;#039; and &amp;#039;Keyword&amp;#039; are treated as language attributes and the attributes &amp;#039;Group&amp;#039;, &amp;#039;Parent&amp;#039; and &amp;#039;HtmlAttr&amp;#039; as non-prefixed multi-value attributes. By passing an array holding the type for each attribute you can alter this behaviour. The array is an associated array with the attribute name as its key and the value being one of HW_ATTR_LANG or HW_ATTR_NONE." ilk="function" signature="array hw_objrec2array ( string $object_record [, array $ format ] )" returns="array"/>
      <scope name="hw_output_document" docs="Prints the document without the BODY tag." ilk="function" signature="bool hw_output_document ( int $hw_document )" returns="bool"/>
      <scope name="hw_pconnect" docs="Returns a connection index on success, or FALSE if the connection could not be made. Opens a persistent connection to a Hyperwave server. Each of the arguments should be a quoted string, except for the port number. The username and password arguments are optional and can be left out. In such a case no identification with the server will be done. It is similar to identify as user anonymous. This function returns a connection index that is needed by other Hyperwave functions. You can have multiple persistent connections open at once." ilk="function" signature="int hw_pconnect ( string $host , int $port [, string $username ], string $password )" returns="int"/>
      <scope name="hw_pipedocument" docs="Returns the Hyperwave document with object ID objectID. If the document has anchors which can be inserted, they will have been inserted already. The document will be transferred via a special data connection which does not block the control connection." ilk="function" signature="int hw_pipedocument ( int $connection , int $objectID [, array $url_prefixes ] )" returns="int"/>
      <scope name="hw_root" docs="Returns the object ID of the hyperroot collection. Currently this is always 0. The child collection of the hyperroot is the root collection of the connected server." ilk="function" signature="int hw_root ( $ )" returns="int"/>
      <scope name="hw_setlinkroot" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="int hw_setlinkroot ( int $link , int $rootid )" returns="int"/>
      <scope name="hw_stat" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="string hw_stat ( int $link )" returns="string"/>
      <scope name="hw_unlock" docs="Unlocks a document, so other users regain access." ilk="function" signature="bool hw_unlock ( int $connection , int $objectID )" returns="bool"/>
      <scope name="hw_who" docs="Returns an array of users currently logged into the Hyperwave server. Each entry in this array is an array itself containing the elements id, name, system, onSinceDate, onSinceTime, TotalTime and self. &amp;#039;self&amp;#039; is 1 if this entry belongs to the user who initiated the request." ilk="function" signature="array hw_who ( int $connection )" returns="array"/>
      <scope name="key" docs="key() returns the index element of the current array position." ilk="function" signature="mixed key ( array &amp;$array )" returns="mixed"/>
      <scope name="link" docs="link() creates a hard link." ilk="function" signature="bool link ( string $target , string $link )" returns="bool"/>
      <scope name="hypot" docs="hypot() returns the length of the hypotenuse of a right-angle triangle with sides of length x and y, or the distance of the point (x, y) from the origin. This is equivalent to sqrt(x*x + y*y)." ilk="function" signature="float hypot ( float $x , float $y )" returns="float"/>
      <scope name="ibase_add_user" docs="PHP 4 uses server, dba_user_name and dba_user_password instead of service_handle parameter." ilk="function" signature="bool ibase_add_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )" returns="bool"/>
      <scope name="ibase_blob_add" docs="ibase_blob_add() adds data into a blob created with ibase_blob_create()." ilk="function" signature="void ibase_blob_add ( resource $blob_handle , string $data )" returns="void"/>
      <scope name="ibase_blob_cancel" docs="This function will discard a BLOB if it has not yet been closed by ibase_blob_close()." ilk="function" signature="bool ibase_blob_cancel ( resource $blob_handle )" returns="bool"/>
      <scope name="ibase_blob_close" docs="This function closes a BLOB that has either been opened for reading by ibase_open_blob() or has been opened for writing by ibase_create_blob()." ilk="function" signature="mixed ibase_blob_close ( resource $blob_handle )" returns="mixed"/>
      <scope name="ibase_blob_create" docs="ibase_blob_create() creates a new BLOB for filling with data." ilk="function" signature="resource ibase_blob_create ([ resource $link_identifier ] )" returns="resource"/>
      <scope name="ibase_blob_echo" docs="This function opens a BLOB for reading and sends its contents directly to standard output (the browser, in most cases)." ilk="function" signature="bool ibase_blob_echo ([ resource $link_identifier ], string $blob_id )" returns="bool"/>
      <scope name="ibase_blob_get" docs="This function returns at most len bytes from a BLOB that has been opened for reading by ibase_blob_open()." ilk="function" signature="string ibase_blob_get ( resource $blob_handle , int $len )" returns="string"/>
      <scope name="ibase_blob_import" docs="This function creates a BLOB, reads an entire file into it, closes it and returns the assigned BLOB id." ilk="function" signature="string ibase_blob_import ( resource $link_identifier , resource $file_handle )" returns="string"/>
      <scope name="ibase_blob_info" docs="Returns the BLOB length and other useful information." ilk="function" signature="array ibase_blob_info ( resource $link_identifier , string $blob_id )" returns="array"/>
      <scope name="ibase_blob_open" docs="Opens an existing BLOB for reading." ilk="function" signature="resource ibase_blob_open ( resource $link_identifier , string $blob_id )" returns="resource"/>
      <scope name="ibase_close" docs="Closes the link to an InterBase database that&amp;#039;s associated with a connection id returned from ibase_connect(). Default transaction on link is committed, other transactions are rolled back." ilk="function" signature="bool ibase_close ([ resource $connection_id ] )" returns="bool"/>
      <scope name="ibase_commit" docs="Commits a transaction." ilk="function" signature="bool ibase_commit ([ resource $link_or_trans_identifier ] )" returns="bool"/>
      <scope name="ibase_connect" docs="Establishes a connection to an InterBase server." ilk="function" signature="resource ibase_connect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )" returns="resource"/>
      <scope name="ibase_delete_user" docs="PHP 4 uses server, dba_user_name and dba_user_password instead of service_handle parameter." ilk="function" signature="bool ibase_delete_user ( resource $service_handle , string $user_name )" returns="bool"/>
      <scope name="ibase_errmsg" docs="Returns the error message as a string, or FALSE if no error occured." ilk="function" signature="string ibase_errmsg ( void )" returns="string"/>
      <scope name="ibase_execute" docs="Execute a query prepared by ibase_prepare()." ilk="function" signature="resource ibase_execute ( resource $query [, mixed $bind_arg [, mixed $... ]] )" returns="resource"/>
      <scope name="ibase_fetch_assoc" docs="Fetch a result row from a query as an associative array." ilk="function" signature="array ibase_fetch_assoc ( resource $result [, int $fetch_flag ] )" returns="array"/>
      <scope name="ibase_fetch_object" docs="Fetches a row as a pseudo-object from a given result identifier." ilk="function" signature="object ibase_fetch_object ( resource $result_id [, int $fetch_flag ] )" returns="object"/>
      <scope name="ibase_fetch_row" docs="ibase_fetch_row() fetches one row of data from the given result set." ilk="function" signature="array ibase_fetch_row ( resource $result_identifier [, int $fetch_flag ] )" returns="array"/>
      <scope name="ibase_field_info" docs="Returns an array with information about a field after a select query has been run." ilk="function" signature="array ibase_field_info ( resource $result , int $field_number )" returns="array"/>
      <scope name="ibase_free_query" docs="Frees a prepared query." ilk="function" signature="bool ibase_free_query ( resource $query )" returns="bool"/>
      <scope name="ibase_free_result" docs="Frees a result set." ilk="function" signature="bool ibase_free_result ( resource $result_identifier )" returns="bool"/>
      <scope name="ibase_modify_user" docs="PHP 4 uses server, dba_user_name and dba_user_password instead of service_handle parameter." ilk="function" signature="bool ibase_modify_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )" returns="bool"/>
      <scope name="ibase_num_fields" docs="Get the number of fields in a result set." ilk="function" signature="int ibase_num_fields ( resource $result_id )" returns="int"/>
      <scope name="ibase_pconnect" docs="Opens a persistent connection to an InterBase database." ilk="function" signature="resource ibase_pconnect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )" returns="resource"/>
      <scope name="ibase_prepare" docs="query An InterBase query." ilk="function" signature="resource ibase_prepare ( string $query )" returns="resource"/>
      <scope name="ibase_query" docs="link_identifier An InterBase link identifier. If omitted, the last opened link is assumed." ilk="function" signature="resource ibase_query ([ resource $link_identifier ], string $query [, int $bind_args ] )" returns="resource"/>
      <scope name="ibase_rollback" docs="Rolls back a transaction." ilk="function" signature="bool ibase_rollback ([ resource $link_or_trans_identifier ] )" returns="bool"/>
      <scope name="ibase_timefmt" docs="Sets the format of timestamp, date or time type columns returned from queries." ilk="function" signature="bool ibase_timefmt ( string $format [, int $columntype ] )" returns="bool"/>
      <scope name="ibase_trans" docs="Begins a transaction." ilk="function" signature="resource ibase_trans ([ int $trans_args [, resource $link_identifier ]] )" returns="resource"/>
      <scope name="iconv_get_encoding" docs="Retrieve internal configuration variables of iconv extension." ilk="function" signature="mixed iconv_get_encoding ([ string $type ] )" returns="mixed"/>
      <scope name="iconv_set_encoding" docs="Changes the value of the internal configuration variable specified by type to charset." ilk="function" signature="bool iconv_set_encoding ( string $type , string $charset )" returns="bool"/>
      <scope name="iconv" docs="Performs a character set conversion on the string str from in_charset to out_charset." ilk="function" signature="string iconv ( string $in_charset , string $out_charset , string $str )" returns="string"/>
      <scope name="ignore_user_abort" docs="Sets whether a client disconnect should cause a script to be aborted." ilk="function" signature="int ignore_user_abort ([ bool $setting ] )" returns="int"/>
      <scope name="image_type_to_mime_type" docs="The image_type_to_mime_type() function will determine the Mime-Type for an IMAGETYPE constant." ilk="function" signature="string image_type_to_mime_type ( int $imagetype )" returns="string"/>
      <scope name="image2wbmp" docs="image2wbmp() outputs or save a WBMP version of the given image." ilk="function" signature="bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )" returns="bool"/>
      <scope name="imagealphablending" docs="imagealphablending() allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as imagesetpixel() determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images." ilk="function" signature="bool imagealphablending ( resource $image , bool $blendmode )" returns="bool"/>
      <scope name="imageantialias" docs="Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images." ilk="function" signature="bool imageantialias ( resource $image , bool $on )" returns="bool"/>
      <scope name="imagearc" docs="imagearc() draws an arc of circle centered at the given coordinates." ilk="function" signature="bool imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color )" returns="bool"/>
      <scope name="imagechar" docs="imagechar() draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color." ilk="function" signature="bool imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color )" returns="bool"/>
      <scope name="imagecharup" docs="Draws the character c vertically at the specified coordinate on the given image." ilk="function" signature="bool imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color )" returns="bool"/>
      <scope name="imagecolorallocate" docs="Returns a color identifier representing the color composed of the given RGB components." ilk="function" signature="int imagecolorallocate ( resource $image , int $red , int $green , int $blue )" returns="int"/>
      <scope name="imagecolorallocatealpha" docs="imagecolorallocatealpha() behaves identically to imagecolorallocate() with the addition of the transparency parameter alpha." ilk="function" signature="int imagecolorallocatealpha ( resource $image , int $red , int $green , int $blue , int $alpha )" returns="int"/>
      <scope name="imagecolorat" docs="Returns the index of the color of the pixel at the specified location in the image specified by image." ilk="function" signature="int imagecolorat ( resource $image , int $x , int $y )" returns="int"/>
      <scope name="imagecolorclosest" docs="Returns the index of the color in the palette of the image which is &amp;quot;closest&amp;quot; to the specified RGB value." ilk="function" signature="int imagecolorclosest ( resource $image , int $red , int $green , int $blue )" returns="int"/>
      <scope name="imagecolorclosestalpha" docs="Returns the index of the color in the palette of the image which is &amp;quot;closest&amp;quot; to the specified RGB value and alpha level." ilk="function" signature="int imagecolorclosestalpha ( resource $image , int $red , int $green , int $blue , int $alpha )" returns="int"/>
      <scope name="imagecolorclosesthwb" docs="imageAn image resource, returned by one of the image creation functions, such as imagecreatetruecolor()." ilk="function" signature="int imagecolorclosesthwb ( resource $image , int $red , int $green , int $blue )" returns="int"/>
      <scope name="imagecolordeallocate" docs="De-allocates a color previously allocated with imagecolorallocate() or imagecolorallocatealpha()." ilk="function" signature="bool imagecolordeallocate ( resource $image , int $color )" returns="bool"/>
      <scope name="imagecolorexact" docs="Returns the index of the specified color in the palette of the image." ilk="function" signature="int imagecolorexact ( resource $image , int $red , int $green , int $blue )" returns="int"/>
      <scope name="imagecolorexactalpha" docs="Returns the index of the specified color+alpha in the palette of the image." ilk="function" signature="int imagecolorexactalpha ( resource $image , int $red , int $green , int $blue , int $alpha )" returns="int"/>
      <scope name="imagecolormatch" docs="image1 A truecolor image link resource" ilk="function" signature="bool imagecolormatch ( resource $image1 , resource $image2 )" returns="bool"/>
      <scope name="imagecolorresolve" docs="This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative." ilk="function" signature="int imagecolorresolve ( resource $image , int $red , int $green , int $blue )" returns="int"/>
      <scope name="imagecolorresolvealpha" docs="This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative." ilk="function" signature="int imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha )" returns="int"/>
      <scope name="imagecolorset" docs="This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill." ilk="function" signature="void imagecolorset ( resource $image , int $index , int $red , int $green , int $blue )" returns="void"/>
      <scope name="imagecolorsforindex" docs="Gets the color for a specified index." ilk="function" signature="array imagecolorsforindex ( resource $image , int $index )" returns="array"/>
      <scope name="imagecolorstotal" docs="Returns the number of colors in an image palette." ilk="function" signature="int imagecolorstotal ( resource $image )" returns="int"/>
      <scope name="imagecolortransparent" docs="Sets the transparent color in the given image." ilk="function" signature="int imagecolortransparent ( resource $image [, int $color ] )" returns="int"/>
      <scope name="imagecopy" docs="Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y." ilk="function" signature="bool imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h )" returns="bool"/>
      <scope name="imagecopymerge" docs="Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y." ilk="function" signature="bool imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )" returns="bool"/>
      <scope name="imagecopymergegray" docs="imagecopymergegray() copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y." ilk="function" signature="bool imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )" returns="bool"/>
      <scope name="imagecopyresampled" docs="imagecopyresampled() copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity." ilk="function" signature="bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )" returns="bool"/>
      <scope name="imagecopyresized" docs="imagecopyresized() copies a rectangular portion of one image to another image. dst_image is the destination image, src_image is the source image identifier. If the source and destination coordinates and width and heights differ, appropriate stretching or shrinking of the image fragment will be performed. The coordinates refer to the upper left corner. This function can be used to copy regions within the same image (if dst_image is the same as src_image) but if the regions overlap the results will be unpredictable." ilk="function" signature="bool imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )" returns="bool"/>
      <scope name="imagecreate" docs="imagecreate() returns an image identifier representing a blank image of specified size." ilk="function" signature="resource imagecreate ( int $width , int $height )" returns="resource"/>
      <scope name="imagecreatefromgd" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="resource imagecreatefromgd ( string $filename )" returns="resource"/>
      <scope name="imagecreatefromgd2" docs="filename" ilk="function" signature="resource imagecreatefromgd2 ( string $filename )" returns="resource"/>
      <scope name="imagecreatefromgd2part" docs="filename" ilk="function" signature="resource imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height )" returns="resource"/>
      <scope name="imagecreatefromgif" docs="imagecreatefromgif() returns an image identifier representing the image obtained from the given filename." ilk="function" signature="resource imagecreatefromgif ( string $filename )" returns="resource"/>
      <scope name="imagecreatefromjpeg" docs="imagecreatefromjpeg() returns an image identifier representing the image obtained from the given filename." ilk="function" signature="resource imagecreatefromjpeg ( string $filename )" returns="resource"/>
      <scope name="imagecreatefrompng" docs="imagecreatefrompng() returns an image identifier representing the image obtained from the given filename." ilk="function" signature="resource imagecreatefrompng ( string $filename )" returns="resource"/>
      <scope name="imagecreatefromstring" docs="imagecreatefromstring() returns an image identifier representing the image obtained from the given data These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and GD2." ilk="function" signature="resource imagecreatefromstring ( string $data )" returns="resource"/>
      <scope name="imagecreatefromwbmp" docs="imagecreatefromwbmp() returns an image identifier representing the image obtained from the given filename." ilk="function" signature="resource imagecreatefromwbmp ( string $filename )" returns="resource"/>
      <scope name="imagecreatefromxbm" docs="imagecreatefromxbm() returns an image identifier representing the image obtained from the given filename." ilk="function" signature="resource imagecreatefromxbm ( string $filename )" returns="resource"/>
      <scope name="imagecreatefromxpm" docs="imagecreatefromxpm() returns an image identifier representing the image obtained from the given filename." ilk="function" signature="resource imagecreatefromxpm ( string $filename )" returns="resource"/>
      <scope name="imagecreatetruecolor" docs="imagecreatetruecolor() returns an image identifier representing a black image of the specified size." ilk="function" signature="resource imagecreatetruecolor ( int $width , int $height )" returns="resource"/>
      <scope name="imagedashedline" docs="This function is deprecated. Use combination of imagesetstyle() and imageline() instead." ilk="function" signature="bool imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )" returns="bool"/>
      <scope name="imagedestroy" docs="imagedestroy() frees any memory associated with image image." ilk="function" signature="bool imagedestroy ( resource $image )" returns="bool"/>
      <scope name="imageellipse" docs="Draws an ellipse centered at the specified coordinates." ilk="function" signature="bool imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )" returns="bool"/>
      <scope name="imagefill" docs="Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given color in the image." ilk="function" signature="bool imagefill ( resource $image , int $x , int $y , int $color )" returns="bool"/>
      <scope name="imagefilledarc" docs="Draws a partial ellipse centered at the specified coordinate in the given image." ilk="function" signature="bool imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style )" returns="bool"/>
      <scope name="imagefilledellipse" docs="Draws an ellipse centered at the specified coordinate on the given image." ilk="function" signature="bool imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )" returns="bool"/>
      <scope name="imagefilledpolygon" docs="imagefilledpolygon() creates a filled polygon in the given image." ilk="function" signature="bool imagefilledpolygon ( resource $image , array $points , int $num_points , int $color )" returns="bool"/>
      <scope name="imagefilledrectangle" docs="Creates a rectangle filled with color in the given image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image." ilk="function" signature="bool imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )" returns="bool"/>
      <scope name="imagefilltoborder" docs="imagefilltoborder() performs a flood fill whose border color is defined by border. The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color color." ilk="function" signature="bool imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color )" returns="bool"/>
      <scope name="imagefontheight" docs="Returns the pixel height of a character in the specified font." ilk="function" signature="int imagefontheight ( int $font )" returns="int"/>
      <scope name="imagefontwidth" docs="Returns the pixel width of a character in font." ilk="function" signature="int imagefontwidth ( int $font )" returns="int"/>
      <scope name="imageftbbox" docs="size" ilk="function" signature="array imageftbbox ( float $size , float $angle , string $font_file , string $text [, array $extrainfo ] )" returns="array"/>
      <scope name="imagefttext" docs="imageAn image resource, returned by one of the image creation functions, such as imagecreatetruecolor()." ilk="function" signature="array imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $col , string $font_file , string $text [, array $extrainfo ] )" returns="array"/>
      <scope name="imagegammacorrect" docs="Applies gamma correction to the given gd image given an input and an output gamma." ilk="function" signature="bool imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma )" returns="bool"/>
      <scope name="imagegd" docs="Outputs a GD image to the given filename." ilk="function" signature="bool imagegd ( resource $image [, string $filename ] )" returns="bool"/>
      <scope name="imagegd2" docs="Outputs a GD2 image to the given filename." ilk="function" signature="bool imagegd2 ( resource $image [, string $filename [, int $chunk_size [, int $type ]]] )" returns="bool"/>
      <scope name="imagegif" docs="imagegif() creates the GIF file in filename from the image image. The image argument is the return from the imagecreate() or imagecreatefrom* function." ilk="function" signature="bool imagegif ( resource $image [, string $filename ] )" returns="bool"/>
      <scope name="imageinterlace" docs="imageinterlace() turns the interlace bit on or off." ilk="function" signature="int imageinterlace ( resource $image [, int $interlace ] )" returns="int"/>
      <scope name="imageistruecolor" docs="imageistruecolor() finds whether the image image is a truecolor image." ilk="function" signature="bool imageistruecolor ( resource $image )" returns="bool"/>
      <scope name="imagejpeg" docs="imagejpeg() creates a JPEG file from the given image." ilk="function" signature="bool imagejpeg ( resource $image [, string $filename [, int $quality ]] )" returns="bool"/>
      <scope name="imagelayereffect" docs="Set the alpha blending flag to use the bundled libgd layering effects." ilk="function" signature="bool imagelayereffect ( resource $image , int $effect )" returns="bool"/>
      <scope name="imageline" docs="imageline() draws a line between the two given points." ilk="function" signature="bool imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )" returns="bool"/>
      <scope name="imageloadfont" docs="imageloadfont() loads a user-defined bitmap and returns its identifier." ilk="function" signature="int imageloadfont ( string $file )" returns="int"/>
      <scope name="imagepalettecopy" docs="imagepalettecopy() copies the palette from the source image to the destination image." ilk="function" signature="void imagepalettecopy ( resource $destination , resource $source )" returns="void"/>
      <scope name="imagepng" docs="Outputs or saves a PNG image from the given image." ilk="function" signature="bool imagepng ( resource $image [, string $filename [, int $quality [, int $filters ]]] )" returns="bool"/>
      <scope name="imagepolygon" docs="imagepolygon() creates a polygon in the given image." ilk="function" signature="bool imagepolygon ( resource $image , array $points , int $num_points , int $color )" returns="bool"/>
      <scope name="imagepsbbox" docs="Gives the bounding box of a text rectangle using PostScript Type1 fonts." ilk="function" signature="array imagepsbbox ( string $text , int $font , int $size [, int $space ], int $tightness , float $angle )" returns="array"/>
      <scope name="imagepsencodefont" docs="Loads a character encoding vector from a file and changes the fonts encoding vector to it. As a PostScript fonts default vector lacks most of the character positions above 127, you&amp;#039;ll definitely want to change this if you use an other language than English." ilk="function" signature="bool imagepsencodefont ( resource $font_index , string $encodingfile )" returns="bool"/>
      <scope name="imagepsextendfont" docs="Extend or condense a font (font_index), if the value of the extend parameter is less than one you will be condensing the font." ilk="function" signature="bool imagepsextendfont ( int $font_index , float $extend )" returns="bool"/>
      <scope name="imagepsfreefont" docs="imagepsfreefont() frees memory used by a PostScript Type 1 font." ilk="function" signature="bool imagepsfreefont ( resource $fontindex )" returns="bool"/>
      <scope name="imagepsloadfont" docs="Load a PostScript Type 1 font from the given filename." ilk="function" signature="resource imagepsloadfont ( string $filename )" returns="resource"/>
      <scope name="imagepsslantfont" docs="Slant a given font given." ilk="function" signature="bool imagepsslantfont ( resource $font_index , float $slant )" returns="bool"/>
      <scope name="imagepstext" docs="Draws a text on an image using PostScript Type1 fonts." ilk="function" signature="array imagepstext ( resource $image , string $text , resource $font , int $size , int $foreground , int $background , int $x , int $y [, int $space [, int $tightness [, float $angle [, int $antialias_steps ]]]] )" returns="array"/>
      <scope name="imagerectangle" docs="imagerectangle() creates a rectangle starting at the specified coordinates." ilk="function" signature="bool imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )" returns="bool"/>
      <scope name="imagerotate" docs="Rotates the source_image image using the given angle in degrees." ilk="function" signature="resource imagerotate ( resource $source_image , float $angle , int $bgd_color [, int $ignore_transparent ] )" returns="resource"/>
      <scope name="imagesavealpha" docs="imagesavealpha() sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images." ilk="function" signature="bool imagesavealpha ( resource $image , bool $saveflag )" returns="bool"/>
      <scope name="imagesetbrush" docs="imagesetbrush() sets the brush image to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED." ilk="function" signature="bool imagesetbrush ( resource $image , resource $brush )" returns="bool"/>
      <scope name="imagesetpixel" docs="imagesetpixel() draws a pixel at the specified coordinate." ilk="function" signature="bool imagesetpixel ( resource $image , int $x , int $y , int $color )" returns="bool"/>
      <scope name="imagesetstyle" docs="imagesetstyle() sets the style to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEDBRUSHED." ilk="function" signature="bool imagesetstyle ( resource $image , array $style )" returns="bool"/>
      <scope name="imagesetthickness" docs="imagesetthickness() sets the thickness of the lines drawn when drawing rectangles, polygons, ellipses etc. etc. to thickness pixels." ilk="function" signature="bool imagesetthickness ( resource $image , int $thickness )" returns="bool"/>
      <scope name="imagesettile" docs="imagesettile() sets the tile image to be used by all region filling functions (such as imagefill() and imagefilledpolygon()) when filling with the special color IMG_COLOR_TILED." ilk="function" signature="bool imagesettile ( resource $image , resource $tile )" returns="bool"/>
      <scope name="imagestring" docs="Draws a string at the given coordinates." ilk="function" signature="bool imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color )" returns="bool"/>
      <scope name="imagestringup" docs="Draws a string vertically at the given coordinates." ilk="function" signature="bool imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color )" returns="bool"/>
      <scope name="imagesx" docs="Returns the width of the given image resource." ilk="function" signature="int imagesx ( resource $image )" returns="int"/>
      <scope name="imagesy" docs="Returns the height of the given image resource." ilk="function" signature="int imagesy ( resource $image )" returns="int"/>
      <scope name="imagetruecolortopalette" docs="imagetruecolortopalette() converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality." ilk="function" signature="bool imagetruecolortopalette ( resource $image , bool $dither , int $ncolors )" returns="bool"/>
      <scope name="imagettfbbox" docs="This function calculates and returns the bounding box in pixels for a TrueType text." ilk="function" signature="array imagettfbbox ( float $size , float $angle , string $fontfile , string $text )" returns="array"/>
      <scope name="imagettftext" docs="Writes the given text into the image using TrueType fonts." ilk="function" signature="array imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text )" returns="array"/>
      <scope name="imagetypes" docs="Returns the image types supported by the current PHP installation." ilk="function" signature="int imagetypes ( void )" returns="int"/>
      <scope name="imagewbmp" docs="imagewbmp() outputs or save a WBMP version of the given image." ilk="function" signature="bool imagewbmp ( resource $image [, string $filename [, int $foreground ]] )" returns="bool"/>
      <scope name="imap_8bit" docs="Convert an 8bit string to a quoted-printable string (according to &amp;raquo; RFC2045, section 6.7)." ilk="function" signature="string imap_8bit ( string $string )" returns="string"/>
      <scope name="imap_alerts" docs="Returns all of the IMAP alert messages generated since the last imap_alerts() call, or the beginning of the page." ilk="function" signature="array imap_alerts ( void )" returns="array"/>
      <scope name="imap_append" docs="Appends a string message to the specified mailbox." ilk="function" signature="bool imap_append ( resource $imap_stream , string $mailbox , string $message [, string $options ] )" returns="bool"/>
      <scope name="imap_base64" docs="Decodes the given BASE-64 encoded text." ilk="function" signature="string imap_base64 ( string $text )" returns="string"/>
      <scope name="imap_binary" docs="Convert an 8bit string to a base64 string according to &amp;raquo; RFC2045, Section 6.8." ilk="function" signature="string imap_binary ( string $string )" returns="string"/>
      <scope name="imap_body" docs="imap_body() returns the body of the message, numbered msg_number in the current mailbox." ilk="function" signature="string imap_body ( resource $imap_stream , int $msg_number [, int $options ] )" returns="string"/>
      <scope name="imap_bodystruct" docs="Read the structure of a specified body section of a specific message." ilk="function" signature="object imap_bodystruct ( resource $imap_stream , int $msg_number , string $section )" returns="object"/>
      <scope name="imap_check" docs="Checks information about the current mailbox." ilk="function" signature="object imap_check ( resource $imap_stream )" returns="object"/>
      <scope name="imap_clearflag_full" docs="This function causes a store to delete the specified flag to the flags set for the messages in the specified sequence." ilk="function" signature="bool imap_clearflag_full ( resource $imap_stream , string $sequence , string $flag [, string $options ] )" returns="bool"/>
      <scope name="imap_close" docs="Closes the imap stream." ilk="function" signature="bool imap_close ( resource $imap_stream [, int $flag ] )" returns="bool"/>
      <scope name="imap_createmailbox" docs="Creates a new mailbox specified by mailbox." ilk="function" signature="bool imap_createmailbox ( resource $imap_stream , string $mailbox )" returns="bool"/>
      <scope name="imap_delete" docs="Marks messages listed in msg_number for deletion. Messages marked for deletion will stay in the mailbox until either imap_expunge() is called or imap_close() is called with the optional parameter CL_EXPUNGE." ilk="function" signature="bool imap_delete ( int $imap_stream , int $msg_number [, int $options ] )" returns="bool"/>
      <scope name="imap_deletemailbox" docs="Deletes the specified mailbox." ilk="function" signature="bool imap_deletemailbox ( resource $imap_stream , string $mailbox )" returns="bool"/>
      <scope name="imap_errors" docs="Gets all of the IMAP errors (if any) that have occurred during this page request or since the error stack was reset." ilk="function" signature="array imap_errors ( void )" returns="array"/>
      <scope name="imap_expunge" docs="Deletes all the messages marked for deletion by imap_delete(), imap_mail_move(), or imap_setflag_full()." ilk="function" signature="bool imap_expunge ( resource $imap_stream )" returns="bool"/>
      <scope name="imap_fetch_overview" docs="This function fetches mail headers for the given sequence and returns an overview of their contents." ilk="function" signature="array imap_fetch_overview ( resource $imap_stream , string $sequence [, int $options ] )" returns="array"/>
      <scope name="imap_fetchbody" docs="Fetch of a particular section of the body of the specified messages. Body parts are not decoded by this function." ilk="function" signature="string imap_fetchbody ( resource $imap_stream , int $msg_number , string $part_number [, int $options ] )" returns="string"/>
      <scope name="imap_fetchheader" docs="This function causes a fetch of the complete, unfiltered &amp;raquo; RFC2822 format header of the specified message." ilk="function" signature="string imap_fetchheader ( resource $imap_stream , int $msg_number [, int $options ] )" returns="string"/>
      <scope name="imap_fetchstructure" docs="Fetches all the structured information for a given message." ilk="function" signature="object imap_fetchstructure ( resource $imap_stream , int $msg_number [, int $options ] )" returns="object"/>
      <scope name="imap_get_quota" docs="Retrieve the quota level settings, and usage statics per mailbox." ilk="function" signature="array imap_get_quota ( resource $imap_stream , string $quota_root )" returns="array"/>
      <scope name="imap_get_quotaroot" docs="Retrieve the quota settings per user. The limit value represents the total amount of space allowed for this user&amp;#039;s total mailbox usage. The usage value represents the user&amp;#039;s current total mailbox capacity." ilk="function" signature="array imap_get_quotaroot ( resource $imap_stream , string $quota_root )" returns="array"/>
      <scope name="imap_getmailboxes" docs="Gets information on the mailboxes." ilk="function" signature="array imap_getmailboxes ( resource $imap_stream , string $ref , string $pattern )" returns="array"/>
      <scope name="imap_getsubscribed" docs="Gets information on the subscribeds mailboxes." ilk="function" signature="array imap_getsubscribed ( resource $imap_stream , string $ref , string $pattern )" returns="array"/>
      <scope name="imap_header" docs="Undocumented function." ilk="function" signature="imap_header()"/>
      <scope name="imap_headerinfo" docs="Gets information about the given message number by reading its headers." ilk="function" signature="object imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength [, int $subjectlength [, string $defaulthost ]]] )" returns="object"/>
      <scope name="imap_headers" docs="Returns headers for all messages in a mailbox." ilk="function" signature="array imap_headers ( resource $imap_stream )" returns="array"/>
      <scope name="imap_last_error" docs="Gets the full text of the last IMAP error message that occurred on the current page. The error stack is untouched; calling imap_last_error() subsequently, with no intervening errors, will return the same error." ilk="function" signature="string imap_last_error ( void )" returns="string"/>
      <scope name="imap_list" docs="Read the list of mailboxes." ilk="function" signature="array imap_list ( resource $imap_stream , string $ref , string $pattern )" returns="array"/>
      <scope name="imap_listmailbox" docs="Undocumented function." ilk="function" signature="imap_listmailbox()"/>
      <scope name="imap_listsubscribed" docs="Undocumented function." ilk="function" signature="imap_listsubscribed()"/>
      <scope name="imap_lsub" docs="Gets an array of all the mailboxes that you have subscribed." ilk="function" signature="array imap_lsub ( resource $imap_stream , string $ref , string $pattern )" returns="array"/>
      <scope name="imap_mail_compose" docs="Create a MIME message based on the given envelope and body sections." ilk="function" signature="string imap_mail_compose ( array $envelope , array $body )" returns="string"/>
      <scope name="imap_mail_copy" docs="Copies mail messages specified by msglist to specified mailbox." ilk="function" signature="bool imap_mail_copy ( resource $imap_stream , string $msglist , string $mailbox [, int $options ] )" returns="bool"/>
      <scope name="imap_mail_move" docs="Moves mail messages specified by msglist to the specified mailbox." ilk="function" signature="bool imap_mail_move ( resource $imap_stream , string $msglist , string $mailbox [, int $options ] )" returns="bool"/>
      <scope name="imap_mail" docs="This function allows sending of emails with correct handling of Cc and Bcc receivers." ilk="function" signature="bool imap_mail ( string $to , string $subject , string $message [, string $additional_headers [, string $cc [, string $bcc [, string $rpath ]]]] )" returns="bool"/>
      <scope name="imap_mailboxmsginfo" docs="Checks the current mailbox status on the server. It is similar to imap_status(), but will additionally sum up the size of all messages in the mailbox, which will take some additional time to execute." ilk="function" signature="object imap_mailboxmsginfo ( resource $imap_stream )" returns="object"/>
      <scope name="imap_mime_header_decode" docs="Decodes MIME message header extensions that are non ASCII text (see &amp;raquo; RFC2047)." ilk="function" signature="array imap_mime_header_decode ( string $text )" returns="array"/>
      <scope name="imap_msgno" docs="Returns the message sequence number for the given uid." ilk="function" signature="int imap_msgno ( resource $imap_stream , int $uid )" returns="int"/>
      <scope name="imap_num_msg" docs="Gets the number of messages in the current mailbox." ilk="function" signature="int imap_num_msg ( resource $imap_stream )" returns="int"/>
      <scope name="imap_num_recent" docs="Gets the number of recent messages in the current mailbox." ilk="function" signature="int imap_num_recent ( resource $imap_stream )" returns="int"/>
      <scope name="imap_open" docs="Opens an IMAP stream to a mailbox." ilk="function" signature="resource imap_open ( string $mailbox , string $username , string $password [, int $options [, int $n_retries ]] )" returns="resource"/>
      <scope name="imap_ping" docs="imap_ping() pings the stream to see if it&amp;#039;s still active. It may discover new mail; this is the preferred method for a periodic &amp;quot;new mail check&amp;quot; as well as a &amp;quot;keep alive&amp;quot; for servers which have inactivity timeout." ilk="function" signature="bool imap_ping ( resource $imap_stream )" returns="bool"/>
      <scope name="imap_qprint" docs="Convert a quoted-printable string to an 8 bit string according to &amp;raquo; RFC2045, section 6.7." ilk="function" signature="string imap_qprint ( string $string )" returns="string"/>
      <scope name="imap_renamemailbox" docs="This function renames on old mailbox to new mailbox (see imap_open() for the format of mbox names)." ilk="function" signature="bool imap_renamemailbox ( resource $imap_stream , string $old_mbox , string $new_mbox )" returns="bool"/>
      <scope name="imap_reopen" docs="Reopens the specified stream to a new mailbox on an IMAP or NNTP server." ilk="function" signature="bool imap_reopen ( resource $imap_stream , string $mailbox [, int $options [, int $n_retries ]] )" returns="bool"/>
      <scope name="imap_rfc822_parse_adrlist" docs="Parses the address string as defined in &amp;raquo; RFC2822 and for each address." ilk="function" signature="array imap_rfc822_parse_adrlist ( string $address , string $default_host )" returns="array"/>
      <scope name="imap_rfc822_parse_headers" docs="Gets an object of various header elements, similar to imap_header()." ilk="function" signature="object imap_rfc822_parse_headers ( string $headers [, string $defaulthost ] )" returns="object"/>
      <scope name="imap_rfc822_write_address" docs="Returns a properly formatted email address as defined in &amp;raquo; RFC2822 given the needed information." ilk="function" signature="string imap_rfc822_write_address ( string $mailbox , string $host , string $personal )" returns="string"/>
      <scope name="imap_scanmailbox" docs="Undocumented function." ilk="function" signature="imap_scanmailbox()"/>
      <scope name="imap_search" docs="This function performs a search on the mailbox currently opened in the given imap stream." ilk="function" signature="array imap_search ( resource $imap_stream , string $criteria [, int $options [, string $charset ]] )" returns="array"/>
      <scope name="imap_set_quota" docs="Sets an upper limit quota on a per mailbox basis." ilk="function" signature="bool imap_set_quota ( resource $imap_stream , string $quota_root , int $quota_limit )" returns="bool"/>
      <scope name="imap_setacl" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="bool imap_setacl ( resource $imap_stream , string $mailbox , string $id , string $rights )" returns="bool"/>
      <scope name="imap_setflag_full" docs="Causes a store to add the specified flag to the flags set for the messages in the specified sequence." ilk="function" signature="bool imap_setflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options ] )" returns="bool"/>
      <scope name="imap_sort" docs="Gets and sorts message numbers by the given parameters." ilk="function" signature="array imap_sort ( resource $imap_stream , int $criteria , int $reverse [, int $options [, string $search_criteria [, string $charset ]]] )" returns="array"/>
      <scope name="imap_status" docs="Gets status information about the given mailbox." ilk="function" signature="object imap_status ( resource $imap_stream , string $mailbox , int $options )" returns="object"/>
      <scope name="imap_subscribe" docs="Subscribe to a new mailbox." ilk="function" signature="bool imap_subscribe ( resource $imap_stream , string $mailbox )" returns="bool"/>
      <scope name="imap_thread" docs="Gets a tree of a threaded message." ilk="function" signature="array imap_thread ( resource $imap_stream [, int $options ] )" returns="array"/>
      <scope name="imap_timeout" docs="Undocumented function." ilk="function" signature="mixed imap_timeout ( int $timeout_type [, int $timeout ] )" returns="mixed"/>
      <scope name="imap_uid" docs="This function returns the UID for the given message sequence number. An UID is a unique identifier that will not change over time while a message sequence number may change whenever the content of the mailbox changes." ilk="function" signature="int imap_uid ( resource $imap_stream , int $msg_number )" returns="int"/>
      <scope name="imap_undelete" docs="Removes the deletion flag for a specified message, which is set by imap_delete() or imap_mail_move()." ilk="function" signature="bool imap_undelete ( resource $imap_stream , int $msg_number [, int $flags ] )" returns="bool"/>
      <scope name="imap_unsubscribe" docs="Unsubscribe from the specified mailbox." ilk="function" signature="bool imap_unsubscribe ( string $imap_stream , string $mailbox )" returns="bool"/>
      <scope name="imap_utf7_decode" docs="Decodes modified UTF-7 text into ISO-8859-1 string." ilk="function" signature="string imap_utf7_decode ( string $text )" returns="string"/>
      <scope name="imap_utf7_encode" docs="Converts data to modified UTF-7 text." ilk="function" signature="string imap_utf7_encode ( string $data )" returns="string"/>
      <scope name="imap_utf8" docs="Converts the given mime_encoded_text to UTF-8." ilk="function" signature="string imap_utf8 ( string $mime_encoded_text )" returns="string"/>
      <scope name="implode" docs="Join array elements with a glue string." ilk="function" signature="string implode ( string $glue , array $pieces )" returns="string"/>
      <scope name="import_request_variables" docs="Imports GET/POST/Cookie variables into the global scope. It is useful if you disabled register_globals, but would like to see some variables in the global scope." ilk="function" signature="bool import_request_variables ( string $types [, string $prefix ] )" returns="bool"/>
      <scope name="in_array" docs="Searches haystack for needle and returns TRUE if it is found in the array, FALSE otherwise." ilk="function" signature="bool in_array ( mixed $needle , array $haystack [, bool $strict ] )" returns="bool"/>
      <scope name="ingres_autocommit" docs="ingres_autocommit() is called before opening a transaction (before the first call to ingres_query() or just after a call to ingres_rollback() or ingres_commit()) to switch the &amp;quot;autocommit&amp;quot; mode of the server on or off (when the script begins the autocommit mode is off)." ilk="function" signature="bool ingres_autocommit ([ resource $link ] )" returns="bool"/>
      <scope name="ingres_close" docs="ingres_close() closes the connection to the Ingres server that&amp;#039;s associated with the specified link." ilk="function" signature="bool ingres_close ([ resource $link ] )" returns="bool"/>
      <scope name="ingres_commit" docs="ingres_commit() commits the currently open transaction, making all changes made to the database permanent." ilk="function" signature="bool ingres_commit ([ resource $link ] )" returns="bool"/>
      <scope name="ingres_connect" docs="ingres_connect() opens a connection with the given Ingres database." ilk="function" signature="resource ingres_connect ([ string $database [, string $username [, string $password [, array $options ]]]] )" returns="resource"/>
      <scope name="ingres_fetch_array" docs="This function is an extended version of ingres_fetch_row(). In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys." ilk="function" signature="array ingres_fetch_array ([ int $result_type [, resource $link ]] )" returns="array"/>
      <scope name="ingres_fetch_object" docs="This function is similar to ingres_fetch_array(), with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names)." ilk="function" signature="object ingres_fetch_object ([ int $result_type [, resource $link ]] )" returns="object"/>
      <scope name="ingres_fetch_row" docs="ingres_fetch_row() returns an array that corresponds to the fetched row, or FALSE if there are no more rows. Each result column is stored in an array offset, starting at offset 1." ilk="function" signature="array ingres_fetch_row ([ resource $link ] )" returns="array"/>
      <scope name="ingres_field_length" docs="ingres_field_length() returns the length of a field. This is the number of bytes used by the server to store the field. For detailed information, see the Ingres/OpenAPI User Guide - Appendix C." ilk="function" signature="int ingres_field_length ( int $index [, resource $link ] )" returns="int"/>
      <scope name="ingres_field_name" docs="ingres_field_name() returns the name of a field in a query result." ilk="function" signature="string ingres_field_name ( int $index [, resource $link ] )" returns="string"/>
      <scope name="ingres_field_nullable" docs="Test if a field is nullable." ilk="function" signature="bool ingres_field_nullable ( int $index [, resource $link ] )" returns="bool"/>
      <scope name="ingres_field_precision" docs="ingres_field_precision() returns the precision of a field. This value is used only for decimal, float and money SQL data types. For detailed information, see the Ingres/OpenAPI User Guide - Appendix C." ilk="function" signature="int ingres_field_precision ( int $index [, resource $link ] )" returns="int"/>
      <scope name="ingres_field_scale" docs="ingres_field_scale() returns the scale of a field. This value is used only for the decimal SQL data type. For detailed information, see the Ingres/OpenAPI User Guide - Appendix C." ilk="function" signature="int ingres_field_scale ( int $index [, resource $link ] )" returns="int"/>
      <scope name="ingres_field_type" docs="Get the type of a field in a query result." ilk="function" signature="string ingres_field_type ( int $index [, resource $link ] )" returns="string"/>
      <scope name="ingres_num_fields" docs="ingres_num_fields() returns the number of fields in the results returned by the Ingres server after a call to ingres_query()" ilk="function" signature="int ingres_num_fields ([ resource $link ] )" returns="int"/>
      <scope name="ingres_num_rows" docs="This function is mainly meant to get the number of rows modified in the database. If this function is called before using ingres_fetch_array(), ingres_fetch_object() or ingres_fetch_row() the server will delete the result&amp;#039;s data and the script won&amp;#039;t be able to get them." ilk="function" signature="int ingres_num_rows ([ resource $link ] )" returns="int"/>
      <scope name="ingres_pconnect" docs="Open a persistent connection to an Ingres II database." ilk="function" signature="resource ingres_pconnect ([ string $database [, string $username [, string $password ]]] )" returns="resource"/>
      <scope name="ingres_query" docs="ingres_query() sends the given query to the Ingres server." ilk="function" signature="bool ingres_query ( string $query [, resource $link ] )" returns="bool"/>
      <scope name="ingres_rollback" docs="ingres_rollback() rolls back the currently open transaction, actually canceling all changes made to the database during the transaction." ilk="function" signature="bool ingres_rollback ([ resource $link ] )" returns="bool"/>
      <scope name="ini_alter" docs="Undocumented function." ilk="function" signature="ini_alter()"/>
      <scope name="ini_get_all" docs="Returns all the registered configuration options." ilk="function" signature="array ini_get_all ([ string $extension ] )" returns="array"/>
      <scope name="ini_get" docs="Returns the value of the configuration option on success." ilk="function" signature="string ini_get ( string $varname )" returns="string"/>
      <scope name="ini_restore" docs="Restores a given configuration option to its original value." ilk="function" signature="void ini_restore ( string $varname )" returns="void"/>
      <scope name="ini_set" docs="Sets the value of the given configuration option. The configuration option will keep this new value during the script&amp;#039;s execution, and will be restored at the script&amp;#039;s ending." ilk="function" signature="string ini_set ( string $varname , string $newvalue )" returns="string"/>
      <scope name="intval" docs="Returns the integer value of var, using the specified base for the conversion (the default is base 10)." ilk="function" signature="int intval ( mixed $var [, int $base ] )" returns="int"/>
      <scope name="ip2long" docs="The function ip2long() generates an IPv4 Internet network address from its Internet standard format (dotted string) representation." ilk="function" signature="int ip2long ( string $ip_address )" returns="int"/>
      <scope name="iptcembed" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="mixed iptcembed ( string $iptcdata , string $jpeg_file_name [, int $spool ] )" returns="mixed"/>
      <scope name="iptcparse" docs="Parses an &amp;raquo; IPTC block into its single tags." ilk="function" signature="array iptcparse ( string $iptcblock )" returns="array"/>
      <scope name="is_a" docs="Checks if the given object is of this class or has this class as one of its parents." ilk="function" signature="bool is_a ( object $object , string $class_name )" returns="bool"/>
      <scope name="is_array" docs="Finds whether the given variable is an array." ilk="function" signature="bool is_array ( mixed $var )" returns="bool"/>
      <scope name="is_bool" docs="Finds whether the given variable is a boolean." ilk="function" signature="bool is_bool ( mixed $var )" returns="bool"/>
      <scope name="is_callable" docs="Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name." ilk="function" signature="bool is_callable ( mixed $var [, bool $syntax_only [, string &amp;$callable_name ]] )" returns="bool"/>
      <scope name="is_dir" docs="Tells whether the given filename is a directory." ilk="function" signature="bool is_dir ( string $filename )" returns="bool"/>
      <scope name="is_double" docs="Undocumented function." ilk="function" signature="is_double()"/>
      <scope name="is_executable" docs="Tells whether the filename is executable." ilk="function" signature="bool is_executable ( string $filename )" returns="bool"/>
      <scope name="is_file" docs="Tells whether the given file is a regular file." ilk="function" signature="bool is_file ( string $filename )" returns="bool"/>
      <scope name="is_finite" docs="Checks whether val is a legal finite on this platform." ilk="function" signature="bool is_finite ( float $val )" returns="bool"/>
      <scope name="is_float" docs="Finds whether the type of the given variable is float." ilk="function" signature="bool is_float ( mixed $var )" returns="bool"/>
      <scope name="is_infinite" docs="Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform." ilk="function" signature="bool is_infinite ( float $val )" returns="bool"/>
      <scope name="is_int" docs="Finds whether the type of the given variable is integer." ilk="function" signature="bool is_int ( mixed $var )" returns="bool"/>
      <scope name="is_integer" docs="Undocumented function." ilk="function" signature="is_integer()"/>
      <scope name="is_link" docs="Tells whether the given file is a symbolic link." ilk="function" signature="bool is_link ( string $filename )" returns="bool"/>
      <scope name="is_long" docs="Undocumented function." ilk="function" signature="is_long()"/>
      <scope name="is_nan" docs="Checks whether val is &amp;#039;not a number&amp;#039;, like the result of acos(1.01)." ilk="function" signature="bool is_nan ( float $val )" returns="bool"/>
      <scope name="is_null" docs="Finds whether the given variable is NULL." ilk="function" signature="bool is_null ( mixed $var )" returns="bool"/>
      <scope name="is_numeric" docs="Finds whether the given variable is numeric. Numeric strings consist of optional sign, any number of digits, optional decimal part and optional exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal notation (0xFF) is allowed too but only without sign, decimal and exponential part." ilk="function" signature="bool is_numeric ( mixed $var )" returns="bool"/>
      <scope name="is_object" docs="Finds whether the given variable is an object." ilk="function" signature="bool is_object ( mixed $var )" returns="bool"/>
      <scope name="is_readable" docs="Tells whether the filename is readable." ilk="function" signature="bool is_readable ( string $filename )" returns="bool"/>
      <scope name="is_real" docs="Undocumented function." ilk="function" signature="is_real()"/>
      <scope name="is_resource" docs="Finds whether the given variable is a resource." ilk="function" signature="bool is_resource ( mixed $var )" returns="bool"/>
      <scope name="is_scalar" docs="Finds whether the given variable is a scalar." ilk="function" signature="bool is_scalar ( mixed $var )" returns="bool"/>
      <scope name="is_string" docs="Finds whether the type given variable is string." ilk="function" signature="bool is_string ( mixed $var )" returns="bool"/>
      <scope name="is_subclass_of" docs="Checks if the given object has the class class_name as one of its parents." ilk="function" signature="bool is_subclass_of ( mixed $object , string $class_name )" returns="bool"/>
      <scope name="is_uploaded_file" docs="Returns TRUE if the file named by filename was uploaded via HTTP POST. This is useful to help ensure that a malicious user hasn&amp;#039;t tried to trick the script into working on files upon which it should not be working--for instance, /etc/passwd." ilk="function" signature="bool is_uploaded_file ( string $filename )" returns="bool"/>
      <scope name="is_writable" docs="Returns TRUE if the filename exists and is writable. The filename argument may be a directory name allowing you to check if a directory is writable." ilk="function" signature="bool is_writable ( string $filename )" returns="bool"/>
      <scope name="is_writeable" docs="Undocumented function." ilk="function" signature="is_writeable()"/>
      <scope name="java_last_exception_clear" docs="Clears last Java exception." ilk="function" signature="void java_last_exception_clear ( void )" returns="void"/>
      <scope name="java_last_exception_get" docs="Gets last Java exception." ilk="function" signature="object java_last_exception_get ( void )" returns="object"/>
      <scope name="jddayofweek" docs="Returns the day of the week. Can return a string or an integer depending on the mode." ilk="function" signature="mixed jddayofweek ( int $julianday [, int $mode ] )" returns="mixed"/>
      <scope name="jdmonthname" docs="Returns a string containing a month name. mode tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned. Calendar modes Mode Meaning Values 0 Gregorian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec 1 Gregorian January, February, March, April, May, June, July, August, September, October, November, December 2 Julian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec 3 Julian January, February, March, April, May, June, July, August, September, October, November, December 4 Jewish Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul 5 French Republican Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra" ilk="function" signature="string jdmonthname ( int $julianday , int $mode )" returns="string"/>
      <scope name="jdtofrench" docs="Converts a Julian Day Count to the French Republican Calendar." ilk="function" signature="string jdtofrench ( int $juliandaycount )" returns="string"/>
      <scope name="jdtogregorian" docs="Converts Julian Day Count to a string containing the Gregorian date in the format of &amp;quot;month/day/year&amp;quot;." ilk="function" signature="string jdtogregorian ( int $julianday )" returns="string"/>
      <scope name="jdtojewish" docs="Converts a Julian Day Count to the Jewish Calendar." ilk="function" signature="string jdtojewish ( int $juliandaycount [, bool $hebrew [, int $fl ]] )" returns="string"/>
      <scope name="jdtojulian" docs="Converts Julian Day Count to a string containing the Julian Calendar Date in the format of &amp;quot;month/day/year&amp;quot;." ilk="function" signature="string jdtojulian ( int $julianday )" returns="string"/>
      <scope name="jdtounix" docs="This function will return a Unix timestamp corresponding to the Julian Day given in jday or FALSE if jday is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588 &amp;lt;= jday &amp;lt;= 2465342 ). The time returned is localtime (and not GMT)." ilk="function" signature="int jdtounix ( int $jday )" returns="int"/>
      <scope name="jewishtojd" docs="Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful. The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed." ilk="function" signature="int jewishtojd ( int $month , int $day , int $year )" returns="int"/>
      <scope name="join" docs="Undocumented function." ilk="function" signature="join()"/>
      <scope name="jpeg2wbmp" docs="Converts a JPEG file into a WBMP file." ilk="function" signature="bool jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )" returns="bool"/>
      <scope name="juliantojd" docs="Valid Range for Julian Calendar 4713 B.C. to 9999 A.D." ilk="function" signature="int juliantojd ( int $month , int $day , int $year )" returns="int"/>
      <scope name="krsort" docs="Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays." ilk="function" signature="bool krsort ( array &amp;$array [, int $sort_flags ] )" returns="bool"/>
      <scope name="ksort" docs="Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays." ilk="function" signature="bool ksort ( array &amp;$array [, int $sort_flags ] )" returns="bool"/>
      <scope name="lcg_value" docs="lcg_value() returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes." ilk="function" signature="float lcg_value ( void )" returns="float"/>
      <scope name="ldap_8859_to_t61" docs="Translate ISO-8859 characters to t61 characters." ilk="function" signature="string ldap_8859_to_t61 ( string $value )" returns="string"/>
      <scope name="ldap_add" docs="Add entries in the LDAP directory." ilk="function" signature="bool ldap_add ( resource $link_identifier , string $dn , array $entry )" returns="bool"/>
      <scope name="ldap_bind" docs="Binds to the LDAP directory with specified RDN and password." ilk="function" signature="bool ldap_bind ( resource $link_identifier [, string $bind_rdn [, string $bind_password ]] )" returns="bool"/>
      <scope name="ldap_close" docs="Undocumented function." ilk="function" signature="ldap_close()"/>
      <scope name="ldap_compare" docs="Compare value of attribute with value of same attribute in an LDAP directory entry." ilk="function" signature="mixed ldap_compare ( resource $link_identifier , string $dn , string $attribute , string $value )" returns="mixed"/>
      <scope name="ldap_connect" docs="Establishes a connection to a LDAP server on a specified hostname and port." ilk="function" signature="resource ldap_connect ([ string $hostname [, int $port ]] )" returns="resource"/>
      <scope name="ldap_count_entries" docs="Returns the number of entries stored in the result of previous search operations." ilk="function" signature="int ldap_count_entries ( resource $link_identifier , resource $result_identifier )" returns="int"/>
      <scope name="ldap_delete" docs="Deletes a particular entry in LDAP directory." ilk="function" signature="bool ldap_delete ( resource $link_identifier , string $dn )" returns="bool"/>
      <scope name="ldap_dn2ufn" docs="Turns the specified dn, into a more user-friendly form, stripping off type names." ilk="function" signature="string ldap_dn2ufn ( string $dn )" returns="string"/>
      <scope name="ldap_err2str" docs="Returns the string error message explaining the error number errno. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check." ilk="function" signature="string ldap_err2str ( int $errno )" returns="string"/>
      <scope name="ldap_errno" docs="Returns the standardized error number returned by the last LDAP command. This number can be converted into a textual error message using ldap_err2str()." ilk="function" signature="int ldap_errno ( resource $link_identifier )" returns="int"/>
      <scope name="ldap_error" docs="Returns the string error message explaining the error generated by the last LDAP command for the given link_identifier. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check." ilk="function" signature="string ldap_error ( resource $link_identifier )" returns="string"/>
      <scope name="ldap_explode_dn" docs="Splits the DN returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN." ilk="function" signature="array ldap_explode_dn ( string $dn , int $with_attrib )" returns="array"/>
      <scope name="ldap_first_attribute" docs="Gets the first attribute in the given entry. Remaining attributes are retrieved by calling ldap_next_attribute() successively." ilk="function" signature="string ldap_first_attribute ( resource $link_identifier , resource $result_entry_identifier )" returns="string"/>
      <scope name="ldap_first_entry" docs="Returns the entry identifier for first entry in the result. This entry identifier is then supplied to ldap_next_entry() routine to get successive entries from the result." ilk="function" signature="resource ldap_first_entry ( resource $link_identifier , resource $result_identifier )" returns="resource"/>
      <scope name="ldap_first_reference" docs="Undocumented function." ilk="function" signature="resource ldap_first_reference ( resource $link , resource $result )" returns="resource"/>
      <scope name="ldap_free_result" docs="Frees up the memory allocated internally to store the result. All result memory will be automatically freed when the script terminates." ilk="function" signature="bool ldap_free_result ( resource $result_identifier )" returns="bool"/>
      <scope name="ldap_get_attributes" docs="Reads attributes and values from an entry in the search result." ilk="function" signature="array ldap_get_attributes ( resource $link_identifier , resource $result_entry_identifier )" returns="array"/>
      <scope name="ldap_get_dn" docs="Finds out the DN of an entry in the result." ilk="function" signature="string ldap_get_dn ( resource $link_identifier , resource $result_entry_identifier )" returns="string"/>
      <scope name="ldap_get_entries" docs="Reads multiple entries from the given result, and then reading the attributes and multiple values." ilk="function" signature="array ldap_get_entries ( resource $link_identifier , resource $result_identifier )" returns="array"/>
      <scope name="ldap_get_option" docs="Sets retval to the value of the specified option." ilk="function" signature="bool ldap_get_option ( resource $link_identifier , int $option , mixed &amp;$retval )" returns="bool"/>
      <scope name="ldap_get_values_len" docs="Reads all the values of the attribute in the entry in the result." ilk="function" signature="array ldap_get_values_len ( resource $link_identifier , resource $result_entry_identifier , string $attribute )" returns="array"/>
      <scope name="ldap_get_values" docs="Reads all the values of the attribute in the entry in the result." ilk="function" signature="array ldap_get_values ( resource $link_identifier , resource $result_entry_identifier , string $attribute )" returns="array"/>
      <scope name="ldap_list" docs="Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_ONELEVEL." ilk="function" signature="resource ldap_list ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )" returns="resource"/>
      <scope name="ldap_mod_add" docs="Adds one or more attributes to the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level additions are done by the ldap_add() function." ilk="function" signature="bool ldap_mod_add ( resource $link_identifier , string $dn , array $entry )" returns="bool"/>
      <scope name="ldap_mod_del" docs="Removes one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level deletions are done by the ldap_delete() function." ilk="function" signature="bool ldap_mod_del ( resource $link_identifier , string $dn , array $entry )" returns="bool"/>
      <scope name="ldap_mod_replace" docs="Replaces one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level modifications are done by the ldap_modify() function." ilk="function" signature="bool ldap_mod_replace ( resource $link_identifier , string $dn , array $entry )" returns="bool"/>
      <scope name="ldap_modify" docs="Modify the existing entries in the LDAP directory. The structure of the entry is same as in ldap_add()." ilk="function" signature="bool ldap_modify ( resource $link_identifier , string $dn , array $entry )" returns="bool"/>
      <scope name="ldap_next_attribute" docs="Retrieves the attributes in an entry. The first call to ldap_next_attribute() is made with the result_entry_identifier returned from ldap_first_attribute()." ilk="function" signature="string ldap_next_attribute ( resource $link_identifier , resource $result_entry_identifier )" returns="string"/>
      <scope name="ldap_next_entry" docs="Retrieve the entries stored in the result. Successive calls to the ldap_next_entry() return entries one by one till there are no more entries. The first call to ldap_next_entry() is made after the call to ldap_first_entry() with the result_entry_identifier as returned from the ldap_first_entry()." ilk="function" signature="resource ldap_next_entry ( resource $link_identifier , resource $result_entry_identifier )" returns="resource"/>
      <scope name="ldap_next_reference" docs="Undocumented function." ilk="function" signature="resource ldap_next_reference ( resource $link , resource $entry )" returns="resource"/>
      <scope name="ldap_parse_reference" docs="Undocumented function." ilk="function" signature="bool ldap_parse_reference ( resource $link , resource $entry , array &amp;$referrals )" returns="bool"/>
      <scope name="ldap_parse_result" docs="Undocumented function." ilk="function" signature="bool ldap_parse_result ( resource $link , resource $result , int &amp;$errcode [, string &amp;$matcheddn [, string &amp;$errmsg [, array &amp;$referrals ]]] )" returns="bool"/>
      <scope name="ldap_read" docs="Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the directory." ilk="function" signature="resource ldap_read ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )" returns="resource"/>
      <scope name="ldap_rename" docs="The entry specified by dn is renamed/moved." ilk="function" signature="bool ldap_rename ( resource $link_identifier , string $dn , string $newrdn , string $newparent , bool $deleteoldrdn )" returns="bool"/>
      <scope name="ldap_search" docs="Performs the search for a specified filter on the directory with the scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the entire directory." ilk="function" signature="resource ldap_search ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )" returns="resource"/>
      <scope name="ldap_set_option" docs="Sets the value of the specified option to be newval." ilk="function" signature="bool ldap_set_option ( resource $link_identifier , int $option , mixed $newval )" returns="bool"/>
      <scope name="ldap_set_rebind_proc" docs="Undocumented function." ilk="function" signature="bool ldap_set_rebind_proc ( resource $link , callback $callback )" returns="bool"/>
      <scope name="ldap_sort" docs="Undocumented function." ilk="function" signature="bool ldap_sort ( resource $link , resource $result , string $sortfilter )" returns="bool"/>
      <scope name="ldap_start_tls" docs="Undocumented function." ilk="function" signature="bool ldap_start_tls ( resource $link )" returns="bool"/>
      <scope name="ldap_t61_to_8859" docs="Undocumented function." ilk="function" signature="string ldap_t61_to_8859 ( string $value )" returns="string"/>
      <scope name="ldap_unbind" docs="Unbinds from the LDAP directory." ilk="function" signature="bool ldap_unbind ( resource $link_identifier )" returns="bool"/>
      <scope name="levenshtein" docs="This function returns the Levenshtein-Distance between the two argument strings or -1, if one of the argument strings is longer than the limit of 255 characters." ilk="function" signature="int levenshtein ( string $str1 , string $str2 [, int $cost_ins ], int $cost_rep , int $cost_del )" returns="int"/>
      <scope name="linkinfo" docs="Gets information about a link." ilk="function" signature="int linkinfo ( string $path )" returns="int"/>
      <scope name="localeconv" docs="Returns an associative array containing localized numeric and monetary formatting information." ilk="function" signature="array localeconv ( void )" returns="array"/>
      <scope name="localtime" docs="The localtime() function returns an array identical to that of the structure returned by the C function call." ilk="function" signature="array localtime ([ int $timestamp [, bool $is_associative ]] )" returns="array"/>
      <scope name="log" docs="If the optional base parameter is specified, log() returns logbase arg, otherwise log() returns the natural logarithm of arg." ilk="function" signature="float log ( float $arg [, float $base ] )" returns="float"/>
      <scope name="log10" docs="Returns the base-10 logarithm of arg." ilk="function" signature="float log10 ( float $arg )" returns="float"/>
      <scope name="log1p" docs="log1p() returns log(1 + number) computed in a way that is accurante even when the value of number is close to zero. log() might only return log(1) in this case due to lack of precision." ilk="function" signature="float log1p ( float $number )" returns="float"/>
      <scope name="long2ip" docs="The function long2ip() generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address representation." ilk="function" signature="string long2ip ( int $proper_address )" returns="string"/>
      <scope name="lstat" docs="Gathers the statistics of the file or symbolic link named by filename." ilk="function" signature="array lstat ( string $filename )" returns="array"/>
      <scope name="ltrim" docs="Strip whitespace (or other characters) from the beginning of a string." ilk="function" signature="string ltrim ( string $str [, string $charlist ] )" returns="string"/>
      <scope name="m_checkstatus" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_checkstatus ( resource $conn , int $identifier )" returns="int"/>
      <scope name="m_completeauthorizations" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_completeauthorizations ( resource $conn , int &amp;$array )" returns="int"/>
      <scope name="m_connect" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_connect ( resource $conn )" returns="int"/>
      <scope name="m_connectionerror" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="string m_connectionerror ( resource $conn )" returns="string"/>
      <scope name="m_deletetrans" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="bool m_deletetrans ( resource $conn , int $identifier )" returns="bool"/>
      <scope name="m_destroyconn" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="bool m_destroyconn ( resource $conn )" returns="bool"/>
      <scope name="m_destroyengine" docs="" ilk="function" signature="void m_destroyengine ( void )" returns="void"/>
      <scope name="m_getcell" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="string m_getcell ( resource $conn , int $identifier , string $column , int $row )" returns="string"/>
      <scope name="m_getcellbynum" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="string m_getcellbynum ( resource $conn , int $identifier , int $column , int $row )" returns="string"/>
      <scope name="m_getcommadelimited" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="string m_getcommadelimited ( resource $conn , int $identifier )" returns="string"/>
      <scope name="m_getheader" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="string m_getheader ( resource $conn , int $identifier , int $column_num )" returns="string"/>
      <scope name="m_initconn" docs="Returns an MCVE_CONN resource." ilk="function" signature="resource m_initconn ( void )" returns="resource"/>
      <scope name="m_initengine" docs="location" ilk="function" signature="int m_initengine ( string $location )" returns="int"/>
      <scope name="m_iscommadelimited" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_iscommadelimited ( resource $conn , int $identifier )" returns="int"/>
      <scope name="m_maxconntimeout" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="bool m_maxconntimeout ( resource $conn , int $secs )" returns="bool"/>
      <scope name="m_monitor" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_monitor ( resource $conn )" returns="int"/>
      <scope name="m_numcolumns" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_numcolumns ( resource $conn , int $identifier )" returns="int"/>
      <scope name="m_numrows" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_numrows ( resource $conn , int $identifier )" returns="int"/>
      <scope name="m_parsecommadelimited" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_parsecommadelimited ( resource $conn , int $identifier )" returns="int"/>
      <scope name="m_responseparam" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="string m_responseparam ( resource $conn , int $identifier , string $key )" returns="string"/>
      <scope name="m_returnstatus" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_returnstatus ( resource $conn , int $identifier )" returns="int"/>
      <scope name="m_setblocking" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_setblocking ( resource $conn , int $tf )" returns="int"/>
      <scope name="m_setdropfile" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_setdropfile ( resource $conn , string $directory )" returns="int"/>
      <scope name="m_setip" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_setip ( resource $conn , string $host , int $port )" returns="int"/>
      <scope name="m_setssl_files" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_setssl_files ( resource $conn , string $sslkeyfile , string $sslcertfile )" returns="int"/>
      <scope name="m_setssl" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_setssl ( resource $conn , string $host , int $port )" returns="int"/>
      <scope name="m_settimeout" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_settimeout ( resource $conn , int $seconds )" returns="int"/>
      <scope name="m_transactionssent" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_transactionssent ( resource $conn )" returns="int"/>
      <scope name="m_transinqueue" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_transinqueue ( resource $conn )" returns="int"/>
      <scope name="m_transnew" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_transnew ( resource $conn )" returns="int"/>
      <scope name="m_transsend" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="int m_transsend ( resource $conn , int $identifier )" returns="int"/>
      <scope name="m_uwait" docs="microsecs" ilk="function" signature="int m_uwait ( int $microsecs )" returns="int"/>
      <scope name="m_verifyconnection" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="bool m_verifyconnection ( resource $conn , int $tf )" returns="bool"/>
      <scope name="m_verifysslcert" docs="connAn MCVE_CONN resource returned by m_initengine()." ilk="function" signature="bool m_verifysslcert ( resource $conn , int $tf )" returns="bool"/>
      <scope name="mail" docs="Sends an email." ilk="function" signature="bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )" returns="bool"/>
      <scope name="max" docs="Returns the maximum number of elements in the collection." ilk="function" signature="int max ( void )" returns="int"/>
      <scope name="mb_convert_case" docs="mb_convert_case() returns case folded version of string converted in the way specified by mode." ilk="function" signature="string mb_convert_case ( string $str , int $mode [, string $encoding ] )" returns="string"/>
      <scope name="mb_convert_encoding" docs="mb_convert_encoding() converts character encoding of string str from from_encoding to to_encoding." ilk="function" signature="string mb_convert_encoding ( string $str , string $to_encoding [, mixed $from_encoding ] )" returns="string"/>
      <scope name="mb_convert_kana" docs="mb_convert_kana() performs &amp;quot;han-kaku&amp;quot; - &amp;quot;zen-kaku&amp;quot; conversion for string str. It returns converted string. This function is only useful for Japanese." ilk="function" signature="string mb_convert_kana ( string $str [, string $option [, string $encoding ]] )" returns="string"/>
      <scope name="mb_convert_variables" docs="mb_convert_variables() convert character encoding of variables vars in encoding from_encoding to encoding to_encoding. It returns character encoding before conversion for success, FALSE for failure." ilk="function" signature="string mb_convert_variables ( string $to_encoding , mixed $from_encoding , mixed &amp;$vars [, mixed &amp;$... ] )" returns="string"/>
      <scope name="mb_decode_mimeheader" docs="mb_decode_mimeheader() decodes encoded-word string str in MIME header." ilk="function" signature="string mb_decode_mimeheader ( string $str )" returns="string"/>
      <scope name="mb_decode_numericentity" docs="Convert numeric string reference of string str in specified block to character. It returns converted string." ilk="function" signature="string mb_decode_numericentity ( string $str , array $convmap [, string $encoding ] )" returns="string"/>
      <scope name="mb_detect_encoding" docs="mb_detect_encoding() detects character encoding in string str. It returns detected character encoding." ilk="function" signature="string mb_detect_encoding ( string $str [, mixed $encoding_list [, bool $strict ]] )" returns="string"/>
      <scope name="mb_detect_order" docs="mb_detect_order() sets automatic character encoding detection order to encoding_list. It returns TRUE for success, FALSE for failure." ilk="function" signature="mixed mb_detect_order ([ mixed $encoding_list ] )" returns="mixed"/>
      <scope name="mb_encode_mimeheader" docs="mb_encode_mimeheader() encodes a given string str by the MIME header encoding scheme. Returns a converted version of the string represented in ASCII." ilk="function" signature="string mb_encode_mimeheader ( string $str [, string $charset [, string $transfer_encoding [, string $linefeed [, int $indent ]]]] )" returns="string"/>
      <scope name="mb_encode_numericentity" docs="mb_encode_numericentity() converts specified character codes in string str from HTML numeric character reference to character code. It returns converted string." ilk="function" signature="string mb_encode_numericentity ( string $str , array $convmap [, string $encoding ] )" returns="string"/>
      <scope name="mb_ereg_match" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="bool mb_ereg_match ( string $pattern , string $string [, string $option ] )" returns="bool"/>
      <scope name="mb_ereg_replace" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="string mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option ] )" returns="string"/>
      <scope name="mb_ereg_search_getpos" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="int mb_ereg_search_getpos ( void )" returns="int"/>
      <scope name="mb_ereg_search_getregs" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="array mb_ereg_search_getregs ( void )" returns="array"/>
      <scope name="mb_ereg_search_init" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="bool mb_ereg_search_init ( string $string [, string $pattern [, string $option ]] )" returns="bool"/>
      <scope name="mb_ereg_search_pos" docs="The string for match is specified by mb_ereg_search_init(). If it is not specified, the previous one will be used." ilk="function" signature="array mb_ereg_search_pos ([ string $pattern [, string $option ]] )" returns="array"/>
      <scope name="mb_ereg_search_regs" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="array mb_ereg_search_regs ([ string $pattern [, string $option ]] )" returns="array"/>
      <scope name="mb_ereg_search_setpos" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="bool mb_ereg_search_setpos ( int $position )" returns="bool"/>
      <scope name="mb_ereg_search" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="bool mb_ereg_search ([ string $pattern [, string $option ]] )" returns="bool"/>
      <scope name="mb_ereg" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="int mb_ereg ( string $pattern , string $string [, array $regs ] )" returns="int"/>
      <scope name="mb_eregi_replace" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="string mb_eregi_replace ( string $pattern , string $replace , string $string [, string $option ] )" returns="string"/>
      <scope name="mb_eregi" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="int mb_eregi ( string $pattern , string $string [, array $regs ] )" returns="int"/>
      <scope name="mb_get_info" docs="If type isn&amp;#039;t specified or is specified to &amp;quot;all&amp;quot;, an array having the elements &amp;quot;internal_encoding&amp;quot;, &amp;quot;http_output&amp;quot;, &amp;quot;http_input&amp;quot;, &amp;quot;func_overload&amp;quot;, &amp;quot;mail_charset&amp;quot;, &amp;quot;mail_header_encoding&amp;quot;, &amp;quot;mail_body_encoding&amp;quot; will be returned. The last three elements are available since PHP 5.1.3." ilk="function" signature="mixed mb_get_info ([ string $type ] )" returns="mixed"/>
      <scope name="mb_http_input" docs="type: Input string specifies input type. &amp;quot;G&amp;quot; for GET, &amp;quot;P&amp;quot; for POST, &amp;quot;C&amp;quot; for COOKIE, &amp;quot;S&amp;quot; for string, &amp;quot;L&amp;quot; for list, &amp;quot;I&amp;quot; for whole list (will return array). If type is omitted, it returns last input type processed." ilk="function" signature="mixed mb_http_input ([ string $type ] )" returns="mixed"/>
      <scope name="mb_http_output" docs="If encoding is set, mb_http_output() sets HTTP output character encoding to encoding. Output after this function is converted to encoding. mb_http_output() returns TRUE for success and FALSE for failure." ilk="function" signature="mixed mb_http_output ([ string $encoding ] )" returns="mixed"/>
      <scope name="mb_internal_encoding" docs="mb_internal_encoding() sets internal character encoding to encoding If parameter is omitted, it returns current internal encoding." ilk="function" signature="mixed mb_internal_encoding ([ string $encoding ] )" returns="mixed"/>
      <scope name="mb_language" docs="mb_language() sets language. If language is omitted, it returns current language as string." ilk="function" signature="mixed mb_language ([ string $language ] )" returns="mixed"/>
      <scope name="mb_output_handler" docs="mb_output_handler() is ob_start() callback function. mb_output_handler() converts characters in output buffer from internal character encoding to HTTP output character encoding." ilk="function" signature="string mb_output_handler ( string $contents , int $status )" returns="string"/>
      <scope name="mb_parse_str" docs="mb_parse_str() parses GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data, it can only used for GET data for now. It preses URL encoded data, detects encoding, converts coding to internal encoding and set values to result array or global variables." ilk="function" signature="bool mb_parse_str ( string $encoded_string [, array &amp;$result ] )" returns="bool"/>
      <scope name="mb_preferred_mime_name" docs="mb_preferred_mime_name() returns MIME charset string for character encoding encoding. It returns charset string." ilk="function" signature="string mb_preferred_mime_name ( string $encoding )" returns="string"/>
      <scope name="mb_regex_encoding" docs="If the optional parameter encoding is specified, it is set to the character encoding for multibyte regex. The default value is the internal character encoding." ilk="function" signature="mixed mb_regex_encoding ([ string $encoding ] )" returns="mixed"/>
      <scope name="mb_regex_set_options" docs="Returns the previous options. If options is omitted, it returns the string that describes the current options." ilk="function" signature="string mb_regex_set_options ([ string $options ] )" returns="string"/>
      <scope name="mb_send_mail" docs="mb_send_mail() sends email. Headers and message are converted and encoded according to mb_language() setting. mb_send_mail() is wrapper function of mail(). See mail() for details." ilk="function" signature="bool mb_send_mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameter ]] )" returns="bool"/>
      <scope name="mb_split" docs="The internal encoding or the character encoding specified in mb_regex_encoding() will be used as character encoding." ilk="function" signature="array mb_split ( string $pattern , string $string [, int $limit ] )" returns="array"/>
      <scope name="mb_strcut" docs="mb_strcut() returns the portion of str specified by the start and length parameters." ilk="function" signature="string mb_strcut ( string $str , int $start [, int $length [, string $encoding ]] )" returns="string"/>
      <scope name="mb_strimwidth" docs="mb_strimwidth() truncates string str to specified width. It returns truncated string." ilk="function" signature="string mb_strimwidth ( string $str , int $start , int $width [, string $trimmarker [, string $encoding ]] )" returns="string"/>
      <scope name="mb_strlen" docs="mb_strlen() returns number of characters in string str having character encoding encoding. A multi-byte character is counted as 1." ilk="function" signature="int mb_strlen ( string $str [, string $encoding ] )" returns="int"/>
      <scope name="mb_strpos" docs="mb_strpos() returns the numeric position of the first occurrence of needle in the haystack string. If needle is not found, it returns FALSE." ilk="function" signature="int mb_strpos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )" returns="int"/>
      <scope name="mb_strrpos" docs="mb_strrpos() returns the numeric position of the last occurrence of needle in the haystack string. If needle is not found, it returns FALSE." ilk="function" signature="int mb_strrpos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )" returns="int"/>
      <scope name="mb_strtolower" docs="mb_strtolower() returns str with all alphabetic characters converted to lowercase." ilk="function" signature="string mb_strtolower ( string $str [, string $encoding ] )" returns="string"/>
      <scope name="mb_strtoupper" docs="mb_strtoupper() returns str with all alphabetic characters converted to uppercase." ilk="function" signature="string mb_strtoupper ( string $str [, string $encoding ] )" returns="string"/>
      <scope name="mb_strwidth" docs="mb_strwidth() returns width of string str." ilk="function" signature="int mb_strwidth ( string $str [, string $encoding ] )" returns="int"/>
      <scope name="mb_substitute_character" docs="mb_substitute_character() specifies substitution character when input character encoding is invalid or character code is not exist in output character encoding. Invalid characters may be substituted NULL(no output), string or integer value (Unicode character code value)." ilk="function" signature="mixed mb_substitute_character ([ mixed $substrchar ] )" returns="mixed"/>
      <scope name="mb_substr_count" docs="mb_substr_count() returns the number of times the needle substring occurs in the haystack string." ilk="function" signature="int mb_substr_count ( string $haystack , string $needle [, string $encoding ] )" returns="int"/>
      <scope name="mb_substr" docs="mb_substr() returns the portion of str specified by the start and length parameters." ilk="function" signature="string mb_substr ( string $str , int $start [, int $length [, string $encoding ]] )" returns="string"/>
      <scope name="mcal_append_event" docs="mcal_append_event() stores the global event into an MCAL calendar for the stream mcal_stream." ilk="function" signature="int mcal_append_event ( int $mcal_stream )" returns="int"/>
      <scope name="mcal_close" docs="Closes the given mcal stream." ilk="function" signature="bool mcal_close ( int $mcal_stream [, int $flags ] )" returns="bool"/>
      <scope name="mcal_create_calendar" docs="Creates a new calendar named calendar." ilk="function" signature="bool mcal_create_calendar ( int $stream , string $calendar )" returns="bool"/>
      <scope name="mcal_date_compare" docs="mcal_date_compare() Compares the two given dates, returns &amp;lt;0, 0, &amp;gt;0 if a&amp;lt;b, a==b, a&amp;gt;b respectively." ilk="function" signature="int mcal_date_compare ( int $a_year , int $a_month , int $a_day , int $b_year , int $b_month , int $b_day )" returns="int"/>
      <scope name="mcal_date_valid" docs="mcal_date_valid() Returns TRUE if the given year, month and day is a valid date, FALSE if not." ilk="function" signature="bool mcal_date_valid ( int $year , int $month , int $day )" returns="bool"/>
      <scope name="mcal_day_of_week" docs="mcal_day_of_week() returns the day of the week of the given date. Possible return values range from 0 for Sunday through 6 for Saturday." ilk="function" signature="int mcal_day_of_week ( int $year , int $month , int $day )" returns="int"/>
      <scope name="mcal_day_of_year" docs="mcal_day_of_year() returns the day of the year of the given date." ilk="function" signature="int mcal_day_of_year ( int $year , int $month , int $day )" returns="int"/>
      <scope name="mcal_days_in_month" docs="mcal_days_in_month() returns the number of days in the month month, taking into account if the considered year is a leap year or not." ilk="function" signature="int mcal_days_in_month ( int $month , int $leap_year )" returns="int"/>
      <scope name="mcal_delete_calendar" docs="Deletes the calendar named calendar." ilk="function" signature="bool mcal_delete_calendar ( int $stream , string $calendar )" returns="bool"/>
      <scope name="mcal_delete_event" docs="mcal_delete_event() deletes the calendar event specified by the event_id." ilk="function" signature="bool mcal_delete_event ( int $mcal_stream , int $event_id )" returns="bool"/>
      <scope name="mcal_event_add_attribute" docs="mcal_event_add_attribute() adds an attribute to the stream&amp;#039;s global event structure with the value given by &amp;quot;value&amp;quot;." ilk="function" signature="bool mcal_event_add_attribute ( int $stream , string $attribute , string $value )" returns="bool"/>
      <scope name="mcal_event_init" docs="mcal_event_init() initializes a streams global event structure. this effectively sets all elements of the structure to 0, or the default settings." ilk="function" signature="void mcal_event_init ( int $stream )" returns="void"/>
      <scope name="mcal_event_set_alarm" docs="mcal_event_set_alarm() sets the streams global event structure&amp;#039;s alarm to the given minutes before the event." ilk="function" signature="void mcal_event_set_alarm ( int $stream , int $alarm )" returns="void"/>
      <scope name="mcal_event_set_category" docs="mcal_event_set_category() sets the streams global event structure&amp;#039;s category to the given string." ilk="function" signature="void mcal_event_set_category ( int $stream , string $category )" returns="void"/>
      <scope name="mcal_event_set_class" docs="mcal_event_set_class() sets the streams global event structure&amp;#039;s class to the given value. The class is either 1 for public, or 0 for private." ilk="function" signature="void mcal_event_set_class ( int $stream , int $class )" returns="void"/>
      <scope name="mcal_event_set_description" docs="mcal_event_set_description() sets the streams global event structure&amp;#039;s description to the given string." ilk="function" signature="void mcal_event_set_description ( int $stream , string $description )" returns="void"/>
      <scope name="mcal_event_set_end" docs="mcal_event_set_end() sets the streams global event structure&amp;#039;s end date and time to the given values." ilk="function" signature="void mcal_event_set_end ( int $stream , int $year , int $month , int $day [, int $hour [, int $min [, int $sec ]]] )" returns="void"/>
      <scope name="mcal_event_set_recur_daily" docs="mcal_event_set_recur_daily() sets the streams global event structure&amp;#039;s recurrence to the given value to be reoccurring on a daily basis, ending at the given date." ilk="function" signature="void mcal_event_set_recur_daily ( int $stream , int $year , int $month , int $day , int $interval )" returns="void"/>
      <scope name="mcal_event_set_recur_monthly_mday" docs="mcal_event_set_recur_monthly_mday() sets the streams global event structure&amp;#039;s recurrence to the given value to be reoccurring on a monthly by month day basis, ending at the given date." ilk="function" signature="void mcal_event_set_recur_monthly_mday ( int $stream , int $year , int $month , int $day , int $interval )" returns="void"/>
      <scope name="mcal_event_set_recur_monthly_wday" docs="mcal_event_set_recur_monthly_wday() sets the streams global event structure&amp;#039;s recurrence to the given value to be reoccurring on a monthly by week basis, ending at the given date." ilk="function" signature="void mcal_event_set_recur_monthly_wday ( int $stream , int $year , int $month , int $day , int $interval )" returns="void"/>
      <scope name="mcal_event_set_recur_none" docs="mcal_event_set_recur_none() sets the streams global event structure to not recur (event-&amp;gt;recur_type is set to MCAL_RECUR_NONE)." ilk="function" signature="void mcal_event_set_recur_none ( int $stream )" returns="void"/>
      <scope name="mcal_event_set_recur_weekly" docs="mcal_event_set_recur_weekly() sets the streams global event structure&amp;#039;s recurrence to the given value to be reoccurring on a weekly basis, ending at the given date." ilk="function" signature="void mcal_event_set_recur_weekly ( int $stream , int $year , int $month , int $day , int $interval , int $weekdays )" returns="void"/>
      <scope name="mcal_event_set_recur_yearly" docs="mcal_event_set_recur_yearly() sets the streams global event structure&amp;#039;s recurrence to the given value to be reoccurring on a yearly basis,ending at the given date." ilk="function" signature="void mcal_event_set_recur_yearly ( int $stream , int $year , int $month , int $day , int $interval )" returns="void"/>
      <scope name="mcal_event_set_start" docs="mcal_event_set_start() sets the streams global event structure&amp;#039;s start date and time to the given values." ilk="function" signature="void mcal_event_set_start ( int $stream , int $year , int $month , int $day [, int $hour [, int $min [, int $sec ]]] )" returns="void"/>
      <scope name="mcal_event_set_title" docs="mcal_event_set_title() sets the streams global event structure&amp;#039;s title to the given string." ilk="function" signature="void mcal_event_set_title ( int $stream , string $title )" returns="void"/>
      <scope name="mcal_expunge" docs="mcal_expunge() deletes all events which have been previously marked for deletion." ilk="function" signature="bool mcal_expunge ( int $stream )" returns="bool"/>
      <scope name="mcal_fetch_current_stream_event" docs="mcal_fetch_current_stream_event() returns the current stream&amp;#039;s event structure as an object containing: int id - ID of that event. int public - TRUE if the event if public, FALSE if it is private. string category - Category string of the event. string title - Title string of the event. string description - Description string of the event. int alarm - number of minutes before the event to send an alarm/reminder. object start - Object containing a datetime entry. object end - Object containing a datetime entry. int recur_type - recurrence type int recur_interval - recurrence interval datetime recur_enddate - recurrence end date int recur_data - recurrence data All datetime entries consist of an object that contains: int year - year int month - month int mday - day of month int hour - hour int min - minutes int sec - seconds int alarm - minutes before event to send an alarm" ilk="function" signature="object mcal_fetch_current_stream_event ( int $stream )" returns="object"/>
      <scope name="mcal_fetch_event" docs="mcal_fetch_event() fetches an event from the calendar stream specified by id." ilk="function" signature="object mcal_fetch_event ( int $mcal_stream , int $event_id [, int $options ] )" returns="object"/>
      <scope name="mcal_is_leap_year" docs="mcal_is_leap_year() returns 1 if the given year is a leap year, 0 if not." ilk="function" signature="bool mcal_is_leap_year ( int $year )" returns="bool"/>
      <scope name="mcal_list_alarms" docs="Returns an array of event ID&amp;#039;s that has an alarm going off between the start and end dates, or if just a stream is given, uses the start and end dates in the global event structure." ilk="function" signature="array mcal_list_alarms ( int $mcal_stream [, int $begin_year ], int $begin_month , int $begin_day , int $end_year , int $end_month , int $end_day )" returns="array"/>
      <scope name="mcal_list_events" docs="Returns an array of ID&amp;#039;s that are between the start and end dates, or if just a stream is given, uses the start and end dates in the global event structure." ilk="function" signature="array mcal_list_events ( int $mcal_stream [, int $begin_year ], int $begin_month , int $begin_day , int $end_year , int $end_month , int $end_day )" returns="array"/>
      <scope name="mcal_next_recurrence" docs="mcal_next_recurrence() returns an object filled with the next date the event occurs, on or after the supplied date. Returns empty date field if event does not occur or something is invalid. Uses weekstart to determine what day is considered the beginning of the week." ilk="function" signature="object mcal_next_recurrence ( int $stream , int $weekstart , array $next )" returns="object"/>
      <scope name="mcal_open" docs="Returns an MCAL stream on success, FALSE on error." ilk="function" signature="int mcal_open ( string $calendar , string $username , string $password [, int $options ] )" returns="int"/>
      <scope name="mcal_popen" docs="Returns an MCAL stream on success, FALSE on error." ilk="function" signature="int mcal_popen ( string $calendar , string $username , string $password [, int $options ] )" returns="int"/>
      <scope name="mcal_rename_calendar" docs="Renames the calendar old_name to new_name." ilk="function" signature="bool mcal_rename_calendar ( int $stream , string $old_name , string $new_name )" returns="bool"/>
      <scope name="mcal_reopen" docs="Reopens an MCAL stream to a new calendar." ilk="function" signature="bool mcal_reopen ( int $mcal_stream , string $calendar [, int $options ] )" returns="bool"/>
      <scope name="mcal_snooze" docs="mcal_snooze() turns off an alarm for a calendar event specified by the stream_id and event_id." ilk="function" signature="bool mcal_snooze ( int $stream_id , int $event_id )" returns="bool"/>
      <scope name="mcal_store_event" docs="mcal_store_event() stores the modifications to the current global event for the given stream." ilk="function" signature="int mcal_store_event ( int $mcal_stream )" returns="int"/>
      <scope name="mcal_time_valid" docs="mcal_time_valid() Returns TRUE if the given hour, minutes and seconds is a valid time, FALSE if not." ilk="function" signature="bool mcal_time_valid ( int $hour , int $minutes , int $seconds )" returns="bool"/>
      <scope name="mcal_week_of_year" docs="mcal_week_of_year() returns the week number of the given date." ilk="function" signature="int mcal_week_of_year ( int $day , int $month , int $year )" returns="int"/>
      <scope name="mcrypt_cbc" docs="The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT." ilk="function" signature="string mcrypt_cbc ( int $cipher , string $key , string $data , int $mode [, string $iv ] )" returns="string"/>
      <scope name="mcrypt_cfb" docs="The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT." ilk="function" signature="string mcrypt_cfb ( int $cipher , string $key , string $data , int $mode , string $iv )" returns="string"/>
      <scope name="mcrypt_create_iv" docs="mcrypt_create_iv() is used to create an IV." ilk="function" signature="string mcrypt_create_iv ( int $size [, int $source ] )" returns="string"/>
      <scope name="mcrypt_decrypt" docs="mcrypt_decrypt() decrypts the data and returns the unencrypted data." ilk="function" signature="string mcrypt_decrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )" returns="string"/>
      <scope name="mcrypt_ecb" docs="The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT." ilk="function" signature="string mcrypt_ecb ( int $cipher , string $key , string $data , int $mode )" returns="string"/>
      <scope name="mcrypt_enc_get_algorithms_name" docs="This function returns the name of the algorithm." ilk="function" signature="string mcrypt_enc_get_algorithms_name ( resource $td )" returns="string"/>
      <scope name="mcrypt_enc_get_block_size" docs="This function returns the block size of the algorithm specified by the encryption descriptor td in bytes." ilk="function" signature="int mcrypt_enc_get_block_size ( resource $td )" returns="int"/>
      <scope name="mcrypt_enc_get_iv_size" docs="This function returns the size of the iv of the algorithm specified by the encryption descriptor in bytes. If it returns &amp;#039;0&amp;#039; then the IV is ignored in the algorithm. An IV is used in cbc, cfb and ofb modes, and in some algorithms in stream mode." ilk="function" signature="int mcrypt_enc_get_iv_size ( resource $td )" returns="int"/>
      <scope name="mcrypt_enc_get_key_size" docs="This function returns the maximum supported key size of the algorithm specified by the encryption descriptor td in bytes." ilk="function" signature="int mcrypt_enc_get_key_size ( resource $td )" returns="int"/>
      <scope name="mcrypt_enc_get_modes_name" docs="This function returns the name of the mode." ilk="function" signature="string mcrypt_enc_get_modes_name ( resource $td )" returns="string"/>
      <scope name="mcrypt_enc_get_supported_key_sizes" docs="Returns an array with the key sizes supported by the algorithm specified by the encryption descriptor. If it returns an empty array then all key sizes between 1 and mcrypt_enc_get_key_size() are supported by the algorithm." ilk="function" signature="array mcrypt_enc_get_supported_key_sizes ( resource $td )" returns="array"/>
      <scope name="mcrypt_enc_is_block_algorithm_mode" docs="This function returns TRUE if the mode is for use with block algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb)." ilk="function" signature="bool mcrypt_enc_is_block_algorithm_mode ( resource $td )" returns="bool"/>
      <scope name="mcrypt_enc_is_block_algorithm" docs="This function returns TRUE if the algorithm is a block algorithm, or FALSE if it is a stream algorithm." ilk="function" signature="bool mcrypt_enc_is_block_algorithm ( resource $td )" returns="bool"/>
      <scope name="mcrypt_enc_is_block_mode" docs="This function returns TRUE if the mode outputs blocks of bytes or FALSE if it outputs bytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream)." ilk="function" signature="bool mcrypt_enc_is_block_mode ( resource $td )" returns="bool"/>
      <scope name="mcrypt_enc_self_test" docs="This function runs the self test on the algorithm specified by the descriptor td. If the self test succeeds it returns FALSE. In case of an error, it returns TRUE." ilk="function" signature="int mcrypt_enc_self_test ( resource $td )" returns="int"/>
      <scope name="mcrypt_encrypt" docs="mcrypt_encrypt() encrypts the data and returns the encrypted data." ilk="function" signature="string mcrypt_encrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )" returns="string"/>
      <scope name="mcrypt_generic_deinit" docs="This function terminates encryption specified by the encryption descriptor (td). It clears all buffers, but does not close the module. You need to call mcrypt_module_close() yourself. (But PHP does this for you at the end of the script.) Returns FALSE on error, or TRUE on success." ilk="function" signature="bool mcrypt_generic_deinit ( resource $td )" returns="bool"/>
      <scope name="mcrypt_generic_end" docs="Warning This function is deprecated, use mcrypt_generic_deinit() instead. It can cause crashes when used with mcrypt_module_close() due to multiple buffer frees." ilk="function" signature="bool mcrypt_generic_end ( resource $td )" returns="bool"/>
      <scope name="mcrypt_generic_init" docs="The maximum length of the key should be the one obtained by calling mcrypt_enc_get_key_size() and every value smaller than this is legal. The IV should normally have the size of the algorithms block size, but you must obtain the size by calling mcrypt_enc_get_iv_size(). IV is ignored in ECB. IV MUST exist in CFB, CBC, STREAM, nOFB and OFB modes. It needs to be random and unique (but not secret). The same IV must be used for encryption/decryption. If you do not want to use it you should set it to zeros, but this is not recommended." ilk="function" signature="int mcrypt_generic_init ( resource $td , string $key , string $iv )" returns="int"/>
      <scope name="mcrypt_generic" docs="This function encrypts data. The data is padded with &amp;quot;\0&amp;quot; to make sure the length of the data is n * blocksize. This function returns the encrypted data. Note that the length of the returned string can in fact be longer then the input, due to the padding of the data." ilk="function" signature="string mcrypt_generic ( resource $td , string $data )" returns="string"/>
      <scope name="mcrypt_get_block_size" docs="The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x." ilk="function" signature="int mcrypt_get_block_size ( int $cipher )" returns="int"/>
      <scope name="mcrypt_get_cipher_name" docs="mcrypt_get_cipher_name() is used to get the name of the specified cipher." ilk="function" signature="string mcrypt_get_cipher_name ( int $cipher )" returns="string"/>
      <scope name="mcrypt_get_iv_size" docs="mcrypt_get_iv_size() returns the size of the Initialisation Vector (IV) in bytes. On error the function returns FALSE. If the IV is ignored in the specified cipher/mode combination zero is returned." ilk="function" signature="int mcrypt_get_iv_size ( string $cipher , string $mode )" returns="int"/>
      <scope name="mcrypt_get_key_size" docs="The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x." ilk="function" signature="int mcrypt_get_key_size ( int $cipher )" returns="int"/>
      <scope name="mcrypt_list_algorithms" docs="mcrypt_list_algorithms() is used to get an array of all supported algorithms in the lib_dir parameter." ilk="function" signature="array mcrypt_list_algorithms ([ string $lib_dir ] )" returns="array"/>
      <scope name="mcrypt_list_modes" docs="mcrypt_list_modes() is used to get an array of all supported modes in the lib_dir." ilk="function" signature="array mcrypt_list_modes ([ string $lib_dir ] )" returns="array"/>
      <scope name="mcrypt_module_close" docs="This function closes the specified encryption handle." ilk="function" signature="bool mcrypt_module_close ( resource $td )" returns="bool"/>
      <scope name="mcrypt_module_get_algo_block_size" docs="This function returns the block size of the algorithm specified in bytes. The optional lib_dir parameter can contain the location where the mode module is on the system." ilk="function" signature="int mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] )" returns="int"/>
      <scope name="mcrypt_module_get_algo_key_size" docs="This function returns the maximum supported key size of the algorithm specified in bytes. The optional lib_dir parameter can contain the location where the mode module is on the system." ilk="function" signature="int mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] )" returns="int"/>
      <scope name="mcrypt_module_get_supported_key_sizes" docs="Returns an array with the key sizes supported by the specified algorithm. If it returns an empty array then all key sizes between 1 and mcrypt_module_get_algo_key_size() are supported by the algorithm. The optional lib_dir parameter can contain the location where the mode module is on the system." ilk="function" signature="array mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] )" returns="array"/>
      <scope name="mcrypt_module_is_block_algorithm_mode" docs="This function returns TRUE if the mode is for use with block algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb). The optional lib_dir parameter can contain the location where the mode module is on the system." ilk="function" signature="bool mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] )" returns="bool"/>
      <scope name="mcrypt_module_is_block_algorithm" docs="This function returns TRUE if the specified algorithm is a block algorithm, or FALSE is it is a stream algorithm. The optional lib_dir parameter can contain the location where the algorithm module is on the system." ilk="function" signature="bool mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] )" returns="bool"/>
      <scope name="mcrypt_module_is_block_mode" docs="This function returns TRUE if the mode outputs blocks of bytes or FALSE if it outputs just bytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream). The optional lib_dir parameter can contain the location where the mode module is on the system." ilk="function" signature="bool mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] )" returns="bool"/>
      <scope name="mcrypt_module_open" docs="This function opens the module of the algorithm and the mode to be used. The name of the algorithm is specified in algorithm, e.g. &amp;quot;twofish&amp;quot; or is one of the MCRYPT_ciphername constants. The module is closed by calling mcrypt_module_close(). Normally it returns an encryption descriptor, or FALSE on error." ilk="function" signature="resource mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory )" returns="resource"/>
      <scope name="mcrypt_module_self_test" docs="This function runs the self test on the algorithm specified. The optional lib_dir parameter can contain the location of where the algorithm module is on the system." ilk="function" signature="bool mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] )" returns="bool"/>
      <scope name="mcrypt_ofb" docs="The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT." ilk="function" signature="string mcrypt_ofb ( int $cipher , string $key , string $data , int $mode , string $iv )" returns="string"/>
      <scope name="md5_file" docs="Calculates the MD5 hash of the file specified by the filename parameter using the &amp;raquo; RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. The hash is a 32-character hexadecimal number." ilk="function" signature="string md5_file ( string $filename [, bool $raw_output ] )" returns="string"/>
      <scope name="md5" docs="Calculates the MD5 hash of str using the &amp;raquo; RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash." ilk="function" signature="string md5 ( string $str [, bool $raw_output ] )" returns="string"/>
      <scope name="mdecrypt_generic" docs="This function decrypts data. Note that the length of the returned string can in fact be longer then the unencrypted string, due to the padding of the data." ilk="function" signature="string mdecrypt_generic ( resource $td , string $data )" returns="string"/>
      <scope name="memory_get_usage" docs="Returns the amount of memory, in bytes, that&amp;#039;s currently being allocated to your PHP script." ilk="function" signature="int memory_get_usage ([ bool $real_usage ] )" returns="int"/>
      <scope name="metaphone" docs="Calculates the metaphone key of str." ilk="function" signature="string metaphone ( string $str [, int $phones ] )" returns="string"/>
      <scope name="method_exists" docs="Checks if the class method exists in the given object." ilk="function" signature="bool method_exists ( object $object , string $method_name )" returns="bool"/>
      <scope name="mhash_count" docs="Gets the highest available hash id." ilk="function" signature="int mhash_count ( void )" returns="int"/>
      <scope name="mhash_get_block_size" docs="Gets the size of a block of the specified hash." ilk="function" signature="int mhash_get_block_size ( int $hash )" returns="int"/>
      <scope name="mhash_get_hash_name" docs="Gets the name of the specified hash." ilk="function" signature="string mhash_get_hash_name ( int $hash )" returns="string"/>
      <scope name="mhash_keygen_s2k" docs="Generates a key according to the hash given a user provided password." ilk="function" signature="string mhash_keygen_s2k ( int $hash , string $password , string $salt , int $bytes )" returns="string"/>
      <scope name="mhash" docs="mhash() applies a hash function specified by hash to the data." ilk="function" signature="string mhash ( int $hash , string $data [, string $key ] )" returns="string"/>
      <scope name="microtime" docs="microtime() returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call." ilk="function" signature="mixed microtime ([ bool $get_as_float ] )" returns="mixed"/>
      <scope name="mime_content_type" docs="Returns the MIME content type for a file as determined by using information from the magic.mime file." ilk="function" signature="string mime_content_type ( string $filename )" returns="string"/>
      <scope name="min" docs="If the first and only parameter is an array, min() returns the lowest value in that array. If at least two parameters are provided, min() returns the smallest of these values." ilk="function" signature="mixed min ( array $values )" returns="mixed"/>
      <scope name="ming_setcubicthreshold" docs="Sets the threshold error for drawing cubic beziers." ilk="function" signature="void ming_setcubicthreshold ( int $threshold )" returns="void"/>
      <scope name="ming_setscale" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="void ming_setscale ( int $scale )" returns="void"/>
      <scope name="ming_useswfversion" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="void ming_useswfversion ( int $version )" returns="void"/>
      <scope name="mkdir" docs="Attempts to create the directory specified by pathname." ilk="function" signature="bool mkdir ( string $pathname [, int $mode [, bool $recursive [, resource $context ]]] )" returns="bool"/>
      <scope name="mktime" docs="Returns the Unix timestamp corresponding to the arguments given. This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified." ilk="function" signature="int mktime ([ int $hour [, int $minute [, int $second [, int $month [, int $day [, int $year [, int $is_dst ]]]]]]] )" returns="int"/>
      <scope name="money_format" docs="money_format() returns a formatted version of number. This function wraps the C library function strfmon(), with the difference that this implementation converts only one number at a time." ilk="function" signature="string money_format ( string $format , float $number )" returns="string"/>
      <scope name="move_uploaded_file" docs="This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP&amp;#039;s HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by destination." ilk="function" signature="bool move_uploaded_file ( string $filename , string $destination )" returns="bool"/>
      <scope name="msession_connect" docs="Undocumented function." ilk="function" signature="bool msession_connect ( string $host , string $port )" returns="bool"/>
      <scope name="msession_count" docs="Undocumented function." ilk="function" signature="int msession_count ( void )" returns="int"/>
      <scope name="msession_create" docs="Undocumented function." ilk="function" signature="bool msession_create ( string $session , string $classname , string $data )" returns="bool"/>
      <scope name="msession_destroy" docs="Undocumented function." ilk="function" signature="bool msession_destroy ( string $name )" returns="bool"/>
      <scope name="msession_disconnect" docs="Undocumented function." ilk="function" signature="void msession_disconnect ( void )" returns="void"/>
      <scope name="msession_find" docs="Undocumented function." ilk="function" signature="array msession_find ( string $name , string $value )" returns="array"/>
      <scope name="msession_get_array" docs="Undocumented function." ilk="function" signature="array msession_get_array ( string $session )" returns="array"/>
      <scope name="msession_get_data" docs="Undocumented function." ilk="function" signature="string msession_get_data ( string $session )" returns="string"/>
      <scope name="msession_get" docs="Undocumented function." ilk="function" signature="string msession_get ( string $session , string $name , string $value )" returns="string"/>
      <scope name="msession_inc" docs="Undocumented function." ilk="function" signature="string msession_inc ( string $session , string $name )" returns="string"/>
      <scope name="msession_list" docs="Undocumented function." ilk="function" signature="array msession_list ( void )" returns="array"/>
      <scope name="msession_listvar" docs="Used for searching sessions with common attributes." ilk="function" signature="array msession_listvar ( string $name )" returns="array"/>
      <scope name="msession_lock" docs="Undocumented function." ilk="function" signature="int msession_lock ( string $name )" returns="int"/>
      <scope name="msession_plugin" docs="Undocumented function." ilk="function" signature="string msession_plugin ( string $session , string $val [, string $param ] )" returns="string"/>
      <scope name="msession_randstr" docs="Undocumented function." ilk="function" signature="string msession_randstr ( int $param )" returns="string"/>
      <scope name="msession_set_array" docs="Undocumented function." ilk="function" signature="void msession_set_array ( string $session , array $tuples )" returns="void"/>
      <scope name="msession_set_data" docs="Undocumented function." ilk="function" signature="bool msession_set_data ( string $session , string $value )" returns="bool"/>
      <scope name="msession_set" docs="Undocumented function." ilk="function" signature="bool msession_set ( string $session , string $name , string $value )" returns="bool"/>
      <scope name="msession_timeout" docs="Undocumented function." ilk="function" signature="int msession_timeout ( string $session [, int $param ] )" returns="int"/>
      <scope name="msession_uniq" docs="Undocumented function." ilk="function" signature="string msession_uniq ( int $param , string $classname , string $data )" returns="string"/>
      <scope name="msession_unlock" docs="Undocumented function." ilk="function" signature="int msession_unlock ( string $session , int $key )" returns="int"/>
      <scope name="msg_get_queue" docs="msg_get_queue() returns an id that can be used to access the System V message queue with the given key. The first call creates the message queue with the optional perms. A second call to msg_get_queue() for the same key will return a different message queue identifier, but both identifiers access the same underlying message queue." ilk="function" signature="resource msg_get_queue ( int $key [, int $perms ] )" returns="resource"/>
      <scope name="msg_receive" docs="msg_receive() will receive the first message from the specified queue of the type specified by desiredmsgtype." ilk="function" signature="bool msg_receive ( resource $queue , int $desiredmsgtype , int &amp;$msgtype , int $maxsize , mixed &amp;$message [, bool $unserialize [, int $flags [, int &amp;$errorcode ]]] )" returns="bool"/>
      <scope name="msg_remove_queue" docs="msg_remove_queue() destroys the message queue specified by the queue. Only use this function when all processes have finished working with the message queue and you need to release the system resources held by it." ilk="function" signature="bool msg_remove_queue ( resource $queue )" returns="bool"/>
      <scope name="msg_send" docs="msg_send() sends a message of type msgtype (which MUST be greater than 0) to the message queue specified by queue." ilk="function" signature="bool msg_send ( resource $queue , int $msgtype , mixed $message [, bool $serialize [, bool $blocking [, int &amp;$errorcode ]]] )" returns="bool"/>
      <scope name="msg_set_queue" docs="msg_set_queue() allows you to change the values of the msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying message queue data structure." ilk="function" signature="bool msg_set_queue ( resource $queue , array $data )" returns="bool"/>
      <scope name="msg_stat_queue" docs="msg_stat_queue() returns the message queue meta data for the message queue specified by the queue. This is useful, for example, to determine which process sent the message that was just received." ilk="function" signature="array msg_stat_queue ( resource $queue )" returns="array"/>
      <scope name="msql_affected_rows" docs="Returns number of affected rows by the last SELECT, UPDATE or DELETE query associated with result." ilk="function" signature="int msql_affected_rows ( resource $result )" returns="int"/>
      <scope name="msql_close" docs="msql_close() closes the non-persistent connection to the mSQL server that&amp;#039;s associated with the specified link identifier." ilk="function" signature="bool msql_close ([ resource $link_identifier ] )" returns="bool"/>
      <scope name="msql_connect" docs="msql_connect() establishes a connection to a mSQL server." ilk="function" signature="resource msql_connect ([ string $hostname ] )" returns="resource"/>
      <scope name="msql_create_db" docs="msql_create_db() attempts to create a new database on the mSQL server." ilk="function" signature="bool msql_create_db ( string $database_name [, resource $link_identifier ] )" returns="bool"/>
      <scope name="msql_createdb" docs="Undocumented function." ilk="function" signature="msql_createdb()"/>
      <scope name="msql_data_seek" docs="msql_data_seek() moves the internal row pointer of the mSQL result associated with the specified query identifier to point to the specified row number. The next call to msql_fetch_row() would return that row." ilk="function" signature="bool msql_data_seek ( resource $result , int $row_number )" returns="bool"/>
      <scope name="msql_db_query" docs="msql_db_query() selects a database and executes a query on it." ilk="function" signature="resource msql_db_query ( string $database , string $query [, resource $link_identifier ] )" returns="resource"/>
      <scope name="msql_dbname" docs="Undocumented function." ilk="function" signature="msql_dbname()"/>
      <scope name="msql_drop_db" docs="msql_drop_db() attempts to drop (remove) a database from the mSQL server." ilk="function" signature="bool msql_drop_db ( string $database_name [, resource $link_identifier ] )" returns="bool"/>
      <scope name="msql_error" docs="msql_error() returns the last issued error by the mSQL server. Note that only the last error message is accessible with msql_error()." ilk="function" signature="string msql_error ( void )" returns="string"/>
      <scope name="msql_fetch_array" docs="msql_fetch_array() is an extended version of msql_fetch_row(). In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys." ilk="function" signature="array msql_fetch_array ( resource $result [, int $result_type ] )" returns="array"/>
      <scope name="msql_fetch_field" docs="msql_fetch_field() can be used in order to obtain information about fields in a certain query result." ilk="function" signature="object msql_fetch_field ( resource $result [, int $field_offset ] )" returns="object"/>
      <scope name="msql_fetch_object" docs="msql_fetch_object() is similar to msql_fetch_array(), with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names)." ilk="function" signature="object msql_fetch_object ( resource $result )" returns="object"/>
      <scope name="msql_fetch_row" docs="msql_fetch_row() fetches one row of data from the result associated with the specified query identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0." ilk="function" signature="array msql_fetch_row ( resource $result )" returns="array"/>
      <scope name="msql_field_flags" docs="msql_field_flags() returns the field flags of the specified field." ilk="function" signature="string msql_field_flags ( resource $result , int $field_offset )" returns="string"/>
      <scope name="msql_field_len" docs="msql_field_len() returns the length of the specified field." ilk="function" signature="int msql_field_len ( resource $result , int $field_offset )" returns="int"/>
      <scope name="msql_field_name" docs="msql_field_name() gets the name of the specified field index." ilk="function" signature="string msql_field_name ( resource $result , int $field_offset )" returns="string"/>
      <scope name="msql_field_seek" docs="Seeks to the specified field offset. If the next call to msql_fetch_field() won&amp;#039;t include a field offset, this field would be returned." ilk="function" signature="bool msql_field_seek ( resource $result , int $field_offset )" returns="bool"/>
      <scope name="msql_field_table" docs="Returns the name of the table that the specified field is in." ilk="function" signature="int msql_field_table ( resource $result , int $field_offset )" returns="int"/>
      <scope name="msql_field_type" docs="msql_field_type() gets the type of the specified field index." ilk="function" signature="string msql_field_type ( resource $result , int $field_offset )" returns="string"/>
      <scope name="msql_fieldflags" docs="Undocumented function." ilk="function" signature="msql_fieldflags()"/>
      <scope name="msql_fieldlen" docs="Undocumented function." ilk="function" signature="msql_fieldlen()"/>
      <scope name="msql_fieldname" docs="Undocumented function." ilk="function" signature="msql_fieldname()"/>
      <scope name="msql_fieldtable" docs="Undocumented function." ilk="function" signature="msql_fieldtable()"/>
      <scope name="msql_fieldtype" docs="Undocumented function." ilk="function" signature="msql_fieldtype()"/>
      <scope name="msql_free_result" docs="msql_free_result() frees the memory associated with query_identifier. When PHP completes a request, this memory is freed automatically, so you only need to call this function when you want to make sure you don&amp;#039;t use too much memory while the script is running." ilk="function" signature="bool msql_free_result ( resource $result )" returns="bool"/>
      <scope name="msql_list_dbs" docs="msql_list_tables() lists the databases available on the specified link_identifier." ilk="function" signature="resource msql_list_dbs ([ resource $link_identifier ] )" returns="resource"/>
      <scope name="msql_list_fields" docs="msql_list_fields() returns information about the given table." ilk="function" signature="resource msql_list_fields ( string $database , string $tablename [, resource $link_identifier ] )" returns="resource"/>
      <scope name="msql_list_tables" docs="msql_list_tables() lists the tables on the specified database." ilk="function" signature="resource msql_list_tables ( string $database [, resource $link_identifier ] )" returns="resource"/>
      <scope name="msql_num_fields" docs="msql_num_fields() returns the number of fields in a result set." ilk="function" signature="int msql_num_fields ( resource $result )" returns="int"/>
      <scope name="msql_num_rows" docs="msql_num_rows() returns the number of rows in a result set." ilk="function" signature="int msql_num_rows ( resource $query_identifier )" returns="int"/>
      <scope name="msql_numfields" docs="Undocumented function." ilk="function" signature="msql_numfields()"/>
      <scope name="msql_numrows" docs="Undocumented function." ilk="function" signature="msql_numrows()"/>
      <scope name="msql_pconnect" docs="msql_pconnect() acts very much like msql_connect() with two major differences." ilk="function" signature="resource msql_pconnect ([ string $hostname ] )" returns="resource"/>
      <scope name="msql_query" docs="msql_query() sends a query to the currently active database on the server that&amp;#039;s associated with the specified link identifier." ilk="function" signature="resource msql_query ( string $query [, resource $link_identifier ] )" returns="resource"/>
      <scope name="msql_regcase" docs="Undocumented function." ilk="function" signature="msql_regcase()"/>
      <scope name="msql_result" docs="msql_result() returns the contents of one cell from a mSQL result set." ilk="function" signature="string msql_result ( resource $result , int $row [, mixed $field ] )" returns="string"/>
      <scope name="msql_select_db" docs="msql_select_db() sets the current active database on the server that&amp;#039;s associated with the specified link_identifier." ilk="function" signature="bool msql_select_db ( string $database_name [, resource $link_identifier ] )" returns="bool"/>
      <scope name="msql_tablename" docs="Undocumented function." ilk="function" signature="msql_tablename()"/>
      <scope name="msql" docs="Undocumented function." ilk="function" signature="msql()"/>
      <scope name="mssql_bind" docs="Binds a parameter to a stored procedure or a remote stored procedure." ilk="function" signature="bool mssql_bind ( resource $stmt , string $param_name , mixed &amp;$var , int $type [, int $is_output [, int $is_null [, int $maxlen ]]] )" returns="bool"/>
      <scope name="mssql_close" docs="Closes the link to a MS SQL Server database that&amp;#039;s associated with the specified link identifier. If the link identifier isn&amp;#039;t specified, the last opened link is assumed." ilk="function" signature="bool mssql_close ([ resource $link_identifier ] )" returns="bool"/>
      <scope name="mssql_connect" docs="mssql_connect() establishes a connection to a MS SQL server. The servername argument has to be a valid servername that is defined in the &amp;#039;interfaces&amp;#039; file." ilk="function" signature="resource mssql_connect ([ string $servername [, string $username [, string $password [, bool $new_link ]]]] )" returns="resource"/>
      <scope name="mssql_data_seek" docs="mssql_data_seek() moves the internal row pointer of the MS SQL result associated with the specified result identifier to point to the specified row number, first row being number 0. The next call to mssql_fetch_row() would return that row." ilk="function" signature="bool mssql_data_seek ( resource $result_identifier , int $row_number )" returns="bool"/>
      <scope name="mssql_execute" docs="Executes a stored procedure on a MS SQL server database" ilk="function" signature="mixed mssql_execute ( resource $stmt [, bool $skip_results ] )" returns="mixed"/>
      <scope name="mssql_fetch_array" docs="mssql_fetch_array() is an extended version of mssql_fetch_row(). In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys." ilk="function" signature="array mssql_fetch_array ( resource $result [, int $result_type ] )" returns="array"/>
      <scope name="mssql_fetch_assoc" docs="Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. mssql_fetch_assoc() is equivalent to calling mssql_fetch_array() with MSSQL_ASSOC for the optional second parameter." ilk="function" signature="array mssql_fetch_assoc ( resource $result_id )" returns="array"/>
      <scope name="mssql_fetch_batch" docs="Returns the next batch of records" ilk="function" signature="int mssql_fetch_batch ( resource $result )" returns="int"/>
      <scope name="mssql_fetch_field" docs="mssql_fetch_field() can be used in order to obtain information about fields in a certain query result." ilk="function" signature="object mssql_fetch_field ( resource $result [, int $field_offset ] )" returns="object"/>
      <scope name="mssql_fetch_object" docs="mssql_fetch_object() is similar to mssql_fetch_array(), with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names)." ilk="function" signature="object mssql_fetch_object ( resource $result )" returns="object"/>
      <scope name="mssql_fetch_row" docs="mssql_fetch_row() fetches one row of data from the result associated with the specified result identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0." ilk="function" signature="array mssql_fetch_row ( resource $result )" returns="array"/>
      <scope name="mssql_field_length" docs="Returns the length of field no. offset in result." ilk="function" signature="int mssql_field_length ( resource $result [, int $offset ] )" returns="int"/>
      <scope name="mssql_field_name" docs="Returns the name of field no. offset in result." ilk="function" signature="string mssql_field_name ( resource $result [, int $offset ] )" returns="string"/>
      <scope name="mssql_field_seek" docs="Seeks to the specified field offset. If the next call to mssql_fetch_field() won&amp;#039;t include a field offset, this field would be returned." ilk="function" signature="bool mssql_field_seek ( resource $result , int $field_offset )" returns="bool"/>
      <scope name="mssql_field_type" docs="Returns the type of field no. offset in result." ilk="function" signature="string mssql_field_type ( resource $result [, int $offset ] )" returns="string"/>
      <scope name="mssql_free_result" docs="mssql_free_result() only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call mssql_free_result() with the result identifier as an argument and the associated result memory will be freed." ilk="function" signature="bool mssql_free_result ( resource $result )" returns="bool"/>
      <scope name="mssql_free_statement" docs="mssql_free_statement() only needs to be called if you are worried about using too much memory while your script is running. All statement memory will automatically be freed when the script ends. You may call mssql_free_statement() with the statement identifier as an argument and the associated statement memory will be freed." ilk="function" signature="bool mssql_free_statement ( resource $stmt )" returns="bool"/>
      <scope name="mssql_get_last_message" docs="Undocumented function." ilk="function" signature="string mssql_get_last_message ( void )" returns="string"/>
      <scope name="mssql_guid_string" docs="Undocumented function." ilk="function" signature="string mssql_guid_string ( string $binary [, int $short_format ] )" returns="string"/>
      <scope name="mssql_init" docs="Initializes a stored procedure or a remote stored procedure." ilk="function" signature="resource mssql_init ( string $sp_name [, resource $link_identifier ] )" returns="resource"/>
      <scope name="mssql_min_error_severity" docs="severity" ilk="function" signature="void mssql_min_error_severity ( int $severity )" returns="void"/>
      <scope name="mssql_min_message_severity" docs="severity" ilk="function" signature="void mssql_min_message_severity ( int $severity )" returns="void"/>
      <scope name="mssql_next_result" docs="When sending more than one SQL statement to the server or executing a stored procedure with multiple results, it will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the rows from the new result set." ilk="function" signature="bool mssql_next_result ( resource $result_id )" returns="bool"/>
      <scope name="mssql_num_fields" docs="mssql_num_fields() returns the number of fields in a result set." ilk="function" signature="int mssql_num_fields ( resource $result )" returns="int"/>
      <scope name="mssql_num_rows" docs="mssql_num_rows() returns the number of rows in a result set." ilk="function" signature="int mssql_num_rows ( resource $result )" returns="int"/>
      <scope name="mssql_pconnect" docs="mssql_pconnect() acts very much like mssql_connect() with two major differences." ilk="function" signature="resource mssql_pconnect ([ string $servername [, string $username [, string $password [, bool $new_link ]]]] )" returns="resource"/>
      <scope name="mssql_query" docs="mssql_query() sends a query to the currently active database on the server that&amp;#039;s associated with the specified link identifier." ilk="function" signature="mixed mssql_query ( string $query [, resource $link_identifier [, int $batch_size ]] )" returns="mixed"/>
      <scope name="mssql_result" docs="mssql_result() returns the contents of one cell from a MS SQL result set." ilk="function" signature="string mssql_result ( resource $result , int $row , mixed $field )" returns="string"/>
      <scope name="mssql_rows_affected" docs="link_identifier A MS SQL link identifier, returned by mssql_connect() or mssql_pconnect()." ilk="function" signature="int mssql_rows_affected ( resource $link_identifier )" returns="int"/>
      <scope name="mssql_select_db" docs="mssql_select_db() sets the current active database on the server that&amp;#039;s associated with the specified link identifier." ilk="function" signature="bool mssql_select_db ( string $database_name [, resource $link_identifier ] )" returns="bool"/>
      <scope name="mt_getrandmax" docs="Returns the maximum random value returned by mt_rand()" ilk="function" signature="int mt_getrandmax ( void )" returns="int"/>
      <scope name="mt_rand" docs="min Optional lowest value to be returned (default: 0)" ilk="function" signature="int mt_rand ([ int $min ], int $max )" returns="int"/>
      <scope name="mt_srand" docs="Seeds the random number generator with seed or with a random value if no seed is given." ilk="function" signature="void mt_srand ([ int $seed ] )" returns="void"/>
      <scope name="mysql_affected_rows" docs="Get the number of affected rows by the last INSERT, UPDATE, REPLACE or DELETE query associated with link_identifier." ilk="function" signature="int mysql_affected_rows ([ resource $link_identifier ] )" returns="int"/>
      <scope name="mysql_client_encoding" docs="Retrieves the character_set variable from MySQL." ilk="function" signature="string mysql_client_encoding ([ resource $link_identifier ] )" returns="string"/>
      <scope name="mysql_close" docs="mysql_close() closes the non-persistent connection to the MySQL server that&amp;#039;s associated with the specified link identifier. If link_identifier isn&amp;#039;t specified, the last opened link is used." ilk="function" signature="bool mysql_close ([ resource $link_identifier ] )" returns="bool"/>
      <scope name="mysql_connect" docs="Opens or reuses a connection to a MySQL server." ilk="function" signature="resource mysql_connect ([ string $server [, string $username [, string $password [, bool $new_link [, int $client_flags ]]]]] )" returns="resource"/>
      <scope name="mysql_create_db" docs="mysql_create_db() attempts to create a new database on the server associated with the specified link identifier." ilk="function" signature="bool mysql_create_db ( string $database_name [, resource $link_identifier ] )" returns="bool"/>
      <scope name="mysql_data_seek" docs="mysql_data_seek() moves the internal row pointer of the MySQL result associated with the specified result identifier to point to the specified row number. The next call to a MySQL fetch function, such as mysql_fetch_assoc(), would return that row." ilk="function" signature="bool mysql_data_seek ( resource $result , int $row_number )" returns="bool"/>
      <scope name="mysql_db_name" docs="Retrieve the database name from a call to mysql_list_dbs()." ilk="function" signature="string mysql_db_name ( resource $result , int $row [, mixed $field ] )" returns="string"/>
      <scope name="mysql_db_query" docs="mysql_db_query() selects a database, and executes a query on it." ilk="function" signature="resource mysql_db_query ( string $database , string $query [, resource $link_identifier ] )" returns="resource"/>
      <scope name="mysql_drop_db" docs="mysql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier. This function is deprecated, it is preferable to use mysql_query() to issue a sql DROP DATABASE statement instead." ilk="function" signature="bool mysql_drop_db ( string $database_name [, resource $link_identifier ] )" returns="bool"/>
      <scope name="mysql_errno" docs="Returns the error number from the last MySQL function." ilk="function" signature="int mysql_errno ([ resource $link_identifier ] )" returns="int"/>
      <scope name="mysql_error" docs="Returns the error text from the last MySQL function. Errors coming back from the MySQL database backend no longer issue warnings. Instead, use mysql_error() to retrieve the error text. Note that this function only returns the error text from the most recently executed MySQL function (not including mysql_error() and mysql_errno()), so if you want to use it, make sure you check the value before calling another MySQL function." ilk="function" signature="string mysql_error ([ resource $link_identifier ] )" returns="string"/>
      <scope name="mysql_escape_string" docs="This function will escape the unescaped_string, so that it is safe to place it in a mysql_query(). This function is deprecated." ilk="function" signature="string mysql_escape_string ( string $unescaped_string )" returns="string"/>
      <scope name="mysql_fetch_array" docs="Returns an array that corresponds to the fetched row and moves the internal data pointer ahead." ilk="function" signature="array mysql_fetch_array ( resource $result [, int $result_type ] )" returns="array"/>
      <scope name="mysql_fetch_assoc" docs="Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. mysql_fetch_assoc() is equivalent to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second parameter. It only returns an associative array." ilk="function" signature="array mysql_fetch_assoc ( resource $result )" returns="array"/>
      <scope name="mysql_fetch_field" docs="Returns an object containing field information. This function can be used to obtain information about fields in the provided query result." ilk="function" signature="object mysql_fetch_field ( resource $result [, int $field_offset ] )" returns="object"/>
      <scope name="mysql_fetch_lengths" docs="Returns an array that corresponds to the lengths of each field in the last row fetched by MySQL." ilk="function" signature="array mysql_fetch_lengths ( resource $result )" returns="array"/>
      <scope name="mysql_fetch_object" docs="Returns an object with properties that correspond to the fetched row and moves the internal data pointer ahead." ilk="function" signature="object mysql_fetch_object ( resource $result [, string $class_name [, array $params ]] )" returns="object"/>
      <scope name="mysql_fetch_row" docs="Returns a numerical array that corresponds to the fetched row and moves the internal data pointer ahead." ilk="function" signature="array mysql_fetch_row ( resource $result )" returns="array"/>
      <scope name="mysql_field_flags" docs="mysql_field_flags() returns the field flags of the specified field. The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode()." ilk="function" signature="string mysql_field_flags ( resource $result , int $field_offset )" returns="string"/>
      <scope name="mysql_field_len" docs="mysql_field_len() returns the length of the specified field." ilk="function" signature="int mysql_field_len ( resource $result , int $field_offset )" returns="int"/>
      <scope name="mysql_field_name" docs="mysql_field_name() returns the name of the specified field index." ilk="function" signature="string mysql_field_name ( resource $result , int $field_offset )" returns="string"/>
      <scope name="mysql_field_seek" docs="Seeks to the specified field offset. If the next call to mysql_fetch_field() doesn&amp;#039;t include a field offset, the field offset specified in mysql_field_seek() will be returned." ilk="function" signature="bool mysql_field_seek ( resource $result , int $field_offset )" returns="bool"/>
      <scope name="mysql_field_table" docs="Returns the name of the table that the specified field is in." ilk="function" signature="string mysql_field_table ( resource $result , int $field_offset )" returns="string"/>
      <scope name="mysql_field_type" docs="mysql_field_type() is similar to the mysql_field_name() function. The arguments are identical, but the field type is returned instead." ilk="function" signature="string mysql_field_type ( resource $result , int $field_offset )" returns="string"/>
      <scope name="mysql_free_result" docs="mysql_free_result() will free all memory associated with the result identifier result." ilk="function" signature="bool mysql_free_result ( resource $result )" returns="bool"/>
      <scope name="mysql_get_client_info" docs="mysql_get_client_info() returns a string that represents the client library version." ilk="function" signature="string mysql_get_client_info ( void )" returns="string"/>
      <scope name="mysql_get_host_info" docs="Describes the type of connection in use for the connection, including the server host name." ilk="function" signature="string mysql_get_host_info ([ resource $link_identifier ] )" returns="string"/>
      <scope name="mysql_get_proto_info" docs="Retrieves the MySQL protocol." ilk="function" signature="int mysql_get_proto_info ([ resource $link_identifier ] )" returns="int"/>
      <scope name="mysql_get_server_info" docs="Retrieves the MySQL server version." ilk="function" signature="string mysql_get_server_info ([ resource $link_identifier ] )" returns="string"/>
      <scope name="mysql_info" docs="Returns detailed information about the last query." ilk="function" signature="string mysql_info ([ resource $link_identifier ] )" returns="string"/>
      <scope name="mysql_insert_id" docs="Retrieves the ID generated for an AUTO_INCREMENT column by the previous INSERT query." ilk="function" signature="int mysql_insert_id ([ resource $link_identifier ] )" returns="int"/>
      <scope name="mysql_list_dbs" docs="Returns a result pointer containing the databases available from the current mysql daemon." ilk="function" signature="resource mysql_list_dbs ([ resource $link_identifier ] )" returns="resource"/>
      <scope name="mysql_list_fields" docs="Retrieves information about the given table name." ilk="function" signature="resource mysql_list_fields ( string $database_name , string $table_name [, resource $link_identifier ] )" returns="resource"/>
      <scope name="mysql_list_processes" docs="Retrieves the current MySQL server threads." ilk="function" signature="resource mysql_list_processes ([ resource $link_identifier ] )" returns="resource"/>
      <scope name="mysql_list_tables" docs="Retrieves a list of table names from a MySQL database." ilk="function" signature="resource mysql_list_tables ( string $database [, resource $link_identifier ] )" returns="resource"/>
      <scope name="mysql_num_fields" docs="Retrieves the number of fields from a query." ilk="function" signature="int mysql_num_fields ( resource $result )" returns="int"/>
      <scope name="mysql_num_rows" docs="Retrieves the number of rows from a result set. This command is only valid for statements like SELECT or SHOW that return an actual result set. To retrieve the number of rows affected by a INSERT, UPDATE, REPLACE or DELETE query, use mysql_affected_rows()." ilk="function" signature="int mysql_num_rows ( resource $result )" returns="int"/>
      <scope name="mysql_pconnect" docs="Establishes a persistent connection to a MySQL server." ilk="function" signature="resource mysql_pconnect ([ string $server [, string $username [, string $password [, int $client_flags ]]]] )" returns="resource"/>
      <scope name="mysql_ping" docs="Checks whether or not the connection to the server is working. If it has gone down, an automatic reconnection is attempted. This function can be used by scripts that remain idle for a long while, to check whether or not the server has closed the connection and reconnect if necessary." ilk="function" signature="bool mysql_ping ([ resource $link_identifier ] )" returns="bool"/>
      <scope name="mysql_query" docs="mysql_query() sends an unique query (multiple queries are not supported) to the currently active database on the server that&amp;#039;s associated with the specified link_identifier." ilk="function" signature="resource mysql_query ( string $query [, resource $link_identifier ] )" returns="resource"/>
      <scope name="mysql_real_escape_string" docs="Escapes special characters in the unescaped_string, taking into account the current character set of the connection so that it is safe to place it in a mysql_query(). If binary data is to be inserted, this function must be used." ilk="function" signature="string mysql_real_escape_string ( string $unescaped_string [, resource $link_identifier ] )" returns="string"/>
      <scope name="mysql_result" docs="Retrieves the contents of one cell from a MySQL result set." ilk="function" signature="string mysql_result ( resource $result , int $row [, mixed $field ] )" returns="string"/>
      <scope name="mysql_select_db" docs="Sets the current active database on the server that&amp;#039;s associated with the specified link identifier. Every subsequent call to mysql_query() will be made on the active database." ilk="function" signature="bool mysql_select_db ( string $database_name [, resource $link_identifier ] )" returns="bool"/>
      <scope name="mysql_stat" docs="mysql_stat() returns the current server status." ilk="function" signature="string mysql_stat ([ resource $link_identifier ] )" returns="string"/>
      <scope name="mysql_tablename" docs="Retrieves the table name from a result." ilk="function" signature="string mysql_tablename ( resource $result , int $i )" returns="string"/>
      <scope name="mysql_thread_id" docs="Retrieves the current thread ID. If the connection is lost, and a reconnect with mysql_ping() is executed, the thread ID will change. This means only retrieve the thread ID when needed." ilk="function" signature="int mysql_thread_id ([ resource $link_identifier ] )" returns="int"/>
      <scope name="mysql_unbuffered_query" docs="mysql_unbuffered_query() sends a SQL query query to MySQL, without fetching and buffering the result rows automatically, as mysql_query() does. On the one hand, this saves a considerable amount of memory with SQL queries that produce large result sets. On the other hand, you can start working on the result set immediately after the first row has been retrieved: you don&amp;#039;t have to wait until the complete SQL query has been performed. When using multiple DB-connects, you have to specify the optional parameter link_identifier." ilk="function" signature="resource mysql_unbuffered_query ( string $query [, resource $link_identifier ] )" returns="resource"/>
      <scope name="natcasesort" docs="This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a &amp;quot;natural ordering&amp;quot;." ilk="function" signature="bool natcasesort ( array &amp;$array )" returns="bool"/>
      <scope name="natsort" docs="This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a &amp;quot;natural ordering&amp;quot;. An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort()) can be seen below:" ilk="function" signature="bool natsort ( array &amp;$array )" returns="bool"/>
      <scope name="ncurses_addch" docs="ch" ilk="function" signature="int ncurses_addch ( int $ch )" returns="int"/>
      <scope name="ncurses_addchnstr" docs="s" ilk="function" signature="int ncurses_addchnstr ( string $s , int $n )" returns="int"/>
      <scope name="ncurses_addchstr" docs="s" ilk="function" signature="int ncurses_addchstr ( string $s )" returns="int"/>
      <scope name="ncurses_addnstr" docs="s" ilk="function" signature="int ncurses_addnstr ( string $s , int $n )" returns="int"/>
      <scope name="ncurses_addstr" docs="text" ilk="function" signature="int ncurses_addstr ( string $text )" returns="int"/>
      <scope name="ncurses_assume_default_colors" docs="fg" ilk="function" signature="int ncurses_assume_default_colors ( int $fg , int $bg )" returns="int"/>
      <scope name="ncurses_attroff" docs="attributes" ilk="function" signature="int ncurses_attroff ( int $attributes )" returns="int"/>
      <scope name="ncurses_attron" docs="attributes" ilk="function" signature="int ncurses_attron ( int $attributes )" returns="int"/>
      <scope name="ncurses_attrset" docs="attributes" ilk="function" signature="int ncurses_attrset ( int $attributes )" returns="int"/>
      <scope name="ncurses_baudrate" docs="Undocumented function." ilk="function" signature="int ncurses_baudrate ( void )" returns="int"/>
      <scope name="ncurses_beep" docs="ncurses_beep() sends an audible alert (bell) and if its not possible flashes the screen." ilk="function" signature="int ncurses_beep ( void )" returns="int"/>
      <scope name="ncurses_bkgd" docs="attrchar" ilk="function" signature="int ncurses_bkgd ( int $attrchar )" returns="int"/>
      <scope name="ncurses_bkgdset" docs="attrchar" ilk="function" signature="void ncurses_bkgdset ( int $attrchar )" returns="void"/>
      <scope name="ncurses_border" docs="Draws the specified lines and corners around the main window." ilk="function" signature="int ncurses_border ( int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )" returns="int"/>
      <scope name="ncurses_bottom_panel" docs="panel" ilk="function" signature="int ncurses_bottom_panel ( resource $panel )" returns="int"/>
      <scope name="ncurses_can_change_color" docs="Tells whether the terminal has color capabilities and whether the programmer can change the colors." ilk="function" signature="bool ncurses_can_change_color ( void )" returns="bool"/>
      <scope name="ncurses_cbreak" docs="Disables line buffering and character processing (interrupt and flow control characters are unaffected), making characters typed by the user immediately available to the program." ilk="function" signature="bool ncurses_cbreak ( void )" returns="bool"/>
      <scope name="ncurses_clear" docs="Clears the screen completely without setting blanks." ilk="function" signature="bool ncurses_clear ( void )" returns="bool"/>
      <scope name="ncurses_clrtobot" docs="Erases all lines from cursor to end of screen and creates blanks. Blanks created by ncurses_clrtobot() have the current background rendition." ilk="function" signature="bool ncurses_clrtobot ( void )" returns="bool"/>
      <scope name="ncurses_clrtoeol" docs="Erases the current line from cursor position to the end. Blanks created by ncurses_clrtoeol() have the current background rendition." ilk="function" signature="bool ncurses_clrtoeol ( void )" returns="bool"/>
      <scope name="ncurses_color_content" docs="color" ilk="function" signature="int ncurses_color_content ( int $color , int &amp;$r , int &amp;$g , int &amp;$b )" returns="int"/>
      <scope name="ncurses_color_set" docs="pair" ilk="function" signature="int ncurses_color_set ( int $pair )" returns="int"/>
      <scope name="ncurses_curs_set" docs="visibility" ilk="function" signature="int ncurses_curs_set ( int $visibility )" returns="int"/>
      <scope name="ncurses_def_prog_mode" docs="Saves the current terminal modes for program (in curses) for use by ncurses_reset_prog_mode()." ilk="function" signature="bool ncurses_def_prog_mode ( void )" returns="bool"/>
      <scope name="ncurses_def_shell_mode" docs="Saves the current terminal modes for shell (not in curses) for use by ncurses_reset_shell_mode()." ilk="function" signature="bool ncurses_def_shell_mode ( void )" returns="bool"/>
      <scope name="ncurses_define_key" docs="definition" ilk="function" signature="int ncurses_define_key ( string $definition , int $keycode )" returns="int"/>
      <scope name="ncurses_del_panel" docs="panel" ilk="function" signature="bool ncurses_del_panel ( resource $panel )" returns="bool"/>
      <scope name="ncurses_delay_output" docs="milliseconds" ilk="function" signature="int ncurses_delay_output ( int $milliseconds )" returns="int"/>
      <scope name="ncurses_delch" docs="Deletes the character under the cursor. All characters to the right of the cursor on the same line are moved to the left one position and the last character on the line is filled with a blank. The cursor position does not change." ilk="function" signature="bool ncurses_delch ( void )" returns="bool"/>
      <scope name="ncurses_deleteln" docs="Deletes the current line under cursorposition. All lines below the current line are moved up one line. The bottom line of window is cleared. Cursor position does not change." ilk="function" signature="bool ncurses_deleteln ( void )" returns="bool"/>
      <scope name="ncurses_delwin" docs="window" ilk="function" signature="bool ncurses_delwin ( resource $window )" returns="bool"/>
      <scope name="ncurses_doupdate" docs="Compares the virtual screen to the physical screen and updates the physical screen. This way is more effective than using multiple refresh calls." ilk="function" signature="bool ncurses_doupdate ( void )" returns="bool"/>
      <scope name="ncurses_echo" docs="Enables echo mode. All characters typed by user are echoed by ncurses_getch()." ilk="function" signature="bool ncurses_echo ( void )" returns="bool"/>
      <scope name="ncurses_echochar" docs="character" ilk="function" signature="int ncurses_echochar ( int $character )" returns="int"/>
      <scope name="ncurses_end" docs="Undocumented function." ilk="function" signature="int ncurses_end ( void )" returns="int"/>
      <scope name="ncurses_erase" docs="Fills the terminal screen with blanks." ilk="function" signature="bool ncurses_erase ( void )" returns="bool"/>
      <scope name="ncurses_erasechar" docs="Returns the current erase character." ilk="function" signature="string ncurses_erasechar ( void )" returns="string"/>
      <scope name="ncurses_filter" docs="Undocumented function." ilk="function" signature="void ncurses_filter ( void )" returns="void"/>
      <scope name="ncurses_flash" docs="Flashes the screen, and if its not possible, sends an audible alert (bell)." ilk="function" signature="bool ncurses_flash ( void )" returns="bool"/>
      <scope name="ncurses_flushinp" docs="Throws away any typeahead that has been typed and has not yet been read by your program." ilk="function" signature="bool ncurses_flushinp ( void )" returns="bool"/>
      <scope name="ncurses_getch" docs="Undocumented function." ilk="function" signature="int ncurses_getch ( void )" returns="int"/>
      <scope name="ncurses_getmaxyx" docs="Gets the horizontal and vertical size of the given window into the given variables." ilk="function" signature="void ncurses_getmaxyx ( resource $window , int &amp;$y , int &amp;$x )" returns="void"/>
      <scope name="ncurses_getmouse" docs="ncurses_getmouse() reads mouse event out of queue." ilk="function" signature="bool ncurses_getmouse ( array &amp;$mevent )" returns="bool"/>
      <scope name="ncurses_getyx" docs="window" ilk="function" signature="void ncurses_getyx ( resource $window , int &amp;$y , int &amp;$x )" returns="void"/>
      <scope name="ncurses_halfdelay" docs="tenth" ilk="function" signature="int ncurses_halfdelay ( int $tenth )" returns="int"/>
      <scope name="ncurses_has_colors" docs="Checks whether the terminal has color capacities." ilk="function" signature="bool ncurses_has_colors ( void )" returns="bool"/>
      <scope name="ncurses_has_ic" docs="Checks whether the terminal has insert and delete capabilities." ilk="function" signature="bool ncurses_has_ic ( void )" returns="bool"/>
      <scope name="ncurses_has_il" docs="Checks whether the terminal has insert- and delete-line-capabilities." ilk="function" signature="bool ncurses_has_il ( void )" returns="bool"/>
      <scope name="ncurses_has_key" docs="keycode" ilk="function" signature="int ncurses_has_key ( int $keycode )" returns="int"/>
      <scope name="ncurses_hide_panel" docs="panel" ilk="function" signature="int ncurses_hide_panel ( resource $panel )" returns="int"/>
      <scope name="ncurses_hline" docs="charattr" ilk="function" signature="int ncurses_hline ( int $charattr , int $n )" returns="int"/>
      <scope name="ncurses_inch" docs="Returns the character from the current position." ilk="function" signature="string ncurses_inch ( void )" returns="string"/>
      <scope name="ncurses_init_color" docs="color" ilk="function" signature="int ncurses_init_color ( int $color , int $r , int $g , int $b )" returns="int"/>
      <scope name="ncurses_init_pair" docs="pair" ilk="function" signature="int ncurses_init_pair ( int $pair , int $fg , int $bg )" returns="int"/>
      <scope name="ncurses_init" docs="Initializes the ncurses interface and must be used before any other ncurses function call." ilk="function" signature="void ncurses_init ( void )" returns="void"/>
      <scope name="ncurses_insch" docs="character" ilk="function" signature="int ncurses_insch ( int $character )" returns="int"/>
      <scope name="ncurses_insdelln" docs="count" ilk="function" signature="int ncurses_insdelln ( int $count )" returns="int"/>
      <scope name="ncurses_insertln" docs="Inserts a new line above the current line. The bottom line will be lost." ilk="function" signature="int ncurses_insertln ( void )" returns="int"/>
      <scope name="ncurses_insstr" docs="text" ilk="function" signature="int ncurses_insstr ( string $text )" returns="int"/>
      <scope name="ncurses_instr" docs="Reads a string from the terminal screen and returns the number of characters read from the current character position until end of line." ilk="function" signature="int ncurses_instr ( string &amp;$buffer )" returns="int"/>
      <scope name="ncurses_isendwin" docs="Checks if ncurses is in endwin mode." ilk="function" signature="bool ncurses_isendwin ( void )" returns="bool"/>
      <scope name="ncurses_keyok" docs="keycode" ilk="function" signature="int ncurses_keyok ( int $keycode , bool $enable )" returns="int"/>
      <scope name="ncurses_keypad" docs="window" ilk="function" signature="int ncurses_keypad ( resource $window , bool $bf )" returns="int"/>
      <scope name="ncurses_killchar" docs="Returns the current line kill character." ilk="function" signature="string ncurses_killchar ( void )" returns="string"/>
      <scope name="ncurses_longname" docs="Returns a verbose description of the terminal." ilk="function" signature="string ncurses_longname ( void )" returns="string"/>
      <scope name="ncurses_meta" docs="window" ilk="function" signature="int ncurses_meta ( resource $window , bool $8bit )" returns="int"/>
      <scope name="ncurses_mouse_trafo" docs="y" ilk="function" signature="bool ncurses_mouse_trafo ( int &amp;$y , int &amp;$x , bool $toscreen )" returns="bool"/>
      <scope name="ncurses_mouseinterval" docs="milliseconds" ilk="function" signature="int ncurses_mouseinterval ( int $milliseconds )" returns="int"/>
      <scope name="ncurses_mousemask" docs="Sets mouse events to be reported. By default no mouse events will be reported." ilk="function" signature="int ncurses_mousemask ( int $newmask , int &amp;$oldmask )" returns="int"/>
      <scope name="ncurses_move_panel" docs="panel" ilk="function" signature="int ncurses_move_panel ( resource $panel , int $startx , int $starty )" returns="int"/>
      <scope name="ncurses_move" docs="y" ilk="function" signature="int ncurses_move ( int $y , int $x )" returns="int"/>
      <scope name="ncurses_mvaddch" docs="y" ilk="function" signature="int ncurses_mvaddch ( int $y , int $x , int $c )" returns="int"/>
      <scope name="ncurses_mvaddchnstr" docs="y" ilk="function" signature="int ncurses_mvaddchnstr ( int $y , int $x , string $s , int $n )" returns="int"/>
      <scope name="ncurses_mvaddchstr" docs="y" ilk="function" signature="int ncurses_mvaddchstr ( int $y , int $x , string $s )" returns="int"/>
      <scope name="ncurses_mvaddnstr" docs="y" ilk="function" signature="int ncurses_mvaddnstr ( int $y , int $x , string $s , int $n )" returns="int"/>
      <scope name="ncurses_mvaddstr" docs="y" ilk="function" signature="int ncurses_mvaddstr ( int $y , int $x , string $s )" returns="int"/>
      <scope name="ncurses_mvcur" docs="old_y" ilk="function" signature="int ncurses_mvcur ( int $old_y , int $old_x , int $new_y , int $new_x )" returns="int"/>
      <scope name="ncurses_mvdelch" docs="y" ilk="function" signature="int ncurses_mvdelch ( int $y , int $x )" returns="int"/>
      <scope name="ncurses_mvgetch" docs="y" ilk="function" signature="int ncurses_mvgetch ( int $y , int $x )" returns="int"/>
      <scope name="ncurses_mvhline" docs="y" ilk="function" signature="int ncurses_mvhline ( int $y , int $x , int $attrchar , int $n )" returns="int"/>
      <scope name="ncurses_mvinch" docs="y" ilk="function" signature="int ncurses_mvinch ( int $y , int $x )" returns="int"/>
      <scope name="ncurses_mvvline" docs="y" ilk="function" signature="int ncurses_mvvline ( int $y , int $x , int $attrchar , int $n )" returns="int"/>
      <scope name="ncurses_mvwaddstr" docs="window" ilk="function" signature="int ncurses_mvwaddstr ( resource $window , int $y , int $x , string $text )" returns="int"/>
      <scope name="ncurses_napms" docs="milliseconds" ilk="function" signature="int ncurses_napms ( int $milliseconds )" returns="int"/>
      <scope name="ncurses_new_panel" docs="window" ilk="function" signature="resource ncurses_new_panel ( resource $window )" returns="resource"/>
      <scope name="ncurses_newpad" docs="rows" ilk="function" signature="resource ncurses_newpad ( int $rows , int $cols )" returns="resource"/>
      <scope name="ncurses_newwin" docs="Creates a new window to draw elements in." ilk="function" signature="resource ncurses_newwin ( int $rows , int $cols , int $y , int $x )" returns="resource"/>
      <scope name="ncurses_nl" docs="Undocumented function." ilk="function" signature="bool ncurses_nl ( void )" returns="bool"/>
      <scope name="ncurses_nocbreak" docs="Returns terminal to normal (cooked) mode. Initially the terminal may or may not in cbreak mode as the mode is inherited. Therefore a program should call ncurses_cbreak() and ncurses_nocbreak() explicitly." ilk="function" signature="bool ncurses_nocbreak ( void )" returns="bool"/>
      <scope name="ncurses_noecho" docs="Prevents echoing of user typed characters." ilk="function" signature="bool ncurses_noecho ( void )" returns="bool"/>
      <scope name="ncurses_nonl" docs="Undocumented function." ilk="function" signature="bool ncurses_nonl ( void )" returns="bool"/>
      <scope name="ncurses_noqiflush" docs="Undocumented function." ilk="function" signature="void ncurses_noqiflush ( void )" returns="void"/>
      <scope name="ncurses_noraw" docs="Switches the terminal out of raw mode. Raw mode is similar to cbreak mode, in that characters typed are immediately passed through to the user program. The differences that are that in raw mode, the interrupt, quit, suspend and flow control characters are all passed through uninterpreted, instead of generating a signal." ilk="function" signature="bool ncurses_noraw ( void )" returns="bool"/>
      <scope name="ncurses_pair_content" docs="pair" ilk="function" signature="int ncurses_pair_content ( int $pair , int &amp;$f , int &amp;$b )" returns="int"/>
      <scope name="ncurses_panel_above" docs="panel" ilk="function" signature="resource ncurses_panel_above ( resource $panel )" returns="resource"/>
      <scope name="ncurses_panel_below" docs="panel" ilk="function" signature="resource ncurses_panel_below ( resource $panel )" returns="resource"/>
      <scope name="ncurses_panel_window" docs="panel" ilk="function" signature="resource ncurses_panel_window ( resource $panel )" returns="resource"/>
      <scope name="ncurses_pnoutrefresh" docs="pad" ilk="function" signature="int ncurses_pnoutrefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )" returns="int"/>
      <scope name="ncurses_prefresh" docs="pad" ilk="function" signature="int ncurses_prefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )" returns="int"/>
      <scope name="ncurses_putp" docs="text" ilk="function" signature="int ncurses_putp ( string $text )" returns="int"/>
      <scope name="ncurses_qiflush" docs="Undocumented function." ilk="function" signature="void ncurses_qiflush ( void )" returns="void"/>
      <scope name="ncurses_raw" docs="Places the terminal in raw mode. Raw mode is similar to cbreak mode, in that characters typed are immediately passed through to the user program. The differences that are that in raw mode, the interrupt, quit, suspend and flow control characters are all passed through uninterpreted, instead of generating a signal." ilk="function" signature="bool ncurses_raw ( void )" returns="bool"/>
      <scope name="ncurses_refresh" docs="ch" ilk="function" signature="int ncurses_refresh ( int $ch )" returns="int"/>
      <scope name="ncurses_replace_panel" docs="panel" ilk="function" signature="int ncurses_replace_panel ( resource $panel , resource $window )" returns="int"/>
      <scope name="ncurses_reset_prog_mode" docs="Undocumented function." ilk="function" signature="int ncurses_reset_prog_mode ( void )" returns="int"/>
      <scope name="ncurses_reset_shell_mode" docs="Undocumented function." ilk="function" signature="int ncurses_reset_shell_mode ( void )" returns="int"/>
      <scope name="ncurses_resetty" docs="Restores the terminal state, which was previously saved by calling ncurses_savetty()." ilk="function" signature="bool ncurses_resetty ( void )" returns="bool"/>
      <scope name="ncurses_savetty" docs="Saves the current terminal state. The saved terminal state can be restored with ncurses_resetty()." ilk="function" signature="bool ncurses_savetty ( void )" returns="bool"/>
      <scope name="ncurses_scr_dump" docs="filename" ilk="function" signature="int ncurses_scr_dump ( string $filename )" returns="int"/>
      <scope name="ncurses_scr_init" docs="filename" ilk="function" signature="int ncurses_scr_init ( string $filename )" returns="int"/>
      <scope name="ncurses_scr_restore" docs="filename" ilk="function" signature="int ncurses_scr_restore ( string $filename )" returns="int"/>
      <scope name="ncurses_scr_set" docs="filename" ilk="function" signature="int ncurses_scr_set ( string $filename )" returns="int"/>
      <scope name="ncurses_scrl" docs="count" ilk="function" signature="int ncurses_scrl ( int $count )" returns="int"/>
      <scope name="ncurses_show_panel" docs="panel" ilk="function" signature="int ncurses_show_panel ( resource $panel )" returns="int"/>
      <scope name="ncurses_slk_attr" docs="Returns the current soft label key attribute." ilk="function" signature="int ncurses_slk_attr ( void )" returns="int"/>
      <scope name="ncurses_slk_attroff" docs="intarg" ilk="function" signature="int ncurses_slk_attroff ( int $intarg )" returns="int"/>
      <scope name="ncurses_slk_attron" docs="intarg" ilk="function" signature="int ncurses_slk_attron ( int $intarg )" returns="int"/>
      <scope name="ncurses_slk_attrset" docs="intarg" ilk="function" signature="int ncurses_slk_attrset ( int $intarg )" returns="int"/>
      <scope name="ncurses_slk_clear" docs="The function ncurses_slk_clear() clears soft label keys from screen." ilk="function" signature="bool ncurses_slk_clear ( void )" returns="bool"/>
      <scope name="ncurses_slk_color" docs="intarg" ilk="function" signature="int ncurses_slk_color ( int $intarg )" returns="int"/>
      <scope name="ncurses_slk_init" docs="Initializes soft label key functions" ilk="function" signature="bool ncurses_slk_init ( int $format )" returns="bool"/>
      <scope name="ncurses_slk_noutrefresh" docs="Undocumented function." ilk="function" signature="bool ncurses_slk_noutrefresh ( void )" returns="bool"/>
      <scope name="ncurses_slk_refresh" docs="Copies soft label keys from virtual screen to physical screen." ilk="function" signature="int ncurses_slk_refresh ( void )" returns="int"/>
      <scope name="ncurses_slk_restore" docs="Restores the soft label keys after ncurses_slk_clear() has been performed." ilk="function" signature="int ncurses_slk_restore ( void )" returns="int"/>
      <scope name="ncurses_slk_set" docs="labelnr" ilk="function" signature="bool ncurses_slk_set ( int $labelnr , string $label , int $format )" returns="bool"/>
      <scope name="ncurses_slk_touch" docs="Forces all the soft labels to be output the next time a ncurses_slk_noutrefresh() is performed." ilk="function" signature="int ncurses_slk_touch ( void )" returns="int"/>
      <scope name="ncurses_standend" docs="Undocumented function." ilk="function" signature="int ncurses_standend ( void )" returns="int"/>
      <scope name="ncurses_standout" docs="Undocumented function." ilk="function" signature="int ncurses_standout ( void )" returns="int"/>
      <scope name="ncurses_start_color" docs="Undocumented function." ilk="function" signature="int ncurses_start_color ( void )" returns="int"/>
      <scope name="ncurses_termattrs" docs="Undocumented function." ilk="function" signature="bool ncurses_termattrs ( void )" returns="bool"/>
      <scope name="ncurses_termname" docs="Returns terminals shortname." ilk="function" signature="string ncurses_termname ( void )" returns="string"/>
      <scope name="ncurses_timeout" docs="millisec" ilk="function" signature="void ncurses_timeout ( int $millisec )" returns="void"/>
      <scope name="ncurses_top_panel" docs="panel" ilk="function" signature="int ncurses_top_panel ( resource $panel )" returns="int"/>
      <scope name="ncurses_typeahead" docs="fd" ilk="function" signature="int ncurses_typeahead ( int $fd )" returns="int"/>
      <scope name="ncurses_ungetch" docs="keycode" ilk="function" signature="int ncurses_ungetch ( int $keycode )" returns="int"/>
      <scope name="ncurses_ungetmouse" docs="Pushes a KEY_MOUSE event onto the unput queue and associates with this event the given state sata and screen-relative character cell coordinates, specified in mevent." ilk="function" signature="bool ncurses_ungetmouse ( array $mevent )" returns="bool"/>
      <scope name="ncurses_update_panels" docs="Undocumented function." ilk="function" signature="void ncurses_update_panels ( void )" returns="void"/>
      <scope name="ncurses_use_default_colors" docs="Undocumented function." ilk="function" signature="bool ncurses_use_default_colors ( void )" returns="bool"/>
      <scope name="ncurses_use_env" docs="flag" ilk="function" signature="void ncurses_use_env ( bool $flag )" returns="void"/>
      <scope name="ncurses_use_extended_names" docs="flag" ilk="function" signature="int ncurses_use_extended_names ( bool $flag )" returns="int"/>
      <scope name="ncurses_vidattr" docs="intarg" ilk="function" signature="int ncurses_vidattr ( int $intarg )" returns="int"/>
      <scope name="ncurses_vline" docs="charattr" ilk="function" signature="int ncurses_vline ( int $charattr , int $n )" returns="int"/>
      <scope name="ncurses_waddch" docs="window" ilk="function" signature="int ncurses_waddch ( resource $window , int $ch )" returns="int"/>
      <scope name="ncurses_waddstr" docs="window" ilk="function" signature="int ncurses_waddstr ( resource $window , string $str [, int $n ] )" returns="int"/>
      <scope name="ncurses_wattroff" docs="window" ilk="function" signature="int ncurses_wattroff ( resource $window , int $attrs )" returns="int"/>
      <scope name="ncurses_wattron" docs="window" ilk="function" signature="int ncurses_wattron ( resource $window , int $attrs )" returns="int"/>
      <scope name="ncurses_wattrset" docs="window" ilk="function" signature="int ncurses_wattrset ( resource $window , int $attrs )" returns="int"/>
      <scope name="ncurses_wborder" docs="Draws the specified lines and corners around the passed window." ilk="function" signature="int ncurses_wborder ( resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )" returns="int"/>
      <scope name="ncurses_wclear" docs="window" ilk="function" signature="int ncurses_wclear ( resource $window )" returns="int"/>
      <scope name="ncurses_wcolor_set" docs="window" ilk="function" signature="int ncurses_wcolor_set ( resource $window , int $color_pair )" returns="int"/>
      <scope name="ncurses_werase" docs="window" ilk="function" signature="int ncurses_werase ( resource $window )" returns="int"/>
      <scope name="ncurses_wgetch" docs="window" ilk="function" signature="int ncurses_wgetch ( resource $window )" returns="int"/>
      <scope name="ncurses_whline" docs="window" ilk="function" signature="int ncurses_whline ( resource $window , int $charattr , int $n )" returns="int"/>
      <scope name="ncurses_wmouse_trafo" docs="window" ilk="function" signature="bool ncurses_wmouse_trafo ( resource $window , int &amp;$y , int &amp;$x , bool $toscreen )" returns="bool"/>
      <scope name="ncurses_wmove" docs="window" ilk="function" signature="int ncurses_wmove ( resource $window , int $y , int $x )" returns="int"/>
      <scope name="ncurses_wnoutrefresh" docs="window" ilk="function" signature="int ncurses_wnoutrefresh ( resource $window )" returns="int"/>
      <scope name="ncurses_wrefresh" docs="window" ilk="function" signature="int ncurses_wrefresh ( resource $window )" returns="int"/>
      <scope name="ncurses_wstandend" docs="window" ilk="function" signature="int ncurses_wstandend ( resource $window )" returns="int"/>
      <scope name="ncurses_wstandout" docs="window" ilk="function" signature="int ncurses_wstandout ( resource $window )" returns="int"/>
      <scope name="ncurses_wvline" docs="window" ilk="function" signature="int ncurses_wvline ( resource $window , int $charattr , int $n )" returns="int"/>
      <scope name="next" docs="Positions cursor on the next node skipping all subtrees." ilk="function" signature="bool next ([ string $localname ] )" returns="bool"/>
      <scope name="ngettext" docs="The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count." ilk="function" signature="string ngettext ( string $msgid1 , string $msgid2 , int $n )" returns="string"/>
      <scope name="nl_langinfo" docs="nl_langinfo() is used to access individual elements of the locale categories. Unlike localeconv(), which returns all of the elements, nl_langinfo() allows you to select any specific element." ilk="function" signature="string nl_langinfo ( int $item )" returns="string"/>
      <scope name="nl2br" docs="Returns string with &amp;#039;&amp;lt;br /&amp;gt;&amp;#039; inserted before all newlines." ilk="function" signature="string nl2br ( string $string )" returns="string"/>
      <scope name="notes_body" docs="Undocumented function." ilk="function" signature="array notes_body ( string $server , string $mailbox , int $msg_number )" returns="array"/>
      <scope name="notes_copy_db" docs="Undocumented function." ilk="function" signature="bool notes_copy_db ( string $from_database_name , string $to_database_name )" returns="bool"/>
      <scope name="notes_create_db" docs="Undocumented function." ilk="function" signature="bool notes_create_db ( string $database_name )" returns="bool"/>
      <scope name="notes_create_note" docs="Undocumented function." ilk="function" signature="bool notes_create_note ( string $database_name , string $form_name )" returns="bool"/>
      <scope name="notes_drop_db" docs="Undocumented function." ilk="function" signature="bool notes_drop_db ( string $database_name )" returns="bool"/>
      <scope name="notes_find_note" docs="Undocumented function." ilk="function" signature="int notes_find_note ( string $database_name , string $name [, string $type ] )" returns="int"/>
      <scope name="notes_header_info" docs="Undocumented function." ilk="function" signature="object notes_header_info ( string $server , string $mailbox , int $msg_number )" returns="object"/>
      <scope name="notes_list_msgs" docs="Undocumented function." ilk="function" signature="bool notes_list_msgs ( string $db )" returns="bool"/>
      <scope name="notes_mark_read" docs="Undocumented function." ilk="function" signature="bool notes_mark_read ( string $database_name , string $user_name , string $note_id )" returns="bool"/>
      <scope name="notes_mark_unread" docs="Undocumented function." ilk="function" signature="bool notes_mark_unread ( string $database_name , string $user_name , string $note_id )" returns="bool"/>
      <scope name="notes_nav_create" docs="Undocumented function." ilk="function" signature="bool notes_nav_create ( string $database_name , string $name )" returns="bool"/>
      <scope name="notes_search" docs="Undocumented function." ilk="function" signature="array notes_search ( string $database_name , string $keywords )" returns="array"/>
      <scope name="notes_unread" docs="Undocumented function." ilk="function" signature="array notes_unread ( string $database_name , string $user_name )" returns="array"/>
      <scope name="notes_version" docs="Undocumented function." ilk="function" signature="float notes_version ( string $database_name )" returns="float"/>
      <scope name="nsapi_request_headers" docs="nsapi_request_headers() gets all the HTTP headers in the current request. This is only supported when PHP runs as a NSAPI module." ilk="function" signature="array nsapi_request_headers ( void )" returns="array"/>
      <scope name="nsapi_response_headers" docs="Gets all the NSAPI response headers." ilk="function" signature="array nsapi_response_headers ( void )" returns="array"/>
      <scope name="nsapi_virtual" docs="nsapi_virtual() is an NSAPI-specific function which is equivalent to &amp;lt;!--#include virtual...--&amp;gt; in SSI (.shtml files). It does an NSAPI sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you&amp;#039;d parse through webserver." ilk="function" signature="bool nsapi_virtual ( string $uri )" returns="bool"/>
      <scope name="number_format" docs="number_format() returns a formatted version of number. This function accepts either one, two or four parameters (not three):" ilk="function" signature="string number_format ( float $number [, int $decimals [, string $dec_point ]], string $thousands_sep )" returns="string"/>
      <scope name="ob_clean" docs="This function discards the contents of the output buffer." ilk="function" signature="void ob_clean ( void )" returns="void"/>
      <scope name="ob_end_clean" docs="This function discards the contents of the topmost output buffer and turns off this output buffering. If you want to further process the buffer&amp;#039;s contents you have to call ob_get_contents() before ob_end_clean() as the buffer contents are discarded when ob_end_clean() is called." ilk="function" signature="bool ob_end_clean ( void )" returns="bool"/>
      <scope name="ob_end_flush" docs="This function will send the contents of the topmost output buffer (if any) and turn this output buffer off. If you want to further process the buffer&amp;#039;s contents you have to call ob_get_contents() before ob_end_flush() as the buffer contents are discarded after ob_end_flush() is called." ilk="function" signature="bool ob_end_flush ( void )" returns="bool"/>
      <scope name="ob_flush" docs="This function will send the contents of the output buffer (if any). If you want to further process the buffer&amp;#039;s contents you have to call ob_get_contents() before ob_flush() as the buffer contents are discarded after ob_flush() is called." ilk="function" signature="void ob_flush ( void )" returns="void"/>
      <scope name="ob_get_clean" docs="Gets the current buffer contents and delete current output buffer." ilk="function" signature="string ob_get_clean ( void )" returns="string"/>
      <scope name="ob_get_contents" docs="Gets the contents of the output buffer without clearing it." ilk="function" signature="string ob_get_contents ( void )" returns="string"/>
      <scope name="ob_get_flush" docs="ob_get_flush() flushes the output buffer, return it as a string and turns off output buffering." ilk="function" signature="string ob_get_flush ( void )" returns="string"/>
      <scope name="ob_get_length" docs="This will return the length of the contents in the output buffer." ilk="function" signature="int ob_get_length ( void )" returns="int"/>
      <scope name="ob_get_level" docs="Returns the nesting level of the output buffering mechanism." ilk="function" signature="int ob_get_level ( void )" returns="int"/>
      <scope name="ob_get_status" docs="ob_get_status() returns status information on either the top level output buffer or all active output buffer levels if full_status is set to TRUE." ilk="function" signature="array ob_get_status ([ bool $full_status =FALSE ] )" returns="array"/>
      <scope name="ob_gzhandler" docs="ob_gzhandler() is intended to be used as a callback function for ob_start() to help facilitate sending gz-encoded data to web browsers that support compressed web pages. Before ob_gzhandler() actually sends compressed data, it determines what type of content encoding the browser will accept (&amp;quot;gzip&amp;quot;, &amp;quot;deflate&amp;quot; or none at all) and will return its output accordingly. All browsers are supported since it&amp;#039;s up to the browser to send the correct header saying that it accepts compressed web pages. If a browser doesn&amp;#039;t support compressed pages this function returns FALSE." ilk="function" signature="string ob_gzhandler ( string $buffer , int $mode )" returns="string"/>
      <scope name="ob_iconv_handler" docs="Converts the string encoded in internal_encoding to output_encoding." ilk="function" signature="string ob_iconv_handler ( string $contents , int $status )" returns="string"/>
      <scope name="ob_implicit_flush" docs="ob_implicit_flush() will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed." ilk="function" signature="void ob_implicit_flush ([ int $flag ] )" returns="void"/>
      <scope name="ob_list_handlers" docs="Lists all output handlers in use." ilk="function" signature="array ob_list_handlers ( void )" returns="array"/>
      <scope name="ob_start" docs="This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer." ilk="function" signature="bool ob_start ([ callback $output_callback [, int $chunk_size [, bool $erase ]]] )" returns="bool"/>
      <scope name="trim" docs="This function returns a string with whitespace stripped from the beginning and end of str. Without the second parameter, trim() will strip these characters: &amp;quot; &amp;quot; (ASCII 32 (0x20)), an ordinary space. &amp;quot;\t&amp;quot; (ASCII 9 (0x09)), a tab. &amp;quot;\n&amp;quot; (ASCII 10 (0x0A)), a new line (line feed). &amp;quot;\r&amp;quot; (ASCII 13 (0x0D)), a carriage return. &amp;quot;\0&amp;quot; (ASCII 0 (0x00)), the NUL-byte. &amp;quot;\x0B&amp;quot; (ASCII 11 (0x0B)), a vertical tab." ilk="function" signature="string trim ( string $str [, string $charlist ] )" returns="string"/>
      <scope name="rewind" docs="Sets the file position indicator for handle to the beginning of the file stream." ilk="function" signature="bool rewind ( resource $handle )" returns="bool"/>
      <scope name="ocibindbyname" docs="Undocumented function." ilk="function" signature="ocibindbyname()"/>
      <scope name="ocicancel" docs="Undocumented function." ilk="function" signature="ocicancel()"/>
      <scope name="ocicloselob" docs="Undocumented function." ilk="function" signature="ocicloselob()"/>
      <scope name="ocicollappend" docs="Undocumented function." ilk="function" signature="ocicollappend()"/>
      <scope name="ocicollassign" docs="Undocumented function." ilk="function" signature="ocicollassign()"/>
      <scope name="ocicollassignelem" docs="Undocumented function." ilk="function" signature="ocicollassignelem()"/>
      <scope name="ocicollgetelem" docs="Undocumented function." ilk="function" signature="ocicollgetelem()"/>
      <scope name="ocicollmax" docs="Undocumented function." ilk="function" signature="ocicollmax()"/>
      <scope name="ocicollsize" docs="Undocumented function." ilk="function" signature="ocicollsize()"/>
      <scope name="ocicolltrim" docs="Undocumented function." ilk="function" signature="ocicolltrim()"/>
      <scope name="ocicolumnisnull" docs="Undocumented function." ilk="function" signature="ocicolumnisnull()"/>
      <scope name="ocicolumnname" docs="Undocumented function." ilk="function" signature="ocicolumnname()"/>
      <scope name="ocicolumnprecision" docs="Undocumented function." ilk="function" signature="ocicolumnprecision()"/>
      <scope name="ocicolumnscale" docs="Undocumented function." ilk="function" signature="ocicolumnscale()"/>
      <scope name="ocicolumnsize" docs="Undocumented function." ilk="function" signature="ocicolumnsize()"/>
      <scope name="ocicolumntype" docs="Undocumented function." ilk="function" signature="ocicolumntype()"/>
      <scope name="ocicolumntyperaw" docs="Undocumented function." ilk="function" signature="ocicolumntyperaw()"/>
      <scope name="ocicommit" docs="Undocumented function." ilk="function" signature="ocicommit()"/>
      <scope name="ocidefinebyname" docs="Undocumented function." ilk="function" signature="ocidefinebyname()"/>
      <scope name="ocierror" docs="Undocumented function." ilk="function" signature="ocierror()"/>
      <scope name="ociexecute" docs="Undocumented function." ilk="function" signature="ociexecute()"/>
      <scope name="ocifetch" docs="Undocumented function." ilk="function" signature="ocifetch()"/>
      <scope name="ocifetchinto" docs="This function is deprecated. Recommended alternatives: oci_fetch_array(), oci_fetch_object(), oci_fetch_assoc() and oci_fetch_row()." ilk="function" signature="int ocifetchinto ( resource $statement , array &amp;$result [, int $mode ] )" returns="int"/>
      <scope name="ocifetchstatement" docs="Undocumented function." ilk="function" signature="ocifetchstatement()"/>
      <scope name="ocifreecollection" docs="Undocumented function." ilk="function" signature="ocifreecollection()"/>
      <scope name="ocifreecursor" docs="Undocumented function." ilk="function" signature="ocifreecursor()"/>
      <scope name="ocifreedesc" docs="Undocumented function." ilk="function" signature="ocifreedesc()"/>
      <scope name="ocifreestatement" docs="Undocumented function." ilk="function" signature="ocifreestatement()"/>
      <scope name="ociinternaldebug" docs="Undocumented function." ilk="function" signature="ociinternaldebug()"/>
      <scope name="ociloadlob" docs="Undocumented function." ilk="function" signature="ociloadlob()"/>
      <scope name="ocilogoff" docs="Undocumented function." ilk="function" signature="ocilogoff()"/>
      <scope name="ocilogon" docs="Undocumented function." ilk="function" signature="ocilogon()"/>
      <scope name="ocinewcollection" docs="Undocumented function." ilk="function" signature="ocinewcollection()"/>
      <scope name="ocinewcursor" docs="Undocumented function." ilk="function" signature="ocinewcursor()"/>
      <scope name="ocinewdescriptor" docs="Undocumented function." ilk="function" signature="ocinewdescriptor()"/>
      <scope name="ocinlogon" docs="Undocumented function." ilk="function" signature="ocinlogon()"/>
      <scope name="ocinumcols" docs="Undocumented function." ilk="function" signature="ocinumcols()"/>
      <scope name="ociparse" docs="Undocumented function." ilk="function" signature="ociparse()"/>
      <scope name="ociplogon" docs="Undocumented function." ilk="function" signature="ociplogon()"/>
      <scope name="ociresult" docs="Undocumented function." ilk="function" signature="ociresult()"/>
      <scope name="ocirollback" docs="Undocumented function." ilk="function" signature="ocirollback()"/>
      <scope name="ocirowcount" docs="Undocumented function." ilk="function" signature="ocirowcount()"/>
      <scope name="ocisavelob" docs="Undocumented function." ilk="function" signature="ocisavelob()"/>
      <scope name="ocisavelobfile" docs="Undocumented function." ilk="function" signature="ocisavelobfile()"/>
      <scope name="ociserverversion" docs="Undocumented function." ilk="function" signature="ociserverversion()"/>
      <scope name="ocisetprefetch" docs="Undocumented function." ilk="function" signature="ocisetprefetch()"/>
      <scope name="ocistatementtype" docs="Undocumented function." ilk="function" signature="ocistatementtype()"/>
      <scope name="ociwritelobtofile" docs="Undocumented function." ilk="function" signature="ociwritelobtofile()"/>
      <scope name="ociwritetemporarylob" docs="Undocumented function." ilk="function" signature="ociwritetemporarylob()"/>
      <scope name="octdec" docs="Returns the decimal equivalent of the octal number represented by the octal_string argument." ilk="function" signature="number octdec ( string $octal_string )" returns="number"/>
      <scope name="odbc_autocommit" docs="Without the OnOff parameter, this function returns auto-commit status for connection_id. Non-zero is returned if auto-commit is on, 0 if it is off, or FALSE if an error occurs." ilk="function" signature="mixed odbc_autocommit ( resource $connection_id [, bool $OnOff ] )" returns="mixed"/>
      <scope name="odbc_binmode" docs="(ODBC SQL types affected: BINARY, VARBINARY, LONGVARBINARY)" ilk="function" signature="bool odbc_binmode ( resource $result_id , int $mode )" returns="bool"/>
      <scope name="odbc_close_all" docs="odbc_close_all() will close down all connections to database server(s). Note: This function will fail if there are open transactions on a connection. This connection will remain open in this case." ilk="function" signature="void odbc_close_all ( void )" returns="void"/>
      <scope name="odbc_close" docs="odbc_close() will close down the connection to the database server associated with the given connection identifier. Note: This function will fail if there are open transactions on this connection. The connection will remain open in this case." ilk="function" signature="void odbc_close ( resource $connection_id )" returns="void"/>
      <scope name="odbc_columnprivileges" docs="Lists columns and associated privileges for the given table. Returns an ODBC result identifier or FALSE on failure." ilk="function" signature="resource odbc_columnprivileges ( resource $connection_id , string $qualifier , string $owner , string $table_name , string $column_name )" returns="resource"/>
      <scope name="odbc_columns" docs="Lists all columns in the requested range. Returns an ODBC result identifier containing the information or FALSE on failure." ilk="function" signature="resource odbc_columns ( resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]] )" returns="resource"/>
      <scope name="odbc_commit" docs="odbc_commit() commits all pending transactions on the connection_id connection. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool odbc_commit ( resource $connection_id )" returns="bool"/>
      <scope name="odbc_connect" docs="Returns an ODBC connection id or 0 (FALSE) on error." ilk="function" signature="resource odbc_connect ( string $dsn , string $user , string $password [, int $cursor_type ] )" returns="resource"/>
      <scope name="odbc_cursor" docs="odbc_cursor will return a cursorname for the given result_id." ilk="function" signature="string odbc_cursor ( resource $result_id )" returns="string"/>
      <scope name="odbc_data_source" docs="Returns FALSE on error, and an array upon success." ilk="function" signature="array odbc_data_source ( resource $connection_id , int $fetch_type )" returns="array"/>
      <scope name="odbc_do" docs="odbc_do() will execute a query on the given connection." ilk="function" signature="resource odbc_do ( resource $conn_id , string $query )" returns="resource"/>
      <scope name="odbc_error" docs="Undocumented function." ilk="function" signature="string odbc_error ([ resource $connection_id ] )" returns="string"/>
      <scope name="odbc_errormsg" docs="Undocumented function." ilk="function" signature="string odbc_errormsg ([ resource $connection_id ] )" returns="string"/>
      <scope name="odbc_exec" docs="Returns FALSE on error. Returns an ODBC result identifier if the SQL command was executed successfully." ilk="function" signature="resource odbc_exec ( resource $connection_id , string $query_string [, int $flags ] )" returns="resource"/>
      <scope name="odbc_execute" docs="Executes a statement prepared with odbc_prepare().Returns TRUE on success or FALSE on failure. The array parameters_array only needs to be given if you really have parameters in your statement." ilk="function" signature="bool odbc_execute ( resource $result_id [, array $parameters_array ] )" returns="bool"/>
      <scope name="odbc_fetch_array" docs="Fetch an associative array from an ODBC query. See the changelog below for when this function is available." ilk="function" signature="array odbc_fetch_array ( resource $result [, int $rownumber ] )" returns="array"/>
      <scope name="odbc_fetch_into" docs="Returns the number of columns in the result; FALSE on error. result_array must be passed by reference, but it can be of any type since it will be converted to type array. The array will contain the column values starting at array index 0." ilk="function" signature="int odbc_fetch_into ( resource $result_id , array &amp;$result_array [, int $rownumber ] )" returns="int"/>
      <scope name="odbc_fetch_object" docs="Fetch an object from an ODBC query. See the changelog below for when this function is available." ilk="function" signature="object odbc_fetch_object ( resource $result [, int $rownumber ] )" returns="object"/>
      <scope name="odbc_fetch_row" docs="If odbc_fetch_row() was successful (there was a row), TRUE is returned. If there are no more rows, FALSE is returned." ilk="function" signature="bool odbc_fetch_row ( resource $result_id [, int $row_number ] )" returns="bool"/>
      <scope name="odbc_field_len" docs="odbc_field_len() will return the length of the field referenced by number in the given ODBC result identifier. Field numbering starts at 1." ilk="function" signature="int odbc_field_len ( resource $result_id , int $field_number )" returns="int"/>
      <scope name="odbc_field_name" docs="odbc_field_name() will return the name of the field occupying the given column number in the given ODBC result identifier. Field numbering starts at 1. FALSE is returned on error." ilk="function" signature="string odbc_field_name ( resource $result_id , int $field_number )" returns="string"/>
      <scope name="odbc_field_num" docs="odbc_field_num() will return the number of the column slot that corresponds to the named field in the given ODBC result identifier. Field numbering starts at 1. FALSE is returned on error." ilk="function" signature="int odbc_field_num ( resource $result_id , string $field_name )" returns="int"/>
      <scope name="odbc_field_precision" docs="odbc_field_precision() will return the precision of the field referenced by number in the given ODBC result identifier." ilk="function" signature="int odbc_field_precision ( resource $result_id , int $field_number )" returns="int"/>
      <scope name="odbc_field_scale" docs="odbc_field_scale() will return the scale of the field referenced by number in the given ODBC result identifier." ilk="function" signature="int odbc_field_scale ( resource $result_id , int $field_number )" returns="int"/>
      <scope name="odbc_field_type" docs="odbc_field_type() will return the SQL type of the field referenced by number in the given ODBC result identifier. Field numbering starts at 1." ilk="function" signature="string odbc_field_type ( resource $result_id , int $field_number )" returns="string"/>
      <scope name="odbc_foreignkeys" docs="odbc_foreignkeys() retrieves information about foreign keys. Returns an ODBC result identifier or FALSE on failure." ilk="function" signature="resource odbc_foreignkeys ( resource $connection_id , string $pk_qualifier , string $pk_owner , string $pk_table , string $fk_qualifier , string $fk_owner , string $fk_table )" returns="resource"/>
      <scope name="odbc_free_result" docs="Always returns TRUE." ilk="function" signature="bool odbc_free_result ( resource $result_id )" returns="bool"/>
      <scope name="odbc_gettypeinfo" docs="Retrieves information about data types supported by the data source. Returns an ODBC result identifier or FALSE on failure. The optional argument data_type can be used to restrict the information to a single data type." ilk="function" signature="resource odbc_gettypeinfo ( resource $connection_id [, int $data_type ] )" returns="resource"/>
      <scope name="odbc_longreadlen" docs="(ODBC SQL types affected: LONG, LONGVARBINARY) The number of bytes returned to PHP is controlled by the parameter length. If it is set to 0, Long column data is passed through to the client." ilk="function" signature="bool odbc_longreadlen ( resource $result_id , int $length )" returns="bool"/>
      <scope name="odbc_next_result" docs="odbc_next_result() returns TRUE if there are more result sets available as well as allowing access to the next result set via odbc_fetch_array(), odbc_fetch_row(), odbc_result(), etc." ilk="function" signature="bool odbc_next_result ( resource $result_id )" returns="bool"/>
      <scope name="odbc_num_fields" docs="odbc_num_fields() will return the number of fields (columns) in an ODBC result. This function will return -1 on error. The argument is a valid result identifier returned by odbc_exec()." ilk="function" signature="int odbc_num_fields ( resource $result_id )" returns="int"/>
      <scope name="odbc_num_rows" docs="odbc_num_rows() will return the number of rows in an ODBC result. This function will return -1 on error. For INSERT, UPDATE and DELETE statements odbc_num_rows() returns the number of rows affected. For a SELECT clause this can be the number of rows available." ilk="function" signature="int odbc_num_rows ( resource $result_id )" returns="int"/>
      <scope name="odbc_pconnect" docs="Returns an ODBC connection id or 0 (FALSE) on error. This function is much like odbc_connect(), except that the connection is not really closed when the script has finished. Future requests for a connection with the same dsn, user, password combination (via odbc_connect() and odbc_pconnect()) can reuse the persistent connection." ilk="function" signature="resource odbc_pconnect ( string $dsn , string $user , string $password [, int $cursor_type ] )" returns="resource"/>
      <scope name="odbc_prepare" docs="Returns FALSE on error." ilk="function" signature="resource odbc_prepare ( resource $connection_id , string $query_string )" returns="resource"/>
      <scope name="odbc_primarykeys" docs="Returns the column names that comprise the primary key for a table. Returns an ODBC result identifier or FALSE on failure." ilk="function" signature="resource odbc_primarykeys ( resource $connection_id , string $qualifier , string $owner , string $table )" returns="resource"/>
      <scope name="odbc_procedurecolumns" docs="Returns the list of input and output parameters, as well as the columns that make up the result set for the specified procedures. Returns an ODBC result identifier or FALSE on failure." ilk="function" signature="resource odbc_procedurecolumns ( resource $connection_id [, string $qualifier ], string $owner , string $proc , string $column )" returns="resource"/>
      <scope name="odbc_procedures" docs="Lists all procedures in the requested range. Returns an ODBC result identifier containing the information or FALSE on failure." ilk="function" signature="resource odbc_procedures ( resource $connection_id [, string $qualifier ], string $owner , string $name )" returns="resource"/>
      <scope name="odbc_result_all" docs="Returns the number of rows in the result or FALSE on error." ilk="function" signature="int odbc_result_all ( resource $result_id [, string $format ] )" returns="int"/>
      <scope name="odbc_result" docs="Returns the string contents of the field, FALSE on error, NULL for NULL data, or TRUE for binary data." ilk="function" signature="mixed odbc_result ( resource $result_id , mixed $field )" returns="mixed"/>
      <scope name="odbc_rollback" docs="Rolls back all pending statements on connection_id. Returns TRUE on success, FALSE on failure." ilk="function" signature="bool odbc_rollback ( resource $connection_id )" returns="bool"/>
      <scope name="odbc_setoption" docs="This function allows fiddling with the ODBC options for a particular connection or query result. It was written to help find work around to problems in quirky ODBC drivers. You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have. You will certainly need a good ODBC reference to explain all the different options and values that can be used. Different driver versions support different options." ilk="function" signature="bool odbc_setoption ( resource $id , int $function , int $option , int $param )" returns="bool"/>
      <scope name="odbc_specialcolumns" docs="The result set has the following columns: SCOPE COLUMN_NAME DATA_TYPE TYPE_NAME PRECISION LENGTH SCALE PSEUDO_COLUMN" ilk="function" signature="resource odbc_specialcolumns ( resource $connection_id , int $type , string $qualifier , string $owner , string $table , int $scope , int $nullable )" returns="resource"/>
      <scope name="odbc_statistics" docs="Get statistics about a table and its indexes. Returns an ODBC result identifier or FALSE on failure." ilk="function" signature="resource odbc_statistics ( resource $connection_id , string $qualifier , string $owner , string $table_name , int $unique , int $accuracy )" returns="resource"/>
      <scope name="odbc_tableprivileges" docs="Lists tables in the requested range and the privileges associated with each table. Returns an ODBC result identifier or FALSE on failure." ilk="function" signature="resource odbc_tableprivileges ( resource $connection_id , string $qualifier , string $owner , string $name )" returns="resource"/>
      <scope name="odbc_tables" docs="Lists all tables in the requested range. Returns an ODBC result identifier containing the information or FALSE on failure." ilk="function" signature="resource odbc_tables ( resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]] )" returns="resource"/>
      <scope name="opendir" docs="Opens up a directory handle to be used in subsequent closedir(), readdir(), and rewinddir() calls." ilk="function" signature="resource opendir ( string $path [, resource $context ] )" returns="resource"/>
      <scope name="openlog" docs="openlog() opens a connection to the system logger for a program." ilk="function" signature="bool openlog ( string $ident , int $option , int $facility )" returns="bool"/>
      <scope name="openssl_csr_export_to_file" docs="openssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it as ascii-armoured text into the file named by outfilename." ilk="function" signature="bool openssl_csr_export_to_file ( resource $csr , string $outfilename [, bool $notext ] )" returns="bool"/>
      <scope name="openssl_csr_export" docs="openssl_csr_export() takes the Certificate Signing Request represented by csr and stores it as ascii-armoured text into out, which is passed by reference." ilk="function" signature="bool openssl_csr_export ( resource $csr , string &amp;$out [, bool $notext ] )" returns="bool"/>
      <scope name="openssl_csr_new" docs="openssl_csr_new() generates a new CSR (Certificate Signing Request) based on the information provided by dn, which represents the Distinguished Name to be used in the certificate." ilk="function" signature="mixed openssl_csr_new ( array $dn , resource &amp;$privkey [, array $configargs [, array $extraattribs ]] )" returns="mixed"/>
      <scope name="openssl_csr_sign" docs="openssl_csr_sign() generates an x509 certificate resource from the given CSR." ilk="function" signature="resource openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial ]] )" returns="resource"/>
      <scope name="openssl_error_string" docs="openssl_error_string() returns the last error from the openSSL library. Error messages are stacked, so this function should be called multiple times to collect all of the information." ilk="function" signature="string openssl_error_string ( void )" returns="string"/>
      <scope name="openssl_free_key" docs="openssl_free_key() frees the key associated with the specified key_identifier from memory." ilk="function" signature="void openssl_free_key ( resource $key_identifier )" returns="void"/>
      <scope name="openssl_get_privatekey" docs="Undocumented function." ilk="function" signature="openssl_get_privatekey()"/>
      <scope name="openssl_get_publickey" docs="Undocumented function." ilk="function" signature="openssl_get_publickey()"/>
      <scope name="openssl_open" docs="openssl_open() opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data. The envelope key is generated when the data are sealed and can only be used by one specific private key. See openssl_seal() for more information." ilk="function" signature="bool openssl_open ( string $sealed_data , string &amp;$open_data , string $env_key , mixed $priv_key_id )" returns="bool"/>
      <scope name="openssl_pkcs7_decrypt" docs="Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey." ilk="function" signature="bool openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] )" returns="bool"/>
      <scope name="openssl_pkcs7_encrypt" docs="openssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts." ilk="function" signature="bool openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags [, int $cipherid ]] )" returns="bool"/>
      <scope name="openssl_pkcs7_sign" docs="openssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters." ilk="function" signature="bool openssl_pkcs7_sign ( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags [, string $extracerts ]] )" returns="bool"/>
      <scope name="openssl_pkcs7_verify" docs="openssl_pkcs7_verify() reads the S/MIME message contained in the given file and examines the digital signature." ilk="function" signature="mixed openssl_pkcs7_verify ( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]] )" returns="mixed"/>
      <scope name="openssl_pkey_export_to_file" docs="openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded) rendition of key into the file named by outfilename." ilk="function" signature="bool openssl_pkey_export_to_file ( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]] )" returns="bool"/>
      <scope name="openssl_pkey_export" docs="openssl_pkey_export() exports key as a PEM encoded string and stores it into out (which is passed by reference)." ilk="function" signature="bool openssl_pkey_export ( mixed $key , string &amp;$out [, string $passphrase [, array $configargs ]] )" returns="bool"/>
      <scope name="openssl_pkey_free" docs="This function frees a private key created by openssl_pkey_new()." ilk="function" signature="void openssl_pkey_free ( resource $key )" returns="void"/>
      <scope name="openssl_pkey_get_private" docs="openssl_get_privatekey() parses key and prepares it for use by other functions." ilk="function" signature="resource openssl_pkey_get_private ( mixed $key [, string $passphrase ] )" returns="resource"/>
      <scope name="openssl_pkey_get_public" docs="openssl_get_publickey() extracts the public key from certificate and prepares it for use by other functions." ilk="function" signature="resource openssl_pkey_get_public ( mixed $certificate )" returns="resource"/>
      <scope name="openssl_pkey_new" docs="openssl_pkey_new() generates a new private and public key pair. The public component of the key can be obtained using openssl_pkey_get_public()." ilk="function" signature="resource openssl_pkey_new ([ array $configargs ] )" returns="resource"/>
      <scope name="openssl_private_decrypt" docs="openssl_private_decrypt() decrypts data that was previous encrypted via openssl_public_encrypt() and stores the result into decrypted." ilk="function" signature="bool openssl_private_decrypt ( string $data , string &amp;$decrypted , mixed $key [, int $padding ] )" returns="bool"/>
      <scope name="openssl_private_encrypt" docs="openssl_private_encrypt() encrypts data with private key and stores the result into crypted. Encrypted data can be decrypted via openssl_public_decrypt()." ilk="function" signature="bool openssl_private_encrypt ( string $data , string &amp;$crypted , mixed $key [, int $padding ] )" returns="bool"/>
      <scope name="openssl_public_decrypt" docs="openssl_public_decrypt() decrypts data that was previous encrypted via openssl_private_encrypt() and stores the result into decrypted." ilk="function" signature="bool openssl_public_decrypt ( string $data , string &amp;$decrypted , mixed $key [, int $padding ] )" returns="bool"/>
      <scope name="openssl_public_encrypt" docs="openssl_public_encrypt() encrypts data with public key and stores the result into crypted. Encrypted data can be decrypted via openssl_private_decrypt()." ilk="function" signature="bool openssl_public_encrypt ( string $data , string &amp;$crypted , mixed $key [, int $padding ] )" returns="bool"/>
      <scope name="openssl_seal" docs="openssl_seal() seals (encrypts) data by using RC4 with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned in env_keys. This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient&amp;#039;s public key." ilk="function" signature="int openssl_seal ( string $data , string &amp;$sealed_data , array &amp;$env_keys , array $pub_key_ids )" returns="int"/>
      <scope name="openssl_sign" docs="openssl_sign() computes a signature for the specified data by using SHA1 for hashing followed by encryption using the private key associated with priv_key_id. Note that the data itself is not encrypted." ilk="function" signature="bool openssl_sign ( string $data , string &amp;$signature , mixed $priv_key_id [, int $signature_alg ] )" returns="bool"/>
      <scope name="openssl_verify" docs="openssl_verify() verifies that the signature is correct for the specified data using the public key associated with pub_key_id. This must be the public key corresponding to the private key used for signing." ilk="function" signature="int openssl_verify ( string $data , string $signature , mixed $pub_key_id [, int $signature_alg ] )" returns="int"/>
      <scope name="openssl_x509_check_private_key" docs="Checks whether the given key is the private key that corresponds to cert." ilk="function" signature="bool openssl_x509_check_private_key ( mixed $cert , mixed $key )" returns="bool"/>
      <scope name="openssl_x509_checkpurpose" docs="openssl_x509_checkpurpose() examines a certificate to see if it can be used for the specified purpose." ilk="function" signature="int openssl_x509_checkpurpose ( mixed $x509cert , int $purpose [, array $cainfo [, string $untrustedfile ]] )" returns="int"/>
      <scope name="openssl_x509_export_to_file" docs="openssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format." ilk="function" signature="bool openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, bool $notext ] )" returns="bool"/>
      <scope name="openssl_x509_export" docs="openssl_x509_export() stores x509 into a string named by output in a PEM encoded format." ilk="function" signature="bool openssl_x509_export ( mixed $x509 , string &amp;$output [, bool $notext ] )" returns="bool"/>
      <scope name="openssl_x509_free" docs="openssl_x509_free() frees the certificate associated with the specified x509cert resource from memory." ilk="function" signature="void openssl_x509_free ( resource $x509cert )" returns="void"/>
      <scope name="openssl_x509_parse" docs="openssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc." ilk="function" signature="array openssl_x509_parse ( mixed $x509cert [, bool $shortnames ] )" returns="array"/>
      <scope name="openssl_x509_read" docs="openssl_x509_read() parses the certificate supplied by x509certdata and returns a resource identifier for it." ilk="function" signature="resource openssl_x509_read ( mixed $x509certdata )" returns="resource"/>
      <scope name="ora_bind" docs="Binds the named PHP variable with a SQL parameter." ilk="function" signature="bool ora_bind ( resource $cursor , string $phpvar , string $sqlparam , int $length [, int $type ] )" returns="bool"/>
      <scope name="ora_close" docs="Closes a data cursor." ilk="function" signature="bool ora_close ( resource $cursor )" returns="bool"/>
      <scope name="ora_columnname" docs="Returns the name of the column on the cursor." ilk="function" signature="string ora_columnname ( resource $cursor , int $column )" returns="string"/>
      <scope name="ora_columnsize" docs="Returns the size of a column on the cursor." ilk="function" signature="int ora_columnsize ( resource $cursor , int $column )" returns="int"/>
      <scope name="ora_columntype" docs="Returns the Oracle data type name of the column on the cursor." ilk="function" signature="string ora_columntype ( resource $cursor , int $column )" returns="string"/>
      <scope name="ora_commit" docs="Commits an Oracle transaction." ilk="function" signature="bool ora_commit ( resource $connection )" returns="bool"/>
      <scope name="ora_commitoff" docs="Turns off automatic commit after each ora_exec() on the given connection." ilk="function" signature="bool ora_commitoff ( resource $connection )" returns="bool"/>
      <scope name="ora_commiton" docs="Turns on automatic commit after each ora_exec() on the given connection." ilk="function" signature="bool ora_commiton ( resource $connection )" returns="bool"/>
      <scope name="ora_do" docs="Parse and execute a statement, then fetch the first result row." ilk="function" signature="resource ora_do ( resource $connection , string $query )" returns="resource"/>
      <scope name="ora_error" docs="Returns the error message of the last executed statement on the specified cursor or connection." ilk="function" signature="string ora_error ([ resource $cursor_or_connection ] )" returns="string"/>
      <scope name="ora_errorcode" docs="Returns the numeric error code of the last executed statement on the specified cursor or connection." ilk="function" signature="int ora_errorcode ([ resource $cursor_or_connection ] )" returns="int"/>
      <scope name="ora_exec" docs="Executes the parsed statement cursor." ilk="function" signature="bool ora_exec ( resource $cursor )" returns="bool"/>
      <scope name="ora_fetch_into" docs="Fetches a row of data into an array." ilk="function" signature="int ora_fetch_into ( resource $cursor , array &amp;$result [, int $flags ] )" returns="int"/>
      <scope name="ora_fetch" docs="Retrieves a row of data from the specified cursor." ilk="function" signature="bool ora_fetch ( resource $cursor )" returns="bool"/>
      <scope name="ora_getcolumn" docs="Fetches the data for a column or function result." ilk="function" signature="string ora_getcolumn ( resource $cursor , int $column )" returns="string"/>
      <scope name="ora_logoff" docs="Logs out the user and disconnects from the server." ilk="function" signature="bool ora_logoff ( resource $connection )" returns="bool"/>
      <scope name="ora_logon" docs="Establishes a connection between PHP and an Oracle database." ilk="function" signature="resource ora_logon ( string $user , string $password )" returns="resource"/>
      <scope name="ora_numcols" docs="Returns the number of columns in a result. It only returns meaningful values after a parse/exec/fetch sequence." ilk="function" signature="int ora_numcols ( resource $cursor )" returns="int"/>
      <scope name="ora_numrows" docs="Returns the number of rows in a result." ilk="function" signature="int ora_numrows ( resource $cursor )" returns="int"/>
      <scope name="ora_open" docs="Opens an Oracle cursor associated with connection." ilk="function" signature="resource ora_open ( resource $connection )" returns="resource"/>
      <scope name="ora_parse" docs="Parses an SQL statement or a PL/SQL block and associates it with the given cursor." ilk="function" signature="bool ora_parse ( resource $cursor , string $sql_statement [, int $defer ] )" returns="bool"/>
      <scope name="ora_plogon" docs="Establishes a persistent connection between PHP and an Oracle database." ilk="function" signature="resource ora_plogon ( string $user , string $password )" returns="resource"/>
      <scope name="ora_rollback" docs="Rollbacks an Oracle transaction." ilk="function" signature="bool ora_rollback ( resource $connection )" returns="bool"/>
      <scope name="ord" docs="Returns the ASCII value of the first character of string." ilk="function" signature="int ord ( string $string )" returns="int"/>
      <scope name="output_add_rewrite_var" docs="This function adds another name/value pair to the URL rewrite mechanism. The name and value will be added to URLs (as GET parameter) and forms (as hidden input fields) the same way as the session ID when transparent URL rewriting is enabled with session.use_trans_sid. Please note that absolute URLs (http://example.com/..) aren&amp;#039;t rewritten." ilk="function" signature="bool output_add_rewrite_var ( string $name , string $value )" returns="bool"/>
      <scope name="output_reset_rewrite_vars" docs="This function resets the URL rewriter and removes all rewrite variables previously set by the output_add_rewrite_var() function or the session mechanism (if session.use_trans_sid was set on session_start())." ilk="function" signature="bool output_reset_rewrite_vars ( void )" returns="bool"/>
      <scope name="overload" docs="The overload() function will enable property and method call overloading for a class identified by class_name." ilk="function" signature="void overload ( string $class_name )" returns="void"/>
      <scope name="ovrimos_close" docs="Closes the specified connection to Ovrimos. This has the effect of rolling back uncommitted transactions." ilk="function" signature="void ovrimos_close ( int $connection )" returns="void"/>
      <scope name="ovrimos_commit" docs="Commits the transaction." ilk="function" signature="bool ovrimos_commit ( int $connection_id )" returns="bool"/>
      <scope name="ovrimos_connect" docs="Connects to the specified database." ilk="function" signature="int ovrimos_connect ( string $host , string $dborport , string $user , string $password )" returns="int"/>
      <scope name="ovrimos_cursor" docs="Gets the name of the cursor. Useful when wishing to perform positioned updates or deletes." ilk="function" signature="string ovrimos_cursor ( int $result_id )" returns="string"/>
      <scope name="ovrimos_exec" docs="Executes an SQL statement (query or update) and returns a result identifier." ilk="function" signature="int ovrimos_exec ( int $connection_id , string $query )" returns="int"/>
      <scope name="ovrimos_execute" docs="Executes a prepared statement." ilk="function" signature="bool ovrimos_execute ( int $result_id [, array $parameters_array ] )" returns="bool"/>
      <scope name="ovrimos_fetch_into" docs="Fetches a row from the given result set, into result_array." ilk="function" signature="bool ovrimos_fetch_into ( int $result_id , array &amp;$result_array [, string $how [, int $rownumber ]] )" returns="bool"/>
      <scope name="ovrimos_fetch_row" docs="Fetches a row from the result set. Column values should be retrieved with other calls." ilk="function" signature="bool ovrimos_fetch_row ( int $result_id [, int $how [, int $row_number ]] )" returns="bool"/>
      <scope name="ovrimos_field_len" docs="Gets the length of the specified output column." ilk="function" signature="int ovrimos_field_len ( int $result_id , int $field_number )" returns="int"/>
      <scope name="ovrimos_field_name" docs="Returns the output column name at the index specified." ilk="function" signature="string ovrimos_field_name ( int $result_id , int $field_number )" returns="string"/>
      <scope name="ovrimos_field_num" docs="Returns the 1-based index of the specified output column." ilk="function" signature="int ovrimos_field_num ( int $result_id , string $field_name )" returns="int"/>
      <scope name="ovrimos_field_type" docs="Returns the type of the output column" ilk="function" signature="int ovrimos_field_type ( int $result_id , int $field_number )" returns="int"/>
      <scope name="ovrimos_free_result" docs="Frees the specified result identifier." ilk="function" signature="bool ovrimos_free_result ( int $result_id )" returns="bool"/>
      <scope name="ovrimos_longreadlen" docs="Specifies how many bytes are to be retrieved from long datatypes (long varchar and long varbinary)." ilk="function" signature="bool ovrimos_longreadlen ( int $result_id , int $length )" returns="bool"/>
      <scope name="ovrimos_num_fields" docs="Returns the number of columns in the specified result identifier." ilk="function" signature="int ovrimos_num_fields ( int $result_id )" returns="int"/>
      <scope name="ovrimos_num_rows" docs="Gets the number of rows affected by update operations." ilk="function" signature="int ovrimos_num_rows ( int $result_id )" returns="int"/>
      <scope name="ovrimos_prepare" docs="Prepares an SQL statement." ilk="function" signature="int ovrimos_prepare ( int $connection_id , string $query )" returns="int"/>
      <scope name="ovrimos_result_all" docs="Prints the whole result set as an HTML table." ilk="function" signature="int ovrimos_result_all ( int $result_id [, string $format ] )" returns="int"/>
      <scope name="ovrimos_result" docs="Retrieves the output column specified by field." ilk="function" signature="string ovrimos_result ( int $result_id , mixed $field )" returns="string"/>
      <scope name="ovrimos_rollback" docs="Rolls back the transaction." ilk="function" signature="bool ovrimos_rollback ( int $connection_id )" returns="bool"/>
      <scope name="pack" docs="Pack given arguments into binary string according to format." ilk="function" signature="string pack ( string $format [, mixed $args [, mixed $... ]] )" returns="string"/>
      <scope name="parse_ini_file" docs="parse_ini_file() loads in the ini file specified in filename, and returns the settings in it in an associative array." ilk="function" signature="array parse_ini_file ( string $filename [, bool $process_sections ] )" returns="array"/>
      <scope name="parse_str" docs="Parses str as if it were the query string passed via a URL and sets variables in the current scope." ilk="function" signature="void parse_str ( string $str [, array &amp;$arr ] )" returns="void"/>
      <scope name="parse_url" docs="This function parses a URL and returns an associative array containing any of the various components of the URL that are present." ilk="function" signature="mixed parse_url ( string $url [, int $component ] )" returns="mixed"/>
      <scope name="passthru" docs="The passthru() function is similar to the exec() function in that it executes a command. This function should be used in place of exec() or system() when the output from the Unix command is binary data which needs to be passed directly back to the browser. A common use for this is to execute something like the pbmplus utilities that can output an image stream directly. By setting the Content-type to image/gif and then calling a pbmplus program to output a gif, you can create PHP scripts that output images directly." ilk="function" signature="void passthru ( string $command [, int &amp;$return_var ] )" returns="void"/>
      <scope name="pathinfo" docs="pathinfo() returns an associative array containing information about path." ilk="function" signature="mixed pathinfo ( string $path [, int $options ] )" returns="mixed"/>
      <scope name="pclose" docs="Closes a file pointer to a pipe opened by popen()." ilk="function" signature="int pclose ( resource $handle )" returns="int"/>
      <scope name="pcntl_alarm" docs="Creates a timer that will send a SIGALRM signal to the process after the given number of seconds. Any call to pcntl_alarm() will cancel any previously set alarm." ilk="function" signature="int pcntl_alarm ( int $seconds )" returns="int"/>
      <scope name="pcntl_exec" docs="Executes the program with the given arguments." ilk="function" signature="void pcntl_exec ( string $path [, array $args [, array $envs ]] )" returns="void"/>
      <scope name="pcntl_fork" docs="The pcntl_fork() function creates a child process that differs from the parent process only in its PID and PPID. Please see your system&amp;#039;s fork(2) man page for specific details as to how fork works on your system." ilk="function" signature="int pcntl_fork ( void )" returns="int"/>
      <scope name="pcntl_signal" docs="The pcntl_signal() function installs a new signal handler for the signal indicated by signo." ilk="function" signature="bool pcntl_signal ( int $signo , callback $handler [, bool $restart_syscalls ] )" returns="bool"/>
      <scope name="pcntl_waitpid" docs="Suspends execution of the current process until a child as specified by the pid argument has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function." ilk="function" signature="int pcntl_waitpid ( int $pid , int &amp;$status [, int $options ] )" returns="int"/>
      <scope name="pcntl_wexitstatus" docs="Returns the return code of a terminated child. This function is only useful if pcntl_wifexited() returned TRUE." ilk="function" signature="int pcntl_wexitstatus ( int $status )" returns="int"/>
      <scope name="pcntl_wifexited" docs="Checks whether the child status code represents a normal exit." ilk="function" signature="bool pcntl_wifexited ( int $status )" returns="bool"/>
      <scope name="pcntl_wifsignaled" docs="Checks whether the child process exited because of a signal which was not caught." ilk="function" signature="bool pcntl_wifsignaled ( int $status )" returns="bool"/>
      <scope name="pcntl_wifstopped" docs="Checks whether the child process which caused the return is currently stopped; this is only possible if the call to pcntl_waitpid() was done using the option WUNTRACED." ilk="function" signature="bool pcntl_wifstopped ( int $status )" returns="bool"/>
      <scope name="pcntl_wstopsig" docs="Returns the number of the signal which caused the child to stop. This function is only useful if pcntl_wifstopped() returned TRUE." ilk="function" signature="int pcntl_wstopsig ( int $status )" returns="int"/>
      <scope name="pcntl_wtermsig" docs="Returns the number of the signal that caused the child process to terminate. This function is only useful if pcntl_wifsignaled() returned TRUE." ilk="function" signature="int pcntl_wtermsig ( int $status )" returns="int"/>
      <scope name="PDF_add_annotation" docs="This function is deprecated, use PDF_create_annotation() with type=Text instead." ilk="function" signature="PDF_add_annotation(): this function is deprecated."/>
      <scope name="PDF_add_bookmark" docs="This function is deprecated since PDFlib version 6, use PDF_create_bookmark() instead." ilk="function" signature="PDF_add_bookmark(): this function is deprecated."/>
      <scope name="PDF_add_launchlink" docs="Adds a link to a web resource." ilk="function" signature="bool PDF_add_launchlink ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename )" returns="bool"/>
      <scope name="PDF_add_locallink" docs="Add a link annotation to a target within the current PDF file. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_add_locallink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , int $page , string $dest )" returns="bool"/>
      <scope name="PDF_add_note" docs="Sets an annotation for the current page. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_add_note ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )" returns="bool"/>
      <scope name="PDF_add_outline" docs="This function is deprecated, use PDF_create_bookmark() instead." ilk="function" signature="PDF_add_outline(): this function is deprecated."/>
      <scope name="PDF_add_pdflink" docs="Add a file link annotation to a PDF target. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_add_pdflink ( resource $pdfdoc , float $bottom_left_x , float $bottom_left_y , float $up_right_x , float $up_right_y , string $filename , int $page , string $dest )" returns="bool"/>
      <scope name="PDF_add_thumbnail" docs="Adds an existing image as thumbnail for the current page. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_add_thumbnail ( resource $pdfdoc , int $image )" returns="bool"/>
      <scope name="PDF_add_weblink" docs="Adds a weblink annotation to a target url on the Web. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_add_weblink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , string $url )" returns="bool"/>
      <scope name="PDF_arc" docs="Adds a counterclockwise circular arc." ilk="function" signature="bool PDF_arc ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )" returns="bool"/>
      <scope name="PDF_arcn" docs="Except for the drawing direction, this function behaves exactly like PDF_arc()." ilk="function" signature="bool PDF_arcn ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )" returns="bool"/>
      <scope name="PDF_attach_file" docs="Adds a file attachment annotation. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_attach_file ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename , string $description , string $author , string $mimetype , string $icon )" returns="bool"/>
      <scope name="PDF_begin_page" docs="Adds a new page to the document. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_begin_page ( resource $pdfdoc , float $width , float $height )" returns="bool"/>
      <scope name="PDF_begin_pattern" docs="Starts a new pattern definition." ilk="function" signature="int PDF_begin_pattern ( resource $pdfdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )" returns="int"/>
      <scope name="PDF_begin_template" docs="Starts a new template definition." ilk="function" signature="int PDF_begin_template ( resource $pdfdoc , float $width , float $height )" returns="int"/>
      <scope name="PDF_circle" docs="Adds a circle. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_circle ( resource $pdfdoc , float $x , float $y , float $r )" returns="bool"/>
      <scope name="PDF_clip" docs="Uses the current path as clipping path, and terminate the path. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_clip ( resource $p )" returns="bool"/>
      <scope name="PDF_close_image" docs="Closes an image retrieved with the PDF_open_image() function." ilk="function" signature="bool PDF_close_image ( resource $p , int $image )" returns="bool"/>
      <scope name="PDF_close_pdi_page" docs="Closes the page handle, and frees all page-related resources. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_close_pdi_page ( resource $p , int $page )" returns="bool"/>
      <scope name="PDF_close_pdi" docs="Closes all open page handles, and closes the input PDF document. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_close_pdi ( resource $p , int $doc )" returns="bool"/>
      <scope name="PDF_close" docs="Closes the generated PDF file, and frees all document-related resources. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_close ( resource $p )" returns="bool"/>
      <scope name="PDF_closepath_fill_stroke" docs="Closes the path, fills, and strokes it. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_closepath_fill_stroke ( resource $p )" returns="bool"/>
      <scope name="PDF_closepath_stroke" docs="Closes the path, and strokes it. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_closepath_stroke ( resource $p )" returns="bool"/>
      <scope name="PDF_closepath" docs="Closes the current path. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_closepath ( resource $p )" returns="bool"/>
      <scope name="PDF_concat" docs="Concatenates a matrix to the current transformation matrix (CTM). Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_concat ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )" returns="bool"/>
      <scope name="PDF_continue_text" docs="Prints text at the next line. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_continue_text ( resource $p , string $text )" returns="bool"/>
      <scope name="PDF_curveto" docs="Draws a Bezier curve from the current point, using 3 more control points. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_curveto ( resource $p , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )" returns="bool"/>
      <scope name="PDF_delete" docs="Deletes a PDFlib object, and frees all internal resources. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_delete ( resource $pdfdoc )" returns="bool"/>
      <scope name="PDF_end_page" docs="Finishes the page. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_end_page ( resource $p )" returns="bool"/>
      <scope name="PDF_end_pattern" docs="Finishes the pattern definition. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_end_pattern ( resource $p )" returns="bool"/>
      <scope name="PDF_end_template" docs="Finishes a template definition. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_end_template ( resource $p )" returns="bool"/>
      <scope name="PDF_endpath" docs="Ends the current path without filling or stroking it." ilk="function" signature="bool PDF_endpath ( resource $p )" returns="bool"/>
      <scope name="PDF_fill_stroke" docs="Fills and strokes the current path with the current fill and stroke color. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_fill_stroke ( resource $p )" returns="bool"/>
      <scope name="PDF_fill" docs="Fills the interior of the current path with the current fill color. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_fill ( resource $p )" returns="bool"/>
      <scope name="PDF_findfont" docs="Search for a font and prepare it for later use with PDF_setfont(). The metrics will be loaded, and if embed is nonzero, the font file will be checked, but not yet used. encoding is one of builtin, macroman, winansi, host, a user-defined encoding name or the name of a CMap. Parameter embed is optional before PHP 4.3.5 or with PDFlib less than 5." ilk="function" signature="int PDF_findfont ( resource $p , string $fontname , string $encoding , int $embed )" returns="int"/>
      <scope name="PDF_get_buffer" docs="Fetches the buffer containing the generated PDF data." ilk="function" signature="string PDF_get_buffer ( resource $p )" returns="string"/>
      <scope name="PDF_get_font" docs="This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter font instead." ilk="function" signature="PDF_get_font(): this function is deprecated."/>
      <scope name="PDF_get_fontname" docs="This function is deprecated since PDFlib version 3, use PDF_get_parameter() with the parameter fontname instead." ilk="function" signature="PDF_get_fontname(): this function is deprecated."/>
      <scope name="PDF_get_fontsize" docs="This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter fontsizeinstead." ilk="function" signature="PDF_get_fontsize(): this function is deprecated."/>
      <scope name="PDF_get_image_height" docs="This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter imageheight instead." ilk="function" signature="PDF_get_image_height(): this function is deprecated."/>
      <scope name="PDF_get_image_width" docs="This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter imagewidth instead." ilk="function" signature="PDF_get_image_width(): this function is deprecated."/>
      <scope name="PDF_get_majorversion" docs="This function is deprecated since PDFlib version 5, use PDF_get_value() with the parameter major instead." ilk="function" signature="int PDF_get_majorversion ( void )" returns="int"/>
      <scope name="PDF_get_minorversion" docs="Returns the minor version number of the PDFlib version." ilk="function" signature="int PDF_get_minorversion ( void )" returns="int"/>
      <scope name="PDF_get_parameter" docs="Gets the contents of some PDFlib parameter with string type." ilk="function" signature="string PDF_get_parameter ( resource $p , string $key , float $modifier )" returns="string"/>
      <scope name="PDF_get_pdi_parameter" docs="Gets the contents of a PDI document parameter with string type." ilk="function" signature="string PDF_get_pdi_parameter ( resource $p , string $key , int $doc , int $page , int $reserved )" returns="string"/>
      <scope name="PDF_get_pdi_value" docs="Gets the contents of a PDI document parameter with numerical type." ilk="function" signature="float PDF_get_pdi_value ( resource $p , string $key , int $doc , int $page , int $reserved )" returns="float"/>
      <scope name="PDF_get_value" docs="Gets the value of some PDFlib parameter with numerical type." ilk="function" signature="float PDF_get_value ( resource $p , string $key , float $modifier )" returns="float"/>
      <scope name="PDF_initgraphics" docs="Reset all color and graphics state parameters to their defaults. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_initgraphics ( resource $p )" returns="bool"/>
      <scope name="PDF_lineto" docs="Draws a line from the current point to another point. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_lineto ( resource $p , float $x , float $y )" returns="bool"/>
      <scope name="PDF_makespotcolor" docs="Finds a built-in spot color name, or makes a named spot color from the current fill color. Returns TRUE on success or FALSE on failure." ilk="function" signature="int PDF_makespotcolor ( resource $p , string $spotname )" returns="int"/>
      <scope name="PDF_moveto" docs="Sets the current point for graphics output. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_moveto ( resource $p , float $x , float $y )" returns="bool"/>
      <scope name="PDF_new" docs="Creates a new PDFlib object with default settings." ilk="function" signature="resource PDF_new ( $ )" returns="resource"/>
      <scope name="PDF_open_ccitt" docs="Opens a raw CCITT image." ilk="function" signature="int PDF_open_ccitt ( resource $pdfdoc , string $filename , int $width , int $height , int $BitReverse , int $k , int $Blackls1 )" returns="int"/>
      <scope name="PDF_open_file" docs="Creates a new PDF file using the supplied file name. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_open_file ( resource $p , string $filename )" returns="bool"/>
      <scope name="PDF_open_gif" docs="This function is deprecated since PDFlib version 3, use PDF_load_image() instead." ilk="function" signature="PDF_open_gif(): this function is deprecated."/>
      <scope name="PDF_open_image_file" docs="Opens an image file." ilk="function" signature="int PDF_open_image_file ( resource $p , string $imagetype , string $filename , string $stringparam , int $intparam )" returns="int"/>
      <scope name="PDF_open_image" docs="Uses image data from a variety of data sources." ilk="function" signature="int PDF_open_image ( resource $p , string $imagetype , string $source , string $data , int $length , int $width , int $height , int $components , int $bpc , string $params )" returns="int"/>
      <scope name="PDF_open_jpeg" docs="This function is deprecated since PDFlib version 3, use PDF_load_image() instead." ilk="function" signature="PDF_open_jpeg(): this function is deprecated."/>
      <scope name="PDF_open_memory_image" docs="This function is not supported by PDFlib GmbH." ilk="function" signature="int PDF_open_memory_image ( resource $p , resource $image )" returns="int"/>
      <scope name="PDF_open_pdi_page" docs="Prepares a page for later use with PDF_fit_pdi_page()." ilk="function" signature="int PDF_open_pdi_page ( resource $p , int $doc , int $pagenumber , string $optlist )" returns="int"/>
      <scope name="PDF_open_pdi" docs="Opens a disk-based or virtual PDF document and prepares it for later use." ilk="function" signature="int PDF_open_pdi ( resource $pdfdoc , string $filename , string $optlist , int $len )" returns="int"/>
      <scope name="PDF_open_tiff" docs="This function is deprecated since PDFlib version 3, use PDF_load_image() instead." ilk="function" signature="PDF_open_tiff(): this function is deprecated."/>
      <scope name="PDF_place_image" docs="Places an image and scales it. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_place_image ( resource $pdfdoc , int $image , float $x , float $y , float $scale )" returns="bool"/>
      <scope name="PDF_place_pdi_page" docs="Places a PDF page and scales it. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_place_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , float $sx , float $sy )" returns="bool"/>
      <scope name="PDF_rect" docs="Draws a rectangle. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_rect ( resource $p , float $x , float $y , float $width , float $height )" returns="bool"/>
      <scope name="PDF_restore" docs="Restores the most recently saved graphics state. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_restore ( resource $p )" returns="bool"/>
      <scope name="PDF_rotate" docs="Rotates the coordinate system. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_rotate ( resource $p , float $phi )" returns="bool"/>
      <scope name="PDF_save" docs="Saves the current graphics state. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_save ( resource $p )" returns="bool"/>
      <scope name="PDF_scale" docs="Scales the coordinate system. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_scale ( resource $p , float $sx , float $sy )" returns="bool"/>
      <scope name="PDF_set_border_color" docs="Sets the border color for all kinds of annotations. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_set_border_color ( resource $p , float $red , float $green , float $blue )" returns="bool"/>
      <scope name="PDF_set_border_dash" docs="Sets the border dash style for all kinds of annotations. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_set_border_dash ( resource $pdfdoc , float $black , float $white )" returns="bool"/>
      <scope name="PDF_set_border_style" docs="Sets the border style for all kinds of annotations. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_set_border_style ( resource $pdfdoc , string $style , float $width )" returns="bool"/>
      <scope name="PDF_set_char_spacing" docs="This function is deprecated since PDFlib version 3, use PDF_set_value() with parameter charspacing instead." ilk="function" signature="PDF_set_char_spacing(): this function is deprecated."/>
      <scope name="PDF_set_duration" docs="This function is deprecated since PDFlib version 3, use the duration option in PDF_begin_page_ext() or PDF_end_page_ext() instead." ilk="function" signature="PDF_set_duration(): this function is deprecated."/>
      <scope name="PDF_set_horiz_scaling" docs="This function is deprecated since PDFlib version 3, use PDF_set_value() with parameter horizscaling instead." ilk="function" signature="PDF_set_horiz_scaling(): this function is deprecated."/>
      <scope name="PDF_set_info_author" docs="This function is deprecated since PDFlib version 3, use PDF_set_info() instead." ilk="function" signature="PDF_set_info_author(): this function is deprecated."/>
      <scope name="PDF_set_info_creator" docs="This function is deprecated since PDFlib version 3, use PDF_set_info() instead." ilk="function" signature="PDF_set_info_creator(): this function is deprecated."/>
      <scope name="PDF_set_info_keywords" docs="This function is deprecated since PDFlib version 3, use PDF_set_info() instead." ilk="function" signature="PDF_set_info_keywords(): this function is deprecated."/>
      <scope name="PDF_set_info_subject" docs="This function is deprecated since PDFlib version 3, use PDF_set_info() instead." ilk="function" signature="PDF_set_info_subject(): this function is deprecated."/>
      <scope name="PDF_set_info_title" docs="This function is deprecated since PDFlib version 3, use PDF_set_info() instead." ilk="function" signature="PDF_set_info_title(): this function is deprecated."/>
      <scope name="PDF_set_info" docs="Fill document information field key with value. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_set_info ( resource $p , string $key , string $value )" returns="bool"/>
      <scope name="PDF_set_leading" docs="This function is deprecated since PDFlib version 3, use PDF_set_value() with the parameter leading instead." ilk="function" signature="PDF_set_leading(): this function is deprecated."/>
      <scope name="PDF_set_parameter" docs="Sets some PDFlib parameter with string type. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_set_parameter ( resource $p , string $key , string $value )" returns="bool"/>
      <scope name="PDF_set_text_pos" docs="Sets the position for text output on the page. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_set_text_pos ( resource $p , float $x , float $y )" returns="bool"/>
      <scope name="PDF_set_text_rendering" docs="This function is deprecated since PDFlib version 3, use PDF_set_value() with the textrendering parameter instead." ilk="function" signature="PDF_set_text_rendering(): this function is deprecated."/>
      <scope name="PDF_set_text_rise" docs="This function is deprecated since PDFlib version 3, use PDF_set_value() with the textrise parameter instead." ilk="function" signature="PDF_set_text_rise(): this function is deprecated."/>
      <scope name="PDF_set_value" docs="Sets the value of some PDFlib parameter with numerical type. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_set_value ( resource $p , string $key , float $value )" returns="bool"/>
      <scope name="PDF_set_word_spacing" docs="This function is deprecated since PDFlib version 3, use PDF_set_value() with the wordspacing parameter instead." ilk="function" signature="PDF_set_word_spacing(): this function is deprecated."/>
      <scope name="PDF_setcolor" docs="Sets the current color space and color. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setcolor ( resource $p , string $fstype , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )" returns="bool"/>
      <scope name="PDF_setdash" docs="Sets the current dash pattern to b black and w white units. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setdash ( resource $pdfdoc , float $b , float $w )" returns="bool"/>
      <scope name="PDF_setflat" docs="Sets the flatness parameter. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setflat ( resource $pdfdoc , float $flatness )" returns="bool"/>
      <scope name="PDF_setfont" docs="Sets the current font in the specified size, using a font handle returned by PDF_load_font(). Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setfont ( resource $pdfdoc , int $font , float $fontsize )" returns="bool"/>
      <scope name="PDF_setgray_fill" docs="Sets the current fill color to a gray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setgray_fill ( resource $p , float $g )" returns="bool"/>
      <scope name="PDF_setgray_stroke" docs="Sets the current stroke color to a gray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setgray_stroke ( resource $p , float $g )" returns="bool"/>
      <scope name="PDF_setgray" docs="Sets the current fill and stroke color to a gray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setgray ( resource $p , float $g )" returns="bool"/>
      <scope name="PDF_setlinecap" docs="Sets the linecap parameter to control the shape at the end of a path with respect to stroking." ilk="function" signature="bool PDF_setlinecap ( resource $p , int $linecap )" returns="bool"/>
      <scope name="PDF_setlinejoin" docs="Sets the linejoin parameter to specify the shape at the corners of paths that are stroked. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setlinejoin ( resource $p , int $value )" returns="bool"/>
      <scope name="PDF_setlinewidth" docs="Sets the current line width. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setlinewidth ( resource $p , float $width )" returns="bool"/>
      <scope name="PDF_setmatrix" docs="Explicitly sets the current transformation matrix. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setmatrix ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )" returns="bool"/>
      <scope name="PDF_setmiterlimit" docs="Sets the miter limit.Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setmiterlimit ( resource $pdfdoc , float $miter )" returns="bool"/>
      <scope name="PDF_setpolydash" docs="This function is deprecated since PDFlib version 5, use PDF_setdashpattern() instead." ilk="function" signature="PDF_setpolydash(): this function is deprecated."/>
      <scope name="PDF_setrgbcolor_fill" docs="Sets the current fill color to the supplied RGB values. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setrgbcolor_fill ( resource $p , float $red , float $green , float $blue )" returns="bool"/>
      <scope name="PDF_setrgbcolor_stroke" docs="Sets the current stroke color to the supplied RGB values. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setrgbcolor_stroke ( resource $p , float $red , float $green , float $blue )" returns="bool"/>
      <scope name="PDF_setrgbcolor" docs="Sets the current fill and stroke color to the supplied RGB values. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_setrgbcolor ( resource $p , float $red , float $green , float $blue )" returns="bool"/>
      <scope name="PDF_show_boxed" docs="This function is deprecated since PDFlib version 6, use PDF_fit_textline() for single lines, or the PDF_*_textflow() functions for multi-line formatting instead." ilk="function" signature="int PDF_show_boxed ( resource $p , string $text , float $left , float $top , float $width , float $height , string $mode , string $feature )" returns="int"/>
      <scope name="PDF_show_xy" docs="Prints text in the current font. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_show_xy ( resource $p , string $text , float $x , float $y )" returns="bool"/>
      <scope name="PDF_show" docs="Prints text in the current font and size at the current position. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_show ( resource $pdfdoc , string $text )" returns="bool"/>
      <scope name="PDF_skew" docs="Skews the coordinate system in x and y direction by alpha and beta degrees. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_skew ( resource $p , float $alpha , float $beta )" returns="bool"/>
      <scope name="PDF_stringwidth" docs="Returns the width of text in an arbitrary font." ilk="function" signature="float PDF_stringwidth ( resource $p , string $text , int $font , float $fontsize )" returns="float"/>
      <scope name="PDF_stroke" docs="Strokes the path with the current color and line width, and clear it. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool PDF_stroke ( resource $p )" returns="bool"/>
      <scope name="PDF_translate" docs="Translates the origin of the coordinate system." ilk="function" signature="bool PDF_translate ( resource $p , float $tx , float $ty )" returns="bool"/>
      <scope name="pfpro_cleanup" docs="Used to shutdown the Payflow Pro library cleanly." ilk="function" signature="bool pfpro_cleanup ( void )" returns="bool"/>
      <scope name="pfpro_init" docs="Used to initialise the Payflow Pro library." ilk="function" signature="bool pfpro_init ( void )" returns="bool"/>
      <scope name="pfpro_process_raw" docs="pfpro_process_raw() processes a raw transaction string with Payflow Pro. You should really use pfpro_process() instead, as the encoding rules of these transactions are non-standard." ilk="function" signature="string pfpro_process_raw ( string $parameters [, string $address [, int $port [, int $timeout [, string $proxy_address [, int $proxy_port [, string $proxy_logon [, string $proxy_password ]]]]]]] )" returns="string"/>
      <scope name="pfpro_process" docs="pfpro_process() processes a transaction with Payflow Pro." ilk="function" signature="array pfpro_process ( array $parameters [, string $address [, int $port [, int $timeout [, string $proxy_address [, int $proxy_port [, string $proxy_logon [, string $proxy_password ]]]]]]] )" returns="array"/>
      <scope name="pfpro_version" docs="pfpro_version() returns the version string of the Payflow Pro library. At the time of writing, this was L211." ilk="function" signature="string pfpro_version ( void )" returns="string"/>
      <scope name="pfsockopen" docs="This function behaves exactly as fsockopen() with the difference that the connection is not closed after the script finishes. It is the persistent version of fsockopen()." ilk="function" signature="resource pfsockopen ( string $hostname [, int $port [, int &amp;$errno [, string &amp;$errstr [, float $timeout ]]]] )" returns="resource"/>
      <scope name="pg_affected_rows" docs="pg_affected_rows() returns the number of tuples (instances/records/rows) affected by INSERT, UPDATE, and DELETE queries." ilk="function" signature="int pg_affected_rows ( resource $result )" returns="int"/>
      <scope name="pg_cancel_query" docs="pg_cancel_query() cancels an asynchronous query sent with pg_send_query(), pg_send_query_params() or pg_send_execute(). You cannot cancel a query executed using pg_query()." ilk="function" signature="bool pg_cancel_query ( resource $connection )" returns="bool"/>
      <scope name="pg_client_encoding" docs="PostgreSQL supports automatic character set conversion between server and client for certain character sets. pg_client_encoding() returns the client encoding as a string. The returned string will be one of the standard PostgreSQL encoding identifiers." ilk="function" signature="string pg_client_encoding ([ resource $connection ] )" returns="string"/>
      <scope name="pg_close" docs="pg_close() closes the non-persistent connection to a PostgreSQL database associated with the given connection resource." ilk="function" signature="bool pg_close ([ resource $connection ] )" returns="bool"/>
      <scope name="pg_connect" docs="pg_connect() opens a connection to a PostgreSQL database specified by the connection_string." ilk="function" signature="resource pg_connect ( string $connection_string [, int $connect_type ] )" returns="resource"/>
      <scope name="pg_connection_busy" docs="pg_connection_busy() determines whether or not a connection is busy. If it is busy, a previous query is still executing. If pg_get_result() is used on the connection, it will be blocked." ilk="function" signature="bool pg_connection_busy ( resource $connection )" returns="bool"/>
      <scope name="pg_connection_reset" docs="pg_connection_reset() resets the connection. It is useful for error recovery." ilk="function" signature="bool pg_connection_reset ( resource $connection )" returns="bool"/>
      <scope name="pg_connection_status" docs="pg_connection_status() returns the status of the specified connection." ilk="function" signature="int pg_connection_status ( resource $connection )" returns="int"/>
      <scope name="pg_convert" docs="pg_convert() checks and converts the values in assoc_array into suitable values for use in a SQL statement. Precondition for pg_convert() is the existence of a table table_name which has at least as many columns as assoc_array has elements. The fieldnames in table_name must match the indices in assoc_array and the corresponding datatypes must be compatible. Returns an array with the converted values on success, FALSE otherwise." ilk="function" signature="array pg_convert ( resource $connection , string $table_name , array $assoc_array [, int $options ] )" returns="array"/>
      <scope name="pg_copy_from" docs="pg_copy_from() inserts records into a table from rows. It issues a COPY FROM SQL command internally to insert records." ilk="function" signature="bool pg_copy_from ( resource $connection , string $table_name , array $rows [, string $delimiter [, string $null_as ]] )" returns="bool"/>
      <scope name="pg_copy_to" docs="pg_copy_to() copies a table to an array. It issues COPY TO SQL command internally to retrieve records." ilk="function" signature="array pg_copy_to ( resource $connection , string $table_name [, string $delimiter [, string $null_as ]] )" returns="array"/>
      <scope name="pg_dbname" docs="pg_dbname() returns the name of the database that the given PostgreSQL connection resource." ilk="function" signature="string pg_dbname ([ resource $connection ] )" returns="string"/>
      <scope name="pg_delete" docs="pg_delete() deletes records from a table specified by the keys and values in assoc_array. If options is specified, pg_convert() is applied to assoc_array with the specified options." ilk="function" signature="mixed pg_delete ( resource $connection , string $table_name , array $assoc_array [, int $options ] )" returns="mixed"/>
      <scope name="pg_end_copy" docs="pg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). pg_end_copy() must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error." ilk="function" signature="bool pg_end_copy ([ resource $connection ] )" returns="bool"/>
      <scope name="pg_escape_bytea" docs="pg_escape_bytea() escapes string for bytea datatype. It returns escaped string." ilk="function" signature="string pg_escape_bytea ([ resource $connection ], string $data )" returns="string"/>
      <scope name="pg_escape_string" docs="pg_escape_string() escapes a string for insertion into the database. It returns an escaped string in the PostgreSQL format. Use of this function is recommended instead of addslashes(). If the type of the column is bytea, pg_escape_bytea() must be used instead." ilk="function" signature="string pg_escape_string ([ resource $connection ], string $data )" returns="string"/>
      <scope name="pg_fetch_all" docs="pg_fetch_all() returns an array that contains all rows (records) in the result resource." ilk="function" signature="array pg_fetch_all ( resource $result )" returns="array"/>
      <scope name="pg_fetch_array" docs="pg_fetch_array() returns an array that corresponds to the fetched row (record)." ilk="function" signature="array pg_fetch_array ( resource $result [, int $row [, int $result_type ]] )" returns="array"/>
      <scope name="pg_fetch_assoc" docs="pg_fetch_assoc() returns an associative array that corresponds to the fetched row (records)." ilk="function" signature="array pg_fetch_assoc ( resource $result [, int $row ] )" returns="array"/>
      <scope name="pg_fetch_object" docs="pg_fetch_object() returns an object with properties that correspond to the fetched row&amp;#039;s field names. It can optionally instantiate an object of a specific class, and pass parameters to that class&amp;#039;s constructor." ilk="function" signature="object pg_fetch_object ( resource $result [, int $row [, int $result_type ]] )" returns="object"/>
      <scope name="pg_fetch_result" docs="pg_fetch_result() returns the value of a particular row and field (column) in a PostgreSQL result resource." ilk="function" signature="string pg_fetch_result ( resource $result , int $row , mixed $field )" returns="string"/>
      <scope name="pg_fetch_row" docs="pg_fetch_row() fetches one row of data from the result associated with the specified result resource." ilk="function" signature="array pg_fetch_row ( resource $result [, int $row ] )" returns="array"/>
      <scope name="pg_field_is_null" docs="pg_field_is_null() tests if a field in a PostgreSQL result resource is SQL NULL or not." ilk="function" signature="int pg_field_is_null ( resource $result , int $row , mixed $field )" returns="int"/>
      <scope name="pg_field_name" docs="pg_field_name() returns the name of the field occupying the given field_number in the given PostgreSQL result resource. Field numbering starts from 0." ilk="function" signature="string pg_field_name ( resource $result , int $field_number )" returns="string"/>
      <scope name="pg_field_num" docs="pg_field_num() will return the number of the field number that corresponds to the field_name in the given PostgreSQL result resource." ilk="function" signature="int pg_field_num ( resource $result , string $field_name )" returns="int"/>
      <scope name="pg_field_prtlen" docs="pg_field_prtlen() returns the actual printed length (number of characters) of a specific value in a PostgreSQL result. Row numbering starts at 0. This function will return -1 on an error." ilk="function" signature="int pg_field_prtlen ( resource $result , int $row_number , mixed $field_name_or_number )" returns="int"/>
      <scope name="pg_field_size" docs="pg_field_size() returns the internal storage size (in bytes) of the field number in the given PostgreSQL result." ilk="function" signature="int pg_field_size ( resource $result , int $field_number )" returns="int"/>
      <scope name="pg_field_type" docs="pg_field_type() returns a string containing the base type name of the given field_number in the given PostgreSQL result resource." ilk="function" signature="string pg_field_type ( resource $result , int $field_number )" returns="string"/>
      <scope name="pg_free_result" docs="pg_free_result() frees the memory and data associated with the specified PostgreSQL query result resource." ilk="function" signature="bool pg_free_result ( resource $result )" returns="bool"/>
      <scope name="pg_get_notify" docs="pg_get_notify() gets notifications generated by a NOTIFY SQL command. To receive notifications, the LISTEN SQL command must be issued." ilk="function" signature="array pg_get_notify ( resource $connection [, int $result_type ] )" returns="array"/>
      <scope name="pg_get_pid" docs="pg_get_pid() gets the backend&amp;#039;s (database server process) PID. The PID is useful to determine whether or not a NOTIFY message received via pg_get_notify() is sent from another process or not." ilk="function" signature="int pg_get_pid ( resource $connection )" returns="int"/>
      <scope name="pg_get_result" docs="pg_get_result() gets the result resource from an asynchronous query executed by pg_send_query(), pg_send_query_params() or pg_send_execute()." ilk="function" signature="resource pg_get_result ([ resource $connection ] )" returns="resource"/>
      <scope name="pg_host" docs="pg_host() returns the host name of the given PostgreSQL connection resource is connected to." ilk="function" signature="string pg_host ([ resource $connection ] )" returns="string"/>
      <scope name="pg_insert" docs="pg_insert() inserts the values of assoc_array into the table specified by table_name. If options is specified, pg_convert() is applied to assoc_array with the specified options." ilk="function" signature="mixed pg_insert ( resource $connection , string $table_name , array $assoc_array [, int $options ] )" returns="mixed"/>
      <scope name="pg_last_error" docs="pg_last_error() returns the last error message for a given connection." ilk="function" signature="string pg_last_error ([ resource $connection ] )" returns="string"/>
      <scope name="pg_last_notice" docs="pg_last_notice() returns the last notice message from the PostgreSQL server on the specified connection. The PostgreSQL server sends notice messages in several cases, for instance when creating a SERIAL column in a table." ilk="function" signature="string pg_last_notice ( resource $connection )" returns="string"/>
      <scope name="pg_last_oid" docs="pg_last_oid() is used to retrieve the OID assigned to an inserted row." ilk="function" signature="string pg_last_oid ( resource $result )" returns="string"/>
      <scope name="pg_lo_close" docs="pg_lo_close() closes a large object. large_object is a resource for the large object from pg_lo_open()." ilk="function" signature="bool pg_lo_close ( resource $large_object )" returns="bool"/>
      <scope name="pg_lo_create" docs="pg_lo_create() creates a large object and returns the OID of the large object. PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE are not supported, the object is created always with both read and write access. INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3 and above)." ilk="function" signature="int pg_lo_create ([ resource $connection ] )" returns="int"/>
      <scope name="pg_lo_export" docs="pg_lo_export() takes a large object in a PostgreSQL database and saves its contents to a file on the local filesystem." ilk="function" signature="bool pg_lo_export ( resource $connection , int $oid , string $pathname )" returns="bool"/>
      <scope name="pg_lo_import" docs="pg_lo_import() creates a new large object in the database using a file on the filesystem as its data source." ilk="function" signature="int pg_lo_import ( resource $connection , string $pathname )" returns="int"/>
      <scope name="pg_lo_open" docs="pg_lo_open() opens a large object in the database and returns large object resource so that it can be manipulated." ilk="function" signature="resource pg_lo_open ( resource $connection , int $oid , string $mode )" returns="resource"/>
      <scope name="pg_lo_read_all" docs="pg_lo_read_all() reads a large object and passes it straight through to the browser after sending all pending headers. Mainly intended for sending binary data like images or sound." ilk="function" signature="int pg_lo_read_all ( resource $large_object )" returns="int"/>
      <scope name="pg_lo_read" docs="pg_lo_read() reads at most len bytes from a large object and returns it as a string." ilk="function" signature="string pg_lo_read ( resource $large_object [, int $len ] )" returns="string"/>
      <scope name="pg_lo_seek" docs="pg_lo_seek() seeks a position within a large object resource." ilk="function" signature="bool pg_lo_seek ( resource $large_object , int $offset [, int $whence ] )" returns="bool"/>
      <scope name="pg_lo_tell" docs="pg_lo_tell() returns the current position (offset from the beginning) of a large object." ilk="function" signature="int pg_lo_tell ( resource $large_object )" returns="int"/>
      <scope name="pg_lo_unlink" docs="pg_lo_unlink() deletes a large object with the oid. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool pg_lo_unlink ( resource $connection , int $oid )" returns="bool"/>
      <scope name="pg_lo_write" docs="pg_lo_write() writes data into a large object at the current seek position." ilk="function" signature="int pg_lo_write ( resource $large_object , string $data [, int $len ] )" returns="int"/>
      <scope name="pg_meta_data" docs="pg_meta_data() returns table definition for table_name as an array." ilk="function" signature="array pg_meta_data ( resource $connection , string $table_name )" returns="array"/>
      <scope name="pg_num_fields" docs="pg_num_fields() returns the number of fields (columns) in a PostgreSQL result resource." ilk="function" signature="int pg_num_fields ( resource $result )" returns="int"/>
      <scope name="pg_num_rows" docs="pg_num_rows() will return the number of rows in a PostgreSQL result resource." ilk="function" signature="int pg_num_rows ( resource $result )" returns="int"/>
      <scope name="pg_options" docs="pg_options() will return a string containing the options specified on the given PostgreSQL connection resource." ilk="function" signature="string pg_options ([ resource $connection ] )" returns="string"/>
      <scope name="pg_pconnect" docs="pg_pconnect() opens a connection to a PostgreSQL database. It returns a connection resource that is needed by other PostgreSQL functions." ilk="function" signature="resource pg_pconnect ( string $connection_string [, int $connect_type ] )" returns="resource"/>
      <scope name="pg_ping" docs="pg_ping() pings a database connection and tries to reconnect it if it is broken." ilk="function" signature="bool pg_ping ([ resource $connection ] )" returns="bool"/>
      <scope name="pg_port" docs="pg_port() returns the port number that the given PostgreSQL connection resource is connected to." ilk="function" signature="int pg_port ([ resource $connection ] )" returns="int"/>
      <scope name="pg_put_line" docs="pg_put_line() sends a NULL-terminated string to the PostgreSQL backend server. This is needed in conjunction with PostgreSQL&amp;#039;s COPY FROM command." ilk="function" signature="bool pg_put_line ( string $data )" returns="bool"/>
      <scope name="pg_query" docs="pg_query() executes the query on the specified database connection." ilk="function" signature="resource pg_query ( string $query )" returns="resource"/>
      <scope name="pg_result_error" docs="pg_result_error() returns any error message associated with the result resource. Therefore, the user has a better chance of getting the correct error message than with pg_last_error()." ilk="function" signature="string pg_result_error ( resource $result )" returns="string"/>
      <scope name="pg_result_seek" docs="pg_result_seek() sets the internal row offset in a result resource." ilk="function" signature="bool pg_result_seek ( resource $result , int $offset )" returns="bool"/>
      <scope name="pg_result_status" docs="pg_result_status() returns the status of a result resource, or the PostgreSQL command completion tag associated with the result" ilk="function" signature="mixed pg_result_status ( resource $result [, int $type ] )" returns="mixed"/>
      <scope name="pg_select" docs="pg_select() selects records specified by assoc_array which has field=&amp;gt;value. For a successful query, it returns an array containing all records and fields that match the condition specified by assoc_array." ilk="function" signature="mixed pg_select ( resource $connection , string $table_name , array $assoc_array [, int $options ] )" returns="mixed"/>
      <scope name="pg_send_query" docs="pg_send_query() sends a query or queries asynchronously to the connection. Unlike pg_query(), it can send multiple queries at once to PostgreSQL and get the results one by one using pg_get_result()." ilk="function" signature="bool pg_send_query ( resource $connection , string $query )" returns="bool"/>
      <scope name="pg_set_client_encoding" docs="pg_set_client_encoding() sets the client encoding and returns 0 if success or -1 if error." ilk="function" signature="int pg_set_client_encoding ( string $encoding )" returns="int"/>
      <scope name="pg_trace" docs="pg_trace() enables tracing of the PostgreSQL frontend/backend communication to a file. To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol." ilk="function" signature="bool pg_trace ( string $pathname [, string $mode [, resource $connection ]] )" returns="bool"/>
      <scope name="pg_tty" docs="pg_tty() returns the TTY name that server side debugging output is sent to on the given PostgreSQL connection resource." ilk="function" signature="string pg_tty ([ resource $connection ] )" returns="string"/>
      <scope name="pg_unescape_bytea" docs="pg_unescape_bytea() unescapes PostgreSQL bytea data values. It returns the unescaped string, possibly containing binary data." ilk="function" signature="string pg_unescape_bytea ( string $data )" returns="string"/>
      <scope name="pg_untrace" docs="Stop tracing started by pg_trace()." ilk="function" signature="bool pg_untrace ([ resource $connection ] )" returns="bool"/>
      <scope name="pg_update" docs="pg_update() updates records that matches condition with data. If options is specified, pg_convert() is applied to data with specified options." ilk="function" signature="mixed pg_update ( resource $connection , string $table_name , array $data , array $condition [, int $options ] )" returns="mixed"/>
      <scope name="php_ini_scanned_files" docs="php_ini_scanned_files() returns a comma-separated list of configuration files parsed after php.ini. These files are found in a directory defined by the --with-config-file-scan-dir option which is set during compilation." ilk="function" signature="string php_ini_scanned_files ( void )" returns="string"/>
      <scope name="php_logo_guid" docs="This function returns the ID which can be used to display the PHP logo using the built-in image. Logo is displayed only if expose_php is On." ilk="function" signature="string php_logo_guid ( void )" returns="string"/>
      <scope name="php_sapi_name" docs="Returns the interface type, as a lowercase string." ilk="function" signature="string php_sapi_name ( void )" returns="string"/>
      <scope name="php_uname" docs="php_uname() returns a description of the operating system PHP is running on. For the name of just the operating system, consider using the PHP_OS constant, but be reminded this constant will contain the operating system PHP was built on." ilk="function" signature="string php_uname ([ string $mode ] )" returns="string"/>
      <scope name="phpcredits" docs="This function prints out the credits listing the PHP developers, modules, etc. It generates the appropriate HTML codes to insert the information in a page." ilk="function" signature="bool phpcredits ([ int $flag ] )" returns="bool"/>
      <scope name="phpinfo" docs="Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License." ilk="function" signature="bool phpinfo ([ int $what ] )" returns="bool"/>
      <scope name="phpversion" docs="Returns a string containing the version of the currently running PHP parser or extension." ilk="function" signature="string phpversion ([ string $extension ] )" returns="string"/>
      <scope name="pi" docs="The value of pi as float." ilk="function" signature="float pi ( void )" returns="float"/>
      <scope name="png2wbmp" docs="Converts a PNG file into a WBMP file." ilk="function" signature="bool png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )" returns="bool"/>
      <scope name="popen" docs="Opens a pipe to a process executed by forking the command given by command." ilk="function" signature="resource popen ( string $command , string $mode )" returns="resource"/>
      <scope name="pos" docs="Undocumented function." ilk="function" signature="pos()"/>
      <scope name="posix_ctermid" docs="Generates a string which is the pathname for the current controlling terminal for the process. On error this will set errno, which can be checked using posix_get_last_error()" ilk="function" signature="string posix_ctermid ( void )" returns="string"/>
      <scope name="posix_get_last_error" docs="Retrieve the error number set by the last posix function that failed. The system error message associated with the errno may be checked with posix_strerror()." ilk="function" signature="int posix_get_last_error ( void )" returns="int"/>
      <scope name="posix_getcwd" docs="Gets the absolute pathname of the script&amp;#039;s current working directory. On error, it sets errno which can be checked using posix_get_last_error()" ilk="function" signature="string posix_getcwd ( void )" returns="string"/>
      <scope name="posix_getegid" docs="Return the numeric effective group ID of the current process." ilk="function" signature="int posix_getegid ( void )" returns="int"/>
      <scope name="posix_geteuid" docs="Return the numeric effective user ID of the current process. See also posix_getpwuid() for information on how to convert this into a useable username." ilk="function" signature="int posix_geteuid ( void )" returns="int"/>
      <scope name="posix_getgid" docs="Return the numeric real group ID of the current process." ilk="function" signature="int posix_getgid ( void )" returns="int"/>
      <scope name="posix_getgrgid" docs="Gets information about a group provided its id." ilk="function" signature="array posix_getgrgid ( int $gid )" returns="array"/>
      <scope name="posix_getgrnam" docs="Gets information about a group provided its name." ilk="function" signature="array posix_getgrnam ( string $name )" returns="array"/>
      <scope name="posix_getgroups" docs="Gets the group set of the current process." ilk="function" signature="array posix_getgroups ( void )" returns="array"/>
      <scope name="posix_getlogin" docs="Returns the login name of the user owning the current process." ilk="function" signature="string posix_getlogin ( void )" returns="string"/>
      <scope name="posix_getpgid" docs="Returns the process group identifier of the process pid." ilk="function" signature="int posix_getpgid ( int $pid )" returns="int"/>
      <scope name="posix_getpgrp" docs="Return the process group identifier of the current process." ilk="function" signature="int posix_getpgrp ( void )" returns="int"/>
      <scope name="posix_getpid" docs="Return the process identifier of the current process." ilk="function" signature="int posix_getpid ( void )" returns="int"/>
      <scope name="posix_getppid" docs="Return the process identifier of the parent process of the current process." ilk="function" signature="int posix_getppid ( void )" returns="int"/>
      <scope name="posix_getpwnam" docs="Returns an array of information about the given user." ilk="function" signature="array posix_getpwnam ( string $username )" returns="array"/>
      <scope name="posix_getpwuid" docs="Returns an array of information about the user referenced by the given user ID." ilk="function" signature="array posix_getpwuid ( int $uid )" returns="array"/>
      <scope name="posix_getrlimit" docs="posix_getrlimit() returns an array of information about the current resource&amp;#039;s soft and hard limits." ilk="function" signature="array posix_getrlimit ( void )" returns="array"/>
      <scope name="posix_getsid" docs="Return the session id of the process pid. The session id of a process is the process group id of the session leader." ilk="function" signature="int posix_getsid ( int $pid )" returns="int"/>
      <scope name="posix_getuid" docs="Return the numeric real user ID of the current process." ilk="function" signature="int posix_getuid ( void )" returns="int"/>
      <scope name="posix_isatty" docs="Determines if the file descriptor fd refers to a valid terminal type device." ilk="function" signature="bool posix_isatty ( int $fd )" returns="bool"/>
      <scope name="posix_kill" docs="Send the signal sig to the process with the process identifier pid." ilk="function" signature="bool posix_kill ( int $pid , int $sig )" returns="bool"/>
      <scope name="posix_mkfifo" docs="posix_mkfifo() creates a special FIFO file which exists in the file system and acts as a bidirectional communication endpoint for processes." ilk="function" signature="bool posix_mkfifo ( string $pathname , int $mode )" returns="bool"/>
      <scope name="posix_setegid" docs="Set the effective group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function." ilk="function" signature="bool posix_setegid ( int $gid )" returns="bool"/>
      <scope name="posix_seteuid" docs="Set the real user ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function." ilk="function" signature="bool posix_seteuid ( int $uid )" returns="bool"/>
      <scope name="posix_setgid" docs="Set the real group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function. The appropriate order of function calls is posix_setgid() first, posix_setuid() last." ilk="function" signature="bool posix_setgid ( int $gid )" returns="bool"/>
      <scope name="posix_setpgid" docs="Let the process pid join the process group pgid." ilk="function" signature="bool posix_setpgid ( int $pid , int $pgid )" returns="bool"/>
      <scope name="posix_setsid" docs="Make the current process a session leader." ilk="function" signature="int posix_setsid ( void )" returns="int"/>
      <scope name="posix_setuid" docs="Set the real user ID of the current process. This is a privileged function that needs appropriate privileges (usually root) on the system to be able to perform this function." ilk="function" signature="bool posix_setuid ( int $uid )" returns="bool"/>
      <scope name="posix_strerror" docs="Returns the POSIX system error message associated with the given errno. You may get the errno parameter by calling posix_get_last_error()." ilk="function" signature="string posix_strerror ( int $errno )" returns="string"/>
      <scope name="posix_times" docs="Gets information about the current CPU usage." ilk="function" signature="array posix_times ( void )" returns="array"/>
      <scope name="posix_ttyname" docs="Returns a string for the absolute path to the current terminal device that is open on the file descriptor fd." ilk="function" signature="string posix_ttyname ( int $fd )" returns="string"/>
      <scope name="posix_uname" docs="Gets information about the system." ilk="function" signature="array posix_uname ( void )" returns="array"/>
      <scope name="pow" docs="Returns base raised to the power of exp." ilk="function" signature="number pow ( number $base , number $exp )" returns="number"/>
      <scope name="preg_grep" docs="Returns the array consisting of the elements of the input array that match the given pattern." ilk="function" signature="array preg_grep ( string $pattern , array $input [, int $flags ] )" returns="array"/>
      <scope name="preg_match_all" docs="Searches subject for all matches to the regular expression given in pattern and puts them in matches in the order specified by flags." ilk="function" signature="int preg_match_all ( string $pattern , string $subject , array &amp;$matches [, int $flags [, int $offset ]] )" returns="int"/>
      <scope name="preg_match" docs="Searches subject for a match to the regular expression given in pattern." ilk="function" signature="int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags [, int $offset ]]] )" returns="int"/>
      <scope name="preg_quote" docs="preg_quote() takes str and puts a backslash in front of every character that is part of the regular expression syntax. This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters." ilk="function" signature="string preg_quote ( string $str [, string $delimiter ] )" returns="string"/>
      <scope name="preg_replace_callback" docs="The behavior of this function is almost identical to preg_replace(), except for the fact that instead of replacement parameter, one should specify a callback." ilk="function" signature="mixed preg_replace_callback ( mixed $pattern , callback $callback , mixed $subject [, int $limit [, int &amp;$count ]] )" returns="mixed"/>
      <scope name="preg_replace" docs="Searches subject for matches to pattern and replaces them with replacement." ilk="function" signature="mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit [, int &amp;$count ]] )" returns="mixed"/>
      <scope name="preg_split" docs="Split the given string by a regular expression." ilk="function" signature="array preg_split ( string $pattern , string $subject [, int $limit [, int $flags ]] )" returns="array"/>
      <scope name="prev" docs="Returns the array value in the previous place that&amp;#039;s pointed to by the internal array pointer, or FALSE if there are no more elements." ilk="function" signature="mixed prev ( array &amp;$array )" returns="mixed"/>
      <scope name="print_r" docs="print_r() displays information about a variable in a way that&amp;#039;s readable by humans." ilk="function" signature="mixed print_r ( mixed $expression [, bool $return ] )" returns="mixed"/>
      <scope name="printf" docs="format See sprintf() for a description of format." ilk="function" signature="int printf ( string $format [, mixed $args [, mixed $... ]] )" returns="int"/>
      <scope name="proc_close" docs="proc_close() is similar to pclose() except that it only works on processes opened by proc_open(). proc_close() waits for the process to terminate, and returns its exit code. If you have open pipes to that process, you should fclose() them prior to calling this function in order to avoid a deadlock - the child process may not be able to exit while the pipes are open." ilk="function" signature="int proc_close ( resource $process )" returns="int"/>
      <scope name="proc_open" docs="proc_open() is similar to popen() but provides a much greater degree of control over the program execution." ilk="function" signature="resource proc_open ( string $cmd , array $descriptorspec , array &amp;$pipes [, string $cwd [, array $env [, array $other_options ]]] )" returns="resource"/>
      <scope name="pspell_add_to_personal" docs="dictionary_link" ilk="function" signature="bool pspell_add_to_personal ( int $dictionary_link , string $word )" returns="bool"/>
      <scope name="pspell_add_to_session" docs="dictionary_link" ilk="function" signature="bool pspell_add_to_session ( int $dictionary_link , string $word )" returns="bool"/>
      <scope name="pspell_check" docs="dictionary_link" ilk="function" signature="bool pspell_check ( int $dictionary_link , string $word )" returns="bool"/>
      <scope name="pspell_clear_session" docs="dictionary_link" ilk="function" signature="bool pspell_clear_session ( int $dictionary_link )" returns="bool"/>
      <scope name="pspell_config_create" docs="Create a config used to open a dictionary." ilk="function" signature="int pspell_config_create ( string $language [, string $spelling [, string $jargon [, string $encoding ]]] )" returns="int"/>
      <scope name="pspell_config_ignore" docs="dictionary_link" ilk="function" signature="bool pspell_config_ignore ( int $dictionary_link , int $n )" returns="bool"/>
      <scope name="pspell_config_mode" docs="dictionary_link" ilk="function" signature="bool pspell_config_mode ( int $dictionary_link , int $mode )" returns="bool"/>
      <scope name="pspell_config_personal" docs="Set a file that contains personal wordlist. The personal wordlist will be loaded and used in addition to the standard one after you call pspell_new_config(). The file is also the file where pspell_save_wordlist() will save personal wordlist to." ilk="function" signature="bool pspell_config_personal ( int $dictionary_link , string $file )" returns="bool"/>
      <scope name="pspell_config_repl" docs="Set a file that contains replacement pairs." ilk="function" signature="bool pspell_config_repl ( int $dictionary_link , string $file )" returns="bool"/>
      <scope name="pspell_config_runtogether" docs="This function determines whether run-together words will be treated as legal compounds. That is, &amp;quot;thecat&amp;quot; will be a legal compound, although there should be a space between the two words. Changing this setting only affects the results returned by pspell_check(); pspell_suggest() will still return suggestions." ilk="function" signature="bool pspell_config_runtogether ( int $dictionary_link , bool $flag )" returns="bool"/>
      <scope name="pspell_config_save_repl" docs="pspell_config_save_repl() determines whether pspell_save_wordlist() will save the replacement pairs along with the wordlist. Usually there is no need to use this function because if pspell_config_repl() is used, the replacement pairs will be saved by pspell_save_wordlist() anyway, and if it is not, the replacement pairs will not be saved." ilk="function" signature="bool pspell_config_save_repl ( int $dictionary_link , bool $flag )" returns="bool"/>
      <scope name="pspell_new_config" docs="config The config parameter is the one returned by pspell_config_create() when the config was created." ilk="function" signature="int pspell_new_config ( int $config )" returns="int"/>
      <scope name="pspell_new_personal" docs="For more information and examples, check out inline manual pspell website:&amp;raquo; http://aspell.net/." ilk="function" signature="int pspell_new_personal ( string $personal , string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode ]]]] )" returns="int"/>
      <scope name="pspell_new" docs="pspell_new() opens up a new dictionary and returns the dictionary link identifier for use in other pspell functions." ilk="function" signature="int pspell_new ( string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode ]]]] )" returns="int"/>
      <scope name="pspell_save_wordlist" docs="dictionary_link A dictionary link identifier opened with pspell_new_personal()." ilk="function" signature="bool pspell_save_wordlist ( int $dictionary_link )" returns="bool"/>
      <scope name="pspell_store_replacement" docs="dictionary_link A dictionary link identifier, opened with pspell_new_personal()" ilk="function" signature="bool pspell_store_replacement ( int $dictionary_link , string $misspelled , string $correct )" returns="bool"/>
      <scope name="pspell_suggest" docs="dictionary_link" ilk="function" signature="array pspell_suggest ( int $dictionary_link , string $word )" returns="array"/>
      <scope name="putenv" docs="Adds setting to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state." ilk="function" signature="bool putenv ( string $setting )" returns="bool"/>
      <scope name="qdom_error" docs="Undocumented function." ilk="function" signature="string qdom_error ( void )" returns="string"/>
      <scope name="qdom_tree" docs="Undocumented function." ilk="function" signature="QDomDocument qdom_tree ( string $doc )" returns="QDomDocument"/>
      <scope name="quoted_printable_decode" docs="This function returns an 8-bit binary string corresponding to the decoded quoted printable string (according to &amp;raquo; RFC2045, section 6.7, not &amp;raquo; RFC2821, section 4.5.2, so additional periods are not stripped from the beginning of line)." ilk="function" signature="string quoted_printable_decode ( string $str )" returns="string"/>
      <scope name="quotemeta" docs="Returns a version of str with a backslash character (\) before every character that is among these: . \ + * ? [ ^ ] ( $ )" ilk="function" signature="string quotemeta ( string $str )" returns="string"/>
      <scope name="rad2deg" docs="This function converts number from radian to degrees." ilk="function" signature="float rad2deg ( float $number )" returns="float"/>
      <scope name="rand" docs="min The lowest value to return (default: 0)" ilk="function" signature="int rand ([ int $min ], int $max )" returns="int"/>
      <scope name="range" docs="range() returns an array of elements from low to high, inclusive. If low &amp;gt; high, the sequence will be from high to low." ilk="function" signature="array range ( mixed $low , mixed $high [, number $step ] )" returns="array"/>
      <scope name="rawurldecode" docs="Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters." ilk="function" signature="string rawurldecode ( string $str )" returns="string"/>
      <scope name="rawurlencode" docs="Encodes the given string according to &amp;raquo; RFC 1738." ilk="function" signature="string rawurlencode ( string $str )" returns="string"/>
      <scope name="read_exif_data" docs="Undocumented function." ilk="function" signature="read_exif_data()"/>
      <scope name="readdir" docs="Returns the filename of the next file from the directory. The filenames are returned in the order in which they are stored by the filesystem." ilk="function" signature="string readdir ( resource $dir_handle )" returns="string"/>
      <scope name="readfile" docs="Reads a file and writes it to the output buffer." ilk="function" signature="int readfile ( string $filename [, bool $use_include_path [, resource $context ]] )" returns="int"/>
      <scope name="readgzfile" docs="Reads a file, decompresses it and writes it to standard output." ilk="function" signature="int readgzfile ( string $filename [, int $use_include_path ] )" returns="int"/>
      <scope name="readline_add_history" docs="This function adds a line to the command line history." ilk="function" signature="bool readline_add_history ( string $line )" returns="bool"/>
      <scope name="readline_clear_history" docs="This function clears the entire command line history." ilk="function" signature="bool readline_clear_history ( void )" returns="bool"/>
      <scope name="readline_completion_function" docs="This function registers a completion function. This is the same kind of functionality you&amp;#039;d get if you hit your tab key while using Bash." ilk="function" signature="bool readline_completion_function ( callback $function )" returns="bool"/>
      <scope name="readline_info" docs="Gets or sets various internal readline variables." ilk="function" signature="mixed readline_info ([ string $varname [, string $newvalue ]] )" returns="mixed"/>
      <scope name="readline_list_history" docs="Gets the entire command line history." ilk="function" signature="array readline_list_history ( void )" returns="array"/>
      <scope name="readline_read_history" docs="This function reads a command history from a file." ilk="function" signature="bool readline_read_history ([ string $filename ] )" returns="bool"/>
      <scope name="readline_write_history" docs="This function writes the command history to a file." ilk="function" signature="bool readline_write_history ([ string $filename ] )" returns="bool"/>
      <scope name="readline" docs="Reads a single line from the user. You must add this line to the history yourself using readline_add_history()." ilk="function" signature="string readline ([ string $prompt ] )" returns="string"/>
      <scope name="readlink" docs="readlink() does the same as the readlink C function." ilk="function" signature="string readlink ( string $path )" returns="string"/>
      <scope name="realpath" docs="realpath() expands all symbolic links and resolves references to &amp;#039;/./&amp;#039;, &amp;#039;/../&amp;#039; and extra &amp;#039;/&amp;#039; characters in the input path. and return the canonicalized absolute pathname." ilk="function" signature="string realpath ( string $path )" returns="string"/>
      <scope name="recode_file" docs="Recode the file referenced by file handle input into the file referenced by file handle output according to the recode request." ilk="function" signature="bool recode_file ( string $request , resource $input , resource $output )" returns="bool"/>
      <scope name="recode_string" docs="Recode the string string according to the recode request request." ilk="function" signature="string recode_string ( string $request , string $string )" returns="string"/>
      <scope name="recode" docs="Undocumented function." ilk="function" signature="recode()"/>
      <scope name="register_shutdown_function" docs="Multiple calls to register_shutdown_function() can be made, and each will be called in the same order as they were registered. If you call exit() within one registered shutdown function, processing will stop completely and no other registered shutdown functions will be called." ilk="function" signature="void register_shutdown_function ( callback $function [, mixed $parameter [, mixed $... ]] )" returns="void"/>
      <scope name="register_tick_function" docs="function The function name as a string, or an array consisting of an object and a method." ilk="function" signature="bool register_tick_function ( callback $function [, mixed $arg [, mixed $... ]] )" returns="bool"/>
      <scope name="rename" docs="Attempts to rename oldname to newname." ilk="function" signature="bool rename ( string $oldname , string $newname [, resource $context ] )" returns="bool"/>
      <scope name="reset" docs="reset() rewinds array&amp;#039;s internal pointer to the first element and returns the value of the first array element, or FALSE if the array is empty." ilk="function" signature="mixed reset ( array &amp;$array )" returns="mixed"/>
      <scope name="restore_error_handler" docs="Used after changing the error handler function using set_error_handler(), to revert to the previous error handler (which could be the built-in or a user defined function)." ilk="function" signature="bool restore_error_handler ( void )" returns="bool"/>
      <scope name="restore_include_path" docs="No value is returned." ilk="function" signature="void restore_include_path ( void )" returns="void"/>
      <scope name="rewinddir" docs="Resets the directory stream indicated by dir_handle to the beginning of the directory." ilk="function" signature="void rewinddir ( resource $dir_handle )" returns="void"/>
      <scope name="rmdir" docs="Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this." ilk="function" signature="bool rmdir ( string $dirname [, resource $context ] )" returns="bool"/>
      <scope name="round" docs="Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default)." ilk="function" signature="float round ( float $val [, int $precision ] )" returns="float"/>
      <scope name="rsort" docs="This function sorts an array in reverse order (highest to lowest)." ilk="function" signature="bool rsort ( array &amp;$array [, int $sort_flags ] )" returns="bool"/>
      <scope name="rtrim" docs="This function returns a string with whitespace stripped from the end of str." ilk="function" signature="string rtrim ( string $str [, string $charlist ] )" returns="string"/>
      <scope name="sem_acquire" docs="sem_acquire() blocks (if necessary) until the semaphore can be acquired. A process attempting to acquire a semaphore which it has already acquired will block forever if acquiring the semaphore would cause its maximum number of semaphore to be exceeded." ilk="function" signature="bool sem_acquire ( resource $sem_identifier )" returns="bool"/>
      <scope name="sem_get" docs="sem_get() returns an id that can be used to access the System V semaphore with the given key." ilk="function" signature="resource sem_get ( int $key [, int $max_acquire [, int $perm [, int $auto_release ]]] )" returns="resource"/>
      <scope name="sem_release" docs="sem_release() releases the semaphore if it is currently acquired by the calling process, otherwise a warning is generated." ilk="function" signature="bool sem_release ( resource $sem_identifier )" returns="bool"/>
      <scope name="sem_remove" docs="sem_remove() removes the given semaphore." ilk="function" signature="bool sem_remove ( resource $sem_identifier )" returns="bool"/>
      <scope name="serialize" docs="Generates a storable representation of a value" ilk="function" signature="string serialize ( mixed $value )" returns="string"/>
      <scope name="session_cache_expire" docs="session_cache_expire() returns the current setting of session.cache_expire." ilk="function" signature="int session_cache_expire ([ int $new_cache_expire ] )" returns="int"/>
      <scope name="session_cache_limiter" docs="session_cache_limiter() returns the name of the current cache limiter." ilk="function" signature="string session_cache_limiter ([ string $cache_limiter ] )" returns="string"/>
      <scope name="session_commit" docs="Undocumented function." ilk="function" signature="session_commit()"/>
      <scope name="session_decode" docs="session_decode() decodes the session data in data, setting variables stored in the session." ilk="function" signature="bool session_decode ( string $data )" returns="bool"/>
      <scope name="session_destroy" docs="In order to kill the session altogether, like to log the user out, the session id must also be unset. If a cookie is used to propagate the session id (default behavior), then the session cookie must be deleted. setcookie() may be used for that." ilk="function" signature="bool session_destroy ( void )" returns="bool"/>
      <scope name="session_encode" docs="session_encode() returns a string with the contents of the current session encoded within." ilk="function" signature="string session_encode ( void )" returns="string"/>
      <scope name="session_get_cookie_params" docs="Gets the session cookie parameters." ilk="function" signature="array session_get_cookie_params ( void )" returns="array"/>
      <scope name="session_id" docs="session_id() is used to get or set the session id for the current session." ilk="function" signature="string session_id ([ string $id ] )" returns="string"/>
      <scope name="session_is_registered" docs="Finds out whether a global variable is registered in a session." ilk="function" signature="bool session_is_registered ( string $name )" returns="bool"/>
      <scope name="session_module_name" docs="session_module_name() gets the name of the current session module." ilk="function" signature="string session_module_name ([ string $module ] )" returns="string"/>
      <scope name="session_name" docs="session_name() returns the name of the current session." ilk="function" signature="string session_name ([ string $name ] )" returns="string"/>
      <scope name="session_regenerate_id" docs="session_regenerate_id() will replace the current session id with a new one, and keep the current session information." ilk="function" signature="bool session_regenerate_id ([ bool $delete_old_session ] )" returns="bool"/>
      <scope name="session_register" docs="session_register() accepts a variable number of arguments, any of which can be either a string holding the name of a variable or an array consisting of variable names or other arrays. For each name, session_register() registers the global variable with that name in the current session." ilk="function" signature="bool session_register ( mixed $name [, mixed $... ] )" returns="bool"/>
      <scope name="session_save_path" docs="session_save_path() returns the path of the current directory used to save session data." ilk="function" signature="string session_save_path ([ string $path ] )" returns="string"/>
      <scope name="session_set_cookie_params" docs="Set cookie parameters defined in the php.ini file. The effect of this function only lasts for the duration of the script. Thus, you need to call session_set_cookie_params() for every request and before session_start() is called." ilk="function" signature="void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure [, bool $httponly ]]]] )" returns="void"/>
      <scope name="session_set_save_handler" docs="session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred. i.e. Storing the session data in a local database." ilk="function" signature="bool session_set_save_handler ( callback $open , callback $close , callback $read , callback $write , callback $destroy , callback $gc )" returns="bool"/>
      <scope name="session_start" docs="session_start() creates a session or resumes the current one based on the current session id that&amp;#039;s being passed via a request, such as GET, POST, or a cookie." ilk="function" signature="bool session_start ( void )" returns="bool"/>
      <scope name="session_unregister" docs="session_unregister() unregisters the global variable named name from the current session." ilk="function" signature="bool session_unregister ( string $name )" returns="bool"/>
      <scope name="session_unset" docs="The session_unset() function frees all session variables currently registered." ilk="function" signature="void session_unset ( void )" returns="void"/>
      <scope name="session_write_close" docs="End the current session and store session data." ilk="function" signature="void session_write_close ( void )" returns="void"/>
      <scope name="set_error_handler" docs="Sets a user function (error_handler) to handle errors in a script." ilk="function" signature="mixed set_error_handler ( callback $error_handler [, int $error_types ] )" returns="mixed"/>
      <scope name="set_file_buffer" docs="Undocumented function." ilk="function" signature="set_file_buffer()"/>
      <scope name="set_include_path" docs="Sets the include_path configuration option for the duration of the script." ilk="function" signature="string set_include_path ( string $new_include_path )" returns="string"/>
      <scope name="set_magic_quotes_runtime" docs="Set the current active configuration setting of magic_quotes_runtime." ilk="function" signature="bool set_magic_quotes_runtime ( int $new_setting )" returns="bool"/>
      <scope name="set_time_limit" docs="Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the max_execution_time value defined in the php.ini." ilk="function" signature="void set_time_limit ( int $seconds )" returns="void"/>
      <scope name="setcookie" docs="setcookie() defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent before any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including &amp;lt;html&amp;gt; and &amp;lt;head&amp;gt; tags as well as any whitespace." ilk="function" signature="bool setcookie ( string $name [, string $value [, int $expire [, string $path [, string $domain [, bool $secure [, bool $httponly ]]]]]] )" returns="bool"/>
      <scope name="setlocale" docs="Sets locale information." ilk="function" signature="string setlocale ( int $category , string $locale [, string $... ] )" returns="string"/>
      <scope name="settype" docs="Set the type of variable var to type." ilk="function" signature="bool settype ( mixed &amp;$var , string $type )" returns="bool"/>
      <scope name="sha1_file" docs="filename The filename" ilk="function" signature="string sha1_file ( string $filename [, bool $raw_output ] )" returns="string"/>
      <scope name="sha1" docs="str The input string." ilk="function" signature="string sha1 ( string $str [, bool $raw_output ] )" returns="string"/>
      <scope name="shell_exec" docs="This function is identical to the backtick operator." ilk="function" signature="string shell_exec ( string $cmd )" returns="string"/>
      <scope name="shm_attach" docs="shm_attach() returns an id that can be used to access the System V shared memory with the given key, the first call creates the shared memory segment with memsize and the optional perm-bits perm." ilk="function" signature="int shm_attach ( int $key [, int $memsize [, int $perm ]] )" returns="int"/>
      <scope name="shm_detach" docs="shm_detach() disconnects from the shared memory given by the shm_identifier created by shm_attach(). Remember, that shared memory still exist in the Unix system and the data is still present." ilk="function" signature="bool shm_detach ( int $shm_identifier )" returns="bool"/>
      <scope name="shm_get_var" docs="shm_get_var() returns the variable with a given variable_key, in the given shared memory segment. The variable is still present in the shared memory." ilk="function" signature="mixed shm_get_var ( int $shm_identifier , int $variable_key )" returns="mixed"/>
      <scope name="shm_put_var" docs="shm_put_var() inserts or updates the variable with the given variable_key." ilk="function" signature="bool shm_put_var ( int $shm_identifier , int $variable_key , mixed $variable )" returns="bool"/>
      <scope name="shm_remove_var" docs="Removes a variable with a given variable_key and frees the occupied memory." ilk="function" signature="bool shm_remove_var ( int $shm_identifier , int $variable_key )" returns="bool"/>
      <scope name="shm_remove" docs="shm_remove() removes the shared memory shm_identifier. All data will be destroyed." ilk="function" signature="bool shm_remove ( int $shm_identifier )" returns="bool"/>
      <scope name="shmop_close" docs="shmop_close() is used to close a shared memory block." ilk="function" signature="void shmop_close ( int $shmid )" returns="void"/>
      <scope name="shmop_delete" docs="shmop_delete() is used to delete a shared memory block." ilk="function" signature="bool shmop_delete ( int $shmid )" returns="bool"/>
      <scope name="shmop_open" docs="shmop_open() can create or open a shared memory block." ilk="function" signature="int shmop_open ( int $key , string $flags , int $mode , int $size )" returns="int"/>
      <scope name="shmop_read" docs="shmop_read() will read a string from shared memory block." ilk="function" signature="string shmop_read ( int $shmid , int $start , int $count )" returns="string"/>
      <scope name="shmop_size" docs="shmop_size() is used to get the size, in bytes of the shared memory block." ilk="function" signature="int shmop_size ( int $shmid )" returns="int"/>
      <scope name="shmop_write" docs="shmop_write() will write a string into shared memory block." ilk="function" signature="int shmop_write ( int $shmid , string $data , int $offset )" returns="int"/>
      <scope name="show_source" docs="Undocumented function." ilk="function" signature="show_source()"/>
      <scope name="shuffle" docs="This function shuffles (randomizes the order of the elements in) an array." ilk="function" signature="bool shuffle ( array &amp;$array )" returns="bool"/>
      <scope name="similar_text" docs="This calculates the similarity between two strings as described in Oliver [1993]. Note that this implementation does not use a stack as in Oliver&amp;#039;s pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string." ilk="function" signature="int similar_text ( string $first , string $second [, float &amp;$percent ] )" returns="int"/>
      <scope name="sin" docs="sin() returns the sine of the arg parameter. The arg parameter is in radians." ilk="function" signature="float sin ( float $arg )" returns="float"/>
      <scope name="sinh" docs="Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2." ilk="function" signature="float sinh ( float $arg )" returns="float"/>
      <scope name="sizeof" docs="Undocumented function." ilk="function" signature="sizeof()"/>
      <scope name="sleep" docs="seconds Halt time in seconds." ilk="function" signature="int sleep ( int $seconds )" returns="int"/>
      <scope name="snmp_get_quick_print" docs="Returns the current value stored in the UCD Library for quick_print. quick_print is off by default." ilk="function" signature="bool snmp_get_quick_print ( void )" returns="bool"/>
      <scope name="snmp_get_valueretrieval" docs="snmp_set_valueretrieval()" ilk="function" signature="int snmp_get_valueretrieval ( void )" returns="int"/>
      <scope name="snmp_set_enum_print" docs="Undocumented function." ilk="function" signature="void snmp_set_enum_print ( int $enum_print )" returns="void"/>
      <scope name="snmp_set_oid_numeric_print" docs="Version Description 5.2.0 Since PHP 5.2.0, This function is an alias of: snmp_set_oid_output_format()." ilk="function" signature="void snmp_set_oid_numeric_print ( int $oid_numeric_print )" returns="void"/>
      <scope name="snmp_set_quick_print" docs="Sets the value of quick_print within the UCD SNMP library. When this is set (1), the SNMP library will return &amp;#039;quick printed&amp;#039; values. This means that just the value will be printed. When quick_print is not enabled (default) the UCD SNMP library prints extra information including the type of the value (i.e. IpAddress or OID). Additionally, if quick_print is not enabled, the library prints additional hex values for all strings of three characters or less." ilk="function" signature="void snmp_set_quick_print ( bool $quick_print )" returns="void"/>
      <scope name="snmp_set_valueretrieval" docs="snmp_get_valueretrieval()" ilk="function" signature="void snmp_set_valueretrieval ( int $method )" returns="void"/>
      <scope name="snmpget" docs="The snmpget() function is used to read the value of an SNMP object specified by the object_id." ilk="function" signature="string snmpget ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )" returns="string"/>
      <scope name="snmprealwalk" docs="Undocumented function." ilk="function" signature="array snmprealwalk ( string $host , string $community , string $object_id [, int $timeout [, int $retries ]] )" returns="array"/>
      <scope name="snmpset" docs="snmpset() is used to set the value of an SNMP object specified by the object_id." ilk="function" signature="bool snmpset ( string $hostname , string $community , string $object_id , string $type , mixed $value [, int $timeout [, int $retries ]] )" returns="bool"/>
      <scope name="snmpwalk" docs="snmpwalk() function is used to read all the values from an SNMP agent specified by the hostname." ilk="function" signature="array snmpwalk ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )" returns="array"/>
      <scope name="snmpwalkoid" docs="snmpwalkoid() function is used to read all object ids and their respective values from an SNMP agent specified by hostname." ilk="function" signature="array snmpwalkoid ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )" returns="array"/>
      <scope name="socket_accept" docs="After the socket socket has been created using socket_create(), bound to a name with socket_bind(), and told to listen for connections with socket_listen(), this function will accept incoming connections on that socket. Once a successful connection is made, a new socket resource is returned, which may be used for communication. If there are multiple connections queued on the socket, the first will be used. If there are no pending connections, socket_accept() will block until a connection becomes present. If socket has been made non-blocking using socket_set_blocking() or socket_set_nonblock(), FALSE will be returned." ilk="function" signature="resource socket_accept ( resource $socket )" returns="resource"/>
      <scope name="socket_bind" docs="Binds the name given in address to the socket described by socket. This has to be done before a connection is be established using socket_connect() or socket_listen()." ilk="function" signature="bool socket_bind ( resource $socket , string $address [, int $port ] )" returns="bool"/>
      <scope name="socket_clear_error" docs="This function clears the error code on the given socket or the global last socket error if no socket is specified." ilk="function" signature="void socket_clear_error ([ resource $socket ] )" returns="void"/>
      <scope name="socket_close" docs="socket_close() closes the socket resource given by socket. This function is specific to sockets and cannot be used on any other type of resources." ilk="function" signature="void socket_close ( resource $socket )" returns="void"/>
      <scope name="socket_connect" docs="Initiate a connection to address using the socket resource socket, which must be a valid socket resource created with socket_create()." ilk="function" signature="bool socket_connect ( resource $socket , string $address [, int $port ] )" returns="bool"/>
      <scope name="socket_create_listen" docs="socket_create_listen() creates a new socket resource of type AF_INET listening on all local interfaces on the given port waiting for new connections." ilk="function" signature="resource socket_create_listen ( int $port [, int $backlog ] )" returns="resource"/>
      <scope name="socket_create_pair" docs="socket_create_pair() creates two connected and indistinguishable sockets, and stores them in fd. This function is commonly used in IPC (InterProcess Communication)." ilk="function" signature="bool socket_create_pair ( int $domain , int $type , int $protocol , array &amp;$fd )" returns="bool"/>
      <scope name="socket_create" docs="Creates and returns a socket resource, also referred to as an endpoint of communication. A typical network connection is made up of 2 sockets, one performing the role of the client, and another performing the role of the server." ilk="function" signature="resource socket_create ( int $domain , int $type , int $protocol )" returns="resource"/>
      <scope name="socket_get_option" docs="The socket_get_option() function retrieves the value for the option specified by the optname parameter for the specified socket." ilk="function" signature="mixed socket_get_option ( resource $socket , int $level , int $optname )" returns="mixed"/>
      <scope name="socket_get_status" docs="Undocumented function." ilk="function" signature="socket_get_status()"/>
      <scope name="socket_getpeername" docs="Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type." ilk="function" signature="bool socket_getpeername ( resource $socket , string &amp;$address [, int &amp;$port ] )" returns="bool"/>
      <scope name="socket_getsockname" docs="socket A valid socket resource created with socket_create() or socket_accept()." ilk="function" signature="bool socket_getsockname ( resource $socket , string &amp;$addr [, int &amp;$port ] )" returns="bool"/>
      <scope name="socket_last_error" docs="If a socket resource is passed to this function, the last error which occurred on this particular socket is returned. If the socket resource is omitted, the error code of the last failed socket function is returned. The latter is particularly helpful for functions like socket_create() which don&amp;#039;t return a socket on failure and socket_select() which can fail for reasons not directly tied to a particular socket. The error code is suitable to be fed to socket_strerror() which returns a string describing the given error code." ilk="function" signature="int socket_last_error ([ resource $socket ] )" returns="int"/>
      <scope name="socket_listen" docs="After the socket socket has been created using socket_create() and bound to a name with socket_bind(), it may be told to listen for incoming connections on socket." ilk="function" signature="bool socket_listen ( resource $socket [, int $backlog ] )" returns="bool"/>
      <scope name="socket_read" docs="The function socket_read() reads from the socket resource socket created by the socket_create() or socket_accept() functions." ilk="function" signature="string socket_read ( resource $socket , int $length [, int $type ] )" returns="string"/>
      <scope name="socket_recv" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="int socket_recv ( resource $socket , string &amp;$buf , int $len , int $flags )" returns="int"/>
      <scope name="socket_recvfrom" docs="The socket_recvfrom() function receives len bytes of data in buf from name on port port (if the socket is not of type AF_UNIX) using socket. socket_recvfrom() can be used to gather data from both connected and unconnected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function." ilk="function" signature="int socket_recvfrom ( resource $socket , string &amp;$buf , int $len , int $flags , string &amp;$name [, int &amp;$port ] )" returns="int"/>
      <scope name="socket_select" docs="socket_select() accepts arrays of sockets and waits for them to change status. Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets. Three independent arrays of socket resources are watched." ilk="function" signature="int socket_select ( array &amp;$read , array &amp;$write , array &amp;$except , int $tv_sec [, int $tv_usec ] )" returns="int"/>
      <scope name="socket_send" docs="The function socket_send() sends len bytes to the socket socket from buf." ilk="function" signature="int socket_send ( resource $socket , string $buf , int $len , int $flags )" returns="int"/>
      <scope name="socket_sendto" docs="The function socket_sendto() sends len bytes from buf through the socket socket to the port at the address addr." ilk="function" signature="int socket_sendto ( resource $socket , string $buf , int $len , int $flags , string $addr [, int $port ] )" returns="int"/>
      <scope name="socket_set_block" docs="The socket_set_block() function removes the O_NONBLOCK flag on the socket specified by the socket parameter." ilk="function" signature="bool socket_set_block ( resource $socket )" returns="bool"/>
      <scope name="socket_set_blocking" docs="Undocumented function." ilk="function" signature="socket_set_blocking()"/>
      <scope name="socket_set_nonblock" docs="The socket_set_nonblock() function sets the O_NONBLOCK flag on the socket specified by the socket parameter." ilk="function" signature="bool socket_set_nonblock ( resource $socket )" returns="bool"/>
      <scope name="socket_set_option" docs="The socket_set_option() function sets the option specified by the optname parameter, at the specified protocol level, to the value pointed to by the optval parameter for the socket." ilk="function" signature="bool socket_set_option ( resource $socket , int $level , int $optname , mixed $optval )" returns="bool"/>
      <scope name="socket_set_timeout" docs="Undocumented function." ilk="function" signature="socket_set_timeout()"/>
      <scope name="socket_shutdown" docs="The socket_shutdown() function allows you to stop incoming, outgoing or all data (the default) from being sent through the socket" ilk="function" signature="bool socket_shutdown ( resource $socket [, int $how ] )" returns="bool"/>
      <scope name="socket_strerror" docs="socket_strerror() takes as its errno parameter a socket error code as returned by socket_last_error() and returns the corresponding explanatory text." ilk="function" signature="string socket_strerror ( int $errno )" returns="string"/>
      <scope name="socket_write" docs="The function socket_write() writes to the socket from the given buffer." ilk="function" signature="int socket_write ( resource $socket , string $buffer [, int $length ] )" returns="int"/>
      <scope name="sort" docs="This function sorts an array. Elements will be arranged from lowest to highest when this function has completed." ilk="function" signature="bool sort ( array &amp;$array [, int $sort_flags ] )" returns="bool"/>
      <scope name="soundex" docs="Calculates the soundex key of str." ilk="function" signature="string soundex ( string $str )" returns="string"/>
      <scope name="split" docs="Splits a string into array by regular expression." ilk="function" signature="array split ( string $pattern , string $string [, int $limit ] )" returns="array"/>
      <scope name="spliti" docs="Splits a string into array by regular expression." ilk="function" signature="array spliti ( string $pattern , string $string [, int $limit ] )" returns="array"/>
      <scope name="sprintf" docs="Returns a string produced according to the formatting string format." ilk="function" signature="string sprintf ( string $format [, mixed $args [, mixed $... ]] )" returns="string"/>
      <scope name="sql_regcase" docs="Creates a regular expression for a case insensitive match." ilk="function" signature="string sql_regcase ( string $string )" returns="string"/>
      <scope name="sqrt" docs="Returns the square root of arg." ilk="function" signature="float sqrt ( float $arg )" returns="float"/>
      <scope name="srand" docs="Seeds the random number generator with seed or with a random value if no seed is given." ilk="function" signature="void srand ([ int $seed ] )" returns="void"/>
      <scope name="sscanf" docs="The function sscanf() is the input analog of printf(). sscanf() reads from the string str and interprets it according to the specified format, which is described in the documentation for sprintf(). If only two parameters were passed to this function, the values parsed will be returned as an array. Otherwise, if optional parameters are passed, the function will return the number of assigned values. The optional parameters must be passed by reference." ilk="function" signature="mixed sscanf ( string $str , string $format [, mixed &amp;$... ] )" returns="mixed"/>
      <scope name="stat" docs="Gathers the statistics of the file named by filename. If filename is a symbolic link, statistics are from the file itself, not the symlink." ilk="function" signature="array stat ( string $filename )" returns="array"/>
      <scope name="str_pad" docs="This functions returns the input string padded on the left, the right, or both sides to the specified padding length. If the optional argument pad_string is not supplied, the input is padded with spaces, otherwise it is padded with characters from pad_string up to the limit." ilk="function" signature="string str_pad ( string $input , int $pad_length [, string $pad_string [, int $pad_type ]] )" returns="string"/>
      <scope name="str_repeat" docs="Returns input repeated multiplier times." ilk="function" signature="string str_repeat ( string $input , int $multiplier )" returns="string"/>
      <scope name="str_replace" docs="This function returns a string or an array with all occurrences of search in subject replaced with the given replace value." ilk="function" signature="mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] )" returns="mixed"/>
      <scope name="str_rot13" docs="Performs the ROT13 encoding on the str argument and returns the resulting string." ilk="function" signature="string str_rot13 ( string $str )" returns="string"/>
      <scope name="str_shuffle" docs="str The input string." ilk="function" signature="string str_shuffle ( string $str )" returns="string"/>
      <scope name="str_word_count" docs="Counts the number of words inside string. If the optional format is not specified, then the return value will be an integer representing the number of words found. In the event the format is specified, the return value will be an array, content of which is dependent on the format. The possible value for the format and the resultant outputs are listed below." ilk="function" signature="mixed str_word_count ( string $string [, int $format [, string $charlist ]] )" returns="mixed"/>
      <scope name="strcasecmp" docs="Binary safe case-insensitive string comparison." ilk="function" signature="int strcasecmp ( string $str1 , string $str2 )" returns="int"/>
      <scope name="strchr" docs="Undocumented function." ilk="function" signature="strchr()"/>
      <scope name="strcmp" docs="str1 The first string." ilk="function" signature="int strcmp ( string $str1 , string $str2 )" returns="int"/>
      <scope name="strcoll" docs="Note that this comparison is case sensitive, and unlike strcmp() this function is not binary safe." ilk="function" signature="int strcoll ( string $str1 , string $str2 )" returns="int"/>
      <scope name="strcspn" docs="Returns the length of the initial segment of str1 which does not contain any of the characters in str2." ilk="function" signature="int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )" returns="int"/>
      <scope name="stream_context_create" docs="Undocumented function." ilk="function" signature="resource stream_context_create ([ array $options [, array $params ]] )" returns="resource"/>
      <scope name="stream_context_get_options" docs="Undocumented function." ilk="function" signature="array stream_context_get_options ( resource $stream_or_context )" returns="array"/>
      <scope name="stream_context_set_option" docs="Undocumented function." ilk="function" signature="bool stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value )" returns="bool"/>
      <scope name="stream_context_set_params" docs="Undocumented function." ilk="function" signature="bool stream_context_set_params ( resource $stream_or_context , array $params )" returns="bool"/>
      <scope name="stream_filter_append" docs="Adds filtername to the list of filters attached to stream. This filter will be added with the specified params to the end of the list and will therefore be called last during stream operations. To add a filter to the beginning of the list, use stream_filter_prepend()." ilk="function" signature="resource stream_filter_append ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )" returns="resource"/>
      <scope name="stream_filter_prepend" docs="Adds filtername to the list of filters attached to stream. This filter will be added with the specified params to the beginning of the list and will therefore be called first during stream operations. To add a filter to the end of the list, use stream_filter_append()." ilk="function" signature="resource stream_filter_prepend ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )" returns="resource"/>
      <scope name="stream_get_meta_data" docs="timed_out (bool) - TRUE if the stream timed out while waiting for data on the last call to fread() or fgets()." ilk="function" signature="array stream_get_meta_data ( resource $stream )" returns="array"/>
      <scope name="stream_register_wrapper" docs="Undocumented function." ilk="function" signature="stream_register_wrapper()"/>
      <scope name="stream_select" docs="Using a timeout value of 0 allows you to instantaneously poll the status of the streams, however, it is NOT a good idea to use a 0 timeout value in a loop as it will cause your script to consume too much CPU time." ilk="function" signature="int stream_select ( array &amp;$read , array &amp;$write , array &amp;$except , int $tv_sec [, int $tv_usec ] )" returns="int"/>
      <scope name="stream_set_blocking" docs="If mode is 0, the given stream will be switched to non-blocking mode, and if 1, it will be switched to blocking mode. This affects calls like fgets() and fread() that read from the stream. In non-blocking mode an fgets() call will always return right away while in blocking mode it will wait for data to become available on the stream." ilk="function" signature="bool stream_set_blocking ( resource $stream , int $mode )" returns="bool"/>
      <scope name="stream_set_timeout" docs="Sets the timeout value on stream, expressed in the sum of seconds and microseconds. Returns TRUE on success or FALSE on failure." ilk="function" signature="bool stream_set_timeout ( resource $stream , int $seconds [, int $microseconds ] )" returns="bool"/>
      <scope name="stream_set_write_buffer" docs="The following example demonstrates how to use stream_set_write_buffer() to create an unbuffered stream. Example#1 stream_set_write_buffer() example" ilk="function" signature="int stream_set_write_buffer ( resource $stream , int $buffer )" returns="int"/>
      <scope name="stream_wrapper_register" docs="stream_wrapper_register() allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as fopen(), fread() etc.)." ilk="function" signature="bool stream_wrapper_register ( string $protocol , string $classname )" returns="bool"/>
      <scope name="strftime" docs="Returns a string formatted according to the given format string using the given timestamp or the current local time if no timestamp is given. Month and weekday names and other language dependent strings respect the current locale set with setlocale()." ilk="function" signature="string strftime ( string $format [, int $timestamp ] )" returns="string"/>
      <scope name="strip_tags" docs="This function tries to return a string with all HTML and PHP tags stripped from a given str. It uses the same tag stripping state machine as the fgetss() function." ilk="function" signature="string strip_tags ( string $str [, string $allowable_tags ] )" returns="string"/>
      <scope name="stripcslashes" docs="Returns a string with backslashes stripped off. Recognizes C-like \n, \r ..., octal and hexadecimal representation." ilk="function" signature="string stripcslashes ( string $str )" returns="string"/>
      <scope name="stripslashes" docs="Un-quotes a quoted string." ilk="function" signature="string stripslashes ( string $str )" returns="string"/>
      <scope name="stristr" docs="Returns all of haystack from the first occurrence of needle to the end." ilk="function" signature="string stristr ( string $haystack , string $needle , bool $before_needle )" returns="string"/>
      <scope name="strlen" docs="Returns the length of the given string." ilk="function" signature="int strlen ( string $string )" returns="int"/>
      <scope name="strnatcasecmp" docs="This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. The behaviour of this function is similar to strnatcmp(), except that the comparison is not case sensitive. For more information see: Martin Pool&amp;#039;s &amp;raquo; Natural Order String Comparison page." ilk="function" signature="int strnatcasecmp ( string $str1 , string $str2 )" returns="int"/>
      <scope name="strnatcmp" docs="This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a &amp;quot;natural ordering&amp;quot;. Note that this comparison is case sensitive." ilk="function" signature="int strnatcmp ( string $str1 , string $str2 )" returns="int"/>
      <scope name="strncasecmp" docs="This function is similar to strcasecmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison." ilk="function" signature="int strncasecmp ( string $str1 , string $str2 , int $len )" returns="int"/>
      <scope name="strncmp" docs="This function is similar to strcmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison." ilk="function" signature="int strncmp ( string $str1 , string $str2 , int $len )" returns="int"/>
      <scope name="strpos" docs="Returns the numeric position of the first occurrence of needle in the haystack string. Unlike the strrpos() before PHP 5, this function can take a full string as the needle parameter and the entire string will be used." ilk="function" signature="int strpos ( string $haystack , mixed $needle [, int $offset ] )" returns="int"/>
      <scope name="strrchr" docs="This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack." ilk="function" signature="string strrchr ( string $haystack , string $needle )" returns="string"/>
      <scope name="strrev" docs="Returns string, reversed." ilk="function" signature="string strrev ( string $string )" returns="string"/>
      <scope name="strrpos" docs="Returns the numeric position of the last occurrence of needle in the haystack string. Note that the needle in this case can only be a single character in PHP 4. If a string is passed as the needle, then only the first character of that string will be used." ilk="function" signature="int strrpos ( string $haystack , string $needle [, int $offset ] )" returns="int"/>
      <scope name="strspn" docs="Finds the length of the initial segment matching mask." ilk="function" signature="int strspn ( string $str1 , string $str2 [, int $start [, int $length ]] )" returns="int"/>
      <scope name="strstr" docs="Returns part of haystack string from the first occurrence of needle to the end of haystack." ilk="function" signature="string strstr ( string $haystack , string $needle , bool $before_needle )" returns="string"/>
      <scope name="strtok" docs="strtok() splits a string (str) into smaller strings (tokens), with each token being delimited by any character from token. That is, if you have a string like &amp;quot;This is an example string&amp;quot; you could tokenize this string into its individual words by using the space character as the token. Example#1 strtok() example" ilk="function" signature="string strtok ( string $str , string $token )" returns="string"/>
      <scope name="strtolower" docs="Returns string with all alphabetic characters converted to lowercase." ilk="function" signature="string strtolower ( string $str )" returns="string"/>
      <scope name="strtotime" docs="This function will use the TZ environment variable (if available) to calculate the timestamp. Since PHP 5.1.0 there are easier ways to define the timezone that is used across all date/time functions. That process is explained in the date_default_timezone_get() function page." ilk="function" signature="int strtotime ( string $time [, int $now ] )" returns="int"/>
      <scope name="strtoupper" docs="Returns string with all alphabetic characters converted to uppercase." ilk="function" signature="string strtoupper ( string $string )" returns="string"/>
      <scope name="strtr" docs="This function returns a copy of str, translating all occurrences of each character in from to the corresponding character in to." ilk="function" signature="string strtr ( string $str , string $from , string $to )" returns="string"/>
      <scope name="strval" docs="floatval() intval() settype() Type juggling" ilk="function" signature="string strval ( mixed $var )" returns="string"/>
      <scope name="substr_count" docs="substr_count() returns the number of times the needle substring occurs in the haystack string. Please note that needle is case sensitive." ilk="function" signature="int substr_count ( string $haystack , string $needle [, int $offset [, int $length ]] )" returns="int"/>
      <scope name="substr_replace" docs="substr_replace() replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement." ilk="function" signature="mixed substr_replace ( mixed $string , string $replacement , int $start [, int $length ] )" returns="mixed"/>
      <scope name="substr" docs="Returns the portion of string specified by the start and length parameters." ilk="function" signature="string substr ( string $string , int $start [, int $length ] )" returns="string"/>
      <scope name="swf_actiongeturl" docs="Gets the URL specified by the parameter url with the given target." ilk="function" signature="void swf_actiongeturl ( string $url , string $target )" returns="void"/>
      <scope name="swf_actiongotoframe" docs="The swf_actiongotoframe() function will go to the frame specified by framenumber, play it, and then stop." ilk="function" signature="void swf_actiongotoframe ( int $framenumber )" returns="void"/>
      <scope name="swf_actiongotolabel" docs="The swf_actiongotolabel() function displays the frame with the label given by the label parameter and then stops." ilk="function" signature="void swf_actiongotolabel ( string $label )" returns="void"/>
      <scope name="swf_actionnextframe" docs="Go forward one frame." ilk="function" signature="void swf_actionnextframe ( void )" returns="void"/>
      <scope name="swf_actionplay" docs="Start playing the flash movie from the current frame." ilk="function" signature="void swf_actionplay ( void )" returns="void"/>
      <scope name="swf_actionprevframe" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="void swf_actionprevframe ( void )" returns="void"/>
      <scope name="swf_actionsettarget" docs="Sets the context for all actions. You can use this to control other flash movies that are currently playing." ilk="function" signature="void swf_actionsettarget ( string $target )" returns="void"/>
      <scope name="swf_actionstop" docs="Stop playing the flash movie at the current frame." ilk="function" signature="void swf_actionstop ( void )" returns="void"/>
      <scope name="swf_actiontogglequality" docs="Toggle the flash movie between high and low quality." ilk="function" signature="void swf_actiontogglequality ( void )" returns="void"/>
      <scope name="swf_actionwaitforframe" docs="The swf_actionwaitforframe() function will check to see if the frame, specified by the framenumber parameter has been loaded, if not it will skip the number of actions specified by the skipcount parameter. This can be useful for &amp;quot;Loading...&amp;quot; type animations." ilk="function" signature="void swf_actionwaitforframe ( int $framenumber , int $skipcount )" returns="void"/>
      <scope name="swf_addbuttonrecord" docs="Allow you to define the specifics of using a button." ilk="function" signature="void swf_addbuttonrecord ( int $states , int $shapeid , int $depth )" returns="void"/>
      <scope name="swf_addcolor" docs="Sets the global add color to the specified color. This color is then implicitly used by the swf_placeobject(), swf_modifyobject() and swf_addbuttonrecord() functions." ilk="function" signature="void swf_addcolor ( float $r , float $g , float $b , float $a )" returns="void"/>
      <scope name="swf_closefile" docs="Close a file that was opened by the swf_openfile() function." ilk="function" signature="void swf_closefile ([ int $return_file ] )" returns="void"/>
      <scope name="swf_definebitmap" docs="The swf_definebitmap() function defines a bitmap given an image." ilk="function" signature="void swf_definebitmap ( int $objid , string $image_name )" returns="void"/>
      <scope name="swf_definefont" docs="The swf_definefont() function defines a font parameter and gives it the specified id. It then sets the font given by fontname to the current font." ilk="function" signature="void swf_definefont ( int $fontid , string $fontname )" returns="void"/>
      <scope name="swf_defineline" docs="Defines a line." ilk="function" signature="void swf_defineline ( int $objid , float $x1 , float $y1 , float $x2 , float $y2 , float $width )" returns="void"/>
      <scope name="swf_definepoly" docs="Defines a polygon given an array of x, y coordinates." ilk="function" signature="void swf_definepoly ( int $objid , array $coords , int $npoints , float $width )" returns="void"/>
      <scope name="swf_definerect" docs="Defines a rectangle with an upper left hand coordinate and a lower right hand coordinate." ilk="function" signature="void swf_definerect ( int $objid , float $x1 , float $y1 , float $x2 , float $y2 , float $width )" returns="void"/>
      <scope name="swf_definetext" docs="Defines a text string using the current font and font size." ilk="function" signature="void swf_definetext ( int $objid , string $str , int $docenter )" returns="void"/>
      <scope name="swf_endbutton" docs="The swf_endbutton() function ends the definition of the current button." ilk="function" signature="void swf_endbutton ( void )" returns="void"/>
      <scope name="swf_enddoaction" docs="Ends the current action started by the swf_startdoaction() function." ilk="function" signature="void swf_enddoaction ( void )" returns="void"/>
      <scope name="swf_endshape" docs="The swf_endshape() completes the definition of the current shape." ilk="function" signature="void swf_endshape ( void )" returns="void"/>
      <scope name="swf_endsymbol" docs="Ends the definition of a symbol that was started by the swf_startsymbol() function." ilk="function" signature="void swf_endsymbol ( void )" returns="void"/>
      <scope name="swf_fontsize" docs="Changes the font size to the value given by the size parameter." ilk="function" signature="void swf_fontsize ( float $size )" returns="void"/>
      <scope name="swf_fontslant" docs="Set the current font slant to the angle indicated by the slant parameter." ilk="function" signature="void swf_fontslant ( float $slant )" returns="void"/>
      <scope name="swf_fonttracking" docs="Set the font tracking to the value specified by the tracking parameter. This function is used to increase the spacing between letters and text, positive values increase the space and negative values decrease the space between letters." ilk="function" signature="void swf_fonttracking ( float $tracking )" returns="void"/>
      <scope name="swf_getbitmapinfo" docs="Returns information about a bitmap." ilk="function" signature="array swf_getbitmapinfo ( int $bitmapid )" returns="array"/>
      <scope name="swf_getfontinfo" docs="Gets information about the font by giving the height in pixels of a capital A and a lowercase x." ilk="function" signature="array swf_getfontinfo ( void )" returns="array"/>
      <scope name="swf_getframe" docs="The swf_getframe() function gets the number of the current frame." ilk="function" signature="int swf_getframe ( void )" returns="int"/>
      <scope name="swf_labelframe" docs="Labels the current frame with the given name." ilk="function" signature="void swf_labelframe ( string $name )" returns="void"/>
      <scope name="swf_lookat" docs="Defines a viewing transformation by giving the viewing position and the coordinates of a reference point in the scene." ilk="function" signature="void swf_lookat ( float $view_x , float $view_y , float $view_z , float $reference_x , float $reference_y , float $reference_z , float $twist )" returns="void"/>
      <scope name="swf_modifyobject" docs="Updates the position and/or color of the object at the specified depth." ilk="function" signature="void swf_modifyobject ( int $depth , int $how )" returns="void"/>
      <scope name="swf_mulcolor" docs="Sets the global multiply color to the given one. This color is then implicitly used by the swf_placeobject(), swf_modifyobject() and swf_addbuttonrecord() functions." ilk="function" signature="void swf_mulcolor ( float $r , float $g , float $b , float $a )" returns="void"/>
      <scope name="swf_nextid" docs="The swf_nextid() function returns the next available object id." ilk="function" signature="int swf_nextid ( void )" returns="int"/>
      <scope name="swf_oncondition" docs="The swf_oncondition() function describes a transition that will trigger an action list." ilk="function" signature="void swf_oncondition ( int $transition )" returns="void"/>
      <scope name="swf_openfile" docs="Opens a new file. This must be the first function you call, otherwise your script will not work." ilk="function" signature="void swf_openfile ( string $filename , float $width , float $height , float $framerate , float $r , float $g , float $b )" returns="void"/>
      <scope name="swf_ortho" docs="Defines an orthographic mapping of user coordinates onto the current viewport." ilk="function" signature="void swf_ortho ( float $xmin , float $xmax , float $ymin , float $ymax , float $zmin , float $zmax )" returns="void"/>
      <scope name="swf_ortho2" docs="Defines a two dimensional orthographic mapping of user coordinates onto the current viewport, this defaults to one to one mapping of the area of the Flash movie." ilk="function" signature="void swf_ortho2 ( float $xmin , float $xmax , float $ymin , float $ymax )" returns="void"/>
      <scope name="swf_perspective" docs="Defines a perspective projection transformation." ilk="function" signature="void swf_perspective ( float $fovy , float $aspect , float $near , float $far )" returns="void"/>
      <scope name="swf_placeobject" docs="Places the object in the current frame at a specified depth." ilk="function" signature="void swf_placeobject ( int $objid , int $depth )" returns="void"/>
      <scope name="swf_polarview" docs="The swf_polarview() function defines the viewer&amp;#039;s position in polar coordinates." ilk="function" signature="void swf_polarview ( float $dist , float $azimuth , float $incidence , float $twist )" returns="void"/>
      <scope name="swf_popmatrix" docs="Pushes the current transformation matrix back onto the stack." ilk="function" signature="void swf_popmatrix ( void )" returns="void"/>
      <scope name="swf_posround" docs="Enables or disables the rounding of the translation when objects are placed or moved, there are times when text becomes more readable because rounding has been enabled." ilk="function" signature="void swf_posround ( int $round )" returns="void"/>
      <scope name="swf_pushmatrix" docs="Pushes the current transformation matrix back onto the stack." ilk="function" signature="void swf_pushmatrix ( void )" returns="void"/>
      <scope name="swf_removeobject" docs="Removes the object at the depth specified by depth." ilk="function" signature="void swf_removeobject ( int $depth )" returns="void"/>
      <scope name="swf_rotate" docs="Rotates the current transformation by a given angle around the given axis." ilk="function" signature="void swf_rotate ( float $angle , string $axis )" returns="void"/>
      <scope name="swf_scale" docs="The swf_scale() scales curve coordinates by the given value." ilk="function" signature="void swf_scale ( float $x , float $y , float $z )" returns="void"/>
      <scope name="swf_setfont" docs="The swf_setfont() sets the current font to the value given by the fontid parameter." ilk="function" signature="void swf_setfont ( int $fontid )" returns="void"/>
      <scope name="swf_setframe" docs="Changes the active frame to the specified on." ilk="function" signature="void swf_setframe ( int $framenumber )" returns="void"/>
      <scope name="swf_shapearc" docs="Draws a circular arc." ilk="function" signature="void swf_shapearc ( float $x , float $y , float $r , float $ang1 , float $ang2 )" returns="void"/>
      <scope name="swf_shapecurveto" docs="Draws a quadratic bezier curve from the current location, though the two given points." ilk="function" signature="void swf_shapecurveto ( float $x1 , float $y1 , float $x2 , float $y2 )" returns="void"/>
      <scope name="swf_shapecurveto3" docs="Draw a cubic bezier curve using the given coordinates." ilk="function" signature="void swf_shapecurveto3 ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )" returns="void"/>
      <scope name="swf_shapefillbitmapclip" docs="Sets the fill to bitmap clipped, empty spaces will be filled by the bitmap." ilk="function" signature="void swf_shapefillbitmapclip ( int $bitmapid )" returns="void"/>
      <scope name="swf_shapefillbitmaptile" docs="Sets the fill to bitmap tile, empty spaces will be filled by the bitmap." ilk="function" signature="void swf_shapefillbitmaptile ( int $bitmapid )" returns="void"/>
      <scope name="swf_shapefilloff" docs="Turns off filling for the current shape." ilk="function" signature="void swf_shapefilloff ( void )" returns="void"/>
      <scope name="swf_shapefillsolid" docs="Sets the current fill style to solid, and then sets the fill color to the given color." ilk="function" signature="void swf_shapefillsolid ( float $r , float $g , float $b , float $a )" returns="void"/>
      <scope name="swf_shapelinesolid" docs="Sets the current line style to the given color and width." ilk="function" signature="void swf_shapelinesolid ( float $r , float $g , float $b , float $a , float $width )" returns="void"/>
      <scope name="swf_shapelineto" docs="Draws a line to the x and y coordinates. The current position is then set to that point." ilk="function" signature="void swf_shapelineto ( float $x , float $y )" returns="void"/>
      <scope name="swf_shapemoveto" docs="Moves the current position to the given point." ilk="function" signature="void swf_shapemoveto ( float $x , float $y )" returns="void"/>
      <scope name="swf_showframe" docs="Outputs the current frame." ilk="function" signature="void swf_showframe ( void )" returns="void"/>
      <scope name="swf_startbutton" docs="Starts the definition of a button." ilk="function" signature="void swf_startbutton ( int $objid , int $type )" returns="void"/>
      <scope name="swf_startdoaction" docs="Starts the description of an action list for the current frame. This must be called before actions are defined for the current frame." ilk="function" signature="void swf_startdoaction ( void )" returns="void"/>
      <scope name="swf_startshape" docs="Starts a complex shape." ilk="function" signature="void swf_startshape ( int $objid )" returns="void"/>
      <scope name="swf_startsymbol" docs="Defines an object id as a symbol. Symbols are tiny flash movies that can be played simultaneously." ilk="function" signature="void swf_startsymbol ( int $objid )" returns="void"/>
      <scope name="swf_textwidth" docs="Gives the width of the string in pixels, using the current font and font size." ilk="function" signature="float swf_textwidth ( string $str )" returns="float"/>
      <scope name="swf_translate" docs="Translates the current transformation by the given values." ilk="function" signature="void swf_translate ( float $x , float $y , float $z )" returns="void"/>
      <scope name="swf_viewport" docs="Selects an area for future drawing for xmin to xmax and ymin to ymax, if this function is not called the area defaults to the size of the screen." ilk="function" signature="void swf_viewport ( float $xmin , float $xmax , float $ymin , float $ymax )" returns="void"/>
      <scope name="sybase_affected_rows" docs="sybase_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query on the server associated with the specified link identifier." ilk="function" signature="int sybase_affected_rows ([ resource $link_identifier ] )" returns="int"/>
      <scope name="sybase_close" docs="sybase_close() closes the link to a Sybase database that&amp;#039;s associated with the specified link link_identifier." ilk="function" signature="bool sybase_close ([ resource $link_identifier ] )" returns="bool"/>
      <scope name="sybase_connect" docs="sybase_connect() establishes a connection to a Sybase server." ilk="function" signature="resource sybase_connect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]] )" returns="resource"/>
      <scope name="sybase_data_seek" docs="sybase_data_seek() moves the internal row pointer of the Sybase result associated with the specified result identifier to pointer to the specified row number. The next call to sybase_fetch_row() would return that row." ilk="function" signature="bool sybase_data_seek ( resource $result_identifier , int $row_number )" returns="bool"/>
      <scope name="sybase_deadlock_retry_count" docs="Using sybase_deadlock_retry_count(), the number of retries can be defined in cases of deadlocks. By default, every deadlock is retried an infinite number of times or until the process is killed by Sybase, the executing script is killed (for instance, by set_time_limit()) or the query succeeds." ilk="function" signature="void sybase_deadlock_retry_count ( int $retry_count )" returns="void"/>
      <scope name="sybase_fetch_array" docs="sybase_fetch_array() is an extended version of sybase_fetch_row(). In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys." ilk="function" signature="array sybase_fetch_array ( resource $result )" returns="array"/>
      <scope name="sybase_fetch_assoc" docs="sybase_fetch_assoc() is a version of sybase_fetch_row() that uses column names instead of integers for indices in the result array. Columns from different tables with the same names are returned as name, name1, name2, ..., nameN." ilk="function" signature="array sybase_fetch_assoc ( resource $result )" returns="array"/>
      <scope name="sybase_fetch_field" docs="sybase_fetch_field() can be used in order to obtain information about fields in a certain query result." ilk="function" signature="object sybase_fetch_field ( resource $result [, int $field_offset ] )" returns="object"/>
      <scope name="sybase_fetch_object" docs="sybase_fetch_object() is similar to sybase_fetch_assoc(), with one difference - an object is returned, instead of an array." ilk="function" signature="object sybase_fetch_object ( resource $result [, mixed $object ] )" returns="object"/>
      <scope name="sybase_fetch_row" docs="sybase_fetch_row() fetches one row of data from the result associated with the specified result identifier." ilk="function" signature="array sybase_fetch_row ( resource $result )" returns="array"/>
      <scope name="sybase_field_seek" docs="Seeks to the specified field offset. If the next call to sybase_fetch_field() won&amp;#039;t include a field offset, this field would be returned." ilk="function" signature="bool sybase_field_seek ( resource $result , int $field_offset )" returns="bool"/>
      <scope name="sybase_free_result" docs="sybase_free_result() only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call sybase_free_result() with the result identifier as an argument and the associated result memory will be freed." ilk="function" signature="bool sybase_free_result ( resource $result )" returns="bool"/>
      <scope name="sybase_get_last_message" docs="sybase_get_last_message() returns the last message reported by the server." ilk="function" signature="string sybase_get_last_message ( void )" returns="string"/>
      <scope name="sybase_min_client_severity" docs="sybase_min_client_severity() sets the minimum client severity level." ilk="function" signature="void sybase_min_client_severity ( int $severity )" returns="void"/>
      <scope name="sybase_min_error_severity" docs="sybase_min_error_severity() sets the minimum error severity level." ilk="function" signature="void sybase_min_error_severity ( int $severity )" returns="void"/>
      <scope name="sybase_min_message_severity" docs="sybase_min_message_severity() sets the minimum message severity level." ilk="function" signature="void sybase_min_message_severity ( int $severity )" returns="void"/>
      <scope name="sybase_min_server_severity" docs="sybase_min_server_severity() sets the minimum server severity level." ilk="function" signature="void sybase_min_server_severity ( int $severity )" returns="void"/>
      <scope name="sybase_num_fields" docs="sybase_num_fields() returns the number of fields in a result set." ilk="function" signature="int sybase_num_fields ( resource $result )" returns="int"/>
      <scope name="sybase_num_rows" docs="sybase_num_rows() returns the number of rows in a result set." ilk="function" signature="int sybase_num_rows ( resource $result )" returns="int"/>
      <scope name="sybase_pconnect" docs="sybase_pconnect() acts very much like sybase_connect() with two major differences." ilk="function" signature="resource sybase_pconnect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]] )" returns="resource"/>
      <scope name="sybase_query" docs="sybase_query() sends a query to the currently active database on the server that&amp;#039;s associated with the specified link identifier." ilk="function" signature="mixed sybase_query ( string $query [, resource $link_identifier ] )" returns="mixed"/>
      <scope name="sybase_result" docs="Returns the contents of the cell at the row and offset in the specified Sybase result set." ilk="function" signature="string sybase_result ( resource $result , int $row , mixed $field )" returns="string"/>
      <scope name="sybase_select_db" docs="sybase_select_db() sets the current active database on the server that&amp;#039;s associated with the specified link identifier." ilk="function" signature="bool sybase_select_db ( string $database_name [, resource $link_identifier ] )" returns="bool"/>
      <scope name="sybase_set_message_handler" docs="sybase_set_message_handler() sets a user function to handle messages generated by the server. You may specify the name of a global function, or use an array to specify an object reference and a method name." ilk="function" signature="bool sybase_set_message_handler ( callback $handler [, resource $connection ] )" returns="bool"/>
      <scope name="sybase_unbuffered_query" docs="sybase_unbuffered_query() sends a query to the currently active database on the server that&amp;#039;s associated with the specified link identifier. If the link identifier isn&amp;#039;t specified, the last opened link is assumed. If no link is open, the function tries to establish a link as if sybase_connect() was called, and use it." ilk="function" signature="resource sybase_unbuffered_query ( string $query , resource $link_identifier [, bool $store_result ] )" returns="resource"/>
      <scope name="symlink" docs="symlink() creates a symbolic link to the existing target with the specified name link." ilk="function" signature="bool symlink ( string $target , string $link )" returns="bool"/>
      <scope name="syslog" docs="syslog() generates a log message that will be distributed by the system logger." ilk="function" signature="bool syslog ( int $priority , string $message )" returns="bool"/>
      <scope name="system" docs="system() is just like the C version of the function in that it executes the given command and outputs the result." ilk="function" signature="string system ( string $command [, int &amp;$return_var ] )" returns="string"/>
      <scope name="tan" docs="tan() returns the tangent of the arg parameter. The arg parameter is in radians." ilk="function" signature="float tan ( float $arg )" returns="float"/>
      <scope name="tanh" docs="Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg)." ilk="function" signature="float tanh ( float $arg )" returns="float"/>
      <scope name="tempnam" docs="Creates a file with a unique filename, with access permission set to 0600, in the specified directory. If the directory does not exist, tempnam() may generate a file in the system&amp;#039;s temporary directory, and return the name of that." ilk="function" signature="string tempnam ( string $dir , string $prefix )" returns="string"/>
      <scope name="textdomain" docs="This function sets the domain to search within when calls are made to gettext(), usually the named after an application." ilk="function" signature="string textdomain ( string $text_domain )" returns="string"/>
      <scope name="time" docs="Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)." ilk="function" signature="int time ( void )" returns="int"/>
      <scope name="tmpfile" docs="Creates a temporary file with a unique name in read-write (w+) mode and returns a file handle ." ilk="function" signature="resource tmpfile ( void )" returns="resource"/>
      <scope name="token_get_all" docs="token_get_all() parses the given source string into PHP language tokens using the Zend engine&amp;#039;s lexical scanner." ilk="function" signature="array token_get_all ( string $source )" returns="array"/>
      <scope name="token_name" docs="token_name() gets the symbolic name for a PHP token value." ilk="function" signature="string token_name ( int $token )" returns="string"/>
      <scope name="touch" docs="Attempts to set the access and modification times of the file named in the filename parameter to the value given in time. Note that the access time is always modified, regardless of the number of parameters." ilk="function" signature="bool touch ( string $filename [, int $time [, int $atime ]] )" returns="bool"/>
      <scope name="trigger_error" docs="Used to trigger a user error condition, it can be used by in conjunction with the built-in error handler, or with a user defined function that has been set as the new error handler (set_error_handler())." ilk="function" signature="bool trigger_error ( string $error_msg [, int $error_type ] )" returns="bool"/>
      <scope name="uasort" docs="This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant. The comparison function is user-defined." ilk="function" signature="bool uasort ( array &amp;$array , callback $cmp_function )" returns="bool"/>
      <scope name="ucfirst" docs="Returns a string with the first character of str capitalized, if that character is alphabetic." ilk="function" signature="string ucfirst ( string $str )" returns="string"/>
      <scope name="ucwords" docs="Returns a string with the first character of each word in str capitalized, if that character is alphabetic." ilk="function" signature="string ucwords ( string $str )" returns="string"/>
      <scope name="udm_add_search_limit" docs="udm_add_search_limit() adds search restrictions." ilk="function" signature="bool udm_add_search_limit ( resource $agent , int $var , string $val )" returns="bool"/>
      <scope name="udm_alloc_agent_array" docs="udm_alloc_agent_array() will create an agent with multiple database connections." ilk="function" signature="resource udm_alloc_agent_array ( array $databases )" returns="resource"/>
      <scope name="udm_alloc_agent" docs="Allocate a mnoGoSearch session." ilk="function" signature="resource udm_alloc_agent ( string $dbaddr [, string $dbmode ] )" returns="resource"/>
      <scope name="udm_api_version" docs="Gets the mnoGoSearch API version." ilk="function" signature="int udm_api_version ( void )" returns="int"/>
      <scope name="udm_cat_list" docs="Gets all the categories on the same level with the current one." ilk="function" signature="array udm_cat_list ( resource $agent , string $category )" returns="array"/>
      <scope name="udm_cat_path" docs="Returns an array describing the path in the categories tree from the tree root to the current one, specified by category." ilk="function" signature="array udm_cat_path ( resource $agent , string $category )" returns="array"/>
      <scope name="udm_check_charset" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="bool udm_check_charset ( resource $agent , string $charset )" returns="bool"/>
      <scope name="udm_check_stored" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="int udm_check_stored ( resource $agent , int $link , string $doc_id )" returns="int"/>
      <scope name="udm_clear_search_limits" docs="udm_clear_search_limits() resets defined search limitations." ilk="function" signature="bool udm_clear_search_limits ( resource $agent )" returns="bool"/>
      <scope name="udm_close_stored" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="int udm_close_stored ( resource $agent , int $link )" returns="int"/>
      <scope name="udm_crc32" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="int udm_crc32 ( resource $agent , string $str )" returns="int"/>
      <scope name="udm_errno" docs="Receiving numeric agent error code." ilk="function" signature="int udm_errno ( resource $agent )" returns="int"/>
      <scope name="udm_error" docs="Gets the agent error message." ilk="function" signature="string udm_error ( resource $agent )" returns="string"/>
      <scope name="udm_find" docs="Performs a search." ilk="function" signature="resource udm_find ( resource $agent , string $query )" returns="resource"/>
      <scope name="udm_free_agent" docs="Freeing up memory allocated for agent session." ilk="function" signature="int udm_free_agent ( resource $agent )" returns="int"/>
      <scope name="udm_free_ispell_data" docs="Frees the memory allocated for ispell data." ilk="function" signature="bool udm_free_ispell_data ( int $agent )" returns="bool"/>
      <scope name="udm_free_res" docs="Freeing up memory allocated for results." ilk="function" signature="bool udm_free_res ( resource $res )" returns="bool"/>
      <scope name="udm_get_doc_count" docs="udm_get_doc_count() returns the number of documents in the database." ilk="function" signature="int udm_get_doc_count ( resource $agent )" returns="int"/>
      <scope name="udm_get_res_field" docs="Fetch a mnoGoSearch result field." ilk="function" signature="string udm_get_res_field ( resource $res , int $row , int $field )" returns="string"/>
      <scope name="udm_get_res_param" docs="Gets the mnoGoSearch result parameters." ilk="function" signature="string udm_get_res_param ( resource $res , int $param )" returns="string"/>
      <scope name="udm_hash32" docs="udm_hash32() will take a string str and return a quite unique 32-bit hash number from it." ilk="function" signature="int udm_hash32 ( resource $agent , string $str )" returns="int"/>
      <scope name="udm_load_ispell_data" docs="udm_load_ispell_data() loads ispell data." ilk="function" signature="bool udm_load_ispell_data ( resource $agent , int $var , string $val1 , string $val2 , int $flag )" returns="bool"/>
      <scope name="udm_open_stored" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="int udm_open_stored ( resource $agent , string $storedaddr )" returns="int"/>
      <scope name="udm_set_agent_param" docs="Defines mnoGoSearch session parameters." ilk="function" signature="bool udm_set_agent_param ( resource $agent , int $var , string $val )" returns="bool"/>
      <scope name="uksort" docs="uksort() will sort the keys of an array using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function." ilk="function" signature="bool uksort ( array &amp;$array , callback $cmp_function )" returns="bool"/>
      <scope name="umask" docs="umask() sets PHP&amp;#039;s umask to mask &amp;amp; 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished." ilk="function" signature="int umask ([ int $mask ] )" returns="int"/>
      <scope name="uniqid" docs="Gets a prefixed unique identifier based on the current time in microseconds." ilk="function" signature="string uniqid ([ string $prefix [, bool $more_entropy ]] )" returns="string"/>
      <scope name="unixtojd" docs="Return the Julian Day for a Unix timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given." ilk="function" signature="int unixtojd ([ int $timestamp ] )" returns="int"/>
      <scope name="unlink" docs="Deletes filename. Similar to the Unix C unlink() function." ilk="function" signature="bool unlink ( string $filename [, resource $context ] )" returns="bool"/>
      <scope name="unpack" docs="Unpacks from a binary string into an array according to the given format." ilk="function" signature="array unpack ( string $format , string $data )" returns="array"/>
      <scope name="unregister_tick_function" docs="function_name The function name, as a string." ilk="function" signature="void unregister_tick_function ( string $function_name )" returns="void"/>
      <scope name="unserialize" docs="str The serialized string." ilk="function" signature="mixed unserialize ( string $str )" returns="mixed"/>
      <scope name="urldecode" docs="Decodes any %## encoding in the given string." ilk="function" signature="string urldecode ( string $str )" returns="string"/>
      <scope name="urlencode" docs="This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page." ilk="function" signature="string urlencode ( string $str )" returns="string"/>
      <scope name="user_error" docs="Undocumented function." ilk="function" signature="user_error()"/>
      <scope name="usleep" docs="Delays program execution for the given number of micro seconds." ilk="function" signature="void usleep ( int $micro_seconds )" returns="void"/>
      <scope name="usort" docs="This function will sort an array by its values using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function." ilk="function" signature="bool usort ( array &amp;$array , callback $cmp_function )" returns="bool"/>
      <scope name="utf8_decode" docs="This function decodes data, assumed to be UTF-8 encoded, to ISO-8859-1." ilk="function" signature="string utf8_decode ( string $data )" returns="string"/>
      <scope name="utf8_encode" docs="This function encodes the string data to UTF-8, and returns the encoded version. UTF-8 is a standard mechanism used by Unicode for encoding wide character values into a byte stream. UTF-8 is transparent to plain ASCII characters, is self-synchronized (meaning it is possible for a program to figure out where in the bytestream characters start) and can be used with normal string comparison functions for sorting and such. PHP encodes UTF-8 characters in up to four bytes, like this: UTF-8 encoding bytes bits representation 1 7 0bbbbbbb 2 11 110bbbbb 10bbbbbb 3 16 1110bbbb 10bbbbbb 10bbbbbb 4 21 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb Each b represents a bit that can be used to store character data." ilk="function" signature="string utf8_encode ( string $data )" returns="string"/>
      <scope name="var_dump" docs="expression The variable you want to export." ilk="function" signature="void var_dump ( mixed $expression [, mixed $expression [, $... ]] )" returns="void"/>
      <scope name="var_export" docs="expression The variable you want to export." ilk="function" signature="mixed var_export ( mixed $expression [, bool $return ] )" returns="mixed"/>
      <scope name="version_compare" docs="version_compare() compares two &amp;quot;PHP-standardized&amp;quot; version number strings. This is useful if you would like to write programs working only on some versions of PHP." ilk="function" signature="mixed version_compare ( string $version1 , string $version2 [, string $operator ] )" returns="mixed"/>
      <scope name="virtual" docs="virtual() is an Apache-specific function which is similar to &amp;lt;!--#include virtual...--&amp;gt; in mod_include. It performs an Apache sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you would parse through Apache. Note that for a CGI script, the script must generate valid CGI headers. At the minimum that means it must generate a Content-type header." ilk="function" signature="bool virtual ( string $filename )" returns="bool"/>
      <scope name="vprintf" docs="Display array values as a formatted string according to format (which is described in the documentation for sprintf())." ilk="function" signature="int vprintf ( string $format , array $args )" returns="int"/>
      <scope name="vsprintf" docs="Operates as sprintf() but accepts an array of arguments, rather than a variable number of arguments." ilk="function" signature="string vsprintf ( string $format , array $args )" returns="string"/>
      <scope name="wddx_add_vars" docs="Serializes the passed variables and add the result to the fiven packet." ilk="function" signature="bool wddx_add_vars ( resource $packet_id , mixed $var_name [, mixed $... ] )" returns="bool"/>
      <scope name="wddx_deserialize" docs="Undocumented function." ilk="function" signature="wddx_deserialize()"/>
      <scope name="wddx_packet_end" docs="Ends and returns the given WDDX packet." ilk="function" signature="string wddx_packet_end ( resource $packet_id )" returns="string"/>
      <scope name="wddx_packet_start" docs="Start a new WDDX packet for incremental addition of variables. It automatically creates a structure definition inside the packet to contain the variables." ilk="function" signature="resource wddx_packet_start ([ string $comment ] )" returns="resource"/>
      <scope name="wddx_serialize_value" docs="Creates a WDDX packet from a single given value." ilk="function" signature="string wddx_serialize_value ( mixed $var [, string $comment ] )" returns="string"/>
      <scope name="wddx_serialize_vars" docs="Creates a WDDX packet with a structure that contains the serialized representation of the passed variables." ilk="function" signature="string wddx_serialize_vars ( mixed $var_name [, mixed $... ] )" returns="string"/>
      <scope name="wordwrap" docs="Wraps a string to a given number of characters using a string break character." ilk="function" signature="string wordwrap ( string $str [, int $width [, string $break [, bool $cut ]]] )" returns="string"/>
      <scope name="xml_error_string" docs="Gets the XML parser error string associated with the given code." ilk="function" signature="string xml_error_string ( int $code )" returns="string"/>
      <scope name="xml_get_current_byte_index" docs="Gets the current byte index of the given XML parser." ilk="function" signature="int xml_get_current_byte_index ( resource $parser )" returns="int"/>
      <scope name="xml_get_current_column_number" docs="Gets the current column number of the given XML parser." ilk="function" signature="int xml_get_current_column_number ( resource $parser )" returns="int"/>
      <scope name="xml_get_current_line_number" docs="Gets the current line number for the given XML parser." ilk="function" signature="int xml_get_current_line_number ( resource $parser )" returns="int"/>
      <scope name="xml_get_error_code" docs="Gets the XML parser error code." ilk="function" signature="int xml_get_error_code ( resource $parser )" returns="int"/>
      <scope name="xml_parse_into_struct" docs="This function parses an XML file into 2 parallel array structures, one (index) containing pointers to the location of the appropriate values in the values array. These last two parameters must be passed by reference." ilk="function" signature="int xml_parse_into_struct ( resource $parser , string $data , array &amp;$values [, array &amp;$index ] )" returns="int"/>
      <scope name="xml_parse" docs="xml_parse() parses an XML document. The handlers for the configured events are called as many times as necessary." ilk="function" signature="int xml_parse ( resource $parser , string $data [, bool $is_final ] )" returns="int"/>
      <scope name="xml_parser_create_ns" docs="xml_parser_create_ns() creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions." ilk="function" signature="resource xml_parser_create_ns ([ string $encoding [, string $separator ]] )" returns="resource"/>
      <scope name="xml_parser_create" docs="xml_parser_create() creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions." ilk="function" signature="resource xml_parser_create ([ string $encoding ] )" returns="resource"/>
      <scope name="xml_parser_free" docs="Frees the given XML parser." ilk="function" signature="bool xml_parser_free ( resource $parser )" returns="bool"/>
      <scope name="xml_parser_get_option" docs="Gets an option value from an XML parser." ilk="function" signature="mixed xml_parser_get_option ( resource $parser , int $option )" returns="mixed"/>
      <scope name="xml_parser_set_option" docs="Sets an option in an XML parser." ilk="function" signature="bool xml_parser_set_option ( resource $parser , int $option , mixed $value )" returns="bool"/>
      <scope name="xml_set_character_data_handler" docs="Sets the character data handler function for the XML parser parser." ilk="function" signature="bool xml_set_character_data_handler ( resource $parser , callback $handler )" returns="bool"/>
      <scope name="xml_set_default_handler" docs="Sets the default handler function for the XML parser parser." ilk="function" signature="bool xml_set_default_handler ( resource $parser , callback $handler )" returns="bool"/>
      <scope name="xml_set_element_handler" docs="Sets the element handler functions for the XML parser. start_element_handler and end_element_handler are strings containing the names of functions that must exist when xml_parse() is called for parser." ilk="function" signature="bool xml_set_element_handler ( resource $parser , callback $start_element_handler , callback $end_element_handler )" returns="bool"/>
      <scope name="xml_set_end_namespace_decl_handler" docs="Returns TRUE on success or FALSE on failure." ilk="function" signature="bool xml_set_end_namespace_decl_handler ( resource $parser , callback $handler )" returns="bool"/>
      <scope name="xml_set_external_entity_ref_handler" docs="Sets the external entity reference handler function for the XML parser parser." ilk="function" signature="bool xml_set_external_entity_ref_handler ( resource $parser , callback $handler )" returns="bool"/>
      <scope name="xml_set_notation_decl_handler" docs="Sets the notation declaration handler function for the XML parser parser." ilk="function" signature="bool xml_set_notation_decl_handler ( resource $parser , callback $handler )" returns="bool"/>
      <scope name="xml_set_object" docs="This function allows to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object." ilk="function" signature="bool xml_set_object ( resource $parser , object &amp;$object )" returns="bool"/>
      <scope name="xml_set_processing_instruction_handler" docs="Sets the processing instruction (PI) handler function for the XML parser parser." ilk="function" signature="bool xml_set_processing_instruction_handler ( resource $parser , callback $handler )" returns="bool"/>
      <scope name="xml_set_start_namespace_decl_handler" docs="Returns TRUE on success or FALSE on failure." ilk="function" signature="bool xml_set_start_namespace_decl_handler ( resource $parser , callback $handler )" returns="bool"/>
      <scope name="xml_set_unparsed_entity_decl_handler" docs="Sets the unparsed entity declaration handler function for the XML parser parser." ilk="function" signature="bool xml_set_unparsed_entity_decl_handler ( resource $parser , callback $handler )" returns="bool"/>
      <scope name="xmlrpc_decode_request" docs="Undocumented function." ilk="function" signature="mixed xmlrpc_decode_request ( string $xml , string &amp;$method [, string $encoding ] )" returns="mixed"/>
      <scope name="xmlrpc_decode" docs="xml XML response returned by XMLRPC method." ilk="function" signature="mixed xmlrpc_decode ( string $xml [, string $encoding ] )" returns="mixed"/>
      <scope name="xmlrpc_encode_request" docs="method Name of the method to call." ilk="function" signature="string xmlrpc_encode_request ( string $method , mixed $params [, array $output_options ] )" returns="string"/>
      <scope name="xmlrpc_encode" docs="Undocumented function." ilk="function" signature="string xmlrpc_encode ( mixed $value )" returns="string"/>
      <scope name="xmlrpc_get_type" docs="This function is especially useful for base64 and datetime strings." ilk="function" signature="string xmlrpc_get_type ( mixed $value )" returns="string"/>
      <scope name="xmlrpc_is_fault" docs="arg Array returned by xmlrpc_decode()." ilk="function" signature="bool xmlrpc_is_fault ( array $arg )" returns="bool"/>
      <scope name="xmlrpc_parse_method_descriptions" docs="Undocumented function." ilk="function" signature="array xmlrpc_parse_method_descriptions ( string $xml )" returns="array"/>
      <scope name="xmlrpc_server_add_introspection_data" docs="Undocumented function." ilk="function" signature="int xmlrpc_server_add_introspection_data ( resource $server , array $desc )" returns="int"/>
      <scope name="xmlrpc_server_call_method" docs="Undocumented function." ilk="function" signature="string xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data [, array $output_options ] )" returns="string"/>
      <scope name="xmlrpc_server_create" docs="Undocumented function." ilk="function" signature="resource xmlrpc_server_create ( void )" returns="resource"/>
      <scope name="xmlrpc_server_destroy" docs="Undocumented function." ilk="function" signature="int xmlrpc_server_destroy ( resource $server )" returns="int"/>
      <scope name="xmlrpc_server_register_introspection_callback" docs="Undocumented function." ilk="function" signature="bool xmlrpc_server_register_introspection_callback ( resource $server , string $function )" returns="bool"/>
      <scope name="xmlrpc_server_register_method" docs="Undocumented function." ilk="function" signature="bool xmlrpc_server_register_method ( resource $server , string $method_name , string $function )" returns="bool"/>
      <scope name="xmlrpc_set_type" docs="value Value to set the type" ilk="function" signature="bool xmlrpc_set_type ( string &amp;$value , string $type )" returns="bool"/>
      <scope name="xpath_eval_expression" docs="Example#1 xpath_eval_expression() Example" ilk="function" signature="XPathObject xpath_eval_expression ( string $expression [, domnode $contextnode ] )" returns="XPathObject"/>
      <scope name="xpath_eval" docs="The optional contextnode can be specified for doing relative XPath queries." ilk="function" signature="XPathObject xpath_eval ( string $xpath_expression [, domnode $contextnode ] )" returns="XPathObject"/>
      <scope name="xpath_new_context" docs="" ilk="function" signature="XPathContext xpath_new_context ( domdocument $dom_document )" returns="XPathContext"/>
      <scope name="xpath_register_ns" docs="Returns TRUE on success or FALSE on failure." ilk="function" signature="bool xpath_register_ns ( XPathContext $xpath_context , string $prefix , string $uri )" returns="bool"/>
      <scope name="xptr_eval" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="int xptr_eval ( string $eval_str [, domnode $contextnode ] )" returns="int"/>
      <scope name="xptr_new_context" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="XPathContext xptr_new_context ( void )" returns="XPathContext"/>
      <scope name="xslt_backend_info" docs="xslt_backend_info() gets information about the compilation settings of the backend." ilk="function" signature="string xslt_backend_info ( void )" returns="string"/>
      <scope name="xslt_backend_name" docs="xslt_backend_name() gets the name of the backend." ilk="function" signature="string xslt_backend_name ( void )" returns="string"/>
      <scope name="xslt_backend_version" docs="xslt_backend_version() gets the version number of Sablotron." ilk="function" signature="string xslt_backend_version ( void )" returns="string"/>
      <scope name="xslt_create" docs="Create and return a new XSLT processor resource for manipulation by the other XSLT functions." ilk="function" signature="resource xslt_create ( void )" returns="resource"/>
      <scope name="xslt_errno" docs="Returns an error code describing the last error that occurred on the passed XSLT processor." ilk="function" signature="int xslt_errno ( resource $xh )" returns="int"/>
      <scope name="xslt_error" docs="Returns a string describing the last error that occurred on the passed XSLT processor." ilk="function" signature="string xslt_error ( resource $xh )" returns="string"/>
      <scope name="xslt_free" docs="Free the XSLT processor identified by the given handle." ilk="function" signature="void xslt_free ( resource $xh )" returns="void"/>
      <scope name="xslt_getopt" docs="xslt_getopt() returns the options on the given processor." ilk="function" signature="int xslt_getopt ( resource $processor )" returns="int"/>
      <scope name="xslt_process" docs="The xslt_process() function is the crux of the XSLT extension. It allows you to perform an XSLT transformation using almost any type of input source - the containers. This is accomplished through the use of argument buffers -- a concept taken from the Sablotron XSLT processor (currently the only XSLT processor this extension supports). The input containers default to a filename &amp;#039;containing&amp;#039; the document to be processed." ilk="function" signature="mixed xslt_process ( resource $xh , string $xmlcontainer , string $xslcontainer [, string $resultcontainer [, array $arguments [, array $parameters ]]] )" returns="mixed"/>
      <scope name="xslt_set_base" docs="Sets the base URI for all XSLT transformations, the base URI is used with Xpath instructions to resolve document() and other commands which access external resources. It is also used to resolve URIs for the &amp;lt;xsl:include&amp;gt; and &amp;lt;xsl:import&amp;gt; elements." ilk="function" signature="void xslt_set_base ( resource $xh , string $uri )" returns="void"/>
      <scope name="xslt_set_encoding" docs="Set the output encoding for the XSLT transformations. When using the Sablotron backend, this option is only available when you compile Sablotron with encoding support." ilk="function" signature="void xslt_set_encoding ( resource $xh , string $encoding )" returns="void"/>
      <scope name="xslt_set_error_handler" docs="Set an error handler function for the XSLT processor given by xh, this function will be called whenever an error occurs in the XSLT transformation (this function is also called for notices)." ilk="function" signature="void xslt_set_error_handler ( resource $xh , mixed $handler )" returns="void"/>
      <scope name="xslt_set_log" docs="This function allows you to set the file in which you want XSLT log messages to, XSLT log messages are different than error messages, in that log messages are not actually error messages but rather messages related to the state of the XSLT processor. They are useful for debugging XSLT, when something goes wrong." ilk="function" signature="void xslt_set_log ( resource $xh [, mixed $log ] )" returns="void"/>
      <scope name="xslt_set_object" docs="This function allows to use the processor inside an object and to resolve all callback functions in it." ilk="function" signature="bool xslt_set_object ( resource $processor , object &amp;$obj )" returns="bool"/>
      <scope name="xslt_set_sax_handlers" docs="xslt_set_sax_handlers() registers the SAX handlers for the document, given a XSLT processor resource." ilk="function" signature="void xslt_set_sax_handlers ( resource $processor , array $handlers )" returns="void"/>
      <scope name="xslt_set_scheme_handlers" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="void xslt_set_scheme_handlers ( resource $processor , array $handlers )" returns="void"/>
      <scope name="xslt_setopt" docs="xslt_setopt() sets the options specified by newmask on the given processor." ilk="function" signature="mixed xslt_setopt ( resource $processor , int $newmask )" returns="mixed"/>
      <scope name="yaz_addinfo" docs="Returns additional error information for the last request on the server." ilk="function" signature="string yaz_addinfo ( resource $id )" returns="string"/>
      <scope name="yaz_ccl_conf" docs="This function configures the CCL query parser for a server with definitions of access points (CCL qualifiers) and their mapping to RPN." ilk="function" signature="void yaz_ccl_conf ( resource $id , array $config )" returns="void"/>
      <scope name="yaz_ccl_parse" docs="This function invokes a CCL parser. It converts a given CCL FIND query to an RPN query which may be passed to the yaz_search() function to perform a search." ilk="function" signature="bool yaz_ccl_parse ( resource $id , string $query , array &amp;$result )" returns="bool"/>
      <scope name="yaz_close" docs="Closes the connection given by parameter id." ilk="function" signature="bool yaz_close ( resource $id )" returns="bool"/>
      <scope name="yaz_connect" docs="This function returns a connection resource on success, zero on failure." ilk="function" signature="mixed yaz_connect ( string $zurl [, mixed $options ] )" returns="mixed"/>
      <scope name="yaz_database" docs="This function allows you to change databases within a session by specifying one or more databases to be used in search, retrieval, etc. - overriding databases specified in call to yaz_connect()." ilk="function" signature="bool yaz_database ( resource $id , string $databases )" returns="bool"/>
      <scope name="yaz_element" docs="This function sets the element set name for retrieval." ilk="function" signature="bool yaz_element ( resource $id , string $elementset )" returns="bool"/>
      <scope name="yaz_errno" docs="Returns an error number for the server (last request) identified by id." ilk="function" signature="int yaz_errno ( resource $id )" returns="int"/>
      <scope name="yaz_error" docs="yaz_error() returns an English text message corresponding to the last error number as returned by yaz_errno()." ilk="function" signature="string yaz_error ( resource $id )" returns="string"/>
      <scope name="yaz_es_result" docs="This function inspects the last returned Extended Service result from a server. An Extended Service is initiated by either yaz_item_order() or yaz_es()." ilk="function" signature="array yaz_es_result ( resource $id )" returns="array"/>
      <scope name="yaz_hits" docs="yaz_hits() returns the number of hits for the last search." ilk="function" signature="int yaz_hits ( resource $id [, array &amp;$searchresult ] )" returns="int"/>
      <scope name="yaz_itemorder" docs="This function prepares for an Extended Services request using the Profile for the Use of Z39.50 Item Order Extended Service to Transport ILL (Profile/1). See &amp;raquo; this and the &amp;raquo; specification." ilk="function" signature="void yaz_itemorder ( resource $id , array $args )" returns="void"/>
      <scope name="yaz_present" docs="This function prepares for retrieval of records after a successful search." ilk="function" signature="bool yaz_present ( resource $id )" returns="bool"/>
      <scope name="yaz_range" docs="Specifies a range of records to retrieve." ilk="function" signature="void yaz_range ( resource $id , int $start , int $number )" returns="void"/>
      <scope name="yaz_record" docs="The yaz_record() function inspects a record in the current result set at the position specified by parameter pos." ilk="function" signature="string yaz_record ( resource $id , int $pos , string $type )" returns="string"/>
      <scope name="yaz_scan_result" docs="yaz_scan_result() returns terms and associated information as received from the server in the last performed yaz_scan()." ilk="function" signature="array yaz_scan_result ( resource $id [, array &amp;$result ] )" returns="array"/>
      <scope name="yaz_scan" docs="This function prepares for a Z39.50 Scan Request on the specified connection." ilk="function" signature="void yaz_scan ( resource $id , string $type , string $startterm [, array $flags ] )" returns="void"/>
      <scope name="yaz_schema" docs="yaz_schema() specifies the schema for retrieval." ilk="function" signature="void yaz_schema ( resource $id , string $schema )" returns="void"/>
      <scope name="yaz_search" docs="yaz_search() prepares for a search on the given connection." ilk="function" signature="bool yaz_search ( resource $id , string $type , string $query )" returns="bool"/>
      <scope name="yaz_sort" docs="This function sets sorting criteria and enables Z39.50 Sort." ilk="function" signature="void yaz_sort ( resource $id , string $criteria )" returns="void"/>
      <scope name="yaz_syntax" docs="yaz_syntax() specifies the preferred record syntax for retrieval" ilk="function" signature="void yaz_syntax ( resource $id , string $syntax )" returns="void"/>
      <scope name="yaz_wait" docs="This function carries out networked (blocked) activity for outstanding requests which have been prepared by the functions yaz_connect(), yaz_search(), yaz_present(), yaz_scan() and yaz_itemorder()." ilk="function" signature="mixed yaz_wait ([ array &amp;$options ] )" returns="mixed"/>
      <scope name="yp_all" docs="WarningThis function iscurrently not documented; only the argument list isavailable." ilk="function" signature="void yp_all ( string $domain , string $map , string $callback )" returns="void"/>
      <scope name="yp_cat" docs="Returns all map entries." ilk="function" signature="array yp_cat ( string $domain , string $map )" returns="array"/>
      <scope name="yp_err_string" docs="Returns the error message associated with the given error code. Useful to indicate what exactly went wrong." ilk="function" signature="string yp_err_string ( int $errorcode )" returns="string"/>
      <scope name="yp_errno" docs="Returns the error code of the previous operation." ilk="function" signature="int yp_errno ( void )" returns="int"/>
      <scope name="yp_first" docs="Gets the first key-value pair from the named map in the named domain." ilk="function" signature="array yp_first ( string $domain , string $map )" returns="array"/>
      <scope name="yp_get_default_domain" docs="Returns the default domain of the node. Can be used as the domain parameter for successive NIS calls." ilk="function" signature="string yp_get_default_domain ( void )" returns="string"/>
      <scope name="yp_master" docs="Returns the machine name of the master NIS server for a map." ilk="function" signature="string yp_master ( string $domain , string $map )" returns="string"/>
      <scope name="yp_match" docs="Returns the value associated with the passed key out of the specified map." ilk="function" signature="string yp_match ( string $domain , string $map , string $key )" returns="string"/>
      <scope name="yp_next" docs="Returns the next key-value pair in the named map after the specified key." ilk="function" signature="array yp_next ( string $domain , string $map , string $key )" returns="array"/>
      <scope name="yp_order" docs="Gets the order number for a map." ilk="function" signature="int yp_order ( string $domain , string $map )" returns="int"/>
      <scope name="zend_logo_guid" docs="This function returns the ID which can be used to display the Zend logo using the built-in image." ilk="function" signature="string zend_logo_guid ( void )" returns="string"/>
      <scope name="zend_version" docs="Returns a string containing the version of the currently running Zend Engine." ilk="function" signature="string zend_version ( void )" returns="string"/>
      <scope name="zip_close" docs="Closes the given ZIP file archive." ilk="function" signature="void zip_close ( resource $zip )" returns="void"/>
      <scope name="zip_entry_close" docs="Closes the specified directory entry." ilk="function" signature="bool zip_entry_close ( resource $zip_entry )" returns="bool"/>
      <scope name="zip_entry_compressedsize" docs="Returns the compressed size of the specified directory entry." ilk="function" signature="int zip_entry_compressedsize ( resource $zip_entry )" returns="int"/>
      <scope name="zip_entry_compressionmethod" docs="Returns the compression method of the directory entry specified by zip_entry." ilk="function" signature="string zip_entry_compressionmethod ( resource $zip_entry )" returns="string"/>
      <scope name="zip_entry_filesize" docs="Returns the actual size of the specified directory entry." ilk="function" signature="int zip_entry_filesize ( resource $zip_entry )" returns="int"/>
      <scope name="zip_entry_name" docs="Returns the name of the specified directory entry." ilk="function" signature="string zip_entry_name ( resource $zip_entry )" returns="string"/>
      <scope name="zip_entry_open" docs="Opens a directory entry in a zip file for reading." ilk="function" signature="bool zip_entry_open ( resource $zip , resource $zip_entry [, string $mode ] )" returns="bool"/>
      <scope name="zip_entry_read" docs="Reads from an open directory entry." ilk="function" signature="string zip_entry_read ( resource $zip_entry [, int $length ] )" returns="string"/>
      <scope name="zip_open" docs="Opens a new zip archive for reading." ilk="function" signature="mixed zip_open ( string $filename )" returns="mixed"/>
      <scope name="zip_read" docs="Reads the next entry in a zip file archive." ilk="function" signature="mixed zip_read ( resource $zip )" returns="mixed"/>
      <scope name="zlib_get_coding_type" docs="Returns the coding type used for output compression." ilk="function" signature="string zlib_get_coding_type ( void )" returns="string"/>
      <scope name="isset" signature="bool isset ( mixed var [, mixed var [, ...]] )" doc="Determine whether a variable is set" ilk="function"/>
      <scope name="empty" signature="bool empty ( mixed $var )" doc="Determine whether a variable is considered to be empty." ilk="function"/>
      <scope name="unset" signature="void unset ( mixed $var [, mixed $var [, mixed $...]] )" doc="unset() destroys the specified variables." ilk="function"/>
      <scope name="include" signature="include(file_path)" doc="includes and evaluates the specified file, produces a warning on error." ilk="function"/>
      <scope name="require" signature="require(file_path)" doc="includes and evaluates the specified file, produces a Fatal Error on error." ilk="function"/>
      <scope name="include_once" signature="include_once(file_path)" doc="includes and evaluates the specified file if it hasn't been included before, produces a warning on error." ilk="function"/>
      <scope name="require_once" signature="require_once(file_path)" doc="includes and evaluates the specified file if it hasn't been included before, produces a Fatal Error on error." ilk="function"/>
      <scope name="declare" signature="declare(directive)" doc="set execution directives for a block of code." ilk="function"/>
      <scope name="switch" signature="switch(var)" doc="evaluate a series of conditions on the same expression." ilk="function"/>
      <scope name="array" signature="array(&lt;list&gt;)" doc="create a PHP array." ilk="function"/>
      <variable ilk="constant" name="E_ERROR" citdl="integer"/>
      <variable ilk="constant" name="E_WARNING" citdl="integer"/>
      <variable ilk="constant" name="E_PARSE" citdl="integer"/>
      <variable ilk="constant" name="E_NOTICE" citdl="integer"/>
      <variable ilk="constant" name="E_CORE_ERROR" citdl="integer"/>
      <variable ilk="constant" name="E_CORE_WARNING" citdl="integer"/>
      <variable ilk="constant" name="E_COMPILE_ERROR" citdl="integer"/>
      <variable ilk="constant" name="E_COMPILE_WARNING" citdl="integer"/>
      <variable ilk="constant" name="E_USER_ERROR" citdl="integer"/>
      <variable ilk="constant" name="E_USER_WARNING" citdl="integer"/>
      <variable ilk="constant" name="E_USER_NOTICE" citdl="integer"/>
      <variable ilk="constant" name="E_ALL" citdl="integer"/>
      <variable ilk="constant" name="TRUE" citdl="boolean"/>
      <variable ilk="constant" name="FALSE" citdl="boolean"/>
      <variable ilk="constant" name="ZEND_THREAD_SAFE" citdl="boolean"/>
      <variable ilk="constant" name="NULL" citdl="NULL"/>
      <variable ilk="constant" name="PHP_VERSION" citdl="string"/>
      <variable ilk="constant" name="PHP_OS" citdl="string"/>
      <variable ilk="constant" name="PHP_SAPI" citdl="string"/>
      <variable ilk="constant" name="DEFAULT_INCLUDE_PATH" citdl="string"/>
      <variable ilk="constant" name="PEAR_INSTALL_DIR" citdl="string"/>
      <variable ilk="constant" name="PEAR_EXTENSION_DIR" citdl="string"/>
      <variable ilk="constant" name="PHP_EXTENSION_DIR" citdl="string"/>
      <variable ilk="constant" name="PHP_PREFIX" citdl="string"/>
      <variable ilk="constant" name="PHP_BINDIR" citdl="string"/>
      <variable ilk="constant" name="PHP_LIBDIR" citdl="string"/>
      <variable ilk="constant" name="PHP_DATADIR" citdl="string"/>
      <variable ilk="constant" name="PHP_SYSCONFDIR" citdl="string"/>
      <variable ilk="constant" name="PHP_LOCALSTATEDIR" citdl="string"/>
      <variable ilk="constant" name="PHP_CONFIG_FILE_PATH" citdl="string"/>
      <variable ilk="constant" name="PHP_CONFIG_FILE_SCAN_DIR" citdl="string"/>
      <variable ilk="constant" name="PHP_SHLIB_SUFFIX" citdl="string"/>
      <variable ilk="constant" name="PHP_EOL" citdl="string"/>
      <variable ilk="constant" name="PHP_OUTPUT_HANDLER_START" citdl="integer"/>
      <variable ilk="constant" name="PHP_OUTPUT_HANDLER_CONT" citdl="integer"/>
      <variable ilk="constant" name="PHP_OUTPUT_HANDLER_END" citdl="integer"/>
      <variable ilk="constant" name="UPLOAD_ERR_OK" citdl="integer"/>
      <variable ilk="constant" name="UPLOAD_ERR_INI_SIZE" citdl="integer"/>
      <variable ilk="constant" name="UPLOAD_ERR_FORM_SIZE" citdl="integer"/>
      <variable ilk="constant" name="UPLOAD_ERR_PARTIAL" citdl="integer"/>
      <variable ilk="constant" name="UPLOAD_ERR_NO_FILE" citdl="integer"/>
      <variable ilk="constant" name="UPLOAD_ERR_NO_TMP_DIR" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_NONE" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_NO_MEMORY" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_SYNTAX" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_NO_ELEMENTS" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_INVALID_TOKEN" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_UNCLOSED_TOKEN" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_PARTIAL_CHAR" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_TAG_MISMATCH" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_DUPLICATE_ATTRIBUTE" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_JUNK_AFTER_DOC_ELEMENT" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_PARAM_ENTITY_REF" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_UNDEFINED_ENTITY" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_RECURSIVE_ENTITY_REF" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_ASYNC_ENTITY" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_BAD_CHAR_REF" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_BINARY_ENTITY_REF" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_MISPLACED_XML_PI" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_UNKNOWN_ENCODING" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_INCORRECT_ENCODING" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_UNCLOSED_CDATA_SECTION" citdl="integer"/>
      <variable ilk="constant" name="XML_ERROR_EXTERNAL_ENTITY_HANDLING" citdl="integer"/>
      <variable ilk="constant" name="XML_OPTION_CASE_FOLDING" citdl="integer"/>
      <variable ilk="constant" name="XML_OPTION_TARGET_ENCODING" citdl="integer"/>
      <variable ilk="constant" name="XML_OPTION_SKIP_TAGSTART" citdl="integer"/>
      <variable ilk="constant" name="XML_OPTION_SKIP_WHITE" citdl="integer"/>
      <variable ilk="constant" name="T_INCLUDE" citdl="integer"/>
      <variable ilk="constant" name="T_INCLUDE_ONCE" citdl="integer"/>
      <variable ilk="constant" name="T_EVAL" citdl="integer"/>
      <variable ilk="constant" name="T_REQUIRE" citdl="integer"/>
      <variable ilk="constant" name="T_REQUIRE_ONCE" citdl="integer"/>
      <variable ilk="constant" name="T_LOGICAL_OR" citdl="integer"/>
      <variable ilk="constant" name="T_LOGICAL_XOR" citdl="integer"/>
      <variable ilk="constant" name="T_LOGICAL_AND" citdl="integer"/>
      <variable ilk="constant" name="T_PRINT" citdl="integer"/>
      <variable ilk="constant" name="T_PLUS_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_MINUS_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_MUL_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_DIV_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_CONCAT_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_MOD_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_AND_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_OR_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_XOR_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_SL_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_SR_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_BOOLEAN_OR" citdl="integer"/>
      <variable ilk="constant" name="T_BOOLEAN_AND" citdl="integer"/>
      <variable ilk="constant" name="T_IS_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_IS_NOT_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_IS_IDENTICAL" citdl="integer"/>
      <variable ilk="constant" name="T_IS_NOT_IDENTICAL" citdl="integer"/>
      <variable ilk="constant" name="T_IS_SMALLER_OR_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_IS_GREATER_OR_EQUAL" citdl="integer"/>
      <variable ilk="constant" name="T_SL" citdl="integer"/>
      <variable ilk="constant" name="T_SR" citdl="integer"/>
      <variable ilk="constant" name="T_INC" citdl="integer"/>
      <variable ilk="constant" name="T_DEC" citdl="integer"/>
      <variable ilk="constant" name="T_INT_CAST" citdl="integer"/>
      <variable ilk="constant" name="T_DOUBLE_CAST" citdl="integer"/>
      <variable ilk="constant" name="T_STRING_CAST" citdl="integer"/>
      <variable ilk="constant" name="T_ARRAY_CAST" citdl="integer"/>
      <variable ilk="constant" name="T_OBJECT_CAST" citdl="integer"/>
      <variable ilk="constant" name="T_BOOL_CAST" citdl="integer"/>
      <variable ilk="constant" name="T_UNSET_CAST" citdl="integer"/>
      <variable ilk="constant" name="T_NEW" citdl="integer"/>
      <variable ilk="constant" name="T_EXIT" citdl="integer"/>
      <variable ilk="constant" name="T_IF" citdl="integer"/>
      <variable ilk="constant" name="T_ELSEIF" citdl="integer"/>
      <variable ilk="constant" name="T_ELSE" citdl="integer"/>
      <variable ilk="constant" name="T_ENDIF" citdl="integer"/>
      <variable ilk="constant" name="T_LNUMBER" citdl="integer"/>
      <variable ilk="constant" name="T_DNUMBER" citdl="integer"/>
      <variable ilk="constant" name="T_STRING" citdl="integer"/>
      <variable ilk="constant" name="T_STRING_VARNAME" citdl="integer"/>
      <variable ilk="constant" name="T_VARIABLE" citdl="integer"/>
      <variable ilk="constant" name="T_NUM_STRING" citdl="integer"/>
      <variable ilk="constant" name="T_INLINE_HTML" citdl="integer"/>
      <variable ilk="constant" name="T_CHARACTER" citdl="integer"/>
      <variable ilk="constant" name="T_BAD_CHARACTER" citdl="integer"/>
      <variable ilk="constant" name="T_ENCAPSED_AND_WHITESPACE" citdl="integer"/>
      <variable ilk="constant" name="T_CONSTANT_ENCAPSED_STRING" citdl="integer"/>
      <variable ilk="constant" name="T_ECHO" citdl="integer"/>
      <variable ilk="constant" name="T_DO" citdl="integer"/>
      <variable ilk="constant" name="T_WHILE" citdl="integer"/>
      <variable ilk="constant" name="T_ENDWHILE" citdl="integer"/>
      <variable ilk="constant" name="T_FOR" citdl="integer"/>
      <variable ilk="constant" name="T_ENDFOR" citdl="integer"/>
      <variable ilk="constant" name="T_FOREACH" citdl="integer"/>
      <variable ilk="constant" name="T_ENDFOREACH" citdl="integer"/>
      <variable ilk="constant" name="T_DECLARE" citdl="integer"/>
      <variable ilk="constant" name="T_ENDDECLARE" citdl="integer"/>
      <variable ilk="constant" name="T_AS" citdl="integer"/>
      <variable ilk="constant" name="T_SWITCH" citdl="integer"/>
      <variable ilk="constant" name="T_ENDSWITCH" citdl="integer"/>
      <variable ilk="constant" name="T_CASE" citdl="integer"/>
      <variable ilk="constant" name="T_DEFAULT" citdl="integer"/>
      <variable ilk="constant" name="T_BREAK" citdl="integer"/>
      <variable ilk="constant" name="T_CONTINUE" citdl="integer"/>
      <variable ilk="constant" name="T_OLD_FUNCTION" citdl="integer"/>
      <variable ilk="constant" name="T_FUNCTION" citdl="integer"/>
      <variable ilk="constant" name="T_CONST" citdl="integer"/>
      <variable ilk="constant" name="T_RETURN" citdl="integer"/>
      <variable ilk="constant" name="T_USE" citdl="integer"/>
      <variable ilk="constant" name="T_GLOBAL" citdl="integer"/>
      <variable ilk="constant" name="T_STATIC" citdl="integer"/>
      <variable ilk="constant" name="T_VAR" citdl="integer"/>
      <variable ilk="constant" name="T_UNSET" citdl="integer"/>
      <variable ilk="constant" name="T_ISSET" citdl="integer"/>
      <variable ilk="constant" name="T_EMPTY" citdl="integer"/>
      <variable ilk="constant" name="T_CLASS" citdl="integer"/>
      <variable ilk="constant" name="T_EXTENDS" citdl="integer"/>
      <variable ilk="constant" name="T_OBJECT_OPERATOR" citdl="integer"/>
      <variable ilk="constant" name="T_DOUBLE_ARROW" citdl="integer"/>
      <variable ilk="constant" name="T_LIST" citdl="integer"/>
      <variable ilk="constant" name="T_ARRAY" citdl="integer"/>
      <variable ilk="constant" name="T_CLASS_C" citdl="integer"/>
      <variable ilk="constant" name="T_FUNC_C" citdl="integer"/>
      <variable ilk="constant" name="T_LINE" citdl="integer"/>
      <variable ilk="constant" name="T_FILE" citdl="integer"/>
      <variable ilk="constant" name="T_COMMENT" citdl="integer"/>
      <variable ilk="constant" name="T_ML_COMMENT" citdl="integer"/>
      <variable ilk="constant" name="T_OPEN_TAG" citdl="integer"/>
      <variable ilk="constant" name="T_OPEN_TAG_WITH_ECHO" citdl="integer"/>
      <variable ilk="constant" name="T_CLOSE_TAG" citdl="integer"/>
      <variable ilk="constant" name="T_WHITESPACE" citdl="integer"/>
      <variable ilk="constant" name="T_START_HEREDOC" citdl="integer"/>
      <variable ilk="constant" name="T_END_HEREDOC" citdl="integer"/>
      <variable ilk="constant" name="T_DOLLAR_OPEN_CURLY_BRACES" citdl="integer"/>
      <variable ilk="constant" name="T_CURLY_OPEN" citdl="integer"/>
      <variable ilk="constant" name="T_PAAMAYIM_NEKUDOTAYIM" citdl="integer"/>
      <variable ilk="constant" name="T_DOUBLE_COLON" citdl="integer"/>
      <variable ilk="constant" name="CONNECTION_ABORTED" citdl="integer"/>
      <variable ilk="constant" name="CONNECTION_NORMAL" citdl="integer"/>
      <variable ilk="constant" name="CONNECTION_TIMEOUT" citdl="integer"/>
      <variable ilk="constant" name="INI_USER" citdl="integer"/>
      <variable ilk="constant" name="INI_PERDIR" citdl="integer"/>
      <variable ilk="constant" name="INI_SYSTEM" citdl="integer"/>
      <variable ilk="constant" name="INI_ALL" citdl="integer"/>
      <variable ilk="constant" name="M_E" citdl="double"/>
      <variable ilk="constant" name="M_LOG2E" citdl="double"/>
      <variable ilk="constant" name="M_LOG10E" citdl="double"/>
      <variable ilk="constant" name="M_LN2" citdl="double"/>
      <variable ilk="constant" name="M_LN10" citdl="double"/>
      <variable ilk="constant" name="M_PI" citdl="double"/>
      <variable ilk="constant" name="M_PI_2" citdl="double"/>
      <variable ilk="constant" name="M_PI_4" citdl="double"/>
      <variable ilk="constant" name="M_1_PI" citdl="double"/>
      <variable ilk="constant" name="M_2_PI" citdl="double"/>
      <variable ilk="constant" name="M_2_SQRTPI" citdl="double"/>
      <variable ilk="constant" name="M_SQRT2" citdl="double"/>
      <variable ilk="constant" name="M_SQRT1_2" citdl="double"/>
      <variable ilk="constant" name="INF" citdl="double"/>
      <variable ilk="constant" name="NAN" citdl="double"/>
      <variable ilk="constant" name="INFO_GENERAL" citdl="integer"/>
      <variable ilk="constant" name="INFO_CREDITS" citdl="integer"/>
      <variable ilk="constant" name="INFO_CONFIGURATION" citdl="integer"/>
      <variable ilk="constant" name="INFO_MODULES" citdl="integer"/>
      <variable ilk="constant" name="INFO_ENVIRONMENT" citdl="integer"/>
      <variable ilk="constant" name="INFO_VARIABLES" citdl="integer"/>
      <variable ilk="constant" name="INFO_LICENSE" citdl="integer"/>
      <variable ilk="constant" name="INFO_ALL" citdl="integer"/>
      <variable ilk="constant" name="CREDITS_GROUP" citdl="integer"/>
      <variable ilk="constant" name="CREDITS_GENERAL" citdl="integer"/>
      <variable ilk="constant" name="CREDITS_SAPI" citdl="integer"/>
      <variable ilk="constant" name="CREDITS_MODULES" citdl="integer"/>
      <variable ilk="constant" name="CREDITS_DOCS" citdl="integer"/>
      <variable ilk="constant" name="CREDITS_FULLPAGE" citdl="integer"/>
      <variable ilk="constant" name="CREDITS_QA" citdl="integer"/>
      <variable ilk="constant" name="CREDITS_ALL" citdl="integer"/>
      <variable ilk="constant" name="HTML_SPECIALCHARS" citdl="integer"/>
      <variable ilk="constant" name="HTML_ENTITIES" citdl="integer"/>
      <variable ilk="constant" name="ENT_COMPAT" citdl="integer"/>
      <variable ilk="constant" name="ENT_QUOTES" citdl="integer"/>
      <variable ilk="constant" name="ENT_NOQUOTES" citdl="integer"/>
      <variable ilk="constant" name="STR_PAD_LEFT" citdl="integer"/>
      <variable ilk="constant" name="STR_PAD_RIGHT" citdl="integer"/>
      <variable ilk="constant" name="STR_PAD_BOTH" citdl="integer"/>
      <variable ilk="constant" name="PATHINFO_DIRNAME" citdl="integer"/>
      <variable ilk="constant" name="PATHINFO_BASENAME" citdl="integer"/>
      <variable ilk="constant" name="PATHINFO_EXTENSION" citdl="integer"/>
      <variable ilk="constant" name="CHAR_MAX" citdl="integer"/>
      <variable ilk="constant" name="LC_CTYPE" citdl="integer"/>
      <variable ilk="constant" name="LC_NUMERIC" citdl="integer"/>
      <variable ilk="constant" name="LC_TIME" citdl="integer"/>
      <variable ilk="constant" name="LC_COLLATE" citdl="integer"/>
      <variable ilk="constant" name="LC_MONETARY" citdl="integer"/>
      <variable ilk="constant" name="LC_ALL" citdl="integer"/>
      <variable ilk="constant" name="LC_MESSAGES" citdl="integer"/>
      <variable ilk="constant" name="SEEK_SET" citdl="integer"/>
      <variable ilk="constant" name="SEEK_CUR" citdl="integer"/>
      <variable ilk="constant" name="SEEK_END" citdl="integer"/>
      <variable ilk="constant" name="LOCK_SH" citdl="integer"/>
      <variable ilk="constant" name="LOCK_EX" citdl="integer"/>
      <variable ilk="constant" name="LOCK_UN" citdl="integer"/>
      <variable ilk="constant" name="LOCK_NB" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_CONNECT" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_AUTH_REQUIRED" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_AUTH_RESULT" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_MIME_TYPE_IS" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_FILE_SIZE_IS" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_REDIRECTED" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_PROGRESS" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_FAILURE" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_SEVERITY_INFO" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_SEVERITY_WARN" citdl="integer"/>
      <variable ilk="constant" name="STREAM_NOTIFY_SEVERITY_ERR" citdl="integer"/>
      <variable ilk="constant" name="FNM_NOESCAPE" citdl="integer"/>
      <variable ilk="constant" name="FNM_PATHNAME" citdl="integer"/>
      <variable ilk="constant" name="FNM_PERIOD" citdl="integer"/>
      <variable ilk="constant" name="FNM_CASEFOLD" citdl="integer"/>
      <variable ilk="constant" name="ABDAY_1" citdl="integer"/>
      <variable ilk="constant" name="ABDAY_2" citdl="integer"/>
      <variable ilk="constant" name="ABDAY_3" citdl="integer"/>
      <variable ilk="constant" name="ABDAY_4" citdl="integer"/>
      <variable ilk="constant" name="ABDAY_5" citdl="integer"/>
      <variable ilk="constant" name="ABDAY_6" citdl="integer"/>
      <variable ilk="constant" name="ABDAY_7" citdl="integer"/>
      <variable ilk="constant" name="DAY_1" citdl="integer"/>
      <variable ilk="constant" name="DAY_2" citdl="integer"/>
      <variable ilk="constant" name="DAY_3" citdl="integer"/>
      <variable ilk="constant" name="DAY_4" citdl="integer"/>
      <variable ilk="constant" name="DAY_5" citdl="integer"/>
      <variable ilk="constant" name="DAY_6" citdl="integer"/>
      <variable ilk="constant" name="DAY_7" citdl="integer"/>
      <variable ilk="constant" name="ABMON_1" citdl="integer"/>
      <variable ilk="constant" name="ABMON_2" citdl="integer"/>
      <variable ilk="constant" name="ABMON_3" citdl="integer"/>
      <variable ilk="constant" name="ABMON_4" citdl="integer"/>
      <variable ilk="constant" name="ABMON_5" citdl="integer"/>
      <variable ilk="constant" name="ABMON_6" citdl="integer"/>
      <variable ilk="constant" name="ABMON_7" citdl="integer"/>
      <variable ilk="constant" name="ABMON_8" citdl="integer"/>
      <variable ilk="constant" name="ABMON_9" citdl="integer"/>
      <variable ilk="constant" name="ABMON_10" citdl="integer"/>
      <variable ilk="constant" name="ABMON_11" citdl="integer"/>
      <variable ilk="constant" name="ABMON_12" citdl="integer"/>
      <variable ilk="constant" name="MON_1" citdl="integer"/>
      <variable ilk="constant" name="MON_2" citdl="integer"/>
      <variable ilk="constant" name="MON_3" citdl="integer"/>
      <variable ilk="constant" name="MON_4" citdl="integer"/>
      <variable ilk="constant" name="MON_5" citdl="integer"/>
      <variable ilk="constant" name="MON_6" citdl="integer"/>
      <variable ilk="constant" name="MON_7" citdl="integer"/>
      <variable ilk="constant" name="MON_8" citdl="integer"/>
      <variable ilk="constant" name="MON_9" citdl="integer"/>
      <variable ilk="constant" name="MON_10" citdl="integer"/>
      <variable ilk="constant" name="MON_11" citdl="integer"/>
      <variable ilk="constant" name="MON_12" citdl="integer"/>
      <variable ilk="constant" name="AM_STR" citdl="integer"/>
      <variable ilk="constant" name="PM_STR" citdl="integer"/>
      <variable ilk="constant" name="D_T_FMT" citdl="integer"/>
      <variable ilk="constant" name="D_FMT" citdl="integer"/>
      <variable ilk="constant" name="T_FMT" citdl="integer"/>
      <variable ilk="constant" name="T_FMT_AMPM" citdl="integer"/>
      <variable ilk="constant" name="ERA" citdl="integer"/>
      <variable ilk="constant" name="ERA_D_T_FMT" citdl="integer"/>
      <variable ilk="constant" name="ERA_D_FMT" citdl="integer"/>
      <variable ilk="constant" name="ERA_T_FMT" citdl="integer"/>
      <variable ilk="constant" name="ALT_DIGITS" citdl="integer"/>
      <variable ilk="constant" name="CRNCYSTR" citdl="integer"/>
      <variable ilk="constant" name="RADIXCHAR" citdl="integer"/>
      <variable ilk="constant" name="THOUSEP" citdl="integer"/>
      <variable ilk="constant" name="YESEXPR" citdl="integer"/>
      <variable ilk="constant" name="NOEXPR" citdl="integer"/>
      <variable ilk="constant" name="YESSTR" citdl="integer"/>
      <variable ilk="constant" name="NOSTR" citdl="integer"/>
      <variable ilk="constant" name="CODESET" citdl="integer"/>
      <variable ilk="constant" name="CRYPT_SALT_LENGTH" citdl="integer"/>
      <variable ilk="constant" name="CRYPT_STD_DES" citdl="integer"/>
      <variable ilk="constant" name="CRYPT_EXT_DES" citdl="integer"/>
      <variable ilk="constant" name="CRYPT_MD5" citdl="integer"/>
      <variable ilk="constant" name="CRYPT_BLOWFISH" citdl="integer"/>
      <variable ilk="constant" name="DIRECTORY_SEPARATOR" citdl="string"/>
      <variable ilk="constant" name="PATH_SEPARATOR" citdl="string"/>
      <variable ilk="constant" name="GLOB_BRACE" citdl="integer"/>
      <variable ilk="constant" name="GLOB_MARK" citdl="integer"/>
      <variable ilk="constant" name="GLOB_NOSORT" citdl="integer"/>
      <variable ilk="constant" name="GLOB_NOCHECK" citdl="integer"/>
      <variable ilk="constant" name="GLOB_NOESCAPE" citdl="integer"/>
      <variable ilk="constant" name="GLOB_ONLYDIR" citdl="integer"/>
      <variable ilk="constant" name="LOG_EMERG" citdl="integer"/>
      <variable ilk="constant" name="LOG_ALERT" citdl="integer"/>
      <variable ilk="constant" name="LOG_CRIT" citdl="integer"/>
      <variable ilk="constant" name="LOG_ERR" citdl="integer"/>
      <variable ilk="constant" name="LOG_WARNING" citdl="integer"/>
      <variable ilk="constant" name="LOG_NOTICE" citdl="integer"/>
      <variable ilk="constant" name="LOG_INFO" citdl="integer"/>
      <variable ilk="constant" name="LOG_DEBUG" citdl="integer"/>
      <variable ilk="constant" name="LOG_KERN" citdl="integer"/>
      <variable ilk="constant" name="LOG_USER" citdl="integer"/>
      <variable ilk="constant" name="LOG_MAIL" citdl="integer"/>
      <variable ilk="constant" name="LOG_DAEMON" citdl="integer"/>
      <variable ilk="constant" name="LOG_AUTH" citdl="integer"/>
      <variable ilk="constant" name="LOG_SYSLOG" citdl="integer"/>
      <variable ilk="constant" name="LOG_LPR" citdl="integer"/>
      <variable ilk="constant" name="LOG_NEWS" citdl="integer"/>
      <variable ilk="constant" name="LOG_UUCP" citdl="integer"/>
      <variable ilk="constant" name="LOG_CRON" citdl="integer"/>
      <variable ilk="constant" name="LOG_AUTHPRIV" citdl="integer"/>
      <variable ilk="constant" name="LOG_LOCAL0" citdl="integer"/>
      <variable ilk="constant" name="LOG_LOCAL1" citdl="integer"/>
      <variable ilk="constant" name="LOG_LOCAL2" citdl="integer"/>
      <variable ilk="constant" name="LOG_LOCAL3" citdl="integer"/>
      <variable ilk="constant" name="LOG_LOCAL4" citdl="integer"/>
      <variable ilk="constant" name="LOG_LOCAL5" citdl="integer"/>
      <variable ilk="constant" name="LOG_LOCAL6" citdl="integer"/>
      <variable ilk="constant" name="LOG_LOCAL7" citdl="integer"/>
      <variable ilk="constant" name="LOG_PID" citdl="integer"/>
      <variable ilk="constant" name="LOG_CONS" citdl="integer"/>
      <variable ilk="constant" name="LOG_ODELAY" citdl="integer"/>
      <variable ilk="constant" name="LOG_NDELAY" citdl="integer"/>
      <variable ilk="constant" name="LOG_NOWAIT" citdl="integer"/>
      <variable ilk="constant" name="LOG_PERROR" citdl="integer"/>
      <variable ilk="constant" name="EXTR_OVERWRITE" citdl="integer"/>
      <variable ilk="constant" name="EXTR_SKIP" citdl="integer"/>
      <variable ilk="constant" name="EXTR_PREFIX_SAME" citdl="integer"/>
      <variable ilk="constant" name="EXTR_PREFIX_ALL" citdl="integer"/>
      <variable ilk="constant" name="EXTR_PREFIX_INVALID" citdl="integer"/>
      <variable ilk="constant" name="EXTR_PREFIX_IF_EXISTS" citdl="integer"/>
      <variable ilk="constant" name="EXTR_IF_EXISTS" citdl="integer"/>
      <variable ilk="constant" name="EXTR_REFS" citdl="integer"/>
      <variable ilk="constant" name="SORT_ASC" citdl="integer"/>
      <variable ilk="constant" name="SORT_DESC" citdl="integer"/>
      <variable ilk="constant" name="SORT_REGULAR" citdl="integer"/>
      <variable ilk="constant" name="SORT_NUMERIC" citdl="integer"/>
      <variable ilk="constant" name="SORT_STRING" citdl="integer"/>
      <variable ilk="constant" name="CASE_LOWER" citdl="integer"/>
      <variable ilk="constant" name="CASE_UPPER" citdl="integer"/>
      <variable ilk="constant" name="COUNT_NORMAL" citdl="integer"/>
      <variable ilk="constant" name="COUNT_RECURSIVE" citdl="integer"/>
      <variable ilk="constant" name="ASSERT_ACTIVE" citdl="integer"/>
      <variable ilk="constant" name="ASSERT_CALLBACK" citdl="integer"/>
      <variable ilk="constant" name="ASSERT_BAIL" citdl="integer"/>
      <variable ilk="constant" name="ASSERT_WARNING" citdl="integer"/>
      <variable ilk="constant" name="ASSERT_QUIET_EVAL" citdl="integer"/>
      <variable ilk="constant" name="STREAM_USE_PATH" citdl="integer"/>
      <variable ilk="constant" name="STREAM_IGNORE_URL" citdl="integer"/>
      <variable ilk="constant" name="STREAM_ENFORCE_SAFE_MODE" citdl="integer"/>
      <variable ilk="constant" name="STREAM_REPORT_ERRORS" citdl="integer"/>
      <variable ilk="constant" name="STREAM_MUST_SEEK" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_GIF" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_JPEG" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_PNG" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_SWF" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_PSD" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_BMP" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_TIFF_II" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_TIFF_MM" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_JPC" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_JP2" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_JPX" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_JB2" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_IFF" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_WBMP" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_JPEG2000" citdl="integer"/>
      <variable ilk="constant" name="IMAGETYPE_XBM" citdl="integer"/>
      <variable ilk="constant" name="PREG_PATTERN_ORDER" citdl="integer"/>
      <variable ilk="constant" name="PREG_SET_ORDER" citdl="integer"/>
      <variable ilk="constant" name="PREG_OFFSET_CAPTURE" citdl="integer"/>
      <variable ilk="constant" name="PREG_SPLIT_NO_EMPTY" citdl="integer"/>
      <variable ilk="constant" name="PREG_SPLIT_DELIM_CAPTURE" citdl="integer"/>
      <variable ilk="constant" name="PREG_SPLIT_OFFSET_CAPTURE" citdl="integer"/>
      <variable ilk="constant" name="PREG_GREP_INVERT" citdl="integer"/>
      <variable ilk="constant" name="MYSQL_ASSOC" citdl="integer"/>
      <variable ilk="constant" name="MYSQL_NUM" citdl="integer"/>
      <variable ilk="constant" name="MYSQL_BOTH" citdl="integer"/>
      <variable ilk="constant" name="MYSQL_CLIENT_COMPRESS" citdl="integer"/>
      <variable ilk="constant" name="MYSQL_CLIENT_INTERACTIVE" citdl="integer"/>
      <variable ilk="constant" name="MYSQL_CLIENT_IGNORE_SPACE" citdl="integer"/>
      <variable ilk="constant" name="STDIN" citdl="resource"/>
      <variable ilk="constant" name="STDOUT" citdl="resource"/>
      <variable ilk="constant" name="STDERR" citdl="resource"/>
      <variable name="__LINE__" citdl="string" ilk="constant"/>
      <variable name="__FILE__" citdl="string" ilk="constant"/>
      <variable name="__FUNCTION__" citdl="string" ilk="constant"/>
      <variable name="__CLASS__" citdl="string" ilk="constant"/>
      <variable name="__METHOD__" citdl="string" ilk="constant"/>
      <variable name="_COOKIE" citdl="array"/>
      <variable name="_ENV" citdl="array"/>
      <variable name="_FILES" citdl="array"/>
      <variable name="_GET" citdl="array"/>
      <variable name="_POST" citdl="array"/>
      <variable name="_REQUEST" citdl="array"/>
      <variable name="_SERVER" citdl="array"/>
      <variable name="_SESSION" citdl="array"/>
      <variable name="HTTP_COOKIE_VARS" citdl="array"/>
      <variable name="HTTP_ENV_VARS" citdl="array"/>
      <variable name="HTTP_GET_VARS" citdl="array"/>
      <variable name="HTTP_POST_FILES" citdl="array"/>
      <variable name="HTTP_POST_VARS" citdl="array"/>
      <variable name="HTTP_SERVER_VARS" citdl="array"/>
      <variable name="HTTP_SESSION_VARS" citdl="array"/>
      <variable name="GLOBALS" citdl="array"/>
    </scope>
  </file>
</codeintel>
